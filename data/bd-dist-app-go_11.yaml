- en: 'Chapter 8: Deploying the Application on AWS'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章：在 AWS 上部署应用程序
- en: This chapter will teach you how to deploy the **API** on **Amazon Web Services**
    (**AWS**). It also goes on to explain how to serve the application through **HTTPS**
    using a custom domain name, and scale the Gin-based API on Kubernetes and **Amazon
    Elastic Container Service** (**Amazon ECS**).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将指导你如何在 **Amazon Web Services**（**AWS**）上部署 **API**。它还将进一步解释如何使用自定义域名通过 **HTTPS**
    提供应用程序，并在 Kubernetes 和 **Amazon Elastic Container Service**（**Amazon ECS**）上扩展基于
    Gin 的 API。
- en: 'As such, we will focus on the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将关注以下主题：
- en: Deploying a Gin web application on an **Amazon Elastic Compute Cloud** (**Amazon
    EC2**) instance
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 **Amazon Elastic Compute Cloud**（**Amazon EC2**）实例上部署 Gin 网络应用程序
- en: Deploying on Amazon **ECS** (**Elastic Container Service**)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Amazon **ECS**（**弹性容器服务**）上部署
- en: Deploying on Kubernetes with **Amazon Elastic Kubernetes Service** (**Amazon
    EKS**)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **Amazon Elastic Kubernetes Service**（**Amazon EKS**）在 Kubernetes 上部署
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow the instructions in this chapter, you will need the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要遵循本章的说明，你需要以下内容：
- en: A complete understanding of the previous chapter—this chapter is a follow-up
    to the previous one and it will use the same source code. Hence, some snippets
    won't be explained, to avoid repetition.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对前一章的完整理解——本章是前一章的后续，它将使用相同的源代码。因此，一些片段将不会解释，以避免重复。
- en: Previous experience of using AWS is mandatory.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 AWS 的先前经验是强制性的。
- en: A basic understanding of Kubernetes is required.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要具备对 Kubernetes 的基本理解。
- en: The code bundle for this chapter is hosted on GitHub at [https://github.com/PacktPublishing/Building-Distributed-Applications-in-Gin/tree/main/chapter08](https://github.com/PacktPublishing/Building-Distributed-Applications-in-Gin/tree/main/chapter08).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码包托管在 GitHub 上，网址为 [https://github.com/PacktPublishing/Building-Distributed-Applications-in-Gin/tree/main/chapter08](https://github.com/PacktPublishing/Building-Distributed-Applications-in-Gin/tree/main/chapter08)。
- en: Deploying on EC2 instance
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 EC2 实例上部署
- en: Throughout the course of the book, you have learned how to build a distributed
    web application using the Gin framework and how to scale the API for loading and
    testing it locally. In this section, we will cover how to deploy the following
    architecture on the cloud and serve it to external users.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的整个过程中，你已经学习了如何使用 Gin 框架构建分布式网络应用程序以及如何对 API 进行本地加载和测试的扩展。在本节中，我们将介绍如何在云上部署以下架构并向外部用户提供服务。
- en: 'An overview of the application architecture can be seen here:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里可以看到应用架构的概述：
- en: '![Figure 8.1 – Application architecture'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 8.1 – Application architecture'
- en: '](img/B17115_08_01_v2.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B17115_08_01_v2.jpg](img/B17115_08_01_v2.jpg)'
- en: Figure 8.1 – Application architecture
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1 – 应用架构
- en: AWS is the leader when it comes to cloud providers—it offers a huge range of
    infrastructure services such as load balancers, servers, databases, and network
    services.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 在云服务提供商方面是领导者——它提供了一系列基础设施服务，如负载均衡器、服务器、数据库和网络服务。
- en: To get started, create an AWS account ([https://aws.amazon.com](https://aws.amazon.com)).
    Most AWS services offer an abundance of Free Tier resources, so deploying your
    application will cost you little or nothing.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请创建一个 AWS 账户 ([https://aws.amazon.com](https://aws.amazon.com))。大多数 AWS
    服务都提供丰富的免费层资源，因此部署你的应用程序将花费你很少或没有费用。
- en: Launching an EC2 instance
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动 EC2 实例
- en: 'With the AWS account created, you are now ready to launch an EC2 instance.
    To do so, proceed as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 AWS 账户后，你现在可以启动 EC2 实例。为此，请按照以下步骤操作：
- en: Sign in to the **AWS Management Console** ([https://console.aws.amazon.com](https://console.aws.amazon.com))
    and search for **EC2**. In the **EC2** dashboard, click on the **Launch Instance**
    button to provision a new EC2 instance.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到 **AWS 管理控制台**([https://console.aws.amazon.com](https://console.aws.amazon.com))
    并搜索 **EC2**。在 **EC2** 仪表板中，单击 **启动实例**按钮以配置新的 EC2 实例。
- en: Choose **Amazon Linux 2 AMI** as an **Amazon Machine Image** (**AMI**). This
    is the **operating system** (**OS**) that will run the EC2 instance. The following
    screenshot provides an overview of this:![Figure 8.2 – AMI
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **Amazon Linux 2 AMI** 作为 **Amazon Machine Image**（**AMI**）。这是将运行 EC2 实例的
    **操作系统**（**OS**）。以下截图提供了该概述：![Figure 8.2 – AMI
- en: '](img/B17115_08_02_v2.jpg)'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B17115_08_02_v2.jpg](img/B17115_08_02_v2.jpg)'
- en: Figure 8.2 – AMI
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.2 – AMI
- en: Next, select an instance type. You can start with a `t2.micro` instance and
    upgrade later if needed. Then, click on **Configure Instance Details** and leave
    the settings at their defaults, as illustrated in the following screenshot:![Figure
    8.3 – Instance configuration
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择实例类型。您可以从`t2.micro`实例开始，如果需要，稍后升级。然后，点击**配置实例详情**并保留默认设置，如下面的截图所示：![图8.3
    – 实例配置
- en: '](img/B17115_08_03_v2.jpg)'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B17115_08_03_v2.jpg)'
- en: Figure 8.3 – Instance configuration
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Figure 8.3 – 实例配置
- en: Now, click on the `GP2` to `GP3` or provisioned IOPS.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击`GP2`到`GP3`或预配IOPS。
- en: Note
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 备注
- en: MongoDB requires fast storage. Therefore, if you're planning to host a MongoDB
    container on EC2, an EBS-optimized type can improve the **input/output** (**I/O**)
    operations.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MongoDB需要快速存储。因此，如果您计划在EC2上托管MongoDB容器，EBS优化的类型可以提高**输入/输出（I/O**）操作。
- en: Then, click on `Name=application-sg`, as illustrated in the following screenshot.
    Leave the security group at its default setting (allow inbound traffic on port
    22 for SSH). Then, click on **Review and launch**:![Figure 8.4 – Security group
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击`Name=application-sg`，如图所示。保留安全组在默认设置（允许端口22的SSH入站流量）。然后，点击**审查并启动**：![图8.4
    – 安全组
- en: '](img/B17115_08_04_v2.jpg)'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B17115_08_04_v2.jpg)'
- en: Figure 8.4 – Security group
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Figure 8.4 – 安全组
- en: Note
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 备注
- en: As a best practice, you should always restrict **Secure Shell** (**SSH**) solely
    to known static **Internet Protocol** (**IP**) addresses or networks.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为最佳实践，您应该始终仅将**安全外壳协议（SSH**）限制为已知的静态**互联网协议（IP**）地址或网络。
- en: Click on **Launch** and assign a key pair or create a new SSH key pair. Then,
    click on **Create instance**.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**启动**并分配一个密钥对或创建一个新的SSH密钥对。然后，点击**创建实例**。
- en: Head back to the **Instances** dashboard by clicking on the **View instances**
    button—it will take a few seconds for the instance to be up and running but you
    should then see it on the screen, as per the following screenshot:![Figure 8.5
    – EC2 dashboard
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**查看实例**按钮返回**实例**仪表板——实例启动并运行可能需要几秒钟，但您应该能在屏幕上看到它，如下面的截图所示：![图8.5 – EC2仪表板
- en: '](img/Figure_8.5_B17115.jpg)'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.5_B17115.jpg)'
- en: Figure 8.5 – EC2 dashboard
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Figure 8.5 – EC2仪表板
- en: 'Once the instance is ready, open your terminal session and SSH to the instance
    using the public `key.pem` with your SSH key pair, as illustrated here:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦实例准备就绪，打开您的终端会话，使用您的SSH密钥对中的公钥`key.pem`通过SSH连接到实例，如图所示：
- en: '[PRE0]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A confirmation message will appear—enter `Yes`. Then, issue the following commands
    to install Git, `sudo su` command is used to provide the privileges at the root
    level.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认消息将出现——输入`Yes`。然后，运行以下命令安装Git，`sudo su`命令用于在根级别提供权限。
- en: 'Here, we are using the Docker `19.03.13-ce` and Docker Compose `1.29.0` versions:'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里，我们使用Docker `19.03.13-ce` 和 Docker Compose `1.29.0` 版本：
- en: '![Figure 8.6 – Docker version'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.6 – Docker版本'
- en: '](img/Figure_8.6_B17115.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.6_B17115.jpg)'
- en: Figure 8.6 – Docker version
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 8.6 – Docker版本
- en: You have successfully provisioned and launched an EC2 instance.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功配置并启动了EC2实例。
- en: 'With the EC2 instance up and running, you can deploy your **Docker Compose**
    stack covered in [*Chapter 6*](B17115_06_Final_JM_ePub.xhtml#_idTextAnchor103),
    *Scaling a Gin Application*. To do so, perform the following steps:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当EC2实例运行时，您可以部署在第[*第6章*](B17115_06_Final_JM_ePub.xhtml#_idTextAnchor103)中介绍的**Docker
    Compose**堆栈，*扩展Gin应用程序*。为此，执行以下步骤：
- en: 'Clone the following GitHub repository, which includes the components and files
    for the distributed Gin web application:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆以下GitHub仓库，其中包含分布式Gin Web应用程序的组件和文件：
- en: '[PRE1]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'version: "3.9"'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'version: "3.9"'
- en: 'services:'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'services:'
- en: 'api:'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'api:'
- en: 'image: api'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'image: api'
- en: 'environment:'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'environment:'
- en: '- MONGO_URI=mongodb://admin:password'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- MONGO_URI=mongodb://admin:password'
- en: '@mongodb:27017/test?authSource=admin'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@mongodb:27017/test?authSource=admin'
- en: '&readPreference=primary&ssl=false'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '&readPreference=primary&ssl=false'
- en: '- MONGO_DATABASE=demo'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- MONGO_DATABASE=demo'
- en: '- REDIS_URI=redis:6379'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- REDIS_URI=redis:6379'
- en: 'external_links:'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'external_links:'
- en: '- mongodb'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- mongodb'
- en: '- redis'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- redis'
- en: 'scale: 5'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'scale: 5'
- en: 'dashboard:'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'dashboard:'
- en: 'image: dashboard'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'image: dashboard'
- en: 'redis:'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'redis:'
- en: 'image: redis'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'image: redis'
- en: 'mongodb:'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'mongodb:'
- en: 'image: mongo:4.4.3'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'image: mongo:4.4.3'
- en: 'environment:'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'environment:'
- en: '- MONGO_INITDB_ROOT_USERNAME=admin'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- MONGO_INITDB_ROOT_USERNAME=admin'
- en: '- MONGO_INITDB_ROOT_PASSWORD=password'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- MONGO_INITDB_ROOT_PASSWORD=password'
- en: 'nginx:'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'nginx:'
- en: 'image: nginx'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'image: nginx'
- en: 'ports:'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'ports:'
- en: '- 80:80'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 80:80'
- en: 'volumes:'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'volumes:'
- en: '- $PWD/nginx.conf:/etc/nginx/nginx.conf'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- $PWD/nginx.conf:/etc/nginx/nginx.conf'
- en: 'depends_on:'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'depends_on:'
- en: '- api'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- api'
- en: '- dashboard'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- dashboard'
- en: '[PRE2]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Before deploying the stack, build the Docker images for the RESTful API and
    the web dashboard. Head to the corresponding folder of each service and run the
    `docker build` command. For instance, the following commands are used to build
    the Docker image for the RESTful API:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在部署堆栈之前，构建RESTful API和Web仪表板的Docker镜像。转到每个服务的相应文件夹并运行`docker build`命令。例如，以下命令用于构建RESTful
    API的Docker镜像：
- en: '[PRE3]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The command output is shown here:'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 命令输出如下：
- en: '![Figure 8.7 – Docker build logs'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 8.7 – Docker构建日志'
- en: '](img/Figure_8.7_B17115.jpg)'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.7_B17115.jpg)'
- en: Figure 8.7 – Docker build logs
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.7 – Docker构建日志
- en: 'After building the images, issue the following command:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建镜像后，发出以下命令：
- en: '[PRE4]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The services will be deployed, and five instances of the API will be created,
    as illustrated in the following screenshot:'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 服务将被部署，并将创建五个API实例，如下截图所示：
- en: '![Figure 8.8 – Docker application'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.8 – Docker应用程序'
- en: '](img/Figure_8.8_B17115.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.8_B17115.jpg)'
- en: Figure 8.8 – Docker application
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.8 – Docker应用程序
- en: 'With the application up and running, go to the web browser and paste the IP
    address that is used to connect to your EC2 instance. You should then see the
    following error message:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序启动并运行后，转到网页浏览器并粘贴用于连接到您的EC2实例的IP地址。然后，您应该看到以下错误消息：
- en: '![Figure 8.9 – Request timeout'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.9 – 请求超时'
- en: '](img/Figure_8.9_B17115.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.9_B17115.jpg)'
- en: Figure 8.9 – Request timeout
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.9 – 请求超时
- en: 'To fix that, you need to allow inbound traffic on port 80, which is the port
    the nginx proxy is exposed to. Head to **Security Groups** from the EC2 dashboard
    and search for the security group assigned to the EC2 instance in which the application
    is running. Once found, add an inbound rule, as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要修复此问题，您需要允许80端口的入站流量，这是nginx代理暴露的端口。转到EC2仪表板中的**安全组**，并搜索分配给运行应用程序的EC2实例的安全组。找到后，添加一个入站规则，如下所示：
- en: '![Figure 8.10 – Inbound rule on port 80'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.10 – 端口80上的入站规则'
- en: '](img/Figure_8.10_B17115.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.10_B17115.jpg)'
- en: Figure 8.10 – Inbound rule on port 80
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.10 – 端口80上的入站规则
- en: 'Head back to your web browser and issue an HTTP request to the instance IP.
    This time, the nginx proxy will be hit and a response will be returned. If you
    issue a request to the `/api/recipes` endpoint, an empty array should be returned,
    as illustrated in the following screenshot:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到您的网页浏览器并向实例IP发出HTTP请求。这次，nginx代理将被调用并返回响应。如果您向`/api/recipes`端点发出请求，应该返回一个空数组，如下截图所示：
- en: '![Figure 8.11 – RESTful API response'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.11 – RESTful API响应'
- en: '](img/Figure_8.11_B17115.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.11_B17115.jpg)'
- en: Figure 8.11 – RESTful API response
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.11 – RESTful API响应
- en: 'The MongoDB `recipes` collection is empty. So, create a new recipe by issuing
    a `POST` request on the `/api/recipes` endpoint with the following JSON payload:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB的`recipes`集合为空。因此，通过在`/api/recipes`端点上发出以下JSON有效负载的`POST`请求来创建一个新的食谱：
- en: '![Figure 8.12 – A POST request to create a new recipe'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.12 – 创建新食谱的POST请求'
- en: '](img/Figure_8.12_B17115.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.12_B17115.jpg)'
- en: Figure 8.12 – A POST request to create a new recipe
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.12 – 创建新食谱的POST请求
- en: 'Make sure to include an `Authorization` header in the `POST` request. Refresh
    the web browser page and a recipe should then be returned on the web dashboard,
    as illustrated in the following screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在`POST`请求中包含`Authorization`头。刷新网页浏览器页面，然后应该在网页仪表板上返回一个食谱，如下截图所示：
- en: '![Figure 8.13 – New recipe'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.13 – 新食谱'
- en: '](img/Figure_8.13_B17115.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.13_B17115.jpg)'
- en: Figure 8.13 – New recipe
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.13 – 新食谱
- en: 'Now, click on the **Login** button, and you should have an unsecure origin
    error, as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，单击**登录**按钮，您应该会有一个不安全的源错误，如下所示：
- en: '![Figure 8.14 – Auth0 requires the client to be run though HTTPS'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.14 – Auth0要求客户端通过HTTPS运行'
- en: '](img/Figure_8.14_B17115.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.14_B17115.jpg)'
- en: Figure 8.14 – Auth0 requires the client to be run though HTTPS
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.14 – Auth0要求客户端通过HTTPS运行
- en: The error is due to Auth0 needing to be run on a web application served through
    the HTTPS protocol. You can serve the application through HTTPS by setting up
    a **load balancer** on top of the EC2 instance.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 错误是由于Auth0需要在通过HTTPS协议提供服务的Web应用程序上运行。您可以通过在EC2实例之上设置一个**负载均衡器**来通过HTTPS提供服务。
- en: SSL offloading with an application load balancer
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用应用程序负载均衡器进行SSL卸载
- en: 'To run the API through HTTPS, we need a **Secure Sockets Layer** (**SSL**)
    certificate. You can easily get an SSL certificate with **AWS Certificate Manager**
    (**ACM**). This service makes it easy to provision, manage, and deploy SSL/**Transport
    Layer Security** (**TLS**) certificates on AWS-managed resources. To generate
    an SSL certificate, proceed as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过 HTTPS 运行 API，我们需要一个 **安全套接字层**（**SSL**）证书。您可以通过 **AWS 证书管理器**（**ACM**）轻松获取
    SSL 证书。此服务使得在 AWS 管理资源上配置、管理和部署 SSL/**传输层安全性**（**TLS**）证书变得容易。要生成 SSL 证书，请按照以下步骤操作：
- en: Head to the ACM dashboard and request a free SSL certificate for your domain
    name by clicking on the **Request a certificate** button and choosing **Request
    a public certificate**.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 ACM 仪表板，通过点击 **请求证书** 按钮，并选择 **请求公共证书** 来为您的域名请求免费的 SSL 证书。
- en: On the `domain.com`.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `domain.com` 上。
- en: Note
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 备注
- en: The `domain.com` domain name can have multiple subdomains, such as `sandbox.domain.com`,
    `production.domain.com`, and `api.domain.com`.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`domain.com` 域名可以有多个子域名，例如 `sandbox.domain.com`、`production.domain.com` 和 `api.domain.com`。'
- en: On the **Select validation method** page, choose **DNS validation** and add
    a **Canonical Name** (**CNAME**) record provided by ACM to your **Domain Name
    System** (**DNS**) configuration. Issuing public certificates might take a few
    minutes, but once the domain name is validated, the certificate will be issued
    and will appear in the ACM dashboard with the status set to **Issued**, as illustrated
    in the following screenshot:![Figure 8.15 – Requesting a public certificate with
    ACM
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **选择验证方法** 页面上，选择 **DNS 验证** 并将 ACM 提供的 **规范名称**（**CNAME**）记录添加到您的 **域名系统**（**DNS**）配置中。颁发公共证书可能需要几分钟，但一旦域名验证完成，证书将被颁发，并在
    ACM 仪表板中显示为 **已颁发** 状态，如下面的截图所示：![图 8.15 – 使用 ACM 请求公共证书
- en: '](img/Figure_8.15_B17115.jpg)'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.15_B17115.jpg)'
- en: Figure 8.15 – Requesting a public certificate with ACM
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.15 – 使用 ACM 请求公共证书
- en: Next, create an application load balancer from the **Load Balancers** section
    within the EC2 dashboard, as illustrated in the following screenshot:![Figure
    8.16 – Application load balancer
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从 EC2 仪表板中的 **负载均衡器** 部分创建一个应用程序负载均衡器，如下面的截图所示：![图 8.16 – 应用程序负载均衡器
- en: '](img/Figure_8.16_B17115.jpg)'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.16_B17115.jpg)'
- en: Figure 8.16 – Application load balancer
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.16 – 应用程序负载均衡器
- en: On the subsequent page, enter a name for the load balancer and specify the scheme
    as **Internet facing** from the drop-down list. In the **Availability Zones**
    section, select a subnet from each **availability zone** (**AZ**) for resiliency.
    Then, under the **Listeners** section, add an HTTPS listener and an HTTP listener
    on ports 443 and 80, respectively, as illustrated in the following screenshot:![Figure
    8.17 – HTTP and HTTPS listeners
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在随后的页面上，输入负载均衡器的名称，并从下拉列表中指定方案为 **面向互联网**。在 **可用区** 部分中，为每个 **可用区**（**AZ**）选择一个子网以提高弹性。然后，在
    **监听器** 部分中，添加一个 HTTPS 监听器和 HTTP 监听器，分别位于端口 443 和 80，如下面的截图所示：![图 8.17 – HTTP
    和 HTTPS 监听器
- en: '](img/B17115_08_17_v2.jpg)'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17115_08_17_v2.jpg)'
- en: Figure 8.17 – HTTP and HTTPS listeners
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.17 – HTTP 和 HTTPS 监听器
- en: Click on the **Configure Security Settings** button to proceed and select the
    certificate created in ACM from the drop-down list, as illustrated in the following
    screenshot:![Figure 8.18 – Certificate configuration
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **配置安全设置** 按钮继续操作，并从下拉列表中选择 ACM 中创建的证书，如下面的截图所示：![图 8.18 – 证书配置
- en: '](img/B17115_08_18_v2.jpg)'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17115_08_18_v2.jpg)'
- en: Figure 8.18 – Certificate configuration
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.18 – 证书配置
- en: Now, click on **Configure Routing** and create a new target group called **application**.
    Ensure the protocol is set to HTTP and the port to 80 because the nginx proxy
    is listening on port 80\. With this configuration, traffic between the load balancer
    and the instance will be transmitted using HTTP, even for HTTPS requests made
    by the client to the load balancer. You can see the configuration in the following
    screenshot:![Figure 8.19 – Configuring a target group
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击 **配置路由** 并创建一个新的名为 **application** 的目标组。确保协议设置为 HTTP，端口设置为 80，因为 nginx
    代理监听端口 80。使用此配置，负载均衡器和实例之间的流量将使用 HTTP 传输，即使客户端向负载均衡器发出的 HTTPS 请求也是如此。您可以在以下截图中查看配置：![图
    8.19 – 配置目标组
- en: '](img/B17115_08_19_v2.jpg)'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17115_08_19_v2.jpg)'
- en: Figure 8.19 – Configuring a target group
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.19 – 配置目标组
- en: In the `HTTP` and the path as `/api/recipes`.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `HTTP` 和路径 `/api/recipes` 上。
- en: Click on **Register Targets**, select the EC2 instance on which the application
    is running, and click on **Add to registered**, as follows:![Figure 8.20 – Registering
    an EC2 instance
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**注册目标**，选择运行应用程序的EC2实例，然后点击**添加到已注册**，如下所示：![图8.20 – 注册EC2实例
- en: '](img/Figure_8.20_B17115.jpg)'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.20_B17115.jpg)'
- en: Figure 8.20 – Registering an EC2 instance
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.20 – 注册EC2实例
- en: 'When you have finished selecting instances, choose **Next: Review**. Review
    the settings that you selected and click on the **Create** button. The provisioning
    process should take a few minutes, but you should then see a screen like this:![Figure
    8.21 – Load balancer DNS name'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你完成实例选择后，选择**下一步：审查**。审查你选择的设置，然后点击**创建**按钮。配置过程可能需要几分钟，但你应该会看到如下屏幕：![图8.21
    – 负载均衡器DNS名称
- en: '](img/Figure_8.21_B17115.jpg)'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.21_B17115.jpg)'
- en: Figure 8.21 – Load balancer DNS name
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.21 – 负载均衡器DNS名称
- en: 'Once the state is `A` record that points to the public DNS name of the load
    balancer in Route 53 ([https://aws.amazon.com/route53/](https://aws.amazon.com/route53/))
    or in your DNS registrar, as illustrated in the following screenshot:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦状态变为指向Route 53中负载均衡器的公共DNS名称的A记录（[https://aws.amazon.com/route53/](https://aws.amazon.com/route53/））或在你的DNS注册商那里，如图下所示：
- en: '![Figure 8.22 – Route 53 new A record'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.22 – Route 53新A记录'
- en: '](img/Figure_8.22_B17115.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.22_B17115.jpg)'
- en: Figure 8.22 – Route 53 new A record
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.22 – Route 53新A记录
- en: Once you make the necessary changes, it can take up to 48 hours for the change
    to propagate across other DNS servers.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你做出必要的更改，更改可能需要长达48小时才能在其他DNS服务器上传播。
- en: 'Verify that the changes to your domain name record have propagated by browsing
    to [HTTPS://recipes.domain.com](HTTPS://recipes.domain.com). This should result
    in the load balancer displaying the secure web dashboard of the application. Click
    on the *padlock* icon in the browser address bar and it should display the details
    of the domain and the SSL certificate, as illustrated in the following screenshot:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 通过浏览到[HTTPS://recipes.domain.com](HTTPS://recipes.domain.com)来验证你的域名记录更改是否已传播。这应该会导致负载均衡器显示应用程序的安全Web仪表板。点击浏览器地址栏中的*锁*图标，它应该显示域名和SSL证书的详细信息，如图下所示：
- en: '![Figure 8.23 – Serving through HTTPS'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.23 – 通过HTTPS提供服务'
- en: '](img/Figure_8.23_B17115.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.23_B17115.jpg)'
- en: Figure 8.23 – Serving through HTTPS
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.23 – 通过HTTPS提供服务
- en: Your application load balancer has now been configured with an SSL certificate
    for your Gin application running on AWS. You can use the Auth0 service to sign
    in and add new recipes from the web dashboard.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用程序负载均衡器现在已配置了运行在AWS上的Gin应用程序的SSL证书。你可以使用Auth0服务通过Web仪表板登录并添加新食谱。
- en: Deploying on Amazon ECS
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Amazon ECS上部署
- en: 'In the previous section, we learned how to deploy an EC2 instance and configure
    it to run our Gin application on it. In this section, we will learn how to get
    the same results without managing an EC2 instance. AWS proposes two container
    orchestration services: **ECS** and **EKS**.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们学习了如何部署一个EC2实例并配置它来运行我们的Gin应用程序。在本节中，我们将学习如何在不需要管理EC2实例的情况下获得相同的结果。AWS提出了两种容器编排服务：**ECS**和**EKS**。
- en: In this section, you will learn about ECS, which is a fully managed container
    orchestration service. Before deploying our application to ECS, we need to store
    the application Docker images in a remote repository. That's where an **Elastic
    Container Registry** (**ECR**) repository comes into play.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将了解ECS，这是一个完全管理的容器编排服务。在我们将应用程序部署到ECS之前，我们需要将应用程序Docker镜像存储在远程仓库中。这就是**弹性容器注册库**（**ECR**）仓库发挥作用的地方。
- en: Storing images in a private repository
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在私有仓库中存储镜像
- en: 'ECR is a widely used private Docker registry. To store images in a private
    repository, you need to create a repository in ECR first. To achieve that, follow
    these steps:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: ECR是一个广泛使用的私有Docker注册库。要在私有仓库中存储镜像，你首先需要在ECR中创建一个仓库。为了实现这一点，请按照以下步骤操作：
- en: Jump to the ECR dashboard from the `mlabouardy/recipes-api` as a name for your
    Gin RESTful API repository, as illustrated in the following screenshot:![Figure
    8.24 – New ECR repository
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`mlabouardy/recipes-api`跳转到ECR仪表板，将其作为你的Gin RESTful API仓库的名称，如图下所示：![图8.24
    – 新的ECR仓库
- en: '](img/Figure_8.24_B17115.jpg)'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.24_B17115.jpg)'
- en: Figure 8.24 – New ECR repository
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.24 – 新的ECR仓库
- en: Note
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: You can host your Docker images in Docker Hub. If you go with this approach,
    you can skip this part.
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以在Docker Hub上托管你的Docker镜像。如果你选择这种方法，你可以跳过这部分。
- en: Click on the **Create repository** button, and then select the repository and
    click on **View push commands**. Copy the commands to authenticate and push the
    API image to the repository, as illustrated in the following screenshot:![Figure
    8.25 – ECR login and push commands
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建存储库**按钮，然后选择存储库并点击**查看推送命令**。复制命令以进行身份验证并将API镜像推送到存储库，如下面的截图所示：![图8.25
    – ECR登录和推送命令
- en: '](img/Figure_8.25_B17115.jpg)'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.25_B17115.jpg)'
- en: Figure 8.25 – ECR login and push commands
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.25 – ECR登录和推送命令
- en: Note
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: For a step-by-step guide on how to install the AWS **command-line interface**
    (**CLI**), refer to the official documentation at [https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html).
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关如何安装AWS **命令行界面**（**CLI**）的逐步指南，请参阅官方文档[https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html)。
- en: 'Follow the commands shown in *Figure 8.25* to authenticate with ECR. Tag the
    image and push it to the remote repository, as follows (substitute the `ID`, `REGION`,
    and `USER` variables with your own values):'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照图8.25中显示的命令进行ECR的身份验证。标记镜像并将其推送到远程存储库，如下所示（将`ID`、`REGION`和`USER`变量替换为您自己的值）：
- en: '[PRE5]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The command logs are shown here:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 命令日志如下所示：
- en: '![Figure 8.26 – Pushing an image to ECR'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.26 – 将镜像推送到ECR'
- en: '](img/Figure_8.26_B17115.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.26_B17115.jpg)'
- en: Figure 8.26 – Pushing an image to ECR
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.26 – 将镜像推送到ECR
- en: 'The image will now be available on ECR, as illustrated in the following screenshot:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 镜像现在将在ECR上可用，如下面的截图所示：
- en: '![Figure 8.27 – Image stored on ECR'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.27 – 存储在ECR上的镜像'
- en: '](img/Figure_8.27_B17115.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.27_B17115.jpg)'
- en: Figure 8.27 – Image stored on ECR
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.27 – 存储在ECR上的镜像
- en: With the Docker image stored in ECR, you can go ahead and deploy the application
    in ECS.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在ECR中存储Docker镜像后，您可以在ECS中部署应用程序。
- en: 'Now, update the `docker-compose.yml` file to reference the ECR repository URI
    in the `image` section, as follows:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，更新`docker-compose.yml`文件，在`image`部分引用ECR存储库URI，如下所示：
- en: '[PRE6]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Creating an ECS cluster
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建ECS集群
- en: Our `docker-compose.yml` file now references the images stored in ECR. We're
    ready to spin up the ECS cluster and deploy the application on it.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`docker-compose.yml`文件现在引用了存储在ECR中的镜像。我们已准备好启动ECS集群并在其上部署应用程序。
- en: You can deploy an ECS cluster either manually from the **AWS Management Console**
    or through the AWS ECS CLI. Follow the official instructions to install the Amazon
    ECS CLI based on your OS from [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI_installation.htm](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI_installation.htm).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从**AWS管理控制台**手动部署ECS集群，或通过AWS ECS CLI进行部署。根据您的操作系统，遵循官方说明从[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI_installation.htm](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI_installation.htm)安装Amazon
    ECS CLI。
- en: 'Once installed, configure the Amazon ECS CLI by providing the AWS credentials
    and the AWS region in which to create the cluster, as follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，通过提供AWS凭证和创建集群的AWS区域来配置Amazon ECS CLI，如下所示：
- en: '[PRE7]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Before provisioning an ECS cluster, define a task execution `IAM` role to allow
    the Amazon ECS container agent to make AWS API calls on our behalf. Create a file
    named `task-execution-assule-role.json` with the following content:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置ECS集群之前，定义一个任务执行`IAM`角色，以便允许Amazon ECS容器代理代表我们调用AWS API。创建一个名为`task-execution-assule-role.json`的文件，并包含以下内容：
- en: '[PRE8]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a task execution role using the JSON file, and attach the `AmazonECSTaskExecutionRolePolicy`
    task execution role policy to it, as follows:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JSON文件创建任务执行角色，并将`AmazonECSTaskExecutionRolePolicy`任务执行角色策略附加到它，如下所示：
- en: '[PRE9]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Complete the configuration with the following command, the default cluster
    name, and launch type. Then, create an Amazon ECS cluster with the `ecs-cli` `up`
    command:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令完成配置，默认集群名称和启动类型。然后，使用`ecs-cli`的`up`命令创建Amazon ECS集群：
- en: '[PRE10]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This command may take a few minutes to complete as your resources (EC2 instances,
    load balancers, security groups, and so on) are created. The output of this command
    is shown here:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令可能需要几分钟才能完成，因为您的资源（EC2实例、负载均衡器、安全组等）正在创建。此命令的输出如下所示：
- en: '![Figure 8.28 – Creating an ECS cluster'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.28 – 创建ECS集群'
- en: '](img/Figure_8.28_B17115.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.28_B17115.jpg)'
- en: Figure 8.28 – Creating an ECS cluster
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.28 – 创建ECS集群
- en: 'Jump to the ECS dashboard—the sandbox cluster should be up and running, as
    it is in the following screenshot:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 跳转到ECS仪表板——沙盒集群应该已经启动并运行，如下面的截图所示：
- en: '![Figure 8.29 – Sandbox cluster'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.29 – 沙盒集群'
- en: '](img/Figure_8.29_B17115.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.29_B17115.jpg)'
- en: Figure 8.29 – Sandbox cluster
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.29 – 沙盒集群
- en: 'To deploy the application, you can use the `docker-compose` file provided in
    the previous section. In addition to that, there are certain parameters specific
    to Amazon ECS that you need to provide in the config file, such as the following:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署应用程序，您可以使用上一节中提供的`docker-compose`文件。除了这些，您还需要在配置文件中提供某些特定于Amazon ECS的参数，如下所示：
- en: '**Subnets**: To be replaced with a list of public subnets where the EC2 instances
    should be deployed'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**子网**：应替换为EC2实例应部署的公共子网列表'
- en: '**Security group and resource usage**: **Central processing unit** (**CPU**)
    and memory'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全组和资源使用**：**中央处理单元**（**CPU**）和内存'
- en: 'Create an `ecs-params.yml` file with the following content:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个包含以下内容的`ecs-params.yml`文件：
- en: '[PRE11]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, deploy the `docker compose` file to the cluster with the following command.
    The `--create-log-groups` option creates the CloudWatch log groups for the container
    logs:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用以下命令将`docker compose`文件部署到集群中。`--create-log-groups`选项为容器日志创建CloudWatch日志组：
- en: '[PRE12]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The deployment logs are shown here:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 部署日志如下所示：
- en: '![Figure 8.30 – Task deployment'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.30 – 任务部署'
- en: '](img/Figure_8.30_B17115.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.30_B17115.jpg)'
- en: Figure 8.30 – Task deployment
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.30 – 任务部署
- en: 'An `application` task will be created. A **task** is a set of metadata (memory,
    CPU, port mapping, environment variables) that describes how a container should
    be deployed. You can see an overview of this here:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 将创建一个`application`任务。**任务**是一组元数据（内存、CPU、端口映射、环境变量），它描述了容器应该如何部署。您可以在以下位置查看其概述：
- en: '![Figure 8.31 – Task definition'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.31 – 任务定义'
- en: '](img/Figure_8.31_B17115.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.31_B17115.jpg)'
- en: Figure 8.31 – Task definition
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.31 – 任务定义
- en: 'Using the AWS CLI, add a security group rule to allow inbound traffic on port
    80, as follows:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 使用AWS CLI，添加一个安全组规则以允许80端口的入站流量，如下所示：
- en: '[PRE13]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Issue the following command to view the containers that are running in ECS:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 输入以下命令以查看在ECS中运行的容器：
- en: '[PRE14]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The command will list the containers running and also the IP address and port
    of the nginx service. If you point your web browser at that address, you should
    see the web dashboard.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将列出正在运行的容器以及nginx服务的IP地址和端口号。如果您将网络浏览器指向该地址，您应该能看到Web仪表板。
- en: Great! You now have a running ECS cluster with the Dockerized Gin application.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！您现在有一个运行中的ECS集群，其中包含Docker化的Gin应用程序。
- en: Deploying on Kubernetes with Amazon EKS
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Amazon EKS在Kubernetes上部署
- en: ECS might be a good solution for beginners and small workloads. However, for
    large deployment and at a certain scale, you might want to consider shifting to
    Kubernetes (also known as **K8s**). For those of you who are AWS power users,
    Amazon EKS is a natural fit.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: ECS可能是一个适合初学者和小型工作负载的好解决方案。然而，对于大型部署和一定规模，您可能需要考虑转向Kubernetes（也称为**K8s**）。对于那些AWS高级用户，Amazon
    EKS是一个自然的选择。
- en: AWS offers a managed Kubernetes solution under the EKS service.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: AWS在EKS服务下提供了一种托管的Kubernetes解决方案。
- en: 'To get started, we need to deploy an EKS cluster, as follows:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们需要部署一个EKS集群，如下所示：
- en: Jump to the EKS dashboard and create a new cluster with the following parameters:![Figure
    8.32 – EKS cluster creation
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 跳转到EKS仪表板，并使用以下参数创建一个新的集群：![图8.32 – EKS集群创建
- en: '](img/Figure_8.32_B17115.jpg)'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.32_B17115.jpg)'
- en: Figure 8.32 – EKS cluster creation
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.32 – EKS集群创建
- en: The cluster `IAM` role should include the following `AmazonEKSWorkerNodePolicy`,
    `AmazonEKS_CNI_Policy`, and `AmazonEC2ContainerRegistryReadOnly`.
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 集群的`IAM`角色应包括以下`AmazonEKSWorkerNodePolicy`、`AmazonEKS_CNI_Policy`和`AmazonEC2ContainerRegistryReadOnly`。
- en: On the **Specify networking** page, select an existing **virtual private cloud**
    (**VPC**) to use for the cluster and subnets, as illustrated in the following
    screenshot. Leave the rest at their default settings:![Figure 8.33 – EKS network
    configuration
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**指定网络**页面，选择一个现有的**虚拟专用云**（**VPC**）用于集群和子网，如图所示。其余部分保持默认设置：![图8.33 – EKS网络配置
- en: '](img/Figure_8.33_B17115.jpg)'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.33_B17115.jpg)'
- en: Figure 8.33 – EKS network configuration
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.33 – EKS网络配置
- en: For cluster endpoint access, enable public access for simplicity. For a production
    usage, restrict access to your network **Classless Inter-Domain Routing** (**CIDR**)
    or enable only private access to the cluster API.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于集群端点访问，为了简单起见，启用公共访问。对于生产使用，限制对您的网络**无类别域间路由**（**CIDR**）的访问或仅启用对集群API的私有访问。
- en: Then, on the **Configure Logging** page, enable all log types to be able to
    troubleshoot or debug network issues from the CloudWatch console easily.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在 **配置日志记录** 页面上，启用所有日志类型，以便能够轻松地从 CloudWatch 控制台调试或排除网络问题。
- en: Review the information and click on `eksctl`, head over to the official guide
    at [https://docs.aws.amazon.com/eks/latest/userguide/create-cluster.html](https://docs.aws.amazon.com/eks/latest/userguide/create-cluster.html).
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看信息，点击 `eksctl`，前往官方指南 [https://docs.aws.amazon.com/eks/latest/userguide/create-cluster.html](https://docs.aws.amazon.com/eks/latest/userguide/create-cluster.html)。
- en: Once the cluster is in an **Active** state, create a managed Node Group on which
    the containers will be running.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦集群处于 **活动** 状态，创建一个托管节点组，容器将在其中运行。
- en: Click on the cluster name and select the `workers` and create a Node IAM role,
    as illustrated in the following screenshot:![Figure 8.35 – EKS Node Group
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击集群名称，选择 `workers` 并创建一个节点 IAM 角色，如图所示：![图 8.35 – EKS 节点组
- en: '](img/Figure_8.35_B17115.jpg)'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.35_B17115.jpg)'
- en: Figure 8.35 – EKS Node Group
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.35 – EKS 节点组
- en: Note
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on how to configure a Node Group, refer to the official
    documentation at [https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html#create-worker-node-role](https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html#create-worker-node-role).
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关如何配置节点组的更多信息，请参阅官方文档 [https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html#create-worker-node-role](https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html#create-worker-node-role)。
- en: On the subsequent page, choose `Amazon Linux 2` as an AMI and select `t3.medium`
    `On-Demand` instances, as illustrated in the following screenshot:![Figure 8.36
    – Workers configuration
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一页上，选择 `Amazon Linux 2` 作为 AMI，并选择 `t3.medium` `按需` 实例，如图所示：![图 8.36 – 工作节点配置
- en: '](img/Figure_8.36_B17115.jpg)'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.36_B17115.jpg)'
- en: Figure 8.36 – Workers configuration
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.36 – 工作节点配置
- en: Note
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: For a production usage, you might use `Spot-Instances` instead of `On-Demand`.
    `Spot-Instances` usually comes with a good discount in price because of possibile
    spontaneous interruptions. Those interruptions can be gracefully handled by Kubernetes,
    leaving you with extra money.
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于生产使用，您可能会使用 `Spot-Instances` 而不是 `按需`。由于可能出现的突发中断，`Spot-Instances` 通常会有很好的折扣。这些中断可以被
    Kubernetes 优雅地处理，让您节省额外的费用。
- en: 'The following figure shows how configuration is scaled:'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下图示显示了配置是如何进行扩展的：
- en: '![Figure 8.37 – Scaling configuration'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 8.37 – 扩展配置'
- en: '](img/Figure_8.37_B17115.jpg)'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.37_B17115.jpg)'
- en: Figure 8.37 – Scaling configuration
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.37 – 扩展配置
- en: Finally, specify the subnets where the two nodes will be deployed. On the **Review
    and create** page, review your managed Node Group configuration and click on **Create**.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，指定两个节点将要部署的子网。在 **审查和创建** 页面上，审查您的托管节点组配置，然后点击 **创建**。
- en: Now that you've provisioned your EKS cluster, you need to configure `kubectl`.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经部署了您的 EKS 集群，您需要配置 `kubectl`。
- en: Configuring kubectl
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 kubectl
- en: '`kubectl` is a command-line utility for communicating with the cluster API
    server. To install the utility, execute the following commands:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl` 是一个用于与集群 API 服务器通信的命令行工具。要安装此工具，请执行以下命令：'
- en: '[PRE15]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In this book, we are using the latest version of `kubectl`, which is 1.21.0,
    as you can see here:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们使用的是最新版本的 `kubectl`，即 1.21.0，如图所示：
- en: '[PRE16]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, generate a `kubeconfig` file with the needed credentials for `kubectl`
    to interact with the EKS cluster, as follows:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，生成一个包含 `kubectl` 与 EKS 集群交互所需凭证的 `kubeconfig` 文件，如下所示：
- en: '[PRE17]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You can now test the credentials by listing the nodes of the cluster with the
    following command:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以通过以下命令测试凭证，列出集群的节点：
- en: '[PRE18]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The command will list two nodes as expected, as we can see here:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 命令将列出两个节点，正如我们所看到的：
- en: '![Figure 8.38 – EKS nodes'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.38 – EKS 节点'
- en: '](img/Figure_8.38_B17115.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.38_B17115.jpg)'
- en: Figure 8.38 – EKS nodes
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.38 – EKS 节点
- en: Awesome! You have successfully configured `kubectl`.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！您已成功配置 `kubectl`。
- en: Now that you've set up your EKS cluster, to run services on Kubernetes, you
    will need to translate your `compose service` definition to Kubernetes objects.
    **Kompose** is an open source tool that can speed up the translation process.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经设置了您的 EKS 集群，要在 Kubernetes 上运行服务，您需要将您的 `compose service` 定义转换为 Kubernetes
    对象。**Kompose** 是一个开源工具，可以加快转换过程。
- en: Note
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Instead of writing multiple Kubernetes **YAML Ain't Markup Language** (**YAML**)
    files, you can package your whole application in a Helm chart ([https://docs.helm.sh/](https://docs.helm.sh/))
    and store it in a remote registry for distribution.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 您不必编写多个Kubernetes **YAML Ain't Markup Language** (**YAML**)文件，您可以将整个应用程序打包在Helm图表中([https://docs.helm.sh/](https://docs.helm.sh/))，并将其存储在远程注册库中进行分发。
- en: Migrating a Docker Compose workflow to Kubernetes
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将Docker Compose工作流程迁移到Kubernetes
- en: 'Kompose is an open source tool that converts `docker-compose.yml` files into
    Kubernetes deployment files. To get started with Kompose, proceed as follows:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: Kompose是一个开源工具，可以将`docker-compose.yml`文件转换为Kubernetes部署文件。要开始使用Kompose，请按照以下步骤操作：
- en: 'Navigate to the project''s GitHub release page ([https://github.com/kubernetes/kompose/releases](https://github.com/kubernetes/kompose/releases))
    and download the binary based on your OS. Here, version 1.22.0 is used:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到项目的GitHub发布页面([https://github.com/kubernetes/kompose/releases](https://github.com/kubernetes/kompose/releases))并下载适用于您的操作系统的二进制文件。这里使用的是版本1.22.0：
- en: '[PRE19]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'With Kompose installed, convert your service definitions with the following
    command:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Kompose后，使用以下命令将服务定义转换为：
- en: '[PRE20]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: After running this command, Kompose will output information about the files
    it has created, as follows:![Figure 8.39 – Translating Docker Compose to Kubernetes
    resources with Kompose
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行此命令后，Kompose将输出它创建的文件信息，如下所示：![图8.39 – 使用Kompose将Docker Compose转换为Kubernetes资源
- en: '](img/Figure_8.39_B17115.jpg)'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.39_B17115.jpg)'
- en: '[PRE21]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, create Kubernetes objects and test whether your application is working
    as expected by issuing the following command:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过以下命令创建Kubernetes对象，并测试您的应用程序是否按预期工作：
- en: '[PRE22]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You will see the following output, indicating that the objects have been created:'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将看到以下输出，表示已创建对象：
- en: '![Figure 8.40 – Deployments and services'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图8.40 – 部署和服务'
- en: '](img/Figure_8.40_B17115.jpg)'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.40_B17115.jpg)'
- en: Figure 8.40 – Deployments and services
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.40 – 部署和服务
- en: 'To check that your Pods are running, deploy the Kubernetes dashboard with the
    following command:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查您的Pod是否正在运行，使用以下命令部署Kubernetes仪表板：
- en: '[PRE23]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next, create an `eks-admin` service account and cluster role binding that you
    can use to securely connect to the dashboard with admin-level permissions, as
    follows:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个`eks-admin`服务帐户和集群角色绑定，您可以使用它以管理员权限安全地连接到仪表板，如下所示：
- en: '[PRE24]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Save the content in an `eks-admin-service-account.yml` file and apply the service
    account to your cluster with the following command:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将内容保存到`eks-admin-service-account.yml`文件中，并使用以下命令将服务帐户应用到您的集群中：
- en: '[PRE25]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Before connecting to the dashboard, retrieve an authentication token with the
    following command:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在连接到仪表板之前，使用以下命令获取认证令牌：
- en: '[PRE26]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Here''s how the Kubernetes dashboard token looks like:'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Kubernetes仪表板令牌的样式如下：
- en: '![Figure 8.41 – Kubernetes dashboard token'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图8.41 – Kubernetes仪表板令牌'
- en: '](img/Figure_8.41_B17115.jpg)'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.41_B17115.jpg)'
- en: Figure 8.41 – Kubernetes dashboard token
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.41 – Kubernetes仪表板令牌
- en: 'Run the proxy locally with the following command:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令在本地运行代理：
- en: '[PRE27]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Go to `http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#!/login`
    and paste the authentication token.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问`http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#!/login`并粘贴认证令牌。
- en: 'You should be redirected to the dashboard where you can view the distributed
    application containers, as well as their metrics and status, as illustrated in
    the following screenshot:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该被重定向到仪表板，在那里您可以查看分布式应用程序容器，以及它们的指标和状态，如下面的截图所示：
- en: '![Figure 8.42 – Kubernetes dashboard'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.42 – Kubernetes仪表板'
- en: '](img/Figure_8.42_B17115.jpg)'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.42_B17115.jpg)'
- en: Figure 8.42 – Kubernetes dashboard
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.42 – Kubernetes仪表板
- en: You can monitor your application running in EKS easily and scale the API Pods
    if needed.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以轻松地监控在EKS中运行的应用程序，并在需要时扩展API Pod。
- en: Note
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When you're done experimenting with EKS, it's a good idea to remove all the
    resources you created so that AWS doesn't charge you for them.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 当您完成对EKS的实验后，删除您创建的所有资源是个好主意，这样AWS就不会为此向您收费。
- en: Summary
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to run a Gin web application on AWS using the
    Amazon EC2 service and how to serve it though HTTPS with an application load balancer
    and ACM.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何在AWS上使用Amazon EC2服务运行Gin Web应用程序，以及如何通过应用程序负载均衡器和ACM通过HTTPS提供服务。
- en: You have also explored how to deploy the application to a managed cluster with
    ECS without managing the underlying EC2 nodes. Along the way, you covered how
    to store the Docker images in a remote registry with ECR, and how to deploy the
    application for scale with Amazon EKS.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 您还探索了如何在不管理底层EC2节点的情况下，使用ECS将应用程序部署到托管集群。在这个过程中，您还了解了如何使用ECR将Docker镜像存储在远程注册库中，以及如何使用Amazon
    EKS进行可扩展的应用程序部署。
- en: In the next chapter, you will see how to automate the deployment of your Gin
    application on AWS with a **continuous integration/continuous deployment** (**CI/CD**)
    pipeline.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将了解如何使用**持续集成/持续部署**（**CI/CD**）管道自动部署您的Gin应用程序到AWS。
- en: Questions
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How will you configure a persistent volume for MongoDB container data?
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将如何配置MongoDB容器数据的持久卷？
- en: Deploy RabbitMQ on AWS EC2.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在AWS EC2上部署RabbitMQ。
- en: Create MongoDB credentials with Kubernetes Secrets.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Kubernetes Secrets创建MongoDB凭证。
- en: Scale the API pods with `kubectl` to five instances.
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`kubectl`将API pod扩展到五个实例。
- en: Further reading
  id: totrans-322
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*Docker for Developers,* by Richard Bullington-McGuire, Andrew K. Dennis, and
    Michael Schwartz. Packt Publishing'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《开发者Docker》，作者：Richard Bullington-McGuire, Andrew K. Dennis, 和 Michael Schwartz。Packt出版社*'
- en: '*Mastering Kubernetes – Third Edition,* by Gigi Sayfan. Packt Publishing'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《精通Kubernetes – 第三版》，作者：Gigi Sayfan。Packt出版社*'
- en: '*Docker on Amazon Web Services,* by Justin Menga. Packt Publishing'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《亚马逊网络服务上的Docker》，作者：Justin Menga。Packt出版社*'
