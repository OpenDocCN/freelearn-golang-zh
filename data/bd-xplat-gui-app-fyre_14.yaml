- en: '*Appendix A*: Developer Tool Installation'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*附录A*：开发者工具安装'
- en: In preparation for running the code examples in this book, you will need to
    have both the **Go** compiler and a **C** compiler installed (to support **CGo**).
    If you don't have either of these set up, this appendix will guide you through
    the installation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在准备运行本书中的代码示例之前，您需要安装 **Go** 编译器和 **C** 编译器（以支持 **CGo**）。如果您还没有设置这些，本附录将指导您完成安装。
- en: Installing on Apple macOS
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Apple macOS上安装
- en: Many developer tools (including **Git**) are installed as part of the **Xcode**
    package. If you haven't already installed Xcode for other development work, you
    can download it for free from the **Mac App Store** at [apps.apple.com/app/xcode/id497799835](http://apps.apple.com/app/xcode/id497799835).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发者工具（包括 **Git**）作为 **Xcode** 包的一部分安装。如果您还没有为其他开发工作安装Xcode，您可以从 **Mac App
    Store** 免费下载它，网址为 [apps.apple.com/app/xcode/id497799835](http://apps.apple.com/app/xcode/id497799835)。
- en: 'Once installed, you should also set up the command-line tools. To do this,
    go to the Xcode menu | `xcode-select`. If the tools are already installed, this
    will execute normally. If not, you''ll be prompted to run the installation, as
    shown in the following screenshot:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您还应该设置命令行工具。为此，转到Xcode菜单 | `xcode-select`。如果工具已经安装，这将正常执行。如果没有，您将提示运行安装，如下面的截图所示：
- en: '![Figure 11.1 – The installation dialog window when developer tools are not
    installed'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.1 – 当未安装开发者工具时的安装对话框'
- en: '](img/Figure_11.1_B16820.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.1_B16820.jpg)'
- en: Figure 11.1 – The installation dialog window when developer tools are not installed
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1 – 当未安装开发者工具时的安装对话框
- en: In addition to these tools, you'll need to install Go. You can get the download
    package from [golang.org/dl](http://golang.org/dl). From there, tap on the featured
    download link for Apple macOS, and then run the installer package that downloads.
    You may need to close any open **Terminal** windows to update your environment
    variables.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些工具之外，您还需要安装Go。您可以从 [golang.org/dl](http://golang.org/dl) 下载下载包。从那里，点击特色下载链接以获取Apple
    macOS，然后运行下载的安装程序包。您可能需要关闭任何打开的 **Terminal** 窗口以更新环境变量。
- en: Installing on Microsoft Windows
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Microsoft Windows上安装
- en: Configuring a development environment for Windows can be complicated as there
    aren't many tools installed by default. Due to this, there are many options for
    setting up, including using external tools and packages (such as **MSYS2**, **MinGW**,
    and **Windows Subsystem for Linux**). However, exploring these is outside the
    scope of this book.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 配置Windows的开发环境可能很复杂，因为默认情况下安装的工具不多。因此，有多个设置选项，包括使用外部工具和包（如 **MSYS2**、**MinGW**
    和 **Windows Subsystem for Linux**）。然而，探索这些内容超出了本书的范围。
- en: 'The following steps show you how to get up and running using MSYS2, which provides
    a dedicated command-line application that will be set up for Fyne development.
    Let''s get started:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤展示了如何使用MSYS2开始运行，它提供了一个为Fyne开发设置的专用命令行应用程序。让我们开始吧：
- en: You will need to download the installer from [www.msys2.org](http://www.msys2.org).
    You should choose either the 32-bit (`i686`) or 64-bit (`x86_64`) version, depending
    on your computer architecture.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要从 [www.msys2.org](http://www.msys2.org) 下载安装程序。您应该根据您的计算机架构选择32位（`i686`）或64位（`x86_64`）版本。
- en: Once downloaded, run the installer, which will download the basic packages on
    your computer, including the package manager (`pacman`).
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，运行安装程序，它将在您的计算机上下载基本包，包括包管理器（`pacman`）。
- en: Once the installation is complete, you'll be given the opportunity to launch
    the **MSYS Command Prompt** – **please do not accept this**, as this is not the
    version of the app we want to run.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，您将有机会启动 **MSYS Command Prompt** – **请勿接受此选项**，因为这不是我们想要运行的版本。
- en: 'Once completed, open the directory you chose to install the application into
    and run the `mingw64.exe` application instead. This is the command line that comes
    pre-configured with knowledge of Windows compilation. We can now use the package
    manager to install Go and Git, as well as the C compiler toolchain and `pkg-config`
    (which is used by CGo to find packages):'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，打开您选择安装应用程序的目录，并运行 `mingw64.exe` 应用程序。这是预先配置了Windows编译知识的命令行。现在我们可以使用包管理器来安装Go和Git，以及C编译器工具链和
    `pkg-config`（CGo用于查找包）：
- en: '[PRE0]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding command will offer to install many packages, which is want we
    want. Just tap the *Return* or *Enter* key to install these dependencies:'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此前述命令将提供安装许多软件包的选项，这正是我们想要的。只需按*回车*或*Enter*键即可安装这些依赖项：
- en: '![Figure 11.2 – Running the installed Mingw64 terminal to install extra packages'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.2 – 运行已安装的Mingw64终端以安装额外软件包'
- en: '](img/Figure_11.2_B16820.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.2_B16820.jpg)'
- en: Figure 11.2 – Running the installed Mingw64 terminal to install extra packages
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2 – 运行已安装的Mingw64终端以安装额外软件包
- en: Note that the preceding terminal prompt denotes **MINGW64**. If you see **MSYS2**
    or another prompt, then you have opened the wrong terminal application.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，前面的终端提示表示**MINGW64**。如果您看到**MSYS2**或其他提示，那么您打开了错误的终端应用程序。
- en: Once these packages have been installed, you will have a full development environment.
    The default Go home path will be `C:/Users/<username>/go`, though you should consider
    adding `C:/Users/<username>/go/bin` to your `%PATH%` environment variable.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了这些软件包，您将拥有完整的开发环境。默认的Go主目录路径将是`C:/Users/<username>/go`，尽管您应该考虑将`C:/Users/<username>/go/bin`添加到您的`%PATH%`环境变量中。
- en: Installing on Linux
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux上安装
- en: Setting up the prerequisite software on Linux should only require installing
    the correct packages for your distribution. The `git` package will provide the
    source control tools, and the Go language should be in the `go` or `golang` package.
    Additionally, the CGo requirement means that the `gcc` package will need to be
    present as well. Installing these packages will provide the necessary commands
    to run the examples in this book. You may need to add `~/go/bin` to your `PATH`
    environment variable to be able to run tools that Go installs later.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux上设置先决软件应仅需要安装适合您发行版的正确软件包。`git`软件包将提供源代码控制工具，而Go语言应包含在`go`或`golang`软件包中。此外，CGo需求意味着`gcc`软件包也必须存在。安装这些软件包将为运行本书中的示例提供必要的命令。您可能需要将`~/go/bin`添加到您的`PATH`环境变量中，以便能够运行Go安装的工具。
- en: 'There are various different package managers for Linux, and each have slightly
    different naming conventions for packages, as well as different commands. The
    following commands are examples of how to install the required packages for each
    of the most popular distributions. Some platforms require additional library headers
    or dependencies to be installed, which are included where required:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Linux有各种不同的包管理器，每个包管理器对软件包的命名约定略有不同，以及不同的命令。以下命令是安装每个最受欢迎的发行版所需软件包的示例。某些平台需要安装额外的库头文件或依赖项，这些依赖项在需要时已包含在内：
- en: '**Arch Linux**: **sudo pacman -S go gcc xorg-server-devel**'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Arch Linux**: **sudo pacman -S go gcc xorg-server-devel**'
- en: '**Fedora**: **sudo dnf install golang gcc libXcursor-devel libXrandr-devel
    mesa-libGL-devel libXi-devel libXinerama-devel libXxf86vm-devel**'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Fedora**: **sudo dnf install golang gcc libXcursor-devel libXrandr-devel
    mesa-libGL-devel libXi-devel libXinerama-devel libXxf86vm-devel**'
- en: '**Solus**: **sudo eopkg it -c system.devel golang mesalib-devel libxrandr-devel
    libxcursor-devel libxi-devel libxinerama-devel**'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Solus**: **sudo eopkg it -c system.devel golang mesalib-devel libxrandr-devel
    libxcursor-devel libxi-devel libxinerama-devel**'
- en: '**Ubuntu / Debian**: **sudo apt-get install golang gcc libgl1-mesa-dev xorg-dev**'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ubuntu / Debian**: **sudo apt-get install golang gcc libgl1-mesa-dev xorg-dev**'
- en: '**Void Linux**: **sudo xbps-install -S go base-devel xorg-server-devel libXrandr-devel
    libXcursor-devel libXinerama-devel**'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Void Linux**: **sudo xbps-install -S go base-devel xorg-server-devel libXrandr-devel
    libXcursor-devel libXinerama-devel**'
- en: After using the aforementioned commands, you will have a full Fyne development
    environment ready on your computer.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述命令后，您将在计算机上准备好完整的Fyne开发环境。
