- en: '*Chapter 2*: Building a Traffic Lights Control System'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第二章*：构建交通灯控制系统'
- en: In the previous chapter, we set up TinyGo and our IDE, and we now know how to
    build and flash our programs to the Arduino UNO. We are now going to utilize this
    knowledge to go one step further.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们设置了TinyGo和我们的IDE，并且我们现在知道如何构建和将我们的程序烧录到Arduino UNO上。现在我们将利用这些知识更进一步。
- en: In this chapter, we are going to build a traffic lights control system. We are
    going to split the project into small steps, where we build and test each component.
    At the end, we are going to put everything together. We will be using multiple
    LEDs, a breadboard, GPIO ports, and a button to interrupt the normal flow to switch
    pedestrian lights to green. By the end of the chapter, you will know how to control
    external LEDs, read the state of a button, use GPIO ports, how to distinguish
    resistors, and how to utilize Goroutines in TinyGo.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个交通灯控制系统。我们将把项目分解成小步骤，其中我们构建并测试每个组件。最后，我们将把所有东西组合在一起。我们将使用多个LED、面包板、GPIO端口和按钮来中断正常流程，将人行横道灯切换为绿色。到本章结束时，你将知道如何控制外部LED、读取按钮的状态、使用GPIO端口、如何区分电阻以及如何在TinyGo中利用Goroutines。
- en: 'In this chapter, we are going to cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: Lighting an external LED
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点亮外部LED
- en: Lighting a single LED when a button is pressed
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当按下按钮时点亮单个LED
- en: Building traffic lights
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立交通灯
- en: Building traffic lights with pedestrian lights
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立带人行横道灯的交通灯
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To build the traffic lights control system, we are going to need some components.
    We will need the following to build the complete project:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建交通灯控制系统，我们需要一些组件。为了构建完整的项目，我们需要以下内容：
- en: An Arduino UNO
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Arduino UNO
- en: Breadboard
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 面板
- en: Five LEDs
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 五个LED
- en: Multiple jumper cables
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 多条跳线
- en: Multiple 220 Ohm resistors
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 多个220欧姆电阻
- en: One push button
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个按钮
- en: One 10K Ohm resistor
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个10K欧姆电阻
- en: 'You can find all code examples from this chapter in the following GitHub repository:
    [https://github.com/PacktPublishing/Creative-DIY-Microcontroller-Projects-with-TinyGo-and-WebAssembly/tree/master/Chapter02](https://github.com/PacktPublishing/Creative-DIY-Microcontroller-Projects-with-TinyGo-and-WebAssembly/tree/master/Chapter02)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在此GitHub仓库中找到本章的所有代码示例：[https://github.com/PacktPublishing/Creative-DIY-Microcontroller-Projects-with-TinyGo-and-WebAssembly/tree/master/Chapter02](https://github.com/PacktPublishing/Creative-DIY-Microcontroller-Projects-with-TinyGo-and-WebAssembly/tree/master/Chapter02)
- en: 'The Code in Action video for the chapter can be found here: [https://bit.ly/2RpvF2a](https://bit.ly/2RpvF2a)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的“代码在行动”视频可以在这里找到：[https://bit.ly/2RpvF2a](https://bit.ly/2RpvF2a)
- en: Lighting an external LED
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 点亮外部LED
- en: Before we start to build a more complex circuit, let's begin with lighting up
    an external LED. As soon as this is working, we are going to extend the circuit
    step by step. We begin with a single red LED. Lighting up an external LED is a
    bit different compared to lighting up an onboard LED. We are going to need something
    on which we can place the LED, and we will need some wires as well as a basic
    understanding of resistors, which will help us to prevent the LED from taking
    damage. That is why we are going to look at each component one by one.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始构建更复杂的电路之前，让我们先点亮一个外部LED。一旦这个工作正常，我们将逐步扩展电路。我们从一个红色LED开始。点亮外部LED与点亮板载LED略有不同。我们需要一个可以放置LED的东西，我们还需要一些电线以及基本的电阻知识，这将帮助我们防止LED损坏。这就是为什么我们要逐个检查每个组件。
- en: Using breadboards
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用面包板
- en: '**Breadboards** are used for prototyping, as they do not require you to directly
    solder components. We are going to build all our projects using breadboards.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**面包板**用于原型设计，因为它们不需要你直接焊接组件。我们将使用面包板构建所有项目。'
- en: 'A breadboard typically consists of two parts:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 面板通常由两部分组成：
- en: The power bus
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电源总线
- en: Horizontal rows
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 水平行
- en: Each side of a breadboard has a power bus. The power bus provides a + (positive)
    lane and a - (ground) lane. The positive lane is colored *red* and the ground
    lane is colored *blue*. The individual slots are connected inside the power bus.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 面板每一侧都有一个电源总线。电源总线提供+（正）车道和-（地）车道。正车道是红色的，地车道是蓝色的。单个插槽在电源总线内部相连。
- en: 'The slots of a single horizontal row are also connected. A signal in one slot
    is also available in the next slot. Different horizontal rows are not connected,
    unless we put a cable in there to create a connection. Here''s what a breadboard
    looks like:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 单行槽位之间也是相连的。一个槽位中的信号也可以在下一个槽位中找到。除非我们放入一根电缆来创建连接，否则不同的水平行之间是不相连的。下面是面包板的外观：
- en: '![Figure 2.1 – A breadboard – image taken from Fritzing'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.1 – 面包板 – 图片来自 Fritzing'
- en: '](img/Figure_2.1_B16555.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.1_B16555.jpg)'
- en: Figure 2.1 – A breadboard – image taken from Fritzing
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 – 面包板 – 图片来自 Fritzing
- en: Understanding LED basics
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解 LED 基础
- en: The Arduino UNO has an operating voltage of 5V, which is too high for most LEDs.
    So, we need to reduce the voltage to something our LEDs can handle. For that reason,
    we will be using 220 Ohm resistors to draw current from the line in order to protect
    the LED from damage. If you do not have 220 Ohm resistors, you can also use 470
    Ohm as well; anything between 220 and 1K (1K = 1,000) Ohm will be fine.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino UNO 的工作电压为 5V，这对大多数 LED 来说太高了。因此，我们需要将电压降低到 LED 可以处理的水平。为此，我们将使用 220
    欧姆电阻从线路中抽取电流，以保护 LED 免受损坏。如果您没有 220 欧姆电阻，也可以使用 470 欧姆；220 欧姆到 1K 欧姆（1K = 1,000）之间的任何值都可以。
- en: 'If you want to really make sure that the resistor matches the needs of the
    LED, you can also calculate the resistor value as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想确保电阻符合 LED 的需求，也可以按照以下方式计算电阻值：
- en: '*R = (V**s* *– V**led**) / I**led*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*R = (V**s* – V**led**) / I**led*'
- en: 'Where:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 其中：
- en: R is the resistor value.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: R 是电阻值。
- en: Vs is the source voltage.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vs 是源电压。
- en: Vled is the voltage drop across the LED.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vled 是 LED 上的电压降。
- en: Iled is the current through the LED.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Iled 是通过 LED 的电流。
- en: Note
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: LEDs have *anode* (+) and *cathode* (-) leads. The anode lead is longer.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: LED 有 *阳极*（+）和 *阴极*（-）引脚。阳极引脚较长。
- en: Different colors need to be driven with different voltages. When using the same
    resistors and voltages for the different LED colors, you will notice that some
    colors will be brighter compared to others.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不同的颜色需要不同的电压。当使用相同电阻和电压为不同颜色的 LED 时，您会发现某些颜色比其他颜色更亮。
- en: Using GPIO ports
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 GPIO 端口
- en: '**GPIO** stands for **General Purpose Input Output**. That means we can use
    these pins for input as well as output for digital signals. We can either set
    a GPIO pin to *High* or *Low*, or read a *High* or *Low* value from the port.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**GPIO** 代表 **通用输入输出**。这意味着我们可以将这些引脚用于数字信号的输入和输出。我们可以将 GPIO 引脚设置为 *高* 或 *低*，或者从端口读取
    *高* 或 *低* 值。'
- en: Note
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We should never draw more than a maximum of 40.0 mA (milliampere) from a single
    GPIO port. Otherwise, we could permanently damage the hardware.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从不应该从单个 GPIO 端口中抽取超过最大 40.0 mA（毫安）的电流。否则，我们可能会永久损坏硬件。
- en: Building the circuit
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 搭建电路
- en: 'Now let''s build our first circuit on the breadboard:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在面包板上搭建我们的第一个电路：
- en: Put a red LED in the *G* column of the horizontal rows. Put the cathode in *G12*
    and the anode in *G13*.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在水平行的 *G* 列中放入一个红色 LED。将阴极放入 *G12*，将阳极放入 *G13*。
- en: Connect *F12* with the ground lane on the power bus.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 *F12* 连接到电源总线上的地线。
- en: Connect *F13* and *E13* using a 220 Ohm resistor. (Anything between 220 and
    1,000 Ohms is okay.)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 220 欧姆电阻将 *F13* 和 *E13* 连接起来。（220 欧姆到 1,000 欧姆之间的任何值都可以。）
- en: Connect *Pin 13* from the GPIO ports to *A13*.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 GPIO 端口的 *Pin 13* 连接到 *A13*。
- en: Connect the GND port to the ground lane on the power bus.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 GND 端口连接到电源总线上的地线。
- en: Note
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The descriptions on your breadboard might differ from the ones I am using. If
    that is the case, you'll need to build the circuit by checking the next figure.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您面包板上的描述可能与我使用的不同。如果是这样，您需要根据下一张图来构建电路。
- en: 'The circuit should now look like the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 电路现在应该看起来像以下这样：
- en: '![Figure 2.2 – Image of the circuit – image taken from Fritzing'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.2 – 电路图片 – 图片来自 Fritzing'
- en: '](img/Figure_2.2_B16555.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.2_B16555.jpg)'
- en: Figure 2.2 – Image of the circuit – image taken from Fritzing
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – 电路图片 – 图片来自 Fritzing
- en: Writing the code
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写代码
- en: We start off by creating a new folder named `Chapter02` in our project workspace.
    This folder will be used for all parts of this chapter. Inside the `Chapter02`
    folder, we create a `blinky-external` folder and create a new `main.go` file inside.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在我们的项目工作区中创建一个名为 `Chapter02` 的新文件夹。这个文件夹将用于本章的所有部分。在 `Chapter02` 文件夹内，我们创建一个
    `blinky-external` 文件夹，并在其中创建一个新的 `main.go` 文件。
- en: 'The structure should look like the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 结构应该看起来像以下这样：
- en: '![Figure 2.3 - Project structure for writing the code'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.3 - 编写代码的项目结构'
- en: '](img/Figure_2.3_B16555.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.3_B16555.jpg)'
- en: Figure 2.3 - Project structure for writing the code
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.3 - 编写代码的项目结构
- en: 'We import the `machine` and `time` packages and put the following code into
    the `main` function:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们导入`machine`和`time`包，并将以下代码放入`main`函数中：
- en: 'Declare and initialize a variable named `outputConfig` with a new `PinConfig`
    in output mode:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明并初始化一个名为`outputConfig`的变量，使用新的`PinConfig`以输出模式：
- en: '[PRE0]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Declare and initialize a variable named `greenLED` with a value of `machine.D13`:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明并初始化一个名为`greenLED`的变量，其值为`machine.D13`：
- en: '[PRE1]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Configure the LED with the `outputConfig` instance we created earlier, by passing
    it as a parameter into the `Configure` function:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们之前创建的`outputConfig`实例配置LED，通过将其作为参数传递给`Configure`函数：
- en: '[PRE2]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We then loop endlessly:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们无限循环：
- en: '[PRE3]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Set `redLED` to `Low` (off):'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`redLED`设置为`Low`（关闭）：
- en: '[PRE4]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Sleep for half a second. Without sleeping, the LED would be turned on and off
    at an extremely high rate, so we sleep after each change in a state:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 睡眠半秒钟。如果不睡眠，LED将以极高的速率开启和关闭，因此每次状态改变后我们都会睡眠：
- en: '[PRE5]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Set the `redLED` to `High` (on):'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`redLED`设置为`High`（开启）：
- en: '[PRE6]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Sleep for half a second:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 睡眠半秒钟：
- en: '[PRE7]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now flash the program using the `tinygo flash` command using the following
    command:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在使用以下命令使用`tinygo flash`命令闪烁程序：
- en: '[PRE8]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When the flash progress completes and the Arduino restarts, the red LED should
    blink at intervals of 500 ms.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当闪烁进度完成并且Arduino重新启动时，红色LED应该以500毫秒的间隔闪烁。
- en: Congratulations, you have just built your first circuit and written your first
    program to control external hardware! As we now know how to connect and control
    external LEDs on a breadboard, we can continue to build a more advanced circuit.
    Let's do just that in the next section.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你，你刚刚构建了你的第一个电路并编写了第一个控制外部硬件的程序！既然我们现在知道如何在面包板上连接和控制外部LED，我们可以继续构建一个更复杂的电路。让我们在下一节中这样做。
- en: Lighting an LED when a button is pressed
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当按钮被按下时点亮LED
- en: 'Until now, we have only used code to directly control hardware components.
    Let''s now try to read the state of a button in order to control an LED. We will
    need the following components:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只使用了代码来直接控制硬件组件。现在让我们尝试读取按钮的状态以控制LED。我们需要以下组件：
- en: At least 6 jumper wires
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少6根跳线
- en: One LED (the color does not matter)
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个LED（颜色不重要）
- en: One 220 Ohm resistor
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个220欧姆电阻
- en: One 4-pinned-button (push down button)
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个4针按钮（按下按钮）
- en: One 10K Ohm resistor
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个10K欧姆电阻
- en: Now let's go on to build the circuit.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续构建电路。
- en: Building the circuit
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建电路
- en: The following circuit extends the one we previously built. So, if you still
    have the previous circuit assembled, you just have to add the button part. The
    next circuit consists of two component groups. The first group is used to control
    an LED, and the second group is used to read the button state.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下电路扩展了我们之前构建的电路。所以，如果你仍然组装了之前的电路，你只需要添加按钮部分。下一个电路由两个组件组组成。第一个组用于控制LED，第二个组用于读取按钮状态。
- en: Adding the LED component
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加LED组件
- en: 'We start off with the LED circuit:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从LED电路开始：
- en: Place an LED with the cathode in G12 and the anode in G13\.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个LED的阴极放在G12，阳极放在G13\。
- en: Use a 220 Ohm resistor to connect *F13* with *D13*.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用220欧姆电阻将*F13*与*D13*连接。
- en: Connect port *D13* from the GPIO ports with *A13* using a jumper wire.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将GPIO端口中的*D13*端口与*A13*连接。
- en: Connect *F12* with the ground lane of the power bus using a jumper wire.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将*F12*与电源总线的地线连接。
- en: Adding the button component
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加按钮组件
- en: 'Now we are going to add a button:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将添加一个按钮：
- en: Use a jumper wire to connect `A31` with the positive lane of the power bus.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将`A31`与电源总线的正线连接。
- en: Use a 10K Ohm resistor to connect the ground lane of the power bus with `B29`.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用10K欧姆电阻将电源总线的地线与`B29`连接。
- en: Connect `D29` with port `D2`.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`D29`与端口`D2`连接。
- en: Place the push button with one pin in `E29`, one in `E31`, one in `F29`, and
    the last pin in `F31`.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按钮的一个引脚放在`E29`，一个放在`E31`，一个放在`F29`，最后一个引脚放在`F31`。
- en: 'Our circuit should now look similar to the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在的电路应该看起来类似于以下这样：
- en: '![Figure 2.4 – The circuit – image taken from Fritzing'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.4 – 电路 – 从Fritzing获取的图像](img/Figure_2.4_B16555.jpg)'
- en: '](img/Figure_2.4_B16555.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.4_B16555.jpg)'
- en: Figure 2.4 – The circuit – image taken from Fritzing
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.4 – 电路 – 从Fritzing获取的图像
- en: Note
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Before we start to write the code for this circuit, we need to learn how these
    buttons work.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始为这个电路编写代码之前，我们需要了解这些按钮是如何工作的。
- en: As the button will not work if you place it incorrectly onto the breadboard,
    let's have a look at the button again.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 由于按钮如果放置不正确在面包板上将无法工作，让我们再次看看按钮。
- en: The 4 pins on the button are grouped into two pins each. So, two pins are connected
    to each other. Looking at the back of the button, we should be able to see that
    two opposing pins are connected to each other. So, the button won't work as expected
    when you place it rotated by 90°.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮上的4个引脚分为两组，每组两个引脚。因此，两个引脚相互连接。查看按钮的背面，我们应该能够看到两个相对的引脚相互连接。因此，当你将按钮旋转90°放置时，按钮可能不会按预期工作。
- en: Programming the logic
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程逻辑
- en: 'Before diving into the code, we will create a new folder named `light-button`
    inside the `Chapter02` folder and create a `main.go` file in it, with an empty
    `main` function, using the following:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入代码之前，我们将在`Chapter02`文件夹内创建一个名为`light-button`的新文件夹，并在其中创建一个`main.go`文件，包含一个空的`main`函数，使用以下命令：
- en: '![Figure 2.5 – The folder structure for the logic'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.5 – 逻辑的文件夹结构](img/Figure_2.5_B16555.jpg)'
- en: '](img/Figure_2.5_B16555.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 2.5 - 逻辑的文件夹结构](img/Figure_2.5_B16555.jpg)'
- en: Figure 2.5 – The folder structure for the logic
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5 – 逻辑的文件夹结构
- en: Let's now look at the `main` function and the pull-up resistor.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看`main`函数和上拉电阻。
- en: The main function
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主函数
- en: 'We want to light the LED when the button is pressed. To achieve this, we need
    to read from a pin and check for its state using the following steps:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望在按钮被按下时点亮LED。为了实现这一点，我们需要从引脚读取并使用以下步骤检查其状态：
- en: 'Initialize the `outPutConfig` variable with `PinConfig` in `PinOutput` mode.
    This config is going to be used to control the LED pin:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`PinConfig`在`PinOutput`模式下初始化`outPutConfig`变量。这个配置将被用来控制LED引脚：
- en: '[PRE9]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Initialize the `inputConfig` variable with `PinConfig` in `PinInput` mode.
    This config is being used for the pin that reads the button state and therefore
    needs to be an input:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`PinConfig`在`PinInput`模式下初始化`inputConfig`变量。这个配置正在用于读取按钮状态的引脚，因此它需要是一个输入：
- en: '[PRE10]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Initialize the `led` variable with a value of `machine.D13`, which is the pin
    we have connected to `led`:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`machine.D13`的值初始化`led`变量，这是我们连接到`led`的引脚：
- en: '[PRE11]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Configure `led` as output by passing `outputConfig` as the parameter, which
    is the pin that is connected to the button:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过传递`outputConfig`作为参数配置`led`为输出，这是连接到按钮的引脚：
- en: '[PRE12]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Initialize the `buttonInput` variable with a value of `machine.D2`:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`machine.D2`的值初始化`buttonInput`变量：
- en: '[PRE13]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Configure `buttonInput` as an input by passing `inputConfig` as the parameter:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`buttonInput`配置为输入，通过传递`inputConfig`作为参数：
- en: '[PRE14]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As we do not want the program to be terminated after checking the button state
    a single time, we use an endless loop to repeat and check forever:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们不希望程序在检查按钮状态一次后就终止，我们使用一个无限循环来重复并永远检查：
- en: '[PRE15]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Check the current state of the button. It will be true if the button is pressed:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查按钮的当前状态。如果按钮被按下，它将为真：
- en: '[PRE16]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If the button is pressed, we light up the LED:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果按钮被按下，我们将点亮LED：
- en: '[PRE17]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We are calling `continue` here, so we do not execute the `led.Low()` call:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在这里调用`continue`，所以我们不会执行`led.Low()`调用：
- en: '[PRE18]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If the button is not pressed, we turn the LED off:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果按钮没有被按下，我们将LED关闭：
- en: '[PRE19]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: Do not forget to import the `machine` package, otherwise the code will not compile.
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不要忘记导入`machine`包，否则代码将无法编译。
- en: 'Now flash the program using the `tinygo flash` command:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使用`tinygo flash`命令烧录程序：
- en: '[PRE20]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: After successfully flashing, the LED should light up when you press the button.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功烧录后，当你按下按钮时，LED应该会点亮。
- en: The pull-up resistor
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 上拉电阻
- en: 'You may have wondered why we need a 10K Ohm resistor in the button circuit.
    The 10K Ohm resistor is used to prevent the signal/pin from floating. Floating
    pins are bad, as an input pin in a floating state is indeterminate. When trying
    to read a value from a pin, we expect to get a digital value – 1 or 0, or true
    or false. Floating means that the value can change rapidly between 1 and 0, which
    happens without pull-up or pull-down resistors. Here''s some further reading on
    floating pins: [https://www.mouser.com/blog/dont-leave-your-pins-floating](https://www.mouser.com/blog/dont-leave-your-pins-floating).'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道为什么按钮电路中需要一个10K欧姆的电阻。10K欧姆电阻用于防止信号/引脚悬空。悬空引脚是坏的，因为一个处于悬空状态的输入引脚是不确定的。当我们尝试从一个引脚读取值时，我们期望得到一个数字值
    - 1或0，或真或假。悬空意味着值可以在1和0之间快速变化，这发生在没有上拉或下拉电阻的情况下。以下是一些关于悬空引脚的进一步阅读：[https://www.mouser.com/blog/dont-leave-your-pins-floating](https://www.mouser.com/blog/dont-leave-your-pins-floating)。
- en: As an alternative to the 10K Ohm external resistor, an internal resistor can
    be used.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 作为10K欧姆外部电阻的替代，可以使用内部电阻。
- en: 'Configuring an input pin to use an internal resistor is done as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 配置输入引脚使用内部电阻的方法如下：
- en: '[PRE21]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We have now learned how to control an LED using an input signal, which was given
    by a button. The next step is to build the traffic lights flow to control three
    LEDs.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经学会了如何使用输入信号控制LED，这个信号是由按钮提供的。下一步是构建交通信号灯流程来控制三个LED。
- en: Building traffic lights
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建交通信号灯
- en: We know how to light up a single LED, and we also know how to light up an LED
    using a button input. The next step is to build a circuit using three LEDs and
    to write the code to light them up in the correct order.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道如何点亮一个LED，也知道如何使用按钮输入点亮一个LED。下一步是构建一个使用三个LED的电路，并编写代码以正确顺序点亮它们。
- en: Building the circuit
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建电路
- en: 'To build the circuit, we need the following components:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 构建电路需要以下组件：
- en: Three LEDs (preferably red, yellow, and green)
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三个LED（最好是红、黄、绿）
- en: Three 220 Ohm resistors
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三个220欧姆电阻
- en: Seven jumper wires
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 七根跳线
- en: 'We start by first setting up the components using the following steps:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过以下步骤设置组件：
- en: Connect *GND* from the Arduino to any ground port on the power bus.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Arduino的*GND*连接到电源总线的任何地端口。
- en: Place the first (red) LED with the cathode in *G12* and the anode in *G13*.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第一个（红色）LED的阴极放置在*G12*，阳极放置在*G13*。
- en: Place the second (yellow) LED with the cathode in *G15* and the anode in *G16*.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第二个（黄色）LED的阴极放置在*G15*，阳极放置在*G16*。
- en: Place the third (green) LED with the cathode in *G18* and the anode in *G19*.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第三个（绿色）LED的阴极放置在*G18*，阳极放置在*G19*。
- en: Connect *F13* with *D13* using a 220 Ohm resistor.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用220欧姆电阻将*F13*与*D13*连接。
- en: Connect *F16* with *D16* using a 220 Ohm resistor.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用220欧姆电阻将*F16*与*D16*连接。
- en: Connect *F19* with *D19* using a 220 Ohm resistor.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用220欧姆电阻将*F19*与*D19*连接。
- en: Connect *F13* to *Ground* on the power bus using a jumper wire.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将*F13*连接到电源总线上的*Ground*。
- en: Connect *F16* to *Ground* on the power bus using a jumper wire.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将*F16*连接到电源总线上的*Ground*。
- en: Connect *F19* to *Ground* on the power bus using a jumper wire.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将*F19*连接到电源总线上的*Ground*。
- en: Connect port *D13* to *A12* using a jumper wire.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将端口*D13*连接到*A12*。
- en: Connect port *D16* to *A12* using a jumper wire.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将端口*D16*连接到*A12*。
- en: Connect port *D19* to *A12* using a jumper wire.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将端口*D19*连接到*A12*。
- en: 'Your circuit should now look similar to the following figure:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 您的电路现在应该类似于以下图示：
- en: '![Figure 2.6 – The traffic lights circuit – image taken from Fritzing'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.6 – 交通信号灯电路 – 图片来自Fritzing'
- en: '](img/Figure_2.6_B16555.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_2.6_B16555.jpg]'
- en: Figure 2.6 – The traffic lights circuit – image taken from Fritzing
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.6 – 交通信号灯电路 – 图片来自Fritzing
- en: We have now successfully set up the circuit. Now we can continue to write some
    code to control the LEDs.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经成功设置了电路。现在我们可以继续编写一些代码来控制LED。
- en: Creating a folder structure
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建文件夹结构
- en: 'We start off by creating a new folder named `traffic-lights-simple` inside
    the `Chapter02``main.go` file inside the new folder and start off with an empty
    `main` function. Your project structure should now look like this:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在`Chapter02`文件夹内的`main.go`文件中创建一个名为`traffic-lights-simple`的新文件夹，并从空的`main`函数开始。现在，您的项目结构应该如下所示：
- en: '![Figure 2.7 - Folder structure for the circuit'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.7 - 电路的文件夹结构'
- en: '](img/Figure_2.7_B16555.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_2.7_B16555.jpg]'
- en: Figure 2.7 - Folder structure for the circuit
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.7 - 电路的文件夹结构
- en: Writing the logic
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写逻辑
- en: 'We have successfully set up our project structure to continue. We are going
    to implement the following flow:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功设置了项目结构以继续。我们将实现以下流程：
- en: '*RED -> RED-YELLOW -> GREEN -> YELLOW -> RED*'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '*红灯 -> 黄红灯 -> 绿灯 -> 黄灯 -> 红灯*'
- en: This is a typical flow for traffic lights with three bulbs.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种典型的有三个灯泡的交通信号灯流程。
- en: We are going to configure three pins as output, and afterward, we want to endlessly
    loop and light up the LEDs in this flow.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将配置三个引脚为输出，之后我们想要无限循环并按照此流程点亮LED。
- en: 'Inside the `main` function, we write the following:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main`函数内部，我们编写以下代码：
- en: 'Initialize a new variable named `outputConfig` as `PinConfig` using the `PinOutPut`
    mode:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`PinOutPut`模式初始化一个名为`outputConfig`的新变量为`PinConfig`：
- en: '[PRE22]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Initialize a new variable named `redLED` with the value `machine.D13` and configure
    it as output:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个名为`redLED`的新变量，其值为`machine.D13`，并配置为输出：
- en: '[PRE23]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Initialize a new variable named `yellowLED` with the value `machine.D12` and
    configure it as output:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个名为`yellowLED`的新变量，其值为`machine.D12`，并配置为输出：
- en: '[PRE24]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Initialize a new variable named `greenLED` with the value `machine.D11` and
    configure it as output:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个名为`greenLED`的新变量，其值为`machine.D11`，并配置为输出：
- en: '[PRE25]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We have now initialized our variables to act as output pins. The next step
    is to light up the LEDs in the correct order. We basically have four phases, which
    just need to repeat in order to simulate a real traffic light. Let''s go through
    these one by one:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经初始化了变量作为输出引脚。下一步是按正确顺序点亮LED。我们基本上有四个阶段，只需要按顺序重复即可模拟真实的交通灯。让我们逐一来看：
- en: 'We are going to handle the phases in an endless loop:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将无限循环处理各个阶段：
- en: '[PRE26]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'For *RED-Phase*, turn on the red LED and wait for a second:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于*红色阶段*，打开红色LED并等待一秒钟：
- en: '[PRE27]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'For *RED-YELLOW-Phase*, turn on the yellow LED and wait for a second:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于*红黄阶段*，打开黄色LED并等待一秒钟：
- en: '[PRE28]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'For *GREEN-PHASE*, turn off the yellow and red LEDs and turn on the green LED
    and wait for a second:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于*绿色阶段*，关闭黄色和红色LED，打开绿色LED并等待一秒钟：
- en: '[PRE29]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'For *YELLOW-Phase*, turn off the green LED and turn on the yellow LED, then
    wait for a second and turn off yellow again, so we can start cleanly with *RED-Phase*
    again:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于*黄色阶段*，关闭绿色LED并打开黄色LED，然后等待一秒钟，再次关闭黄色LED，这样我们就可以干净地再次开始*红色阶段*：
- en: '[PRE30]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The complete content of the function is available at the following URL:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的完整内容可在以下URL找到：
- en: '[https://github.com/PacktPublishing/Programming-Microcontrollers-and-WebAssembly-with-TinyGo/blob/master/Chapter02/traffic-lights-simple/main.go](https://github.com/PacktPublishing/Programming-Microcontrollers-and-WebAssembly-with-TinyGo/blob/master/Chapter02/traffic-lights-simple/main.go)'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Programming-Microcontrollers-and-WebAssembly-with-TinyGo/blob/master/Chapter02/traffic-lights-simple/main.go](https://github.com/PacktPublishing/Programming-Microcontrollers-and-WebAssembly-with-TinyGo/blob/master/Chapter02/traffic-lights-simple/main.go)'
- en: Note
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Don't forget to import the `time` and `machine` packages.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记导入`time`和`machine`包。
- en: We have now assembled and programmed a complete traffic lights flow. The next
    step is to combine everything we have built to complete our project.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经组装并编程了一个完整的交通灯流程。下一步是将我们构建的一切结合起来完成我们的项目。
- en: Building traffic lights with pedestrian lights
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建立带人行道灯的交通灯
- en: We will now combine everything we have learned and done in this chapter to create
    an even more realistic traffic lights system. We will do so by assembling a circuit
    that contains the three-bulb traffic lights from the previous step and adding
    pedestrian lights with two bulbs that are controlled by a button.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将结合本章所学和所做的一切，创建一个更加逼真的交通灯系统。我们将通过组装一个包含前一步骤中的三个灯泡交通灯的电路，并添加由按钮控制的两个灯泡的人行道灯来实现这一点。
- en: Assembling the circuit
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组装电路
- en: 'For our final project in this chapter, we need the following:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章的最终项目，我们需要以下内容：
- en: 'Five LEDs: preferably two red, one yellow, and two green'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 五个LED：最好有两个红色，一个黄色和两个绿色
- en: Five 220 Ohm resistors, one for each LED
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 五个220欧姆电阻，每个LED一个
- en: One 10K Ohm resistor as a pull-up resistor for our push button
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个10K欧姆电阻作为按钮的上拉电阻
- en: One 4-pin push button
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个四针按钮
- en: 14 jumper wires
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 14根跳线
- en: 'We start by setting up the three-bulb traffic lights using the following steps:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先按照以下步骤设置三个灯泡的交通灯：
- en: Place the first LED (red) with the cathode on *G12* and the anode on *G13*.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第一个LED（红色）的阴极连接到*G12*，阳极连接到*G13*。
- en: Place the second LED (yellow) with the cathode on *G15* and the anode on *G16*.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第二个LED（黄色）的阴极连接到*G15*，阳极连接到*G16*。
- en: Place the third LED (green) with the cathode on *G18* and the anode on *G19*.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第三个LED（绿色）的阴极连接到*G18*，阳极连接到*G19*。
- en: Use a 220 Ohm resistor to connect *F13* with *D13*.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用220欧姆电阻将*F13*与*D13*连接。
- en: Use a 220 Ohm resistor to connect *F16* with *D16*.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用220欧姆电阻将*F16*与*D16*连接。
- en: Use a 220 Ohm resistor to connect *F19* with *D19*.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用220欧姆电阻将*F19*与*D19*连接。
- en: Connect pin *D13* with *A13* using a jumper wire.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将引脚*D13*与*A13*连接。
- en: Connect pin *D12* with *A16* using a jumper wire.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将引脚*D12*与*A16*连接。
- en: Connect pin *D11* with *A10* using a jumper wire.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将引脚*D11*与*A10*连接。
- en: Connect *F12* with Ground on the power bus using a jumper wire.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将*F12*与电源总线上的地线连接。
- en: Connect *F15* with Ground on the power bus using a jumper wire.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将*F15*与电源总线上的地线连接。
- en: Connect *F18* with Ground on the power bus using a jumper wire.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将*F18*与电源总线上的地线连接。
- en: 'Now assemble the pedestrian lights using the following steps:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 现在按照以下步骤组装人行道灯：
- en: Place the fourth LED (red) with the cathode on *G22* and the anode on *G23*.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第四个LED（红色）的阴极连接到*G22*，阳极连接到*G23*。
- en: Place the fifth LED (green) with the cathode on *G25* and the anode on *G26*.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第五个LED（绿色）的阴极连接到*G25*，阳极连接到*G26*。
- en: Use a 220 Ohm resistor to connect *F23* with *D23*.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用220欧姆电阻将*F23*与*D23*连接。
- en: Use a 220 Ohm resistor to connect *F26* with *D26*.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用220欧姆电阻将*F26*与*D26*连接。
- en: Connect pin *D5* with *A23* using a jumper wire.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将引脚*D5*与*A23*连接。
- en: Connect pin *D4* with *A26* using a jumper wire.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将引脚*D4*与*A26*连接。
- en: Connect *F22* with Ground on the power bus using a jumper wire.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将*F22*与电源总线上的地连接。
- en: Connect *F24* with Ground on the power bus using a jumper wire.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将*F24*与电源总线上的地连接。
- en: 'Now we only need to assemble the button and connect the power bus:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需要组装按钮并连接电源总线：
- en: Place a push button with the left pins in *E29* and *F29* and the right pins
    on *E31* and *F31*.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个按钮放置在*E29*和*F29*的左引脚上，右引脚在*E31*和*F31*上。
- en: Use a 10K Ohm resistor to connect the Ground from the power bus with *B29*.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用10K欧姆电阻将电源总线上的地与*B29*连接。
- en: Connect pin *D2* with *C29* using a jumper wire.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将引脚*D2*与*C29*连接。
- en: Connect *A31* with the positive lane on the power bus using a jumper wire.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将*A31*与电源总线上的正极连接。
- en: Connect the positive lane on the power bus with the 5V port on the Arduino UNO
    using a jumper wire.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将电源总线上的正极连接到Arduino UNO的5V端口。
- en: Connect the ground lane on the power bus with a ground port on the Arduino UNO
    using a jumper wire.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将电源总线上的地连接到Arduino UNO的地端口。
- en: 'When you''ve finished assembling, your circuit should look like this:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成组装后，你的电路应该看起来像这样：
- en: '![Figure 2.8 – Circuit for the traffic lights with pedestrian lights controlled
    by'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.8 – 由按钮控制的交通灯和行人灯的电路 – 图片来自Fritzing'
- en: a button – image taken from Fritzing
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 一个按钮 – 图片来自Fritzing
- en: '](img/Figure_2.8_B16555.jpg)'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_2.8_B16555.jpg]'
- en: Figure 2.8 – Circuit for the traffic lights with pedestrian lights controlled
    by a button – image taken from Fritzing
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.8 – 由按钮控制的交通灯和行人灯的电路 – 图片来自Fritzing
- en: Great, we have now completely assembled our final project for this chapter.
    We can now write some code to bring this project to life.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了，我们现在已经完全组装了本章的最终项目。我们现在可以编写一些代码来使这个项目变得生动起来。
- en: Setting up the project structure
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置项目结构
- en: We start off by creating a new folder named `traffic-lights-pedestrian` inside
    the `Chapter02` folder. Inside the new folder, we create a new `main.go` file
    with an empty `main` function.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在`Chapter02`文件夹内创建一个名为`traffic-lights-pedestrian`的新文件夹。在新文件夹内，我们创建一个名为`main.go`的新文件，并在其中创建一个空的`main`函数。
- en: 'Our project structure should now look like the following:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的项目结构现在应该看起来像以下这样：
- en: '![Figure 2.9 - Project structure for the project'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.9 - 项目的结构'
- en: '](img/Figure_2.9_B16555.jpg)'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_2.9_B16555.jpg]'
- en: Figure 2.9 - Project structure for the project
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.9 - 项目的结构
- en: Writing the logic
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写逻辑
- en: 'We are going to split the program into three parts:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把程序分成三个部分：
- en: Initialization logic
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始化逻辑
- en: Main logic
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主逻辑
- en: '`trafficLights` logic'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`交通灯`逻辑'
- en: Initializing the logic
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 初始化逻辑
- en: 'We need to initialize a `stopTraffic` variable and configure the pins for the
    LEDs as output pins using the following steps:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要初始化一个`stopTraffic`变量，并按照以下步骤配置LED引脚为输出引脚：
- en: 'We start off by declaring a `bool` variable named `stopTraffic` at the package
    level. This variable is going to be used as a communication channel between our
    two logic parts:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先在包级别声明一个名为`stopTraffic`的`bool`变量。这个变量将用作我们两个逻辑部分之间的通信通道：
- en: '[PRE31]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The first thing we do in the `main` method is set the value of `stopTraffic`
    to `false`:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main`方法中，我们首先将`stopTraffic`的值设置为`false`：
- en: '[PRE32]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We declare and initialize a new variable named `outputConfig` with `PinConfig`
    in `PinOutput` mode. We are going to pass this config to all LED pins:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在`PinOutput`模式下声明并初始化一个名为`outputConfig`的新变量，并将其传递给所有LED引脚：
- en: '[PRE33]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We initialize some new variables: `greenLED` with the value `machine.D11`,
    `yellowLED` with the value `machine.D12`, and `redLED` with the value `machine.D13`.
    Then, we configure each LED variable as output pins:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们初始化一些新变量：`greenLED`的值为`machine.D11`，`yellowLED`的值为`machine.D12`，`redLED`的值为`machine.D13`。然后，我们将每个LED变量配置为输出引脚：
- en: '[PRE34]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We initialize some new variables: `pedestrianGreen` with the value `machine.D4`
    and `pedestrianRed` with the value `machine.D5`. Then, we configure each LED variable
    as output pins:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们初始化一些新变量：`pedestrianGreen`的值为`machine.D4`，`pedestrianRed`的值为`machine.D5`。然后，我们将每个LED变量配置为输出引脚：
- en: '[PRE35]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We declare and initialize a new variable named `inputConfig` with `PinConfig`
    in `PinInput` mode. Then, we declare and initialize a new variable named `buttonInput`
    with the value `machine.D2` and configure `buttonInput` as the input pin:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们声明并初始化一个名为`inputConfig`的新变量，使用`PinConfig`在`PinInput`模式中。然后，我们声明并初始化一个名为`buttonInput`的新变量，其值为`machine.D2`，并将`buttonInput`配置为输入引脚：
- en: '[PRE36]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: That's it for the initialization. We have set up all pins and a Boolean variable
    at the package level.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化到此为止。我们已经设置了所有引脚和一个布尔变量在包级别。
- en: Note
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The pin constants, such as `machine.D13`, are of the `machine.Pin` type.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 引脚常量，如`machine.D13`，是`machine.Pin`类型。
- en: Writing the trafficLights logic
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写trafficLights逻辑
- en: We will now write the complete logic to control all the LEDs in our circuit.
    This is going to be the first time that we have to move some parts of the code
    into other functions.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将编写完整的逻辑来控制电路中的所有LED。这将是我们第一次需要将代码的一些部分移动到其他函数中。
- en: 'To do that, we start by writing a new function named `trafficLights` that *takes
    all five LED pins as parameters* and has *no return value*. Inside the function,
    we start off with an empty, endless loop. Our function should now look like the
    following:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们首先编写一个名为`trafficLights`的新函数，该函数*接受所有五个LED引脚作为参数*，并且没有返回值。在函数内部，我们从一个空的、无休止的循环开始。我们的函数现在应该看起来像以下这样：
- en: '[PRE37]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'All the logic will be placed inside the `for` loop. The actual logic in the
    loop consists of two parts:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 所有逻辑都将放置在`for`循环中。循环中的实际逻辑包括两部分：
- en: Handling signals from the button to stop the traffic and control the pedestrian
    lights
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理按钮信号以停止交通和控制行人灯
- en: Controlling the normal traffic lights flow
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制正常交通灯的流量
- en: 'We start off with handling the signals from the button. To do that, we check
    `for` `stopTraffic` in the `if`, and also have an empty `else` branch. It looks
    like the following:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从处理按钮的信号开始。为了做到这一点，我们在`if`中检查`stopTraffic`，并且还有一个空的`else`分支。它看起来像以下这样：
- en: '[PRE38]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: So, when `stopTraffic` is `true`, we want to set our traffic lights phase to
    be *red*. Also, we want to set the pedestrian lights phase to *green* for 3 seconds
    and then back to *red* and set `stopTraffic` to `false` afterward, as we handled
    the signal one time.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当`stopTraffic`为`true`时，我们希望将我们的交通灯相位设置为*红色*。我们还希望将行人灯相位设置为*绿色*3秒钟，然后回到*红色*，之后将`stopTraffic`设置为`false`，因为我们已经处理了一次信号。
- en: 'Let''s implement this logic using the following steps:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下步骤来实现这个逻辑：
- en: 'Set traffic lights phase to red:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将交通灯相位设置为红色：
- en: '[PRE39]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Set the pedestrian lights phase to green for 3 seconds:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将行人灯相位设置为绿色3秒钟：
- en: '[PRE40]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Set the pedestrian lights phase to *red*:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将行人灯相位设置为*红色*：
- en: '[PRE41]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Set `stopTraffic` to `false`, as we have handled the signal:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`stopTraffic`设置为`false`，因为我们已经处理了信号：
- en: '[PRE42]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'In the `else` block, we just reset the pedestrian lights state to red:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`else`块中，我们只需将行人灯状态重置为红色：
- en: '[PRE43]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Okay, that is the part that reacts to `stopTraffic` signals. Underneath that
    `if-else` block, we are going to implement the actual logic to control the traffic
    lights flow, which is the same as done earlier. So, we start with the *red* phase,
    transit to the *red-yellow* phase, then to *green*, then to *yellow*, and then
    reset *yellow* to be able to start clean again, as follows:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这是响应`stopTraffic`信号的部分。在`if-else`块下面，我们将实现控制交通灯流量的实际逻辑，这与之前所做的相同。所以我们从*红色*相位开始，过渡到*红色-黄色*相位，然后到*绿色*，然后到*黄色*，然后重置*黄色*以便能够干净地再次开始，如下所示：
- en: '[PRE44]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: That is all that we have to do in the `trafficLights` function.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在`trafficLights`函数中，我们只需做这些。
- en: Implementing the main logic
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现主要逻辑
- en: 'Now we only need to run the `trafficLights` function and handle the button
    input at the same time. This is where **goroutines** come in. As microcontrollers
    only have one processor core, which works with a single thread, we cannot have
    real parallel execution of tasks. As we use goroutines on an Arduino UNO, we will
    need some additional build parameters. We are going to learn about these parameters
    later, when we flash the program. In our case, we want to have a listener on the
    button, while still being able to step through the traffic lights process. The
    logic consists of three steps:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需要同时运行`trafficLights`函数和处理按钮输入。这就是**goroutines**发挥作用的地方。由于微控制器只有一个处理器核心，它使用单个线程工作，所以我们不能真正并行执行任务。由于我们在Arduino
    UNO上使用goroutines，我们需要一些额外的构建参数。我们将在程序烧录时学习这些参数。在我们的例子中，我们希望在按钮上有一个监听器，同时仍然能够逐步处理交通灯过程。逻辑包括三个步骤：
- en: Initialize the pedestrian lights with the `red` phase.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`red`相位初始化行人灯。
- en: Run the `trafficLights` function in a goroutine.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在goroutine中运行`trafficLights`函数。
- en: Handle the button input.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理按钮输入。
- en: 'For the first part, we only have to set the `pedestrianRED` LED to `High` and
    the `pedestrianGreen` LED to `Low`:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第一部分，我们只需要将`pedestrianRED` LED设置为`高`，将`pedestrianGreen` LED设置为`低`：
- en: '[PRE45]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now we just call `trafficLights` and pass all necessary parameters using a
    goroutine:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需调用`trafficLights`，并通过goroutine传递所有必要的参数：
- en: '[PRE46]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'For the last step, we need an endless loop that checks for `buttonInput` and
    to set `stopTraffic` to `true` if the button is pressed. We also need it to sleep
    for 50 milliseconds afterward:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 对于最后一步，我们需要一个无限循环来检查`buttonInput`，并在按钮被按下时将`stopTraffic`设置为`true`。我们还需要它在之后睡眠50毫秒：
- en: '[PRE47]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Note
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is necessary to add a sleep time to the loop that handles the button input
    because the scheduler needs time to run the goroutine. The goroutine is being
    handled in the time that the main function is sleeping. Also, other blocking functions,
    such as reading from a channel, can be used to give the scheduler time to work
    on other tasks.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理按钮输入的循环中添加睡眠时间是必要的，因为调度器需要时间来运行goroutine。goroutine在主函数睡眠时被处理。此外，其他阻塞函数，如从通道读取，也可以用来给调度器时间来处理其他任务。
- en: 'As we now have completed our logic, it is time to flash the program onto the
    controller. As we are using goroutines in this project, we need to pass additional
    parameters to the `tinygo flash` command:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经完成了逻辑，现在是时候将程序烧录到控制器上了。由于我们在项目中使用了goroutine，我们需要向`tinygo flash`命令传递额外的参数：
- en: '[PRE48]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: As the ATmega328p has very limited resources, the scheduler is deactivated by
    default on boards that use this microcontroller. The Arduino UNO is such a board.
    When using other microcontrollers, we would normally not need to override the
    default scheduler by setting this parameter.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 由于ATmega328p资源非常有限，因此默认情况下在使用此微控制器的板上禁用调度器。Arduino UNO就是这样一块板。当使用其他微控制器时，我们通常不需要通过设置此参数来覆盖默认调度器。
- en: We have now successfully flashed our program to the Arduino Uno. The traffic
    lights should start looping all phases and the pedestrian lights should remain
    in the *red* phase. When clicking the button, the traffic lights should end their
    loop and then the pedestrian lights should switch to the *green* phase, while
    the traffic lights remain on the *red* phase for 3 seconds.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经成功地将程序烧录到了Arduino Uno。交通灯应该开始循环所有相位，行人灯应保持在*红灯*相位。当点击按钮时，交通灯应该结束循环，然后行人灯应切换到*绿灯*相位，而交通灯保持在*红灯*相位3秒钟。
- en: Note
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Due to the very limited memory on the Arduino Uno, working with goroutines might
    only work in projects that are not very complex, such as this one.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Arduino Uno上的内存非常有限，使用goroutine可能只在不太复杂的项目中有效，例如这个项目。
- en: Summary
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have learned how to build a fully functional traffic lights system with pedestrian
    lights controlled by a button. We achieved this by building each part of the project
    separately and assembling it all together at the end.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何构建一个完全功能的交通灯系统，行人灯由按钮控制。我们通过分别构建项目的每个部分并在最后组装它们来实现这一点。
- en: We learned how to use breadboards, how the color codes on resistors work, why
    we use resistors when controlling LEDs, and how external LEDs are assembled. Also,
    we learned how to use push buttons, how to prevent floating signals using pullup
    resistors, and how to utilize goroutines in TinyGo.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何使用面包板，电阻上的颜色代码如何工作，为什么在控制LED时使用电阻，以及外部LED的组装方法。我们还学习了如何使用按钮，如何使用上拉电阻防止信号浮空，以及如何在TinyGo中利用goroutine。
- en: In the next chapter, we are going to learn how to read input from a 4x4 keypad
    and how to control a servo motor. We are going to utilize this knowledge to build
    a safety lock that opens when the correct passcode is entered.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何从4x4键盘读取输入以及如何控制伺服电机。我们将利用这些知识来构建一个当输入正确密码时开启的安全锁。
- en: Questions
  id: totrans-338
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Why do we place a resistor between an LED anode and the GPIO port?
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么我们在LED阳极和GPIO端口之间放置一个电阻？
- en: How do we stop a signal from floating?
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何阻止信号浮空？
- en: Why do we sleep after checking a button's state?
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么在检查按钮状态后我们会进入睡眠状态？
- en: How would you modify the code to achieve the following behavior?
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会如何修改代码以实现以下行为？
- en: a. When the button is pressed, turn off the red and green LEDs of the traffic
    lights and let the yellow LED blink.
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. 当按钮被按下时，关闭交通灯的红灯和绿灯，并让黄灯闪烁。
- en: 'b. When the button is pressed again: go back to the normal phase rotation.'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. 当按钮再次被按下时：返回正常相位旋转。
- en: Further reading
  id: totrans-345
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Resistor Color Conversion Calculator: [https://www.digikey.com/en/resources/conversion-calculators/conversion-calculator-resistor-color-code](https://www.digikey.com/en/resources/conversion-calculators/conversion-calculator-resistor-color-code)'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '电阻色环转换计算器: [https://www.digikey.com/en/resources/conversion-calculators/conversion-calculator-resistor-color-code](https://www.digikey.com/en/resources/conversion-calculators/conversion-calculator-resistor-color-code)'
- en: 'Goroutines in TinyGo: [https://aykevl.nl/2019/02/tinygo-goroutines](https://aykevl.nl/2019/02/tinygo-goroutines)'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'TinyGo 中的 Goroutines: [https://aykevl.nl/2019/02/tinygo-goroutines](https://aykevl.nl/2019/02/tinygo-goroutines)'
