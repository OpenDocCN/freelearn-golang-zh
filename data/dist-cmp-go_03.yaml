- en: Channels and Messages
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通道和消息
- en: 'In [Chapter 2](../Text/Ch02.xhtml), *Understanding Goroutines*, we looked at
    how goroutines work, how to use them in a concurrent fashion, and some of the
    common mistakes that might occur. They were simple to use and reason about, but
    they were limited because they are able to spawn other goroutines and wait on
    system calls. In reality, goroutines are more capable than what was shown in the
    previous chapter, and to uncover their full potential we need to understand how
    to use channels, which is the aim of the current chapter. Here, we will look at
    the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](../Text/Ch02.xhtml)中，*理解Goroutines*，我们看到了goroutines的工作原理，如何以并发的方式使用它们，以及可能发生的一些常见错误。它们简单易用，但受限于它们只能生成其他goroutines并等待系统调用。实际上，goroutines比前一章展示的更有能力，为了发挥它们的全部潜力，我们需要了解如何使用通道，这是本章的目标。在这里，我们将讨论以下主题：
- en: Controlling parallelism
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制并行性
- en: Channels and data communication
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通道和数据通信
- en: Types of channels
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通道的类型
- en: Closing and multiplexing channels
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关闭和复用通道
- en: Controlling parallelism
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制并行性
- en: We know that spawned goroutines will start executing as soon as possible and
    in a simultaneous fashion. However, there is an inherent risk involved when the
    said goroutines need to work on a common source that has a lower limit on the
    number of simultaneous tasks it can handle. This might cause the common source
    to significantly slow down or in some cases even fail. As you might guess, this
    is not a new problem in the field of computer science, and there are many ways
    to handle it. As we shall see throughout the chapter, Go provides mechanisms to
    control parallelism in a simple and intuitive fashion. Let's start by looking
    at an example to simulate the problem of burdened common source, and then proceed
    to solve it.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道，生成的goroutines将尽快开始执行，并以同时的方式执行。然而，当这些goroutines需要在一个具有较低限制的共同源上工作时，就会存在固有的风险。这可能导致共同源明显减慢或在某些情况下甚至失败。正如你可能猜到的那样，这在计算机科学领域并不是一个新问题，有许多处理它的方法。正如我们将在整个章节中看到的，Go提供了一些机制来以简单直观的方式控制并行性。让我们从一个模拟负担共同源问题的例子开始，然后继续解决它。
- en: 'Imagine a cashier who has to process orders, but has a limit to process only
    10 orders in a day. Let''s look at how to present this as a program:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个收银员需要处理订单，但一天只能处理10个订单。让我们看看如何将其作为一个程序来呈现：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A possible output of the program might be as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的可能输出如下：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding output shows a cashier who was overwhelmed after taking 10 orders.
    However, an interesting point to note is that if you run the preceding code multiple
    times, you might get different outputs. For example, all of the 30 orders might
    be processed in one of the runs!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的输出显示了一个收银员在接受10个订单后不堪重负。然而，值得注意的是，如果你多次运行前面的代码，你可能会得到不同的输出。例如，在某些运行中，所有30个订单可能会被处理！
- en: This is happening because of what is known as the **race condition**. A data
    race (or race condition) occurs when multiple actors (goroutines, in our case)
    are trying to access and modify a common shared state, and this results in incorrect
    reads and writes by the goroutines.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为所谓的**竞争条件**。数据竞争（或竞争条件）发生在多个参与者（在我们的情况下是goroutines）试图访问和修改一个共享状态时，这会导致goroutines的读写不正确。
- en: 'We can try to solve this issue in two ways:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以尝试以两种方式解决这个问题：
- en: Increasing the limit for processing orders
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加订单处理限制
- en: Increasing the number of cashiers
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加收银员的数量
- en: 'Increasing the limit is feasible only to a certain extent, beyond which it
    would start degrading the system or in the case of the cashier, work will neither
    be efficient nor 100% accurate. On the contrary, by increasing the number of cashiers,
    we can start processing more orders consecutively while not changing the limit.
    There are two approaches to this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 增加限制只有在一定程度上是可行的，超过这个限制将会开始降低系统的性能，或者在收银员的情况下，工作既不高效也不100%准确。相反，通过增加收银员的数量，我们可以开始连续处理更多订单，而不改变限制。有两种方法：
- en: Distributed work without channels
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有通道的分布式工作
- en: Distributed work with channels
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用通道的分布式工作
- en: Distributed work without channels
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 没有通道的分布式工作
- en: 'In order to distribute the work equally among the cashiers, we need to know
    the amount of orders we will get beforehand and ensure that the work each cashier
    receives is within his/her limit. This is not the most practical solution, because
    it would fail in a real-world scenario where we would need to keep track of how
    many orders each cashier has processed and divert the remaining orders to the
    other cashiers. However, before we look at the correct way to solve it, let''s
    take time to better understand the problem of uncontrolled parallelism and try
    to solve it. The following code attempts to solve it in a naïve manner, which
    should provide us with a good start:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在收银员之间平均分配工作，我们需要预先知道订单的数量，并确保每个收银员接收的工作都在他/她的限制范围内。这不是最实际的解决方案，因为在现实世界的情况下，我们需要跟踪每个收银员处理了多少订单，并将剩余的订单转给其他收银员。然而，在我们寻找正确解决方法之前，让我们花时间更好地理解无控制并行性的问题，并尝试解决它。以下代码尝试以天真的方式解决它，这应该为我们提供一个良好的开始：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following is one possible output:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可能的一个输出：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We split the available 30 orders between cashiers `1`, `2`, and `3`, and all
    of the orders were successfully processed without anyone complaining about being
    tired. However, note that the code to make this work required a lot of work on
    our end. We had to create a function generator to create cashiers, keep track
    of which cashier to use via `cashierIndex`, and so on. And the worst part is that
    the preceding code isn''t correct! Logically, it might seem to be doing what we
    want; however, note that we are spawning multiple goroutines that are working
    on variables with a shared state, `ordersProcessed`! This is the race condition
    we discussed earlier. The good news is that we can detect it in `wochan.go` in
    two ways:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将30个可用订单分配给收银员`1`、`2`和`3`，所有订单都成功处理，没有人抱怨累了。但是，请注意，使这项工作需要我们付出很多努力。我们必须创建一个函数生成器来创建收银员，通过`cashierIndex`跟踪要使用哪个收银员等等。最糟糕的部分是前面的代码是不正确的！从逻辑上看，它可能看起来是在做我们想要的事情；但是，请注意，我们正在生成多个goroutine，它们正在处理具有共享状态`ordersProcessed`的变量！这就是我们之前讨论的数据竞争。好消息是我们可以在`wochan.go`中以两种方式检测到它：
- en: 'In `createCashier` function, replace `fmt.Println("Cashier ", cashierID, "Processing
    order", orderNum)` with `fmt.Println(cashierID, "->", ordersProcessed)`. Here
    is one possible output:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`createCashier`函数中，用`fmt.Println(cashierID, "->", ordersProcessed)`替换`fmt.Println("Cashier
    ", cashierID, "Processing order", orderNum)`。以下是一个可能的输出：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The previous point proves that the code is not correct; however, we had to
    guess the possible issue in the code and then verify it. Go provides us with tools
    to detect data race so that we do not have to worry about such issues. All we
    have to do to detect data race is to test, run, build, or install the package
    (file in the case of run) with the `-race` flag . Let''s run this on our program
    and look at the output:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前面的观点证明了代码是不正确的；然而，我们不得不猜测代码中可能存在的问题，然后进行验证。Go为我们提供了工具来检测数据竞争，这样我们就不必担心这类问题。我们只需使用`-race`标志测试、运行、构建或安装包（在运行的情况下是文件）。让我们在我们的程序上运行它并查看输出：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As can be seen, the `-race` flag helped us to detect the data race.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如图所示，`-race`标志帮助我们检测数据竞争。
- en: 'Does this mean that we cannot distribute our tasks when we have shared state?
    Of course we can! But we need to use mechanisms provided by Go for this purpose:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是否意味着当我们有共享状态时我们无法分配我们的任务？当然可以！但是我们需要使用Go提供的机制来实现这一目的：
- en: Mutexes, semaphores, and locks
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互斥锁、信号量和锁
- en: Channels
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通道
- en: Mutex is a mutual exclusion lock that provides us with a synchronization mechanism
    to allow only one goroutine to access a particular piece of code or shared state
    at any given point in time. As already stated, for synchronization problems, we
    can use either mutex or channels, and Go recommends using the right construct
    for the right job. However, in practice, using channels provides us with a higher
    level of abstraction and greater versatility in terms of usage, though mutex has
    its uses. It is for this reason for that, throughout this chapter and the book,
    we will be making use of channels.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 互斥锁是一种互斥锁，它为我们提供了一种同步机制，允许只有一个goroutine在任何给定时间访问特定的代码或共享状态。正如已经说明的，对于同步问题，我们可以使用互斥锁或通道，Go建议使用正确的构造来解决正确的问题。然而，在实践中，使用通道为我们提供了更高级的抽象和更大的灵活性，尽管互斥锁也有其用途。因此，在本章和本书中，我们将使用通道。
- en: Distributed work with channels
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用通道进行分布式工作
- en: 'We are certain about three things now: we want to distribute our orders among
    the cashiers correctly, we want to ensure that the correct number of orders are
    processed by each cashier, and we want to use channels to solve this problem.
    Before we address how to solve the cashier problem using channels, let''s first
    look at the basic syntax and usage of a channel.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对三件事情很确定：我们想要正确地将订单分配给收银员，我们想要确保每个收银员处理正确数量的订单，我们想要使用通道来解决这个问题。在解决使用通道解决收银员问题之前，让我们先看一下通道的基本语法和用法。
- en: What is a channel?
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 什么是通道？
- en: A channel is a communication mechanism that allows us to pass data between goroutines.
    It is an in-built data type in Go. Data can be passed using one of the primitive
    data types or we can create our own complex data type using structs.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通道是一种通信机制，允许我们在goroutine之间传递数据。它是Go中的内置数据类型。数据可以使用原始数据类型之一传递，或者我们可以使用结构创建自己的复杂数据类型。
- en: 'Here is a simple example to demonstrate how to use a channel:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个简单的示例，演示如何使用通道：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If we run the preceding code, it would print the following output:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行前面的代码，它将打印以下输出：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The basic pattern for using channels can be explained by the following steps:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用通道的基本模式可以通过以下步骤来解释：
- en: Create the channel to accept the data to be processed.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建通道以接受要处理的数据。
- en: Launch the goroutines that are waiting on the channel for data.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动等待通道数据的goroutine。
- en: Then, we can either use `main` function or other goroutines to pass data into
    the channel.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以使用`main`函数或其他goroutine将数据传递到通道中。
- en: The goroutines listening on the channel can accept the data and process them
    .
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监听通道的goroutine可以接受数据并处理它们。
- en: The advantage of using channels is that multiple goroutines can wait on the
    same channel and execute tasks concurrently.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用通道的优势在于多个goroutine可以在同一个通道上等待并同时执行任务。
- en: Solving the cashier problem with goroutines
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用goroutine解决收银员问题
- en: 'Before we try to solve the problem, let''s first formulate what we want to
    achieve:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试解决问题之前，让我们首先制定我们想要实现的目标：
- en: Create a channel `orderChannel` that accepts all orders.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个接受所有订单的通道`orderChannel`。
- en: Launch the required number of cashier goroutines that accept limited numbers
    of orders from `orderChannel`.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动所需数量的收银员goroutine，从`orderChannel`接受有限数量的订单。
- en: Start putting all orders into `orderChannel`.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始将所有订单放入`orderChannel`。
- en: 'Let''s look at one possible solution that tries to solve the cashier problem
    using the preceding steps:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个可能的解决方案，试图使用前面的步骤解决收银员问题：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'On running the preceding code with `-race` flag, we can see that the code ran
    without any data races:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`-race`标志运行前面的代码，我们可以看到代码在没有任何数据竞争的情况下运行：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The code is quite straightforward, is easy to parallelize, and works well without
    causing any data races.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 代码非常简单，易于并行化，并且在不引起任何数据竞争的情况下运行良好。
- en: Channels and data communication
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通道和数据通信
- en: 'Go is a statically typed language, and this means that a given channel can
    only send or receive data of a single data type. In Go''s terminology, this is
    known as a channel''s **element type**. A Go channel will accept any valid Go
    data type including functions. Here is an example of a simple program that accepts
    and calls on functions:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Go是一种静态类型的语言，这意味着给定的通道只能发送或接收单一数据类型的数据。在Go的术语中，这被称为通道的**元素类型**。Go通道将接受任何有效的Go数据类型，包括函数。以下是一个接受和调用函数的简单程序的示例：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output of the preceding code is as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码的输出如下：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the preceding code sample, we say that the channel `ch` has the element type
    of `func(int)` and the channel `done` has the element type of `bool`. There are
    a lot more interesting details in the code, but we shall discuss them in the following
    sections.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，我们说通道`ch`的元素类型为`func(int)`，通道`done`的元素类型为`bool`。代码中还有很多有趣的细节，但我们将在接下来的部分讨论它们。
- en: Messages and events
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 消息和事件
- en: 'So far we have been using the term *data* to refer to the values that are being
    sent and received from a channel. While this might be easy to understand so far,
    Go uses two specific terms to describe the type of data that is being communicated
    over the channels. They are called **messages** and **events**. In terms of code
    they are identical, but the terms are used to help us understand the *type* of
    data that is being sent. In a nutshell:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在使用术语*数据*来指代从通道发送和接收的值。虽然到目前为止这可能很容易理解，但Go使用两个特定的术语来描述通过通道进行通信的数据类型。它们被称为**消息**和**事件**。在代码方面它们是相同的，但这些术语用于帮助我们理解被发送的数据的*类型*。简而言之：
- en: Messages are generally values we want the goroutine to process and act on them
    if required.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息通常是我们希望goroutine处理并在需要时对其进行操作的值。
- en: Events are used to signify that a certain *event* has occurred. The actual value
    received might not be as important as the act of receiving a value. Note that
    though we use the term *event*, they are still a type of *message*.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件用于表示某个*事件*已发生。接收到的实际值可能并不像接收值的行为那样重要。请注意，尽管我们使用术语*事件*，它们仍然是一种*消息*类型。
- en: In the previous code example, values sent to `ch` are messages, while the value
    sent to `done` is an event. An important point to note is that element types of
    event channels tend to be `struct{}{}`, `bool`, or `int`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，发送到`ch`的值是消息，而发送到`done`的值是事件。需要注意的重要一点是，事件通道的元素类型往往是`struct{}{}`、`bool`或`int`。
- en: Now that we understand what channel element types, messages, and events are,
    let's look at the different types of channels.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了通道元素类型、消息和事件是什么，让我们来看看不同类型的通道。
- en: Types of channels
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通道的类型
- en: 'Go provides us with three major variations on channel types. They can be broadly
    classified into:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Go为我们提供了三种主要的通道类型变体。它们可以被广泛地分类为：
- en: Unbuffered
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无缓冲
- en: Buffered
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓冲
- en: Unidirectional (send-only and receive-only type channels)
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单向（只发送和只接收类型的通道）
- en: The unbuffered channel
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无缓冲通道
- en: 'This is the basic channel type available in Go. It is quite straightforward
    to use—we send data into the channel and we receive data at the other end. The
    interesting part is that any goroutine operating on an unbuffered channel will
    be blocked until both the sender and receiver goroutines are available. For example,
    consider the following code snippet:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Go中可用的基本通道类型。使用起来非常简单——我们将数据发送到通道，然后在另一端接收数据。有趣的部分是，任何在无缓冲通道上操作的goroutine都将被阻塞，直到发送方和接收方的goroutine都可用。例如，考虑以下代码片段：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We have a channel `ch` of element type `int`. We start three goroutines; one
    sends a message of `100` onto the channel (`send100`) and the other two goroutines
    (`recv1` and `recv2`) wait on the channel. `send100` is blocked until either of
    `recv1` or `recv2` starts listening on the channel to receive the message. If
    we assume that `recv2` receives the message sent on the channel by `send100`,
    then `recv1` will be waiting until another message is sent on the channel. If
    the preceding four lines are the only communications on the channel, then `recv1`
    will wait until the program ends and then will be abruptly killed off by the Go
    runtime.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个元素类型为`int`的通道`ch`。我们启动了三个goroutine；一个将消息`100`发送到通道（`send100`），另外两个goroutine（`recv1`和`recv2`）在通道上等待。`send100`被阻塞，直到`recv1`或`recv2`中的任一个开始监听通道以接收消息。如果我们假设`recv2`接收了由`send100`发送到通道的消息，那么`recv1`将等待，直到在通道上发送另一条消息。如果前面的四行是通道上的唯一通信，那么`recv1`将等待直到程序结束，然后将被Go运行时突然终止。
- en: The buffered channel
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缓冲通道
- en: Consider the case where we are able to send more messages into a channel than
    the goroutines receiving the messages can handle them. If we use unbuffered channels,
    it would significantly slow down the program because we will have to wait for
    each message to be processed before we can put in another message. It would be
    ideal if the channel could store these extra messages or "buffer" the messages.
    This is exactly what a buffered channel does. It maintains a queue of messages
    which a goroutine will consume at its own pace. However, even a buffered channel
    has a limited capacity; we need to define the capacity of the queue at the time
    of channel creation.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这样一种情况，我们能够向通道发送的消息比接收消息的goroutine处理的消息多。如果我们使用无缓冲通道，程序将显著减慢，因为我们必须等待每条消息被处理后才能放入另一条消息。如果通道能够存储这些额外的消息或“缓冲”消息，那将是理想的。这正是缓冲通道所做的。它维护一个消息队列，goroutine将以自己的速度消耗它。然而，即使缓冲通道也有限制容量；我们需要在通道创建时定义队列的容量。
- en: 'So, how do we use a buffered channel? Syntax-wise, it is identical to using
    an unbuffered channel. The behavior of a buffer channel can be explained as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何使用带缓冲的通道呢？从语法上讲，它与使用无缓冲通道是相同的。带缓冲通道的行为可以解释如下：
- en: '**If a buffered channel is empty**: Receiving messages on the channel is blocked
    until a message is sent across the channel'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**如果带缓冲通道为空**：在通道上接收消息将被阻塞，直到通过通道发送消息'
- en: '**If a buffered channel is full**: Sending messages on the channel is blocked
    until at least one message is received from the channel, thus making space for
    the new message to be put on the channel''s buffer or queue'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**如果带缓冲通道已满**：在通道上发送消息将被阻塞，直到至少从通道接收到一条消息，从而为新消息腾出空间放在通道的缓冲区或队列中'
- en: '**If a buffered channel is partially filled, that is, neither full nor empty**:
    Either sending or receiving messages on a channel is unblocked and the communication
    is instantaneous'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**如果带缓冲通道部分填充，即既不满也不空**：在通道上发送或接收消息都不会被阻塞，通信是瞬时的'
- en: '![](img/c3be325a-235f-4cb6-9c5e-61393adb9827.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c3be325a-235f-4cb6-9c5e-61393adb9827.png)'
- en: Communication over a buffered channel
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 通过带缓冲通道进行通信
- en: The unidirectional buffer
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单向缓冲
- en: 'Messages can be sent and received from a channel. However, when goroutines
    use channels for communication, they are generally going to be for a single purpose:
    either to send or receive from a channel. Go allows us to specify whether a channel
    being used by a goroutine is for sending or receiving messages. It accomplishes
    this with the help of unidirectional channels. Once a channel has been identified
    as being unidirectional, we cannot perform the other operation on them. This means
    that a unidirectional send channel cannot be used to receive messages, and a unidirectional
    receive channel cannot be used to send messages. Any attempts to do so would be
    caught by the Go compiler as compile-time errors.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 消息可以从通道发送和接收。然而，当goroutine使用通道进行通信时，它们通常只用于单一目的：要么从通道发送，要么接收。Go允许我们指定goroutine使用的通道是用于发送还是接收消息。它通过单向通道的帮助来实现这一点。一旦通道被标识为单向，我们就不能对其执行其他操作。这意味着单向发送通道不能用于接收消息，单向接收通道不能用于发送消息。任何尝试这样做的行为都将被Go编译器识别为编译时错误。
- en: 'Here is an example of using unidirectional channels correctly:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是正确使用单向通道的示例：
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The expected output would be as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 预期输出将如下所示：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, let''s try to send over a receiving channel and see what happens. We will
    only see the changed function in the previous example here:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试在接收通道上发送消息并看看会发生什么。我们只会在前面的示例中看到更改的函数：
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, if we try to run or build the updated program, we will get the following
    error:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们尝试运行或构建更新后的程序，我们将会得到以下错误：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'So, how would the program behave if we used a buffered channel? Since there
    will be no blocking on an unfilled channel, the `send` goroutine sends a message
    onto the channel and then continues executing. The `recv` goroutine reads from
    the channel when it starts executing and then prints it:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如果我们使用带缓冲的通道，程序会如何行为？由于未填充的通道不会阻塞，`send` 协程将消息发送到通道，然后继续执行。`recv` 协程在开始执行时从通道中读取，然后打印它：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The output would be as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Closing channels
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关闭通道
- en: 'In the previous sections, we have looked at three types of channels and how
    to create them. In this section, let''s look at how to close the channels and
    how this might affect sending and receiving on these channels. We close a channel
    when we no longer want to send any messages on the said channel. How a channel
    behaves after being closed is different for each type of channel. Let''s dive
    into them:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们已经看过三种类型的通道以及如何创建它们。在本节中，让我们看看如何关闭通道以及这可能会影响在这些通道上发送和接收消息。当我们不再想在通道上发送任何消息时，我们关闭通道。通道关闭后的行为对于每种类型的通道都是不同的。让我们深入了解一下：
- en: '**Unbuffered closed channel**: Sending messages will cause panic and receiving
    on it will yield an immediate zero value of the channel''s element type.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无缓冲关闭通道**：发送消息将导致恐慌，接收消息将立即产生通道元素类型的零值。'
- en: '**Buffered closed channel**: Sending messages will cause panic but receiving
    on it will first yield all the values in the channel''s queue. Once the queue
    has been exhausted, then the channel will start yielding zero values of the channel''s
    element type.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**带缓冲关闭通道**：发送消息将导致恐慌，但在通道的队列中首先产生所有值。一旦队列耗尽，通道将开始产生通道元素类型的零值。'
- en: 'The following is a program to elucidate on the two preceding points:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个阐述前两点的程序：
- en: '[PRE19]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The following is one possible output of the program:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的一个可能输出如下：
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Finally, here are some further useful points about closing channels and closed
    channels:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，以下是一些有关关闭通道和已关闭通道的进一步有用的要点：
- en: It is not possible to determine if a channel has been closed. The best we can
    do is check if we were able to successfully retrieve a message from a channel.
    We know that the default syntax for retrieving on channel is `msg := <- ch`. However,
    there is a variant on this retrieval: `msg, ok := <-ch`. The second parameter
    tells us if the retrieval was successful. If a channel is closed, `ok` will be
    `false`. This can be used to tell when a channel has been closed.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法确定通道是否已关闭。我们能做的最好的事情是检查我们是否能够成功地从通道中检索到消息。我们知道检索通道的默认语法是 `msg := <- ch`。然而，还有一种检索的变体：`msg,
    ok := <-ch`。第二个参数告诉我们检索是否成功。如果通道关闭，`ok` 将为 `false`。这可以用来告诉通道何时已关闭。
- en: '`msg, ok := <-ch` is a common pattern when iterating over channels. As a result,
    Go allows us to `range` over a channel. When a channel closes, the `range` loop
    ends.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msg, ok := <-ch` 是在迭代通道时的常见模式。因此，Go允许我们对通道进行`range`。当通道关闭时，`range`循环结束。'
- en: Closing a closed channel, nil channel, or a receive-only channel will cause
    panic. Only a bidirectional channel or send-only channel can be closed.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关闭已关闭的通道、空通道或只接收通道将导致恐慌。只有双向通道或只发送通道可以关闭。
- en: It is not mandatory to close a channel and irrelevant for the **garbage collector**
    (**GC**). If the GC determines that a channel is unreachable, irrespective of
    whether it is open or closed, the channel will be garbage collected.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关闭通道并不是强制性的，对于垃圾收集器（GC）也是无关紧要的。如果GC确定通道不可达，无论通道是打开的还是关闭的，通道都将被垃圾回收。
- en: Multiplexing channels
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多路复用通道
- en: Multiplexing describes the methodology where we use a single resource to act
    upon multiple signals or actions. This method is used extensively in telecommunications
    and computer networks. We might find ourselves in a situation where we have multiple
    types of tasks that we want to execute. However, they can only be executed in
    mutual exclusion, or they need to work on a shared resource. For this, we make
    use of a pattern in Go known as channels multiplexing. Before we dive into how
    to actually multiplex channels, let's try to implement it on our own.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 多路复用描述了我们使用单一资源来对多个信号或操作进行操作的方法。这种方法在电信和计算机网络中被广泛使用。我们可能会发现自己处于这样一种情况：我们有多种类型的任务需要执行。但是，它们只能在互斥状态下执行，或者它们需要在共享资源上工作。为此，我们使用Go中称为通道多路复用的模式。在深入讨论如何实际多路复用通道之前，让我们尝试自己实现它。
- en: 'Imagine that we have a set of channels and we want to act on them as soon as
    data is sent over a channel. Here''s a naïve approach on how we want to do this:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一组通道，并且我们希望在数据发送到通道时立即对其进行操作。以下是我们希望这样做的一种天真的方法：
- en: '[PRE21]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The output of the preceding program is as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 前面程序的输出如下：
- en: '[PRE22]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the loop within the goroutine, the first channel is never waited upon and
    this causes the deadlock in the goroutine. Multiplexing helps us wait upon multiple
    channels without blocking on any of the channels while acting on a message once
    it is available on a channel.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在goroutine中的循环中，第一个通道从未被等待，这导致了goroutine中的死锁。多路复用帮助我们在多个通道上等待，而不会在任何通道上阻塞，同时在通道上有消息时对其进行操作。
- en: 'The following are some important points to remember when multiplexing on channels:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在多路复用通道时，有一些重要的要点需要记住：
- en: '**Syntax**:'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语法**：'
- en: '[PRE23]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: It is possible that, by the time `select` is executed, more than one case is
    ready with a message. In this case, `select` will not execute all of the cases,
    but will pick one at random, execute it, and then exit the `select` statement.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在执行`select`时，可能会有多个`case`准备好接收消息。在这种情况下，`select`不会执行所有`case`，而是随机选择一个执行，然后退出`select`语句。
- en: However, the preceding point might be limited if we want to react on messages
    being sent to all channels in `select` cases. Then we can put the `select` statement
    inside a `for` loop and it will ensure that all messages will be handled.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然而，如果我们希望在`select`语句的`case`中对发送到所有通道的消息做出反应，前面的观点可能会受到限制。然后我们可以将`select`语句放在`for`循环中，它将确保处理所有消息。
- en: Even though the `for` loop will handle messages sent on all channels, the loop
    will still be blocked until a message is available on it. There might be scenarios
    where we do not wish to block the loop iteration and instead do some "default"
    action. This can be achieved using `default` case in `select` statement.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽管`for`循环将处理发送到所有通道的消息，但循环仍会被阻塞，直到有消息可用。可能存在我们不希望阻塞循环迭代，而是执行一些“默认”操作的情况。这可以通过`select`语句中的`default`
    case来实现。
- en: 'Updated syntax based on the preceding two points is:'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于前面两点的更新语法是：
- en: '[PRE24]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the case of buffered channels, the order in which the messages are received
    is not guaranteed.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于缓冲通道，接收消息的顺序不是保证的。
- en: 'The following is the correct way to multiplex on all the required channels
    without being blocked on any and continuing to work on all the messages being
    sent:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在不被任何通道阻塞的情况下对所有所需通道进行多路复用的正确方法，并继续处理发送的所有消息：
- en: '[PRE25]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The following is the output of the preceding program:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面程序的输出：
- en: '[PRE26]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Unfortunately, there is one flaw with the program: it leaks the goroutine handling, `select`*.*
    This is also pointed out in the comment near the end of the `main` function. This
    generally happens when we have a goroutine that is running but we cannot directly
    reach it. Even if a goroutine''s reference is not stored, the GC will not garbage
    collect it. Thus, we need a mechanism to stop and return from such goroutines.
    In general, this can be achieved by creating a channel specifically for returning
    from the goroutine.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，该程序存在一个缺陷：它泄漏了处理`select`的goroutine。这也在`main`函数末尾附近的注释中指出。当我们有一个正在运行但无法直接访问的goroutine时，通常会发生这种情况。即使goroutine的引用未被存储，GC也不会对其进行垃圾回收。因此，我们需要一种机制来停止并从这样的goroutine返回。通常，这可以通过创建一个专门用于从goroutine返回的通道来实现。
- en: 'In the preceding code, we send the signal via the `done` channel. The following
    would be the output if we uncomment the lines and then run the program:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们通过`done`通道发送信号。如果我们取消注释这些行然后运行程序，输出将如下：
- en: '[PRE27]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Summary
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at the reason to control parallelism and developed
    an appreciation for the complexity of the task when a shared state is involved.
    We used the example of an overworked cashier as a programming problem to solve
    and to experiment with channels, and further explored different types of channels
    and the nuances involved with using them. For example, we saw that both closed
    buffered and unbuffered channels will cause panic if we try to send messages on
    them, and receiving messages from them leads to different results based on whether
    the channel is buffered and if the channel is empty or full. We also saw how to
    wait on multiple channels without blocking on any with the help of `select`.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了控制并行性的原因，并对涉及共享状态的任务的复杂性有了更深入的了解。我们以一个超负荷的收银员的例子作为一个需要解决的编程问题，并通过通道进行实验，并进一步探讨了不同类型的通道以及使用它们涉及的微妙之处。例如，我们看到关闭的缓冲通道和非缓冲通道都会在我们尝试向它们发送消息时引发恐慌，并且从它们接收消息会根据通道是缓冲的以及通道是空的还是满的而导致不同的结果。我们还看到了如何在不阻塞任何通道的情况下等待多个通道上的消息的方法。
- en: In later chapters, from [Chapter 5](../Text/Ch05.xhtml), *Introducing Goophr*,
    through to [Chapter 8](../Text/Ch08.xhtml), *Deploying Goophr*, we will be developing
    a distributed web application. This requires us to have basic knowledge of how
    to interact with a web server, using the HTTP protocol using tools other than
    a web browser. This knowledge will come in handy not only when interacting with
    our application but also with the standard web as a developer. This will be the
    subject of the next chapter, [Chapter 4](../Text/Ch04.xhtml), *The RESTful Web*,
    where we will look at the tools and protocols we will be using to interact with
    our web application.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在后面的章节中，从[第5章](../Text/Ch05.xhtml) *介绍Goophr* 到[第8章](../Text/Ch08.xhtml) *部署Goophr*，我们将开发一个分布式网络应用。这需要我们具备基本的知识，如何使用HTTP协议与网络服务器进行交互，而不是使用网络浏览器。这些知识不仅在与我们的应用程序交互时会派上用场，而且在作为开发人员与标准网络交互时也会派上用场。这将是下一章[第4章](../Text/Ch04.xhtml)
    *RESTful网络* 的主题，我们将看看我们将使用的工具和协议来与我们的网络应用程序进行交互。
