- en: Introducing Goophr
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Goophr
- en: Now that we have a solid understanding about goroutines, channels, REST, and
    some of the tools for developing Go applications, let's use this knowledge to
    build a distributed web application. The purpose of this application will be to
    index and search documents. In this chapter, we will lay down the design of how
    such an application will be structured, and we will also look at a few remaining
    topics and tools that we will be using in our project.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经对goroutines、通道、REST和一些用于开发Go应用程序的工具有了扎实的了解，让我们利用这些知识来构建一个分布式Web应用程序。这个应用程序的目的将是索引和搜索文档。在本章中，我们将阐述这样一个应用程序的设计结构，并且我们还将看一下我们将在项目中使用的一些剩余主题和工具。
- en: 'This chapter can be broadly classified into two sections:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章可以大致分为两个部分：
- en: Design overview
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计概述
- en: Project structure
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目结构
- en: What is Goophr?
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Goophr是什么？
- en: We will build an application to index and search documents. This is a feature
    that we use every time we access the internet using one of the search portals
    such as Google, Bing, or DuckDuckGo. This is also a feature which some sites provide
    with the help of a search engine.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个应用程序来索引和搜索文档。这是我们每次使用Google、Bing或DuckDuckGo等搜索门户之一访问互联网时使用的功能。这也是一些网站借助搜索引擎提供的功能。
- en: We will build a search engine application in the next few chapters by drawing
    inspiration from existing technologies such as Google, the Solr search engine,
    and goroutines. The name of our application is a play on these three technologies.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几章中，我们将构建一个搜索引擎应用程序，从现有技术（如Google、Solr搜索引擎和goroutines）中汲取灵感。我们的应用程序名称是对这三种技术的一种玩耍。
- en: Imagine searching for a phrase on any search portal; on submitting our query
    we get a list of links with snippets of text containing terms from our search
    phrase. Many times the first few links tend to be the relevant web page or document
    that we were looking for. How is it possible to get the list of the most relevant
    documents? The way in which Google or other search engines achieve this is quite
    complicated; they have a large team of Computer Scientists constantly fine-tuning
    the search engine.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下在任何搜索门户上搜索短语；在提交查询后，我们会得到一个包含来自我们搜索短语的术语的文本摘录的链接列表。很多时候，前几个链接往往是我们正在寻找的相关网页或文档。如何可能获得最相关文档的列表？Google或其他搜索引擎实现这一点的方式非常复杂；他们有一个大型的计算机科学家团队不断调整搜索引擎。
- en: We will not be aiming to build anything as complicated as that. By having a
    humble and practical goal, we can create a minimal yet usable search engine. However,
    first let's define the purpose and criteria for our application.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不打算构建任何复杂的东西。通过拥有一个谦逊而实用的目标，我们可以创建一个最小但可用的搜索引擎。不过，首先让我们定义应用程序的目的和标准。
- en: Design overview
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计概述
- en: 'Now that we have briefly described the application we want to build and the
    reason for building it, let''s look at the list of features we want to implement
    as part of the search engine:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经简要描述了我们想要构建的应用程序以及构建它的原因，让我们来看看我们想要作为搜索引擎实现的功能列表：
- en: It should accept links to documents provided in the POST request and download
    them
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该接受在POST请求中提供的文档链接并下载它们
- en: It should process and index the downloaded documents
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该处理和索引下载的文档
- en: It should handle search queries and respond with a list of documents with snippets
    containing the search terms
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该处理搜索查询，并以包含搜索词的摘录的文档列表作出响应
- en: The returned list of documents should be in the order of greater occurrence
    of search terms in the document
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回的文档列表应按文档中搜索词的出现次数较多的顺序排列
- en: 'Though we listed four functionalities, we can club the application into two
    main components:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们列出了四个功能，但我们可以将应用程序分为两个主要组件：
- en: '**Goophr Concierge**: This is the component responsible for indexing and returning
    the list of documents for search queries'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Goophr礼宾员**：这是负责索引并返回搜索查询的文档列表的组件'
- en: '**Goophr Librarian**: This is the component responsible for handling user interaction
    and interacting with the first component'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Goophr图书管理员**：这是负责处理用户交互并与第一个组件交互的组件'
- en: The two components will run as two REST servers and all interactions will follow
    the REST protocol. So let's define API definitions for our components! In [Chapter
    4](../Text/Ch04.xhtml), *The RESTful Web*, you noticed that the approach we used
    to define various API endpoints and data definition for communicating via REST
    protocol was pretty verbose and cumbersome. Wouldn't it be better if we had a
    formal way to write API definitions? The good news is that with the prevalence
    of REST protocol, there are many solutions, and one of these solutions is the
    most widely used industry standard—OpenAPI format.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个组件将作为两个REST服务器运行，并且所有交互都将遵循REST协议。因此，让我们为我们的组件定义API定义！在[第4章](../Text/Ch04.xhtml)中，*RESTful
    Web*，您注意到我们用来定义通过REST协议进行通信的各种API端点和数据定义的方法非常冗长和繁琐。如果我们有一种正式的方法来编写API定义，那不是更好吗？好消息是，随着REST协议的普及，有许多解决方案，其中一个解决方案是最广泛使用的行业标准——OpenAPI格式。
- en: OpenAPI specification
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenAPI规范
- en: OpenAPI lets us define RESTful APIs in a standardized manner, and they can be
    defined without being tied down to any particular programming language or framework
    being used. This provides us with a powerful abstraction to define an API that
    can have the initial implementation of the RESTful server in Java or Python; also
    we can port the codebase to Go, with little to no change in the behavior of the
    service.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: OpenAPI让我们以标准化的方式定义RESTful API，并且可以在不受任何特定编程语言或框架的约束下进行定义。这为我们提供了一个强大的抽象，可以定义一个API，该API的初始实现可以是Java或Python中的RESTful服务器；同时，我们也可以将代码库移植到Go中，服务的行为几乎不需要或只需要进行很少的更改。
- en: Let's list the general structure of an OpenAPI specification and use it to redefine
    the `Books API` described in [Chapter 4](../Text/Ch04.xhtml), *The RESTful Web*.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们列出OpenAPI规范的一般结构，并使用它来重新定义[第4章](../Text/Ch04.xhtml)中描述的`Books API`，*RESTful
    Web*。
- en: 'If we look at the `Books API` title, we can define the following elements to
    describe the API:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看一下`Books API`标题，我们可以定义以下元素来描述API：
- en: The URL to our server
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们服务器的URL
- en: The basic information about the intent of the API
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于API意图的基本信息
- en: The paths available in our API
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们API中可用的路径
- en: The methods available per each of the paths in the API
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API中每个路径可用的方法
- en: The possible description and example payloads for the requests and responses
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求和响应的可能描述和示例有效载荷
- en: The schema of the requests and responses payloads
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求和响应有效载荷的模式
- en: 'With these points in mind, let''s look at the OpenAPI specification for `Books
    API`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这些要点，让我们来看看`Books API`的OpenAPI规范：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Goophr Concierge API definition
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Goophr Concierge API定义
- en: 'Goophr Concierge is the user-facing component, and it has two responsibilities—to
    index new documents and to return query results. Informally, we can define the
    API as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Goophr Concierge是面向用户的组件，它有两个责任——索引新文档和返回查询结果。非正式地，我们可以定义API如下：
- en: '`/api/feeder`: This is the API endpoint to upload documents by user'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/api/feeder`：这是用户上传文档的API端点'
- en: The POST request adds new documents if the payload is complete and correct
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有效载荷完整且正确，POST请求将添加新文档
- en: '`/api/query`: The user searches for phrases or terms that are queried against
    this API endpoint'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/api/query`：用户搜索针对此API端点查询的短语或术语'
- en: The POST request contains payload with search terms, and a list of documents
    will be returned
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: POST请求包含带有搜索术语的有效载荷，并将返回文档列表
- en: 'This simple API description is for our understanding. Now let''s look at how
    this would be formulated using the OpenAPI specification:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的API描述是为了我们的理解。现在让我们看看如何使用OpenAPI规范来制定它：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With the help of the API description, the preceding OpenAPI definition should
    be self-explanatory. Details regarding the OpenAPI specification can be found
    at [https://swagger.io/specification/](https://swagger.io/specification/). We
    can use tools provided by Swagger ([https://editor.swagger.io/](https://editor.swagger.io/))
    to get a better visual representation of our API definition.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 借助API描述，前面的OpenAPI定义应该是不言自明的。有关OpenAPI规范的详细信息可以在[https://swagger.io/specification/](https://swagger.io/specification/)找到。我们可以使用Swagger提供的工具([https://editor.swagger.io/](https://editor.swagger.io/))来更好地可视化表示我们的API定义。
- en: 'The following is the screenshot of the Goophr Concierge OpenAPI as viewed in
    Swagger Editor:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在Swagger Editor中查看的Goophr Concierge OpenAPI的屏幕截图：
- en: '![](img/b23d4410-fd76-4101-b6a9-2dca72407769.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b23d4410-fd76-4101-b6a9-2dca72407769.png)'
- en: Viewing OpenAPI on Swagger Editor
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在Swagger Editor上查看OpenAPI
- en: Goophr Librarian API definition
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Goophr图书管理员API定义
- en: Goophr Librarian is the actual maintainer of the index for a set of documents,
    and its responsibilities are to add terms to the index and to return query results
    for the search terms based on the terms available in the index.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Goophr Librarian实际上是一组文档索引的维护者，它的责任是向索引添加术语，并根据索引中可用的术语返回搜索术语的查询结果。
- en: 'Informally, we can define the API as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 非正式地，我们可以定义API如下：
- en: '`/api/index`**:** Goophr Concierge calls this API endpoint to add terms to
    the actual index'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/api/index`**：**Goophr Concierge调用此API端点以将术语添加到实际索引'
- en: The POST request adds terms to index
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: POST请求将术语添加到索引
- en: '`/api/query`: Goophr Concierge calls this endpoint to query search terms submitted
    by the user'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/api/query`：Goophr Concierge调用此端点来查询用户提交的搜索术语'
- en: The POST request returns results for search terms
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: POST请求返回搜索术语的结果
- en: 'The following is the OpenAPI definition for Goophr Librarian:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Goophr图书管理员的OpenAPI定义。
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The two API specifications describe how the two components will interact with
    each other and also the user. However, this is not the complete picture because
    even though we have shown only two API definitions, the actual implementation
    will have three instances of Librarian!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个API规范描述了两个组件如何相互交互，以及用户如何与它们交互。但是，这并不是完整的图片，因为即使我们只显示了两个API定义，实际的实现将有三个Librarian实例！
- en: 'The user interacts with Goophr by interacting with Concierge via `/api/feeder`
    and `/api/query`*.* Concierge can further interact with the three librarian instances
    via `/api/index` and `/api/query`*.* The figure below shows what the application
    will look like in broad terms:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 用户通过与Concierge通过`/api/feeder`和`/api/query`进行交互。Concierge可以通过`/api/index`和`/api/query`与三个librarian实例进一步交互。下图显示了应用程序在广义上的外观：
- en: '![](img/8b5f63f8-a3fa-4923-939e-b37b459c3f87.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8b5f63f8-a3fa-4923-939e-b37b459c3f87.png)'
- en: The design of the Goophr application
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Goophr应用程序的设计
- en: Consider when we need to build a real web application that will be used by multiple
    users; in this case, we'll want to have multiple instances of our services running
    so that they can serve all the users simultaneously. We might also have split
    our application into multiple APIs, and we need to have a good understanding on
    how to design our system to handle such distributed workload. So, in order to
    understand how to deal with such a system, we will work with three instances of
    Librarian.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到当我们需要构建一个真正的Web应用程序，该应用程序将被多个用户使用；在这种情况下，我们希望有多个我们的服务实例运行，以便它们可以同时为所有用户提供服务。我们可能还将我们的应用程序拆分为多个API，并且我们需要深入了解如何设计我们的系统来处理这样的分布式工作负载。因此，为了了解如何处理这样的系统，我们将使用三个Librarian实例。
- en: Project structure
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目结构
- en: 'As per the previous diagram, we have designed our application to consist of
    one instance of Goophr Concierge and three instances of Goophr Librarian. In order
    to keep our code manageable, we will split the source code into two main entities
    and a `docker-compose` file at the root level:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上图，我们已经设计了我们的应用程序，其中包括一个Goophr Concierge实例和三个Goophr Librarian实例。为了保持我们的代码可管理，我们将把源代码分成两个主要实体和一个根级别的`docker-compose`文件：
- en: '`Concierge`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Concierge`'
- en: '`Librarian`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`图书管理员`'
- en: '`docker-compose.yaml`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker-compose.yaml`'
- en: In [Chapter 1](../Text/Ch01.xhtml)*, Developer Environment for Go*, we discussed
    how to create and run docker images. The `docker run ...` works great for single
    images, but it might get complicated when we want to create a network of docker
    images that interact with one another. In order to keep the setup simple, we will
    make use of `docker-compose` ([https://docs.docker.com/compose/overview/](https://docs.docker.com/compose/overview/)).
    In a nutshell, `docker-compose` requires a **YAML** (**Yet Another Markup Language**)
    file with specifics such as what to name the running docker images, what ports
    to run them on, and which `Dockerfile` to use to build these docker images.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](../Text/Ch01.xhtml)*，Go的开发环境*中，我们讨论了如何创建和运行docker镜像。`docker run ...`对于单个镜像效果很好，但当我们想要创建一个相互交互的docker镜像网络时，可能会变得复杂。为了保持设置简单，我们将使用`docker-compose`（[https://docs.docker.com/compose/overview/](https://docs.docker.com/compose/overview/)）。简而言之，`docker-compose`需要一个**YAML**（**另一种标记语言**）文件，其中包含具体信息，例如要给正在运行的docker镜像命名，要在哪些端口上运行它们，以及要使用哪个`Dockerfile`来构建这些docker镜像。
- en: 'The following is the `docker-compose.yaml` file we will be using in our project:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们项目中将使用的`docker-compose.yaml`文件：
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that `a_m_librarian`, `n_z_librarian`, and `others_librarian` are built
    from the same docker image defined by `librarian/Dockerfile`. This makes our life
    easier than using raw `docker` commands to start and configure multiple instances.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`a_m_librarian`，`n_z_librarian`和`others_librarian`都是从由`librarian/Dockerfile`定义的相同docker镜像构建的。这比使用原始的`docker`命令启动和配置多个实例更容易。
- en: 'Here is the project structure that we will be starting with:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将要开始的项目结构：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Even though we have an elaborate structure set up, for now, the only files that
    have any useful code are `concierge/main.go`, `concierge/Dockerfile`, `librarian/main.go`,
    and `librarian/Dockerfile` (for convenience, from here on, we will denote the
    files using shorthand notation `{concierge,librarian}`/`{main.go,Dockerfile}`.
    This notation is inspired from Bash.)
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们已经建立了一个精心设计的结构，但目前，唯一具有任何有用代码的文件是`concierge/main.go`，`concierge/Dockerfile`，`librarian/main.go`和`librarian/Dockerfile`（为了方便起见，从现在开始，我们将使用简写符号`{concierge,librarian}`/`{main.go,Dockerfile}`来表示这些文件。这种表示法受到Bash的启发。）
- en: Let's take a look at `main.go` and `Dockerfile`. These two files will be almost
    identical for both components. For brevity, we will show each of the two types
    of the files once, and show where the differences lie.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下`main.go`和`Dockerfile`。这两个文件对于两个组件来说几乎是相同的。为了简洁起见，我们将分别展示这两种文件，并展示它们的区别所在。
- en: 'Let''s start with `main.go`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`main.go`开始：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now let''s look at `Dockerfile`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下`Dockerfile`：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If we run the complete codebase, we should see an output similar to the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行完整的代码库，我们应该会看到类似以下的输出：
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Summary
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we started by describing the application that we will be building
    in the next three chapters. Then we split the application into two major components—Goophr
    Concierge and Goophr Librarian. Next we looked at the project structure that we
    will be using for our application. We also discussed OpenAPI, the industry standard
    for describing REST APIs, and used it to define our APIs for Concierge and Librarian.
    Finally, we looked at how to run our distributed application using `docker-compose`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先描述了我们将在接下来的三章中构建的应用程序。然后我们将应用程序分成了两个主要组件——Goophr Concierge和Goophr Librarian。接下来，我们看了一下我们将在应用程序中使用的项目结构。我们还讨论了OpenAPI，这是描述REST
    API的行业标准，并用它来定义我们的Concierge和Librarian的API。最后，我们看了一下如何使用`docker-compose`运行我们的分布式应用程序。
- en: In the next chapter, we will look at Goophr Concierge, which will interact with
    users to upload documents, and respond to the search queries from users.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看一下Goophr Concierge，它将与用户交互以上传文档，并响应用户的搜索查询。
