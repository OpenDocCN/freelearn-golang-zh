- en: Goophr Librarian
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Goophr图书管理员
- en: In [Chapter 6](../Text/Ch06.xhtml), *Goophr Concierge*, we built the endpoint
    responsible for accepting new documents and breaking them down into tokens to
    be used in the index. However, the current implementation of Concierge's `api.indexAdder`
    returns after printing the token to the console. In this chapter, we will implement
    Goophr Librarian, which can interact with the Concierge to accept tokens and also
    respond to token search queries.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](../Text/Ch06.xhtml)中，*Goophr Concierge*，我们构建了负责接受新文档并将其分解为索引中使用的标记的端点。然而，Concierge的`api.indexAdder`的当前实现在打印标记到控制台后返回。在本章中，我们将实现Goophr图书管理员，它可以与Concierge交互以接受标记，并响应标记搜索查询。
- en: 'In this chapter we will look at following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: The standard indexing model
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准索引模型
- en: The inverted indexing model
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 倒排索引模型
- en: The document indexer
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档索引器
- en: Query resolver APIs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询解析器API
- en: The standard indexing model
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标准索引模型
- en: Consider the index in a book. Each book will have its own index, which lists
    all the words in an alphabetical order showing their location within the book.
    However, if we want to keep track of word occurrences in multiple books, checking
    each book's index is quite inefficient. Let's look at an example.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一本书中的索引。每本书都有自己的索引，按字母顺序列出所有单词，并显示它们在书中的位置。然而，如果我们想要跟踪单词在多本书中的出现，检查每本书的索引就相当低效。让我们看一个例子。
- en: An example – books with an index of words
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个例子 - 具有单词索引的书籍
- en: 'Imagine we have three books: `Book 1`, `Book 2`, and `Book 3`, and the following
    are their respective indexes. The numbers beside each word represent which page
    the word occurs on:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有三本书：`Book 1`，`Book 2`和`Book 3`，它们各自的索引如下。每个单词旁边的数字表示单词出现在哪一页：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s try to find three words from the books'' indexes. A naïve approach might
    be to pick each book and scan it until we hit or miss the word:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试从书的索引中找到三个词。一个天真的方法可能是选择每本书并扫描它，直到找到或错过这个词：
- en: '`apple`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`苹果`'
- en: '`banana`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`香蕉`'
- en: '`parrot`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`鹦鹉`'
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In a nutshell, for each of the terms, we iterated through every book index and
    searched for the word. We went through this whole process for every word including
    `parrot`, which is not present in any of the books! At first this might seem acceptable,
    performance-wise, but consider when we have over a million books to wade through;
    we realize that the approach would not be practical.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，对于每个术语，我们都要遍历每本书的索引并搜索这个词。我们对每个单词都进行了整个过程，包括`鹦鹉`，而这个词并不存在于任何一本书中！起初，这可能在性能上看起来是可以接受的，但是考虑当我们需要查找超过一百万本书时，我们意识到这种方法是不切实际的。
- en: The inverted indexing model
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 倒排索引模型
- en: 'Based on the preceding example, we can state the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的例子，我们可以陈述如下：
- en: We need to have a quick lookup to determine if a word exists in our index
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要快速查找以确定一个词是否存在于我们的索引中
- en: For any given word, we need to have an efficient way to list all the books the
    word might be in
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于任何给定的单词，我们需要一种高效的方法来列出该单词可能出现在的所有书籍
- en: We can achieve these two niceties by using an inverted index. A standard index's
    mapping order is **book** →** word → ****occurrence (page, line, and so on)**
    as seen in the previous example. If we use an inverted index, the mapping order
    becomes **word → ****book → ****occurrence (page, line, and so on)**.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用倒排索引，我们可以实现这两个好处。标准索引的映射顺序是**书籍** → **单词 → **出现（页码、行号等），如前面的例子所示。如果我们使用倒排索引，映射顺序变为**单词
    → **书籍 → **出现（页码、行号等）。
- en: This change might not seem to be of great significance; however, it improves
    the look up a lot. Let's look at it with another example.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个改变可能看起来并不重要，但它大大改善了查找。让我们用另一个例子来看一下。
- en: An example – the inverted index for words in books
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个例子 - 书中单词的倒排索引
- en: 'Let''s take the data from the same example as before but now classified according
    to an inverted index:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从之前的相同例子中获取数据，但现在根据倒排索引进行分类：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With this setup, we can efficiently answer following questions:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个设置，我们可以高效地回答以下问题：
- en: Does a word exist in the index?
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个词是否存在于索引中？
- en: What are all the books a word exists in?
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个词存在于哪些书中？
- en: What pages does a word occur on in a given book?
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给定书中一个词出现在哪些页面上？
- en: 'Let''s again try to find three words from the inverted index:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次尝试从倒排索引中找到三个单词：
- en: '`apple`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`苹果`'
- en: '`banana`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`香蕉`'
- en: '`parrot`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`鹦鹉`'
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: To summarize, instead of going through each of the books, we do a single look
    up for each of the terms, determine if the term exists, and if it does, return
    the list of books which is our ultimate goal.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，我们不是逐本书进行查找，而是对每个术语进行单次查找，确定术语是否存在，如果存在，则返回包含该术语的书籍列表，这是我们的最终目标。
- en: Ranking
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排名
- en: Ranking and the relevance of search results is an interesting and complex topic.
    All major search engines have a dedicated group of software engineers and computer
    scientists who spend a lot of time and effort to ensure that their algorithms
    are most accurate.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 排名和搜索结果的相关性是一个有趣且复杂的话题。所有主要的搜索引擎都有一群专门的软件工程师和计算机科学家，他们花费大量时间和精力来确保他们的算法最准确。
- en: For Goophr, we will simplify the ranking and limit it to the frequency of search
    terms. Higher the search term frequency, higher it ranks in the results.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Goophr，我们将简化排名并将其限制为搜索词的频率。搜索词频率越高，排名越高。
- en: Revisiting the API definition
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新审视API定义
- en: 'Let''s review Librarian''s API definition:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来审视图书管理员的API定义：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Based on the API definition, we can state the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 根据API定义，我们可以陈述如下：
- en: All communication is via the JSON format
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有通信都是通过JSON格式进行
- en: 'The two endpoints for Librarian are: `/api/index` and `/api/query`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图书管理员的两个端点是：`/api/index`和`/api/query`
- en: '`/api/index` uses the `POST` method to add new tokens to the reverse index'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/api/index`使用`POST`方法向反向索引添加新的标记'
- en: '`/api/query` uses the `POST` method to receive search query terms and returns
    a list of all documents that the index contains'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/api/query`使用`POST`方法接收搜索查询词，并返回索引包含的所有文档的列表'
- en: The document indexer – the REST API endpoint
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档索引器 - REST API端点
- en: The main aim of `/api/index` is to accept tokens from Concierge and add them
    to the index. So let's look at what we mean by "adding them to the index".
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`/api/index`的主要目的是接受Concierge的令牌并将其添加到索引中。让我们看看我们所说的“将其添加到索引”是什么意思。'
- en: 'Document indexing can be defined as the following set of consecutive tasks:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 文档索引可以定义为以下一系列连续的任务：
- en: We rely on the payload to provide us with all the meta information needed to
    store the token.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们依赖有效负载提供我们存储令牌所需的所有元信息。
- en: We follow down the inverted index tree, create any node in the path not yet
    created, and finally add the token details.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们沿着倒排索引树向下，创建路径中尚未创建的任何节点，最后添加令牌详细信息。
- en: The query resolver – the REST API endpoint
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查询解析器-REST API端点
- en: The main aim of `/api/query` is to find the set of search terms in the inverted
    index and return a list of document IDs in decreasing order of relevance. Let's
    look at what we mean by "querying search terms" and "relevance".
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`/api/query`的主要目的是在倒排索引中找到一组搜索词，并按相关性递减的顺序返回文档ID列表。让我们看看我们所说的“查询搜索词”和“相关性”是什么意思。'
- en: 'Query resolution can be defined as the following set of consecutive tasks:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 查询解析可以定义为以下一系列连续的任务：
- en: For each of the search terms, we would like to retrieve all available books
    in inverted index form.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个搜索词，我们希望以倒排索引形式检索所有可用的书籍。
- en: Next, we would like to store the occurrence counts for all the words within
    each individual book in a simple look up table (`map`)*.*
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们希望在简单的查找表（`map`）中存储每本书中所有单词的出现计数。
- en: Once we have a map with books and their respective counts, we can convert the
    look up table into an array of ordered document IDs and their respective scores.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们有了一本书及其相应计数的映射，我们就可以将查找表转换为有序文档ID及其相应分数的数组。
- en: Code conventions
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码约定
- en: The code in this chapter is quite straightforward and it follows the same code
    conventions as in [Chapter 6](../Text/Ch06.xhtml), *Goophr Concierge*. So let's
    jump right into the code.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码非常简单直接，并且遵循与[第6章](../Text/Ch06.xhtml)相同的代码约定，*Goophr Concierge*。所以让我们直接进入代码。
- en: Librarian source code
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Librarian源代码
- en: 'Now that we have discussed the design of Librarian in detail, let''s look at
    the project structure and source code:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经详细讨论了Librarian的设计，让我们看看项目结构和源代码：
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Two directories and five files!
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 两个目录和五个文件！
- en: Now let's look at the source code for each of the files.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看每个文件的源代码。
- en: main.go
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: main.go
- en: 'The source file is responsible for initializing routes, starting the index
    system and starting the web server:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 源文件负责初始化路由，启动索引系统和启动Web服务器：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: common/helpers.go
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: common/helpers.go
- en: The source file consists of code that is speacialized to one handler.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 源文件包含专门针对一个处理程序的代码。
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: api/index.go
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: api/index.go
- en: Source file containing code to process and add new terms to the index.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 包含代码以处理并向索引添加新项的源文件。
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: api/query.go
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: api/query.go
- en: Source file contains code responsible for returning sorted results based on
    search terms.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 源文件包含负责根据搜索词返回排序结果的代码。
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Testing Librarian
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试Librarian
- en: 'In order to test whether Librarian works as expected, we need to test two things:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试Librarian是否按预期工作，我们需要测试两件事：
- en: Check if `/api/index` accepts index terms.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`/api/index`是否接受索引项。
- en: Check if `/api/query` returns the correct results and in the expected order.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`/api/query`是否返回正确的结果并且顺序符合预期。
- en: We can test point 1 with the help of a separate program/script, `feeder.go`,
    and point 2 with simple cURL commands.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一个单独的程序/脚本`feeder.go`来测试第1点，使用简单的cURL命令来测试第2点。
- en: Testing feeder.go using /api/index
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用/api/index测试`feeder.go`
- en: 'Here''s the `feeder.go` script to check if `/api/index` accepts index terms:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`feeder.go`脚本，用于检查`/api/index`是否接受索引项：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output from running `feeder.go` (with Librarian running in other window)
    is as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`feeder.go`（在另一个窗口中运行Librarian）的输出如下：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output from Librarian for the preceding program is as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 前述程序的Librarian输出如下：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Testing /api/query
  id: totrans-90
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 测试/api/query
- en: 'In order to test `/api/query` we need to maintain the preceding state of the
    server to make useful queries:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试`/api/query`，我们需要维护服务器的前置状态以进行有用的查询：
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we developed an understanding of inverted indices and implemented
    it for Librarian for the efficient storage and lookup of search terms. We also
    checked our implementation with the help of a script, `feeder.go`, and cURL commands.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了倒排索引并为Librarian实现了高效的存储和查找搜索词。我们还使用脚本`feeder.go`和cURL命令检查了我们的实现。
- en: In the next chapter, [Chapter 8](../Text/Ch08.xhtml), *Deploying Goophr, *we
    will rewrite Concierge's `api.indexAdder` so that it can start sending the tokens
    to be indexed to Librarian. We will also revisit `docker-compose.yaml` so that
    we can have the complete application running and use/test it as a distributed
    system.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，[第8章](../Text/Ch08.xhtml)，*部署Goophr*，我们将重写Concierge的`api.indexAdder`，以便它可以开始将要索引的令牌发送给Librarian。我们还将重新访问`docker-compose.yaml`，以便我们可以运行完整的应用程序并将其用作分布式系统进行使用/测试。
