- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Feature Flags
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特性标志
- en: In this chapter, we will learn about feature flags, what they are, how to use
    them, and the benefits of using them. Using feature flags is not mandatory for
    applications. However, as application complexity increases, the need for feature
    flags will arise.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章，我们将了解特性标志，它们是什么，如何使用它们，以及使用它们的益处。使用特性标志对于应用程序不是强制性的。然而，随着应用程序复杂性的增加，对特性标志的需求将会出现。
- en: There are many different features provided by feature flags, but in this chapter,
    we will focus on how to use feature flags to enable/disable certain features in
    an application. We will be using an open source, simple version of the feature
    flag server to demonstrate the integration for both frontend and backend services.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 特性标志提供了许多不同的特性，但本章我们将专注于如何使用特性标志在应用程序中启用/禁用特定特性。我们将使用一个开源的简单版本特性标志服务器来演示前端和后端服务的集成。
- en: 'In this chapter, we’ll cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding what feature flags are all about
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解特性标志的实质
- en: Installing an open source feature flag server
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装开源特性标志服务器
- en: Enabling/disabling features using feature flags
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用特性标志启用/禁用特性
- en: Integrating feature flags for frontend and backend services
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成前端和后端服务的特性标志
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: All the source code explained in this chapter can be found at [https://github.com/PacktPublishing/Full-Stack-Web-Development-with-Go/tree/main/chapter11](https://github.com/PacktPublishing/Full-Stack-Web-Development-with-Go/tree/main/chapter11).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中解释的所有源代码都可以在[https://github.com/PacktPublishing/Full-Stack-Web-Development-with-Go/tree/main/chapter11](https://github.com/PacktPublishing/Full-Stack-Web-Development-with-Go/tree/main/chapter11)找到。
- en: This chapter uses the cURL tool to perform HTTP operations. The tool is available
    for different operating systems and can be downloaded from [https://curl.se/download.xhtml](https://curl.se/download.xhtml).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使用cURL工具执行HTTP操作。该工具适用于不同的操作系统，可以从[https://curl.se/download.xhtml](https://curl.se/download.xhtml)下载。
- en: An introduction to feature flags
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特性标志简介
- en: In the current rapidly changing world, developers need to make changes and roll
    out new features almost every single day, if not quicker. Sometimes, this requires
    features to be built even before there are any user needs. Having the ability
    to deploy features into production without disruption is the holy grail of software
    development.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前快速变化的世界中，开发者几乎每天都需要进行更改和推出新特性，如果不是更快的话。有时，这甚至需要在有用户需求之前构建特性。能够在不造成干扰的情况下将特性部署到生产环境中是软件开发的神圣目标。
- en: Features that are deployed to production may or may not be made available to
    users; this all depends on tactical decisions on the business side. Developers
    will keep on releasing features to production and, when the time is right, the
    feature will be made available with a click of a button from the business side.
    This kind of facility is provided by the feature flag.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 部署到生产环境中的特性可能对用户开放也可能不开放；这完全取决于业务方面的战术决策。开发者会持续将特性发布到生产环境中，当时机成熟时，特性将通过业务端的一个按钮点击来启用。这种功能正是特性标志提供的。
- en: In simple terms, feature flags are like on/off switches that we can use to enable/disable
    features in our applications without creating disruption. Enabling features will
    also allow companies to strategically enable or disable features depending on
    the market and users’ needs, which can impact the bottom line of a company.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，特性标志就像是我们可以在不造成干扰的情况下启用/禁用应用程序中特性的开关。启用特性也将允许公司根据市场和用户需求有策略地启用或禁用特性，这可能影响公司的底线。
- en: 'As a tool, feature flags not only provide the ability to run on/off features
    but there are also many other benefits you can also get out of it:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种工具，特性标志不仅提供了运行/关闭特性的能力，还有许多其他好处你可以从中获得：
- en: Testing features for certain demographics based on certain conditions such as
    geographical location, user’s age, and so on
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据某些条件（如地理位置、用户年龄等）对特定人群进行特性测试
- en: Splitting of the traffic request based on network condition
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据网络条件对流量请求进行分割
- en: Conducting UX experiments to understand which design works well
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进行用户体验实验以了解哪种设计效果良好
- en: In this chapter, we will look at an open source project feature flag tool to
    demonstrate how to use and integrate it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨一个开源项目特性标志工具，以展示如何使用和集成它。
- en: Feature flag configuration
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特性标志配置
- en: You can use feature flags by deploying them in your infrastructure or by using
    software-as-a-service solutions such as LaunchDarkly, Flagsmith, and many other
    available solutions. Each of the solutions provides its own API, which needs to
    be integrated into your application. This means that your application is tied
    to the solution that you choose. There is no one-size-fits-all solution; it all
    depends on what kind of features you need for your application.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在您的基础设施中部署功能标志或使用如LaunchDarkly、Flagsmith以及许多其他可用的软件即服务解决方案来使用功能标志。每个解决方案都提供自己的API，需要将其集成到您的应用程序中。这意味着您的应用程序与您选择的解决方案绑定。没有一种适合所有情况的解决方案；这完全取决于您应用程序需要哪些功能。
- en: Let’s take a look at different kinds of configuration for using feature flags.
    *Figure 11**.1* shows the simplest way to use feature flags.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看使用功能标志的不同配置。*图11.1*展示了使用功能标志的最简单方法。
- en: '![Figure 11.1: A web client using feature flags](img/Figure_11.01_B18295.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图11.1：使用功能标志的Web客户端](img/Figure_11.01_B18295.jpg)'
- en: 'Figure 11.1: A web client using feature flags'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1：使用功能标志的Web客户端
- en: The web client will enable or disable the user interface depending on the feature
    flag. For example, in an application, a particular menu selection can be enabled
    when the feature flag related to the menu is turned on.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Web客户端将根据功能标志启用或禁用用户界面。例如，在应用程序中，当与菜单相关的功能标志开启时，可以启用特定的菜单选择。
- en: '*Figure 11**.2* shows a different configuration where the web client will call
    different microservices, depending on which feature flag is turned on/off:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*图11.2*展示了不同的配置，其中Web客户端将根据哪个功能标志开启/关闭而调用不同的微服务：'
- en: '![Figure 11.2: Feature flag microservices](img/Figure_11.02_B18295.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图11.2：功能标志微服务](img/Figure_11.02_B18295.jpg)'
- en: 'Figure 11.2: Feature flag microservices'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2：功能标志微服务
- en: In the preceding example, the web client calls microservice A when feature flag
    A is turned on.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，当功能标志A开启时，Web客户端会调用微服务A。
- en: 'Another interesting configuration is shown in *Figure 11**.3*, where the main
    microservice will determine which user interface will be returned back to the
    web client, depending on which feature flag has been configured:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图11.3*中展示了另一个有趣的配置，其中主微服务将确定将返回给Web客户端的用户界面，这取决于哪个功能标志已被配置：
- en: '![Figure 11.3: The feature flags for microservices](img/Figure_11.03_B18295_to_be_Redrawn.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图11.3：微服务的功能标志](img/Figure_11.03_B18295_to_be_Redrawn.jpg)'
- en: 'Figure 11.3: The feature flags for microservices'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.3：微服务的功能标志
- en: In the above example, the web client will get a different response to render
    if the main microservice detects that feature flag C has been enabled, which will
    get the response from MicroService C.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，如果主微服务检测到功能标志C已被启用，Web客户端将获得不同的响应以进行渲染，这将从微服务C获取响应。
- en: So, as we can see, there are different ways to use feature flags and different
    places to use them. It all comes down to what will be needed for your application.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，正如我们所看到的，使用功能标志有不同的方法和不同的地方，这都取决于您应用程序的需求。
- en: In the next section, we will look at using an open source feature flag server
    to enable/disable buttons in a sample web app.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨如何使用开源功能标志服务器来在示例Web应用程序中启用/禁用按钮。
- en: Use cases for using feature flags
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用功能标志的用例
- en: 'Feature flags are not limited to flags that can be configured to turn on/off
    features inside applications; there are many more features and capabilities. In
    this section, we will look at the features provided in a full-blown feature flag
    server:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 功能标志不仅限于可以配置为在应用程序内部开启/关闭功能的标志；还有许多其他功能和能力。在本节中，我们将探讨完整功能标志服务器提供的功能：
- en: '**Segment targeting** – Imagine you are building a feature that you want to
    test on a group of users in your application. For example, you may want a certain
    group of users that are based in the USA to use the checkout feature based on
    PayPal.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分段目标** – 假设您正在构建一个希望在应用程序中的一组用户上测试的功能。例如，您可能希望基于PayPal的结账功能仅适用于位于美国的特定用户组。'
- en: '**Risk mitigation** – Building product features does not guarantee that a feature
    will bring in more users. New features can be released and, with time and more
    analysis, if it is found that the feature is providing a bad user experience,
    it will be turned off as part of the risk mitigation process.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**风险缓解** – 构建产品功能并不能保证功能会带来更多用户。新功能可以发布，随着时间的推移和更多的分析，如果发现该功能提供了不良的用户体验，它将作为风险缓解过程的一部分被关闭。'
- en: '**Gathering feedback before launch** – Using a targeted rollout for a certain
    group of users, it is possible to get feedback as early as possible from the user.
    The feedback will provide insight for the team to decide whether the feature indeed
    provides any additional benefit to the user or not.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在发布前收集反馈** – 通过对特定用户组的定向发布，可以尽早从用户那里获得反馈。这些反馈将为团队提供洞察力，以决定该功能是否确实为用户提供任何额外的好处。'
- en: Now we have a good understanding of the use cases for feature flag, we will
    look at installing the feature flag server in the next section.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对功能标志的使用案例有了很好的理解，我们将在下一节中探讨安装功能标志服务器。
- en: Installing the feature flag server
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装功能标志服务器
- en: 'We are going to use an open source feature flag server. Clone the project from
    the [github.com/nanikjava/feature-flags](http://github.com/nanikjava/feature-flags)
    repository as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个开源功能标志服务器。按照以下方式从 [github.com/nanikjava/feature-flags](http://github.com/nanikjava/feature-flags)
    仓库克隆项目：
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'From your terminal, change the directory into the project directory and build
    the server using the following command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 从您的终端，切换到项目目录，并使用以下命令构建服务器：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We are using the `-o` flag to compile the application and output it to a filename
    called `fflag`. Now that the server has been compiled and is ready to use, open
    a separate terminal window and run the server as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `-o` 标志来编译应用程序，并将其输出到名为 `fflag` 的文件中。现在服务器已经编译完成并准备好使用，请打开一个新的终端窗口，并按照以下方式运行服务器：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You will see the following output:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The server is now listening on port `8080`. Now, we need to add a new feature
    flag for our web app, and the key is called `disable_get`. The way to do this
    is to use the `curl` command line to send data using `POST` as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器现在正在监听端口 `8080`。现在，我们需要为我们的网络应用程序添加一个新的功能标志，其键名为 `disable_get`。要这样做，请使用 `curl`
    命令行以以下方式发送数据：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `curl` command is calling the `/features` endpoint and passing the JSON
    data. Once this has completed successfully, you will see the following output:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl` 命令正在调用 `/features` 端点并传递 JSON 数据。一旦成功完成，您将看到以下输出：'
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The JSON output shows that the feature flag server now has a new key called
    `disable_get`, and it is disabled, as indicated by the flag `enabled: false`.
    The output should look as follows, showing that the data has been successfully
    added:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 'JSON 输出显示，功能标志服务器现在有一个名为 `disable_get` 的新键，并且它被禁用，如 `enabled: false` 标志所示。输出应如下所示，显示数据已成功添加：'
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The feature flag server is ready with the data we need. In the next section,
    we will look at using the flag inside our web app.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 功能标志服务器已准备好所需的数据。在下一节中，我们将探讨如何在我们的网络应用程序中使用该标志。
- en: The high-level architecture of feature flags
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能标志的高级架构
- en: '*Figure 11**.4* shows the architecture of the open source feature flag server
    at a high level.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11.4* 展示了开源功能标志服务器的高级架构。'
- en: '![Figure 11.4: The high-level architecture](img/Figure_11.04_to_be_redrawn_B18295.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.4：高级架构](img/Figure_11.04_to_be_redrawn_B18295.jpg)'
- en: 'Figure 11.4: The high-level architecture'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.4：高级架构
- en: Looking at the diagram, the server uses mux.Router to route for different HTTP
    requests such as `GET`, `POST`, `DELETE`, and `PATCH`. The server uses an internal
    database as persistent storage for the feature flags that the application requires.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 从图中可以看出，服务器使用 `mux.Router` 来路由不同的 HTTP 请求，例如 `GET`、`POST`、`DELETE` 和 `PATCH`。服务器使用内部数据库作为应用程序所需功能标志的持久存储。
- en: The server is accessible via HTTP request calls that can be made from both web
    clients and microservices using the normal HTTP protocol.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器可以通过 HTTP 请求调用访问，这些调用可以通过使用正常 HTTP 协议的 Web 客户端和微服务进行。
- en: Integration of the feature flag
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能标志集成
- en: After we have installed the feature flag server, we want to start using it in
    our application. In this section, we will look at integrating the feature flag
    to enable/disable certain user interface elements in the frontend and to call
    only the backend services from our server that are enabled.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们安装了功能标志服务器之后，我们希望在应用程序中使用它。在本节中，我们将探讨如何集成功能标志以在前端启用/禁用某些用户界面元素，并仅从我们的服务器调用已启用的后端服务。
- en: Web application
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络应用程序
- en: 'The sample app we are going to use can be found inside the `chapter11/frontend-enable-disable`
    folder; the sample app demonstrates how to use the feature flag to enable/disable
    the user interface button. Open the terminal and change into the `chapter11/frontend-enable-disable`
    directory to run the web app as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要使用的示例应用程序位于 `chapter11/frontend-enable-disable` 文件夹内；该示例应用程序演示了如何使用功能标志来启用/禁用用户界面按钮。打开终端并切换到
    `chapter11/frontend-enable-disable` 目录以运行网络应用程序，如下所示：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The commands will install all the necessary packages and then run the web app.
    Once the command completes, open your browser and type `http://localhost:3000`
    in the address bar. You will see the web app shown in *Figure 11**.5*.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令将安装所有必要的包并运行网络应用程序。一旦命令完成，打开您的浏览器并在地址栏中输入 `http://localhost:3000`。你将看到如图
    *图 11.5* 所示的 web 应用程序。
- en: '![Figure 11.5: The initial view of the web app using the feature flag](img/Figure_11.05_B18295.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.5：使用功能标志的 web 应用程序的初始视图](img/Figure_11.05_B18295.jpg)'
- en: 'Figure 11.5: The initial view of the web app using the feature flag'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.5：使用功能标志的 web 应用程序的初始视图
- en: 'What you are seeing in *Figure 11**.5* is that one of the buttons has been
    disabled. This is based on the flag value that we set in the previous section.
    The flag data looks as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你在 *图 11.5* 中看到的是其中一个按钮已被禁用。这是基于我们在上一节中设置的标志值。标志数据如下所示：
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `disable_get` key is the flag key we added to the server and the `enabled`
    field is set to `false`, which means that the button is disabled. Let’s change
    the `enabled` field to `true` and let’s see how the web page changes.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`disable_get` 键是我们添加到服务器上的标志键，而 `enabled` 字段被设置为 `false`，这意味着按钮已被禁用。让我们将 `enabled`
    字段更改为 `true`，然后看看网页如何变化。'
- en: 'Use the following command in a terminal to update the data:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中使用以下命令更新数据：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `curl` command updates the `enabled` field to `true`. Refresh the browser
    page and you will see the button is enabled, as shown in *Figure 11**.6*.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl` 命令将 `enabled` 字段更新为 `true`。刷新浏览器页面，你会看到按钮已被启用，如图 *图 11.6* 所示。'
- en: '![Figure 11.6: The Click to Get button is enabled](img/Figure_11.06_B18295.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.6：点击获取按钮已启用](img/Figure_11.06_B18295.jpg)'
- en: 'Figure 11.6: The Click to Get button is enabled'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.6：点击获取按钮已启用
- en: 'The following code snippet from the `HelloWorld.vue` file takes care of reading
    the key from the server, using it to enable/disable the button:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从 `HelloWorld.vue` 文件中的代码片段，负责从服务器读取键，使用它来启用/禁用按钮：
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the next section, we will look at using the feature flag to enable/disable
    certain features on the backend service.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨使用功能标志在后端服务上启用/禁用某些功能。
- en: Microservice integration
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微服务集成
- en: In this section, we will use the feature flag to enable/disable certain services.
    This will give the application the flexibility to access only the services that
    are currently enabled. *Figure 11**.7* shows how the microservice will be structured.
    The application is inside the `chapter11/multiple-service` folder.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用功能标志来启用/禁用某些服务。这将使应用程序能够仅访问当前已启用的服务。*图 11.7* 展示了微服务的结构。应用程序位于 `chapter11/multiple-service`
    文件夹中。
- en: '![Figure 11.7: The microservice structure for the feature flag](img/Figure_11.07_B18295.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.7：功能标志的微服务结构](img/Figure_11.07_B18295.jpg)'
- en: 'Figure 11.7: The microservice structure for the feature flag'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.7：功能标志的微服务结构
- en: 'Following the steps from the previous section to run the feature flag server,
    use the following command to create the flags:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 按照上一节中的步骤运行功能标志服务器，使用以下命令创建标志：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The command creates two keys: `servicea` and `serviceb`. For now, `servicea`
    is disabled, while `serviceb` is enabled. Once the feature flags have been set
    up, we are going to run different services:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令创建两个键：`servicea` 和 `serviceb`。目前，`servicea` 已被禁用，而 `serviceb` 已被启用。一旦设置了功能标志，我们将运行不同的服务：
- en: '`chapter11/multiple-service/mainserver` directory. Run the main server with
    the following command:'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chapter11/multiple-service/mainserver` 目录。使用以下命令运行主服务器：'
- en: '[PRE12]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The main server will run on port `8080`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 主服务器将在端口 `8080` 上运行。
- en: '`servicea` – open the terminal and change the directory to `chapter11/multiple-service/servicea`.
    Run the service with the following command:'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`servicea` – 打开终端并切换到 `chapter11/multiple-service/servicea` 目录。使用以下命令运行服务：'
- en: '[PRE13]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`servicea` will run on port `8081`.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`servicea` 将在端口 `8081` 上运行。'
- en: '`serviceb` – open the terminal and change the directory to `chapter11/multiple-service/serviceb`.
    Run the service with the following command:'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`serviceb` – 打开终端并将目录更改为`chapter11/multiple-service/serviceb`。使用以下命令运行服务：'
- en: '[PRE14]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`serviceb` will run on port `8082`.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`serviceb`将在端口`8082`上运行。'
- en: 'We now have three different services running on ports `8080`, `8081`, and `8082`.
    Open your browser and access the service using `http://localhost:8000`. You will
    get a response like the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有三个不同的服务正在端口`8080`、`8081`和`8082`上运行。打开您的浏览器，使用`http://localhost:8000`访问服务。您将得到以下类似的结果：
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The response sent back came from `serviceb` as `servicea` is disabled, as per
    the configuration from the feature flag server. Now, let’s turn on the flag for
    `servicea` using the following command:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的响应来自`serviceb`，因为根据功能标志服务器的配置，`servicea`已被禁用。现在，让我们使用以下命令打开`servicea`的标志：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Restart the main server by force-stopping it using *Ctrl + C*. Re-run it using
    the same command discussed previously. Open your browser and access the service
    using `http://localhost:8000`. You should get a result like the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用*Ctrl + C*强制停止主服务器来重新启动它。使用之前讨论的相同命令重新运行它。打开您的浏览器并使用`http://localhost:8000`访问服务。您应该得到以下类似的结果：
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We get responses from both services now that both have been enabled.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在两个服务都已启用，我们收到了来自这两个服务的响应。
- en: 'Let’s take a look at the code to understand how the feature flag is used. The
    following snippet shows part of the code to start the server:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看代码，以了解如何使用功能标志。以下代码片段显示了启动服务的一部分代码：
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The code calls the feature flag server to get flag information for `servicea`
    and `serviceb` in a goroutine. Once completed, it starts the server to listen
    on port `8000`. The state of the services is stored inside the `servicea` and
    `serviceb` variables, which will be used in other parts of the code, as shown
    in the following code snippet:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 代码通过goroutine调用功能标志服务器以获取`servicea`和`serviceb`的标志信息。一旦完成，它就开始服务器监听端口`8000`。服务的状态存储在`servicea`和`serviceb`变量中，这些变量将在代码的其他部分中使用，如下面的代码片段所示：
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `handler()` method is called when you access the server on port `8000`.
    Inside the code, as can be seen, it calls the service only when it is enabled.
    Once the service is called, the results from the service are combined and sent
    back to the client as a single JSON response.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当您访问端口`8000`的服务器时，会调用`handler()`方法。在代码内部，如所见，它仅在服务启用时调用服务。一旦调用服务，服务的结果将被合并并作为单个JSON响应发送回客户端。
- en: 'The following code snippet shows how to access the feature flag server to extract
    the different flags. It uses a normal HTTP GET call:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了如何访问功能标志服务器以提取不同的标志。它使用正常的HTTP GET调用：
- en: '[PRE20]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The code is calling the feature flag server by getting each key that we are
    interested in. So, in the case of the sample, we are calling using the following
    URLs:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 代码通过获取我们感兴趣的每个键来调用功能标志服务器。因此，在示例中，我们使用以下URL进行调用：
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'For example, when calling `http://localhost:8080/features/servicea`, the code
    will get the following JSON response from the feature flag server:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当调用`http://localhost:8080/features/servicea`时，代码将从功能标志服务器获取以下JSON响应：
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The `checkFlags()` function is interested only in the `enabled` field, which
    will be unmarshalled into the `FeatureFlagServerResponse` struct as shown below:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`checkFlags()`函数只对`enabled`字段感兴趣，它将被反序列化到如下所示的`FeatureFlagServerResponse`结构体中：'
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'After successfully converting the JSON to a struct, it will return the `Enabled`
    value as shown here:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功将JSON转换为结构体后，它将返回此处所示的`Enabled`值：
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We have come to the end of the chapter. In this section, we looked at integrating
    the feature flag in different scenarios such as inside web applications as well
    as using it as a feature toggle for accessing different microservices. There are
    other use cases where feature flags can be used, such as enabling/disabling performance
    metrics in production and enabling tracing in production for troubleshooting bugs.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经到达了本章的结尾。在本节中，我们探讨了在不同场景中集成功能标志，例如在Web应用程序内部以及将其用作访问不同微服务的功能切换。还有其他用例，其中可以使用功能标志，例如在生产中启用/禁用性能指标，以及在生产中启用跟踪以调试错误。
- en: Summary
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about feature flags, including what they are used
    for and how to use them. We learned how to install a simple feature flag server
    and saw how to integrate it with our sample application.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了功能标志，包括它们的使用目的以及如何使用它们。我们学习了如何安装简单的功能标志服务器，并看到了如何将其与我们的示例应用程序集成。
- en: We went through the steps of using feature flags in two different use cases
    – integrating it by checking on the flag to enable/disable a button in our frontend
    and in the backend to call different microservices. Using feature flags to enable
    or disable certain services gives the application flexibility on what response
    will be sent back to the frontend, which gives developers the ability to allow
    access to certain services as and when needed.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经通过两个不同的用例介绍了使用功能标志的步骤——通过检查标志来在我们的前端启用/禁用按钮，以及在后端调用不同的微服务。使用功能标志来启用或禁用某些服务，使应用程序在向前端发送响应方面具有灵活性，这给了开发者按需允许访问某些服务的能力。
- en: In the next chapter, we will look at building continuous integration by exploring
    the different features provided by GitHub.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过探索GitHub提供的不同功能来构建持续集成。
