- en: Command-Line Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令行工具
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将涵盖以下配方：
- en: Using command-line flags
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命令行标志
- en: Using command-line arguments
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命令行参数
- en: Reading and setting environment variables
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取和设置环境变量
- en: Configuration using TOML, YAML, and JSON
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 TOML、YAML 和 JSON 进行配置
- en: Working with Unix pipes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Unix 管道进行工作
- en: Catching and handling signals
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获和处理信号
- en: An ANSI coloring application
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ANSI 着色应用程序
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Command-line applications are among the easiest ways to handle user input and
    output. This chapter will focus on command-line-based interactions, such as command-line
    arguments, configuration, and environment variables. It'll conclude with a library
    for coloring text output in Unix and Bash for Windows.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行应用程序是处理用户输入和输出的最简单方法之一。本章将专注于基于命令行的交互，如命令行参数、配置和环境变量。它将以一个用于在 Unix 和 Bash
    for Windows 中着色文本输出的库结束。
- en: With the recipes in this chapter, you should be equipped to handle expected
    and unexpected user input. The signal recipe is an example of cases where users
    may send unexpected signals to your application, and the pipes recipe is a good
    alternative to taking user inputs compared to flags or command-line arguments.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章中的配方，你应该能够处理预期的和意外的用户输入。信号配方是用户可能向你的应用程序发送意外信号的例子，而管道配方是相对于标志或命令行参数获取用户输入的一个很好的替代方案。
- en: The ANSI color recipe will hopefully provide some examples of cleaning up output
    to users. For example, in logging, being able to color text based on its purpose
    can sometimes make large blocks of text significantly more clear.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: ANSI 颜色配方可能会提供一些清理用户输出的示例。例如，在日志记录中，根据文本的目的对文本进行着色有时可以使大量文本变得更加清晰。
- en: Using command-line flags
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命令行标志
- en: The `flag` package makes it simple to add command-line flag arguments to a Go
    application. It has a few shortcomings--you tend to duplicate a lot of code in
    order to add shorthand versions of flags, and they're ordered alphabetically from
    the help prompt. There are a number of third-party libraries that attempt to address
    these shortcomings, but this chapter will focus on the standard library version
    and not on those libraries.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`flag` 包使得向 Go 应用程序添加命令行标志参数变得简单。它有一些缺点--你往往需要重复大量代码来添加标志的缩写版本，并且它们按字母顺序排列在帮助提示中。有一些第三方库试图解决这些缺点，但本章将专注于标准库版本，而不是那些库。'
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Configure your environment according to these steps:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下步骤配置你的环境：
- en: 'Download and install Go on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install),
    and configure your `GOPATH` environment variable:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://golang.org/doc/install](https://golang.org/doc/install) 下载并安装 Go
    到你的操作系统上，并配置你的 `GOPATH` 环境变量：
- en: Open a terminal/console application, and navigate to your `GOPATH/src` and create
    a project directory, for example, `$GOPATH/src/github.com/yourusername/customrepo`.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/控制台应用程序，导航到你的 `GOPATH/src` 并创建一个项目目录，例如，`$GOPATH/src/github.com/yourusername/customrepo`。
- en: All code will be run and modified from this directory.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 所有代码都将从这个目录运行和修改。
- en: Optionally, install the latest tested version of the code using the `go get
    github.com/agtorre/go-cookbook/` command.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，使用 `go get github.com/agtorre/go-cookbook/` 命令安装代码的最新测试版本。
- en: How to do it...
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create and navigate to the `chapter2/flags`
    directory.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序创建并导航到 `chapter2/flags` 目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter2/flags](https://github.com/agtorre/go-cookbook/tree/master/chapter2/flags),
    or use this as an exercise to write some of your own code!
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter2/flags](https://github.com/agtorre/go-cookbook/tree/master/chapter2/flags)
    复制测试，或者将其作为练习编写一些你自己的代码！
- en: 'Create a file called `flags.go` with the following contents:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `flags.go` 的文件，内容如下：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a file called `custom.go` with the following contents:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `custom.go` 的文件，内容如下：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a file called `main.go` with the following contents:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，内容如下：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Run the following commands on the command line:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行上运行以下命令：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Try these and some other arguments, and you should see the following output:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试这些以及其他一些参数，你应该会看到以下输出：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`,
    and ensure all tests pass.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上移动一个目录并运行 `go test`，并确保所有测试通过。
- en: How it works...
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe attempts to demonstrate most of the common usages of the `flag`
    package. It shows custom variable types, a variety of built-in variables, shorthand
    flags, and writing all flags to a common struct. This is the first recipe to require
    a main function, as the main usage of flag (`flag.Parse()`) should be called from
    main. As a result, the normal example directory is omitted.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方试图展示 `flag` 包的大部分常见用法。它展示了自定义变量类型、各种内置变量、缩写标志以及将所有标志写入一个公共结构体。这是第一个需要主函数的配方，因为
    `flag` 的主要用法（`flag.Parse()`）应该从主函数中调用。因此，正常的示例目录被省略了。
- en: The example usage of this application shows that you get `-h` automatically
    to get a list of flags that are included. Some other things to note are Boolean
    flags that are invoked without arguments, and the flag order doesn't matter.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序的示例用法表明，你可以自动获得 `-h` 来获取包含的标志列表。还有一些其他需要注意的事情，比如没有参数调用的布尔标志，以及标志的顺序并不重要。
- en: The `flag` package is a quick way to structure input for command-line applications
    and provide a flexible means of specifying upfront user input for things such
    as setting up log levels or verbosity of an application. In the command-line arguments
    recipe, we'll explore flag sets and switch between them using arguments.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`flag` 包是一种快速为命令行应用程序结构化输入并提供灵活指定预先用户输入的方法，例如设置日志级别或应用程序的详细程度。在命令行参数配方中，我们将探索标志集并在它们之间使用参数进行切换。'
- en: Using command-line arguments
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命令行参数
- en: The flags from the previous recipe are a type of command-line argument. This
    chapter will expand on other uses for these arguments by constructing a command
    that supports nested subcommands. This will demonstrate Flagsets and also use
    positional arguments passed into your application.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 上一配方中的标志是一种命令行参数。本章将通过构建一个支持嵌套子命令的命令来扩展这些参数的其他用途。这将演示标志集并使用传递给应用程序的位置参数。
- en: Like the previous recipe, this one requires a main function to run. There are
    a number of third-party packages to deal with complex nested arguments and flags,
    but we'll investigate how to do that using only the standard library.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一个配方一样，这个配方也需要一个主函数来运行。有许多第三方包可以处理复杂的嵌套参数和标志，但我们将研究如何仅使用标准库来完成这项工作。
- en: Getting ready
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Refer to the *Getting ready* section's steps in the *Using command-line flags*
    recipe.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 参考在 *使用命令行标志* 配方中的 *准备工作* 部分的步骤。
- en: How to do it...
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'These steps cover writing and running your application:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create a new directory called `chapter2/cmdargs`
    and navigate to that directory.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建一个名为 `chapter2/cmdargs` 的新目录并导航到该目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter2/cmdargs](https://github.com/agtorre/go-cookbook/tree/master/chapter2/cmdargs),
    or use this as an exercise to write some of your own code!
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter2/cmdargs](https://github.com/agtorre/go-cookbook/tree/master/chapter2/cmdargs)
    复制测试，或者将其作为练习来编写你自己的代码！
- en: 'Create a file called `cmdargs.go` with the following contents:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `cmdargs.go` 的文件，内容如下：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create a file called `main.go` with the following contents:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，内容如下：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Run `go build`.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go build`。
- en: 'Run the following commands and try a few other combinations of arguments:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令并尝试一些其他参数组合：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`,
    and ensure all tests pass.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，向上移动一个目录并运行 `go test`，确保所有测试通过。
- en: How it works...
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Flagsets can be used to set up independent lists of expected arguments, usage
    strings, and more. The developer is required to do validation on a number of arguments,
    parsing in the right subset of arguments to commands and defining usage strings.
    This can be error-prone and requires a lot of iteration to get it completely right.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 标志集可以用来设置独立的预期参数列表、用法字符串等。开发者需要对多个参数进行验证，正确解析命令的正确参数子集，并定义用法字符串。这可能会出错，并且需要大量迭代才能完全正确。
- en: The `flag` package makes parsing arguments much easier and includes convenience
    methods to get the number of flags, arguments, and more. This recipe demonstrates
    basic ways to construct a complex command-line application using arguments including
    a package-level config, required positional arguments, multi-level command usage,
    and how to split these things into multiple files or packages if required.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`flag`包使解析参数变得容易，并包括获取标志数量、参数等便利方法。本菜谱演示了使用包括包级配置、必需的位置参数、多级命令使用以及如何将这些内容拆分为多个文件或包（如果需要）的基本方法来构建复杂的命令行应用程序。'
- en: Reading and setting environment variables
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取和设置环境变量
- en: Environment variables are another way to pass state into an application beyond
    reading data in from a file or passing it explicitly over the command line. This
    recipe will explore some very basic getting and setting of environment variables
    and then work with the highly useful third-party library [https://github.com/kelseyhightower/envconfig](https://github.com/kelseyhightower/envconfig).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 环境变量是将状态传递给应用程序的另一种方式，除了从文件中读取数据或通过命令行显式传递之外。本菜谱将探讨一些非常基本的环境变量的获取和设置，然后使用高度有用的第三方库[https://github.com/kelseyhightower/envconfig](https://github.com/kelseyhightower/envconfig)。
- en: We'll build an application that can read a config via JSON or through environment
    variables. The next recipe will further explore alternative formats, including
    TOML and YAML.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个可以通过JSON或通过环境变量读取配置的应用程序。下一个菜谱将进一步探讨其他格式，包括TOML和YAML。
- en: Getting ready
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Configure your environment according to these steps:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下步骤配置你的环境：
- en: Refer to the *Getting ready* section's steps in the *Using command-line flags*
    recipe.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请参考*准备就绪*部分中*使用命令行标志*菜谱的步骤。
- en: Run the `go get github.com/kelseyhightower/envconfig/` command.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go get github.com/kelseyhightower/envconfig/`命令。
- en: Run the `go get github.com/pkg/errors/` command.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go get github.com/pkg/errors/`命令。
- en: How to do it...
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create a new directory called `chapter2/envvar`
    and navigate to that directory.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建一个名为`chapter2/envvar`的新目录，并导航到该目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter2/envvar](https://github.com/agtorre/go-cookbook/tree/master/chapter2/envvar),
    or use this as an exercise to write some of your own code!
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://github.com/agtorre/go-cookbook/tree/master/chapter2/envvar](https://github.com/agtorre/go-cookbook/tree/master/chapter2/envvar)复制测试，或者将其作为练习编写一些自己的代码！
- en: 'Create a file called `config.go` with the following contents:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`config.go`的文件，内容如下：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Create a new directory named `example`.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录。
- en: Navigate to `example`.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`example`。
- en: 'Create a file, `main.go`, with the following contents and ensure that you modify
    the `envvar` import to use the path you set up in step 1:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下，并确保你修改了`envvar`导入以使用步骤1中设置的路径：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Run `go run main.go`.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You may also run these commands:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行以下命令：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You should see the following output:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`,
    and ensure all tests pass.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上移动一个目录，并运行`go test`，确保所有测试都通过。
- en: How it works...
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Reading and writing environment variables is pretty simple with the `os` package.
    The `envconfig` third-party library this recipe uses is a clever way to capture
    environment variables and specify certain requirements using struct tags.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`os`包读取和写入环境变量相当简单。本菜谱使用的第三方库`envconfig`是一种巧妙的方式来捕获环境变量，并使用结构体标签指定某些要求。
- en: The `LoadConfig` function is a flexible way to pull in configuration information
    from a variety of sources without a lot of overhead or too many extra dependencies.
    It would be simple to convert the primary config into another format aside from
    JSON or just always use environment variables as well.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`LoadConfig`函数是一种灵活的方式，可以从各种来源拉取配置信息，而无需大量开销或过多的额外依赖。将主要配置转换为JSON以外的格式或始终使用环境变量都很简单。'
- en: Also, note the use of errors. We wrap errors throughout the code in this recipe
    so that we can annotate errors without losing the original error information.
    There will be more details on this in [Chapter 4](e501e4de-b31e-447a-8109-6eee1a7f3a57.xhtml),
    *Error Handling in Go*.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请注意错误的使用。在本菜谱的代码中，我们包装了错误，这样我们就可以在不丢失原始错误信息的情况下注释错误。关于这一点，在[第4章](e501e4de-b31e-447a-8109-6eee1a7f3a57.xhtml)，*Go中的错误处理*中将有更多细节。
- en: Configuration using TOML, YAML, and JSON
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 TOML、YAML 和 JSON 进行配置
- en: There are many configuration formats that Go, with the use of third-party libraries,
    has support for. Three of the most popular data formats are TOML, YAML, and JSON.
    Go can support JSON out of the box, and the others have clues on how to marshal/unmarshal
    or encode/decode data for these formats. The formats have many benefits beyond
    configuration, but this chapter will largely focus on converting a Go struct in
    the form of a configuration struct. This recipe will explore basic input and output
    using these formats.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Go 使用第三方库支持许多配置格式。其中三种最受欢迎的数据格式是 TOML、YAML 和 JSON。Go 可以直接支持 JSON，而其他格式则提供了如何对这些格式进行序列化/反序列化或编码/解码数据的线索。这些格式在配置之外还有许多好处，但本章将主要关注将
    Go 结构体转换为配置结构体的形式。这个配方将探索使用这些格式的基本输入和输出。
- en: These formats also provide an interface by which Go and applications written
    in other languages can share the same configuration. There are also a number of
    tools that deal with these formats and simplify working with them.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这些格式还提供了一个接口，通过该接口 Go 和用其他语言编写的应用程序可以共享相同的配置。还有许多处理这些格式并简化它们使用的工具。
- en: Getting ready
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Configure your environment according to these steps:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下步骤配置你的环境：
- en: Refer to the *Getting ready* section's steps in the *Using command-line flags*
    recipe*.*
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请参考 *Using command-line flags* 配方中的 *Getting ready* 部分的步骤*.*。
- en: Run the `go get github.com/BurntSushi/toml` command.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go get github.com/BurntSushi/toml` 命令。
- en: Run the `go get github.com/go-yaml/yaml` command.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go get github.com/go-yaml/yaml` 命令。
- en: How to do it...
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'These steps cover writing and running your application:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create a new directory called `chapter2/confformat`
    and navigate to that directory.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建一个名为 `chapter2/confformat` 的新目录，并导航到该目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter2/confformat](https://github.com/agtorre/go-cookbook/tree/master/chapter2/confformat),
    or use this as an exercise to write some of your own code!
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter2/confformat](https://github.com/agtorre/go-cookbook/tree/master/chapter2/confformat)
    复制测试，或者将其作为练习编写一些你自己的代码！
- en: 'Create a file called `toml.go` with the following contents:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `toml.go` 的文件，内容如下：
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create a file called `yaml.go` with the following contents:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `yaml.go` 的文件，内容如下：
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a file called `json.go` with the following contents:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `json.go` 的文件，内容如下：
- en: '[PRE14]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a file called `marshal.go` with the following contents:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `marshal.go` 的文件，内容如下：
- en: '[PRE15]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create a file called `unmarshal.go` with the following contents:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `unmarshal.go` 的文件，内容如下：
- en: '[PRE16]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Create a new directory named `example`.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录。
- en: Navigate to `example`.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `example`。
- en: 'Create a `main.go` file with the following contents and ensure that you modify
    the `confformat` import to use the path you set up in step 1:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main.go` 文件，内容如下，并确保你修改 `confformat` 导入以使用步骤 1 中设置的路径：
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Run `go run main.go`.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You may also run these commands:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还可以运行以下命令：
- en: '[PRE18]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You should see the following:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到以下内容：
- en: '[PRE19]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure all tests pass.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或自己编写了测试，请向上移动一个目录并运行 `go test`。确保所有测试通过。
- en: How it works...
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe gave examples of using a TOML, YAML, and JSON parser to both write
    raw data to a go struct and read data out of it and into the corresponding format.
    Like with the recipes in [Chapter 1](134503a3-8076-4d84-bb47-64f5880d6596.xhtml),
    *I/O and File Systems*, we see how common it is to quickly switch between `[]byte`,
    `string`, `bytes.Buffer`, and other I/O interfaces.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方给出了使用 TOML、YAML 和 JSON 解析器的示例，既可以向 go 结构体写入原始数据，也可以从其中读取数据并将其转换为相应的格式。就像在
    [第 1 章](134503a3-8076-4d84-bb47-64f5880d6596.xhtml) 的配方中一样，我们在 *I/O 和文件系统* 中看到，快速在
    `[]byte`、`string`、`bytes.Buffer` 和其他 I/O 接口之间切换是多么常见。
- en: The `encoding/json` package is the most comprehensive in providing encoding,
    marshaling, and other methods to work with the JSON format. We abstracted these
    away with our `ToFormat` functions, and it would be very simple to attach multiple
    methods such as this to use a single struct that can quickly be converted to or
    from any of these types.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`encoding/json` 包在提供编码、序列化和其他用于处理 JSON 格式的方法方面是最全面的。我们通过 `ToFormat` 函数将这些抽象出来，因此将多个方法附加到单个结构体上以使用这些类型，这将变得非常简单，该结构体可以快速转换为或从这些类型之一。'
- en: This section also used and touched upon struct tags and their use. The previous
    chapter also made use of these, and they're a common way in Go to give hints to
    packages and libraries about how to treat data contained within a struct.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 本节还使用了结构体标签及其用法。上一章也使用了这些，它们是 Go 中向包和库提供有关如何处理结构体中包含的数据提示的常见方式。
- en: Working with Unix pipes
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Unix 管道
- en: 'Unix pipes are useful when passing the output of one program to the input of
    another. For example, take a look at this:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Unix 管道在将一个程序输出传递给另一个程序的输入时很有用。例如，看看这个：
- en: '[PRE20]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In a Go application, the left-hand side of the pipe can be read in using `os.Stdin`
    and acts like a file descriptor. To demonstrate this, this recipe will take an
    input on the left-hand side of a pipe and return a list of words and their number
    of occurrences. These words will be tokenized on white space.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Go 应用程序中，管道的左侧可以使用 `os.Stdin` 读取，并像文件描述符一样工作。为了演示这一点，本配方将从一个管道的左侧获取输入，并返回单词及其出现次数的列表。这些单词将在空白处进行标记化。
- en: Getting ready
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Refer to the *Getting ready* section's steps in the *Using command-line flags*
    recipe*.*
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考 *准备就绪* 部分的步骤，在 *使用命令行标志* 配方中*.*。
- en: How to do it...
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create a new directory called `chapter2/pipes`
    and navigate to that directory.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建一个名为 `chapter2/pipes` 的新目录，并导航到该目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter2/pipes](https://github.com/agtorre/go-cookbook/tree/master/chapter2/pipes),
    or use this as an exercise to write some of your own code!
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter2/pipes](https://github.com/agtorre/go-cookbook/tree/master/chapter2/pipes)
    复制测试，或者将此作为练习编写一些你自己的代码！
- en: 'Create a file called `pipes.go` with the following contents:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `pipes.go` 的文件，内容如下：
- en: '[PRE21]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Run `echo "some string" | go run pipes.go`.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `echo "some string" | go run pipes.go`。
- en: 'You may also run these:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行这些：
- en: '[PRE22]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You should see the following output:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE23]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure all tests pass.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请进入上一级目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作用原理...
- en: Working with pipes in go is pretty simple, especially if you're familiar with
    working with files. For example, you could use the pipe recipe from [Chapter 1](134503a3-8076-4d84-bb47-64f5880d6596.xhtml),
    *I/O and File Systems*, to create a **tee** application ([https://en.wikipedia.org/wiki/Tee_(command)](https://en.wikipedia.org/wiki/Tee_(command)))
    where everything piped in is immediately written to stdout and to a file.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Go 中处理管道相当简单，特别是如果你熟悉处理文件。例如，你可以使用 [第 1 章](134503a3-8076-4d84-bb47-64f5880d6596.xhtml)
    中的管道配方，*I/O 和文件系统*，来创建一个 **tee** 应用程序 ([https://en.wikipedia.org/wiki/Tee_(command)](https://en.wikipedia.org/wiki/Tee_(command)))，其中所有通过管道输入的内容都会立即写入
    stdout 和文件。
- en: This recipe uses a scanner to tokenize the `io.Reader` interface of the `os.Stdin`
    file object. You can see how you must check for errors after completing all of
    the reads.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方使用扫描器来对 `os.Stdin` 文件对象的 `io.Reader` 接口进行标记化。你可以看到在完成所有读取后，你必须检查错误。
- en: Catching and handling signals
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 捕获和处理信号
- en: Signals are a useful way for the user or the OS to kill your running application.
    Sometimes, it makes sense to handle these signals in a more graceful way than
    the default behavior. Go provides a mechanism to catch and handle signals. In
    this recipe, we'll explore the handling of signals through the use of a signal
    handling the Go routine.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 信号是用户或操作系统终止运行中的应用程序的有用方式。有时，以比默认行为更优雅的方式处理这些信号是有意义的。Go 提供了一种捕获和处理信号的方法。在本配方中，我们将通过使用
    Go 协程的信号处理来探索信号的处理。
- en: Getting ready
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Refer to the *Getting ready* section's steps in the *Using command-line flags*
    recipe.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考 *准备就绪* 部分的步骤，在 *使用命令行标志* 配方中。
- en: How to do it...
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create a new directory called `chapter2/signals`,
    and navigate to that directory.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建一个名为 `chapter2/signals` 的新目录，并导航到该目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter2/signals](https://github.com/agtorre/go-cookbook/tree/master/chapter2/signals),
    or use this as an exercise to write some of your own code!
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter2/signals](https://github.com/agtorre/go-cookbook/tree/master/chapter2/signals)
    复制测试，或者将此作为练习编写一些你自己的代码！
- en: 'Create a file called `signals.go` with the following contents:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `signals.go` 的文件，并包含以下内容：
- en: '[PRE24]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Run these commands:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE25]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Try running and pressing *Ctrl* + *C*, and you should see this:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试运行并按下 *Ctrl* + *C*，你应该会看到以下内容：
- en: '[PRE26]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Try running it again and from a separate terminal, determine the PID, and kill
    the application:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次尝试运行它，并在另一个终端中确定PID，然后终止应用程序：
- en: '[PRE27]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure all tests pass.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上移动一个目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe makes use of channels, which are covered more extensively in [Chapter
    9](6d6aeb0c-68d5-4444-9aa1-a014759a7aab.xhtml), *Parallelism and Concurrency*.
    This is because signals. The `Notify` function requires a channel to send signal
    notifications to. The `kill` command is a good way to test passing signals to
    the applications. We register the types of signal we care about with the signal.
    The `Notify` function. Then, we set up a function in a Go routine to handle any
    activity on the channel we passed to that function. Once we receive the signal,
    we can handle it however we want. We can terminate the application, respond with
    a message, and have different behavior for different signals.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方使用了通道，这在第9章中进行了更广泛的介绍，*并行和并发*。这是因为信号。`Notify` 函数需要一个通道来发送信号通知。`kill` 命令是测试向应用程序传递信号的好方法。我们通过信号注册我们关心的信号类型。`Notify`
    函数。然后，我们在Go协程中设置一个函数来处理传递给该函数的通道上的任何活动。一旦我们收到信号，我们可以按自己的意愿处理它。我们可以终止应用程序，响应消息，并为不同的信号有不同的行为。
- en: We also use a `done` channel to block the application from terminating until
    a signal is received. Otherwise, the program would terminate immediately. This
    is unnecessary for long-running applications such as web applications. It can
    be very useful to create appropriate signal handling routines to do cleanup, especially
    in applications with large amounts of Go routines that are holding a significant
    amount of state. A practical example of a graceful shutdown might be to allow
    current handlers to complete their HTTP requests without terminating them midway.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用一个 `done` 通道来阻塞应用程序，直到接收到信号，否则程序将立即终止。这对于长时间运行的应用程序，如Web应用程序来说是不必要的。创建适当的信号处理例程来执行清理工作非常有用，尤其是在有大量Go协程持有大量状态的应用程序中。一个优雅关闭的实用示例可能是允许当前处理程序完成它们的HTTP请求，而不会在途中终止它们。
- en: An ANSI coloring application
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个ANSI着色应用程序
- en: Coloring an ANSI terminal application is handled by a variety of code before
    and after a section of text you want colored. This chapter will explore a basic
    coloring mechanism to color text red or plain. For a complete application, take
    a look at [https://github.com/agtorre/gocolorize](https://github.com/agtorre/gocolorize),
    which supports many more colors and text types and also implements the `fmt.Formatter`
    interface for ease of printing.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在你想要着色的文本部分之前和之后，由各种代码处理ANSI终端应用程序的着色。本章将探讨一个基本的着色机制，用于着色文本为红色或普通。对于完整的应用程序，请查看[https://github.com/agtorre/gocolorize](https://github.com/agtorre/gocolorize)，它支持更多颜色和文本类型，并且还实现了`fmt.Formatter`接口，以便于打印。
- en: Getting ready
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Refer to the *Getting ready* section's steps in the *Using command-line flags*
    recipe*.*
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考 *准备工作* 部分的步骤，在 *使用命令行标志* 配方中*.*。
- en: How to do it...
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create and navigate to the `chapter2/ansicolor`
    directory.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建并导航到 `chapter2/ansicolor` 目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter2/ansicolor](https://github.com/agtorre/go-cookbook/tree/master/chapter2/ansicolor),
    or use this as an exercise to write some of your own code!
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://github.com/agtorre/go-cookbook/tree/master/chapter2/ansicolor](https://github.com/agtorre/go-cookbook/tree/master/chapter2/ansicolor)复制测试，或者将其作为练习编写一些自己的代码！
- en: 'Create a file called `color.go` with the following contents:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `color.go` 的文件，并包含以下内容：
- en: '[PRE28]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Create a new directory named `example`.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录。
- en: Navigate to `example`.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `example`。
- en: 'Create a `main.go` file with the following contents and ensure that you modify
    the `ansicolor` import to use the path you set up in step 1:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含以下内容的 `main.go` 文件，并确保你修改 `ansicolor` 导入以使用步骤1中设置的路径：
- en: '[PRE29]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Run `go run main.go`.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You may also run these commands:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还可以运行以下命令：
- en: '[PRE30]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You should see the following output with the text colored if your terminal
    supports the ANSI coloring format:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的终端支持ANSI着色格式，您应该看到以下带有颜色的输出：
- en: '[PRE31]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure all tests pass.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请向上移动一个目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This application makes use of a struct to maintain the state of the colored
    text. In this case, it stores the color of the text and the value of the text.
    The final string is rendered when you call the `String()` method, which will return
    either the colored text or plain text depending on the values stored in the struct.
    By default, the text will be plain.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序使用结构体来维护彩色文本的状态。在这种情况下，它存储文本的颜色和文本的值。当您调用`String()`方法时，将渲染最终的字符串，该方法将返回彩色文本或纯文本，具体取决于结构体中存储的值。默认情况下，文本将是纯文本。
