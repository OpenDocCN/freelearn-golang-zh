- en: Web Clients and APIs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web 客户端和 API
- en: 'In this chapter we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下食谱：
- en: Initializing, storing, and passing http.Client structs
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始化、存储和传递 http.Client 结构体
- en: Writing a client for a REST API
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写 REST API 的客户端
- en: Executing parallel and async client requests
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行并行和异步客户端请求
- en: Making use of OAuth2 clients
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用 OAuth2 客户端
- en: Implementing an OAuth2 token storage interface
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现 OAuth2 令牌存储接口
- en: Wrapping a client in added functionality and function composition
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在客户端添加功能并进行函数组合
- en: Understanding GRPC clients
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 GRPC 客户端
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Working with APIs and writing web clients can be a tricky subject. Different
    APIs have different types of authorization, authentication, and protocols. We'll
    explore the `http.Client` struct object, working with OAuth2 clients and long-term
    token storage, and finish off with GRPC with an additional REST interface.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 与 API 和编写 Web 客户端可能是一个棘手的话题。不同的 API 有不同的授权、认证和协议类型。我们将探索 `http.Client` 结构体对象，与
    OAuth2 客户端和长期令牌存储一起工作，并以额外的 REST 接口结束 GRPC。
- en: By the end of this chapter, you should have an idea of how to interface with
    third-party or in-house APIs and have some patterns for common operations, such
    as async requests to APIs.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你应该对如何与第三方或内部 API 进行接口交互以及一些常见操作的模式有所了解，例如对 API 的异步请求。
- en: Initializing, storing, and passing http.Client structs
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化、存储和传递 http.Client 结构体
- en: The Go `net/http` package exposes a flexible `http.Client` struct for working
    with HTTP APIs. This struct has separate transport functionality and is relatively
    simple to short-circuit requests, modify headers for each client operation, and
    handle any REST operations. Creating clients is a very common operation, and this
    recipe will start with the basics of working and creating an `http.Client` object.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Go 的 `net/http` 包提供了一个灵活的 `http.Client` 结构体，用于与 HTTP API 一起工作。这个结构体有独立的传输功能，相对简单就可以绕过请求，为每个客户端操作修改头信息，并处理任何
    REST 操作。创建客户端是一个非常常见的操作，这个食谱将从创建 `http.Client` 对象的基本操作开始。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Configure your environment according to these steps:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下步骤配置你的环境：
- en: Download and install Go on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install)
    and configure your `GOPATH` environment variable.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://golang.org/doc/install](https://golang.org/doc/install) 下载并安装 Go
    到你的操作系统上，并配置你的 `GOPATH` 环境变量。
- en: Open a terminal/console application.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端/控制台应用程序。
- en: Navigate to `GOPATH/src` and create a project directory. For example, `$GOPATH/src/github.com/yourusername/customrepo`.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `GOPATH/src` 并创建一个项目目录。例如，`$GOPATH/src/github.com/yourusername/customrepo`。
- en: All code will be run and modified from this directory.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 所有代码都将从这个目录运行和修改。
- en: Optionally, install the latest tested version of the code using the `go get
    github.com/agtorre/go-cookbook/` command.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，使用 `go get github.com/agtorre/go-cookbook/` 命令安装最新测试版本的代码。
- en: How to do it...
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'These steps cover writing and running your application:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create the `chapter6/client` directory
    and navigate to it.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建 `chapter6/client` 目录并导航到它。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter6/client](https://github.com/agtorre/go-cookbook/tree/master/chapter6/client)
    or use this as an exercise to write some of your own code.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter6/client](https://github.com/agtorre/go-cookbook/tree/master/chapter6/client)
    复制测试或将其作为练习编写一些你自己的代码。
- en: 'Create a file called `client.go` with the following content:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `client.go` 的文件，内容如下：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a file called `exec.go` with the following content:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `exec.go` 的文件，内容如下：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a file called `store.go` with the following content:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `store.go` 的文件，内容如下：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录并导航到它。
- en: 'Create a file named `main.go` with the following content. Ensure that you modify
    the `client` import to use the path you set up in step 2:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，内容如下。确保你修改 `client` 导入以使用步骤 2 中设置的路径：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Run `go run main.go`.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You may also run the following:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行以下命令：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You should now see the following output:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该看到以下输出：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请进入上一级目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `net/http` package exposes a `DefaultClient` package variable, which is
    used by the internal operations, `Do`, `GET`, `POST`, and so on. Our `Setup()`
    function returns a client and sets the default client to be the same. When setting
    up a client, most of your modifications will take place in the transport, which
    only needs to implement the `RoundTripper` interface.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`net/http` 包公开了一个 `DefaultClient` 包变量，该变量用于内部操作，如 `Do`、`GET`、`POST` 等。我们的 `Setup()`
    函数返回一个客户端并将默认客户端设置为相同。在设置客户端时，大部分的修改都会发生在传输中，它只需要实现 `RoundTripper` 接口。'
- en: This recipe gives an example of a no-op round tripper that always returns a
    418 status code. You can imagine how this might be useful for testing. It also
    demonstrates passing in clients as function arguments, using them as struct parameters,
    and using the default client to process requests.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例提供了一个始终返回 418 状态码的无操作往返器的示例。你可以想象这可能在测试中很有用。它还展示了如何将客户端作为函数参数传递，将其用作结构参数，以及使用默认客户端处理请求。
- en: Writing a client for a REST API
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 REST API 编写客户端
- en: Writing a client for a REST API will not only help you better understand the
    API in question, but also gives you a useful tool for all future applications
    using that API. This will explore structuring a client and show some strategies
    that you can immediately take advantage of.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为 REST API 编写客户端不仅可以帮助你更好地理解相关的 API，而且为你提供了所有未来使用该 API 的应用程序的有用工具。这将探讨客户端的结构化以及展示一些你可以立即利用的策略。
- en: For this client, we'll assume that the authentication is handled by basic auth,
    but it would also be possible to hit an endpoint to retrieve a token, and so on.
    For the sake of simplicity, we'll assume our API exposes one endpoint, `GetGoogle()`,
    which returns that status code returned from doing a `GET` request to [https://www.google.com](https://www.google.com).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个客户端，我们假设身份验证由基本身份验证处理，但也可以通过端点检索令牌等。为了简单起见，我们假设我们的 API 公开了一个端点 `GetGoogle()`，它返回从对
    [https://www.google.com](https://www.google.com) 进行 `GET` 请求返回的状态码。
- en: Getting ready
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Refer to the *Getting ready* section of the *Initializing, storing, and passing
    http.Client structs* recipe.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 *准备就绪* 部分，该部分在 *初始化、存储和传递 http.Client 结构体* 菜谱中。
- en: How to do it...
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create the `chapter6/rest` directory
    and navigate to it.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建 `chapter6/rest` 目录并导航到它。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter6/rest](https://github.com/agtorre/go-cookbook/tree/master/chapter6/rest)
    or use this as an exercise to write some of your own code.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter6/rest](https://github.com/agtorre/go-cookbook/tree/master/chapter6/rest)
    复制测试或将其作为练习编写一些自己的代码。
- en: 'Create a file called `client.go` with the following content:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `client.go` 的文件，内容如下：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create a file called `transport.go` with the following content:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `transport.go` 的文件，内容如下：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a file called `exec.go` with the following content:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `exec.go` 的文件，内容如下：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录并导航到它。
- en: 'Create a file named `main.go` with the following content. Ensure that you modify
    the `rest` import to use the path you set up in step 2:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，内容如下。确保你修改 `rest` 导入以使用步骤 2 中设置的路径：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Run `go run main.go`.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You may also run the following commands:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还可以运行以下命令：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You should now see the following output:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该看到以下输出：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上移动一个目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'This code demonstrates how to hide logic such as authentication, token refresh,
    and more using the `Transport` interface. It also demonstrates exposing an API
    call via a method. Had we been implementing against something like a user API,
    we would expect methods like:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码演示了如何使用 `Transport` 接口隐藏诸如身份验证、令牌刷新等逻辑。它还演示了通过方法公开 API 调用。如果我们正在针对类似用户 API
    的东西进行实现，我们预计会有像以下这样的方法：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If you've read [Chapter 5](e4c2a55e-c570-4490-b981-2685a89be7d2.xhtml), *All
    ab**out Databases and Storage*, this may look similar to the recipe. This composition
    through interfaces, especially common interfaces like the `RoundTripper` interface,
    provide a lot of flexibility for writing APIs. In addition, it may be useful to
    write a top-level interface as we did earlier and pass the interface around instead
    of the client directly. We'll explore this more in the next recipe as we explore
    writing an OAuth2 client.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经阅读了[第5章](e4c2a55e-c570-4490-b981-2685a89be7d2.xhtml)，*所有关于数据库和存储*，这可能与配方相似。这种通过接口，尤其是像`RoundTripper`接口这样的通用接口，为编写API提供了很多灵活性。此外，编写一个顶级接口，就像我们之前做的那样，并传递接口而不是直接传递客户端，可能也很有用。我们将在下一个配方中进一步探讨，当我们探索编写OAuth2客户端时。
- en: Executing parallel and async client requests
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行并行和异步客户端请求
- en: Performing client requests in parallel is relatively simple in Go. In the following
    recipe, we'll use a client to retrieve multiple URLs using Go buffered channels.
    Responses and errors will both go to a separate channel that is readily accessible
    by anyone with access to the client.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go中并行执行客户端请求相对简单。在下面的配方中，我们将使用客户端通过Go缓冲通道检索多个URL。响应和错误都将进入一个单独的通道，任何人都可以通过访问客户端轻松访问。
- en: In the case of this recipe, creation of the client, reading the channels, and
    handling of responses and errors will all be done in the `main.go` file.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方的情况下，客户端的创建、读取通道以及响应和错误的处理都将全部在`main.go`文件中完成。
- en: Getting ready
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Refer to the *Getting ready* section of the *Initializing, storing, and passing
    http.Client structs* recipe in this chapter.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 参考本章中*初始化、存储和传递http.Client结构体*配方中的*准备工作*部分。
- en: How to do it...
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行您的应用程序：
- en: From your terminal/console application, create the `chapter6/async` directory
    and navigate to it.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端/控制台应用程序中，创建名为`chapter6/async`的目录并导航到它。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter6/async](https://github.com/agtorre/go-cookbook/tree/master/chapter6/async)
    or use this as an exercise to write some of your own code.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://github.com/agtorre/go-cookbook/tree/master/chapter6/async](https://github.com/agtorre/go-cookbook/tree/master/chapter6/async)复制测试或将其作为练习编写一些自己的代码。
- en: 'Create a file called `config.go` with the following content:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`config.go`的文件，内容如下：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a file called `exec.go` with the following content:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`exec.go`的文件，内容如下：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录并导航到它。
- en: 'Create a file named `main.go` with the following content. Ensure that you modify
    the `client` import to use the path you set up in step 2:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下。确保您修改`client`导入以使用步骤2中设置的路径：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Run `go run main.go`.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You may also run the following commands:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以运行以下命令：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You should see the following output:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请向上移动一个目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: This recipe creates a framework for processing requests in a fan-out async way
    using a single client. It will attempt to retrieve as many URLs as you specify
    as quickly as it can. In many cases, you'd want to restrict this further with
    something like a worker pool. It may also make sense to handle these async Go
    routines outside of the client and for specific storage or retrieval interfaces.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方创建了一个框架，用于使用单个客户端以扇出异步方式处理请求。它将尽可能快地检索您指定的尽可能多的URL。在许多情况下，您可能还想进一步限制，例如使用工作池。也可能有在客户端外部处理这些异步Go协程的必要，特别是对于特定的存储或检索接口。
- en: This recipe also explores using a case statement to switch on multiple channels.
    We handle the locking problem since we know how many responses we'll receive and
    we complete only after receiving them all. Another option would be a timeout if
    we were okay with dropping certain responses.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方还探讨了使用case语句在多个通道上进行切换。我们处理了锁定问题，因为我们知道我们将收到多少响应，并且只有在收到所有响应后才会完成。如果我们可以接受丢弃某些响应，另一个选项可能是超时。
- en: Making use of OAuth2 clients
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用OAuth2客户端
- en: OAuth2 is a relatively common protocol for speaking with APIs. The `golang.org/x/oauth2`
    package provides a pretty flexible client for working with OAuth2\. It has subpackages
    that specify endpoints for various providers such as Facebook, Google, and GitHub.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth2是与API通信的相对常见的协议。`golang.org/x/oauth2`包提供了一个相当灵活的客户端，用于与OAuth2一起工作。它有子包，指定了各种提供者的端点，例如Facebook、Google和GitHub。
- en: This recipe will demonstrate how to create a new GitHub OAuth2 client and some
    of its basic usage.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将演示如何创建一个新的GitHub OAuth2客户端及其基本用法。
- en: Getting ready
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Configure your environment according to these steps:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下步骤配置你的环境：
- en: Refer to the *Getting ready* section of the *Initializing, storing, and passing
    http.Client structs* recipe.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 参考关于初始化、存储和传递http.Client结构的*准备工作*部分。
- en: Run the `go get golang.org/x/oauth2` command.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go get golang.org/x/oauth2`命令。
- en: Configure an OAuth Client at [https://github.com/settings/applications/new](https://github.com/settings/applications/new).
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[https://github.com/settings/applications/new](https://github.com/settings/applications/new)配置OAuth客户端。
- en: 'Set the environment variables with your Client ID and Secret:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你的客户端ID和密钥设置环境变量：
- en: '`export GITHUB_CLIENT="your_client"`'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`export GITHUB_CLIENT="your_client"`'
- en: '`export GITHUB_SECRET="your_secret"`'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`export GITHUB_SECRET="your_secret"`'
- en: Brush up on the GitHub API documentation at [https://developer.github.com/v3/](https://developer.github.com/v3/).
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[https://developer.github.com/v3/](https://developer.github.com/v3/)上复习GitHub
    API文档。
- en: How to do it...
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'These steps cover writing and running your application:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create and navigate to the `chapter6/client`
    directory.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建并导航到`chapter6/client`目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter6/oauthcli](https://github.com/agtorre/go-cookbook/tree/master/chapter6/oauthcli)
    or use this as an exercise to write some of your own code.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://github.com/agtorre/go-cookbook/tree/master/chapter6/oauthcli](https://github.com/agtorre/go-cookbook/tree/master/chapter6/oauthcli)复制测试或将其作为练习编写一些自己的代码。
- en: 'Create a file called `config.go` with the following content:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`config.go`的文件，内容如下：
- en: '[PRE18]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Create a file called `exec.go` with the following content:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`exec.go`的文件，内容如下：
- en: '[PRE19]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录并进入它。
- en: 'Create a `main.go` file with the following content. Ensure that you modify
    the `client` import to use the path you set up in step 2:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`main.go`文件，内容如下。确保修改`client`导入以使用你在步骤2中设置的路径：
- en: '[PRE20]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Run `go run main.go`.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You may also run the following:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行以下命令：
- en: '[PRE21]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You should now see the following output:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该看到以下输出：
- en: '[PRE22]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上移动一个目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The standard OAuth2 flow is redirect-based and ends with the server redirecting
    to an endpoint you specify. Your server is then responsible for grabbing the code
    and exchanging it for a token. This recipe bypasses that requirement by allowing
    us to use a URL such as `https://localhost` or `https://a-domain-you-own` and
    manually copying/pasting the code, then hitting enter. Once the token has been
    exchanged, the client will intelligently refresh the token as needed.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的OAuth2流程是基于重定向的，并以服务器将重定向到您指定的端点结束。然后，您的服务器负责抓取代码并将其交换为令牌。本教程通过允许我们使用类似`https://localhost`或`https://a-domain-you-own`的URL，手动复制/粘贴代码，然后按回车键来绕过这一要求。一旦令牌被交换，客户端将根据需要智能地刷新令牌。
- en: It's important to note that we're not storing the token in any way. If the program
    crashes, it must re-exchange for the token. It's also important to note that we
    need to retrieve the token explicitly only once unless the refresh token expires,
    is lost, or is corrupted. Once the client is configure, it should be able to do
    all typical HTTP operations for the API which it authorized against and for which
    it has appropriate scopes.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，我们不会以任何方式存储令牌。如果程序崩溃，它必须重新交换令牌。还需要注意的是，除非刷新令牌过期、丢失或损坏，否则我们只需要明确检索令牌一次。一旦客户端配置完成，它应该能够执行所有典型的HTTP操作，这些操作针对它授权的API，并且具有适当的权限范围。
- en: Implementing an OAuth2 token storage interface
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现OAuth2令牌存储接口
- en: In the previous recipe, we retrieved a token for our client and performed API
    requests. The downside of this approach is that we have no long-term storage for
    our token. In an HTTP server, for example, we'd like to have consistent storage
    of the token between requests.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的配方中，我们检索了客户端的令牌并执行了 API 请求。这种方法的一个缺点是我们没有令牌的长期存储。例如，在一个 HTTP 服务器中，我们希望在请求之间保持令牌的一致存储。
- en: This recipe will explore modifying the OAuth2 client to store a token between
    requests and retrieve them at will using a key. For the sake of simplicity, this
    key will be a file, but it could also be a database, Redis, and so on.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方将探讨修改 OAuth2 客户端以在请求之间存储令牌并使用密钥随意检索它们。为了简化，这个密钥将是一个文件，但它也可以是数据库、Redis 等。
- en: Getting ready
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Refer to the *Getting ready* section of the *Making use of OAuth2 clients* recipe.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 参考配方 *Making use of OAuth2 clients* 中的 *Getting ready* 部分。
- en: How to do it...
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'These steps cover writing and running your application:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create and navigate to the `chapter6/client`
    directory.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建并导航到 `chapter6/client` 目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter6/oauthstore](https://github.com/agtorre/go-cookbook/tree/master/chapter6/oauthstore)
    or use this as an exercise to write some of your own code.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter6/oauthstore](https://github.com/agtorre/go-cookbook/tree/master/chapter6/oauthstore)
    复制测试或将其作为练习编写一些自己的代码。
- en: 'Create a file called `config.go` with the following content:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `config.go` 的文件，并包含以下内容：
- en: '[PRE23]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Create a file called `tokensource.go` with the following content:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `tokensource.go` 的文件，并包含以下内容：
- en: '[PRE24]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create a file called `storage.go` with the following content:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `storage.go` 的文件，并包含以下内容：
- en: '[PRE25]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create a file called `filestorage.go` with the following content:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `filestorage.go` 的文件，并包含以下内容：
- en: '[PRE26]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录，并导航到它。
- en: 'Create a file named `main.go` with the following content. Ensure that you modify
    the `oauthstore` import to use the path you set up in step 2:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，并包含以下内容。确保你将 `oauthstore` 导入修改为步骤 2 中设置的路径：
- en: '[PRE27]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Run `go run main.go`.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You may also run the following:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行以下命令：
- en: '[PRE28]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You should now see the following output:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该看到以下输出：
- en: '[PRE29]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，向上导航一个目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe takes care of storing and retrieving the contents of the token to/from
    a file. If it's a first run, it must execute the entire code exchange, but the
    subsequent runs will reuse the access token, and if one is available, it will
    refresh using the refresh token.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方负责将令牌的内容存储和检索到文件中。如果是首次运行，它必须执行整个代码交换，但后续运行将重用访问令牌，如果可用，它将使用刷新令牌进行刷新。
- en: 'There is currently no way in this code to differentiate between users/tokens,
    but that could be accomplished with cookies as a key for a filename or a row in
    the database as well. Let''s walk through what this code does:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中目前没有区分用户/令牌的方法，但可以通过将 cookies 作为文件名或数据库中的一行作为键来实现。让我们看看这段代码是如何工作的：
- en: The `config.go` file wraps the standard OAuth2 config. For every method that
    involves retrieving a token, we first check whether we have a valid token in the
    local storage. If not, we retrieve one using the standard config and then store
    it.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.go` 文件包装了标准的 OAuth2 配置。对于涉及检索令牌的每个方法，我们首先检查本地存储中是否有有效的令牌。如果没有，我们使用标准配置检索一个，然后存储它。'
- en: The `tokensource.go` file implements our custom `TokenSource` interface that
    pairs with `Config`. Similar to `Config`, we always first try to retrieve our
    token from a file and set it with the new token otherwise.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tokensource.go` 文件实现了我们的自定义 `TokenSource` 接口，它与 `Config` 配对。类似于 `Config`，我们首先尝试从文件中检索我们的令牌，如果没有，则使用新的令牌设置。'
- en: The `storage.go` file is the `storage` interface used by `Config` and `TokenSource`.
    It only defines two methods and we also include a helper function to bootstrap
    the OAuth2 code-based flow similar to what we did in the previous recipe, but
    if the file with a valid token already exists, it will be used instead.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`storage.go` 文件是 `Config` 和 `TokenSource` 使用的 `storage` 接口。它只定义了两个方法，我们还包含了一个辅助函数来引导
    OAuth2 基于代码的流程，类似于我们在之前的配方中所做的，但如果存在包含有效令牌的文件，它将使用该文件。'
- en: The `filestorage.go` file implements the `storage` interface. When we store
    a new token, we first truncate the file and write a JSON representation of the
    `token` struct. Otherwise, we decode the file and return `token`.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filestorage.go`文件实现了`storage`接口。当我们存储一个新的令牌时，我们首先截断文件并写入`token`结构的JSON表示。否则，我们解码文件并返回`token`。'
- en: Wrapping a client in added functionality and function composition
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包装客户端以添加功能并进行函数组合
- en: In 2015, Tomás Senart gave an excellent talk on wrapping an `http.Client` struct
    with an interface, allowing you to take advantage of middleware and function composition.
    You can find out more on this at [https://github.com/gophercon/2015-talks](https://github.com/gophercon/2015-talks).
    This recipe takes from his ideas and demonstrates an example of doing the same
    to the `Transport` interface of the `http.Client` struct similar to our earlier
    recipe, *Writing a client for a REST API.*
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在2015年，Tomás Senart做了一次关于使用接口包装`http.Client`结构体的精彩演讲，这使得你可以利用中间件和函数组合。你可以在[https://github.com/gophercon/2015-talks](https://github.com/gophercon/2015-talks)了解更多信息。这个食谱借鉴了他的想法，并演示了如何将类似我们早期食谱“编写REST
    API客户端”的方式应用到`http.Client`结构的`Transport`接口上。
- en: This recipe will implement a logging and basic auth middleware for a standard
    `http.Client` struct. It also includes a decorate function that can be used when
    you need to with a large variety of middleware.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱将实现一个用于标准`http.Client`结构体的日志记录和基本身份验证中间件。它还包括一个装饰函数，当需要使用大量中间件时可以使用。
- en: Getting ready
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Refer to the *Getting ready* section of the *Initializing, storing, and passing
    http.Client structs* recipe in this chapter.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 参考本章中“准备就绪”部分的“初始化、存储和传递http.Client结构体”食谱。
- en: How to do it...
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'These steps cover writing and running your application:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create the `chapter6/decorator` directory
    and navigate to it.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建`chapter6/decorator`目录并导航到它。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter6/decorator](https://github.com/agtorre/go-cookbook/tree/master/chapter6/decorator)
    or use this as an exercise to write some of your own code.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://github.com/agtorre/go-cookbook/tree/master/chapter6/decorator](https://github.com/agtorre/go-cookbook/tree/master/chapter6/decorator)复制测试代码，或者将其作为练习来编写你自己的代码。
- en: 'Create a file called `config.go` with the following content:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`config.go`的文件，内容如下：
- en: '[PRE30]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Create a file called `decorator.go` with the following content:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`decorator.go`的文件，内容如下：
- en: '[PRE31]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create a file called `middleware.go` with the following content:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`middleware.go`的文件，内容如下：
- en: '[PRE32]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Create a file called `exec.go` with the following content:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`exec.go`的文件，内容如下：
- en: '[PRE33]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录并导航到它。
- en: 'Create a `main.go` file with the following content. Ensure that you modify
    the `decorator` import to use the path you set up in step 2:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`main.go`文件，内容如下。确保将`decorator`导入修改为你在第二步中设置的路径：
- en: '[PRE34]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Run `go run main.go`.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You may also run the following:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还可以运行以下命令：
- en: '[PRE35]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'You should now see the following output:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该看到以下输出：
- en: '[PRE36]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上移动一个目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe takes advantage of closures as first-class citizens and interfaces.
    The main trick that allows for this is having a function implement an interface.
    This allows us to wrap an interface implemented by a structure with an interface
    implemented by a function.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱利用了闭包作为一等公民和接口。允许这样做的主要技巧是有一个函数实现了接口。这允许我们用函数实现的接口来包装由结构体实现的接口。
- en: The `middleware.go` file contains two example client middleware functions. These
    could be extended to contain additional middleware, such as more sophisticated
    auth, metrics, and more. This recipe can also be combined with the previous recipe
    to produce an OAuth2 client that can be extended by additional middleware.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`middleware.go`文件包含两个示例客户端中间件函数。这些可以扩展以包含额外的中间件，例如更复杂的身份验证、度量等。这个食谱也可以与之前的食谱结合，以生成可以由额外中间件扩展的OAuth2客户端。'
- en: 'The `Decorator` function is a convenience function that allows the following:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`Decorator` 函数是一个便利函数，它允许以下操作：'
- en: '[PRE37]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The advantage of this approach compared to wrapping the client is that we can
    keep the interface sparse. If you want a fully featured client, you'd also need
    to implement methods such as `GET`, `POST`, and `PostForm`.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 与包装客户端相比，这种方法的优势在于我们可以保持接口稀疏。如果你想有一个功能齐全的客户端，你还需要实现 `GET`、`POST` 和 `PostForm`
    等方法。
- en: Understanding GRPC clients
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 GRPC 客户端
- en: GRPC is a high performance RPC framework that is built using protocol buffers
    ([https://developers.google.com/protocol-buffers](https://developers.google.com/protocol-buffers))
    and HTTP/2 ([https://http2.github.io](https://http2.github.io)). Creating a GRPC
    client in Go has a lot of the same intricacies as working with Go HTTP clients.
    In order to demonstrate basic client usage, it's easiest to also implement a server.
    This recipe will create a `greeter` service, which takes a greeting and a name
    and returns the sentence `<greeting> <name>!`. In addition, the server can specify
    whether to exclaim `!` or not `.`.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: GRPC 是一个使用协议缓冲区 ([https://developers.google.com/protocol-buffers](https://developers.google.com/protocol-buffers))
    和 HTTP/2 ([https://http2.github.io](https://http2.github.io)) 构建的高性能 RPC 框架。在
    Go 中创建 GRPC 客户端与使用 Go HTTP 客户端有很多相似之处。为了演示基本的客户端使用，也最容易实现一个服务器。这个示例将创建一个 `greeter`
    服务，它接受一个问候语和一个名字，并返回句子 `<greeting> <name>!`。此外，服务器可以指定是否要感叹号 `!` 或不使用 `.`。
- en: This recipe won't explore some details about GRPC such as streaming, but will
    hopefully serve as an introduction to creating a very basic server and client.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例不会探讨 GRPC 的某些细节，例如流式传输，但希望它能作为创建一个非常基本的客户端和服务器的一个介绍。
- en: Getting ready
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Configure your environment according to these steps:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下步骤配置你的环境：
- en: Refer to the *Getting ready* section of the *Initializing, storing, and passing
    http.Client structs* recipe in this chapter.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 参考本章中 *初始化、存储和传递 http.Client 结构体* 菜单的 *准备就绪* 部分。
- en: Install GRPC at [https://github.com/grpc/grpc/blob/master/INSTALL.md](https://github.com/grpc/grpc/blob/master/INSTALL.md).
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 [https://github.com/grpc/grpc/blob/master/INSTALL.md](https://github.com/grpc/grpc/blob/master/INSTALL.md)
    安装 GRPC。
- en: Run the `go get github.com/golang/protobuf/proto` command.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go get github.com/golang/protobuf/proto` 命令。
- en: Run the `go get github.com/golang/protobuf/protoc-gen-go` command.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go get github.com/golang/protobuf/protoc-gen-go` 命令。
- en: How to do it...
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create and navigate to the `chapter6/grpc`
    directory.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建并导航到 `chapter6/grpc` 目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter6/grpc](https://github.com/agtorre/go-cookbook/tree/master/chapter6/grpc)
    or use this as an exercise to write some of your own code.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter6/grpc](https://github.com/agtorre/go-cookbook/tree/master/chapter6/grpc)
    复制测试或将其作为练习编写一些自己的代码。
- en: Create a new directory named `greeter` and navigate to it.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `greeter` 的新目录并进入它。
- en: 'Create a file called `greeter.proto` with the following content:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `greeter.proto` 的文件，内容如下：
- en: '[PRE38]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Run the following command:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE39]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Navigate back up a directory.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向上移动一个目录。
- en: Create a new directory named `server` and navigate to it.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `server` 的新目录并进入它。
- en: 'Create a file called `server.go` with the following content. Ensure that you
    modify the `greeter` import to use the path you set up in step 3:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `server.go` 的文件，内容如下。确保你修改 `greeter` 导入以使用第 3 步中设置的路径：
- en: '[PRE40]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Create a file called `greeter.go` with the following content. Ensure that you
    modify the `greeter` import to use the path you set up in step 3:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `greeter.go` 的文件，内容如下。确保你修改 `greeter` 导入以使用第 3 步中设置的路径：
- en: '[PRE41]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Navigate back up a directory.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向上移动一个目录。
- en: Create a new directory named `client` and navigate to it.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `client` 的新目录并进入它。
- en: 'Create a file called `client.go` with the following content. Ensure that you
    modify the `greeter` import to use the path you set up in step 3:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `client.go` 的文件，内容如下。确保你修改 `greeter` 导入以使用第 3 步中设置的路径：
- en: '[PRE42]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Navigate back up a directory.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向上移动一个目录。
- en: 'Run `go run server/server.go server/greeter.go`, and you will see the following
    output:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run server/server.go server/greeter.go`，你将看到以下输出：
- en: '[PRE43]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'In a separate terminal, run `go run client/client.go` from the `grpc` directory,
    you will see the following output:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个终端中，从 `grpc` 目录运行 `go run client/client.go`，你将看到以下输出：
- en: '[PRE44]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上移动一个目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The GRPC server is set up to listen on port `4444`. Once the client connects,
    it can send requests and receive responses from the server. The structure of the
    requests, responses, and supported methods are dictated by the `.proto` file we
    created in step 4\. In practice, when integrating against GRPC servers, they should
    provide the `.proto` file, which can be used to automatically generate a client.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: GRPC 服务器被设置为监听端口 `4444`。一旦客户端连接，它就可以向服务器发送请求并接收响应。请求、响应的结构以及支持的方法由我们在第 4 步中创建的
    `.proto` 文件决定。在实际应用中，当与 GRPC 服务器集成时，它们应该提供 `.proto` 文件，该文件可以用于自动生成客户端。
- en: In addition to the client, the `protoc` command generates the stubs for the
    server and all that's required is to fill in the implementation details. The generated
    Go code also has JSON tags and the same structs could be reused for JSON REST
    services. Our code sets up an insecure client. To handle GRPC securely, you need
    to use an SSL certificate.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 除了客户端之外，`protoc` 命令还会为服务器生成存根，所需做的只是填写实现细节。生成的 Go 代码还包含 JSON 标签，相同的结构体可以用于 JSON
    REST 服务。我们的代码设置了一个不安全的客户端。为了安全地处理 GRPC，你需要使用 SSL 证书。
