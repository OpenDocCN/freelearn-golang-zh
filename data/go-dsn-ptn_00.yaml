- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: Welcome to the book *Go Design Patterns*! With this book, you'll learn basic
    and advanced techniques and patterns with the Go language. Don't worry if you
    have never written Go code before; this book will gradually introduce you to the
    various concepts in Go programming. At the same time, experts will find many tips
    and tricks on the language, so I encourage you to not miss any chapter. If you
    already know the classic design patterns, you'll find this book very handy, not
    only as a reference book but also as a way to learn idiomatic Go approaches to
    solve common problems that you may already know.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎阅读《Go设计模式》！通过这本书，你将学习使用Go语言的基本和高级技术和模式。如果你以前从未编写过Go代码，不用担心；本书将逐渐向你介绍Go编程中的各种概念。与此同时，专家们会在语言方面提供许多技巧和窍门，所以我鼓励你不要错过任何一章。如果你已经了解经典设计模式，你会发现这本书非常方便，不仅可以作为参考书，还可以作为学习Go惯用方法解决常见问题的方式。
- en: 'The book is divided in three sections:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书分为三个部分：
- en: 'Introduction to the Go language: This is the first part of the book, where
    you''ll learn the basic syntax, the tools that comes with the binary distributions,
    basic testing, JSON parsing, and more. We leave concurrency for a later chapter
    to focus on the way that the syntax and the compiler work in a typical Go app.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go语言简介：这是本书的第一部分，你将学习基本语法、二进制发行版附带的工具、基本测试、JSON解析等。我们将把并发留到后面的章节，以便专注于典型Go应用程序中的语法和编译器的工作方式。
- en: 'Classic design patterns in idiomatic Go: The second section presents the classic
    design patterns but as we will see, they are quite different, partly because of
    the lack of inheritance in Go, but also because we have different and more optimal
    ways to solve the same problems. A newcomer to the language will find the examples
    in this section very useful as a way to understand the roots of Go and the idiomatic
    ways in which you can solve problems using Go in the same manner as you would
    solve in languages such as Java or C++. Most examples are presented by using TDD
    and some of them even show examples within Go standard library that uses these
    patterns.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go中的经典设计模式：第二部分介绍了经典设计模式，但正如我们将看到的那样，它们有所不同，部分原因是Go中缺乏继承，但也因为我们有不同且更优化的方式来解决相同的问题。对于该语言的新手来说，本节中的示例将非常有用，因为它们可以帮助理解Go的根源以及使用Go解决问题的惯用方式，就像你在Java或C++等语言中解决问题一样。大多数示例都是使用TDD进行演示，其中一些示例甚至展示了Go标准库中使用这些模式的示例。
- en: 'Concurrency patterns: The focus in this section is learning about concurrent
    structures and parallel execution. You will learn most of the primitives in Go
    to write concurrent apps, and we will develop some of the classical design patterns
    with concurrent structures to maximize parallelism. Also, we will learn some of
    the typical structures to develop concurrent apps in Go. You learn how a classical
    pattern can become more complex if we need it to work in a concurrent way but
    the idea is to understand Go concurrent primitives so that the reader finishes
    the book knowing how to write their own concurrent design patterns by using the
    knowledge taken from the book.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并发模式：本节的重点是学习并发结构和并行执行。你将学习Go中编写并发应用程序的大部分基本知识，并且我们将使用一些经典的设计模式来开发并发结构，以最大程度地实现并行性。此外，我们还将学习一些开发Go并发应用程序的典型结构。你将了解到，如果我们需要以并发方式工作，一个经典模式可能会变得更加复杂，但是我们的目标是理解Go的并发原语，以便读者在完成本书后能够使用所学知识编写自己的并发设计模式。
- en: The book will slowly raise the difficulty of some tasks. We have explained tips
    and tricks in every chapter.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将逐渐提高一些任务的难度。我们在每一章都解释了一些技巧和窍门。
- en: What this book covers
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书内容
- en: '[Chapter 1](ch01.html "Chapter 1. Ready... Steady... Go!") *, Ready… Steady…Go!,* attempts
    to help newcomers to the Go programming language who have some background in any
    other programming language. It will begin by showing how to install the Go environment
    in a Linux machine, moving to syntax, type and flow control.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[第一章](ch01.html "第一章。准备...开始...Go！") *，准备...开始...Go！*，旨在帮助那些对Go编程语言有一定背景的新手。它将从在Linux机器上安装Go环境开始，然后介绍语法、类型和流程控制。'
- en: '[Chapter 2](ch02.html "Chapter 2. Creational Patterns - Singleton, Builder,
    Factory, Prototype, and Abstract Factory Design Patterns") *, Creational Patterns
    - Singleton, Builder, Factory, Prototype, and Abstract Factory Design Patterns*, introduces
    the problems that can arise when an object creation or management is particularly
    complex or expensive using the Singleton, Builder, Factory, and Abstract Factory
    design patterns.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[第二章](ch02.html "第二章。创建模式 - 单例、生成器、工厂、原型和抽象工厂设计模式") *，创建模式 - 单例、生成器、工厂、原型和抽象工厂设计模式*，介绍了在对象创建或管理特别复杂或昂贵时可能出现的问题，使用了单例、生成器、工厂和抽象工厂设计模式。'
- en: '[Chapter 3](ch03.html "Chapter 3. Structural Patterns - Composite, Adapter,
    and Bridge Design Patterns") *, Structural Patterns - Composite, Adapter, and
    Bridge Design Patterns, *deals with the first set of Structural patterns about
    object composition to get some new functionality. Such as creating an intermediate
    object and using of various objects as if there is only one.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[第三章](ch03.html "第三章。结构模式 - 组合、适配器和桥接设计模式") *，结构模式 - 组合、适配器和桥接设计模式*，涉及关于对象组合以获得新功能的第一组结构模式。比如创建一个中间对象，并使用各种对象，就好像只有一个对象一样。'
- en: '[Chapter 4](ch04.html "Chapter 4. Structural Patterns - Proxy, Facade, Decorator,
    and Flyweight Design Patterns") *, Structural Patterns - Proxy, Facade, Decorator,
    and Flyweight Design Patterns, *is less oriented to multi-object composition but
    focuses more on obtaining new functionality in existing objects. The Decorator
    pattern is commonly used to follow the open-closed principle. Facade is extensively
    used in API’s where you want a single source for many sources of information and
    actions. Flyweight is not so common but it’s a very useful pattern when the memory
    is becoming a problem caused by a large collection of similar objects. Finally,
    the Proxy pattern wraps on an object to provide the same functionality, but at
    the same time, adding something to the proxy’s functionality.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章《结构模式-代理，外观，装饰器和享元设计模式》不太关注多对象组合，而更注重在现有对象中获取新功能。装饰器模式通常用于遵循开闭原则。外观在API中被广泛使用，其中您希望一个单一的来源提供许多信息和操作。享元不太常见，但在内存因大量相似对象而成为问题时，它是一个非常有用的模式。最后，代理模式包装对象以提供相同的功能，同时为代理的功能添加一些东西。
- en: '[Chapter 5](ch05.html "Chapter 5. Behavioral Patterns - Strategy, Chain of
    Responsibility, and Command Design Patterns") *,  Behavioral patterns - Strategy,
    Chain of Responsibility, Command, and Mediator Design Patterns*, deals with the
    first behavioral pattern to make objects react in an expected or bounded way.
    We’ll start with the Strategy pattern, perhaps the most important design pattern
    in object-oriented programming, as many design patterns have something in common
    with it. Then we’ll move to the Chain of Responsibility to build *chains* of objects
    that can decide which between them must deal with a particular case. Finally,
    Command pattern to encapsulate actions that don’t necessarily need to be executed
    immediately or must be stored.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章《行为模式-策略，责任链和命令设计模式》处理了第一个行为模式，使对象以预期或有限的方式做出反应。我们将从策略模式开始，这可能是面向对象编程中最重要的设计模式，因为许多设计模式与它有一些共同之处。然后我们将转向责任链，构建可以决定谁必须处理特定情况的对象链。最后，命令模式封装不一定需要立即执行或必须存储的操作。
- en: '[Chapter 6](ch06.html "Chapter 6. Behavioral Patterns - Template, Memento,
    and Interpreter Design Patterns") *, Behavioral Patterns - Template, Memento,
    and Interpreter Design Patterns,* continues with Behavioral patterns introducing
    the Interpreter pattern, a quite complex pattern to create small languages and
    Interpreters for them. It can be very useful when a problem can be solved by inventing
    a small language for it. The Memento pattern is in front of our eyes every day
    with the **Undo** button in apps. The Template pattern helps developers by defining
    an initial structure of an operation so that the final users of the code can finish
    it.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 第6章《行为模式-模板，备忘录和解释器设计模式》继续介绍行为模式，引入了解释器模式，这是一个创建小型语言和其解释器的相当复杂的模式。当问题可以通过为其发明一种小语言来解决时，它可能非常有用。备忘录模式在应用程序中的“撤销”按钮中每天都在我们眼前。模板模式通过定义操作的初始结构来帮助开发人员，以便代码的最终用户可以完成它。
- en: '[Chapter 7](ch07.html "Chapter 7. Behavioral Patterns - Visitor, State, Mediator,
    and Observer Design Patterns") *, Behavioral Patterns - Visitor, State, Mediator,
    and Observer Design Patterns, *depicts the Observer pattern, an important pattern
    that is becoming tremendously popular in distributed systems and reactive programming.
    The Visitor pattern deals with complex hierarchies of objects where you need to
    apply a particular action depending on the object. Finally, the State pattern
    is commonly used in video games and finite state machines and allows an object
    to change its behavior depending on its own state.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第7章《行为模式-访问者，状态，中介者和观察者设计模式》描述了观察者模式，这是一个在分布式系统和响应式编程中变得非常流行的重要模式。访问者模式处理对象的复杂层次结构，需要根据对象应用特定操作。最后，状态模式通常用于视频游戏和有限状态机，并允许对象根据自身状态改变其行为。
- en: '[Chapter 8](ch08.html "Chapter 8. Introduction to Gos Concurrency") *, Introduction
    to Go''s Concurrency*, explains with more detail the CSP concurrency model used
    in Go by going through some examples using Goroutines and channels, as well as
    mutexes and syncs.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第8章《Go并发简介》通过一些示例，使用Goroutines和通道以及互斥锁和同步来更详细地解释了Go中使用的CSP并发模型。
- en: '[Chapter 9](ch09.html "Chapter 9. Concurrency Patterns - Barrier, Future, and
    Pipeline Design Patterns") *, Concurrency Patterns - Barrier, Future, and Pipeline
    Design Patterns*, will introduce some of the CSP concurrency patterns that are
    idiomatic to the Go language by walking through some examples and explanations.
    These are small but really powerful patterns so we will provides a few examples
    of the use of each of them, as well as some schemas (if possible) that will make
    the understanding of each of them easier.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章《并发模式-屏障，未来和管道设计模式》将通过一些示例和解释介绍Go语言中符合惯例的CSP并发模式。这些模式虽小，但非常强大，因此我们将提供每种模式的一些用法示例，以及一些图表（如果可能），以便更容易理解每种模式。
- en: '[Chapter 10](ch10.html "Chapter 10. Concurrency Patterns - Workers Pool and
    Publish/Subscriber Design Patterns") *,  Concurrency Patterns -  Workers Pool,
    and Publish or Subscriber Design Patterns*, talks about a couple of patterns with
    concurrent structures. We will explain every step in detail so you can follow
    the examples carefully. The idea is to learn patterns to design concurrent applications
    in idiomatic Go. We are using channels and Goroutines heavily, instead of locks
    or sharing variables.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[第10章](ch10.html "第10章。并发模式-工作池和发布/订阅设计模式")*，并发模式-工作池和发布或订阅设计模式*，讨论了一些具有并发结构的模式。我们将详细解释每一步，以便您可以仔细跟随示例。我们的目标是学习设计并发应用程序的模式，以符合Go的习惯用法。我们将大量使用通道和Goroutines，而不是锁或共享变量。'
- en: What you need for this book
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您需要为本书做些什么？
- en: Most of the chapters in this book are written following a simple TDD approach,
    here the requirements are written first, followed by some unit tests and finally
    the code that satisfies those requirements. We will use only tools that comes
    with the standard library of Go as a way to better understand the language and
    its possibilities. This idea is key to follow the book and understanding the way
    that Go solves problems, especially in distributed systems and concurrent applications.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的大部分章节都是按照简单的TDD方法编写的，首先编写要求，然后进行一些单元测试，最后编写满足这些要求的代码。我们将只使用Go标准库中提供的工具，以更好地理解该语言及其可能性。这个想法是跟随本书并理解Go解决问题的方式的关键，特别是在分布式系统和并发应用中。
- en: Who this book is for
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这本书是为谁写的
- en: This book is for both beginners and advanced-level developers in the Go programming
    language. No knowledge of design patterns is expected.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书适用于Go编程语言的初学者和高级开发人员。不需要了解设计模式。
- en: Conventions
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 约定
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，您将找到许多文本样式，用于区分不同类型的信息。以下是这些样式的一些示例及其含义的解释。
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "we
    need a `main` function to use it as libraries cannot be converted to executable
    files directly."'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 文本中的代码词、数据库表名、文件夹名、文件名、文件扩展名、路径名、虚拟URL、用户输入和Twitter句柄显示如下："我们需要一个`main`函数来使用它，因为库不能直接转换为可执行文件。"
- en: 'A block of code is set as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块设置如下：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望引起您对代码块的特定部分的注意时，相关行或项目将以粗体显示：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Any command-line input or output is written as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 任何命令行输入或输出都将按照以下方式编写：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "In order to download new modules, we will go to **Files** | **Settings**
    | **Project Name** | **Project Interpreter**."'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**新术语**和**重要单词**以粗体显示。屏幕上看到的单词，例如菜单或对话框中的单词，以这种方式出现在文本中："为了下载新模块，我们将转到**文件**
    | **设置** | **项目名称** | **项目解释器**。"'
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Warnings or important notes appear in a box like this.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 警告或重要说明将显示在这样的框中。
- en: Tip
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Tips and tricks appear like this.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 技巧和窍门会以这种方式出现。
- en: Reader feedback
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读者反馈
- en: Feedback from our readers is always welcome. Let us know what you think about
    this book-what you liked or disliked. Reader feedback is important for us as it
    helps us develop titles that you will really get the most out of. To send us general
    feedback, simply e-mail feedback@packtpub.com, and mention the book's title in
    the subject of your message. If there is a topic that you have expertise in and
    you are interested in either writing or contributing to a book, see our author
    guide at [www.packtpub.com/authors](http://www.packtpub.com/authors).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们始终欢迎读者的反馈。请告诉我们您对本书的看法-您喜欢或不喜欢的内容。读者的反馈对我们很重要，因为它可以帮助我们开发出您真正喜欢的标题。要发送一般反馈，只需发送电子邮件至feedback@packtpub.com，并在主题中提及书名。如果您在某个专题上有专业知识，并且有兴趣撰写或为书籍做出贡献，请参阅我们的作者指南[www.packtpub.com/authors](http://www.packtpub.com/authors)。
- en: Customer support
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户支持
- en: Now that you are the proud owner of a Packt book, we have a number of things
    to help you to get the most from your purchase.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您是Packt书籍的自豪所有者，我们有一些事情可以帮助您充分利用您的购买。
- en: Downloading the example code
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载示例代码
- en: You can download the example code files for this book from your account at [http://www.packtpub.com](http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载本书的示例代码文件。如果您在其他地方购买了本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便直接通过电子邮件接收文件。
- en: 'You can download the code files by following these steps:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按照以下步骤下载代码文件：
- en: Log in or register to our website using your e-mail address and password.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的电子邮件地址和密码登录或注册到我们的网站。
- en: Hover the mouse pointer on the **SUPPORT** tab at the top.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将鼠标指针悬停在顶部的**支持**选项卡上。
- en: Click on **Code Downloads & Errata**.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**代码下载和勘误**。
- en: Enter the name of the book in the **Search** box.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**搜索**框中输入书名。
- en: Select the book for which you're looking to download the code files.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您要下载代码文件的书籍。
- en: Choose from the drop-down menu where you purchased this book from.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择您购买本书的地点。
- en: Click on **Code Download**.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**代码下载**。
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 文件下载后，请确保使用最新版本的解压缩或提取文件夹：
- en: WinRAR / 7-Zip for Windows
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows的WinRAR / 7-Zip
- en: Zipeg / iZip / UnRarX for Mac
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mac的Zipeg / iZip / UnRarX
- en: 7-Zip / PeaZip for Linux
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux的7-Zip / PeaZip
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Go-Design-Patterns](https://github.com/PacktPublishing/Go-Design-Patterns).
    We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 该书的代码包也托管在GitHub上，网址为[https://github.com/PacktPublishing/Go-Design-Patterns](https://github.com/PacktPublishing/Go-Design-Patterns)。我们还有其他代码包来自我们丰富的图书和视频目录，可在[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)找到。去看看吧！
- en: Errata
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 勘误
- en: Although we have taken every care to ensure the accuracy of our content, mistakes
    do happen. If you find a mistake in one of our books-maybe a mistake in the text
    or the code-we would be grateful if you could report this to us. By doing so,
    you can save other readers from frustration and help us improve subsequent versions
    of this book. If you find any errata, please report them by visiting [http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata),
    selecting your book, clicking on the **Errata Submission Form** link, and entering
    the details of your errata. Once your errata are verified, your submission will
    be accepted and the errata will be uploaded to our website or added to any list
    of existing errata under the Errata section of that title.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '尽管我们已经尽一切努力确保内容的准确性，但错误确实会发生。如果您在我们的书中发现错误，也许是文本或代码中的错误，我们将不胜感激，如果您能向我们报告。通过这样做，您可以帮助其他读者避免挫折，并帮助我们改进本书的后续版本。如果您发现任何勘误，请访问[http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata)报告，选择您的书，点击**勘误提交表**链接，并输入您的勘误详情。一旦您的勘误被验证，您的提交将被接受，并且勘误将被上传到我们的网站或添加到该标题的勘误部分下的任何现有勘误列表中。 '
- en: To view the previously submitted errata, go to [https://www.packtpub.com/books/content/support](https://www.packtpub.com/books/content/support)
    and enter the name of the book in the search field. The required information will
    appear under the **Errata** section.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看先前提交的勘误表，请转到[https://www.packtpub.com/books/content/support](https://www.packtpub.com/books/content/support)并在搜索字段中输入书名。所需信息将出现在**勘误**部分下。
- en: Piracy
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 盗版
- en: Piracy of copyrighted material on the Internet is an ongoing problem across
    all media. At Packt, we take the protection of our copyright and licenses very
    seriously. If you come across any illegal copies of our works in any form on the
    Internet, please provide us with the location address or website name immediately
    so that we can pursue a remedy.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网上侵犯版权材料的盗版是所有媒体都面临的持续问题。在Packt，我们非常重视保护我们的版权和许可。如果您在互联网上发现我们作品的任何非法副本，请立即向我们提供位置地址或网站名称，以便我们采取补救措施。
- en: Please contact us at copyright@packtpub.com with a link to the suspected pirated
    material.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 请通过copyright@packtpub.com与我们联系，并附上涉嫌盗版材料的链接。
- en: We appreciate your help in protecting our authors and our ability to bring you
    valuable content.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们感谢您在保护我们的作者和为您带来有价值的内容的能力方面的帮助。
- en: Questions
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: If you have a problem with any aspect of this book, you can contact us at questions@packtpub.com,
    and we will do our best to address the problem.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对本书的任何方面有问题，可以通过questions@packtpub.com与我们联系，我们将尽力解决问题。
