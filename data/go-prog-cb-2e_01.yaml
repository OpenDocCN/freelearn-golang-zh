- en: I/O and Filesystems
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: I/O和文件系统
- en: Go provides excellent support for both basic and complex I/O. The recipes in
    this chapter will explore common Go interfaces that are used to deal with I/O
    and show you how to make use of them. The Go standard library frequently uses
    these interfaces, and they will be used by recipes throughout the book.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Go提供了对基本和复杂I/O的出色支持。本章中的配方将探讨用于处理I/O的常见Go接口，并向您展示如何使用它们。Go标准库经常使用这些接口，并且它们将被本书中的配方使用。
- en: You'll learn how to work with data in memory and in the form of streams. You'll
    see examples of working with files, directories, and the CSV format. The temporary
    files recipe looks at a mechanism to work with files without the overhead of dealing
    with name collision and more. Lastly, we'll explore Go standard templates for
    both plain text and HTML.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 您将学习如何处理内存中的数据和流式数据。您将看到有关处理文件、目录和CSV格式的示例。临时文件配方介绍了一种处理文件的机制，而无需处理名称冲突等开销。最后，我们将探讨Go标准模板，包括纯文本和HTML。
- en: These recipes should lay the foundation for the use of interfaces to represent
    and modify data, and should help you think about data in an abstract and flexible
    way.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这些配方应该为使用接口来表示和修改数据奠定基础，并应该帮助您以抽象和灵活的方式思考数据。
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将介绍以下配方：
- en: Using the common I/O interfaces
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用常见的I/O接口
- en: Using the bytes and strings packages
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用bytes和strings包
- en: Working with directories and files
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理目录和文件
- en: Working with the CSV format
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理CSV格式
- en: Working with temporary files
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用临时文件
- en: Working with text/template and html/template
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用text/template和html/template
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In order to proceed with all the recipes in this chapter, configure your environment
    according to these steps:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了继续本章中的所有配方，请根据以下步骤配置您的环境：
- en: Download and install Go 1.12.6 or greater on your operating system at [https://golang.org/doc/install](https://golang.org/doc/install).
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的操作系统上下载并安装Go 1.12.6或更高版本，网址为[https://golang.org/doc/install](https://golang.org/doc/install)。
- en: Open a Terminal or console application and create and navigate to a project
    directory, such as `~/projects/go-programming-cookbook`. All code will be run
    and modified from this directory.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端或控制台应用程序，并创建并转到一个项目目录，例如`~/projects/go-programming-cookbook`。所有代码将从该目录运行和修改。
- en: 'Clone the latest code into `~/projects/go-programming-cookbook-original`, as
    shown in the following code. It is recommended that you work from that directory
    rather than typing the examples manually:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将最新的代码克隆到`~/projects/go-programming-cookbook-original`中，如下所示。建议您从该目录中工作，而不是手动输入示例：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Using the common I/O interfaces
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用常见的I/O接口
- en: The Go language provides a number of I/O interfaces that are used throughout
    the standard library. It is best practice to make use of these interfaces wherever
    possible rather than passing structures or other types directly. Two powerful
    interfaces we will explore in this recipe are the `io.Reader` and `io.Writer`
    interfaces. These interfaces are used throughout the standard library, and understanding
    how to use them will make you a better Go developer.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Go语言提供了许多I/O接口，这些接口在整个标准库中使用。最佳实践是尽可能使用这些接口，而不是直接传递结构或其他类型。我们将在本配方中探讨的两个强大接口是`io.Reader`和`io.Writer`接口。这些接口在整个标准库中使用，了解如何使用它们将使您成为更好的Go开发人员。
- en: 'The `Reader` and `Writer` interfaces look like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`Reader`和`Writer`接口如下所示：'
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Go also makes it easy to combine interfaces. For example, take a look at the
    following code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Go还可以轻松地组合接口。例如，看一下以下代码：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This recipe will also explore an `io` function called `Pipe()`, as shown in
    the following code:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方还将探讨一个名为`Pipe()`的`io`函数，如下所示：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The remainder of this book will make use of these interfaces.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的其余部分将使用这些接口。
- en: How to do it...
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps cover how to write and run your application:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤涵盖了如何编写和运行您的应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter1/interfaces`.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter1/interfaces`的新目录。
- en: Navigate to this directory.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到此目录。
- en: 'Run the following command:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter1/interfaces` or
    use this as an exercise to write some of your own code!
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter1/interfaces`复制测试，或者使用这个作为练习来编写一些您自己的代码！
- en: 'Create a file called `interfaces.go` with the following contents:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`interfaces.go`的文件，内容如下：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create a file called `pipes.go` with the following contents:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`pipes.go`的文件，内容如下：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录并进入该目录。
- en: 'Create a `main.go` file with the following contents:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Run `go run .`.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run .`。
- en: 'You may also run the following:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您也可以运行以下命令：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You should see the following output:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到以下输出：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`,
    and ensure that all tests pass.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`，确保所有测试都通过。
- en: How it works...
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Copy()` function copies bytes between interfaces and treats that data like
    a stream. Thinking of data as streams has a lot of practical uses, especially
    when working with network traffic or filesystems. The `Copy()` function also creates
    a `MultiWriter` interface that combines two writer streams and writes to them
    twice using `ReadSeeker`. If a `Reader` interface was used instead, rather than
    seeing `exampleexample`, you would only see `example` despite copying to the `MultiWriter`
    interface twice. You can also use a buffered write if your stream is not fitted
    into the memory.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`Copy()`函数在接口之间复制字节，并将该数据视为流。将数据视为流在许多实际用途中非常有用，特别是在处理网络流量或文件系统时。`Copy()`函数还创建了一个`MultiWriter`接口，它将两个写入流组合在一起，并使用`ReadSeeker`两次写入它们。如果使用了`Reader`接口，而不是看到`exampleexample`，您只会看到`example`，尽管将数据复制到`MultiWriter`接口两次。如果您的流无法适应内存，还可以使用缓冲写入。'
- en: The `PipeReader` and `PipeWriter` structures implement the `io.Reader` and `io.Writer`
    interfaces. They're connected, creating an in-memory pipe. The primary purpose
    of a pipe is to read from a stream while simultaneously writing from the same
    stream to a different source. In essence, it combines the two streams into a pipe.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`PipeReader`和`PipeWriter`结构实现了`io.Reader`和`io.Writer`接口。它们连接在一起，创建一个内存管道。管道的主要目的是从流中读取数据，同时将相同流中的数据写入到不同的源。本质上，它将两个流合并成一个管道。'
- en: Go interfaces are a clean abstraction to wrap data that performs common operations.
    This is made apparent when doing I/O operations, and so the `io` package is a
    great resource for learning about interface composition. The `pipe` package is
    often underused, but provides great flexibility with thread safety when linking
    input and output streams.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Go接口是一种干净的抽象，用于包装执行常见操作的数据。这在进行I/O操作时变得明显，因此`io`包是学习接口组合的一个很好的资源。`pipe`包通常被低估，但在链接输入和输出流时提供了很大的灵活性和线程安全性。
- en: Using the bytes and strings packages
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`bytes`和`strings`包
- en: The `bytes` and `strings` packages have a number of useful helpers to work with
    and convert the data from string to byte types, and vice versa. They allow the
    creation of buffers that work with a number of common I/O interfaces.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`bytes`和`strings`包提供了许多有用的辅助函数，用于处理和转换字符串和字节类型的数据。它们允许创建与许多常见I/O接口一起使用的缓冲区。'
- en: How to do it...
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps cover how to write and run your application:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤涵盖了如何编写和运行您的应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter1/bytestrings`.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter1/bytestrings`的新目录。
- en: Navigate to this directory.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到此目录。
- en: 'Run the following command:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You should see a file called `go.mod` that contains the following content:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Copy the tests from `~/projects/go-programming-cookbook-original/chapter1/bytestrings` or
    use this as an exercise to write some of your own code!
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter1/bytestrings`复制测试，或者将其用作练习编写一些自己的代码！
- en: 'Create a file called `buffer.go` with the following contents:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`buffer.go`的文件，其中包含以下内容：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a file called `bytes.go` with the following contents:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`bytes.go`的文件，其中包含以下内容：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a file called `string.go` with the following contents:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`string.go`的文件，其中包含以下内容：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录，并导航到该目录。
- en: 'Create a `main.go` file with the following contents:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，其中包含以下内容：
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Run `go run .`.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run .`。
- en: 'You may also run the following:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以运行以下命令：
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You should see the following output:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`,
    and ensure that all tests pass.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`，确保所有测试都通过。
- en: How it works...
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `bytes` library provides a number of convenience functions when working
    with data. A buffer, for example, is far more flexible than an array of bytes
    when working with stream-processing libraries or methods. Once you've created
    a buffer, it can be used to satisfy an `io.Reader` interface so that you can take
    advantage of `ioutil` functions to manipulate the data. For streaming applications,
    you'd probably want to use a buffer and a scanner. The `bufio` package comes in
    handy for these cases. Sometimes, using an array or slice is more appropriate
    for smaller datasets or when you have a lot of memory on your machine.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`bytes`库在处理数据时提供了许多便利函数。例如，与字节数组相比，缓冲区在处理流处理库或方法时更加灵活。创建缓冲区后，它可以用于满足`io.Reader`接口，以便您可以利用`ioutil`函数来操作数据。对于流应用程序，您可能希望使用缓冲区和扫描器。`bufio`包在这些情况下非常有用。有时，对于较小的数据集或者在计算机上有大量内存时，使用数组或切片更为合适。'
- en: Go provides a lot of flexibility in converting data between interfaces when
    using these basic types—it's relatively simple to convert between strings and
    bytes. When working with strings, the `strings` package provides a number of convenience
    functions to work with, search, and manipulate strings. In some cases, a good
    regular expression may be appropriate, but most of the time, the `strings` and
    `strconv` packages are sufficient. The `strings` package allows you to make a
    string look like a title, split it into an array, or trim whitespace. It also
    provides a `Reader` interface of its own that can be used instead of the `bytes`
    package reader type.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用这些基本类型时，Go在转换数据之间的接口方面提供了很大的灵活性——在字符串和字节之间进行转换相对简单。在处理字符串时，`strings`包提供了许多便利函数，用于处理、搜索和操作字符串。在某些情况下，一个良好的正则表达式可能是合适的，但大多数情况下，`strings`和`strconv`包就足够了。`strings`包允许您将字符串看起来像标题，将其拆分为数组，或修剪空白。它还提供了自己的`Reader`接口，可以用于代替`bytes`包的读取器类型。
- en: Working with directories and files
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理目录和文件
- en: Working with directories and files can be difficult when you switch between
    platforms (Windows and Linux, for example). Go provides cross-platform support
    to work with files and directories in the `os` and `ioutils` packages. We've already
    seen examples of `ioutils`, but now we'll explore how to use them in another way!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在切换平台（例如Windows和Linux）时，处理目录和文件可能会很困难。Go在`os`和`ioutils`包中提供了跨平台支持，以处理文件和目录。我们已经看到了`ioutils`的示例，现在我们将探讨如何以另一种方式使用它们！
- en: How to do it...
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps cover how to write and run your application:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤涵盖了如何编写和运行您的应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter1/filedirs`.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter1/filedirs`的新目录。
- en: Navigate to this directory.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入此目录。
- en: 'Run the following command:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You should see a file called `go.mod` that contains the following contents:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE20]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter1/filedirs` or
    use this as an exercise to write some of your own code!
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter1/filedirs`复制测试，或者利用这个机会编写一些您自己的代码！
- en: 'Create a file called `dirs.go` with the following contents:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`dirs.go`的文件，其中包含以下内容：
- en: '[PRE21]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create a file called `files.go` with the following contents:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`files.go`的文件，其中包含以下内容：
- en: '[PRE22]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录并进入该目录。
- en: 'Create a `main.go` file with the following contents:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，其中包含以下内容：
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Run `go run .`.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run .`。
- en: 'You may also run the following:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以运行以下命令：
- en: '[PRE24]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You should see the following output:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE25]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`,
    and ensure that all tests pass.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`，确保所有测试都通过。
- en: How it works...
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: If you're familiar with files in Unix, the Go `os` library should feel very
    familiar. You can perform basically all common operations—`Stat` a file to collect
    attributes, collect a file with different permissions, and create and modify directories
    and files. In this recipe, we performed a number of manipulations to directories
    and files and then cleaned up after ourselves.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您熟悉Unix中的文件，Go的`os`库应该会让您感到非常熟悉。您可以执行基本上所有常见的操作——`Stat`文件以收集属性，使用不同权限收集文件，并创建和修改目录和文件。在本示例中，我们对目录和文件进行了许多操作，然后在完成后进行了清理。
- en: Working with file objects is very similar to working with in-memory streams.
    Files also provide a number of convenience functions directly, such as `Chown`,
    `Stat`, and `Truncate`. The easiest way to get comfortable with files is to make
    use of them. In all the previous recipes, we have to be careful to clean up after
    our programs.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 与处理内存流非常相似，处理文件对象也提供了许多便利函数，例如`Chown`、`Stat`和`Truncate`。熟悉文件的最简单方法是利用它们。在所有以前的示例中，我们都必须小心清理我们的程序。
- en: Working with files is a very common operation when building backend applications.
    Files can be used for configuration, secret keys, as temporary storage, and more.
    Go wraps OS system calls using the `os` package and allows the same functions
    to operate regardless of whether you're using Windows or Unix.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建后端应用程序时，与文件的操作是非常常见的。文件可用于配置、秘钥、临时存储等。Go使用`os`包封装了操作系统系统调用，并允许相同的函数在使用Windows或Unix时运行。
- en: Once your file is opened and stored in a `File` structure, it can easily be
    passed into a number of interfaces (we discussed these interfaces earlier). All
    the earlier examples can use `os.File` structures directly instead of buffers
    and in-memory data streams in order to operate on data stored on the disk . This
    may be useful for certain techniques, such as writing all logs to `stderr` and
    the file at the same time with a single write call.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的文件被打开并存储在`File`结构中，它就可以轻松地传递到许多接口中（我们之前讨论过这些接口）。所有之前的示例都可以直接使用`os.File`结构，而不是缓冲区和内存数据流，以便在磁盘上存储的数据上进行操作。这对于某些技术可能很有用，例如使用单个写入调用同时将所有日志写入`stderr`和文件。
- en: Working with the CSV format
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CSV格式
- en: CSV is a common format that is used to manipulate data. It's common, for example,
    to import or export a CSV file into Excel. The Go `CSV` package operates on data
    interfaces, and as a result, it's easy to write data to a buffer, `stdout`, a
    file, or a socket. The examples in this section will show some common ways to
    get data into and out of the CSV format.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: CSV是一种常见的格式，用于操作数据。例如，将CSV文件导入或导出到Excel是常见的。Go `CSV`包操作数据接口，因此很容易将数据写入缓冲区、`stdout`、文件或套接字。本节中的示例将展示一些常见的将数据转换为CSV格式或从CSV格式中获取数据的方法。
- en: How to do it...
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover how to write and run your application:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了如何编写和运行您的应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter1/csvformat`.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter1/csvformat`的新目录。
- en: Navigate to this directory.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入此目录。
- en: 'Run the following command:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE26]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You should see a file called `go.mod` that contains the following contents:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE27]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Copy the tests from `~/projects/go-programming-cookbook-original/chapter1/csvformat` or
    use this as an exercise to write some of your own code!
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter1/csvformat`复制测试，或者利用这个机会编写一些您自己的代码！
- en: 'Create a file called `read_csv.go` with the following contents:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`read_csv.go`的文件，其中包含以下内容：
- en: '[PRE28]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Add this additional function to `read_csv.go`, as follows:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此附加功能添加到`read_csv.go`中，如下所示：
- en: '[PRE29]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create a file called `write_csv.go` with the following contents:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`write_csv.go`的文件，其中包含以下内容：
- en: '[PRE30]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Add these additional functions to `write_csv.go`, as follows:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下附加功能添加到`write_csv.go`中，如下所示：
- en: '[PRE31]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录并进入该目录。
- en: 'Create a `main.go` file with the following contents:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，其中包含以下内容：
- en: '[PRE32]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Run `go run .`.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run .`。
- en: 'You may also run the following:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以运行以下命令：
- en: '[PRE33]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You should see the following output:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE34]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`,
    and ensure that all tests pass.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`，确保所有测试都通过。
- en: How it works...
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In order to learn how to read a CSV format, we first represent our data as a
    structure. In Go, it's very useful to format data as a structure, as it makes
    things such as marshaling and encoding relatively simple. Our read example uses
    movies as our data type. The function takes an `io.Reader` interface that holds
    our CSV data as an input. This could be a file or a buffer. We then use that data
    to create and populate a `Movie` structure, including converting the year into
    an integer. We also add options to the CSV parser to use `;` (semi-colon) as the
    separator and `-` (hyphen) as a comment line.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 为了学习如何读取CSV格式，我们首先将我们的数据表示为一个结构。在Go中，将数据格式化为结构非常有用，因为它使诸如编组和编码之类的事情相对简单。我们的读取示例使用电影作为我们的数据类型。该函数接受一个`io.Reader`接口，该接口将我们的CSV数据作为输入。这可以是文件或缓冲区。然后，我们使用该数据来创建和填充一个`Movie`结构，包括将年份转换为整数。我们还添加了选项到CSV解析器，以使用`;`（分号）作为分隔符和`-`（连字符）作为注释行。
- en: Next, we explore the same idea, but in reverse. Novels are represented with
    a title and an author. We initialize an array of novels and then write specific
    novels in the CSV format to an `io.Writer` interface. Once again, this can be
    a file, `stdout`, or a buffer.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们以相同的思路进行探索，但是反过来。小说由标题和作者表示。我们初始化了一个小说数组，然后以CSV格式将特定的小说写入到`io.Writer`接口中。这可以是文件、`stdout`或缓冲区。
- en: The `CSV` package is an excellent example of why you'd want to think of data
    flows in Go as implementing common interfaces. It's easy to change the source
    and destination of our data with small one-line tweaks, and we can easily manipulate
    CSV data without using an excessive amount of memory or time. For example, it
    would be possible to read from a stream of data one record at a time and write
    to a separate stream in a modified format one record at a time. Doing this would
    not incur significant memory or processor usage.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`CSV`包是一个很好的例子，说明为什么您希望将Go中的数据流视为实现常见接口。通过小幅调整，我们可以轻松更改数据的来源和目的地，并且可以在不使用过多内存或时间的情况下轻松操作CSV数据。例如，可以可能一次从数据流中读取一条记录，并一次以修改后的格式将其写入到另一个流中。这样做不会带来显著的内存或处理器使用。'
- en: Later, when we explore data pipelines and worker pools, you'll see how these
    ideas can be combined and how to handle these streams in parallel.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后，当我们探索数据管道和工作池时，您将看到这些想法如何结合以及如何并行处理这些流。
- en: Working with temporary files
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用临时文件
- en: We've created and made use of files for a number of examples so far. We've also
    had to manually deal with cleanup, name collision, and more. Temporary files and
    directories are a quicker, simpler way to handle these cases.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经为许多示例创建并使用了文件。我们还必须手动处理清理、名称冲突等问题。临时文件和目录是处理这些情况的一种更快、更简单的方法。
- en: How to do it...
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps cover how to write and run your application:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤涵盖了如何编写和运行您的应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter1/tempfiles`.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter1/tempfiles`的新目录。
- en: Navigate to this directory.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到此目录。
- en: 'Run the following command:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE35]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'You should see a file called `go.mod` that contains the following contents:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE36]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Copy the tests from `~/projects/go-programming-cookbook-original/chapter1/tempfiles` or
    use this as an exercise to write some of your own code!
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter1/tempfiles`复制测试，或者利用这个机会编写一些您自己的代码！
- en: 'Create a file called `temp_files.go` with the following contents:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`temp_files.go`的文件，内容如下：
- en: '[PRE37]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录并导航到该目录。
- en: 'Create a `main.go` file with the following contents:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE38]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Run `go run .`.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run .`。
- en: 'You may also run the following:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您也可以运行以下命令：
- en: '[PRE39]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'You should see the following output (with a different path):'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出（路径不同）：
- en: '[PRE40]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`,
    and ensure that all tests pass.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`，确保所有测试都通过。
- en: How it works...
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Creating temporary files and directories can be done using the `ioutil` package.
    Although you must still delete the files yourself, using `RemoveAll` is the convention,
    and it will do this for you with only one extra line of code.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`ioutil`包来创建临时文件和目录。虽然您仍然必须自己删除文件，但使用`RemoveAll`是惯例，它将为您执行此操作，只需额外一行代码。
- en: When writing tests, the use of temporary files is highly recommended. It's also
    useful for things such as build artifacts and more. The Go `ioutil` package will
    try and honor the OS preferences by default, but it allows you to fall back to
    other directories if required.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写测试时，强烈建议使用临时文件。它还对构建产物等非常有用。Go的`ioutil`包将尝试默认遵守操作系统的偏好，但如果需要，它允许您回退到其他目录。
- en: Working with text/template and html/template
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用text/template和html/template
- en: Go provides rich support for templates. It is simple to nest templates, import
    functions, represent variables, iterate over data, and so on. If you need something
    more sophisticated than a CSV writer, templates may be a great solution.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Go提供了丰富的模板支持。嵌套模板、导入函数、表示变量、迭代数据等都很简单。如果您需要比CSV写入器更复杂的东西，模板可能是一个很好的解决方案。
- en: Another application for templates is for websites. When we want to render server-side
    data to the client, templates fit the bill nicely. At first, Go templates can
    appear confusing. This section will explore working with templates, collecting
    templates inside of a directory, and working with HTML templates.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 模板的另一个应用是用于网站。当我们想要将服务器端数据呈现给客户端时，模板非常合适。起初，Go模板可能看起来令人困惑。本节将探讨使用模板、收集目录中的模板以及使用HTML模板。
- en: How to do it...
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover how to write and run your application:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了如何编写和运行您的应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter1/templates`.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter1/templates`的新目录。
- en: Navigate to this directory.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到此目录。
- en: 'Run the following command:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE41]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'You should see a file called `go.mod` that contains the following content:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE42]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Copy the tests from `~/projects/go-programming-cookbook-original/chapter1/templates` or
    use this as an exercise to write some of your own code!
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter1/templates`复制测试，或者利用这个机会编写一些自己的代码！
- en: 'Create a file called `templates.go` with the following contents:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`templates.go`的文件，其中包含以下内容：
- en: '[PRE43]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Add a function to the end of `templates.go`, as follows:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`templates.go`的末尾添加一个函数，如下所示：
- en: '[PRE44]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Create a file called `template_files.go` with the following contents:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`template_files.go`的文件，其中包含以下内容：
- en: '[PRE45]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Create a file called `html_templates.go` with the following contents:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`html_templates.go`的文件，其中包含以下内容：
- en: '[PRE46]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录并进入其中。
- en: 'Create a `main.go` file with the following contents:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，其中包含以下内容：
- en: '[PRE47]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Run `go run .`.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run .`。
- en: 'You may also run the following:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您也可以运行以下命令：
- en: '[PRE48]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'You should see the following output (with a different path):'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到以下输出（路径不同）：
- en: '![](img/ef2b6984-de94-468d-b65b-f6d33afaa564.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ef2b6984-de94-468d-b65b-f6d33afaa564.png)'
- en: If you copied or wrote your own tests, go up one directory and run `go test`,
    and ensure that all tests pass.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`，确保所有测试都通过。
- en: How it works...
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Go has two template packages: `text/template` and `html/template`. They share
    functionality and a variety of functions. In general, you should use `html/template`
    to render websites and `text/template` for everything else. Templates are plain
    text, but variables and functions can be used inside of curly brace blocks.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Go有两个模板包：`text/template`和`html/template`。它们共享功能和各种函数。一般来说，您应该使用`html/template`来渲染网站，而`text/template`用于其他所有内容。模板是纯文本，但变量和函数可以在花括号块内使用。
- en: The template packages also provide convenience methods to work with files. The
    example that we used here creates a number of templates in a temporary directory
    and then reads them all with a single line of code.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 模板包还提供了方便的方法来处理文件。我们在这里使用的示例在临时目录中创建了许多模板，然后用一行代码读取了它们。
- en: The `html/template` package is a wrapper around the `text/template` package.
    All of the template examples work with the `html/template` package directly, using
    no modification and only changing the import statement. HTML templates provide
    the added benefit of context-aware safety; this prevents security breaches such
    as JavaScript injection.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`html/template`包是`text/template`包的包装器。所有的模板示例都直接使用`html/template`包，不做任何修改，只改变导入语句。HTML模板提供了上下文感知的安全性，这可以防止诸如JavaScript注入之类的安全漏洞。'
- en: The template packages provide what you'd expect from a modern template library.
    It's easy to combine templates, add application logic, and ensure safety when
    emitting results to HTML and JavaScript.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 模板包提供了现代模板库应有的功能。很容易组合模板，添加应用程序逻辑，并确保在将结果输出到HTML和JavaScript时的安全性。
