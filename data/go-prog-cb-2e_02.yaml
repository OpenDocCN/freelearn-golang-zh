- en: Command-Line Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令行工具
- en: Command-line applications are among the easiest ways to handle user input and
    output. This chapter will focus on command-line-based interactions, such as command-line
    arguments, configuration, and environment variables. We will conclude with a library
    for coloring text output in Unix and Bash for Windows.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行应用程序是处理用户输入和输出的最简单方式之一。本章将重点介绍基于命令行的交互，如命令行参数、配置和环境变量。最后，我们将介绍一个用于在Unix和Bash
    for Windows中着色文本输出的库。
- en: With the recipes in this chapter, you should be equipped to handle expected
    and unexpected user input. The *Catching and handling signals* recipe is an example
    of cases where users may send unexpected signals to your application, and the
    pipes recipe is a good alternative to taking user inputs compared to flags or
    command-line arguments.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章的配方，您应该能够处理预期和意外的用户输入。*捕获和处理信号*配方是一个例子，说明用户可能向您的应用程序发送意外信号的情况，而管道配方是相对于标志或命令行参数来说获取用户输入的一个很好的替代方法。
- en: The ANSI color recipe will hopefully provide some examples of cleaning up output
    to users. For example, in logging, being able to color text based on its purpose
    can sometimes make large blocks of text significantly clearer.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: ANSI颜色配方有望提供一些清理输出给用户的示例。例如，在日志记录中，能够根据其用途着色文本有时可以使大块文本变得更清晰。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下配方：
- en: Using command-line flags
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命令行标志
- en: Using command-line arguments
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命令行参数
- en: Reading and setting environment variables
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取和设置环境变量
- en: Configuration using TOML, YAML, and JSON
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用TOML、YAML和JSON进行配置
- en: Working with Unix pipes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Unix管道
- en: Catching and handling signals
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获和处理信号
- en: An ANSI coloring application
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个ANSI着色应用程序
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In order to proceed with all the recipes in this chapter, configure your environment
    according to these steps:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了继续本章中的所有配方，请根据以下步骤配置您的环境：
- en: Download and install Go 1.12.6 or greater on your operating system at [https://golang.org/doc/install](https://golang.org/doc/install).
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的操作系统上下载并安装Go 1.12.6或更高版本，网址为[https://golang.org/doc/install](https://golang.org/doc/install)。
- en: Open a Terminal or console application and create and navigate to a project
    directory such as `~/projects/go-programming-cookbook`. All of our code will be
    run and modified from this directory.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端或控制台应用程序，并创建并导航到项目目录，例如`~/projects/go-programming-cookbook`。我们所有的代码都将在这个目录中运行和修改。
- en: 'Clone the latest code into `~/projects/go-programming-cookbook-original` and
    work from that directory rather than typing the examples manually:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '将最新的代码克隆到`~/projects/go-programming-cookbook-original`，并从该目录中工作，而不是手动输入示例： '
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Using command-line flags
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命令行标志
- en: The `flag` package makes it simple to add command-line flag arguments to a Go
    application. It has a few shortcomings—you tend to duplicate a lot of code in
    order to add shorthand versions of flags, and they're ordered alphabetically from
    the help prompt. There are a number of third-party libraries that attempt to address
    these shortcomings, but this chapter will focus on the standard library version
    and not on those libraries.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`flag`包使得向Go应用程序添加命令行标志参数变得简单。它有一些缺点——您往往需要重复大量的代码来添加标志的简写版本，并且它们按照帮助提示的字母顺序排列。有许多第三方库试图解决这些缺点，但本章将重点介绍标准库版本，而不是这些库。'
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序的过程：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter2/flags`.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter2/flags`的新目录。
- en: Navigate to this directory.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到这个目录。
- en: 'Run the following command:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter2/flags`,
    or use this as an opportunity to write some of your own code!
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter2/flags`复制测试，或者利用这个机会编写一些您自己的代码！
- en: 'Create a file called `flags.go` with the following contents:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`flags.go`的文件，内容如下：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a file called `custom.go` with the following contents:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`custom.go`的文件，内容如下：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run the following command:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create a file called `main.go` with the following contents:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Run the following commands on the command line:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行上运行以下命令：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Try these and some other arguments; you should see the following output:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试这些和其他一些参数；您应该看到以下输出：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`,
    and ensure that all the tests pass.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`，确保所有测试都通过。
- en: How it works...
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe attempts to demonstrate most of the common usages of the `flag`
    package. It shows custom variable types, a variety of built-in variables, shorthand
    flags, and writing all flags to a common structure. This is the first recipe to
    require a main function, as the main usage of flag (`flag.Parse()`) should be
    called from main. As a result, the normal example directory is omitted.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 该配方试图演示`flag`包的大多数常见用法。它显示自定义变量类型、各种内置变量、简写标志，并将所有标志写入一个公共结构。这是第一个需要主函数的配方，因为应该从主函数中调用flag的主要用法（`flag.Parse()`）。因此，正常的示例目录被省略了。
- en: The example usage of this application shows that you get `-h` automatically
    to get a list of flags that are included. Some other things to note are Boolean
    flags that are invoked without arguments, and that the flag order doesn't matter.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序的示例用法显示，您会自动得到`-h`以获取包含的标志列表。还有一些需要注意的是，布尔标志是在没有参数的情况下调用的，而标志的顺序并不重要。
- en: The `flag` package is a quick way to structure input for command-line applications
    and provide a flexible means of specifying upfront user input for things such
    as setting up log levels or the verbosity of an application. In the *Using command-line
    arguments* recipe, we'll explore flag sets and switch between them using arguments.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`flag`包是一种快速构建命令行应用程序输入的方式，并提供了一种灵活的方式来指定用户输入，比如设置日志级别或应用程序的冗长程度。在*使用命令行参数*示例中，我们将探讨标志集并使用参数在它们之间切换。'
- en: Using command-line arguments
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命令行参数
- en: The flags from the previous recipe are a type of command-line argument. This
    chapter will expand on other uses for these arguments by constructing a command
    that supports nested subcommands. This will demonstrate flagsets and also use
    positional arguments that are passed into your application.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个示例中的标志是一种命令行参数。本章将扩展这些参数的其他用途，通过构建支持嵌套子命令的命令来演示标志集，并使用传递给应用程序的位置参数。
- en: Like the previous recipe, this one requires a main function to run. There are
    a number of third-party packages that deal with complex nested arguments and flags,
    but we'll investigate how to do this using only the standard library.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一个示例一样，这个示例需要一个主函数来运行。有许多第三方包处理复杂的嵌套参数和标志，但我们将探讨如何仅使用标准库来实现这一点。
- en: How to do it...
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序的过程：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter2/cmdargs`.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter2/cmdargs`的新目录。
- en: Navigate to this directory.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到这个目录。
- en: 'Run the following command:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter2/cmdargs`,
    or use this as an opportunity to write some of your own code!
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter2/cmdargs`中复制测试，或者利用这个机会编写一些自己的代码！
- en: 'Create a file called `cmdargs.go` with the following contents:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`cmdargs.go`的文件，内容如下：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create a file called `main.go` with the following contents:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Run `go build`.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go build`。
- en: 'Run the following commands and try a few other combinations of arguments:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令，并尝试一些其他参数的组合：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`,
    and ensure that all the tests pass.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，返回上一级目录并运行`go test`，确保所有测试都通过。
- en: How it works...
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Flagsets can be used to set up independent lists of expected arguments, usage
    strings, and more. The developer is required to perform validation on a number
    of arguments, parsing in the right subset of arguments to commands and defining
    usage strings. This can be error-prone and requires a lot of iteration to get
    completely right.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 标志集可用于设置独立的预期参数列表、使用字符串等。开发人员需要对许多参数进行验证，将正确的子集参数解析到命令中，并定义使用字符串。这可能容易出错，并需要大量迭代才能完全正确。
- en: The `flag` package makes parsing arguments much easier and includes convenience
    methods to get the number of flags, arguments, and more. This recipe demonstrates
    basic ways to construct a complex command-line application using arguments, including
    a package-level configuration, required positional arguments, multi-level command
    usage, and how to split these things into multiple files or packages if required.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`flag`包使解析参数变得更加容易，并包括方便的方法来获取标志的数量、参数等。这个示例演示了使用参数构建复杂命令行应用程序的基本方法，包括包级配置、必需的位置参数、多级命令使用，以及如何将这些内容拆分成多个文件或包（如果需要）。'
- en: Reading and setting environment variables
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取和设置环境变量
- en: Environment variables are another way that you can pass state into an application
    beyond reading data in from a file or passing it explicitly over the command line.
    This recipe will explore some very basic getting and setting of environment variables
    and then work with the highly useful third-party library `envconfig` ([https://github.com/kelseyhightower/envconfig](https://github.com/kelseyhightower/envconfig)).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 环境变量是另一种可以将状态传递到应用程序中的方式，除了从文件中读取数据或通过命令行显式传递数据。这个示例将探讨一些非常基本的获取和设置环境变量的方法，然后使用非常有用的第三方库`envconfig`（[https://github.com/kelseyhightower/envconfig](https://github.com/kelseyhightower/envconfig)）。
- en: We'll build an application that can read a `config` file via JSON or through
    environment variables. The next recipe will explore alternative formats, including
    TOML and YAML.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个应用程序，可以通过JSON或环境变量读取`config`文件。下一个示例将探讨替代格式，包括TOML和YAML。
- en: How to do it...
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序的过程：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter2/envvar`.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter2/envvar`的新目录。
- en: Navigate to this directory.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到这个目录。
- en: 'Run the following command:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter2/envvar`,
    or use this as an opportunity to write some of your own code!
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制`~/projects/go-programming-cookbook-original/chapter2/envvar`中的测试，或者利用这个机会编写一些自己的代码！
- en: 'Create a file called `config.go` with the following contents:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`config.go`的文件，内容如下：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录，并导航到该目录。
- en: 'Create a `main.go` file with the following contents:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Run `go run main.go`.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You may also run the following commands:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行以下命令：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You should see the following output:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `go.mod` file may be updated, and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件可能会被更新，`go.sum`文件现在应该存在于顶级示例目录中。'
- en: If you copied or wrote your own tests, go up one directory and run `go test`,
    and ensure that all the tests pass.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，返回上一级目录并运行`go test`，确保所有测试都通过。
- en: How it works...
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Reading and writing environment variables is pretty simple with the `os` package.
    The `envconfig` third-party library this recipe uses is a clever way to capture
    environment variables and specify certain requirements using `struct` tags.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`os`包读取和写入环境变量非常简单。这个配方使用的`envconfig`第三方库是一种聪明的方式，可以捕获环境变量并使用`struct`标签指定某些要求。
- en: The `LoadConfig` function is a flexible way to pull in configuration information
    from a variety of sources without a lot of overhead or too many extra dependencies.
    It would be simple to convert the primary `config` into another format aside from
    JSON or just always use environment variables as well.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`LoadConfig`函数是一种灵活的方式，可以从各种来源获取配置信息，而不需要太多的开销或太多额外的依赖。将主要的`config`转换为除JSON以外的其他格式，或者始终使用环境变量也很简单。'
- en: Also, note the use of errors. We wrapped errors throughout the code in this
    recipe so that we can annotate errors without losing the original error's information.
    There will be more details on this in [Chapter 4](b2a08305-16bf-42ad-aee6-a9a184c03d4a.xhtml),
    *Error Handling in Go*.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意错误的使用。我们在这个配方的代码中包装了错误，这样我们就可以注释错误而不会丢失原始错误的信息。在[第4章](b2a08305-16bf-42ad-aee6-a9a184c03d4a.xhtml)中会有更多关于这个的细节，*Go中的错误处理*。
- en: Configuration using TOML, YAML, and JSON
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用TOML、YAML和JSON进行配置
- en: There are many configuration formats that Go, with the use of third-party libraries,
    supports. Three of the most popular data formats are TOML, YAML, and JSON. Go
    can support JSON out of the box, and the others have clues on how to marshal/unmarshal
    or encode/decode data for these formats. These formats have many benefits beyond
    configuration, but this chapter will largely focus on converting a Go structure
    in the form of a configuration structure. This recipe will explore basic input
    and output using these formats.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Go有许多配置格式，通过使用第三方库，支持。其中三种最流行的数据格式是TOML、YAML和JSON。Go可以直接支持JSON，其他格式有关于如何为这些格式编组/解组或编码/解码数据的线索。这些格式除了配置之外还有许多好处，但本章主要关注将Go结构转换为配置结构的过程。这个配方将探讨使用这些格式进行基本输入和输出。
- en: These formats also provide an interface by which Go and applications written
    in other languages can share the same configuration. There are also a number of
    tools that deal with these formats and simplify working with them.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这些格式还提供了一个接口，通过这个接口，Go和其他语言编写的应用程序可以共享相同的配置。还有许多处理这些格式并简化与它们一起工作的工具。
- en: How to do it...
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter2/confformat`.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter2/confformat`的新目录。
- en: Navigate to this directory.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到这个目录。
- en: 'Run the following command:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE21]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter2/confformat`,
    or use this as an opportunity to write some of your own code!
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter2/confformat`复制测试，或者利用这个机会编写一些你自己的代码！
- en: 'Create a file called `toml.go` with the following contents:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`toml.go`的文件，内容如下：
- en: '[PRE22]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create a file called `yaml.go` with the following contents:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`yaml.go`的文件，内容如下：
- en: '[PRE23]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Create a file called `json.go` with the following contents:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`json.go`的文件，内容如下：
- en: '[PRE24]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create a file called `marshal.go` with the following contents:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`marshal.go`的文件，内容如下：
- en: '[PRE25]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create a file called `unmarshal.go` with the following contents:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`unmarshal.go`的文件，内容如下：
- en: '[PRE26]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录并导航到该目录。
- en: 'Create a `main.go` file with the following contents:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`main.go`文件，内容如下：
- en: '[PRE27]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Run `go run main.go`.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You may also run the following commands:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行以下命令：
- en: '[PRE28]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You should see the following output:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE29]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件可能会被更新，`go.sum`文件现在应该存在于顶级配方目录中。'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe provided us with examples of how to use the TOML, YAML, and JSON
    parsers to both write raw data to a go structure and read data out of it and into
    the corresponding format. Like the recipes in [Chapter 1](2d535381-00f2-4db4-9975-d2702d58cfd8.xhtml),
    *I/O and Filesystems*, we saw how common it is to quickly switch between `[]byte`,
    `string`, `bytes.Buffer`, and other I/O interfaces.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方为我们提供了如何使用TOML、YAML和JSON解析器的示例，用于将原始数据写入go结构并从中读取数据并转换为相应的格式。就像[第1章](2d535381-00f2-4db4-9975-d2702d58cfd8.xhtml)中的配方，*I/O和文件系统*，我们看到了在`[]byte`、`string`、`bytes.Buffer`和其他I/O接口之间快速切换是多么常见。
- en: The `encoding/json` package is the most comprehensive in providing encoding,
    marshaling, and other methods to work with the JSON format. We abstracted these
    away with our `ToFormat` functions, and it would be very simple to attach multiple
    methods such as this so that we could use a single structure that can quickly
    be converted into or from any of these types.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`encoding/json`包在提供编码、编组和其他方法以处理JSON格式方面是最全面的。我们通过`ToFormat`函数将这些抽象出来，非常简单地可以附加多个类似的方法，这样我们就可以使用一个结构快速地转换成任何这些类型，或者从这些类型转换出来。'
- en: This recipe also touched upon structure tags and their use. The previous chapter
    also made use of these, and they're a common way to give hints to packages and
    libraries about how to treat data contained within a structure.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方还涉及结构标签及其用法。上一章也使用了这些，它们是一种常见的方式，用于向包和库提供关于如何处理结构中包含的数据的提示。
- en: Working with Unix pipes
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Unix管道进行工作
- en: 'Unix pipes are useful when we are passing the output of one program to the
    input of another. For example, take a look at the following code:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将一个程序的输出传递给另一个程序的输入时，Unix管道非常有用。例如，看一下以下代码：
- en: '[PRE30]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In a Go application, the left-hand side of the pipe can be read in using `os.Stdin`,
    which acts like a file descriptor. To demonstrate this, this recipe will take
    an input on the left-hand side of a pipe and return a list of words and their
    number of occurrences. These words will be tokenized on white space.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go应用程序中，管道的左侧可以使用`os.Stdin`进行读取，它的作用类似于文件描述符。为了演示这一点，本教程将接受管道左侧的输入，并返回一个单词列表及其出现次数。这些单词将在空格上进行标记化。
- en: How to do it...
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter2/pipes`.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter2/pipes`的新目录。
- en: Navigate to this directory.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到此目录。
- en: 'Run the following command:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE31]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE32]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter2/pipes`,
    or use this as an opportunity to write some of your own code!
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter2/pipes`复制测试，或者利用这个机会编写一些自己的代码！
- en: 'Create a file called `pipes.go` with the following contents:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`pipes.go`的文件，其中包含以下内容：
- en: '[PRE33]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Run `echo "some string" | go run pipes.go`.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`echo "some string" | go run pipes.go`。
- en: 'You may also run the following commands:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以运行以下命令：
- en: '[PRE34]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'You should see the following output:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到以下输出：
- en: '[PRE35]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Working with pipes in Go is pretty simple, especially if you're familiar with
    working with files. For example, you could use the pipe recipe from [Chapter 1](2d535381-00f2-4db4-9975-d2702d58cfd8.xhtml),
    *I/O and Filesystems*, to create a **tee** application ([https://en.wikipedia.org/wiki/Tee_(command)](https://en.wikipedia.org/wiki/Tee_(command)))
    where everything piped in is immediately written to `stdout` and to a file.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go中使用管道非常简单，特别是如果您熟悉使用文件。例如，您可以使用[第1章](2d535381-00f2-4db4-9975-d2702d58cfd8.xhtml)中的管道教程，*I/O和文件系统*，创建一个**tee**应用程序（[https://en.wikipedia.org/wiki/Tee_(command)](https://en.wikipedia.org/wiki/Tee_(command)）其中所有输入的内容都立即写入到`stdout`和文件中。
- en: This recipe uses a scanner to tokenize the `io.Reader` interface of the `os.Stdin`
    file object. You can see how you must check for errors after completing all of
    the reads.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程使用扫描程序来标记`os.Stdin`文件对象的`io.Reader`接口。您可以看到在完成所有读取后必须检查错误。
- en: Catching and handling signals
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 捕获和处理信号
- en: Signals are a useful way for the user or the OS to kill your running application.
    Sometimes, it makes sense to handle these signals in a more graceful way than
    the default behavior. Go provides a mechanism to catch and handle signals. In
    this recipe, we'll explore the handling of signals through the use of a signal
    that handles the Go routine.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 信号是用户或操作系统终止正在运行的应用程序的有用方式。有时，以比默认行为更优雅的方式处理这些信号是有意义的。Go提供了一种机制来捕获和处理信号。在本教程中，我们将通过使用处理Go例程的信号来探讨信号的处理。
- en: How to do it...
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter2/signals`.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter2/signals`的新目录。
- en: Navigate to this directory.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到此目录。
- en: 'Run the following command:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE36]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE37]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter2/signals`,
    or use this as an opportunity to write some of your own code!
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter2/signals`复制测试，或者利用这个机会编写一些自己的代码！
- en: 'Create a file called `signals.go` with the following contents:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`signals.go`的文件，其中包含以下内容：
- en: '[PRE38]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Run the following commands:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE39]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Try running the code and then press *Ctrl* + *C*. You should see the following:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试运行代码，然后按*Ctrl* + *C*。您应该会看到以下内容：
- en: '[PRE40]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Try running it again. Then, from a separate Terminal, determine the PID and
    kill the application:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试再次运行它。然后，从另一个终端确定PID并终止应用程序：
- en: '[PRE41]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe makes use of channels, which are covered more extensively in Chapter
    9, *Parallelism and Concurrency*. The `signal.Notify` function requires a channel
    to send signal notifications to and also the types of signal we care about. Then,
    we set up a function in a Go routine to handle any activity on the channel we
    passed to that function. Once we receive the signal, we can handle it however
    we want. We can terminate the application, respond with a message, and have different
    behaviors for different signals. The `kill` command is a good way to test passing
    signals to the applications.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程使用了通道，这在第9章“并行和并发”中有更详细的介绍。`signal.Notify`函数需要一个通道来发送信号通知，还需要我们关心的信号类型。然后，我们在Go例程中设置一个函数来处理我们传递给该函数的通道上的任何活动。一旦我们收到信号，我们可以以任何我们想要的方式处理它。我们可以终止应用程序，回复消息，并对不同的信号有不同的行为。`kill`命令是测试向应用程序传递信号的好方法。
- en: We also use a `done` channel to block the application from terminating until
    a signal is received. Otherwise, the program would terminate immediately. This
    is unnecessary for long-running applications such as web applications. It can
    be very useful to create appropriate signal handling routines to perform cleanup,
    especially in applications with large amounts of Go routines that are holding
    a significant amount of state. A practical example of a graceful shutdown might
    be to allow current handlers to complete their HTTP requests without terminating
    them midway.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用一个 `done` 通道来阻止应用程序在接收到信号之前终止。否则，程序会立即终止。对于长时间运行的应用程序（如 Web 应用程序），这是不必要的。创建适当的信号处理例程来执行清理工作可能非常有用，特别是在具有大量
    Go 协程并持有大量状态的应用程序中。一个优雅关闭的实际例子可能是允许当前处理程序完成其 HTTP 请求而不会在中途终止它们。
- en: An ANSI coloring application
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个 ANSI 着色应用程序
- en: Coloring an ANSI terminal application is handled by a variety of code before
    and after a section of text you want colored. This recipe will explore a basic
    coloring mechanism that colors text red or plain. For a complete application,
    take a look at [https://github.com/agtorre/gocolorize](https://github.com/agtorre/gocolorize),
    which supports many more colors and text types, and also implements the `fmt.Formatter`
    interface for ease of printing.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 对 ANSI 终端应用程序进行着色是通过一系列代码来处理的，在你想要着色的文本之前和之后。本教程将探讨一种基本的着色机制，可以将文本着色为红色或普通色。要了解完整的应用程序，请查看
    [https://github.com/agtorre/gocolorize](https://github.com/agtorre/gocolorize)，它支持更多的颜色和文本类型，并且还实现了
    `fmt.Formatter` 接口以便于打印。
- en: How to do it...
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter2/ansicolor`.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为 `~/projects/go-programming-cookbook/chapter2/ansicolor`
    的新目录。
- en: Navigate to this directory.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到这个目录。
- en: 'Run the following command:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE42]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到一个名为 `go.mod` 的文件，其中包含以下内容：
- en: '[PRE43]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter2/ansicolor`,
    or use this as an opportunity to write some of your own code!
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `~/projects/go-programming-cookbook-original/chapter2/ansicolor` 复制测试，或者利用这个机会编写一些您自己的代码！
- en: 'Create a file called `color.go` with the following contents:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `color.go` 的文件，其中包含以下内容：
- en: '[PRE44]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录并导航到它。
- en: 'Create a `main.go` file with the following contents:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，其中包含以下内容：
- en: '[PRE45]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Run `go run main.go`.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You may also run the following commands:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您也可以运行以下命令：
- en: '[PRE46]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'You should see the following output with the text colored if your Terminal
    supports the ANSI coloring format:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的终端支持 ANSI 着色格式，您应该会看到以下输出的文本被着色：
- en: '[PRE47]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: This application makes use of a structure to maintain the state of the colored
    text. In this case, it stores the color of the text and the value of the text.
    The final string is rendered when you call the `String()` method, which will return
    either the colored text or plain text, depending on the values stored in the structure.
    By default, the text will be plain.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序利用一个结构来维护着色文本的状态。在这种情况下，它存储文本的颜色和值。当您调用 `String()` 方法时，最终的字符串将被渲染，根据结构中存储的值，它将返回着色文本或普通文本。默认情况下，文本将是普通的。
