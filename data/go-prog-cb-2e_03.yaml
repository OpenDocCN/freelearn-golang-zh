- en: Data Conversion and Composition
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据转换和组合
- en: 'Understanding Go''s typing system is a critical step to mastering all levels
    of Go development. This chapter will show some examples of converting between
    data types, working with very big numbers, working with currency, using different
    types of encoding and decoding, including Base64 and `gob`, and creating custom
    collections using closures. In this chapter, the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 理解Go的类型系统是掌握Go开发各个层面的关键步骤。本章将展示一些转换数据类型、处理非常大的数字、处理货币、使用不同类型的编码和解码（包括Base64和`gob`），以及使用闭包创建自定义集合的示例。在本章中，将介绍以下配方：
- en: Converting data types and interface casting
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换数据类型和接口转换
- en: Working with numeric data types using math and math/big
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用math和math/big处理数值数据类型
- en: Currency conversions and float64 considerations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 货币转换和float64考虑
- en: Using pointers and SQL NullTypes for encoding and decoding
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用指针和SQL NullTypes进行编码和解码
- en: Encoding and decoding Go data
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编码和解码Go数据
- en: Structure tags and basic reflection in Go
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Go中使用结构标签和基本反射
- en: Implementing collections using closures
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用闭包实现集合
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In order to proceed with all the recipes in this chapter, configure your environment
    according to these steps:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了继续本章中的所有配方，请根据以下步骤配置您的环境：
- en: Download and install Go 1.12.6, or later, on your operating system at [https://golang.org/doc/install](https://golang.org/doc/install).
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的操作系统上下载并安装Go 1.12.6或更高版本，网址为[https://golang.org/doc/install](https://golang.org/doc/install)。
- en: Open a Terminal/console application and create and navigate to a project directory,
    such as `~/projects/go-programming-cookbook`. All code will be run and modified
    from this directory.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端/控制台应用程序，并创建并导航到一个项目目录，例如`~/projects/go-programming-cookbook`。所有的代码都将从这个目录运行和修改。
- en: 'Clone the latest code into `~/projects/go-programming-cookbook-original`. If
    you wish, you can work from this directory rather than type the examples manually:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将最新的代码克隆到`~/projects/go-programming-cookbook-original`。如果愿意，您可以从该目录中工作，而不必手动输入示例：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Converting data types and interface casting
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转换数据类型和接口转换
- en: 'Go is typically very flexible when used to convert data from one type to another.
    A type may inherit another type, as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，Go在将数据从一种类型转换为另一种类型时非常灵活。一种类型可以继承另一种类型，如下所示：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can always cast back to the type we inherited, as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们总是可以将类型强制转换回我们继承的类型，如下所示：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: There are also convenience functions for converting between numbers using casting,
    between strings and other types using `fmt.Sprint` and `strconv`, and between
    interfaces and types using reflection. This recipe will explore some of these
    basic conversions, which will be used throughout this book.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些方便的函数，可以使用类型转换进行数字之间的转换，使用`fmt.Sprint`和`strconv`进行字符串和其他类型之间的转换，使用反射进行接口和类型之间的转换。本配方将探讨一些基本的转换，这些转换将贯穿本书使用。
- en: How to do it...
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps cover how to write and run your application:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤涵盖了如何编写和运行您的应用程序：
- en: From your Terminal/console application, create a new directory called `~/projects/go-programming-cookbook/chapter3/dataconv`.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端/控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter3/dataconv`的新目录。
- en: Navigate to this directory.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到这个目录。
- en: 'Run the following command:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You should see a file called `go.mod` that contains the following content:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter3/dataconv` or
    use this as an exercise to write some of your own code!
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter3/dataconv`复制测试，或者将其用作编写自己代码的练习！
- en: 'Create a file called `dataconv.go` with the following content:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`dataconv.go`的文件，内容如下：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create a file called `strconv.go` with the following content:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`strconv.go`的文件，内容如下：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create a file called `interfaces.go` with the following content:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`interfaces.go`的文件，内容如下：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录，并导航到该目录。
- en: 'Create a file named `main.go` with the following content:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Run `go run main.go`. You could also run the following commands:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。您也可以运行以下命令：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You should see the following output:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe demonstrates how to cast between types by wrapping them in a new
    type by using the `strconv` package and interface reflection. These methods allow
    Go developers to quickly convert between various abstract Go types. These first
    two methods will return errors during compilation, but the errors in interface
    reflection may not be found until runtime. If you reflect incorrectly to an unsupported
    type, your program will panic. Switching between types is a way to generalize,
    and is also demonstrated in this recipe.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方演示了如何通过使用`strconv`包和接口反射将类型包装在新类型中来进行类型转换。这些方法允许Go开发人员快速在各种抽象的Go类型之间进行转换。前两种方法在编译期间将返回错误，但接口反射中的错误可能直到运行时才会被发现。如果您错误地反射到一个不受支持的类型，您的程序将会崩溃。在不同类型之间切换是一种泛化的方式，本配方也进行了演示。
- en: Conversion becomes important for packages such as `math`, which operate on `float64`
    exclusively.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 转换对于诸如`math`这样专门操作`float64`的包非常重要。
- en: Working with numeric data types using math and math/big
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用math和math/big处理数值数据类型
- en: The `math` and `math/big` packages focus on exposing more complex mathematical
    operations to the Go language, such as `Pow`, `Sqrt`, and `Cos`. The `math` package
    itself operates predominately on `float64` unless a function says otherwise. The
    `math/big` package is for numbers that are too large to represent in a 64-bit
    value. This recipe will show some basic usage of the `math` package and demonstrate
    how to use `math/big` for Fibonacci sequence.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`math`和`math/big`包专注于向Go语言公开更复杂的数学运算，如`Pow`、`Sqrt`和`Cos`。`math`包本身主要操作`float64`，除非函数另有说明。`math/big`包用于无法用64位值表示的数字。这个配方将展示`math`包的一些基本用法，并演示如何使用`math/big`来进行斐波那契数列。'
- en: How to do it...
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps cover how to write and run your application:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤涵盖了如何编写和运行您的应用程序：
- en: From your Terminal/console application, create a new directory called `~/projects/go-programming-cookbook/chapter3/math`.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端/控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter3/math`的新目录。
- en: Navigate to this directory.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到这个目录。
- en: 'Run the following command:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter3/math` or
    use this as an exercise to write some of your own code!
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter3/math`复制测试，或者将其用作编写自己代码的练习！
- en: 'Create a file called `fib.go` with the following content:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`fib.go`的文件，内容如下：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a file called `math.go` with the following content:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`math.go`的文件，内容如下：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录，并导航到该目录。
- en: 'Create a file named `main.go` with the following content:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Run `go run main.go`. You could also run the following:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。您也可以运行以下命令：
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You should see the following output:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `math` package makes it possible to perform complex mathematical operations
    in Go. This recipe should be used in conjunction with this package for performing
    complex floating-point operations and converting between types as needed. It's
    worth noting that even with `float64`, there may still be rounding errors for
    certain floating-point numbers; the following recipe demonstrates some techniques
    for dealing with this.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`math`包使得在Go语言中执行复杂的数学运算成为可能。这个配方应该与这个包一起使用，用于执行复杂的浮点运算并根据需要在各种类型之间进行转换。值得注意的是，即使使用`float64`，对于某些浮点数仍可能存在舍入误差；以下配方演示了一些处理这种情况的技巧。'
- en: The `math/big` section showcases a recursive Fibonacci sequence. If you modify
    `main.go` to loop well beyond 10, you'll quickly overflow `int64` if it was used
    instead of `big.Int`. The `big.Int` package also has helper methods to convert
    between the big types to other types.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`math/big`部分展示了一个递归的斐波那契数列。如果您修改`main.go`以循环超过10次，如果使用`big.Int`而不是`int64`，您将很快溢出。`big.Int`包还有一些辅助方法，可以将大类型转换为其他类型。'
- en: Currency conversions and float64 considerations
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 货币转换和float64注意事项
- en: Working with currency is always a tricky process. It can be tempting to represent
    money as a `float64`, but this can result in some pretty tricky (and wrong) rounding
    errors when doing calculations. For this reason, it's preferable to think of money
    in terms of cents and store the figure as an `int64` instance.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 处理货币始终是一个棘手的过程。将货币表示为`float64`可能很诱人，但在进行计算时可能会导致一些非常棘手（和错误的）舍入错误。因此，最好将货币以美分的形式存储为`int64`实例。
- en: When collecting user input from forms, the command line, or other sources, money
    is usually represented in dollar form. For this reason, it's best to treat it
    as a string and convert that string directly to cents without floating-point conversions.
    This recipe will present ways to convert a string representation of currency into
    an `int64` (cents) instance and back again.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当从表单、命令行或其他来源收集用户输入时，货币通常以美元形式表示。因此，最好将其视为字符串，并直接将该字符串转换为美分，而不进行浮点转换。这个配方将介绍将货币的字符串表示转换为`int64`（美分）实例的方法，并再次转换回去。
- en: How to do it...
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps cover how to write and run your application:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤涵盖了如何编写和运行您的应用程序：
- en: From your Terminal/console application, create a new directory called `~/projects/go-programming-cookbook/chapter3/currency`.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端/控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter3/currency`的新目录。
- en: Navigate to this directory.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到这个目录。
- en: 'Run the following command:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE19]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter3/currency` or
    use this as an exercise to write some of your own code!
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter3/currency`复制测试，或者将其用作编写自己代码的练习！
- en: 'Create a file called `dollars.go` with the following content:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`dollars.go`的文件，内容如下：
- en: '[PRE20]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a file called `pennies.go` with the following content:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`pennies.go`的文件，内容如下：
- en: '[PRE21]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录，并导航到该目录。
- en: 'Create a file called `main.go` with the following content:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE22]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Run `go run main.go`. You could also run the following:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。您也可以运行以下命令：
- en: '[PRE23]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You should see the following output:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE24]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe makes use of the `strconv` and `strings` packages to convert currency
    between dollars in string format and pennies in `int64`. It does this without
    converting to a `float64` type, which can result in rounding error, and only does
    so for validation.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方利用`strconv`和`strings`包将货币在字符串格式的美元和`int64`的便士之间进行转换。它可以在不转换为`float64`类型的情况下进行，这可能会导致舍入误差，并且仅在验证时才这样做。
- en: The `strconv.ParseInt` and `strconv.FormatInt` functions are very useful for
    converting to and from `int64` and strings. We also made use of the fact that
    Go strings can easily be appended and sliced as needed.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`strconv.ParseInt`和`strconv.FormatInt`函数非常有用，用于将`int64`和字符串相互转换。我们还利用了Go字符串可以根据需要轻松添加和切片的特点。'
- en: Using pointers and SQL NullTypes for encoding and decoding
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用指针和SQL NullTypes进行编码和解码
- en: When you encode or decode into an object in Go, types that are not explicitly
    set will be set to their default values. Strings will default to empty string
    (`""`) and integers will default to `0`, as an example. Normally, this is fine,
    unless `0` means something for your API or service that is consuming the user
    input or returning it.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go中对对象进行编码或解码时，未明确设置的类型将被设置为它们的默认值。例如，字符串将默认为空字符串（`""`），整数将默认为`0`。通常情况下，这是可以的，除非`0`对于您的API或服务来说有特殊含义。
- en: In addition, if you use `struct` tags such as `json omitempty`, the `0` value
    will be ignored even if they're valid. Another example of this is `Null`, which
    returns from SQL. What value best represents `Null` for an `Int`? This recipe
    will explore some of the ways Go developers deal with this issue.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果您使用`struct`标签，比如`json omitempty`，即使它们是有效的，`0`值也会被忽略。另一个例子是从SQL返回的`Null`。什么值最能代表`Int`的`Null`？这个示例将探讨Go开发人员处理这个问题的一些方法。
- en: How to do it...
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps cover how to write and run your application:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤涵盖了如何编写和运行您的应用程序：
- en: From your Terminal/console application, create a new directory called `~/projects/go-programming-cookbook/chapter3/nulls`.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端/控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter3/nulls`的新目录。
- en: Navigate to this directory.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入这个目录。
- en: 'Run the following command:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE25]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE26]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter3/nulls` or
    use this as an exercise to write some of your own code!
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter3/nulls`复制测试，或者使用这个练习来编写一些您自己的代码！
- en: 'Create a file called `base.go` with the following content:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`base.go`的文件，内容如下：
- en: '[PRE27]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create a file called `pointer.go` with the following content:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`pointer.go`的文件，内容如下：
- en: '[PRE28]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Create a file called `nullencoding.go` with the following content:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`nullencoding.go`的文件，内容如下：
- en: '[PRE29]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录，并进入该目录。
- en: 'Create a file called `main.go` with the following content:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE30]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Run `go run main.go`. You could also run the following:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。您也可以运行以下命令：
- en: '[PRE31]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You should see the following output:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE32]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Switching from a value to a pointer is a quick way to express null values when
    marshaling and unmarshaling. Setting these values can be a bit tricky, as you
    can't assign them directly to a pointer, `-- *a := 1`, but, otherwise, it's a
    flexible way of dealing with it.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 从值切换到指针是在编组和解组时表达空值的一种快速方式。设置这些值可能有点棘手，因为您不能直接将它们分配给指针，`-- *a := 1`，但是，这是一种灵活的处理方法。
- en: This recipe also demonstrated an alternative method using the `sql.NullInt64`
    type. This is normally used with SQL and `valid` is set if anything other than
    `Null` is returned; otherwise, it sets `Null`. We added a `MarshalJSON` method
    and an `UnmarshallJSON` method to allow this type to interact with the `JSON`
    package and we chose to use a pointer so that `omitempty` would continue to work
    as expected.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例还演示了使用`sql.NullInt64`类型的替代方法。这通常用于SQL，如果返回的不是`Null`，则`valid`会被设置；否则，它会设置`Null`。我们添加了一个`MarshalJSON`方法和一个`UnmarshallJSON`方法，以允许这种类型与`JSON`包进行交互，并且我们选择使用指针，以便`omitempty`可以继续按预期工作。
- en: Encoding and decoding Go data
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编码和解码Go数据
- en: Go features a number of alternative encoding types other than JSON, TOML, and
    YAML. These are largely meant for transporting data between Go processes with
    things such as wire protocols and RPC, or in cases where some character formats
    are restricted.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Go提供了许多除了JSON、TOML和YAML之外的替代编码类型。这些主要用于在Go进程之间传输数据，比如使用线协议和RPC，或者在某些字符格式受限的情况下。
- en: This recipe will explore how to encode and decode the `gob` format and `base64`.
    The later chapters will explore protocols such as GRPC.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例将探讨如何编码和解码`gob`格式和`base64`。后面的章节将探讨诸如GRPC之类的协议。
- en: How to do it...
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps cover how to write and run your application:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤涵盖了如何编写和运行您的应用程序：
- en: From your Terminal/console application, create a new directory called `~/projects/go-programming-cookbook/chapter3/encoding`.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端/控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter3/encoding`的新目录。
- en: Navigate to this directory.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入这个目录。
- en: 'Run the following command:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE33]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE34]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter3/encoding` or
    use this as an exercise to write some of your own code!
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter3/encoding`复制测试，或者使用这个练习来编写一些您自己的代码！
- en: 'Create a file called `gob.go` with the following content:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`gob.go`的文件，内容如下：
- en: '[PRE35]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Create a file called `base64.go` with the following content:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`base64.go`的文件，内容如下：
- en: '[PRE36]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录，并进入该目录。
- en: 'Create a file called `main.go` with the following content:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE37]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Run `go run main.go`. You could also run the following:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。您也可以运行以下命令：
- en: '[PRE38]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'You should see the following output:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE39]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Gob encoding is a streaming format built with Go data types in mind. It is most
    efficient when sending and encoding many consecutive items. For a single item,
    other encoding formats, such as JSON, are potentially more efficient and portable.
    Despite this, `gob` encoding makes it simple to marshal large, complex structures
    and reconstruct them in a separate process. Although it wasn't shown here, `gob`
    can also operate on custom types or unexported types with custom `MarshalBinary`
    and `UnmarshalBinary` methods.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Gob编码是一种以Go数据类型为基础构建的流格式。当发送和编码许多连续的项目时，它是最有效的。对于单个项目，其他编码格式，如JSON，可能更有效和更便携。尽管如此，`gob`编码使得将大型、复杂的结构编组并在另一个进程中重建它们变得简单。尽管这里没有展示，`gob`也可以在自定义类型或具有自定义`MarshalBinary`和`UnmarshalBinary`方法的非导出类型上操作。
- en: Base64 encoding is useful for communicating via URLs in `GET` requests or for
    generating a string representation encoding of binary data. Most languages can
    support this format and unmarshal the data on the other end. As a result, it's
    common to encode things such as JSON payloads in cases where the JSON format is
    not supported.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Base64编码对于通过URL在`GET`请求中进行通信或生成二进制数据的字符串表示编码非常有用。大多数语言都可以支持这种格式，并在另一端解组数据。因此，在不支持JSON格式的情况下，通常会对诸如JSON有效负载之类的东西进行编码。
- en: Structure tags and basic reflection in Go
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go中的结构标签和基本反射
- en: 'Reflection is a complicated topic that can''t really be covered in a single
    recipe; however, a practical application of reflection is dealing with structure
    tags. At their core, `struct` tags are just key–value strings: you look up the
    key, then deal with the value. As you can imagine, for something like JSON marshaling
    and unmarshaling, there''s a lot of complexity for dealing with these values.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 反射是一个复杂的主题，无法在一篇文章中完全涵盖；然而，反射的一个实际应用是处理结构标签。在本质上，`struct`标签只是键-值字符串：你查找键，然后处理值。正如你所想象的那样，对于诸如JSON编组和解组这样的事情，处理这些值有很多复杂性。
- en: The `reflect` package is designed for interrogating and understanding interface
    objects. It has helper methods to look at the different kinds of structures, values,
    `struct` tags, and more. If you need something beyond the basic interface conversion,
    such as the one at the beginning of this chapter, this is the package you should
    look at.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`reflect`包旨在审查和理解接口对象。它有助手方法来查看不同种类的结构、值、`struct`标签等。如果你需要超出基本接口转换的东西，比如本章开头的内容，这就是你应该查看的包。'
- en: How to do it...
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps cover how to write and run your application:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤涵盖了如何编写和运行你的应用程序：
- en: From your Terminal/console application, create a new directory called `~/projects/go-programming-cookbook/chapter3/tags`.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter3/tags`的新目录。
- en: Navigate to this directory.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入这个目录。
- en: 'Run the following command:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE40]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE41]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter3/tags` or
    use this as an exercise to write some of your own code!
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter3/tags`复制测试，或者利用这个机会编写一些你自己的代码！
- en: 'Create a file called `serialize.go` with the following content:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`serialize.go`的文件，内容如下：
- en: '[PRE42]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Create a file called `deserialize.go` with the following content:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`deserialize.go`的文件，内容如下：
- en: '[PRE43]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Create a file called `tags.go` with the following content:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`tags.go`的文件，内容如下：
- en: '[PRE44]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录并进入。
- en: 'Create a file called `main.go` with the following content:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE45]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Run `go run main.go`. You could also run the following:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。你也可以运行以下命令：
- en: '[PRE46]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'You should see the following output:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE47]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'This recipe makes a string serialization format that takes a `struct` value
    and serializes all the string fields into a parseable format. This recipe doesn''t
    deal with certain edge cases; in particular, strings must not contain a colon
    (`:`) or semicolon `;` characters. Here is a summary of its behavior:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例创建了一个字符串序列化格式，它接受一个`struct`值并将所有字符串字段序列化为可解析的格式。这个示例不处理某些边缘情况；特别是，字符串不能包含冒号（`:`）或分号（`;`）字符。以下是它的行为摘要：
- en: If a field is a string, it will be serialized/deserialized.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个字段是字符串，它将被序列化/反序列化。
- en: If a field is not a string, it will be ignored.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个字段不是字符串，它将被忽略。
- en: If the `struct` tag of the field contains the serialize "key", then the key
    will be the returned serialized/deserialized environment.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果字段的`struct`标签包含序列化的“键”，那么该键将成为返回的序列化/反序列化环境。
- en: Duplicates are not handled.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不处理重复。
- en: If a `struct` tag is not specified, the field name is used instead.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果未指定`struct`标签，则使用字段名。
- en: If the `struct` tag value is a hyphen (`-`), the field is ignored, even if it's
    a string.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`struct`标签的值是连字符（`-`），则该字段将被忽略，即使它是一个字符串。
- en: Some other things to note are that reflection does not entirely work with nonexported
    values.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些需要注意的是，反射不能完全处理非导出值。
- en: Implementing collections via closures
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过闭包实现集合
- en: If you've been working with functional or dynamic programming languages, you
    may feel that `for` loops and `if` statements produce verbose code. Using functional
    constructs such as `map` and `filter` for processing lists can be useful and make
    code appear more readable; however, in Go, these types are not in the standard
    library, and can be difficult to generalize without generics or very complex reflection
    and the use of empty interfaces. This recipe will provide you with some basic
    examples of implementing collections using Go closures.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您一直在使用函数式或动态编程语言，您可能会觉得`for`循环和`if`语句会产生冗长的代码。对列表进行处理时使用`map`和`filter`等函数构造可能很有用，并且可以使代码看起来更可读；但是，在Go中，这些类型不在标准库中，并且在没有泛型或非常复杂的反射和使用空接口的情况下很难泛化。这个配方将为您提供使用Go闭包实现集合的一些基本示例。
- en: How to do it...
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps cover how to write and run your application:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤涵盖了如何编写和运行您的应用程序：
- en: From your Terminal/console application, create a new directory called `~/projects/go-programming-cookbook/chapter3/collections`.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端/控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter3/collections`的新目录。
- en: Navigate to this directory.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到此目录。
- en: 'Run the following command:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE48]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE49]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter3/collections`,
    or use this as an exercise to write some of your own code!
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter3/collections`复制测试，或者将其用作编写自己代码的练习！
- en: 'Create a file called `collections.go` with the following content:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`collections.go`的文件，其中包含以下内容：
- en: '[PRE50]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Create a file called `functions.go` with the following content:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`functions.go`的文件，其中包含以下内容：
- en: '[PRE51]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录，并转到该目录。
- en: 'Create a file called `main.go` with the following content:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，其中包含以下内容：
- en: '[PRE52]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Run `go run main.go`. You could also run the following:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。您也可以运行以下命令：
- en: '[PRE53]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'You should see the following output:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE54]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一个目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Closures in Go are very powerful. Although our `collections` functions are
    not generic, they''re relatively small and can be easily applied to our `WorkWith` structure
    with minimal added code using a variety of functions. You may notice from looking
    at this that we''re not returning errors anywhere. The idea of these functions
    is that they''re pure: there are no side effects to the original list, except
    that we choose to write over it after each call.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: Go中的闭包非常强大。虽然我们的`collections`函数不是通用的，但它们相对较小，可以很容易地应用于我们的`WorkWith`结构，而只需使用各种函数添加最少的代码。您可能会注意到，我们没有在任何地方返回错误。这些函数的理念是它们是纯粹的：原始列表没有副作用，除了我们选择在每次调用后覆盖它。
- en: If you need to apply layers of modification to a list or structure of lists,
    then this pattern can save you a lot of confusion and make testing very straightforward.
    It is also possible to chain maps and filters together for a very expressive coding
    style.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要对列表或列表结构应用修改层，则此模式可以帮助您避免许多混乱，并使测试变得非常简单。还可以将映射和过滤器链接在一起，以实现非常表达的编码风格。
