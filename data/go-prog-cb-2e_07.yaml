- en: Web Clients and APIs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web客户端和API
- en: Working with APIs and writing web clients can be a tricky business. Different
    APIs have different types of authorization, authentication, and protocol. We'll
    explore the `http.Client` structure object, work with OAuth2 clients and long-term
    token storage, and finish off with GRPC and an additional REST interface.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用API并编写Web客户端可能是一件棘手的事情。不同的API具有不同类型的授权、认证和协议。我们将探索`http.Client`结构对象，使用OAuth2客户端和长期令牌存储，并最后使用GRPC和额外的REST接口。
- en: By the end of this chapter, you should have an idea of how to interface with
    third-party or in-house APIs and have some patterns for common operations, such
    as async requests to APIs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您应该知道如何与第三方或内部API进行交互，并且对于常见操作（如对API的异步请求）有一些模式。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下的步骤：
- en: Initializing, storing, and passing http.Client structures
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始化、存储和传递http.Client结构
- en: Writing a client for a REST API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为REST API编写客户端
- en: Executing parallel and async client requests
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行并行和异步客户端请求
- en: Making use of OAuth2 clients
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用OAuth2客户端
- en: Implementing an OAuth2 token storage interface
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现OAuth2令牌存储接口
- en: Wrapping a client in added functionality and function composition
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在添加功能和函数组合中包装客户端
- en: Understanding GRPC clients
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解GRPC客户端
- en: Using twitchtv/twirp for RPC
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用twitchtv/twirp进行RPC
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In order to proceed with all the recipes in this chapter, configure your environment
    according to these steps:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了继续本章中的所有示例，根据以下步骤配置您的环境：
- en: Download and install Go 1.12.6 or higher on your operating system at [https://golang.org/doc/install](https://golang.org/doc/install).
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的操作系统上下载并安装Go 1.12.6或更高版本，网址为[https://golang.org/doc/install](https://golang.org/doc/install)。
- en: Open a Terminal or console application, create a project directory such as `~/projects/go-programming-cookbook`, and
    navigate to this directory. All code will be run and modified from this directory.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端或控制台应用程序，创建一个项目目录，例如`~/projects/go-programming-cookbook`，并导航到该目录。所有的代码都将在这个目录中运行和修改。
- en: 'Clone the latest code into `~/projects/go-programming-cookbook-original` and
    optionally work from that directory rather than typing the examples manually,
    as follows:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将最新的代码克隆到`~/projects/go-programming-cookbook-original`，并选择从该目录工作，而不是手动输入示例，如下所示：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Initializing, storing, and passing http.Client structures
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化、存储和传递http.Client结构
- en: The Go `net/http` package exposes a flexible `http.Client` structure for working
    with HTTP APIs. This structure has separate transport functionality and makes
    it relatively simple to short-circuit requests, modify headers for each client
    operation, and handle any REST operations. Creating clients is a very common operation,
    and this recipe will start with the basics of working and creating an `http.Client`
    object.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Go的`net/http`包为处理HTTP API公开了一个灵活的`http.Client`结构。这个结构具有单独的传输功能，使得对请求进行短路、修改每个客户端操作的标头以及处理任何REST操作相对简单。创建客户端是一个非常常见的操作，这个示例将从工作和创建一个`http.Client`对象的基础知识开始。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running of your application:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序的步骤：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter7/client`,
    and navigate to this directory.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter7/client`的新目录，并导航到该目录。
- en: 'Run the following command:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should see a file called `go.mod` containing the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter7/client`,
    or use this as an exercise to write some code of your own!
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter7/client`复制测试，或者自己编写一些代码来练习！
- en: 'Create a file called `client.go` with the following content:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`client.go`的文件，内容如下：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a file called `exec.go` with the following content:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`exec.go`的文件，内容如下：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a file called `store.go` with the following content:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`store.go`的文件，内容如下：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Create a new directory called `example` and navigate to it.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录并导航到该目录。
- en: 'Create a file named `main.go` with the following content:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Run `go run main.go`.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You may also run the following command:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您也可以运行以下命令：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You should now see the following output:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该看到以下输出：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `net/http` package exposes a `DefaultClient` package variable, which is
    used by the following internal operations: `Do`, `GET`, `POST`, and so on. Our
    `Setup()` function returns a client and sets the default client to be the same
    client. When setting up a client, most of your modifications will take place in
    the transport, which only needs to implement the `RoundTripper` interface.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`net/http`包公开了一个`DefaultClient`包变量，该变量被以下内部操作使用：`Do`、`GET`、`POST`等。我们的`Setup()`函数返回一个客户端，并将默认客户端设置为相同的客户端。在设置客户端时，大部分修改将发生在传输中，传输只需要实现`RoundTripper`接口。'
- en: This recipe gives an example of a no-op round tripper that always returns a
    418 status code. You can imagine how this might be useful for testing. It also
    demonstrates passing in clients as function arguments, using them as structure
    parameters, and using the default client to process requests.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例提供了一个总是返回418状态码的无操作往返器的示例。您可以想象这对于测试可能有多么有用。它还演示了将客户端作为函数参数传递，将它们用作结构参数，并使用默认客户端来处理请求。
- en: Writing a client for a REST API
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为REST API编写客户端
- en: Writing a client for a REST API will not only help you better understand the
    API in question, it will also give you a useful tool for all future applications
    using that API. This recipe will explore structuring a client and show some strategies
    that you can immediately take advantage of.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为REST API编写客户端不仅有助于更好地理解相关的API，还将为所有将来使用该API的应用程序提供一个有用的工具。这个配方将探讨构建客户端的结构，并展示一些您可以立即利用的策略。
- en: For this client, we'll assume that the authentication is handled by the basic
    auth, but it should also be possible to hit an endpoint to retrieve a token, and
    so on. For the sake of simplicity, we'll assume that our API exposes one endpoint,
    `GetGoogle()`, which returns that status code returned from doing a `GET` request
    to [https://www.google.com](https://www.google.com).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个客户端，我们将假设认证是由基本认证处理的，但也应该可以命中一个端点来检索令牌等。为了简单起见，我们假设我们的API公开了一个端点`GetGoogle()`，它返回从[https://www.google.com](https://www.google.com)进行`GET`请求返回的状态码。
- en: How to do it...
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running of your application:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序的过程：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter7/rest`,
    and navigate to this directory.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter7/rest`的新目录，并导航到该目录。
- en: 'Run the following command:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You should see a file called `go.mod` containing the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter7/rest`,
    or use this as an exercise to write some code of your own!
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter7/rest`复制测试，或者利用这个机会编写一些自己的代码！
- en: 'Create a file called `client.go` with the following content:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`client.go`的文件，内容如下：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create a file called `transport.go` with the following content:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`transport.go`的文件，内容如下：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create a file called `exec.go` with the following content:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`exec.go`的文件，内容如下：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Create a new directory called `example` and navigate to it.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录并导航到该目录。
- en: 'Create a file named `main.go` with the following content:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Run `go run main.go`.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You may also run the following command:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以运行以下命令：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You should now see the following output:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该看到以下输出：
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'This code demonstrates how to hide logic such as authentication, and performing
    a token refresh using the `Transport` interface. It also demonstrates how to expose
    an API call via a method. Had we been implementing against something such as a
    user API, we would expect methods such as the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码演示了如何隐藏诸如认证和使用`Transport`接口执行令牌刷新等逻辑。它还演示了如何通过方法公开API调用。如果我们正在针对诸如用户API之类的东西进行实现，我们期望有以下方法：
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If you've read Chapter 5, *All ab**out Databases and Storage*, this may look
    similar to the recipe entitled *Executing a database transaction interface*. This
    composition through interfaces, especially common interfaces such as the `RoundTripper`
    interface, provides a lot of flexibility for writing APIs. In addition, it may
    be useful to write a top-level interface as we did earlier and pass the interface
    around instead of to the client directly. We'll explore this in more detail in
    the next recipe as we explore writing an OAuth2 client.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您阅读了第5章*关于数据库和存储的所有内容*，这可能看起来与名为*执行数据库事务接口*的配方相似。通过接口进行组合，特别是像`RoundTripper`接口这样的常见接口，为编写API提供了很大的灵活性。此外，编写一个顶层接口并传递接口而不是直接传递给客户端可能是有用的。在下一个配方中，我们将更详细地探讨这一点，因为我们将探讨编写OAuth2客户端。
- en: Executing parallel and async client requests
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行并行和异步客户端请求
- en: Performing client requests in parallel is relatively simple in Go. In the following
    recipe, we'll use a client to retrieve multiple URLs using Go buffered channels.
    Responses and errors will both go to a separate channel that is readily accessible
    by anyone with access to the client.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go中并行执行客户端请求相对简单。在下一个配方中，我们将使用客户端使用Go缓冲通道检索多个URL。响应和错误都将发送到一个单独的通道，任何有权访问客户端的人都可以立即访问。
- en: In the case of this recipe, creating the client, reading the channels, and handling
    responses and errors will all be done in the `main.go` file.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方的情况下，创建客户端，读取通道，处理响应和错误都将在`main.go`文件中完成。
- en: How to do it...
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running of your application:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序的过程：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter7/async`,
    and navigate to this directory.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter7/async`的新目录，并导航到该目录。
- en: 'Run the following command:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You should see a file called `go.mod` containing the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE19]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter7/async`,
    or use this as an exercise to write some code of your own!
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter7/async`复制测试，或者利用这个机会编写一些自己的代码！
- en: 'Create a file called `config.go` with the following content:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`config.go`的文件，内容如下：
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a file called `exec.go` with the following content:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`exec.go`的文件，内容如下：
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Create a new directory called `example` and navigate to it.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录并导航到该目录。
- en: 'Create a file named `main.go` with the following content:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Run `go run main.go`.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You may also run the following command:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以运行以下命令：
- en: '[PRE23]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You should now see the following output:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该看到以下输出：
- en: '[PRE24]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe creates a framework for processing requests in a fan-out `async`
    way using a single client. It will attempt to retrieve as many URLs as you specify
    as quickly as it can. In many cases, you'll want to restrict this further with
    something such as a worker pool. It may also make sense to handle these `async`
    Go routines outside the client and for specific storage or retrieval interfaces.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方创建了一个处理请求的框架，以一种`async`方式使用单个客户端。它将尝试尽快检索您指定的尽可能多的URL。在许多情况下，您可能希望进一步限制这一点，例如使用工作池。在客户端之外处理这些`async`
    Go例程并为特定的存储或检索接口处理这些也是有意义的。
- en: This recipe also explores using a case statement to switch on multiple channels.
    Because the fetches are being executed asynchronously, there must be some mechanism
    to wait for them to complete. In this case, the program will only terminate when
    the main function has read the same number of responses and errors as there were
    URLs in the original list. In cases such as this, it's also important to consider
    whether your application should time-out or whether there is some other way to
    cancel its operation early.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方还探讨了使用case语句在多个通道上进行切换。由于获取是异步执行的，必须有一些机制等待它们完成。在这种情况下，只有当主函数读取与原始列表中的URL数量相同的响应和错误时，程序才会终止。在这种情况下，还需要考虑应用程序是否应该超时，或者是否有其他方法可以提前取消其操作。
- en: Making use of OAuth2 clients
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用OAuth2客户端
- en: OAuth2 is a relatively common protocol for speaking with APIs. The `golang.org/x/oauth2`
    package provides a pretty flexible client for working with OAuth2\. It has subpackages
    that specify endpoints for various providers such as Facebook, Google, and GitHub.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth2是一种与API通信的相对常见的协议。`golang.org/x/oauth2`包提供了一个非常灵活的客户端，用于处理OAuth2。它有子包指定各种提供程序的端点，如Facebook、Google和GitHub。
- en: This recipe will demonstrate how to create a new GitHub OAuth2 client and some
    of its basic usages.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方将演示如何创建一个新的GitHub OAuth2客户端以及一些基本用法。
- en: Getting ready
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'After completing the initial setup steps mentioned in the *Technical requirements*
    section at the beginning of this chapter, proceed with the following steps:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章开头“技术要求”部分提到的初始设置步骤后，继续以下步骤：
- en: Configure an OAuth Client at [https://github.com/settings/applications/new](https://github.com/settings/applications/new).
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[https://github.com/settings/applications/new](https://github.com/settings/applications/new)上配置OAuth客户端。
- en: 'Set the environment variables with your client ID and secret:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的客户端ID和密钥设置环境变量：
- en: '`export GITHUB_CLIENT="your_client"`'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`export GITHUB_CLIENT="your_client"`'
- en: '`export GITHUB_SECRET="your_secret"`'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`export GITHUB_SECRET="your_secret"`'
- en: Brush up on the GitHub API documentation at [https://developer.github.com/v3/](https://developer.github.com/v3/).
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[https://developer.github.com/v3/](https://developer.github.com/v3/)上查看GitHub
    API文档。
- en: How to do it...
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running of your application:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter7/oauthcli`,
    and navigate to this directory.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter7/oauthcli`的新目录，并导航到该目录。
- en: 'Run the following command:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE25]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You should see a file called `go.mod` containing the following:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE26]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter7/oauthcli`,
    or use this as an exercise to write some code of your own!
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter7/oauthcli`复制测试，或者将其作为练习编写自己的代码！
- en: 'Create a file called `config.go` with the following content:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`config.go`的文件，内容如下：
- en: '[PRE27]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create a file called `exec.go` with the following content:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`exec.go`的文件，内容如下：
- en: '[PRE28]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Create a new directory called `example` and navigate to it.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录，并导航到该目录。
- en: 'Create a `main.go` file with the following content:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`main.go`文件，内容如下：
- en: '[PRE29]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Run `go run main.go`.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You may also run the following command:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以运行以下命令：
- en: '[PRE30]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You should now see the following output:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应该看到以下输出：
- en: '[PRE31]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The `go.mod` file may be updated and `go.sum` file should now be present in
    the top-level recipe directory.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件可能会更新，顶级配方目录中现在应该存在`go.sum`文件。'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The standard OAuth2 flow is redirect-based and ends with the server redirecting
    to an endpoint you specify. Your server is then responsible for grabbing the code
    and exchanging it for a token. This recipe bypasses that requirement by allowing
    us to use a URL such as `https://localhost` or `https://a-domain-you-own`, manually
    copying/pasting the code, and then hitting *Enter*. Once the token has been exchanged,
    the client will intelligently refresh the token as required.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的OAuth2流程是基于重定向的，并以服务器重定向到您指定的端点结束。然后您的服务器负责抓取代码并将其交换为令牌。本配方通过允许我们使用诸如`https://localhost`或`https://a-domain-you-own`之类的URL绕过了这一要求，手动复制/粘贴代码，然后按*Enter*。令牌交换后，客户端将根据需要智能地刷新令牌。
- en: It's important to note that we're not storing the token in any way. If the program
    crashes, it must re-exchange for the token. It's also important to note that we
    need to retrieve the token explicitly only once unless the refresh token expires,
    is lost, or is corrupted. Once the client is configured, it should be able to
    perform all typical HTTP operations for the API as long as the appropriate scopes
    were requested during the OAuth2 flow. This recipe requests the `"repo"` and `"user"`
    scopes, but more or less can be added as needed.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，我们没有以任何方式存储令牌。如果程序崩溃，必须重新交换令牌。还需要注意的是，除非刷新令牌过期、丢失或损坏，否则只需要显式检索一次令牌。一旦客户端配置完成，只要在OAuth2流程期间请求了适当的范围，它就应该能够执行所有典型的HTTP操作。本配方请求了`"repo"`和`"user"`范围，但可以根据需要添加更多或更少。
- en: Implementing an OAuth2 token storage interface
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现OAuth2令牌存储接口
- en: In the previous recipe, we retrieved a token for our client and performed API
    requests. The downside of this approach is that we have no long-term storage for
    our token. In an HTTP server, for example, we'd like to have consistent storage
    of the token between requests.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个配方中，我们为客户端检索了一个令牌并执行了API请求。这种方法的缺点是我们没有长期存储令牌。例如，在HTTP服务器中，我们希望在请求之间对令牌进行一致的存储。
- en: This recipe will explore modifying the OAuth2 client to store a token between
    requests and retrieve it as required using a key. For the sake of simplicity,
    this key will be a file, but it could also be a database, Redis, and so on.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方将探讨修改OAuth2客户端以在请求之间存储令牌，并使用密钥根据需要检索它。为了简单起见，这个密钥将是一个文件，但也可以是数据库、Redis等。
- en: Getting ready
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Refer to the *Getting ready* section in the *Making use of OAuth2 clients* recipe.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 参考*准备工作*部分中*利用OAuth2客户端*配方。
- en: How to do it...
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running of your application:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter7/oauthstore`,
    and navigate to this directory.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter7/oauthstore`的新目录，并切换到该目录。
- en: 'Run the following command:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE32]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'You should see a file called `go.mod` containing the following:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE33]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter7/oauthstore`,
    or use this as an exercise to write some code of your own!
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter7/oauthstore`复制测试，或者利用这个机会编写一些自己的代码！
- en: 'Create a file called `config.go` with the following content:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`config.go`的文件，内容如下：
- en: '[PRE34]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create a file called `tokensource.go` with the following content:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`tokensource.go`的文件，内容如下：
- en: '[PRE35]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Create a file called `storage.go` with the following content:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`storage.go`的文件，内容如下：
- en: '[PRE36]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Create a file called `filestorage.go` with the following content:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`filestorage.go`的文件，内容如下：
- en: '[PRE37]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Create a new directory called `example` and navigate to it.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录并切换到该目录。
- en: 'Create a file named `main.go` with the following content:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE38]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Run `go run main.go`.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You may also run the following command:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您也可以运行以下命令：
- en: '[PRE39]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'You should now see the following output:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该看到以下输出：
- en: '[PRE40]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The `go.mod` file may be updated and `go.sum` file should now be present in
    the top-level recipe directory.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件可能已更新，顶级配方目录中现在应该存在`go.sum`文件。'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe takes care of storing and retrieving the contents of a token to/from
    a file. If it's a first run, it must execute the entire code exchange, but subsequent
    runs will reuse the access token, and, if one is available, it will refresh using
    the refresh token.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方负责将令牌的内容存储和检索到文件中。如果是第一次运行，它必须执行整个代码交换，但后续运行将重用访问令牌，并且如果有一个可用，它将使用刷新令牌进行刷新。
- en: 'There is currently no way in this code to differentiate between users/tokens,
    but that could be accomplished with cookies as a key for a filename or a row in
    the database as well. Let''s walk through what this code does:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 目前在这段代码中没有办法区分用户/令牌，但可以通过cookie作为文件名的密钥或数据库中的一行来实现。让我们来看看这段代码的功能：
- en: The `config.go` file wraps the standard OAuth2 config. For every method that
    involves retrieving a token, we first check whether we have a valid token in local
    storage. If not, we retrieve one using the standard config and then store it.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.go`文件包装了标准的OAuth2配置。对于涉及检索令牌的每个方法，我们首先检查本地存储中是否有有效的令牌。如果没有，我们使用标准配置检索一个，然后存储它。'
- en: The `tokensource.go` file implements our custom `TokenSource` interface, which
    pairs with `Config`. Similar to `Config`, we always first try to retrieve our
    token from a file; failing this, we set it with the new token.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tokensource.go`文件实现了我们自定义的`TokenSource`接口，与`Config`配对。与`Config`类似，我们总是首先尝试从文件中检索我们的令牌；如果失败，我们将使用新令牌设置它。'
- en: The `storage.go` file is the `storage` interface used by `Config` and `TokenSource`.
    It only defines two methods and we also include a helper function to bootstrap
    the OAuth2 code-based flow similar to what we did in the previous recipe, but
    if a file with a valid token already exists, it will be used instead.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`storage.go`文件是`Config`和`TokenSource`使用的`storage`接口。它只定义了两种方法，我们还包括了一个辅助函数来启动OAuth2基于代码的流程，类似于我们在上一个配方中所做的，但如果已经存在一个有效令牌的文件，它将被使用。'
- en: The `filestorage.go` file implements the `storage` interface. When we store
    a new token, we first truncate the file and write a JSON representation of the
    `token` struct. Otherwise, we decode the file and return `token`.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filestorage.go`文件实现了`storage`接口。当我们存储一个新令牌时，我们首先截断文件并写入`token`结构的JSON表示。否则，我们解码文件并返回`token`。'
- en: Wrapping a client in added functionality and function composition
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在客户端中添加功能和函数组合
- en: In 2015, Tomás Senart gave an excellent talk on wrapping an `http.Client` structure
    with an interface, allowing you to take advantage of middleware and function composition.
    You can find out more on this at [https://github.com/gophercon/2015-talks](https://github.com/gophercon/2015-talks).
    This recipe borrows from his ideas and demonstrates an example of performing the
    same action on the `Transport` interface of the `http.Client` structure, in a
    similar way to our earlier recipe, *Writing a client for a REST API.*
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 2015年，Tomás Senart就如何使用接口包装`http.Client`结构并利用中间件和函数组合进行了出色的演讲。您可以在[https://github.com/gophercon/2015-talks](https://github.com/gophercon/2015-talks)找到更多信息。这个配方借鉴了他的想法，并演示了在`http.Client`结构的`Transport`接口上执行相同操作的示例，类似于我们之前的配方*为REST
    API编写客户端*。
- en: The following recipe will implement logging and basic auth middleware for a
    standard `http.Client` structure. It also includes a `decorate` function that
    can be used when required with a large variety of middleware.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 以下教程将为标准的`http.Client`结构实现日志记录和基本auth中间件。它还包括一个`decorate`函数，可以在需要时与各种中间件一起使用。
- en: How to do it...
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running of your application:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序的过程：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter7/decorator`,
    and navigate to this directory.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter7/decorator`的新目录，并进入此目录。
- en: 'Run the following command:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE41]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'You should see a file called `go.mod` containing the following:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE42]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter7/decorator`,
    or use this as an exercise to write some code of your own!
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter7/decorator`复制测试，或者利用这个机会编写一些自己的代码！
- en: 'Create a file called `config.go` with the following content:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`config.go`的文件，内容如下：
- en: '[PRE43]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Create a file called `decorator.go` with the following content:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`decorator.go`的文件，内容如下：
- en: '[PRE44]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Create a file called `middleware.go` with the following content:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`middleware.go`的文件，内容如下：
- en: '[PRE45]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Create a file called `exec.go` with the following content:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`exec.go`的文件，内容如下：
- en: '[PRE46]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Create a new directory called `example` and navigate to it.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录，并进入。
- en: 'Create a `main.go` file with the following content:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE47]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Run `go run main.go`.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You may also run the following command:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您也可以运行以下命令：
- en: '[PRE48]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'You should now see the following output:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该看到以下输出：
- en: '[PRE49]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回到上一级目录并运行`go test`。确保所有测试都通过了。
- en: How it works...
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: This recipe takes advantage of closures as first-class citizens and interfaces.
    The main trick in achieving this is having a function implement an interface.
    This allows us to wrap an interface implemented by a structure with an interface
    implemented by a function.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程利用了闭包作为一等公民和接口。实现这一点的主要技巧是让一个函数实现一个接口。这使我们能够用一个函数实现的接口来包装一个结构体实现的接口。
- en: The `middleware.go` file contains two example client middleware functions. These
    could be extended to contain additional middleware, such as a more sophisticated
    auth, and metrics. This recipe can also be combined with the previous recipe to
    produce an OAuth2 client that can be extended by additional middleware.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`middleware.go`文件包含两个示例客户端中间件函数。这些可以扩展为包含其他中间件，比如更复杂的auth和metrics。这个教程也可以与前一个教程结合起来，生成一个可以通过其他中间件扩展的OAuth2客户端。'
- en: 'The `Decorator` function is a convenience function that allows the following:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`Decorator`函数是一个方便的函数，允许以下操作：'
- en: '[PRE50]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The advantage of this approach compared to wrapping the client is that we can
    keep the interface sparse. If you want a fully featured client, you'll also need
    to implement methods such as `GET`, `POST`, and `PostForm`.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 与包装客户端相比，这种方法的优势在于我们可以保持接口的稀疏性。如果您想要一个功能齐全的客户端，您还需要实现`GET`、`POST`和`PostForm`等方法。
- en: Understanding GRPC clients
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解GRPC客户端
- en: GRPC is a high-performance RPC framework that is built using protocol buffers
    ([https://developers.google.com/protocol-buffers](https://developers.google.com/protocol-buffers))
    and HTTP/2 ([https://http2.github.io](https://http2.github.io)). Creating a GRPC
    client in Go involves many of the same intricacies as working with Go HTTP clients.
    In order to demonstrate basic client usage, it's easiest to also implement a server.
    This recipe will create a `greeter` service, which takes a greeting and a name
    and returns the sentence `<greeting> <name>!`. In addition, the server can specify
    whether to exclaim `!` or not `.` (full stop).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: GRPC是一个高性能的RPC框架，使用协议缓冲区([https://developers.google.com/protocol-buffers](https://developers.google.com/protocol-buffers))和HTTP/2([https://http2.github.io](https://http2.github.io))构建。在Go中创建一个GRPC客户端涉及到与Go
    HTTP客户端相同的许多复杂性。为了演示基本客户端的使用，最容易的方法是同时实现一个服务器。这个教程将创建一个`greeter`服务，它接受一个问候和一个名字，并返回句子`<greeting>
    <name>!`。此外，服务器可以指定是否感叹`!`或不是`.`(句号)。
- en: There are some details about GRPC, such as streaming, that this recipe won't
    explore; however, it will hopefully serve as an introduction to creating a very
    basic server and client.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程不会探讨GRPC的一些细节，比如流式传输；但是，它有望作为创建一个非常基本的服务器和客户端的介绍。
- en: Getting ready
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'After completing the initial setup steps mentioned in the *Technical requirements*
    section at the beginning of this chapter, install GRPC ([https://grpc.io/docs/quickstart/go/](https://grpc.io/docs/quickstart/go/))
    and run the following commands:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章开头的*技术要求*部分完成初始设置步骤后，安装GRPC ([https://grpc.io/docs/quickstart/go/](https://grpc.io/docs/quickstart/go/))
    并运行以下命令：
- en: '`go get -u github.com/golang/protobuf/{proto,protoc-gen-go}`'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`go get -u github.com/golang/protobuf/{proto,protoc-gen-go}`'
- en: '`go get -u google.golang.org/grpc`'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`go get -u google.golang.org/grpc`'
- en: How to do it...
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running of your application:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序的过程：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter7/grpc`,
    and navigate to this directory.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter7/grpc`的新目录，并进入此目录。
- en: 'Run the following command:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE51]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'You should see a file called `go.mod` containing the following:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE52]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter7/grpc`,
    or use this as an exercise to write some code of your own!
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter7/grpc`复制测试，或者利用这个机会编写一些自己的代码！
- en: Create a directory called `greeter` and navigate to it.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`greeter`的目录并进入。
- en: 'Create a file called `greeter.proto` with the following content:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`greeter.proto`的文件，内容如下：
- en: '[PRE53]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Navigate back up a directory to `grpc`.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到`grpc`目录。
- en: 'Run the following command:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE54]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Create a new directory called `server` and navigate to it.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`server`的新目录，并进入该目录。
- en: 'Create a file called `greeter.go` with the following content. Ensure that you
    modify the `greeter` import to use the path you set up in step 3:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`greeter.go`的文件，内容如下。确保修改`greeter`导入，使用你在第3步设置的路径：
- en: '[PRE55]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Create a file called `server.go` with the following content. Ensure that you
    modify the `greeter` import to use the path you set up in step 3:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`server.go`的文件，内容如下。确保修改`greeter`导入，使用你在第3步设置的路径：
- en: '[PRE56]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Navigate back up a directory to `grpc`.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到`grpc`目录。
- en: Create a new directory called `client` and navigate to it.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`client`的新目录，并进入该目录。
- en: 'Create a file called `client.go` with the following content. Ensure that you
    modify the `greeter` import to use the path you set up in step 3:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`client.go`的文件，内容如下。确保修改`greeter`导入，使用你在第3步设置的路径：
- en: '[PRE57]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Navigate back up a directory to `grpc`.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到`grpc`目录。
- en: 'Run `go run ./server`, and you will see the following output:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run ./server`，你会看到以下输出：
- en: '[PRE58]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'In a separate Terminal, run `go run ./client` from the `grpc` directory, and
    you will see the following output:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个终端中，从`grpc`目录运行`go run ./client`，你会看到以下输出：
- en: '[PRE59]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The `go.mod` file may be updated and `go.sum` file should now be present in
    the top-level recipe directory.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件可能会被更新，顶级示例目录中现在应该存在`go.sum`文件。'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The GRPC server is set up to listen on port `4444`. Once the client connects,
    it can send requests and receive responses from the server. The structure of the
    requests, responses, and supported methods is dictated by the `.proto` file we
    created in step 4\. In practice, when integrating against GRPC servers, they should
    provide the `.proto` file, which can be used to automatically generate a client.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: GRPC服务器设置为监听端口`4444`。一旦客户端连接，它就可以向服务器发送请求并接收响应。请求、响应和支持的方法的结构由我们在第4步创建的`.proto`文件所决定。在实践中，当集成到GRPC服务器时，它们应该提供`.proto`文件，该文件可以用于自动生成客户端。
- en: In addition to the client, the `protoc` command generates the stubs for the
    server, and all that's required is to fill in the implementation details. The
    generated Go code also has JSON tags and the same structures could be reused for
    JSON REST services. Our code sets up an insecure client. To handle GRPC securely,
    you need to use an SSL certificate.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 除了客户端，`protoc`命令还会为服务器生成存根，所需的一切就是填写实现细节。生成的Go代码还具有JSON标记，相同的结构可以重用于JSON REST服务。我们的代码设置了一个不安全的客户端。要安全地处理GRPC，你需要使用SSL证书。
- en: Using twitchtv/twirp for RPC
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用twitchtv/twirp进行RPC
- en: The `twitchtv/twirp` RPC framework affords many of the benefits of GRPC, including
    building models with protocol buffers ([https://developers.google.com/protocol-buffers](https://developers.google.com/protocol-buffers)),
    and allows for communication over HTTP 1.1\. It can also communicate using JSON,
    so it's possible to use the `curl` command to communicate with a `twirp` RPC service.
    This recipe will implement the same `greeter` as the GRPC section before it. This
    service takes a greeting and a name and returns the sentence `<greeting> <name>!`.
    In addition, the server can specify whether to exclaim `!` or not `.`.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`twitchtv/twirp` RPC框架提供了许多GRPC的优点，包括使用协议缓冲区（[https://developers.google.com/protocol-buffers](https://developers.google.com/protocol-buffers)）构建模型，并允许通过HTTP
    1.1进行通信。它还可以使用JSON进行通信，因此可以使用`curl`命令与`twirp` RPC服务进行通信。这个示例将实现与之前GRPC部分相同的`greeter`。该服务接受一个问候和一个名字，并返回句子`<greeting>
    <name>!`。此外，服务器可以指定是否感叹`!`或不感叹`.`。'
- en: This recipe won't explore the other features of `twitchtv/twirp`, and will focus
    primarily on basic client-server communication. For more information on what is
    supported, visit their GitHub page ([https://github.com/twitchtv/twirp](https://github.com/twitchtv/twirp)).
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例不会探索`twitchtv/twirp`的其他功能，主要关注基本的客户端-服务器通信。有关支持的更多信息，请访问他们的GitHub页面（[https://github.com/twitchtv/twirp](https://github.com/twitchtv/twirp)）。
- en: Getting ready
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'After completing the initial setup steps mentioned in the *Technical requirements*
    section at the beginning of this chapter, install twirp [https://twitchtv.github.io/twirp/docs/install.html](https://twitchtv.github.io/twirp/docs/install.html) and
    run the following commands:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章开头*技术要求*部分提到的初始设置步骤后，安装twirp [https://twitchtv.github.io/twirp/docs/install.html](https://twitchtv.github.io/twirp/docs/install.html)，并运行以下命令：
- en: '`go get -u github.com/golang/protobuf/{proto,protoc-gen-go}`'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`go get -u github.com/golang/protobuf/{proto,protoc-gen-go}`'
- en: '`go get github.com/twitchtv/twirp/protoc-gen-twirp`'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`go get github.com/twitchtv/twirp/protoc-gen-twirp`'
- en: How to do it...
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running of your application:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序的过程：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter7/twirp`, and
    navigate to this directory.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter7/twirp`的新目录，并进入该目录。
- en: 'Run the following command:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE60]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'You should see a file called `go.mod` containing the following:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE61]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter7/twirp`,
    or use this as an exercise to write some code of your own!
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter7/twirp`复制测试，或者将其作为练习编写一些自己的代码！
- en: Create a directory called `rpc/greeter` and navigate to it.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`rpc/greeter`的目录，并进入该目录。
- en: 'Create a file called `greeter.proto` with the following content:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`greeter.proto`的文件，内容如下：
- en: '[PRE62]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Navigate back up a directory to `twirp`.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到`twirp`目录。
- en: 'Run the following command:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE63]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Create a new directory called `server` and navigate to it.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`server`的新目录，并进入该目录。
- en: 'Create a file called `greeter.go` with the following content. Ensure that you
    modify the `greeter` import to use the path you set up in step 3:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`greeter.go`的文件，内容如下。确保修改`greeter`导入，使用你在第3步设置的路径：
- en: '[PRE64]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Create a file called `server.go` with the following content. Ensure that you
    modify the `greeter` import to use the path you set up in step 3:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`server.go`的文件，内容如下。确保修改`greeter`导入以使用您在第3步设置的路径：
- en: '[PRE65]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Navigate back up a directory to `twirp`.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航回到`twirp`目录的上一级目录。
- en: Create a new directory called `client` and navigate to it.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`client`的新目录并导航到该目录。
- en: 'Create a file called `client.go` with the following content. Ensure that you
    modify the `greeter` import to use the path you set up in step 3:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`client.go`的文件，内容如下。确保修改`greeter`导入以使用您在第3步设置的路径：
- en: '[PRE66]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Navigate back up a directory to `twirp`.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航回到`twirp`目录的上一级目录。
- en: 'Run `go run ./server`, and you will see the following output:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run ./server`，您将看到以下输出：
- en: '[PRE67]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'In a separate Terminal, run `go run ./client` from the `twirp` directory. You
    should see the following output:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个终端中，从`twirp`目录运行`go run ./client`。您应该会看到以下输出：
- en: '[PRE68]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: The `go.mod` file may be updated and `go.sum` file should now be present in
    the top-level recipe directory.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件可能会被更新，`go.sum`文件现在应该存在于顶层配方目录中。'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We set up the `twitchtv/twirp` RPC server to listen on port `4444`. Like GRPC,
    `protoc` can be used to generate clients for a number of languages and, for example,
    generate Swagger ([https://swagger.io/](https://swagger.io/)) documentation.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置了`twitchtv/twirp` RPC服务器监听端口`4444`。与GRPC一样，`protoc`可以用于为许多语言生成客户端，并且例如生成Swagger
    ([https://swagger.io/](https://swagger.io/))文档。
- en: Like GRPC, we define our models first as `.proto` files, generate Go bindings,
    and finally implement the interface generated. Thanks to the use of `.proto` files,
    the code is relatively portable between GRPC and `twitchtv/twirp` as long as you're
    not relying on more advanced features of either framework.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 与GRPC一样，我们首先将我们的模型定义为`.proto`文件，生成Go绑定，最后实现生成的接口。由于使用了`.proto`文件，只要您不依赖于任何框架的更高级功能，代码在GRPC和`twitchtv/twirp`之间相对可移植。
- en: 'In addition, because the `twitchtv/twirp` server supports HTTP 1.1, we can
    `curl` it as follows:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，因为`twitchtv/twirp`服务器支持HTTP 1.1，我们可以使用`curl`进行如下操作：
- en: '[PRE69]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
