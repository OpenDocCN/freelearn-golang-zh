- en: Performance Improvements, Tips, and Tricks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能改进、技巧和诀窍
- en: In this chapter, we will focus on optimizing an application and discovering
    bottlenecks. These are some tips and tricks that can be used immediately by existing
    applications. Many of these recipes are necessary if you or your organization
    requires fully reproducible builds. They're also useful when you want to benchmark
    an application's performance. The final recipe focuses on increasing the speed
    of HTTP; however, it's always important to remember that the web world moves quickly,
    and it's important to refresh yourself on the best practices. For example, if
    you require HTTP/2, it has been available using the built-in Go `net/http` package
    since version 1.6.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于优化应用程序和发现瓶颈。这些都是一些可立即被现有应用程序使用的技巧。如果您或您的组织需要完全可重现的构建，许多这些食谱是必需的。当您想要对应用程序的性能进行基准测试时，它们也是有用的。最后一个食谱侧重于提高HTTP的速度；然而，重要的是要记住网络世界变化迅速，重要的是要及时了解最佳实践。例如，如果您需要HTTP/2，自Go
    1.6版本以来，可以使用内置的Go `net/http`包。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将涵盖以下食谱：
- en: Using the pprof tool
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用pprof工具
- en: Benchmarking and finding bottlenecks
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基准测试和发现瓶颈
- en: Memory allocation and heap management
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存分配和堆管理
- en: Using fasthttprouter and fasthttp
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用fasthttprouter和fasthttp
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In order to proceed with all the recipes in this chapter, configure your environment
    according to these steps:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了继续本章中的所有食谱，请根据以下步骤配置您的环境：
- en: Download and install Go 1.12.6 or greater on your operating system from [https://golang.org/doc/install.](https://golang.org/doc/install)
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的操作系统上从[https://golang.org/doc/install](https://golang.org/doc/install)下载并安装Go
    1.12.6或更高版本。
- en: Open a Terminal or console application and create and navigate to a project
    directory such as `~/projects/go-programming-cookbook`. All code will be run and
    modified from this directory.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端或控制台应用程序，并创建并导航到一个项目目录，例如`~/projects/go-programming-cookbook`。所有代码将从该目录运行和修改。
- en: 'Clone the latest code into `~/projects/go-programming-cookbook-original` and
    optionally work from that directory rather than typing the examples manually:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将最新的代码克隆到`~/projects/go-programming-cookbook-original`，并选择从该目录工作，而不是手动输入示例：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Optionally, install Graphviz from [http://www.graphviz.org/Home.php](http://www.graphviz.org/Home.php).
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，从[http://www.graphviz.org/Home.php](http://www.graphviz.org/Home.php)安装Graphviz。
- en: Using the pprof tool
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pprof工具
- en: The `pprof` tool allows Go applications to collect and export runtime profiling
    data. It also provides webhooks to access the tool from a web interface. This
    recipe will create a basic application that verifies a `bcrypt`-hashed password
    against a plaintext one, then it will profile the application.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`pprof`工具允许Go应用程序收集和导出运行时分析数据。它还提供了用于从Web界面访问工具的Webhook。本食谱将创建一个基本应用程序，验证`bcrypt`哈希密码与明文密码，然后对应用程序进行分析。'
- en: You might have expected the `pprof` tool to be covered in [Chapter 11](eb7b5af6-36b8-4fbb-9d06-960586569cd5.xhtml),
    *Distributed Systems*, with other metrics and monitoring recipes. It was instead
    put in this chapter because it will be used to analyze and improve a program much
    in the same way that benchmarking can be used. As a result, this recipe will largely
    focus on `pprof` for analyzing and improving the memory usage of an application.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望在[第11章](eb7b5af6-36b8-4fbb-9d06-960586569cd5.xhtml) *分布式系统*中涵盖`pprof`工具，以及其他指标和监控食谱。但它实际上被放在了本章，因为它将用于分析和改进程序，就像基准测试可以使用一样。因此，本食谱将主要关注于使用`pprof`来分析和改进应用程序的内存使用情况。
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter14/pprof` and
    navigate to this directory.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter14/pprof`的新目录，并导航到该目录。
- en: 'Run this command:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行此命令：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter14/pprof`,
    or use this as an exercise to write some of your own code!
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter14/pprof`复制测试，或者使用这个作为练习来编写一些您自己的代码！
- en: Create a directory named `crypto` and navigate to it.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`crypto`的目录并导航到该目录。
- en: 'Create a file called `handler.go` with the following content:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`handler.go`的文件，内容如下：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Navigate up a directory.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到上一级目录。
- en: Create a new directory named `example` and navigate to it.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录并导航到该目录。
- en: 'Create a `main.go` file with the following content:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`main.go`文件，内容如下：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Run `go run main.go`.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You may also run the following command:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以运行以下命令：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You should now see the following output:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该看到以下输出：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In a separate Terminal, run the following:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个单独的终端中，运行以下命令：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This will start a 30-second timer.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将启动一个30秒的计时器。
- en: 'Run several `curl` commands while `pprof` runs:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pprof`运行时运行几个`curl`命令：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Return to the `pprof` command and wait for it to complete.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到`pprof`命令并等待其完成。
- en: 'Run the `top10` command from the `pprof` prompt:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`pprof`提示符中运行`top10`命令：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you installed Graphviz or a supported browser, run the `web` command from
    the `pprof` prompt. You should see something like this with a much longer chain
    of red boxes on the right side:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您安装了Graphviz或支持的浏览器，请从`pprof`提示符中运行`web`命令。您应该会看到类似这样的东西，右侧有一长串红色框：
- en: '![](img/7df536c6-2641-4619-97a3-e9ada9b6084d.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/7df536c6-2641-4619-97a3-e9ada9b6084d.png)
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件可能会更新，`go.sum`文件现在应该存在于顶级食谱目录中。'
- en: If you have copied or written your own tests, go up one directory and run `go
    test`. Ensure that all the tests pass.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您已经复制或编写了自己的测试，请返回到上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `pprof` tool provides a lot of runtime information about your application.
    Using the `net/pprof` package is usually the most simple to configure—all that's
    required is listening on a port and doing an import.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`pprof`工具提供了关于应用程序的许多运行时信息。使用`net/pprof`包通常是最简单的配置方式，只需要在端口上进行监听并导入即可。'
- en: In our case, we wrote a handler that uses a very compute-heavy application (`bcrypt`)
    so that we can demonstrate how they pop up when profiling with `pprof`. This will
    quickly isolate chunks of code that are creating bottlenecks in your application.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们编写了一个处理程序，使用了一个非常计算密集的应用程序（`bcrypt`），以便演示在使用`pprof`进行分析时它们是如何出现的。这将快速地分离出在应用程序中创建瓶颈的代码块。
- en: We chose to collect a general profile that causes `pprof` to poll our application
    endpoint for 30 seconds. We then generated traffic against the endpoint to help
    produce results. This can be helpful when you're attempting to check a single
    handler or branch of code.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择收集一个通用概要，导致`pprof`在30秒内轮询我们的应用程序端点。然后我们对端点生成流量，以帮助产生结果。当您尝试检查单个处理程序或代码分支时，这可能会有所帮助。
- en: Lastly, we looked at the top 10 functions in terms of CPU utilization. It's
    also possible to look at memory/heap management with the `pprof http://localhost:8080/debug/pprof/heap`
    command. The`web` command in the `pprof` console can be used to look at a visualization
    of your CPU/memory profile and helps highlight more active code.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们查看了在CPU利用率方面排名前10的函数。还可以使用`pprof http://localhost:8080/debug/pprof/heap`命令查看内存/堆管理。`pprof`控制台中的`web`命令可用于查看CPU/内存概要的可视化，并有助于突出更活跃的代码。
- en: Benchmarking and finding bottlenecks
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基准测试和查找瓶颈
- en: Another method for determining slow parts of code is to use benchmarks. Benchmarks
    can be used to test functions for average performance and can also run benchmarks
    in parallel. This can be useful when comparing functions or doing micro-optimizations
    for certain code, especially to see how a function implementation might perform
    when using it concurrently. For this recipe, we'll create two structures that
    both implement an atomic counter. The first will use the `sync` package, and the
    other will use `sync/atomic`. We'll then benchmark both the solutions.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用基准测试来确定代码中的慢部分是另一种方法。基准测试可用于测试函数的平均性能，并且还可以并行运行基准测试。这在比较函数或对特定代码进行微优化时非常有用，特别是要查看在并发使用时函数实现的性能如何。在本示例中，我们将创建两个结构，两者都实现了原子计数器。第一个将使用`sync`包，另一个将使用`sync/atomic`。然后我们将对这两种解决方案进行基准测试。
- en: How to do it...
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter14/bench` and
    navigate to this directory.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter14/bench`的新目录，并导航到该目录。
- en: 'Run this command:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行此命令：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter14/bench`,
    or use this as an exercise to write some of your own code!
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter14/bench`复制测试，或者将其作为练习编写一些自己的代码！
- en: Note that copied tests also include benchmarks written later in this recipe.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，复制的测试还包括本示例中稍后编写的基准测试。
- en: 'Create a file called `lock.go` with the following content:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`lock.go`的文件，内容如下：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create a file called `atomic.go` with the following content:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`atomic.go`的文件，内容如下：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a file called `lock_test.go` with the following content:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`lock_test.go`的文件，内容如下：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a file called `atomic_test.go` with the following content:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`atomic_test.go`的文件，内容如下：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Run the `go test -bench .` command, and you will see the following output:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go test -bench .`命令，您将看到以下输出：
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If you have copied or written your own tests, go up one directory and run `go
    test`. Ensure that all the tests pass.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您已经复制或编写了自己的测试，请返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: This recipe is an example of comparing a critical path of code. For example,
    sometimes your application must execute certain functionality often, maybe every
    call. In this case, we've written an atomic counter that can add or read values
    from multiple go routines.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例是比较代码的关键路径的一个示例。例如，有时您的应用程序必须经常执行某些功能，也许是每次调用。在这种情况下，我们编写了一个原子计数器，可以从多个go例程中添加或读取值。
- en: The first solution uses `RWMutex` and `Lock` or `RLock` objects to write and
    read, respectively. The second uses the `atomic` package, which provides the same
    functionality out of the box. We make the signatures of our functions the same,
    so benchmarks can be reused with minor modifications and so that either can satisfy
    the same `atomic` integer interface.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个解决方案使用`RWMutex`和`Lock`或`RLock`对象进行写入和读取。第二个使用`atomic`包，它提供了相同的功能。我们使函数的签名相同，以便可以在稍作修改的情况下重用基准测试，并且两者都可以满足相同的`atomic`整数接口。
- en: Lastly, we write standard benchmarks for adding values and reading them. Then,
    we write a parallel benchmark that calls the add and read functions. The parallel
    benchmark will create lot of lock contention, so we expect a slowdown. Perhaps
    unexpectedly, the atomic package significantly outperforms `RWMutex`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们为添加值和读取值编写了标准基准测试。然后，我们编写了一个并行基准测试，调用添加和读取函数。并行基准测试将创建大量的锁争用，因此我们预计会出现减速。也许出乎意料的是，`atomic`包明显优于`RWMutex`。
- en: Memory allocation and heap management
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存分配和堆管理
- en: Some applications can benefit a lot from optimization. Consider routers, for
    example, which we'll look at in a later recipe. Fortunately, the tool benchmark
    suite provides flags to collect a number of memory allocations as well as memory
    allocation size. It can be helpful to tune certain critical code paths to minimize
    these two attributes.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一些应用程序可以从优化中受益很多。例如，考虑路由器，我们将在以后的示例中进行讨论。幸运的是，工具基准测试套件提供了收集许多内存分配以及内存分配大小的标志。调整某些关键代码路径以最小化这两个属性可能会有所帮助。
- en: This recipe will show two approaches to writing a function that glues together
    strings with a space, similar to `strings.Join("a", "b", "c")`. One approach will
    use concatenation, while the other will use the `strings` package. We'll then
    compare performance and memory allocations between the two.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程将展示编写一个将字符串用空格粘合在一起的函数的两种方法，类似于`strings.Join("a", "b", "c")`。一种方法将使用连接，而另一种方法将使用`strings`包。然后我们将比较这两种方法之间的性能和内存分配。
- en: How to do it...
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行您的应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter14/tuning` and
    navigate to this directory.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter14/tuning`的新目录，并导航到该目录。
- en: 'Run this command:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行此命令：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter14/tuning`,
    or use this as an exercise to write some of your own code!
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter14/tuning`复制测试，或者将其作为练习编写一些您自己的代码！
- en: Note that copied tests also include benchmarks written later in this recipe.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，复制的测试还包括稍后在本教程中编写的基准测试。
- en: 'Create a file called `concat.go` with the following content:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`concat.go`的文件，其中包含以下内容：
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Create a file called `join.go` with the following content:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`join.go`的文件，其中包含以下内容：
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a file called `concat_test.go` with the following content:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`concat_test.go`的文件，其中包含以下内容：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create a file called `join_test.go` with the following content:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`join_test.go`的文件，其中包含以下内容：
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Run the `GOMAXPROCS=1 go test -bench=. -benchmem -benchtime=1s` command and
    you will see the following output:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`GOMAXPROCS=1 go test -bench=. -benchmem -benchtime=1s`命令，您将看到以下输出：
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If you have copied or written your own tests run `go test`. Ensure that all
    the tests pass.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您已经复制或编写了自己的测试，请运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Benchmarking helps us tune applications and do certain micro-optimizations for
    things such as memory allocations. When benchmarking allocations for applications
    with input, it's important to try a variety of input sizes to determine whether
    it affects allocations. We wrote two functions, `concat` and `join`. Both join
    together a `variadic` string parameter with spaces, so the arguments (*a*, *b*,
    *c*) will return the string *a b c*.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 基准测试有助于调整应用程序并进行某些微优化，例如内存分配。在对带有输入的应用程序进行分配基准测试时，重要的是要尝试各种输入大小，以确定它是否会影响分配。我们编写了两个函数，`concat`和`join`。两者都将`variadic`字符串参数与空格连接在一起，因此参数（*a*，*b*，*c*）将返回字符串*a
    b c*。
- en: The `concat` approach accomplishes this solely through string concatenation.
    We create a string and append the strings in the list and spaces in a `for` loop.
    We omit adding a space on the last loop. The `join` function uses the internal
    `Strings.Join` function to accomplish this far more efficiently in most cases.
    It can be helpful to benchmark standard library compared to your own functions
    to help better understand trade-offs in performance, simplicity, and functionality.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`concat`方法仅通过字符串连接实现这一点。我们创建一个字符串，并在列表中和`for`循环中添加字符串和空格。我们在最后一个循环中省略添加空格。`join`函数使用内部的`Strings.Join`函数来更有效地完成这个任务。与您自己的函数相比，对标准库进行基准测试有助于更好地理解性能、简单性和功能性之间的权衡。'
- en: We used sub-benchmarks to test all of our parameters, which also work excellently
    with table-driven benchmarks. We can see how `concat` approach results in a lot
    more allocations than `join`, at least for single length inputs. A good exercise
    would be to try this with variable-length input strings as well as a number of
    arguments.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用子基准测试来测试所有参数，这也与表驱动基准测试非常搭配。我们可以看到`concat`方法在单个长度输入的情况下比`join`方法产生了更多的分配。一个很好的练习是尝试使用可变长度的输入字符串以及一些参数来进行测试。
- en: Using fasthttprouter and fasthttp
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用fasthttprouter和fasthttp
- en: Although the Go standard library provides everything you need to run an HTTP
    server, sometimes you need to further optimize for things such as routing and
    request time. This recipe will explore a library that speeds up request handling,
    called `fasthttp` ([https://github.com/valyala/fasthttp](https://github.com/valyala/fasthttp)),
    and a router that dramatically speeds up routing performance, called `fasthttprouter`
    ([https://github.com/buaazp/fasthttprouter](https://github.com/buaazp/fasthttprouter)).
    Although `fasthttp` is quick, it's important to note that it doesn't support HTTP/2
    ([https://github.com/valyala/fasthttp/issues/45](https://github.com/valyala/fasthttp/issues/45)).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Go标准库提供了运行HTTP服务器所需的一切，但有时您需要进一步优化诸如路由和请求时间等内容。本教程将探讨一个加速请求处理的库，称为`fasthttp`（[https://github.com/valyala/fasthttp](https://github.com/valyala/fasthttp)），以及一个显著加速路由性能的路由器，称为`fasthttprouter`（[https://github.com/buaazp/fasthttprouter](https://github.com/buaazp/fasthttprouter)）。尽管`fasthttp`很快，但重要的是要注意它不支持HTTP/2（[https://github.com/valyala/fasthttp/issues/45](https://github.com/valyala/fasthttp/issues/45)）。
- en: How to do it...
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter14/fastweb` and
    navigate to this directory.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter14/fastweb`的新目录，并导航到该目录。
- en: 'Run this command:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行此命令：
- en: '[PRE24]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE25]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter14/fastweb`,
    or use this as an exercise to write some of your own code!
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter14/fastweb`复制测试，或者将其作为练习编写一些您自己的代码！
- en: 'Create a file called `items.go` with the following content:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`items.go`的文件，其中包含以下内容：
- en: '[PRE26]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create a file called `handlers.go` with the following content:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`handlers.go`的文件，其中包含以下内容：
- en: '[PRE27]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create a file called `main.go` with the following content:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，其中包含以下内容：
- en: '[PRE28]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Run the `go build` command.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go build`命令。
- en: 'Run the `./fastweb` command:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`./fastweb`命令：
- en: '[PRE29]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'From a separate Terminal, test it our with some `curl` commands:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从单独的终端，使用一些`curl`命令进行测试：
- en: '[PRE30]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件可能会被更新，`go.sum`文件现在应该存在于顶级配方目录中。'
- en: If you have copied or written your own tests, run `go test`. Ensure that all
    the tests pass.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您已经复制或编写了自己的测试，请运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `fasthttp` and `fasthttprouter` packages can do a lot to speed up the life
    cycle of a web request. Both packages do a lot of optimization on the hot path
    of code, but with the unfortunate caveat of rewriting your handlers to use a new
    context object rather than traditional requests and response writer.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`fasthttp`和`fasthttprouter`包可以大大加快Web请求的生命周期。这两个包在热代码路径上进行了大量优化，但不幸的是，需要重写处理程序以使用新的上下文对象，而不是传统的请求和响应写入器。'
- en: There are a number of frameworks that have taken a similar approach to routing,
    and some have directly incorporated `fasthttp`. These projects keep up-to-date
    information in their `README` files.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多框架采用了类似的路由方法，有些直接集成了`fasthttp`。这些项目在它们的`README`文件中保持最新的信息。
- en: Our recipe implemented a simple `list` object that we can append to with one
    endpoint and that will be returned by the other. The primary purpose of this recipe
    is to demonstrate working with parameters, setting up a router that now explicitly
    defines the supported methods instead of the generic `Handle` and `HandleFunc`,
    and to show how similar they are to standard handlers, but with many other benefits.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的配方实现了一个简单的`list`对象，我们可以通过一个端点进行附加，然后由另一个端点返回。这个配方的主要目的是演示如何处理参数，设置一个现在明确定义支持的方法的路由器，而不是通用的`Handle`和`HandleFunc`，并展示它们与标准处理程序有多么相似，但又有许多其他好处。
