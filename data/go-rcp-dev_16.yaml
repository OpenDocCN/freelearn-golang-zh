- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '16'
- en: Logging
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志记录
- en: Printing log messages from a program can be an important tool for troubleshooting.
    Log messages tell you what is going on at any given moment, and provide much-needed
    contextual information when something goes wrong. Go standard library provides
    convenient packages to generate and manage log messages from programs. Here, we
    will look at using the `log` package, which can be used to generate text messages,
    and the `slog` package, which can be used to generate structured log messages
    from programs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 从程序中打印日志消息可以是故障排除的重要工具。日志消息告诉您在任何给定时刻正在发生什么，并在出现问题提供所需上下文信息。Go标准库提供了方便的包来生成和管理程序中的日志消息。在这里，我们将探讨使用`log`包，它可以用来生成文本消息，以及`slog`包，它可以用来从程序中生成结构化日志消息。
- en: 'This chapter contains the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含以下食谱：
- en: Using the standard logger
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用标准日志记录器
- en: Writing log messages
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写日志消息
- en: Controlling format
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制格式
- en: Changing where to log
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改日志记录位置
- en: Using the structured logger
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用结构化日志记录器
- en: Logging using the global logger
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用全局日志记录器进行日志记录
- en: Writing structured logs using different levels
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用不同级别编写结构化日志
- en: Changing log level at runtime
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在运行时更改日志级别
- en: Using loggers with additional attributes
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用具有附加属性的日志记录器
- en: Changing where to log
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改日志记录位置
- en: Adding logging information from the context
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从上下文中添加日志信息
- en: Using the standard logger
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用标准日志记录器
- en: The standard library logger is defined in the `log` package. It is a simple
    logging library that can be used to print formatted log messages that show the
    progression of a program. For most practical purposes, the standard library logger
    functionality is too limited, but it can be a useful tool that requires minimal
    setup for proof-of-concepts and smaller programs. Use the structured logger `log/slog`
    package for any nontrivial project.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 标准库日志记录器定义在`log`包中。它是一个简单的日志库，可以用来打印格式化的日志消息，显示程序的进度。对于大多数实际用途，标准库日志记录器功能过于有限，但它可以是一个有用的工具，对于概念验证和较小的程序，它需要最少的设置。对于任何非平凡项目，请使用结构化日志记录器`log/slog`包。
- en: Writing log messages
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写日志消息
- en: The standard logger is a simple logging implementation to print diagnostic messages.
    It does not offer structured output or multiple log levels but can be useful for
    programs where log messages are geared toward the end users or developers.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 标准日志记录器是一个简单的日志实现，用于打印诊断消息。它不提供结构化输出或多个日志级别，但对于日志消息面向最终用户或开发者的程序来说可能很有用。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'You can use the default logger to print log messages:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用默认日志记录器来打印日志消息：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here is the output:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是输出：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The above functions use a singleton instance of `log.Logger`, which can be obtained
    by `log.Default()`. In other words, calling `log.Println` is equivalent to calling
    `log.Default().Println`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 上述函数使用`log.Logger`的单例实例，可以通过`log.Default()`获取。换句话说，调用`log.Println`相当于调用`log.Default().Println`。
- en: 'You can also create a new logger, configure it, and pass it around:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以创建一个新的日志记录器，配置它，并将其传递出去：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here is the output:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是输出：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Other than `log.Println` and `log.Printf`, you can use `log.Fatal` or `log.Panic`
    to stop a program:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`log.Println`和`log.Printf`之外，您还可以使用`log.Fatal`或`log.Panic`来停止程序：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will terminate the program with exit code `1` and output the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使程序以退出代码`1`终止并输出以下内容：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can observe something similar with the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下内容观察到类似的情况：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will panic and generate the output that follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这将引发恐慌并生成以下输出：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Controlling format
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制格式
- en: You can control the output format of the logger using bit flags. You can also
    define a prefix for the subsequent log messages.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用位标志来控制日志记录器的输出格式。您还可以为后续的日志消息定义一个前缀。
- en: How to do it...
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'You can create a new logger with a prefix as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建一个新的日志记录器，并使用以下方式为其设置前缀：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This outputs the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出以下内容：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can also set the prefix of an existing logger:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以设置现有日志记录器的前缀：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is the output:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是输出：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The output fields and how they are printed are controlled by the flags. The
    `log.LstdFlags` tells the logger that the date and time of the log should also
    be written.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 输出字段及其打印方式由标志控制。`log.LstdFlags`告诉日志记录器日志还应包含日期和时间。
- en: 'The `log.Lshortfile` prints the file name and line number showing where the
    log statement is:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`log.Lshortfile`打印出文件名和行号，显示日志语句的位置：'
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This gives the following output:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `log.Llongfile` prints the full path:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`log.Llongfile`打印出完整路径：'
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here is the output:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是输出：
- en: '[PRE15]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You can combine multiple flags using the bitwise `|` OR operator. The `log.Lmsgprefix`
    moves the prefix string (if one exists) to the beginning of the message from the
    beginning of the log line:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用位运算符 `|` 或操作符组合多个标志。`log.Lmsgprefix` 将前缀字符串（如果存在）移动到消息的开始，而不是日志行的开始：
- en: '[PRE16]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here’s the output::'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是输出结果：
- en: '[PRE17]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following flags print the time and date in UTC, as well as the short file
    name:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下标志会以UTC时间打印时间和日期，以及短文件名：
- en: '[PRE18]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'prefix: 2024/09/18 05:10:34 main.go:23: This is a log message with with UTC
    time'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '前缀：2024/09/18 05:10:34 main.go:23: 这是一条带有UTC时间的日志消息'
- en: '[PRE20]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: logger := log.New(os.Stderr, "", log.LstdFlags)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: logger := log.New(os.Stderr, "", log.LstdFlags)
- en: '[PRE21]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: output, err := os.Create("log.txt")
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: output, err := os.Create("log.txt")
- en: if err != nil {
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: if err != nil {
- en: log.Fatal(err)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: log.Fatal(err)
- en: '}'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: defer output.Close()
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: defer output.Close()
- en: logger.SetOutput(output)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: logger.SetOutput(output)
- en: logger.Println("This is a log message to log.txt")
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: logger.Println("这是要记录到log.txt的日志消息")
- en: logger.SetOutput(os.Stderr)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: logger.SetOutput(os.Stderr)
- en: logger.Println("Message to log.txt was written")
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: logger.Println("要记录到log.txt的消息已写入")
- en: '[PRE22]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: logger.SetOutput(io.Discard)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: logger.SetOutput(io.Discard)
- en: logger.Println("This message will not be logged")
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: logger.Println("这条消息不会被记录")
- en: '[PRE23]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: slog.Debug("This is a debug message")
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: slog.Debug("这是一条调试信息")
- en: slog.Info("This is an info message with an integer field", "arg", 42)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: slog.Info("这是一条包含整数字段的info信息", "arg", 42)
- en: slog.Info("This is another info message with an integer field", slog.Int("arg",42))
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: slog.Info("这是一条包含整数字段的info信息", slog.Int("arg",42))
- en: '[PRE24]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: logger := slog.New(slog.NewJSONHandler(os.Stderr, &slog.HandlerOptions{
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: logger := slog.New(slog.NewJSONHandler(os.Stderr, &slog.HandlerOptions{
- en: 'Level: slog.LevelDebug,'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 级别：slog.LevelDebug,
- en: '},'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: ))
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: ))
- en: slog.SetDefault(logger)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: slog.SetDefault(logger)
- en: '[PRE25]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: handler:= slog.NewTextHandler(os.Stderr, &slog.HandlerOptions{
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: handler:= slog.NewTextHandler(os.Stderr, &slog.HandlerOptions{
- en: 'Level: slog.LevelDebug,'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 级别：slog.LevelDebug,
- en: '})'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '})'
- en: '[PRE26]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: logger := slog.New(handler)
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: logger := slog.New(handler)
- en: '[PRE27]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: logger.Debug("This is a debug message")
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: logger.Debug("这是一条调试信息")
- en: logger.Info("This is an info message with an integer argument", "arg", 42)
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: logger.Info("这是一条包含整数字段的info信息", "arg", 42)
- en: logger.Warn("This is a warning message with a string argument", "arg", "foo")
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: logger.Warn("这是一条包含字符串参数的警告信息", "arg", "foo")
- en: '[PRE28]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: // Checking if logging is enabled for a specific level
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: // 检查是否为特定级别启用了日志记录
- en: if logger.Enabled(context.Background(), slog.LevelError) {
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if logger.Enabled(context.Background(), slog.LevelError) {
- en: logger.Error("This is an error message", slog.String("arg", "foo"))
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: logger.Error("这是一条错误信息", slog.String("arg", "foo"))
- en: '}'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE29]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: level = new(slog.LevelVar)
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: level = new(slog.LevelVar)
- en: '[PRE30]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: level.Set(slog.LevelError)
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: level.Set(slog.LevelError)
- en: '[PRE31]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: handler:=slog.NewTextHandler(os.Stderr, &slog.HandlerOptions{
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: handler:=slog.NewTextHandler(os.Stderr, &slog.HandlerOptions{
- en: 'Level: level,'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 级别：level,
- en: '})'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '})'
- en: '[PRE32]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: logger:=slog.New(handler)
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: logger:=slog.New(handler)
- en: '[PRE33]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: level.Set(slog.LevelDebug)
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: level.Set(slog.LevelDebug)
- en: // Now all loggers will start printing debug level messages
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: // 现在所有日志记录器都将开始打印调试级别的消息
- en: '[PRE34]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: func HandlerA(w http.ResponseWriter, req *http.Request) {
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: func HandlerA(w http.ResponseWriter, req *http.Request) {
- en: reqId:=getRequestIdFromRequest(req)
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: reqId:=getRequestIdFromRequest(req)
- en: // Create a new logger with additional attributes
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: // 创建一个新的具有附加属性的日志记录器
- en: logger:=slog.With(slog.String("handler", "a"),slog.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: logger:=slog.With(slog.String("handler", "a"),slog.
- en: String("reqId",reqId))
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: String("reqId",reqId))
- en: logger.Debug("Start handling request")
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: logger.Debug("开始处理请求")
- en: defer logger.Debug("Completed request")
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: defer logger.Debug("请求完成")
- en: '[PRE35]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: HandleRequest(logger, w,req)
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: HandleRequest(logger, w,req)
- en: '[PRE36]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '{"time":"2024-09-19T14:49:42.064787730-06:00","level":"DEBUG","msg":"Start
    handling request","handler":"a","reqId":"123"}'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{"time":"2024-09-19T14:49:42.064787730-06:00","level":"DEBUG","msg":"开始处理请求","handler":"a","reqId":"123"}'
- en: '{"time":"2024-09-19T14:49:42.308187758-06:00","level":"DEBUG","msg":"This is
    a debug message","handler":"a","reqId":"123","key":"value"}'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{"time":"2024-09-19T14:49:42.308187758-06:00","level":"DEBUG","msg":"这是一条调试信息","handler":"a","reqId":"123"}'
- en: '{"time":"2024-09-19T14:49:42.945674637-06:00","level":"DEBUG","msg":"Completed
    request","handler":"a","reqId":"123"}'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{"time":"2024-09-19T14:49:42.945674637-06:00","level":"DEBUG","msg":"请求完成","handler":"a","reqId":"123"}'
- en: '[PRE37]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: logger := slog.New(slog.NewTextHandler(os.Stderr, &slog.HandlerOptions{
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: logger := slog.New(slog.NewTextHandler(os.Stderr, &slog.HandlerOptions{
- en: 'Level: slog.LevelDebug,'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 级别：slog.LevelDebug,
- en: '}))'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '}))'
- en: '[PRE38]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: type ContextIDHandler struct {
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: type ContextIDHandler struct {
- en: slog.Handler
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: slog.Handler
- en: '}'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE39]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: func (h ContextIDHandler) Handle(ctx context.Context, r slog.Record) error {
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: func (h ContextIDHandler) Handle(ctx context.Context, r slog.Record) error {
- en: // If the context has a string id, retrieve it and add it to the
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: // 如果上下文有一个字符串id，检索它并将其添加到
- en: // record
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: // 记录
- en: if id, ok := ctx.Value("id").(string); ok {
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: if id, ok := ctx.Value("id").(string); ok {
- en: r.Add(slog.String("id", id))
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: r.Add(slog.String("id", id))
- en: '}'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: return h.Handler.Handle(ctx, r)
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: return h.Handler.Handle(ctx, r)
- en: '}'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE40]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: func Handler(w http.ResponseWriter, req *http.Request) {
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: func Handler(w http.ResponseWriter, req *http.Request) {
- en: logger.Debug(req.Context(),"Handler started")
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: logger.Debug(req.Context(),"处理器启动")
- en: '...'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '[PRE41]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '{"time":"2024-09-19T15:02:12.163787730-06:00","level":"DEBUG","msg":"Handler
    started","id":"123"}'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '{"时间":"2024-09-19T15:02:12.163787730-06:00","级别":"DEBUG","信息":"处理器启动","ID":"123"}'
- en: '```'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
