- en: Once Upon a Time
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从前有座山
- en: 'The recipes in this chapter are:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的食谱有：
- en: Finding today's date
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找今天的日期
- en: Formatting date to string
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将日期格式化为字符串
- en: Parsing the string into date
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将字符串解析为日期
- en: Converting dates to epoch and vice versa
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将日期转换为纪元和反之亦然
- en: Retrieving time units from the date
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从日期中检索时间单位
- en: Date arithmetics
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日期算术
- en: Finding the difference between two dates
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找两个日期之间的差异
- en: Converting between time zones
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不同时区之间转换
- en: Running the code block periodically
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期运行代码块
- en: Waiting a certain amount of time
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等待一定时间
- en: Timeout long-running operations
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超时长时间运行的操作
- en: Serializing the time and date
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 序列化时间和日期
- en: Introduction
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: This chapter is all about time-related tasks and operations. Go concentrates
    all these in the standard package called `time`. With this package, you are able
    to obtain the current time and date, format the date to the string, convert time
    zones, create timers, and create tickers. Keep in mind that there are always many
    ways you can implement and design functionality, and this chapter will show only
    a few of them.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要讨论与时间相关的任务和操作。Go将所有这些集中在名为`time`的标准包中。使用此包，您可以获取当前时间和日期，将日期格式化为字符串，转换时区，创建定时器和创建滴答器。请记住，您可以实现和设计功能的方式总是很多，本章将只展示其中的一些方式。
- en: Verify whether Go is installed properly. In case of any issues, see the *Retrieving
    Golang version* recipe in [Chapter 1](acf67248-0aa9-4150-a43b-d13eb9de89f2.xhtml), *Interacting
    With the Environment,* and follow the steps of the *Getting ready* section.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 验证Go是否正确安装。如果有任何问题，请参阅[第1章](acf67248-0aa9-4150-a43b-d13eb9de89f2.xhtml)中的*检索Golang版本*，并按照*准备就绪*部分的步骤进行操作。
- en: Finding today's date
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找今天的日期
- en: Obtaining the current date is a very common task for any system or application.
    Let's look at how this is done with help of Go's standard library.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 获取当前日期是任何系统或应用程序的常见任务。让我们看看如何使用Go的标准库来完成这个任务。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter04/recipe01`.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter04/recipe01`。
- en: Navigate to the directory.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `today.go` file with the following content:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建名为`today.go`的文件，内容如下：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Execute the code by running `go run today.go` in the main Terminal.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在主终端中运行`go run today.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](img/01a225d3-8492-4f44-b48e-6fdef81198ae.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/01a225d3-8492-4f44-b48e-6fdef81198ae.png)'
- en: How it works...
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The built-in package `time` contains the function `Now`, which provides the
    instance of a `Time` initialized to the current local time and date.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 内置包`time`包含函数`Now`，该函数提供了初始化为当前本地时间和日期的`Time`实例。
- en: The `Time` type is an instant in time in nanoseconds. The zero value of `Time`
    is January 1, year 1, 00:00:00.000000000 UTC.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`Time`类型是以纳秒为单位的时间点。`Time`的零值是公元1年1月1日00:00:00.000000000 UTC。'
- en: The pointer to the `Time` type should not be used. If only the value (not pointer
    to variable) is used, the `Time` instance is considered to be safe for use across
    multiple goroutines. The only exception is with serialization.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 不应使用`Time`类型的指针。如果只使用值（而不是变量的指针），则`Time`实例被认为是安全的，可用于多个goroutine。唯一的例外是序列化。
- en: See also
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: For more information on the `Time` type, see the `time` package documentation
    at: [https://golang.org/pkg/time](https://golang.org/pkg/time).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`Time`类型的更多信息，请参阅`time`包文档：[https://golang.org/pkg/time](https://golang.org/pkg/time)。
- en: Formatting date to string
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将日期格式化为字符串
- en: In case the textual representation of a time value is needed, usually, certain
    formatting is expected. The `Time` type of the `time` package provides the ability
    to create the `string` output in the given format. There are some rules on how
    to do this and we will cover a few useful ones.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要时间值的文本表示形式，通常期望某种格式。`time`包的`Time`类型提供了在给定格式中创建`string`输出的能力。有一些关于如何做到这一点的规则，我们将介绍一些有用的规则。
- en: How to do it...
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter04/recipe02`.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter04/recipe02`。
- en: Navigate to the directory.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `format.go` file with the following content:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建名为`format.go`的文件，内容如下：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Execute the code by running `go run format.go` in the main Terminal.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在主终端中运行`go run format.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](img/02ed7afe-9a89-4625-aa04-81a27912fc40.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/02ed7afe-9a89-4625-aa04-81a27912fc40.png)'
- en: How it works...
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `Time` type of the `time` package provides the `Format` method for formatting
    the output string.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`time`包的`Time`类型提供了`Format`方法来格式化输出字符串。'
- en: Go uses the referential time value `Jan 2 15:04:05 2006 MST` to define the formatting
    layout. See the code example for padding options.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Go使用引用时间值`Jan 2 15:04:05 2006 MST`来定义格式布局。有关填充选项，请参阅代码示例。
- en: The memo for the reference date is that when given in number form, it is represented
    as 1,2,3,4,5,6,-7\. The -7 value means that the MST time zone is 7 hours behind
    the UTC.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 参考日期的备忘录是，以数字形式给出时，表示为1,2,3,4,5,6,-7。-7值表示MST时区比UTC晚7小时。
- en: The time package includes some predefined formats (for example, `time.Kitchen`);
    you can discover these in the documentation for package constants. ([https://golang.org/pkg/time/#pkg-constants](https://golang.org/pkg/time/#pkg-constants))
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 时间包包括一些预定义格式（例如`time.Kitchen`）；您可以在包常量的文档中发现这些内容。([https://golang.org/pkg/time/#pkg-constants](https://golang.org/pkg/time/#pkg-constants))
- en: See also
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: For all predefined formats and formatting options, see the documentation for
    the `time` package at: [https://golang.org/pkg/time](https://golang.org/pkg/time).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有关所有预定义格式和格式选项，请参阅`time`包的文档：[https://golang.org/pkg/time](https://golang.org/pkg/time)。
- en: Parsing the string into date
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将字符串解析为日期
- en: The same concept as the one used in date formatting is also used by date parsing.
    The same reference date and layout principles can be used. This recipe will show
    you how to transform the string input into a `Time` instance.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 日期格式化中使用的概念与日期解析中使用的概念相同。可以使用相同的参考日期和布局原则。本食谱将向您展示如何将字符串输入转换为`Time`实例。
- en: How to do it...
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter04/recipe03`.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter04/recipe03`。
- en: Navigate to the directory.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `parse.go` file with the following content:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建包含以下内容的`parse.go`文件：
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Execute the code by running `go run parse.go` in the main Terminal.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主终端中运行`go run parse.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](img/84a97be8-223e-4212-9988-93c0f3e92b6e.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/84a97be8-223e-4212-9988-93c0f3e92b6e.png)'
- en: How it works...
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `time` package contains the `Parse` function for parsing the string with
    time information.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`time`包包含`Parse`函数，用于解析带有时间信息的字符串。'
- en: The format of an incoming date string is given by the referential date, formatted
    to the matching format. Remember that the reference time is `Jan 2 15:04:05 2006
    MST`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 传入日期字符串的格式由参考日期给出，格式化为匹配的格式。请记住，参考时间是`Jan 2 15:04:05 2006 MST`。
- en: If the given time string does not contain the information about the timezone,
    the result of the `Parse` function will always be in `UTC`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定的时间字符串不包含有关时区的信息，则`Parse`函数的结果将始终为`UTC`。
- en: If the timezone information is provided, then the time is always the time instant
    in the provided timezone.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供了时区信息，则时间始终是所提供时区的时间瞬间。
- en: The `ParseInLocation` function accepts the third argument, which is the location.
    If the time string does not contain any timezone information, then the time is
    parsed to the `Time` instance in given location.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`ParseInLocation`函数接受第三个参数，即位置。如果时间字符串不包含任何时区信息，则时间将被解析为给定位置的`Time`实例。'
- en: Converting dates to epoch and vice versa
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将日期转换为时期，反之亦然
- en: The epoch is the universal system to describe the point in time. The beginning
    of epoch time is defined as `00:00:00 1 Jan 1970 UTC`. The value of epoch is the
    amount of seconds since the timestamp, minus the amount of leap seconds since
    then.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 时期是描述时间点的通用系统。时期时间的开始被定义为`00:00:00 1 Jan 1970 UTC`。时期的值是自时间戳以来的秒数，减去那时以来的闰秒数。
- en: The `time` package and `Time` type provide you with the ability to operate and
    find out the UNIX epoch time.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`time`包和`Time`类型使您能够操作并找出UNIX时期时间。'
- en: How to do it...
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter04/recipe04`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter04/recipe04`。
- en: Navigate to the directory.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `epoch.go` file with the following content:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建包含以下内容的`epoch.go`文件：
- en: '[PRE3]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Execute the code by running `go run epoch.go` in the main Terminal.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主终端中运行`go run epoch.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](img/74703915-d328-43b9-9ec7-4bbbc990943a.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/74703915-d328-43b9-9ec7-4bbbc990943a.png)'
- en: How it works...
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `time` package contains the `Unix` function which accepts two `int64` arguments,
    and the seconds and nanoseconds of epoch time. This way, you can get the `Time`
    instance from the epoch value.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`time`包包含`Unix`函数，它接受两个`int64`参数，即时期时间的秒数和纳秒数。这样，您可以从时期值获取`Time`实例。'
- en: To obtain the epoch value from the `Time` instance, the method with the same
    name as the creation of `Time` from epoch, `Unix`, can be called. There is one
    more method called `UnixNano`, which returns the count of milliseconds instead
    of seconds.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要从`Time`实例获取时期值，可以调用与从时期创建`Time`相同名称的方法`Unix`。还有一个名为`UnixNano`的方法，它返回毫秒的计数，而不是秒。
- en: Retrieving time units from the date
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从日期中检索时间单位
- en: The `Time` type also provides the API to retrieve time units from the instance.
    This means you are able to find out what day in a month or what hour in a day
    the instance represents.  This recipe shows how to obtain such units.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`Time`类型还提供了从实例中检索时间单位的API。这意味着您可以找出实例表示的月份中的哪一天，或者一天中的哪个小时。本教程展示了如何获取这样的单位。'
- en: How to do it...
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter04/recipe05`.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter04/recipe05`。
- en: Navigate to the directory.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `units.go` file with the following content:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建包含以下内容的`units.go`文件：
- en: '[PRE4]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Execute the code by running `go run units.go` in the main Terminal.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主终端中运行`go run units.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](img/a18e0d22-8751-42ab-a76e-54b4bf68ead0.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a18e0d22-8751-42ab-a76e-54b4bf68ead0.png)'
- en: How it works...
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Time` type provides methods to extract time units. The preceding example
    shows the extraction of a weekday, month, and the day of a month. Similarly, the
    hour, seconds, and other units can be extracted.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`Time`类型提供了提取时间单位的方法。前面的示例显示了提取星期几、月份和月份的日期。类似地，还可以提取小时、秒和其他单位。'
- en: Naturally, the units that are not provided by the API directly need to be derived
    from the existing one.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 自然地，API直接未提供的单位需要从现有单位中派生出来。
- en: Date arithmetics
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日期算术
- en: The `Time` type of the `time` package also allows you to perform basic arithmetic
    on the given date and time. This way, you can find out past and future dates.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`time`包的`Time`类型还允许您对给定的日期和时间执行基本算术运算。这样，您可以找出过去和未来的日期。'
- en: How to do it...
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter04/recipe06`.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter04/recipe06`。
- en: Navigate to the directory.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `arithmetics.go` file with the following content:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建包含以下内容的`arithmetics.go`文件：
- en: '[PRE5]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Execute the code by running `go run arithmetics.go` in the main Terminal.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主终端中运行`go run arithmetics.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](img/e4106be0-dec1-4342-908b-44dcd867bcaa.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4106be0-dec1-4342-908b-44dcd867bcaa.png)'
- en: How it works...
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Time` type of the `time` package provides two essential methods to operate
    on date and time.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`time`包的`Time`类型提供了两种操作日期和时间的基本方法。'
- en: The first method, `Add`, accepts the `time.Duration` and `AddDate`. With the `Add`
    method, you can shift the time toward the future with the positive sign and move
    the time backward just by adding the negative sign.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法`Add`接受`time.Duration`和`AddDate`。使用`Add`方法，您可以通过正号将时间向未来移动，并通过添加负号将时间向后移动。
- en: The second method, `AddDate`, consumes the `int64` arguments as the year, month,
    and day, and adds the bigger time amounts.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法`AddDate`，消耗`int64`参数作为年、月和日，并添加更大的时间量。
- en: Beware that `AddDate` normalizes the result, the same as the `time.Date` function.
    Normalization means that adding the month to Aug-31 will result in Oct-1, because
    the following month contains only 30 days (Sep-31 does not exist).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`AddDate`会对结果进行标准化，与`time.Date`函数相同。标准化意味着将月份添加到8月31日将导致10月1日，因为接下来的一个月只有30天（9月31日不存在）。
- en: Finding the difference between two dates
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找两个日期之间的差异
- en: Finding the difference between two dates is not an unusual task. For this operation,
    the Go standard package `time`, respectively the `Time` type, provides supporting
    methods.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 查找两个日期之间的差异并不是一项不寻常的任务。对于这个操作，Go标准包`time`，分别是`Time`类型，提供了支持方法。
- en: How to do it...
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter04/recipe07`.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter04/recipe07`。
- en: Navigate to the directory.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `diff.go` file with the following content:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`diff.go`文件，内容如下：
- en: '[PRE6]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Execute the code by running `go run diff.go` in the main Terminal.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在主终端中运行`go run diff.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](img/4d05543a-bf46-4d35-9888-f3d353b5722b.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4d05543a-bf46-4d35-9888-f3d353b5722b.png)'
- en: How it works...
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Sub` method of the `Time` instance is the universal one to find out the
    difference between two dates. The result is `time.Duration`, which represents
    the nanosecond count between these dates.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`Time`实例的`Sub`方法是找出两个日期之间差异的通用方法。结果是`time.Duration`，表示这些日期之间的纳秒计数。'
- en: Note that if the difference exceeds the limit of the maximum/minimum `time.Duration`,
    then the maximum or minimum is returned.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果差异超过了最大/最小`time.Duration`的限制，那么将返回最大或最小值。
- en: The functions `Since` and `Until` are just a shorter way on how to work out
    the difference between now and the given date. These work as their names prompts.
    The `Since` function returns the same result as `time.Now().Sub(t)`; similarly,
    the `Until` returns the same result as `t.Sub(time.Now())`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`Since`和`Until`只是计算现在和给定日期之间差异的一种更简洁的方式。它们的工作方式与它们的名称提示的一样。`Since`函数返回的结果与`time.Now().Sub(t)`相同；同样，`Until`返回的结果与`t.Sub(time.Now())`相同。
- en: The `Sub` method naturally also counts with time zones. So, the difference is
    returned with respect to the location of each `Time` instance.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`Sub`方法自然也考虑了时区。因此，差异是相对于每个`Time`实例的位置返回的。'
- en: Converting between time zones
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在不同时区之间转换
- en: Dealing with time zones is hard. A good way to handle the different time zones
    is to keep one timezone as referential in the system and convert the others if
    needed. This recipe shows you how the conversion of time between time zones is
    done.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 处理时区很困难。处理不同时区的一个好方法是将一个时区作为系统中的参考时区，并在需要时转换其他时区。这个配方向您展示了如何在不同时区之间进行时间转换。
- en: How to do it...
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter04/recipe08`.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter04/recipe08`。
- en: Navigate to the directory.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `timezones.go` file with the following content:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`timezones.go`文件，内容如下：
- en: '[PRE7]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Execute the code by running `go run timezones.go` in the main Terminal.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在主终端中运行`go run timezones.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](img/06f456c8-8d94-4a35-9f9c-127fc9104f02.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/06f456c8-8d94-4a35-9f9c-127fc9104f02.png)'
- en: How it works...
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Time` type provides the `In` method which consumes the pointer to `time.Location`.
    The returned `Time` is the original one converted to the given time zone. Note
    that the `Time` instance is considered to be immutable, so the methods changing
    the instance result in a new `Time` instance.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`Time`类型提供了`In`方法，它消耗指向`time.Location`的指针。返回的`Time`是原始的转换为给定时区的时间。请注意，`Time`实例被认为是不可变的，因此改变实例的方法会导致新的`Time`实例。'
- en: The `time` package refers to the *IANA Time Zone* database as a source of locations.
    The `LoadLocation` function looks for the directory or ZIP file from the `ZONEINFO`
    environment variable. If not found, the known installation locations on UNIX systems
    are searched. Finally, it looks in `$GOROOT/lib/time/zoneinfo.zip`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`time`包引用*IANA时区*数据库作为位置的来源。`LoadLocation`函数查找`ZONEINFO`环境变量中的目录或ZIP文件。如果找不到，则在UNIX系统上搜索已知的安装位置。最后，它在`$GOROOT/lib/time/zoneinfo.zip`中查找。'
- en: Running the code block periodically
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定期运行代码块
- en: Besides the date and time operations, the `time` package also provides support
    for periodic and delayed code execution. Typically, the application health checks,
    activity checks, or any periodic job can be implemented this way.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 除了日期和时间操作，`time`包还提供了对周期性和延迟代码执行的支持。通常，应用程序健康检查、活动检查或任何周期性作业都可以通过这种方式实现。
- en: How to do it...
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter04/recipe09`.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter04/recipe09`。
- en: Navigate to the directory.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `ticker.go` file with the following content:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`ticker.go`文件，内容如下：
- en: '[PRE8]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Execute the code by running `go run ticker.go` in the main Terminal.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在主终端中运行`go run ticker.go`来执行代码。
- en: Wait a few seconds, and then press *Ctrl* + *C* to send `SIGINT` a signal.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待几秒钟，然后按*Ctrl* + *C*发送`SIGINT`信号。
- en: 'You will see the following output:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](img/c22423f1-d477-4182-8e45-4e9bd9bf34db.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c22423f1-d477-4182-8e45-4e9bd9bf34db.png)'
- en: How it works...
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Ticker` holds the `C` channel which delivers the periodical ticks. The
    instance is created with a given interval between ticks. The interval is defined
    by the `time.Duration` value.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`Ticker`持有`C`通道，用于传递周期性的滴答声。实例是根据滴答声之间的给定间隔创建的。间隔由`time.Duration`值定义。'
- en: The code which is intended to be executed periodically is executed in the goroutine
    in an infinite loop. The reading from the `Ticker` channel blocks the loop until
    the tick is delivered.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 打算定期执行的代码在无限循环中的goroutine中执行。从`Ticker`通道读取会阻塞循环，直到传递滴答声。
- en: Note that once the `Ticker` is stopped by calling the `Stop` method, the `C`
    channel is not closed, it just stops delivering the ticks. For this reason, the
    preceding code contains the `select` construct where the stop channel can deliver
    the stop signal. This way, a graceful shutdown can be done.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，一旦调用`Stop`方法停止`Ticker`，`C`通道并不会关闭，它只是停止传递滴答声。因此，前面的代码包含了`select`结构，其中停止通道可以传递停止信号。这样就可以进行优雅的关闭。
- en: Waiting a certain amount of time
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 等待一定时间
- en: The previous recipe describes how to execute the code periodically. This recipe
    will show you how to execute the code with a delay.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例描述了如何定期执行代码。本示例将向您展示如何延迟执行代码。
- en: How to do it...
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter04/recipe10`.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter04/recipe10`。
- en: Navigate to the directory.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到该目录。
- en: 'Create the `delay.go` file with the following content:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`delay.go`文件，内容如下：
- en: '[PRE9]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Execute the code by running `go run delay.go` in the main Terminal.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主终端中运行`go run delay.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](img/5d718e9b-9730-4ca5-bdb7-8942f441d9fb.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d718e9b-9730-4ca5-bdb7-8942f441d9fb.png)'
- en: How it works...
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理是...
- en: To execute the code with some delay only once, the `Timer` from the `time` package
    can be used. The concept of how this works is the same as described in the previous recipe, *Running
    the code block periodically*.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行带有一定延迟的代码，可以使用`time`包中的`Timer`。这个工作原理与前面的*定期运行代码块*中描述的相同。
- en: The `Timer` contains the `C` channel, which delivers the tick after a given
    time. After that, no other ticks are delivered through the channel.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`Timer`包含`C`通道，在给定时间后传递滴答声。之后，该通道不会再传递其他滴答声。'
- en: The same functionality delivers the `AfterFunc` function of the `time` package.
    It just simplifies the usage. Note that there is no channel needed. The sample
    code uses the `sync.WaitGroup` to wait until the given function is executed.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的功能由`time`包的`AfterFunc`函数提供。它只是简化了使用。请注意，这里不需要通道。示例代码使用`sync.WaitGroup`来等待给定的函数执行。
- en: The `time.After` is the last option in the preceding example. The function returns
    a channel that delivers the tick after a given period. Note the difference between
    the `Timer` and `After` functions. The `Timer` is the reusable structure (it provides
    the `Stop` and `Reset` methods). On the other hand, the `After` function can only
    be used once as it does not provide any reset option.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`time.After`是前面示例中的最后选择。该函数返回一个通道，在给定时间后传递滴答声。请注意`Timer`和`After`函数之间的区别。`Timer`是可重用的结构（提供`Stop`和`Reset`方法）。另一方面，`After`函数只能使用一次，因为它不提供任何重置选项。'
- en: Timeout long-running operations
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超时长时间运行的操作
- en: The previous recipe describes the concept of executing the code with some delay.
    The same concept can be used to implement the timeout for long running operations.
    This recipe will illustrate how this can be done.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例描述了如何延迟执行代码的概念。相同的概念可以用来实现长时间运行操作的超时。本示例将说明如何实现这一点。
- en: How to do it...
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter04/recipe11`.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter04/recipe11`。
- en: Navigate to the directory.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到该目录。
- en: 'Create the `timeout.go` file with the following content:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`timeout.go`文件，内容如下：
- en: '[PRE10]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Execute the code by running `go run timeout.go` in the main Terminal.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主终端中运行`go run timeout.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](img/19a82e55-b388-4e05-a6dd-d69c8bad235b.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/19a82e55-b388-4e05-a6dd-d69c8bad235b.png)'
- en: How it works...
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理是...
- en: The timeout for the long-running operation in the previous code is implemented
    with the use of the `time.After` function, which provides the channel delivering
    the tick after the given period.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，长时间运行的操作的超时是通过`time.After`函数实现的，该函数提供在给定时间后传递的通道。
- en: The operation itself is wrapped to select a statement which chooses between
    the `time.After` channel and the default option, which executes the operation.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 操作本身被包装到一个选择语句中，该语句在`time.After`通道和默认选项之间进行选择，执行操作。
- en: Note that you need to allow the code to read from the `time.After` channel periodically
    to find out whether the timeout is exceeded or not. Otherwise, if the default
    code branch blocks the execution entirely, there is no way how to find out if
    the timeout has already elapsed.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您需要允许代码定期从`time.After`通道中读取，以了解超时是否已经超过。否则，如果默认的代码分支完全阻塞执行，就没有办法知道超时是否已经过去。
- en: There's more...
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The example implementation uses the `time.After` function, but the `Timer` function
    can also be used in the same way. The built-in libraries also use the `context.WithTimeout` to
    implement timeout functionality.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 示例实现使用了`time.After`函数，但`Timer`函数也可以以相同的方式使用。内置库还使用`context.WithTimeout`来实现超时功能。
- en: Serializing the time and date
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 序列化时间和日期
- en: When serializing the date and time information, it is necessary to choose the
    proper format. This recipe will illustrate how the `time` package helps to choose
    one and do the serialization properly.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在序列化日期和时间信息时，需要选择合适的格式。本示例将说明`time`包如何帮助选择合适的格式并正确进行序列化。
- en: How to do it...
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter04/recipe12`.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter04/recipe12`。
- en: Navigate to the directory.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到该目录。
- en: 'Create the `serialize.go` file with the following content:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`serialize.go`文件，内容如下：
- en: '[PRE11]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Execute the code by running `go run serialize.go` in the main Terminal.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主终端中运行`go run serialize.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '>![](img/2ec429f9-a46c-45ee-871b-de8aaadbd171.png)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '>![](img/2ec429f9-a46c-45ee-871b-de8aaadbd171.png)'
- en: How it works...
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理是...
- en: The `Time` function implements the interfaces for Binary, Gob, and JSON serialization.
    The JSON format is considered to be very universal, so an example on how the value
    is serialized to JSON is shown. Note that the `Time` function serializes the value
    in the manner of RFC 3339 ([https://www.ietf.org/rfc/rfc3339.txt](https://www.ietf.org/rfc/rfc3339.txt)),
    which proposes a so-called internet date/time format.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`Time`函数实现了二进制、Gob和JSON序列化的接口。JSON格式被认为是非常通用的，因此展示了将值序列化为JSON的示例。请注意，`Time`函数以RFC
    3339（[https://www.ietf.org/rfc/rfc3339.txt](https://www.ietf.org/rfc/rfc3339.txt)）的方式序列化值，该规范提出了所谓的互联网日期/时间格式。'
- en: Another very universal way to serialize/keep the time is to use the epoch time.
    The epoch time is independent of timezones because it is defined by seconds/nanoseconds
    elapsed since an absolute point in time. Finally, it is represented as a number
    so there is no reason to serialize and deserialize the value.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种非常通用的序列化/保留时间的方法是使用纪元时间。纪元时间与时区无关，因为它是由自某一绝对时间点以来经过的秒/纳秒定义的。最后，它被表示为一个数字，因此没有理由对值进行序列化和反序列化。
