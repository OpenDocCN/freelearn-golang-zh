- en: Connecting the Network
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接网络
- en: 'This chapter contains the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含以下示例：
- en: Resolving local IP addresses
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析本地IP地址
- en: Connecting to the remote server
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到远程服务器
- en: Resolving the domain by IP address and vice versa
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过IP地址解析域名，反之亦然
- en: Connecting to the HTTP server
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到HTTP服务器
- en: Parsing and building a URL
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析和构建URL
- en: Creating an HTTP request
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建HTTP请求
- en: Reading and writing HTTP headers
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取和写入HTTP头
- en: Handling HTTP redirects
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理HTTP重定向
- en: Consuming the RESTful API
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用RESTful API
- en: Sending a simple email
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送简单的电子邮件
- en: Calling the JSON-RPC service
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用JSON-RPC服务
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: This chapter is all about networking. Most of the recipes in this chapter are
    focused on the client side. We will go through how to resolve basic information
    about the network on the machine, domain names and IP resolution, and connecting
    through TCP-related protocols such as HTTP and SMTP. Finally, we will make a remote
    procedure call via JSON-RCP 1.0 with the use of the standard library.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要讨论网络。本章中的大多数示例都集中在客户端。我们将介绍如何解析有关机器、域名和IP解析的基本信息，以及如何通过TCP相关协议（如HTTP和SMTP）进行连接。最后，我们将使用标准库进行JSON-RCP
    1.0的远程过程调用。
- en: Check whether Go is properly installed. The *Getting ready* section from the *Retrieving
    Golang version* recipe from [Chapter 1](acf67248-0aa9-4150-a43b-d13eb9de89f2.xhtml), *Interacting
    With Environment,* will help you. Verify if any other application blocks the `7070` port.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 检查Go是否已正确安装。[第1章](acf67248-0aa9-4150-a43b-d13eb9de89f2.xhtml)中的*准备就绪*部分中的*检索Golang版本*示例，*与环境交互*，将有所帮助。验证是否有其他应用程序阻止了`7070`端口。
- en: Resolving local IP addresses
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析本地IP地址
- en: This recipe explains how to retrieve IP addresses from available local interfaces.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例解释了如何从可用的本地接口中检索IP地址。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter07/recipe01`.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter07/recipe01`。
- en: Navigate to the directory.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `interfaces.go` file with the following content:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`interfaces.go`文件，内容如下：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Execute the code by running `go run interfaces.go` in the main Terminal.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主终端中运行`go run interfaces.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](img/ddce79d8-a358-413f-8c89-f021731934eb.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ddce79d8-a358-413f-8c89-f021731934eb.png)'
- en: How it works...
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The net package contains the `Interfaces` function, which lists the network
    interfaces as a slice of the `Interface` struct. The `Interface` struct has the `Addrs` method,
    which lists the available network addresses. This way, you can list the addresses
    by their interfaces.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: net包包含`Interfaces`函数，它将网络接口列为`Interface`结构的切片。`Interface`结构具有`Addrs`方法，它列出可用的网络地址。这样，您可以按接口列出地址。
- en: Another option is to use the `InterfaceAddrs` function of the `net` package,
    which provides the slice of structs that implement the `Addr` interface. This
    provides you with methods to obtain the information you want.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选项是使用`net`包的`InterfaceAddrs`函数，它提供了实现`Addr`接口的结构体切片。这为您提供了获取所需信息的方法。
- en: Connecting to the remote server
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到远程服务器
- en: TCP-based protocols are the most significant protocols used in network communication.
    Just as a reminder, HTTP, FTP, SMTP, and other protocols are part of this group. This
    recipe gives you an insight on how to connect to the TCP server in general.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 基于TCP的协议是网络通信中最重要的协议。作为提醒，HTTP、FTP、SMTP和其他协议都属于这一组。本示例让您了解如何一般连接到TCP服务器。
- en: How to do it...
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter07/recipe02`.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter07/recipe02`。
- en: Navigate to the directory.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `tcpclient.go` file with the following content:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`tcpclient.go`文件，内容如下：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Execute the code by running `go run tcpclient.go` in the main Terminal.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主终端中运行`go run tcpclient.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](img/bccd624a-a108-4726-9e67-e477ed5af73a.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bccd624a-a108-4726-9e67-e477ed5af73a.png)'
- en: How it works...
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The net package contains the `Dial` function, which consumes the network type
    and address. In the previous example, the network is `tcp` and the address is
    `localhost:8080`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: net包包含`Dial`函数，它消耗网络类型和地址。在前面的示例中，网络是`tcp`，地址是`localhost:8080`。
- en: Once the `Dial` function is successful, the `Conn` type is returned, which serves
    as a reference to the opened socket. The `Conn` interface also defines the `Read`
    and `Write` functions, so they can be used as `Writer` and `Reader` functions
    for writing and reading from the socket. Finally, the sample code uses `Scanner`
    to obtain the response. Note that the `Scanner`, in this case, works because of
    the brake lines. Otherwise, the more generic `Read` method should be used. In
    the example, the `Read` deadline is set via the `SetReadDeadline` method. The
    important thing about this is that the deadline is not a duration, but a `Time`.
    This means the deadline is set as a time point in the future. If you are reading
    the data from a socket in a loop and need to set the read timeout to 10 seconds,
    each iteration should contain code such as `conn.SetReadDeadline(time.Now().Add(10*time.Second))`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`Dial`函数成功，就会返回`Conn`类型，它作为已打开套接字的引用。`Conn`接口还定义了`Read`和`Write`函数，因此它们可以用作写入和从套接字读取的`Writer`和`Reader`函数。最后，示例代码使用`Scanner`来获取响应。请注意，这种情况下`Scanner`可以工作是因为有换行符。否则，应该使用更通用的`Read`方法。在示例中，通过`SetReadDeadline`方法设置了`Read`截止日期。关键之处在于截止日期不是持续时间，而是`Time`。这意味着截止日期被设置为将来的时间点。如果您在循环中从套接字读取数据并需要将读取超时设置为10秒，则每次迭代都应包含类似于`conn.SetReadDeadline(time.Now().Add(10*time.Second))`的代码。
- en: Just to enlighten the whole code sample, the HTTP server from the `HTTP` standard
    package is used as a counterpart to the client. This part is covered in a separate
    recipe.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 只是为了解释整个代码示例，使用了`HTTP`标准包中的HTTP服务器作为客户端的对应部分。这部分在另一个示例中有所涵盖。
- en: Resolving the domain by IP address and vice versa
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过IP地址解析域名，反之亦然
- en: This recipe will introduce you to how you can translate IP addresses into host
    addresses and vice versa.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程将介绍如何将IP地址转换为主机地址，反之亦然。
- en: How to do it...
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: Open the console and create the folder `chapter07/recipe03`.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter07/recipe03`。
- en: Navigate to the directory.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `lookup.go` file with the following content:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`lookup.go`文件，内容如下：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Execute the code by running `go run lookup.go` in the main Terminal.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主终端中运行`go run lookup.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '![](img/5e731d6f-2943-4a89-9c3c-b4758c812f9d.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e731d6f-2943-4a89-9c3c-b4758c812f9d.png)'
- en: How it works...
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The resolution of the domain name from the IP address can be done with the `LookupAddr`
    function from the `net` package. To find out the `IP` address from the domain
    name, the `LookupIP` function is applied.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 从IP地址解析域名可以使用`net`包中的`LookupAddr`函数来完成。要从域名找出IP地址，应用`LookupIP`函数。
- en: Connecting to the HTTP server
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到HTTP服务器
- en: The previous recipe, *Connecting to the remote server,* gave us an insight into
    how to connect the TCP server at a lower level. In this recipe, communication
    with the HTTP server at a higher level will be shown.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的教程*连接到远程服务器*让我们深入了解了如何在较低级别连接TCP服务器。在这个教程中，将展示如何在较高级别与HTTP服务器通信。
- en: How to do it...
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: Open the console and create the folder `chapter07/recipe04`.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter07/recipe04`。
- en: Navigate to the directory.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `http.go` file with the following content:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`http.go`文件，内容如下：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Execute the code by running `go run http.go` in the main Terminal.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主终端中运行`go run http.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '![](img/5b70d6e0-fa81-4aa0-ab14-68185d52291e.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5b70d6e0-fa81-4aa0-ab14-68185d52291e.png)'
- en: How it works...
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Connecting to the HTTP server can be done with help of the `net/http` package.
    Naturally, there are more ways you can achieve this, but the code above illustrates
    two of the most common approaches. The first option implemented the `simplePost` function,
    and illustrates the use of a default client. The POST method is chosen here as
    it is more complex than GET. The `Post` method accepts the URL, content type,
    and body in the form of `Reader`. Invoking the `Post` function immediately requests
    the server and returns the result.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到HTTP服务器可以借助`net/http`包来完成。当然，你还有其他方法可以实现这一点，但上面的代码说明了两种最常见的方法。第一种选项实现了`simplePost`函数，并且演示了使用默认客户端。这里选择了POST方法，因为它比GET更复杂。`Post`方法接受URL、内容类型和`Reader`形式的主体。调用`Post`函数立即请求服务器并返回结果。
- en: Note that the `Post` method is just wrapping a function that uses the `http.DefaultClient`
    in its implementation. The `net/http` package also contains the `Get` function.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`Post`方法只是在其实现中使用了`http.DefaultClient`的一个包装函数。`net/http`包还包含`Get`函数。
- en: 'The `useRequest` function implements the same functionality, but with the use
    of a more customizable API and its own instance of `Client`. The implementation
    utilizes the `NewRequest` function to create the request based on these given
    arguments: method, URL, and request body. The content type must be set separately
    to the `Header` property. The request is executed with the `Do` method, which
    is created on the `Client`.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`useRequest`函数实现了相同的功能，但使用了更可定制的API和自己的`Client`实例。该实现利用`NewRequest`函数根据给定的参数创建请求：方法、URL和请求主体。内容类型必须单独设置到`Header`属性中。请求是通过`Client`上创建的`Do`方法执行的。'
- en: See also
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating an HTTP request* recipe that will help you assemble a request
    in detail.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*创建一个HTTP请求*的教程将帮助您详细组装请求。'
- en: Parsing and building a URL
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析和构建URL
- en: In many cases, it is better to manipulate a URL with the use of handy tools
    than trying to handle it as a simple string. Go standard libraries naturally contain
    the utilities to manipulate a URL. This recipe will go through some of these major
    functions.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，最好使用方便的工具来操作URL，而不是试图将其作为简单的字符串处理。Go标准库自然包含了操作URL的工具。这个教程将介绍其中一些主要功能。
- en: How to do it...
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: Open the console and create the folder `chapter07/recipe05`.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter07/recipe05`。
- en: Navigate to the directory.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `url.go` file with the following content:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`url.go`文件，内容如下：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Execute the code by running `go run url.go` in the main Terminal.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主终端中运行`go run url.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '![](img/c373cc32-7a41-4cad-b4e1-f4f39a2f4d57.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c373cc32-7a41-4cad-b4e1-f4f39a2f4d57.png)'
- en: How it works...
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `net/url` package is designed to help you with the manipulation and parsing
    of a URL. The `URL` struct contains the necessary fields to put a URL together.
    With the `String` method of the `URL` struct, the transformation to a simple string
    can be easily done.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`net/url`包旨在帮助您操作和解析URL。`URL`结构包含了组合URL所需的字段。通过`URL`结构的`String`方法，可以轻松地将其转换为简单的字符串。'
- en: When the string representation is available and additional manipulation is needed,
    the `Parse` function of `net/url` can be utilized. This way, the string can be
    transformed to a `URL` struct, and the underlying URL can be modified.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当字符串表示可用且需要额外操作时，可以利用`net/url`的`Parse`函数。这样，字符串可以转换为`URL`结构，并且可以修改底层URL。
- en: Creating an HTTP request
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个HTTP请求
- en: This recipe will show you how to construct a HTTP request with specific parameters.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程将向您展示如何使用特定参数构造HTTP请求。
- en: How to do it...
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: Open the console and create the folder `chapter07/recipe06`.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter07/recipe06`。
- en: Navigate to the directory.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `request.go` file with the following content:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`request.go`文件，内容如下：
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Execute the code by running `go run request.go` in the main Terminal.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主终端中运行`go run request.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '![](img/1dd93ab3-741d-4210-9731-15401233a43c.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1dd93ab3-741d-4210-9731-15401233a43c.png)'
- en: How it works...
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The more complex way to construct the request is presented in the sample code.
    With the `NewRequest` method of the `net/http` package, the pointer to the `Request`
    struct is returned. The function consumes the method's request, URL, and body
    of the request. Notice the way the form is built. Instead of using the plain string,
    the `url.Values` struct is used. Finally, the `Encode` method is called to encode
    the given form values. The headers are set via the `http.Header` property of the
    request.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 构造请求的更复杂的方式在示例代码中呈现。使用`net/http`包的`NewRequest`方法返回`Request`结构的指针。该函数消耗方法的请求、URL和请求的主体。注意表单的构建方式。使用`url.Values`结构而不是使用普通字符串。最后，调用`Encode`方法对给定的表单值进行编码。通过请求的`http.Header`属性设置头。
- en: Reading and writing HTTP headers
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取和写入HTTP头
- en: The previous recipe describes how you can create a HTTP request in general.
    This recipe will go into detail on how to read and write request headers.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例描述了如何一般创建HTTP请求。本示例将详细介绍如何读取和写入请求头。
- en: How to do it...
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter07/recipe07`.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter07/recipe07`。
- en: Navigate to the directory.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `headers.go` file with the following content:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建包含以下内容的`headers.go`文件：
- en: '[PRE6]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Execute the code by running `go run headers.go` in the main Terminal.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主终端中运行`go run headers.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](img/c967698b-5d62-4f82-bca4-24abeb3a84a2.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c967698b-5d62-4f82-bca4-24abeb3a84a2.png)'
- en: How it works...
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The headers in the `http` package are, in fact, represented as `map[string][]string`,
    and this way, the `Header` type must be handled. The preceding code shows how
    to set and read the header values. The important thing about the header is that
    the value of the header key is the `string` slice. So, each key in a header can
    contain multiple values.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`http`包中的头实际上表示为`map[string][]string`，因此必须处理`Header`类型。前面的代码显示了如何设置和读取头值。关于头的重要事情是头键的值是`string`切片。因此，头中的每个键可以包含多个值。'
- en: The `Set` method of the `Header` type sets the one-item slice under the given
    key. On the other hand, the `Add` method appends the values to the slice.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`Header`类型的`Set`方法设置给定键下的单项切片。另一方面，`Add`方法将值附加到切片。'
- en: Using the `Get` method will retrieve the first value from the slice under the
    given key. If the whole slice is needed, the `Header` needs to be handled as a
    map. The whole header key can be removed by using the `Del` method.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Get`方法将从给定键下的切片中检索第一个值。如果需要整个切片，则需要将`Header`处理为映射。可以使用`Del`方法删除整个头键。
- en: Both the server and client use the `Request` and `Header` type of `http` package
    so that handling is the same on the server side and on the client side.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器和客户端都使用`http`包的`Request`和`Header`类型，因此在服务器端和客户端端的处理方式相同。
- en: Handling HTTP redirects
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理HTTP重定向
- en: In some cases, you need more control over how redirects are handled. This recipe
    will show you the mechanism which the Go client implements so that you have more
    control over handling HTTP redirects.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您需要更多控制重定向的处理方式。本示例将向您展示Go客户端实现的机制，以便您更多地控制处理HTTP重定向。
- en: How to do it...
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter07/recipe08`.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter07/recipe08`。
- en: Navigate to the directory.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `redirects.go` file with the following content:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建包含以下内容的`redirects.go`文件：
- en: '[PRE7]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Execute the code by running `go run redirects.go` in the main Terminal.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主终端中运行`go run redirects.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](img/16caaadf-4b4a-439c-bf90-621f97acd7af.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16caaadf-4b4a-439c-bf90-621f97acd7af.png)'
- en: How it works...
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作...
- en: The `Client` of the `http` package contains the `CheckRedirect` field. The field
    is a function that has the `req` and `via` parameters. `req` is the upcoming request
    and `via` refers to the previous requests. This way, you can modify the request
    after the redirect. In the previous example, the `Known-redirects` header is modified.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`http`包的`Client`包含`CheckRedirect`字段。该字段是一个具有`req`和`via`参数的函数。`req`是即将到来的请求，`via`指的是以前的请求。这样，您可以在重定向后修改请求。在前面的示例中，修改了`Known-redirects`头。'
- en: In case the `CheckRedirect` function returns the error, the last response with
    a closed body accompanied with a wrapped error is returned. In case the `http.ErrUseLastResponse`
    is returned, the last response is returned, but the body is not closed so it is
    possible to read it.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`CheckRedirect`函数返回错误，则返回带有包装错误的关闭主体的最后响应。如果返回`http.ErrUseLastResponse`，则返回最后的响应，但主体未关闭，因此可以读取它。
- en: By default, the `CheckRedirect` property is nil. In this case, it has a limit
    of 10 redirects. After this count, redirecting is stopped.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`CheckRedirect`属性为nil。在这种情况下，它最多有10次重定向。超过此计数后，重定向将停止。
- en: Consuming the RESTful API
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消费RESTful API
- en: The RESTful API is the most common way applications and servers provide access
    to their services. This recipe will show you how it can be consumed with the help
    of a HTTP client from the standard library.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful API是应用程序和服务器提供其服务访问的最常见方式。本示例将向您展示如何使用标准库中的HTTP客户端来消费它。
- en: How to do it...
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter07/recipe09`.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter07/recipe09`。
- en: Navigate to the directory.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `rest.go` file with the following content:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建包含以下内容的`rest.go`文件：
- en: '[PRE8]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Execute the code by running `go run rest.go` in the main Terminal.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主终端中运行`go run rest.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](img/026dbca2-62a0-4b65-8374-3237366a0446.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/026dbca2-62a0-4b65-8374-3237366a0446.png)'
- en: How it works...
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The preceding sample code shows what the REST API could look like and how it
    could be consumed. Note that the `decodeCity` and `decodeCities` functions benefit
    from the fact that the `Body` of the request implements the `Reader` interface.
    The deserialization of the structures is done via `json.Decoder`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例代码显示了REST API的样子以及如何使用它。请注意，`decodeCity`和`decodeCities`函数受益于请求的`Body`实现了`Reader`接口。结构的反序列化通过`json.Decoder`完成。
- en: Sending a simple email
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发送简单的电子邮件
- en: This recipe will give you a brief description on how to use the standard library
    to connect to the SMTP server and send an email.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将简要介绍如何使用标准库连接到SMTP服务器并发送电子邮件。
- en: Getting ready
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will use a Google Gmail account to send the email message.
    With a few configurations, this recipe will be useful for other SMTP servers as
    well.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用谷歌Gmail账户发送电子邮件。通过一些配置，本教程也适用于其他SMTP服务器。
- en: How to do it...
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter07/recipe10`.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter07/recipe10`。
- en: Navigate to the directory.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `smtp.go` file with the following content:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`smtp.go`文件，内容如下：
- en: '[PRE9]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Execute the code by running `go run smtp.go` in the main Terminal.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主终端中运行`go run smtp.go`来执行代码。
- en: Enter the account's email (Google account) and hit *Enter*.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入账户的电子邮件（谷歌账户）并按*Enter*。
- en: Enter the password for the account and hit *Enter*.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入账户的密码并按*Enter*。
- en: 'You will see the following output before checking your email box:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查电子邮箱之前，您将看到以下输出：
- en: '![](img/d25ce8a3-09ac-4b00-b46b-f4fbe10e3cbc.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d25ce8a3-09ac-4b00-b46b-f4fbe10e3cbc.png)'
- en: How it works...
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `smtp` package provides the basic functionality to interact with the SMTP
    server. The `Dial` function provides the client. The most significant methods
    of the client are `Mail`, which sets the sender mail, `Rcpt`, which sets the recipients
    mail, and `Data`, which provides the `Writer`, where the content of the mail can
    be written. Finally, the `Quit` method sends QUIT and closes the connection to
    the server.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`smtp`包提供了与SMTP服务器交互的基本功能。`Dial`函数提供客户端。客户端最重要的方法是`Mail`，用于设置发件人邮件，`Rcpt`，用于设置收件人邮件，以及`Data`，提供`Writer`，用于写入邮件内容。最后，`Quit`方法发送QUIT并关闭与服务器的连接。'
- en: The previous example uses a secured connection to the SMTP server so the `Auth`
    method of the client is utilized to set the authentication, and the `StartTLS`
    method is called to start a secured connection to the server.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例使用了安全连接到SMTP服务器，因此客户端的`Auth`方法用于设置身份验证，并调用`StartTLS`方法以启动与服务器的安全连接。
- en: Note that the `Auth` structure is created separately with the `PlainAuth` function
    of the `smtp` package.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`Auth`结构是通过`smtp`包的`PlainAuth`函数单独创建的。
- en: Calling the JSON-RPC service
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调用JSON-RPC服务
- en: This recipe will illustrate how procedures via the JSON-RPC protocol can be
    called with use of the standard library.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将说明如何使用标准库调用JSON-RPC协议的过程。
- en: How to do it...
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter07/recipe11`.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter07/recipe11`。
- en: Navigate to the directory.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `jsonrpc.go` file with the following content:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`jsonrpc.go`文件，内容如下：
- en: '[PRE10]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Execute the code by running `go run jsonrpc.go` in the main Terminal.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主终端中运行`go run jsonrpc.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](img/b08751bc-986a-4834-a877-7b3691ec84ab.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b08751bc-986a-4834-a877-7b3691ec84ab.png)'
- en: How it works...
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Go's standard library implements JSON-RPC 1.0 as part of its built-in packages.
    The `jsonrpc` package implements the function `Dial`, which produces the client
    for calling remote procedures. The client itself contains the `Call` method, which
    accepts the procedure call, arguments, and the pointer where the result is stored.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Go的标准库作为其内置包的一部分实现了JSON-RPC 1.0。`jsonrpc`包实现了`Dial`函数，用于生成调用远程过程的客户端。客户端本身包含`Call`方法，接受过程调用、参数和结果存储的指针。
- en: The `createServer` will create a sample server to test the client call.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`createServer`将创建一个示例服务器来测试客户端调用。'
- en: The HTTP protocol can be used as a transport layer for JSON-RPC. The `net/rpc` package
    contains the `DialHTTP` function, which is able to create the client and call
    the remote procedures.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP协议可以用作JSON-RPC的传输层。`net/rpc`包包含`DialHTTP`函数，能够创建客户端并调用远程过程。
