- en: Working with Databases
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数据库
- en: 'This chapter contains the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含以下配方：
- en: Connecting the database
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接数据库
- en: Validating the connection
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证连接
- en: Executing statements
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行语句
- en: Operating with prepared statements
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用预处理语句进行操作
- en: Canceling the pending query
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取消挂起的查询
- en: Reading query result metadata
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取查询结果元数据
- en: Retrieving data from query result
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从查询结果中检索数据
- en: Parsing query result into map
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将查询结果解析为映射
- en: Handling transactions
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理事务
- en: Executing stored procedures and functions
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行存储过程和函数
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Each database server has its own specifics and also, the protocols are different.
    Naturally, the communication with the database within the language library must
    be customized to work with the specific protocol.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 每个数据库服务器都有自己的特点，而且协议也不同。自然地，语言库内部与数据库通信必须定制以适用于特定协议。
- en: The Go standard library provides a unified API for communication and operations
    on the database server. This API is located in the `sql` package. To use the specific
    database server, the driver must be imported. This driver needs to be `sql` package-compliant.
    This way, you will be able to benefit from the unified approach. In this chapter,
    we will describe the basics of database operations, transaction handling, and
    finally, how to use the stored procedures. Note that we are going to illustrate
    the approach on the PostgreSQL database, but the approaches are applicable to
    most other databases.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Go标准库提供了用于与数据库服务器通信和操作的统一API。此API位于`sql`包中。要使用特定的数据库服务器，必须导入驱动程序。此驱动程序需要符合`sql`包的规范。这样，您将能够受益于统一的方法。在本章中，我们将描述数据库操作的基础知识、事务处理以及如何使用存储过程。请注意，我们将在PostgreSQL数据库上说明该方法，但这些方法适用于大多数其他数据库。
- en: Connecting the database
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接数据库
- en: The essential part of working with the database is the connection to the database
    itself. The Go standard package covers only the abstraction on how the interaction
    with the database works, and a third-party driver must be used.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 与数据库工作的关键部分是与数据库本身的连接。Go标准包仅涵盖了与数据库交互的抽象，必须使用第三方驱动程序。
- en: In this recipe, we will show how to connect to the PostgreSQL database. However,
    the approach is applicable to all other databases whose driver implements the
    standard API.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将展示如何连接到PostgreSQL数据库。但是，这种方法适用于所有其他驱动程序实现了标准API的数据库。
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Verify if Go is properly installed by calling the `go version` command in your
    Terminal. If the command fails, do the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在终端中调用`go version`命令验证Go是否已正确安装。如果命令失败，请执行以下操作：
- en: Pull the PostgreSQL driver by `go get -u github.com/lib/pq`
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`go get -u github.com/lib/pq`获取PostgreSQL驱动程序
- en: Install the PostgreSQL database server (optionally use a Docker image instead
    of installing to your host system)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装PostgreSQL数据库服务器（可选择使用Docker镜像而不是安装到主机系统）
- en: We will use default user `postgres` with password `postgres`
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将使用默认用户`postgres`和密码`postgres`
- en: Create a database named `example`
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建名为`example`的数据库
- en: How to do it...
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter08/recipe01`.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter08/recipe01`。
- en: Navigate to the directory.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `connect.go` file with the following content:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下内容创建`connect.go`文件：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Execute the code by `go run connect.go`.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`go run connect.go`执行代码。
- en: 'See the output:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看输出：
- en: '![](img/dc43c34f-78b8-4cd5-82e5-6541753840dc.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc43c34f-78b8-4cd5-82e5-6541753840dc.png)'
- en: How it works...
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The standard lib package, `database/sql,` provides the `Open` function to initialize
    the connection to the database with the driver name and connection details (connection
    URL in this case). Note that the `Open` function does not create the connection
    immediately, and may only validate the parameters passed to the function.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 标准库包`database/sql`提供了`Open`函数，用于使用驱动程序名称和连接详细信息（在本例中为连接URL）初始化与数据库的连接。请注意，`Open`函数不会立即创建连接，可能只会验证传递给函数的参数。
- en: The connection to the database could be verified by the `Ping` method, which
    is available in the returned `DB` struct pointer.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过返回的`DB`结构指针中可用的`Ping`方法验证与数据库的连接。
- en: The driver itself is initialized in the `init` function of the `driver` package.
    The driver registers itself with the driver name by the `Register` function of
    the `sql` package. The `github.com/lib/pq` driver registers itself as `postgres`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 驱动程序本身在`driver`包的`init`函数中初始化。驱动程序通过`sql`包的`Register`函数向驱动程序名称注册自身。`github.com/lib/pq`驱动程序将自身注册为`postgres`。
- en: Validating the connection
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证连接
- en: The connections to the database in the driver implementation may be pooled,
    and it is possible that the connection pulled out of the pool is broken. This
    recipe will show how to verify if the connection is alive.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 驱动程序实现中的数据库连接可能被池化，并且可能从池中拉出的连接已经断开。本配方将展示如何验证连接是否仍然有效。
- en: Getting ready
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Verify if Go is properly installed by calling the `go version` command in your
    Terminal. If the command fails, follow the *Getting ready* section in the first
    recipe of this chapter.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在终端中调用`go version`命令验证Go是否已正确安装。如果命令失败，请按照本章第一个配方中的*准备就绪*部分进行操作。
- en: How to do it...
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter08/recipe02`.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter08/recipe02`。
- en: Navigate to the directory.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `verify.go` file with the following content:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下内容创建`verify.go`文件：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Execute the code by `go run verify.go`.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`go run verify.go`执行代码。
- en: 'See the output:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看输出：
- en: '![](img/9d5ba3af-08c2-4c54-93bd-25541dc94e8e.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9d5ba3af-08c2-4c54-93bd-25541dc94e8e.png)'
- en: How it works...
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: As mentioned in the previous recipe, *Connecting the database*, the `Open` function
    may just verify the connection details, but it is not mandatory to connect the
    database immediately. The actual connection to the database is usually lazy loaded
    and it is created by the first execution of statement against the database.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一篇中提到的*连接数据库*，`Open`函数可能只是验证连接细节，但不一定立即连接数据库。实际连接到数据库通常是延迟加载的，并且是通过对数据库的第一次语句执行创建的。
- en: The pointer to the `DB` structure provides the `Ping` method, which usually
    does an idempotent call to the database. The variation to the `Ping` method is
    `PingContext`, which just adds the ability to cancel or time out the database
    call. Note that if the `Ping` function fails, the connection is removed from the
    database pool.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`DB`结构的指针提供了`Ping`方法，通常对数据库进行幂等调用。`Ping`方法的变体是`PingContext`，它只是添加了取消或超时数据库调用的能力。请注意，如果`Ping`函数失败，连接将从数据库池中移除。'
- en: The pointer to the `DB`  struct also provides the method `Conn` to retrieve
    the connection from the database pool. By using the connection, you are actually
    guaranteed that the same database session is used. In the same way the pointer
    to the `DB` struct contains the `PingContext` method, the `Conn` pointer provides
    the `PingContext` method to check if the connection is still alive.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`DB`结构的指针还提供了`Conn`方法，用于从数据库池中检索连接。通过使用连接，您实际上保证使用相同的数据库会话。同样，`DB`结构的指针包含`PingContext`方法，`Conn`指针提供了`PingContext`方法来检查连接是否仍然活动。'
- en: Executing statements
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行语句
- en: In previous recipes, we have gone through how to connect and validate the connection
    to the database. This recipe will describe how to execute statements against the
    database.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在以前的示例中，我们已经学习了如何连接和验证与数据库的连接。本示例将描述如何执行针对数据库的语句。
- en: Getting ready
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Verify if Go is properly installed by calling the `go version` command in your
    Terminal. If the command fails, follow the *Getting ready* section in the first
    recipe of this chapter.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在终端中调用`go version`命令来验证Go是否已正确安装。如果命令失败，请按照本章第一篇中的*准备工作*部分进行操作。
- en: Set up the PostgreSQL server, as mentioned in the first recipe of this chapter.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 按照本章第一篇中的说明设置PostgreSQL服务器。
- en: How to do it...
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Run the following SQL script against your sample database:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对您的示例数据库运行以下SQL脚本：
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Open the console and create the folder `chapter08/recipe03`.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter08/recipe03`。
- en: Navigate to the directory.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `statement.go` file with the following content:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`statement.go`文件，内容如下：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Execute the code by `go run statement.go`.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`go run statement.go`执行代码。
- en: 'See the output:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看输出：
- en: '![](img/17b952d6-d23c-442a-bfb1-cbb262c3e22b.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17b952d6-d23c-442a-bfb1-cbb262c3e22b.png)'
- en: How it works...
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Generally, there are two types of statements that we can execute against the
    database. With the first type of statements we do not expect any rows as a result
    and finally, we get no output or just a number of affected rows. This type of
    statement is executed by the `Exec` method on the `DB` struct pointer. In the
    preceding sample code, we have the `TRUNCATE` and `INSERT` statements. But this
    way, the DDL and DCL statements could be executed too.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们可以执行两种类型的语句。对于第一种类型的语句，我们不期望任何行作为结果，最终我们得到的是没有输出或者只是受影响的行数。这种类型的语句通过`DB`结构指针上的`Exec`方法执行。在前面的示例代码中，我们有`TRUNCATE`和`INSERT`语句。但是这种方式也可以执行DDL和DCL语句。
- en: 'There are four main categories of statements:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 有四种主要的语句类别：
- en: '**DDL** (**Data Definition Language**): This language allows you to create
    and modify the database scheme'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DDL**（**数据定义语言**）：此语言允许您创建和修改数据库模式'
- en: '**DML** (**Data Modeling Language**): This language helps you to modify the
    data'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DML**（**数据建模语言**）：此语言帮助您修改数据'
- en: '**DCL** (**Data Control Language**): This language defines the access control
    over the objects'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DCL**（**数据控制语言**）：此语言定义了对对象的访问控制'
- en: '**TCL** (**Transaction Control Language**): This language controls the transaction.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TCL**（**事务控制语言**）：此语言控制事务。'
- en: The second type is the statement where we are expecting the result in the form
    of rows; these are usually called queries. This type of statement is usually executed
    by the `Query` or `QueryContext` method.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种类型是我们期望以行的形式得到结果的语句；这些通常被称为查询。这种类型的语句通常通过`Query`或`QueryContext`方法执行。
- en: Operations with prepared statements
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用准备好的语句
- en: Prepared statements bring security, efficiency, and convenience. Naturally,
    it is possible to use them with the Go standard library; this recipe will show
    how.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好的语句带来了安全性、效率和便利性。当然，可以使用它们与Go标准库一起使用；本示例将展示如何使用。
- en: Getting ready
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Verify if Go is properly installed by calling the `go version` command in your
    Terminal. If the command fails, follow the *Getting ready* section in the first
    recipe of this chapter.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在终端中调用`go version`命令来验证Go是否已正确安装。如果命令失败，请按照本章第一篇中的*准备工作*部分进行操作。
- en: Set up the PostgreSQL server, as mentioned in the first recipe of this chapter.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 按照本章第一篇中的说明设置PostgreSQL服务器。
- en: How to do it...
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Run the following SQL script against your sample database:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对您的示例数据库运行以下SQL脚本：
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Open the console and create the folder `chapter08/recipe04`.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter08/recipe04`。
- en: Navigate to the directory.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `prepared.go` file with the following content:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`prepared.go`文件，内容如下：
- en: '[PRE5]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Execute the code by `go run prepared.go`.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`go run prepared.go`执行代码。
- en: 'See the output:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看输出：
- en: '![](img/f93601d9-2fb8-4db8-a3dd-e263f03b0cf0.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f93601d9-2fb8-4db8-a3dd-e263f03b0cf0.png)'
- en: How it works...
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: To create the prepared statement, the `Prepare` method of the pointer to the `DB`
    struct needs to be called. After this, the `Exec` or `Query` method on the `Stmt`
    pointer is called with given parameters for the statement.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建准备好的语句，需要调用指向`DB`结构的`Prepare`方法。之后，使用给定的参数调用`Stmt`指针上的`Exec`或`Query`方法。
- en: The prepared statement is created within the scope of the `DB` pointer, but
    on the specific connection from the connection pool. The statement remembers which
    connection has been used, and when it is invoked, it tries to use the same connection.
    If the connection is busy or was closed, then it recreates the prepared statement
    and calls the statement on a new connection.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好的语句是在`DB`指针的范围内创建的，但是在连接池中的特定连接上。语句记住了使用过的连接，并且在调用时尝试使用相同的连接。如果连接忙或已关闭，则重新创建准备好的语句并在新连接上调用语句。
- en: The situation changes if you use the prepared statement within an opened transaction
    `*Tx`, in this case, the prepared statement is bound to one connection which is
    related to the transaction.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在打开的事务`*Tx`中使用准备好的语句，则情况会发生变化，在这种情况下，准备好的语句绑定到与事务相关的一个连接。
- en: Note that prepared statements prepared within the transaction cannot be used
    with the DB pointer, and vice versa.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，事务中准备的语句不能与DB指针一起使用，反之亦然。
- en: In general, the prepared statement works the way the statement is created on
    the database side. The database returns the identifier of the prepared statement.
    The prepared statement is executed during the following call, and only the parameters
    for the statement are provided.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，准备好的语句的工作方式是在数据库端创建语句。数据库返回准备好的语句的标识符。准备好的语句在以下调用期间执行，并且只提供语句的参数。
- en: Canceling the pending query
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 取消挂起的查询
- en: In some cases, you need to prune long running statements to limit the consumption
    of resources, or just if the result is not relevant, or if the statement is running
    too long. Since Go 1.8, the canceling of queries is possible. This recipe explains how
    to use this feature.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您需要取消长时间运行的语句以限制资源的消耗，或者仅当结果不相关或语句运行时间过长时。自Go 1.8以来，取消查询是可能的。本配方解释了如何使用此功能。
- en: Getting ready
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Verify if Go is properly installed by calling the `go version` command in your
    Terminal. If the command fails, follow the *G**etting ready* section in the first
    recipe of this chapter.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在终端中调用`go version`命令验证Go是否已正确安装。如果命令失败，请按照本章第一个配方中的*准备工作*部分进行操作。
- en: Set up the PostgreSQL server, as mentioned in the first recipe of this chapter.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 按照本章第一个配方中提到的方式设置PostgreSQL服务器。
- en: How to do it...
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Run the following SQL script against your sample database:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对您的示例数据库运行以下SQL脚本：
- en: '[PRE6]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Open the console and create the folder `chapter08/recipe05`.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter08/recipe05`。
- en: Navigate to the directory.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `cancelable.go` file with the following content:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下内容创建`cancelable.go`文件：
- en: '[PRE7]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Execute the code by `go run cancelable.go`.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`go run cancelable.go`执行代码。
- en: 'See the output:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看输出：
- en: '![](img/dd8da9ab-b8ad-4b5b-bf43-3f0d766910ea.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd8da9ab-b8ad-4b5b-bf43-3f0d766910ea.png)'
- en: How it works...
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `database/sql` package provides the possibility of canceling the pending
    statement. All the methods named `XXXContext` of `DB` struct pointer are the ones
    that consume the context, and it is possible to cancel the pending statement.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`database/sql`包提供了取消挂起语句的可能性。`DB`结构指针的所有名为`XXXContext`的方法都会消耗上下文，并且可以取消挂起的语句。'
- en: The canceling of the statement is possible only if the driver supports the `Context`
    variant. If it doesn't, the variant without the `Context` is executed.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在驱动程序支持`Context`变体时才能取消语句。如果不支持，将执行不带`Context`的变体。
- en: With the `Context` variant and `context.WithTimeout`, you can create a timeout
    of the statement call.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Context`变体和`context.WithTimeout`，您可以创建语句调用的超时。
- en: 'Note that the sample code execution ends with the error `pq: canceling statement
    due to user request`, which corresponds with that of `CancelFunc`, which was called
    right after the query was executed.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '请注意，示例代码执行以错误`pq: canceling statement due to user request`结束，这与调用查询后立即调用的`CancelFunc`相对应。'
- en: Reading query result metadata
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取查询结果元数据
- en: Besides the data itself, the result of a query contains metadata related to
    the result set. This contains information about the column names, types, and other
    information about the data. This recipe will explain how to retrieve the data.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 除了数据本身，查询结果还包含与结果集相关的元数据。这包含有关列名、类型和数据的其他信息。本配方将解释如何检索数据。
- en: Getting ready
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Verify if Go is properly installed by calling the `go version` command in your
    Terminal. If the command fails, follow the *Getting ready *section in the first
    recipe of this chapter.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在终端中调用`go version`命令验证Go是否已正确安装。如果命令失败，请按照本章第一个配方中的*准备工作*部分进行操作。
- en: Set up the PostgreSQL server, as mentioned in the first recipe of this chapter.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 按照本章第一个配方中提到的方式设置PostgreSQL服务器。
- en: How to do it...
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Run the following SQL script against your sample database:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对您的示例数据库运行以下SQL脚本：
- en: '[PRE8]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Open the console and create the folder `chapter08/recipe06`.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter08/recipe06`。
- en: Navigate to the directory.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `metadata.go` file with the following content:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下内容创建`metadata.go`文件：
- en: '[PRE9]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Execute the code by `go run metadata.go`.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`go run metadata.go`执行代码。
- en: 'See the output:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看输出：
- en: '![](img/48545a27-4614-44a1-a20b-5abdf0ae7f82.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/48545a27-4614-44a1-a20b-5abdf0ae7f82.png)'
- en: How it works...
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `Query` and `QueryContext` methods of the pointer to the `DB` struct result
    in the `Rows` struct pointer. The `Rows` pointer provides the methods `Columns`
    and `ColumnTypes,` which contain the information about the structure of the returned
    result set.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`DB`结构指针的`Query`和`QueryContext`方法会导致`Rows`结构指针。`Rows`指针提供`Columns`和`ColumnTypes`方法，其中包含有关返回结果集结构的信息。'
- en: The `Columns` method returns just the slice of strings with column names.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`Columns`方法返回带有列名的字符串切片。'
- en: The `ColumnTypes` method returns the slice of `ColumnType` pointers, which contains
    more rich information about the returned result set. The preceding code prints
    out the detailed information of what information the `ColumnType` pointer exposes.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`ColumnTypes`方法返回`ColumnType`指针的切片，其中包含有关返回结果集的更丰富信息。上述代码打印出了`ColumnType`指针公开的详细信息。'
- en: Retrieving data from a query result
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从查询结果中检索数据
- en: While working with the database, the basic part is the extraction of data through
    executed query. This recipe will illustrate how it is done when using the standard
    library `database/sql` package.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在与数据库交互时，基本部分是通过执行查询来提取数据。本配方将说明使用标准库`database/sql`包时如何执行此操作。
- en: Getting ready
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Verify if Go is properly installed by calling the `go version` command in your
    Terminal. If the command fails, follow the *Getting ready* section in the first
    recipe of this chapter.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 验证Go是否已正确安装，通过在终端中调用`go version`命令。如果命令失败，请按照本章第一个配方中的*准备工作*部分进行操作。
- en: Set up the PostgreSQL server, as mentioned in the first recipe of this chapter.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 按照本章第一个配方中的说明设置PostgreSQL服务器。
- en: How to do it...
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Run the following SQL script against your sample database:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对样本数据库运行以下SQL脚本：
- en: '[PRE10]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Open the console and create the folder `chapter08/recipe07`.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter08/recipe07`。
- en: Navigate to the directory.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `data.go` file with the following content:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`data.go`文件，内容如下：
- en: '[PRE11]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Execute the code by `go run data.go`.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`go run data.go`执行代码。
- en: 'See the output:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看输出：
- en: '![](img/2ac9cc08-6adb-48da-b0a6-a89657d80791.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ac9cc08-6adb-48da-b0a6-a89657d80791.png)'
- en: How it works...
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The pointer to `Rows` coming from the `Query` method of the pointer to the `DB`
    struct provides the methods to read and extract the data from the result set.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 来自指向`DB`结构的`Query`方法的`Rows`指针提供了从结果集中读取和提取数据的方法。
- en: Note that first the `Next` method should be called to shift the cursor to the
    next result row. The `Next` method returns `true` if there is any other row, or
    `false` if not.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，首先应调用`Next`方法将光标移动到下一个结果行。`Next`方法如果有其他行则返回`true`，否则返回`false`。
- en: After the new row is fetched by `Next`, the `Scan` method could be called to
    extract the data into a variable. The number of variables must match the number
    of columns in `SELECT`, otherwise, the `Scan` method is not able to extract the
    data.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在通过`Next`获取新行后，可以调用`Scan`方法将数据提取到变量中。变量的数量必须与`SELECT`中的列数匹配，否则`Scan`方法无法提取数据。
- en: The important part of the code is that, after each `Next` method, the `Err`
    method should be called to find out if there was an error during the reading of
    the next row.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的重要部分是，在每次调用`Next`方法后，应调用`Err`方法来查找在读取下一行时是否出现错误。
- en: The preceding example intentionally uses the `NULL` value for the second record.
    The `NULL` database values could not be extracted to not nullable types, `string`,
    in this case, the `NullString` type must be used.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例故意对第二条记录使用了`NULL`值。`NULL`数据库值无法提取到不可为空类型，例如`string`，在这种情况下，必须使用`NullString`类型。
- en: For completeness, the sample code covers the `QueryRow` method, which slightly
    differs from the `Query` method. This one returns a pointer to the `Row` struct
    which provides only the `Scan` method. Note, the fact that there are no rows could
    only be detected after the `Scan` method is called.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完整起见，示例代码涵盖了`QueryRow`方法，它与`Query`方法略有不同。这个方法返回指向`Row`结构的指针，该结构仅提供`Scan`方法。请注意，只有在调用`Scan`方法之后才能检测到没有行的情况。
- en: Parsing the query result into a map
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将查询结果解析为映射
- en: Sometimes the result of the query or the structure of the table is not clear,
    and the result needs to be extracted to some flexible structure. This brings us
    to this recipe, where the extraction of values mapped to column names will be
    presented.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 有时查询结果或表的结构不清晰，需要将结果提取到某种灵活的结构中。这就引出了这个配方，其中将介绍将值提取到与列名映射的灵活结构中。
- en: Getting ready
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Verify if Go is properly installed by calling the `go version` command in your
    Terminal. If the command fails, follow the *Getting ready* section in the first
    recipe of this chapter.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 验证Go是否已正确安装，通过在终端中调用`go version`命令。如果命令失败，请按照本章第一个配方中的*准备工作*部分进行操作。
- en: Set up the PostgreSQL server, as mentioned in the first recipe of this chapter.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 按照本章第一个配方中的说明设置PostgreSQL服务器。
- en: How to do it...
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Run the following SQL script against your sample database:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对样本数据库运行以下SQL脚本：
- en: '[PRE12]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Open the console and create the folder `chapter08/recipe08`.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter08/recipe08`。
- en: Navigate to the directory.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `querymap.go` file with the following content:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`querymap.go`文件，内容如下：
- en: '[PRE13]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Execute the code by `go run querymap.go`.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`go run querymap.go`执行代码。
- en: 'See the output:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看输出：
- en: '![](img/d69cc84f-33e3-48b3-9d36-1a85b6f52253.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d69cc84f-33e3-48b3-9d36-1a85b6f52253.png)'
- en: How it works...
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Note that the preceding code represents two approaches. The `parseWithRawBytes`
    function uses the preferred approach, but it is highly dependent on the driver
    implementation. It works the way that the slice of `RawBytes`, with the same length
    as the number of the columns in the result, is created. Because the `Scan` function
    requires pointers to values, we need to create the slice of pointers to the slice
    of `RawBytes` (slice of byte slices), then it can be passed to the `Scan` function.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，上述代码表示了两种方法。`parseWithRawBytes`函数使用了首选方法，但它高度依赖于驱动程序的实现。它的工作方式是创建与结果中列数相同长度的`RawBytes`切片。因为`Scan`函数需要值的指针，所以我们需要创建指向`RawBytes`切片（字节切片的切片）的指针切片，然后将其传递给`Scan`函数。
- en: After it is successfully extracted, we just remap the values. In the example
    code, we cast it to the `string` because the driver uses the `string` type to
    store the values if the `RawBytes` is the target. Beware that the form of stored
    values depends on driver implementation.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 提取成功后，我们只需重新映射值。在示例代码中，我们将其转换为`string`，因为如果`RawBytes`是目标，驱动程序使用`string`类型来存储值。请注意，存储值的形式取决于驱动程序的实现。
- en: The second approach, `parseToMap`, is usable in the case that the first one
    does not work. It uses almost the same approach, but the slice of values is defined
    as the slice of empty interfaces. This approach relies on the driver. The driver
    should determine the default type to assign to the value pointer.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法`parseToMap`在第一种方法不起作用的情况下是可用的。它几乎使用相同的方法，但值的切片被定义为空接口的切片。这种方法依赖于驱动程序。驱动程序应确定要分配给值指针的默认类型。
- en: Handling transactions
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理事务
- en: Transaction control comes under the common things that need to be kept in mind
    while working with the database. This recipe will show you how to handle the transaction
    with the help of the `sql` package.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 事务控制是在处理数据库时需要牢记的常见事情。本配方将向您展示如何使用`sql`包处理事务。
- en: Getting ready
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Verify if Go is properly installed by calling the `go version` command in your
    Terminal. If the command fails, follow the *Getting ready* section in the first
    recipe of this chapter.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在终端中调用`go version`命令来验证Go是否已正确安装。如果命令失败，请按照本章第一个配方中的*准备工作*部分进行操作。
- en: Set up the PostgreSQL server, as mentioned in the first recipe of this chapter.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 设置PostgreSQL服务器，如本章第一个配方中所述。
- en: How to do it...
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Run the following SQL script against your sample database:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对您的示例数据库运行以下SQL脚本：
- en: '[PRE14]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Open the console and create the folder `chapter08/recipe09`.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter08/recipe09`。
- en: Navigate to the directory.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `transaction.go` file with the following content:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`transaction.go`文件，内容如下：
- en: '[PRE15]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Execute the code by `go run transaction.go`.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`go run transaction.go`执行代码。
- en: 'See the output:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 看输出：
- en: '![](img/237bdb28-3ba6-4a4a-8c08-f1212e8f43fc.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/237bdb28-3ba6-4a4a-8c08-f1212e8f43fc.png)'
- en: How it works...
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The transaction handling, as the preceding code illustrates, is very simple.
    The method, `Begin`, of the `DB` struct pointer creates the transaction with a
    default isolation level (depends on driver). The transaction, by its nature, is
    kept on the single connection and is represented by the returned pointer to the `Tx`
    struct.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的代码所示，事务处理非常简单。`DB`结构指针的`Begin`方法创建具有默认隔离级别的事务（取决于驱动程序）。事务本质上保留在单个连接上，并由返回的`Tx`结构指针表示。
- en: The pointer, `Tx`, implements all the methods available to the `DB` struct pointer;
    the exception is that all the operations are done within the transaction (if the
    database is able to process the statement in the transaction).  The transaction
    is ended by calling the `Rollback` or `Commit` method on the `Tx` struct pointer.
    After this call, the transaction is finished and other operations will end by
    the error `ErrTxDone`.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 指针`Tx`实现了`DB`结构指针可用的所有方法；唯一的例外是所有操作都在事务中完成（如果数据库能够在事务中处理语句）。通过在`Tx`结构指针上调用`Rollback`或`Commit`方法结束事务。在此调用之后，事务结束，其他操作将以错误`ErrTxDone`结束。
- en: There is one more useful method on the `DB` struct pointer called `BeginTx`,
    which creates the transaction `Tx` struct pointer but is also enhanced with given
    context. If the context is canceled, the transaction will be rolled back  (a further
    `Commit` call will result in the error). The `BeginTx` also consumes the pointer
    to `TxOptions`, which is optional and could define the isolation level.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`DB`结构指针上还有一个有用的方法叫做`BeginTx`，它创建了事务`Tx`结构指针，同时也增强了给定的上下文。如果上下文被取消，事务将被回滚（进一步的`Commit`调用将导致错误）。`BeginTx`还消耗了`TxOptions`指针，这是可选的，可以定义隔离级别。'
- en: Executing stored procedures and functions
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行存储过程和函数
- en: Dealing with stored procedures and functions is always more complex than usual
    statements, especially if the procedures contain custom types. The standard library
    provides the API to deal with these, but the final word of how much the stored
    procedure calls are supported is in the driver implementation. This recipe will
    show a very simple function/procedure call.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 处理存储过程和函数总是比通常的语句更复杂，特别是如果过程包含自定义类型。标准库提供了处理这些的API，但存储过程调用的支持程度取决于驱动程序的实现。本配方将展示一个非常简单的函数/过程调用。
- en: Getting ready
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Verify if Go is properly installed by calling the `go version` command in your
    Terminal. If the command fails, follow the *Getting ready* section in the first
    recipe of this chapter.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在终端中调用`go version`命令来验证Go是否已正确安装。如果命令失败，请按照本章第一个配方中的*准备工作*部分进行操作。
- en: Set up the PostgreSQL server, as mentioned in the first recipe of this chapter.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 设置PostgreSQL服务器，如本章第一个配方中所述。
- en: How to do it...
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Run the following SQL script against your sample database:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对您的示例数据库运行以下SQL脚本：
- en: '[PRE16]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Open the console and create the folder `chapter08/recipe10`.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter08/recipe10`。
- en: Navigate to the directory.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `procedure.go` file with the following content:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`procedure.go`文件，内容如下：
- en: '[PRE17]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Execute the code by `go run procedure.go`.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`go run procedure.go`执行代码。
- en: 'See the output:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 看输出：
- en: '![](img/25194205-e33a-4b71-b9d9-e9653189ff44.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/25194205-e33a-4b71-b9d9-e9653189ff44.png)'
- en: How it works...
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The calling of stored procedures is highly dependent on the driver and the database.
    Note that retrieving result on PostgreSQL database is very similar to querying
    tables. The `Query` or `QueryRow` method of the `DB` struct pointer is called,
    and the resulted rows or row pointer can be parsed to obtain the values.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 存储过程的调用高度依赖于驱动程序和数据库。请注意，在PostgreSQL数据库上检索结果与查询表非常相似。调用`DB`结构指针的`Query`或`QueryRow`方法，可以解析出结果行或行指针以获取值。
- en: The MySQL driver uses the `CALL` statement, if the stored procedure needs to
    be called.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要调用存储过程，MySQL驱动程序将使用`CALL`语句。
- en: The general problem for almost all drivers ia the `OUTPUT` parameters of stored
    procedures. Go 1.9 added support for such parameters, but the majority of drivers
    of commonly-used databases do not implement this yet. The solution, then, could
    be the usage of the driver with a nonstandard API.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有驱动程序的一般问题都是存储过程的`OUTPUT`参数。Go 1.9增加了对这些参数的支持，但常用数据库的大多数驱动程序尚未实现这一功能。因此，解决方案可能是使用具有非标准API的驱动程序。
- en: The way the `OUTPUT` params are supposed to work is that the procedure call
    will use the type `NamedArg` parameter from the `Named` function of the `database/sql`
    package. The `Value` field of the `NamedArg` struct should be of type `Out` which
    contains the `Dest` field, where the actual value of the `OUTPUT` parameter should
    be placed.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`OUTPUT`参数应该工作的方式是，存储过程调用将使用`database/sql`包中`Named`函数的`NamedArg`参数类型。`NamedArg`结构体的`Value`字段应该是`Out`类型，其中包含`Dest`字段，用于存放`OUTPUT`参数的实际值。'
