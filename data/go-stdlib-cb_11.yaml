- en: Tips and Tricks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提示和技巧
- en: 'This chapter will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下示例：
- en: Logging customization
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志定制
- en: Testing the code
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试代码
- en: Benchmarking the code
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对代码进行基准测试
- en: Creating subtests
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建子测试
- en: Testing the HTTP handler
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试HTTP处理程序
- en: Accessing tags via reflection
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过反射访问标签
- en: Sorting slices
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对切片进行排序
- en: Breaking HTTP handlers into groups
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将HTTP处理程序分成组
- en: Utilizing HTTP/2 server push
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用HTTP/2服务器推送
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: This last chapter adds some additional recipes related to testing, designing
    your application interface, and leveraging the packages, `sort` and `reflect`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这最后一章添加了一些与测试、设计应用程序接口以及利用`sort`和`reflect`包相关的附加示例。
- en: Check if Go is properly installed. The *Getting ready* section in the *Retrieving
    Golang version* recipe of  *[Chapter 1](acf67248-0aa9-4150-a43b-d13eb9de89f2.xhtml)*, *Interacting
    with the Environment* will help you.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 检查Go是否已正确安装。*[第1章](acf67248-0aa9-4150-a43b-d13eb9de89f2.xhtml)*中*准备就绪*部分的*检索Golang版本*示例，*与环境交互*将帮助您。
- en: Make sure the port `8080`  is not used by another application.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 确保端口`8080`未被其他应用程序使用。
- en: Logging customization
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志定制
- en: Besides the logging with the default logger from the `log` package, the standard
    library also provides a way to create the custom logger, according to the needs
    of the application or package. This recipe will give a brief insight on how to
    create one.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用`log`包中的默认记录器进行记录外，标准库还提供了一种根据应用程序或包的需求创建自定义记录器的方法。本示例将简要介绍如何创建自定义记录器。
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter11/recipe01`.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter11/recipe01`。
- en: Navigate to the directory.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the file `logging.go` with the following  content:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建名为`logging.go`的文件，其中包含以下内容：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Execute the code by `go run logging.go`.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`go run logging.go`执行代码。
- en: 'See the output:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看输出：
- en: '![](img/44cc10f1-f0cf-420c-a81f-be95d1ba11db.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44cc10f1-f0cf-420c-a81f-be95d1ba11db.png)'
- en: How it works...
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `log` package provides the `New` function which simplifies the creation
    of a customized logger. The `New` function consumes the `Writer`, which could
    be any object implementing the `Writer` interface, the prefix in the form of the
    string, and the form of the logged message that is composed of flags. The last
    argument is the most interesting because with it, you are able to enhance the
    log message with dynamic fields, such as date and filename.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`log`包提供了`New`函数，简化了自定义记录器的创建。`New`函数接受`Writer`作为参数，该参数可以是实现`Writer`接口的任何对象，以及以字符串形式的前缀和由标志组成的日志消息的形式。最后一个参数是最有趣的，因为通过它，您可以使用动态字段增强日志消息，例如日期和文件名。'
- en: Note that the preceding example uses, for the first logger, the `custLogger`, the
    flags configuring the message to display the date and time in front of the log
    message. The second one, named the `custLoggerEnh`, uses the flag, `Ldate` and
    `Lshortfile`, to show the filename and date.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，前面的示例中，第一个记录器`custLogger`配置了在日志消息前显示日期和时间的标志。第二个记录器`custLoggerEnh`使用标志`Ldate`和`Lshortfile`来显示文件名和日期。
- en: Testing the code
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试代码
- en: Testing and benchmarking naturally belong to software development. Go, as a
    modern language with its built-in libraries, supports these from scratch. In this recipe,
    the basics of testing will be described.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 测试和基准测试自然属于软件开发。作为一种现代语言，Go支持从头开始进行这些操作。在这个示例中，将描述测试的基础知识。
- en: How to do it...
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter11/recipe02`.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter11/recipe02`。
- en: Navigate to the directory.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the file `sample_test.go` with the following content:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建名为`sample_test.go`的文件，其中包含以下内容：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Execute the test by `go test -v`.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`go test -v`执行测试。
- en: 'See the output in the Terminal:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中查看输出：
- en: '![](img/ae338ff0-8ef9-4a6e-9f42-b92be7c20285.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae338ff0-8ef9-4a6e-9f42-b92be7c20285.png)'
- en: How it works...
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `testing` package of the standard library provides support for the code
    testing needs. The `test` function needs to fulfill the name pattern, `TestXXX`.
    By default, the test tool looks for the file named `xxx_test.go`. Note that each
    test function takes the `T` pointer argument, which provides the useful methods
    for test control. By the `T` struct pointer, the status of the test could be set.
    For instance, the methods `Fail` and `FailNow`, cause the test to fail. With the
    help of the `T` struct pointer, the test could be skipped by calling `Skip`, `Skipf`,
    or `SkipNow`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 标准库的`testing`包提供了对代码测试需求的支持。`test`函数需要满足名称模式`TestXXX`。默认情况下，测试工具会查找名为`xxx_test.go`的文件。请注意，每个测试函数都需要接受`T`指针参数，该参数提供了用于测试控制的有用方法。通过`T`结构指针，可以设置测试的状态。例如，`Fail`和`FailNow`方法会导致测试失败。借助`T`结构指针的帮助，可以通过调用`Skip`、`Skipf`或`SkipNow`来跳过测试。
- en: The interesting method of the `T` pointer is the method `Helper`. By calling
    the method `Helper`, the current function is marked as the helper function, and
    if the `FailNow` (`Fatal`) is called within this function, then the test output
    points to the code line where the function is called within the test, as can be
    seen in the preceding sample code.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`T`指针的有趣方法是`Helper`方法。通过调用`Helper`方法，当前函数被标记为辅助函数，如果在该函数内调用`FailNow`（`Fatal`），则测试输出将指向测试中调用该函数的代码行，如前面示例代码中所示。'
- en: Note that the `Log` method, (and its variants), are not visible if the test
    tool is not run in verbose mode (with `-v` flag), or if the particular test failed
    (this applies only for the `T` tests). Try to run this sample code without the
    `-v` flag.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果测试工具未以详细模式运行（使用`-v`标志），或者特定测试失败（仅适用于`T`测试），则`Log`方法（及其变体）将不可见。尝试在不使用`-v`标志的情况下运行此示例代码。
- en: See also
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The following recipe covers the basics of benchmarking
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下示例涵盖了基准测试的基础知识
- en: For a more detailed description of the testing package, see the rich documentation
    of the testing package at [https://golang.org/pkg/testing](https://golang.org/pkg/testing)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关测试包的更详细描述，请参阅[https://golang.org/pkg/testing](https://golang.org/pkg/testing)中测试包的丰富文档。
- en: Benchmarking the code
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对代码进行基准测试
- en: The previous recipe walks through the testing part of the testing package, and
    in this recipe, the basics of the benchmarking will be covered.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个示例介绍了测试包的测试部分，在本示例中将介绍基准测试的基础知识。
- en: How to do it...
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter11/recipe03`.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter11/recipe03`。
- en: Navigate to the directory.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the file `sample_test.go` with the following content:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建名为`sample_test.go`的文件，内容如下：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Execute the benchmark by `go test -bench=`.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`go test -bench=`执行基准测试。
- en: 'See the output in the Terminal:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中查看输出：
- en: '![](img/ca1e566d-420b-4c88-ae9b-f76989b3ff5c.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca1e566d-420b-4c88-ae9b-f76989b3ff5c.png)'
- en: How it works...
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Besides the pure test support, the testing package also provides the mechanisms
    for measuring the code performance. For this purpose, the `B` struct pointer as
    the argument is used, and the benchmarking functions in the test file are named
    as `BenchmarkXXXX`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 除了纯测试支持外，测试包还提供了用于测量代码性能的机制。为此，使用`B`结构指针作为参数，并且测试文件中的基准测试函数命名为`BenchmarkXXXX`。
- en: The essential part of the benchmark function is the manipulation with the timer
    and usage of the loop iteration counter `N`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 基准测试函数的关键部分是操作定时器和使用循环迭代计数器`N`。
- en: As you can see, the timer is manipulated with the methods, `Reset`/`Start`/`StopTimer`.
    By these, the result of the benchmark is influenced. Note that the timer starts
    running with the beginning of the benchmark function and the `ResetTimer` function
    just restarts it.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，定时器通过`Reset`/`Start`/`StopTimer`方法进行操作。通过这些方法，基准测试的结果会受到影响。请注意，定时器在基准测试函数开始时开始运行，而`ResetTimer`函数只是重新启动它。
- en: The `N` field of `B` is the iteration count within the measurement loop. The
    `N` value is set to a value high enough to reliably measure the result of the
    benchmark. The result in the benchmark log then displays the value of iterations
    and measured time per one iteration.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`B`的`N`字段是测量循环中的迭代次数。`N`值设置为足够高的值，以可靠地测量基准测试的结果。基准测试日志中显示迭代次数和每次迭代的测量时间。'
- en: See also
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The subsequent recipe shows how the subtests within the tests can be created
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一个示例将展示如何在测试中创建子测试
- en: For more options and information on benchmarking, take a look into the package
    documentation here: [https://golang.org/pkg/testing](https://golang.org/pkg/testing)
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关基准测试的更多选项和信息，请查看此处的包文档：[https://golang.org/pkg/testing](https://golang.org/pkg/testing)
- en: Creating subtests
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建子测试
- en: In some cases, it is useful to create a set of tests that could have a similar
    setup or clean-up code. This could be done without having a separate function
    for each test.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，有用的是创建一组可能具有类似设置或清理代码的测试。这可以在没有为每个测试创建单独函数的情况下完成。
- en: How to do it...
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter11/recipe04`.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter11/recipe04`。
- en: Navigate to the directory.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the file `sample_test.go` with the following content:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建名为`sample_test.go`的文件，内容如下：
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Execute the tests by `go test -v`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`go test -v`执行测试。
- en: 'See the output in the Terminal:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中查看输出：
- en: '![](img/2a644849-82e9-4c74-996f-b54f90f154da.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a644849-82e9-4c74-996f-b54f90f154da.png)'
- en: How it works...
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `T` struct of the `testing` package also provides the `Run` method that
    could be used to run the nested tests. The `Run` method requires the name of the
    subtest and the test function that will be executed. This approach could be beneficial
    while using, for example, the table driven tests. The code sample just uses a
    simple slice of `int` values as an input.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`testing`包的`T`结构还提供了`Run`方法，可用于运行嵌套测试。`Run`方法需要子测试的名称和将要执行的测试函数。例如，使用表驱动测试时，这种方法可能很有益。代码示例只是使用`int`值的简单切片作为输入。'
- en: The benchmarking struct `B`, also contains the same method, `Run`, which can
    provide a way of creating the subsequent steps of complex benchmarking.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 基准测试结构`B`也包含相同的方法`Run`，可以提供一种创建复杂基准测试后续步骤的方法。
- en: See also
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: There is still much more to find out in the package documentation, [https://golang.org/pkg/testing](https://golang.org/pkg/testing).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在包文档中仍有很多内容要找出，[https://golang.org/pkg/testing](https://golang.org/pkg/testing)。
- en: Testing the HTTP handler
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试HTTP处理程序
- en: The testing of the `HTTP` server could be complicated. The Go standard library
    simplifies this with a handy package, `net/http/httptest`. This recipe describes
    how to utilize this package to test the `HTTP` handlers.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 测试`HTTP`服务器可能会很复杂。Go标准库通过一个方便的包`net/http/httptest`简化了这一点。本示例描述了如何利用此包来测试`HTTP`处理程序。
- en: How to do it...
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter11/recipe05`.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter11/recipe05`。
- en: Navigate to the directory.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the file `sample_test.go` with the following content:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建名为`sample_test.go`的文件，内容如下：
- en: '[PRE4]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Execute the test by `go test`.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`go test`执行测试。
- en: 'See the output in the Terminal:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中查看输出：
- en: '![](img/64b6004e-183e-4200-98d7-91730c66c763.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/64b6004e-183e-4200-98d7-91730c66c763.png)'
- en: How it works...
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: For the testing of the `Handler` or `HandlerFunc`, the `net/http/httptest` could
    be leveraged. This package provides the struct `ResponseRecorder` that is able
    to record the content of the response and provide it back for asserting the values.
    For assembling the request, the `NewRequest` function of the `net/http` package
    is used.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`Handler`或`HandlerFunc`的测试，可以利用`net/http/httptest`。该包提供了`ResponseRecorder`结构，能够记录响应内容并将其提供回来以断言值。用于组装请求的是`net/http`包的`NewRequest`函数。
- en: The `net/http/httptest` package also contains the version of the HTTP server
    which starts listening on the systems chosen port on the localhost. This implementation
    is intended to be used for end-to-end testing.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`net/http/httptest`包还包含了在本地主机上监听系统选择端口的HTTP服务器版本。此实现旨在用于端到端测试。'
- en: Accessing tags via reflection
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过反射访问标签
- en: The Go language allows the tagging of structured fields with additional information.
    This information is usually used as additional information for encoders, or any
    kind of additional processing of struct. This recipe will show you how to access
    these.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Go语言允许给结构化字段打标签，附加额外信息。这些信息通常用作编码器的附加信息，或者对结构体进行任何类型的额外处理。这个示例将向你展示如何访问这些信息。
- en: How to do it...
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter11/recipe06`.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter11/recipe06`。
- en: Navigate to the directory.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the file `structtags.go` with the following content:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件`structtags.go`，内容如下：
- en: '[PRE5]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Execute the code by `go run structtags.go`.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`go run structtags.go`执行代码。
- en: 'See the output in the Terminal:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中查看输出：
- en: '![](img/3a755cf6-bb6e-4580-b8d4-883f0275db9f.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a755cf6-bb6e-4580-b8d4-883f0275db9f.png)'
- en: How it works...
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `struct` tags could be extracted with the use of the `reflect` package.
    By calling the `TypeOf`, we get the pointer `Type` for `Person`, subsequently,
    by calling the `Elem` we get the `Type` of the value which the pointer points
    to.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`reflect`包提取`struct`标签。通过调用`TypeOf`，我们得到了`Person`的指针`Type`，随后通过调用`Elem`，我们得到了指针指向的值的`Type`。
- en: The resulting `Type` gives us access to the `struct` type `Person` and its fields.
    By iterating over the fields and retrieving the fields, by calling the `Field`
    method, we obtain the `StructField`. The `StructField` type contains the `Tag`
    field which provides access to the `struct` tags. The `Get` method on the `StructTag`
    field then returns the specific tag.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 结果的`Type`让我们可以访问`struct`类型`Person`及其字段。通过遍历字段并调用`Field`方法检索字段，我们可以获得`StructField`。`StructField`类型包含`Tag`字段，该字段提供对`struct`标签的访问。然后，`StructTag`字段上的`Get`方法返回特定的标签。
- en: Sorting slices
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对切片进行排序
- en: The sorting of data is a very common task. The Go standard library simplifies
    the sorting by the sort package. This recipe gives a brief look at how to use
    it.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 数据排序是一个非常常见的任务。Go标准库通过sort包简化了排序。这个示例简要介绍了如何使用它。
- en: How to do it...
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter11/recipe07`.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter11/recipe07`。
- en: Navigate to the directory.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the file `sort.go` with the following content:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件`sort.go`，内容如下：
- en: '[PRE6]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Execute the code by `go run sort.go`.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`go run sort.go`执行代码。
- en: 'See the output in the Terminal:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中查看输出：
- en: '![](img/410f5f55-aca0-4785-a7e3-0f9aedde9643.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/410f5f55-aca0-4785-a7e3-0f9aedde9643.png)'
- en: How it works...
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The sample code shows both ways of how to comfortably sort a slice with the
    help of the `sort` package. The first approach is more ad hoc and it uses the
    `Slice` function of the `sort` package. The `Slice` function consumes the slice
    to be sorted and the so-called less function, which defines whether the element
    `i` should be sorted before element `j`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 示例代码展示了如何舒适地使用`sort`包对切片进行排序的两种方式。第一种方法更加临时，它使用了`sort`包的`Slice`函数。`Slice`函数消耗要排序的切片和所谓的less函数，该函数定义了元素`i`是否应该在元素`j`之前排序。
- en: 'The second approach requires more code and planning ahead. It leverages the
    `Interface` interface of the `sort` package. The interface acts as a representative
    of the data and requires it to implement essential methods on sorted data: `Len` (defines
    the amount of data), `Less` (less function), `Swap` (method called to swap the
    elements). If the data value implements this interface, then the `Sort` function
    of the `sort` package could be used.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法需要更多的代码和提前规划。它利用了`sort`包的`Interface`接口。该接口充当数据的代表，并要求其在排序数据上实现必要的方法：`Len`（定义数据的数量）、`Less`（less函数）、`Swap`（调用以交换元素）。如果数据值实现了这个接口，那么可以使用`sort`包的`Sort`函数。
- en: The primitive type slices `float64`, `int`, and `string` are covered in the
    `sort` package. So, the existing implementation could be used. For example, to
    sort a slice of strings, the `Strings` function could be called.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 原始类型切片`float64`、`int`和`string`在`sort`包中有涵盖。因此，可以使用现有的实现。例如，要对字符串切片进行排序，可以调用`Strings`函数。
- en: Breaking HTTP handlers into groups
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将HTTP处理程序分组
- en: This recipe gives advice on how the HTTP handlers could be separated into modules.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例提供了关于如何将HTTP处理程序分离成模块的建议。
- en: How to do it...
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter11/recipe08`.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter11/recipe08`。
- en: Navigate to the directory.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the file `handlegroups.go` with the following content:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件`handlegroups.go`，内容如下：
- en: '[PRE7]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Execute the code by `go run handlegroups.go`.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`go run handlegroups.go`执行代码。
- en: 'See the output:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看输出：
- en: '![](img/de4c1c5b-e888-4abc-b479-00cbfe6f1e05.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/de4c1c5b-e888-4abc-b479-00cbfe6f1e05.png)'
- en: 'Access the browser URL `http://localhost:8080/api/users`, the output should
    look like this:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问浏览器URL`http://localhost:8080/api/users`，输出应该如下所示：
- en: '![](img/9a9f2678-99d7-46e6-a522-bfd7c59a1404.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9a9f2678-99d7-46e6-a522-bfd7c59a1404.png)'
- en: 'In the same way, you can test `http://localhost:8080/ui/users`:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '同样，您可以测试`http://localhost:8080/ui/users`： '
- en: '![](img/110cb8f2-3bf7-4a57-b911-c8bfb2aa5ec9.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/110cb8f2-3bf7-4a57-b911-c8bfb2aa5ec9.png)'
- en: How it works...
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: For separating the handlers into modules, the code uses the `ServeMux` for each
    module, (`rest` and `ui`). The handling of URLs for the given module is defined
    relatively. This means if the final URL for the `Handler` should be `/api/users`,
    then the defined path within the module would be `/users`. The module itself would
    be set to `/api/` URL.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将处理程序分离成模块，代码使用了`ServeMux`来为每个模块（`rest`和`ui`）进行处理。给定模块的URL处理是相对定义的。这意味着如果`Handler`的最终URL应该是`/api/users`，那么模块内定义的路径将是`/users`。模块本身将设置为`/api/`
    URL。
- en: The module is plugged into the main `ServeMux` pointer named `mainMux` by leveraging
    the `StripPrefix` function, which removes the module prefix. For instance, the
    REST module created by the `restModule` function, is plugged into the main `ServeMux`
    by `StripPrefix("/api",restModule())`. The handled URL within the module will
    then be `/users`, instead of `/api/users`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用`StripPrefix`函数将模块插入到名为`mainMux`的主`ServeMux`指针中，模块被插入到主`ServeMux`中。例如，通过`StripPrefix("/api",restModule())`将由`restModule`函数创建的REST模块插入到主`ServeMux`中。然后模块内的处理URL将是`/users`，而不是`/api/users`。
- en: Utilizing HTTP/2 server push
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用HTTP/2服务器推送
- en: The HTTP/2 specification provides the server with the ability to push the resources,
    prior to being requested. This recipe shows you how to implement the server push.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP/2规范为服务器提供了在被请求之前推送资源的能力。本示例演示了如何实现服务器推送。
- en: Getting ready
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Prepare the private key and self-signed X-509 certificate. For this purpose,
    the `openssl` utility could be used. By executing the command `openssl genrsa -out server.key
    2048`, the private key derived with the use of the RSA algorithm is generated
    to file, `server.key`. Based on this private key, the X-509 certificate could
    be generated by calling `openssl req -new -x509 -sha256 -key server.key -out server.crt -days
    365`. The `server.crt` file is created.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 准备私钥和自签名X-509证书。为此，可以使用`openssl`实用程序。通过执行命令`openssl genrsa -out server.key 2048`，使用RSA算法生成私钥文件`server.key`。基于此私钥，可以通过调用`openssl
    req -new -x509 -sha256 -key server.key -out server.crt -days 365`生成X-509证书。创建了`server.crt`文件。
- en: How to do it...
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: Open the console and create the folder `chapter11/recipe09`.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter11/recipe09`。
- en: Navigate to the directory.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the file `push.go` with the following content:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件`push.go`，内容如下：
- en: '[PRE8]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Start the server by `go run push.go`.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`go run push.go`启动服务器。
- en: 'Open the browser and open the developer''s tool in URL `https://localhost:8080`
    (see the `Push` as initiator for `app.css`):'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器，在URL `https://localhost:8080` 中打开开发者工具（查看`Push`作为`app.css`的发起者）：
- en: '![](img/a9f38361-8c38-4b77-9ebc-26cc4e533d2e.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a9f38361-8c38-4b77-9ebc-26cc4e533d2e.png)'
- en: How it works...
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: First, note that the HTTP/2 requires the secured connection. The server push
    is very simple to implement. Since Go 1.8, the HTTP package provides the `Pusher`
    interface, which could be used to `Push` the assets before they are required.
    If the client, usually browser, supports the HTTP/2 protocol and the handshake
    with the server is successful, the `ResponseWriter` in `Handler` or `HandlerFunc`
    could be cast to `Pusher`. The `Pusher` provides only the  `Push` method. The
    `Push` method consumes the target (which could be the absolute path or absolute
    URL) to resource and `PushOptions`, which can provide the additional options (by
    default the nil could be used).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，注意HTTP/2需要安全连接。服务器推送非常简单实现。自Go 1.8以来，HTTP包提供了`Pusher`接口，可以在资源被请求之前用于`Push`资产。如果客户端（通常是浏览器）支持HTTP/2协议并且与服务器的握手成功，`Handler`或`HandlerFunc`中的`ResponseWriter`可以转换为`Pusher`。`Pusher`只提供`Push`方法。`Push`方法消耗目标（可以是绝对路径或绝对URL）到资源和`PushOptions`，可以提供额外选项（默认情况下可以使用nil）。
- en: In the preceding example, look at the output of the developer's tool in the
    browser. The pushed resource has the Initiator column with the value, `Push`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，查看浏览器中开发者工具的输出。推送的资源在Initiator列中具有值`Push`。
