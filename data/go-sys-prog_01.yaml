- en: Getting Started with Go and Unix Systems Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Go和Unix系统编程入门
- en: An operating system is the kind of software that allows you to communicate with
    the hardware, which means that you cannot use your hardware without an operating
    system. Unix is an operating system with many variants that have many things in
    common including their programming interface.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统是一种允许您与硬件通信的软件，这意味着没有操作系统，您无法使用硬件。Unix是一种具有许多变体的操作系统，它们有许多共同点，包括它们的编程接口。
- en: The Unix operating system was mainly programmed in C and not entirely in the
    assembly language, which makes it portable to other computer architectures without
    having to rewrite everything from scratch. It is important to understand that
    even if you are developing a Go program on a Unix machine, at the end of the day,
    your code will be translated to C functions and system calls because this is the
    only way to directly communicate with the Unix kernel. The main benefits you get
    from writing Go code instead of C code are smaller programs with less silly bugs.
    You will learn more about this in [Chapter 3](96c36f62-d505-408c-add5-af84cf25454a.xhtml)*,*
    *Advanced Go Features**.*
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Unix操作系统主要是用C语言编程的，而不是完全用汇编语言，这使得它可以在其他计算机架构上移植，而无需从头开始重写所有内容。重要的是要理解，即使您在Unix机器上开发Go程序，最终您的代码也会被翻译成C函数和系统调用，因为这是直接与Unix内核通信的唯一方式。与编写C代码相比，编写Go代码的主要好处是程序更小，bug更少。您将在[第3章](96c36f62-d505-408c-add5-af84cf25454a.xhtml)中了解更多关于这个的内容，*高级Go特性*。
- en: As this book will use Go, you will need to have a version of Go installed on
    your Unix machine. The good news is that there is a port of the Go programming
    language for almost all modern Unix systems including macOS, Linux, and FreeBSD.
    There is also a Windows port of Go, but this book will not deal with Microsoft
    Windows.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书将使用Go语言，您需要在Unix机器上安装Go的一个版本。好消息是，几乎所有现代Unix系统，包括macOS、Linux和FreeBSD都有Go编程语言的端口。Windows也有一个Go端口，但本书不涉及Microsoft
    Windows。
- en: Although there is a good chance that your Unix variant has a package for Go,
    you can also get Go from [https://golang.org/dl/](https://golang.org/dl/).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管您的Unix变体很可能有一个Go软件包，但您也可以从[https://golang.org/dl/](https://golang.org/dl/)获取Go。
- en: 'In this chapter, you will learn the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下主题：
- en: Systems programming
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统编程
- en: The advantages and disadvantages of Go
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go的优缺点
- en: The states of a Unix process
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unix进程的状态
- en: 'Two Go tools: `gofmt` and `godoc`'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个Go工具：`gofmt`和`godoc`
- en: The features of the latest Go version (1.8)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最新Go版本（1.8）的特性
- en: The structure of the book
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书的结构
- en: 'This book has three parts. The first part, which includes this chapter, is
    about Go and the Go features that can be handy when developing systems software:
    this does not mean that you should use all of them when developing your programs.
    The second part is all about programming with files, directories, and processes,
    which is the most common type of systems software. The third part explores goroutines,
    web applications, and network programming in Go, which is the most advanced type
    of systems software. The good thing is that you do not need to read the third
    part of the book right away.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本书分为三个部分。第一部分，包括本章，是关于Go和在开发系统软件时可能有用的Go特性：这并不意味着您在开发程序时应该使用所有这些特性。第二部分是关于文件、目录和进程编程，这是最常见的系统软件类型。第三部分探讨了在Go中使用goroutines、Web应用程序和网络编程，这是最高级的系统软件类型。好消息是，您不需要立即阅读本书的第三部分。
- en: What is systems programming?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是系统编程？
- en: 'Systems programming is a special area of programming on Unix machines. Note
    that systems programming is not limited to Unix machines: it is just that this
    book deals with the Unix operating system only. Most commands that have to do
    with system administration tasks, such as disk formatting, network interface configuration,
    module loading, and kernel performance tracking, are implemented using the techniques
    of systems programming. Additionally, the `/etc` directory, which can be found
    on all Unix systems, contains plain text files that deal with the configuration
    of a Unix machine and its services and are also manipulated using systems software.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 系统编程是Unix机器上的一个特殊编程领域。请注意，系统编程并不局限于Unix机器：本书只涉及Unix操作系统。大多数与系统管理任务有关的命令，如磁盘格式化、网络接口配置、模块加载和内核性能跟踪，都是使用系统编程技术实现的。此外，在所有Unix系统上都可以找到的`/etc`目录包含处理Unix机器及其服务配置的纯文本文件，也是使用系统软件进行操作的。
- en: 'You can group the various areas of systems software and related system calls
    in the following sets:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将系统软件的各个领域和相关系统调用分为以下几类：
- en: '**File I/O**: This area deals with file reading and writing operations, which
    is the most important task of an operating system. File input and output must
    be fast and efficient, and above all, reliable.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件I/O**：这个领域涉及文件读写操作，这是操作系统最重要的任务。文件输入和输出必须快速高效，最重要的是可靠。'
- en: '**Advanced file I/O**: Apart from the basic input and output system calls,
    there are also more advanced ways to read or write to a file including asynchronous
    I/O and non-blocking I/O.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高级文件I/O**：除了基本的输入和输出系统调用外，还有更高级的读写文件的方法，包括异步I/O和非阻塞I/O。'
- en: '**System files and configuration**: This group of system software includes
    functions that allow you to handle system files, such as `/etc/passwd`, and get
    system specific information, such as system time and DNS configuration.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统文件和配置**：这组系统软件包括允许您处理系统文件（如`/etc/passwd`）并获取系统特定信息（如系统时间和DNS配置）的函数。'
- en: '**Files and directories**: This cluster includes functions and system calls
    that allow the programmer to create and delete directories and get information
    such as the owner and the permissions of a file or a directory.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件和目录**：这个集群包括允许程序员创建和删除目录以及获取文件或目录的所有者和权限等信息的函数和系统调用。'
- en: '**Process control**: This group of software allows you to create and interact
    with Unix processes.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进程控制**：这组软件允许您创建和与Unix进程交互。'
- en: '**Threads**: When a process has multiple threads, it can perform multiple tasks.
    However, threads must be created, terminated, and synchronized, which is the purpose
    of this collection of functions and system calls.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线程**：当一个进程有多个线程时，它可以执行多个任务。然而，线程必须被创建、终止和同步，这就是这组函数和系统调用的目的。'
- en: '**Server processes**: This set includes techniques that allow you to develop
    server processes, which are processes that get executed in the background without
    the need for an active terminal. Go is not that good at writing server processes
    in the traditional Unix way: but let me explain this a little more. Unix servers
    such as Apache use `fork(2)` to create one or more child processes (this process
    is called **forking** and refers to cloning the parent process into a child process)
    and continue executing the same executable from the same point, and most importantly,
    sharing memory. Although Go does not offer an equivalent to the `fork(2)` function,
    this is not an issue because you can use goroutines to cover most of the uses
    of `fork(2)`.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器进程**：这一集合包括允许您开发服务器进程的技术，这些进程可以在后台执行，而无需活动终端。Go在传统的Unix方式下编写服务器进程方面并不那么出色：但让我稍微解释一下。像Apache这样的Unix服务器使用`fork(2)`来创建一个或多个子进程（这个过程称为**forking**，指的是将父进程克隆成子进程），并继续从同一点执行相同的可执行文件，最重要的是，共享内存。虽然Go没有提供与`fork(2)`函数等效的功能，但这并不是问题，因为您可以使用goroutines来覆盖大部分`fork(2)`的用途。'
- en: '**Interprocess communication**: This set of functions allows processes that
    run on the same Unix machine to communicate with each other using features such
    as pipes, FIFOs, message queues, semaphores, and shared memory.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进程间通信**：这组函数允许在同一台Unix机器上运行的进程使用管道、FIFO、消息队列、信号量和共享内存等特性进行通信。'
- en: '**Signal processing**: Signals offer processes a way of handling asynchronous
    events, which can be very handy. Almost all server processes have extra code that
    allows them to handle Unix signals using the system calls of this group.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信号处理**：信号为进程提供了处理异步事件的方法，这可能非常方便。几乎所有服务器进程都有额外的代码，允许它们使用该组的系统调用来处理Unix信号。'
- en: '**Network programming**: This is the art of developing applications that work
    over computer networks with the help of TCP/IP and is not systems programming
    per se. However, most TCP/IP servers and clients are dealing with system resources,
    users, files, and directories. So, most of the time, you cannot create network
    applications without doing some kind of systems programming.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络编程**：这是开发利用TCP/IP在计算机网络上工作的应用程序的艺术，并不是系统编程本身。然而，大多数TCP/IP服务器和客户端都涉及系统资源、用户、文件和目录。因此，大多数情况下，您不能创建网络应用程序而不进行某种形式的系统编程。'
- en: The challenging thing with systems programming is that you cannot afford to
    have an incomplete program; you can either have a fully working, secure program
    that can be used on a production system or nothing at all. This mainly happens
    because you cannot trust end users and hackers. The key difficulty in systems
    programming is the fact that an erroneous system call can make your Unix machine
    misbehave or, even worse, crash!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 系统编程的挑战在于您不能容忍不完整的程序；您要么有一个完全可用、安全的程序，可以在生产系统上使用，要么什么都没有。这主要是因为您不能信任最终用户和黑客。系统编程的关键困难在于错误的系统调用可能会使您的Unix机器行为异常，甚至更糟糕的是崩溃！
- en: Most security issues on Unix systems usually come from wrongly implemented systems
    software because bugs in systems software can compromise the security of an entire
    system. The worst part is that this can happen many years after using a certain
    piece of software.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Unix系统上的大多数安全问题通常来自错误实现的系统软件，因为系统软件中的错误可能会危及整个系统的安全。最糟糕的是，这可能会在使用某个特定软件多年后发生。
- en: When writing systems software, you should take good care of both error messages
    and warnings because they are the friends that help you understand what is going
    on and why your program did not behave as expected. Putting it simply, there is
    a big difference between the *File not found* and *Not enough permissions to read
    file* error messages.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写系统软件时，您应该特别注意错误消息和警告，因为它们是帮助您理解发生了什么以及为什么您的程序没有按预期行为的朋友。简而言之，*文件未找到*和*没有足够的权限读取文件*错误消息之间存在着很大的区别。
- en: Back when Unix was first introduced, the only way to write systems software
    was using C; nowadays, you can program systems software using programming languages
    including Go, which will be the subject of this book.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unix首次引入时，编写系统软件的唯一方法是使用C；如今，您可以使用包括Go在内的编程语言来编写系统软件，本书将介绍Go。
- en: 'You should understand that the two main benefits you get from using a programming
    language other than C for developing systems software are as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该明白，使用C以外的编程语言开发系统软件的两个主要好处如下：
- en: Using a modern programming language along with its tools
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用现代编程语言及其工具
- en: Simplicity, as you usually have to write, debug, and maintain less code
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单性，通常您需要编写、调试和维护更少的代码
- en: Apart from Go, other good candidates for developing system tools are Python,
    Perl, Rust, and Ruby.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Go，用于开发系统工具的其他良好选择包括Python、Perl、Rust和Ruby。
- en: Learning systems programming
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习系统编程
- en: The only way you can learn systems programming is by developing your own utilities
    using this book as a reference and a tutorial. At first, you will make a large
    amount of ridiculous mistakes, but as you get better, you will make a smaller
    amount of much more clever and hard to debug mistakes! However, it is fine to
    try new things when learning. In fact, it is necessary to try new things and fail
    because this means that you are really learning something new. Just make sure
    that you do not use a production web server for learning systems programming.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 学习系统编程的唯一方法是使用本书作为参考和教程，开发自己的实用程序。起初，你会犯很多荒谬的错误，但随着你的进步，你会犯更少但更聪明和难以调试的错误！然而，在学习时尝试新事物是可以的。事实上，尝试新事物并失败是必要的，因为这意味着你真的在学习新东西。只要确保你不要使用生产Web服务器来学习系统编程。
- en: If you have difficulties finding out what to develop, you can start by creating
    your own versions of some of the existing Unix command line utilities such as
    `ls(1)`, `mkdir(1)`, `ln(1)`, `wc(1)`, and `which(1)`. You do not have to create
    a fully featured version of each one of them with support for all command-line
    options; what is important is to develop a stable and secure version that implements
    the main functionality and works without problems.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不知道要开发什么，可以从创建自己的版本开始，比如`ls(1)`、`mkdir(1)`、`ln(1)`、`wc(1)`和`which(1)`等现有的Unix命令行实用程序。你不必为每个实用程序创建一个功能齐全的版本，支持所有命令行选项；重要的是开发一个稳定和安全的版本，实现主要功能并且没有问题地运行。
- en: The best book that can teach you Unix systems programming in C is *Advanced
    Unix Programming in the Unix Environment* by *W. Richard Stevens*. Its third edition
    is available now, but all its editions are useful and contain a plethora of valuable
    details.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 能够教你在C中进行Unix系统编程的最好书籍是*W. Richard Stevens*的*Advanced Unix Programming in the
    Unix Environment*。它的第三版现在已经可以获取，但所有版本都很有用，包含大量宝贵的细节。
- en: About Go
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于Go
- en: Go is a modern generic purpose open source programming language that was officially
    announced at the end of 2009\. It began as an internal Google project and has
    been inspired by many other programming languages including C, Pascal, Alef, and
    Oberon. Its spiritual fathers are *Robert Griesemer*, *Ken Thomson,* and *Rob
    Pike*, who designed Go as a language for professional programmers who want to
    build reliable and robust software. Apart from its syntax and standard functions,
    Go comes with a pretty rich standard library.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Go是一种现代通用开源编程语言，于2009年底正式宣布。它起初是一个谷歌内部项目，受到了包括C、Pascal、Alef和Oberon在内的许多其他编程语言的启发。它的精神领袖是*Robert
    Griesemer*、*Ken Thomson*和*Rob Pike*，他们设计Go作为专业程序员构建可靠和健壮软件的语言。除了其语法和标准函数外，Go还配备了一个相当丰富的标准库。
- en: 'At the time of writing this book, the latest stable Go version is 1.8, which
    includes some handy new features including the following: feel free to skip this
    if you have not used Go before:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，最新的稳定Go版本是1.8，其中包括一些方便的新功能，包括以下内容：如果你以前没有使用过Go，可以跳过这部分。
- en: New conversion rules exist that allow you to easily convert between types that
    are almost equal provided that some criteria are met. You can fix the import paths
    of the `golang.org/x/net/name` form to just the name of the Go source file using
    the `go tool` command without having to open the source files yourselves.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在存在新的转换规则，允许你在满足一些条件的情况下轻松地在几乎相等的类型之间进行转换。你可以使用`go tool`命令修复`golang.org/x/net/name`形式的导入路径，而无需自己打开源文件。
- en: The operation of the tool is stricter in some cases and looser in cases that
    used to generate false positives.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该工具在某些情况下更加严格，在以前会产生误报的情况下更加宽松。
- en: There is now a default value for GOPATH Environment Variables when GOPATH is
    undefined. For Unix systems, the default value is $HOME/go.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当GOPATH未定义时，现在有一个GOPATH环境变量的默认值。对于Unix系统，默认值是$HOME/go。
- en: There are various improvements to the Go runtime that speed up Go.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go运行时有各种改进，加快了Go的速度。
- en: There is a `sort.slice()` function that allows you to sort a slice by providing
    a comparator callback instead of implementing `sort.Interface`.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个`sort.slice()`函数，允许你通过提供比较器回调来对切片进行排序，而不是实现`sort.Interface`。
- en: There is now a `Shutdown` method to `http.Server`.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在`http.Server`有一个`Shutdown`方法。
- en: There exist various small changes to the `database/sql` package that give the
    developer more control over queries.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`database/sql`包有各种小改动，让开发人员对查询有更多控制。'
- en: You can create bugs using the `go bug` command.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以使用`go bug`命令创建bug。
- en: Getting ready for Go
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备开始Go
- en: 'You can easily find your version of Go using this command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这个命令轻松找到你的Go版本：
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The previous output is from a macOS machine hence the `darwin` string. A Linux
    machine would give the following kind of output:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的输出来自macOS机器，因此有`darwin`字符串。Linux机器会给出以下类型的输出：
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You will learn more about `go tool`, which you will use all the time, in the
    next chapters.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，你将学到更多关于`go tool`的知识，你将一直使用它。
- en: 'As I can imagine, you must be impatient to see some Go code; so here is the
    Go version of the famous Hello World program:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以想象，你一定迫不及待地想看一些Go代码；所以这里是著名的Hello World程序的Go版本：
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you are familiar with C or C++, you will find Go code pretty easy to understand.
    Each file that contains Go code begins with a package declaration followed by
    the needed import declarations. The package declaration shows the package that
    this file belongs to. Note that semicolons are not required for successfully terminating
    a Go statement unless you want to put two or more Go statements in the same line.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉C或C++，你会发现Go代码非常容易理解。包含Go代码的每个文件都以包声明开头，后面是所需的导入声明。包声明显示了该文件所属的包。请注意，除非你想在同一行上放置两个或更多个Go语句，否则不需要为成功终止Go语句使用分号。
- en: 'In [Chapter 2](69bfa048-8113-4a6d-929a-b5addf9b6505.xhtml), *Writing Programs
    in Go*, you will find out how to compile and execute Go code. For now, it is enough
    to remember that Go source files are stored using the `.go` file extension: your
    task is to choose a descriptive filename.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](69bfa048-8113-4a6d-929a-b5addf9b6505.xhtml)中，*使用Go编写程序*，你将了解如何编译和执行Go代码。现在，只需记住Go源文件使用`.go`文件扩展名存储：你的任务是选择一个描述性的文件名。
- en: When searching for Go-related information, use `Golang` or `golang` as the keyword
    for the Go programming language because the word Go can be found almost everywhere
    in the English language and it will not help your search!
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在搜索与Go相关的信息时，使用`Golang`或`golang`作为Go编程语言的关键词，因为单词Go几乎可以在英语中的任何地方找到，这不会帮助你的搜索！
- en: Two useful Go tools
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 两个有用的Go工具
- en: The Go distribution comes with a plethora of tools that can make your life as
    a programmer easier. The two most useful of them are `gofmt` and `godoc`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Go发行版附带了大量工具，可以让你作为程序员的生活更轻松。其中最有用的两个是`gofmt`和`godoc`。
- en: 'Note that `go tool` itself can also invoke various tools: you can see a list
    of them by executing `go tool`.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`go tool`本身也可以调用各种工具：你可以通过执行`go tool`来查看它们的列表。
- en: The `gofmt` utility formats Go programs in a given way, which is really important
    when different people are going to work with the same code for a big project.
    You can find more information about `gofmt` at [https://golang.org/cmd/gofmt/](https://golang.org/cmd/gofmt/).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`gofmt`实用程序以给定的方式格式化Go程序，这在不同的人要为一个大项目使用相同的代码时非常重要。你可以在[https://golang.org/cmd/gofmt/](https://golang.org/cmd/gofmt/)找到更多关于`gofmt`的信息。'
- en: 'The following is a poorly formatted version of the `hw.go` program that is
    hard to read and understand:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`hw.go`程序的格式不佳的版本，很难阅读和理解：
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Processing the previous code, which is saved as `unglyHW.go` with `gofmt`,
    generates the following easy to read and comprehend output:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 处理前面的代码，保存为`unglyHW.go`并使用`gofmt`，会生成以下易于阅读和理解的输出：
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Remembering that the `gofmt` utility does not automatically save the generated
    output is important, which means that you should either use the `-w` option followed
    by a valid filename or redirect the output of `gofmt` to a new file.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 记住`gofmt`实用程序不会自动保存生成的输出很重要，这意味着你应该使用`-w`选项后跟有效的文件名，或者将`gofmt`的输出重定向到一个新文件。
- en: The `godoc` utility allows you to see the documentation of existing Go packages
    and functions. You can find more information about `godoc` at [http://godoc.org/golang.org/x/tools/cmd/godoc](http://godoc.org/golang.org/x/tools/cmd/godoc).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`godoc`实用程序允许你查看现有Go包和函数的文档。你可以在[http://godoc.org/golang.org/x/tools/cmd/godoc](http://godoc.org/golang.org/x/tools/cmd/godoc)找到更多关于`godoc`的信息。'
- en: You are going to use `godoc` a lot as it is a great tool for learning the details
    of Go functions.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你将经常使用`godoc`，因为它是学习Go函数细节的好工具。
- en: 'The following screenshot shows the output of the `godoc` command generated
    on a Terminal when asked for information about the `Println()` function of the
    `fmt` package:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在终端上生成的`godoc`命令的输出，当要求有关`fmt`包的`Println()`函数的信息时：
- en: '![](img/b8c6c34f-8a9b-4b23-9ed3-1e5f5efaa474.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b8c6c34f-8a9b-4b23-9ed3-1e5f5efaa474.png)'
- en: The output of the godoc command
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: godoc命令的输出
- en: 'Another handy feature of `godoc` is that it can start its own web server and
    allow you to see its documentation using a web browser:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`godoc`的另一个方便功能是它可以启动自己的web服务器，并允许你使用web浏览器查看它的文档：'
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following screenshot shows the kind of output you get on a web browser
    after visiting `http://localhost:8080/pkg/` while the previous command is running.
    You can use any port number you want, provided that it is not already in use:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在运行前一个命令时，通过访问`http://localhost:8080/pkg/`在web浏览器上获得的输出类型。你可以使用任何你想要的端口号，只要它还没有被使用：
- en: '![](img/180f5a7f-a97c-418e-a357-3b2149951724.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/180f5a7f-a97c-418e-a357-3b2149951724.png)'
- en: Using the godoc utility from your web browser
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 使用web浏览器中的godoc实用程序
- en: 'The most important tool for a programmer is the editor they use for writing
    the source code. When I am on a Mac, I typically use the TextMate editor, but
    when I am on a different Unix machine, I prefer vi. Choosing an editor is not
    an easy task because you are going to spend a lot of time with it. However, any
    text editor will do the job as long as it does not put any control characters
    inside the source code files. The following screenshot shows the TextMate editor
    in action:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员最重要的工具是他们用来编写源代码的编辑器。当我在Mac上时，我通常使用TextMate编辑器，但当我在不同的Unix机器上时，我更喜欢vi。选择编辑器并不是一件容易的事，因为你将花费很多时间在它上面。然而，只要不在源代码文件中放入任何控制字符，任何文本编辑器都可以胜任。以下截图显示了TextMate编辑器的操作：
- en: '![](img/5ae80fd5-b3ca-4c88-a509-7f29faae8d5a.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ae80fd5-b3ca-4c88-a509-7f29faae8d5a.png)'
- en: The TextMate editor showing the look of a some Go code
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: TextMate编辑器显示了一些Go代码的外观
- en: Advantages and disadvantages of Go
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go的优缺点
- en: 'Go is not perfect but it has some very interesting features. The list of the
    Go strong features includes the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Go并不完美，但它有一些非常有趣的特性。Go强大特性的列表包括以下内容：
- en: Go code is easy to read and easy to understand.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go代码易于阅读和理解。
- en: Go wants happy developers because a happy developer writes better code!
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go希望开发者快乐，因为快乐的开发者写出更好的代码！
- en: The Go compiler prints practical warning and error messages that help you solve
    the actual problem. Putting it simply, the Go compiler is there to help you, not
    to make your life difficult!
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go编译器打印实用的警告和错误消息，帮助你解决实际问题。简而言之，Go编译器是为了帮助你而不是让你的生活困难！
- en: Go code is portable.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go代码是可移植的。
- en: Go is a modern programming language.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go是一种现代编程语言。
- en: Go has support for procedural, concurrent, and distributed programming.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go支持过程化、并发和分布式编程。
- en: Go supports **Garbage Collection** (**GC**) so you do not have to deal with
    memory allocation and deallocation. However, GC might slow down your programs
    a little.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go支持**垃圾回收**（**GC**），因此你不必处理内存分配和释放。然而，GC可能会稍微减慢你的程序。
- en: Go does not have a preprocessor and does high-speed compilation. Consequently,
    Go can be used as a scripting language.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go没有预处理器，编译速度很快。因此，Go可以用作脚本语言。
- en: Go can build web applications. Building a web application in C is simply not
    very efficient unless you use a nonstandard external library. Additionally, Go
    provides programmers with a simple web server for testing purposes.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go可以构建Web应用程序。在C中构建Web应用程序除非使用非标准的外部库，否则效率不高。此外，Go为程序员提供了一个简单的Web服务器用于测试目的。
- en: The standard Go library offers many packages that simplify the work of the programmer.
    Additionally, the methods found in the standard Go library are tested and debugged
    in advance, which means that most of the time they contain no bugs.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准的Go库提供了许多简化程序员工作的包。此外，标准的Go库中的方法事先经过测试和调试，这意味着它们大多数时间不包含错误。
- en: Go uses static linking by default, which means that the produced binary files
    can be easily transferred to other machines with the same OS. Consequently, the
    developer does not need to worry about libraries, dependencies, and different
    library versions.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go默认使用静态链接，这意味着生成的二进制文件可以轻松地传输到具有相同操作系统的其他计算机上。因此，开发人员不需要担心库、依赖项和不同的库版本。
- en: You will not need a GUI for developing, debugging, and testing Go applications
    as Go can be used from the command line.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您不需要GUI来开发、调试和测试Go应用程序，因为可以从命令行中使用Go。
- en: Go supports Unicode. This means that you do not need any extra code to print
    characters from multiple human languages.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go支持Unicode。这意味着您不需要任何额外的代码来打印多种人类语言的字符。
- en: Go keeps concepts orthogonal because a few orthogonal features work better than
    many overlapping ones.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go保持概念正交，因为少量正交特性比许多重叠特性更好。
- en: 'The list of Go disadvantages includes the following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Go的缺点列表包括以下内容：
- en: Well, Go is not C, which means that you or your team should learn a new programming
    language to develop systems software.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嗯，Go不是C，这意味着您或您的团队应该学习一种新的编程语言来开发系统软件。
- en: Go does not have direct support for object-oriented programming, which can be
    a problem for programmers that are used to writing code in an object-oriented
    manner. Nevertheless, you can use composition in Go to mimic inheritance.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go没有直接支持面向对象的编程，这对于习惯以面向对象方式编写代码的程序员可能是一个问题。尽管如此，您可以在Go中使用组合来模拟继承。
- en: Back when Unix was first introduced, C was the only programming language for
    writing systems software. Nowadays, you can also use Rust, C++, and Swift for
    writing systems software, which means that not everybody will be using Go.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unix首次推出时，C是编写系统软件的唯一编程语言。如今，您还可以使用Rust、C++和Swift来编写系统软件，这意味着不是每个人都会使用Go。
- en: C is still faster than any other programming language for systems programming
    mainly because Unix is written in C.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C仍然是系统编程中比其他任何编程语言都要快的主要原因是Unix是用C编写的。
- en: Despite the advantages or the disadvantages of a programming language, you have
    the final word on whether you like it or not. The important thing is that you
    choose a programming language that you like and can do the job you want! Personally,
    I do not like C++ despite the fact that it is a very capable programming language
    and I have written an FTP client in C++! Additionally, I never liked Java. There
    is no right or wrong thing in personal tastes so do not feel guilty about your
    choices.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 无论编程语言的优点还是缺点，您都可以决定是否喜欢它。重要的是选择一种您喜欢并且能够完成您想要的工作的编程语言！就个人口味而言，我不喜欢C++，尽管它是一种非常有能力的编程语言，我曾经用C++编写过FTP客户端！此外，我从来不喜欢Java。在个人口味上没有对错之分，所以不要为自己的选择感到内疚。
- en: The various states of a Unix process
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unix进程的各种状态
- en: Strictly speaking, a process is an execution environment that contains instructions,
    user-data and system-data parts, and other kinds of resources that are obtained
    during runtime. A program is a file that contains instructions and data, which
    are used for initializing the instruction and user-data parts of a process.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 严格来说，进程是一个包含指令、用户数据和系统数据部分以及在运行时获得的其他类型资源的执行环境。程序是一个包含指令和数据的文件，用于初始化进程的指令和用户数据部分。
- en: 'Back when the Unix operating system was first introduced, computers had single
    CPUs without multiple cores and a small amount of RAM. However, Unix was a multiuser
    and multitasking operating system. In order to actually be a multiuser and do
    multitasking, it had to be able to run each individual process sporadically, which
    means that a process should have multiple states. The following figure shows the
    possible states of a process as well as the right path to go from one state to
    another:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Unix操作系统首次推出时，计算机只有单个CPU，没有多个核心和少量的RAM。然而，Unix是一个多用户和多任务操作系统。为了实际上成为一个多用户和多任务系统，它必须能够周期性地运行每个单独的进程，这意味着一个进程应该有多个状态。下图显示了进程的可能状态以及从一个状态到另一个状态的正确路径：
- en: '![](img/2c347cf1-0751-465a-8026-557eabace4a5.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c347cf1-0751-465a-8026-557eabace4a5.png)'
- en: The states of a Unix process
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Unix进程的各种状态
- en: 'There are three categories of processes: user processes, Kernel processes,
    and Daemon processes:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种进程类别：用户进程、内核进程和守护进程：
- en: User processes run in user space and usually have no special access rights
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户进程在用户空间中运行，通常没有特殊的访问权限
- en: Kernel processes are being executed in kernel space only and can fully access
    all kernel data structures
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内核进程仅在内核空间中执行，并且可以完全访问所有内核数据结构
- en: Daemon processes are programs that can be found in the user space and run in
    the background without the need for a Terminal
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 守护进程是可以在用户空间中找到并在后台运行而无需终端的程序
- en: Realizing that you cannot control the state of a process is really important,
    as this is the job of the **scheduler** of the operating system that runs in the
    kernel. Putting it simply, you cannot tell when the state of a process is going
    to change or when the process is going to go into the running state, so your code
    cannot count on any such assumptions!
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 意识到你无法控制进程的状态是非常重要的，因为这是运行在内核中的操作系统的**调度程序**的工作。简单来说，你无法预测进程的状态何时会改变，或者进程何时会进入运行状态，所以你的代码不能依赖任何这样的假设！
- en: The C way for creating new processes involves the calling of the `fork()` system
    call. The return value of `fork()` allows the programmer to differentiate between
    the parent and child processes. However, Go does not support a similar functionality.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新进程的C方式涉及调用`fork()`系统调用。`fork()`的返回值允许程序员区分父进程和子进程。然而，Go不支持类似的功能。
- en: Exercises
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'Visit the Go website: [https://golang.org/](https://golang.org/).'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问Go网站：[https://golang.org/](https://golang.org/)。
- en: Install Go on your system and find out its version.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的系统上安装Go并找出它的版本。
- en: Type the code of the Hello World program on your own and save it to a file.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自己输入Hello World程序的代码并将其保存到文件中。
- en: If you are on a Mac, download TextMate from [http://macromates.com/](http://macromates.com/).
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用的是Mac，可以从[http://macromates.com/](http://macromates.com/)下载TextMate。
- en: If you are on a Mac, download the TextWrangler editor from [http://www.barebones.com/products/TextWrangler/](http://www.barebones.com/products/TextWrangler/)
    and try it.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用的是Mac，可以从[http://www.barebones.com/products/TextWrangler/](http://www.barebones.com/products/TextWrangler/)下载TextWrangler编辑器并尝试使用它。
- en: Try to learn vi or Emacs on your own if you are not already familiar with another
    Unix text editor.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还不熟悉其他Unix文本编辑器，可以尝试自己学习vi或Emacs。
- en: Look at any Go code you can find and try to make small changes to it.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看任何你能找到的Go代码，并尝试对其进行小的更改。
- en: Summary
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to get Go on your computer, the features of
    the latest Go version, the advantages and disadvantages of Go, and the `gofmt`
    and `godoc` Go tools, as well as some important things about the Unix operating
    system.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何在你的计算机上安装Go，最新Go版本的特性，Go的优缺点，以及`gofmt`和`godoc` Go工具，以及关于Unix操作系统的一些重要内容。
- en: The next chapter will not only tell you how to compile your Go code but it will
    also discuss other important Go topics such as reading and using command-line
    arguments, environment variables, writing functions, data structures, interfaces,
    getting user input, and printing output.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章不仅会告诉你如何编译你的Go代码，还会讨论其他重要的Go主题，比如读取和使用命令行参数，环境变量，编写函数，数据结构，接口，获取用户输入和打印输出。
