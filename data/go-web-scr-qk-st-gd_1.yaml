- en: Introducing Web Scraping and Go
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍网络爬虫和Go
- en: Collecting, parsing, storing, and processing data are essential tasks that almost
    everybody will need to do in their software development career. Staying on top
    of emerging technologies that greatly improve the stability, speed, and efficiency
    of application development is another challenge. To provide insight into how to
    accomplish both of these goals, I have written this book. Here, you will find
    a guide for performing web scraping in Go. This book covers a broad perspective
    on web scraping, from the basics of the **Hypertext Transfer Protocol** (**HTTP**)
    and **Hypertext Markup Language** (**HTML**), to building highly concurrent distributed
    systems.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 收集、解析、存储和处理数据是几乎每个人在软件开发职业生涯中都需要做的基本任务。跟上大大提高应用程序开发的稳定性、速度和效率的新兴技术是另一个挑战。为了提供如何实现这两个目标的见解，我写了这本书。在这里，您将找到一个在Go中执行网络爬虫的指南。本书涵盖了网络爬虫的广泛视角，从**超文本传输协议**（**HTTP**）和**超文本标记语言**（**HTML**）的基础知识到构建高度并发的分布式系统。
- en: 'In this chapter, you will find explanations on the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将找到以下主题的解释：
- en: What is web scraping?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是网络爬虫？
- en: Why do you need a web scraper?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么您需要一个网络爬虫？
- en: What is Go?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Go？
- en: Why is Go a good fit for web scraping?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么Go非常适合网络爬虫？
- en: How can you set up a Go development environment?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您如何设置Go开发环境？
- en: What is web scraping?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是网络爬虫？
- en: 'Web scraping at, its core, is collecting publicly available information from
    the internet for a specific purpose. It has taken form under many different names,
    such as following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 网络爬虫在本质上是为了特定目的从互联网上收集公开可用的信息。它以许多不同的名称出现，比如以下：
- en: Spiders
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蜘蛛
- en: Crawlers
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 爬虫
- en: Bots
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器人
- en: Although the name may carry a negative connotation, the practice of web scraping
    has been around since the beginning of the internet and has grown into various
    technologies and techniques. In fact, some companies have built their entire business
    on web scraping!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个名字可能带有负面含义，但网络爬虫的实践自互联网诞生以来就存在，并发展成了各种技术和技巧。事实上，一些公司甚至建立了他们整个业务模式在网络爬虫上！
- en: Why do you need a web scraper?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么您需要一个网络爬虫？
- en: There are many different use cases where you might need to build a web scraper.
    All cases center around the fact that information on the internet is often disparate,
    but can be very valuable when collected into one single package. Often, in these
    cases, the person collecting the information does not have a working or business
    relationship with the producers of the data, meaning they cannot request the information
    to be packaged and delivered to them. Because of the lack of this relationship,
    the one who needs the data has to rely on their own means to gather the information.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同的用例，您可能需要构建一个网络爬虫。所有这些用例都围绕着互联网上的信息通常是分散的，但当收集到一个单一的包中时，可能非常有价值。在这些情况下，收集信息的人通常与数据的生产者没有工作或商业关系，这意味着他们无法要求将信息打包并交付给他们。由于缺乏这种关系，需要数据的人必须依靠自己的手段来收集信息。
- en: Search engines
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索引擎
- en: One well-known use case for web scraping is indexing websites for the purpose
    of building a search engine. In this case, a web scraper would visit different
    websites and follow references to other websites in order to discover all of the
    content available on the internet. By collecting some of the content from the
    pages, you could respond to search queries by matching the terms to the contents
    of the pages you have collected. You could also suggest similar pages if you track
    how pages are linked together, and rank the most important pages by the number
    of connections they have to other sites.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 网络爬虫的一个众所周知的用例是为了构建搜索引擎而对网站进行索引。在这种情况下，网络爬虫会访问不同的网站，并跟踪其他网站的引用，以便发现互联网上所有可用的内容。通过收集页面上的一些内容，您可以通过将术语与您收集的页面的内容进行匹配来响应搜索查询。如果您跟踪页面如何链接在一起，并根据它们与其他站点的连接数量对最重要的页面进行排名，您还可以建议类似的页面。
- en: Googlebot is the most famous example of a web scraper used to build a search
    engine. It is the first step in building the search engine as it downloads, indexes,
    and ranks each page on a website. It will also follow links to other websites,
    which is how it is able to index a substantial portion of the internet. According
    to Googlebot's documentation, the scraper attempts to reach each web page every
    few seconds, which requires them to reach estimates of well into billions of pages
    per day!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Googlebot是用于构建搜索引擎的网络爬虫的最著名的例子。它是构建搜索引擎的第一步，因为它会下载、索引和对网站上的每个页面进行排名。它还会跟踪到其他网站的链接，这就是它能够索引互联网上大部分内容的原因。根据Googlebot的文档，网络爬虫试图每隔几秒钟到达每个网页，这需要它们每天达到数十亿页的估计！
- en: If your goal is to build a search engine, albeit on a much smaller scale, you
    will find enough tools in this book to collect the information you need. This
    book will not, however, cover indexing and ranking pages to provide relevant search
    results.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的目标是构建一个搜索引擎，尽管规模要小得多，您将在本书中找到足够的工具来收集您需要的信息。但是，本书不会涵盖索引和排名页面以提供相关的搜索结果。
- en: Price comparison
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 价格比较
- en: Another known use case is to find specific products or services sold through
    various websites and track their prices. You would be able to see who sells the
    item, who has the lowest price, or when it is most likely to be in stock. You
    might even be interested in similar products from different sources. Having a
    web scraper periodically visit websites to monitor these products and services
    would be easily solve this problem. This is very similar to tracking prices for
    flights, hotels, and rental cars as well.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个已知的用例是查找通过各种网站销售的特定产品或服务，并跟踪它们的价格。您可以看到谁在销售该商品，谁的价格最低，或者它最有可能何时有货。您甚至可能对来自不同来源的类似产品感兴趣。定期让网络爬虫访问网站以监视这些产品和服务将很容易解决这个问题。这与跟踪航班、酒店和租车价格非常相似。
- en: Sites like camelcamelcamel ([https://camelcamelcamel.com/](https://camelcamelcamel.com/))
    build their business model around such a case. According to their blog post explaining
    how their system works, they actively collect pricing information from multiple
    retailers every half hour to every few hours, covering millions of products. This
    allows users to view pricing differences across multiple platforms, as well as
    get notified if the price of an item drops.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 像camelcamelcamel（[https://camelcamelcamel.com/](https://camelcamelcamel.com/)）这样的网站就是围绕这种情况构建其商业模式的。根据他们解释他们系统如何工作的博客文章，他们每隔半小时到几个小时主动收集来自多个零售商的定价信息，涵盖数百万种产品。这使用户可以查看多个平台上的价格差异，并在物品价格下降时收到通知。
- en: You can read their post at [https://camelcamelcamel.com/blog/how-our-price-checking-system-works](https://camelcamelcamel.com/blog/how-our-price-checking-system-works).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://camelcamelcamel.com/blog/how-our-price-checking-system-works](https://camelcamelcamel.com/blog/how-our-price-checking-system-works)阅读他们的文章。
- en: This type of web scraper requires very careful parsing of the web pages to extract
    only the content that is relevant. In later chapters, you will learn how to extract
    information from HTML pages in order to collect this information.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的网络爬虫需要非常仔细地解析网页，以提取只与相关的内容。在后面的章节中，您将学习如何从HTML页面中提取信息，以收集这些信息。
- en: Building datasets
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建数据集
- en: Data scientists often need hundreds of thousands of data points in order to
    build, train, and test machine learning models. In some cases, this data is already
    pre-packaged and ready for consumption. Most of the time, the scientist would
    need to venture out on their own and build a custom dataset. This is often done
    by building a web scraper to collect raw data from various sources of interest,
    and refining it so it can be processed later on. These web scrapers also need
    to periodically collect fresh data to update their predictive models with the
    most relevant information.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学家通常需要数十万个数据点来构建、训练和测试机器学习模型。在某些情况下，这些数据已经预打包并准备好供使用。大多数情况下，科学家需要自己去构建一个定制的数据集。这通常是通过构建一个网络爬虫来收集来自各种感兴趣来源的原始数据，并对其进行精炼，以便以后进行处理。这些网络爬虫还需要定期收集新鲜数据，以使用最相关的信息更新其预测模型。
- en: A common use case that data scientists run into is determining how people feel
    about a specific subject, known as sentiment analysis. Through this process, a
    company could look for discussions surrounding one of their products, or their
    overall presence, and gather a general consensus. In order to do this, the model
    must be trained on what a positive comment and a negative comment are, which could
    take thousands of individual comments in order to make a well-balanced training
    set. Building a web scraper to collect comments from relevant forums, reviews,
    and social media sites would be helpful in constructing such a dataset.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学家经常遇到的一个常见用例是确定人们对特定主题的感受，即所谓的情感分析。通过这个过程，公司可以寻找围绕其产品或整体存在的讨论，并收集一个普遍的共识。为了做到这一点，模型必须在什么是积极评论和消极评论上进行训练，这可能需要成千上万的个别评论才能构建一个平衡的训练集。构建一个网络爬虫来收集相关论坛、评论和社交媒体网站上的评论，对于构建这样的数据集将是有帮助的。
- en: These are just a few examples of web scrapers that drive large business such
    as Google, Mozenda, and [Cheapflights.com](http://Cheapflights.com). There are
    also companies that will scrape the web for whatever available data you need,
    for a fee. In order to run scrapers at such a large scale, you would need to use
    a language that is fast, scalable, and easy to maintain.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是一些驱动谷歌、Mozenda和[Cheapflights.com](http://Cheapflights.com)等大型企业的网络爬虫的例子。还有一些公司会按费用为您从网络上爬取所需的任何可用数据。为了以如此大规模运行爬虫，您需要使用一种快速、可扩展且易于维护的语言。
- en: What is Go?
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Go？
- en: Go is a programming language created by Google employees in 2007\. At the time
    of its creation, the goal was to build a language that was fast, safe, and simple.
    Go first officially released its 1.0 version in 2012 and is one of the fastest
    growing programming languages today. According to the *Stack Overflow 2018 Developer
    Survey*, Go is ranked in the top five of the most-loved languages and the top
    three in the most-wanted languages.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Go是由谷歌员工于2007年创建的一种编程语言。在创建时，目标是构建一种快速、安全和简单的语言。Go于2012年首次正式发布1.0版本，是当今增长最快的编程语言之一。根据*Stack
    Overflow 2018开发者调查*，Go在最受喜爱语言中排名前五，在最想要语言中排名前三。
- en: Go powers many large-scale web infrastructure platforms and tools such as Docker,
    Kubernetes, and Terraform. These platforms enable companies to build production-scale
    products supporting Fortune 500 companies. This is mostly the result of the design
    of the Go language, making it straightforward and clear to work with. Many other
    companies using Go for their development often tout the performance improvements
    over other languages.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Go支持许多大规模网络基础架构平台和工具，如Docker、Kubernetes和Terraform。这些平台使公司能够构建支持财富500强公司的生产规模产品。这主要是由于Go语言的设计，使其易于直接清晰地使用。许多其他使用Go进行开发的公司经常吹嘘其性能优于其他语言。
- en: Why is Go a good fit for web scraping?
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么Go很适合网络爬虫？
- en: 'The architecture of the Go programming language, as well as its standard libraries,
    make it a great choice for building web scrapers that are fast, scalable, and
    maintainable. Go is a statically typed, garbage-collected language with a syntax
    closer to C/C++. The syntax of the language will feel very familiar to developers
    coming from object-oriented programming languages.  Go also has a few functional
    programming elements as well, such as higher-order functions. With all that being
    said, there are three main reasons why Go is a great fit for web scraping:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Go编程语言的架构以及其标准库使其成为构建快速、可扩展和易于维护的网络爬虫的绝佳选择。Go是一种静态类型、垃圾回收的语言，其语法更接近于C/C++。对于从面向对象编程语言转过来的开发人员来说，该语言的语法会感觉非常熟悉。Go还具有一些函数式编程元素，例如高阶函数。总的来说，有三个主要原因使得Go非常适合网络爬虫：
- en: '![](img/667ca4d5-2860-442a-8550-acb3a8a5ab52.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/667ca4d5-2860-442a-8550-acb3a8a5ab52.png)'
- en: Go is fast
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go很快
- en: Speed is one of the primary objectives of the Go programming language. Many
    benchmarks put the speed of Go on par with that of C++, Java, and Rust, and miles
    ahead of languages such as Python and Ruby. Benchmark tests should always be considered
    with a bit of skepticism, but Go consistently stands out as a language with extremely
    high-performance numbers. This speed is typically coupled with a low resource
    footprint, as the runtime is very lightweight and does not use much RAM. One of
    the hidden benefits of this is being able to run Go programs on smaller machines,
    or to run multiple instances on the same machine, without significant overhead.
    This reduces the cost of operating a web scraper at larger scales.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 速度是Go编程语言的主要目标之一。许多基准测试将Go的速度与C++、Java和Rust相提并论，并远远领先于Python和Ruby等语言。基准测试应该始终带有一些怀疑态度，但Go始终以极高的性能数字脱颖而出。这种速度通常与低资源占用量相结合，因为运行时非常轻量级，不占用太多内存。其中一个隐藏的好处是能够在较小的机器上运行Go程序，或者在同一台机器上运行多个实例，而不会有显著的开销。这降低了在更大规模上运行网络爬虫的成本。
- en: This speed is inherently important in building web scrapers, and becomes more
    noticeable at larger scales. Take, for example, a web scraper that requires two
    minutes to scrape a page; you could theoretically process 720 pages in a day.
    If you were able to reduce that time to one minute per page, you would double
    the amount of pages per day to 1,440! Better yet, this would be done at the same
    cost. The speed and efficiency of Go allow you to do more with less.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这种速度在构建网络爬虫中非常重要，并且在更大的规模下变得更加明显。例如，一个需要两分钟来爬取一个页面的网络爬虫；理论上你可以在一天内处理720页。如果你能将处理时间减少到每页一分钟，你就可以将每天的页面数量翻倍到1440页！更好的是，这将以相同的成本完成。Go的速度和效率使你能够用更少的资源做更多的事情。
- en: Go is safe
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go是安全的
- en: One of the contributing factors to its speed is the fact that Go is statically
    typed. This makes the language ideal for building systems at a large scale and
    being confident in how your program will run in production. Also, since Go programs
    are built with a compiler instead of being run with an interpreter, it allows
    you to catch more bugs at compile time and greatly reduces the dreaded runtime
    errors.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 导致其速度的一个因素是Go是静态类型的。这使得该语言非常适合在大规模构建系统，并且对程序在生产环境中的运行非常有信心。此外，由于Go程序是通过编译器构建而不是通过解释器运行的，它允许你在编译时捕获更多的错误，并大大减少了可怕的运行时错误。
- en: This safety net is also extended to the Go garbage collector. Garbage collection
    means that you do not need to manually allocate and deallocate memory. This helps
    prevent memory leaks that might occur from mishandling objects in your code. Some
    may argue that garbage collection impedes the performance of your application,
    however, the Go garbage collector adds very little overhead in terms of interfering
    with your code execution. Many source report that the pauses caused by Go's garbage
    collector are less than one millisecond. In most cases, it's a very small price
    to pay to avoid chasing down memory leaks in the future. This certainly holds
    true for web scrapers.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这种安全保障也延伸到了Go的垃圾收集器。垃圾收集意味着你不需要手动分配和释放内存。这有助于防止由于代码中对象处理不当而可能导致的内存泄漏。有人可能会认为垃圾收集会影响应用程序的性能，然而，Go的垃圾收集器在干扰代码执行方面几乎没有什么额外开销。许多来源报告说，Go的垃圾收集器引起的暂停时间不到一毫秒。在大多数情况下，这是为了避免未来追踪内存泄漏而付出的非常小的代价。对于网络爬虫来说，这当然是正确的。
- en: As web scrapers grow in both size and complexity, it can be difficult to track
    all of the errors that may occur during processing. Thinking on the scale of processing
    thousands of web pages per day, one small bug could cause significantly affect
    the collection of data. At the end of the day, data missed is money lost, so preventing
    as many known errors as possible before the system is running is critical to your
    system.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 随着网络爬虫在规模和复杂性上的增长，跟踪处理过程中可能发生的所有错误可能会变得困难。考虑到每天处理成千上万个网页，一个小错误可能会显著影响数据的收集。在一天结束时，错过的数据就是失去的金钱，因此在系统运行之前尽可能地防止尽可能多的已知错误对你的系统至关重要。
- en: Go is simple
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go是简单的
- en: 'Beyond the architecture of the Go programming language itself, the standard
    library offers all the right packages you need to make web scraping easy. Go offers
    a built-in HTTP client in the `net/http` package that is fully-featured out of
    the box, but also allows for a lot of customization. Making an HTTP request is
    as simple, as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Go编程语言本身的架构之外，标准库提供了所有你需要使网络爬虫变得简单的正确包。Go在`net/http`包中提供了一个内置的HTTP客户端，它在开箱即用的同时也允许进行大量的定制。发起HTTP请求就像下面这样简单：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Also a part of the `net/http` package are utilities to structure HTTP requests,
    HTTP responses, and all of the HTTP status codes, which we will dive into later
    in this book. You will rarely need any third-party packages to handle communication
    with web servers. The Go standard library also has tools to help analyze HTTP
    requests, quickly consume HTTP response bodies, and debug the requests and responses
    in your web scraper. The HTTP client in the `net/http` package is also very configurable,
    letting you tune special parameters and methods to suit your specific needs. This
    typically will not need to be done, but the option exists if you encounter such
    a situation.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`net/http`包的一部分还包括结构化HTTP请求、HTTP响应以及所有HTTP状态码的实用程序，我们将在本书的后面进行深入讨论。你很少需要任何第三方包来处理与Web服务器的通信。Go标准库还提供了工具来帮助分析HTTP请求，快速消耗HTTP响应主体，并调试你的网络爬虫中的请求和响应。`net/http`包中的HTTP客户端也是非常可配置的，让你调整特殊参数和方法以满足你的特定需求。通常情况下不需要这样做，但如果你遇到这样的情况，这个选项是存在的。'
- en: This simplicity will help eliminate some of the guesswork of writing code. You
    will not need to determine the best way to make an HTTP request; Go has already
    worked it out and provided you with the best tools you need to get the job done.
    Even when you need more than just the standard library, the Go community has built
    tools that follow the same culture of simplicity. This certainly makes integrating
    third-party libraries an easy task.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这种简单性将有助于消除编写代码时的一些猜测。您不需要确定进行HTTP请求的最佳方式；Go已经解决了这个问题，并为您提供了完成工作所需的最佳工具。即使您需要的不仅仅是标准库，Go社区也构建了遵循相同简单文化的工具。这无疑使集成第三方库变得容易。
- en: How to set up a Go development environment
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何设置Go开发环境
- en: Before you get started building a web scraper, you will need the proper tools.
    Setting up a development environment for writing Go code is relatively simple.
    There are not a lot of external tools that you will need to install, and there
    is support for all major computing platforms. For all of the tools listed in this
    chapter, you will find individual instructions for Windows, Mac, and Linux systems.
    Also, since all of the tools we will use are open source, you will be able to
    access the source code and build it for your specific needs if necessary.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始构建网络爬虫之前，您需要适当的工具。为编写Go代码设置开发环境相对简单。您不需要安装很多外部工具，并且所有主要计算平台都得到支持。对于本章中列出的所有工具，您将找到适用于Windows、Mac和Linux系统的单独说明。此外，由于我们将使用的所有工具都是开源的，因此如果需要，您将能够访问源代码并根据自己的需求构建它们。
- en: Go language and tools
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go语言和工具
- en: First and foremost, you'll need to install the Go programming language and tools
    on your machine. The installation process varies for different operating systems
    so please follow the instructions at [https://golang.org/doc/install](https://golang.org/doc/install).
    On the installation page, you will find instructions for downloading Go for your
    platform, as well as the minimum operating system requirements.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要在计算机上安装Go编程语言和工具。安装过程因不同操作系统而异，请按照[https://golang.org/doc/install](https://golang.org/doc/install)上的说明进行操作。在安装页面上，您将找到适用于您的平台的Go下载说明，以及最低操作系统要求。
- en: It would be a good idea for you to spend some extra time browsing the Go programming
    language website to learn more about the language, read tutorials, and find the
    standard library documentation.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您最好花一些额外的时间浏览Go编程语言网站，了解更多关于该语言的信息，阅读教程，并查找标准库文档。
- en: 'This is a screenshot from the installation page from the Go website, containing
    all of the instructions necessary for installing Go on your computer:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是来自Go网站安装页面的截图，包含了在计算机上安装Go所需的所有说明：
- en: '![](img/e6a2e038-6896-4b07-8235-3f26f1ae1c5c.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e6a2e038-6896-4b07-8235-3f26f1ae1c5c.png)'
- en: You can also build the language from source if you are so inclined. By the end
    of the installation, you should have the all of the Go libraries, the Go command
    line, and a simple hello world project built to ensure that everything was installed
    properly.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您愿意，也可以从源代码构建该语言。安装结束时，您应该拥有所有Go库、Go命令行以及一个简单的hello world项目，以确保一切都安装正确。
- en: 'It is very important to follow the instructions all the way through testing
    your installation. Go can be a little tricky sometimes with respect to `$GOPATH`.
    Once you set up your `$GOPATH`, you must ensure that following is done:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 非常重要的是要按照说明一直测试您的安装。有时候，Go在`$GOPATH`方面可能有点棘手。设置好`$GOPATH`后，您必须确保完成以下操作：
- en: You have the required `src`, `bin`, and `pkg` directories
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您有所需的`src`、`bin`和`pkg`目录
- en: All source code is contained within the `src` directory
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有源代码都包含在`src`目录中
- en: The folder structure inside your `src` directory mimics what you want your package
    names to be
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`目录中的文件夹结构模仿了您希望包名称的结构。'
- en: By completing the testing section, you will save yourself a lot of frustration
    in the future.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 通过完成测试部分，您将节省将来很多的烦恼。
- en: Since the release of version 1.11, the Go team has announced support for Go
    modules, which allows you to develop outside of the `$GOPATH`. Because this feature
    is still considered experimental, this book will continue with the classic method
    for Go development.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 自从1.11版本发布以来，Go团队宣布支持Go模块，这允许您在`$GOPATH`之外进行开发。由于这个功能仍然被认为是实验性的，本书将继续使用经典的Go开发方法。
- en: Git
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git
- en: You will also need to install the Git version control software. This will be
    used to download third-party libraries onto your machine. The `go get` command
    relies on Git being installed on your system to download libraries and install
    them directly into your `$GOPATH`. You may also feel free to use Git to download
    the examples for each chapter. All of the examples in this book will be using
    open source libraries that are available on GitHub. You can install Git for your
    system by following the instructions at [https://git-scm.com/download](https://git-scm.com/download).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要安装Git版本控制软件。这将用于在计算机上下载第三方库。`go get`命令依赖于系统上安装了Git，以便直接将库下载并安装到您的`$GOPATH`中。您也可以随意使用Git下载每个章节的示例。本书中的所有示例都将使用在GitHub上可用的开源库。您可以按照[https://git-scm.com/download](https://git-scm.com/download)上的说明为您的系统安装Git。
- en: The Git command-line tool is a vast set of commands used for versioning, storing,
    and retrieving source code. These commands are the basis that power the GitHub
    website. It is highly recommended that you learn how to use the tool to interact
    with the GitHub site, rather than going through the UI.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Git命令行工具是一组广泛的命令，用于对源代码进行版本控制、存储和检索。这些命令是支持GitHub网站的基础。强烈建议您学习如何使用该工具与GitHub网站进行交互，而不是通过用户界面进行操作。
- en: 'The following is a screenshot of the Git download page, containing the links
    for your respective operating system:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Git下载页面的截图，包含了适用于您操作系统的链接：
- en: '![](img/00d36271-bc01-4df6-8708-08b962b1feb8.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00d36271-bc01-4df6-8708-08b962b1feb8.png)'
- en: Editor
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑器
- en: The second tool you will need is a good text editor or **Integrated Development
    Environment** (**IDE**). If you are not familiar with IDEs, they are basically
    text editors that are custom-built for writing applications for specific programming
    languages. One well-known IDE for Go is GoLand by JetBrains. This comes with built-in
    support for syntax highlighting, run and debug modes, built-in version control,
    and package management.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要的第二个工具是一个好的文本编辑器或**集成开发环境**（**IDE**）。如果你对IDE不熟悉，它们基本上是为特定编程语言编写应用程序而定制的文本编辑器。JetBrains的GoLand是一个著名的Go语言IDE。它具有内置的语法高亮显示、运行和调试模式、内置版本控制和包管理支持。
- en: GoLand is available as a 30-day trial, after which you must buy a license to
    continue using it.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: GoLand提供30天的试用期，之后您必须购买许可证才能继续使用。
- en: 'The following is a screenshot of the GoLand IDE displaying the standard `Hello
    World` program:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是GoLand IDE显示标准`Hello World`程序的截图：
- en: '![](img/06e4e699-c1a8-49b6-986e-c6b99e221464.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/06e4e699-c1a8-49b6-986e-c6b99e221464.png)'
- en: If you prefer to use a text editor, there are many available and they often
    have plugins for Go that make developing easier. Two of the best text editors
    available today are Visual Studio Code by Microsoft and Atom by GitHub. Both of
    these are general purpose editors that also have plugins for syntax highlighting,
    building, and running Go code. This way you can add what you need without too
    much overhead.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢使用文本编辑器，那么有许多可用的编辑器，它们通常都有适用于Go的插件，使开发更加容易。如今最好的两个文本编辑器是微软的Visual Studio
    Code和GitHub的Atom。这两者都是通用编辑器，也有用于语法高亮显示、构建和运行Go代码的插件。这样您就可以添加所需的功能而不会增加太多开销。
- en: 'This screenshot is the same `Hello World` program, displayed in Visual Studio
    Code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个截图显示的是在Visual Studio Code中显示的相同`Hello World`程序：
- en: '![](img/a51cc645-d1ad-4c44-bd16-341e7667c80d.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a51cc645-d1ad-4c44-bd16-341e7667c80d.png)'
- en: 'Finally, the Atom Version of the `Hello World` program looks like the following
    screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Atom版本的`Hello World`程序如下截图所示：
- en: '![](img/8f6a50f0-a5ba-43b0-bc3b-fe29e3db11bf.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8f6a50f0-a5ba-43b0-bc3b-fe29e3db11bf.png)'
- en: Both the Visual Studio Code and Atom are excellent choices for building Go applications
    due to the level of community support for the plugins, which I highly recommend
    installing. Alternatively, you can write Go programs in any text editor and run
    the code using your terminal or Command Prompt with the standard Go commands.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 由于插件的社区支持水平很高，Visual Studio Code和Atom都是构建Go应用程序的绝佳选择，我强烈建议安装。或者，您可以在任何文本编辑器中编写Go程序，并使用标准的Go命令在终端或命令提示符中运行代码。
- en: You will need a solid internet connection. A proper internet connection will
    eliminate errors connecting to different websites. If you are building a web scraper
    that sits behind a network firewall, or if you have a weak network connection,
    you may encounter difficulties accessing some of the sites used as examples in
    this book.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要一个稳定的互联网连接。良好的互联网连接将消除连接到不同网站时出现的错误。如果您正在构建一个位于网络防火墙后面的网络爬虫，或者您的网络连接较弱，您可能会遇到访问本书示例中使用的一些网站时出现困难。
- en: Summary
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned a few of the use cases for building a web scraper
    and examples of businesses related to them. You also learned a few of the strengths
    of the Go programming language and created a development environment suitable
    for building your web scraper. These steps should help you get started on that
    path.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了构建网络爬虫的一些用例以及与之相关的企业示例。您还学习了Go编程语言的一些优势，并创建了一个适合构建网络爬虫的开发环境。这些步骤应该可以帮助您开始这条道路。
- en: In [Chapter 2](3bb44efb-a981-4717-b7ec-8eb196a1754c.xhtml), *The Request/Response
    Cycle*, we look at how to communicate with web servers in Go. We will learn the
    basics of how your web scraper communicates with web servers.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](3bb44efb-a981-4717-b7ec-8eb196a1754c.xhtml)中，*请求/响应循环*，我们将学习如何在Go中与Web服务器通信。我们将学习您的网络爬虫如何与Web服务器通信的基础知识。
