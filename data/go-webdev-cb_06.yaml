- en: Writing Microservices in Go Using Micro – a Microservice Toolkit
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Micro编写Go中的微服务-微服务工具包
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Creating your first protocol buffer
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建您的第一个协议缓冲
- en: Spinning up a microservice discovery client
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动微服务发现客户端
- en: Creating your first microservice
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建您的第一个微服务
- en: Creating your second microservice
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建您的第二个微服务
- en: Creating your Micro API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建您的微服务API
- en: Interacting with microservices using a command-line interface and web UI
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命令行界面和Web UI与微服务进行交互
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: With organizations now moving toward DevOps, microservices have started gaining
    popularity as well. As these services are independent in nature and can be developed
    in any language it allows organizations to focus on their development. With knowledge
    of the concepts covered in this chapter, we will be able to write microservices using
    Go Micro in a fairly easy way.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 随着组织现在转向DevOps，微服务也开始变得流行起来。由于这些服务具有独立的性质，并且可以用任何语言开发，这使得组织能够专注于它们的开发。通过掌握本章涵盖的概念，我们将能够以相当简单的方式使用Go
    Micro编写微服务。
- en: In this chapter, we will start by writing the protocol buffer. Then we will
    learn how we can spin up Consul, which is a Microservice discovery client, and
    eventually move on to create microservices and interact with them through the
    command line and web dashboard.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先编写协议缓冲。然后我们将学习如何启动Consul，这是一个微服务发现客户端，最终转向创建微服务并通过命令行和Web仪表板与它们进行交互。
- en: Creating your first protocol buffer
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的第一个协议缓冲
- en: Protocol buffers are a flexible, efficient, and automated mechanism for encoding
    and serializing structured data supported by Go. In this recipe, we will learn
    how to write our first protocol buffer.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 协议缓冲是Go支持的一种灵活、高效和自动化的编码和序列化结构化数据的机制。在本教程中，我们将学习如何编写我们的第一个协议缓冲。
- en: Getting ready…
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪…
- en: 'Verify whether `protoc` is installed by executing the following command:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证是否通过执行以下命令安装了`protoc`：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Install `protobuf` by way of the following:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过以下方式安装`protobuf`：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How to do it…
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Create `hello.proto` inside the `proto` directory and define a `service` interface
    with the name `Say`, which has two datatypes—`Request` and `Response`, as follows:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`proto`目录中创建`hello.proto`并定义一个名为`Say`的`service`接口，其中包含两种数据类型-`Request`和`Response`，如下所示：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Compile `hello.proto` with the following command:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令编译`hello.proto`：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works…
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Once the command has executed successfully, `hello.pb.go` will be created inside
    the `proto` directory, which will look like as shown in the following screenshot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令成功执行，`hello.pb.go`将在`proto`目录中创建，其外观如下截图所示：
- en: '![](img/e6c3c506-21d5-499e-8258-e1c595f129fb.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e6c3c506-21d5-499e-8258-e1c595f129fb.png)'
- en: 'Let’s understand the `.proto` file we have written:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解我们编写的`.proto`文件：
- en: '`syntax = "proto3";`: Here we specify that we are using `proto3` syntax, which
    makes the compiler understand that the protocol buffer has to be compiled with
    version 3\. If we don''t specify the syntax explicitly then the compiler assumes
    we are using `proto2`.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`syntax = "proto3";`：在这里，我们指定我们使用`proto3`语法，这使得编译器了解协议缓冲必须使用版本3进行编译。如果我们不明确指定语法，则编译器会假定我们使用`proto2`。'
- en: '`service Say { rpc Hello(Request) returns (Response) {} }`: Here we defined
    an RPC service with the name `Say` and a `Hello` method that takes `Request` and
    returns a `Response`.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`service Say { rpc Hello(Request) returns (Response) {} }`：在这里，我们定义了一个名为`Say`的RPC服务和一个接受`Request`并返回`Response`的`Hello`方法。'
- en: '`message Request { string name = 1; }`: Here we defined the `Request` data
    type that has a `name` field.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`message Request { string name = 1; }`：在这里，我们定义了具有`name`字段的`Request`数据类型。'
- en: '`message Response { string msg = 1; }`: Here we defined the `Response` data
    type that has a `msg` field.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`message Response { string msg = 1; }`：在这里，我们定义了具有`msg`字段的`Response`数据类型。'
- en: Spinning up a microservice discovery client
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动微服务发现客户端
- en: In a microservices architecture where multiple services are deployed, the service
    discovery client helps the application to find out the services they are dependent
    on, which can be either through DNS or HTTP. When we talk about service discovery
    clients one of the most common and famous is `Consul` by HashiCorp, which we will
    be spinning up in this recipe.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署了多个服务的微服务架构中，服务发现客户端帮助应用程序找到它们依赖的服务，可以通过DNS或HTTP进行。当我们谈论服务发现客户端时，最常见和著名的之一是HashiCorp的`Consul`，我们将在本教程中启动它。
- en: Getting ready…
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪…
- en: 'Verify whether `Consul` is installed by executing the following command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下命令验证是否安装了`Consul`：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How to do it…
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Start `consul agent` in server mode by executing the following command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下命令以服务器模式启动`consul agent`：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works…
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Once the command has executed successfully the Consul agent starts running
    in server mode, giving us the following output:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令成功执行，Consul代理将以服务器模式运行，给我们以下输出：
- en: '![](img/a92cdd9a-1d8a-4f8c-9590-403457ed9e18.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a92cdd9a-1d8a-4f8c-9590-403457ed9e18.png)'
- en: 'We can also list the members of the Consul cluster by executing the following
    command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过执行以下命令列出Consul集群的成员：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will give us the following result:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们以下结果：
- en: '![](img/49a2e1e2-9503-4260-8d73-c53721654e1b.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/49a2e1e2-9503-4260-8d73-c53721654e1b.png)'
- en: Because Consul can be run either in server or client mode with at least one
    server, to keep the setup at a bare minimum we have started our agent in server
    mode, though it is not recommended because there are chances of data loss in a
    failure scenario.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Consul可以在服务器模式或客户端模式下运行，至少需要一个服务器，为了保持最低限度的设置，我们已经以服务器模式启动了我们的代理，尽管这并不推荐，因为在故障情况下存在数据丢失的可能性。
- en: 'Moreover, browsing to `http://localhost:8500/ui/` will display the Consul web
    UI where we can view all the services and nodes, as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，浏览到`http://localhost:8500/ui/`将显示Consul Web UI，我们可以在其中查看所有服务和节点，如下所示：
- en: '![](img/7204b5d2-47f8-41b7-a5eb-1f7bee423eec.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7204b5d2-47f8-41b7-a5eb-1f7bee423eec.png)'
- en: Creating your first microservice
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的第一个微服务
- en: A microservice is just a piece of code that runs as a unique process and communicates
    through a well-defined, lightweight mechanism to serve a business goal, which
    we will be writing in this recipe using `https://github.com/micro/micro` though
    there are a number of libraries available such as `https://github.com/go-kit/kit` and `https://github.com/grpc/grpc-go`, which
    serve the same purpose.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务只是作为唯一进程运行并通过明确定义的轻量级机制进行通信以服务于业务目标的代码片段，我们将在这个示例中使用`https://github.com/micro/micro`编写，尽管还有许多其他库可用，如`https://github.com/go-kit/kit`和`https://github.com/grpc/grpc-go`，它们具有相同的目的。
- en: Getting ready…
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪…
- en: 'Start `consul agent` by executing the following command:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令启动`consul agent`：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Install and run `micro` by executing the following commands:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令安装和运行`micro`：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How to do it…
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: Create `first-greeting-service.go` inside the `services` directory by executing
    the command `$ mkdir services && cd services && touch first-greeting-service.go`.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行命令`$ mkdir services && cd services && touch first-greeting-service.go`在`services`目录中创建`first-greeting-service.go`。
- en: 'Copy the following content to `first-greeting-service.go`:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容复制到`first-greeting-service.go`：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'With everything in place, the directory structure should look like the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一切就绪后，目录结构应如下所示：
- en: '![](img/ed19fcaf-f4ff-4c02-aab8-a6df9c1da93d.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed19fcaf-f4ff-4c02-aab8-a6df9c1da93d.png)'
- en: 'Move to the `services` directory and run the program with the following command:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`services`目录并使用以下命令运行程序：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works…
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Once we run the program, the RPC server will start locally listening on port `8080`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们运行程序，RPC服务器将在本地监听端口`8080`。
- en: 'Next, execute a `POST` request from the command line as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，从命令行执行`POST`请求，如下所示：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This will give us Hello followed by the name as a response from the server
    as shown in the following screenshot:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使我们从服务器获得Hello，然后是名称作为响应，如下所示的屏幕截图：
- en: '![](img/e40538e4-a0ce-4817-8c4e-24a2c9b8b33c.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e40538e4-a0ce-4817-8c4e-24a2c9b8b33c.png)'
- en: 'Looking at the logs of the `first-greeting-service.go` will show us that the
    request is served by the first greeting service, as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`first-greeting-service.go`的日志将向我们展示请求是由第一个问候服务提供的，如下所示：
- en: '![](img/f0b1e3d4-0295-44c0-a864-5fff2aec62b4.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f0b1e3d4-0295-44c0-a864-5fff2aec62b4.png)'
- en: 'Let’s look at the program we have written:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下我们编写的程序：
- en: Using `import ("log" "time" hello "../proto" "github.com/micro/go-micro" "golang.org/x/net/context")`,
    we imported `"hello "../proto"`, a directory that includes protocol buffer source
    code and compiled protocol buffer suffixed `.pb.go`. Additionally, we imported
    the `github.com/micro/go-micro` package, which consists of all the libraries required
    to write the microservice.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`import ("log" "time" hello "../proto" "github.com/micro/go-micro" "golang.org/x/net/context")`，我们导入了`"hello
    "../proto"`，一个包含协议缓冲区源代码和已编译协议缓冲区后缀`.pb.go`的目录。此外，我们导入了`github.com/micro/go-micro`包，其中包含编写微服务所需的所有库。
- en: Next, we defined a `main()` handler where we create a new service with the name `go.micro.service.greeter`
    using `micro.NewService()`, initialize it, register the handler with it, and finally
    start it.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，我们定义了一个`main()`处理程序，在其中使用`micro.NewService()`创建一个名为`go.micro.service.greeter`的新服务，初始化它，注册处理程序，并最终启动它。
- en: Creating your second microservice
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的第二个微服务
- en: In this recipe, we will create another microservice using `go-micro`, which
    is a replica of the `first-greeting-service.go` except for the logger message
    printed on the console that demonstrates the concept of client-side load balancing
    between the two different instances of a service with the same name.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用`go-micro`创建另一个微服务，它是`first-greeting-service.go`的副本，除了在控制台上打印的日志消息之外，它演示了两个具有相同名称的服务的客户端负载平衡的概念。
- en: How to do it…
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: Create `second-greeting-service.go` inside the `services` directory by executing
    the command `$ cd services && touch second-greeting-service.go`.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行命令`$ cd services && touch second-greeting-service.go`在`services`目录中创建`second-greeting-service.go`。
- en: 'Copy the following content to `second-greeting-service.go`:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容复制到`second-greeting-service.go`：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'With everything in place, the directory structure should look like the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一切就绪后，目录结构应如下所示：
- en: '![](img/f9dc5e14-ac7d-451b-94a5-0ff6ec6eca55.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f9dc5e14-ac7d-451b-94a5-0ff6ec6eca55.png)'
- en: 'Move to the `services` directory and run the program with the following command:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`services`目录并使用以下命令运行程序：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works…
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Once we run the program, the RPC server will start locally listening on port `8080`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们运行程序，RPC服务器将在本地监听端口`8080`。
- en: 'Next, execute a `POST` request from the command line as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，从命令行执行`POST`请求，如下所示：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This will give us Hello followed by the name as a response from the server,
    as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使我们从服务器获得Hello，然后是名称作为响应，如下所示：
- en: '![](img/4575909c-9536-4bdb-b86e-cd1b65b10d01.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4575909c-9536-4bdb-b86e-cd1b65b10d01.png)'
- en: 'Looking at the logs of the `second-greeting-service.go` will show us the request
    is served by the second greeting service:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`second-greeting-service.go`的日志将向我们展示请求是由第二个问候服务提供的：
- en: '![](img/ea73a7c0-7ec3-46ad-8bc9-e7743f1a47b4.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ea73a7c0-7ec3-46ad-8bc9-e7743f1a47b4.png)'
- en: 'Now, if we execute a `POST` request again then it will print the logs in the `first-greeting-service.go`
    console, which is because of the smart, client-side, load balancing of services
    built on discovery offered by Go Micro:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们再次执行`POST`请求，它将在`first-greeting-service.go`控制台中打印日志，这是因为Go Micro提供的智能客户端负载平衡构建在发现之上的服务。
- en: '![](img/054f15ff-427a-4a86-bd7e-b9b08c09b102.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/054f15ff-427a-4a86-bd7e-b9b08c09b102.png)'
- en: Creating your Micro API
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的Micro API
- en: So far, we have explicitly called a backend service by name and a method to
    access it. In this recipe, we will learn how we can access the services using
    Go Micro API, which implements an API gateway pattern to provide a single entry
    point to the microservices. The advantage of using Go Micro API is that it serves
    over HTTP and dynamically routes to the appropriate backend service using HTTP
    handlers.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经通过名称显式调用了后端服务和访问它的方法。在这个示例中，我们将学习如何使用 Go Micro API 访问服务，该 API 实现了
    API 网关模式，提供了微服务的单一入口点。使用 Go Micro API 的优势在于它通过 HTTP 提供服务，并使用 HTTP 处理程序动态路由到适当的后端服务。
- en: Getting ready…
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪…
- en: 'Start `consul agent`, `micro API`, `first-greeting-service.go`, and `second-greeting-service.go` in
    separate terminals by executing the following commands:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下命令在单独的终端中启动 `consul agent`、`micro API`、`first-greeting-service.go` 和 `second-greeting-service.go`：
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How to do it…
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤…
- en: Create `greeting-api.go` inside the `api` directory by executing the command `$
    mkdir api && cd api && touch greeting-api.go`.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行命令 `$ mkdir api && cd api && touch greeting-api.go` 在 `api` 目录中创建 `greeting-api.go`。
- en: 'Copy the following content to `greeting-api.go`:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容复制到 `greeting-api.go`：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'With everything in place, the directory structure should look like the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一切就绪后，目录结构应该如下所示：
- en: '![](img/d5987017-7916-4937-b535-e7dc02a41da8.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d5987017-7916-4937-b535-e7dc02a41da8.png)'
- en: 'Move to the `api `directory and run the program with the following command:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 `api` 目录并使用以下命令运行程序：
- en: '[PRE17]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How it works…
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Once we run the program, the HTTP server will start locally listening on port `8080`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们运行程序，HTTP 服务器将在本地监听端口 `8080`。
- en: 'Next, browse to `http://localhost:8080/greeter/say/hello?name=Arpit+Aggarwal` as
    follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，按照以下步骤浏览至 `http://localhost:8080/greeter/say/hello?name=Arpit+Aggarwal`：
- en: '![](img/3da80faa-0f64-491e-8b1c-f1783f6c1355.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3da80faa-0f64-491e-8b1c-f1783f6c1355.png)'
- en: 'This will give you the response Hello followed by the name received as an HTTP
    request variable. Moreover, looking at the logs of the `second-greeting-service.go` will
    show us the request is served by the second greeting service, as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给出响应 Hello，后跟作为 HTTP 请求变量接收到的名称。此外，查看 `second-greeting-service.go` 的日志将显示请求是由第二个问候服务提供的，如下所示：
- en: '![](img/ffe18d8b-281f-4b8d-a22f-6a764c882ccb.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ffe18d8b-281f-4b8d-a22f-6a764c882ccb.png)'
- en: 'Now, if we execute a `GET` request again then it will print the logs in the `first-greeting-service.go` console,
    which is because of the smart, client-side, load balancing of services built on
    discovery offered by Go Micro:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们再次执行 `GET` 请求，它将在 `first-greeting-service.go` 控制台中打印日志，这是因为 Go Micro
    提供的发现功能上构建的服务的智能客户端负载平衡：
- en: '![](img/41a961ff-1753-4825-bccf-869524273f25.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/41a961ff-1753-4825-bccf-869524273f25.png)'
- en: Interacting with microservices using a command-line interface and web UI
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命令行界面和 web UI 与微服务交互
- en: So far, we have used the command line to execute `GET` and `POST` HTTP requests
    to access services. This can also be achieved by way of the Go Micro web user
    interface as well. All we need to do is start `micro web`, which we will be covering
    in this recipe.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用命令行执行了 `GET` 和 `POST` HTTP 请求来访问服务。这也可以通过 Go Micro web 用户界面来实现。我们只需要启动
    `micro web`，这将在本示例中介绍。
- en: How to do it…
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤…
- en: 'Install the `go get github.com/micro/micro` package using the `go get` command,
    as follows:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令安装 `go get github.com/micro/micro` 包：
- en: '[PRE18]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Run the web UI with the following command:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行 web UI：
- en: '[PRE19]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works…
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'Once a command has executed successfully, browsing to `http://localhost:8082/registry`
    will list all the registered services as shown in the following screenshot:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令成功执行，浏览至 `http://localhost:8082/registry` 将列出所有已注册的服务，如下截图所示：
- en: '![](img/b2a878e4-9849-4592-83bc-120587f5a12b.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b2a878e4-9849-4592-83bc-120587f5a12b.png)'
- en: 'Querying our `greeter` service using the web UI with the request `{"name" :
    "Arpit Aggarwal"}` will render you the response, `{"msg": "Hello Arpit Aggarwal"} `:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '使用 web UI 查询我们的 `greeter` 服务，请求为 `{"name" : "Arpit Aggarwal"}`，将会得到响应 `{"msg":
    "Hello Arpit Aggarwal"} `：'
- en: '![](img/900737b2-6989-4e39-b4d2-632c3494285c.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/900737b2-6989-4e39-b4d2-632c3494285c.png)'
- en: 'Querying the same `greeter` service using a `CLI` command, `query go.micro.service.greeter
    Say.Hello {"name" : "Arpit Aggarwal"}` will render you the response, `{"msg":
    "Hello Arpit Aggarwal"}`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '使用 `CLI` 命令查询相同的 `greeter` 服务，命令为 `query go.micro.service.greeter Say.Hello
    {"name" : "Arpit Aggarwal"}`，将会得到响应 `{"msg": "Hello Arpit Aggarwal"}`：'
- en: '![](img/cb86a401-112a-4f99-8c58-88b27c501957.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cb86a401-112a-4f99-8c58-88b27c501957.png)'
