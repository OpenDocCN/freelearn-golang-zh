- en: Working with WebSocket in Go
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Go中使用WebSocket
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下示例：
- en: Creating your first WebSocket server
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你的第一个WebSocket服务器
- en: Creating your first WebSocket client
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你的第一个WebSocket客户端
- en: Debugging your first local WebSocket server
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试你的第一个本地WebSocket服务器
- en: Debugging your first remote WebSocket server
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试你的第一个远程WebSocket服务器
- en: Unit testing your first WebSocket server
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试你的第一个WebSocket服务器
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: WebSocket provides a bidirectional, single-socket, full-duplex connection between
    the server and the client, making real-time communication much more efficient
    than other ways such as long polling and server-sent events.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: WebSocket提供了服务器和客户端之间的双向、单一套接字、全双工连接，使实时通信比其他方式如长轮询和服务器发送事件更加高效。
- en: With WebSocket, the client and the server can talk independently, each able
    to send and receive information at the same time after the initial handshake,
    reusing the same connection from the client to the server and the server to the
    client, which eventually reduces the delay and server load greatly, allowing web
    applications to perform modern tasks in the most effective way. The WebSocket
    protocol is supported by most major browsers, including Google Chrome, Microsoft
    Edge, Internet Explorer, Firefox, Safari, and Opera. So there are no compatibility
    issues.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用WebSocket，客户端和服务器可以独立通信，每个都能在初始握手后同时发送和接收信息，重复使用从客户端到服务器和服务器到客户端的相同连接，最终大大减少延迟和服务器负载，使Web应用程序能够以最有效的方式执行现代任务。WebSocket协议得到大多数主流浏览器的支持，包括Google
    Chrome、Microsoft Edge、Internet Explorer、Firefox、Safari和Opera。因此没有兼容性问题。
- en: In this chapter, we will learn how to create a WebSocket server and client,
    writing unit tests and debugging the server running either locally or remotely.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何创建WebSocket服务器和客户端，编写单元测试并调试运行在本地或远程的服务器。
- en: Creating your first WebSocket server
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你的第一个WebSocket服务器
- en: In this recipe, we will learn how to write a WebSocket server, which is a TCP
    application listening on port `8080` that allows connected clients to send messages
    to each other.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何编写一个WebSocket服务器，它是一个TCP应用程序，监听在端口`8080`上，允许连接的客户端彼此发送消息。
- en: How to do it…
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Install the `github.com/gorilla/websocket` package using the `go get` command,
    as follows:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`go get`命令安装`github.com/gorilla/websocket`包，如下所示：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create `websocket-server.go` where we will upgrade an HTTP request to WebSocket,
    read the JSON message from the client, and broadcast it to all of the connected
    clients, as follows:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`websocket-server.go`，我们将在其中将HTTP请求升级为WebSocket，从客户端读取JSON消息，并将其广播给所有连接的客户端，如下所示：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Run the program with the following command:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行程序：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works…
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Once we run the program, the WebSocket server will start locally listening on
    port `8080`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们运行程序，WebSocket服务器将在本地监听端口`8080`。
- en: 'Let’s understand the program we have written:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解我们编写的程序：
- en: We used `import ("log" "net/http" "github.com/gorilla/websocket")` which is
    a preprocessor command that tells the Go compiler to include all files from the `log`,
    `net/http`, and `github.com/gorilla/websocket` packages.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用了`import ("log" "net/http" "github.com/gorilla/websocket")`，这是一个预处理命令，告诉Go编译器包括所有来自`log`、`net/http`和`github.com/gorilla/websocket`包的文件。
- en: Using `var clients = make(map[*websocket.Conn]bool)`, we created a map that
    represents the clients connected to a WebSocket server with KeyType as a WebSocket
    connection object and ValueType as Boolean.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`var clients = make(map[*websocket.Conn]bool)`，我们创建了一个表示连接到WebSocket服务器的客户端的映射，KeyType为WebSocket连接对象，ValueType为布尔值。
- en: Using `var broadcast = make(chan Message)`, we created a channel where all the
    received messages are written.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`var broadcast = make(chan Message)`，我们创建了一个通道，所有接收到的消息都会被写入其中。
- en: Next, we defined a `HandleClients` handler, which upon receiving the `HTTP GET`
    request, upgrades it to `WebSocket`, registers the client with the socket server,
    reads the requested JSON messages, and writes it to the broadcast channel.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们定义了一个`HandleClients`处理程序，当收到`HTTP GET`请求时，将其升级为`WebSocket`，将客户端注册到套接字服务器，读取请求的JSON消息，并将其写入广播通道。
- en: Then, we defined a Go function `broadcastMessagesToClients`, which grabs the
    messages written to the broadcast channel and sends it out to every client that
    is currently connected to the WebSocket server.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们定义了一个Go函数`broadcastMessagesToClients`，它抓取写入广播通道的消息，并将其发送给当前连接到WebSocket服务器的每个客户端。
- en: Creating your first WebSocket client
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你的第一个WebSocket客户端
- en: In this recipe, we will create a simple client to start the WebSocket handshake
    process. The client will send a pretty standard `HTTP GET` request to the WebSocket
    server and the server upgrades it through an Upgrade header in the response.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将创建一个简单的客户端来开始WebSocket握手过程。客户端将向WebSocket服务器发送一个相当标准的`HTTP GET`请求，服务器通过响应中的Upgrade头将其升级。
- en: How to do it…
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Create `index.html` where we will open a connection to a non-secure WebSocket
    server on page load, as follows:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`index.html`，我们将在页面加载时打开到非安全WebSocket服务器的连接，如下所示：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'With everything in place, the directory structure should look like the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一切就绪后，目录结构应该如下所示：
- en: '![](img/b629829f-2f75-49d2-8adb-f5d85f9f16bd.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b629829f-2f75-49d2-8adb-f5d85f9f16bd.png)'
- en: 'Run the program with the following command:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行程序：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works…
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Once we run the program, the WebSocket server will start locally listening on
    port `8080`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们运行程序，WebSocket服务器将在本地监听端口`8080`。
- en: 'Browsing to `http://localhost:8080` will show us the WebSocket client page
    with a textbox and a Send button as shown in the following screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览到`http://localhost:8080`将显示带有文本框和发送按钮的WebSocket客户端页面，如下截图所示：
- en: '![](img/e7d52e7d-4a4c-4d38-8d18-78eec80c5f2f.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e7d52e7d-4a4c-4d38-8d18-78eec80c5f2f.png)'
- en: Debugging your first local WebSocket server
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试你的第一个本地WebSocket服务器
- en: Debugging a web application is one of the most important skills for a developer
    to learn, as it helps in identifying a problem, isolating the source of the problem,
    and then either correcting the problem or determining a way to work around it.
    In this recipe, we will learn how to debug a WebSocket server running locally
    using GoLand IDE.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 调试Web应用程序是开发人员学习的最重要的技能之一，因为它有助于识别问题、隔离问题的来源，然后要么纠正问题，要么确定解决问题的方法。在这个示例中，我们将学习如何使用GoLand
    IDE调试在本地运行的WebSocket服务器。
- en: Getting ready…
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备...
- en: This recipe assumes you have GoLand IDE installed and configured to run the
    Go Application on your machine.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例假定您已经安装并配置了GoLand IDE以在您的机器上运行Go应用程序。
- en: How to do it…
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Click Open Project in the GoLand IDE to open `websocket-server.go`, which we
    wrote in our previous recipe, as shown in the following screenshot:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击GoLand IDE中的Open Project以打开我们在以前的示例中编写的`websocket-server.go`，如下截图所示：
- en: '![](img/7e8fc02a-a5b9-4612-bd22-b277ce9efc6a.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7e8fc02a-a5b9-4612-bd22-b277ce9efc6a.png)'
- en: 'Once the project opens, click on Edit Configurations as shown in the following
    screenshot:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦项目打开，单击Edit Configurations，如下截图所示：
- en: '![](img/866d4acf-d5df-4ba7-885f-66fd01e84caf.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/866d4acf-d5df-4ba7-885f-66fd01e84caf.png)'
- en: 'Select Add New Configuration by clicking the + sign as shown in the following
    screenshot:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击+号显示如下截图所示的Add New Configuration来选择Add New Configuration：
- en: '![](img/9154d8b8-a857-4792-9ff3-d93bd660994a.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9154d8b8-a857-4792-9ff3-d93bd660994a.png)'
- en: 'Select Go Build, rename the configuration to `WebSocket Local Debug`, change
    Run kind to Directory, and click on Apply and OK as shown in the following screenshot:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Go Build，将配置重命名为`WebSocket Local Debug`，将运行类型更改为目录，然后单击应用和确定，如下截图所示：
- en: '![](img/5e252651-72a4-4c00-b3bb-d5a40c2387f7.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e252651-72a4-4c00-b3bb-d5a40c2387f7.png)'
- en: 'Place a few breakpoints and click on the Debug button:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 放置一些断点并单击调试按钮：
- en: '![](img/79998142-500c-478a-bcc1-3fb007247706.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/79998142-500c-478a-bcc1-3fb007247706.png)'
- en: How it works…
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Once we run the program, the WebSocket server will start locally in debug mode
    listening on port `8080`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们运行程序，WebSocket服务器将在本地以调试模式启动，监听端口`8080`。
- en: 'Browsing to `http://localhost:8080` will show us the WebSocket client page
    with a textbox and a Send button as shown in the following screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览到`http://localhost:8080`将显示带有文本框和发送按钮的WebSocket客户端页面，如下截图所示：
- en: '![](img/9c61dcbe-8aeb-4f39-bd23-ec1f7378dc5f.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9c61dcbe-8aeb-4f39-bd23-ec1f7378dc5f.png)'
- en: 'Enter text and click on the Send button to see the program execution stopping
    at the breakpoints we placed in the GoLand IDE, as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 输入文本并单击发送按钮，以查看程序执行停在我们在GoLand IDE中放置的断点处，如下所示：
- en: '![](img/d8e39ac7-c56e-4cd3-b842-6932d2cac0fc.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d8e39ac7-c56e-4cd3-b842-6932d2cac0fc.png)'
- en: Debugging your first remote WebSocket server
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试您的第一个远程WebSocket服务器
- en: In the previous recipe, we learnt how to debug a WebSocket server that is running
    locally. In this recipe, we will learn how to debug it if it is running on another
    or a remote machine.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在以前的示例中，我们学习了如何调试在本地运行的WebSocket服务器。在这个示例中，我们将学习如何在另一台或远程机器上调试它。
- en: The steps are more or less the same as we took in the previous recipe except
    for the debug configuration section where we will change the localhost to the
    remote machine IP or DNS and start the Delve server, which is a debugger for the
    Go programming language on the remote machine.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤与我们在以前的示例中所采取的步骤基本相同，只是在调试配置部分，我们将把本地主机更改为远程机器IP或DNS，并启动Delve服务器，这是Go编程语言在远程机器上的调试器。
- en: How to do it…
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Add another configuration by clicking on Edit Configurations... as shown in
    the following screenshot:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击Edit Configurations...添加另一个配置，如下截图所示：
- en: '![](img/176fe105-a87d-4df3-96e0-a9c3ad856881.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/176fe105-a87d-4df3-96e0-a9c3ad856881.png)'
- en: 'Click on the + sign to Add New Configuration and select Go Remote:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击+号添加新配置，然后选择Go Remote：
- en: '![](img/6af1b410-d858-4f26-969d-68705cc23442.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6af1b410-d858-4f26-969d-68705cc23442.png)'
- en: 'Rename the debug configuration to `WebSocket Remote Debug`, change the Host
    to `remote-machine-IP` or `DNS`, and click on Apply and OK as shown in the following
    screenshot:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将调试配置重命名为`WebSocket Remote Debug`，将主机更改为`remote-machine-IP`或`DNS`，然后单击应用和确定，如下截图所示：
- en: '![](img/75309b82-08d3-4bb3-afb8-5c7b07107460.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/75309b82-08d3-4bb3-afb8-5c7b07107460.png)'
- en: 'Run a headless Delve server on the target or remote machine by executing the
    following command:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令在目标或远程机器上运行无头Delve服务器：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The preceding command will start an API server listening on port `2345`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将启动一个监听端口`2345`的API服务器。
- en: 'Select WebSocket Remote Debug configuration and click on the Debug button:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择WebSocket Remote Debug配置，然后单击调试按钮：
- en: '![](img/6651b141-4aa4-4637-a6b5-29486425d23c.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6651b141-4aa4-4637-a6b5-29486425d23c.png)'
- en: How it works…
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Browse to the remotely available WebSocket client page, enter some text, and
    click on the Send button to see the program execution stopping at the breakpoints
    we placed:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览到远程可用的WebSocket客户端页面，输入一些文本，然后单击发送按钮，以查看程序执行停在我们放置的断点处：
- en: '![](img/f98f24a1-bba5-40ed-9a83-7d4b65a51286.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f98f24a1-bba5-40ed-9a83-7d4b65a51286.png)'
- en: Unit testing your first WebSocket server
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试您的第一个WebSocket服务器
- en: Unit testing or test-driven development helps the developer to design loosely-coupled
    code with the focus on code reusability. It also helps us to realize when to stop
    coding and make changes quickly.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试或测试驱动开发有助于开发人员设计松散耦合的代码，重点放在代码的可重用性上。它还帮助我们意识到何时停止编码并快速进行更改。
- en: In this recipe, we will learn how to write a unit test for the WebSocket server
    that we have already written in one of our previous recipes.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何为我们在以前的示例中已经编写的WebSocket服务器编写单元测试。
- en: See the *Creating your first WebSocket server* recipe.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 参见*创建您的第一个WebSocket服务器*示例。
- en: How to do it…
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Install the `github.com/gorilla/websocket` and `github.com/stretchr/testify/assert`
    packages using the `go get` command, as follows:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`go get`命令安装`github.com/gorilla/websocket`和`github.com/stretchr/testify/assert`包，如下所示：
- en: '[PRE6]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create `websocket-server_test.go` where we will create a test server, connect
    to it using the Gorilla client, and eventually read and write messages to test
    the connection, as follows:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`websocket-server_test.go`，我们将在其中创建一个测试服务器，使用Gorilla客户端连接到它，并最终读取和编写消息以测试连接，如下所示：
- en: '[PRE7]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works…
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'Execute a `go test` from the command line as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行执行`go test`如下：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It will give us the response `ok`, which means the test compiled and executed
    successfully.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 它将给我们响应`ok`，这意味着测试已成功编译和执行。
- en: 'Let’s see how it looks when a Go test fails. Change the expected output in
    the `assert` statement to something else. In the following `hello` has been changed
    to `hi`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看当Go测试失败时会是什么样子。将`assert`语句中的预期输出更改为其他内容。在以下示例中，`hello`已更改为`hi`：
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Execute the test again by running the `go test` command:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行`go test`命令再次执行测试：
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'It will give us the failure response along with the error trace as shown in
    the following screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 它将给我们失败的响应，以及如下截图所示的错误跟踪：
- en: '![](img/a6465f59-e243-47f4-b1da-a7e5dc4233bd.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a6465f59-e243-47f4-b1da-a7e5dc4233bd.png)'
