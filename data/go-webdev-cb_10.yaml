- en: Securing a Go Web Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护Go Web应用程序
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Creating a private key and SSL certificate using OpenSSL
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用OpenSSL创建私钥和SSL证书
- en: Moving an HTTP server to HTTPS
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将HTTP服务器移动到HTTPS
- en: Defining REST APIs and routes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义REST API和路由
- en: Creating a JSON web token
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建JSON Web令牌
- en: Securing a RESTful service using a JSON web token
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JSON Web令牌保护RESTful服务
- en: Preventing cross-site request forgery in Go web applications
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Go Web应用程序中防止跨站点请求伪造
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Securing web applications is one of the most important aspects, besides creating
    applications, that we will be learning about in this chapter. Application security
    is a very wide topic and can be implemented in various ways that are beyond the
    scope of this chapter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 保护Web应用程序是本章中我们将学习的最重要的方面之一，除了创建应用程序。应用程序安全是一个非常广泛的主题，可以以超出本章范围的各种方式实现。
- en: In this chapter, we will just focus on how we can move our Go web application
    from the HTTP protocol to HTTPS, which is often called **HTTP + TLS** **(Transport
    Layer Security)**, along with securing Go web application REST endpoints using
    **JSON web tokens** **(JWTs)**, and protecting our application from **cross-site
    request forgery (CSRF)** attacks.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于如何将我们的Go Web应用程序从HTTP协议移动到HTTPS，通常称为**HTTP + TLS** **(传输层安全)**，以及使用**JSON
    Web令牌** **(JWTs)**保护Go Web应用程序REST端点，并保护我们的应用程序免受**跨站点请求伪造（CSRF）**攻击。
- en: Creating a private key and SSL certificate using OpenSSL
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用OpenSSL创建私钥和SSL证书
- en: To move a server running on HTTP to HTTPS, the first thing we have to do is
    to get the SSL certificate, which may be either self-signed or a certificate signed
    by a trusted certificate authority such as Comodo, Symantec, or GoDaddy.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 将运行在HTTP上的服务器移动到HTTPS，我们首先要做的是获取SSL证书，这可能是自签名的，也可能是由受信任的证书颁发机构（如Comodo、Symantec或GoDaddy）签名的证书。
- en: To get the SSL certificate signed by a trusted certificate authority, we have
    to provide them with a **Certificate Signing Request** (**CSR**), which mainly
    consists of the public key of a key pair and some additional information, whereas
    a self-signed certificate is a certificate that you can issue to yourself, signed
    with its own private key.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得由受信任的证书颁发机构签名的SSL证书，我们必须向他们提供**证书签名请求**（**CSR**），主要包括密钥对的公钥和一些附加信息，而自签名证书是您可以自行签发的证书，用自己的私钥签名。
- en: Self-signed certificates can be used to encrypt data as well as CA-signed certificates,
    but the users will be displayed with a warning that says that the certificate
    is not trusted by their computer or browser. Therefore, you should not use them
    for the production or public servers.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 自签名证书可以用于加密数据，也可以用CA签名的证书，但用户将收到一个警告，说证书未被他们的计算机或浏览器信任。因此，您不应该在生产或公共服务器上使用它们。
- en: In this recipe, we will learn how to create a private key, a certificate-signing
    request, and a self-signed certificate.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将学习如何创建私钥、证书签名请求和自签名证书。
- en: Getting ready…
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作…
- en: 'This recipe assumes you have `openssl` installed on your machine. To verify
    that it is installed, execute the following command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程假设您的机器上已安装了`openssl`。要验证是否已安装，请执行以下命令：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it…
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Generate a private key and certificate signing request using `openssl` by executing
    the following command:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`openssl`执行以下命令生成私钥和证书签名请求：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will give the following output:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![](img/e4195e84-d3b8-4163-b65e-2562c8c6e5e5.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4195e84-d3b8-4163-b65e-2562c8c6e5e5.png)'
- en: 'Generate a certificate and sign it with the private key we just created by
    executing the following command:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令生成证书并用刚创建的私钥签名：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works…
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Once the command has executed successfully, we can see `domain.key`, `domain.csr`,
    and `domain.crt` generated, where `domain.key` is a 2,048-bit RSA private key
    that is used to sign the SSL certificate, and `domain.crt` and `domain.csr` are
    certificate-signing requests that consist of the public key of a key pair with
    some additional information, which is inserted into the certificate when it is
    signed.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令成功执行，我们可以看到生成了`domain.key`、`domain.csr`和`domain.crt`，其中`domain.key`是用于签署SSL证书的2,048位RSA私钥，而`domain.crt`和`domain.csr`是证书签名请求，包含了密钥对的公钥和一些附加信息，这些信息在签署证书时被插入。
- en: 'Let''s understand the command we executed to generate a certificate-signing
    request:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解我们执行的生成证书签名请求的命令：
- en: The `-newkey rsa:2048` option creates a new certificate request and a new private
    key that should be 2,048-bit, generated using the RSA algorithm.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-newkey rsa:2048`选项创建一个新的证书请求和一个新的私钥，应该是使用RSA算法生成的2,048位私钥。'
- en: The `-nodes` option specifies that the private key created will not be encrypted
    with a passphrase.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-nodes`选项指定创建的私钥不会使用密码短语加密。'
- en: The `-keyout domain.key` option specifies the filename to write the newly created
    private key to.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-keyout domain.key`选项指定要将新创建的私钥写入的文件名。'
- en: The `-out domain.csr` option specifies the output filename to write to, or the
    standard output by default.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-out domain.csr`选项指定要写入的输出文件名，或者默认情况下为标准输出。'
- en: The `-subj` option replaces a subject field of the input request with specified
    data and outputs a modified request. If we do not specify this option, then we
    have to answer the CSR information prompt by `OpenSSL` to complete the process.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-subj`选项用指定的数据替换输入请求的主题字段，并输出修改后的请求。如果我们不指定此选项，则必须通过`OpenSSL`回答CSR信息提示以完成该过程。'
- en: 'Next, we will understand the command we executed to generate the certificate
    and sign it with the private key, as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将了解我们执行的生成证书并用私钥签名的命令，如下所示：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `-key` option specifies the file to read the private key from. The `-x509`
    option outputs a self-signed certificate instead of a certificate request. The
    `-days 365` option specifies the number of days to certify the certificate for.
    The default is 30 days.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`-key`选项指定从中读取私钥的文件。`-x509`选项输出自签名证书而不是证书请求。`-days 365`选项指定证书的认证天数。默认值为30天。'
- en: Moving an HTTP server to HTTPS
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将HTTP服务器移动到HTTPS
- en: Once the web application development is over, it's likely that we will deploy
    it to the servers. While deploying, it is always recommended to run the web application
    on an HTTPS protocol rather than HTTP, especially for the servers that are publicly
    exposed. In this recipe, we will learn how we can do this in Go.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Web应用程序开发结束，我们很可能会将其部署到服务器上。在部署时，建议始终在公开暴露的服务器上使用HTTPS协议运行Web应用程序，而不是HTTP。在本教程中，我们将学习如何在Go中实现这一点。
- en: How to do it…
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Create `https-server.go`, where we will define a handler that will just write
    Hello World! to an HTTP response stream for all HTTPS requests, as follows:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`https-server.go`，在其中我们将定义一个处理程序，该处理程序将仅为所有HTTPS请求向HTTP响应流写入Hello World！，如下所示：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run the program with the following command:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行程序：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works…
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Once we run the program, the HTTPS server will start locally listening on port
    `8443`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们运行程序，HTTPS服务器将在本地监听端口`8443`上启动。
- en: 'Browsing `https://localhost:8443/` will give us Hello World! as a response
    from the server:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览`https://localhost:8443/`将从服务器获得Hello World!作为响应：
- en: '![](img/b88936f9-4a85-446f-bcc1-41e96312da93.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b88936f9-4a85-446f-bcc1-41e96312da93.png)'
- en: 'Moreover, executing a `GET` request from the command line passing the `--insecure`
    flag with `curl` will skip the certificate validation, as we are using a self-signed
    certificate:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，使用`curl`从命令行执行`GET`请求并传递`--insecure`标志将跳过证书验证，因为我们使用的是自签名证书：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s understand the program we have written:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解我们编写的程序：
- en: '`const (CONN_HOST = "localhost" CONN_PORT = "8443" HTTPS_CERTIFICATE = "domain.crt"
    DOMAIN_PRIVATE_KEY = "domain.key")`: Here, we declared four constants - `CONN_HOST`
    with the value as `localhost`, `CONN_PORT` with the value as `8443`, `HTTPS_CERTIFICATE`
    with the value as `domain.crt` or a self-signed certificate, and `DOMAIN_PRIVATE_KEY`
    with the value as `domain.key` or the private key that we created in the previous
    recipe.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`const (CONN_HOST = "localhost" CONN_PORT = "8443" HTTPS_CERTIFICATE = "domain.crt"
    DOMAIN_PRIVATE_KEY = "domain.key")`：在这里，我们声明了四个常量—`CONN_HOST`的值为`localhost`，`CONN_PORT`的值为`8443`，`HTTPS_CERTIFICATE`的值为`domain.crt`或自签名证书，`DOMAIN_PRIVATE_KEY`的值为`domain.key`或我们在上一个教程中创建的私钥。'
- en: '`func helloWorld(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, "Hello
    World!") }`: This is a Go function that takes `ResponseWriter` and `Request` as
    input parameters and writes `Hello World!` on an HTTP response stream.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`func helloWorld(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, "Hello
    World!") }`：这是一个Go函数，它以`ResponseWriter`和`Request`作为输入参数，并在HTTP响应流上写入`Hello World!`。'
- en: 'Next, we declared `main()` from where the program execution begins. As this
    method does a lot of things, let''s understand it line by line:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们声明了`main()`，程序从这里开始执行。由于这个方法做了很多事情，让我们逐行理解它：
- en: '`http.HandleFunc("/", helloWorld)`: Here, we are registering the `helloWorld`
    function with the URL pattern `/` using `HandleFunc` of the `net/http` package,
    which means `helloWorld` gets executed, passing `(http.ResponseWriter, *http.Request)`
    as input to it whenever we access the HTTPS URL pattern `/`.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http.HandleFunc("/", helloWorld)`: 在这里，我们使用`net/http`包的`HandleFunc`将`helloWorld`函数注册到URL模式`/`，这意味着每当我们访问HTTPS
    URL模式`/`时，`helloWorld`都会被执行，并将`(http.ResponseWriter, *http.Request)`作为输入传递给它。'
- en: '`err := http.ListenAndServeTLS(CONN_HOST+":"+CONN_PORT, HTTPS_CERTIFICATE,
    DOMAIN_PRIVATE_KEY, nil)`: Here, we are calling `http.ListenAndServeTLS` to serve
    HTTPS requests that handle each incoming connection in a separate Goroutine. `ListenAndServeTLS`
    accepts four parameters—server address, SSL certificate, private key, and a handler.
    Here, we are passing the server address as `localhost:8443`, our self-signed certificate,
    private key, and handler as `nil`, which means we are asking the server to use
    `DefaultServeMux` as a handler.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`err := http.ListenAndServeTLS(CONN_HOST+":"+CONN_PORT, HTTPS_CERTIFICATE,
    DOMAIN_PRIVATE_KEY, nil)`: 在这里，我们调用`http.ListenAndServeTLS`来提供处理每个传入连接的HTTPS请求的请求。`ListenAndServeTLS`接受四个参数—服务器地址、SSL证书、私钥和处理程序。在这里，我们将服务器地址传递为`localhost:8443`，我们的自签名证书、私钥和处理程序为`nil`，这意味着我们要求服务器使用`DefaultServeMux`作为处理程序。'
- en: '`if err != nil { log.Fatal("error starting https server : ", err) return}`:
    Here, we check whether there are any problems in starting the server. If there
    are, then log the error(s) and exit with a status code of 1.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if err != nil { log.Fatal("error starting https server : ", err) return}`：在这里，我们检查启动服务器时是否有任何问题。如果有问题，则记录错误并以状态码1退出。'
- en: Defining REST APIs and routes
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义REST API和路由
- en: While writing RESTful APIs, it's very common to authenticate the user before
    allowing them to access it. A prerequisite to authenticating the user is to create
    the API routes, which we will be covering in this recipe.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写RESTful API时，很常见的是在允许用户访问之前对用户进行身份验证。身份验证用户的先决条件是创建API路由，我们将在本教程中介绍。
- en: How to do it…
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Install the `github.com/gorilla/mux` and `github.com/gorilla/handlers` packages
    using the `go get` command, as follows:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`go get`命令安装`github.com/gorilla/mux`和`github.com/gorilla/handlers`包，如下所示：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create `http-rest-api.go`, where we will define three routes—`/status`, `/get-token` and
    `/employees`—along with their handlers, as follows:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`http-rest-api.go`，在其中我们将定义三个路由—`/status`、`/get-token`和`/employees`—以及它们的处理程序，如下所示：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Run the program with the following command:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行程序：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works…
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Once we run the program, the HTTP server will start locally listening on port
    `8080`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们运行程序，HTTP服务器将在本地监听端口`8080`上启动。
- en: 'Next, you could execute a `GET` request from the command line as:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您可以从命令行执行`GET`请求，如下所示：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This will give you the status of the REST API. You could execute a `GET` request
    from the command line as:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给您REST API的状态。您可以从命令行执行`GET`请求，如下所示：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This will give you a list of all the employees. We could try to get the access
    token through the command line as:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给你一个所有员工的列表。我们可以尝试通过命令行获取访问令牌：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We will get the Not Implemented message from the server.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从服务器获取“Not Implemented”消息。
- en: 'Let''s understand the program we have written:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解我们编写的程序：
- en: '`import ("encoding/json" "log" "net/http" "os" “github.com/gorilla/handlers"
    "github.com/gorilla/mux")`: Here, we imported `github.com/gorilla/mux` to create
    a Gorilla Mux router and `github.com/gorilla/handlers` to create a Gorilla logging
    handler for logging HTTP requests in the Apache Common Log Format.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`import ("encoding/json" "log" "net/http" "os" “github.com/gorilla/handlers"
    "github.com/gorilla/mux")`：在这里，我们导入了`github.com/gorilla/mux`来创建一个Gorilla Mux路由器，以及`github.com/gorilla/handlers`来创建一个Gorilla日志处理程序，以Apache
    Common Log Format记录HTTP请求。'
- en: '`func getStatus(w http.ResponseWriter, r *http.Request) { w.Write([]byte("API
    is up and running"))}`: This is a handler that just writes API is up and running to
    an HTTP response stream.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`func getStatus(w http.ResponseWriter, r *http.Request) { w.Write([]byte("API
    is up and running"))}`：这是一个处理程序，它只是向HTTP响应流写入API正在运行。'
- en: '`func getEmployees(w http.ResponseWriter, r *http.Request) { json.NewEncoder(w).Encode(employees)}`:
    This is a handler that writes a static array of employees to an HTTP response
    stream.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`func getEmployees(w http.ResponseWriter, r *http.Request) { json.NewEncoder(w).Encode(employees)}`：这是一个处理程序，它将一个静态员工数组写入HTTP响应流。'
- en: '`func notImplemented(w http.ResponseWriter, r *http.Request) { w.Write([]byte(“Not Implemented"))
    }`: This is a handler that just writes Not Implemented to an HTTP response stream.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一个处理程序，它只是向HTTP响应流写入“Not Implemented”。
- en: Then, we defined `main()`, where we create a `gorilla/mux` router instance using
    the `NewRouter()` handler with the trailing slash behavior for new routes as `true`,
    add routes and register handlers to it, and finally call `http.ListenAndServe`
    to serve HTTP requests which handle each incoming connection in a separate Goroutine.
    `ListenAndServe` accepts two parameters—the server address and the handler. Here,
    we are passing the server address as `localhost:8080` and the handler as Gorilla
    `LoggingHandler`, which logs HTTP requests in the Apache Common Log Format.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们定义了`main()`，在其中我们使用`NewRouter()`处理程序创建了一个`gorilla/mux`路由器实例，对新路由的尾随斜杠行为设置为`true`，添加路由并向其注册处理程序，最后调用`http.ListenAndServe`来处理每个传入连接的HTTP请求，每个连接在单独的Goroutine中处理。`ListenAndServe`接受两个参数——服务器地址和处理程序。在这里，我们将服务器地址传递为`localhost:8080`，处理程序为Gorilla
    `LoggingHandler`，它以Apache Common Log Format记录HTTP请求。
- en: Creating a JSON web token
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建JSON Web令牌
- en: To secure your REST API or a service endpoint, you have to write a handler in
    Go that generates a JSON web token, or `JWT`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要保护您的REST API或服务端点，您必须编写一个在Go中生成JSON Web令牌或`JWT`的处理程序。
- en: In this recipe, we will be using `https://github.com/dgrijalva/jwt-go` to generate
    `JWT` , although you can implement any library from a number of third-party libraries
    available in Go, such as `https://github.com/square/go-jose` and `https://github.com/tarent/loginsrv`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用`https://github.com/dgrijalva/jwt-go`来生成`JWT`，尽管您可以在Go中实现许多第三方库中提供的任何库，例如`https://github.com/square/go-jose`和`https://github.com/tarent/loginsrv`。
- en: How to do it…
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Install the `github.com/dgrijalva/jwt-go`, `github.com/gorilla/mux` and `github.com/gorilla/handlers`
    packages using the `go get` command, as follows:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`go get`命令安装`github.com/dgrijalva/jwt-go`、`github.com/gorilla/mux`和`github.com/gorilla/handlers`包，如下所示：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create `create-jwt.go`, where we will define the `getToken` handler that generates `JWT`,
    as follows:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`create-jwt.go`，在其中我们将定义`getToken`处理程序来生成`JWT`，如下所示：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Run the program with the following command:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行程序：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works…
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Once we run the program, the HTTP server will start locally listening on port
    `8080`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们运行程序，HTTP服务器将在本地监听端口`8080`。
- en: 'Next, we execute a `GET` request from the command line as:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们从命令行执行一个`GET`请求：
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'It will give you the status of the API. Next, we execute a `GET` request from
    the command line as:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 它将给你API的状态。接下来，我们从命令行执行一个`GET`请求：
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'It will give you a list of all the employees. Next, let''s attempt to get the
    access token of the REST API through the command line:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 它将给你一个所有员工的列表。接下来，让我们尝试通过命令行获取REST API的访问令牌：
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'It will give us the JWT token generated:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 它将给我们生成的JWT令牌：
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, browse to `https://jwt.io/` and paste the token generated in the Encoded
    section to see it''s decoded value, as shown in the following screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，浏览到`https://jwt.io/`，并将生成的令牌粘贴到Encoded部分，以查看其解码值，如下面的屏幕截图所示：
- en: '![](img/f3d84091-ec25-4d4a-a277-8a034edb5fd8.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f3d84091-ec25-4d4a-a277-8a034edb5fd8.png)'
- en: 'Let''s understand the changes we introduced in this recipe:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解我们在这个示例中引入的更改：
- en: '`import ( "encoding/json" "log" "net/http" "os" "time" jwt "github.com/dgrijalva/jwt-go"
    "github.com/gorilla/handlers" "github.com/gorilla/mux")`: Here, we imported an
    additional package—`github.com/dgrijalva/jwt-go`—which has a Go implementation
    of the JWT.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`import ( "encoding/json" "log" "net/http" "os" "time" jwt "github.com/dgrijalva/jwt-go"
    "github.com/gorilla/handlers" "github.com/gorilla/mux")`：在这里，我们导入了一个额外的包——`github.com/dgrijalva/jwt-go`，它具有JWT的Go实现。'
- en: '`const ( CONN_HOST = "localhost" CONN_PORT = "8080" CLAIM_ISSUER = "Packt"
    CLAIM_EXPIRY_IN_HOURS = 24 )`: Here, we introduced two additional constants—one
    is `CLAIM_ISSUER`, which identifies the principal that issued the JWT, and the
    other one is `CLAIM_EXPIRY_IN_HOURS`, which identifies the expiration time on
    or after which the JWT must not be accepted for processing.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`const ( CONN_HOST = "localhost" CONN_PORT = "8080" CLAIM_ISSUER = "Packt"
    CLAIM_EXPIRY_IN_HOURS = 24 )`：在这里，我们引入了两个额外的常量——一个是`CLAIM_ISSUER`，用于标识发出JWT的主体，另一个是`CLAIM_EXPIRY_IN_HOURS`，用于标识JWT必须在到期时间之后多长时间内不被接受进行处理。'
- en: '`var signature = []byte("secret")`: This is the signature held by the server.
    Using this, the server will be able to verify existing tokens and sign new ones.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`var signature = []byte("secret")`：这是服务器保存的签名。使用这个签名，服务器将能够验证现有令牌并签发新令牌。'
- en: Next, we defined a `getToken` handler, where we first prepared a claims object
    using the `JWT StandardClaims` handler, which then generates a JWT token using
    the `jwt NewWithClaims` handler, and, finally, signs it with the server signature
    and writes it to an HTTP response stream.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义了一个`getToken`处理程序，在其中我们首先使用`JWT StandardClaims`处理程序准备了一个声明对象，然后使用`jwt
    NewWithClaims`处理程序生成了一个JWT令牌，并最终使用服务器签名对其进行签名，并将其写入HTTP响应流。
- en: Securing a RESTful service using a JSON web token
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JSON Web Token保护RESTful服务
- en: Once we have a REST API endpoint and a JWT token generator handler in hand,
    we can easily secure our endpoints with the JWT, which we will be covering in
    this recipe.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了REST API端点和JWT令牌生成处理程序，我们就可以轻松地使用JWT保护我们的端点，我们将在本教程中介绍。
- en: How to do it…
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Install the `github.com/auth0/go-jwt-middleware`, `github.com/dgrijalva/jwt-go`,
    `github.com/gorilla/mux`, and `github.com/gorilla/handlers` packages using the `go
    get` command, as follows:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`go get`命令安装`github.com/auth0/go-jwt-middleware`、`github.com/dgrijalva/jwt-go`、`github.com/gorilla/mux`和`github.com/gorilla/handlers`包，如下所示：
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create `http-rest-api-secured.go`, where we will define the JWT middleware
    to check for JWTs on HTTP requests, and wrap the `/employees` route with it, as
    follows:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`http-rest-api-secured.go`，在其中我们将定义JWT中间件以检查HTTP请求中的JWT，并将`/employees`路由包装在其中，如下所示：
- en: '[PRE21]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Run the program with the following command:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行程序：
- en: '[PRE22]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How it works…
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Once we run the program, the HTTP server will start locally listening on port
    `8080`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们运行程序，HTTP服务器将在本地监听端口`8080`。
- en: 'Next, we execute a `GET` request from the command line as:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们从命令行执行`GET`请求，如下所示：
- en: '[PRE23]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'It will give you the status of the API. Next we execute a `GET` request from
    the command line as:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 它将向我们显示API的状态。接下来，我们从命令行执行`GET`请求，如下所示：
- en: '[PRE24]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'It will display us the message that the JWT was not found in the request. So,
    to get the list of all the employees, we have to get the access token of the API,
    which we can get by executing the following  command:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 它将向我们显示JWT未在请求中找到的消息。因此，要获取所有员工的列表，我们必须获取API的访问令牌，可以通过执行以下命令获取：
- en: '[PRE25]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, calling the employee API, again passing the JWT as the HTTP `Authorization` request
    header as:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，再次调用员工API，将JWT作为HTTP`Authorization`请求头传递，如下所示：
- en: '[PRE26]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'It will give you a list of all the employees, as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 它将为您提供所有员工的列表，如下所示：
- en: '[PRE27]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Let''s understand the changes we introduced in this recipe:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解本教程中引入的更改：
- en: Using `import ( "encoding/json" "log" "net/http" "os" "time" jwtmiddleware "github.com/auth0/go-jwt-middleware"
    jwt "github.com/dgrijalva/jwt-go" "github.com/gorilla/handlers" "github.com/gorilla/mux")`,
    we imported an additional package, `github.com/auth0/go-jwt-middleware`, with
    the alias as `jwtmiddleware`, which checks for JWTs on HTTP requests.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`import（"encoding/json" "log" "net/http" "os" "time" jwtmiddleware "github.com/auth0/go-jwt-middleware"
    jwt "github.com/dgrijalva/jwt-go" "github.com/gorilla/handlers" "github.com/gorilla/mux"）`，我们导入了一个额外的包，`github.com/auth0/go-jwt-middleware`，别名为`jwtmiddleware`，它在HTTP请求中检查JWT。
- en: Then, we constructed a new secure instance of `jwtmiddleware`, passing `SigningMethod`
    as `HS256` and the `ValidationKeyGetter` option as a Go function that returns
    the key to validate the JWT. Here, a server signature is used as a key to validate
    the JWT.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们构建了一个新的安全实例`jwtmiddleware`，将`SigningMethod`设置为`HS256`，并将`ValidationKeyGetter`选项设置为一个返回用于验证JWT的密钥的Go函数。在这里，服务器签名被用作验证JWT的密钥。
- en: Finally, we wrapped the `/employees` route with a `jwtmiddleware` handler in `main()`,
    which means for each request with the URL pattern `/employees` , we check and
    validate the JWT before serving the response.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们在`main()`中使用`jwtmiddleware`处理程序包装了`/employees`路由，这意味着对于每个URL模式为`/employees`的请求，我们在提供响应之前检查并验证JWT。
- en: Preventing cross-site request forgery in Go web applications
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Go Web应用程序中防止跨站点请求伪造
- en: It's a common practice to secure web applications from a malicious website,
    email, blog, instant message, or a program attacking a trusted site for which
    the user is currently authenticated to prevent unwanted action. We often call
    this cross-site request forgery.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 从恶意网站、电子邮件、博客、即时消息或程序攻击受信任的站点，用户当前已经认证，以防止不必要的操作，这是一种常见的做法。我们经常称之为跨站点请求伪造。
- en: Implementing cross-site request forgery in Go is fairly easy using the Gorilla
    CSRF package, which we will be covering in this recipe.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go中实现跨站点请求伪造非常容易，使用Gorilla CSRF包，我们将在本教程中介绍。
- en: How to do it…
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Install the `github.com/gorilla/csrf` and `github.com/gorilla/mux` packages
    using the `go get` command, as follows:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`go get`命令安装`github.com/gorilla/csrf`和`github.com/gorilla/mux`包，如下所示：
- en: '[PRE28]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Create `sign-up.html` with name and email input text fields and an action that
    gets called whenever an HTML form is submitted, as follows:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`sign-up.html`，其中包含名称和电子邮件输入文本字段，以及一个在提交HTML表单时调用的操作，如下所示：
- en: '[PRE29]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create `prevent-csrf.go`, where we create a `signUp` handler that renders a
    signup HTML form and a `post` handler that gets executed whenever an HTML form
    is submitted and the request has a valid CSRF token, as follows:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`prevent-csrf.go`，在其中创建一个`signUp`处理程序，用于呈现注册HTML表单，以及一个`post`处理程序，每当提交HTML表单并且请求具有有效的CSRF令牌时执行，如下所示：
- en: '[PRE30]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Run the program with the following command:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行程序：
- en: '[PRE31]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: How it works…
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Once we run the program, the HTTP server will start locally listening on port
    `8443`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们运行程序，HTTP服务器将在本地监听端口`8443`。
- en: 'Next, execute a `POST` request from the command line as:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，从命令行执行`POST`请求，如下所示：
- en: '[PRE32]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'It will give you the Forbidden - CSRF token invalid message as a response from
    the server and forbids you to submit an HTML form because the server does not
    find a valid CSRF token as part of the request:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 它将向您显示`Forbidden - CSRF token invalid`消息作为服务器的响应，并禁止您提交HTML表单，因为服务器在请求中找不到有效的CSRF令牌：
- en: '![](img/9154e672-74b9-424e-8e39-62b5d6d5a274.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9154e672-74b9-424e-8e39-62b5d6d5a274.png)'
- en: 'So, to submit a form, firstly we have to sign up, which generates a valid CSRF
    token by executing the following command:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要提交表单，首先我们必须注册，通过执行以下命令生成有效的CSRF令牌：
- en: '[PRE33]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This will give you an HTTP `X-CSRF-Token` , as shown in the following screenshot:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给你一个HTTP `X-CSRF-Token`，如下面的截图所示：
- en: '![](img/6a93d469-bc90-479c-90f4-948a2e81f13f.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a93d469-bc90-479c-90f4-948a2e81f13f.png)'
- en: 'And now you have to pass it as an HTTP `X-CSRF-Token` request header along
    with an HTTP cookie to submit an HTML form, as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您必须将其作为HTTP `X-CSRF-Token`请求头和HTTP cookie一起传递，以提交HTML表单，如下所示：
- en: '[PRE34]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Let''s understand the program we have written:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解一下我们编写的程序：
- en: '`const (CONN_HOST = "localhost" CONN_PORT = "8443" HTTPS_CERTIFICATE = "domain.crt"
    DOMAIN_PRIVATE_KEY = "domain.key")`: Here, we declared four constants - `CONN_HOST`
    with the value as `localhost`, `CONN_PORT` with the value as `8443`, `HTTPS_CERTIFICATE`
    with the value as `domain.crt` or a self-signed certificate, and `DOMAIN_PRIVATE_KEY`
    with the value as `domain.key` or the private key that we created in the previous
    recipe.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`const (CONN_HOST = "localhost" CONN_PORT = "8443" HTTPS_CERTIFICATE = "domain.crt"
    DOMAIN_PRIVATE_KEY = "domain.key")`：在这里，我们声明了四个常量 - `CONN_HOST`的值为`localhost`，`CONN_PORT`的值为`8443`，`HTTPS_CERTIFICATE`的值为`domain.crt`或自签名证书，以及`DOMAIN_PRIVATE_KEY`的值为`domain.key`或我们在上一个示例中创建的私钥。'
- en: '`var AUTH_KEY = []byte("authentication-key")`: This is the authentication key
    which is used to generate the CSRF token.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`var AUTH_KEY = []byte("authentication-key")`：这是用于生成CSRF令牌的身份验证密钥。'
- en: '`signUp`: This is a handler that parses `sign-up.html` and provides an `<input>`
    field populated with a CSRF token replacing `{{ .csrfField }}` in the form.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`signUp`：这是一个处理程序，解析`sign-up.html`并在表单中用CSRF令牌替换`{{ .csrfField }}`提供一个`<input>`字段。'
- en: '`post`: This is a handler that parses the submitted form, gets the value of
    the name input field, and writes it to an HTTP response stream.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`post`：这是一个处理程序，解析提交的表单，获取名称输入字段的值，并将其写入HTTP响应流。'
- en: Finally, we defined `main()`, where we create a `gorilla/mux` router instance
    using the `NewRouter()` handler with the trailing slash behavior for new routes
    as `true`, registered the `/signup` route with the `signUp` handler and the `/post`
    route with the `post` handler, and called the `http.ListenAndServeTLS` passing
    handler as `csrf.Protect(AUTH_KEY)(muxRouter)`, which makes sure all `POST` requests
    without a valid token will return `HTTP 403 Forbidden`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们定义了`main()`，在这里我们使用`NewRouter()`处理程序创建了一个`gorilla/mux`路由器实例，对于新路由的尾随斜杠行为设置为`true`，注册了`/signup`路由与`signUp`处理程序以及`/post`路由与`post`处理程序，并调用了`http.ListenAndServeTLS`，将处理程序传递为`csrf.Protect(AUTH_KEY)(muxRouter)`，这样可以确保所有没有有效令牌的`POST`请求都会返回`HTTP
    403 Forbidden`。
