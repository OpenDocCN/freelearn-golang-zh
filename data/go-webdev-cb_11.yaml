- en: Deploying a Go Web App and Docker Containers to AWS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Go Web应用程序和Docker容器部署到AWS
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Creating your first EC2 instance to run a Go web application
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建您的第一个EC2实例以运行Go Web应用程序
- en: Interacting with your first EC2 instance
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与您的第一个EC2实例交互
- en: Creating, copying, and running a Go web application on your first EC2 instance
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的第一个EC2实例上创建、复制和运行Go Web应用程序
- en: Setting up an EC2 instance to run a Docker container
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置EC2实例以运行Docker容器
- en: Pulling a Docker image on an AWS EC2 instance from Docker Hub
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在AWS EC2实例上从Docker Hub拉取Docker镜像
- en: Running your Go Docker container on an EC2 instance
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在EC2实例上运行您的Go Docker容器
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Nowadays, every organization is moving toward DevOps and everyone is talking
    about continuous integration and continuous deployment, often termed as CI and
    CD, which have become must-have skills for developers to learn. When we refer
    to CI/CD, at a very high level, we talk about the deployment of containers to
    public/private clouds through continuous integration tools, such as Jenkins and
    Bamboo.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，每个组织都在向DevOps转变，每个人都在谈论持续集成和持续部署，通常称为CI和CD，这已经成为开发人员必须学习的技能。当我们谈论CI/CD时，我们在很高的层面上谈论通过持续集成工具（如Jenkins和Bamboo）将容器部署到公共/私有云中。
- en: In this chapter, we will learn to deploy a simple Go web application and a Go
    Docker container to an EC2 instance provisioned manually. As we are going to work
    with Docker and AWS, I will assume you possess basic knowledge of Docker and AWS.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何将简单的Go Web应用程序和Go Docker容器部署到手动配置的EC2实例上。由于我们将使用Docker和AWS，我假设您具有Docker和AWS的基本知识。
- en: Creating your first EC2 instance to run a Go web application
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的第一个EC2实例以运行Go Web应用程序
- en: Creating an EC2 instance on AWS is the same as getting a new machine and installing
    the required software to run a web application. In this recipe, we will create
    an EC2 instance, provision it, and run a simple Go web application.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS上创建EC2实例与获取新机器并安装所需软件以运行Web应用程序是一样的。在本教程中，我们将创建一个EC2实例，对其进行配置，并运行一个简单的Go
    Web应用程序。
- en: Getting ready…
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作…
- en: To start with the creating and deploying on an AWS EC2 instance, firstly, you
    have to create and activate an AWS account. Because this is out of context for
    this recipe, we will not be doing it here.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始在AWS EC2实例上创建和部署，首先必须创建和激活AWS账户。由于这与本教程无关，我们将不在此处进行操作。
- en: A well-explained process you can follow to create and activate an AWS account
    is available at `https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/`
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按照以下链接中提供的详细说明来创建和激活AWS账户：`https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/`
- en: How to do it…
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤…
- en: 'Login into AWS, move to the EC2 Management Console,and click on Launch Instance
    in the Create Instance section, as shown in the following screenshot:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到AWS，转到EC2管理控制台，并在“创建实例”部分点击“启动实例”，如下截图所示：
- en: '![](img/0b7216bc-c335-49db-810c-3bf19012c046.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b7216bc-c335-49db-810c-3bf19012c046.png)'
- en: 'Select Amazon Linux AMI 2017.09.1 (HVM), SSD Volume Type, as shown in the following
    screenshot:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Amazon Linux AMI 2017.09.1（HVM），SSD卷类型，如下截图所示：
- en: '![](img/5b7fe94d-6d3d-462c-a44c-5138afc0c490.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5b7fe94d-6d3d-462c-a44c-5138afc0c490.png)'
- en: 'Select the t2.micro instance type and click on Next: Configure Instance Details:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择t2.micro实例类型，然后点击“下一步：配置实例详细信息”：
- en: '![](img/240f1ef5-9fe6-4ee2-99aa-e759f59e179c.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/240f1ef5-9fe6-4ee2-99aa-e759f59e179c.png)'
- en: 'Enable Auto-assign Public IP in the Configure Instance Details section, as
    shown in the following screenshot:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“配置实例详细信息”部分启用“自动分配公共IP”，如下截图所示：
- en: '![](img/1eb73f25-5ea4-4ba8-8774-7aaa94d41ba6.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1eb73f25-5ea4-4ba8-8774-7aaa94d41ba6.png)'
- en: Do not make any changes to the Add Storage and Add Tags section.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要对添加存储和添加标签部分进行任何更改。
- en: 'Add the HTTP and HTTPS rule and click on the Review and Launch button in the
    Configure Security Group section, as shown in the following screenshot:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加HTTP和HTTPS规则，然后在配置安全组部分点击“Review and Launch”按钮，如下截图所示：
- en: '![](img/e235e2dc-d91a-4057-bc40-270e30ba1cd2.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e235e2dc-d91a-4057-bc40-270e30ba1cd2.png)'
- en: 'Select Create a new key pair from the drop-down menu, give a name to the key
    pair, and click on the Download Key Pair button. Save the `my-first-ec2-instance.pem` file
    and click on Launch Instance, as shown in the following screenshot:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择“创建新的密钥对”，为密钥对命名，然后点击“下载密钥对”按钮。保存“my-first-ec2-instance.pem”文件，然后点击“启动实例”，如下截图所示：
- en: '![](img/4e206edf-805a-4d7f-b758-7a238d6efa34.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e206edf-805a-4d7f-b758-7a238d6efa34.png)'
- en: How it works…
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Once you click on Launch Instance, it will create and boot up a Linux machine
    on AWS, assigning the instance an ID, public DNS, and public IP through which
    we can access it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“启动实例”后，它将在AWS上创建并启动一个Linux机器，并为实例分配ID、公共DNS和公共IP，通过这些信息我们可以访问它。
- en: 'Moving to the Instances section of the EC2 Dashboard, you can see the instance
    running, as shown in the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 转到EC2仪表板的实例部分，您可以看到正在运行的实例，如下截图所示：
- en: '![](img/dbcb316a-24cd-43ae-aaf6-2f06ad1e15b6.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dbcb316a-24cd-43ae-aaf6-2f06ad1e15b6.png)'
- en: Interacting with your first EC2 instance
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与您的第一个EC2实例交互
- en: To deploy an application on an EC2 instance, we first have to login into it
    and install the necessary packages/software, which can be easily done through
    an `SSH` client, such as `MobaXterm`, `Putty`, and so on. In this recipe, we will
    login into an EC2 instance, which we created in the previous recipe, and install
    `Go` using the Red Hat package manager.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要在EC2实例上部署应用程序，我们首先必须登录并安装必要的软件包/软件，这可以通过SSH客户端（如MobaXterm，Putty等）轻松完成。在本教程中，我们将登录到之前创建的EC2实例，并使用Red
    Hat软件包管理器安装Go。
- en: How to do it…
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤…
- en: 'Set the permissions of the private key file—`my-first-ec2-instance.pem`—to
    `400`, which means the user/owner can read, can''t write, and can''t execute,
    whereas the group and others can''t read, can''t write, and can''t execute it,
    by executing the `chmod` command, as follows:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将私钥文件`my-first-ec2-instance.pem`的权限设置为`400`，这意味着用户/所有者可以读取，但不能写入，也不能执行，而组和其他人都不能读取，不能写入，也不能执行，通过执行`chmod`命令，如下所示：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Get the public DNS of the EC2 instance and connect to it using a private key
    file as an `ec2-user` by executing the `ssh` command, as follows:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取EC2实例的公共DNS，并使用私钥文件作为`ec2-user`连接到它，如下所示执行`ssh`命令：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once the command has executed successfully, we will be logged in to the EC2
    instance and the output will look like the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令成功执行，我们将登录到EC2实例，并且输出将如下所示：
- en: '![](img/43b1473d-ab5b-4cca-a5f5-f30c83772e46.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/43b1473d-ab5b-4cca-a5f5-f30c83772e46.png)'
- en: 'Switch to the `root` user from `ec2-user` by executing the `sudo` command:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行`sudo`命令从`ec2-user`切换到`root`用户：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Install `Go` using the Red Hat package manager,  `yum`, as follows:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Red Hat软件包管理器`yum`安装`Go`，如下所示：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works…
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'Verify whether `Go` has been installed successfully for the `ec2-user` by executing
    the `go version` command, as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行`go version`命令验证`ec2-user`是否成功安装了`Go`，如下所示：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Creating, copying, and running a Go web application on your first EC2 instance
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在第一个EC2实例上创建、复制和运行Go Web应用程序
- en: Once we have an EC2 instance ready with the required libraries installed, we
    can simply copy the application using the secure copy protocol and then run it
    using the `go run` command, which we will be covering in this recipe.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们准备好具有所需库的EC2实例，我们可以使用安全拷贝协议简单地复制应用程序，然后使用`go run`命令运行它，这将在本教程中介绍。
- en: How to do it…
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Create `http-server.go`, where we will create a simple HTTP server that will
    render Hello World! browsing `http://ec2-instance-public-dns:80` or executing
    `curl -X GET http://ec2-instance-public-dns:80` from the command line, as follows:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`http-server.go`，我们将创建一个简单的HTTP服务器，它将在`http://ec2-instance-public-dns:80`上呈现Hello
    World!，或者从命令行执行`curl -X GET http://ec2-instance-public-dns:80`，如下所示：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'With everything in place, the directory structure should look like the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一切就绪后，目录结构应如下所示：
- en: '![](img/1efd7ced-8473-4115-99e1-bfaa0826117b.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1efd7ced-8473-4115-99e1-bfaa0826117b.png)'
- en: 'Copy `http-server.go` from the local machine directory to an EC2 user home
    (`/home/ec2-user`) directory using the secure copy or `scp` command, as follows:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用安全拷贝或`scp`命令将`http-server.go`从本地机器目录复制到EC2用户主目录(`/home/ec2-user`)，如下所示：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Login into an EC2 instance using a private key file and a public DNS name,
    as follows:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用私钥文件和公共DNS名称登录EC2实例，如下所示：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Run `http-server.go` in the background, executing the no hang-up or `nohup`
    command, as follows:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在后台运行`http-server.go`，执行无挂起或`nohup`命令，如下所示：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works…
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Once we run the program on an EC2 instance, the HTTP server will start locally
    listening on port `80`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在EC2实例上运行程序，HTTP服务器将在本地监听端口`80`。
- en: 'Next, execute a `GET` request from the command line as:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，从命令行执行`GET`请求：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will give Hello World! as a response, which will give the following output:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这将作为响应给出“Hello World!”，将给出以下输出：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Setting up an EC2 instance to run a Docker container
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置EC2实例以运行Docker容器
- en: To run a Docker container on an EC2 instance, we first have to set up an instance
    with a Docker installation and add an `ec2-user` to the Docker group so that we
    can execute Docker commands with an `ec2-user` rather than as a `root` user, which
    we will be covering in this recipe.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要在EC2实例上运行Docker容器，我们首先必须设置一个带有Docker安装的实例，并将`ec2-user`添加到Docker组，以便我们可以以`ec2-user`而不是`root`用户执行Docker命令，这将在本教程中介绍。
- en: How to do it…
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Switch to the `root` user from the `ec2-user` user by executing the following
    command:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令从`ec2-user`用户切换到`root`用户：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Install `Docker` and update an EC2 instance by executing the following commands:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`Docker`并通过执行以下命令更新EC2实例：
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Start `Docker` as a service on an EC2 instance by executing the following command:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令在EC2实例上启动`Docker`服务：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add `ec2-user` to the `docker` group so that you can execute Docker commands
    without using `sudo`, as follows:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`ec2-user`添加到`docker`组，以便您可以在不使用`sudo`的情况下执行Docker命令，如下所示：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Log out of the EC2 instance by executing the following commands:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令退出EC2实例：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Log in again to pick up the new Docker group permissions by executing the following
    command:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令再次登录以获取新的Docker组权限：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This will give us the output on the console, as shown in the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在控制台上给出输出，如下截图所示：
- en: '![](img/19744d6c-1cb4-46f0-8538-976756388639.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/19744d6c-1cb4-46f0-8538-976756388639.png)'
- en: How it works…
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'Login into an EC2 instance and verify whether `ec2-user` can run Docker commands
    without using `sudo` by executing following command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 登录EC2实例并通过执行以下命令验证`ec2-user`是否可以在不使用`sudo`的情况下运行Docker命令：
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This will display system-wide information regarding the Docker installation,
    as shown in the following output:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示有关Docker安装的系统范围信息，如下输出所示：
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Pulling a Docker image on an AWS EC2 instance from Docker Hub
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Docker Hub在AWS EC2实例上拉取Docker镜像
- en: To run a Docker container, we need to have a Docker image, which we can either
    build from a `DockerFile` or can pull from any of the public or private Docker
    registries, such as Docker Hub, Quay, Google Container Registry, AWS Container
    Registry, and so on.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行Docker容器，我们需要有一个Docker镜像，可以从`DockerFile`构建，也可以从任何公共或私有Docker注册表中拉取，例如Docker
    Hub、Quay、Google容器注册表、AWS容器注册表等等。
- en: As we have already learned how to create a Docker image from a `DockerFile`
    and push it to Docker Hub in Chapter 9, *Working with Go and Docker*, we will
    not build an image again in this recipe. Instead, we will be pulling the pre-built
    image from Docker Hub on an EC2 instance.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经学习了如何从`DockerFile`创建Docker镜像并在第9章“使用Go和Docker”中将其推送到Docker Hub，因此我们不会在本教程中再次构建镜像。相反，我们将在EC2实例上从Docker
    Hub拉取预构建的镜像。
- en: See the *Building your first Go Docker image* recipe in [Chapter 9](0f2d1029-2554-4f34-86ea-b5a7b4c3bcbd.xhtml),
    *Working with Go and Docker*.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第9章](0f2d1029-2554-4f34-86ea-b5a7b4c3bcbd.xhtml)中查看*构建您的第一个Go Docker镜像*教程，与Go和Docker一起工作。
- en: How to do it…
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Login into Docker Hub using your credentials from the command line by executing
    the following command:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的凭据从命令行登录到Docker Hub，执行以下命令：
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Execute the `docker pull` command to pull `arpitaggarwal/golang-image` from
    Docker Hub, as follows:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`docker pull`命令从Docker Hub拉取`arpitaggarwal/golang-image`，如下所示：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This will result in the following output:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致以下输出：
- en: '![](img/8883ec18-7b18-4cac-bfc2-f24ec5718ca9.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8883ec18-7b18-4cac-bfc2-f24ec5718ca9.png)'
- en: How it works…
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'Login into an EC2 instance and verify whether `arpitaggarwal/golang-image` has
    been pulled successfully from Docker Hub by executing the following command:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到EC2实例并通过执行以下命令验证是否成功从Docker Hub拉取了`arpitaggarwal/golang-image`：
- en: '[PRE21]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This will list all the top-level images, their repositories, tags, and their
    size, as shown in the following screenshot:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这将列出所有顶级镜像、它们的存储库、标签和大小，如下截图所示：
- en: '![](img/eb1282fa-47ba-4e7b-b1b2-db37c328f248.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb1282fa-47ba-4e7b-b1b2-db37c328f248.png)'
- en: Running your Go Docker container on an EC2 instance
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在EC2实例上运行您的Go Docker容器
- en: Once we have a Docker image and Docker installed on an EC2 instance, then you
    can simply run the Docker container by executing the `docker run` command, which
    we will cover in this recipe.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们在EC2实例上安装了Docker镜像和Docker，那么您可以通过执行`docker run`命令来简单地运行Docker容器，我们将在本教程中介绍这一点。
- en: How to do it…
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Login into an EC2 instance and execute the `docker run` command to create and
    run a Docker container from `arpitaggarwal/golang-image`, assigning the container
    name as `golang-container`, using the `--name` flag, as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到EC2实例并执行`docker run`命令，从`arpitaggarwal/golang-image`创建和运行一个Docker容器，使用`--name`标志将容器名称分配为`golang-container`，如下所示：
- en: '[PRE22]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `-d` flag specified in the `docker run` command starts the container in
    a daemon mode and the hash string at the end represents the ID of the `golang-container`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker run`命令中指定的`-d`标志以守护进程模式启动容器，末尾的哈希字符串表示`golang-container`的ID。'
- en: The `-p` flag specified in the `docker run` command publishes a container's
    port(s) to the host. As we have an HTTP server running on port `8080` inside a
    Docker container and we opened port `80` for inbound traffic of our E2C instance,
    we mapped it as `80:8080`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker run`命令中指定的`-p`标志将容器的端口发布到主机。由于我们在Docker容器内的端口`8080`上运行HTTP服务器，并且我们为E2C实例的入站流量打开了端口`80`，因此我们将其映射为`80:8080`。'
- en: How it works…
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'Login into an EC2 instance and verify whether the Docker container has been
    created and is running successfully by executing the following command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到EC2实例并通过执行以下命令验证Docker容器是否已创建并成功运行：
- en: '[PRE23]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Once the preceding command has executed successfully, it will give us the running
    Docker container details, as shown in the following screenshot:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦前面的命令成功执行，它将给我们运行中的Docker容器的详细信息，如下截图所示：
- en: '![](img/ccb92238-edb4-46df-8319-951abd427ea1.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ccb92238-edb4-46df-8319-951abd427ea1.png)'
- en: 'Get the public DNS of an EC2 instance and execute a `GET` request from the
    command line as:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 获取EC2实例的公共DNS，并从命令行执行`GET`请求：
- en: '[PRE24]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This will give Hello World! as a response, as shown in the following output:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这将作为响应给出“Hello World!”，如下输出所示：
- en: '[PRE25]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
