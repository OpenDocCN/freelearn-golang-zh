- en: 17\. Using Go Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 17. 使用Go工具
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: This chapter will teach you how to make use of the Go toolkit to improve and
    build your code. It will also help you build and improve your code using Go tools
    and create binaries using `go build`. It will show you how to clean up library
    imports using `goimports`, detect suspicious constructs with `go vet`, and identify
    race conditions in your code using the Go race detector.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将教你如何利用Go工具库来改进和构建你的代码。它还将帮助你使用Go工具构建和改进你的代码，并使用`go build`创建二进制文件。它将向你展示如何使用`goimports`清理库导入，使用`go
    vet`检测可疑结构，以及使用Go竞态检测器识别代码中的竞态条件。
- en: By the end of this chapter, you will be able to run code with `go run`, format
    code with `gofmt`, automatically generate documentation using `go doc`, and download
    third-party packages using `go get`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够使用`go run`运行代码，使用`gofmt`格式化代码，使用`go doc`自动生成文档，以及使用`go get`下载第三方包。
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In the previous chapter, you've learned how to produce concurrent code. Although
    Go makes the task of creating concurrent code much easier compared to other languages,
    concurrent code is intrinsically complex. This is when learning to use tools to
    write better code that will simplify the complexity comes handy.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你已经学会了如何生成并发代码。虽然与其它语言相比，Go使创建并发代码的任务变得容易得多，但并发代码本质上很复杂。这就是学习使用工具来编写更好的代码，从而简化复杂性的时候。
- en: In this chapter, you will learn about Go tools. Go comes with several tools
    to help you write better code. For example, in the previous chapters, you came
    across `go build`, which you used to build your code into an executable. You will
    also have come across `go test`, which you used to test your code. There are also
    a few more tools that help in different ways. For example, the `goimports` tool
    will check if you have all the import statements required for your code to work
    and if not, it will add them. It can also check if any of your import statements
    are no longer needed and remove them. While this seems like a very simple thing,
    it means you no longer need to worry about the imports and can instead focus on
    the code you are writing. Alternatively, you can use the Go race detector to find
    race conditions hidden in your code. This is an extremely valuable tool when you
    start writing concurrent code.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解Go工具。Go附带了一些工具来帮助你编写更好的代码。例如，在前面的章节中，你遇到了`go build`，你用它将代码构建成可执行文件。你也遇到了`go
    test`，你用它来测试代码。还有一些其他工具以不同的方式帮助。例如，`goimports`工具将检查你是否有了使你的代码正常工作所需的全部导入语句，如果没有，它会添加它们。它还可以检查是否有任何导入语句不再需要，并删除它们。虽然这看起来很简单，但它意味着你不再需要担心导入，而可以专注于你正在编写的代码。或者，你可以使用Go竞态检测器来查找代码中隐藏的竞态条件。当你开始编写并发代码时，这是一个极其宝贵的工具。
- en: The tools provided with the Go language are one of the reasons for its popularity.
    They provide a standard way to check code for formatting issues, mistakes, and
    race conditions, which is very useful when you are developing software in a professional
    setting. The exercises in this chapter provide practical examples of how to use
    these tools to improve your code.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Go语言提供的工具是它受欢迎的原因之一。它们提供了一种标准的方式来检查代码的格式问题、错误和竞态条件，这在你在专业环境中开发软件时非常有用。本章中的练习提供了如何使用这些工具来改进你的代码的实用示例。
- en: The go build Tool
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: go build工具
- en: The `go build` tool takes Go source code and compiles it so it can be executed.
    When creating software, you write code in a human-readable programming language.
    Then, the code needs to be translated into a machine-readable format to execute.
    This is done by a compiler that compiles the machine instructions from the source
    code. To do this with Go code, you would use `go build`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`go build`工具将Go源代码编译成可执行文件。在创建软件时，你用人类可读的编程语言编写代码。然后，代码需要被翻译成机器可读的格式才能执行。这是通过编译器完成的，它从源代码编译出机器指令。要使用Go代码做这件事，你会使用`go
    build`。'
- en: 'Exercise 17.01: Using the go build Tool'
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习17.01：使用go build工具
- en: 'In this exercise, you will learn about the `go build` tool. This will take
    your Go source code and compile it into a binary. To use it, run the `go build`
    tool on the command line, as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将了解`go build`工具。它将你的Go源代码编译成二进制文件。要使用它，请在命令行上运行`go build`工具，如下所示：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s get started:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧：
- en: 'Create a new directory called `Exercise17.01` on your GOPATH. Within that directory,
    create a new file called `main.go`:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的GOPATH上创建一个名为`Exercise17.01`的新目录。在该目录内，创建一个名为`main.go`的新文件：
- en: 'Add the following code to the file to create a simple `Hello World` program:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文件中，以创建一个简单的 `Hello World` 程序：
- en: '[PRE1]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To run the program, you need to open your Terminal and navigate to the directory
    that you created the `main.go` file in. Then, run the `go build` tool by writing
    the following:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行程序，您需要打开您的终端并导航到您创建 `main.go` 文件所在的目录。然后，通过编写以下命令来运行 `go build` 工具：
- en: '[PRE2]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will create an executable called `hello_world` that you can execute the
    binary in by running it on the command line:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将创建一个名为 `hello_world` 的可执行文件，您可以通过在命令行中运行它来执行该二进制文件：
- en: '[PRE3]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output will look as follows:'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE4]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this exercise, you used the `go build` tool to compile your code into a binary
    and execute it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您使用了 `go build` 工具将代码编译成二进制文件并执行它。
- en: The go run Tool
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: go run 工具
- en: The `go run` tool is similar to `go build` in that it compiles your Go code.
    However, the subtle difference is that `go build` will output a binary file that
    you can execute, whereas the `go run` tool doesn't create a binary file that you
    need to execute. It compiles the code and runs it in a single step, with no binary
    file output in the end. This can be useful if you want to quickly check that your
    code does what you expect it to do without the need to create and run a binary
    file. This would be commonly used when you're testing your code so that you can
    run it quickly without needing to create a binary to execute.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`go run` 工具与 `go build` 类似，因为它会编译您的 Go 代码。然而，细微的区别在于 `go build` 会输出一个可以执行的二进制文件，而
    `go run` 工具不会创建需要执行的二进制文件。它将代码编译并运行在一个步骤中，最终没有二进制文件输出。如果您想快速检查代码是否按预期工作，而不需要创建和运行二进制文件，这很有用。这通常在测试代码时使用，以便您可以快速运行代码，而无需创建执行的二进制文件。'
- en: 'Exercise 17.02: Using the go run Tool'
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 17.02：使用 go run 工具
- en: 'In this exercise, you will learn about the `go run` tool. This is used as a
    shortcut to compile and run your code in a single step, which is useful if you
    want to quickly check that your code works. To use it, run the `go run` tool on
    the command line in the following format:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将了解 `go run` 工具。这是一个用于在单个步骤中编译和运行您的代码的快捷方式，如果您想快速检查代码是否工作，这很有用。要使用它，请在命令行中按照以下格式运行
    `go run` 工具：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Perform the following steps:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: Create a new directory called `Exercise17.02` on your `GOPATH`. Within that
    directory, create a new file called `main.go`.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的 `GOPATH` 中创建一个名为 `Exercise17.02` 的新目录。在该目录内，创建一个名为 `main.go` 的新文件。
- en: 'Add the following code to the file to create a simple `Hello Packt` program:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文件中，以创建一个简单的 `Hello Packt` 程序：
- en: '[PRE6]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, you can run the program using the `go run` tool:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以使用 `go run` 工具运行程序：
- en: '[PRE7]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This will execute the code and run it all in one step, giving you the following
    output:'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将执行代码并在一个步骤中运行它，给出以下输出：
- en: '[PRE8]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this exercise, you used the `go run` tool to compile and run a simple Go
    program in a single step. This is useful to quickly check whether your code does
    what you expect.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您使用了 `go run` 工具来单步编译和运行一个简单的 Go 程序。这有助于快速检查代码是否按预期工作。
- en: The gofmt Tool
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: gofmt 工具
- en: The `gofmt` tool is used to keep your code neat and consistently styled. When
    working on a large software project, an important, but often overlooked factor
    is code style. Having a consistent code style throughout your project is important
    for readability. When you have to read someone else's code, or even your own code
    months after writing it, having it in a consistent style makes you focus on the
    logic without much effort. Having to parse differing styles when reading code
    is just one more thing to worry about and leads to mistakes. To overcome this
    issue, Go comes with a tool to automatically format your code in a consistent
    way called `gofmt`. This means that, across your project, and even across other
    Go projects that use the `gofmt` tool, the code will be consistent. So, it will
    fix the formatting of the code by correcting the spacing and indentation, as well
    as trying to align the sections of your code.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`gofmt` 工具用于保持您的代码整洁并保持一致的样式。在处理大型软件项目时，代码风格是一个重要但常常被忽视的因素。在整个项目中保持一致的代码风格对于可读性非常重要。当您需要阅读他人的代码，或者几个月后再次阅读自己的代码时，保持一致的样式可以让您在无需太多努力的情况下专注于逻辑。在阅读代码时解析不同的样式只是又一件需要担心的事情，并可能导致错误。为了克服这个问题，Go
    提供了一个名为 `gofmt` 的工具，可以自动以一致的方式格式化您的代码。这意味着，在您的项目中和使用 `gofmt` 工具的其他 Go 项目中，代码将保持一致。因此，它将通过纠正间距和缩进来修复代码的格式，并尝试对齐代码的各个部分。'
- en: 'Exercise 17.03: Using the gofmt Tool'
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 17.03：使用 gofmt 工具
- en: 'In this exercise, you''ll learn how to use the `gofmt` tool to format your
    code. When you run the `gofmt` tool, it will display how it thinks the file should
    look with the correct formatting, but it won''t change the file. If you would
    like `gofmt` to automatically change the file to the correct format, you can run
    `gofmt` with the `-w` option, which will update the file and save the changes.
    Let''s get started:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将学习如何使用`gofmt`工具来格式化你的代码。当你运行`gofmt`工具时，它会显示它认为文件应该如何看起来，具有正确的格式，但它不会更改文件。如果你想让`gofmt`自动将文件更改为正确的格式，你可以使用带有`-w`选项的`gofmt`，这将更新文件并保存更改。让我们开始吧：
- en: Create a new directory called `Exercise17.03` on your GOPATH. Within that directory,
    create a new Go file called `main.go`.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的GOPATH中创建一个名为`Exercise17.03`的新目录。在该目录内，创建一个名为`main.go`的新Go文件。
- en: 'Add the following code to the file to create a badly formatted `Hello Packt`
    program:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文件中，以创建一个格式错误的`Hello Packt`程序：
- en: '[PRE9]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, in your Terminal, run `gofmt` to see what the file will look like:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在你的终端中运行`gofmt`以查看文件将看起来如何：
- en: '[PRE10]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This will display how the file should be formatted to make it correct. The
    following is the expected output:'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将显示文件应该如何格式化以使其正确。以下是预期的输出：
- en: '![Figure 17.1: Expected output for gofmt'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图17.1：gofmt的预期输出]'
- en: '](img/B14177_17_01.jpg)'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B14177_17_01.jpg]'
- en: 'Figure 17.1: Expected output for gofmt'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图17.1：gofmt的预期输出
- en: However, this only shows the changes it would make; it doesn't change the file.
    This is so you can confirm you are happy with the changes it will make.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，这仅显示它将做出的更改；它不会更改文件。这样做是为了你可以确认你对这些更改感到满意。
- en: 'To actually change the file and save those changes, you need to add the `-w`
    option:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要实际更改文件并保存这些更改，你需要添加`-w`选项：
- en: '[PRE11]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This will update the file and save the changes. Then, when you look at the
    file, it should look like this:'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将更新文件并保存更改。然后，当你查看文件时，它应该看起来像这样：
- en: '[PRE12]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You may observe that the badly formatted code has been realigned after using
    the `gofmt` tool. The spacing and indentation have been fixed, and the new line
    between `func` and `main()` has been removed.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会观察到，在使用`gofmt`工具后，格式错误的代码已经被重新对齐。间距和缩进已经被修复，`func`和`main()`之间的新行已经被删除。
- en: Note
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Many `gofmt` on your code when you save. It is worth researching how to do this
    with your chosen IDE so that the `gofmt` tool will run automatically and fix any
    spacing or indentation mistakes in your code.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当你保存代码时，会进行许多`gofmt`操作。值得研究如何使用你选择的IDE来实现这一点，以便`gofmt`工具可以自动运行并修复代码中的任何间距或缩进错误。
- en: In this exercise, you used the `gofmt` tool to reformat a badly formatted file
    into a neat state. This can seem pointless and annoying when you first start coding.
    However, as your skills improve and you start working on larger projects, you
    will start to appreciate the importance of a neat and consistent code style.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你使用了`gofmt`工具将格式错误的文件重新格式化为整洁的状态。当你刚开始编码时，这可能会显得毫无意义且令人烦恼。然而，随着你的技能提高，并开始处理更大的项目，你将开始欣赏整洁和一致代码风格的重要性。
- en: The goimports Tool
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: goimports 工具
- en: Another useful tool that comes with Go is `goimports`, which automatically adds
    the imports that are needed in your file. A key part of software engineering is
    not reinventing the wheel and reusing other people's code. In Go, you do this
    by importing the libraries at the start of your file, in the `import` section.
    It can, however, be tedious to add these imports each time you need to use them.
    You can also accidentally leave in unused imports, which can pose a security risk.
    A better way to do this is to use `goimports` to automatically add the imports
    for you. It will also remove unused imports and reorder the remaining imports
    into alphabetical order for better readability.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Go附带的其他有用工具是`goimports`，它可以自动添加文件中需要的导入。软件工程的一个关键部分不是重新发明轮子，而是重用他人的代码。在Go中，你通过在文件的`import`部分开始导入库来实现这一点。然而，每次需要使用它们时添加这些导入可能会很繁琐。你还可以意外地留下未使用的导入，这可能会带来安全风险。更好的方法是使用`goimports`来自动为你添加导入。它还会删除未使用的导入，并将剩余的导入按字母顺序重新排序，以提高可读性。
- en: 'Exercise 17.04: Using the goimports Tool'
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习17.04：使用goimports工具
- en: 'In this exercise, you will learn how to use `goimports` to manage the imports
    in a simple Go program. When you run the `goimports` tool, it will output how
    it thinks the file should look with the imports fixed. Alternatively, you can
    run `goimports` with the `-w` option, which automatically updates the imports
    in the file and saves the changes. Let''s get started:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将学习如何使用`goimports`来管理简单Go程序中的导入。当您运行`goimports`工具时，它将输出它认为文件应该如何看起来，导入已修复。或者，您可以使用带有`-w`选项的`goimports`，它会自动更新文件中的导入并保存更改。让我们开始吧：
- en: Create a new directory called `Exercise17.04` on your GOPATH. Within that directory,
    create a new file called `main.go`.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的GOPATH上创建一个名为`Exercise17.04`的新目录。在该目录内，创建一个名为`main.go`的新文件。
- en: 'Add the following code to the file to create a simple `Hello Packt` program
    with incorrect imports:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文件中，以创建一个带有错误导入的简单`Hello Packt`程序：
- en: '[PRE13]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You will notice that the `log` library has not been imported and that the `net/http`
    import is unused.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您会注意到`log`库尚未导入，而`net/http`导入未使用。
- en: 'In your Terminal, run the `goimports` tool against your file to see how the
    imports change:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端中运行`goimports`工具来查看导入如何更改：
- en: '[PRE14]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This will display the changes it would make to the file to correct it. The
    following is the expected output:'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将显示它将如何修改文件以纠正错误。以下为预期输出：
- en: '![Figure 17.2: Expected output for goimports'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图17.2：goimports的预期输出'
- en: '](img/B14177_17_02.jpg)'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B14177_17_02.jpg)'
- en: 'Figure 17.2: Expected output for goimports'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图17.2：goimports的预期输出
- en: This won't have changed the file but shows what the file will be changed to.
    As you can see, the `net/http` import has been removed and the `log` import has
    been added.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这不会更改文件，但显示了文件将被更改成什么样子。如您所见，`net/http`导入已被删除，而`log`导入已被添加。
- en: 'To write these changes to the file, add the `-w` option:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将这些更改写入文件，请添加`-w`选项：
- en: '[PRE15]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This will update the file and make it look as follows:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将更新文件并使其看起来如下：
- en: '[PRE16]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Many IDEs come with a built-in way to turn on `goimports` so that when you save
    your file, it will automatically correct the imports for you.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 许多IDE都内置了开启`goimports`的方式，这样当您保存文件时，它会自动为您纠正导入。
- en: In this exercise, you learned how to use the `goimports` tool. You can use this
    tool to detect incorrect and unused import statements and automatically correct
    them.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您学习了如何使用`goimports`工具。您可以使用此工具来检测不正确和未使用的导入语句，并自动纠正它们。
- en: The go vet Tool
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: go vet工具
- en: The `go vet` tool is used for static analysis of your Go code. While the Go
    compiler can find and inform you of mistakes you may have made, there are certain
    things it will miss. For this reason, the `go vet` tool was created. This might
    sound trivial, but some of these issues could go unnoticed for a long time after
    the code has been deployed, the most common of which is passing the wrong number
    of arguments when using the `Prinf` function. It will also check for useless assignments,
    for example, if you set a variable and then never use that variable. Another particularly
    useful thing it detects is when a non-pointer interface is passed to an "unmarshal"
    function. The compiler won't notice this as it is valid; however, the unmarshal
    function will be unable to write the data to the interface. This can be troublesome
    to debug but using the `go vet` tool allows you to catch it early and remediate
    the issue before it becomes a problem.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`go vet`工具用于对Go代码进行静态分析。虽然Go编译器可以找到并通知您可能犯的错误，但它会错过某些事情。因此，创建了`go vet`工具。这听起来可能微不足道，但其中一些问题可能在代码部署后很长时间内才会被发现，其中最常见的是在调用`Prinf`函数时传递了错误的参数数量。它还会检查无用的赋值，例如，如果您设置了一个变量然后从未使用过该变量。它还会检测当将非指针接口传递给“unmarshal”函数时的情况。编译器不会注意到这一点，因为它有效；然而，unmarshal函数将无法将数据写入接口。这可能会在调试时造成麻烦，但使用`go
    vet`工具可以在问题成为问题之前及早捕捉并修复它。'
- en: 'Exercise 17.05: Using the go vet Tool'
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习17.05：使用go vet工具
- en: 'In this exercise, you will use the `go vet` tool to find a common mistake that''s
    made when using the `Printf` function. You will use it to detect when the wrong
    number of arguments are being passed to a `Printf` function. Let''s get started:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将使用`go vet`工具来查找在使用`Printf`函数时常见的错误。您将使用它来检测是否向`Printf`函数传递了错误的参数数量。让我们开始吧：
- en: 'Create a new directory called `Exercise17.05` on your GOPATH. Within that directory,
    create a new go file called `main.go`:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的GOPATH上创建一个名为`Exercise17.05`的新目录。在该目录内，创建一个名为`main.go`的新Go文件：
- en: 'Add the following code to the file to create a simple `Hello Packt` program:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文件中，以创建一个简单的 `Hello Packt` 程序：
- en: '[PRE17]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As you can see, the `jointString` variable makes use of `fmt.Sprintf` to join
    two strings into one. However, the `%s` format string is incorrect and only formats
    one of the input strings. When you build this code, it will compile into a binary
    without any errors. However, when you run the program, the output will not be
    as expected. Luckily, the `go vet` tool was created for this exact reason.
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如您所见，`jointString` 变量使用了 `fmt.Sprintf` 将两个字符串合并为一个。然而，`%s` 格式字符串是不正确的，并且只格式化了输入字符串中的一个。当您构建此代码时，它将编译成一个二进制文件，没有任何错误。但是，当您运行程序时，输出将不会如您预期的那样。幸运的是，`go
    vet` 工具正是为此原因而创建的。
- en: 'Run the `go vet` tool against the file you created:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对您创建的文件运行 `go vet` 工具：
- en: '[PRE18]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This will display any issues it finds in the code:![Figure 17.3: Expected output
    of go vet'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将显示它在代码中发现的任何问题：![图 17.3：go vet 预期输出
- en: '](img/B14177_17_03.jpg)'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B14177_17_03.jpg)'
- en: 'Figure 17.3: Expected output of go vet'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 17.3：go vet 预期输出
- en: As you can see, `go vet` has identified an issue on line 9 of the file. The
    `Sprintf` call needs `1` argument, but we have given it `2`.
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如您所见，`go vet` 已经在文件的第 9 行识别到一个问题。`Sprintf` 调用需要 `1` 个参数，但我们提供了 `2` 个。
- en: 'Update the `Sprintf` call so that it can handle both arguments we want to send:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `Sprintf` 调用，使其能够处理我们想要发送的两个参数：
- en: '[PRE19]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, you can run `go vet` again and check that there are no more issues:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以再次运行 `go vet` 并检查是否还有更多问题：
- en: '[PRE20]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: It should return nothing, letting you know the file has no more issues.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它应该返回空值，让您知道文件没有更多问题。
- en: 'Now, run the program:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，运行程序：
- en: '[PRE21]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The output after making corrections is the string we want, as follows:'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正后的输出是我们想要的字符串，如下所示：
- en: '[PRE22]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In this exercise, you learned how to use the `go vet` tool to detect issues
    that the compiler might miss. While this is a very basic example, `go vet` can
    detect mistakes such as passing a non-pointer to unmarshal functions or detecting
    unreachable code. It is encouraged to run `go vet` as part of your build process
    to catch these issues before they make it into your program.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您学习了如何使用 `go vet` 工具来检测编译器可能遗漏的问题。虽然这是一个非常基础的例子，但 `go vet` 可以检测诸如向 unmarshal
    函数传递非指针或检测不可达代码等错误。鼓励将 `go vet` 作为构建过程的一部分运行，以在这些问题进入您的程序之前捕获它们。
- en: The Go Race Detector
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go 竞赛检测器
- en: The Go race detector was added to Go to be able to detect race conditions. As
    we mentioned in *Chapter 16*, *Concurrent Work*, you can use goroutines to run
    parts of your code concurrently. However, even experienced programmers might make
    a mistake that allows different goroutines to access the same resource at the
    same time. This is called a race condition. A race condition is problematic because
    one goroutine can edit the resource in the middle of another reading it, meaning
    the resource could be corrupted. While Go has made concurrency a first-class citizen
    in the language, the mechanisms for concurrent code do not prevent race conditions.
    Also, due to the inherent nature of concurrency, a race condition might stay hidden
    until long after your code has been deployed. This also means they tend to be
    transient, making them devilishly difficult to debug and fix. This is why the
    Go race detector was created.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Go 竞赛检测器被添加到 Go 中，以便能够检测竞争条件。正如我们在第 16 章*并发工作*中提到的，您可以使用 goroutines 来并发运行代码的一部分。然而，即使是经验丰富的程序员也可能犯下错误，允许不同的
    goroutines 同时访问相同的资源。这被称为竞争条件。竞争条件是问题性的，因为一个 goroutine 可能会在另一个正在读取资源的 goroutine
    中间编辑资源，这意味着资源可能会被损坏。虽然 Go 已经将并发作为语言中的第一公民，但并发代码的机制并不能防止竞争条件。此外，由于并发的固有性质，竞争条件可能直到您的代码部署很长时间后才被发现。这也意味着它们往往是瞬时的，这使得它们难以调试和修复。这就是为什么创建
    Go 竞赛检测器的原因。
- en: This tool works by using an algorithm that detects asynchronous memory access,
    but a drawback of this is that it can only do so when the code executes. So, you
    need to run the code to be able to detect race conditions. Luckily, it has been
    integrated into the Go toolchain, so we can use it to do this for us.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 此工具通过使用一种检测异步内存访问的算法来工作，但它的缺点是只能在代码执行时进行。因此，您需要运行代码才能检测到竞争条件。幸运的是，它已经集成到 Go
    工具链中，因此我们可以用它来自动完成这项工作。
- en: 'Exercise 17.06: Using the Go Race Detector'
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 17.06：使用 Go 竞赛检测器
- en: 'In this exercise, you will create a basic program that contains a race condition.
    You will use the Go race detector on the program to find the race condition. You
    will learn how to identify where the problem lies and then learn ways to mitigate
    the race condition. Let''s get started:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将创建一个包含竞态条件的基本程序。你将使用Go竞态检测器来查找程序中的竞态条件。你将学习如何确定问题所在，然后学习减轻竞态条件的方法。让我们开始吧：
- en: Create a new directory called `Exercise17.06` on your GOPATH. Within that directory,
    create a new file called `main.go`.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的GOPATH中创建一个名为`Exercise17.06`的新目录。在该目录内，创建一个名为`main.go`的新文件。
- en: 'Add the following code to the file to create a simple program with race conditions:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文件中，以创建一个具有竞态条件的简单程序：
- en: '[PRE23]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As you can see, there is an array called `names` with one item in it. A goroutine
    then starts appending more names to it. At the same time, the main goroutine is
    attempting to print out all the items in the array. So, both goroutines are accessing
    the same resource at the same time, which is a race condition.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如你所见，有一个名为`names`的数组，其中包含一个项目。然后一个goroutine开始向其中添加更多名称。与此同时，主goroutine正在尝试打印出数组中的所有项目。因此，两个goroutine同时访问相同的资源，这就是竞态条件。
- en: 'Run the code with the `race` flag activated:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活`race`标志运行代码：
- en: '[PRE24]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Running this command will give us the following output:'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行此命令将给出以下输出：
- en: '![Figure 17.4: Expected output when using the Go race detector'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图17.4：使用Go竞态检测器时的预期输出'
- en: '](img/B14177_17_04.jpg)'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B14177_17_04.jpg)'
- en: 'Figure 17.4: Expected output when using the Go race detector'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图17.4：使用Go竞态检测器时的预期输出
- en: 'In the preceding screenshot, you can see a warning, informing you about the
    race condition. It tells you that the same resource was read and written in the
    code on lines `main.go:10` and `main.go:15`, which look as follows:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，你可以看到一个警告，告诉你有关竞态条件的信息。它告诉你代码中在`main.go:10`和`main.go:15`行中读取和写入相同的资源，如下所示：
- en: '[PRE25]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: and
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 和
- en: '[PRE26]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: As you can see, in both cases, it is the `names` array that is being accessed,
    so that is where the problem lies. The reason this happens is that the program
    starts to print the `names` before it waits for the `finished` channel.
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如你所见，在这两种情况下，都是访问`names`数组，所以问题就出在这里。这种情况发生的原因是程序在等待`finished`通道之前开始打印`names`。
- en: 'A solution could be to wait for the `finished` channel before printing the
    items:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一种解决方案是在打印项目之前等待`finished`通道：
- en: '[PRE27]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This means the items will have all been added to the array before you start
    to print them out. You can confirm this solution by running the program again
    with the race flag activated:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这意味着在开始打印之前，所有项目都将被添加到数组中。你可以通过再次运行程序并激活竞态标志来确认这个解决方案：
- en: '[PRE28]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This should run the program as normal and show no race condition warnings.
    The expected output after the corrections have been made is as follows:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这应该正常运行程序，并且不会显示竞态条件警告。在进行了修正之后，预期的输出如下所示：
- en: '[PRE29]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The final program with the race condition now fixed would look as follows:'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最终修复了竞态条件的程序如下所示：
- en: '[PRE30]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: While the program in this exercise was quite simple, as was the solution, you
    are encouraged to return to *Chapter 16*, *Concurrent Work*, and use the `race`
    flag in the activities there. This will provide a better working example of how
    the Go race detector can help you.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个练习中的程序相当简单，解决方案也是如此，但鼓励你回到**第16章**，**并发工作**，并在那里的活动中使用`race`标志。这将提供一个更好的工作示例，说明Go竞态检测器如何帮助你。
- en: Note
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The Go race detector is often used by professional software developers to confirm
    that their solution doesn't contain any hidden race conditions.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Go竞态检测器通常被专业软件开发者用来确认他们的解决方案中不包含任何隐藏的竞态条件。
- en: The go doc Tool
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: go doc工具
- en: The `go doc` tool is used to generate documentation for packages and functions
    in Go. An often-neglected part of many software projects is the documentation.
    This is because it can be tedious to write and even more tedious to keep up to
    date. So, Go comes with a tool to automatically generate documentation for package
    declarations and functions in your code. You simply need to add comments to the
    start of functions and packages. Then, these will be picked up and combined with
    the function header.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`go doc`工具用于为Go中的包和函数生成文档。许多软件项目中经常被忽视的部分是文档。这是因为编写它可能很繁琐，而且保持其更新状态可能更加繁琐。因此，Go自带了一个工具，可以自动生成代码中包声明和函数的文档。你只需在函数和包的开始处添加注释。然后，这些注释将被拾取并与函数头结合。'
- en: This can then be shared with others to help them understand how to use your
    code. To generate the documentation for a package and its function, you can use
    the `go doc` tool. Documentation like this helps when you are working on a large
    project and other people need to make use of your code. Often, in a professional
    setting, different teams will be working on different parts of a program; each
    team will need to communicate to the other teams about what functions are available
    in a package and how to call them. To do this, they could use `go doc` to generate
    the documentation for the code they've written and share it with other teams.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就可以与他人共享，帮助他们理解如何使用你的代码。要为包及其函数生成文档，你可以使用 `go doc` 工具。这种类型的文档在处理大型项目时非常有用，其他人在使用你的代码时需要了解如何使用。在专业环境中，不同的团队可能会在程序的不同部分工作；每个团队都需要与其他团队沟通，说明包中提供了哪些函数以及如何调用它们。为此，他们可以使用
    `go doc` 为他们编写的代码生成文档，并与其他团队共享。
- en: 'Exercise 17.07: Implementing the go doc Tool'
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 17.07：实现 go doc 工具]
- en: 'In this exercise, you will learn about the `go doc` tool and how it can be
    used to generate documentation for your code. Let''s get started:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将了解 `go doc` 工具以及如何用它来生成代码的文档。让我们开始吧：
- en: Create a new directory called `Exercise17.07` on your GOPATH. Within that directory,
    create a new file called `main.go`.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 GOPATH 中创建一个名为 `Exercise17.07` 的新目录。在该目录内，创建一个名为 `main.go` 的新文件。
- en: 'Add the following code to the `main.go` file you created:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到你创建的 `main.go` 文件中：
- en: '[PRE31]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This creates a simple program that contains two functions: one called `Add`,
    which adds two numbers, and one called `Multiply`, which multiplies two numbers.'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将创建一个包含两个函数的简单程序：一个名为 `Add` 的函数，用于添加两个数字，另一个名为 `Multiply` 的函数，用于乘以两个数字。
- en: 'Run the following command to compile and execute the file:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令来编译和执行文件：
- en: '[PRE32]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The output will look as follows:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE33]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You will notice that both functions have comments above them that begin with
    the name of the function. This is a Go convention to let you know that these comments
    can be used as documentation. What this means is that you can use the `go doc`
    tool to create documentation for the code. In the same directory as your `main.go`
    file, run the following:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会注意到这两个函数上方都有注释，注释以函数名开头。这是 Go 的一个约定，表示这些注释可以用作文档。这意味着你可以使用 `go doc` 工具为代码创建文档。在你的
    `main.go` 文件所在的目录中，运行以下命令：
- en: '[PRE34]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This will generate documentation for the code and output it, as follows:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将生成代码的文档并将其输出，如下所示：
- en: '![Figure 17.5: Expected output from go doc'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 17.5：go doc 的预期输出'
- en: '](img/B14177_17_05.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B14177_17_05.jpg]'
- en: 'Figure 17.5: Expected output from go doc'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.5：go doc 的预期输出
- en: In this exercise. you learned how to use the `go doc` tool to generate documentation
    on the Go package you created, as well as its functions. You can use this for
    other packages you have created and share the documentation with others if they
    would like to make use of your code.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你学习了如何使用 `go doc` 工具为创建的 Go 包及其函数生成文档。你可以使用它为其他包生成文档，并与他人共享，如果他们想使用你的代码的话。
- en: The go get Tool
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: go get 工具
- en: The `go get` tool allows you to download and use different libraries. While
    Go comes with a wide range of packages by default, it is dwarfed by the number
    of third-party packages that are available. These provide extra functionality
    that you can use in your own code to enhance it. However, for your code to make
    use of these packages, you need to have them on your computer so that the compiler
    can include them when compiling your code. To download these packages, you can
    use the `go get` tool.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`go get` 工具允许你下载和使用不同的库。虽然 Go 默认附带了一系列的包，但与可用的第三方包数量相比，就显得微不足道了。这些包提供了额外的功能，你可以在自己的代码中使用它们来增强代码。然而，为了使你的代码能够使用这些包，你需要在电脑上安装它们，以便编译器在编译你的代码时包含它们。要下载这些包，你可以使用
    `go get` 工具。'
- en: 'Exercise 17.08: Implementing the go get Tool'
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 17.08：实现 go get 工具
- en: 'In this exercise, you will learn how to download a third-party package using
    `go get`. Let''s get started:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将学习如何使用 `go get` 下载第三方包。让我们开始吧：
- en: Create a new directory called `Exercise17.08` on your GOPATH. Within that directory,
    create a new file called `main.go`.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 GOPATH 中创建一个名为 `Exercise17.08` 的新目录。在该目录内，创建一个名为 `main.go` 的新文件。
- en: 'Add the following code to the `main.go` file you created:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到你创建的 `main.go` 文件中：
- en: '[PRE35]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This is a simple web server that you can start by running the following command:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是一个简单的 Web 服务器，你可以通过运行以下命令来启动它：
- en: '[PRE36]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'However, the web server uses a third-party package called "`mux`." In the import
    section, you will see that it has been imported from "`github.com/gorilla/mux`."
    However, since we don''t have this package stored locally, an error will occur
    when we try to run the program:![Figure 17.6: Expected error message'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然而，web 服务器使用了一个名为 "`mux`" 的第三方包。在导入部分，你会看到它已经被从 "`github.com/gorilla/mux`" 导入。然而，由于我们没有在本地存储这个包，当我们尝试运行程序时会出现错误：![图
    17.6：预期的错误信息
- en: '](img/B14177_17_06.jpg)'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B14177_17_06.jpg](img/B14177_17_06.jpg)'
- en: 'Figure 17.6: Expected error message'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 17.6：预期的错误信息
- en: 'To get the third-party package, you can use `go get`. This will download it
    locally so that our Go code can make use of it:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取第三方包，你可以使用 `go get`。这将将其下载到本地，以便我们的 Go 代码可以使用它：
- en: '[PRE37]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now that you have downloaded the package, you can run the web server again:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你已经下载了包，你可以再次运行 web 服务器：
- en: '[PRE38]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This time, it should run without any errors:'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这次，它应该可以无错误地运行：
- en: '![Figure 17.7: Expected output when running the web server'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 17.7：运行 web 服务器时的预期输出'
- en: '](img/B14177_17_07.jpg)'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B14177_17_07.jpg](img/B14177_17_07.jpg)'
- en: 'Figure 17.7: Expected output when running the web server'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 17.7：运行 web 服务器时的预期输出
- en: 'While the web server is running, you can open `http://localhost:8888` in your
    web browser and check that it works:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当 web 服务器运行时，你可以在你的网络浏览器中打开 `http://localhost:8888` 并检查它是否工作：
- en: '![Figure 17.8: Web server output when viewed in Firefox'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 17.8：在 Firefox 中查看 web 服务器输出'
- en: '](img/B14177_17_08.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B14177_17_08.jpg](img/B14177_17_08.jpg)'
- en: 'Figure 17.8: Web server output when viewed in Firefox'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.8：在 Firefox 中查看 web 服务器输出
- en: In this exercise, you learned how to download third-party packages using the
    `go get` tool. This allows the use of tools and packages beyond what comes as
    a standard package in Go.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你学习了如何使用 `go get` 工具下载第三方包。这允许使用 Go 标准包之外的工具和包。
- en: 'Activity 17.01: Using gofmt, goimport, go vet, and go get to Correct a File'
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 17.01：使用 gofmt、goimport、go vet 和 go get 修正文件
- en: 'Imagine you are working on a project with poorly written code. The file contains
    a badly formatted file, missing imports, and a log message in the wrong place.
    You want to use the Go tools you''ve learned about in this chapter to correct
    the file and find any issues with it. In this activity, you will use `gofmt`,
    `goimport`, `go vet`, and `go get` to fix the file and find any issues within
    it. The steps for this activity are as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 想象你正在对一个代码编写不佳的项目进行工作。该文件包含格式错误的文件，缺失的导入，以及放置错误的位置的日志信息。你希望使用本章中学习到的 Go 工具来修正文件并查找其中的任何问题。在这个活动中，你将使用
    `gofmt`、`goimport`、`go vet` 和 `go get` 来修正文件并查找其中的任何问题。这个活动的步骤如下：
- en: Create a directory called `Activity 17.01`.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `Activity 17.01` 的目录。
- en: Create a file called `main.go`.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件。
- en: Add the example code to `main.go`.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将示例代码添加到 `main.go` 中。
- en: Fix any formatting issues.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修复任何格式问题。
- en: Fix any missing imports from `main.go`.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修复 `main.go` 中任何缺失的导入。
- en: Check for any issues the compiler may miss by using `go vet`.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `go vet` 检查编译器可能遗漏的任何问题。
- en: Ensure the third-party package, "`gorilla/mux`", has been downloaded to your
    local computer.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保第三方包 "`gorilla/mux`" 已经下载到你的本地计算机。
- en: 'The following is the expected output:'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是你预期的输出：
- en: '![Figure 17.9: Expected output when running the code'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 17.9：运行代码时的预期输出'
- en: '](img/B14177_17_09.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B14177_17_09.jpg](img/B14177_17_09.jpg)'
- en: 'Figure 17.9: Expected output when running the code'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.9：运行代码时的预期输出
- en: 'You can check this worked by going to `http://localhost:8888` in your web browser:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在浏览器中访问 `http://localhost:8888` 来检查这是否成功：
- en: '![Figure 17.10: Expected output when accessing the web server through Firefox'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 17.10：通过 Firefox 访问 web 服务器时的预期输出'
- en: '](img/B14177_17_10.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B14177_17_10.jpg](img/B14177_17_10.jpg)'
- en: 'Figure 17.10: Expected output when accessing the web server through Firefox'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.10：通过 Firefox 访问 web 服务器时的预期输出
- en: Note
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found on page 775.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这个活动的解决方案可以在第 775 页找到。
- en: 'The following is the example code to correct:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是需要修正的示例代码：
- en: '[PRE39]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Summary
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Go tools are invaluable to a programmer when they're writing code. In this chapter,
    you learned about `go build` and how to compile your code into executables. Then,
    you learned how consistent neat code is important when working on a project and
    how you can use `gofmt` to automatically neaten up the code for you. This can
    be further improved with `goimports`, which can remove unnecessary imports for
    better security and automatically add imports you may have forgotten to add yourself.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序员编写代码时，Go 工具对他们来说是无价的。在本章中，你学习了 `go build` 以及如何将你的代码编译成可执行文件。然后，你了解到在项目开发中，保持代码的一致性和整洁是多么重要，以及你可以如何使用
    `gofmt` 自动美化代码。这可以通过 `goimports` 进一步改进，它可以移除不必要的导入以增强安全性，并自动添加你可能忘记添加的导入。
- en: After, you looked at `go vet` and how it can be used to help you find any mistakes
    that the compiler may have missed. You also learned how to use the Go race detector
    to find race conditions hidden in your code. Then, you learned how to generate
    documentation for your code, which makes for easier collaboration when working
    on larger projects. Finally, you looked at downloading third-party packages using
    the `go get` tool, which allows you to make use of numerous Go packages that are
    available online to enhance your own code.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，你了解了 `go vet` 以及它如何帮助你找到编译器可能遗漏的任何错误。你还学习了如何使用 Go 竞态检测器来查找代码中隐藏的竞态条件。然后，你学习了如何为你的代码生成文档，这有助于在处理大型项目时进行更轻松的协作。最后，你了解了如何使用
    `go get` 工具下载第三方包，这允许你利用在线可用的众多 Go 包来增强你自己的代码。
- en: In the next chapter, you will learn about security. You will learn how to prevent
    your code from being exploited and learn how to guard it against common attack
    vectors.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习关于安全的内容。你将了解如何防止你的代码被利用，以及如何保护它免受常见的攻击向量。
