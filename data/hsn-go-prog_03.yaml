- en: Type Conversions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型转换
- en: Converting types from one to the other is a very common operation during daily
    programming activities, and therefore knowing how to do so is very important.
    In this chapter, we will go through some practical examples to learn how to convert
    one type into another effortlessly.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在日常编程活动中，从一种类型转换为另一种类型是非常常见的操作，因此知道如何做到这一点非常重要。在本章中，我们将通过一些实际示例来学习如何轻松地将一种类型转换为另一种类型。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Trimming spaces from the beginning and end of strings
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从字符串的开头和结尾修剪空格
- en: Extracting substrings from string values
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从字符串值中提取子字符串
- en: Replacing parts of a string
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 替换字符串的部分
- en: Escaping characters in strings
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在字符串中转义字符
- en: Capitalizing string values
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大写字符串值
- en: Converting a Boolean into a String
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将布尔值转换为字符串
- en: 'We''re going to start off with learning how to convert a `Boolean` value into
    a `String` value:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从学习如何将`Boolean`值转换为`String`值开始：
- en: In our editor, after creating a new file, `main.go`, and the `main` function,
    as always, let's consider a variable called `isNew`, which is a Boolean. Hence
    the value will be `true`.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的编辑器中，创建一个名为`main.go`的新文件和`main`函数后，让我们考虑一个名为`isNew`的变量，它是一个布尔值。因此值将是`true`。
- en: 'So, let''s say that we want to print it out to our console with a message.
    Check the following screenshot:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所以，假设我们想要将其打印到控制台并附上消息。请查看以下截图：
- en: '![](img/2a36f4ec-b575-4739-9391-88b78d5af789.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a36f4ec-b575-4739-9391-88b78d5af789.png)'
- en: As you can see, we encounter a compile-time error. Thus, you cannot use the
    `+` operator and we need to convert the `isNew` Boolean value to its string representation.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们遇到了一个编译时错误。因此，您不能使用`+`运算符，我们需要将`isNew`布尔值转换为其字符串表示形式。
- en: Let's use the `stringconvert` package, which has various string conversion functions,
    of which, we're going to use `FormatBool`.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用`stringconvert`包，其中有各种字符串转换函数，其中，我们将使用`FormatBool`。
- en: 'Taking a `Boolean` value returns every string representation of it, and in
    this case, it''s `isNew`. If you look at the signature, you''ll see that it returns
    true or false based on the value of the Boolean value passed:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取`Boolean`值返回其每个字符串表示形式，此时是`isNew`。如果您查看签名，您会看到它根据传递的布尔值的值返回true或false：
- en: '![](img/4f96132a-3597-4cc1-babf-3aaab03d088c.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4f96132a-3597-4cc1-babf-3aaab03d088c.png)'
- en: 'So, let''s add `isNewStr`, run it and check the output:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所以，让我们添加`isNewStr`，运行它并检查输出：
- en: '![](img/31306e10-e0bd-45eb-9e23-3bc257ac874e.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/31306e10-e0bd-45eb-9e23-3bc257ac874e.png)'
- en: There is another way of printing such values to the console and it is called
    `Printf`. It can actually format various types to the console. For instance, we
    can use the special characters that we went over previously.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种将这些值打印到控制台的方法，称为`Printf`。它实际上可以将各种类型格式化到控制台。例如，我们可以使用之前介绍过的特殊字符。
- en: Note that we won't use `isNewStr` for `Printf` because now we can use any type
    and it will find a default representation to string.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们不会为`Printf`使用`isNewStr`，因为现在我们可以使用任何类型，它将找到一个默认的字符串表示。
- en: 'Moreover, Go does not accept unused variables and unused packages, and hence,
    we are going to comment `isNewStr := strconv.FormatBool(isNew)` out and remove
    `isNewStr` too. Now, we can run the following code:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，Go不接受未使用的变量和未使用的包，因此，我们将注释掉`isNewStr := strconv.FormatBool(isNew)`并删除`isNewStr`。现在，我们可以运行以下代码：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following output is obtained:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 得到以下输出：
- en: '![](img/0c29abd4-91fa-4719-b8da-074263400aec.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0c29abd4-91fa-4719-b8da-074263400aec.png)'
- en: Now, we get the same message as before, and that is how you can easily convert
    a `Boolean` type to a `String`.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们得到与之前相同的消息，这就是您如何轻松地将`Boolean`类型转换为`String`类型。
- en: In the next section, we're going to see how to convert integer and float values
    into a string.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到如何将整数和浮点值转换为字符串。
- en: Converting integer and float values into a string
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将整数和浮点值转换为字符串
- en: In this section, we're going to learn how to convert integer and float values
    into string values. At first, this may seem a little complex, but after this section
    you will feel comfortable enough to work with those conversions. So let's go back
    to our editor and see how we can do it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何将整数和浮点值转换为字符串值。起初，这可能看起来有点复杂，但在本节之后，您将感到足够舒适以处理这些转换。所以让我们回到我们的编辑器，看看我们如何做到这一点。
- en: Converting an integer value into a string value
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将整数值转换为字符串值
- en: 'Let''s start with converting an integer value into a string value:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从将整数值转换为字符串值开始：
- en: Under the string conversion package, which is `strconv`, we have a bunch of
    functions that we can use for these conversions; one of these functions is `FormatInt`.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在字符串转换包`strconv`下，我们有一堆可以用于这些转换的函数；其中一个函数是`FormatInt`。
- en: So let's go ahead and use base 10\. You can have different bases, such as 16,
    10, and 24.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所以让我们继续使用十进制。您可以有不同的基数，比如16、10和24。
- en: If you look at the signature, you'll see that it returns a string.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您查看签名，您会看到它返回一个字符串。
- en: 'Now, the code will not work exactly the way we want, but we''re going to see
    why and we''re going to fix it. The following output is obtained when you run
    the code that has been previously described:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，代码将不会完全按照我们想要的方式工作，但我们将看到原因并加以修复。当您运行先前描述的代码时，将获得以下输出：
- en: '![](img/9d422335-6dc0-4b37-bb25-fbb001f9bf1c.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9d422335-6dc0-4b37-bb25-fbb001f9bf1c.png)'
- en: 'Now, we know that it accepts integer type 64; let''s modify the code and run
    it again to obtain an output as follows:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们知道它接受64位整数类型；让我们修改代码并再次运行以获得以下输出：
- en: '![](img/6070c681-1066-4311-a206-99eb0050f9e8.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6070c681-1066-4311-a206-99eb0050f9e8.png)'
- en: 'We get `100` as a string value back to our console. You may not want to do
    this all the time, and hence here''s the code that you can run:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们得到`100`作为字符串值返回到我们的控制台。您可能不想一直这样做，因此这是您可以运行的代码：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We have used a different function that automatically converts integers to ASCII.
    On running the code, we obtain the following output:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用了一个不同的函数，它会自动将整数转换为ASCII。运行代码后，我们得到以下输出：
- en: '![](img/6257ebe3-8da2-41da-96e5-1a5d0fc65b4b.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6257ebe3-8da2-41da-96e5-1a5d0fc65b4b.png)'
- en: Converting a float value into a string value
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将浮点值转换为字符串值
- en: 'Let''s move on to the second conversion, which is turning a float value into
    a string value:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续进行第二次转换，即将浮点值转换为字符串值：
- en: Herein, we will have another number for `numberFloat`, for instance `23445221.1223`,
    and we will learn to convert this into a shrink value.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们将为`numberFloat`有另一个数字，例如`23445221.1223`，并且我们将学习将其转换为缩小值。
- en: We will consider another function, which is `FormatFloat`.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将考虑另一个函数，即`FormatFloat`。
- en: 'So, let''s go ahead and look at the signature:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，让我们继续看一下签名：
- en: '![](img/10f21884-0e44-4085-9269-2327420941ea.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/10f21884-0e44-4085-9269-2327420941ea.png)'
- en: 'The first thing that it expects us to do is pass a float `64`, (we have float
    `32` as well); they are `bitSizes` and represent how big the float can be. We
    have the format (`fmt`) for which we can use various letters, such as *E*, *F*,
    or *G;* for instance, *G* is for large exponents, and *F* is for no exponent.
    We have precision, which basically tells us how far we want to go with using the
    numbers after the dot, and the bit size is float `32` or float `64`. We can add
    all of these entities according to the requirements of the situation. Hence, you
    can run the following code:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，它希望我们传递一个浮点数`64`（我们也有浮点数`32`）；它们是`bitSizes`，表示浮点数的大小。我们有格式（`fmt`），可以使用各种字母，如*E*、*F*或*G*；例如，*G*用于大指数，*F*用于无指数。我们有精度，基本上告诉我们想要使用小数点后的数字有多远，位大小是浮点数`32`或浮点数`64`。我们可以根据情况添加所有这些实体。因此，您可以运行以下代码：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output of the preceding code will be as follows:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述代码的输出将如下：
- en: '![](img/fe413dfc-1525-4d59-b22c-6982f974ae04.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fe413dfc-1525-4d59-b22c-6982f974ae04.png)'
- en: 'Let''s play with the precision a little bit more; if we change it to `3`, you''ll
    get the following output:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们再玩一下精度；如果我们将其更改为`3`，您将获得以下输出：
- en: '![](img/2708bbac-f0b8-405c-80b9-b3efb9d4a79b.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2708bbac-f0b8-405c-80b9-b3efb9d4a79b.png)'
- en: 'The output only shows three characters or three numbers after the dot. If you
    don''t know exactly how many digits are required after the dot, you can set the
    precision as `-1` and the output will display all of the digits after the dot;
    for example, check the following code:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出只显示小数点后的三个字符或三个数字。如果您不知道小数点后需要多少位数，可以将精度设置为`-1`，输出将显示小数点后的所有数字；例如，检查以下代码：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding code will give us the following output:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述代码将给我们以下输出：
- en: '![](img/02dec563-88af-4cdb-af5d-5d004f37e6da.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/02dec563-88af-4cdb-af5d-5d004f37e6da.png)'
- en: So, that's why you may want to use a precision of `-1` when you want to show
    everything but don't know the exact number of digits after the dot.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，当您想显示所有内容但不知道小数点后的确切数字时，您可能希望使用精度为`-1`。
- en: This is how you can carry out the conversion of integer and float values into
    string values in Go. In our next section, we're going to see how to parse string
    values to Boolean values.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您可以在Go中执行整数和浮点值转换为字符串值的方法。在下一节中，我们将看到如何将字符串值解析为布尔值。
- en: Parsing string values to Boolean values
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将字符串值解析为布尔值
- en: 'In this section, we''re going to see how to convert a string value into a Boolean
    value:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何将字符串值转换为布尔值：
- en: 'So, in our editor, we''re going to have a variable name `isNew`, and this is
    going to be a string value and is a true value. We''re going to use a package
    called `strconv`, which has `ParseBool`. It returns two things: one is the Boolean
    value and the other is an error. So, let''s check the following code:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，在我们的编辑器中，我们将有一个名为`isNew`的变量，这将是一个字符串值，是一个真值。我们将使用一个名为`strconv`的包，其中有`ParseBool`。它返回两件事：一个是布尔值，另一个是错误。因此，让我们检查以下代码：
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You should check whether an error is not nil. This will mean that an error occurred
    and we will have to handle it. For example, we're just going to output some failure
    message, that is, `failed`.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该检查错误是否不为nil。这将意味着发生了错误，我们将不得不处理它。例如，我们只会输出一些失败消息，即`failed`。
- en: If it's not nil in other languages, but it's nil here, then we're going to have
    to check the `isNew` Boolean. If it looks fine, we're going to write `IsNew` to
    the output, or `Not new`.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在其他语言中它不是nil，但在这里它是nil，那么我们将不得不检查`isNew`布尔值。如果看起来没问题，我们将`IsNew`写入输出，或者`Not
    new`。
- en: 'On running the code, you obtain the following output:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码后，您将获得以下输出：
- en: '![](img/5c0f7e46-e726-41dc-99ee-1d0285df5de1.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5c0f7e46-e726-41dc-99ee-1d0285df5de1.png)'
- en: As you see, it passed and didn't throw an exception. If `true` is changed to
    `false`, we will obtain an output of `Not new`. Of course, the `ParseBool` method
    is flexible enough to accept various string values.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如您所见，它通过了并且没有抛出异常。如果`true`更改为`false`，我们将获得`Not new`的输出。当然，`ParseBool`方法足够灵活，可以接受各种字符串值。
- en: 'If you look at the signature in the following screenshot, you''ll see `T`,
    `TRUE`, `true`, and so on:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您查看以下截图中的签名，您将看到`T`、`TRUE`、`true`等：
- en: '![](img/345064b0-4eec-4638-9a0e-4e585f023edf.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/345064b0-4eec-4638-9a0e-4e585f023edf.png)'
- en: If we type `1` instead of `true`, the output will still be `IsNew`; if we type
    `0`, `F`, or `f`, it'll translate to `false`, and output `Not new`.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们输入`1`而不是`true`，输出仍将是`IsNew`；如果我们输入`0`、`F`或`f`，它将转换为`false`，并输出`Not new`。
- en: 'Let''s see what happens if we pass in `J`:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们看看如果我们传入`J`会发生什么：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The code will output the following:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码将输出以下内容：
- en: '![](img/f9d95a80-0719-46aa-9a36-b0b8cecec456.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f9d95a80-0719-46aa-9a36-b0b8cecec456.png)'
- en: As you can see, the output will be `failed`.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如您所见，输出将是`failed`。
- en: In our next section, we're going to show you how to parse string values to integer
    and float types.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将向您展示如何将字符串值解析为整数和浮点类型。
- en: Parsing string values to integer and float types
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将字符串值解析为整数和浮点类型
- en: In this section, we're going to see how to parse string values to integer and
    float types.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何将字符串值解析为整数和浮点类型。
- en: Parsing string values to integer types
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将字符串值解析为整数类型
- en: 'Let''s imagine that we have a variable called `number`, which has `2` as a
    string. We''re going to use `strconv.ParseInt` and it returns two variables: the
    first one is the actual integer that we are expecting and the other is the return
    variable that arises if any error occurs during conversion.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个名为`number`的变量，它的字符串值为`2`。我们将使用`strconv.ParseInt`，它返回两个变量：第一个是我们期望的实际整数，另一个是在转换过程中发生错误时出现的返回变量。
- en: 'If you look at the signature, you''ll see that it returns integer `64` and
    an error:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看一下签名，你会看到它返回整数`64`和一个错误：
- en: '![](img/1e2ad662-0146-481c-b80f-3a604a7ebedf.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e2ad662-0146-481c-b80f-3a604a7ebedf.png)'
- en: So, the first thing we can do is check whether any error occurred during conversion;
    if it is not nil, we can understand that something happened and we'll type `Error
    happened`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以首先检查在转换过程中是否发生了任何错误；如果不是nil，我们就可以理解发生了某些事情，然后打印`Error happened`。
- en: There's no `try...catch` in Go, so you always have to do error checking if you
    want to write resilient code.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go中没有`try...catch`，所以如果要编写弹性代码，就必须始终进行错误检查。
- en: 'Now, for `if` checking, we can give `Success` as an output if the number is
    `2`. Now, let''s run the described code as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于`if`检查，如果数字是`2`，我们可以输出`Success`。现在，让我们运行如下描述的代码：
- en: '[PRE7]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output for the code will be as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的输出将如下所示：
- en: '![](img/4e0ecf78-6533-42a9-af26-04c200d74fc7.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e0ecf78-6533-42a9-af26-04c200d74fc7.png)'
- en: The conversion was successful. You can also try 64-bit, which gives the same
    results. All right! That was conversion from a string into an integer.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 转换成功了。你也可以尝试64位，结果是一样的。好了！这是从字符串转换为整数。
- en: Parsing string values to float numbers
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将字符串值解析为浮点数
- en: 'Now, let''s check the parsing of string values to float numbers. To begin,
    we are going to use the same code that we used for parsing string values to float
    numbers with only minor modifications. The code after the modification will be
    as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来检查将字符串值解析为浮点数。首先，我们将使用与将字符串值解析为浮点数相同的代码，只进行了轻微的修改。修改后的代码如下：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: On running the code, it returns a `Success` message. That means our conversion
    was successful and we successfully got our `2.2` out of our `ParseFloat` method.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码后，返回一个`Success`消息。这意味着我们的转换成功了，我们成功地从`ParseFloat`方法中得到了`2.2`。
- en: In the next section, we're going to learn how to convert a byte array into a
    string.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何将字节数组转换为字符串。
- en: Converting a byte array into a string
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将字节数组转换为字符串
- en: 'In this section, we''re going to learn how to convert a byte array into a string:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何将字节数组转换为字符串：
- en: The most important thing you need to know about this tutorial is that in Go,
    string variables are just a slice of bytes. Therefore, it is really easy to convert
    a byte array into a string value and a string value into a byte array.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 关于本教程，你需要知道的最重要的事情是，在Go中，字符串变量只是字节切片。因此，将字节数组转换为字符串值和将字符串值转换为字节数组非常容易。
- en: 'Let''s see how we can start this. Imagine that you have a `helloWorldByte`
    array; currently, it is a literal byte array, but you can derive it from any stream,
    such as a network or a file:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们看看如何开始。假设你有一个`helloWorldByte`数组；目前，它是一个字节数组，但你可以从任何流中获取它，比如网络或文件。
- en: '[PRE9]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We also have the string construct, which makes it really easy to convert a byte
    array into a string representation of it. We are going to use `fmt.Println` for
    the string representation of this `helloWorldByte` and run the code.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还有字符串构造，它使将字节数组转换为其字符串表示变得非常容易。我们将使用`fmt.Println`来打印`helloWorldByte`的字符串表示，并运行代码。
- en: 'So, let''s run the code and check the output:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，让我们运行代码并检查输出：
- en: '![](img/3c225bfd-6b53-484e-a845-38d678d1bda5.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c225bfd-6b53-484e-a845-38d678d1bda5.png)'
- en: 'As you can see, we converted the whole byte array into a string representation
     really simply. You can do the same thing by using a byte instead, if you want
    to convert a string into a byte array. Let''s actually do it really quickly. Check
    the following code:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们非常简单地将整个字节数组转换为了字符串表示。如果你想将字符串转换为字节数组，也可以使用一个字节来做同样的事情。让我们快速地做一下。检查以下代码：
- en: '[PRE10]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'After we run the code, we get an output as follows:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码后，我们得到以下输出：
- en: '![](img/7e6ed7ac-7149-469a-a900-6d6c172fa19e.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7e6ed7ac-7149-469a-a900-6d6c172fa19e.png)'
- en: Converting a byte array into a string concludes [Chapter 3](c1a19cb8-ee26-4a5d-9a09-9600315fbb8d.xhtml), *Type
    Conversions*.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 将字节数组转换为字符串结束了[第3章](c1a19cb8-ee26-4a5d-9a09-9600315fbb8d.xhtml)，*类型转换*。
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered trimming spaces from the beginning and end of strings,
    extracting substrings from string values, replacing parts of a string, escaping
    characters in strings, and capitalizing string values. In [Chapter 4](472b270e-b033-4093-9c12-1521893be2ab.xhtml),
    *Date and Time*, we're going to look at recipes for dates and times, and we're
    going to start off by learning how to find out today's date and time.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了从字符串开头和结尾修剪空格、从字符串值中提取子字符串、替换字符串的部分、在字符串中转义字符以及将字符串值大写。在[第4章](472b270e-b033-4093-9c12-1521893be2ab.xhtml)中，*日期和时间*，我们将学习日期和时间的用法，并首先学习如何找到今天的日期和时间。
