- en: Maps and Arrays
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 映射和数组
- en: 'In this chapter, you will learn how to work with maps and arrays in Go. You
    will see practical examples of manipulating and iterating arrays, merging arrays
    and maps, and testing whether a key is present in a map. We will go through the
    following recipes in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何在Go中使用映射和数组。您将看到操作和迭代数组、合并数组和映射以及测试映射中是否存在键的实际示例。在本章中，我们将介绍以下配方：
- en: Extracting unique elements from a list
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从列表中提取唯一的元素
- en: Finding an element from an array
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数组中查找元素
- en: Reverting an array
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反转数组
- en: Iterating over an array
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迭代数组
- en: Converting a map into an array of keys and values
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将映射转换为键和值的数组
- en: Merging arrays
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并数组
- en: Merging maps
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并映射
- en: Testing for the presence of a key in a map
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试映射中是否存在键
- en: Extracting unique elements from an array
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数组中提取唯一的元素
- en: First, we are going to learn how to extract unique elements from a list. To
    begin, let's imagine we have a slice, containing duplicate elements in it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将学习如何从列表中提取唯一的元素。首先，让我们想象我们有一个包含重复元素的切片。
- en: Now, let's say that we want to extract the unique elements. Since we don't have
    a built-in construct in Go, we're going to make our own function that will do
    the extraction. So, we have the `uniqueIntSlice` function and it accepts `intSlice`
    or `intarray`. Our unique function will accept `intSlice` and it will return another
    slice.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们想提取唯一的元素。由于Go中没有内置的构造，我们将制作自己的函数来进行提取。因此，我们有`uniqueIntSlice`函数，它接受`intSlice`或`intarray`。我们的唯一函数将接受`intSlice`，并返回另一个切片。
- en: 'So, the idea of this function is to track the duplicate elements in a separate
    list and if an element reappears in our given list, then we''re not going to add
    that element to our new list. Now, check out the following code:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这个函数的想法是在一个单独的列表中跟踪重复的元素，如果一个元素在我们给定的列表中再次出现，那么我们就不会将该元素添加到我们的新列表中。现在，看看以下代码：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'So, we''re going to have `keys`, which is basically a map, known as a dictionary
    in other languages. We''ll have another slice that keeps our `uniqueElements`,
    and we will do a `for each` loop to iterate over each element and add it to our
    new list if it is not a duplicate. We basically get our value by passing an `entry`;
    if the value is `false`, then we add that entry to our key or our map and set
    its value to `true` so that we can see whether this element already appears in
    our list. We also have a built-in  `append` function that accepts a slice and
    also appends the entry to the end of our slice, which returns another slice. On
    running the code, you should obtain the following output:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们将有`keys`，它基本上是一个映射，在其他语言中称为字典。我们将有另一个切片来保存我们的`uniqueElements`，我们将使用`for
    each`循环来迭代每个元素，并将其添加到我们的新列表中，如果它不是重复的。我们通过传递一个`entry`来基本上获取我们的值；如果值是`false`，那么我们将该条目添加到我们的键或映射中，并将其值设置为`true`，以便我们可以看到这个元素是否已经出现在我们的列表中。我们还有一个内置的`append`函数，它接受一个切片，并将条目附加到我们的切片末尾，返回另一个切片。运行代码后，您应该获得以下输出：
- en: '![](img/2c9e9a14-96fe-4b83-8ff2-7c2f67227f16.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c9e9a14-96fe-4b83-8ff2-7c2f67227f16.png)'
- en: 'If you look at the first array, there are duplicate elements: multiple instances
    of `6` and `5`. In our new array or slice, we don''t have any duplicates, and
    that''s how we extract unique elements from a list.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看一下第一个数组，会发现有重复的元素：多个`6`和`5`的实例。在我们的新数组或切片中，我们没有任何重复项，这就是我们从列表中提取唯一元素的方法。
- en: In the next section, we're going to learn how to find an element from an array
    in Go.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何在Go中从数组中查找元素。
- en: Finding an element from an array
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数组中查找元素
- en: 'In this section, we''re going to learn how to find an element from an array
    or a slice. There are many ways you can do this, but we''re going to cover two
    of them in this chapter. Imagine that we have a variable that holds a slice of
    strings. The first way of searching for a particular string in this slice will
    be using a `for` loop:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何从数组或切片中查找元素。有许多方法可以做到这一点，但在本章中，我们将介绍其中的两种方法。假设我们有一个变量，其中包含一系列字符串。在这个切片中搜索特定字符串的第一种方法将使用`for`循环：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'On running the preceding code, we find the word `Sandy` at index `0`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码后，我们发现单词`Sandy`在索引`0`处：
- en: '![](img/04364147-9fe6-462e-8079-69aa08775fe6.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/04364147-9fe6-462e-8079-69aa08775fe6.png)'
- en: 'The other approach is to use sorting, where we can sort the slice first and
    then search for a particular item afterwards. In order to do that, Go provides
    a `sort` package. To be able to sort a slice, the slice needs to implement various
    methods that the `sort` package needs. The `sort` package provides a type called
    `sort.stringslice`, and what we can do is convert our `stringslice` to the `StringSlice`
    type provided by `sort`. Here, `sortedList` is not sorted, so we have to sort
    it explicitly. Now, check out the following code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是使用排序，我们可以先对切片进行排序，然后再搜索特定的项目。为了做到这一点，Go提供了一个`sort`包。为了能够对切片进行排序，切片需要实现`sort`包需要的各种方法。`sort`包提供了一个名为`sort.stringslice`的类型，我们可以将我们的`stringslice`转换为`sort`提供的`StringSlice`类型。在这里，`sortedList`没有排序，所以我们必须显式对其进行排序。现在，看看以下代码：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The code will give the following output:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码将给出以下输出：
- en: '![](img/484a6d9d-267e-4450-ae74-4d1e856e821a.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/484a6d9d-267e-4450-ae74-4d1e856e821a.png)'
- en: 'You can see that `Draper` comes first and then `Murray`, and it is basically
    sorted in ascending order. Now, to search for a particular item here, for example
    `Sandy`, just add the following lines of code in the `main` function:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到`Draper`先出现，然后是`Murray`，基本上是按升序排序的。现在，要在这里搜索特定的项目，例如`Sandy`，只需在`main`函数中添加以下代码行：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following output is obtained after running the whole code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 运行整个代码后，获得以下输出：
- en: '![](img/5f078198-f4e9-4361-a7e8-db94193a14d3.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5f078198-f4e9-4361-a7e8-db94193a14d3.png)'
- en: It outputs `4`, which is the placing of the word `Sandy`. That's how you find
    an element in an array. The same thing applies to numbers as well; for instance,
    if you look at the `sort` package, you'll find `IntSlice` as well. Using integer
    slices really simplifies all the sorting and searching operations for numbers.
    In our next section, we're going to see how to revert an array.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 它输出`4`，这是单词`Sandy`的位置。这就是如何在数组中找到一个元素。同样的方法也适用于数字；例如，如果您查看`sort`包，您会发现`IntSlice`。使用整数切片确实简化了所有数字的排序和搜索操作。在我们的下一节中，我们将看到如何对数组进行反转。
- en: Reverting an array
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反转一个数组
- en: In this section, we are going to learn how to reverse sort an array. We'll have
    a variable that holds a slice of numbers. Since you are now familiar with the `sort`
    package in Go, you'll know that the `sort` package provides a lot of functionality
    that we can use to sort arrays and slices. If you look at the `sort` package,
    you'll see many types and functions.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何对数组进行反向排序。我们将有一个变量，它保存了一组数字的切片。由于您现在熟悉了Go中的`sort`包，您会知道`sort`包提供了许多功能，我们可以用来对数组和切片进行排序。如果您查看`sort`包，您会看到许多类型和函数。
- en: 'Now, we need the `sort` function and it accepts an interface, and this interface
    is defined in the `sort` package; therefore, we can call it the `Sort` interface.
    We are going to convert our slice of numbers into an interface. Check out the
    following code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要`sort`函数，它接受一个接口，这个接口在`sort`包中定义；因此，我们可以称之为`Sort`接口。我们将把我们的数字切片转换成一个接口。看看以下代码：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This code will give you the following output:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将给出以下输出：
- en: '![](img/5408e565-0603-4b8d-b016-f488a25c5eae.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5408e565-0603-4b8d-b016-f488a25c5eae.png)'
- en: 'If you look at the output, you''ll see that we have sorted the numbers in ascending
    order. What if we want to sort them in descending order? To be able to do that,
    we have another type called `Reverse`, which implements different functions to
    sort things in descending order. Check out the following code:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看输出，您会发现我们已经按升序对数字进行了排序。如果我们想按降序对它们进行排序呢？为了能够做到这一点，我们有另一种类型叫做`Reverse`，它实现了不同的函数来按降序对事物进行排序。看看以下代码：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'On running the code, we obtain the following output and you''ll see that the
    numbers are arranged in descending order:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码后，我们得到以下输出，您会看到数字按降序排列：
- en: '![](img/a92c26d9-a869-495f-b7f1-404564a40df3.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a92c26d9-a869-495f-b7f1-404564a40df3.png)'
- en: In the next section, we're going to see how we can iterate over an array.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到如何遍历一个数组。
- en: Iterating over an array
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 遍历一个数组
- en: 'In this section, we''re going to learn how to iterate over an array. Iterating
    over an array is one of the most fundamental and common operations in Go programming.
    Let''s go to our editor and see how we can do it easily:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何遍历一个数组。遍历一个数组是Go编程中最基本和常见的操作之一。让我们去我们的编辑器，看看我们如何轻松地做到这一点：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We obtain the following output from the preceding code:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从上述代码中获得以下输出：
- en: '![](img/3ee49dac-df50-42af-bf76-1874d827de22.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ee49dac-df50-42af-bf76-1874d827de22.png)'
- en: That's how easily you can iterate over various types of slice, including string
    slices, byte slices, or byte arrays.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您如何轻松地遍历各种类型的切片，包括字符串切片、字节切片或字节数组。
- en: 'Sometimes, you won''t need the `index`. In that case, you can just ignore it
    by using underscore (`_`). This will mean that you''re only interested in the
    value. To carry this out, you can type in the following code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您不需要`index`。在这种情况下，您可以使用下划线(`_`)来忽略它。这意味着您只对值感兴趣。为了执行这个操作，您可以输入以下代码：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output of this code will be as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的输出将如下所示：
- en: '![](img/b70f4a9a-ee1f-4338-8d5f-37f7a7b02984.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b70f4a9a-ee1f-4338-8d5f-37f7a7b02984.png)'
- en: That's how you can easily iterate over various types of slice. In the next section,
    we're going to see how we can convert a map into an array of keys and values.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您如何轻松地遍历各种类型的切片。在下一节中，我们将看到如何将一个map转换成一个键和值的数组。
- en: Converting a map into an array of keys and values
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将一个map转换成一个键和值的数组
- en: In this section, we are going to see how to convert a map into an array of keys
    and values. Let's imagine a variable named `nameAges` that has `map`, as shown
    in the following code block, and we map string values to integer values. There
    are names and ages too.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何将一个map转换成一个键和值的数组。让我们想象一个名为`nameAges`的变量，它有一个`map`，如下面的代码块所示，我们将字符串值映射到整数值。还有名字和年龄。
- en: 'We need to add a new struct named `NameAge` and it will have `Name` as a string
    and `Age` as integer. We are going to iterate over our `nameAges` map now. We''ll
    be using a `for` loop and when you use a range operator on a map type, it returns
    two things, a key and the value. So, let''s write this code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加一个名为`NameAge`的新结构，它将有`Name`作为字符串和`Age`作为整数。我们现在将遍历我们的`nameAges`映射。我们将使用一个`for`循环，当您在映射类型上使用范围运算符时，它会返回两个东西，一个键和一个值。因此，让我们编写这段代码：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'On running the preceding code, you''ll obtain the following output:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码后，您将获得以下输出：
- en: '![](img/25a71f49-0975-4bdc-8a4f-d0b45c58ccd2.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/25a71f49-0975-4bdc-8a4f-d0b45c58ccd2.png)'
- en: This is how you can easily convert a map into an array. In the next section,
    we're going to learn how to merge arrays in Go.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是如何将一个map轻松转换成一个数组。在下一节中，我们将学习如何在Go中合并数组。
- en: Merging arrays
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合并数组
- en: 'In this section, we''re going to see how to merge two arrays easily in Go.
    Consider that we have two arrays and we are going to merge them. If you used `append`
    earlier, you will know that it can accept as many parameters as required. Let''s
    check the following code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何在Go中轻松合并两个数组。假设我们有两个数组，我们将把它们合并。如果您之前使用过`append`，您会知道它可以接受任意数量的参数。让我们看看以下代码：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'On running the following code, you will obtain the following output:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下代码后，您将获得以下输出：
- en: '![](img/f122f01d-3833-498a-b4de-ed35626bda0b.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f122f01d-3833-498a-b4de-ed35626bda0b.png)'
- en: Now, we can see `[3 4 1 2]` in our output. You can add more values to the arrays
    and still merge them. This is how we can easily merge two arrays in Go. In the
    next section, we're going to see how to merge maps this time.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们在输出中看到了`[3 4 1 2]`。你可以向数组中添加更多的值，仍然可以合并它们。这就是我们如何在Go中轻松合并两个数组。在下一节中，我们将看到如何这次合并地图。
- en: Merging maps
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合并地图
- en: 'In this section, we''re going to learn how to merge maps. Check out the two
    maps in the following screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何合并地图。查看以下截图中的两张地图：
- en: '![](img/3c48d9be-6bf9-4d6a-b7b5-feac3fd561c4.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c48d9be-6bf9-4d6a-b7b5-feac3fd561c4.png)'
- en: As you can see, there are four items, and the maps are basically mapping a string
    to an integer.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，有四个项目，这些地图基本上是将一个字符串映射到一个整数。
- en: If you don't use a comma, as shown after `22` in the preceding screenshot, you'll
    get a compile-time exception. This is because of the automatic addition of a semicolon
    in Go, which is not appropriate in this code.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不使用逗号，就像在上述截图中`22`后面所示的那样，你将得到一个编译时异常。这是因为在Go中自动添加了一个分号，这在这段代码中是不合适的。
- en: 'Okay, so let''s go ahead and merge these two maps together. Unfortunately,
    there''s no built-in way of doing this, so all we have to do is just to iterate
    these two maps and then merge them together. Check out the following code:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们继续合并这两张地图。不幸的是，没有内置的方法可以做到这一点，所以我们只需要迭代这两张地图，然后将它们合并在一起。查看以下代码：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output for the preceding code is as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出如下：
- en: '![](img/b5759f76-ccad-406c-892b-7567588ef0c4.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b5759f76-ccad-406c-892b-7567588ef0c4.png)'
- en: Okay, so the first line, as you can see, has only the initial elements that
    we used, and the second one contains basically everything, that is, all the items
    from `map2` as well. So, that's how you can quickly merge two maps into one. In
    the next section, we're going to learn how to test for the presence of a key in
    a map.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，第一行，你可以看到，只有我们使用的初始元素，第二行包含基本上所有的东西，也就是来自`map2`的所有项目。这就是你可以快速将两张地图合并成一张地图的方法。在下一节中，我们将学习如何测试地图中键的存在。
- en: Testing for the presence of a key in a map
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试地图中键的存在
- en: 'In this section, we''re going to see how to check whether a key exists in a
    given map. So we have a map, `nameAges`, which basically maps names to ages. Check
    out the following code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何检查给定地图中键是否存在。因此，我们有一个地图`nameAges`，它基本上将名字映射到年龄。查看以下代码：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As you can see from the following screenshot, we basically fetched the value
    from the `Tarik` key. Therefore, it returned only one value, which was `32`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如你从以下截图中所见，我们基本上从`Tarik`键中获取了值。因此，它只返回了一个值，即`32`：
- en: '![](img/233df873-945f-418d-809e-98e38d7d60ab.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/233df873-945f-418d-809e-98e38d7d60ab.png)'
- en: 'However, there''s another way of using this map that returns two things: the
    first is the value and the second is whether the key exists. For instance, check
    out the following code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，还有另一种使用这个地图的方法，它返回两个东西：第一个是值，第二个是键是否存在。例如，查看以下代码：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output will be as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![](img/4b64a2b0-285c-4827-b8a1-6dd206e0055c.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4b64a2b0-285c-4827-b8a1-6dd206e0055c.png)'
- en: As you can see, the code returns `true` because `Tarik`, present in the map,
    exists in `nameAges`. Now, what if we type a name that does not exist in the map?
    If we replace `Tarik` with `Jessica` in `nameAges`, the code returns `0` and `false`,
    instead of the `32` and `true` obtained earlier.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，代码返回`true`，因为地图中存在`Tarik`，存在于`nameAges`中。现在，如果我们在地图中输入一个不存在的名字会怎么样呢？如果我们在`nameAges`中用`Jessica`替换`Tarik`，代码将返回`0`和`false`，而不是之前得到的`32`和`true`。
- en: 'Furthermore, you can use the `if` condition of Go, which is a conditional check.
    Check out the following code:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可以使用Go的`if`条件，这是一个条件检查。查看以下代码：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If you check out the following output, you can see that we get `Jessica cannot
    be found`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看以下输出，你会看到我们得到了`Jessica找不到`：
- en: '![](img/f215982e-5966-4997-a611-85304fcfe2b8.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f215982e-5966-4997-a611-85304fcfe2b8.png)'
- en: 'This means it doesn''t exist. Now, what if I add `Jessica` to the map and run
    the following code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着它不存在。现在，如果我将`Jessica`添加到地图中并运行以下代码会怎么样：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As you can see from the output of the preceding code, the code returns `Jessica
    can be found`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如你从上述代码的输出中所见，代码返回`Jessica可以找到`：
- en: '![](img/fd232325-4901-4e23-8243-0bdfbce0fe38.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd232325-4901-4e23-8243-0bdfbce0fe38.png)'
- en: 'In fact, we can even add a `value` after `if`, as we saw previously, and print
    the `value` too with the following code:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们甚至可以在`if`后面添加一个`value`，就像我们之前看到的那样，并用以下代码打印出`value`：
- en: '[PRE15]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We will get the following output:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到以下输出：
- en: '![](img/97d71283-452a-45f9-a97b-3d48e436ebcc.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/97d71283-452a-45f9-a97b-3d48e436ebcc.png)'
- en: That's how you can simply see whether a key exists in a given map.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你可以简单地查看给定地图中键是否存在的方法。
- en: Summary
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter took you through numerous topics, such as extracting unique elements
    from a list, finding an element from an array, reverting an array, converting
    a map into an array of keys and values, merging arrays, merging maps, and testing
    for the presence of a key in a map. In [chapter 6](f45bf697-95b3-4921-b97c-86c978e74be4.xhtml),
    *Errors and Logging*, we will see recipes for errors and logging, and we're going
    to start off with creating custom error types in Go.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 本章带你了解了许多主题，比如从列表中提取唯一元素，从数组中找到一个元素，反转一个数组，将地图转换为键和值的数组，合并数组，合并地图，以及测试地图中键的存在。在[第6章](f45bf697-95b3-4921-b97c-86c978e74be4.xhtml)中，*错误和日志*，我们将看到有关错误和日志的用法，我们将从在Go中创建自定义错误类型开始。
