- en: Errors and Logging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误和日志记录
- en: 'In this chapter, we will learn how to deal with errors and return an error
    when you need to. Go''s error mechanism is different to those of some of the other
    popular languages, and this section will teach you how to work with errors the
    Go way. We will also learn how to perform simple logging operations in your application
    to get insights into your running application for better debugging. We will cover
    the following topics in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何处理错误并在需要时返回错误。Go的错误机制与一些其他流行语言的不同，本节将教你如何按照Go的方式处理错误。我们还将学习如何在应用程序中执行简单的日志记录操作，以便更好地调试你的运行应用程序。在本章中，我们将涵盖以下主题：
- en: Creating custom error types
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义错误类型
- en: The `try...catch` equivalent in Go
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Go中的try...catch等价物
- en: Doing simple logging in your app
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的应用程序中进行简单的日志记录
- en: Gracefully dealing with panics
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优雅地处理panic
- en: Creating custom error types
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义错误类型
- en: Let's start with creating your custom error type. If you come from languages
    such as C# and Java, you may find the error mechanism a little different in Go.
    Moreover, the way you create your own custom error is very simple because Go is
    a duck-typed language, which means that you are good to go as long as your struct
    satisfies an interface. Let's go ahead and create our own custom error using a
    new type. So, I will have two fields, `ShortMessage` and the `DetailedMessage`
    of string type. You can have as many fields as you want, to capture more information
    about your errors. Furthermore, to satisfy the `error` interface, I'm going to
    implement a new method, `*MyError`, which will return a `string` value, and we
    can output this error to either our console or some log file.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建自定义错误类型开始。如果你来自C#和Java等语言，你可能会发现Go中的错误机制有些不同。此外，创建自定义错误的方式非常简单，因为Go是一种鸭子类型的语言，这意味着只要你的结构满足一个接口，你就可以使用。让我们继续使用一个新类型创建我们自己的自定义错误。所以，我将有两个字段，`ShortMessage`和`DetailedMessage`，类型为字符串。你可以有尽可能多的字段，以捕获有关错误的更多信息。此外，为了满足`error`接口，我将实现一个新方法，`*MyError`，它将返回一个`string`值，我们可以将这个错误输出到控制台或某个日志文件中。
- en: 'Then, what I''m going to do is to return the error message. So, the way you
    do this is very simple: you can just return this error type from your method.
    Let''s imagine that we have a `doSomething` method that returns an error. Let''s
    imagine we did some lines of codes in that method and it returns an error for
    some reason, such as a `ShortMessage` instance of `"Wohoo something happened!"`.
    Of course, you will probably need to use more meaningful messages here, and don''t
    forget to use this `&` operator. It will get the address of your `*MyError` object,
    since we are working with a pointer here. If you don''t do this, you will see
    there''s a type error, and one way to fix is this is to just remove that `*` pointer
    and the error will be will fixed. But you probably don''t want to have multiple
    copies of the same object, so instead of doing what I have just described, you
    can easily do this: send a reference back so that you have better memory management.
    Let''s look at the whole code now:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我要做的是返回错误消息。所以，你可以很简单地从你的方法中返回这个错误类型。假设我们有一个`doSomething`方法返回一个错误。假设我们在该方法中做了一些代码，并且由于某种原因返回了一个错误，比如一个`ShortMessage`实例为`"Wohoo
    something happened!"`。当然，你可能需要在这里使用更有意义的消息，并且不要忘记使用`&`运算符。它将获取你的`*MyError`对象的地址，因为我们在这里使用的是指针。如果你不这样做，你会看到有一个类型错误，修复这个错误的一种方法是删除那个`*`指针，错误就会被修复。但你可能不想有多个相同对象的副本，所以不要按照我刚刚描述的做法，你可以很容易地这样做：发送一个引用回去，这样你就有更好的内存管理。现在让我们看一下整个代码：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'So, let''s run this, and of course it will return some errors; we''re just
    going to add `err` here and then run it to the console. Now, we can see that our
    message or error message is written to the console, which is shown in the following
    screenshot:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们运行一下，当然它会返回一些错误；我们只需要在这里添加`err`，然后运行到控制台。现在，我们可以看到我们的消息或错误消息被写入到控制台中，如下面的截图所示：
- en: '![](img/b6df9a90-ea0c-4398-817c-d7addf448f5d.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b6df9a90-ea0c-4398-817c-d7addf448f5d.png)'
- en: That's how you can simply create your own error message types. In our next section,
    we're going to learn the `try...catch` equivalent in Go.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你可以简单地创建自己的错误消息类型。在我们的下一节中，我们将学习Go中的`try...catch`等价物。
- en: The try...catch equivalent in Go
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Go中的try...catch等价物
- en: Unlike in other languages, there is no `try...catch` block in Go. In this section,
    we're going to see how Go handles basic errors. So, the first thing we're going
    to see is how to handle the errors returned by an API calls. We can use the `time.Parse()` method
    for that as it accepts a layout and a value string. It returns two things, one
    is the `parsedDate` and the other one is an error. Instead of returning an exception,
    Go returns an error as its second parameter most of the time.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他语言不同，Go中没有`try...catch`块。在本节中，我们将看到Go如何处理基本错误。所以，我们首先要看的是如何处理API调用返回的错误。我们可以使用`time.Parse()`方法，因为它接受一个布局和一个值字符串。它返回两个东西，一个是`parsedDate`，另一个是一个错误。Go大多数时候不是返回异常，而是返回一个错误作为它的第二个参数。
- en: 'Now, the way you can handle this is to check whether the `parsedDate` is nil.
    If it''s not nil in Go, then we know that an error has happened and we need to
    handle it. If nothing happens, we can safely proceed to our next line, and that
    is to write the content of our `parsedDate` to output. So, for this, check the
    following code example:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以处理这个错误，检查`parsedDate`是否为nil。如果在Go中不是nil，那么我们知道发生了错误，我们需要处理它。如果什么都没发生，我们可以安全地继续下一行，即将`parsedDate`的内容写入输出。所以，检查下面的代码示例：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding code will give you the following output:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将给出以下输出：
- en: '![](img/150d4ada-4907-439b-b23e-bcb639aa084a.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/150d4ada-4907-439b-b23e-bcb639aa084a.png)'
- en: 'You can see that it works fine. What happens if we add some `string` values
    after `2018`? Let''s add `abc`, and run the code. If you see the following screenshot,
    you can see that an error occurred in parsing time; it also added the error message
    `An error occured parsing time "2018 abc": extra text: abc`, as shown in the following
    screenshot:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '你可以看到它运行正常。如果我们在`2018`后面添加一些`string`值会发生什么？让我们添加`abc`，然后运行代码。如果你看到以下截图，你会看到在解析时间时发生了错误；它还添加了错误消息`An
    error occured parsing time "2018 abc": extra text: abc`，如下截图所示：'
- en: '![](img/9f6e2e3d-0e2b-4cef-99b2-2e1070ab3f0c.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9f6e2e3d-0e2b-4cef-99b2-2e1070ab3f0c.png)'
- en: 'Now, the second part of this section is when you return an error yourself.
    Let''s say we have the `doSomething` function and it returns an `err` type. Check
    the following code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，本节的第二部分是当你自己返回一个错误时。假设我们有一个`doSomething`函数，它返回一个`err`类型。检查以下代码：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding code will give the following output:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将产生以下输出：
- en: '![](img/9fdffdf3-e102-4817-b4a6-6db1eb04ef37.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9fdffdf3-e102-4817-b4a6-6db1eb04ef37.png)'
- en: So, that's how you can do a simple `try...catch` equivalent in Go. In our next
    section, we're going to see how to do simple logging in your application.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你可以在Go中做一个简单的`try...catch`的等价物。在下一节中，我们将看到如何在你的应用程序中进行简单的日志记录。
- en: Doing simple logging in your application
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在你的应用程序中进行简单的日志记录
- en: 'In this section, we are going to learn how you can do simple logging in your
    application. Of course, there are various ways you can do this, and there are
    also third-party packages that allow you to do it as well, but we''re going to
    use the `log` package that Go provides. So, the first thing we have to do is create
    a new file by using the `os` package, and if, somehow, when creating the `log`
    file, an error happens, we''re going to write it to the console. We will also
    be using the `defer` function. Before the `main` method exits this `defer` function
    will be called, and the next step will be to set the output:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何在应用程序中进行简单的日志记录。当然，你可以用各种方法来做这个，也有第三方包可以让你这样做，但我们将使用Go提供的`log`包。所以，我们首先要做的是使用`os`包创建一个新文件，如果在创建`log`文件时出现错误，我们将把它写入控制台。我们还将使用`defer`函数。在`main`方法退出之前，这个`defer`函数将被调用，下一步是设置输出：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When we run the preceding code, a new file called `log_file` is created with
    the following content:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行上述代码时，将创建一个名为`log_file`的新文件，其中包含以下内容：
- en: '![](img/e907f02e-c236-4823-a6a7-946bd6ab4355.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e907f02e-c236-4823-a6a7-946bd6ab4355.png)'
- en: 'You may wonder what the difference is between a fatal error and a normal info
    error. Let''s reorder the two lines and see how that new order behaves. Hence,
    we will run `Fatalln` first and then `Println` as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道致命错误和普通信息错误之间的区别。让我们重新排列这两行，看看新的顺序的行为。因此，我们将首先运行`Fatalln`，然后运行`Println`如下：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you now run the preceding code and check the content of the `log_file`,
    you will see that the second `Println` did not get written:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在运行上述代码并检查`log_file`的内容，你会发现第二个`Println`没有被写入：
- en: '![](img/a37bdce9-51b4-4c7c-9ead-f353274673bc.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a37bdce9-51b4-4c7c-9ead-f353274673bc.png)'
- en: The difference is that `Fatalln` is similar to `Println` but only followed by
    a call to `os.Exit`. So, it basically writes a log and exits out of the application,
    which is the simple difference between the two. This is how you can simply do
    logging in your application. Of course, you can wrap `main` function into your
    package if you don't want to be setting the output all the time as we did here.
    In our next section, we're going to see how to gracefully deal with panics.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 区别在于`Fatalln`类似于`Println`，但后面只有一个对`os.Exit`的调用。因此，它基本上写入一个日志并退出应用程序，这就是两者之间的简单区别。这就是你可以在你的应用程序中简单地进行日志记录。当然，如果你不想一直设置输出，你可以将`main`函数封装到你的包中，就像我们在这里做的那样。在下一节中，我们将看到如何优雅地处理恐慌。
- en: Gracefully dealing with panics
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优雅地处理恐慌
- en: 'In this section, we''re going to see how to gracefully deal with panics. Unlike
    with errors, if you don''t recover from panics, it will stop the execution of
    your program. Therefore, dealing with them is important if you want your program
    to continue. First of all, let''s see how we can throw a panic in our Go program.
    You can simply use a keyword called `panic`, which is a built-in function, type
    panicked, and run it to obtain the output:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何优雅地处理恐慌。与错误不同，如果你不从恐慌中恢复，它将停止程序的执行。因此，处理它们是重要的，如果你希望你的程序继续执行。首先，让我们看看如何在Go程序中抛出恐慌。你可以简单地使用一个叫做`panic`的关键字，这是一个内置函数，类型为panic，运行它以获得输出：
- en: '![](img/c8bfa192-2f73-42ac-886d-0b6f49bb6bd6.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c8bfa192-2f73-42ac-886d-0b6f49bb6bd6.png)'
- en: 'There''s another way to do this. Let''s use another function here and write
    something. Let''s imagine we''re doing something and for some reason it just panicked.
    This might be a third-party method, which means it is located in a third-party
    package, so we may not have full control over that package. So, here, if you run
    the preceding code, this is what we''re going to see in the application window,
    along with the message we want to write to the console, which is as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种方法。让我们在这里使用另一个函数并写一些东西。假设我们正在做某事，由于某种原因它突然恐慌了。这可能是一个第三方方法，这意味着它位于第三方包中，所以我们可能无法完全控制该包。因此，如果你运行上述代码，这是我们将在应用程序窗口中看到的内容，以及我们想要写入控制台的消息，如下所示：
- en: '![](img/a142bb04-f555-4a89-a8f0-c9a7eec7fa69.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a142bb04-f555-4a89-a8f0-c9a7eec7fa69.png)'
- en: We also see the stack trace of our `panic` here. First, it hit the main message,
    and later, it hit the `writeSomething()` method. So how can we deal with this
    `panic`? We have this `defer` keyword and you have to use this `defer`. The `defer`
    means that; well, let's say that right before your method exits, you want to run
    another piece of code, so you just pass a function and you say "I want to run
    this `defer` function". Of course, it needs to be like this: `defer func(){}()`,
    or you can just say `defer writeSomething()` here. It doesn't matter, but since
    I'm going to run a couple of codes, I encapsulated them within function here.
    We have another keyword called `recover` that runs the `defer` function right
    before this `main` function exits. Also, within this function, we try `recover`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在这里看到了我们的`panic`的堆栈跟踪。首先，它触发了主要消息，后来又触发了`writeSomething()`方法。那么我们如何处理这个`panic`呢？我们有这个`defer`关键字，你必须使用这个`defer`。`defer`的意思是；嗯，就在你的方法退出之前，你想运行另一段代码，所以你只需传递一个函数，然后说“我想运行这个`defer`函数”。当然，它需要像这样：`defer
    func(){}()`，或者你可以在这里直接说`defer writeSomething()`。没关系，但是因为我要运行一些代码，所以我在这里将它们封装在函数中。我们还有另一个关键字叫做`recover`，它在`main`函数退出之前运行`defer`函数。此外，在这个函数中，我们尝试`recover`。
- en: 'If a panic happened, this `recover` returns something, and if there''s no panic,
    that means it will not return something. Therefore, the value of `r` will be `nil` ,
    which means we just don''t write anything to the console because we don''t need
    to. However, if the panic happened, then we''ll just enter the `if` condition
    and we''ll just write whatever comes from the `recover` building method and just
    go ahead and run the following code, and we will get the corresponding output:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发生了panic，这个`recover`会返回一些东西，如果没有panic，那就意味着它不会返回任何东西。因此，`r`的值将是`nil`，这意味着我们不会向控制台写任何东西，因为我们不需要。但是，如果发生了panic，那么我们就会进入`if`条件，然后写下来自`recover`构建方法的任何内容，然后继续运行以下代码，我们将得到相应的输出：
- en: '![](img/e79fd976-228d-41d9-be1e-1c15e47e6d58.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e79fd976-228d-41d9-be1e-1c15e47e6d58.png)'
- en: 'So, now you can see that we basically say `Recovered in f` and the message
    is whatever the panic threw, and that''s something we wrote here. If you want
    to see the continuation of this process, we can just copy the `defer func()` function
    from the `main` function. Next, we will create another method called `sayHello()` and
    paste the `defer func()` into it. What I''m trying to show you is that we have
    recovered from the panic, so the execution will also hit this line as well. So,
    we can just go ahead and run the following code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在你可以看到我们基本上说`Recovered in f`，消息就是panic抛出的内容，这是我们在这里写的。如果你想看到这个过程的继续，我们可以从`main`函数中复制`defer
    func()`函数。接下来，我们将创建另一个名为`sayHello()`的方法，并将`defer func()`粘贴到其中。我想向你展示的是，我们已经从panic中恢复了，所以执行也会到达这一行。所以，我们可以继续运行以下代码：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After the execution `main` function, so now we see the message:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行`main`函数之后，现在我们看到消息：
- en: '![](img/f04575d2-ccdd-4269-94d3-ee71ba297f3b.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f04575d2-ccdd-4269-94d3-ee71ba297f3b.png)'
- en: If we didn't have the `defer` function, let's see how that would have behaved.
    Now you see that it didn't hit `main` function, we have the panic and all the
    stack trace here, and that's how you can gracefully handle panics in your application.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有`defer`函数，让我们看看它会如何表现。现在你看到它没有触发`main`函数，我们有panic和所有的堆栈跟踪，这就是你如何在应用程序中优雅地处理panic。
- en: Summary
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter was a walkthrough of errors and logging. In the next chapter, we
    will learn how to work with files and directories in an operating system. We will
    also learn about parsing and using various formats, such as XML, YAML, and JSON.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于错误和日志记录的介绍。在下一章中，我们将学习如何在操作系统中处理文件和目录。我们还将学习解析和使用各种格式，如XML、YAML和JSON。
