- en: Concurrency
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并发
- en: 'One of the most powerful things about Go is its concurrency with APIs. In this
    chapter, you will learn how to make use of concurrency constructs in the Go language.
    We will cover the following topics in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Go最强大的一点是它与API的并发。在本章中，你将学习如何在Go语言中利用并发构造。本章将涵盖以下主题：
- en: Running multiple functions concurrently
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并发运行多个函数
- en: Passing data between concurrently running functions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在并发运行函数之间传递数据
- en: Waiting for all concurrent functions to finish
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等待所有并发函数完成
- en: Selecting the results of concurrent functions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择并发函数的结果
- en: Running multiple functions concurrently
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并发运行多个函数
- en: Let's begin with running multiple functions concurrently.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始并发运行多个函数。
- en: 'Take a look at the code in the following block:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下代码块中的代码：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can see from the preceding code that there are two different lists; each
    list has items that have taken at least a second to finish, but for practice purposes,
    we''re not going to have any actual code but just `fmt.Println`. We have added
    `time.Sleep` for a second within each iteration. As seen in the preceding code,
    we first process the names and then the ages. One thing you can notice is that
    they''re not really dependent on each other; they''re actually two different works.
    So, let''s go ahead and run this and see what that it like on our console:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的代码可以看出，有两个不同的列表；每个列表都有至少花费一秒钟才能完成的项目，但出于练习目的，我们不会有任何实际的代码，只是`fmt.Println`。我们在每次迭代中都添加了`time.Sleep`一秒钟。如前面的代码所示，我们首先处理名称，然后处理年龄。你可以注意到的一件事是它们实际上并不相互依赖；它们实际上是两项不同的工作。所以，让我们继续运行这个程序，看看在控制台上的效果如何：
- en: '![](img/721b22d0-b2f7-4f4b-a57f-5a724a78e8cf.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/721b22d0-b2f7-4f4b-a57f-5a724a78e8cf.png)'
- en: If you observe the process of the output, you will see that each line of output
    waits a second before delivering the next. You'll see that they're actually sequential
    pieces of code even though they do not depend on each other. We'll have to wait
    for the loop to finish before we can continue to the second `for` loop.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你观察输出的过程，你会发现每行输出在传递下一个之前等待了一秒钟。你会发现它们实际上是顺序的代码片段，尽管它们并不相互依赖。在继续到第二个`for`循环之前，我们必须等待循环完成。
- en: 'We can make this process more scalable and efficient by using concurrent patterns.
    For this, we are going to use Go routines in Go. Go routines are more lightweight
    than threads, and, unlike threads, they give the control back voluntarily instead
    of preemptively. You''ll know more about what exactly I mean as we go further
    along. Check the following code:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用并发模式使这个过程更具可扩展性和效率。为此，我们将在Go中使用Go例程。Go例程比线程更轻量级，而且与线程不同，它们是自愿地而不是强制性地交还控制权。随着我们继续前进，你会更多地了解我所说的具体含义。检查以下代码：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As you can see, we have converted the code to independent pieces of functionality
    into Go routines, using the Go keyword and an anonymous function. We have done
    the same thing for ages as well. On running the code, you will obtain the following
    output:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们已经将代码转换为独立的功能片段，使用了Go关键字和匿名函数来创建Go例程。我们对年龄也做了同样的事情。运行代码时，你将得到以下输出：
- en: '![](img/5e34080c-da13-44f9-8bae-8c9aefd3ebb9.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e34080c-da13-44f9-8bae-8c9aefd3ebb9.png)'
- en: As you can see, instead of the output showing up sequentially as before, it
    shows up randomly. This means that both the loops are processed concurrently.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，与以前顺序显示输出不同，它是随机显示的。这意味着两个循环是同时进行处理的。
- en: 'If we remove `time.Sleep` (comment it out using `//`), we will not see any
    result on the console. This is because the main application is also run under
    a Go routine and that means we have three Go routines: the two that we typed and
    one that is the entire main application. The problem, as mentioned before, is
    that Go routines give control back to other Go routines voluntarily instead of
    preemptively. This means that when you use `time.Sleep`, the control will be given
    to other Go routines and our system will work properly.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们移除`time.Sleep`（使用`//`注释掉它），我们将在控制台上看不到任何结果。这是因为主应用程序也是在一个Go例程下运行的，这意味着我们有三个Go例程：我们输入的两个和整个主应用程序。如前所述，问题在于Go例程自愿地而不是强制性地将控制权交还给其他Go例程。这意味着当你使用`time.Sleep`时，控制权将交给其他Go例程，我们的系统将正常工作。
- en: 'Now, what happens if we use `1` second instead of `10` seconds, as seen in
    our last screenshot with code? You will not obtain any output. This is because
    `1` second is not enough for all the Go routines to finish the task. Once the
    main Go routine is done with its process, it shuts off the entire application
    and does not give enough time for other Go routines to complete. There is a way
    of handling this situation, where we have another construct called channels. So,
    for simplicity, we will remove the second Go routine and use the channels now.
    Check the following code:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们使用`1`秒而不是上次代码中看到的`10`秒，会发生什么？你将得不到任何输出。这是因为`1`秒对于所有Go例程来说不足以完成任务。一旦主Go例程完成了它的处理，它就会关闭整个应用程序，并且不会给其他Go例程足够的时间来完成。有一种处理这种情况的方法，我们有另一个叫做通道的构造。因此，为了简单起见，我们将删除第二个Go例程，现在使用通道。检查以下代码：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When you run the preceding code, you will get an exception as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行上面的代码时，你将得到以下异常：
- en: '![](img/0fac42a1-dd9c-4212-b301-4fe2103f88c3.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0fac42a1-dd9c-4212-b301-4fe2103f88c3.png)'
- en: 'The reason for this exception is that when you''ve finished with a channel,
    you need to close it, otherwise the `for` loop will keep waiting and waiting.
    However, because your Go routine is finished with that channel, the loop will
    go into a deadlock and stop your application. So, one way to close a channel is
    by adding the following line of code that is highlighted:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 出现这种异常的原因是，当你完成一个通道时，你需要关闭它，否则`for`循环将一直等待。然而，因为你的Go例程已经完成了该通道，循环将陷入死锁并停止你的应用程序。关闭通道的一种方法是添加下面突出显示的代码行：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When a channel is closed, the loop will terminate. So, let''s go ahead and
    run this and check the output:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个通道关闭时，循环将终止。所以，让我们继续运行这个程序并检查输出：
- en: '![](img/6f1d0e64-646b-4cb4-ae45-044c555a6f24.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6f1d0e64-646b-4cb4-ae45-044c555a6f24.png)'
- en: 'As you see, we didn''t get any exception here, and everything looks fine. If
    you don''t care about the result, and if you want to use our first approach, you
    can use the following code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这里没有任何异常，一切看起来都很好。如果您不关心结果，并且想要使用我们的第一种方法，可以使用以下代码：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'What we did is write everything to the console and, once the loop was finished,
    it set `nameChannel`. Moreover, in this scenario, we wait until we get some data
    from the name channel, and therefore we don''t terminate the application. Once
    we get some data from the name channel, we read it and we don''t really assign
    it to anything. When the `main` Go routine proceeds to the next line, there is
    no code there and hence the `main` function is exited. Therefore, our application
    is closed. You will obtain the following output:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所做的是将所有内容写入控制台，一旦循环结束，就设置了`nameChannel`。此外，在这种情况下，我们会等待直到从名称通道获取一些数据，因此不会终止应用程序。一旦从名称通道获取到一些数据，我们就会读取它，但实际上并不会将其分配给任何变量。当`main`
    Go例程继续执行到下一行时，那里没有代码，因此`main`函数退出。因此，我们的应用程序关闭了。您将获得以下输出：
- en: '![](img/bc660bd9-45d1-4133-9054-387c8f3783c3.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bc660bd9-45d1-4133-9054-387c8f3783c3.png)'
- en: That's how you can use channels and functions to do concurrent operations. Before
    we conclude, let's reiterate one point about channels. If a channel is empty and
    you try to read it, it will block its Go routine. Once it is filled, we can read
    something from it; we read the data and continue. The reason why the `main` Go
    routine could not be exited is because we didn't send any value to it before,
    and this is much more effective than using a timer, as we did in our previous
    example.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您可以使用通道和函数执行并发操作的方法。在结束之前，让我们重申一点关于通道。如果通道为空并且您尝试读取它，它将阻塞其Go例程。一旦填充，我们可以从中读取一些东西；我们读取数据并继续。之所以`main`
    Go例程无法退出是因为我们之前没有向其发送任何值，这比在我们之前的示例中使用计时器要更有效。
- en: In the next section, we're going to see how to pass data between concurrently
    running functions.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到如何在并发运行的函数之间传递数据。
- en: Passing data between concurrently running functions
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在并发运行的函数之间传递数据
- en: In this section, we're going to see how to pass data between Go routines. Imagine
    that we have two Go routines. The first Go routine performs some actions on the
    data and hands the data to another Go routine, which performs the second processing
    stage on that data. Now, we need a way to pass data between the first Go routine
    and the second one. As you can see, we may need some synchronization between the
    two Go routines because the second Go routine will have to wait until the second
    Go routine provides some data to it.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何在Go例程之间传递数据。假设我们有两个Go例程。第一个Go例程对数据执行一些操作，并将数据交给另一个Go例程，后者对该数据执行第二个处理阶段。现在，我们需要一种方法在第一个Go例程和第二个Go例程之间传递数据。正如您所看到的，我们可能需要在两个Go例程之间进行一些同步，因为第二个Go例程将不得不等待，直到第一个Go例程向其提供一些数据。
- en: 'To begin, we are going to use the following code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用以下代码：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you look at the code, you can see that we have used a channel again: `nameChannel`.
    Since we need to access `nameChannel` from the two Go routines, we have to declare
    it within the `main` function. In the first Go routine, we are going to pass some
    data to `nameChannel`, which is `name`. The `name` variable is the string array
    that has some data and comes from the first Go routine. In the second Go routine,
    we are going to use `nameChannel` and we are going to read it as it is filled.
    Moreover, we will have to use another Go routine just to signal to the main Go
    routine to indicate that all the Go routines are finished (`done := make(chan
    string)`). We also have to terminate the application to avoid any deadlocks, using
    the `close` function. When the channel is closed, the `for` loop will be terminated,
    and the Go routine will send some data into the `done` variable. Then, our main
    Go routine will read it and proceed to the next line, exit out of the `main` function,
    and our application will be done. This was the unbuffered channel; that is, you
    can send single data that has to be read and emptied before you send more data
    to it, otherwise it will be blocked.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看代码，您会看到我们再次使用了通道：`nameChannel`。由于我们需要从两个Go例程中访问`nameChannel`，因此我们必须在`main`函数内声明它。在第一个Go例程中，我们将向`nameChannel`传递一些数据，即`name`。`name`变量是包含一些数据的字符串数组，来自第一个Go例程。在第二个Go例程中，我们将使用`nameChannel`并读取它，因为它已经填充。此外，我们还必须使用另一个Go例程来向主Go例程发出信号，指示所有Go例程都已完成（`done
    := make(chan string)`）。我们还必须终止应用程序以避免任何死锁，使用`close`函数。当通道关闭时，`for`循环将被终止，Go例程将向`done`变量发送一些数据。然后，我们的主Go例程将读取它并继续执行下一行，退出`main`函数，应用程序就完成了。这就是无缓冲通道；也就是说，您可以发送单个数据，必须在发送更多数据之前读取并清空它，否则它将被阻塞。
- en: 'Another way to do this is by using the buffered channel for improved performance.
    A slight modification in the preceding code will help us. We are going to add
    the integer `5`, which means you can send five pieces of data into `nameChannel`
    without waiting. Check the modified code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是使用缓冲通道来提高性能。对前面的代码进行轻微修改将有所帮助。我们将添加整数`5`，这意味着您可以在不等待的情况下将五个数据发送到`nameChannel`中。检查修改后的代码：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'So, for instance, it will send some data and it will not wait because there
    will still be four places left. Thus, it will go to the second iteration and it
    will send some data into it until the count goes to `5`. The good thing is that
    while we send data to the name channel, we also read data from it. The following
    will be the output:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，它将发送一些数据，但不会等待，因为还有四个位置。因此，它将进入第二次迭代，并将一些数据发送到其中，直到计数达到`5`。好处是，当我们向名称通道发送数据时，我们也从中读取数据。以下将是输出：
- en: '![](img/36126b7a-c835-4f54-94fe-13a491a92433.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36126b7a-c835-4f54-94fe-13a491a92433.png)'
- en: This is how you can pass data between multiple Go routines. In our next section,
    we are going to see how to wait for all the concurrent functions to complete.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何在多个Go例程之间传递数据的方法。在下一节中，我们将看到如何等待所有并发函数完成。
- en: Waiting for all concurrent functions to finish
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 等待所有并发函数完成
- en: 'In this section, we''re going to see how to wait for all concurrent functions
    to finish. Consider that we have a piece of code, as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何等待所有并发函数完成。假设我们有如下代码片段：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Imagine we want to create multiple Go routines within a loop. In this case,
    let's say we want to have 10 Go routines plus the main Go routine, so 11 Go routines
    in total. If you run the code shown in the previous screenshot, you will find
    no output.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想在循环中创建多个Go例程。在这种情况下，假设我们想要有10个Go例程加上主Go例程，因此总共有11个Go例程。如果运行前面屏幕截图中显示的代码，将不会有任何输出。
- en: 'One way to wait for all these Go routines to complete so that we can show something
    to the console is to use `time.Sleep`, as shown in the following code:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 等待所有这些Go例程完成，以便我们可以向控制台显示一些内容的一种方法是使用`time.Sleep`，如以下代码所示：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'On running the preceding code, you will obtain the following output:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码后，您将获得以下输出：
- en: '![](img/8297efd4-819f-4e5c-a987-9c80373f5477.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8297efd4-819f-4e5c-a987-9c80373f5477.png)'
- en: 'Now, you have obtained an output, but the problem with this approach is that
    you usually don''t know how much time is needed for all the Go routines to complete;
    therefore, you can''t really predict the time. So what we can do is use something
    that is provided by the Go library itself and that is `sync.WaitGroup`. As its
    name suggests, it''s basically a group of waits that you can use to wait for all
    the Go routines to finish. Check the following code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经获得了一个输出，但是这种方法的问题是，通常您不知道所有Go例程完成需要多长时间；因此，您无法真正预测时间。因此，我们可以使用Go库本身提供的`sync.WaitGroup`。顾名思义，它基本上是一组等待，您可以使用它来等待所有Go例程完成。检查以下代码：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'So, here, for each iteration, we can add a new item to our wait group, which
    will be `1` in this case. So we''ll basically increment the number of waits in
    this `WaitGroup` by `1`. When a Go routine is done, it will be signaled using
    `wg.Done()`, and that will basically reduce the number of waits in the group by
    `1`. Moreover, `wg.Wait` will block our main Go routine until all of our Go routines
    are finished. On running the code, we will get the following output:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在每次迭代中，我们可以向我们的等待组添加一个新项，这在这种情况下将是`1`。因此，我们基本上会将`WaitGroup`中的等待数量增加`1`。当Go例程完成时，它将使用`wg.Done()`进行信号传递，这将基本上减少组中的等待数量`1`。此外，`wg.Wait`将阻塞我们的主Go例程，直到所有Go例程都完成。运行代码后，我们将获得以下输出：
- en: '![](img/aa31888d-52ee-44f6-91d9-ca023b519084.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aa31888d-52ee-44f6-91d9-ca023b519084.png)'
- en: This is how you can simply wait for all the Go routines to complete in your
    application properly. In the next section, we're going to see how to select the
    results of concurrent functions as they are returned.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你可以简单等待应用程序中所有Go例程完成的方法。在下一节中，我们将看到如何选择并发函数的结果，因为它们被返回。
- en: Selecting the results of concurrent functions
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择并发函数的结果
- en: 'In this section, we are going to see how to select the results of concurrent
    rank functions as they are returned. Consider that we have two Go routines in
    our `main` function that are basically setting their own channels: `channel1`
    and `channel2`. Let''s say that we want to read whatever comes first and then
    continue to the next line. For this, Go provides a built-in construct that is
    called `select`, and `select` basically waits for a channel to be filled and looks
    like a `switch` statement. So, let''s go ahead and see what that looks like now:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何选择并发排名函数的结果。假设我们的`main`函数中有两个Go例程，它们基本上正在设置自己的通道：`channel1`和`channel2`。假设我们想先读取任何内容，然后继续下一行。为此，Go提供了一个名为`select`的内置结构，`select`基本上等待通道填充并且看起来像`switch`语句。让我们继续看看现在的样子：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: So, you just say `select` and you say, for instance, `channel1`,  and when `channel1`
    is ready, we will do something like create a `result` variable of type `string`.
    So, here, I'm going to assign the value of `channel1` to the `result` variable
    which will be printed to the console using `Println`. In the second case, if it
    is not `channel1` but `channel2` that is ready to be read, then we're going to
    read it instead into our `result` variable. The `select` statement will will not
    use both case here; so, for instance, if `channel1` and `channel2` are ready at
    the same time, then the `select` statement will just choose one of them randomly.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您只需说`select`，并且例如说`channel1`，当`channel1`准备就绪时，我们将执行类似创建`string`类型的`result`变量的操作。因此，在这里，我将把`channel1`的值分配给将使用`Println`打印到控制台的`result`变量。在第二种情况下，如果不是`channel1`而是准备好读取的`channel2`，那么我们将将其读取到我们的`result`变量中。`select`语句在这里不会同时使用两种情况；例如，如果`channel1`和`channel2`同时准备就绪，那么`select`语句将随机选择其中一个。
- en: 'Since `channel1` was ready, we got `Hello` from `channel1` as the output. If
    we run the code again, we get `channel2`, as you can see from the following screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`channel1`已准备就绪，我们从`channel1`得到了`Hello`作为输出。如果我们再次运行代码，您将从以下屏幕截图中看到`channel2`：
- en: '![](img/0b00762b-54ca-44c7-bc7a-1e2acbeeb215.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b00762b-54ca-44c7-bc7a-1e2acbeeb215.png)'
- en: Thus, you can easily see the randomness in the output provided. This is how
    it works.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您可以轻松地看到输出中的随机性。这就是它的工作原理。
- en: 'Now, there may be some instances where you need to wait multiple times. In
    such cases, you can use loops:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，可能会有一些情况需要多次等待。在这种情况下，您可以使用循环：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Imagine that you're writing something that has to wait constantly for some incoming
    data, and as the data is coming in, you want to write it to the console. Or it
    may be that you want to do some operations on those. In this case, you can wait
    for them in an infinite loop. If you want to get out of this loop, you can read
    another channel, such as `quit`. If `quit` is already present, then you can just
    break out of this loop or if it's a function, you can use return and that will
    `return` out of the function as well.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你正在编写一些必须不断等待某些传入数据的东西，当数据进来时，你希望将其写入控制台。或者你可能想对这些数据进行一些操作。在这种情况下，你可以在一个无限循环中等待它们。如果你想要跳出这个循环，你可以读取另一个通道，比如`quit`。如果`quit`已经存在，那么你可以直接跳出这个循环，或者如果它是一个函数，你可以使用return，这样也会跳出函数。
- en: So, this is how you can easily read data coming from multiple functions in Go.
    This concludes our concurrency chapter.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这就是你如何可以轻松地在Go中读取来自多个函数的数据。这就结束了我们的并发章节。
- en: Summary
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to make use of concurrency constructs in the
    Go language. In the next chapter, we're going to learn system programming and
    we're going to start off with catching signals. You will also learn how to process
    command line arguments using Go.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学会了如何在Go语言中利用并发构造。在下一章中，我们将学习系统编程，并将从捕获信号开始。您还将学习如何使用Go处理命令行参数。
