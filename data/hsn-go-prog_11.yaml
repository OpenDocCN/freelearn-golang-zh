- en: Relational Databases
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关系数据库
- en: Go can work with various relational databases, including SQL Server, MySQL,
    Postgres SQL, and SQLite. In this chapter, we are going to use SQLite. SQLite
    might be slightly more limited compared to other more advanced database engines,
    but for our examples it is pretty much sufficient. In this section, you will learn
    how to read, update, delete, and create data in relational databases with Go.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Go可以与各种关系数据库一起工作，包括SQL Server、MySQL、Postgres SQL和SQLite。在本章中，我们将使用SQLite。与其他更先进的数据库引擎相比，SQLite可能稍微受限，但对于我们的示例来说，它基本上是足够的。在本节中，您将学习如何使用Go读取、更新、删除和创建关系数据库中的数据。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Reading data from databases
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据库中读取数据
- en: Inserting data into databases
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据插入数据库
- en: Updating data in databases
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数据库中更新数据
- en: Deleting data from databases
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据库中删除数据
- en: Reading data from databases
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数据库中读取数据
- en: 'Let''s begin with learning how to read data from SQL databases. Before we begin,
    we will have to create a database called `personal.db`. We are going to use a
    DB browser for SQLite that allows us to create new SQLite databases, edit them,
    add new records, and so on. You can find more information about the tool and download
    it from [http://sqlitebrowser.org/](http://sqlitebrowser.org/). It is a free tool
    and it works with Windows, macOS, and Linux. Let''s begin with an example. Check
    out the following screenshot:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始学习如何从SQL数据库中读取数据。在开始之前，我们将不得不创建一个名为`personal.db`的数据库。我们将使用一个名为SQLite的DB浏览器，它允许我们创建新的SQLite数据库，编辑它们，添加新记录等。您可以在[http://sqlitebrowser.org/](http://sqlitebrowser.org/)找到有关该工具的更多信息并下载它。这是一个免费工具，它可以在Windows、macOS和Linux上使用。让我们从一个示例开始。请查看以下屏幕截图：
- en: '![](img/4804cbdd-9529-4acd-8415-238e5a1e039e.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4804cbdd-9529-4acd-8415-238e5a1e039e.png)'
- en: 'Here, we have just one table, called `profile`. Working on this table will
    be sufficient for us to learn how to interact with the SQLite database, and then
    you can use the same techniques to interact with MySQL or SQL Server. If you check
    the screenshot, you can see that we have three records and four columns: `ProfileId`,
    `FirstName`, `LastName`, and `Age`. The `FirstName` and `LastName` columns are
    a string, or text, the `Age` column is a number, and the `ProfileId` is our primary
    key; it is also an integer column. So, let''s go ahead and create our own struct
    and the code:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只有一个名为`profile`的表。在这个表上的操作足以让我们学会如何与SQLite数据库交互，然后您可以使用相同的技术与MySQL或SQL
    Server交互。如果您查看屏幕截图，您会看到我们有三条记录和四列：`ProfileId`，`FirstName`，`LastName`和`Age`。`FirstName`和`LastName`列是字符串或文本，`Age`列是一个数字，`ProfileId`是我们的主键；它也是一个整数列。因此，让我们继续创建我们自己的结构和代码：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, let''s go through the explanation of the code. We''ve used the struct
    type to map data that comes from the SQL database to our in-memory objects. We
    need to import two packages: the first one is the SQL database, and the second
    one is `go-sqlite3`. We''re going to do an empty or blank import, which will automatically
    remove the SQL database import, but that''s alright since we''re going to import
    it again later. The reason why we are doing a blank import is that if there''s
    initialization code in this package, it will still be executed. This package registers
    itself as the underlying SQL driver, so we will still be using the SQL database
    package as our API, but that API will be using the `go-sqlite3` package behind
    the scenes to interact with our database, and, as you will see, database interaction
    in Go is pretty straightforward. So, the first thing we''re going to do is open
    the database. When we use the SQL package, you''ll see that it automatically imports
    our SQL database.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来解释一下代码。我们使用了结构类型将来自SQL数据库的数据映射到我们的内存对象。我们需要导入两个包：第一个是SQL数据库，第二个是`go-sqlite3`。我们将进行一个空白导入，这将自动删除SQL数据库导入，但这没关系，因为我们稍后会再次导入它。我们之所以进行空白导入，是因为如果此包中有初始化代码，它仍将被执行。这个包将自己注册为底层的SQL驱动程序，因此我们仍将使用SQL数据库包作为我们的API，但该API将在后台使用`go-sqlite3`包与我们的数据库交互，正如您将看到的，Go中的数据库交互非常简单。因此，我们要做的第一件事是打开数据库。当我们使用SQL包时，您会看到它自动导入我们的SQL数据库。
- en: 'Furthermore, we are going to use a SQLite driver, which is SQLite version 3,
    and we will also specify where our database is located. The data source name may
    change, based on what type of database you use; it might be a URL, but in our
    case, it''s a file, since SQLite works with data files. So, we will type `./personal.db`.
    We have also added the error check utility function so that we don''t have to
    keep checking for errors all the time. We can just say `checkError` and the error
    will be checked. We''re going to use a DB query to query our database and that
    returns two things: one of them is rows and the other one is an error. The database
    query basically accepts a SQL query here. We are also going to use a `for` loop,
    `rows.next`, to iterate each row and rows.scan to get the value out of each row.
    It is important to respect the order of your columns as they come from the profile
    database; if you need a different order, you can specify it at the `*` shown here:
    `"select * from Profile"`. I usually recommend to explicitly specify each of the
    rows instead of using a wildcard (`*`).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将使用SQLite版本3的SQLite驱动程序，并且我们还将指定我们的数据库位于何处。数据源名称可能会根据您使用的数据库类型而更改；它可能是一个URL，但在我们的情况下，它是一个文件，因为SQLite使用数据文件。因此，我们将输入`./personal.db`。我们还添加了错误检查实用程序函数，这样我们就不必一直检查错误。我们只需说`checkError`，错误就会被检查。我们将使用DB查询来查询我们的数据库，它返回两件事：一个是行，另一个是错误。数据库查询基本上在这里接受一个SQL查询。我们还将使用`for`循环，`rows.next`来迭代每一行和`rows.scan`来获取每一行的值。尊重您的列的顺序很重要，因为它们来自profile数据库；如果您需要不同的顺序，您可以在此处指定`*`："select
    * from Profile"。我通常建议明确指定每一行，而不是使用通配符(`*`)。
- en: 'You will get the following output when you run this code:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行此代码时，您将获得以下输出：
- en: '![](img/112ced21-a8bd-430d-ba41-14272b0e6d12.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/112ced21-a8bd-430d-ba41-14272b0e6d12.png)'
- en: As you can see, we were able to capture our database records (`ProfileId`, `FirstName`,
    `LastName`, and `Age`) in the table.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们能够在表中捕获我们的数据库记录（“ProfileId”、“FirstName”、“LastName”和“Age”）。
- en: 'Now, let''s quickly look at how we can carry out filtering. So, we''re going
    to be using the `where` clause, and, if you know SQL, the `where` clause is used
    for filtering. We are going to filter by `ProfileId`. Take a look at the signature
    of this method:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们快速看一下如何进行过滤。因此，我们将使用“where”子句，如果您了解SQL，就会知道“where”子句用于过滤。我们将按“ProfileId”进行过滤。请查看此方法的签名：
- en: '![](img/f67969c6-7a82-4a01-8f9d-0c64c60dea4d.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f67969c6-7a82-4a01-8f9d-0c64c60dea4d.png)'
- en: 'The second parameter in the signature is the arguments for the placeholders,
    and since it is a very attic function, you can provide as many arguments as possible
    as long as you have matching placeholders. We are going to add `2`, as you can
    see in the following code snippet; you can also use a variable name:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 签名中的第二个参数是占位符的参数，由于它是一个非常古老的函数，只要您有匹配的占位符，就可以提供尽可能多的参数。我们将添加“2”，如您在以下代码片段中所见；您也可以使用变量名：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, let''s go ahead and run the modified code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续运行修改后的代码：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'On running the preceding code, you''ll obtain the following output:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前述代码后，您将获得以下输出：
- en: '![](img/a3411988-482a-453b-aa9b-b445f4cc9296.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a3411988-482a-453b-aa9b-b445f4cc9296.png)'
- en: 'So, we get our second record from the database. You can also do multiple `where`
    clauses, as shown in the following code:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们从数据库中获取了第二条记录。您还可以使用多个“where”子句，如下面的代码所示：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You will obtain the following output:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您将获得以下输出：
- en: '![](img/c4af8c54-aa5e-4c4d-80c3-1fd5ed25d560.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4af8c54-aa5e-4c4d-80c3-1fd5ed25d560.png)'
- en: Perfect! That is the record that we were expecting. That's how you can easily
    query a SQL database in Go.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 完美！这就是我们期望的记录。这就是您可以在Go中轻松查询SQL数据库的方式。
- en: In the next section, we're going to see how to insert data into a SQLite database.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将看到如何向SQLite数据库中插入数据。
- en: Inserting data into databases
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据插入数据库
- en: 'In this section, we''re going to see how to insert data into a database. We
    will be using the code that we developed in our previous section, and adding a
    new piece of code that will insert data into our `personal.db` database. We are
    going to add `statement` and `err`, and use `insert` statement to add names to
    our `Profile` table. We are going to specify which columns we want to insert the
    data into, but we are not going to specify `ProfileId` since it is the primary
    key of the table. We will type `FirstName`, `LastName`, and `Age`, and the values
    will just be placeholders. We will also use `statement.Exec` and provide the values
    for the placeholders, for example, `Jessica`, `McArthur`, and `30`. Here is the
    code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何向数据库中插入数据。我们将使用我们在上一节中开发的代码，并添加一个新的代码片段，将数据插入到我们的“personal.db”数据库中。我们将添加“statement”和“err”，并使用“insert”语句将名称添加到我们的“Profile”表中。我们将指定要将数据插入的列，但我们不会指定“ProfileId”，因为它是表的主键。我们将输入“FirstName”、“LastName”和“Age”，值将只是占位符。我们还将使用“statement.Exec”并为占位符提供值，例如“Jessica”、“McArthur”和“30”。以下是代码：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here is the output for the preceding code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述代码的输出：
- en: '![](img/f0584f29-c29b-4bdc-9d43-c929eae10005.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f0584f29-c29b-4bdc-9d43-c929eae10005.png)'
- en: As you can see, our ID is `5`, the first name is `Jessica`, the last name is
    `McArthur`, and the age is `30`. That's how you can simply insert data into a
    database using Go.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们的ID是“5”，名字是“Jessica”，姓氏是“McArthur”，年龄是“30”。这就是您可以简单地使用Go向数据库中插入数据的方式。
- en: In our next section, we're going to see how to update existing data in a database.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一部分中，我们将看到如何更新数据库中的现有数据。
- en: Updating data in databases
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在数据库中更新数据
- en: In this section, we are going to see how to update existing data in a database.
    We're going to use the same code that we developed in the previous section, but
    we will be changing a few fields.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何更新数据库中的现有数据。我们将使用我们在上一节中开发的相同代码，但是我们将更改一些字段。
- en: 'We''ll use an `update` statement in SQL. So, the following fields will be changed:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在SQL中使用“update”语句。因此，以下字段将被更改：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once we update our profile record, we''re going to list all the records in
    our `profile` table. If you remember our previous section, the last record has
    the profile ID `5`, and we''re going to change that. The last line of the output
    in the previous section was `{5 Jessica McArthur 30}`, and we are now going to
    change the first name for our updated code:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们更新了我们的个人资料记录，我们将列出我们“profile”表中的所有记录。如果您还记得我们上一节，最后一条记录的个人资料ID是“5”，我们将对其进行更改。上一节输出的最后一行是“{5
    Jessica McArthur 30}”，我们现在将更改更新代码的名字：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you run the code, you''ll find the following output:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行代码，您将获得以下输出：
- en: '![](img/b9727fa1-5b6d-4862-a433-6f60dd117e5a.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b9727fa1-5b6d-4862-a433-6f60dd117e5a.png)'
- en: You can see that we've successfully changed the name `Jessica` to `Martha`.
    That's how you can simply do an update in Go.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，我们已成功将名称“Jessica”更改为“Martha”。这就是您可以在Go中简单进行更新的方式。
- en: In our next section, we're going to see how to delete data from a database.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一部分中，我们将看到如何从数据库中删除数据。
- en: Deleting data from databases
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数据库中删除数据
- en: 'In this section, we''re going to see how to delete data from a database. We''ll
    still use the old code that we developed in the previous section and make some
    minor changes to it. Check out the following code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何从数据库中删除数据。我们仍将使用我们在上一节中开发的旧代码，并对其进行一些小的修改。请查看以下代码：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output of the preceding code will be as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 前述代码的输出将如下所示：
- en: '![](img/4237cc24-17c1-4c5e-a800-341420149aca.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4237cc24-17c1-4c5e-a800-341420149aca.png)'
- en: Now, to delete data, say row `3` in this case, you will have to make certain
    changes to the code. We will make minor modifications in the code with `statement`,
    `err`, and `statement.Exec`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要删除数据，比如说第3行，您将需要对代码进行一些修改。我们将对“statement”、“err”和“statement.Exec”进行一些小的修改。
- en: 'Thus, to achieve what we want, we are going to use the following modified code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了实现我们想要的，我们将使用以下修改后的代码：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can see that we''ve used `db.Prepareand`. We''ve provided the lead from
    `profile`, where `ProfileId` is a placeholder. We have also used `statement.Exec`
    and that will execute with the arguments; it''s important that the number of arguments
    matches the number of placeholders that you put in your code. Let''s run the code
    and check the output:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到我们使用了`db.Prepare`。我们从`profile`中提供了`ProfileId`的引导，其中`ProfileId`是一个占位符。我们还使用了`statement.Exec`，它将使用参数执行；重要的是参数的数量要与你在代码中放置的占位符数量相匹配。让我们运行代码并检查输出：
- en: '![](img/50f32c0e-51e7-4e18-bfba-d73f8d292e7a.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50f32c0e-51e7-4e18-bfba-d73f8d292e7a.png)'
- en: Thus, if you compare the two outputs, you can see that we have successfully
    deleted the third entry and now we have only `4` entries, with the third entry
    having been deleted. That's how you can simply delete data from a database.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你比较两个输出，你会发现我们成功删除了第三个条目，现在我们只有`4`个条目，第三个条目已经被删除。这就是你可以简单地从数据库中删除数据的方法。
- en: Summary
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: That pretty much concludes our book. You will have learned quite a lot about
    Go, and now you can effectively use this knowledge in various scenarios. You can
    now overcome the most common challenges faced by developers by following the concise
    and easy recipes included in this book. All the best!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上结束了我们的书。你将学到很多关于Go的知识，现在你可以在各种场景中有效地运用这些知识。你现在可以通过遵循本书中包含的简洁易懂的配方来克服开发者面临的最常见挑战。祝一切顺利！
