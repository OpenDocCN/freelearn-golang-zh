- en: Cross Compiler Setup
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交叉编译器设置
- en: When building applications that need access to native APIs, we can use CGo.
    Although not much harder for regular development, this does make cross compiling
    much more complicated. For every target platform you want to build for, there
    must be a C compiler that knows how to create native binary files. This appendix
    outlines the steps required to set up cross compilation targets for each combination
    referenced earlier in this book.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当构建需要访问原生 API 的应用程序时，我们可以使用 CGo。尽管对于常规开发来说并不困难，但这确实使得交叉编译变得更加复杂。对于您想要为每个目标平台构建的，都必须有一个
    C 编译器知道如何创建原生二进制文件。本附录概述了设置本书记载中之前提到的每个组合所需的交叉编译目标步骤。
- en: Most Go applications don't require this setup for cross compiling as the Go
    compiler is designed to build for all supported platforms. Additional steps, such
    as those following, will be required if the resulting applications (or the toolkits
    they use) are linking to operating system libraries through CGo.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Go 应用程序不需要为交叉编译设置此环境，因为 Go 编译器被设计为支持所有平台。如果生成的应用程序（或它们使用的工具包）通过 CGo 链接到操作系统库，则需要额外的步骤。
- en: Cross compiling for macOS with CGo
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 CGo 为 macOS 进行交叉编译
- en: When cross compiling for macOS, it's necessary to install the SDK (Software
    Development Kit) from Apple as well as a suitable compiler. The instructions for
    Windows (using MSYS2—described in the previous [Appendix](a0605c81-4926-45d1-b90c-63047f1e2b76.xhtml), *Installation
    Details*) and Linux are almost identical; the main work is to install the macOS
    SDK.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当为 macOS 进行交叉编译时，需要安装苹果的 SDK（软件开发工具包）以及一个合适的编译器。Windows（使用 MSYS2——在之前的 [附录](a0605c81-4926-45d1-b90c-63047f1e2b76.xhtml)，*安装详情*）和
    Linux 的说明几乎相同；主要工作是安装 macOS SDK。
- en: To macOS from Linux or Windows
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Linux 或 Windows 到 macOS
- en: To prepare for cross compilation to Darwin, we must install the macOS SDK and
    a build toolchain that can use it. The easiest way to do this is with the *osxcross* project. This
    example shows how to download and install the SDK and tools to build for macOS
    without using a Macintosh computer. This illustration uses Linux but the process
    is the same for Windows developers using MSYS2 or Cygwin Command Prompts.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备交叉编译到 Darwin，我们必须安装 macOS SDK 和一个可以使用的构建工具链。最简单的方法是使用 *osxcross* 项目。以下示例展示了如何下载和安装
    SDK 和工具，以便在没有使用 Macintosh 计算机的情况下为 macOS 构建应用程序。此说明使用 Linux，但对于使用 MSYS2 或 Cygwin
    命令提示符的 Windows 开发者来说，过程是相同的。
- en: 'We''ll be using `clang` rather than `gcc` as it''s more portable by design.
    For this process to work, you''ll need to have `clang`, `cmake`, and `libxml2-dev`
    installed using your package manager:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `clang` 而不是 `gcc`，因为它的设计更便携。为了使此过程正常工作，您需要使用您的包管理器安装 `clang`、`cmake` 和
    `libxml2-dev`：
- en: On Linux use: `pacman -S clang cmake libxml2-dev` (or `apt-get` or `yum`, depending
    on your distribution)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Linux 上使用：`pacman -S clang cmake libxml2-dev`（或 `apt-get` 或 `yum`，具体取决于您的发行版）
- en: 'On Windows use: `pacman -S mingw-w64-x86_64-clang mingw-w64-x86_64-cmake mingw-w64-x86_64-libxml2`'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 上使用：`pacman -S mingw-w64-x86_64-clang mingw-w64-x86_64-cmake mingw-w64-x86_64-libxml2`
- en: Next, we need to download the macOS SDK, which is bundled with Xcode. If you
    don't already have an Apple developer account, you'll need to sign up and agree
    to their terms and conditions. Using this account, log in to the download site
    at [https://developer.apple.com/download/more/?name=Xcode%207.3](https://developer.apple.com/download/more/?name=Xcode%207.3) and
    download `XCode.dmg` (7.3.1 is recommended for osxcross).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要下载 macOS SDK，它包含在 Xcode 中。如果您还没有 Apple 开发者账户，您需要注册并同意他们的条款和条件。使用此账户，登录到
    [https://developer.apple.com/download/more/?name=Xcode%207.3](https://developer.apple.com/download/more/?name=Xcode%207.3)
    下载 `XCode.dmg`（推荐使用 osxcross 的 7.3.1 版本）。
- en: Then, we can install the osxcross tool—start by downloading it with `git clone
    https://github.com/tpoechtrager/osxcross.git` and then change into the downloaded
    directory. Using these tools, we extract the macOS SDK from the downloaded `Xcode.dmg`
    file using the package tool provided, `./tools/gen_sdk_package_darling_dmg.sh
    <path to Xcode.dmg>`. The resulting `MacOSX10.11.sdk.tar.xz` file should be copied
    into the `tarballs/` directory.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以安装 osxcross 工具——首先使用 `git clone https://github.com/tpoechtrager/osxcross.git`
    下载它，然后切换到下载的目录。使用这些工具，我们可以使用提供的包工具 `./tools/gen_sdk_package_darling_dmg.sh <path
    to Xcode.dmg>` 从下载的 `Xcode.dmg` 文件中提取 macOS SDK。生成的 `MacOSX10.11.sdk.tar.xz` 文件应该复制到
    `tarballs/` 目录。
- en: Lastly, we build the osxcross compiler extension by executing `./build.sh`.
    Following this, there should be a new directory named `target/bin/`, which you
    should add to your `PATH` environment variable. The compiler can now be used in
    CGo builds by setting the environment variable, `CC=o32-clang`. More details about
    this process and how to adapt it for other platforms are available on the osxcross
    project website at [https://github.com/tpoechtrager/osxcross](https://github.com/tpoechtrager/osxcross).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过执行 `./build.sh` 来构建 osxcross 编译器扩展。之后，应该会创建一个名为 `target/bin/` 的新目录，你需要将其添加到你的
    `PATH` 环境变量中。现在可以通过设置环境变量 `CC=o32-clang` 来在 CGo 构建中使用编译器。关于此过程以及如何适应其他平台的更多详细信息，可以在
    osxcross 项目网站上找到，网址为 [https://github.com/tpoechtrager/osxcross](https://github.com/tpoechtrager/osxcross)。
- en: Cross compiling for Windows with CGo
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 CGo 为 Windows 进行交叉编译
- en: Building for Windows from another platform requires an installation of the `mingw`
    toolchain (similar to that which we installed on Windows to support CGo). This
    should be available in your package manager with a name similar to `mingw-w64-clang`
    or `w64-mingw`, but if not, you can install directly using the instructions at [https://github.com/tpoechtrager/wclang](https://github.com/tpoechtrager/wclang).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 从其他平台为 Windows 构建需要安装 `mingw` 工具链（类似于我们在 Windows 上安装以支持 CGo 的工具链）。这应该在你的包管理器中可用，名称类似于
    `mingw-w64-clang` 或 `w64-mingw`，但如果不可用，你可以直接使用 [https://github.com/tpoechtrager/wclang](https://github.com/tpoechtrager/wclang)
    上的说明进行安装。
- en: To Windows from macOS
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 macOS 到 Windows
- en: To install the packages on macOS, it's recommended to use the Homebrew package
    manager. You probably already have this installed from earlier chapters in this
    book (for example, when setting up the GTK+ library), but if not, you can download
    it from [https://brew.sh](https://brew.sh). Once Homebrew is set up, the compiler
    package is installed using `brew install mingw-w64`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 macOS 上安装软件包，建议使用 Homebrew 包管理器。你可能已经从本书的早期章节中安装了它（例如，在设置 GTK+ 库时），如果没有，你可以从
    [https://brew.sh](https://brew.sh) 下载它。一旦设置了 Homebrew，就可以使用 `brew install mingw-w64`
    来安装编译器软件包。
- en: Once installed, the compiler can be used with CGo by setting `CC=x86_64-w64-mingw32-gcc` (for
    the C toolchain) and `CXX=x86_64-w64-mingw32-g++` (for C++ requirements).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，可以通过设置 `CC=x86_64-w64-mingw32-gcc`（用于 C 工具链）和 `CXX=x86_64-w64-mingw32-g++`（用于
    C++ 需求）来使用编译器与 CGo 一起。
- en: To Windows from Linux
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Linux 到 Windows
- en: Installing on Linux should just require finding the correct package in your
    distribution's listing. For example, for Debian or Ubuntu, you would execute `sudo
    apt-get install gcc-mingw-w64`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上安装只需在发行版的列表中找到正确的软件包即可。例如，对于 Debian 或 Ubuntu，你会执行 `sudo apt-get install
    gcc-mingw-w64`。
- en: Once installed, the compiler can be used with CGo by setting `CC=x86_64-w64-mingw32-gcc` (for
    the C toolchain) and `CXX=x86_64-w64-mingw32-g++` (for C++ requirements).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，可以通过设置 `CC=x86_64-w64-mingw32-gcc`（用于 C 工具链）和 `CXX=x86_64-w64-mingw32-g++`（用于
    C++ 需求）来使用编译器与 CGo 一起。
- en: Cross compiling for Linux with CGo
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 CGo 为 Linux 进行交叉编译
- en: To cross compile for Linux, we'll need a GCC or compatible compiler that can
    build Linux binary files. On macOS, the easiest platform to use is musl-cross
    (musl has many other advantages that you can read more about at [www.etalabs.net/compare_libcs.html](http://www.etalabs.net/compare_libcs.html)).
    On Windows, the `linux-gcc` package will be suitable. Let's work through the steps
    for each of these.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 Linux 进行交叉编译，我们需要一个可以构建 Linux 二进制文件的 GCC 或兼容编译器。在 macOS 上，最简单的平台是 musl-cross（musl
    有许多其他优点，你可以在 [www.etalabs.net/compare_libcs.html](http://www.etalabs.net/compare_libcs.html)
    上了解更多）。在 Windows 上，`linux-gcc` 软件包将是合适的。让我们逐一处理这些步骤。
- en: To Linux from macOS
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 macOS 到 Linux
- en: 'To install the dependencies for cross compiling for Linux, we''ll use the Homebrew
    package manager again—see the previous sections or [https://brew.sh/](https://brew.sh/)
    for installation instructions. Using Homebrew, we''ll install the appropriate
    packages by opening a Terminal and executing the following commands (the `HOMEBREW_BUILD_FROM_SOURCE` variable
    works around an issue with musl-cross depending on potentially old versions of
    libraries):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 Linux 交叉编译安装依赖项，我们将再次使用 Homebrew 包管理器——请参阅前面的章节或 [https://brew.sh/](https://brew.sh/)
    以获取安装说明。使用 Homebrew，我们将通过打开终端并执行以下命令来安装适当的软件包（`HOMEBREW_BUILD_FROM_SOURCE` 变量解决了
    musl-cross 依赖于可能过时的库版本的问题）：
- en: '`export HOMEBREW_BUILD_FROM_SOURCE=1`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`export HOMEBREW_BUILD_FROM_SOURCE=1`'
- en: '`brew install FiloSottile/musl-cross/musl-cross`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`brew install FiloSottile/musl-cross/musl-cross`'
- en: Once the installation is complete (this may take some time as it's building
    a complete compiler toolchain from source), you should be able to build for Linux.
    To do so, you'll need to set the environment variables, `CC=x86_64-linux-musl-gcc` and `CXX=x86_64-linux-musl-g++`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后（这可能需要一些时间，因为它需要从源代码构建完整的编译器工具链），你应该能够为Linux进行构建。为此，你需要设置环境变量，`CC=x86_64-linux-musl-gcc`
    和 `CXX=x86_64-linux-musl-g++`。
- en: To Linux from Windows
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Windows到Linux
- en: 'Using MSYS2 as earlier, we can install the `gcc` package to provide cross compilation
    for Linux:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用MSYS2，我们可以安装`gcc`包以提供Linux的交叉编译：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After the installation has completed, we can tell our Go compiler to use `gcc`
    by setting the environment variable `CC=gcc`. Compilation should now succeed following
    the instructions in your current example, such as the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以通过设置环境变量 `CC=gcc` 来告诉我们的Go编译器使用 `gcc`。现在，按照你当前示例中的说明进行编译应该会成功，例如以下内容：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It's possible, at this point, that you may see additional errors due to missing
    headers. To fix this, you'll need to search for, and install, the required libraries.
    If, for example, your error stated that SDL couldn't be found then you would use
    `pacman -Ss sdl` to search for the right package to install. If you can't find
    an appropriate package, you may need to install Cygwin [www.cygwin.com/](https://www.cygwin.com/)
    (as it has a larger package library) or Windows subsystem for Linux [docs.microsoft.com/en-us/windows/wsl/](https://docs.microsoft.com/en-us/windows/wsl/)
    (as that brings a full Linux distribution to your Windows desktop).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，你可能可能会看到由于缺少头文件而导致的额外错误。为了解决这个问题，你需要搜索并安装所需的库。例如，如果你的错误表明SDL找不到，那么你会使用
    `pacman -Ss sdl` 来搜索要安装的正确包。如果你找不到合适的包，你可能需要安装Cygwin [www.cygwin.com/](https://www.cygwin.com/)（因为它有一个更大的包库）或者Windows子系统（WSL）[docs.microsoft.com/en-us/windows/wsl/](https://docs.microsoft.com/en-us/windows/wsl/)（因为它将完整的Linux发行版带到你的Windows桌面）。
