- en: Template Programming in Go
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go中的模板编程
- en: Template programming in Go allows the end user to write Go templates that produce,
    manipulate, and run Go programs. Go has clear, static dependencies, which assist
    with metaprogramming. Template programming in Go, including generated binaries,
    CLI tooling, and templating libraries, are all core tenets of the language that
    help us write maintainable, scalable, performant Go code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Go中的模板编程允许最终用户编写生成、操作和运行Go程序的Go模板。Go具有清晰的静态依赖关系，这有助于元编程。Go中的模板编程，包括生成的二进制文件、CLI工具和模板化库，都是语言的核心原则，帮助我们编写可维护、可扩展、高性能的Go代码。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Go generate
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go generate
- en: Protobuf code generation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协议缓冲区代码生成
- en: Linking toolchains
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接工具链
- en: Configuration metaprogramming using Cobra and Viper
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Cobra和Viper进行配置元编程
- en: Text and HTML templating
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本和HTML模板
- en: Sprig for Go templating
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go模板的Sprig
- en: All of these topics will help you write Go code faster and more effectively.
    In the next section, we'll talk about Go generate and how it is useful in the
    Go programming language.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些主题都将帮助您更快、更有效地编写Go代码。在下一节中，我们将讨论Go generate以及它在Go编程语言中的用途。
- en: Understanding Go generate
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Go generate
- en: As of Go version 1.4, the language contains a tool that helps with code generation,
    called Go generate. Go generate scans source code for general commands to run.
    This operates independently of `go build`, and thus must be run before code is
    built. Go generate is run by the code author, not by users of the compiled binary.
    This tool runs similarly to how Makefiles and shell scripts are typically used,
    but it is packaged with the Go tool and we don't need to include any other dependencies.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 截至Go版本1.4，该语言包含一个名为Go generate的代码生成工具。Go generate扫描源代码以运行通用命令。这独立于`go build`运行，因此必须在构建代码之前运行。Go
    generate由代码作者运行，而不是由编译后的二进制文件的用户运行。这个工具的运行方式类似于通常使用Makefile和shell脚本的方式，但它是与Go工具一起打包的，我们不需要包含任何其他依赖项。
- en: Go generate will search the code base for lines with the following pattern: `//go:generate
    command argument`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Go generate将搜索代码库以查找以下模式的行：`//go:generate command argument`。
- en: 'A generated source file should have a line such as the following, in order
    to convey that the code was generated:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的源文件应该有以下一行，以传达代码是生成的：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Go generate utilizes a group of variables when the generator is run:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当生成器运行时，Go generate利用一组变量：
- en: '`$GOARCH`: The architecture of the executing platform'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$GOARCH`：执行平台的架构'
- en: '`$GOOS`: The operating system of the executing platform'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$GOOS`：执行平台的操作系统'
- en: '`$GOFILE`: The filename'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$GOFILE`：文件名'
- en: '`$GOLINE`: The source file''s line number that contains the directive'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$GOLINE`：包含指令的源文件的行号'
- en: '`$GOPACKAGE`: The package name in which the file containing the directive lives'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$GOPACKAGE`：包含指令的文件的包名称'
- en: '`$DOLLAR`: A literal `$`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$DOLLAR`：一个字面的`$`'
- en: We can use this Go generate command for all sorts of different use cases in
    Go.  They can be thought of as built-in build mechanisms for Go. The operations
    that are performed with Go generate can be done with other build toolings, such
    as Makefiles, but having Go generate available means that you don't need any other
    dependencies in your build environment. This means that all of your build artifacts
    live within Go files to maintain consistency across your projects.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在Go中使用这个Go generate命令来处理各种不同的用例。它们可以被视为Go的内置构建机制。使用Go generate执行的操作可以使用其他构建工具，比如Makefile，但有了Go
    generate，您就不需要在构建环境中包含任何其他依赖项。这意味着所有的构建产物都存储在Go文件中，以保持项目的一致性。
- en: Generated code for protobufs
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成protobufs的代码
- en: One practical use case for generating code in Go is generating protocol buffers
    using gRPC. Protocol buffers are a new method that is used to serialize structured
    data. It's commonly used to pass data between services in distributed systems,
    as it tends to be much more efficient than its JSON or XML counterparts. Protocol
    buffers are also extensible across multiple languages on multiple platforms. They
    come with a structured data definition; once you have your data structured, source
    code is generated that can be read from, and written to, data sources.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go中生成代码的一个实际用例是使用gRPC生成协议缓冲区。协议缓冲区是一种用于序列化结构化数据的新方法。它通常用于在分布式系统中的服务之间传递数据，因为它往往比其JSON或XML对应物更有效。协议缓冲区还可以跨多种语言和多个平台进行扩展。它们带有结构化数据定义；一旦您的数据被结构化，就会生成可以从数据源读取和写入的源代码。
- en: First, we need to grab the latest version of the protocol buffers: [https://github.com/protocolbuffers/protobuf/releases](https://github.com/protocolbuffers/protobuf/releases).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要获取最新版本的协议缓冲区：[https://github.com/protocolbuffers/protobuf/releases](https://github.com/protocolbuffers/protobuf/releases)。
- en: 'At the time of writing, the stable version of this software is 3.8.0\. After
    installing this package, we need to make sure that we pull the required Go dependencies
    using the `go get github.com/golang/protobuf/protoc-gen-go` command. Next, we
    can generate a very generic protocol definition:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，该软件的稳定版本为3.8.0。安装此软件包后，我们需要确保使用`go get github.com/golang/protobuf/protoc-gen-go`命令拉取所需的Go依赖项。接下来，我们可以生成一个非常通用的协议定义：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After this, we can generate our protofile by using Go generate. Create a file
    in the same directory as your `.proto` file that contains the following contents:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们可以使用Go generate生成我们的protofile。在与您的`.proto`文件相同的目录中创建一个包含以下内容的文件：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This allows us to generate a protobuf definition just by using Go generate.
    After we execute Go generate in this directory, we get a file, `userinfo.pb.go`,
    that contains all of our protobuf definitions in the Go format. We can use this
    information when we are generating our client and server architecture with gRPC.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们可以通过使用Go generate来生成协议缓冲区定义。在这个目录中执行Go generate后，我们会得到一个文件`userinfo.pb.go`，其中包含了所有我们的协议缓冲区定义的Go格式。当我们使用gRPC生成客户端和服务器架构时，我们可以使用这些信息。
- en: 'Next, we can create a server to use the gRPC definitions that we added earlier:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以创建一个服务器来使用我们之前添加的gRPC定义：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After we initialize our server struct and have a function for returning user
    information, we can set up our gRPC server to listen on our standard port and
    register our server:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们初始化了服务器结构并有一个返回用户信息的函数，我们就可以设置我们的gRPC服务器监听我们的标准端口并注册我们的服务器：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once we have our server definition set up, we can focus on the client. Our
    client has all of our normal imports, as well as a couple of default constant
    declarations, as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们设置好服务器定义，我们就可以专注于客户端。我们的客户端具有所有常规的导入，以及一些默认的常量声明，如下所示：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After we have our imports and constants set up, we can use these in our main
    function to send these values to our server. We set up a context with a default
    timeout of 1 second, we make a `PrintUserInfo` protobuf request, and we get a
    response and log it. The following is our protobuf example:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们设置好导入和常量之后，我们可以在主函数中使用它们将这些值发送到我们的服务器。我们设置了一个默认超时为1秒的上下文，我们发出了一个`PrintUserInfo`的protobuf请求，然后得到了一个响应并记录下来。以下是我们的protobuf示例：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We can see our protobuf example in action here. Protobufs are a powerful way
    to send messages across a distributed system.  Google has often mentioned how
    important protobufs are to their stability at scale. We'll talk about the results
    from our protobuf code in the next section.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在这里看到我们的protobuf示例在运行中的情况。Protobuf是在分布式系统中发送消息的强大方式。Google经常提到protobuf对于他们在规模上的稳定性有多么重要。我们将在下一节讨论我们的protobuf代码的结果。
- en: Protobuf code results
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Protobuf代码结果
- en: 'Once we have our protocol definition, our server, and our client, we can execute
    them together to see our work in action. First, we start the server:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了我们的协议定义、我们的服务器和我们的客户端，我们可以一起执行它们，看到我们的工作在实际中的效果。首先，我们启动服务器：
- en: '![](img/1ef5a6cc-4cae-409b-a20b-820eb05353ba.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1ef5a6cc-4cae-409b-a20b-820eb05353ba.png)'
- en: 'Next, we execute the client code. We can see the default user name and email
    address that we created in our client code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们执行客户端代码。我们可以在我们的客户端代码中看到我们创建的默认用户名和电子邮件地址：
- en: '![](img/d87c1be2-f1c0-4066-8a40-775e4eb0699b.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d87c1be2-f1c0-4066-8a40-775e4eb0699b.png)'
- en: 'On the server-side, we can see the log for the request that we made:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器端，我们可以看到我们发出的请求的日志：
- en: '![](img/d803f44f-6fc8-4629-b664-8c9f5712af69.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d803f44f-6fc8-4629-b664-8c9f5712af69.png)'
- en: 'gRPC is a very efficient protocol: it uses HTTP/2 and protocol buffers in order
    to rapidly serialize data. Multiple calls can make use of a single connection
    from the client to the server, which in turn reduces latency and increases throughput.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: gRPC是一个非常高效的协议：它使用HTTP/2和协议缓冲区来快速序列化数据。客户端到服务器的单个连接可以进行多次调用，从而减少延迟并增加吞吐量。
- en: In the next section, we will talk about the link toolchain.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论链接工具链。
- en: The link toolchain
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链接工具链
- en: 'Go has a bunch of handy tools in its link tool that allow us to pass pertinent
    data to an executable function. With this tool, the programmer has the ability
    to set a value for a string with a particular name and value pair. Using the `cmd`/`link`
    package in Go allows you to pass in information to the Go program at hand at link
    time. The way to pass this information from the toolchain to the executable is
    to utilize the build parameter:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Go语言在其链接工具中有一堆方便的工具，允许我们将相关数据传递给可执行函数。使用这个工具，程序员可以为具有特定名称和值对的字符串设置一个值。在Go语言的`cmd`/`link`包中允许您在链接时向Go程序传递信息。将此信息从工具链传递到可执行文件的方法是利用构建参数：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'For example, if we were trying to take in a serial number for our program from
    the command line, we could do something like the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们试图从命令行中获取程序的序列号，我们可以做如下操作：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As shown in the preceding output, if we attempt to execute this program while
    not passing in a serial number, the program will tell us that our serial number
    is invalid:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的输出所示，如果我们尝试在不传入序列号的情况下执行此程序，程序将告诉我们我们的序列号无效：
- en: '![](img/ca2db256-1808-4fce-9f2f-746e956332af.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca2db256-1808-4fce-9f2f-746e956332af.png)'
- en: 'If we pass in an incorrect serial number, we will get the same result:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们传入一个不正确的序列号，我们将得到相同的结果：
- en: '![](img/774acde4-4e0e-457c-8513-a7e2db3695cf.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/774acde4-4e0e-457c-8513-a7e2db3695cf.png)'
- en: 'If we pass in the correct serial number, our program will tell us that we have
    a valid serial number:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们传入正确的序列号，我们的程序将告诉我们我们有一个有效的序列号：
- en: '![](img/9d1f8fef-3f44-475b-88a6-3c2397304178.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9d1f8fef-3f44-475b-88a6-3c2397304178.png)'
- en: Having the ability to pass data into your program at link time can be useful
    when troubleshooting a large code base. It can also be useful when, though you
    have a compiled binary that you need to deploy, later a common value may need
    to be updated in a non-deterministic fashion.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在链接时将数据传递到程序中的能力在排查大型代码库时非常有用。当您需要部署一个已编译的二进制文件，但稍后可能需要以非确定性方式更新一个常见值时，这也是非常有用的。
- en: In the next section, we will discuss two tools—Cobra and Viper—that are commonly
    used for configuration programming.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论两个常用于配置编程的工具——Cobra和Viper。
- en: Introducing Cobra and Viper for configuration programming
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Cobra和Viper用于配置编程
- en: Two commonly used Go libraries, `spf13/cobra` and `spf13/viper`, are used for
    configuration programming. Together, these two libraries can be used to create
    CLI binaries that have many configurable options. Cobra allows you to generate
    applications and command files, while Viper helps to read and maintain complete configuration
    solutions for 12-factor Go applications. Cobra and Viper are used in some of the
    most commonly used Go projects, including Kubernetes and Docker.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 两个常用的Go库`spf13/cobra`和`spf13/viper`用于配置编程。这两个库可以一起用于创建具有许多可配置选项的CLI二进制文件。Cobra允许您生成应用程序和命令文件，而Viper有助于读取和维护12因素Go应用程序的完整配置解决方案。Cobra和Viper在一些最常用的Go项目中使用，包括Kubernetes和Docker。
- en: 'To use these two libraries together to make a `cmd` library, we need to make
    sure we nest our project directory, as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要一起使用这两个库制作一个`cmd`库，我们需要确保我们嵌套我们的项目目录，如下所示：
- en: '![](img/2542a06f-7527-477c-9588-b0e63555caa5.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2542a06f-7527-477c-9588-b0e63555caa5.png)'
- en: 'Once we have created our nested directory structure, we can start setting up
    our main program. In our `main.go` file, we have defined our date command—the
    `main.go` function for Cobra and Viper us deliberately simple so that we can invoke
    functions written in the `cmd` directory (this is a common Go idiom). Our `main`
    package is as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了嵌套的目录结构，我们就可以开始设置我们的主程序。在我们的 `main.go` 文件中，我们已经定义了我们的日期命令 - Cobra 和 Viper
    的 `main.go` 函数故意简单，以便我们可以调用在 `cmd` 目录中编写的函数（这是一个常见的 Go 习惯）。我们的 `main` 包如下所示：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once we have our `main` function defined, we can start setting up the rest
    of our command tooling. We start by importing our requirements:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们定义了我们的 `main` 函数，我们就可以开始设置我们的其余命令工具。我们首先导入我们的要求：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, we can set up our root `date` command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以设置我们的根 `date` 命令：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once we have this set up, we can also set up a subcommand to display our licensing
    information, as shown in the following code sample.  A subcommand is a second
    argument for the CLI tool in order to give `cli` more information:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们设置了这个，我们还可以设置一个子命令来显示我们的许可信息，如下面的代码示例所示。子命令是 CLI 工具的第二个参数，以便为 `cli` 提供更多信息：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Lastly, we can set up our `init()` function.  The `init()` function in Go is
    used for a couple of things:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以设置我们的 `init()` 函数。Go 中的 `init()` 函数用于一些事情：
- en: Initial information displayed to the user
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向用户显示初始信息
- en: Initial variable declaration
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始变量声明
- en: Initializing connections to outside parties (a DB connection pool or message
    broker initialization)
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始化与外部方的连接（例如 DB 连接池或消息代理初始化）
- en: 'We can leverage our new `init()` function knowledge in the last bit of this
    code to initialize the `viper` and `cobra` commands we defined previously:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在代码的最后部分利用我们新的 `init()` 函数知识来初始化我们之前定义的 `viper` 和 `cobra` 命令：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The preceding code snippet shows us some default, persistent, and binding flags
    that are commonly used in Viper.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码片段向我们展示了 Viper 中常用的一些默认、持久和绑定标志。
- en: Cobra/Viper resulting sets
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cobra/Viper 结果集
- en: Now that we have instantiated all of our functionality, we can see our new code
    in action.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经实例化了所有的功能，我们可以看到我们的新代码在运行中的情况。
- en: 'If we invoke our new `main.go` without any optional parameters, we will just
    see the date return that we defined in our initial `DateCommand` run block, as
    shown in the following code output:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们调用我们的新的 `main.go` 而没有任何可选参数，我们将只看到我们在初始 `DateCommand` 运行块中定义的日期返回，如下面的代码输出所示：
- en: '![](img/573c481a-3822-41c0-9118-936ee34d458e.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/573c481a-3822-41c0-9118-936ee34d458e.png)'
- en: 'If we add additional flags to our input, we can gather verbose information
    and change the Author of the package using command-line flags, as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们向我们的输入添加额外的标志，我们可以收集详细信息并使用命令行标志更改包的作者，如下所示：
- en: '![](img/c2450161-1c4c-4765-8a3b-fb9db3f742f5.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c2450161-1c4c-4765-8a3b-fb9db3f742f5.png)'
- en: 'We can also view the subcommand that we created for licensing by adding it
    as a parameter, as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过将其作为参数添加来查看我们为许可创建的子命令，如下所示：
- en: '![](img/b0b25dca-8d9d-4d97-8e87-e546ceae13db.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b0b25dca-8d9d-4d97-8e87-e546ceae13db.png)'
- en: We have seen a small fraction of the functionality of the `spf13` Cobra and
    Viper packages, but it is important to understand their root principle – they
    are used in order to facilitate extensible CLI tooling within Go. In the next
    section, we'll talk about text templating.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了 `spf13` Cobra 和 Viper 包的一小部分功能，但重要的是要理解它们的根本原则 - 它们用于在 Go 中促进可扩展的 CLI
    工具。在下一节中，我们将讨论文本模板。
- en: Text templating
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本模板
- en: Go has a built-in templating language, `text/template`, that implements templates
    with data and generates a text-based output. We use structs in order to define
    the data that we want to use within our templates. As with all things, Go input
    text is defined as UTF-8 and can be passed in as any format. We use double braces
    `{{}}` to denote actions that we want to perform on our data. A cursor, represented
    by `.`, allows us to add data to our template. These things combined create a
    powerful templating language that will allow us to reuse templates for many bits
    of code.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Go 有一个内置的模板语言 `text/template`，它使用数据实现模板并生成基于文本的输出。我们使用结构来定义我们想要在模板中使用的数据。与所有事物一样，Go
    输入文本被定义为 UTF-8，并且可以以任何格式传递。我们使用双大括号 `{{}}` 来表示我们想要在我们的数据上执行的操作。由 `.` 表示的光标允许我们向我们的模板添加数据。这些组合在一起创建了一个强大的模板语言，它将允许我们为许多代码片段重用模板。
- en: 'First, we are going to initialize our package, import our necessary dependencies,
    and define our struct for the data that we would like to pass into our template:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将初始化我们的包，导入我们需要的依赖项，并为我们想要传递到模板中的数据定义我们的结构：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, we can set up our template and our input structure using the text/template
    definitions we mentioned previously:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用我们之前提到的 text/template 定义来设置我们的模板和输入结构：
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Lastly, we can execute our template and print it. Our example prints to `Stdout`,
    but we could print to a file, write to a buffer, or send an email automatically:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以执行我们的模板并打印它。我们的示例打印到 `Stdout`，但我们也可以打印到文件，写入缓冲区，或自动发送电子邮件：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Utilizing the Go text templating system allows us to reuse these templates to
    produce consistent quality content. Since we have new inputs, we can adjust our
    templates and derive a result accordingly.  In the next section, we will discuss
    HTML templating.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 利用 Go 文本模板系统，我们可以重复使用这些模板来生成一致的高质量内容。由于我们有新的输入，我们可以调整我们的模板并相应地得出结果。在下一节中，我们将讨论
    HTML 模板。
- en: HTML templating
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML 模板
- en: 'We can also use HTML templating, akin to how we performed text tempting, in
    order to generate dynamic results for HTML pages in Go. In order to do this, we
    need to initialize our package, import the proper dependencies, and set up a data
    structure to hold the values that we are planning to use in our HTML templates,
    like so:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 HTML 模板，类似于我们执行文本模板，以便在 Go 中为 HTML 页面生成动态结果。为了做到这一点，我们需要初始化我们的包，导入适当的依赖项，并设置一个数据结构来保存我们计划在
    HTML 模板中使用的值，如下所示：
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, we create the `userResponse` HTML template:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建`userResponse` HTML模板：
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then, we create an HTTP request handler:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建一个HTTP请求处理程序：
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'After that, we initialize the HTTP server:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们初始化HTTP服务器：
- en: '[PRE20]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, we invoke our web server using `go run htmlTemplate.go`. When we request
    a page on this domain, we will see the following result:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用`go run htmlTemplate.go`调用我们的Web服务器。当我们在该域上请求页面时，我们将看到以下结果：
- en: '![](img/f036617f-b337-43c3-886c-4366cde1c43f.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f036617f-b337-43c3-886c-4366cde1c43f.png)'
- en: The preceding output comes from the templated code from our HTML template. This
    example could be extended to include parsing for an incoming IP address request
    via an X-Forwarded-For header, the end user's browser information based on the
    user agent string, or any other particular request parameter that could be used
    in order to give a rich response back to the client. In the next section, we'll
    discuss Sprig, a library for Go templating functions.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的输出来自于我们的HTML模板中的模板化代码。这个例子可以扩展到包括解析通过X-Forwarded-For头部的传入IP地址请求，基于用户代理字符串的最终用户浏览器信息，或者可以用于向客户端返回丰富响应的任何其他特定请求参数。在下一节中，我们将讨论Sprig，一个用于Go模板函数的库。
- en: Exploring Sprig
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Sprig
- en: 'Sprig is a library that is used to define Go templating functions. The library
    includes many functions that extend the functionality of Go''s templating language.
    The Sprig library has a few principles that help determine which functions are
    available to drive enhanced templates:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Sprig是一个用于定义Go模板函数的库。该库包括许多函数，扩展了Go的模板语言的功能。Sprig库有一些原则，有助于确定哪些函数可用于驱动增强的模板：
- en: Only allows simple math
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只允许简单的数学运算
- en: Only deals with data that is passed to templates; never retrieves data from
    an external source
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只处理传递给模板的数据；从不从外部来源检索数据
- en: Utilizes functions from the template library to build the resulting layout
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用模板库中的函数构建结果布局
- en: Never overrides the Go core template functionality
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不会覆盖Go核心模板功能
- en: In the following subsections, we'll take a closer look at Sprig's functionality.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下小节中，我们将更详细地了解Sprig的功能。
- en: String functions
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串函数
- en: Sprig has a grouping of string functions that are capable of manipulating strings
    within a template.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Sprig具有一组字符串函数，可以在模板中操作字符串。
- en: 'In our example, we are going to take the `"   -  bob smith"` string (note the
    spaces and dashes). From there, we are going to do the following:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们将采用`"   -  bob smith"`字符串（注意空格和破折号）。然后，我们将执行以下操作：
- en: Trim white space using the `trim()` utility
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`trim()`实用程序修剪空格
- en: Replace the instance of the word `smith` with the word `strecansky`
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用单词`smith`替换单词`strecansky`的实例
- en: Trim the `-` prefix
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修剪“-”前缀
- en: Change the string to title case, that is, from `bob strecansky` to `Bob Strecansky`
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将字符串更改为标题大小写，即从`bob strecansky`更改为`Bob Strecansky`
- en: Repeat the string 10 times
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重复字符串10次
- en: Create a word wrap of 14 characters (the width of my name) and separate each
    with a new line
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个14个字符的单词换行（我的名字的宽度），并用新行分隔每个字符。
- en: The Sprig library can do this in one line, akin to how bash shells can pipe
    functions to one another.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Sprig库可以在一行中执行此操作，类似于bash shell可以将函数串联在一起。
- en: 'We start by initializing our package and importing the necessary dependencies:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先初始化我们的包并导入必要的依赖项：
- en: '[PRE21]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, we set our string map to `interface`, perform our transformations, and
    render our template to standard output:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将我们的字符串映射设置为`interface`，执行我们的转换，并将我们的模板呈现到标准输出：
- en: '[PRE22]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'After we execute our program, we will see string manipulations occurring the
    way we expected:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 执行程序后，我们将看到字符串操作发生的方式与我们预期的方式相同：
- en: '![](img/ef77ea5a-0575-420b-af28-f0771b04994f.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ef77ea5a-0575-420b-af28-f0771b04994f.png)'
- en: Being able to manipulate strings in templates like in our example helps us to
    quickly rectify any issues we may have with incoming templates and manipulate
    them on the fly.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 能够像我们的示例中那样在模板中操作字符串，有助于我们快速纠正可能存在的任何模板问题，并即时操纵它们。
- en: String slice functions
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串切片函数
- en: Being able to manipulate slices of strings is helpful, as we have seen in previous
    chapters. The Sprig library helps us perform some string slice manipulation actions.
    In our example, we'll split a string based on the `.` character.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 能够在模板中操作字符串切片是有帮助的，正如我们在之前的章节中所看到的。Sprig库帮助我们执行一些字符串切片操作。在我们的示例中，我们将根据`.`字符拆分字符串。
- en: 'First, we import the necessary libraries:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们导入必要的库：
- en: '[PRE23]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next, we split our templated string using the `.` delimiter:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`.`分隔符拆分我们的模板字符串：
- en: '[PRE24]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We also have the ability to sort a templated list into alphabetical order using
    the `sortAlpha` function, as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`sortAlpha`函数将模板化列表按字母顺序排序：
- en: '[PRE25]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: These string manipulations can help us organize lists of strings that are included
    in templated functions.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这些字符串操作可以帮助我们组织包含在模板化函数中的字符串列表。
- en: Default functions
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 默认函数
- en: 'Sprig''s default functions return default values for templated functions. We
    can check the default values for particular data structures and whether or not
    they are *empty*.  Empty is defined for each data type:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Sprig的默认函数为模板化函数返回默认值。我们可以检查特定数据结构的默认值以及它们是否为空。对于每种数据类型，都定义了*空*。
- en: '| Numeric | `0` |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| 数字 | `0` |'
- en: '| String | `""` (empty string) |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| 字符串 | `""`（空字符串）|'
- en: '| Lists | `[]` (empty list) |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| 列表 | `[]`（空列表）|'
- en: '| Dicts | `{}` (empty dict) |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| 字典 | `{}`（空字典）|'
- en: '| Boolean | `false` |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| 布尔值 | `false` |'
- en: '| And always | Nil (also referred to as null) |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| 并且总是 | 空（也称为空）|'
- en: '| Structs | No definition for empty; will never return the default |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| 结构 | 空的定义；永远不会返回默认值|'
- en: 'We start with our imports:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从导入开始：
- en: '[PRE26]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next, we set up our empty and non-empty template variables:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们设置我们的空和非空模板变量：
- en: '[PRE27]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Then, we validate our empty and non-empty templates:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们验证我们的空模板和非空模板：
- en: '[PRE28]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This is useful when we have template inputs where we need to verify the input
    is not empty. Our resulting output shows us what we expect: the empty template
    is marked as true, while the full template is marked as false:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有模板输入需要验证输入不为空时，这是非常有用的。我们的输出结果显示了我们的预期：空模板标记为true，而完整模板标记为false：
- en: '![](img/00f6e52b-3879-478f-a61d-e01425972e22.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00f6e52b-3879-478f-a61d-e01425972e22.png)'
- en: 'We can also encode JSON literals as JSON strings and pretty-print them. This
    is especially helpful if you are taking an HTML-created template that needs to
    return a JSON array to an end user:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将JSON文字编码为JSON字符串并进行漂亮打印。如果您正在处理需要向最终用户返回JSON数组的HTML创建的模板，这将特别有帮助。
- en: '[PRE29]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In our resulting output, we can see a pretty-printed JSON blob based on our
    `jsonDict` input:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的输出结果中，我们可以看到基于我们的`jsonDict`输入的漂亮打印的JSON块：
- en: '![](img/44223726-7492-4c51-8935-b7fa80b99d4d.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44223726-7492-4c51-8935-b7fa80b99d4d.png)'
- en: This is extremely useful when used with the HTML/template builtin and an added
    `content-encoding:json` HTTP header.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当与HTML/template内置和添加的`content-encoding:json`HTTP头一起使用时，这非常有用。
- en: The Sprig library has quite a few functionalities, some of which we will discuss
    within this section of the book.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Sprig库有相当多的功能，其中一些我们将在本书的本节中讨论。
- en: A full list of the functionality that's available via Sprig can be found at
    [http://masterminds.github.io/sprig/](http://masterminds.github.io/sprig/).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在[http://masterminds.github.io/sprig/](http://masterminds.github.io/sprig/)找到通过Sprig可用的功能的完整列表。
- en: Summary
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed generating Go code. We talked about how to do
    so for one of the most commonly generated pieces of go code, gRPC protobufs. Then,
    we talked about the using link toolchain to add command-line arguments and `spf13/cobra`
    and `spf13/viper` to create metaprogrammed CLI tooling.  Lastly, we talked about
    templated programming using the text/template, HTML/template, and Sprig libraries.
    Using all of these packages will help us make readable, reusable, performant Go
    code. These templates will also save us a lot of work in the long run as they
    tend to be reusable and scalable.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了生成Go代码。我们讨论了如何为Go代码中最常见的生成部分之一，gRPC protobufs，进行生成。然后，我们讨论了使用链接工具链添加命令行参数和`spf13/cobra`和`spf13/viper`来创建元编程CLI工具。最后，我们讨论了使用text/template、HTML/template和Sprig库进行模板化编程。使用所有这些包将帮助我们编写可读、可重用、高性能的Go代码。这些模板也将在长远来看为我们节省大量工作，因为它们往往是可重用和可扩展的。
- en: In the next chapter, we'll discuss how to optimize for memory resource management.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何优化内存资源管理。
