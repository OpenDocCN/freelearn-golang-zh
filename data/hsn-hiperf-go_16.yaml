- en: Tracing Go Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跟踪Go代码
- en: 'Tracing Go programs is a fantastic way to check the interoperability between
    functions and services within your Go program. Tracing allows you to pass context
    through your system and evaluate where you are being held up, whether it''s by
    a third-party API call, a slow messaging queue, or an *O*(*n*²) function. Tracing
    will help you to find where this bottleneck resides. In this chapter, we''re going
    to learn the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪Go程序是检查Go程序中函数和服务之间的互操作性的一种绝妙方式。跟踪允许您通过系统传递上下文，并评估您被阻止的位置，无论是由第三方API调用、缓慢的消息队列还是*O*(*n*²)函数。跟踪将帮助您找到这个瓶颈所在。在本章中，我们将学习以下内容：
- en: The process of implementing tracing
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施跟踪的过程
- en: The process of sampling with tracing
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用跟踪进行采样的过程
- en: The process of interpreting tracing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释跟踪的过程
- en: The process of comparing traces
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较跟踪的过程
- en: Being able to implement tracing and interpret the results will help developers
    to understand and troubleshoot their distributed systems.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 能够实施跟踪并解释结果将帮助开发人员理解和排除故障他们的分布式系统。
- en: Implementing tracing instrumentation
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施跟踪仪器
- en: 'Go''s concurrency model uses goroutines, and is very powerful. One of the drawbacks
    of having high concurrency is that you will experience difficulty when you attempt
    to debug that high-concurrency model. To avoid this difficulty, the language creators
    created `go tool trace`. They then distributed this in Go version 1.5 in order
    to be able to investigate and resolve concurrency issues. The Go tracing tool
    hooks into the goroutine scheduler so that it can produce meaningful information
    about goroutines. Some of the implementation details that you may want to investigate
    with Go tracing include the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Go的并发模型使用goroutines，非常强大。高并发的一个缺点是，当您尝试调试高并发模型时，您会遇到困难。为了避免这种困难，语言创建者创建了`go
    tool trace`。然后他们在Go版本1.5中分发了这个工具，以便能够调查和解决并发问题。Go跟踪工具钩入goroutine调度程序，以便能够提供有关goroutines的有意义信息。您可能希望使用Go跟踪调查的一些实现细节包括以下内容：
- en: Latency
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 延迟
- en: Contention of resources
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源争用
- en: Poor parallelism
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并行性差
- en: I/O-related events
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与I/O相关的事件
- en: Syscalls
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统调用
- en: Channels
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通道
- en: Locks
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锁
- en: '**Garbage Collection** (**GC**)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**垃圾收集** (**GC**)'
- en: Goroutines
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Goroutines
- en: Troubleshooting all of these issues will help you to build a more resilient
    distributed system. In the next section, we are going to discuss the tracing format
    and how it's applicable to Go code.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 解决所有这些问题将帮助您构建一个更具弹性的分布式系统。在下一节中，我们将讨论跟踪格式以及它如何适用于Go代码。
- en: Understanding the tracing format
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解跟踪格式
- en: 'Go traces can have lots of information and can capture a lot of requests per
    second. The traces are therefore captured in a binary format. The structure of
    the trace output is static. In the following output, we can see that the traces
    follow a specific pattern—they are defined, and events are categorized with a
    hex prefix and some information about the specific trace event. Looking at this
    trace format will help us to understand how the events of our traces are stored
    and retrieved with the tooling that the Go team has made available to us:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Go跟踪可以提供大量信息，并且可以捕获大量请求每秒。因此，跟踪以二进制格式捕获。跟踪输出的结构是静态的。在以下输出中，我们可以看到跟踪遵循特定的模式-它们被定义，并且事件被用十六进制前缀和有关特定跟踪事件的一些信息进行分类。查看这个跟踪格式将帮助我们理解我们的跟踪事件如何存储和如何使用Go团队为我们提供的工具检索：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: More information about the Go execution tracer can be found in the original
    specification document by Dmitry Vyukov, published at [https://docs.google.com/document/u/1/d/1FP5apqzBgr7ahCCgFO-yoVhk4YZrNIDNf9RybngBc14/pub](https://docs.google.com/document/u/1/d/1FP5apqzBgr7ahCCgFO-yoVhk4YZrNIDNf9RybngBc14/pub).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Go执行跟踪器的更多信息可以在Dmitry Vyukov发布的原始规范文档中找到[https://docs.google.com/document/u/1/d/1FP5apqzBgr7ahCCgFO-yoVhk4YZrNIDNf9RybngBc14/pub](https://docs.google.com/document/u/1/d/1FP5apqzBgr7ahCCgFO-yoVhk4YZrNIDNf9RybngBc14/pub)。
- en: Being able to see all these elements of a trace can help us to understand how
    to break traces down into atomic chunks. In the next section, we'll be discussing
    trace collection.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 能够看到跟踪的所有这些元素将帮助我们理解如何将跟踪分解为原子块。在下一节中，我们将讨论跟踪收集。
- en: Understanding trace collection
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解跟踪收集
- en: 'Being able to collect traces is integral to implementing tracing in your distributed
    system. If we don''t aggregate these traces somewhere, we won''t be able to make
    sense of them at scale. There are three methods with which we can collect trace
    data:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 能够收集跟踪是实施分布式系统中跟踪的重要部分。如果我们不在某个地方汇总这些跟踪，我们将无法在规模上理解它们。我们可以使用三种方法收集跟踪数据：
- en: Manually invoking the tracing of the data by calling `trace.Start` and `trace.Stop`
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过调用`trace.Start`和`trace.Stop`手动调用数据的跟踪
- en: Using the test flag `-trace=[OUTPUTFILE]`
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用测试标志`-trace=[OUTPUTFILE]`
- en: Instrumenting the `runtime/trace` package
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对`runtime/trace`包进行仪器化
- en: 'In order to understand how to implement tracing around your code, let''s take
    a look at a simple example program:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解如何在代码周围实施跟踪，让我们看一个简单的示例程序：
- en: 'We first instantiate our package and import the necessary packages:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先实例化我们的包并导入必要的包：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We then invoke our `main` function. We write the trace output to a file, `trace.out`,
    which we will use later:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们调用我们的`main`函数。我们将跟踪输出写入一个名为`trace.out`的文件，稍后我们将使用它：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, we implement the trace that we want to use in our program and we defer
    the end of the trace until the return of the function:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们实现我们想要在程序中使用的跟踪，并在函数返回时推迟跟踪的结束：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We then write the code that we want to implement. Our example here is just
    a simple pass of the string `"Hi Gophers"` across a channel in an anonymous function:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们编写我们想要实现的代码。我们这里的示例只是在匿名函数中通过通道简单地传递字符串`"Hi Gophers"`：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now that we have our trace implemented around our (admittedly simple) program,
    we need to execute our program to produce a trace output:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在我们的（诚然简单的）程序周围实施了跟踪，我们需要执行我们的程序以产生跟踪输出：
- en: '![](img/e1bc51c4-054c-4a88-9e51-22e14d29dcc6.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e1bc51c4-054c-4a88-9e51-22e14d29dcc6.png)'
- en: 'To view traces, you may need to install additional packages. For the Fedora
    system I''m testing on, I had to install an additional `golang-misc` package:
    `sudo dnf install golang-misc`.'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看跟踪，您可能需要安装额外的软件包。对于我正在测试的 Fedora 系统，我不得不安装额外的 `golang-misc` 软件包：`sudo dnf
    install golang-misc`。
- en: After you create a trace, you can open the trace that you created using the `go
    tool trace trace.out` command.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建跟踪后，您可以使用 `go tool trace trace.out` 命令打开您创建的跟踪。
- en: 'This makes it possible for you to start the HTTP server that will serve the
    trace output. We can see this output in the following screenshot:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这使您可以启动将提供跟踪输出的 HTTP 服务器。我们可以在下面的截图中看到这个输出：
- en: '![](img/b54e468f-f12c-4783-afa8-7158f541f7e1.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b54e468f-f12c-4783-afa8-7158f541f7e1.png)'
- en: 'We can see the resulting trace output in a Chrome browser. It''s important
    to mention that we need to use a compatible browser, namely Chrome. At the time
    of writing this book, Firefox will produce a blank page for a trace output. Here
    is the output of the trace in a Chrome browser:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 Chrome 浏览器中看到生成的跟踪输出。重要的是要提到，我们需要使用兼容的浏览器，即 Chrome。在撰写本书时，Firefox 会产生一个空白页面的跟踪输出。这是在
    Chrome 浏览器中的跟踪输出：
- en: '![](img/2cb0717a-8035-40ef-8f40-549a81db2ea7.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2cb0717a-8035-40ef-8f40-549a81db2ea7.png)'
- en: 'This HTML page gives you a bunch of different useful output choices. Let''s
    look at them one by one in the following table:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 HTML 页面为您提供了许多不同的有用输出选择。让我们逐个在下表中查看它们：
- en: '| **Link** | **Description** |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: 链接 | 描述
- en: '| View trace | View the GUI trace output. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 查看跟踪 | 查看 GUI 跟踪输出。'
- en: '| Goroutine analysis | Displays distinct goroutine information. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| Goroutine 分析 | 显示不同的 goroutine 信息。'
- en: '| Network blocking profile | Displays network blocking; can create a separate
    profile. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 网络阻塞概要 | 显示网络阻塞；可以创建单独的概要。'
- en: '| Synchronization blocking profile | Displays synchronization blocking; can
    create a separate profile. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 同步阻塞概要 | 显示同步阻塞；可以创建单独的概要。'
- en: '| Syscall blocking profile | Displays syscall blocking; can create a separate
    profile. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 系统调用阻塞概要 | 显示系统调用阻塞；可以创建单独的概要。'
- en: '| Scheduler latency profile | Shows all the latency associated with the scheduler;
    can create a separate profile. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 调度器延迟概要 | 显示与调度器相关的所有延迟；可以创建单独的概要。'
- en: '| User-defined tasks | Allows for the viewing of the task data type; used for
    tracing a user-defined, logical operation. This is called using the format `trace.NewTask()`.
    |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 用户定义的任务 | 允许查看任务数据类型；用于跟踪用户定义的逻辑操作。这是使用格式 `trace.NewTask()` 调用的。'
- en: '| User-defined regions | Allows for the viewing of the region data type; used
    for tracing a region of code. This is called using the format `trace.WithRegion()`.
    |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 用户定义的区域 | 允许查看区域数据类型；用于跟踪代码区域。这是使用格式 `trace.WithRegion()` 调用的。'
- en: '| Minimum mutator utilization | Creates a visual plot of where and when the
    garbage collector is stealing work from your program. This helps you know whether
    or not your production service is GC-bound. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 最小 mutator 利用率 | 创建一个可视化图表，显示垃圾收集器从程序中窃取工作的位置和时间。这有助于您了解您的生产服务是否受到 GC 的限制。'
- en: 'We can start by looking at the trace in our web browser:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以先在网页浏览器中查看跟踪：
- en: '![](img/edd1f3d9-8df0-4a17-bbe4-f0c54cd30120.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/edd1f3d9-8df0-4a17-bbe4-f0c54cd30120.png)'
- en: 'One of the first things we can do when we look at these traces is to look at
    the help menu, available in the question mark box in the top-right corner of the
    screen. This information menu gives us lots of descriptions of the tracing tool''s
    abilities:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看这些跟踪时，我们可以做的第一件事是查看帮助菜单，它位于屏幕右上角的问号框中。这个信息菜单为我们提供了有关跟踪工具能力的许多描述：
- en: '![](img/8172c4c6-9077-4281-a9a6-f7f0ad7a4991.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8172c4c6-9077-4281-a9a6-f7f0ad7a4991.png)'
- en: Being able to quickly and effectively move about in the tracing window will
    help you to look through the trace very quickly. This can be exceptionally helpful
    when you are trying to troubleshoot a production problem quickly.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 能够快速有效地在跟踪窗口中移动将帮助您快速查看跟踪。当您试图快速解决生产问题时，这可能非常有帮助。
- en: Movement in the tracing window
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跟踪窗口中的移动
- en: 'Using the classic *WASD* movement keys (inspired by lots of first-person role-playing
    video games), we can move around the trace. The movement keys are described as
    follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用经典的 *WASD* 移动键（受到许多第一人称角色扮演视频游戏的启发），我们可以在跟踪中移动。移动键的描述如下：
- en: The *W* key zooms into the trace's timing window.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下 *W* 键，可以放大跟踪的时间窗口。
- en: The *S* key zooms out.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下 *S* 键缩小。
- en: The *A* key goes backward in time.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下 *A* 键向后移动时间。
- en: The *D* key moves forward in time. We can also go backward and forward in time
    by clicking and dragging the mouse.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下 *D* 键向前移动时间。我们也可以通过点击和拖动鼠标向前和向后移动时间。
- en: 'Using the mouse pointer selector or clicking on the number keys allows us to
    manipulate timing information. The keypad changes are listed in the following
    bullet points:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用鼠标指针选择器或点击数字键可以操作时间信息。键盘更改列在以下项目符号中：
- en: The *1* key lets us select the part of the trace that we'd like to inspect
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下 *1* 键让我们选择要检查的跟踪部分
- en: The *2* key allows us to pan
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下 *2* 键可以平移
- en: The *3* key invokes the zoom functionality
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下 *3* 键调用放大功能
- en: The *4* key allows us to select a specific timing
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下 *4* 键可以选择特定的时间
- en: We can now use the */* key to search through the trace and the *Enter* key to
    step through the results.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用 */* 键搜索跟踪，使用 *Enter* 键浏览结果。
- en: We also have file-size stats, metrics, frame data, and input latency windows
    that are available on the right-hand side of the screen. When clicked, these buttons
    will open a popup that will tell you more details about each of these particular
    statistics within the trace.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有文件大小统计、指标、帧数据和右侧屏幕上可用的输入延迟窗口。单击这些按钮将打开一个弹出窗口，告诉您有关跟踪中每个特定统计信息的更多细节。
- en: 'If we click on the blue area in the goroutines row in the trace, we can take
    a look at some of the available stats we have for our goroutines:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在跟踪中的 goroutines 行中点击蓝色区域，我们可以查看一些我们的 goroutines 可用统计信息：
- en: The `GCWaiting`, which is the amount of garbage collection runs that are waiting
    (currently with a value of 0)
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GCWaiting`，即正在等待的垃圾收集运行数量（当前值为0）'
- en: The number of runnable goroutines (currently with a value of 1)
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前可运行的goroutines数量为1
- en: The number of running goroutines (currently with a value of 1)
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前正在运行的goroutines数量为1
- en: 'We can see a sampling of the available stats for our goroutines in the following
    screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下截图中看到我们的goroutines的可用统计信息：
- en: '![](img/f2a6c91a-b495-44e7-b78c-7bb9c4065b31.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f2a6c91a-b495-44e7-b78c-7bb9c4065b31.png)'
- en: The goroutine information can be helpful for the end user debugging the program.
    Watching goroutines in the Go trace tool can help us to determine when a goroutine
    is fighting for contention. It may be waiting on a channel to clear, it might
    be blocked by a syscall, or it might be blocked by the scheduler. If there are
    many goroutines in a waiting state, that means the program might be creating too
    many goroutines. This could cause the scheduler to be overallocated. Having access
    to all of this information can help us to make an informed decision on how to
    better write our program to utilize goroutines more effectively.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: goroutine信息对于最终用户调试程序可能有所帮助。在Go跟踪工具中观察goroutines可以帮助我们确定goroutine何时在争用。它可能正在等待通道清除，可能被系统调用阻塞，或者可能被调度程序阻塞。如果有许多goroutines处于等待状态，这意味着程序可能创建了太多的goroutines。这可能导致调度程序被过度分配。拥有所有这些信息可以帮助我们做出明智的决定，以更有效地编写程序来利用goroutines。
- en: 'Clicking on the orange bar in the Heap row will display the heap information:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 单击堆行中的橙色条将显示堆信息：
- en: '![](img/04865725-43d9-47f1-86f3-2b84abe7321a.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/04865725-43d9-47f1-86f3-2b84abe7321a.png)'
- en: At the time selected (0.137232), we can see that we have 425984 bytes, or approximately
    425 KB, allocated to the heap. Knowing the amount of memory currently allocated
    to the heap can tell us whether or not we have memory contention in our program.
    Profiling (as we learned in [Chapter 12](3ad3f76b-80c3-4992-8201-c025ece696b7.xhtml),
    *Profiling Go Code*) is usually a better methodology for looking at heap information,
    but having a general understanding of the allocation within the trace context
    can often be helpful.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在所选时间（0.137232）时，我们可以看到我们的堆分配了425984字节，或大约425 KB。了解当前分配给堆的内存量可以告诉我们我们的程序是否存在内存争用。剖析（正如我们在[第12章](3ad3f76b-80c3-4992-8201-c025ece696b7.xhtml)中学到的，*Go代码的剖析*）通常是查看堆信息的更好方法，但在跟踪上下文中对分配有一个一般的了解通常是有帮助的。
- en: 'We can look at the thread information next. Clicking on an active thread (the
    magenta block in the Threads row of the trace) will show you the number of threads in InSyscall
    and Running states:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们可以查看线程信息。单击跟踪中线程行中的活动线程（跟踪的Threads行中的洋红色块）将显示处于InSyscall和Running状态的线程数量：
- en: '![](img/4d9b9579-f430-4d23-a18c-31aa5a04a684.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4d9b9579-f430-4d23-a18c-31aa5a04a684.png)'
- en: It can be helpful to know the number of OS threads that are running and how
    many are currently being blocked by syscalls.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 了解正在运行的OS线程数量以及当前有多少个线程被系统调用阻塞可能会有所帮助。
- en: 'Next, we can take a look at each of the individual processes running. Clicking
    on the process will tell you all of the details that are shown in the following
    screenshot. If you hover over one of the events at the bottom pane of the trace,
    you will be able to see how the processes are tied together, denoted by the red
    arrow in the following screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以查看正在运行的每个单独进程。单击进程将显示以下截图中显示的所有详细信息。如果将鼠标悬停在跟踪底部窗格中的事件之一上，您将能够看到进程如何相互关联，如以下截图中的红色箭头所示：
- en: '![](img/f84eef16-2487-4c23-97a0-917f9475ce61.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f84eef16-2487-4c23-97a0-917f9475ce61.png)'
- en: Knowing the end-to-end flow of your processes can often help you diagnose problem
    processes. In the next section, we'll learn how to explore pprof-like traces.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 了解您的进程的端到端流程通常可以帮助您诊断问题进程。在下一节中，我们将学习如何探索类似pprof的跟踪。
- en: Exploring pprof-like traces
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索类似pprof的跟踪
- en: 'The Go tool trace can also generate four different types of traces that may
    be pertinent to your troubleshooting needs:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Go工具跟踪也可以生成四种不同类型的跟踪，这可能与您的故障排除需求相关：
- en: '`net`: A network-blocking profile'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`net`：一个网络阻塞配置文件'
- en: '`sync`: A synchronization-blocking profile'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sync`：一个同步阻塞的配置文件'
- en: '`syscall`: A syscall-blocking profile'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`syscall`：一个系统调用阻塞配置文件'
- en: '`sched`: A scheduler-latency profile'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sched`：一个调度器延迟配置文件'
- en: 'Let''s take a look at an example of how to use these tracing profiles on a
    web server:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在Web服务器上使用这些跟踪配置文件的示例：
- en: 'First, we initialize our `main` and import the necessary packages. Note the
    blank identifier for the explicit package name within `_ "net/http/pprof"`. This
    is used in order to make sure we can make the tracing call:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们初始化我们的`main`并导入必要的包。请注意，对于`_ "net/http/pprof"`中的显式包名称，使用了空白标识符。这是为了确保我们可以进行跟踪调用：
- en: '[PRE5]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We next set up a simple web server that waits five seconds and returns a string
    to the end user:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们设置一个简单的Web服务器，等待五秒钟并向最终用户返回一个字符串：
- en: '[PRE6]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After we run our server by executing `go run netTracePprof.go`, we can take
    a trace: `curl localhost:1234/debug/pprof/trace?seconds=10 > trace.out`. We can
    see the output of our `curl` in the following screenshot:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在执行`go run netTracePprof.go`后运行服务器后，我们可以进行跟踪：`curl localhost:1234/debug/pprof/trace?seconds=10
    > trace.out`。我们可以在以下截图中看到我们的`curl`的输出：
- en: '![](img/fee7866d-9776-4db5-87da-bbd466be6431.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fee7866d-9776-4db5-87da-bbd466be6431.png)'
- en: 'Concurrently, in another Terminal, we can make a request for the `/` path on
    our sample webserver: `curl localhost:1234/`. We will then be returned with a
    `trace.out` file in the directory in which we ran the trace. We can then open
    our trace using `go tool trace trace.out`. We will then see our tracing result.
    Utilizing the network-blocking profile in the resulting HTTP page, we can see
    a trace of the network-blocking profile:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时，在另一个终端中，我们可以对我们示例的Web服务器的`/`路径进行请求：`curl localhost:1234/`。然后我们将在运行跟踪的目录中返回一个`trace.out`文件。然后我们可以使用`go
    tool trace trace.out`打开我们的跟踪。然后我们将看到我们的跟踪结果。在生成的HTTP页面中利用网络阻塞配置文件，我们可以看到网络阻塞配置文件的跟踪：
- en: '![](img/57aa695e-104a-4342-b378-462014acf963.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57aa695e-104a-4342-b378-462014acf963.png)'
- en: 'As expected, we see a five-second wait, as this is the waiting timing that
    we added into our handler function for this particular web request. If we want
    to, we can download this profile and look at it in the upstream `pprof` tool that
    we discussed in [Chapter 12](3ad3f76b-80c3-4992-8201-c025ece696b7.xhtml), *Profiling
    Go Code*. In the trace HTML window, there''s a download button next to the web
    profile:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，我们看到了五秒的等待，因为这是我们为这个特定的web请求在处理程序函数中添加的等待时间。如果我们愿意，我们可以下载这个配置文件，并在我们在[第12章](3ad3f76b-80c3-4992-8201-c025ece696b7.xhtml)中讨论的上游`pprof`工具中查看它，*Go代码性能分析*。在跟踪HTML窗口中，有一个下载按钮，旁边是web配置文件：
- en: '![](img/7657e853-acb9-4f88-bcf3-f34514fd2bf7.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7657e853-acb9-4f88-bcf3-f34514fd2bf7.png)'
- en: 'After we have downloaded this profile, we can take a look at it using the upstream
    `pprof` tool we installed in [Chapter 12](3ad3f76b-80c3-4992-8201-c025ece696b7.xhtml), *Profiling
    Go Code*:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们下载了这个配置文件之后，我们可以使用我们在[第12章](3ad3f76b-80c3-4992-8201-c025ece696b7.xhtml)中安装的上游`pprof`工具来查看它，*Go代码性能分析*：
- en: '[PRE7]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can then look at things like the flame graph:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以看一下火焰图：
- en: '![](img/c94a6a96-e73e-40c0-9336-c38e26c70822.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c94a6a96-e73e-40c0-9336-c38e26c70822.png)'
- en: 'We can see the peek UI in the following screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下截图中看到peek UI：
- en: '![](img/598d77a6-10b2-4875-bd88-1b41b5549789.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/598d77a6-10b2-4875-bd88-1b41b5549789.png)'
- en: Both the flame graph and the peek UI help to make these complex debugging views
    a little bit more concise. In the next section, we shall see what distributed
    tracing in Go is.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 火焰图和peek UI都有助于使这些复杂的调试视图变得更加简洁。在下一节中，我们将看到Go中的分布式跟踪是什么。
- en: Go distributed tracing
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go分布式跟踪
- en: 'Implementing and investigating individual traces for Go programs can be a fruitful
    endeavor, giving a lot of output with respect to the data that results in requests
    to our programs. As enterprises have more and more distributed code bases with
    many more intricate calls that all interoperate with one another, tracing individual
    calls becomes untenable in the long run. There have been two projects that have
    tried to help with distributed tracing for Go, and these are the OpenCensus Go
    library and the OpenTelemetry library:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为Go程序实现和调查单个跟踪可能是一项富有成效的工作，可以提供大量关于导致我们程序请求的数据的输出。随着企业拥有越来越多的分布式代码库，以及更多相互操作的复杂调用，追踪单个调用在长期内变得不可行。有两个项目试图帮助Go进行分布式跟踪，它们分别是OpenCensus
    Go库和OpenTelemetry库：
- en: '`opencensus-go`: [https://github.com/census-instrumentation/opencensus-go](https://github.com/census-instrumentation/opencensus-go)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opencensus-go`: [https://github.com/census-instrumentation/opencensus-go](https://github.com/census-instrumentation/opencensus-go)'
- en: '`opentracing-go`: [https://github.com/opentracing/opentracing-go](https://github.com/opentracing/opentracing-go)'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opentracing-go`: [https://github.com/opentracing/opentracing-go](https://github.com/opentracing/opentracing-go)'
- en: The maintainers of these projects have decided to converge these two projects
    and begin working on one code base, named OpenTelemetry. This new code base will
    allow for a simplified integration of distributed tracing across many languages
    and infrastructures. You can read more about the Go implementation of OpenTelemetry
    at [https://github.com/open-telemetry/opentelemetry-go](https://github.com/open-telemetry/opentelemetry-go).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这些项目的维护者已决定将这两个项目合并，并开始在一个名为OpenTelemetry的代码库上进行工作。这个新的代码库将允许在许多语言和基础设施中简化集成分布式跟踪。您可以在[https://github.com/open-telemetry/opentelemetry-go](https://github.com/open-telemetry/opentelemetry-go)了解更多关于OpenTelemetry的Go实现。
- en: At the time of writing this book, OpenTelemetry is not yet ready for production
    use. OpenTelemetry will provide backward compatibility with both OpenCensus and
    OpenTracing, and will also provide security patches. In the next section of the
    book, we'll look at how we can implement Go programs with OpenCensus. In the future,
    implementing your program with OpenTelemetry should be relatively straightforward
    using the strategies that we are going to talk about when we look at implementing
    tracing with OpenCensus.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，OpenTelemetry尚未准备好供生产使用。OpenTelemetry将向后兼容OpenCensus和OpenTracing，并提供安全补丁。在本书的下一节中，我们将看看如何使用OpenCensus实现Go程序。将来，使用我们将要讨论的实现OpenCensus跟踪的策略，使用OpenTelemetry实现您的程序应该是相对简单的。
- en: In the following section, we will see how to implement OpenCensus for our application.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将看到如何为我们的应用程序实现OpenCensus。
- en: Implementing OpenCensus for your application
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为您的应用程序实现OpenCensus
- en: Let's use a practical example for OpenCensus tracing in an application. To get
    started, we need to make sure that we have Docker installed on our machine. You
    should be able to use the installation documents at [https://docs.docker.com/](https://docs.docker.com/)
    in order to be certain that Docker is installed and runs correctly on your machine.
    Once this is completed, we can get going with creating, implementing, and viewing
    a sample application. Once we have Docker installed, we can pull important images
    for our instrumentation. In our example, we will use Redis (a key–value store)
    to store key–value events in our application and Zipkin (a distributed tracing
    system) to view these traces.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个实际的例子来介绍在应用程序中使用OpenCensus跟踪。要开始，我们需要确保我们的机器上安装了Docker。您可以使用[https://docs.docker.com/](https://docs.docker.com/)上的安装文档来确保Docker已安装并在您的机器上正确运行。完成后，我们可以开始创建、实现和查看一个示例应用程序。安装了Docker后，我们可以拉取我们的仪器的重要镜像。在我们的示例中，我们将使用Redis（一个键值存储）来存储应用程序中的键值事件，并使用Zipkin（一个分布式跟踪系统）来查看这些跟踪。
- en: 'Let''s pull our dependencies for this project:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们拉取这个项目的依赖项：
- en: 'Redis, which is a key–value store that we are going to use in our sample application:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Redis是我们将在示例应用程序中使用的键值存储：
- en: '[PRE8]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Zipkin, which is a distributed trace system:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Zipkin是一个分布式跟踪系统：
- en: '[PRE9]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We will stand up our Redis server and let it run in the background:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将启动我们的Redis服务器，并让它在后台运行：
- en: '[PRE10]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We will do the same thing for our Zipkin server:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将为我们的Zipkin服务器做同样的事情：
- en: '[PRE11]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once we have all of our dependencies installed and ready, we can start writing
    our application:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们安装并准备好所有依赖项，我们就可以开始编写我们的应用程序：
- en: 'First, we''ll instantiate our `main` package and add our necessary imports:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将实例化我们的`main`包并添加必要的导入：
- en: '[PRE12]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Our `tracingServer` function defines a few things:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的`tracingServer`函数定义了一些内容：
- en: We set up a new Zipkin endpoint.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们设置了一个新的Zipkin端点。
- en: We initialize a new HTTP reporter, which is the endpoint to which we send spans.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们初始化一个新的HTTP报告器，这是我们发送跨度的端点。
- en: We set up a new exporter, which returns a `trace.Exporter` (this is how we upload
    spans to the Zipkin server).
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们设置了一个新的导出器，它返回一个`trace.Exporter`（这是我们将跨度上传到Zipkin服务器的方式）。
- en: We register our exporter to the tracing handlers.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将我们的导出器注册到跟踪处理程序。
- en: 'We apply a configuration for a sampling rate. In this example, we set up our
    example to always trace, but we could make this a smaller percentage of our requests:'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们应用了采样率的配置。在这个例子中，我们设置我们的示例始终跟踪，但我们可以将其设置为我们请求的较小百分比：
- en: '[PRE13]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In our `makeRequest` function, we do the following:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`makeRequest`函数中，我们执行以下操作：
- en: Create a new `span`
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的`span`
- en: Make a request to a given HTTP URL
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向给定的HTTP URL发出请求
- en: Set a sleep timeout to simulate additional latency
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置睡眠超时以模拟额外的延迟
- en: Annotate our span
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注释我们的跨度
- en: Return a response status
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回响应状态
- en: '[PRE14]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In our `writeToRedis` function, we do the following:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`writeToRedis`函数中，我们执行以下操作：
- en: Start a new span
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始一个新的跨度
- en: Connect to our local Redis server
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到我们的本地Redis服务器
- en: Set a specific key–value pair
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置特定的键值对
- en: '[PRE15]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We then bring this all together using our `main` function:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们使用我们的`main`函数将所有这些内容整合在一起：
- en: '[PRE16]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After we''ve invoked our program by executing `go run ocZipkin.go`, we can then take
    a look at our Zipkin server. If we select one of the traces that are in our trace
    list, we can see the traces that we''ve created:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们通过执行`go run ocZipkin.go`调用我们的程序之后，我们可以查看我们的Zipkin服务器。如果我们选择我们跟踪列表中的一个跟踪，我们可以看到我们创建的跟踪：
- en: '![](img/e4ba0a84-ea05-4651-a52d-9e2f91ffd6fd.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4ba0a84-ea05-4651-a52d-9e2f91ffd6fd.png)'
- en: 'If we click on one of the spans, we can investigate it further:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击一个跨度，我们可以进一步调查它：
- en: '![](img/7b3555a8-7122-4f24-a795-d81fb40a5499.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7b3555a8-7122-4f24-a795-d81fb40a5499.png)'
- en: We can see the calls to the `httprequest` and `rediswrite` functions that are
    in our code. As we start to implement more spans around our code, we will get
    larger and larger traces that will help us diagnose where our code has the most
    amount of latency.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们代码中的`httprequest`和`rediswrite`函数的调用。随着我们在代码周围实现更多的跨度，我们将获得越来越大的跟踪，这将帮助我们诊断代码的延迟最严重的地方。
- en: 'If we click on one of the individual elements in the trace, we can see the
    annotations that we wrote in our code:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击跟踪中的一个单独元素，我们可以看到我们在代码中编写的注释：
- en: '![](img/6310d60b-dd08-438f-9de5-66bd074a4783.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6310d60b-dd08-438f-9de5-66bd074a4783.png)'
- en: Annotations can be useful if we are trying to understand a particular behavior
    for an end user. We can also see the details of `traceId`, `spanId`, and `parentId`.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们试图理解特定用户行为，注释可能会很有用。我们还可以看到`traceId`、`spanId`和`parentId`的详细信息。
- en: Summary
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned all about traces. We learned how to implement individual
    traces on particular pieces of code and analyze them to understand their behavior.
    We also learned how to implement and analyze distributed traces to understand
    problems in our distributed system. Being able to use these skills will help you
    to debug distributed systems, and in turn, help to lower the **mean time-to-resolution** (**MTTR**)
    while troubleshooting distributed systems.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了有关跟踪的所有内容。我们学会了如何在特定代码片段上实现单独的跟踪并分析它们以了解它们的行为。我们还学会了如何实现和分析分布式跟踪以了解分布式系统中的问题。能够使用这些技能将帮助您调试分布式系统，并进而帮助降低**平均解决时间**（**MTTR**）。
- en: In [Chapter 14](74c0cef8-9628-4e31-abc3-9bd9aa52fafa.xhtml), *Clusters and Job
    Queues*, we'll learn how to evaluate clusters and job queues for performance optimizations.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第14章](74c0cef8-9628-4e31-abc3-9bd9aa52fafa.xhtml)中，*集群和作业队列*，我们将学习如何评估集群和作业队列以进行性能优化。
