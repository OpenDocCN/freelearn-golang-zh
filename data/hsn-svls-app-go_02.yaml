- en: Getting Started with AWS Lambda
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用AWS Lambda
- en: This chapter supplies guidelines for setting up an AWS environment alongside
    Go runtime and development environments. You'll be introduced to the powerful
    AWS CLI, which will make deploying serverless applications more efficient and
    increase your productivity immensely.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供了在Go运行时和开发环境中设置AWS环境的指南。您将了解强大的AWS CLI，它将使部署无服务器应用程序更加高效，并极大地提高您的生产力。
- en: In addition, you will be given a set of tips and recommendations on how to choose
    your Go **Integrated Development Environment** (**IDE**).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您将获得一组关于如何选择您的Go **集成开发环境**（**IDE**）的提示和建议。
- en: Technical requirements
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Before proceeding with the installation and configuration of the AWS and Go
    environments, it is recommended that you follow along with this chapter with on
    a laptop (Windows, Linux, or macOS X) with Python 2 version 2.6.5+ or Python 3
    version 3.3+ preinstalled and an AWS account set up so you can easily execute
    the given commands. The code bundle for this chapter is hosted on GitHub at [https://github.com/PacktPublishing/Hands-On-serverless-Applications-with-Go](https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续安装和配置AWS和Go环境之前，建议您在笔记本电脑（Windows、Linux或macOS X）上跟着本章进行操作，预先安装Python 2版本2.6.5+或Python
    3版本3.3+，并设置好AWS账户，以便您可以轻松执行给定的命令。本章的代码包托管在GitHub上，网址为[https://github.com/PacktPublishing/Hands-On-serverless-Applications-with-Go](https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go)。
- en: Setting up the AWS environment
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置AWS环境
- en: This section will walk you through how to install and configure the AWS command
    line. The CLI is a solid and mandatory tool and it will be covered in upcoming
    chapters; it will save us substantial time by automating the deployment and configuration
    of Lambda functions and other AWS services.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将指导您如何安装和配置AWS命令行。CLI是一个可靠且必不可少的工具，将在接下来的章节中介绍；它将通过自动化Lambda函数的部署和配置为我们节省大量时间。
- en: The AWS command line
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS命令行
- en: The AWS CLI is a powerful tool for managing your AWS services and resources
    from a terminal session. It was built on top of the AWS API, and hence everything
    that can be done through the AWS Management Console can be done with the CLI;
    this makes it a handy tool that can be used to automate and control your AWS infrastructure
    through scripts. Later chapters will provide information on the use of the CLI
    to manage Lambda functions and create other AWS services around Lambda.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CLI是一个强大的工具，可从终端会话中管理您的AWS服务和资源。它是建立在AWS API之上的，因此通过AWS管理控制台可以完成的所有操作都可以通过CLI完成；这使它成为一个方便的工具，可以用来通过脚本自动化和控制您的AWS基础架构。后面的章节将提供有关使用CLI管理Lambda函数和创建其他围绕Lambda的AWS服务的信息。
- en: Let's go through the installation process for the AWS CLI; you can find information
    on its configuration and testing in the *AWS Management Console* section.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下AWS CLI的安装过程；您可以在*AWS管理控制台*部分找到有关其配置和测试的信息。
- en: Installing the AWS CLI
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装AWS CLI
- en: 'To get started, open a new terminal session and then use the `pip` Python package
    manager to install the latest stable release of `awscli`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请打开一个新的终端会话，然后使用`pip` Python软件包管理器来安装`awscli`的最新稳定版本：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you have the CLI installed, it''s recommended you upgrade to the latest
    version for security purposes:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已安装CLI，则建议出于安全目的升级到最新版本：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Windows users can also use MSI Installer ([https://s3.amazonaws.com/aws-cli/AWSCLI64.msi](https://s3.amazonaws.com/aws-cli/AWSCLI64.msi)
    or [https://s3.amazonaws.com/aws-cli/AWSCLI32.msi](https://s3.amazonaws.com/aws-cli/AWSCLI32.msi)*)*,
    which doesn't require Python to be installed.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Windows用户也可以使用MSI安装程序([https://s3.amazonaws.com/aws-cli/AWSCLI64.msi](https://s3.amazonaws.com/aws-cli/AWSCLI64.msi)或[https://s3.amazonaws.com/aws-cli/AWSCLI32.msi](https://s3.amazonaws.com/aws-cli/AWSCLI32.msi)*)*，无需安装Python。
- en: 'Once installed, you need to add the AWS binary path to the `PATH` environment
    variable as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您需要将AWS二进制路径添加到`PATH`环境变量中，方法如下：
- en: For Windows, press the Windows key and type Environment Variables. In the Environment
    Variables window, highlight the `PATH` variable in the **System variables** section. Edit
    it and add a path by placing a semicolon right after the last path, enter the
    complete path to the folder where the CLI binary is installed.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Windows，按Windows键，然后键入环境变量。在环境变量窗口中，突出显示**系统变量**部分中的`PATH`变量。编辑它并通过在最后一个路径后面放置一个分号来添加路径，输入安装CLI二进制文件的文件夹的完整路径。
- en: 'For Linux, Mac, or any Unix system, open your shell''s profile script (`.bash_profile`,
    `.profile`, or `.bash_login`) and add the following line to the end of the file:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Linux、Mac或任何Unix系统，请打开您的shell配置文件（`.bash_profile`、`.profile`或`.bash_login`），并将以下行添加到文件的末尾：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, load the profile into your current session:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将配置文件加载到当前会话中：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Verify that the CLI is correctly installed by opening a new terminal session
    and typing the following command:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过打开一个新的终端会话并输入以下命令来验证CLI是否正确安装：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You should be able to see the AWS CLI version; in my case, 1.14.60 is installed:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够看到AWS CLI的版本；在我的情况下，安装了1.14.60版本：
- en: '![](img/ec6f5ad5-48fa-455f-8bd9-d3f3ecb385b0.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec6f5ad5-48fa-455f-8bd9-d3f3ecb385b0.png)'
- en: 'Let''s test it out and list Lambda functions in the Frankfurt region as an
    example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来测试一下，并以法兰克福地区的Lambda函数为例进行列出：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The previous command will display the following output:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令将显示以下输出：
- en: '![](img/a9f5051f-6af0-4e26-8073-ac6fc7e97ad1.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a9f5051f-6af0-4e26-8073-ac6fc7e97ad1.png)'
- en: 'When using the CLI, you''ll generally need your AWS credentials to authenticate
    with AWS services. There are multiple ways to configure AWS credentials:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用CLI时，通常需要您的AWS凭证来对AWS服务进行身份验证。有多种方法可以配置AWS凭证：
- en: '**Environment Credentials**: The `AWS_ACCESS_KEY_ID` and `AWS_SECRET_KEY` variables.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境凭证**：`AWS_ACCESS_KEY_ID`和`AWS_SECRET_KEY`变量。'
- en: '**The Shared Credentials file**: The `~/.aws/credentials` file.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共享凭证文件**：`~/.aws/credentials`文件。'
- en: '**IAM Roles**: If you''re using the CLI in an EC2 instance, these remove the
    need to manage credential files in production.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IAM角色**：如果您在EC2实例中使用CLI，则这些角色可以避免在生产中管理凭据文件的需要。'
- en: In the next section, I will show you how to create a new user for CLI with the
    **AWS Identity and Access Management** (**IAM**) service.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我将向您展示如何使用**AWS身份和访问管理**（**IAM**）服务为CLI创建新用户。
- en: AWS Management Console
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS管理控制台
- en: IAM is a service that allows you to manage users, groups, and their level of
    access to AWS services.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: IAM是一个允许您管理用户、组以及他们对AWS服务的访问级别的服务。
- en: 'It''s strongly recommended that you do not use the AWS root account for any
    task except billing tasks, as it has the ultimate authority to create and delete
    IAM users, change billing, close the account, and perform all other actions on
    your AWS account. Hence, we will create a new IAM user and grant it the permissions
    it needs to access the right AWS resources following the *Principle of least privilege*. In
    this case, the user will have full access to AWS Lambda services:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议您除了进行结算任务外，不要使用AWS根帐户执行任何任务，因为它具有创建和删除IAM用户、更改结算、关闭帐户以及在AWS帐户上执行所有其他操作的最终权限。因此，我们将创建一个新的IAM用户，并根据*最小权限原则*授予其访问正确AWS资源所需的权限。在这种情况下，用户将完全访问AWS
    Lambda服务：
- en: Sign into AWS Management Console ([https://console.aws.amazon.com/console/home](https://console.aws.amazon.com/console/home)) using
    your AWS email address and password.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的AWS电子邮件地址和密码登录AWS管理控制台（[https://console.aws.amazon.com/console/home](https://console.aws.amazon.com/console/home)）。
- en: 'Open the **IAM** console from the **Security, Identity & Compliance** section:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**安全、身份和合规性**部分打开**IAM**控制台：
- en: '![](img/0c79c822-802f-4e49-95c5-338317005bb3.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0c79c822-802f-4e49-95c5-338317005bb3.png)'
- en: 'From the navigation pane, choose Users and click on the Add user button, then
    set a name for the user and select Programmatic access (also select AWS Management
    Console access if you want the same user to have access to the console):'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从导航窗格中，选择用户，然后单击“添加用户”按钮，为用户设置名称，并选择编程访问（如果您希望同一用户访问控制台，则还要选择AWS管理控制台访问）：
- en: '![](img/8cb3470b-5390-4319-bb8e-6f9ed5b00332.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8cb3470b-5390-4319-bb8e-6f9ed5b00332.png)'
- en: 'In the Set permissions section, assign the AWSLambdaFullAccess policy to the
    user:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“设置权限”部分，将AWSLambdaFullAccess策略分配给用户：
- en: '![](img/a04d00d8-8f99-4eb3-ac17-5de986f12b32.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a04d00d8-8f99-4eb3-ac17-5de986f12b32.png)'
- en: 'On the final page, you should see the user''s AWS credentials:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在最后一页，您应该看到用户的AWS凭据：
- en: '![](img/767571a7-8d64-4bec-be8b-048f47b7922a.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/767571a7-8d64-4bec-be8b-048f47b7922a.png)'
- en: 'Make sure you save the access keys in a safe location as you won''t be able
    to see them again:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将访问密钥保存在安全位置，因为您将无法再次看到它们：
- en: '![](img/d6919348-6e5b-4968-a63d-09a3426d3e09.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d6919348-6e5b-4968-a63d-09a3426d3e09.png)'
- en: Configuration
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置
- en: 'Our IAM user has been created. Let''s provide the access key and secret key
    along with a default region. This can be done using the `aws configure` command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的IAM用户已创建。让我们使用`aws configure`命令提供访问密钥和秘密密钥以及默认区域：
- en: '![](img/8cd29640-c603-455c-803a-90d51132785c.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8cd29640-c603-455c-803a-90d51132785c.png)'
- en: 'The CLI will store credentials specified in the preceding command in a local
    file under `~/.aws/credentials` (or in `%UserProfile%\.aws/credentials` on Windows)
    with the following content:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: CLI将在本地文件`~/.aws/credentials`（或在Windows上的`%UserProfile%\.aws/credentials`）中存储在前述命令中指定的凭据，内容如下：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Testing
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试
- en: 'That should be it; try out the following command and, if you have any Lambda
    functions, you should be able to see them listed:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样；尝试以下命令，如果您有任何Lambda函数，您应该能够看到它们被列出：
- en: '![](img/fc8c86f5-0db3-4547-8da4-cbb7db791d1f.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fc8c86f5-0db3-4547-8da4-cbb7db791d1f.png)'
- en: 'The default output is JSON. You can change the output format for commands by
    adding the `--output` option (supported values: *json*, *table*, *text*). The
    following are the results shown in a table format:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 默认输出为JSON。您可以通过添加`--output`选项（支持的值：*json*、*table*、*text*）来更改命令的输出格式。以下是以表格格式显示的结果：
- en: '![](img/07bcdb7f-2e39-4fce-b308-c7bdd5de8aca.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/07bcdb7f-2e39-4fce-b308-c7bdd5de8aca.png)'
- en: 'Moreover, you can use the `--query` option to extract the output elements from
    this JSON document. For example, to output the function name attribute, the following
    command can be used:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以使用`--query`选项从此JSON文档中提取输出元素。例如，要输出函数名称属性，可以使用以下命令：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output should be similar to the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该类似于以下内容：
- en: '![](img/bacc9024-c0f8-4e4b-a722-0b2c670ee374.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bacc9024-c0f8-4e4b-a722-0b2c670ee374.png)'
- en: 'A tool such as `jq` can be used to manipulate JSON. It enables us to filter,
    map, count, and perform other advanced JSON processes against the JSON returned
    by the CLI:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`jq`这样的工具来操作JSON。它使我们能够针对CLI返回的JSON进行过滤、映射、计数和执行其他高级JSON处理：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The Console will display the following output:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台将显示以下输出：
- en: '![](img/65fd55d9-0655-478f-a6be-6e856aad12b7.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/65fd55d9-0655-478f-a6be-6e856aad12b7.png)'
- en: Setting up the Go environment
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Go环境
- en: This section will walk you through how to download and install Go on multiple
    platforms, how to build a simple Hello World application, and how to use an IDE
    to speed up your Go development. Along the way, you will become familiar with
    the Go commands that you will need to write Lambda functions in Go.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将指导您如何在多个平台上下载和安装Go，如何构建一个简单的Hello World应用程序，以及如何使用IDE加快Go开发速度。在此过程中，您将熟悉编写Go函数所需的Go命令。
- en: The runtime environment
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行时环境
- en: 'Download the appropriate package for your operating system and architecture
    from the Go download page ([https://golang.org/dl/](https://golang.org/dl/)):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 从Go下载页面（[https://golang.org/dl/](https://golang.org/dl/)）下载适合您操作系统和架构的适当软件包：
- en: '**For macOS X: **Download the `goVersion.darwin.amd64.pkg` file and follow
    the installation prompt. You may need to restart any open Terminal sessions for
    the change to take effect.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对于macOS X：**下载`goVersion.darwin.amd64.pkg`文件，并按照安装提示进行操作。您可能需要重新启动任何打开的终端会话以使更改生效。'
- en: '**For Windows**: Download the MSI installer and follow the wizard. The installer
    will set up environment variables for you.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对于Windows**：下载MSI安装程序并按照向导进行操作。安装程序将为您设置环境变量。'
- en: '**For Linux**:Open a new terminal session and type the following commands (at
    the time of writing, the current version is 1.10):'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对于Linux**：打开一个新的终端会话，并键入以下命令（在撰写本文时，当前版本为1.10）：'
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The previous commands will download the latest Go package using `curl`*.* Then,
    it will use `tar` to unpack the package. Next, add the `/usr/local/go/bin` to the
    `PATH` environment variable by adding the following line to your shell''s profile
    script:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将使用`curl`下载最新的Go包。然后，它将使用`tar`来解压该包。接下来，通过将以下行添加到您的shell的配置脚本中，将`/usr/local/go/bin`添加到`PATH`环境变量中：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If you install Go in a custom directory, rather than `/usr/local`, you must
    set the `GOROOT` environment variable to point to the directory in which it was
    installed:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将Go安装在自定义目录中，而不是`/usr/local`，您必须设置`GOROOT`环境变量，指向安装目录：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then you have to reload the user profile to apply the changes:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您需要重新加载用户配置文件以应用更改：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now that Go is properly installed and the paths are set for your machine, let''s
    test it out. Create a workspace on which we will build our serverless applications
    throughout the book:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Go已经正确安装，并且已经为您的计算机设置了路径，让我们来测试一下。创建一个工作区，我们将在整本书中构建我们的无服务器应用程序：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The Go source code lives in a workspace; by default, it should be `$HOME/go`.
    If you'd like to use a different directory, you will need to set the `GOPATH`
    environment variable.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Go源代码位于工作区中；默认情况下应该是`$HOME/go`。如果您想使用不同的目录，您需要设置`GOPATH`环境变量。
- en: 'To validate that the Go workspace is configured correctly,  you can run the
    `go env` command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证Go工作区是否正确配置，您可以运行`go env`命令：
- en: '![](img/e73dbc4f-41ce-49e3-acc5-37b55ef37028.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e73dbc4f-41ce-49e3-acc5-37b55ef37028.png)'
- en: 'If the `GOPATH` variable is set, you''re ready to go. Within the workspace,
    create a `main.go` file using `vim` with the following content:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置了`GOPATH`变量，您就可以开始了。在工作区内，使用`vim`创建一个`main.go`文件，内容如下：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Compile the file with the following command:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令编译文件：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The file will show `Welcome to 'Hands-On serverless Applications with Go'` if
    it runs successfully; this shows that Go is compiling files correctly.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功运行，文件将显示“欢迎来到'使用Go进行无服务器应用'”，这表明Go正在正确编译文件。
- en: 'Go is a compiled language, and hence you can generate a single binary for your
    application using the following command:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Go是一种编译语言，因此您可以使用以下命令为应用程序生成单个二进制文件：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If you want to build an executable for a specific OS and architecture, you
    can override the `GOOS` and `GOARCH` parameters:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想为特定的操作系统和架构构建可执行文件，可以覆盖`GOOS`和`GOARCH`参数：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Editing Go using the vim text editor is not optimal; therefore, in the next
    section, I will show you how to use VSCode as a Go editor to enhance your development
    productivity/experience.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用vim文本编辑器编辑Go并不是最佳选择；因此，在下一节中，我将向您展示如何使用VSCode作为Go编辑器，以增强您的开发生产力/体验。
- en: The development environment
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发环境
- en: Having an IDE can increase your development velocity and save a lot of time,
    which could be spent debugging and searching for the correct syntax. Plus, you
    can navigate and search your Lambda function code with ease.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一个IDE可以提高您的开发速度，并节省大量时间，这些时间可以用于调试和搜索正确的语法。此外，您可以轻松导航和搜索Lambda函数代码。
- en: 'But which one should we use? There are many solutions out there; these solutions
    can be divided into three main categories:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们应该使用哪一个呢？有许多解决方案；这些解决方案可以分为三个主要类别：
- en: '**IDEs**: GoLand, Eclipse, Komodo'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IDE**：GoLand，Eclipse，Komodo'
- en: '**Editors**: Atom, VSCode, Sublime Text'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编辑器**：Atom，VSCode，Sublime Text'
- en: '**Cloud-based IDEs**: Cloud9, Codeanywhere, CodeEnvy'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于云的IDE**：Cloud9，Codeanywhere，CodeEnvy'
- en: The Go ecosystem provides a variety of editors and IDEs; ensure you play around
    with them to find the one that suits you best.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Go生态系统提供了各种编辑器和IDE；确保您尝试它们，找到最适合您的那个。
- en: 'I opted to go with Visual Studio Code (VS Code) as it meets all my criteria:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择了Visual Studio Code（VS Code），因为它符合我的所有标准：
- en: Open Source
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开源
- en: Supports multiple languages
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持多种语言
- en: Plugin-driven tool
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件驱动工具
- en: Great community and support
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强大的社区和支持
- en: VSCode has strong support for Go development, including syntax-highlighting
    out of the box, built-in GIT integration, integration of all Go tools, and the
    Delve Debugger.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: VSCode对Go开发有很好的支持，包括开箱即用的语法高亮显示，内置的GIT集成，所有Go工具的集成以及Delve调试器。
- en: 'In addition to the native support of Go, the open source community has built
    some useful and powerful plugins that you can install from VSCode Marketplace:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 除了对Go的本机支持外，开源社区还构建了一些有用和强大的插件，您可以从VSCode Marketplace安装：
- en: '![](img/fb1dfa15-617b-41cc-abb5-404d208f4fce.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb1dfa15-617b-41cc-abb5-404d208f4fce.png)'
- en: 'VSCode is also cross-platform, and hence you can use it with Mac, Linux, or
    Windows. With Visual Studio Code, you can extend functionalities with the array
    of available plugins that come with so many powerful and robust additions, such
    as the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: VSCode也是跨平台的，因此您可以在Mac、Linux或Windows上使用它。使用Visual Studio Code，您可以通过一系列可用的插件扩展功能，这些插件带来了许多强大和稳健的功能，例如以下内容：
- en: '**Autocompletion**:As you type in a Go file, you can see IntelliSense providing
    you with suggested completions:'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动完成**：在编写Go文件时，您可以看到IntelliSense提供了建议的完成：'
- en: '![](img/0bbd3ee9-32bc-44e2-bda7-87c539cb1e96.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0bbd3ee9-32bc-44e2-bda7-87c539cb1e96.png)'
- en: '**Signature help**: Hovering on any variable, function, or struct will give
    you information on that item, such as documentation, signature, expected input,
    and output parameters. For example, the following screenshot shows the information
    on `Println`, which was acquired from hovering on the `main.go` file:'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**签名帮助**：悬停在任何变量、函数或结构上都会给出有关该项的信息，例如文档、签名、预期输入和输出参数。例如，以下屏幕截图显示了有关`Println`的信息，该信息是从悬停在`main.go`文件上获得的：'
- en: '![](img/ab28ea9a-b336-4d88-b0a9-76e02fa4ffc7.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab28ea9a-b336-4d88-b0a9-76e02fa4ffc7.png)'
- en: '**Code formatting:** It automatically formats your Go source code on save,
    using the **gofmt** tool so your code becomes easier to write, read, and maintain.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码格式化**：它会在保存时自动格式化您的Go源代码，使用**gofmt**工具，使您的代码更易于编写、阅读和维护。'
- en: '**Integrated debugger: **You can set breakpoints and conditional breakpoints,
    and view the stack trace and local and global variables in each frame.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成调试器**：您可以设置断点和条件断点，并查看每个帧中的堆栈跟踪和本地和全局变量。'
- en: '**Auto-import Go packages**: It automatically imports required Go packages
    on save.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动导入Go包**：它会在保存时自动导入所需的Go包。'
- en: '**Test runner**: It lets you run, stop, and restart unit tests as well as integration
    tests.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试运行器**：它允许您运行、停止和重新启动单元测试以及集成测试。'
- en: 'I''m looking forward to the stable release of GoLand by JetBrains: it looks
    like a very promising Go IDE and I''m excited to see where it goes.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我期待着JetBrains发布的GoLand的稳定版本：它看起来是一个非常有前途的Go IDE，我很期待它的发展。
- en: And that's all it takes! You're ready to start building and deploying serverless
    applications in Go.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！您已经准备好开始在Go中构建和部署无服务器应用程序。
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to install, configure, and use the AWS CLI.
    This tool will be very helpful when it comes to managing AWS services and automating
    the deployment of Lambda functions. Then, we covered how to create a user and
    generate AWS credentials from IAM with the least amount of privilege necessary.
    That way, if your access keys end up in the wrong hands, there is a limited capability
    to do harm. Also, we learned how to set up the Go environment, with a step-by-step
    installation of Go for multiple platforms (Windows, macOS X, and Linux) and compiled
    our first Hello World application in Go. Along the way, we covered the most important
    commands in Go, which will help you follow later chapters with ease.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何安装、配置和使用AWS CLI。当涉及管理AWS服务和自动部署Lambda函数时，这个工具将非常有帮助。然后，我们介绍了如何创建用户并从IAM生成AWS凭据，以获取最少必要的权限。这样，如果您的访问密钥落入错误的手中，造成的危害将是有限的。此外，我们学习了如何设置Go环境，逐步在多个平台（Windows、macOS
    X和Linux）上安装Go，并编译了我们的第一个Go中的Hello World应用程序。在此过程中，我们介绍了Go中最重要的命令，这将帮助您轻松地跟随后面的章节。
- en: In the next chapter, we will finally get our hands dirty and write our first
    Lambda function in Go.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将终于动手编写我们的第一个Go中的Lambda函数。
- en: Questions
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which format is not supported by the AWS CLI?
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS CLI不支持哪种格式？
- en: JSON
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON
- en: Table
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表
- en: XML
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XML
- en: Text
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本
- en: Is it recommended to use the AWS root account for everyday interaction with
    AWS? If yes, why?
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是否建议使用AWS根帐户进行日常与AWS的交互？如果是，为什么？
- en: What environment variables do you need to set to use the AWS CLI?
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要设置哪些环境变量才能使用AWS CLI？
- en: How do you use the AWS CLI with named profiles?
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用带有命名配置文件的AWS CLI？
- en: Explain the GOPATH environment variable.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解释GOPATH环境变量。
- en: Which command-line command compiles a program in Go?
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个命令行命令编译Go程序？
- en: '`go build`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`go build`'
- en: '`go run`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`go run`'
- en: '`go fmt`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`go fmt`'
- en: '`go doc`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`go doc`'
- en: What's the Go workspace?
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是Go工作区？
