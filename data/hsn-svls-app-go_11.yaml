- en: Monitoring and Troubleshooting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控和故障排除
- en: Lambda monitoring is different from traditional application monitoring, due
    to the fact that you're not managing the underlying infrastructure on which your
    code is running. Thus, there is no access to OS metrics. However, you still need
    function-level monitoring to optimize your function performance and debug in case
    of failure. In this chapter, you will learn how to achieve that and also how to
    debug and troubleshoot serverless applications in AWS. You will learn to set up
    alarms based on metric thresholds in CloudWatch to be notified of potential issues.
    You will also look at how to use AWS X-Ray to profile the application to detect
    abnormal behavior.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda监控与传统应用程序监控不同，因为您不管理代码运行的基础基础设施。因此，无法访问OS指标。但是，您仍然需要函数级别的监控来优化函数性能，并在发生故障时进行调试。在本章中，您将学习如何实现这一点，以及如何在AWS中调试和故障排除无服务器应用程序。您将学习如何基于CloudWatch中的指标阈值设置警报，以便在可能出现问题时收到通知。您还将了解如何使用AWS
    X-Ray对应用程序进行分析，以检测异常行为。
- en: Monitoring and debugging with AWS CloudWatch
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AWS CloudWatch进行监控和调试
- en: AWS CloudWatch is the easiest and most reliable solution to monitor AWS services,
    including Lambda functions. It's a centralized monitoring service to gather metrics
    and logs, and also creates alarms based on them. AWS Lambda automatically monitors
    Lambda functions on your behalf, reporting metrics through CloudWatch.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CloudWatch是监控AWS服务的最简单和最可靠的解决方案，包括Lambda函数。它是一个集中的监控服务，用于收集指标和日志，并根据它们创建警报。AWS
    Lambda会自动代表您监视Lambda函数，并通过CloudWatch报告指标。
- en: CloudWatch metrics
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CloudWatch指标
- en: 'By default, each time you invoke your function through the Lambda console,
    it reports the key information about the function resource usage, execution duration,
    and how much time is billed:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，每次通过Lambda控制台调用函数时，它都会报告有关函数资源使用情况、执行持续时间以及计费时间的关键信息：
- en: '![](img/6531421d-cf8f-4b9c-9e47-5909459dc47a.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6531421d-cf8f-4b9c-9e47-5909459dc47a.png)'
- en: 'A quick real-time insight can be found by clicking on the Monitoring tab. This
    page will show a graphical representation of multiple CloudWatch metrics. You
    can control the observable time period in the top-right corner of the graph area:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“监控”选项卡可以快速实时了解情况。此页面将显示多个CloudWatch指标的图形表示。您可以在图形区域的右上角控制可观察时间段：
- en: '![](img/9c882ed5-6d46-4f98-abb9-551c134e0826.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9c882ed5-6d46-4f98-abb9-551c134e0826.png)'
- en: 'These metrics include:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这些指标包括：
- en: Number of times the function has been invoked
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数被调用的次数
- en: Execution time in milliseconds
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行时间（毫秒）
- en: Error rates, and throttle count due to concurrency reservation and unprocessed
    events (dead letter errors)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误率和由于并发预留和未处理事件（死信错误）而导致的节流计数
- en: A list of all the available metrics in CloudWatch for AWS Lambda can be found
    at [https://docs.aws.amazon.com/lambda/latest/dg/monitoring-functions-metrics.html](https://docs.aws.amazon.com/lambda/latest/dg/monitoring-functions-metrics.html).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在CloudWatch中为AWS Lambda提供的所有可用指标列表可以在[https://docs.aws.amazon.com/lambda/latest/dg/monitoring-functions-metrics.html](https://docs.aws.amazon.com/lambda/latest/dg/monitoring-functions-metrics.html)找到。
- en: 'For each metric, you can also click on View in metrics to view the CloudWatch
    metric directly:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个指标，您还可以单击“在指标中查看”直接查看CloudWatch指标：
- en: '![](img/784ccac2-06a9-4ba2-9b6d-c9f37c061ee8.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/784ccac2-06a9-4ba2-9b6d-c9f37c061ee8.png)'
- en: The preceding graph represents the number of invocations of the `production`
    and `staging` aliases of the `FindAllMovies` function in the last 15 minutes.
    You can take this further and create your own custom graphs. This allows you to
    construct a custom dashboard for your Lambda functions. It will outline the load
    (any problems you might face), the cost, and other important metrics.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图表表示在过去15分钟内“production”和“staging”别名的“FindAllMovies”函数的调用次数。您可以进一步创建自定义图表。这使您可以为Lambda函数构建自定义仪表板。它将概述负载（您可能会遇到的任何问题）、成本和其他重要指标。
- en: 'Moreover, you can also create your own custom metrics and publish them to CloudWatch
    using the CloudWatch Golang SDK. The following code snippet is of a Lambda function
    that uses the CloudWatch SDK to publish a custom metric. The metric represents
    the number of `Action` movies inserted into DynamoDB (some parts were omitted
    for brevity):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以使用CloudWatch Golang SDK创建自定义指标并将其发布到CloudWatch。以下代码片段是使用CloudWatch SDK发布自定义指标的Lambda函数。该指标表示插入到DynamoDB中的“Action”电影的数量（为简洁起见，某些部分被省略）：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The metric is uniquely defined by a name, a namespace, a list of dimensions
    (name-value pair), a value, and a unit of measure. After you have published some
    values to CloudWatch, you can use the CloudWatch console to view statistical graphs:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 该指标由名称、命名空间、维度列表（名称-值对）、值和度量单位唯一定义。在您向CloudWatch发布了一些值之后，您可以使用CloudWatch控制台查看统计图表：
- en: '![](img/3c2095f7-f42f-4b20-bc76-e75a943caa13.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c2095f7-f42f-4b20-bc76-e75a943caa13.png)'
- en: Now we know how to monitor our Lambda functions using out-of-the-box metrics
    provided by AWS and insert custom metrics into CloudWatch to enrich their observability.
    Let's look at how to create an alarm based on those metrics to alert us in real
    time if something goes wrong in our Lambda functions.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何使用AWS提供的现成指标监视我们的Lambda函数，并将自定义指标插入到CloudWatch中以丰富它们的可观察性。让我们看看如何基于这些指标创建警报，以便在Lambda函数出现问题时实时通知我们。
- en: CloudWatch alarms
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CloudWatch警报
- en: 'CloudWatch allows you to create alerts-based on the available metrics when
    unexpected behavior occurs. In the following example, we will create an alarm
    based on the error rate of the `FindAllMovies` function:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: CloudWatch允许您在发生意外行为时基于可用指标创建警报。在以下示例中，我们将基于“FindAllMovies”函数的错误率创建警报：
- en: '![](img/3fa0ab95-2e59-4eff-8d54-f6ac34dacb3c.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3fa0ab95-2e59-4eff-8d54-f6ac34dacb3c.png)'
- en: 'In order to achieve that, click on the ring bell icon from the Actions column.
    Then, fill in the following fields to set up an alarm that will be triggered if
    the number of errors is more than `10` within five minutes. Once the alarm is
    triggered, an email will be sent using **Simple Notification Service** (**SNS**):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，请点击“操作”列中的铃铛图标。然后，填写以下字段以设置一个警报，如果在五分钟内错误数量超过`10`，则会触发警报。一旦触发警报，将使用**简单通知服务**（**SNS**）发送电子邮件：
- en: '![](img/ba1efb6b-99c5-4ad2-9481-b9bb7cbb3916.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba1efb6b-99c5-4ad2-9481-b9bb7cbb3916.png)'
- en: CloudWatch will send a notification through an SNS topic, and you can create
    as many SNS topic subscriptions as needed to deliver the notifications to where
    you want (SMS, HTTP, email).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: CloudWatch将通过SNS主题发送通知，您可以创建尽可能多的SNS主题订阅，以便将通知传递到您想要的位置（短信、HTTP、电子邮件）。
- en: 'Click on the Create Alarm button; you should receive an email to confirm the
    subscription. You must confirm the subscription before notifications can be sent:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“创建警报”按钮；您应该收到一封确认订阅的电子邮件。您必须在通知发送之前确认订阅：
- en: '![](img/a4543244-f971-4e83-97be-1fca4344f1f8.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a4543244-f971-4e83-97be-1fca4344f1f8.png)'
- en: 'Once confirmed, every time the error rate of the Lambda function crosses the
    defined threshold, the alert will change its state from OK to ALARM:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确认，每当Lambda函数的错误率超过定义的阈值时，警报将从“正常”状态更改为“警报”状态：
- en: '![](img/ff1b8461-b283-472d-8eaa-f53e598639cb.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ff1b8461-b283-472d-8eaa-f53e598639cb.png)'
- en: 'After this, an email will be sent to you in response to the event:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，将会向您发送一封电子邮件作为事件的响应：
- en: '![](img/6e702fd1-dbdf-4e02-a048-7073d732e443.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e702fd1-dbdf-4e02-a048-7073d732e443.png)'
- en: You can simulate an alarm by changing its state temporarily with this AWS CLI
    command:  `aws cloudwatch set-alarm-state --alarm-name ALARM_NAME --state-value
    ALARM --state-reason demo`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用此AWS CLI命令临时更改其状态来模拟警报：`aws cloudwatch set-alarm-state --alarm-name ALARM_NAME
    --state-value ALARM --state-reason demo`。
- en: CloudWatch logs
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CloudWatch日志
- en: 'While working with AWS Lambda, you might face the following errors when your
    function is being invoked:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用AWS Lambda时，当函数被调用时，您可能会遇到以下错误：
- en: Application error
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序错误
- en: Permissions denied
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 权限被拒绝
- en: Timeout exceeded
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超时
- en: Memory exceeded
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存超限
- en: Aside from the first use case, the rest can be fixed easily, by granting the
    right IAM policies and increasing the Lambda function's timeout or memory usage.
    However, the first error requires more debugging and troubleshooting, which requires
    adding logging statements into your code to validate that your code is working
    as expected. Fortunately, each time the Lambda function's code is executed in
    response to an event, it writes a log entry into the CloudWatch log group associated
    with a Lambda function, which is `/aws/lambda/FUNCTION_NAME`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 除了第一个用例外，其余的都可以通过授予正确的IAM策略并增加Lambda函数的超时或内存使用量来轻松解决。然而，第一个错误需要更多的调试和故障排除，这需要在代码中添加日志记录语句来验证您的代码是否按预期工作。幸运的是，每当Lambda函数的代码响应事件执行时，它都会将日志条目写入与Lambda函数关联的CloudWatch日志组，即`/aws/lambda/FUNCTION_NAME`。
- en: 'Your Lambda function should be granted the following permissions to achieve
    that:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，您的Lambda函数应被授予以下权限：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'That being said, you might use Go''s built-in logging library, called the `log` package.
    The following is an example of how to use the `log` package:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，您可以使用Go的内置日志记录库，称为`log`包。以下是如何使用`log`包的示例：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The code is self-explanatory, it performs a reverse operation on a given string.
    I have added logging statements around various parts of the code using the `log.Println`
    method.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 代码是不言自明的，它对给定字符串执行了一个反向操作。我已经使用`log.Println`方法在代码的各个部分周围添加了日志记录语句。
- en: 'You can then deploy the function to AWS Lambda, and invoke it either from the
    AWS console or with the `invoke` command. Lambda automatically integrates with
    Amazon CloudWatch logs and pushes all logs from your code to a CloudWatch logs,
    group associated with a Lambda function:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以将函数部署到AWS Lambda，并从AWS控制台或使用`invoke`命令调用它。Lambda会自动集成到Amazon CloudWatch日志，并将代码中的所有日志推送到与Lambda函数关联的CloudWatch日志组：
- en: '![](img/e45bccab-f93d-4661-91d6-6c7fc2c0f4aa.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e45bccab-f93d-4661-91d6-6c7fc2c0f4aa.png)'
- en: So far, we've learned how to troubleshoot and analyze each invocation with log
    and runtime data. In the upcoming section, we will cover how to track all upstream
    and downstream calls to external services in the Lambda function's code to troubleshoot
    errors quickly and easily. To track all these calls, using AWS X-Ray, we will
    add code instrumentation in different code segments where the actual work is performed.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学会了如何通过日志和运行时数据来排除故障和分析每次调用。在接下来的部分中，我们将介绍如何在Lambda函数的代码中跟踪所有上游和下游对外部服务的调用，以便快速轻松地排除错误。为了跟踪所有这些调用，我们将在实际工作执行的不同代码段中使用AWS
    X-Ray添加代码仪器。
- en: There are many third-party tools you might use to monitor serverless applications,
    which rely on CloudWatch. Therefore, they are failing too on the real-time issue.
    We expect this to be resolved in the future as AWS is launching new services and features at
    a rapid pace.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多第三方工具可用于监视无服务器应用程序，这些工具依赖于CloudWatch。因此，它们在实时问题上也会失败。我们期望这在未来会得到解决，因为AWS正在以快速的速度推出新的服务和功能。
- en: Tracing with AWS X-Ray
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AWS X-Ray进行跟踪
- en: AWS X-Ray is an AWS-managed service that allows you to track incoming and outgoing
    requests that your Lambda functions are issuing. It collects that information
    in segments and uses metadata to record additional data to help you debug, analyze,
    and optimize your function.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: AWS X-Ray是AWS管理的服务，允许您跟踪Lambda函数发出的传入和传出请求。它将这些信息收集在段中，并使用元数据记录附加数据，以帮助您调试、分析和优化函数。
- en: Overall, X-Ray can help you identify performance bottlenecks. However, it might
    require additional network calls that need to be made during the function's execution,
    adding to user-facing latency.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，X-Ray可以帮助您识别性能瓶颈。然而，它可能需要在函数执行期间进行额外的网络调用，增加用户面对的延迟。
- en: 'To get started, enable active tracing from the Lambda function''s configuration
    page:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请从Lambda函数的配置页面启用主动跟踪：
- en: '![](img/d72406c2-c9cc-4434-9820-7652783e87b9.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d72406c2-c9cc-4434-9820-7652783e87b9.png)'
- en: 'The following IAM policy is required to make the Lambda function publish the
    trace segments to X-Ray:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要求以下IAM策略以使Lambda函数发布跟踪段到X-Ray：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, navigate to AWS X-Ray console, click on Traces, invoke the Lambda function
    a few times, and refresh the page. New rows will be added to the trace list. For
    each trace, you will be given the code response and execution time:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，转到AWS X-Ray控制台，单击“跟踪”，多次调用Lambda函数，并刷新页面。将在跟踪列表中添加新行。对于每个跟踪，您将获得代码响应和执行时间：
- en: '![](img/3e546688-f17e-4664-9dfe-e7ffc11bd21e.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3e546688-f17e-4664-9dfe-e7ffc11bd21e.png)'
- en: 'Here is a trace of the `FindAllMovies` function; it includes the time it takes
    for Lambda to initialize the function:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`FindAllMovies`函数的跟踪；它包括Lambda初始化函数所需的时间：
- en: '![](img/bc9e0fc6-0e35-41f4-9db1-d5b24fbe4321.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bc9e0fc6-0e35-41f4-9db1-d5b24fbe4321.png)'
- en: 'You can also visualize this information in graph format, by clicking on the
    Service map item:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过单击“服务映射”项以图形格式可视化此信息：
- en: '![](img/ba0d574c-367a-4d44-a658-581e21d2b37f.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba0d574c-367a-4d44-a658-581e21d2b37f.png)'
- en: 'For each traced invocation, Lambda will emit the Lambda service segment and
    all of its subsegments. In addition, Lambda will emit the Lambda function segment
    and the init subsegment. These segments will be emitted regardless of the function''s
    runtime, and without any code changes or additional libraries required. If you
    want your Lambda function''s X-Ray traces to include custom segments, annotations,
    or subsegments for downstream calls, you might need to install the following X-Ray
    Golang SDK:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个被跟踪的调用，Lambda将发出Lambda服务段和其所有子段。此外，Lambda将发出Lambda函数段和init子段。这些段将被发出，而无需对函数的运行时进行任何更改或需要任何其他库。如果要使Lambda函数的X-Ray跟踪包括用于下游调用的自定义段、注释或子段，可能需要安装以下X-Ray
    Golang SDK：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Update the `FindAllMovies` function''s code to configure X-Ray using the `Configure`
    method:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`FindAllMovies`函数的代码以使用`Configure`方法配置X-Ray：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We will track the call to DynamoDB in a subsegment by wrapping the DynamoDB
    client with the `xray.AWS` call, as shown in the following code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过使用`xray.AWS`调用包装DynamoDB客户端来在子段中跟踪对DynamoDB的调用，如下面的代码所示：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once again, invoke the Lambda function on the X-Ray `Traces` page; a new subsegment
    will be added with the time it spent scanning the `movies` table:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 再次在X-Ray“跟踪”页面上调用Lambda函数；将添加一个新的子段，显示它扫描`movies`表所花费的时间：
- en: '![](img/79e37175-591c-4532-aeec-81479af31884.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/79e37175-591c-4532-aeec-81479af31884.png)'
- en: 'The DynamoDB call will also appear as a downstream node on the service map
    in the X-Ray console:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: DynamoDB调用还将显示为X-Ray控制台中服务映射上的下游节点：
- en: '![](img/b52caee3-57e6-4cb0-a121-bc4e416fcada.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b52caee3-57e6-4cb0-a121-bc4e416fcada.png)'
- en: 'Now that we are familiar how X-Ray works, let''s create something complex.
    Consider a simple Lambda function, which takes the URL of a movie poster page as
    input. It parses the HTML page, scraps the data, and saves it to a DynamoDB table.
    This function will do a `GET` method on the given URL:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经熟悉了X-Ray的工作原理，让我们创建一些复杂的东西。考虑一个简单的Lambda函数，它以电影海报页面的URL作为输入。它解析HTML页面，提取数据，并将其保存到DynamoDB表中。此函数将在给定URL上执行`GET`方法：
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, it uses the `goquery` library (**JQuery** Go-based implementation) to
    scrap the data from the HTML page, using CSS selectors:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它使用`goquery`库（**JQuery** Go的实现）从HTML页面中提取数据，使用CSS选择器：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once the movie object is created, it uses the `PutItem` method to save the
    movie to a DynamoDB table:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 创建电影对象后，它使用`PutItem`方法将电影保存到DynamoDB表：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now that our function handler is defined, deploy it to AWS Lambda, and test
    it out by giving it a URL as an input parameter. As a result, the movie information
    will be displayed in a JSON format:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的函数处理程序已定义，将其部署到AWS Lambda，并通过将URL作为输入参数进行测试。结果，电影信息将以JSON格式显示：
- en: '![](img/23b29884-ec6a-473c-9fa0-34549d4de49e.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23b29884-ec6a-473c-9fa0-34549d4de49e.png)'
- en: 'If you point your browser to the frontend built in previous chapters, the new
    movie should be part of the movies listed in the page:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将浏览器指向前几章构建的前端，新电影应该是页面上列出的电影之一：
- en: '![](img/62cf19ea-b235-4dc3-a88b-4c286cfdf3a9.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62cf19ea-b235-4dc3-a88b-4c286cfdf3a9.png)'
- en: 'Now our Lambda function is working as expected; let''s add tracing calls to
    downstream services. First, configure the X-Ray and use the `ctxhttp.Get` method
    to instrument the `GET` call as a subsegment:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的Lambda函数正在按预期工作；让我们为下游服务添加跟踪调用。首先，配置X-Ray并使用`ctxhttp.Get`方法将`GET`调用作为子段进行检测：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, create a subsegment around the parsing logic. The subsegment is called
    `Parsing` and the `AddMetaData` method has been used to record additional information
    about the subsegment in order to troubleshoot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在解析逻辑周围创建一个子段。子段称为`Parsing`，并且使用`AddMetaData`方法记录有关子段的其他信息以进行故障排除：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, wrap the DynamoDB client with the `xray.AWS()` call:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用`xray.AWS()`调用包装DynamoDB客户端：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As a result, the following subsegment will appear in traces for the `ParseMovies`
    Lambda function:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，`ParseMovies` Lambda函数的以下子段将出现在跟踪中：
- en: '![](img/ddbf2885-9baa-4f68-89ca-bd4d81657c3b.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ddbf2885-9baa-4f68-89ca-bd4d81657c3b.png)'
- en: 'If you click on the Subsegments – Parsing on the Metadata tab, the movie attributes
    will be displayed as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果单击“子段”-“解析”选项卡上的“元数据”，将显示电影属性如下：
- en: '![](img/bb70f98a-383f-4617-bf1d-2c99c5bedc80.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bb70f98a-383f-4617-bf1d-2c99c5bedc80.png)'
- en: 'On the service map, the downstream call to DynamoDB and outgoing HTTP call
    will also be displayed:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务映射上，将显示对DynamoDB的下游调用和出站HTTP调用：
- en: '![](img/8f29cc75-e040-4644-82c6-3e7fb011e2ee.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8f29cc75-e040-4644-82c6-3e7fb011e2ee.png)'
- en: By now, you should have a clear idea of how to easily troubleshoot performance
    bottlenecks, latency spikes, and other issues that impact the performance of your
    Lambda-based application.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您应该清楚如何轻松排除性能瓶颈、延迟峰值和其他影响基于Lambda的应用程序性能的问题。
- en: When you trace your Lambda function, an X-Ray daemon will automatically run
    in the Lambda environment to gather trace data and send it to X-Ray. The X-Ray
    daemon can be run locally if you want to test your function before deploying it
    to Lambda. A step-by-step installation guide can be found here: [https://docs.aws.amazon.com/xray/latest/devguide/xray-daemon-local.html](https://docs.aws.amazon.com/xray/latest/devguide/xray-daemon-local.html).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当您跟踪Lambda函数时，X-Ray守护程序将自动在Lambda环境中运行，收集跟踪数据并将其发送到X-Ray。如果您想在将函数部署到Lambda之前测试函数，可以在本地运行X-Ray守护程序。安装指南可以在这里找到：[https://docs.aws.amazon.com/xray/latest/devguide/xray-daemon-local.html](https://docs.aws.amazon.com/xray/latest/devguide/xray-daemon-local.html)。
- en: Summary
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to monitor your Lambda function in near real
    time using AWS CloudWatch metrics. You also learned how to publish custom metrics
    and detect problems with alerts and reporting. In addition, we covered how to
    stream a function's code logs to CloudWatch. Finally, we saw how to use AWS X-Ray
    to debug, how to trace upstream and downstream calls, and how to integrate the
    X-Ray SDK with Lambda in Golang.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何使用AWS CloudWatch指标实时监控Lambda函数。您还学习了如何发布自定义指标，并使用警报和报告检测问题。此外，我们还介绍了如何将函数的代码日志流式传输到CloudWatch。最后，我们看到了如何使用AWS
    X-Ray进行调试，如何跟踪上游和下游调用，以及如何在Golang中将X-Ray SDK与Lambda集成。
- en: In the next chapter, you will learn about securing your serverless application.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何保护您的无服务器应用程序。
