- en: Assessments
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估
- en: Chapter 1: Go Serverless
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章：无服务器
- en: What are the advantages of using the serverless approach?
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用无服务器方法的优势是什么？
- en: '**Answer**:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案**：'
- en: 'NoOps: no management or configuration overhead and faster time to market.'
  id: totrans-4
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: NoOps：没有管理或配置开销，上市时间更快。
- en: 'Autoscaling and HA: enhanced scalability and elasticity based on load.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动缩放和HA：根据负载增强的可伸缩性和弹性。
- en: Cost-optimization: pay only for the compute time your consume.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成本优化：只为您消耗的计算时间付费。
- en: 'Polygot: leverage the power of nanoservices architecture.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Polygot：利用纳米服务架构的力量。
- en: What makes Lambda a time-saving approach?
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Lambda是一种节省时间的方法的原因是什么？
- en: '**Answer**: You pay per execution and you don''t pay for idle resources, while
    with EC2 instances, you pay also for unused resources.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案**：您按执行次数付费，不会为闲置资源付费，而使用EC2实例时，您还会为未使用的资源付费。'
- en: How does serverless architecture enable microservices?
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无服务器架构如何实现微服务？
- en: '**Answer**: Microservices is the approach of breaking down a monolithic application
    into a collection of smaller and modular services. Serverless computing is a key
    enabled for microservices-based applications. It makes infrastructure even-driven
    and completely controlled by the needs of each service that makes up an application.
    Moreover, serverless means functions, and a microservice is a set of functions.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案**：微服务是将单片应用程序分解为一组较小和模块化服务的方法。无服务器计算是微服务应用程序的关键启用。它使基础设施变得事件驱动，并完全由构成应用程序的每个服务的需求控制。此外，无服务器意味着函数，而微服务是一组函数。'
- en: What is the maximum time limit for an AWS Lambda function?
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS Lambda函数的最长时间限制是多少？
- en: '**Answer**: By default, each Lambda function has a 3 seconds timeout; the maximum
    duration you can set, is 5 minutes.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案**：默认情况下，每个Lambda函数的超时时间为3秒；您可以设置的最长持续时间为5分钟。'
- en: Which of the following are supported event-sources for AWS Lambda?
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些是AWS Lambda支持的事件源？
- en: Amazon Kinesis Data Streams
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊Kinesis数据流
- en: Amazon RDS
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊RDS
- en: AWS CodeCommit
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CodeCommit
- en: AWS CloudFormation
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS云形成
- en: '**Answer**: Amazon Kinesis Data Streams, AWS CodeCommit and CloudFormation are
    supported event-sources for AWS Lambda. The list of all supported event sources
    can be found on the following url: [https://docs.aws.amazon.com/lambda/latest/dg/invoking-lambda-function.html](https://docs.aws.amazon.com/lambda/latest/dg/invoking-lambda-function.html)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案**：亚马逊Kinesis数据流、AWS CodeCommit和CloudFormation是AWS Lambda支持的事件源。所有支持的事件源列表可以在以下网址找到：[https://docs.aws.amazon.com/lambda/latest/dg/invoking-lambda-function.html](https://docs.aws.amazon.com/lambda/latest/dg/invoking-lambda-function.html)'
- en: Explain what a goroutine is in Go. How can you stop goroutines?
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解释Go中的goroutine是什么。如何停止goroutines？
- en: '**Answer**: A goroutine is lightweight thread; it uses a resource called **channel**
    to communicate. Channels, by design, prevent race conditions from happening when
    accessing shared memory using goroutines. To stop a goroutine, we pass signal
    channel. That signal channel is used to push a value. The goroutine polls that
    channel regularly. As soon as it detects a signal, it quits.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案**：goroutine是轻量级线程；它使用一种称为**通道**的资源进行通信。通道通过设计，防止了在使用goroutines访问共享内存时发生竞态条件。要停止goroutine，我们传递信号通道。该信号通道用于推送一个值。goroutine定期轮询该通道。一旦检测到信号，它就会退出。'
- en: What's Lambda@Edge in AWS?
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS中的Lambda@Edge是什么？
- en: '**Answer**: Lambda@Edge allows you to run Lambda functions at the edge locations
    of CloudFront in order to customize the content returned to your end users at
    the lowest latency.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案**：Lambda@Edge允许您在CloudFront的边缘位置运行Lambda函数，以便自定义返回给最终用户的内容，延迟最低。'
- en: What's the difference between Function as a Service and Platform as a Service?
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 功能即服务和平台即服务之间有什么区别？
- en: '**Answer**: Both PaaS and FaaS allow you to easily deploy an application and
    scale it without worrying about the underlying infrastructure. However, FaaS saves
    you money because you pay only for the compute time used to handle the incoming
    requests.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案**：PaaS和FaaS都允许您轻松部署应用程序并在不担心基础架构的情况下进行扩展。但是，FaaS可以节省您的资金，因为您只需为处理传入请求所使用的计算时间付费。'
- en: What's an AWS Lambda cold start?
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是AWS Lambda冷启动？
- en: '**Answer**: Cold start happens when a new event is triggered; AWS Lambda creates
    and initialize a new instance or container to handle the request, which takes
    longer (Startup latency) compared to warm starts, where the container is reused
    from a previous event.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案**：当触发新事件时会发生冷启动；AWS Lambda创建和初始化一个新实例或容器来处理请求，这比热启动需要更长的时间（启动延迟），在热启动中，容器是从先前的事件中重用的。'
- en: Can AWS Lambda functions be stateless or stateful?
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS Lambda函数可以是无状态的还是有状态的？
- en: '**Answer**: Lambda functions must be stateless to leverage the power of autoscaling
    due to increasing rate of incoming events.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案**：Lambda函数必须是无状态的，以利用由于传入事件速率增加而导致的自动扩展的能力。'
- en: Chapter 2: Getting Started with AWS Lambda
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章：开始使用AWS Lambda
- en: Which format is not supported by the AWS CLI?
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS CLI不支持哪种格式？
- en: JSON
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON
- en: Table
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表
- en: XML
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XML
- en: Text
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本
- en: '**Answer**: The support values are JSON, table, and text. The default output
    is JSON.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案**：支持的值为JSON、表和文本。默认输出为JSON。'
- en: Is it recommended to use the AWS root account for everyday interaction with
    AWS? If yes, why?
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是否建议使用AWS根帐户进行日常与AWS的交互？如果是的话，为什么？
- en: '**Answer**: AWS root account has the ultimate authority to create and delete
    AWS resources, change the billing, and even close the AWS account. Hence, it is
    strongly recommended to create an IAM user for everyday tasks with only the needed
    permissions.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案**：AWS根帐户具有创建和删除AWS资源、更改计费甚至关闭AWS帐户的最终权限。因此，强烈建议为日常任务创建一个仅具有所需权限的IAM用户。'
- en: What environment variables do you need to set to use the AWS CLI?
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要设置哪些环境变量才能使用AWS CLI？
- en: '**Answer**: The following are the required environment variables to configure
    the AWS CLI:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案**：以下是配置AWS CLI所需的环境变量：'
- en: '`AWS_ACCESS_KEY_ID`'
  id: totrans-41
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AWS_ACCESS_KEY_ID`'
- en: '`AWS_SECRET_ACCESS_KEY`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AWS_SECRET_ACCESS_KEY`'
- en: '`AWS_DEFAULT_REGION`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AWS_DEFAULT_REGION`'
- en: How do you use the AWS CLI with named profiles?
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用具有命名配置文件的AWS CLI？
- en: '**Answer**: `AWS_PROFILE` can be used to set the CLI profile to use. The profile
    is stored in the credentials file. By default, AWS CLI uses the `default` profile.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：`AWS_PROFILE`可用于设置要使用的CLI配置文件。配置文件存储在凭据文件中。默认情况下，AWS CLI使用`default`配置文件。'
- en: Explain the GOPATH environment variable.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解释GOPATH环境变量。
- en: '**Answer**: The `GOPATH` environment variable specifies the location of your
    Go workspace. Default value is `$HOME/go`.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：`GOPATH`环境变量指定Go工作区的位置。默认值为`$HOME/go`。'
- en: Which command-line command compiles a program in Go?
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个命令行命令编译Go程序？
- en: '`go build`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`go build`'
- en: '`go run`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`go run`'
- en: '`go fmt`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`go fmt`'
- en: '`go doc`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`go doc`'
- en: '**Answer**: The as-mentioned commands do the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：上述命令执行以下操作：'
- en: '`build`: It is a compile package and dependencies and generate a single binary.'
  id: totrans-54
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build`：它是一个编译包和依赖项并生成单个二进制文件。'
- en: '`run`: It is a compile and run Go program.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`run`：它是一个编译和运行Go程序。'
- en: '`fmt`: It is a reformat package resources.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fmt`：它是一个重新格式化包资源。'
- en: '`doc`: It is a show documentation for a package or function.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`doc`：它是一个显示包或函数文档的包。'
- en: What's the Go workspace?
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是Go工作区？
- en: '**Answer**: A Go workspace is a directory where you will load and work with
    Go code. The directory must have the following hierarchy:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：Go工作区是一个您将加载和处理Go代码的目录。该目录必须具有以下层次结构：'
- en: '`src`: It contains Go source files.'
  id: totrans-60
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`：它包含Go源文件。'
- en: '`bin`: It contains executable files.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bin`：它包含可执行文件。'
- en: '`pkg`: It contains package objects.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pkg`：它包含包对象。'
- en: Chapter 3: Developing a Serverless Function with Lambda
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章：使用Lambda开发无服务器函数
- en: What's the command-line command to create an IAM role for an AWS Lambda function?
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建AWS Lambda函数的IAM角色的命令行命令是什么？
- en: '**Answer**: Create an IAM role with the below command; it allows Lambda function
    to call AWS services under your account:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：使用以下命令创建一个IAM角色；它允许Lambda函数调用您帐户下的AWS服务：'
- en: '[PRE0]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `assume-role-lambda.json` file contains the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`assume-role-lambda.json`文件包含以下内容：'
- en: '[PRE1]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What's the command-line command to create a new S3 bucket in the Virginia region
    (`us-east-1`) and upload a Lambda deployment package to it?
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弗吉尼亚地区（`us-east-1`）创建一个新的S3存储桶并将Lambda部署包上传到其中的命令行命令是什么？
- en: '**Answer**: The following command can be used to create an S3 bucket:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：以下命令可用于创建一个S3存储桶：'
- en: '[PRE2]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To upload the deployment package to the bucket, issue the following command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要将部署包上传到存储桶，发出以下命令：
- en: '[PRE3]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: What are the Lambda package size limits?
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Lambda包大小限制是多少？
- en: 10 MB
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 10 MB
- en: 50 MB
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 50 MB
- en: 250 MB
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 250 MB
- en: '**Answer**: AWS Lambda deployment package has a total maximum of 50MB zipped
    and 250MB uncompressed.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：AWS Lambda部署包的总最大限制为50MB压缩和250MB未压缩。'
- en: AWS Lambda Console supports editing Go source code.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS Lambda控制台支持编辑Go源代码。
- en: 'True'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 真
- en: 'False'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假
- en: '**Answer**: False; Go is a recently added language, and the developers behind
    it haven''t added the capability for an inline editor yet. Hence, you must provide
    an executable binary in a ZIP file format or reference an S3 bucket and object
    key where you have uploaded the deployment package.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：错误；Go是最近添加的语言，其开发人员尚未添加内联编辑器的功能。因此，您必须提供一个ZIP文件格式的可执行二进制文件或引用一个S3存储桶和对象键，您已经上传了部署包。'
- en: What's the underlying AWS Lambda execution environment?
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS Lambda执行环境的基础是什么？
- en: Amazon Linux Image
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊Linux镜像
- en: Microsoft Windows Server
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软Windows服务器
- en: '**Answer**: AWS Lambda execution environment is based on Amazon Linux AMI.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：AWS Lambda执行环境基于亚马逊Linux AMI。'
- en: How are events represented in AWS Lambda?
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS Lambda中如何表示事件？
- en: '**Answer**: Events in AWS Lambda are represented in a JSON format.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：AWS Lambda中的事件以JSON格式表示。'
- en: Chapter 5: Managing Data Persistence with DynamoDB
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章：使用DynamoDB管理数据持久性
- en: Implement an update handler to update an existing movie item.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现更新处理程序以更新现有的电影项目。
- en: '**Answer**: The handler expects a movie item in a JSON format; the input will
    be encoded to a `Movie` struct. The `PutItem` method is used to insert the movie
    to the table as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：处理程序期望以JSON格式的电影项目；输入将被编码为`Movie`结构。使用`PutItem`方法将电影插入表中，如下所示：'
- en: '[PRE4]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Create a new PUT method in API Gateway to trigger the update Lambda function.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在API Gateway中创建一个新的PUT方法来触发`update` Lambda函数。
- en: '**Answer**: Expose a `PUT` method on the `/movies` resource and configure the
    target to be the Lambda function defined earlier. The following screenshot illustrates
    the results:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：在`/movies`资源上公开一个`PUT`方法，并配置目标为之前定义的Lambda函数。以下截图展示了结果：'
- en: '![](img/d4defec5-5386-4f7b-bbbd-3a1e12cb4449.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d4defec5-5386-4f7b-bbbd-3a1e12cb4449.png)'
- en: Implement a single Lambda function to handle all type of events (GET, POST,
    DELETE, PUT).
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个单一的Lambda函数来处理所有类型的事件（GET、POST、DELETE、PUT）。
- en: '**Answer**:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：'
- en: '[PRE5]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Update the `findOne` handler to return a proper response code for a valid request
    but an empty data (for example, no movie for the ID requested).
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`findOne`处理程序以返回对于有效请求但空数据（例如，所请求的ID没有电影）的适当响应代码。
- en: '**Answer**: When handling input of a user (movie ID in our case), validation
    is mandatory. Hence, you need to write a regular expression to ensure the ID given
    in parameter is properly formed. The following are examples of regular expressions
    to validate an ID:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：在处理用户输入（在我们的情况下是电影ID）时，验证是强制性的。因此，您需要编写一个正则表达式来确保参数中给定的ID格式正确。以下是用于验证ID的正则表达式示例：'
- en: 'Pattern for alphanumeric ID: `[a-zA-Z0-9]+`'
  id: totrans-101
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含字母数字ID的模式：`[a-zA-Z0-9]+`
- en: 'Pattern for digits only ID: `[0-9]+`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅数字ID的模式：`[0-9]+`
- en: Implement a pagination system on the `findAll` endpoint using a Range header
    and using a Query string.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Range`标头和`Query`字符串在`findAll`端点上实现分页系统。
- en: '**Answer**: Use the Limit option in the `ScanRequest` method to limit number
    of returned items:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：在`ScanRequest`方法中使用Limit选项来限制返回的项目数：'
- en: '[PRE6]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The number of items to return can be read from the request headers:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从请求标头中读取要返回的项目数：
- en: '[PRE7]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Chapter 7: Implementing a CI/CD Pipeline
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章：实施CI/CD流水线
- en: Implement a CI/CD pipeline for other Lambda functions with CodeBuild and CodePipeline.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用CodeBuild和CodePipeline为其他Lambda函数实现CI/CD流水线。
- en: '**Answer**: The CI/CD pipeline for `FindAllMovies` Lambda function can be implemented
    as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：`FindAllMovies` Lambda 函数的 CI/CD 流水线可以按以下方式实现：'
- en: '[PRE8]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The CI/CD pipeline for `InsertMovie` Lambda function can be implemented as
    follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`InsertMovie` Lambda 函数的 CI/CD 流水线可以按以下方式实现：'
- en: '[PRE9]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The CI/CD pipeline for `Updatemovie` Lambda function can be implemented as
    follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`Updatemovie` Lambda 函数的 CI/CD 流水线可以按以下方式实现：'
- en: '[PRE10]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The CI/CD pipeline for `DeleteMovie` Lambda function can be implemented as
    follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`DeleteMovie` Lambda 函数的 CI/CD 流水线可以按以下方式实现：'
- en: '[PRE11]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Implement a similar workflow using Jenkins Pipeline.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Jenkins Pipeline 实现类似的工作流程。
- en: '**Answer**: We can use Jenkins parallel stages feature to run chunks of code
    in parallel as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：我们可以使用 Jenkins 并行阶段功能并行运行代码块，如下所示：'
- en: '[PRE12]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Implement the same pipeline with CircleCI.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 CircleCI 实现相同的流水线。
- en: '**Answer**: CircleCI workflow option can be used to define a collection of
    build jobs:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：CircleCI 工作流选项可用于定义一组构建作业：'
- en: '[PRE13]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Add a new stage to the existing pipeline to publish a new version if the current
    git branch is the master.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有流水线中添加新阶段，如果当前的 git 分支是主分支，则发布新版本。
- en: '**Answer**:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：'
- en: '[PRE14]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Configure the pipeline to send a notification on a Slack channel every time
    a new Lambda function is deployed or updated.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置流水线，每次部署或更新 Lambda 函数时都在 Slack 频道上发送通知。
- en: '**Answer**: You can use the Slack API to post a message to a Slack channel
    at the end of the deployment step:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：您可以使用 Slack API 在部署步骤结束时向 Slack 频道发布消息：'
- en: '[PRE15]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Chapter 9: Building the Frontend with S3
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章：使用 S3 构建前端
- en: Implement a Lambda function that takes the movie category as input and returns
    a list of movies that corresponds to that category.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个 Lambda 函数，该函数以电影类别作为输入，并返回与该类别对应的电影列表。
- en: '**Answer**:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：'
- en: '[PRE16]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Implement a Lambda function that takes a movie's title as input and returns
    all movies that have the keyword in their title.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个 Lambda 函数，该函数以电影的标题作为输入，并返回所有标题中包含关键字的电影。
- en: '**Answer**:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：'
- en: '[PRE17]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Implement a delete button on the web application to delete a movie by calling
    the `DeleteMovie` Lambda function from API Gateway.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Web 应用程序上实现删除按钮，通过调用 API Gateway 中的 `DeleteMovie` Lambda 函数来删除电影。
- en: '**Answer**: Update the MoviesAPI service to include the following function:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：更新 MoviesAPI 服务以包括以下函数：'
- en: '[PRE18]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Implement an edit button on the web application to allow the user to update
    movie attributes.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Web 应用程序上实现编辑按钮，允许用户更新电影属性。
- en: '**Answer**:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：'
- en: '[PRE19]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Implement a CI/CD workflow with either CircleCI, Jenkins, or CodePipeline to
    automate the generation and deployment of the API Gateway documentation.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 CircleCI、Jenkins 或 CodePipeline 实现 CI/CD 工作流，自动化生成和部署 API Gateway 文档。
- en: '**Answer**:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：'
- en: '[PRE20]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Chapter 10: Testing Your Serverless Application
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 10 章：测试您的无服务器应用程序
- en: Write a unit test for the `UpdateMovie` Lambda function.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 `UpdateMovie` Lambda 函数编写一个单元测试。
- en: '**Answer**:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：'
- en: '[PRE21]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Write a unit test for the `DeleteMovie` Lambda function.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 `DeleteMovie` Lambda 函数编写一个单元测试。
- en: '**Answer**:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：'
- en: '[PRE22]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Modify the `Jenkinsfile` provided in previous chapters to include the execution
    of automated unit tests.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改之前章节中提供的 `Jenkinsfile`，包括执行自动化单元测试的步骤。
- en: '**Answer**: Note the usage of `go test` command in the **Test** stage:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：请注意在 **测试** 阶段中使用 `go test` 命令：'
- en: '[PRE23]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Modify the `buildspec.yml` definition file to include the execution of unit
    tests, before pushing the deployment package to S3 using AWS CodeBuild.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `buildspec.yml` 定义文件，包括在将部署包推送到 S3 之前执行单元测试的步骤。
- en: '**Answer**:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：'
- en: '[PRE24]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Write a SAM template file for each Lambda function implemented in previous chapters.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为在之前章节中实现的每个 Lambda 函数编写一个 SAM 模板文件。
- en: '**Answer**: The following is a SAM template file for the `FindAllMovies` Lambda
    function; the same resources can be used to create other functions:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：以下是 `FindAllMovies` Lambda 函数的 SAM 模板文件；可以使用相同的资源来创建其他函数：'
- en: '[PRE25]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Chapter 12: Securing Your Serverless Application
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 12 章：保护您的无服务器应用程序
- en: Integrate a user in a user pool with an identity pool to allow users to log
    in with their Facebook account.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用户池中的用户与身份池集成，允许用户使用其 Facebook 帐户登录。
- en: '**Answer**: In order to integrate Facebook with Amazon Cognito identity pools,
    you must follow the given procedure:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：为了将 Facebook 与 Amazon Cognito 身份池集成，您必须遵循给定的步骤：'
- en: Create a Facebook Application from the Facebook Developers portal ([https://developers.facebook.com/](https://developers.facebook.com/)).
  id: totrans-165
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Facebook 开发者门户（[https://developers.facebook.com/](https://developers.facebook.com/)）创建
    Facebook 应用程序。
- en: Copy the App ID and secret.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制应用程序 ID 和密钥。
- en: 'Configure Facebook as a provider in Amazon Cognito Console:'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Amazon Cognito 控制台中配置 Facebook 作为提供者：
- en: '![](img/864936ac-5f65-4091-a8c1-232c253e4be6.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/864936ac-5f65-4091-a8c1-232c253e4be6.png)'
- en: Follow the Facebook Guide ([https://developers.facebook.com/docs/facebook-login/login-flow-for-web/v2.3](https://developers.facebook.com/docs/facebook-login/login-flow-for-web/v2.3))
    to add the Facebook login button to the web application.
  id: totrans-169
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按照 Facebook 指南（[https://developers.facebook.com/docs/facebook-login/login-flow-for-web/v2.3](https://developers.facebook.com/docs/facebook-login/login-flow-for-web/v2.3)）在
    Web 应用程序中添加 Facebook 登录按钮。
- en: Once the user is authenticated, a Facebook session token will be returned; this
    token must be added to the Amazon Cognito credentials provider to fetch a JWT
    token.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户经过身份验证后，将返回一个 Facebook 会话令牌；必须将此令牌添加到 Amazon Cognito 凭据提供程序中以获取 JWT 令牌。
- en: Finally, add the JWT token to the API Gateway request `Authorization` header.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，将 JWT 令牌添加到 API Gateway 请求的 `Authorization` 标头中。
- en: Integrate a user in a user pool with an identity pool to allow users to log
    in with their Twitter account.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用户池中的用户与身份池集成，允许用户使用其 Twitter 帐户登录。
- en: '**Answer**: Amazon Cognito doesnot support Twitter as an authentication provider
    out of the box. Hence, you will need to use **OpenID Connect** to extend Amazon
    Cognito:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：Amazon Cognito 不支持 Twitter 作为默认的身份验证提供者。因此，您需要使用 **OpenID Connect**
    来扩展 Amazon Cognito：'
- en: '![](img/e1757cff-eb06-4cd3-92e4-013582ded7e8.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e1757cff-eb06-4cd3-92e4-013582ded7e8.png)'
- en: Integrate a user in a user pool with an identity pool to allow users to log
    in with their Google account.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用户池中的用户与身份池集成，允许用户使用其 Google 帐户登录。
- en: To enable Google Sign in, you will need to create a new project from Google
    Developers Console ([https://console.developers.google.com/](https://console.developers.google.com/))
  id: totrans-176
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要启用Google登录，您需要从Google开发者控制台创建一个新项目（[https://console.developers.google.com/](https://console.developers.google.com/)）
- en: Enable the Google API under APIs and auth, and then create an OAuth 2.0 client
    ID.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在API和身份验证下启用Google API，然后创建OAuth 2.0客户端ID。
- en: 'Configure Google in the Amazon Cognito Console:'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Amazon Cognito控制台中配置Google：
- en: '![](img/17e34035-a524-48f4-8340-7827d5cd4be1.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17e34035-a524-48f4-8340-7827d5cd4be1.png)'
- en: Follow the Google documentation for Web ([https://developers.google.com/identity/sign-in/web/sign-in](https://developers.google.com/identity/sign-in/web/sign-in))
    to add the Google sign in button.
  id: totrans-180
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按照Google Web文档（[https://developers.google.com/identity/sign-in/web/sign-in](https://developers.google.com/identity/sign-in/web/sign-in)）添加Google登录按钮。
- en: Once the user is authenticated, an authentication token will be generated, which
    can be used to retrieve the JWT token.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦用户经过身份验证，将生成一个身份验证令牌，该令牌可用于检索JWT令牌。
- en: Implement a form to allow users to create an account on a web application so
    that they are able to log in.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个表单，允许用户在Web应用程序上创建帐户，以便他们能够登录。
- en: '**Answer**: A Go based Lambda function might be created to handle the account
    creation workflow. The function''s entry point is given as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案**：可以创建一个基于Go的Lambda函数来处理帐户创建工作流程。函数的入口点如下所示：'
- en: '[PRE26]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Implement a forgotten password flow for an unauthenticated user.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为未经身份验证的用户实现忘记密码流程。
- en: '**Answer**: A Go based Lambda function might be created to reset user password.
    The function''s entry point is given as follows:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案**：可以创建一个基于Go的Lambda函数来重置用户密码。函数的入口点如下所示：'
- en: '[PRE27]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Chapter 14:'
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章：
- en: Write a Terraform template to create the `InsertMovie` Lambda function resources.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个Terraform模板来创建`InsertMovie` Lambda函数资源。
- en: '**Answer**: Setup execution role for the Lambda function:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案**：为Lambda函数设置执行角色：'
- en: '[PRE28]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Next, create the Lambda function:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建Lambda函数：
- en: '[PRE29]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Expose a `POST` method on `/movies` resources in the REST API:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在REST API的`/movies`资源上公开一个`POST`方法：
- en: '[PRE30]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Update the CloudFormation template to trigger the defined Lambda function with
    API Gateway in response to incoming HTTP request.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新CloudFormation模板，以响应传入的HTTP请求，触发已定义的Lambda函数与API Gateway。
- en: '**Answer**: Add the following properties to the `Resources` section:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案**：将以下属性添加到“资源”部分：'
- en: '[PRE31]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Write a SAM file to model and defines all the resources needed to build the
    Serverless API we built through this book.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写SAM文件，对构建通过本书构建的无服务器API所需的所有资源进行建模和定义。
- en: '**Answer**:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案**：'
- en: '[PRE32]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Configure Terraform to store the generated state file in a remote S3 backend.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置Terraform以将生成的状态文件存储在远程S3后端。
- en: '**Answer**: Create an S3 bucket with the following AWS CLI command:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案**：使用以下AWS CLI命令创建一个S3存储桶：'
- en: '[PRE33]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Enable server side encryption on the bucket:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在存储桶上启用服务器端加密：
- en: '[PRE34]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The encryption mechanism is set to AES-256:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 加密机制设置为AES-256：
- en: '[PRE35]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Configure Terraform to use the bucket defined earlier:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 配置Terraform以使用先前定义的存储桶：
- en: '[PRE36]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Create a CloudFormation template for the Serverless API we built through this
    book.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为通过本书构建的无服务器API创建CloudFormation模板。
- en: '**Answer**:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案**：'
- en: '[PRE37]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Create a Terraform template for the Serverless API we built through this book.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为通过本书构建的无服务器API创建Terraform模板。
- en: '**Answer**: In order to avoid duplication of code and keep the template file
    clean and easy to follow and maintain, `Loops`, `conditions`, `maps` and `list`
    can be used to create the IAM roles for the defined Lambda functions:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案**：为了避免代码重复，并保持模板文件的清晰和易于遵循和维护，可以使用“循环”，“条件”，“映射”和“列表”来创建已定义的Lambda函数的IAM角色：'
- en: '[PRE38]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Same can be applied to create the required Lambda functions:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 可以应用相同的方法来创建所需的Lambda函数：
- en: '[PRE39]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Finally, the RESTful API can be created as follows:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，可以按以下方式创建RESTful API：
- en: '[PRE40]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
