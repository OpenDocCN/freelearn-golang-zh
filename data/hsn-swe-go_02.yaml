- en: A Bird's-Eye View of Software Engineering
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件工程的鸟瞰图
- en: '"Hiring people to write code to sell is not the same as hiring people to design
    and build durable, usable, dependable software."'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: “雇佣人们编写代码来销售与雇佣人们设计和构建耐用、可用、可靠的软件是不同的。”
- en: '- Larry Constantine ^([6])'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '- 拉里·康斯坦丁 ^([6])'
- en: Through the various stages of my career, I have met several people that knew
    how to code; people whose skill level ranged from beginner to, what some would
    refer to as, guru. All those people had different backgrounds and worked for both
    start-ups and large organizations. For some, coding was seen as a natural progression
    from their CS studies, while others turned to coding as part of a career change
    decision.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在我职业生涯的各个阶段，我遇到了几个知道如何编码的人；他们的技能水平从初学者到有些人称之为的大师。所有这些人都有不同的背景，在初创公司和大型组织中工作。对于一些人来说，编码被视为从他们的计算机科学研究中自然发展的过程，而其他人则将编码作为职业转变决策的一部分。
- en: 'Regardless of all these differences, all of them had one thing in common: when
    asked to describe their current role, *all* of them used the term **software engineer**.
    It is quite a common practice for job candidates to use this term in their CVs
    as the means to set themselves apart from a globally distributed pool of software
    developers. A quick random sampling of job specs published online reveals that
    a lot of companies – and especially high-profile start-ups – also seem to subscribe
    to this way of thinking, as evidenced by their search for professionals to fill
    software engineering roles. In reality, as we will see in this chapter, the term
    software engineer is more of an umbrella term that covers a wide gamut of bespoke
    roles, each one combining different levels of software development expertise with
    specialized skills pertaining to topics such as system design, testing, build
    tools, and operations management.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 不论这些差异如何，他们都有一个共同点：当被要求描述他们当前的角色时，**所有**的人都使用了“软件工程师”这个术语。求职者在简历中使用这个术语作为将自己与全球分布的软件开发者群体区分开来的手段，这是一种相当常见的做法。对在线发布的职位描述进行快速随机抽样显示，许多公司——尤其是知名度高的初创公司——似乎也认同这种思维方式，正如他们寻找专业人士填补软件工程师职位所证明的那样。实际上，正如我们在本章中将要看到的，软件工程师这个术语更像是一个涵盖广泛定制角色的总称，每个角色都结合了不同水平的软件开发专业知识以及与系统设计、测试、构建工具和运营管理等相关领域的专业技能。
- en: So, what is software engineering and how does it differ from programming? What
    set of skills should a software engineer possess and which models, methodologies,
    and frameworks are at their disposal for facilitating the delivery of complex
    pieces of software? These are some of the questions that will be answered in this
    chapter.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，软件工程是什么，它与编程有何不同？软件工程师应该具备哪些技能组合，他们可以依赖哪些模型、方法和框架来促进复杂软件组件的交付？这些问题将是本章要回答的一些问题。
- en: 'This chapter covers the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主题：
- en: A definition of software engineering
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件工程的定义
- en: The types of software engineering roles that you may encounter in contemporary
    organizations
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可能在当代组织中遇到的软件工程角色的类型
- en: An overview of popular software development models and which one to select based
    on the project type and requirements
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对流行的软件开发模型进行概述，以及根据项目类型和需求选择哪种模型
- en: What is software engineering?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是软件工程？
- en: 'Before we dive deeper into this chapter, we need to establish an understanding
    of some of the basic terms and concepts around software engineering. For starters,
    how do we define software engineering and in what ways does it differ from software
    development and programming in general? To begin answering this question, we will
    start by examining the formal definition of software engineering, as published
    in *IEEE''s Standard Glossary of Software Engineering Terminology* ^([7]):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入探讨本章内容之前，我们需要对软件工程周围的一些基本术语和概念有一个理解。首先，我们如何定义软件工程，它与软件开发和编程在哪些方面有所不同？为了开始回答这个问题，我们将从检查软件工程的正式定义开始，该定义发表在《IEEE软件工程术语标准词汇表》*中*
    ^([7])：
- en: '"Software engineering is defined as the application of a systematic, disciplined,
    quantifiable approach to the development, operation, and maintenance of software."'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: “软件工程被定义为对软件开发、运营和维护应用系统化、规范、可量化的方法。”
- en: The main takeaway from this definition is that authoring code is just one of
    the many facets of software engineering. At the end of the day, any capable programmer
    can take a well-defined specification and convert it into a fully functioning
    program without thinking twice about the need to produce clean and maintainable
    code. A disciplined software engineer, on the other hand, would follow a more
    systematic approach by applying common design patterns to ensure that the produced
    piece software is extensible, easier to test, and well documented in case another
    engineer or engineering team assumes ownership of it in the future.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个定义中得出的主要启示是，编写代码只是软件工程众多方面之一。最终，任何有能力的程序员都可以将一个定义良好的规范转换成一个完全功能化的程序，而无需考虑产生干净和可维护代码的需要。另一方面，一个有纪律的软件工程师会采取更系统的方法，通过应用常见的模式来确保产生的软件是可扩展的、易于测试的，并且在将来有其他工程师或工程团队接管时有良好的文档记录。
- en: 'Besides the obvious requirement for authoring high-quality code, the software
    engineer is also responsible for thinking about other aspects of the systems that
    will be built. Some questions that the software engineer must be able to answer
    include the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 除了编写高质量代码的明显要求外，软件工程师还负责考虑将要构建的系统中的其他方面。软件工程师必须能够回答的一些问题包括以下内容：
- en: What are the business use cases that the software needs to support?
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件需要支持哪些业务用例？
- en: What components comprise the system and how do they interact with each other?
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统由哪些组件组成，它们之间如何相互作用？
- en: Which technologies will be used to implement the various system components?
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将使用哪些技术来实现各种系统组件？
- en: How will the software be tested to ensure that its behavior matches the customer's
    expectations?
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件将如何测试以确保其行为符合客户的期望？
- en: How does load affect the system's performance and what is the plan for scaling
    the system?
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载如何影响系统的性能，以及系统扩展的计划是什么？
- en: To be able to answer these questions, the software engineer needs a special
    set of skills that, as you are probably aware, go beyond programming. These extra
    responsibilities and required skills are the main factors that differentiate a
    software engineer from a software developer.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够回答这些问题，软件工程师需要一套特殊的技能，正如你可能意识到的，这些技能超出了编程的范畴。这些额外的责任和所需技能是区分软件工程师和软件开发者的主要因素。
- en: Types of software engineering roles
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件工程角色的类型
- en: As we discussed in the previous section, software engineering is an inherently
    complex, multi-stage process. In an attempt to manage this complexity, organizations
    around the world have invested a lot of time and effort over the years to break
    the process down into a set of well-defined stages and train their engineering
    staff to efficiently deal with each stage.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一节中讨论的，软件工程是一个本质上复杂、多阶段的过程。为了管理这种复杂性，世界各地的组织多年来投入了大量时间和精力，将这个过程分解成一系列定义良好的阶段，并培训他们的工程人员高效地处理每个阶段。
- en: Some software engineers strive to work across all the stages of the **Software
    Development Life Cycle** (**SDLC**), while others have opted to specialize in
    and master a particular stage of the SDLC. This gave rise to a variety of software
    engineering roles, each one with a different set of responsibilities and a required
    set of skills. Let's take a brief look at the most common software engineering
    roles that you may encounter when working with both small- and large-sized organizations.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一些软件工程师努力在整个**软件开发生命周期**（**SDLC**）的各个阶段工作，而其他人则选择专注于并精通SDLC的某个特定阶段。这导致了各种软件工程角色的出现，每个角色都有不同的责任和所需技能集合。让我们简要地看看在为小型和大型组织工作时可能会遇到的最常见的软件工程角色。
- en: The role of the software engineer (SWE)
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件工程师（SWE）的角色
- en: The **software engineer** (**SWE**) is the most common role that you are bound
    to interact with in any organization, regardless of its size. Software engineers
    play a pivotal role not only in designing and building new pieces of software,
    but also in operating and maintaining existing and legacy systems.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**软件工程师**（**SWE**）是你在任何组织中都必然会与之互动的最常见角色，无论其规模大小。软件工程师不仅在设计和新软件构建中扮演关键角色，而且在运营和维护现有和遗留系统中也发挥着重要作用。'
- en: 'Depending on their experience level and technical expertise, SWEs are classified
    into three categories:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 根据他们的经验水平和技术专长，SWEs被分为三个类别：
- en: '**Junior engineer**: A junior engineer is someone who has recently started
    their software development career and lacks the necessary experience to build
    and deploy production-grade software. Companies are usually keen on hiring junior
    engineers as it allows them to keep their hiring costs low. Furthermore, companies
    often pair promising junior engineers with senior engineers in an attempt to grow
    them into mid-level engineers and retain them for longer.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**初级工程师**：初级工程师是那些刚刚开始软件开发职业生涯的人，他们缺乏构建和部署生产级软件的必要经验。公司通常热衷于招聘初级工程师，因为这可以使他们的招聘成本保持低廉。此外，公司经常将有潜力的初级工程师与资深工程师配对，试图将他们培养成中级工程师，并延长他们的服务时间。'
- en: '**Mid-level engineer**: A typical mid-level engineer is someone who has at
    least three years of software development experience. Mid-level engineers are
    expected to have a solid grasp of the various aspects of the software development
    life cycle and are the ones who can exert a significant impact on the amount of
    code that''s produced for a particular project. To this end, they not only contribute
    code, but also review and offer feedback to the code that''s contributed by other
    team members.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**中级工程师**：典型的中级工程师至少有三年软件开发经验。中级工程师应具备对软件开发生命周期各个方面的扎实掌握，并且是那些可以对特定项目产生的代码量产生重大影响的人。为此，他们不仅贡献代码，还审查并给出对其他团队成员贡献的代码的反馈。'
- en: '**Senior engineer**: This class of engineer is well-versed in a wide array
    of disparate technologies; their breadth of knowledge makes them ideal for assembling
    and managing software engineering teams, as well as serving as mentors and coaches
    for less senior engineers. From their years of experience, senior engineers acquire
    a deep understanding of a particular business domain. This trait allows them to
    serve as a liaison between their teams and the other, technical or non-technical,
    business stakeholders.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资深工程师**：这类工程师精通各种不同的技术；他们的知识广度使他们成为组建和管理软件工程团队、以及作为资历较低工程师的导师和教练的理想人选。凭借多年的经验，资深工程师对特定业务领域有深入的理解。这种特质使他们能够作为团队与其他技术或非技术业务利益相关者之间的联络人。'
- en: 'Another way to classify software engineers is by examining the main focus of
    their work:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种对软件工程师进行分类的方法是考察他们工作的主要焦点：
- en: '**Frontend engineers** work exclusively on software that customers interact
    with. Examples of frontend work include the UI for a desktop application, a single-page
    web application for a **software as a service** (**SaaS**) offering, and a mobile
    application running on a phone or other smart device.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**前端工程师**专门从事客户交互的软件。前端工作的例子包括桌面应用程序的UI、为**软件即服务**（**SaaS**）提供的单页网页应用程序，以及运行在手机或其他智能设备上的移动应用程序。'
- en: '**Backend engineers** specialize in building the parts of a system that implement
    the actual business logic and deal with data modeling, validation, storage, and
    retrieval.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后端工程师**专注于构建实现实际业务逻辑的部分，并处理数据建模、验证、存储和检索。'
- en: '**Full stack engineers** are developers who have a good understanding of both
    frontend and backend technologies and no particular preference of doing frontend
    or backend work. This class of developers is more versatile as they can easily
    move between teams, depending on the project requirements.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全栈工程师**是指那些对前端和后端技术都有良好理解，并且对做前端或后端工作没有特别偏好的开发者。这类开发者更加灵活，因为他们可以根据项目需求轻松地在团队间转换。'
- en: The role of the software development engineer in test (SDET)
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件开发测试工程师（SDET）的角色
- en: The **software development engineer in test** (**SDET**) is a role whose origins
    can be traced back to Microsoft's engineering teams. In a nutshell, SDETs are
    individuals who, just like their SWE counterparts, take part in software development,
    but their primary focus lies in software testing and performance.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发测试工程师（**SDET**）的角色起源于微软的工程团队。简而言之，SDETs就像他们的SWE同行一样参与软件开发，但他们的主要焦点在于软件测试和性能。
- en: An SDET's primary responsibility is to ensure that the development team produces
    high-quality software that is free from defects. A prerequisite for achieving
    this goal is to be cognizant of the different types of approaches to testing software,
    including, but not limited to, unit testing, integration testing, white/black-box
    testing, end-to-end/acceptance testing, and chaos testing. We will be discussing
    all of these testing approaches in more detail in the following chapters.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: SDET的主要职责是确保开发团队能够生产出无缺陷的高质量软件。实现这一目标的前提是了解软件测试的不同类型的方法，包括但不限于单元测试、集成测试、白盒/黑盒测试、端到端/验收测试和混沌测试。我们将在接下来的章节中更详细地讨论所有这些测试方法。
- en: 'The main tool that SDETs use to meet their goals is testing automation. Development
    teams can iterate much faster when a **Continuous Integration** (**CI**) pipeline
    is in place to automatically test their changes across different devices and CPU
    architectures. Besides setting up the infrastructure for the CI pipeline and integrating
    it with the source code repository system that the team uses, SDETs are often
    tasked with authoring and maintaining a separate set of tests. These tests fall
    into the following two categories:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: SDETs用来实现目标的主要工具是测试自动化。当设置了**持续集成**（**CI**）管道以自动测试不同设备和CPU架构上的更改时，开发团队能够更快地迭代。除了设置CI管道的基础设施并将其与团队使用的源代码仓库系统集成外，SDETs通常还负责编写和维护一组单独的测试。这些测试分为以下两类：
- en: '**Acceptance tests**: A set of scripted end-to-end tests to ensure that the
    complete system adheres to all the customer''s business requirements before a
    new version is given the green light for a release.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验收测试**：一组脚本化的端到端测试，以确保在为新版本发布绿灯之前，整个系统符合所有客户业务需求。'
- en: '**Performance regression tests**: Another set of quality control tests that
    monitor a series of performance metrics across builds and alert you when a metric
    exceeds a particular threshold. These types of tests prove to be a great asset
    in the case where a **service-level agreement** (**SLA**) has been signed that
    makes seemingly innocuous changes to the code (for example, switching to a different
    data structure implementation) that may trigger a breach of the SLA, even though
    all the unit tests pass.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能回归测试**：另一组质量控制测试，它监控构建过程中的多个性能指标，并在某个指标超过特定阈值时发出警报。这类测试在签订了**服务级别协议**（**SLA**）的情况下证明是非常宝贵的，因为即使所有单元测试都通过，看似无害的代码更改（例如，切换到不同的数据结构实现）也可能触发SLA违约。'
- en: Finally, SDETs collaborate with support teams to transform incoming support
    tickets into bug reports that the development team can work on. The combination
    of software development and debugging skills, in conjunction with the SDET's familiarity
    with the system under development, makes them uniquely capable of tracking down
    the location of bugs in production code and coming up with example cases (for
    example, a particular data input or a sequence of actions) that allow developers
    to reproduce the exact set of conditions that trigger each bug.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，SDETs与支持团队合作，将收到的支持工单转换为开发团队能够处理的错误报告。软件开发和调试技能的结合，以及SDET对正在开发的系统的熟悉，使他们能够独特地追踪生产代码中错误的位置，并提出示例案例（例如，特定的数据输入或一系列操作），使开发者能够重现触发每个错误的精确条件集。
- en: The role of the site reliability engineer (SRE)
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网站可靠性工程师（SRE）的角色
- en: The role of the **site reliability engineer** (**SRE**) came into the spotlight
    in 2016 when Google published a book on the subject of **Site Reliability Engineering**
    ^([4]). This book outlined the best practices and strategies that are used internally
    by Google to run their production systems and has since led to the wide adoption
    of the role by the majority of companies operating in the SaaS space.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 2016年，当谷歌出版了一本关于**网站可靠性工程**（**Site Reliability Engineering**）主题的书时，**网站可靠性工程师**（**SRE**）的角色受到了关注。这本书概述了谷歌内部用于运行其生产系统的最佳实践和策略，并自那以后，大多数在SaaS领域运营的公司都广泛采用了这一角色。
- en: The term was initially coined sometime around 2003 by Ben Treynor, the founder
    of Google's site reliability team. A site reliability engineer is a software engineer
    with a strong technical background who also focuses on the operations side of
    deploying and running production-grade services.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个术语最初是在2003年左右由谷歌站点可靠性团队的创始人本·特雷诺尔（Ben Treynor）提出的。站点可靠性工程师（SRE）是一位拥有强大技术背景的软件工程师，同时专注于部署和运行生产级服务的运营方面。
- en: 'According to the original role definition, SREs spend approximately 50% of
    their time developing software and the other 50% dealing with ops-related aspects
    such as the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 根据原始的角色定义，SRE们大约花费50%的时间开发软件，其余50%处理与运营相关的方面，例如以下内容：
- en: Working on support tickets or responding to alerts
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理支持工单或响应警报
- en: Being on-call
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值班
- en: Running manual tasks (for example, upgrading systems or running disaster recovery
    scenarios)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行手动任务（例如，升级系统或运行灾难恢复场景）
- en: It is in the best interests of SREs to increase the stability and reliability
    of the services they operate. After all, no one enjoys being paged at 2 a.m. when
    a service melts down due to a sudden spike in the volume of incoming requests.
    The end goal is always to produce services that are highly available and self-healing;
    services that can automatically recover from a variety of faults without the need
    for human intervention.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对于SRE来说，提高他们运营的服务稳定性和可靠性是最符合他们利益的。毕竟，没有人愿意在凌晨2点被叫醒，因为服务因突发请求量激增而崩溃。最终目标始终是提供高度可用和自我修复的服务；这些服务能够自动从各种故障中恢复，无需人工干预。
- en: The basic mantra of SREs is to eliminate potential sources of human errors by
    automating repeated tasks. One example of this philosophy is the use of a **Continuous
    Deployment** (**CD**) pipeline to minimize the amount of time that's required
    to deploy software changes to production. The benefits of this type of automation
    become apparent when a critical issue affecting production is identified and a
    fix must be deployed as soon as possible.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: SRE的基本座右铭是通过自动化重复性任务来消除潜在的人为错误来源。这一哲学的一个例子是使用**持续部署**（**CD**）管道来最小化将软件更改部署到生产环境所需的时间。当发现影响生产的重大问题并必须尽快部署修复方案时，这种类型自动化的好处就显现出来了。
- en: 'Ultimately, software is designed and built by humans so bugs will undoubtedly
    creep in. Rather than relying on a rigorous verification process to prevent defects
    from being deployed to production, SREs operate under the premise that we live
    in a non-perfect world: systems do crash and buggy software will, at some point,
    get deployed to production. To detect defective software deployments and mitigate
    their effects on end users, SREs set up monitoring systems that keep track of
    various health-related metrics for each deployed service and can trigger automatic
    rollbacks if a deployment causes an increase in a service''s error rate.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，软件是由人类设计和构建的，所以无疑会有错误存在。与其依赖严格的验证过程来防止缺陷被部署到生产环境中，SRE们在这样一个非完美的世界中运作，认为系统会崩溃，有缺陷的软件最终会被部署到生产环境中。为了检测有缺陷的软件部署并减轻其对最终用户的影响，SRE们设置了监控系统，跟踪每个部署服务的各种健康相关指标，并在部署导致服务错误率增加时触发自动回滚。
- en: The role of the release engineer (RE)
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布工程师（RE）的角色
- en: In a world where complex, monolithic systems are broken down into multiple microservices
    and continuous delivery has become the new norm, debugging older software releases
    that are still deployed out in the wild becomes a major pain point for software
    engineers.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个复杂、单体系统被分解成多个微服务，持续交付成为新常态的世界里，调试仍在野外部署的旧软件版本成为软件工程师的一个主要痛点。
- en: 'To understand why this can be a pain point, let''s take a look at a small example:
    you arrive at work on a sunny Monday morning only to find out that one of your
    major customers has filed a bug against the microservice-based software your team
    is responsible for. To make things even worse, that particular customer is running
    a **long-term support** (**LTS**) release of the software, which means that some,
    if not all, of the microservices that the run on the customer''s machines are
    based on code that is at least a couple of hundred commits behind the current
    state of development. So, how can you actually come up with a bug reproducer and
    check whether the bug has already been fixed upstream?'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解这为什么会成为痛点，让我们来看一个小例子：你在一个阳光明媚的周一早上到达办公室，却发现你的一位主要客户已经对你团队负责的基于微服务的软件提交了一个错误报告。更糟糕的是，这位特定的客户正在运行软件的**长期支持**（**LTS**）版本，这意味着运行在客户机器上的某些，如果不是所有微服务，都是基于至少落后当前开发状态几百次提交的代码。那么，你实际上如何才能提供一个错误复现器并检查错误是否已经被上游修复？
- en: This is where the concept of **reproducible builds** comes into play. By reproducible
    builds, we mean that *at any point in time* we should be able to compile a particular
    version of all the system components where the resulting artifacts match, *bit
    by bit*, the ones that have been deployed by the customer.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是**可重复构建**概念发挥作用的地方。通过可重复构建，我们指的是在任何时间点，我们都应该能够编译所有系统组件的特定版本，其中生成的工件与客户部署的工件在**位对位**上相匹配。
- en: 'A **release engineer** (**RE**) is effectively a software engineer who collaborates
    with all the engineering teams to define and document all the required steps and
    processes for building and releasing code to production. A prerequisite for a
    release engineer is having deep knowledge of all the tools and processes that
    are required for compiling, versioning, testing, and packaging software. Typical
    tasks for REs include the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**发布工程师**（**RE**）实际上是一位与所有工程团队合作，定义和记录构建和发布代码到生产所需的全部步骤和流程的软件工程师。发布工程师的先决条件是拥有所有编译、版本控制、测试和打包软件所需的工具和流程的深入知识。RE的典型任务包括以下内容：'
- en: Authoring makefiles
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写makefile
- en: Implementing workflows for containerizing software artifacts (for example, as
    Docker or .`rkt` images)
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施软件工件容器化的工作流程（例如，作为Docker或`.rkt`镜像）
- en: Ensuring all teams use exactly the same build tool (compilers, linkers, and
    so on) versions and flags
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保所有团队使用完全相同的构建工具（编译器、链接器等）版本和标志
- en: 'Ensuring that builds are both **repeatable** and **hermetic**: changes to external
    dependencies (for example, third-party libraries) between builds of the *same
    software version* should have no effect on the artifacts that are produced by
    each build'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保构建既**可重复**又**密封**：在**同一软件版本**的构建之间，外部依赖（例如，第三方库）的变化不应影响每个构建产生的工件
- en: The role of the system architect
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统架构师的角色
- en: 'The last role that we will be discussing in this section, and one that you
    will only probably encounter when working on bigger projects or collaborating
    with large organizations, is the system architect. While software engineering
    teams focus on building the various components of the system, the architect is
    the one person who sees the big picture: what components comprise the system,
    how each component must be implemented, and how all the components fit and interact
    with each other.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中我们将讨论的最后一个角色，也是你可能在处理大型项目或与大型组织合作时才会遇到的角色，就是系统架构师。虽然软件工程团队专注于构建系统的各个组件，但架构师是唯一一个能看到全局的人：系统由哪些组件组成，每个组件必须如何实现，以及所有组件如何相互配合和交互。
- en: In smaller companies, the role of the architect is usually fulfilled by one
    of the senior engineers. In larger companies, the architect is a distinct role
    that's filled by someone with both a solid technical background and strong analytical
    and communication skills.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在较小的公司中，架构师的角色通常由一位资深工程师担任。在较大的公司中，架构师是一个独立的角色，由既有扎实的技术背景又具备强大的分析和沟通能力的人担任。
- en: Apart from coming up with a high-level, component-based design for the system,
    the architect is also responsible for making decisions regarding the technologies
    that will be used during development and setting the standards that all the development
    teams must adhere to.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 除了为系统制定一个高级的、基于组件的设计外，架构师还负责在开发过程中做出有关将使用哪些技术的决策，并设定所有开发团队必须遵守的标准。
- en: Even though architects have a technical background, they rarely get to write
    any code. As a matter of fact, architects tend to spend a big chunk of their time
    in meetings with the various internal or external stakeholders, authoring design
    documents or providing technical direction to the software engineering teams.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管架构师有技术背景，但他们很少有机会编写代码。事实上，架构师往往花费大量时间与各种内部或外部利益相关者开会，编写设计文档或为软件工程团队提供技术指导。
- en: A list of software development models that all engineers should know
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一份所有工程师都应该了解的软件开发模型列表
- en: The software engineering definition from the previous section alludes to the
    fact that software engineering is a complicated, multi-stage process. In an attempt
    to provide a formal description of these stages, academia has put forward the
    concept of the SDLC.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 上一节中的软件工程定义暗示了软件工程是一个复杂、多阶段的过程。为了提供这些阶段的正式描述，学术界提出了SDLC（软件开发生命周期）的概念。
- en: The SDLC is a systematic process for building high-quality software that matches
    the expectations of the end user or customer while ensuring that the project's
    cost stays within a reasonable bound.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: SDLC是一个系统化的过程，用于构建符合最终用户或客户期望的高质量软件，同时确保项目的成本保持在合理的范围内。
- en: 'Over the years, there has been an abundance of alternative model proposals
    for facilitating software development. The following diagram is a timeline illustrating
    the years when some of the most popular SDLC models were introduced:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，出现了大量促进软件开发的替代模型建议。以下图表是一个时间线，展示了一些最流行的SDLC模型被引入的年份：
- en: '![](img/b5188836-b661-4400-987c-1158da856134.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b5188836-b661-4400-987c-1158da856134.png)'
- en: Figure 1: A timeline for the software development models that will be presented
    in this chapter
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：本章将展示的软件开发模型的时间线
- en: In the upcoming sections, we will explore each of the preceding models in more
    detail.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将更详细地探讨上述每个模型。
- en: Waterfall
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 瀑布模型
- en: The waterfall model is probably the most widely known model out there for implementing
    the SDLC. It was introduced by Winston Royce in 1970 ^([11]) and defines a series
    of steps that must be *sequentially* completed in a particular order. Each stage
    produces a certain output, for example, a document or some artifact, that is,
    in turn, consumed by the step that follows.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 水晶模型可能是实施SDLC最广为人知的模型。它在1970年由温斯顿·罗伊斯提出，定义了一系列必须按特定顺序**顺序完成**的步骤。每个阶段都会产生一定的输出，例如文档或某些工件，然后这些输出反过来被后续步骤所消费。
- en: 'The following diagram outlines the basic steps that were introduced by the
    waterfall model:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表概述了瀑布模型引入的基本步骤：
- en: '**Requirement collection**: During this stage, the customer''s requirements
    are captured and analyzed and a requirements document is produced.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**需求收集**：在这个阶段，客户的需求数据被捕获和分析，并生成一份需求文档。'
- en: '**Design**: Based on the requirement''s document contents, analysts will plan
    the system''s architecture. This step is usually split into two sub-steps: the
    logical system design, which models the system as a set of high-level components,
    and the physical system design, where the appropriate technologies and hardware
    components are selected.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设计**：根据需求文档的内容，分析师将规划系统的架构。这一步通常分为两个子步骤：逻辑系统设计，将系统建模为一系列高级组件，以及物理系统设计，选择适当的技术和硬件组件。'
- en: '**Implementation**: The implementation stage is where the design documents
    from the previous step get transformed by software engineers into actual code.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实施**：实施阶段是将前一步的设计文档转化为实际代码的过程。'
- en: '**Verification**: The verification stage follows the implementation stage and
    ensures that the piece of software that got implemented actually satisfies the
    set of customer requirements that were collected during the requirements gathering
    step.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验证**：验证阶段紧随实施阶段之后，确保已实施的软件实际上满足在需求收集阶段收集的客户需求集合。'
- en: '**Maintenance**: The final stage in the waterfall model is when the developed
    software is deployed and operated by the customer:'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**维护**：在瀑布模型中，这是软件开发完成后由客户部署和运行的最后阶段：'
- en: '![](img/9d97169e-7517-4778-9c64-173acc7a7b01.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9d97169e-7517-4778-9c64-173acc7a7b01.png)'
- en: Figure 2: The steps defined by the waterfall model
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图2：瀑布模型定义的步骤
- en: One thing to keep in mind is that the waterfall model operates under the assumption
    that *all* customer requirements can be collected early on, especially before
    the project implementation stage begins. Having the full set of requirements available
    as a set of use cases makes it easier to get a more accurate estimate of the amount
    of time that's required for delivering the project and the development costs involved.
    A corollary to this is that software engineers are provided with all the expected
    use cases and system interactions in advance, thus making testing and verifying
    the system much simpler.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的一点是，瀑布模型基于这样的假设：*所有*客户需求都可以在项目实施阶段开始之前尽早收集到，尤其是项目实施阶段开始之前。将所有需求作为用例集提供，使得对交付项目所需时间和相关开发成本的准确估计变得更加容易。由此产生的结果是，软件工程师可以提前获得所有预期的用例和系统交互，这使得测试和验证系统变得更加简单。
- en: The waterfall model comes with a set of caveats that make it less favorable
    to use when building software systems. One potential caveat is that the model
    describes each stage in an abstract, high-level way and does not provide a detailed
    view into the processes that comprise each step or even tackle cross-cutting processes
    (for example, project management or quality control) that you would normally expect
    to execute in parallel through the various steps of the model.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 瀑布模型存在一些注意事项，使得在构建软件系统时不太适合使用。一个潜在的注意事项是，该模型以抽象、高层次的方式描述每个阶段，并没有提供对构成每个步骤的过程的详细视图，甚至没有处理通常期望在模型的各个步骤中并行执行的跨切面过程（例如，项目管理或质量控制）。
- en: While this model does work for small- to medium-scale projects, it tends, at
    least in my view, not to be as efficient for projects such as the ones commissioned
    by large organizations and/or government bodies. To begin with, the model assumes
    that analysts are always able to elicit the *correct* set of requirements from
    customers. This is not always the case as, oftentimes, customers are not able
    to accurately describe their requirements or tend to identify additional requirements
    just before the project is delivered. In addition to this, the sequential nature
    of this model means that a significant amount of time may elapse between gathering
    the initial requirements and the actual implementation. During this time – what
    some would refer to as an *eternity* in software engineering terms – the customer's
    requirements may shift. Changes in requirements necessitate additional development
    effort and this directly translates into increased costs for the deliverable.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种模型适用于中小型项目，但至少在我看来，它对于大型组织或政府机构委托的项目来说可能并不那么高效。首先，该模型假设分析师总是能够从客户那里提取出*正确*的需求集。这并不总是如此，因为，很多时候，客户无法准确描述他们的需求，或者倾向于在项目交付前识别出额外的需求。此外，该模型的顺序性质意味着在收集初始需求和实际实施之间可能会有一段很长的时间。在这段时间里——在软件工程术语中，有些人可能会称之为*永恒*——客户的需求可能会发生变化。需求的变化需要额外的开发工作，这直接导致交付成果的成本增加。
- en: Iterative enhancement
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迭代增强
- en: 'The iterative enhancement model that''s depicted in the following diagram was
    proposed in 1975 by Basili and Victor ^([2]) in an attempt to improve on some
    of the caveats of the waterfall model. By recognizing that requirements may potentially
    change for long-running projects, the model advocates executing a set of evolution
    cycles or iterations, with each one being allocated a fixed amount of time out
    of the project''s time budget:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 下图所示的迭代增强模型是在1975年由Basili和Victor提出的，旨在改进瀑布模型的一些注意事项。通过认识到长期项目的需求可能会发生变化，该模型主张执行一系列的演变周期或迭代，每个迭代都从项目的时间预算中分配一定的时间：
- en: '![](img/b3033f98-8586-4b11-baa2-128ed0225b0d.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b3033f98-8586-4b11-baa2-128ed0225b0d.png)'
- en: Figure 3: The steps of the interactive enhancement model
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图3：交互增强模型的步骤
- en: Instead of starting with the full set of specifications, each cycle focuses
    on building some parts of the final deliverable and refining the set of requirements
    from the cycle that precedes it. This allows the development team to make full
    use of any information available at that particular point in time and ensure that
    any requirement changes can be detected early on and acted upon.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 与从完整的规格说明开始不同，每个周期都专注于构建最终交付成果的部分，并从上一个周期中细化需求集。这允许开发团队能够充分利用在那个特定时间点可用的任何信息，并确保任何需求变更都能及早发现并采取行动。
- en: One important rule when applying the iterative model is that the output of each
    cycle must be a *usable piece of software*. The last iteration is the most important
    as its output yields the final software deliverable. As we will see in the upcoming
    sections, the iterative model has exerted quite a bit of influence in the evolution
    of most of the contemporary software development models.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用迭代模型时，一个重要的规则是每个周期的输出必须是一个**可用的软件片段**。最后一个迭代是最重要的，因为它的输出产生了最终的软件交付成果。正如我们将在接下来的章节中看到的那样，迭代模型在大多数当代软件开发模型的演变中产生了相当大的影响。
- en: Spiral
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 螺旋
- en: The spiral development model was introduced by Barry Boehm in 1986 ^([5]) as
    an approach to minimize risk when developing large-scale projects associated with
    significant development costs.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 螺旋开发模型由Barry Boehm于1986年引入，作为一种在开发与重大开发成本相关的大型项目时最小化风险的方法。
- en: 'In the context of software engineering, **risks** are defined as any kind of
    situation or sequence of events that can cause a project to fail to meet its goals.
    Examples of various degrees of failure include the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件工程的背景下，**风险**被定义为任何可能导致项目无法实现其目标的情况或事件序列。各种程度的失败例子包括以下内容：
- en: Missing the delivery deadline
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迟交交付期限
- en: Exceeding the project budget
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超过项目预算
- en: Delivering software on time, depending on the hardware that isn't available
    yet
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据尚未可用的硬件按时交付软件
- en: 'As illustrated in the following diagram, the spiral model combines the ideas
    and concepts from the waterfall and iterative models with a risk assessment and
    analysis process. As Boehm points out, a very common mistake that people who are
    unfamiliar with the model tend to make when seeing this diagram for the first
    time is to assume that the spiral model is just a sequence of incremental waterfall
    steps that have to be followed in a particular order for each cycle. To dispel
    this misconception, Boehms provided the following definition for the spiral model:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下图所示，螺旋模型结合了瀑布模型和迭代模型的思想和概念，以及风险评估和分析过程。正如Boehm所指出的，那些对模型不熟悉的人在第一次看到这个图时通常会犯的一个非常常见的错误是，假设螺旋模型只是每个周期必须遵循的顺序的增量瀑布步骤序列。为了消除这种误解，Boehm为螺旋模型提供了以下定义：
- en: '"The spiral development model is a risk-driven process model *generator* that
    takes a *cyclic* approach to progressively expand the project scope while at the
    same time decreasing the degree of risk."'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: “螺旋开发模型是一种以风险为驱动的流程模型**生成器**，它采用**循环**的方法逐步扩大项目范围，同时降低风险程度。”
- en: 'Under this definition, risk is the primary factor that helps project stakeholders
    answer the following questions:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这个定义，风险是帮助项目利益相关者回答以下问题的首要因素：
- en: What steps should we follow next?
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们接下来应该遵循哪些步骤？
- en: How long should we keep following those steps before we need to reevaluate risk?
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们需要重新评估风险之前，我们应该继续遵循这些步骤多长时间？
- en: '![](img/98b3280e-9f4b-4d7c-9386-9daeba763b77.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/98b3280e-9f4b-4d7c-9386-9daeba763b77.png)'
- en: Figure 4: The original spiral model, as published by Boehm in 1986
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图4：1986年由Boehm发表的原始螺旋模型
- en: At the beginning of each cycle, all the potential sources of risk are identified
    and mitigation plans are proposed to address any risk concerns. These set of risks
    are then ordered in terms of importance, for example, the impact on the project
    and the likelihood of occurring, and used as input by the stakeholders when planning
    the steps for the next spiral cycle.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个周期的开始，所有潜在的风险来源都被识别，并提出了缓解计划以解决任何风险关注点。然后，根据重要性对这些风险进行排序，例如对项目的影响和发生的可能性，并作为利益相关者在规划下一个螺旋周期步骤时的输入。
- en: 'Another common misconception about the spiral model is that the development
    direction is one-way and can only spiral *outward*, that is, no backtracking to
    a previous spiral cycle is allowed. This is generally not the case: stakeholders
    always try to make informed decisions based on the information that''s available
    to them at a particular point in time. As the project''s development progresses,
    circumstances may change: new requirements may be introduced or additional pieces
    of previously unknown information may become available. In light of the new information
    that''s available to them, stakeholders may opt to reevaluate prior decisions
    and, in some cases, roll back development to a previous spiral iteration.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 关于螺旋模型的一个常见误解是，开发方向是单向的，只能螺旋向外扩展，即不允许回溯到先前的螺旋周期。这通常不是情况：利益相关者总是试图根据他们在特定时间点可用的信息做出明智的决定。随着项目开发的进展，情况可能会发生变化：可能会引入新的需求，或者可能会出现之前未知的信息。在新的信息面前，利益相关者可能会选择重新评估先前的决策，在某些情况下，可能会回滚开发到先前的螺旋迭代。
- en: Agile
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 敏捷
- en: 'When we talk about agile development, we usually refer to a broader family
    of software development models that were initially proposed during the early 90s.
    Agile is a sort of umbrella term that encompasses not only a set of frameworks
    but also a fairly long list of best practices for software development. If we
    had to come up with a more specific definition for agile, we would probably define
    it as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论敏捷开发时，我们通常指的是90年代初最初提出的一组更广泛的软件开发模型。敏捷是一种涵盖了一组框架以及相当长的软件开发最佳实践列表的伞形术语。如果我们必须为敏捷提供一个更具体的定义，我们可能会这样定义它：
- en: '"Agile development advocates building software in an incremental fashion by
    iterating in *multiple*, albeit relatively, *short* cycles. Making use of self-organizing
    and cross-functional teams, it evolves project requirements and solutions by fostering
    intra-team collaboration."'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: “敏捷开发倡导通过在多个、尽管相对较短、的周期中迭代来增量式地构建软件。利用自我组织和跨职能团队，它通过促进团队内部协作来演进项目需求和解决方案。”
- en: The popularity of agile development and agile frameworks, in particular, skyrocketed
    with the publication of the *Manifesto for Agile Software Development* in 2001 ^([3]).
    At the time of writing this book, agile development practices have become the
    *de facto* standard for the software industry, especially in the field of start-up
    companies.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 随着敏捷开发和敏捷框架，尤其是2001年发布的*敏捷软件开发宣言*的出版，其普及率急剧上升^([3])。在撰写本书时，敏捷开发实践已成为软件行业的*事实标准*，尤其是在初创公司领域。
- en: In the upcoming sections, we will be digging a bit deeper into some of the most
    popular models and frameworks in the agile family. While doing a deep dive on
    each model is outside the scope of this book, a set of additional resources will
    be provided at the end of this chapter if you are interested in learning more
    about the following models.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将深入探讨敏捷家族中最受欢迎的一些模型和框架。虽然对每个模型进行深入研究超出了本书的范围，但如果您想了解更多关于以下模型的信息，本章末尾将提供一些额外的资源。
- en: Lean
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 精益
- en: Lean software development is one of the earliest members of the agile family
    of software development models. It was introduced by Mary and Tom Poppendieck
    in 2003 ^([10]). Its roots go back to the lean manufacturing techniques that were
    introduced by Toyota's production system in the 70s. When applied to software
    development, the model advocates seven key principles.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 精益软件开发是敏捷软件开发模型家族中最早的成员之一。它在2003年由玛丽和汤姆·波普迪克引入^([10])。其根源可以追溯到20世纪70年代丰田生产系统引入的精益制造技术。当应用于软件开发时，该模型倡导七个关键原则。
- en: Eliminate waste
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消除浪费
- en: This is one of the key philosophies of the lean development model. Anything
    that does not directly add value to the final deliverable is considered as a *blocker*
    and must be removed.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这是精益开发模型的关键哲学之一。任何不直接增加最终交付成果价值的东西都被视为*障碍*，必须移除。
- en: 'Typical cases of things that are characterized as waste by this model are as
    follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 该模型被描述为浪费的典型情况如下：
- en: Introduction of non-essential, that is, nice-to-have features when development
    is underway.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开发过程中引入非必需功能，即那些“想要”的功能。
- en: 'Overly complicated decision-making processes that force development teams to
    remain idle while waiting for a feature to be signed off – in other words: *bureaucracy*!'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过于复杂的决策过程迫使开发团队在等待某个功能被批准时保持闲置——换句话说：*官僚主义*！
- en: Unnecessary communication between the various project stakeholders and the development
    teams. This disrupts the focus of the development team and hinders their development
    velocity.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各个项目利益相关者和开发团队之间不必要的沟通。这会干扰开发团队的专注力，并阻碍他们的开发速度。
- en: Create knowledge
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建知识
- en: The development team should never assume that the customers' requirements are
    static. Instead, the assumption should always be that they are dynamic and can
    change over time. Therefore, it is imperative for the development team to come
    up with appropriate strategies to ensure that their view of the world is always
    aligned with the customer's.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 开发团队永远不应该假设客户的需求是静态的。相反，应该始终假设它们是动态的，并且可能会随时间变化。因此，对于开发团队来说，制定适当的策略以确保他们的世界观始终与客户保持一致是至关重要的。
- en: One way to achieve this is by borrowing and implementing some facets of other
    models, such as the iterative model we discussed in the previous section, or by
    tweaking their workflows accordingly so that deliverables are always built in
    an incremental fashion and always with an up-to-date version of the customer's
    requirements.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这一目标的一种方法是通过借鉴和实施其他模型的一些方面，例如我们在上一节中讨论的迭代模型，或者相应地调整他们的工作流程，以确保交付成果始终以增量方式构建，并且始终使用客户要求的最新版本。
- en: Externally acquired knowledge is, of course, only half of the equation; the
    development teams themselves are also another source of knowledge. As teams collaborate
    to deliver a piece of software, they discover that certain approaches and practices
    work better together than others. In particular, some approaches accelerate the
    team's development velocity, while others hinder it. Due to this, it is important
    for teams to capture this bit of tacit knowledge, internalize it, and make it
    available to other teams in the future. One way to achieve this is by making another
    team for the teams to sync up, reflect on their workflows, and discuss any potential
    issues.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，外部获取的知识只是方程的一半；开发团队本身也是知识来源之一。当团队协作交付软件时，他们会发现某些方法和实践比其他方法更有效。特别是，某些方法可以加速团队的开发速度，而另一些则阻碍它。因此，对于团队来说，捕捉这一部分隐性知识，将其内化，并使其在未来对其他团队可用，是非常重要的。实现这一目标的一种方法是为团队创建另一个团队，以便它们可以同步、反思工作流程，并讨论任何潜在问题。
- en: Defer commitment
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暂缓承诺
- en: 'As with all the models in the agile family, the lean model is devoid of any
    attempt to force project stakeholders into making all the required decisions at
    the beginning of the project. The reasoning behind this is quite simple: people
    are more likely to be convinced that change is needed when they have not already
    committed to a particular set of actions.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 与敏捷家族中的所有模型一样，精益模型没有试图强迫项目利益相关者在项目开始时做出所有必要的决定。背后的理由相当简单：当人们没有已经承诺采取特定的一组行动时，他们更有可能相信需要改变。
- en: The lean model actively encourages stakeholders to defer all the important and
    potentially irreversible decisions until a later stage in the project's development.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 精益模型积极鼓励利益相关者在项目的后期阶段再推迟所有重要且可能不可逆转的决定。
- en: Build in quality
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建质量
- en: One of the primary reasons for project delays is undoubtedly the accumulation
    of defects. Defects have a definite impact on the development team's velocity
    as members often need to pause their current work to chase down and fix potentially
    field-critical bugs that were introduced by a previous development iteration.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 项目延误的主要原因无疑是缺陷的累积。缺陷对开发团队的进度有直接影响，因为成员们经常需要暂停他们当前的工作，去追踪和修复由前一个开发迭代引入的潜在现场关键错误。
- en: The lean model prompts engineering teams to aggressively focus on following
    agile practices such as **test-** or **behavior-driven** **development** (**TDD**/**BDD**)
    in an attempt to produce lean, well-tested code with fewer defects. The benefits
    of this recommendation have also been corroborated by research that's been performed
    by Turhan and others ^([13]).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 精益模型促使工程团队积极关注以下敏捷实践，如**测试**或**行为驱动**的**开发**（**TDD**/**BDD**），以期生产出精益、经过良好测试且缺陷更少的代码。这一建议的好处也得到了图尔汉和其他研究人员进行的调查研究的证实 ^([13])。
- en: Deliver fast
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速交付
- en: 'Every engineering team out there would probably agree that they would like
    nothing more than delivering the piece of software they are currently working
    on as fast as possible to the hands of the customer or the end user. The most
    common factors that prevent teams from delivering software fast are as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 每个工程团队都可能同意，他们最希望的是尽可能快地将他们目前正在开发的软件交付给客户或最终用户。阻碍团队快速交付软件的最常见因素如下：
- en: Over-analyzing the business requirements
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过度分析业务需求
- en: Over-engineering the solution to fit those requirements
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过度设计解决方案以满足那些需求
- en: Overloading the development team
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过度负担开发团队
- en: Congruent to the philosophy of lean development, teams must iterate quickly,
    that is, they must build a solution as simple as possible, present it to the target
    customer as early as possible, and collect useful feedback that's used to incrementally
    improve the solution in subsequent iterations.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 符合精益开发的哲学，团队必须快速迭代，也就是说，他们必须尽可能简单构建解决方案，尽可能早地向目标客户展示，并收集有用的反馈，用于在后续迭代中逐步改进解决方案。
- en: Respect and empower people
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尊重并赋权人员
- en: Lean development endeavors to improve the development teams' working environment
    by filtering out unneeded sources of distraction that increase the cognitive load
    on engineers and can eventually lead to burnouts.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 精益开发致力于通过过滤掉增加工程师认知负担的不必要干扰源，来改善开发团队的办公环境，并最终可能导致燃尽。
- en: What's more, by discouraging micro-management and encouraging teams to self-organize,
    team members can feel more motivated and empowered. The Poppendiecks believe that
    engaged and empowered people can be more productive; ergo, they can bring more
    value to the team and, by extension, to the company that they are a part of.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，通过反对微观管理并鼓励团队自我组织，团队成员可以感到更有动力和权力。波彭迪克夫妇认为，参与感和赋权的人员可以更有效率；因此，他们可以为团队带来更多价值，进而为他们的公司带来更多价值。
- en: See and optimize the whole
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看并优化整体
- en: 'In *Lean Software Development: An Agile Toolkit*, Mary and Tom Poppendieck
    use a stream-based analogy to describe the software development process. By this
    definition, each stage of the development process can be treated as a potential
    generator of value (a *value stream*) for the business. The Poppendiecks claim
    that in order to maximize the value that flows through the various stages of development,
    organizations must treat the development process as a sequence of inter-linked
    activities and optimize them as a *whole*.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在《精益软件开发：敏捷工具包》一书中，玛丽和汤姆·波彭迪克使用基于流的类比来描述软件开发过程。根据这个定义，开发过程的每个阶段都可以被视为业务潜在的价值生成器（一个*价值流*）。波彭迪克夫妇声称，为了最大化通过开发各个阶段流动的价值，组织必须将开发过程视为一系列相互关联的活动，并将它们作为一个*整体*进行优化。
- en: This is one of the most common pitfalls that organizations fall into when attempting
    to apply lean thinking concepts. You have probably heard of the old adage *miss
    the forest for the trees*. Many organizations, under the influence of other lean
    model principles such as quick delivery, focus all their efforts on optimizing
    a particular aspect of their development process. To the casual external observer,
    this approach seems to pay off in the short term. In the long term, however, the
    team is vulnerable to the negative side effects of *sub-optimization*.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这是组织在尝试应用精益思维概念时最常陷入的陷阱之一。你可能听说过那句古老的谚语“只见树木，不见森林”。许多组织在其他精益模型原则的影响下，如快速交付，将所有精力都集中在优化其开发过程中的某个特定方面。对于外部的旁观者来说，这种做法似乎在短期内是有效的。然而，从长远来看，团队容易受到*次优化*的负面影响。
- en: 'To understand how sub-optimization can affect the team''s performance in the
    long run, let''s examine a hypothetical scenario: in an attempt to iterate faster,
    the development team takes a few shortcuts, that is, they push out less than stellar
    code or code that is not thoroughly tested. While the code does work, and the
    customer''s requirements are being met, it also increases the complexity of the
    code base with the unavoidable side effect that more defects start creeping into
    the code that is delivered to the customer. Now, the development team is under
    even more pressure to fix the bugs that got introduced while maintaining their
    previous development velocity at the same time. As you can probably deduce, by
    this point, the development team is stuck in a vicious circle, and certainly one
    that is not easy to escape from.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解次优化如何从长远影响团队的表现，让我们考察一个假设的场景：为了加快迭代速度，开发团队采取了一些捷径，也就是说，他们推送了不够出色的代码或未经过充分测试的代码。虽然代码确实可以工作，并且满足了客户的需求，但它也增加了代码库的复杂性，不可避免地产生了副作用，即更多的缺陷开始悄悄地出现在交付给客户的代码中。现在，开发团队面临着更大的压力，需要在保持之前开发速度的同时修复引入的bug。正如你可能推断的那样，到了这个阶段，开发团队已经陷入了恶性循环，并且肯定是一个不容易摆脱的循环。
- en: On the other side of the spectrum, a popular and successful example of applying
    the concepts of whole system optimization in the way that's intended by the lean
    development model is Spotify's *squad-based* framework. Spotify squads are lean,
    cross-functional, multi-disciplined, and self-organizing teams that bring together
    all the people who are needed to take a feature through all the stages of development,
    from its inception to final product delivery.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一端，应用整体系统优化概念的流行且成功的例子是Spotify的*squad-based*框架。Spotify小队是精简的、跨职能的、多学科的、自我组织的团队，将所有需要将一个特性从其构思到最终产品交付的所有开发阶段的人聚集在一起。
- en: Scrum
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Scrum
- en: Scrum is hands-down the most widely known framework of the agile family and
    the go-to solution for many companies, especially the ones working on new products
    or the ones that actively seek to optimize their software development process.
    In fact, Scrum has become so popular that, nowadays, several organizations are
    offering Scrum certification courses. It was co-created by Ken Schwaber and Jeff
    Sutherland and initially presented to ACM's object-oriented programming, systems,
    languages, and applications conference in 1995.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Scrum无疑是敏捷家族中最广为人知的框架，也是许多公司（尤其是那些在开发新产品或积极寻求优化其软件开发流程的公司）的首选解决方案。事实上，Scrum已经变得如此流行，以至于现在有几个组织提供Scrum认证课程。它是由Ken
    Schwaber和Jeff Sutherland共同创建的，最初于1995年在ACM面向对象编程、系统、语言和应用会议中提出。
- en: As a process framework, Scrum is meant to be applied by cross-functional teams
    working on large projects that can be split into smaller chunks of work, where
    each chunk normally takes between two to four weeks – also known as a *sprint*
    in Scrum terminology – to complete.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种流程框架，Scrum旨在由跨职能团队应用于可以分解为更小块工作的大型项目，其中每个小块通常需要两到四周的时间来完成——在Scrum术语中也称为*sprint*。
- en: 'Contrary to the other software development models we''ve discussed so far,
    Scrum does not explicitly advocate a particular design process or methodology.
    Instead, it promotes an empirical, feedback loop type of approach: initially,
    the team comes up with an idea on how to proceed based on the information available
    at the time. The proposed idea is then put to the test for the next sprint cycle
    and feedback is collected. The team then reflects on that feedback, refines the
    approach further, and applies it to the following sprint.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们之前讨论的其他软件开发模型不同，Scrum并没有明确提倡特定的设计过程或方法。相反，它提倡一种经验主义、反馈循环类型的做法：最初，团队基于当时可用的信息提出一个如何进行下去的想法。然后，这个想法在下一个sprint周期中进行测试，并收集反馈。团队随后反思这些反馈，进一步细化方法，并将其应用于下一个sprint。
- en: As more and more sprint cycles go by, the team learns to self-organize so that
    it becomes more efficient at tackling the task at hand. By improving the quality
    of communication between the team members while at the same time reducing distractions,
    teams often observe a boost in the team's output, also known as *team velocity*
    in agile terminology.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 随着越来越多的sprint周期过去，团队学会了自我组织，以便更有效地应对手头的任务。通过提高团队成员之间的沟通质量，同时减少干扰，团队通常会观察到团队产出（在敏捷术语中也称为*团队速度*）的提升。
- en: One important thing to keep in mind is that while this chapter examines Scrum
    from the perspective of a software engineer, the Scrum process and principles
    can also be applied when working on other types of projects that do not involve
    software development. For instance, Scrum can also be used to run marketing campaigns,
    hire personnel, or even tackle construction projects.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的一个重要事项是，虽然本章从软件工程师的角度审视Scrum，但Scrum流程和原则也可以应用于涉及软件开发的其他类型的项目。例如，Scrum也可以用于运行营销活动、招聘人员，甚至处理建设项目。
- en: Scrum roles
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Scrum角色
- en: 'When applying the Scrum framework to a software development team, each member
    can be mapped to one of the following three roles:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 当将Scrum框架应用于软件开发团队时，每个成员都可以映射到以下三个角色之一：
- en: The **Product Owner** (**PO**)
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品负责人** (**PO**)'
- en: The Development Team Member
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发团队成员
- en: The **Scrum Master** (**SM**)
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Scrum Master** (**SM**)'
- en: The official Scrum guide ^([12]), which is freely available to download online
    in over 30 languages, defines the PO as the key stakeholder in a project, that
    is, the person who maximizes the product's value resulting from the work of the
    development team.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 官方的Scrum指南^([12])，可在网上免费下载，超过30种语言，将产品负责人（PO）定义为项目中的关键利益相关者，即最大化开发团队工作成果的产品价值的人。
- en: The primary responsibility of the PO is to manage the project backlog. The backlog
    is just a formal way of referring to the list of tasks that need to be completed
    for a particular project and includes new features, enhancements, or bug fixes
    for upcoming development cycles.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 产品负责人的主要职责是管理项目待办事项。待办事项只是指特定项目需要完成的任务列表的一种正式方式，包括即将到来的开发周期的新功能、增强功能或错误修复。
- en: 'The PO must always make sure that all the backlog entries are described in
    a clear, consistent, and unambiguous way. Furthermore, the backlog''s contents
    is never assumed to be static but should always be assumed to be dynamic: new
    tasks may be introduced while existing tasks may be removed to facilitate changes
    to the project requirements while development is underway. This adds an extra
    responsibility to the role of the PO: they need to be able to respond to such
    changes and reprioritize the backlog accordingly.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 产品负责人（PO）必须始终确保所有待办事项条目都描述得清晰、一致且无歧义。此外，待办事项的内容永远不应被视为静态，而应始终假设为动态：在开发过程中，可能会引入新的任务，同时可能删除现有任务，以方便对项目需求进行更改。这给产品负责人的角色增加了额外的责任：他们需要能够应对此类变化并相应地重新排序待办事项。
- en: 'The development team comprises a set of individuals who implement the tasks
    that have been selected from the backlog. According to the basic tenets of Scrum,
    the team should be as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 开发团队由一组实施从待办事项中选出的任务的个人组成。根据Scrum的基本原则，团队应如下所示：
- en: It should be cross-functional, bringing people together from different disciplines
    and varying skill sets
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该是跨职能的，将来自不同学科和不同技能水平的人聚集在一起
- en: It should not pay attention to the job titles of its members and focus on the
    work that's performed instead
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不应关注其成员的职位名称，而应关注所执行的工作
- en: 'It should be aligned toward a single goal: completing the set of tasks that
    the team committed to at the beginning of each sprint'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该与单一目标保持一致：完成每个冲刺开始时团队承诺的任务集
- en: The last but equally important Scrum role is that of the SM. The SM supports
    both the PO and the development team members by ensuring that everyone has a clear
    understanding of not only the team goals but also the various Scrum processes.
    The SM is also responsible for organizing and running the appropriate Scrum events
    (ceremonies) as and when required.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是Scrum角色，即**Scrum Master**（SM）。SM通过确保每个人都对团队目标以及各种Scrum流程有清晰的理解来支持产品负责人（PO）和开发团队成员。SM还负责根据需要组织和运行适当的Scrum活动（仪式）。
- en: Essential Scrum events
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重要的Scrum事件
- en: Scrum prescribes a sequence of events that are specially designed to aid teams
    in becoming more agile and boosting their performance. Let's take a brief look
    at the list of essential Scrum events for the purpose of software development.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Scrum规定了一系列专门设计来帮助团队变得更加敏捷并提高其性能的事件。让我们简要地看一下软件开发的Scrum基本事件的列表。
- en: The first Scrum event that we will be examining is the *planning session*. During
    planning, the team examines the items from the backlog and commits to a set of
    tasks that the team will be working on during the next sprint.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要考察的第一个Scrum事件是*规划会议*。在规划期间，团队检查待办事项中的项目，并承诺在下一个冲刺期间团队将工作的任务集合。
- en: 'As you probably expect, the team needs to periodically sync up so that all
    the team members are on the same page with respect to the tasks that other team
    members are currently working on. This is facilitated by the daily *stand-up*,
    a *time-boxed* session that usually takes no longer than 30 minutes. Each team
    member speaks in turn and briefly answers the following questions:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所料，团队需要定期同步，以确保所有团队成员对其他团队成员当前正在处理的任务保持一致。这通过每日*站立会议*得以实现，这是一个*时间限制*的会议，通常不超过30分钟。每个团队成员轮流发言，简要回答以下问题：
- en: What was I working on yesterday?
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我昨天在做什么？
- en: What will I be working on today?
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我今天将做什么？
- en: Are there any blockers for completing a particular task?
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成特定任务是否有阻碍因素？
- en: Blockers, if left unresolved, could jeopardize the team's goal for the sprint.
    Therefore, it is of paramount importance to detect blockers as early as possible
    and engage the team members to figure out ways to work around or address them.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未解决，阻碍因素可能会危及团队在冲刺中的目标。因此，尽早检测阻碍因素并让团队成员参与找出绕过或解决它们的方法至关重要。
- en: At the end of a sprint, the team usually holds a *retrospective* session where
    team members *openly* discuss the things that went right, as well as the things
    that went wrong, during the sprint. For each problem that's encountered, the team
    attempts to identify its root cause and propose a series of actions to remedy
    it. The selected actions are applied during the next sprint cycle and their effect
    is re-evaluated in the next retrospective.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在冲刺结束时，团队通常会举行一个*回顾*会议，团队成员*公开*讨论在冲刺期间做得好的事情以及做得不好的事情。对于遇到的每个问题，团队试图确定其根本原因并提出一系列补救措施。选定的措施将在下一个冲刺周期中应用，并在下一个回顾中重新评估其效果。
- en: Kanban
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kanban
- en: Kanban, whose name loosely translates from Japanese as *a visual signal* or
    *a billboard*, is yet another very popular type of agile framework that has been
    reportedly in use at Microsoft since 2004\. One of the iconic features of the
    Kanban model is, of course, the *Kanban board*, a concept outlined by David Anderson's
    2010 book ^([1]) that introduces the idea behind this particular model.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Kanban，其名称从日语中大致翻译为*视觉信号*或*公告板*，是另一种非常流行的敏捷框架，据报道自2004年以来在微软使用。Kanban模型的一个标志性特征当然是*看板板*，这是David
    Anderson在2010年书籍中概述的概念，介绍了这个特定模型背后的理念。
- en: The Kanban board allows team members to visualize the set of items that teams
    are working on, along with their current state. The board is comprised of a series
    of vertically oriented *work lane*s or columns. Each lane has its own *label*
    and a *list* of items or tasks attached to it. As items or tasks are being worked
    on, they *transition* between the various columns of the board until they eventually
    arrive at a column that signals their completion. Completed items are then typically
    removed from the board and *archived* for future reference.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: �看板板允许团队成员可视化正在进行的任务集合及其当前状态。该板由一系列垂直方向的*工作通道*或列组成。每个通道都有自己的*标签*和与之关联的*项目*或*任务*列表。随着项目或任务的处理，它们会在板的各个列之间*过渡*，直到最终到达一个表示其完成的列。完成的项目通常从板上移除并*存档*以供将来参考。
- en: 'The standard lane configuration for software development consists of at least
    the following set of lanes:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发的标准化通道配置至少包括以下集合：
- en: '**Backlog**: A set of tasks to be worked on by the team in the near future'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**待办事项**：团队近期要处理的任务集合'
- en: '**Doing**: The tasks in progress'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进行中**：正在进行的任务'
- en: '**In review**: Work that has been put up for review by other team members'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**审查中**：其他团队成员提交审查的工作'
- en: '**Done**: Items that have been completed'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完成**：已完成的项目'
- en: It is only logical that each team will customize the lane configuration to fit
    their particular development workflow. For example, some teams may include an
    *in test* column to keep track of items undergoing QA checks by another team,
    a *deployed* column to track items that have been deployed to production, and
    even a *blocked* column to specify tasks that cannot proceed without the team
    taking some type of action.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 每个团队根据其特定的开发工作流程定制车道配置是合乎逻辑的。例如，一些团队可能包括一个**测试中**列来跟踪其他团队进行的QA检查的项目，一个**已部署**列来跟踪已部署到生产中的项目，甚至一个**阻塞**列来指定需要团队采取某种行动才能继续的任务。
- en: 'I am sure that most of you will probably already be familiar with the *physical*
    implementation of a Kanban board: a dedicated spot on the office wall filled with
    colorful post-it notes. While local teams tend to enjoy having the board on a
    wall as it makes it quite easy to see what everyone is working on or to identify
    blockers just by walking by the board, this approach obviously cannot support
    partially or fully remote teams. For those use cases, several companies are offering
    the online, digital equivalent of a Kanban board that can be used instead.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信你们中的大多数人可能已经熟悉了Kanban板**物理**实现的模样：办公室墙上一个专门的位置，上面贴满了五彩缤纷的便利贴。虽然本地团队喜欢在墙上放置这样的板子，因为它使得查看每个人正在做什么或通过板子识别阻塞点变得非常容易，但这种方法显然无法支持部分或完全远程的团队。对于这些用例，一些公司正在提供在线、数字化的Kanban板等价物，可以用来替代。
- en: DevOps
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps
- en: DevOps is the last software development model that we will be examining in this
    chapter. Nowadays, more and more organizations endeavor to scale out their systems
    by transitioning from monolithic to **service-oriented architectures** (**SoA**).
    The basic premise behind the DevOps model is that each engineering team owns the
    services they build. This is achieved by fusing development with operations, that
    is, the aspects involved in deploying, scaling, and monitoring services once they
    get deployed to production.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps是我们将在本章中考察的最后一个软件开发模型。如今，越来越多的组织努力通过从单体架构过渡到**面向服务的架构**（**SoA**）来扩展其系统。DevOps模型背后的基本前提是每个工程团队拥有他们所构建的服务。这是通过将开发和运维融合在一起实现的，也就是说，一旦服务部署到生产环境中，就涉及到部署、扩展和监控服务的各个方面。
- en: 'The DevOps model evolved in parallel with the other agile models and was heavily
    influenced by the principles put forward by the lean development model. While
    there is no recommended approach to implementing DevOps (one of the reasons why
    Google came up with SRE in the first place), DevOps advocates tend to gravitate
    toward two different models:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps模型与其他敏捷模型并行发展，并受到了精益开发模型提出的原则的强烈影响。虽然没有推荐实施DevOps的方法（这也是谷歌最初提出SRE的原因之一），但DevOps倡导者往往倾向于两种不同的模型：
- en: '**Culture, Automation, Measurement, and Sharing** (**CAMS**)'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文化、自动化、测量和共享**（**CAMS**）'
- en: The three ways model
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三种方法模型
- en: The CAMS model
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CAMS模型
- en: CAMS was originally invented by Damon Edwards and John Willis. Let's explore
    each one of these terms in a bit more detail.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: CAMS最初是由达蒙·爱德华兹和约翰·威利斯发明的。让我们更详细地探讨一下这些术语。
- en: As with other agile models, corporate **culture** is an integral part of DevOps
    methodology. To this end, Edwards and Willis recommend that engineering teams
    extend the use of practices such as Scrum and Kanban to manage both development
    and operations. Culture-wise, an extremely important piece of advice that Edwards
    and Willis offered is that each company must internally evolve its own culture
    and set of values that suit its unique set of needs instead of simply copying
    them over from other organizations because they just seem to be working in a particular
    context. The latter could lead to what is known as the **Cargo Cult** effect,
    which eventually creates a toxic work environment that can cause issues with employee
    retainment.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他敏捷模型一样，企业**文化**是DevOps方法论的有机组成部分。为此，爱德华兹和威利斯建议工程团队扩展使用诸如Scrum和Kanban等实践来管理开发和运维。在文化方面，爱德华兹和威利斯提供的一条极其重要的建议是，每家公司都必须内部发展适合其独特需求的文化和价值观体系，而不是简单地从其他组织中复制它们，因为它们似乎在特定环境中运作得很好。后者可能导致所谓的**货船文化**效应，最终创造出一个有毒的工作环境，这可能导致员工留存问题。
- en: 'The second tenet of the CAMS model is *automation*. As we discussed in a previous
    section, automation is all about eliminating potential human sources of errors
    when executing tedious, repetitive tasks. In the context of DevOps, this is usually
    accomplished by doing the following:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: CAMS模型的第二个原则是**自动化**。正如我们在前面的部分所讨论的，自动化主要是关于在执行乏味、重复的任务时消除潜在的人为错误来源。在DevOps的背景下，这通常通过以下方式实现：
- en: Deploying a CI/CD system to ensure that all the changes are thoroughly tested
    before they get pushed to production
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署CI/CD系统以确保所有更改在推送到生产之前都经过彻底测试
- en: Treating infrastructure as code and managing it as such, that is, storing it
    in a **version control system** (**VCS**), having engineers review and audit infrastructure
    changes, and finally deploying them via tools such as Chef ([https://www.chef.io/](https://www.chef.io/)),
    puppet ([https://puppet.com/](https://puppet.com/)), Ansible ([https://www.ansible.com/](https://www.ansible.com/)),
    and Terraform ([https://www.terraform.io/](https://www.terraform.io/))
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将基础设施视为代码并按此方式管理，即将其存储在**版本控制系统**（**VCS**）中，让工程师审查和审计基础设施变更，最后通过Chef ([https://www.chef.io/](https://www.chef.io/))、puppet
    ([https://puppet.com/](https://puppet.com/))、Ansible ([https://www.ansible.com/](https://www.ansible.com/))和Terraform
    ([https://www.terraform.io/](https://www.terraform.io/))等工具进行部署。
- en: The letter **M** in CAMS stands for **measurement**. Being able to not only
    capture service operation metrics but also act on them offers two significant
    advantages to engineering teams. To begin with, the team can always be apprised
    of the health of the services they manage. When a service misbehaves, the metrics
    monitoring system will fire an alert and some of the team members will typically
    get paged. When this happens, having access to a rich set of metrics allows teams
    to quickly assess the situation and attempt to remedy any issue.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: CAMS模型中的字母**M**代表**测量**。能够不仅捕捉服务操作指标，还能对其采取行动，为工程团队提供了两个显著的优势。首先，团队可以始终了解他们所管理的服务的健康状况。当服务出现异常时，指标监控系统将触发警报，并且通常会有团队成员被通知。在这种情况下，拥有丰富的指标集可以让团队快速评估情况并尝试解决问题。
- en: 'Of course, monitoring is not the only use case for measuring: services that
    are managed by DevOps teams are, in most cases, long-lived and therefore bound
    to evolve or expand over time; it stands to reason that teams will be expected
    to improve on and optimize the services they manage. High-level performance metrics
    help identify services with a high load that need to be scaled, while low-level
    performance metrics will indicate slow code paths that need to be optimized. In
    both cases, measuring can be used as a feedback loop to the development process
    to aid teams in deciding what to work on next.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，监控并不是测量的唯一用例：由DevOps团队管理的服务在大多数情况下都是长期存在的，因此随着时间的推移必然会发展和扩展；从逻辑上讲，团队将需要改进和优化他们所管理的服务。高级性能指标有助于识别需要扩展的高负载服务，而低级性能指标将指示需要优化的缓慢代码路径。在这两种情况下，测量都可以用作反馈循环，帮助团队决定下一步的工作内容。
- en: 'The last letter in the CAMS model stands for **sharing**. The key ideas here
    are as follows:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: CAMS模型中的最后一个字母代表**共享**。关键思想如下：
- en: To promote visibility throughout the organization
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了在整个组织中提高可见性
- en: To encourage and facilitate knowledge sharing across teams
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼓励和促进团队间的知识共享
- en: Visibility is quite important for all stakeholders. First of all, it allows
    all the members of the organization to be constantly aware of what other teams
    are currently working on. Secondly, it offers engineers a clear perspective of
    how each team's progress is contributing to the long-term strategic goals of the
    organization. One way to achieve this is by making the team's Kanban board accessible
    to other teams in the organization.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 可见性对于所有利益相关者都至关重要。首先，它使组织中的所有成员都能持续了解其他团队目前正在做什么。其次，它为工程师提供了一个清晰的视角，了解每个团队的进展如何有助于组织的长期战略目标。实现这一目标的一种方法是将团队的Kanban板对组织中的其他团队开放。
- en: The model inventors encourage teams to be transparent about their internal processes.
    By allowing information to flow freely across teams, *information silos* can be
    prevented. For instance, senior teams will eventually evolve their own streamlined
    deployment process. By making this knowledge available to other, less senior,
    teams, they can directly exploit the learnings of more seasoned teams without
    having to reinvent the wheel. Apart from this, teams will typically use a set
    of internal dashboards to monitor the services they manage. There is a definite
    benefit in making these public to other teams, especially ones that serve as upstream
    consumers for those services.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 模型发明者鼓励团队对其内部流程保持透明。通过允许信息在团队间自由流动，可以防止*信息孤岛*的形成。例如，高级团队最终会发展出自己的一套简化部署流程。通过将这一知识提供给其他不那么高级的团队，他们可以直接利用经验更丰富的团队的学习成果，而无需重新发明轮子。除此之外，团队通常会使用一套内部仪表板来监控他们管理的服务。将这些仪表板公开给其他团队，特别是那些作为这些服务上游消费者的团队，无疑是有益的。
- en: At this point, it is important to note that, in many cases, transparency extends
    beyond the bounds of the company. Lots of companies are making a subset of their
    ops metrics available to their customers by setting up status pages, while others
    go even further and publish detailed postmortems on outages.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，重要的是要注意，在许多情况下，透明度超出了公司的界限。许多公司通过设置状态页面，将它们操作指标的一部分提供给客户，而其他公司则更进一步，发布详细的故障后分析。
- en: The three ways model
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 三种方式模型
- en: 'The three ways model is based on the ideas of Gene Kim, Kevin Behr, George
    Spafford ^([8]), and other lean thinkers such as Michael Orzen ^([9]). The model
    distills the concept of DevOps into three primary principles, or *ways*:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 三种方式模型基于Gene Kim、Kevin Behr、George Spafford^([8])和其他精益思想家如Michael Orzen^([9])的想法。该模型将DevOps的概念提炼为三个主要原则，或*方式*：
- en: Systems thinking and workflow optimization
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统思维和工作流程优化
- en: Amplifying feedback loops
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 放大反馈循环
- en: Culture of continuous experimentation and learning
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续实验和学习的文化
- en: '**Systems thinking** implies that the development team takes a holistic approach
    to software: in addition to tackling software development, teams are also responsible
    for operating/managing the systems that the software gets deployed to and establishing
    baselines for not only the target system''s behavior but also for the expected
    behavior of other systems that depend on it:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '**系统思维**意味着开发团队对软件采取整体方法：除了解决软件开发问题外，团队还负责操作/管理软件部署到的系统，并建立目标系统的行为基准，以及依赖它的其他系统的预期行为基准：'
- en: '![](img/a72468cd-b6a1-464a-9d8b-d177d9c3dca3.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a72468cd-b6a1-464a-9d8b-d177d9c3dca3.png)'
- en: Figure 5: Thinking of development as an end-to-end system where work flows from
    the business to the customer/end user
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图5：将开发视为一个端到端系统，其中工作从业务流向客户/最终用户
- en: The preceding diagram represents this approach as a unidirectional sequence
    of steps that the engineering team executes to deliver a working feature to the
    end user or customer in a way that does not cause any disruption to existing services.
    At this stage, the team's main focus is to optimize the end-to-end delivery process
    by identifying and removing any bottlenecks that hinder the flow of work between
    the various steps.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图表将这种方法表示为工程团队执行的单向步骤序列，以向最终用户或客户交付一个工作的功能，而不会对现有服务造成任何干扰。在这一阶段，团队的主要焦点是通过识别和消除任何阻碍工作流程在各个步骤之间流动的瓶颈来优化端到端交付过程。
- en: 'Under the first principle, teams attempt to reduce the number of defects that
    flow downstream. Nevertheless, defects do occasionally slip through. This is where
    the second principle comes into play. It introduces *feedback loops* that enable
    information to flow backward, as shown in the following diagram, that is, from
    right to left. By themselves, however, feedback loops are not enough; they must
    also serve as amplification points to ensure that the team members are forced
    to act on incoming information in a *timely* fashion. For example, an incoming
    alert (*feedback loop*) will trigger a person from the team who is on call to
    get paged (*amplification*) so as to resolve an issue that affects production:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一原则下，团队试图减少流向下游的缺陷数量。然而，缺陷偶尔还是会漏网。这就是第二原则发挥作用的地方。它引入了*反馈循环*，使得信息能够反向流动，如图所示，即从右向左。然而，仅仅反馈循环是不够的；它们还必须作为放大点，确保团队成员能够及时地对传入的信息采取行动。例如，一个传入的警报（*反馈循环*）将触发团队中值班的人被呼叫（*放大*），以便解决影响生产的某个问题：
- en: '![](img/d1b544e2-a140-4313-88f1-9ea42788533a.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d1b544e2-a140-4313-88f1-9ea42788533a.png)'
- en: Figure 6: Utilizing feedback loops to allow information to flow backward
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图6：利用反馈循环允许信息反向流动
- en: The final principle, and the one that most agile models are imbued with, has
    to do with fostering a company *culture* that allows people to pursue experiments
    and improvement ideas that may or may not pan out in the end as long as they share
    what they've learned with their colleagues. The same mindset also applies when
    dealing with incidents that have adverse effects on production systems. For instance,
    by holding blameless postmortems, the team members can outline the root causes
    of an outage in a way that doesn't put pressure on the peers whose actions caused
    the outage and, at the same time, disseminate the set of steps and knowledge that
    were acquired by resolving the issue.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个原则，也是大多数敏捷模型所蕴含的原则，与培养一种公司*文化*有关，这种文化允许人们追求可能或可能不会最终成功的实验和改进想法，只要他们与同事分享他们所学的知识。同样的心态也适用于处理对生产系统产生不利影响的意外事件。例如，通过举行无责后事分析，团队成员可以概述停电的根本原因，而不会对导致停电的同事施加压力，同时，传播解决该问题所获得的一系列步骤和知识。
- en: Summary
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Through the course of this chapter, we briefly discussed the different types
    of roles that you may encounter when working with companies of various sizes,
    as well as the special set of skills that each role depends on.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的讨论过程中，我们简要介绍了在与其他各种规模的公司合作时可能遇到的不同类型角色，以及每个角色所依赖的特殊技能集。
- en: We started by examining a broad list of popular models, methodologies, and frameworks
    for delivering software, ranging from the traditional models that advocate a top-bottom
    approach (waterfall, iterative enhancement) to agile models that are better suited
    for the fast-paced and constantly changing environment that contemporary organizations
    operate in.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先检查了一系列流行的模型、方法和框架，这些模型和框架用于交付软件，从主张自上而下方法的传统模型（瀑布、迭代增强）到更适合当代组织快速变化环境的敏捷模型。
- en: By reaching the end of this chapter, you should have acquainted yourself with
    the pros and cons of each model and the situations where each model should be
    applied. I sincerely hope that this knowledge will prove useful the next time
    you need to decide on which software development model to use for your next project.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 到达本章的结尾，你应该已经熟悉了每种模型的优缺点以及每种模型应该应用的情况。我真诚地希望这些知识将在你需要决定为下一个项目选择哪种软件开发模型时派上用场。
- en: Last but not least, we should always keep in mind that the cornerstone of the
    software engineering process is the actual *production of high-quality software*! In
    the next chapter, we will put on our engineering hat and discuss approaches for
    writing clean, organized, and easy-to-maintain code using Go.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们应该始终牢记，软件工程过程的基础是实际*生产高质量的软件*！在下一章中，我们将戴上工程师的帽子，讨论使用Go编写干净、有组织且易于维护的代码的方法。
- en: Questions
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the definition of software engineering?
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 软件工程的定义是什么？
- en: What are some of the questions that every SWE should be able to answer?
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个软件工程师都应该能够回答哪些问题？
- en: Compare the role of an SWE and an SRE. What are the key differences between
    the two roles?
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 比较SWE和SRE的角色。这两个角色之间有哪些关键区别？
- en: Name some of the deficiencies of the waterfall model. Explain how the iterative
    enhancement model attempts to address those deficiencies.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列举瀑布模型的一些缺陷。解释迭代增强模型如何试图解决这些缺陷。
- en: What are the most common sources of waste according to the lean development
    model?
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据精益开发模型，最常见的浪费来源是什么？
- en: Provide an example where focusing all the optimization efforts on a single step
    of the development process can have a negative effect on the efficiency of the
    end-to-end process.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供一个例子，说明将所有优化努力集中在开发过程的单个步骤上可能会对端到端过程的效率产生负面影响。
- en: What are the key responsibilities of the PO and the SM in the Scrum framework?
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Scrum 框架中，产品负责人（PO）和敏捷大师（SM）的关键职责是什么？
- en: What is the role of retrospectives in Scrum? What topics should the team be
    discussing and what should be the expected outcome of each retrospective session?
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Scrum 中，回顾的作用是什么？团队应该讨论哪些主题，以及每个回顾会议的预期结果是什么？
- en: Why are automation and measuring important when following the DevOps model?
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在遵循 DevOps 模型时，为什么自动化和度量很重要？
- en: You are working for ACME Gaming System, a company with the vision to disrupt
    the already *mature* and *highly competitive* gaming console market. To this end,
    the company has partnered with Advanced GPU Devices, a well-known graphics chip
    manufacturer, to prototype a new GPU design that *should* allow the upcoming gaming
    console to blow competitor consoles out of the water. Your task, as the project's
    lead engineer, is to design and build the software that will power the new console.
    Which software development model would you choose? Explain the reasoning behind
    your decision.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你在 ACME 游戏系统公司工作，该公司愿景是颠覆已经*成熟*和*高度竞争*的游戏机市场。为此，公司已与知名图形芯片制造商高级 GPU 设备公司合作，原型设计一种新的
    GPU，该设计*应该*使即将推出的游戏机在竞争对手的游戏机上脱颖而出。作为项目的首席工程师，你的任务是设计和构建将驱动新控制台软件。你会选择哪种软件开发模型？解释你做出决定的原因。
- en: Further reading
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Anderson, David: *Kanban: Successful Evolutionary Change in Your Technology
    Business*: Blue Hole Press, 2010 — ISBN 0984521402 ([https://www.worldcat.org/title/kanban-successful-evolutionary-change-in-your-technology-business/oclc/693773272](https://www.worldcat.org/title/kanban-successful-evolutionary-change-in-your-technology-business/oclc/693773272)).'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安德森，大卫：*看板：在您的技术业务中实现成功的进化变革*：蓝洞出版社，2010 — ISBN 0984521402 ([https://www.worldcat.org/title/kanban-successful-evolutionary-change-in-your-technology-business/oclc/693773272](https://www.worldcat.org/title/kanban-successful-evolutionary-change-in-your-technology-business/oclc/693773272)).
- en: 'Basili, R.; Turner, J.: *Iterative Enhancement: A Practical Technique for Software
    Development*. In: *IEEE Transactions on Software Engineering* Vol. 1 (1975), pp.
    390–396.'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 巴西利，R.；特纳，J.：*迭代增强：软件开发的一种实用技术*。在：*IEEE 软件工程 Transactions* 第 1 卷 (1975)，第 390–396
    页。
- en: 'Beck, Kent; Beedle, Mike; Bennekum, Arie van; Cockburn, Alistair; Cunningham,
    Ward; Fowler, Martin; Grenning, James; Highsmith, Jim; et al.: *Manifesto for
    Agile Software Development*.'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 贝克，肯特；比德尔，迈克；本内库姆，阿rie van；科克本，阿利斯泰尔；坎宁安，沃德；福勒，马丁；格林宁，詹姆斯；海史密斯，吉姆；等：*敏捷软件开发宣言*。
- en: 'Beyer, Betsy; Jones, Chris; Petoff, Jennifer; Murphy, Niall Richard: *Site
    Reliability Engineering: How Google Runs Production Systems*. ([https://landing.google.com/sre/sre-book/toc/index.html](https://landing.google.com/sre/sre-book/toc/index.html)) ([https://www.worldcat.org/title/site-reliability-engineering/oclc/1112558638](https://www.worldcat.org/title/site-reliability-engineering/oclc/1112558638)).'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 比耶，贝齐；琼斯，克里斯；佩托夫，詹妮弗；墨菲，尼尔·理查德：*站点可靠性工程：谷歌如何运行生产系统*。([https://landing.google.com/sre/sre-book/toc/index.html](https://landing.google.com/sre/sre-book/toc/index.html)) ([https://www.worldcat.org/title/site-reliability-engineering/oclc/1112558638](https://www.worldcat.org/title/site-reliability-engineering/oclc/1112558638)).
- en: 'Boehm, B: *A Spiral Model of Software Development and Enhancement*. In: *SIGSOFT
    Softw. Eng. Notes* Vol. 11\. New York, NY, USA, ACM (1986), Nr. 4, pp. 14–24.'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 博伊姆，B：*软件开发与增强的螺旋模型*。在：*SIGSOFT 软件工程笔记* 第 11 卷。纽约，纽约，美国，ACM (1986)，第 4 期，第 14–24
    页。
- en: 'Constantine, L.: *Beyond Chaos: The Expert Edge in Managing Software Development*:
    Addison-Wesley Professional, 2001 — ISBN 9780201719604 ([https://www.worldcat.org/title/beyond-chaos-the-expert-edge-in-managing-software-development/oclc/46713128](https://www.worldcat.org/title/beyond-chaos-the-expert-edge-in-managing-software-development/oclc/46713128)).'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 康斯坦丁，L.：*超越混沌：在管理软件开发中的专家优势*：Addison-Wesley 专业出版社，2001 — ISBN 9780201719604
    ([https://www.worldcat.org/title/beyond-chaos-the-expert-edge-in-managing-software-development/oclc/46713128](https://www.worldcat.org/title/beyond-chaos-the-expert-edge-in-managing-software-development/oclc/46713128)).
- en: 'IEEE: IEEE Standard Glossary of Software Engineering Terminology: IEEE; IEEE,
    1990.'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IEEE：IEEE软件工程术语标准词汇表：IEEE；IEEE，1990年。
- en: 'Kim, G.; Behr, K.; Spafford, G.: *The Phoenix Project: A Novel about IT, DevOps,
    and Helping Your Business Win*: IT Revolution Press, 2018 — ISBN 9781942788294
    ([https://www.worldcat.org/title/phoenix-project-a-novel-about-it-devops-and-helping-your-business-win/oclc/1035062278](https://www.worldcat.org/title/phoenix-project-a-novel-about-it-devops-and-helping-your-business-win/oclc/1035062278)).'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Kim, G.; Behr, K.; Spafford, G.: *《凤凰项目：关于IT、DevOps和帮助您的企业获胜的小说》*：IT革命出版社，2018
    — ISBN 9781942788294 ([https://www.worldcat.org/title/phoenix-project-a-novel-about-it-devops-and-helping-your-business-win/oclc/1035062278](https://www.worldcat.org/title/phoenix-project-a-novel-about-it-devops-and-helping-your-business-win/oclc/1035062278)).'
- en: 'Orzen, M. A.; Paider, T. A.: *The Lean IT Field Guide: A Roadmap for Your Transformation*:
    Taylor and Francis, 2015 — ISBN 9781498730389 ([https://www.worldcat.org/title/lean-it-field-guide/oclc/1019734287](https://www.worldcat.org/title/lean-it-field-guide/oclc/1019734287)).'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Orzen, M. A.; Paider, T. A.: *《精益IT领域指南：您的转型路线图》*：泰勒弗朗西斯出版社，2015 — ISBN 9781498730389
    ([https://www.worldcat.org/title/lean-it-field-guide/oclc/1019734287](https://www.worldcat.org/title/lean-it-field-guide/oclc/1019734287)).'
- en: 'Poppendieck, Mary; Poppendieck, Tom: *Lean Software Development: An Agile Toolkit*.
    Boston, MA, USA: Addison-Wesley Longman Publishing Co., Inc., 2003 — ISBN 0321150783
    ([https://www.worldcat.org/title/lean-software-development-an-agile-toolkit/oclc/868260760](https://www.worldcat.org/title/lean-software-development-an-agile-toolkit/oclc/868260760)).'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Poppendieck, Mary; Poppendieck, Tom: *《精益软件开发：敏捷工具箱》*。波士顿，马萨诸塞州，美国：阿迪生-韦斯利朗曼出版社，2003
    — ISBN 0321150783 ([https://www.worldcat.org/title/lean-software-development-an-agile-toolkit/oclc/868260760](https://www.worldcat.org/title/lean-software-development-an-agile-toolkit/oclc/868260760))。'
- en: 'Royce, W.: *Managing the development of large software systems: concepts and
    techniques*. In: *Proc. IEEE WESTCON, Los Angeles* (1970), pp. 1–9\. — Reprinted
    in *Proceedings* of the Ninth International Conference on Software Engineering,
    March 1987, pp. 328–338.'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Royce, W.: *《管理大型软件开发：概念和技术》*。在：*IEEE WESTCON进程，洛杉矶*（1970年），第1–9页。— 在1987年3月第九届国际软件工程会议的《论文集》中重印，第328–338页。'
- en: 'Schwaber, Ken; Sutherland, Jeff: *The Scrum Guide* (2014).'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Schwaber, Ken; Sutherland, Jeff: *《敏捷指南》*（2014年）。'
- en: 'Turhan, Burak; Layman, Lucak; Diep, Madeline; Shull, Forrst; Erdogmus, Hakan:
    *How Effective is Test-Driven Development**?* In: Wilson, G.; Orham, A. (publisher):
    *Making software: what really works, and why we believe it*: ISBN 978-0596808327
    ([https://www.worldcat.org/title/making-software-what-really-works-and-why-we-believe-it/oclc/836148043](https://www.worldcat.org/title/making-software-what-really-works-and-why-we-believe-it/oclc/836148043)),
    S. 207–219.'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Turhan, Burak; Layman, Lucak; Diep, Madeline; Shull, Forrst; Erdogmus, Hakan:
    *《测试驱动开发的有效性**？》* 在：Wilson, G.; Orham, A. (出版社)：*《制作软件：真正有效的原因以及我们为什么相信它》*：ISBN
    978-0596808327 ([https://www.worldcat.org/title/making-software-what-really-works-and-why-we-believe-it/oclc/836148043](https://www.worldcat.org/title/making-software-what-really-works-and-why-we-believe-it/oclc/836148043))，第207–219页。'
