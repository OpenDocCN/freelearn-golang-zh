- en: An Introduction to System Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统编程简介
- en: This chapter is an introduction to system programming, exploring a range of
    topics from its original definition to how it has shifted in time with system
    evolution. This chapter provides some basic concepts and an overview of Unix and
    its resources, including the kernel and the **application programming interfaces** (**API**).
    Many of these concepts are defined here and are used in the rest of the book.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是系统编程的介绍，探讨了从最初定义到随着系统演变而发生变化的一系列主题。本章提供了一些基本概念和Unix及其资源的概述，包括内核和应用程序编程接口（API）。这些概念中的许多是在这里定义的，并在本书的其余部分中使用。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: What is system programming?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是系统编程？
- en: Application programming interfaces
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序编程接口
- en: Understanding how the protection ring works
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解保护环如何工作
- en: An overview of system calls
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统调用概述
- en: The POSIX standard
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: POSIX标准
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter does not require you to install any special software if you're
    on Linux.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用Linux，则本章不需要您安装任何特殊软件。
- en: 'If you are a Windows user, you can install the **Windows Subsystem for Linux**
    (**WSL**). Follow these steps in order to install WSL:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是Windows用户，可以安装Windows子系统用于Linux（WSL）。按照以下步骤安装WSL：
- en: 'Open PowerShell as administrator and run the following:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以管理员身份打开PowerShell并运行以下命令：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Restart your computer when prompted.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示时重新启动计算机。
- en: Install your favorite Linux distribution from the Microsoft Store.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Microsoft Store安装您喜欢的Linux发行版。
- en: Beginning with system programming
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始系统编程
- en: Over the years, the IT landscape has shifted dramatically. Multicore CPUs that
    challenge the Von Neumann machine, the internet, and distributed systems are just
    some of the changes that occurred in the last 30 years. So, where does system
    programming stand in this landscape?
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，IT领域发生了巨大变化。挑战冯·诺伊曼机的多核CPU、互联网和分布式系统只是过去30年发生的一些变化。那么，系统编程在这个领域中处于什么位置呢？
- en: Software for software
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为软件而设计的软件
- en: Let's start with the standard textbook definition first.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先从标准教科书的定义开始。
- en: System programming (or systems programming) is the activity of programming computer
    system software. The primary distinguishing characteristic of system programming
    when compared to application programming is that application programming aims
    to produce software that provides services directly to the user (for example,
    a word processor), whereas system programming aims to produce software and software
    platforms that provide services to other software, and are designed to work in
    performance-constrained environments, for example, operating systems, computational
    science applications, game engines and AAA video games, industrial automation,
    and software as a service applications.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 系统编程（或系统编程）是编程计算机系统软件的活动。与应用程序编程相比，系统编程的主要区别特征在于，应用程序编程旨在生产直接为用户提供服务的软件（例如，文字处理器），而系统编程旨在生产为其他软件提供服务的软件和软件平台，并且设计为在性能受限的环境中工作，例如操作系统、计算科学应用程序、游戏引擎和AAA视频游戏、工业自动化和软件即服务应用程序。
- en: 'The definition highlights two main concepts of what system applications are as
    follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 该定义突出了系统应用程序的两个主要概念如下：
- en: Software that is used by other software, not directly by the final user.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 被其他软件使用的软件，而不是直接由最终用户使用。
- en: The software is hardware aware (it knows how the hardware works), and is oriented
    toward performance.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件具有硬件意识（它知道硬件如何工作），并且面向性能。
- en: This makes it possible to easily recognize as system software operating system
    kernels, hardware drivers, compilers, and debuggers, and not as system software,
    a chat client, or a word processor.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得很容易将操作系统内核、硬件驱动程序、编译器和调试器等系统软件识别为系统软件，而不是系统软件、聊天客户端或文字处理器。
- en: Historically, system programs were created using Assembly and C. Then came the
    shells and the scripting languages that were used to tie together the functionality
    offered by system programs. Another characteristic of system languages was the
    control of the memory allocation.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 从历史上看，系统程序是使用汇编语言和C创建的。然后出现了用于将系统程序提供的功能联系在一起的shell和脚本语言。系统语言的另一个特征是对内存分配的控制。
- en: Languages and system evolution
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语言和系统演变
- en: In the last decade, scripting languages gained popularity to the point at which
    some had significant performance improvement and entire systems were built with
    them. For example, let's just think about the V8 Engine for JavaScript and the
    PyPy implementation of Python, which dramatically shifted the performance of these
    languages.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的十年中，脚本语言变得越来越受欢迎，以至于一些脚本语言有了显著的性能改进，并且整个系统都是用它们构建的。例如，让我们想一想JavaScript的V8引擎和Python的PyPy实现，它们显著改变了这些语言的性能。
- en: Other languages, such as Go, proved that garbage collection and performance
    are not mutually exclusive. In particular, Go managed to replace its own memory
    allocator written in C with a native version written in Go in release 1.5, improving
    it to the point where the performance was comparable.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 其他语言，如Go，证明了垃圾收集和性能并不是互斥的。特别是，Go在1.5版中成功用Go编写的本地版本替换了C编写的内存分配器，将性能提高到可比较的水平。
- en: 'In the meantime, systems started to get distributed and the applications started
    to get shipped in containers, orchestrated by other system software, such as **Kubernetes**.
    These systems are meant to sustain huge throughput and achieve it in two main
    ways:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，系统开始变得分布式，应用程序开始以容器的形式进行部署，由其他系统软件（例如Kubernetes）进行编排。这些系统旨在维持巨大的吞吐量，并通过两种主要方式实现：
- en: By scaling—augmenting the number or the resources of the machines that are hosting
    the system
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过扩展-增加托管系统的机器数量或资源
- en: By optimizing the software in order to be more resource effective
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过优化软件以提高资源利用效率
- en: System programming and software engineering
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统编程和软件工程
- en: Some of the practices of system programming—such as having an application that
    is tied to the hardware, performance oriented, and working on an environment that
    is resource constrained—are an approach that can also be valid when building distributed
    systems, where constraining resource usage allows the reduction of the number
    of instances needed. It looks like system programming is a good way of addressing
    generic software engineering problems.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 系统编程的一些实践——比如将应用程序与硬件绑定、以性能为导向、在资源受限的环境中工作——是一种在构建分布式系统时也可以有效的方法，其中限制资源使用可以减少所需的实例数量。看起来系统编程是解决通用软件工程问题的好方法。
- en: This means that learning the concept of system programming with regards to using
    the resource of the machine efficiently—from memory usage to filesystem access—will
    be useful when building any type of application.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着学习系统编程的概念，关于如何有效地使用机器资源——从内存使用到文件系统访问——将有助于构建任何类型的应用程序。
- en: Application programming interfaces
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序编程接口
- en: APIs are series subroutine definitions, communication protocols, and tools for
    building software. The most important aspects of an API are the functionalities
    that it offers, combined with its documentation, which facilitates the user in
    the usage and implementation of the software itself in another software. An API
    can be the interface that allows an application software to use a system software.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: API是一系列子例程定义、通信协议和构建软件的工具。API最重要的方面是它提供的功能，以及它的文档，这些文档可以帮助用户使用和实现软件在另一个软件中的使用。API可以是允许应用软件使用系统软件的接口。
- en: 'An API usually has a specific release policy that is meant to be used by a
    specific group of recipients. This can be the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: API通常有一个特定的发布政策，旨在供特定的接收者使用。这可以是以下内容：
- en: Private and for internal use only
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 私有的，仅供内部使用。
- en: Partner and usable by determined groups only—this may include companies that
    want to integrate the service with theirs
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合作伙伴和可由确定的群体使用——这可能包括希望将服务与自己的公司整合的公司
- en: Public and available for every user
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公开并可供每个用户使用
- en: Types of APIs
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API的类型
- en: We'll see that there are several types of APIs, from the ones used to make different
    application software work together, to the inner ones exposed by the operating
    system to other software.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到有几种类型的API，从用于使不同的应用软件一起工作的API，到操作系统向其他软件公开的内部API。
- en: Operating systems
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作系统
- en: An API can specify how to interface an application and the operating system.
    For instance, Windows, Linux, and macOS have an interface that makes it possible
    to operate with the filesystem and files.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: API可以指定如何与应用程序和操作系统进行接口。例如，Windows、Linux和macOS都有一个接口，可以操作文件系统和文件。
- en: Libraries and frameworks
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 库和框架
- en: The API related to a software library describes and prescribes (provides instructions
    on how to use it) how each of its elements should behave, including the most common
    error scenarios. The behavior and interfaces of the API is usually referred to
    as **library specification**, while the library is the implementation of the rules
    described in such specification. Libraries and frameworks are usually language
    bound, but there are some tools that make it possible to use a library in a different
    language. You can use C code in Go using CGO, and in Python you can use CPython.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 与软件库相关的API描述并规定（提供如何使用它的说明）其每个元素应该如何行为，包括最常见的错误场景。API的行为和接口通常被称为**库规范**，而库是这种规范中描述的规则的实现。库和框架通常是语言绑定的，但也有一些工具可以使库在不同的语言中使用。你可以使用CGO在Go中使用C代码，在Python中你可以使用CPython。
- en: Remote APIs
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 远程API
- en: These make it possible to manipulate remote resources using specific standards
    for communication that allow different technologies to work together, regardless
    of the language or platform. A good example is the **Java Database Connectivity** (**JDBC**)
    API, which allows querying many different types of databases with the same set
    of functions, or the Java remote method invocation API (Java RMI), which allows
    the use of remote functions as if they were local.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这些使得可以使用特定的通信标准来操作远程资源，这些标准允许不同的技术一起工作，无论语言或平台如何。一个很好的例子是**Java数据库连接**（**JDBC**）API，它允许使用相同的函数查询许多不同类型的数据库，或者Java远程方法调用API（Java
    RMI），它允许像本地函数一样使用远程函数。
- en: Web APIs
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web API
- en: 'Web APIs are interfaces that define a series of specifications about the protocol
    used, message encoding, and available endpoints with their expected input and
    output values. There are two main paradigms for this kind of API—REST and SOAP:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Web API是定义有关使用的协议、消息编码和可用端点及其预期输入和输出值的一系列规范的接口。这种API有两种主要的范式——REST和SOAP：
- en: 'REST APIs have the following characteristics:'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST API具有以下特点：
- en: They treat data as a resource.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们将数据视为资源。
- en: Each resource is identified by a URL.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个资源都由URL标识。
- en: The type of operation is specified by the HTTP method.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作类型由HTTP方法指定。
- en: 'SOAP protocols have the following characteristics:'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SOAP协议具有以下特点：
- en: They are defined by the W3C standard.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们由W3C标准定义。
- en: XML is the only encoding used for messages.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XML是消息的唯一编码方式。
- en: They use a series of XML schema to verify the data.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们使用一系列XML模式来验证数据。
- en: Understanding the protection ring
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解保护环
- en: The **protection ring**, also referred to as **hierarchical protection domains**, is
    the mechanism used to protect a system against failure. Its name is derived from
    the hierarchical structure of its levels of permission, represented by concentric
    rings, with privilege decreasing when moving to the outside rings. Between each
    ring there are special gates that allow the outer ring to access the inner ring
    resources in a restricted manner.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**保护环**，也称为**分层保护域**，是用于保护系统免受故障的机制。它的名称源自其权限级别的分层结构，由同心圆环表示，当移动到外部环时，特权会减少。在每个环之间有特殊的门，允许外部环以受限的方式访问内部环的资源。'
- en: Architectural differences
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构差异
- en: The number and order of rings depend on the CPU architecture. They are usually
    numbered with decreasing privilege, making ring 0 the most privileged one. This
    is true for i386 and x64 architecture that use four rings (from ring 0 to ring
    3) but it's not true for ARM, which uses reverse order (from EL3 to EL0). Most
    operating systems are not using all four levels; they end up using a two level
    hierarchy—user/application (ring 3) and kernel (ring 0).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 环的数量和顺序取决于CPU架构。它们通常以权限降低的顺序编号，使ring 0成为最具特权的环。这对于使用四个环（从ring 0到ring 3）的i386和x64架构是正确的，但对于使用相反顺序（从EL3到EL0）的ARM架构是不正确的。大多数操作系统不使用所有四个级别；它们最终使用两级层次结构—用户/应用程序（ring
    3）和内核（ring 0）。
- en: Kernel space and user space
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内核空间和用户空间
- en: 'A software that runs under an operating system will be executed at user (ring
    3) level. In order to access the machine resources, it will have to interact with
    the operating system kernel (that runs at ring 0). Here''s a list of some of the
    operations a ring 3 application cannot do:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在操作系统下运行的软件将在用户（ring 3）级别执行。为了访问机器资源，它将必须与运行在ring 0的操作系统内核进行交互。以下是ring 3应用程序无法执行的一些操作：
- en: Modify the current segment descriptor, which determines the current ring
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改当前段描述符，确定当前环
- en: Modify the page tables, preventing one process from seeing the memory of other
    processes
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改页表，防止一个进程看到其他进程的内存
- en: Use the LGDT and LIDT instructions, preventing them from registering interrupt
    handlers
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用LGDT和LIDT指令，防止它们注册中断处理程序
- en: Use I/O instructions such as in and out that would ignore file permissions and
    read directly from disk
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用I/O指令，比如in和out，可以忽略文件权限并直接从磁盘读取。
- en: The access to the content of the disk, for instance, will be mediated by the
    kernel that will verify that the application has permission to access the data.
    This kind of negotiation improves security and avoids failures, but comes with
    an important overhead that impacts the application performance.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对磁盘内容的访问将由内核进行调解，内核将验证应用程序是否有权限访问数据。这种协商方式提高了安全性，避免了故障，但会带来重要的开销，影响应用程序的性能。
- en: Some applications can be designed to run directly on the hardware without the
    framework provided by an operating system. This is true for real-time systems,
    where there is no compromise on response times and performance.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 有些应用程序可以直接在硬件上运行，而不需要操作系统提供的框架。这对于实时系统来说是真实的，因为在实时系统中，响应时间和性能都不容许妥协。
- en: Diving into system calls
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入系统调用
- en: System calls are the way operating systems provide access to the resources for
    the applications. It is an API implemented by the kernel for accessing the hardware
    safely.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 系统调用是操作系统为应用程序提供对资源访问的方式。这是内核实现的API，用于安全地访问硬件。
- en: Services provided
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供的服务
- en: There are some categories that we can use to split the numerous functions offered
    by the operating system. These include the control of the running applications
    and their flow, the filesystem access, and the network.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些类别可以用来分割操作系统提供的众多功能。这些包括控制运行应用程序及其流程、文件系统访问和网络。
- en: Process control
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进程控制
- en: 'This type of services includes `load`, which adds a program to memory and prepares
    for its execution before passing control to the program itself, or `execute`,
    which runs an executable file in the context of a pre-existing process. Other
    operations that belong to this category are as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的服务包括`load`，它将程序添加到内存并在将控制传递给程序本身之前准备执行，或者`execute`，它在现有进程的上下文中运行可执行文件。属于这一类别的其他操作如下：
- en: '`end` and `abort`—the first requires the application to exit while the second
    forces it.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`end`和`abort`—第一个要求应用程序退出，而第二个强制退出。'
- en: '`CreateProcess`, also known as `fork` on Unix systems or `NtCreateProcess`
    in Windows.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CreateProcess`，也称为Unix系统上的`fork`或Windows中的`NtCreateProcess`。'
- en: Terminate process.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 终止进程。
- en: Get/set process attributes.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取/设置进程属性。
- en: Wait for time, wait event, or signal event.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等待时间、等待事件或信号事件。
- en: Allocate and free memory.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分配和释放内存。
- en: File management
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件管理
- en: The handling of files and filesystems belongs to file management system calls.
    There are *create* and *delete* files that make it possible to add or remove an
    entry from the filesystem, and `open` and `close` operations that make it possible
    to gain control of a file in order to execute read and write operations. It is
    also possible to read and change file attributes.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 文件和文件系统的处理属于文件管理系统调用。有*create*和*delete*文件，可以向文件系统添加或删除条目，以及`open`和`close`操作，可以控制文件以执行读写操作。还可以读取和更改文件属性。
- en: Device management
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设备管理
- en: Device management handles all other devices but the filesystem, such as frame
    buffers or display. It includes all operations from the request of a device, including
    the communication to and from it (read, write, seek), and its release. It also
    includes all the operations of changing device attributes and logically attaching
    and detaching them.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 设备管理处理除文件系统之外的所有其他设备，如帧缓冲区或显示器。它包括从设备的请求开始的所有操作，包括与设备的通信（读取、写入、寻址）以及其释放。它还包括更改设备属性和逻辑附加和分离设备的所有操作。
- en: Information maintenance
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信息维护
- en: Reading and writing the system date and time belongs to the information maintenance
    category. This category also takes care of other system data, such as the environment.
    Another important set of operations that belongs here is the request and the manipulation
    of processes, files, and device attributes.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 读取和写入系统日期和时间属于信息维护类别。这个类别还负责其他系统数据，比如环境。还有一组重要的操作属于这里，包括请求和处理进程、文件和设备属性。
- en: Communication
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通信
- en: All the network operations from handling sockets to accepting connections fall
    into the communication category. This includes the creation, deletion, and naming of
    connections, and *s*ending and receiving messages.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 所有网络操作，从处理套接字到接受连接，都属于通信类别。这包括连接的创建、删除和命名，以及发送和接收消息。
- en: The difference between operating systems
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作系统之间的差异
- en: 'Windows has a series of different system calls that cover all the kernel operations.
    Many of these correspond exactly with the Unix equivalent. Here''s a list of some
    of the overlapping system calls:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Windows具有一系列不同的系统调用，涵盖了所有内核操作。其中许多与Unix等效的操作完全对应。以下是一些重叠的系统调用列表：
- en: '|  | **Windows** | **Unix** |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '|  | **Windows** | **Unix** |'
- en: '| **Process control** | `CreateProcess()` `ExitProcess()`'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '| **进程控制** | `CreateProcess()` `ExitProcess()`'
- en: '`WaitForSingleObject()` | `fork()` `exit()`'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`WaitForSingleObject()` | `fork()` `exit()`'
- en: '`wait()`'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`wait()`'
- en: '|'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| **File manipulation** | `CreateFile()` `ReadFile()`'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '| **文件操作** | `CreateFile()` `ReadFile()`'
- en: '`WriteFile()`'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`WriteFile()`'
- en: '`CloseHandle()` | `open()` `read()`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`CloseHandle()` | `open()` `read()`'
- en: '`write()`'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`write()`'
- en: '`close()` |'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`close()` |'
- en: '| **File protection** | `SetFileSecurity()` `InitializeSecurityDescriptor()`'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '| **文件保护** | `SetFileSecurity()` `InitializeSecurityDescriptor()`'
- en: '`SetSecurityDescriptorGroup()` | `chmod()` `umask()`'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`SetSecurityDescriptorGroup()` | `chmod()` `umask()`'
- en: '`chown()` |'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`chown()` |'
- en: '| **Device management** | `SetConsoleMode()` `ReadConsole()`'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '| **设备管理** | `SetConsoleMode()` `ReadConsole()`'
- en: '`WriteConsole()` | `ioctl()` `read()`'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`WriteConsole()` | `ioctl()` `read()`'
- en: '`write()` |'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`write()` |'
- en: '| **Information maintenance** | `GetCurrentProcessID()` `SetTimer()`'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '| **信息维护** | `GetCurrentProcessID()` `SetTimer()`'
- en: '`Sleep()` | `getpid()` `alarm()`'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`Sleep()` | `getpid()` `alarm()`'
- en: '`sleep()` |'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`sleep()` |'
- en: '| **Communication** | `CreatePipe()` `CreateFileMapping()`'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '| **通信** | `CreatePipe()` `CreateFileMapping()`'
- en: '`MapViewOfFile()` | `pipe()` `shmget()`'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`MapViewOfFile()` | `pipe()` `shmget()`'
- en: '`mmap()` |'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`mmap()` |'
- en: Understanding the POSIX standard
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解POSIX标准
- en: In order to ensure consistency between operating systems, IEEE formalized some
    standards for operating systems. These are described in the following sections.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保操作系统之间的一致性，IEEE对操作系统进行了一些标准化。这些标准在以下部分中描述。
- en: POSIX standards and features
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: POSIX标准和特性
- en: '**Portable Operating System Interface** (**POSIX**) for Unix represents a series
    of standards for operating system interfaces. The first version dates back to
    1988 and covers a series of topics like filenames, shells, and regular expressions.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Unix的**可移植操作系统接口**（**POSIX**）代表了操作系统接口的一系列标准。第一个版本可以追溯到1988年，涵盖了诸如文件名、shell和正则表达式等一系列主题。
- en: There are many features defined by POSIX, and they are organized in four different
    standards, each one focusing on a different aspect of the Unix compliance. They
    are all named POSIX followed by a number.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: POSIX定义了许多特性，它们分为四个不同的标准，每个标准都专注于Unix兼容性的不同方面。它们都以POSIX加一个数字命名。
- en: POSIX.1 – core services
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: POSIX.1 - 核心服务
- en: 'POSIX.1 is the 1988 original standard, which was initially named POSIX but
    was renamed to make it possible to add more standards to the family without giving
    up the name. It defines the following features:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: POSIX.1是1988年的原始标准，最初被命名为POSIX，但后来改名以便在不放弃名称的情况下添加更多的标准。它定义了以下特性：
- en: Process creation and control
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进程创建和控制
- en: 'Signals:'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信号：
- en: Floating point exceptions
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浮点异常
- en: Segmentation/memory violations
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分段/内存违规
- en: Illegal instructions
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非法指令
- en: Bus errors
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总线错误
- en: Timers
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定时器
- en: File and directory operations
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件和目录操作
- en: Pipes
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管道
- en: C library (standard C)
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C库（标准C）
- en: I/O port interface and control
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: I/O端口接口和控制
- en: Process triggers
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进程触发器
- en: POSIX.1b and POSIX.1c – real-time and thread extensions
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: POSIX.1b和POSIX.1c - 实时和线程扩展
- en: 'POSIX.1b focuses on real-time applications and on applications that need high performance. It
    focus on these aspects:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: POSIX.1b专注于实时应用程序和需要高性能的应用程序。它专注于以下方面：
- en: Priority scheduling
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优先级调度
- en: Real-time signals
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时信号
- en: Clocks and timers
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时钟和定时器
- en: Semaphores
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信号量
- en: Message passing
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息传递
- en: Shared memory
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共享内存
- en: Asynchronous and synchronous I/O
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步和同步I/O
- en: Memory locking interface
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存锁定接口
- en: 'POSIX.1c introduces the multithread paradigm and defines the following:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: POSIX.1c引入了多线程范式，并定义了以下内容：
- en: Thread creation, control, and cleanup
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程创建、控制和清理
- en: Thread scheduling
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程调度
- en: Thread synchronization
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程同步
- en: Signal handling
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信号处理
- en: POSIX.2 – shell and utilities
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: POSIX.2 - shell和实用程序
- en: POSIX.2 specifies standards for both a command-line interpreter and utility
    programs as `cd`, `echo`, or `ls`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: POSIX.2为命令行解释器和实用程序（如`cd`、`echo`或`ls`）指定了标准。
- en: OS adherence
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作系统遵从性
- en: Not all operating systems are POSIX compliant. Windows was born after the standard
    and it is not compliant, for instance. From a certification point of view, macOS
    is more compliant than Linux, because the latter uses another standard built on
    top of POSIX.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有操作系统都符合POSIX标准。例如，Windows诞生于该标准之后，因此不符合标准。从认证的角度来看，macOS比Linux更符合标准，因为后者使用了另一个建立在POSIX之上的标准。
- en: Linux and macOS
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux和macOS
- en: Most Linux distributions follow the **Linux Standard Base** (**LSB**), which
    is another standard that includes POSIX and much more, focusing on maintaining
    the inter-compatibility between different Linux distributions. It is not considered
    officially compliant because the developers didn't go into the process of certification.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Linux发行版遵循**Linux标准基础**（**LSB**），这是另一个包括POSIX和更多内容的标准，专注于维护不同Linux发行版之间的互操作性。它并未被认为是官方符合标准，因为开发人员没有进行认证过程。
- en: However, macOS became fully compatible in 2007 with the Snow Leopard distribution,
    and it has been POSIX-certified since then.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，自2007年的Snow Leopard发行版起，macOS已经完全兼容，并且自那时起就获得了POSIX认证。
- en: Windows
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows
- en: Windows is not POSIX compliant, but there are many attempts to make it so. There
    are open source initiatives such as Cygwin and MinGW that provide a less POSIX-compliant
    development environment, and support C applications using the Microsoft Visual
    C runtime library. Microsoft itself has made some attempts at POSIX compatibility,
    such as the Microsoft POSIX subsystem. The latest compatibility layer made by
    Microsoft is the Windows Linux Subsystem, which is an optional feature that can
    be activated in Windows 10 and has been well received by developers (including
    myself).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: Windows不符合POSIX标准，但有许多尝试使其符合。有一些开源倡议，如Cygwin和MinGW，它们提供了一个不太符合POSIX标准的开发环境，并支持使用Microsoft
    Visual C运行时库的C应用程序。微软本身也尝试过POSIX兼容性，比如Microsoft POSIX子系统。微软最新的兼容层是Windows Linux子系统，这是Windows
    10中可选的功能，受到了开发人员（包括我自己）的好评。
- en: Summary
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw what system programming means—writing system software
    that has some strict requirements, such as being tied to the hardware, using a
    low-level language, and working in a resource-constrained environment. Its practices
    can be really useful when building distributed systems that normally require optimizing
    resource usage. We discussed APIs, definitions that allows software to be used
    by other software, and listed the different types—the ones in the operating system,
    libraries and frameworks, and remote and web APIs.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了系统编程的含义——编写具有严格要求的系统软件，例如与硬件绑定、使用低级语言以及在资源受限的环境中工作。在构建通常需要优化资源使用的分布式系统时，它的实践可以非常有用。我们讨论了API，定义了允许软件被其他软件使用的不同类型，包括操作系统中的API、库和框架中的API，以及远程和Web
    API。
- en: We analyzed how, in operating systems, the access to resources is arranged in
    hierarchical levels called **protection rings** that prevent uncontrolled usage
    in order to improve security and avoid failures from the applications. The Linux
    model simplifies this hierarchy to just two levels called *user* and *kernel*
    space. All the applications are running in the user space, and in order to access
    the machine's resources they need the kernel to intercede.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们分析了在操作系统中，对资源的访问是通过称为**保护环**的分层级别进行安排的，以防止不受控制的使用，以提高安全性并避免应用程序的故障。Linux模型简化了这种层次结构，只将其分为称为*用户*和*内核*空间的两个级别。所有应用程序都在用户空间中运行，为了访问机器的资源，它们需要内核进行干预。
- en: Then we saw one specific type of API called **system calls **that allows the
    applications to request resources to the kernel, and mediates process control,
    access and management of files, and devices and network communications.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们看到了一种特定类型的API，称为**系统调用**，它允许应用程序向内核请求资源，并调解进程控制、文件访问和管理，以及设备和网络通信。
- en: We gave an overview of the POSIX standard, which defines Unix system interoperability.
    Among the features defined, there are also the C API, CLI utilities, shell language,
    environment variables, program exit status, regular expressions, directory structures,
    filenames, and command-line utility API conventions.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们概述了POSIX标准，该标准定义了Unix系统的互操作性。在定义的特性中，还包括C API、CLI实用程序、shell语言、环境变量、程序退出状态、正则表达式、目录结构、文件名和命令行实用程序API约定。
- en: In the next chapter, we will explore the Unix operating system resources such
    as the filesystem and the Unix permission model. We will look at what processes
    are, how they communicate with each other, and how they handle errors.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨Unix操作系统资源，如文件系统和Unix权限模型。我们将研究进程是什么，它们如何相互通信，以及它们如何处理错误。
- en: Questions
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the difference between application and system programming?
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序编程和系统编程之间有什么区别？
- en: What is an API? Why are APIs so important?
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是API？API为什么如此重要？
- en: Could you explain how protection rings work?
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你能解释一下保护环是如何工作的吗？
- en: Can you make some examples of what cannot be done in user space?
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你能举一些在用户空间无法完成的例子吗？
- en: What's a system call?
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是系统调用？
- en: Which calls are used in Unix to manage a process?
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Unix中使用哪些调用来管理进程？
- en: Why is POSIX useful?
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: POSIX为什么有用？
- en: Is Windows POSIX compliant?
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Windows是否符合POSIX标准？
