- en: Unix OS Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unix操作系统组件
- en: 'This chapter will be focusing on Unix OS and on the components that the user
    will interact with: files and filesystems, processes, users and permissions, and
    so on. It will also explain some basic process communication and how system program
    error handling works. All these parts of the operating system will be the ones
    we will be interacting with when creating system applications.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将重点放在Unix操作系统上，以及用户将与之交互的组件：文件和文件系统、进程、用户和权限等。它还将解释一些基本的进程通信以及系统程序错误处理的工作原理。在创建系统应用程序时，我们将与操作系统的所有这些部分进行交互。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Memory management
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存管理
- en: Files and filesystems
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件和文件系统
- en: Processes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进程
- en: Users, groups, and permissions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户、组和权限
- en: Process communications
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进程通信
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In the same way as the previous chapter, this one does not require any software
    to be installed: any other POSIX-compliant shell is enough.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一章类似，本章不需要安装任何软件：任何其他符合POSIX标准的shell都足够了。
- en: You could choose, for instance, Bash ([https://www.gnu.org/software/bash/](https://www.gnu.org/software/bash/)),
    which is recommended, Zsh ([http://www.zsh.org/](http://www.zsh.org/)), or fish
    ([https://fishshell.com/](https://fishshell.com/)).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择，例如，Bash ([https://www.gnu.org/software/bash/](https://www.gnu.org/software/bash/))，这是推荐的，Zsh
    ([http://www.zsh.org/](http://www.zsh.org/))，或者fish ([https://fishshell.com/](https://fishshell.com/))。
- en: Memory management
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存管理
- en: The operating system handles the primary and secondary memory usage of the applications.
    It keeps track of how much of the memory is used, by which process, and what parts
    are free. It also handles allocation of new memory from the processes and memory
    de-allocation when the processes are complete.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统处理应用程序的主要和辅助内存使用。它跟踪内存的使用情况，由哪个进程使用，哪些部分是空闲的。它还处理从进程分配新内存以及进程完成时的内存释放。
- en: Techniques of management
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理技术
- en: 'There are different techniques for handling memory, including the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 处理内存有不同的技术，包括以下内容：
- en: '**Single allocation**: All the memory, besides the part reserved for the OS,
    is available for the application. This means that there can only be one application in
    execution at a time, like in **Microsoft Disk Operating System** (**MS-DOS**).'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单一分配**：除了为操作系统保留的部分外，所有内存都可供应用程序使用。这意味着一次只能执行一个应用程序，就像在**Microsoft磁盘操作系统**（**MS-DOS**）中一样。'
- en: '**Partitioned allocation**: This divides the memory into different blocks called
    partitions. Using one of these blocks per process makes it possible to execute
    more than one process at once. The partitions can be relocated and compacted in
    order to obtain more contiguous memory space for the next processes.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分区分配**：这将内存分成不同的块，称为分区。使用其中一个块来执行一个以上的进程是可能的。分区可以重新定位和压缩，以获得下一个进程的更连续的内存空间。'
- en: '**Paged memory**: The memory is divided into parts called frames, which have
    a fixed size. A process'' memory is divided into parts of the same size called
    **pages**. There is a mapping between pages and frames that makes the process
    see its own virtual memory as contiguous. This process is also known as **pagination**.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分页内存**：内存被分成称为帧的部分，其大小固定。进程的内存被分成相同大小的部分，称为**页面**。页面和帧之间有映射，使进程看到自己的虚拟内存是连续的。这个过程也被称为**分页**。'
- en: Virtual memory
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟内存
- en: Unix uses the paged memory management technique, abstracting its memory for
    each application into contiguous virtual memory. It also uses a technique called
    swapping, which extends the virtual memory to the secondary memory (hard drive
    or **solid state drives** (**SSD**)) using a swap file.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Unix使用分页内存管理技术，将每个应用程序的内存抽象为连续的虚拟内存。它还使用一种称为交换的技术，将虚拟内存扩展到辅助内存（硬盘或固态硬盘（SSD））使用交换文件。
- en: When memory is scarce, the operating system puts pages from processes that are
    sleeping in the swap partition in order to make space for active processes that
    are requesting more memory, executing an operation called **swap-out**. When a
    page that is in the swap file is needed by a process in execution it gets loaded
    back into the main memory for executing it. This is called **swap-in**.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当内存稀缺时，操作系统将处于休眠状态的进程的页面放入交换分区，以为正在请求更多内存的活动进程腾出空间，执行称为**换出**的操作。当执行中的进程需要交换文件中的页面时，它会被加载回主内存以执行。这称为**换入**。
- en: The main issue of swapping is the performance drop when interacting with secondary
    memory, but it is very useful for extending multitasking capabilities and for
    dealing with applications that are bigger than the physical memory, by loading
    just the pieces that are actually needed at a given time. Creating memory-efficient
    applications is a way of increasing performance by avoiding or reducing swapping.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 交换的主要问题是与辅助内存交互时的性能下降，但它对于扩展多任务处理能力以及处理比物理内存更大的应用程序非常有用，只需在给定时间加载实际需要的部分。创建内存高效的应用程序是通过避免或减少交换来提高性能的一种方式。
- en: 'The `top` command shows details about available memory, swap, and memory consumption
    for each process:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`top`命令显示有关可用内存、交换和每个进程的内存消耗的详细信息：'
- en: '`RES` is the physical primary memory used by the process.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RES`是进程使用的物理主内存。'
- en: '`VIRT` is the total memory used by the process, including the swapped memory,
    so it''s equal to or bigger than `RES`.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VIRT`是进程使用的总内存，包括交换内存，因此它等于或大于`RES`。'
- en: '`SHR` is the part of `VIRT` that is actually shareable, such as loaded libraries.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHR`是实际可共享的`VIRT`的部分，例如加载的库。'
- en: Understanding files and filesystems
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解文件和文件系统
- en: A filesystem is a method used to structure data in a disk, and a file is the
    abstraction used for indicating a piece of self-contained information. If the
    filesystem is hierarchical, it means that files are organized in a tree of directories,
    which are special files used for arranging stored files.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 文件系统是在磁盘中结构化数据的方法，文件是指示自包含信息的抽象。如果文件系统是分层的，这意味着文件是组织在目录树中的，目录是用于安排存储文件的特殊文件。
- en: Operating systems and filesystems
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作系统和文件系统
- en: Over the last 50 years, a large number of filesystems have been invented and
    used, and each one has its own characteristics regarding space management, filenames
    and directories, metadata, and access restriction. Each modern operating system mainly uses
    a single type of filesystem.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的50年中，已经发明和使用了大量文件系统，每个文件系统都有其自己的特点，包括空间管理、文件名和目录、元数据和访问限制。每个现代操作系统主要使用一种类型的文件系统。
- en: Linux
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux
- en: Linux's **filesystem** (**FS**) of choice is the **extended filesystem** (**EXT**)
    family, but other ones are also supported, including XFS, **Journaled File System**
    (**JFS**), and **B-tree File System** (**Btrfs**). It is also compatible with
    the older **File Allocation** **Table** (**FAT**) family (FAT16 and FAT32) and **New
    Technology File System** (**NTFS**). The filesystem most commonly used remains
    the latest version of EXT (EXT4), which was released in 2006 and expanded its
    predecessor's capacities, including support for bigger disks.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Linux的首选文件系统是**extended filesystem**（**EXT**）家族，但也支持其他文件系统，包括XFS、**Journaled
    File System**（**JFS**）和**B-tree File System**（**Btrfs**）。它还兼容旧的**File Allocation
    Table**（**FAT**）家族（FAT16和FAT32）和**New Technology File System**（**NTFS**）。最常用的文件系统仍然是最新版本的EXT（EXT4），它于2006年发布，扩展了其前身的功能，包括对更大磁盘的支持。
- en: macOS
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: macOS
- en: macOS uses the **Apple File System** (**APFS**), which supports Unix permission
    and has journaling. It is also metadata-rich and case-preserving, while being
    a case-insensitive filesystem. It offers support for other filesystems, including
    HFS+ and FAT32, supporting NTFS for read-only operations. To write to such a filesystem,
    we can use an experimental feature or third-party applications.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: macOS使用**Apple File System**（**APFS**），支持Unix权限并具有日志记录。它还具有丰富的元数据和保留大小写，同时又是大小写不敏感的文件系统。它支持其他文件系统，包括HFS+和FAT32，支持NTFS进行只读操作。要向这样的文件系统写入，我们可以使用实验性功能或第三方应用程序。
- en: Windows
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows
- en: The main filesystem used by Windows is NTFS. As well as being case-insensitive,
    the signature feature that distinguishes Windows FS from others is the use of
    a letter followed by a colon to represent a partition in paths, combined with
    the use of backslash as a folder separator, instead of a forward slash. Drive
    letters, and the use of C for the primary partition, comes from MS-DOS, where
    A and B were reserved drive letters used for floppy disk drives.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Windows主要使用的文件系统是NTFS。除了大小写不敏感外，区分Windows文件系统与其他文件系统的特征是在路径中使用字母后跟冒号来表示分区，结合使用反斜杠作为文件夹分隔符，而不是正斜杠。驱动器字母和使用C表示主分区来自MS-DOS，其中A和B是保留的驱动器字母，用于软盘驱动器。
- en: Windows also natively supports other filesystems, such as FAT, which is a filesystem
    family that was very popular between the late seventies and the late nineties,
    and **Extended File Allocation Table** (**exFAT**), which is a format developed
    by Microsoft on top of FAT for removable devices.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Windows还原生支持其他文件系统，如FAT，这是一个在70年代末到90年代末非常流行的文件系统家族，以及由Microsoft开发的**Extended
    File Allocation Table**（**exFAT**），用于可移动设备的格式。
- en: Files and hard and soft links
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件和硬链接和软链接
- en: Most files are regular files, containing a certain amount of data. For instance,
    a text file contains a sequence of human-readable characters represented by a
    certain encoding, while a bitmap contains some metadata about the size and the
    bit used for each pixel, followed by the content of each pixel.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数文件都是常规文件，包含一定数量的数据。例如，文本文件包含一系列由特定编码表示的可读字符，而位图包含有关每个像素的大小和使用的位的一些元数据，然后是每个像素的内容。
- en: Files are arranged inside directories that make it possible to have different
    namespaces to reuse filenames. These are referred to with a name, their human-readable
    identifier, and organized in a tree structure. The path is a unique identifier
    that represents a directory, and it is made by the names of all the parents of
    the directory joined by a separator (`/` in Unix, `\` in Windows), descending
    from the root to the desired leaf. For instance if a directory named `a` is located
    under another named `b`, which is under one called `c`, it will have a path that
    starts from the root and concatenates all the directories, up to the file: `/c/b/a`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 文件被安排在目录中，这使得可以有不同的命名空间来重用文件名。这些文件通过名称引用，它们的人类可读标识符，并以树结构组织。路径是表示目录的唯一标识符，由所有父目录的名称通过分隔符（Unix中为`/`，Windows中为`\`）连接而成，从根目录到所需的叶子。例如，如果一个名为`a`的目录位于另一个名为`b`的目录下，后者位于名为`c`的目录下，它将从根目录开始并连接所有目录，直到文件：`/c/b/a`。
- en: When more than one file points to the same content, we have a **hard link**,
    but this is not allowed in all filesystems (for example, NTFS and FAT). A **soft
    link** is a file that points to another soft link or to a hard link. Hard links
    can be removed or deleted without breaking the original link, but this is not
    true for soft links. A **symbolic link** is a regular file with its own data that
    is the path of another file. It can also link other filesystems or files and directories
    that do not exist (that will be a broken link).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当多个文件指向相同的内容时，我们有一个**硬链接**，但这在所有文件系统中都不允许（例如NTFS和FAT）。**软链接**是指向另一个软链接或硬链接的文件。硬链接可以被删除或删除而不会破坏原始链接，但对于软链接来说并非如此。**符号链接**是一个具有自己数据的常规文件，它是另一个文件的路径。它还可以链接其他文件系统或不存在的文件和目录（这将是一个损坏的链接）。
- en: In Unix, some resources that are not actually files are represented as files,
    and communication with these resources is achieved by writing to or reading from
    their corresponding files. For instance, the `/dev/sda` file represents an entire
    disk, while `/dev/stdout`, `dev/stdin`, and `/dev/stderr` are standard output,
    input, and error. The main advantage of *Everything is a file* is that the same
    tools that can be used for files can also interact with other devices (network
    and pipes) or entities (processes).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unix中，一些实际上不是文件的资源被表示为文件，并且与这些资源的通信是通过写入或从它们对应的文件中读取来实现的。例如，`/dev/sda`文件代表整个磁盘，而`/dev/stdout`，`dev/stdin`和`/dev/stderr`是标准输出，输入和错误。*一切皆文件*的主要优势是可以使用于文件的相同工具也可以与其他设备（网络和管道）或实体（进程）进行交互。
- en: Unix filesystem
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unix文件系统
- en: The principles contained in this section are specific to the filesystems used
    by Linux, such as EXT4.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中包含的原则特定于Linux使用的文件系统，如EXT4。
- en: Root and inodes
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根和inode
- en: In Linux and macOS, each file and directory is represented by an **inode**,
    which is a special data structure that stores all the information about the file
    except its name and its actual data.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux和macOS中，每个文件和目录都由一个**inode**表示，这是一种特殊的数据结构，存储有关文件的所有信息，除了其名称和实际数据。
- en: Inode `0` is used for a null value, which means that there is no inode. Inode
    `1` is used to record any bad block on the disk. The root of the hierarchical
    structure of the filesystem uses inode `2`. It is represented by `/`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: inode `0`用于空值，这意味着没有inode。inode `1`用于记录磁盘上的任何坏块。文件系统的分层结构的根使用inode `2`。它由`/`表示。
- en: 'From the latest Linux kernel source, we can see how the first inodes are reserved.
    This is shown as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 从最新的Linux内核源代码中，我们可以看到保留了第一个inode。如下所示：
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This link is the source for the preceding code block: [https://elixir.bootlin.com/linux/latest/source/fs/ext4/ext4.h#L212](https://elixir.bootlin.com/linux/latest/source/fs/ext4/ext4.h#L212).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此链接是上述代码块的来源：[https://elixir.bootlin.com/linux/latest/source/fs/ext4/ext4.h#L212](https://elixir.bootlin.com/linux/latest/source/fs/ext4/ext4.h#L212)。
- en: Directory structure
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目录结构
- en: In Unix filesystems, there is a series of other directories under the root,
    each one used for a specific purpose, making it possible to maintain a certain
    interoperability between different operating systems and enabling compiled software
    to run on different OSes, making the binaries portable.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unix文件系统中，根目录下还有一系列其他目录，每个目录用于特定目的，使得可以在不同操作系统之间保持一定的互操作性，并使得编译的软件可以在不同的操作系统上运行，使得二进制文件具有可移植性。
- en: 'This is a comprehensive list of the directories with their scope:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个包含其范围的目录的全面列表：
- en: '| **Directory** | **Description** |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| **目录** | **描述** |'
- en: '| `/bin` | Executable files for all users |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `/bin` | 所有用户的可执行文件 |'
- en: '| `/boot` | Files for booting the system |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `/boot` | 用于引导系统的文件 |'
- en: '| `/dev` | Device drivers |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `/dev` | 设备驱动程序 |'
- en: '| `/etc` | Configuration files for applications and system |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `/etc` | 应用程序和系统的配置文件 |'
- en: '| `/home` | Home directory for users |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `/home` | 用户的主目录 |'
- en: '| `/kernel` | Kernel files |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `/kernel` | 内核文件 |'
- en: '| `/lib` | Shared library files and other kernel-related files |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `/lib` | 共享库文件和其他与内核相关的文件 |'
- en: '| `/mnt` | Temporary filesystems, from floppy disks and CDs to flash drives
    |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `/mnt` | 临时文件系统，从软盘和CD到闪存驱动器 |'
- en: '| `/proc` | File with process numbers for active processes |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `/proc` | 用于活动进程的进程号文件 |'
- en: '| `/sbin` | Executable files for administrators |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `/sbin` | 管理员的可执行文件 |'
- en: '| `/tmp` | Temporary files that should be safe to delete |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `/tmp` | 应该安全删除的临时文件 |'
- en: '| `/usr` | Administrative commands, shared files, library files, and others
    |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `/usr` | 管理命令，共享文件，库文件等 |'
- en: '| `/var` | Variable-length files (logs and print files)  |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `/var` | 变长文件（日志和打印文件） |'
- en: Navigation and interaction
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航和交互
- en: While using a shell, one of the directories will be the **working directory**,
    when paths are relative (for example, `file.sh` or `dir/subdir/file.txt`). The
    working directory is used as a prefix to obtain an absolute one. This is usually
    shown in the prompt of the command line, but it can be printed with the `pwd`
    command (print working directory).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用shell时，其中一个目录将是**工作目录**，当路径是相对的时（例如，`file.sh`或`dir/subdir/file.txt`）。工作目录用作前缀以获得绝对路径。这通常显示在命令行的提示中，但可以使用`pwd`命令（打印工作目录）打印出来。
- en: The `cd` (change directory) command can be used to change the current working
    directory. To create a new directory, there's the `mkdir` (make directory) command.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`cd`（更改目录）命令可用于更改当前工作目录。要创建新目录，有`mkdir`（创建目录）命令。'
- en: To show the list of files for a directory, there's the `ls` command, which accepts
    a series of options, including more information (`-l`), showing hidden files and
    directories (`-a`), and sorting by time (`-t`) and size (`-S`).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示目录的文件列表，有`ls`命令，它接受一系列选项，包括更多信息（`-l`），显示隐藏文件和目录（`-a`），以及按时间（`-t`）和大小（`-S`）排序。
- en: 'There is a series of other commands that can be used to interact with files:
    the `touch` command creates a new empty file with the given name, and to edit
    its content you can use a series of editors, including vi and nano, while `cat`,
    `more`, and `less` are some of the commands that make it possible to read them.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一系列其他命令可用于与文件交互：`touch`命令创建一个具有给定名称的新空文件，要编辑其内容，可以使用一系列编辑器，包括vi和nano，而`cat`，`more`和`less`是一些可以读取它们的命令。
- en: Mounting and unmounting
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挂载和卸载
- en: 'The operating system splits the hard drive into logical units called partitions,
    and each one can be a different file system. When the operating system starts,
    it makes some partitions available using the `mount` command for each line of
    the `/etc/fstab` file, which looks more or less like this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统将硬盘分割为称为分区的逻辑单元，每个分区可以是不同的文件系统。当操作系统启动时，它使用`mount`命令使一些分区可用，每行对应`/etc/fstab`文件，看起来更或多是这样：
- en: '[PRE1]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This configuration mounts `/dev/sda1` to `*/*disk` using an `ext4` filesystem
    and default options, no backing up (`0`), and root integrity check (`1`). The
    `mount` command can be used at any time to expose partitions in the filesystem.
    Its counterpart, `umount`, is needed to remove these partitions from the main
    filesystem. The empty directory used for the operation is called **mount point**,
    and it represents the root under which the filesystem is connected.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置将`/dev/sda1`挂载到`*/*disk`，使用`ext4`文件系统和默认选项，不备份（`0`），并进行根完整性检查（`1`）。`mount`命令可以随时用于在文件系统中公开分区。它的对应命令`umount`用于从主文件系统中删除这些分区。用于操作的空目录称为**挂载点**，它代表连接文件系统的根目录。
- en: Processes
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进程
- en: 'When an application is launched, it becomes a process: a special instance provided
    by the operating system that includes all the resources that are used by the running
    application. This program must be in **Executable and Linkable Format** (**ELF**),
    in order to allow the operating system to interpret its instructions.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当启动应用程序时，它变成一个进程：操作系统提供的特殊实例，包括运行应用程序所使用的所有资源。为了允许操作系统解释其指令，该程序必须是**可执行和可链接格式**（**ELF**）。
- en: Process properties
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进程属性
- en: Each process is a five-digit identifier **process ID** (**PID**), and it represents
    the process for all its life cycle. This means that there cannot be two processes
    with the same PID at the same time. Their uniqueness makes it possible to access
    a specific process by knowing its PID. Once a process is terminated, its PID can
    be reused for another process, if necessary.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 每个进程都是一个五位数的标识符**进程ID**（**PID**），它代表了进程的整个生命周期。这意味着在同一时间不能有两个具有相同PID的进程。它们的唯一性使得可以通过知道其PID来访问特定的进程。一旦进程终止，其PID可以在需要时被重用于另一个进程。
- en: 'Similar to PID, there are other properties that characterize a process. These
    are as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 与PID类似，还有其他特性来表征一个进程。它们如下：
- en: '**P****PID**: The parent process ID of the process that started this process'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**P****PID**：启动此进程的进程的父进程ID'
- en: '**Nice number**: Degree of friendliness of this process toward other processes'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优先级数**：此进程对其他进程的友好程度'
- en: '**Terminal or TTY**: Terminal to which the process is connected'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**终端或TTY**：进程连接的终端'
- en: '**RUID/EUID**: The real/effective user ID, which belongs to the owner of the
    process'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RUID/EUID**：进程的真实/有效用户ID，属于进程所有者'
- en: '**RGID/EGID**: The real/effective group owner, the group owner of a process'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RGID/EGID**：进程的真实/有效组所有者'
- en: 'To see a list of the active processes, there''s the `ps` (process status) command,
    which shows the current list of running processes for the active user:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看活动进程的列表，有`ps`（进程状态）命令，显示活动用户的当前运行进程列表：
- en: '[PRE2]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Process life cycle
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进程生命周期
- en: 'The creation of a new process can happen in two different ways:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新进程可以以两种不同的方式发生：
- en: 'Using a `fork`: This duplicates the calling process. The child (new process)
    is an exact copy (memory) of the parent (calling process), except for the following:'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`fork`：这会复制调用进程。子进程（新进程）是父进程（调用进程）的精确副本（内存），除了以下内容：
- en: PIDs are different.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PID是不同的。
- en: The PPID of the child equals the PID of the parent.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子进程的PPID等于父进程的PID。
- en: 'The child does not inherit the following from the parent:'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子进程不会从父进程继承以下内容：
- en: Memory locks
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存锁
- en: Semaphore adjustments
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信号量调整
- en: Outstanding asynchronous I/O operations
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未完成的异步I/O操作
- en: Asynchronous I/O contexts
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步I/O上下文
- en: 'Using an `exec`: This replaces the current process image with a new one, loading
    the program into the current process space and running it from its entry point.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`exec`：这将用新的进程图像替换当前进程，将程序加载到当前进程空间中，并从其入口点运行。
- en: Foreground and background
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前台和后台
- en: When a process is launched, it is normally in the **foreground**, which will
    prevent communication with the shell until the job is finished or interrupted.
    Launching a process with an `&` symbol at the end of the command (`cat file.txt
    &`) will launch it in the **background**, making it possible to keep using the
    shell. The `SIGTSTP` signal can be sent with *C**trl *+ *Z*, which allows the
    user to suspend the foreground process from the shell. It can be resumed with
    the `fg` command, or in the background with the `bg` command.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当启动进程时，通常处于**前台**，这将阻止与shell的通信，直到作业完成或中断。在命令的末尾使用`&`符号启动进程（`cat file.txt &`）将其启动到**后台**，从而可以继续使用shell。可以使用*C**trl *+ *Z*发送`SIGTSTP`信号，允许用户从shell挂起前台进程。可以使用`fg`命令恢复它，或使用`bg`命令将其放到后台。
- en: The `jobs`command reports the jobs running and their numbers. In the output,
    the numbers in square brackets are the job numbers that are used by the process
    control commands, such as `fg` and `bg`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`jobs`命令报告正在运行的作业及其编号。在输出中，方括号中的数字是进程控制命令使用的作业编号，如`fg`和`bg`。'
- en: Killing a job
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 终止作业
- en: The foreground process can be terminated with the `SIGINT` signal using *C**trl *+ *Z*.
    In order to kill a background process, or send any signal to the process, the
    `kill` command can be used.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 前台进程可以使用*C**trl *+ *Z*发送`SIGINT`信号来终止。为了终止后台进程，或向进程发送任何信号，可以使用`kill`命令。
- en: 'The `kill` command receives an argument that can be either of the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`kill`命令接收一个参数，可以是以下之一：'
- en: The signal sent to the process
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送到进程的信号
- en: The PID or the job number (with a `%` prefix)
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PID或作业号（带有“%”前缀）
- en: 'The more notable signals used are as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 更显著使用的信号如下：
- en: '`SIGINT`: Indicates a termination caused by user input and can be sent by `kill`
    command with the `-2` value'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SIGINT`：表示由用户输入引起的终止，可以使用`kill`命令发送`-2`值'
- en: '`SIGTERM`: Represents a general purpose termination request not generated by
    a user as well as a default signal for the `kill` command with a  `-6` value'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SIGTERM`：表示由用户生成的通用终止请求，也是`kill`命令的默认信号，值为`-6`'
- en: '`SIGKILL`: A termination handled directly by the operating system that kills
    the process immediately and has a `-9` value'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SIGKILL`：由操作系统直接处理的终止，立即终止进程，值为`-9`'
- en: Users, groups, and permissions
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户，组和权限
- en: Users and groups, together with permissions, are the main entities that are
    used in Unix operating systems to control access to resources.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 用户和组以及权限是Unix操作系统中用于控制对资源访问的主要实体。
- en: Users and groups
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户和组
- en: 'Authorization to files and other resources are provided by users and groups.
    Users have unique usernames that are human-friendly identifiers, but from the
    operating system side, each user is represent by a unique positive integer: the
    **User ID** (**UID**). Groups are the other authorization mechanism and, as users,
    they have a name and a **Group ID** (**GID**). In the operating system, each process
    is associated with a user and each file and directory belongs to both a user and
    a group.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 用户和组提供对文件和其他资源的授权。用户具有唯一的用户名，这些用户名是人类友好的标识符，但从操作系统方面来看，每个用户都由唯一的正整数表示：**用户ID**（**UID**）。组是另一个授权机制，与用户一样，它们有一个名称和一个**组ID**（**GID**）。在操作系统中，每个进程都与一个用户关联，每个文件和目录都属于一个用户和一个组。
- en: 'The `/etc/passwd` file contains all this information and more:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`/etc/passwd`文件包含所有这些信息以及更多信息：'
- en: '[PRE3]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Users don't use UID directly; they use a combination of username and password
    in order to start their first process, the interactive shell. Children of the
    first shell inherit their UID from it, so they keep belonging to the same user.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 用户不直接使用UID；他们使用用户名和密码的组合来启动他们的第一个进程，即交互式shell。第一个shell的子进程从中继承他们的UID，因此他们仍然属于同一用户。
- en: The UID `0` is reserved for a user known as root, which has special privileges
    and can do almost anything on the system, such as read/write/execute any file,
    kill any process, and change running process UIDs.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: UID`0`保留给一个名为root的用户，该用户具有特殊权限，并且几乎可以在系统上执行任何操作，例如读取/写入/执行任何文件，终止任何进程，并更改正在运行的进程UID。
- en: A group is a logical collection of users, used to share files and directories
    between them. Each group is independent of other groups and there is no specific
    relationship between them. For a list of the groups that the current user belongs
    to, there's the `groups` command. To change group ownership of a file, there's `chgrp`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 组是用户的逻辑集合，用于在它们之间共享文件和目录。每个组都独立于其他组，它们之间没有特定的关系。要查看当前用户所属的组的列表，可以使用`groups`命令。要更改文件的组所有权，可以使用`chgrp`。
- en: Owner, group, and others
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 所有者，组和其他人
- en: 'Unix files belong to a user and a group. This creates three levels of authorization hierarchy:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Unix文件属于用户和组。这创建了三个授权层次：
- en: '**Owner**: The UID associated with the file'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**所有者**：与文件关联的UID'
- en: '**Group**: UIDS that belong to the GID associated with the file'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组**：属于与文件关联的GID的UIDS'
- en: '**Others**: Everyone else'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**其他人**：其他所有人'
- en: Different permissions can be specified for each of these groups, and these permissions
    are usually decreasing from owner to others. It does not make sense that the owner
    of a file has less permission on it than its own group or the users outside that
    group.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 可以为这些组的每个组指定不同的权限，并且这些权限通常从所有者到其他人递减。文件的所有者具有较少的权限，这是没有意义的，因为它自己的组或该组外的用户。
- en: Read, write, and execute
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读，写和执行
- en: Users and groups are used as the first two layers of protection for accessing
    a file. The user that owns a file has a set of permissions that differs from the
    file group. Whoever is not the owner and does not belong to the group has different
    permissions. These three sets of permissions are known as **owner**, **group**,
    and **other**.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 用户和组被用作访问文件的前两个保护层。拥有文件的用户具有与文件组不同的权限集。不是所有者且不属于该组的人具有不同的权限。这三组权限被称为**所有者**，**组**和**其他**。
- en: 'For each element of the set there are three actions that may be carried out:
    reading, writing, and executing. This is very straightforward for files but it
    means something different for directories. Read makes it possible to list the
    contents, write is used to add new links inside, and execute is used to navigate
    it.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 对于集合的每个元素，可以执行三个操作：读取，写入和执行。这对于文件来说非常直接，但对于目录来说意味着不同的东西。读取使其可能列出内容，写入用于在内部添加新链接，执行用于导航。
- en: 'Three permissions are represented by an octal value, where the first bit is
    read permission, the second is write, and the third is execute. They can also
    be represented by the letters `r`, `w`, and `x` in sequence and the possible values
    are as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 三个权限由八进制值表示，其中第一个位是读取权限，第二个是写入，第三个是执行。它们也可以按顺序用字母`r`，`w`和`x`表示，可能的值如下：
- en: '`0 or ---`: No permissions'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0或---`：没有权限'
- en: '`1 or --x`: Execute permission (execute a file or navigate to a directory)'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1或--x`：执行权限（执行文件或导航到目录）'
- en: '`2 or -w-`: Write permission (write a file or add new files in a directory)'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2或-w-`：写权限（写文件或在目录中添加新文件）'
- en: '`3 or -wx`: Write and execute'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`3或-wx`：写和执行'
- en: '`4 or r--`: Read permission (read a file or list the contents of a directory)'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`4或r--`：读取权限（读取文件或列出目录的内容）'
- en: '`5 or r-x`: Read and execute'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`5或r-x`：读取和执行'
- en: '`6 or rw-`: Read and write'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`6或rw-`：读取和写入'
- en: '`7 or rwx`: Read, write, and execute'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`7或rwx`：读取，写入和执行'
- en: 'The sequence of three octal values represent permission for user, group, and
    others:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 三个八进制值的序列表示用户，组和其他人的权限：
- en: '`777`: Everyone can read, write, and execute.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`777`：每个人都可以读取，写入和执行。'
- en: '`700`: Owner can read, write, and execute.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`700`：所有者可以读取，写入和执行。'
- en: '`664`: Owner and group can read and write.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`664`：所有者和组可以读取和写入。'
- en: '`640`: Owner can read and write and group can read.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`640`：所有者可以读取和写入，组可以读取。'
- en: '`755`: Owner can read, write, and execute, while group and others can read
    and execute.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`755`：所有者可以读取，写入和执行，而组和其他人可以读取和执行。'
- en: The `ls` command with the `-l` flag (or its alias, `ll`) shows the list of files
    and the folder for the current directory with their permissions.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 带有`-l`标志（或其别名`ll`）的`ls`命令显示当前目录的文件和文件夹列表及其权限。
- en: Changing permission
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改权限
- en: 'The `chmod` command makes it possible to change permission on a file or directory.
    This can be used to override current permissions or to modify them:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`chmod`命令使得可以更改文件或目录的权限。这可以用于覆盖当前权限或修改它们：'
- en: In order to replace permissions, the `chmod xxx file` command must be issued. `*xxx*`
    can be the three octal values representing the permission for the respective tiers
    or a string that specifies permissions, such as `u=rwx`, `g=rx`, or  `o=r`.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了替换权限，必须发出`chmod xxx file`命令。`*xxx*`可以是表示各自层权限的三个八进制值，也可以是指定权限的字符串，例如`u=rwx`，`g=rx`或`o=r`。
- en: To add or remove one or more permissions, `chmod +x file` or `chmod -x file`
    can be used.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要添加或删除一个或多个权限，可以使用`chmod +x file`或`chmod -x file`。
- en: For more information, use the `chmod` command with the help flag (`chmod --help`).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请使用帮助标志（`chmod --help`）的`chmod`命令。
- en: Process communications
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进程通信
- en: The operating system is responsible for communication between processes and
    has different mechanisms to exchange information. These processes are unidirectional,
    such as exit codes, signals, and pipes, or bidirectional, such as sockets.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统负责进程之间的通信，并具有不同的机制来交换信息。这些进程是单向的，例如退出代码、信号和管道，或者是双向的，例如套接字。
- en: Exit codes
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 退出代码
- en: 'Applications communicate their result to the operating system by returning
    a value called **exit status**. This is an integer value passed to the parent
    process when the process ends. A list of common exit codes can be found in the `/usr/include/sysexits.h` file,
    as shown here:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序通过返回称为**退出状态**的值将其结果传达给操作系统。这是在进程结束时传递给父进程的整数值。常见的退出代码列表可以在`/usr/include/sysexits.h`文件中找到，如下所示：
- en: '[PRE4]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The source for this is as follows: [https://elixir.bootlin.com/linux/latest/source/fs/ext4/ext4.h#L212](https://elixir.bootlin.com/linux/latest/source/fs/ext4/ext4.h#L212).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 此来源如下：[https://elixir.bootlin.com/linux/latest/source/fs/ext4/ext4.h#L212](https://elixir.bootlin.com/linux/latest/source/fs/ext4/ext4.h#L212)。
- en: The exit code of the last command is stored in the `$?` variable, and it can
    be tested in order to control the flow of the operations. A commonly used operator
    is `&&` (double ampersand), which executes the next instruction only if the exit
    code of the first one is `0`, such as `stat file && echo something >> file`, which
    appends something to a file only if it exists.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令的退出代码存储在`$?`变量中，可以测试它以控制操作的流程。一个常用的运算符是`&&`（双和号），它仅在第一个命令的退出代码为`0`时执行下一个指令，例如`stat
    file && echo something >> file`，仅在文件存在时向文件附加内容。
- en: Signals
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号
- en: Exit codes connect processes and their parents, but signals make it possible
    to interface any process with another, including itself. They are also asynchronous
    and unidirectional, but they represent communication from the outside of a process.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 退出代码连接进程和它们的父进程，但信号使得任何进程与另一个进程进行接口交互成为可能，包括它自己。它们也是异步的和单向的，但它们代表来自进程外部的通信。
- en: 'The most common signal is `SIGINT`, which tells the application to terminate,
    and can be sent to a foreground process in a shell with the *Ctrl* + *C* key combination.
    However, there are many more options, as shown in the following table:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的信号是`SIGINT`，它告诉应用程序终止，并且可以通过在shell中使用*Ctrl* + *C*组合键将其发送到前台进程。但是，还有许多其他选项，如下表所示：
- en: '| **Name** | **Number** | **Description** |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **编号** | **描述** |'
- en: '| `SIGHUP` | 1 | Controlling terminal is closed |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| `SIGHUP` | 1 | 控制终端关闭 |'
- en: '| `SIGINT` | 2 | Interrupt signal (*Ctrl* + *C*) |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| `SIGINT` | 2 | 中断信号（*Ctrl* + *C*） |'
- en: '| `SIGQUIT` | 3 | Quit signal (*Ctrl* + *D*) |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| `SIGQUIT` | 3 | 退出信号（*Ctrl* + *D*） |'
- en: '| `SIGFPE` | 8 | Illegal mathematical operation is attempted |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| `SIGFPE` | 8 | 尝试非法数学运算 |'
- en: '| `SIGKILL` | 9 | Quits the application immediately  |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| `SIGKILL` | 9 | 立即退出应用程序 |'
- en: '| `SIGALRM` | 14 | Alarm clock signal |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| `SIGALRM` | 14 | 闹钟信号 |'
- en: 'The `kill` command allows you to send a signal to any application, and a comprehensive
    list of available signals can be shown with the `-l` flag:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`kill`命令允许您向任何应用程序发送信号，并可以使用`-l`标志显示可用信号的全面列表：'
- en: '![](img/fe0c00b9-45c3-4c14-acc5-02d28aa7a744.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fe0c00b9-45c3-4c14-acc5-02d28aa7a744.png)'
- en: Pipes
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道
- en: Pipes are the last unidirectional communication method between processes. As
    the name suggests, pipes connect two ends – a process input with another process
    output – making it possible to process on the same host to communicate in order
    to exchange data.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 管道是进程之间最后一种单向通信方法。顾名思义，管道连接两端 - 一个进程的输入与另一个进程的输出 - 使得在同一台主机上进行处理以便交换数据成为可能。
- en: 'These are classified as anonymous or named:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这些被分类为匿名或命名：
- en: Anonymous pipes link one process standard output to another process standard
    input. It can be easily done inside a shell with the `|` operator, linking the
    output of the command before the pipe as input for the one after the pipe. `ls
    -l | grep "user"` gets the output of the `ls` command and uses it as input for
    `grep`.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 匿名管道将一个进程的标准输出链接到另一个进程的标准输入。可以在shell中使用`|`运算符轻松完成，将管道之前的命令的输出链接为管道之后的命令的输入。`ls
    -l | grep "user"`获取`ls`命令的输出并将其用作`grep`的输入。
- en: Named pipes use a specific file in order to execute the redirect. The output
    can be redirected to a file with the `>` (greater) operator, while the `<` (less)
    sign allows you to use a file as input for another process. `ls -l > file.txt` saves
    the output of the command to a file. `cat < file.txt` sends the contents of the
    file to the command's standard input, and the standard input copies them to the
    standard output.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名管道使用特定文件来执行重定向。输出可以使用`>`（大于）运算符重定向到文件，而`<`（小于）符号允许您将文件用作另一个进程的输入。`ls -l >
    file.txt`将命令的输出保存到文件中。`cat < file.txt`将文件的内容发送到命令的标准输入，标准输入将其复制到标准输出。
- en: It is also possible to append content to a named pipe using the `>>` (double
    greater) operator, which will start writing from the end of the file.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以使用`>>`（双大于）运算符将内容附加到命名管道，这将从文件末尾开始写入。
- en: Sockets
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 套接字
- en: Unix domain sockets are a bidirectional communication method between applications
    on the same machine. They are a logical endpoint that is handled by the kernel
    and manages the data exchange.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: Unix域套接字是同一台机器上应用程序之间的双向通信方法。它们是由内核处理并管理数据交换的逻辑端点。
- en: The nature of sockets permits using them as stream-oriented, or datagram-oriented.
    Stream-oriented protocols ensure that messages are delivered before moving to
    the next chunk of data in order to preserve message integrity. In contrast, message-oriented
    protocols ignore the data that is not received and keeps sending the following
    messages, making it a faster but less reliable protocol with very low latency.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 套接字的性质允许将它们用作流导向或数据报导向。流导向协议确保在转移到下一个数据块之前交付消息，以保持消息完整性。相反，消息导向协议忽略未接收的数据，并继续发送下一个消息，使其成为一个更快但不太可靠且延迟非常低的协议。
- en: 'The sockets are classified as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 套接字分为以下几类：
- en: '`SOCK_STREAM`: Connection-oriented, ordered, and reliable transmission of a
    stream of data'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SOCK_STREAM`: 连接导向，有序，可靠地传输数据流'
- en: '`SOCK_SEQPACKET`: Connection-oriented, ordered, and reliable transmission of
    message data that has record boundaries'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SOCK_SEQPACKET`: 连接导向，有序，可靠地传输具有记录边界的消息数据'
- en: '`SOCK_DGRAM`: Unordered and unreliable transmission of messages'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SOCK_DGRAM`: 无序且不可靠地传输消息'
- en: Summary
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter provided a general overview of the main Unix components and how
    they interact with each other. We started with memory management and how it works
    in Unix, understanding concepts such as **pagination** and **swap.**
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 本章概述了主要的Unix组件及它们之间的交互。我们从内存管理开始，了解Unix中的工作原理，理解诸如**分页**和**交换**等概念。
- en: 'Then we analyzed the filesystem, taking a look at the support from modern operating
    systems, and explained the difference between the existing file types: files,
    directories, and hard and soft links.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们分析了文件系统，看了现代操作系统的支持，并解释了现有文件类型之间的区别：文件、目录以及硬链接和软链接。
- en: After learning about the concept of inode, we took a look at the structure of
    a directory in a Unix operating system and explained how to navigate and interact
    with the filesystem, as well as how to mount and unmount other partitions.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了inode的概念之后，我们看了Unix操作系统中目录的结构，并解释了如何浏览和与文件系统交互，以及如何挂载和卸载其他分区。
- en: We moved on to processes, running applications in Unix, and their structure
    and attributes. We analyzed process life cycle, from its creation through `fork`
    or `exec`, to its end or termination with the `kill` command.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继续讨论了在Unix中运行应用程序的进程及其结构和属性。我们分析了进程的生命周期，从通过`fork`或`exec`创建到通过`kill`命令结束或终止。
- en: Another important topic was users, groups, and permissions. We saw what a user
    is, what groups are, how to join them, and how these concepts are used to divide
    permissions into three groups: user, group, and others. This helped to better
    understand the Unix permission model, as well as how to change permissions for
    files and directories.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的主题是用户、组和权限。我们了解了用户是什么，什么是组，如何加入组，以及这些概念如何用于将权限分为三组：用户、组和其他。这有助于更好地理解Unix权限模型，以及如何更改文件和目录的权限。
- en: Finally, we saw how communication between processes works with one-way channels
    such as signals and exit codes, or bidirectional communication such as sockets.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们看到了进程之间的通信是如何工作的，包括单向通道如信号和退出码，或双向通信如套接字。
- en: In the next chapter, we will have a quick overview of the Go language.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将快速概述Go语言。
- en: Questions
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which filesystem is used by modern operating systems?
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现代操作系统使用哪种文件系统？
- en: What is an inode? What is inode `0` in Unix?
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是inode？Unix中的inode `0`是什么？
- en: What's the difference between PID and PPID?
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PID和PPID之间有什么区别？
- en: How do you terminate a process running in the background?
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何终止在后台运行的进程？
- en: What is the difference between user and group?
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户和组之间有什么区别？
- en: What's the scope of the Unix permission model?
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Unix权限模型的范围是什么？
- en: Can you explain the difference between signals and exit codes?
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你能解释一下信号和退出码之间的区别吗？
- en: What's a swap file?
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是交换文件？
