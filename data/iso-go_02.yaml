- en: The Isomorphic Go Toolchain
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同构Go工具链
- en: In the previous chapter, we established the many benefits that the isomorphic
    web application architecture provides and the advantages of using the Go programming
    language to build isomorphic web applications. Now, it's time to explore the essential
    ingredients that are needed to make Isomorphic Go web applications possible.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们确定了同构网络应用架构提供的许多好处，以及使用Go编程语言构建同构网络应用的优势。现在，是时候探索使同构Go网络应用成为可能的基本要素了。
- en: In this chapter, we will introduce you to the *Isomorphic Go* toolchain. We
    will examine the key technologies that comprise the toolchain—Go, GopherJS, the
    Isomorphic Go toolkit, and the UX toolkit. Once we have established how to obtain
    and ready these tools, we will install the IGWEB demo—the Isomorphic Go web application
    that we will implement in this book. Later, we will dive into the anatomy of the
    IGWEB demo, examining the project structure and code organization.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将向您介绍*同构Go*工具链。我们将研究构成工具链的关键技术——Go、GopherJS、同构Go工具包和UX工具包。一旦我们确定了如何获取和准备这些工具，我们将安装IGWEB演示——本书中将要实现的同构Go网络应用。随后，我们将深入研究IGWEB演示的解剖，检查项目结构和代码组织。
- en: We will also introduce you to some helpful and productive techniques that will
    be used throughout the book, such as implementing a custom datastore on the server
    side to serve our web application's data persistence needs and utilizing dependency
    injections to provide commonly used functionality throughout our web application.
    Finally, we will provide a project roadmap for the IGWEB application to map out
    our journey in building an Isomorphic Go web application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将向您介绍一些有用和高效的技术，这些技术将贯穿整本书的使用，比如在服务器端实现自定义数据存储来满足我们的网络应用数据持久性需求，并利用依赖注入来提供常用功能。最后，我们将为IGWEB应用提供一个项目路线图，以规划我们在构建Isomorphic
    Go网络应用中的旅程。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Installing the Isomorphic Go toolchain
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装同构Go工具链
- en: Setting up the IGWEB demo
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置IGWEB演示
- en: An introduction to the IGWEB demo
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IGWEB演示简介
- en: Project structure and code organization
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目结构和代码组织
- en: Installing the Isomorphic Go toolchain
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装同构Go工具链
- en: 'In this section, we will guide you through the process of installing and configuring
    the Isomorphic Go toolchain—the set of technologies that allow us to create Isomorphic
    Go web applications. Here are the key technologies that we will be covering:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将指导您完成安装和配置同构Go工具链的过程，这是一组技术，允许我们创建同构Go网络应用。以下是我们将要涵盖的关键技术：
- en: Go
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go
- en: GopherJS
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GopherJS
- en: The Isomorphic Go toolkit
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同构Go工具包
- en: The UX toolkit
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UX工具包
- en: We will utilize **Go** as the server-side and client-side programming language
    for our web application. Go allows us to create reliable and efficient software
    using a simple and understandable syntax. It's a modern programming language that
    is designed in an age of multicore processors, networked systems, massive computation
    clusters, and the World Wide Web. Since Go is a general purpose programming language,
    it makes for an ideal technology to create isomorphic web applications.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将利用**Go**作为服务器端和客户端的编程语言来创建我们的网络应用。Go允许我们使用简单易懂的语法创建可靠和高效的软件。它是一种现代的编程语言，设计用于多核处理器、网络系统、大规模计算集群和万维网的时代。由于Go是一种通用编程语言，它非常适合创建同构网络应用的理想技术。
- en: '**GopherJS** allows us to bring Go to the client side by transpiling Go code
    into pure JavaScript code that can run in all major web browsers. GopherJS bindings
    are available for common JavaScript functionality, including the DOM API, XHR,
    built-in JavaScript functions/operators, and the WebSocket API.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**GopherJS**允许我们通过将Go代码转译为纯JavaScript代码，将Go引入客户端，这样可以在所有主要的Web浏览器中运行。GopherJS提供了常见JavaScript功能的绑定，包括DOM
    API、XHR、内置JavaScript函数/操作符和WebSocket API。'
- en: The **Isomorphic Go toolkit** provides us with the technology we need to build
    Isomorphic Go web applications. Using the tools available from this project, we
    can implement the common functionality required in an isomorphic web application,
    such as client-side routing, isomorphic template rendering, and creating isomorphic
    web forms.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**同构Go工具包**为我们提供了构建同构Go网络应用所需的技术。使用该项目提供的工具，我们可以实现同构网络应用所需的常见功能，如客户端路由、同构模板渲染和创建同构网络表单。'
- en: The **UX toolkit** provides us with the capability to create reusable components
    in Go, which are known as **cogs**. You can think of them as self-contained user
    interface widgets that promote reusability. Cogs can be implemented as pure Go
    cogs or hybrid cogs that can tap into the existing JavaScript functionality. Cogs
    are registered on the server side, and deployed on the client side.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**UX工具包**为我们提供了在Go中创建可重用组件的能力，这些组件被称为**cogs**。您可以将它们视为自包含的用户界面小部件，促进了可重用性。Cogs可以作为纯Go
    cogs或混合cogs实现，可以利用现有的JavaScript功能。Cogs在服务器端注册，并在客户端部署。'
- en: '*Figure 2.1* depicts the technology stack we''ll use as a Venn diagram, clearly
    indicating the environment (or environments) the technology component will reside
    in:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2.1*展示了我们将作为Venn图使用的技术堆栈，清楚地指示了技术组件将驻留在哪个环境（或多个环境）中：'
- en: '![](img/c24101d5-08b4-4f83-848a-44a9e1df48a1.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c24101d5-08b4-4f83-848a-44a9e1df48a1.png)'
- en: 'Figure 2.1: The Isomorphic Go toolchain: Go, GopherJS, the Isomorphic Go toolkit,
    and the UX toolkit'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1：同构Go工具链：Go、GopherJS、同构Go工具包和UX工具包
- en: Now that we have identified the key components that comprise our technology
    stack, let's go ahead and install/configure them.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经确定了构成我们技术堆栈的关键组件，让我们继续安装/配置它们。
- en: Go
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go
- en: If you are new to Go, it is well worth your time to undertake tour of Go, available
    at [https://tour.golang.org](https://tour.golang.org).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对Go不熟悉，值得花些时间参加Go之旅，网址为[https://tour.golang.org](https://tour.golang.org)。
- en: Before you can proceed further, you need to have Go installed on your system.
    In this section, we will provide a high-level overview of installing Go, and setting
    up your Go workspace. If you need further help, you can access the detailed instructions
    to install Go at [https://golang.org/doc/install](https://golang.org/doc/install).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，您需要在系统上安装Go。在本节中，我们将提供安装Go和设置Go工作区的高级概述。如果您需要进一步帮助，可以访问[https://golang.org/doc/install](https://golang.org/doc/install)获取安装Go的详细说明。
- en: 'Let''s make our way to the Go website, available at [https://golang.org](https://golang.org):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们前往Go网站，网址为[https://golang.org](https://golang.org)：
- en: '![](img/fdfe9bb6-f4b6-45b6-a392-a3bee77ce753.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fdfe9bb6-f4b6-45b6-a392-a3bee77ce753.png)'
- en: 'Figure 2.2: The Go Website'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2：Go网站
- en: 'Click on the Download Go link, shown in *Figure 2.2*, to get to the Downloads
    page ([https://golang.org/dl/](https://golang.org/dl/)), shown in *Figure 2.3*:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 单击*图2.2*中显示的下载Go链接，以进入下载页面（[https://golang.org/dl/](https://golang.org/dl/)），如*图2.3*所示：
- en: '![](img/f6c2a836-5f4d-427c-8eec-068b4964b5a0.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f6c2a836-5f4d-427c-8eec-068b4964b5a0.png)'
- en: 'Figure 2.3: The Downloads page on the Go Website'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.3：Go网站上的下载页面
- en: As you can see, Go is available for all the major operating systems. We will
    be using a Mac while walking you through the installation and configuration process.
    Information on installing Go for other operating systems can be found in the *Getting
    Started* document available on the Go website, at [https://golang.org/doc/install](https://golang.org/doc/install).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，Go适用于所有主要操作系统。我们将在Mac上进行安装和配置过程。有关在其他操作系统上安装Go的信息可以在Go网站的*入门*文档中找到，网址为[https://golang.org/doc/install](https://golang.org/doc/install)。
- en: On the Downloads page, click on the link to download the distribution of Go
    for your operating system. I clicked on the link to download the Apple macOS installer.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在下载页面上，单击链接以下载适用于您操作系统的Go分发。我单击了下载Apple macOS安装程序的链接。
- en: 'Getting your system up and running with Go will consist of the following steps:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使您的系统能够运行Go将包括以下步骤：
- en: Installing Go
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Go
- en: Setting up your Go workspace
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置您的Go工作区
- en: Building and running programs
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建和运行程序
- en: Installing Go
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Go
- en: 'After the Download is complete, go ahead and launch the installer. The Go installer
    is shown in *Figure 2.4*:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成后，继续启动安装程序。Go安装程序显示在*图2.4*中：
- en: '![](img/1b97ddd2-2222-446e-a370-c67411f187da.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b97ddd2-2222-446e-a370-c67411f187da.png)'
- en: 'Figure 2.4: The Go installer'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.4：Go安装程序
- en: Follow the onscreen prompts of the installer, and if the installer asks you
    to make Go available for all users on the system, make sure that you choose to
    install Go for all users of the system. You may also be prompted for your system
    credentials (so that you may install Go for all users on the system). Again, go
    ahead and provide your system credentials.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 按照安装程序的屏幕提示操作，如果安装程序要求您使Go对系统上的所有用户可用，请确保选择为系统的所有用户安装Go。您可能还需要输入系统凭据（以便您可以为系统上的所有用户安装Go）。再次，继续并提供您的系统凭据。
- en: 'Once the installer is complete, you should get the following confirmation from
    the Go installer:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 安装程序完成后，您应该从Go安装程序获得以下确认：
- en: '![](img/bad5b5a6-fd6d-441c-87a4-8f6bc1efd6cc.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bad5b5a6-fd6d-441c-87a4-8f6bc1efd6cc.png)'
- en: 'Figure 2.5: The Go installer reports a successful installation'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.5：Go安装程序报告安装成功
- en: 'Once the installer is done, let''s open up Command Prompt and inspect where
    the installer installed the files:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 安装程序完成后，让我们打开命令提示符并检查安装程序安装文件的位置：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: On a macOS system, the Go distribution gets installed to the `/usr/local/go`
    directory, and the binaries that come with the Go distribution are installed in
    the `/usr/local/go/bin` directory.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS系统上，Go分发安装到`/usr/local/go`目录中，Go分发附带的二进制文件安装在`/usr/local/go/bin`目录中。
- en: 'If you are new to the Go toolchain, you should use the `go help` command to
    get yourself acquainted with the various commands that come with Go:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是Go工具链的新手，您应该使用`go help`命令来熟悉Go附带的各种命令：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To ascertain the version of Go installed on your system, you can use the `go
    version` command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定系统上安装的Go版本，您可以使用`go version`命令：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You should have the latest version of Go installed on your system, and you need
    to have a properly configured Go workspace before you can proceed further.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在系统上安装最新版本的Go，并且在继续之前，您需要有一个正确配置的Go工作区。
- en: Setting up your Go workspace
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置您的Go工作区
- en: Now that you've successfully installed Go on your system, you need to have a
    properly configured Go workspace before you can proceed further. We will provide
    a high-level overview on setting up a Go workspace, and if you need further help,
    you may read the detailed instructions on setting up a Go workspace available
    at the Go website: [https://golang.org/doc/code.html](https://golang.org/doc/code.html).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已成功在系统上安装了Go，您需要在继续之前拥有一个正确配置的Go工作区。我们将提供设置Go工作区的高级概述，如果您需要进一步帮助，可以阅读Go网站上提供的设置Go工作区的详细说明：[https://golang.org/doc/code.html](https://golang.org/doc/code.html)。
- en: Use your favorite text editor to open up the `.profile` file in your home directory.
    If you are using Linux, you need to open up the `.bashrc` file found in your home
    directory.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您喜欢的文本编辑器打开您的主目录中的`.profile`文件。如果您使用Linux，您需要打开主目录中找到的`.bashrc`文件。
- en: 'We are going to add the following lines to the file to add some very important
    environment variables:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在文件中添加以下行以添加一些非常重要的环境变量：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: My username is `kamesh`, you will have to obviously replace this with your username.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我的用户名是`kamesh`，您显然需要用您的用户名替换它。
- en: '`$GOROOT` is an environment variable used to specify where the Go distribution
    is installed on the system.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`$GOROOT`是一个环境变量，用于指定Go分发在系统上的安装位置。'
- en: '`$GOPATH` is an environment variable used to specify the top-level directory
    containing the source code for all our Go projects. This directory is known as
    our Go workspace. I have created my workspace in my home directory in the `go`
    folder: `/Users/kamesh/go`.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`$GOPATH`是一个环境变量，用于指定包含所有Go项目源代码的顶级目录。这个目录被称为我们的Go工作空间。我已经在我的家目录的`go`文件夹中创建了我的工作空间：`/Users/kamesh/go`。'
- en: 'Let''s go ahead and create our Go workspace along with three important directories
    inside of it:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建我们的Go工作空间，以及其中的三个重要目录：
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `go/src` directory will contain the Go source files. The `go/pkg` directory
    will contain the compiled Go packages. Finally, the `go/bin` directory will contain
    compiled Go binaries.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`go/src`目录将包含Go源文件。`go/pkg`目录将包含编译后的Go包。最后，`go/bin`目录将包含编译后的Go二进制文件。'
- en: '`$GOBIN` is an environment variable used to specify the location where Go should
    install compiled binaries. When we run the `go install` command, Go compiles our
    source code and stores the newly created binary in the directory specified by
    `$GOBIN`.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`$GOBIN`是一个环境变量，用于指定Go应该安装编译后的二进制文件的位置。当我们运行`go install`命令时，Go会编译我们的源代码，并将新创建的二进制文件存储在`$GOBIN`指定的目录中。'
- en: We include two additional entries to the **`$PATH` **environment variable—the
    `$GOROOT/bin` and `$GOBIN` directories. This tells our shell environment where
    to look to find Go-related binaries. Tacking on `$GOROOT/bin` to the `$PATH` lets
    the shell environment know where binaries for the Go distribution are located.
    Tacking on `$GOBIN` tells the shell environment where the binaries for the Go
    programs we create will exist.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向**`$PATH`**环境变量添加了两个额外的条目——`$GOROOT/bin`和`$GOBIN`目录。这告诉我们的shell环境在哪里找到与Go相关的二进制文件。将`$GOROOT/bin`添加到`$PATH`中，让shell环境知道Go分发的二进制文件位于何处。添加`$GOBIN`告诉shell环境我们创建的Go程序的二进制文件位于何处。
- en: Building and running Go programs
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和运行Go程序
- en: Let's create a simple "hello world" program to check our Go setup.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的“hello world”程序来检查我们的Go设置。
- en: 'We start out by creating a directory for our new program inside the `src` directory
    of our Go workspace, as shown here:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在Go工作空间的`src`目录中创建一个新程序的目录，如下所示：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, using your favorite text editor, let''s create a `hellogopher.go` source
    file in the `hellogopher` directory with the following contents:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用您喜欢的文本编辑器，在`hellogopher`目录中创建一个`hellogopher.go`源文件，内容如下：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To build and run this program in one step, you can issue the `go run` command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要一步构建和运行此程序，您可以发出`go run`命令：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To produce a binary executable file that will exist in the current directory,
    you can issue the `go build` command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成一个存在于当前目录中的二进制可执行文件，您可以发出`go build`命令：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To build a binary executable and automatically move it to your `$GOBIN` directory,
    you can issue the `go install` command:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建一个二进制可执行文件并自动将其移动到您的`$GOBIN`目录，您可以发出`go install`命令：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After issuing the `go install` command, you simply have to type the following
    command to run it (provided that `$GOBIN` is specified in your `$PATH`):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 发出`go install`命令后，您只需输入以下命令来运行它（假设`$GOBIN`在您的`$PATH`中已经指定）：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: At this point, we have successfully installed, configured, and verified the
    Go installation. Now it's time to to get the other tools up and running, starting
    with GopherJS.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经成功安装、配置和验证了Go安装。现在是时候启动其他工具了，首先是GopherJS。
- en: GopherJS
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GopherJS
- en: GopherJS is a transpiler that converts Go code into pure JavaScript code. Using
    GopherJS, we can write the front-end code in Go that will work across all major
    web browsers that support JavaScript. This technology allows us to unleash the
    power of Go inside the web browser, and without it, Isomorphic Go would not be
    possible.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: GopherJS是一个将Go代码转换为纯JavaScript代码的转换器。使用GopherJS，我们可以用Go编写前端代码，这些代码将在支持JavaScript的所有主要Web浏览器上运行。这项技术使我们能够在Web浏览器中释放Go的力量，没有它，同构Go将是不可能的。
- en: In this chapter, we will show you how to install GopherJS. We will cover GopherJS
    in greater detail in [Chapter 3](0f18d7dd-b081-4090-8b9c-c7a392261b31.xhtml), *Go
    on the Front-End with GopherJS*.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将向您展示如何安装GopherJS。我们将在[第3章](0f18d7dd-b081-4090-8b9c-c7a392261b31.xhtml)中更详细地介绍GopherJS，*使用GopherJS进行前端开发*。
- en: 'Getting up and running with GopherJS consists of the following steps:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用GopherJS包括以下步骤：
- en: Installing GopherJS
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装GopherJS
- en: Installing essential GopherJS bindings
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装必要的GopherJS绑定
- en: Getting familiar with GopherJS on the command line
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行上熟悉GopherJS
- en: Installing GopherJS
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装GopherJS
- en: 'We can install GopherJS by issuing the following `go get` command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过发出以下`go get`命令来安装GopherJS：
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To find out the current version of `gopherjs` installed on your system, use
    the `gopherjs version` command:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找系统上安装的`gopherjs`的当前版本，使用`gopherjs version`命令：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The major versions of Go and GopherJS must match on your system. We will be
    using version 1.9.1 of Go and version 1.9-1 of GopherJS in this book.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Go和GopherJS的主要版本必须在您的系统上匹配。在本书中，我们将使用Go的1.9.1版本和GopherJS的1.9-1版本。
- en: 'You can type `gopherjs help` to get yourself acquainted with the various commands
    that come with GopherJS:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以输入`gopherjs help`来熟悉GopherJS提供的各种命令：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Installing essential GopherJS bindings
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装必要的GopherJS绑定
- en: 'Now that we''ve installed GopherJS and confirmed that it is working, we need
    to obtain the following GopherJS bindings, which are required for our front-end
    web application development needs:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了GopherJS并确认它可以工作，我们需要获取以下GopherJS绑定，这些绑定是我们前端网页应用开发所需的：
- en: dom
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: dom
- en: jsbuiltin
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jsbuiltin
- en: xhr
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: xhr
- en: websocket
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: websocket
- en: dom
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: dom
- en: The `dom` package provides us with GopherJS bindings for JavaScript’s DOM APIs.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`dom`包为我们提供了JavaScript的DOM API的GopherJS绑定。'
- en: 'We can install the `dom` package by issuing the following command:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过发出以下命令来安装`dom`包：
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: jsbuiltin
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jsbuiltin
- en: 'The `jsbuiltin` package provides bindings for common JavaScript operators and
    functions. We can install the `jsbuiltin` package by issuing the following command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`jsbuiltin`包为常见的JavaScript运算符和函数提供了绑定。我们可以通过发出以下命令来安装`jsbuiltin`包：'
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: xhr
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: xhr
- en: 'The `xhr` package provides bindings for the `XMLHttpRequest` object. We can
    install the `xhr` package by issuing the following command:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`xhr`包为`XMLHttpRequest`对象提供了绑定。我们可以通过以下命令安装`xhr`包：'
- en: '[PRE16]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: websocket
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: websocket
- en: 'The `websocket` package provides bindings for the web browser''s WebSocket
    API. We can install the `websocket` package by issuing the following command:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`websocket`包为Web浏览器的WebSocket API提供了绑定。我们可以通过以下命令安装`websocket`包：'
- en: '[PRE17]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Getting familiar with GopherJS on the command line
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 熟悉命令行上的GopherJS
- en: 'The `gopherjs` command is very similar to the `go` command. For example, to
    transpile a Go program into its JavaScript representation, we issue the `gopherjs
    build` command like this:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`gopherjs`命令与`go`命令非常相似。例如，要将Go程序转译为其JavaScript表示形式，我们发出以下`gopherjs build`命令：'
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To build a GopherJS project and minify the produced JavaScript source file,
    we specify the `-m` flag along with the `gopherjs build` command:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建一个GopherJS项目并缩小生成的JavaScript源文件，我们需要在`gopherjs build`命令中指定`-m`标志：
- en: '[PRE19]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: When we perform a build operation, GopherJS will create both a `.js` source
    file and a `.js.map` source file.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行构建操作时，GopherJS将创建一个`.js`源文件和一个`.js.map`源文件。
- en: The `.js.map` files are called source maps. They help us map a minified JavaScript
    source file back to its unbuilt state. This feature comes in handy when we chase
    down errors using the web browser console.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`.js.map`文件称为源映射。当我们使用Web浏览器控制台追踪错误时，此功能非常有用，可以将缩小的JavaScript源文件映射回其未构建状态。'
- en: The JavaScript source file, generated by GopherJS, can be imported as an external
    JavaScript source file into a web page using the `script` tag.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 由GopherJS生成的JavaScript源文件可以作为外部JavaScript源文件导入到Web页面中，使用`script`标签。
- en: The Isomorphic Go toolkit
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 等同Go工具包
- en: 'The Isomorphic Go toolkit ([http://isomorphicgo.org](http://isomorphicgo.org))
    provides us with the technology needed to implement Isomorphic Go web applications.
    We will be using the `isokit` package, from the Isomorphic Go toolkit, to implement
    an isomorphic web application:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 等同Go工具包（[http://isomorphicgo.org](http://isomorphicgo.org)）为我们提供了实现等同Go Web应用程序所需的技术。我们将使用等同Go工具包中的`isokit`包来实现等同Web应用程序：
- en: '![](img/316a1087-f70e-41f0-9d18-e8ba031b35ae.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/316a1087-f70e-41f0-9d18-e8ba031b35ae.png)'
- en: 'Figure 2.6: The Isomorphic Go website'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.6：等同Go网站
- en: Installing isokit
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装isokit
- en: The `isokit` package from the Isomorphic Go toolkit provides a common isomorphic
    functionality, which can be used either on the server side or on the client side.
    Some notable benefits that the package provides include isomorphic template rendering,
    client-side application routing, automatic static assets bundling, and the ability
    to create isomorphic web forms.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Isomorphic Go工具包的`isokit`包提供了通用的等同功能，可以在服务器端或客户端上使用。该软件包提供的一些显着优点包括等同模板渲染、客户端应用程序路由、自动静态资产捆绑以及创建等同Web表单的能力。
- en: 'We can install the `isokit` package by issuing the following `go get` command:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下`go get`命令安装`isokit`包：
- en: '[PRE20]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The UX toolkit
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UX工具包
- en: The UX toolkit ([http://uxtoolkit.io](http://uxtoolkit.io)) allows us to implement
    *cogs*, which are reusable components implemented in Go that can be used across
    the web pages that comprise IGWEB. We will cover reusable components in [Chapter
    9](cbb6c046-c40f-4681-a25d-9b979614b2cf.xhtml), *Cogs – Reusable Components*.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: UX工具包（[http://uxtoolkit.io](http://uxtoolkit.io)）允许我们实现*齿轮*，这些齿轮是用Go实现的可重用组件，可以在组成IGWEB的网页中使用。我们将在[第9章](cbb6c046-c40f-4681-a25d-9b979614b2cf.xhtml)中介绍可重用组件，*齿轮-可重用组件*。
- en: Installing the cog package
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装齿轮包
- en: 'We can install the `cog` package by issuing the following `go get` command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下`go get`命令安装`cog`包：
- en: '[PRE21]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now that we've installed the Isomorphic Go toolchain, it's time to set up the
    IGWEB demo, the isomorphic web application that we'll be building in this book.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了等同Go工具链，是时候设置IGWEB演示了，这是本书中我们将构建的等同Web应用程序。
- en: Setting up the IGWEB demo
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置IGWEB演示
- en: 'You can get the source code examples for this book by issuing the following
    `go get` command:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以下`go get`命令获取本书的源代码示例：
- en: '[PRE22]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The source code for the completed implementation of the IGWEB demo website resides
    in the `igb/igweb` folder. Source code listings for individual chapters can be
    found inside the `igb/individual` folder.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: IGWEB演示网站的完成实现源代码位于`igb/igweb`文件夹中。各章节的源代码清单可以在`igb/individual`文件夹中找到。
- en: Setting up the application root environment variable
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置应用程序根环境变量
- en: The IGWEB demo relies on an application root environment variable, `$IGWEB_APP_ROOT`,
    being defined. This environment variable is used by the web application to declare
    where it resides. By doing so, the web application can determine where other resources,
    such as static assets (images, css, and javascript), are present.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: IGWEB演示依赖于应用程序根环境变量`$IGWEB_APP_ROOT`的定义。Web应用程序使用此环境变量来声明其所在位置。通过这样做，Web应用程序可以确定其他资源的位置，例如静态资产（图像、css和javascript）。
- en: 'You should set up the `$IGWEB_APP_ROOT` environment variable by adding the
    following entry in your bash profile:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该通过在bash配置文件中添加以下条目来设置`$IGWEB_APP_ROOT`环境变量：
- en: '[PRE23]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To verify that the `$IGWEB_APP_ROOT` environment variable exists in the environment,
    you can use the `echo` command:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证环境中是否存在`$IGWEB_APP_ROOT`环境变量，可以使用`echo`命令：
- en: '[PRE24]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Transpiling the client-side application
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转译客户端应用程序
- en: 'Now that we''ve set up the `$IGWEB_APP_ROOT` environment variable, we can access
    the `client` directory, where the client-side web application is located:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了`$IGWEB_APP_ROOT`环境变量，我们可以访问`client`目录，其中包含客户端Web应用程序：
- en: '[PRE25]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We issue the following `go get` command to install any additional dependencies
    that may be required for the proper functioning of our client-side application:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发出以下`go get`命令来安装可能需要的任何其他依赖项，以确保我们的客户端应用程序正常运行：
- en: '[PRE26]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Finally, we issue the `gopherjs build` command to transpile the IGWEB client-side
    web application:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们发出`gopherjs build`命令来转译IGWEB客户端Web应用程序：
- en: '[PRE27]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: After running the command, two files should be generated—`client.js` and `client.js.map`.
    The `client.js` source file is the JavaScript representation of IGWEB's client-side
    Go program. The `client.js.map` file is the source map file that will be used
    in conjunction with `client.js` by the web browser to provide us detailed information
    in the web console, which comes in handy when debugging issues.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 运行命令后，应该生成两个文件——`client.js`和`client.js.map`。`client.js`源文件是IGWEB客户端Go程序的JavaScript表示。`client.js.map`文件是源映射文件，将与`client.js`一起在Web浏览器中使用，以在Web控制台中提供详细信息，这在调试问题时非常方便。
- en: Now that we've transpiled the code for IGWEB's client-side application, the
    next logical step would be to build and run IGWEB's server-side application. Before
    we can do that, we must install and run a local Redis instance, which is what
    we'll do in the next section.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经转译了IGWEB客户端应用程序的代码，下一个逻辑步骤将是构建和运行IGWEB服务器端应用程序。在我们这样做之前，我们必须安装并运行本地Redis实例，这是我们将在下一节中做的事情。
- en: Setting up Redis
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Redis
- en: Redis is a popular NoSQL in-memory database. Since the entire database is present
    in the memory, database queries are blazingly fast. Redis is also known to offer
    support for a robust variety of data types, and it's a multipurpose tool that
    can be used as a database, a memory-cache, or even as a message broker.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Redis是一种流行的NoSQL内存数据库。由于整个数据库都存在于内存中，数据库查询非常快速。Redis也以支持多种数据类型而闻名，它是一个多用途工具，可以用作数据库、内存缓存，甚至作为消息代理。
- en: In this book, we will use Redis for IGWEB's data persistence needs. We will
    be running our Redis instance on the default port of 6379.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用Redis来满足IGWEB的数据持久化需求。我们将在默认端口6379上运行我们的Redis实例。
- en: 'We issue the following commands to download and install Redis:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发出以下命令来下载和安装Redis：
- en: '[PRE28]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'An alternative to fetching Redis using the `wget` command is to obtain it from
    the Redis Downloads page, as shown in *Figure 2.7,* at [https://redis.io/download](https://redis.io/download):'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`wget`命令获取Redis的替代方法是从Redis下载页面获取，如*图2.7*所示，网址为[https://redis.io/download](https://redis.io/download)：
- en: '![](img/f96ccb37-2b11-437a-bd38-bfc1cfdae2ff.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f96ccb37-2b11-437a-bd38-bfc1cfdae2ff.png)'
- en: 'Figure 2.7: The Downloads section on the Redis website'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.7：Redis网站上的下载部分
- en: 'Once you have downloaded and installed Redis, you can start up the server by
    issuing the `redis-server` command:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 下载并安装Redis后，您可以通过发出`redis-server`命令启动服务器：
- en: '[PRE29]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In another Terminal window, we can open up the Redis **command-line interface**
    (**CLI**), to connect to the Redis server instance, using the `redis-cli` command:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个终端窗口中，我们可以打开Redis的**命令行界面**（**CLI**），使用`redis-cli`命令连接到Redis服务器实例：
- en: '[PRE30]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We can set a `foo` key with the `bar` value using the `set` command:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`set`命令设置`foo`键的`bar`值：
- en: '[PRE31]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We can get the value for the `foo` key using the `get` command:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`get`命令获取`foo`键的值：
- en: '[PRE32]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: You can learn more about Redis by visiting the documentation section of the
    Redis website at [https://redis.io/documentation.](https://redis.io/documentation) Going
    through the Redis quick start document available at [https://redis.io/topics/quickstart](https://redis.io/topics/quickstart) is also
    helpful. Now that we've installed our local Redis instance, it's time to build
    and run the IGWEB demo.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过访问Redis网站的文档部分了解更多关于Redis的信息，网址为[https://redis.io/documentation.](https://redis.io/documentation)。阅读Redis快速入门文档，网址为[https://redis.io/topics/quickstart](https://redis.io/topics/quickstart)，也是有帮助的。现在我们已经安装了本地Redis实例，是时候构建和运行IGWEB演示了。
- en: Running the IGWEB demo
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行IGWEB演示
- en: 'You can run the IGWEB web server instance by first changing the directory to
    the `$IGWEB_APP_ROOT` directory, and then issuing the `go run` command:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过首先将目录更改为`$IGWEB_APP_ROOT`目录，然后发出`go run`命令来运行IGWEB Web服务器实例：
- en: '[PRE33]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'You can access the IGWEB website by visiting the `http://localhost:8080/index link`
    from your web browser. You should be able to see the home page of the website,
    as shown in *Figure 2.8*:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过访问`http://localhost:8080/index`链接从您的Web浏览器访问IGWEB网站。您应该能够看到网站的主页，如*图2.8*所示：
- en: '![](img/e85914c0-73d8-41eb-a9fa-4d7bcf532bff.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e85914c0-73d8-41eb-a9fa-4d7bcf532bff.png)'
- en: 'Figure 2.8: The IGWEB Home Page'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.8：IGWEB主页
- en: The final step of our installation procedure is to load the local Redis instance
    with the sample dataset.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们安装过程的最后一步是使用示例数据集加载本地Redis实例。
- en: Loading the sample dataset
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载示例数据集
- en: The sample dataset provided is used to populate data for the Products listing
    and About pages. You can visit the Products listing page in your browser by accessing `http://localhost:8080/products`,
    and you should see the screen shown in *Figure 2.9:*
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的示例数据集用于填充产品列表和关于页面的数据。您可以通过访问`http://localhost:8080/products`在浏览器中查看产品列表页面，您应该会看到*图2.9*中显示的屏幕：
- en: '![](img/628a6b67-8ec5-4f25-a637-fdc14036d7ad.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/628a6b67-8ec5-4f25-a637-fdc14036d7ad.png)'
- en: 'Figure 2.9: The Empty Products section with a message to load the sample dataset'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.9：空产品部分，显示加载示例数据集的消息
- en: 'Go ahead and click on the link displayed on the web page to load the sample
    dataset. When you click on the link, you should see the screen shown in *Figure
    2.10*:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 继续点击网页上显示的链接以加载示例数据集。当您点击链接时，您应该会看到*图2.10*中显示的屏幕：
- en: '![](img/c3620722-69e4-4d0e-8a82-09e758657896.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c3620722-69e4-4d0e-8a82-09e758657896.png)'
- en: 'Figure 2.10: The confirmation that the sample dataset has been loaded'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.10：确认已加载示例数据集
- en: 'Now if you go back to the Products listing page, you should see the products
    displayed on the page, as shown in *Figure 2.11*:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您返回产品列表页面，您应该会看到页面上显示的产品，如*图2.11*所示：
- en: '![](img/8ae4bf3f-f652-4877-9ae2-fe1bcf497c29.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8ae4bf3f-f652-4877-9ae2-fe1bcf497c29.png)'
- en: 'Figure 2.11: The Products Section, Populated With Products'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.11：填充了产品的产品部分
- en: We now have the IGWEB demo up and running!
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经启动并运行了IGWEB演示！
- en: Each time we want to make a change to our server-side Go application, we need
    to issue a `go build` command and restart the web server instance. Similarly,
    each time we make a change to our client-side Go application, we have to issue
    a `gopherjs build` command. Constantly issuing these commands, while we're deep
    in development, can be tedious and inefficient. The `kick` command provides us
    with a means to be more productive.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们想要对服务器端的 Go 应用程序进行更改时，我们需要发出 `go build` 命令并重新启动 web 服务器实例。同样，每当我们对客户端的 Go
    应用程序进行更改时，我们必须发出 `gopherjs build` 命令。在开发过程中不断发出这些命令可能会很烦人和低效。`kick` 命令为我们提供了一种更高效的方式。
- en: Using kick
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 kick
- en: The `kick` command is a lightweight mechanism that provides an *instant kickstart*
    to a Go web server instance. The *instant kickstart* happens when a Go source
    file within the application's project directory (or any of its subdirectories)
    gets changed.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`kick` 命令是一种轻量级机制，为 Go web 服务器实例提供了*即时启动*。当应用程序项目目录（或其任何子目录）中的 Go 源文件发生更改时，*即时启动*就会发生。'
- en: The `kick` command provides us a means to automate our development workflow,
    by recompiling our Go code and restarting the web server, anytime we make a change
    to a Go source file.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`kick` 命令为我们提供了一种自动化开发工作流程的手段，通过重新编译我们的 Go 代码并重新启动 web 服务器，每当我们对 Go 源文件进行更改时。'
- en: The workflow provided by `kick` is similar to developing web applications using
    a dynamic, scripting language such as PHP, where anytime a change is made to the
    PHP source file, the change is instantly reflected when the web page is refreshed
    in the browser.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`kick` 提供的工作流程类似于使用动态脚本语言（如 PHP）开发 web 应用程序，每当对 PHP 源文件进行更改时，刷新浏览器中的网页会立即反映出更改。'
- en: What sets `kick` apart from other Go-based solutions in this problem space is
    that it takes both the `go` and `gopherjs` commands into consideration while performing
    the i*nstant kickstart*. It also takes changes made to template files into consideration
    as well, making it a handy tool for isomorphic web application development.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个问题空间中，`kick` 与其他基于 Go 的解决方案的不同之处在于，在执行*即时启动*时，它考虑了 `go` 和 `gopherjs` 命令。它还考虑了对模板文件的更改，使其成为同构
    web 应用程序开发的便捷工具。
- en: Installing kick
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 kick
- en: 'To install `kick`, we simply issue the following `go get` command:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 `kick`，我们只需发出以下 `go get` 命令：
- en: '[PRE35]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Running kick
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行 kick
- en: 'To learn how to use `kick`, you can issue the `help` command line flag like
    this:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何使用 `kick`，可以像这样发出 `help` 命令行标志：
- en: '[PRE36]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The `--appPath` flag specifies the path to the Go application project. The `--gopherjsAppPath`
    flag specifies the path to your GopherJS project. The `--mainSourceFile` flag
    specifies the name of the Go source file that contains the `main` function implementation
    in the Go application project directory. If you're still running IGWEB using the `go
    run` command in the Terminal window, it's time to exit the program and run it
    using `kick` instead.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`--appPath` 标志指定 Go 应用程序项目的路径。`--gopherjsAppPath` 标志指定 GopherJS 项目的路径。`--mainSourceFile`
    标志指定包含 Go 应用程序项目目录中 `main` 函数实现的 Go 源文件的名称。如果你仍然在终端窗口中使用 `go run` 命令运行 IGWEB，现在是退出程序并使用
    `kick` 运行它的时候了。'
- en: 'To run the IGWEB demo with `kick`, we issue the following command:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `kick` 运行 IGWEB 演示，我们发出以下命令：
- en: '[PRE37]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Verify that kick is working
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证 kick 是否正常工作
- en: 'Let''s open up the About page (`http://localhost:8080/about`) along with the
    web inspector. Take note of the message that says IGWEB Client Application in
    the web console, as shown in *Figure 2.12*:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开关于页面（`http://localhost:8080/about`）以及网络检查器。注意在网络控制台中显示的 IGWEB 客户端应用程序的消息，如
    *图2.12* 所示：
- en: '![](img/9b32d07a-f409-4f16-9a47-31cbeab0b4ed.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9b32d07a-f409-4f16-9a47-31cbeab0b4ed.png)'
- en: 'Figure 2.12: The message printed in the web console'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.12：在网络控制台中打印的消息
- en: 'Let''s open up the `client.go` source file located in the `client` directory.
    Let''s replace the first line in the `run` function with the following one:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开位于 `client` 目录中的 `client.go` 源文件。让我们用以下内容替换 `run` 函数中的第一行：
- en: '[PRE38]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Save the file and look at the Terminal window, where you''re running `kick`,
    and you should be able to see the following message appear:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件并查看终端窗口，在那里你正在运行 `kick`，你应该能够看到以下消息出现：
- en: '[PRE39]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This is a confirmation from `kick` that it has detected the change to the file,
    and that it has performed an i*nstant kickStart*. Now, let''s reload the web page,
    and you should be able to see the updated message, as shown in *Figure 2.13*:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 这是来自 `kick` 的确认，它已经检测到文件的更改，并执行了*即时启动*。现在，让我们重新加载网页，你应该能够看到更新后的消息，如 *图2.13*
    所示：
- en: '![](img/bab89060-bee6-4416-bb79-48eba369ce46.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bab89060-bee6-4416-bb79-48eba369ce46.png)'
- en: 'Figure 2.13: The modified message is printed in the web console'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.13：修改后的消息在网络控制台中打印出来
- en: Now that you have the IGWEB demo running successfully on your machine using
    `kick`, an introduction to the project is in order.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经成功使用 `kick` 在你的机器上运行 IGWEB 演示，现在是介绍项目的时候了。
- en: An introduction to the IGWEB demo
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IGWEB 演示简介
- en: IGWEB is a fictitious tech startup created by three imaginary gophers who want
    to use Isomorphic Go to build a simple storefront demo on the web. The idea of
    these enterprising gophers is to take common, secondhand products sold at garage/yard
    sales and sell them online instead. This team of gophers have chosen to implement
    the IGWEB demo in Isomorphic Go to not only provide an enhanced user experience
    but also to gain greater search engine discoverability. If you haven't guessed
    already, IGWEB simply stands for *Isomorphic Go web application*.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: IGWEB 是由三个想要使用同构 Go 在网上构建简单商店演示的虚构科技初创公司。这些有进取心的 gopher 的想法是将在车库/庭院销售的常见二手产品在线销售。这个
    gopher 团队选择在同构 Go 中实现 IGWEB 演示，不仅提供增强的用户体验，还能获得更大的搜索引擎可发现性。如果你还没有猜到，IGWEB 简单地代表*同构
    Go web 应用程序*。
- en: Building IGWEB from the ground up
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从头开始构建 IGWEB
- en: In order to understand the underlying concepts that are involved with building
    an isomorphic web application, we will follow an idiomatic Go approach while creating
    IGWEB. We will make use of the functionality found from packages in the standard
    library as well as from third-party packages.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解构建同构Web应用程序涉及的基本概念，我们将在创建IGWEB时遵循惯用的Go方法。我们将利用标准库中的功能以及第三方包中发现的功能。
- en: If you are experienced in developing web applications using a web framework,
    you may be wondering why we are taking this approach. At the time of writing,
    there is no Go-based web framework that provides functionality, out of the box,
    to create a web application that conforms to the isomorphic web application architecture
    that was presented in the previous chapter.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有使用Web框架开发Web应用程序的经验，您可能会想知道为什么我们采取这种方法。在撰写本文时，没有基于Go的Web框架可以提供开箱即用的功能，用于创建符合上一章中介绍的同构Web应用程序架构的Web应用程序。
- en: In addition to this, web frameworks often involve following a particular set
    of rules and conventions that may be framework-specific. Our focus is conceptual
    and is not tied to a particular web framework. Therefore, our attention will be
    focused on the underlying concepts involved in the creation of an isomorphic web
    application.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Web框架通常涉及遵循特定的规则和约定，这可能是特定于框架的。我们的重点是概念性的，不与特定的Web框架绑定。因此，我们的注意力将集中在创建同构Web应用程序涉及的基本概念上。
- en: The IGWEB roadmap
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IGWEB路线图
- en: In the process of building each section and feature of the IGWEB demo website,
    we will learn more about Isomorphic Go. Here's a roadmap of the major sections/features
    of IGWEB along with the corresponding chapter in the book, where we implement
    that particular section or feature.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建IGWEB演示网站的每个部分和功能的过程中，我们将学习更多关于同构Go的知识。以下是IGWEB主要部分/功能的路线图，以及在书中实现该特定部分或功能的相应章节。
- en: The home page
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 首页
- en: Besides containing the image carousel of featured products and the multiple
    live clocks, the IGWEB home page also contains a section with links to standalone
    front-end coding examples.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 除了包含精选产品的图像轮播和多个实时时钟之外，IGWEB首页还包含一个链接到独立前端编码示例的部分。
- en: The standalone examples include various front-end programming examples, an example
    of inline template rendering using GopherJS, and a local storage inspector. These
    examples will be covered in [Chapter 3](0f18d7dd-b081-4090-8b9c-c7a392261b31.xhtml), *Go
    on the Front-End with GopherJS*. The image carousel and the live clocks will be
    covered in [Chapter 9](cbb6c046-c40f-4681-a25d-9b979614b2cf.xhtml), *Cogs – Reusable
    Components*.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 独立示例包括各种前端编程示例，使用GopherJS进行内联模板渲染的示例，以及本地存储检查器的示例。这些示例将在[第3章](0f18d7dd-b081-4090-8b9c-c7a392261b31.xhtml)中进行介绍，*使用GopherJS进行前端开发*。图像轮播和实时时钟将在[第9章](cbb6c046-c40f-4681-a25d-9b979614b2cf.xhtml)中进行介绍，*齿轮-可重用组件*。
- en: 'Location of the home page: `http://localhost:8080/index`.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 首页的位置：`http://localhost:8080/index`。
- en: The about page
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于页面
- en: Our team of gophers want to be visible to the world, by being featured on IGWEB's
    About page. In the process of making this happen, we will learn isomorphic template
    rendering and the ability to share templates, template data, and template functions
    across environments.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的gopher团队希望通过在IGWEB的关于页面上亮相来向世界展示自己。在实现这一目标的过程中，我们将学习同构模板渲染以及在不同环境中共享模板、模板数据和模板函数的能力。
- en: The About page will be covered in [Chapter 4](eec79e85-e888-47e8-851e-d983d5aea55d.xhtml),
    *Isomorphic Templates*.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 关于页面将在[第4章](eec79e85-e888-47e8-851e-d983d5aea55d.xhtml)中进行介绍，*同构模板*。
- en: 'Location of the About page: `http://localhost:8080/about`.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 关于页面的位置：`http://localhost:8080/about`。
- en: The products page
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 产品页面
- en: The Products listing page features the available products to be sold on the
    IGWEB website. Each product comes with a product title, an image thumbnail preview,
    the price of the product, and a short description. Clicking on the product image
    will take the user to the product detail page, where the user can learn more about
    that particular product. By implementing the product listing and product detail
    pages, we will learn about end-to-end application routing in Isomorphic Go.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 产品列表页面展示了IGWEB网站上可供销售的产品。每个产品都有产品标题、图像缩略图预览、产品价格和简短描述。单击产品图像将带用户转到产品详细页面，在那里用户可以了解更多关于该特定产品的信息。通过实现产品列表和产品详细页面，我们将了解同构Go中的端到端应用程序路由。
- en: The Products page will be covered in [Chapter 5](8c1d6725-c841-42b2-904d-e34ba3764cc3.xhtml),
    *End-to-End Routing*.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 产品页面将在[第5章](8c1d6725-c841-42b2-904d-e34ba3764cc3.xhtml)中进行介绍，*端到端路由*。
- en: 'Location of the Products page: `http://localhost:8080/products`.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 产品页面的位置：`http://localhost:8080/products`。
- en: The shopping cart feature
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 购物车功能
- en: Each product card displayed in the Products page will contain an Add To Cart
    button. The button will also be available on the product's detail page. We will
    learn how to maintain the state of the shopping cart when performing add and remove
    operations on the shopping cart.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 产品页面中显示的每个产品卡都将包含一个“添加到购物车”按钮。该按钮也将出现在产品的详细页面上。我们将学习如何在执行购物车上的添加和删除操作时维护购物车的状态。
- en: The shopping cart feature will be covered in [Chapter 6](5759cf7a-e435-431d-b7ca-24a846d6165a.xhtml),
    *Isomorphic Handoff*.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 购物车功能将在[第6章](5759cf7a-e435-431d-b7ca-24a846d6165a.xhtml)中进行介绍，*同构交接*。
- en: 'Location: `http://localhost:8080/shopping-cart`.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 位置：`http://localhost:8080/shopping-cart`。
- en: The contact page
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 联系页面
- en: The Contact page will provide the means to contact IGWEB's team of gophers.
    In the process of implementing the contact form, we will understand how to implement
    an isomorphic web form that shares validation logic, across environments. In addition
    to this, we will also learn how the web form can work resiliently, even in situations
    where JavaScript is disabled in the web browser.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 联系页面将提供与IGWEB的gopher团队联系的方式。在实施联系表单的过程中，我们将了解如何实现一个同构Web表单，它在不同环境中共享验证逻辑。此外，我们还将学习Web表单如何在Web浏览器中禁用JavaScript的情况下保持弹性工作。
- en: The Contact page will be covered in [Chapter 7](a9dcc0d7-ecf7-4ad0-b879-0a596ab4594e.xhtml),
    *The Isomorphic Web Form*. The date picker `cog` for the contact form's time sensitivity
    input field will be covered in [Chapter 9](cbb6c046-c40f-4681-a25d-9b979614b2cf.xhtml),
    *Cogs – Reusable Components*.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 联系页面将在[第7章](a9dcc0d7-ecf7-4ad0-b879-0a596ab4594e.xhtml)中介绍，*同构Web表单*。联系表单的日期选择器`cog`将在[第9章](cbb6c046-c40f-4681-a25d-9b979614b2cf.xhtml)中介绍，*Cogs
    – 可重复使用的组件*。
- en: 'Location of the Contact page: `http://localhost:8080/contact`.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 联系页面的位置：`http://localhost:8080/contact`。
- en: The live chat feature
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实时聊天功能
- en: In situations where greater user interactivity is required, website users can
    engage with a live chat bot. In the process of building the live chat feature,
    we will learn about the real-time web application functionality. The live chat
    feature will be covered in [Chapter 8](38c071ef-d44c-452c-80dd-0b76837cc5e8.xhtml),
    *Real-Time Web Application Functionality*.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在需要更大的用户交互性的情况下，网站用户可以与实时聊天机器人进行交互。在构建实时聊天功能的过程中，我们将了解实时Web应用程序功能。实时聊天功能将在[第8章](38c071ef-d44c-452c-80dd-0b76837cc5e8.xhtml)中介绍，*实时Web应用程序功能*。
- en: The live chat feature can be activated by clicking on the live chat icon located
    at the top-right corner of the web page.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 单击位于网页右上角的实时聊天图标即可激活实时聊天功能。
- en: Reusable components
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可重复使用的组件
- en: We will return to the home page by implementing a variety of reusable components,
    such as a live clock, and an image carousel, which features products that are
    available on IGWEB. We'll also build a date picker `cog` for the Contact page,
    and a time ago cog for the About page. The time ago cog will represent time in
    a human readable format. We'll also take a look at implementing a notify cog,
    which is used to display notification messages to the user.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实现各种可重复使用的组件，例如实时时钟和产品轮播图，我们将返回到主页，这些产品在IGWEB上可用。我们还将为联系页面构建日期选择器`cog`，以及关于页面的时间组件。时间组件将以人类可读的格式表示时间。我们还将研究实现通知组件，用于向用户显示通知消息。
- en: Reusable components will be covered in [Chapter 9](cbb6c046-c40f-4681-a25d-9b979614b2cf.xhtml),
    *Cogs – Reusable Components*.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 可重复使用的组件将在[第9章](cbb6c046-c40f-4681-a25d-9b979614b2cf.xhtml)中介绍，*Cogs – 可重复使用的组件*。
- en: Project structure and code organization
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目结构和代码组织
- en: 'The code for the IGWEB project can be found in the `igweb` folder, and it is
    organized into the following folders (listed in alphabetical order):'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: IGWEB项目的代码可以在`igweb`文件夹中找到，并且按照以下文件夹进行组织（按字母顺序列出）：
- en: '[PRE40]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The `bot` folder contains the source files that implement the chat bot for the
    live chat feature.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`bot`文件夹包含实现实时聊天功能的聊天机器人的源文件。'
- en: The `chat` folder contains the server-side code that implements the chat server
    for the live chat feature.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`chat`文件夹包含实现实时聊天功能的聊天服务器的服务器端代码。'
- en: The `client` folder contains the client-side Go program that will be transpiled
    into JavaScript using GopherJS.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`client`文件夹包含将使用GopherJS转译为JavaScript的客户端Go程序。'
- en: The `client/carsdemo` contains a standalone example that demonstrates inline
    template rendering using GopherJS. This example will be covered in [Chapter 3](0f18d7dd-b081-4090-8b9c-c7a392261b31.xhtml),
    *Go on the Front-End with GopherJS*.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`client/carsdemo`包含一个独立示例，演示使用GopherJS进行内联模板渲染。此示例将在[第3章](0f18d7dd-b081-4090-8b9c-c7a392261b31.xhtml)中介绍，*使用GopherJS进行前端开发*。'
- en: The `client/chat` folder contains the client-side code that implements the chat
    client.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`client/chat`文件夹包含实现聊天客户端的客户端代码。'
- en: The `client/common` folder contains the client-side code that implements the
    common functionality used throughout the client-side application.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '`client/common`文件夹包含实现客户端应用程序中使用的通用功能的客户端代码。'
- en: The `client/gopherjsprimer` contains the standalone GopherJS examples that will
    be covered in [Chapter 3](0f18d7dd-b081-4090-8b9c-c7a392261b31.xhtml), *Go on
    the Front-End with GopherJS*.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`client/gopherjsprimer`包含独立的GopherJS示例，将在[第3章](0f18d7dd-b081-4090-8b9c-c7a392261b31.xhtml)中介绍，*使用GopherJS进行前端开发*。'
- en: The `client/handlers` folder contains client-side, route/page handlers. These
    handlers are responsible for handling the routes of pages on the client side,
    preventing a full page reload. They are also responsible for handling all client-side
    user interactions that occur for a given web page.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`client/handlers`文件夹包含客户端路由/页面处理程序。这些处理程序负责处理客户端页面的路由，防止完整页面重新加载。它们还负责处理给定网页的所有客户端用户交互。'
- en: The `client/localstoragedemo` contains an implementation of a local storage
    inspector, which will be covered in [Chapter 3](0f18d7dd-b081-4090-8b9c-c7a392261b31.xhtml),
    *Go on the Front-End with GopherJS*.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`client/localstoragedemo`包含本地存储检查器的实现，将在[第3章](0f18d7dd-b081-4090-8b9c-c7a392261b31.xhtml)中介绍，*使用GopherJS进行前端开发*。'
- en: 'The `client/tests` folder contains end-to-end tests that exercise the client-side
    functionality. This folder consists of these three folders: `client/tests/go`,
    `client/tests/js`, and `client/tests/screenshots`. The `go` subfolder contains
    CasperJS tests, which are automated tests that simulate user interactions with
    the website implemented in Go. Running the `build_casper_tests.sh` bash script,
    found in the `scripts` folder, will transpile each Go source file into its equivalent
    JavaScript representation, which will be stored in the `js` subfolder. Upon running
    the CasperJS tests, screenshots are generated and saved in the `screenshots` subfolder.'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '`client/tests`文件夹包含对客户端功能进行端到端测试的测试。该文件夹包括这三个文件夹：`client/tests/go`，`client/tests/js`和`client/tests/screenshots`。`go`子文件夹包含CasperJS测试，这些测试是模拟用户与使用Go实现的网站进行交互的自动化测试。运行`scripts`文件夹中的`build_casper_tests.sh`
    bash脚本将每个Go源文件转译为其等效的JavaScript表示形式，并存储在`js`子文件夹中。运行CasperJS测试时，将生成并保存截图在`screenshots`子文件夹中。'
- en: The `common` folder contains the server-side code that implements the common
    functionality used throughout the server-side application.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`common`文件夹包含实现服务器端应用程序中使用的通用功能的服务器端代码。'
- en: The `common/datastore` folder contains the server-side code that implements
    a Redis datastore to satisfy the application's data persistence needs.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`common/datastore`文件夹包含了实现Redis数据存储的服务器端代码，以满足应用程序的数据持久化需求。'
- en: The `endpoints` folder contains the server-side code for the Rest API endpoints
    that are responsible for servicing XHR calls made from the web client.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`endpoints`文件夹包含了负责为Web客户端发出的XHR调用提供服务的Rest API端点的服务器端代码。'
- en: The `handlers` folder contains the server-side code for the server-side route
    handler functions responsible for servicing a particular route. The primary responsibility
    of these handler functions is to send a web page response back to the client.
    They are used for the initial web page load, where the web page response is rendered
    on the server-side using the classic web application architecture.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`handlers`文件夹包含了服务器端路由处理函数的服务器端代码，负责为特定路由提供服务。这些处理函数的主要责任是向客户端发送网页响应。它们用于初始网页加载，其中网页响应是使用经典的Web应用程序架构在服务器端呈现的。'
- en: The `scripts` folder contains handy bash shell scripts to be run on the command
    line.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`scripts`文件夹包含了在命令行上运行的方便的bash shell脚本。'
- en: The `shared` folder contains the isomorphic code that is shared across the server
    and the client. Taking a look into this folder gives us an understanding of all
    the Go code that can be shared across environments.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`shared`文件夹包含了在服务器端和客户端之间共享的等同代码。查看这个文件夹可以让我们了解所有可以在各个环境中共享的Go代码。'
- en: The `shared/cogs` folder contains reusable components (cogs), which are registered
    on the server side and deployed on the client side.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`shared/cogs`文件夹包含了可重复使用的组件（cogs），这些组件在服务器端注册并在客户端部署。'
- en: The `shared/forms` folder contains isomorphic web forms.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`shared/forms`文件夹包含了等同Web表单。'
- en: The `shared/models` folder contains the isomorphic types (structs) that we use
    to model data in our isomorphic web application.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`shared/models`文件夹包含了我们用来模拟数据的等同类型（结构）在我们的等同Web应用程序中使用。'
- en: The `shared/templates` folder contains isomorphic templates that can be rendered
    across environments.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`shared/templates`文件夹包含了可以在各个环境中渲染的等同模板。'
- en: The `shared/templatedata` folder contains isomorphic data objects that are to
    be supplied to isomorphic templates at the time of rendering.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`shared/templatedata`文件夹包含了在渲染时要提供给等同模板的等同数据对象。'
- en: The `shared/templatefuncs` folder contains isomorphic template functions that
    can be used across environments.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`shared/templatefuncs`文件夹包含了可以在各个环境中使用的等同模板函数。'
- en: The `shared/validate` folder contains common, isomorphic validation logic, which
    can be utilized by web forms across environments.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`shared/validate`文件夹包含了通用的等同验证逻辑，可以被各个环境中的Web表单利用。'
- en: The `static` folder contains all the static assets for the isomorphic web application.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`static`文件夹包含了等同Web应用程序的所有静态资产。'
- en: The `static/css` folder contains the CSS stylesheet source files.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`static/css`文件夹包含了CSS样式表源文件。'
- en: The `static/fonts` folder contains the custom fonts used by the web application.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '`static/fonts`文件夹包含了Web应用程序使用的自定义字体。'
- en: The `static/images` folder contains the images used by the web application.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`static/images`文件夹包含了Web应用程序使用的图像。'
- en: The `static/js` folder contains the JavaScript source code for the web application.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`static/js`文件夹包含了Web应用程序的JavaScript源代码。'
- en: The `submissions` folder exists for illustration purposes. The folder houses
    the `submissions` package, which contains logic that is to be invoked after a
    web form has successfully cleared the web form validation process.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`submissions`文件夹存在于举例说明的目的。该文件夹包含了`submissions`包，其中包含了在Web表单成功通过Web表单验证过程后要调用的逻辑。'
- en: The `tests` folder contains end-to-end tests that exercise the server-side functionality.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`tests`文件夹包含了对服务器端功能进行端到端测试的测试。'
- en: The MVC pattern
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MVC模式
- en: 'IGWEB''s project codebase can be conceptualized as following the **Model-View-Control** (**MVC**)
    pattern. The MVC pattern is heavily used in the creation of web applications,
    and it is depicted in *Figure 2.14*:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: IGWEB的项目代码库可以被概念化为遵循**模型-视图-控制**（MVC）模式。MVC模式在Web应用程序的创建中被广泛使用，并在*图2.14*中描述：
- en: '![](img/09af5bf1-3a2f-4fe2-9070-96b8a1e7b260.png)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![](img/09af5bf1-3a2f-4fe2-9070-96b8a1e7b260.png)'
- en: 'Figure 2.14: The Model View Controller pattern'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.14：模型视图控制器模式
- en: There are three primary components in a MVC-based application—the model, the
    view, and the controller. The primary purpose of models are to supply data and
    business rules to the application. Think of the models as the gatekeepers of the
    application's data needs. The models for IGWEB can be found in the `shared/models`
    folder.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于MVC的应用程序中有三个主要组件——模型、视图和控制器。模型的主要目的是为应用程序提供数据和业务规则。把模型想象成应用程序数据需求的守门人。IGWEB的模型可以在`shared/models`文件夹中找到。
- en: Views are responsible for the output that the user sees. The focus of views
    is on presentation, and the rendering of the models into the user interface, in
    a manner that makes sense to the user. The views in IGWEB exist as the templates
    found in the `shared/templates` folder.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 视图负责用户所见的输出。视图的重点在于呈现和将模型渲染到用户界面中，以一种对用户有意义的方式。IGWEB中的视图存在于`shared/templates`文件夹中找到的模板中。
- en: Controllers implement the application logic of the system, and they basically
    tell the application how it should behave. You can conceptualize the controller
    as a broker between the model and the views of an application. The controller
    accepts user input from the view, and it can access or mutate the state of the
    model. The controller may also change what the view is currently presenting. The
    server-side controllers in IGWEB are the route handlers found in the `handlers`
    folder. The client-side controllers in IGWEB are the route/page handlers found
    in the `client/handlers` directory.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器实现系统的应用逻辑，它们基本上告诉应用程序应该如何行为。您可以将控制器概念化为应用程序模型和视图之间的代理。控制器接受来自视图的用户输入，并可以访问或改变模型的状态。控制器还可以改变视图当前呈现的内容。IGWEB中的服务器端控制器是`handlers`文件夹中的路由处理程序。IGWEB中的客户端控制器是`client/handlers`目录中的路由/页面处理程序。
- en: As you go through the examples in this book, take note that all folders mentioned
    in a relative manner are relative to the `igweb` folder.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 当您阅读本书中的示例时，请注意相对提到的所有文件夹都是相对于`igweb`文件夹的。
- en: Now that we have established how the code for the IGWEB project is organized,
    we can begin our journey to implement the individual sections and features that
    comprise our Isomorphic Go web application.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经确定了IGWEB项目的代码是如何组织的，我们可以开始实现构成我们Isomorphic Go web应用程序的各个部分和功能的旅程。
- en: The custom datastore
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义数据存储
- en: A custom datastore has been implemented for the IGWEB demo website. Although
    we will be using Redis as the exclusive database for this book, the truth is,
    you are free to use just about any database your heart desires—as long as you
    create a custom datastore that implements the `Datastore` interface.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 为IGWEB演示网站实现了自定义数据存储。尽管我们将在本书中仅使用Redis作为独占数据库，但事实上，只要您创建一个实现`Datastore`接口的自定义数据存储，您就可以自由地使用几乎任何数据库。
- en: 'Let''s examine the section where we''ve defined the `Datastore` interface in
    the `datastore.go` source file found in the `common/datastore` folder:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看在`common/datastore`文件夹中的`datastore.go`源文件中定义`Datastore`接口的部分：
- en: '[PRE41]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: We will be going over the individual methods of the `Datastore` interface in
    their respective chapters that deal with the particular sections or features,
    where the method is used. Note that the final method required to implement the
    `Datastore` interface is the `Close` method (shown in bold). The `Close` method
    determines how the datastore closes its connection (or drains its connection pool).
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在各自处理特定部分或功能的章节中讨论`Datastore`接口的各个方法，其中使用了该方法。请注意，实现`Datastore`接口所需的最终方法是`Close`方法（以粗体显示）。`Close`方法确定数据存储如何关闭其连接（或清空其连接池）。
- en: Examining the `RedisDatastore` implementation in the `redis.go` source file,
    found in the `common/datastore` folder, will provide an idea of what goes into
    creating a custom datastore that implements the `Datastore` interface.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在`common/datastore`文件夹中的`redis.go`源文件中检查`RedisDatastore`的实现，将会提供一个创建实现`Datastore`接口的自定义数据存储所需的内容。
- en: 'Moving further along in the `datastore.go` source file, we have defined the `NewDatastore` function,
    which is responsible for returning a new datastore:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在`datastore.go`源文件中进一步定义了`NewDatastore`函数，该函数负责返回一个新的数据存储：
- en: '[PRE42]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Our datastore solution is flexible since we can swap out the Redis datastore
    with any other database, so long as our new custom datastore implements the `Datastore`
    interface. Notice that we have defined the `REDIS` constant in the constant grouping
    using the `iota` enumerator (shown in bold). Examine the `NewDatastore` function,
    and note that a new `RedisDatastore` instance is returned when the `REDIS` case
    is encountered (shown in bold), inside the `switch` block on the `datastoreType`.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据存储解决方案是灵活的，因为我们可以用任何其他数据库替换Redis数据存储，只要我们的新自定义数据存储实现了`Datastore`接口。请注意，我们在常量分组中使用`iota`枚举器定义了`REDIS`常量（以粗体显示）。检查`NewDatastore`函数，并注意当在`datastoreType`的`switch`块中遇到`REDIS`情况时，会返回一个新的`RedisDatastore`实例（以粗体显示）。
- en: If we want to add support for another database, such as MongoDB, we will simply
    add a new constant entry, `MONGODB`, to the constant grouping. In addition to
    that, we will add an additional `case` statement for the `switch` block in the `NewDatastore` function,
    for MongoDB, which returns a `NewMongoDataStore` instance, providing the connection
    string to the MongoDB instance as an input argument to the function. The `NewMongoDBDatastore`
    function will return an instance of our custom datastore type, `MongoDBDataStore`,
    which will implement the `Datastore` interface.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想为另一个数据库添加支持，比如MongoDB，我们只需在常量分组中添加一个新的常量条目`MONGODB`。除此之外，我们还将在`NewDatastore`函数的`switch`块中为MongoDB添加一个额外的`case`语句，该语句返回一个`NewMongoDataStore`实例，并将连接字符串作为输入参数传递给该函数。`NewMongoDBDatastore`函数将返回我们自定义数据存储类型`MongoDBDataStore`的实例，该类型将实现`Datastore`接口。
- en: A great benefit of implementing the custom datastore in this manner is that
    we can prevent littering our web application with database driver-specific calls
    for a particular database. With the custom datastore, our web application becomes
    agnostic to the database and provides us with greater flexibility in handling
    our data access and data storage needs.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式实现自定义数据存储的一个巨大好处是，我们可以防止在特定数据库的情况下使我们的Web应用程序充斥着数据库驱动程序特定的调用。通过自定义数据存储，我们的Web应用程序变得对数据库不可知，并为我们提供了更大的灵活性来处理我们的数据访问和数据存储需求。
- en: The GopherFace web application, from the web programming with Go video series,
    implements a custom datastore for MySQL, MongoDB, and Redis. An example of the
    custom datastore using these databases is available at [https://github.com/EngineerKamesh/gofullstack/tree/master/volume2/section5/gopherfacedb/common/datastore](https://github.com/EngineerKamesh/gofullstack/tree/master/volume2/section5/gopherfacedb/common/datastore).
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: GopherFace网络应用程序，来自使用Go视频系列的网络编程，实现了针对MySQL、MongoDB和Redis的自定义数据存储。使用这些数据库的自定义数据存储的示例可在[https://github.com/EngineerKamesh/gofullstack/tree/master/volume2/section5/gopherfacedb/common/datastore](https://github.com/EngineerKamesh/gofullstack/tree/master/volume2/section5/gopherfacedb/common/datastore)找到。
- en: Dependency injections
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖注入
- en: The server-side application's primary entry point is the `main` function defined
    in the `igweb.go` source file. The client-side application's primary entry point
    is the `main` function defined in the `client/client.go` source file. In both
    of these primary entry points, we utilize a dependency injection technique to
    share a common functionality throughout the web application. By doing so, we avoid
    having to utilize package-level global variables.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端应用程序的主要入口点是`igweb.go`源文件中定义的`main`函数。客户端应用程序的主要入口点是`client/client.go`源文件中定义的`main`函数。在这两个主要入口点中，我们利用依赖注入技术在整个Web应用程序中共享通用功能。通过这样做，我们避免了使用包级全局变量。
- en: On both the server side, and on the client side, we implement a custom `Env`
    type in the `common` package. You may consider that `Env` stands for the common
    functionality that is to be accessed from the *application environment*.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器端和客户端，我们在`common`包中实现了自定义的`Env`类型。您可以考虑`Env`代表了从*应用环境*中访问的通用功能。
- en: 'Here''s the declaration of the `Env` struct on the server side, found in the
    `common/common.go` source file:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在服务器端`common/common.go`源文件中找到的`Env`结构的声明：
- en: '[PRE43]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The `DB` field will be used to store the custom datastore object.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`DB`字段将用于存储自定义数据存储对象。'
- en: The `TemplateSet` field is a pointer to a `TemplateSet` object. A template set
    allows us to render templates in a flexible manner across environments, and we'll
    be going over them in detail in [Chapter 4](eec79e85-e888-47e8-851e-d983d5aea55d.xhtml),
    *Isomorphic Templates*.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`TemplateSet`字段是指向`TemplateSet`对象的指针。模板集允许我们以灵活的方式在各种环境中呈现模板，我们将在[第4章](eec79e85-e888-47e8-851e-d983d5aea55d.xhtml)中详细介绍它们，*同构模板*。'
- en: The `Store` field is a pointer to a `sessions.FilesystemStore` object. We will
    be using the `sessions` package from the Gorilla toolkit for session management.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '`Store`字段是指向`sessions.FilesystemStore`对象的指针。我们将使用Gorilla工具包中的`sessions`包进行会话管理。'
- en: 'Inside the `main` function in the `igweb.go` source file, we will declare a `env` variable,
    an object of the `common.Env` type:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在`igweb.go`源文件的`main`函数中，我们将声明一个`env`变量，一个`common.Env`类型的对象：
- en: '[PRE44]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We assign the DB and TemplateSet fields of the `env` object with a newly created
    `RedisDatastore` instance and a newly created `TemplateSet` instance, respectively
    (the assignments are shown in bold). For illustration purposes, we have omitted some
    code and we have shown a partial code listing here:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用新创建的`RedisDatastore`实例和新创建的`TemplateSet`实例分别为`env`对象的`DB`和`TemplateSet`字段赋值（赋值以粗体显示）。出于说明目的，我们省略了一些代码，并在此处显示了部分代码清单：
- en: '[PRE45]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'We will use the Gorilla Mux router for our server-side routing needs. Notice
    that we pass in a reference to the `env` object as an input argument (shown in
    bold) to the `registerRoutes` function:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Gorilla Mux路由器来满足我们的服务器端路由需求。注意，我们将`env`对象的引用作为输入参数（以粗体显示）传递给`registerRoutes`函数：
- en: '[PRE46]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'We propagate the `env` object to our request handler functions by including
    a reference to the `env` object as an input argument to the route handler function
    that we register for a particular route, as shown here:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过将`env`对象作为输入参数包含在我们为特定路由注册的路由处理函数中，将`env`对象传播给我们的请求处理程序函数，如下所示：
- en: '[PRE47]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: By calling the Gorilla Mux router's `Handle` method, we have registered the
    `/index` route, and we have associated the `IndexHandler` function from the `handlers`
    package as the function that will service this route. We have supplied the reference
    to the `env` object as the sole input argument to this function (shown in bold).
    At this point, we have successfully propagated the `RedisDatastore` and `TemplateSet`
    instances, and we have made them available to the `IndexHandler` function.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用Gorilla Mux路由器的`Handle`方法，我们已经注册了`/index`路由，并将`handlers`包中的`IndexHandler`函数关联为将为此路由提供服务的函数。我们将`env`对象的引用作为此函数的唯一输入参数提供（以粗体显示）。此时，我们已成功传播了`RedisDatastore`和`TemplateSet`实例，并使它们可用于`IndexHandler`函数。
- en: 'Let''s examine the source code of the `IndexHandler` function defined in the
    `handlers/index.go` source file:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来检查`handlers/index.go`源文件中定义的`IndexHandler`函数的源代码：
- en: '[PRE48]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Notice that the handler logic for the `handler` function is placed into a closure,
    and we have closed over the `env` variable. This allows us to satisfy the requirement
    that the handler function should return a `http.Handler`, and at the same time,
    we can provide access to the `env` object to the handler function.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`handler`函数的处理逻辑被放置在一个闭包中，我们已经闭包了`env`变量。这使我们能够满足`handler`函数应该返回`http.Handler`的要求，同时，我们可以提供对`env`对象的访问权限给`handler`函数。
- en: The benefit of this approach, instead of using package-level global variables,
    is that we can explicitly see that this handler function requires the `env` object
    to properly function by examining the input arguments to the function (shown in
    bold).
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的好处是，与使用包级全局变量相比，我们可以明确地看到这个处理程序函数需要`env`对象才能正常工作，方法是检查函数的输入参数（以粗体显示）。
- en: 'We follow a similar dependency injection strategy on the client side as well.
    Here''s the declaration of the `Env` type on the client side, found in the `client/common/common.go`
    source file:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在客户端也采用类似的依赖注入策略。以下是在`client/common/common.go`源文件中找到的客户端侧`Env`类型的声明：
- en: '[PRE49]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The `Env` type that we have declared on the client side is different from the
    one that we declared on the server side. This is understandable, since there's
    a different set of common functionality that we want to have access to on the
    client side. For example, there is no `RedisDatastore` that lives on the client
    side.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在客户端声明的`Env`类型与我们在服务器端声明的不同。这是可以理解的，因为我们希望在客户端访问一组不同的通用功能。例如，客户端没有`RedisDatastore`。
- en: We have declared the `TemplateSet` field in the same manner that we did on the
    server side. Because the `*isokit.TemplateSet` type is isomorphic, it can exist
    on both the server side and the client side.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以与服务器端相同的方式声明了`TemplateSet`字段。因为`*isokit.TemplateSet`类型是同构的，它可以存在于服务器端和客户端。
- en: The `Router` field is a pointer to the client-side `isokit.Router` instance.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '`Router`字段是指向客户端`isokit.Router`实例的指针。'
- en: The `Window` field is the `Window` object, and the `Document` field is the `Document`
    object.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`Window`字段是`Window`对象，`Document`字段是`Document`对象。'
- en: The `PrimaryContent` field represents the `div` container that we will render
    page content to, on the client side. We will be covering the roles of these fields
    in more detail in [Chapter 4](eec79e85-e888-47e8-851e-d983d5aea55d.xhtml), *Isomorphic
    Templates*.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '`PrimaryContent`字段表示我们将在客户端渲染页面内容的`div`容器。我们将在[第4章](eec79e85-e888-47e8-851e-d983d5aea55d.xhtml)
    *同构模板*中更详细地介绍这些字段的作用。'
- en: The `Location` field is for the `Window` object's `Location` object.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '`Location`字段是`Window`对象的`Location`对象。'
- en: 'Inside the `registerRoutes` function defined in the `client.go` source file,
    we use the `isokit.Router` to handle our client-side routing needs. We propagate
    the `env` object to the client-side handler function as follows:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 在`client.go`源文件中定义的`registerRoutes`函数内部，我们使用`isokit.Router`来处理客户端路由需求。我们将`env`对象传递给客户端处理函数，如下所示：
- en: '[PRE50]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Let's examine the source code of the `IndexHandler` function on the client side,
    defined in the `client/handlers/index.go` source file:</span>
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来检查在`client/handlers/index.go`源文件中定义的客户端端`IndexHandler`函数的源代码：
- en: '[PRE51]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The means by which we have provided access to the `env` object (shown in bold)
    to this handler function is identical to the way that we had done so on the server
    side. The handler logic for the handler function is placed into a closure, and
    we have closed over the `env` variable. This allows us to satisfy the requirement
    that the client-side handler function should return an `isokit.Handler`, and at
    the same time, we can provide the handler function access to the `env` object.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向这个处理函数提供`env`对象的访问方式（以粗体显示）的方式与我们在服务器端所做的方式完全相同。处理函数的处理逻辑被放入闭包中，并且我们已经关闭了`env`变量。这使我们能够满足客户端处理函数应返回`isokit.Handler`的要求，同时我们可以为处理函数提供对`env`对象的访问。
- en: 'The dependency injection technique that we have utilized here, was inspired
    by the technique illustrated in Alex Edwards'' blog post on organizing database
    access: [http://www.alexedwards.net/blog/organising-database-access](http://www.alexedwards.net/blog/organising-database-access).'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用的依赖注入技术是受Alex Edwards在组织数据库访问方面的博客文章的启发：[http://www.alexedwards.net/blog/organising-database-access](http://www.alexedwards.net/blog/organising-database-access)。
- en: Summary
  id: totrans-343
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we walked you through the process of installing the Isomorphic
    Go toolchain. We introduced you to the IGWEB project, the isomorphic web application
    that we will implement in this book. We also examined the project structure and
    code organization of the IGWEB codebase.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们向您介绍了安装同构Go工具链的过程。我们向您介绍了IGWEB项目，这是一个同构Web应用程序，我们将在本书中实现。我们还检查了IGWEB代码库的项目结构和代码组织。
- en: We showed you how to set up the datastore and load the sample dataset into a
    Redis instance. We demonstrated how to use `kick` to perform an *instant kickstart*
    to speed up web application development cycles. We also provided a roadmap for
    the implementation of features and the functionality for the IGWEB project, and
    included the respective chapters where they will be covered. Finally, we demonstrated
    the dependency injection technique to share common functionality throughout the
    web application, both on the server side and on the client side.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向您展示了如何设置数据存储并将样本数据集加载到Redis实例中。我们演示了如何使用`kick`来执行*即时启动*，以加快Web应用程序开发周期。我们还为IGWEB项目的功能和功能实现提供了路线图，并包括它们将被覆盖的各自章节。最后，我们演示了依赖注入技术，以在服务器端和客户端共享通用功能。
- en: Now that we have our tools in place, we need to establish a good understanding
    of using Go in the web browser. In [Chapter 3](0f18d7dd-b081-4090-8b9c-c7a392261b31.xhtml), *Go
    on the Front-End with GopherJS*, we will explore GopherJS in further detail, and
    learn how to perform common DOM operations using GopherJS.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备就绪，我们需要对在Web浏览器中使用Go有一个良好的理解。在[第3章](0f18d7dd-b081-4090-8b9c-c7a392261b31.xhtml)
    *使用GopherJS在前端使用Go*中，我们将更详细地探索GopherJS，并学习如何使用GopherJS执行常见的DOM操作。
