- en: Debugging Isomorphic Go
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试同构Go
- en: 'Debugging an Isomorphic Go web application consists of the following items:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 调试同构Go Web应用程序包括以下内容：
- en: Identifying compiler/transpiler errors
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别编译器/转译器错误
- en: Examining panic stack traces
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查恐慌堆栈跟踪
- en: Tracing code to pinpoint the source of issues
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 追踪代码以准确定位问题的来源
- en: Identifying compiler/transpiler errors
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别编译器/转译器错误
- en: We can think of programming as a conversation between you (the programmer) and
    the machine (the compiler/transpiler). Because Go is a typed language, we can
    find many errors at compile/transpile time itself. This is a clear advantage to
    writing vanilla JavaScript where problems (caused by the lack of type checking)
    can lay hidden and surface at the most inopportune times. Compiler errors are
    the means by which the machine communicates to us that something is fundamentally
    wrong with our program, whether it's a mere syntactical issue or the inappropriate
    use of a type.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将编程看作是您（程序员）和机器（编译器/转译器）之间的对话。由于Go是一种类型化语言，我们可以在编译/转译时发现许多错误。这是编写纯JavaScript的明显优势，因为问题（由于缺乏类型检查而引起）可能隐藏并在最不合适的时候出现。编译器错误是机器向我们传达程序出现基本问题的手段，无论是纯粹的语法问题还是类型的不当使用。
- en: '`kick` comes in very handy for displaying compiler errors, since it will show
    you errors from both the Go compiler and the GopherJS transpiler. The moment you
    introduce an error (that the compiler/transpiler can identify) and save your source
    file, you will see the error displayed in the terminal window where you have `kick`
    running.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`kick`非常方便地用于显示编译器错误，因为它会显示Go编译器和GopherJS转译器的错误。一旦引入错误（编译器/转译器可以识别的错误）并保存源文件，您将在运行`kick`的终端窗口中看到错误显示。'
- en: 'For example, let''s open up the `client/client.go` source file. In the `run`
    function, let''s comment out the line where we set the `ts` variable to the `TemplateSet`
    object that we receive over the `templateSetChannel`:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们打开`client/client.go`源文件。在`run`函数中，让我们注释掉设置`ts`变量为通过`templateSetChannel`接收到的`TemplateSet`对象的那一行：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We know that the `ts` variable will be used later to populate the `TemplateSet`
    field of the `env` object. Let''s set the `ts` variable to the Boolean value of
    `false` by introducing the following code:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道`ts`变量将在稍后用于填充`env`对象的`TemplateSet`字段。让我们通过引入以下代码将`ts`变量设置为`false`的布尔值：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The moment we save the `client.go` source file, `kick` will give us a *kick*
    (pun intended), about the error that we just introduced as shown in *Figure A1*:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们保存`client.go`源文件的同时，`kick`将立即给我们一个*踢*（双关语），关于我们刚刚引入的错误，如*图A1*所示：
- en: '![](img/71b520d8-7d2f-44db-a642-54d1fdedca6a.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/71b520d8-7d2f-44db-a642-54d1fdedca6a.png)'
- en: 'Figure A1: The kick command immediately shows us the transpiler error upon
    saving the Go source file'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图A1：保存Go源文件后，kick命令立即显示给我们转译器错误
- en: The compiler error received shows us the exact line where the problem occurred,
    from which we can diagnose and rectify the issue. The lesson to be learned from
    this example is that it comes in very handy to have a terminal window running
    `kick` in the background while you are developing your Isomorphic Go web application.
    By doing so, you will be able to see compiler/transpiler errors the moment that
    you make them.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 收到的编译器错误向我们显示了问题发生的确切行，从中我们可以诊断和纠正问题。从这个例子中可以学到的教训是，在开发同构Go Web应用程序时，同时在后台运行`kick`的终端窗口非常方便。通过这样做，您将能够在引入错误时立即看到编译器/转译器错误。
- en: Examining panic stack traces
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查恐慌堆栈跟踪
- en: For runtime errors that cannot be found by the transpiler at *transpile time*,
    there usually is a helpful **panic stack trace**, which is displayed in the web
    browser's console, and provides us with valuable information to diagnose issues.
    The JavaScript source map file that GopherJS produces helps the web browser map
    the JavaScript instructions to their respective lines in the Go source files.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在*转译时*无法由转译器找到的运行时错误，通常会有一个有用的**恐慌堆栈跟踪**，它显示在Web浏览器的控制台中，并为我们提供了有价值的信息来诊断问题。GopherJS生成的JavaScript源映射文件帮助Web浏览器将JavaScript指令映射到Go源文件中的相应行。
- en: Let's introduce a runtime error whereby our client-side program is syntactically
    correct (it will pass the transpiler checks); however, the code will issue a problem
    at runtime.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们引入一个运行时错误，即我们的客户端程序在语法上是正确的（它将通过转译器检查），但是代码在运行时会出现问题。
- en: 'Going back to the `run` function found in the `client/client.go` source file,
    notice the following code changes we''ve made with regards to the `ts` variable:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 回到`client/client.go`源文件中的`run`函数，注意我们对`ts`变量所做的以下代码更改：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We have commented out the declaration and initialization of the `ts` variable,
    and we have also commented out the assignment of the `ts` variable to the `TemplateSet`
    field of the `env` object. We have introduced a line of code to assign the `nil`
    value to the `TemplateSet` field of the `env` object. By taking this action, we
    have essentially disabled the client-side template set, which will prevent us
    from being able to render any template on the client-side. This also prevents
    any cog from being rendered, since cogs are dependent on the template set to properly
    function.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经注释掉了`ts`变量的声明和初始化，并且还注释掉了将`ts`变量分配给`env`对象的`TemplateSet`字段的赋值。我们引入了一行代码，将`nil`值赋给`env`对象的`TemplateSet`字段。通过采取这种行动，我们基本上禁用了客户端模板集，这将阻止我们能够在客户端渲染任何模板。这也阻止了任何齿轮的渲染，因为齿轮依赖于模板集来正常运行。
- en: 'After loading the IGWEB home page, a panic stack trace is generated and is
    visible in the web browser''s console as shown in *Figure A2*:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 加载IGWEB主页后，会生成一个恐慌堆栈跟踪，并在Web浏览器的控制台中显示，如*图A2*所示：
- en: '![](img/ab084ae4-bd48-4ac4-a4ae-88e52d6fefcb.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab084ae4-bd48-4ac4-a4ae-88e52d6fefcb.png)'
- en: 'Figure A2: The panic stack trace shown in the web browser''s console'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图A2：Web浏览器控制台中显示的恐慌堆栈跟踪
- en: 'In your front-end debugging travels, you will come across the following error
    message quite often:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的前端调试过程中，您经常会遇到以下错误消息：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`runtime error: invalid memory address or nil pointer dereference` usually
    means that we are attempting to perform operations on a value (such as accessing
    or mutating a property) that is equal to a JavaScript `null` value.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时错误：无效的内存地址或空指针解引用通常意味着我们试图对一个值（例如访问或改变属性）执行操作，该值等于JavaScript的`null`值。
- en: 'Examining the produced panic stack trace helps us zero in on the issue:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 检查产生的panic堆栈跟踪有助于我们准确定位问题：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The areas of interest in the panic stack trace are shown in bold. From the panic
    stack trace, we can ascertain that the carousel cog failed to render, since it
    appears that something is wrong with the `TemplateSet`. By further inspecting
    the panic stack trace, we can identify that the call was made to the `run` function
    at line 112 in the `client.go` source file. The `run` function is where we had
    introduced the error by setting the `TemplateSet` field of the `env` object to
    `nil`. From this debugging exercise, we can see that in this situation, the panic
    stack trace did not reveal the exact line of the problem but it provided us with
    enough clues to rectify the issue.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: panic堆栈跟踪中感兴趣的区域以粗体显示。从panic堆栈跟踪中，我们可以确定轮播齿轮未能渲染，因为`TemplateSet`似乎出了问题。通过进一步检查panic堆栈跟踪，我们可以确定在`client.go`源文件的第112行调用了`run`函数。`run`函数是我们通过将`env`对象的`TemplateSet`字段设置为`nil`而引入错误的地方。通过这次调试练习，我们可以看到在这种情况下，panic堆栈跟踪没有揭示问题的确切行，但它为我们提供了足够的线索来纠正问题。
- en: A good practice to follow when developing on the client-side is to always have
    the web browser's console open, so that you will be able to see problems as they
    occur.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端开发时要遵循的一个好习惯是始终保持网页浏览器的控制台打开，这样您就可以在问题发生时看到问题。
- en: Tracing code to pinpoint the source of issues
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 追踪代码以准确定位问题的来源
- en: Another good client-side debugging practice is **tracing**, the practice of
    printing out key steps in the flow of a program. In a debugging scenario, this
    would consist of strategically making calls to the `println` (or `fmt.Println`)
    function around suspected areas of problematic code. You can use the web browser's
    console to verify that these print statements are reached, which will give you
    a better understanding of how the client-side program is functioning while it
    is running.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个良好的客户端调试实践是**追踪**，即在程序流程中打印关键步骤的实践。在调试场景中，这将包括在疑似有问题的代码区域周围有策略地调用`println`（或`fmt.Println`）函数。您可以使用网页浏览器的控制台验证是否达到了这些打印语句，这将让您更好地了解客户端程序在运行时的运行情况。
- en: 'For example, when debugging the issue introduced in the previous section, we
    can place the following `println` calls in the run function:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在调试上一节中引入的问题时，我们可以在`run`函数中放置以下`println`调用：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We performed tracing by printing key steps in the flow of the program, by making
    strategic `println` function calls. The first `println` call is used to verify
    that we reach the `run` function. The second `println` call is used to check the
    health of the template set that is returned to us from the template set channel.
    The third, and final `println` call, is used to check the health of the template
    set after we have completed prepped the `env` object by populating its fields.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过在程序流程中打印关键步骤，通过进行策略性的`println`函数调用来进行追踪。第一个`println`调用用于验证我们是否到达了`run`函数。第二个`println`调用用于检查从模板集通道返回给我们的模板集的健康状况。第三个，也是最后一个`println`调用，用于检查我们填充`env`对象的字段后模板集的健康状况。
- en: '*Figure A3* shows the web console with the print statements displayed, along
    with the respective line number in the `client.go` source file where the `println`
    call was made:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*图A3*显示了网页控制台显示的打印语句，以及在`client.go`源文件中进行`println`调用的相应行号：'
- en: '![](img/89c7d534-96df-44fd-bae3-19b9caa9ba92.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/89c7d534-96df-44fd-bae3-19b9caa9ba92.png)'
- en: 'Figure A3: The print statements displayed in the web console'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图A3：网页控制台显示的打印语句
- en: From the tracing exercise, we can first verify that we have successfully reached
    the `run` function. Secondly, we can verify the health of the `TemplateSet` object
    received over the `templateSetChannel` by noticing that properties of the object
    appear (such as `members`, `Funcs`, and `bundle`). The third, and final print
    statement, also verifies the health of the `TemplateSet` object after the `env`
    object has been prepped. This print statement reveals the source of the problem
    by showing us that the `TemplateSet` object has not been initialized, since we
    don't see any of the properties of the object appear in the printed statement.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通过追踪练习，我们首先可以验证我们已成功到达`run`函数。其次，我们可以通过注意对象的属性是否出现（例如`members`，`Funcs`和`bundle`）来验证通过`templateSetChannel`接收到的`TemplateSet`对象的健康状况。第三个，也是最后一个打印语句，还验证了`env`对象准备就绪后`TemplateSet`对象的健康状况。此打印语句通过显示`TemplateSet`对象未初始化的情况，揭示了问题的来源，因为我们在打印语句中看不到对象的任何属性。
