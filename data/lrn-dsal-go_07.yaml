- en: Homogeneous Data Structures
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同质数据结构
- en: '**Homogeneous data structures** contain similar types of data, such as integers
    or double values. Homogeneous data structures are used in matrices, as well as
    tensor and vector mathematics. **T****ensors** are mathematical structures for
    scalars and vectors. A first-rank tensor is a **vecto****r**. A vector consists
    of a row or a column. A tensor with zero rank is a **scalar**. A **matrix** is
    a two-dimensional cluster of numbers. They are all used in scientific analysis.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**同质数据结构**包含类似类型的数据，例如整数或双精度值。同质数据结构用于矩阵、张量和向量数学。**张量**是标量和向量的数学结构。一阶张量是一个**向量**。向量由一行或一列组成。零阶张量是一个**标量**。**矩阵**是数字的二维集合。它们都用于科学分析。'
- en: Tensors are used in material science. They are used in mathematics, physics,
    mechanics, electrodynamics, and general relativity. Machine learning solutions
    utilize a tensor data structure. A tensor has properties such as position, shape,
    and a static size.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 张量在材料科学中得到了应用。它们在数学、物理、力学、电动力学和广义相对论中都有使用。机器学习解决方案利用张量数据结构。张量具有位置、形状和静态大小等属性。
- en: 'This chapter covers the following homogeneous data structures:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下同质数据结构：
- en: '**Two-dimensional arrays**'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**二维数组**'
- en: '**Multi-dimensional arrays**'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多维数组**'
- en: 'The following scenarios are shown to demonstrate the usage of two-dimensional
    and multi-dimensional arrays:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以下场景展示了二维和多维数组的用法：
- en: Matrix representation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 矩阵表示
- en: Multiplication
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 乘法
- en: Addition
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加法
- en: Subtraction
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减法
- en: Determinant calculation
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 矩阵行列式计算
- en: Inversion
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逆运算
- en: Transposition
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转置
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Install Go Version 1.10 from [https://golang.org/doc/install](https://golang.org/doc/install) for
    your OS.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为您的操作系统安装Go版本1.10，请访问[https://golang.org/doc/install](https://golang.org/doc/install)。
- en: The GitHub URL for the code in this chapter is as follows: [https://github.com/PacktPublishing/Learn-Data-Structures-and-Algorithms-with-Golang/tree/master/Chapter05](https://github.com/PacktPublishing/Learn-Data-Structures-and-Algorithms-with-Golang/tree/master/Chapter05)[.](https://github.com/PacktPublishing/Learn-Data-Structures-and-Algorithms-with-Go/tree/master/Chapter05)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章代码的GitHub URL如下：[https://github.com/PacktPublishing/Learn-Data-Structures-and-Algorithms-with-Golang/tree/master/Chapter05](https://github.com/PacktPublishing/Learn-Data-Structures-and-Algorithms-with-Golang/tree/master/Chapter05)[.](https://github.com/PacktPublishing/Learn-Data-Structures-and-Algorithms-with-Go/tree/master/Chapter05)
- en: Two-dimensional arrays
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二维数组
- en: Two-dimensional arrays were presented briefly in [Chapter 2](de6f0788-c24d-4008-8371-3dab33f7d52d.xhtml),
    *Getting Started with Go for Data Structures and Algorithms*. To recap, for dynamic
    allocation, we use **slice of slices**, which is a two-dimensional array. A two-dimensional
    array, is a list of single-dimensional arrays. Every element in a two-dimensional
    array `arr`, is identified as `arr[i][j]`, where `arr` is the name of the array
    and *i* and *j* represent rows and columns, and their values ranging from 0 to
    *m* and 0 to *n*, respectively. Traversing a two-dimensional array is of *O*(*m***n*)
    complexity.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 二维数组在[第2章](de6f0788-c24d-4008-8371-3dab33f7d52d.xhtml)，*使用Go进行数据结构和算法入门*中简要介绍。为了回顾，对于动态分配，我们使用**切片的切片**，它是一个二维数组。二维数组是一个单维数组的列表。二维数组`arr`中的每个元素都标识为`arr[i][j]`，其中`arr`是数组的名称，*i*和*j*分别代表行和列，它们的值分别从0到*m*和从0到*n*。遍历二维数组是*O*(*m*n*)复杂度。
- en: 'The following code shows how to initialize an array:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了如何初始化一个数组：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'An element in a two-dimensional array is accessed with a row index and column
    index. In the following example, the array''s value in row `2` and column `3`
    is retrieved as an integer value:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在二维数组中，通过行索引和列索引来访问元素。在以下示例中，检索数组中第`2`行和第`3`列的值作为一个整数值：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Arrays can store a sequential collection of data elements of the same type.
    Homogeneous data structure arrays consist of contiguous memory address locations.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 数组可以存储相同类型的数据元素的顺序集合。同质数据结构数组由连续的内存地址位置组成。
- en: Two-dimensional matrices are modeled as two-dimensional arrays. A scalar is
    an element of a field that defines a vector space. A matrix can be multiplied
    by a scalar. You can divide a matrix by any non-zero real number.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 二维矩阵被建模为二维数组。标量是定义向量空间的域中的一个元素。矩阵可以乘以一个标量。你可以用任何非零实数除以一个矩阵。
- en: The order of a matrix is the number of rows, *m,* by the number of columns, *n*.
    A matrix with rows *m* and columns *n* is referred to as an ***m* x *n* matrix**.
    There are multiple types of matrices, such as a **row matrix**, **column matrix**,
    **triangular matrix**, **null matrix**, and **zero matrix**; let's discuss them
    in the following sections.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵的阶数是行数*m*和列数*n*的乘积。具有*m*行和*n*列的矩阵被称为***m* x *n*矩阵**。存在多种类型的矩阵，例如**行矩阵**、**列矩阵**、**三角矩阵**、**零矩阵**和**零矩阵**；让我们在以下章节中讨论它们。
- en: Row matrix
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行矩阵
- en: 'A row matrix is a 1 x *m* matrix consisting of a single row of *m* elements,
    as shown here:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 行矩阵是一个由单个行*m*元素组成的1 x *m*矩阵，如下所示：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Run the following command to execute the `row_matrix.go` file:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令以运行`row_matrix.go`文件：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output is as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/2f9687b9-06c3-4b42-a3f7-ffd2392f609f.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2f9687b9-06c3-4b42-a3f7-ffd2392f609f.png)'
- en: The next section talks about the **column matrix** data structure.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将讨论**列矩阵**数据结构。
- en: Column matrix
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列矩阵
- en: 'A column matrix is an *m* x 1 matrix that has a single column of *m* elements.
    The following code snippet shows how to create a column matrix:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 列矩阵是一个*m* x 1矩阵，它有一个由*m*元素组成的单列。以下代码片段展示了如何创建列矩阵：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run the following command to execute the `column_matrix.go` file:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令以运行`column_matrix.go`文件：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output is as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/abd1a58a-d831-4557-9e46-b3e60297d85b.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/abd1a58a-d831-4557-9e46-b3e60297d85b.png)'
- en: The next section talks about the lower triangular matrix data structure.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将讨论下三角矩阵数据结构。
- en: Lower triangular matrix
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下三角矩阵
- en: 'A **lower triangular matrix** consists of elements that have a value of zero
    above the main diagonal. The following code snippet shows how to create a lower
    triangular matrix:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**下三角矩阵**由主对角线上方的元素值为零的元素组成。以下代码片段展示了如何创建一个下三角矩阵：'
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Run the following command to execute the `lower_triangular.go` file:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令以运行`lower_triangular.go`文件：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output is as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/5f7ccad7-6401-4647-b9b7-60c55eeeeb3c.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5f7ccad7-6401-4647-b9b7-60c55eeeeb3c.png)'
- en: The next section talks about the upper triangular matrix data structure.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将讨论上三角矩阵数据结构。
- en: Upper triangular matrix
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上三角矩阵
- en: 'An upper triangular matrix consists of elements with a value of zero below
    the main diagonal. The following code creates an upper triangular matrix:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 上三角矩阵由主对角线下方的元素值为零的元素组成。以下代码创建了一个上三角矩阵：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Run the following command to execute the `upper_triangular.go` file:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令以运行`upper_triangular.go`文件：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output is as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/357ff9ba-4cba-4315-9034-3ca7985e674b.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/357ff9ba-4cba-4315-9034-3ca7985e674b.png)'
- en: The next section talks about the **null matrix data** structure.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将讨论**零矩阵数据**结构。
- en: Null matrix
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 零矩阵
- en: 'A null or a zero matrix is a matrix entirely consisting of zero values, as
    shown in the following code snippet:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 零矩阵或零矩阵是一个完全由零值组成的矩阵，如下面的代码片段所示：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Run the following command to execute the `null_matrix.go` file:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令以运行`null_matrix.go`文件：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output is as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/47672921-2339-4082-b72e-8fff96f65d86.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/47672921-2339-4082-b72e-8fff96f65d86.png)'
- en: The next section talks about the **identity matrix** data structure.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将讨论**单位矩阵**数据结构。
- en: Identity matrix
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单位矩阵
- en: 'An identity matrix is a unit matrix with ones are on the main diagonal and
    zeros are elsewhere. The following code snippet creates an identity matrix:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 单位矩阵是一个单位矩阵，其主对角线上的元素为1，其他位置的元素为0。以下代码片段创建了一个单位矩阵：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Run the following command to execute the preceding code snippet:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令以运行前面的代码片段：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output is as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/a7fdb6ec-375a-45b3-9738-a8eabaa78704.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a7fdb6ec-375a-45b3-9738-a8eabaa78704.png)'
- en: The next section talks about the **symmetric matrix** data structure.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将讨论**对称矩阵**数据结构。
- en: Symmetric matrix
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对称矩阵
- en: A symmetric matrix is a matrix whose transpose is equal to itself. Symmetric
    matrices include other types of matrices such as **antimetric**, **centrosymmetric**,
    **circulant**, **covariance**, **coxeter**, **hankel**, **hilbert**, **persymmetric**,
    **skew-symmetric**, and **toeplitz matrices**. A **negative matrix** is a matrix
    in which each element is a negative number.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对称矩阵是一个转置后等于自身的矩阵。对称矩阵包括其他类型的矩阵，如**反对称矩阵**、**中心对称矩阵**、**循环矩阵**、**协方差矩阵**、**科克斯特矩阵**、**汉克尔矩阵**、**希尔伯特矩阵**、**反对称矩阵**、**斜对称矩阵**和**托普利茨矩阵**。**负矩阵**是指每个元素都是负数的矩阵。
- en: Basic 2D matrix operations
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本二维矩阵运算
- en: In this section, we will look at the basic operations on the **two-dimensional
    matrix**. Let's start with initializing the matrices.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将查看二维矩阵的基本操作。让我们从初始化矩阵开始。
- en: '`matrix1` and `matrix2` are initialized in the following code snippet:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段初始化了 `matrix1` 和 `matrix2`：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `add`, `subtract`, `multiply`, `transpose`, and `inversion` operations are
    presented in the next few sections. For this section, please refer to the `binary_search_tree.go` file.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我们将介绍 `add`、`subtract`、`multiply`、`transpose` 和 `inversion` 操作。对于本节，请参考
    `binary_search_tree.go` 文件。
- en: The add method
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`add` 方法'
- en: 'The `add` method adds the elements of two 2 x 2 matrices. The following code
    returns the created matrix by adding the two matrices:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`add` 方法用于将两个 2 x 2 矩阵的元素相加。以下代码通过相加两个矩阵来返回创建的矩阵：'
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The sum between the two matrices is the result of calling the `add` method.
    The parameters that are passed are the matrices to be added, as shown here:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 两个矩阵的和是调用 `add` 方法的结果。传递的参数是要相加的矩阵，如下所示：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The example output of the add method is as follows. Adding `matrix1` and `matrix2`
    gives a **sum matrix**:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为 `add` 方法的示例输出。将 `matrix1` 和 `matrix2` 相加得到**和矩阵**：
- en: '![](img/36681494-54f1-4470-9eeb-bfe69980a716.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36681494-54f1-4470-9eeb-bfe69980a716.png)'
- en: The subtract method
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`subtract` 方法'
- en: 'The `subtract` method subtracts the elements of two 2 x 2 matrices. The `subtract`
    method in the following snippet subtracts the elements of `matrix1` and `matrix2`.
    This method returns the resulting matrix after subtraction:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`subtract` 方法用于从两个 2 x 2 矩阵中减去元素。以下代码片段中 `subtract` 方法减去了 `matrix1` 和 `matrix2`
    的元素。此方法返回减法操作后的结果矩阵：'
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The difference between two matrices is the result of calling the `subtract`
    method. The parameters that are passed are the matrices to be subtracted, as shown
    here:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 两个矩阵的差是调用 `subtract` 方法的结果。传递的参数是要减去的矩阵，如下所示：
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The example output of the `subtract` method is as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为 `subtract` 方法的示例输出：
- en: '![](img/88b6698c-2f6d-43ad-ae65-ab5c19a4e979.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/88b6698c-2f6d-43ad-ae65-ab5c19a4e979.png)'
- en: The multiply method
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 乘法方法
- en: 'The `multiply` method multiplies the elements of two 2 x 2 matrices. The multiplication
    of two matrices, `matrix1` and `matrix2`, is shown in the following snippet. The
    matrix that''s generated after the multiplication is returned by the `multiply`
    method:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`multiply` 方法用于将两个 2 x 2 矩阵的元素相乘。以下代码片段展示了矩阵 `matrix1` 和 `matrix2` 的乘法。乘法操作后生成的矩阵由
    `multiply` 方法返回：'
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The product of two matrices is calculated using the `multiply` method in the
    following code snippet, which takes the two matrices as parameters:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码片段中，使用 `multiply` 方法计算两个矩阵的乘积，该方法接收两个矩阵作为参数：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The example output of the multiply method is as follows. The product of `matrix1`
    and `matrix2` is the **product matrix**:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 乘法方法的示例输出如下。`matrix1` 和 `matrix2` 的乘积是**乘积矩阵**：
- en: '![](img/e6aeb89d-aa6b-4974-93b5-17a8dec6924f.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e6aeb89d-aa6b-4974-93b5-17a8dec6924f.png)'
- en: The transpose method
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`transpose` 方法'
- en: 'The transpose of a matrix is achieved using the `transpose` method. This method
    takes the matrix as a parameter and returns the transposed matrix:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `transpose` 方法可以计算矩阵的转置。该方法接收矩阵作为参数，并返回转置后的矩阵：
- en: '[PRE21]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The determinant method
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`determinant` 方法'
- en: 'The `determinant` method calculates the determinant of the matrix. The `determinant`
    method in the following code snippet calculates the `determinant` value of a matrix.
    The method takes the matrix and returns a `float32` value, which is the `determinant`
    of the matrix:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`determinant` 方法用于计算矩阵的行列式。以下代码片段中的 `determinant` 方法计算矩阵的行列式值。该方法接收矩阵作为参数，并返回一个
    `float32` 类型的值，即矩阵的行列式：'
- en: '[PRE22]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The inverse method
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`inverse` 方法'
- en: 'The `inverse` method returns the inverse of the matrix, which is passed as
    a parameter. This is shown in the following snippet:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`inverse` 方法返回矩阵的逆，该逆矩阵作为参数传入。以下代码片段展示了这一点：'
- en: '[PRE23]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Run the following command to execute the `twodmatrix.go` file:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以执行 `twodmatrix.go` 文件：
- en: '[PRE24]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The output is as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/569641bd-9213-4189-bc35-c9095f503a2d.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/569641bd-9213-4189-bc35-c9095f503a2d.png)'
- en: The next section talks about the zig-zag matrix data structure.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将讨论 zig-zag 矩阵数据结构。
- en: Zig-zag matrix
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Zig-zag 矩阵
- en: 'A zig-zag matrix is a square arrangement of *n *x *n* integers. The integers
    are arranged on anti-diagonals in sequentially increasing order. The following
    code explains how to create a zig-zag matrix and also how to traverse it. The `PrintZigZag`
    method creates the matrix in a zig-zag fashion with the elements in a sequentially
    increasing order. The method takes the integer `n` as a parameter and returns
    the integer array, which is the zig-zag matrix:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 斜杠矩阵是一个*n* x *n*整数的正方形排列。整数按顺序排列在反斜对角线上。以下代码解释了如何创建斜杠矩阵以及如何遍历它。`PrintZigZag`方法以顺序递增的顺序以斜杠方式创建矩阵。该方法接受整数`n`作为参数，并返回整数数组，即斜杠矩阵：
- en: '[PRE25]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The `main` method invokes the `PrintZigZag` method, which takes the parameter
    `n` and prints the matrix first from left to right, then from right to left for
    the second level, and so on. The number of integers is `5` and the field width
    is `2`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`main`方法调用`PrintZigZag`方法，该方法接受参数`n`，首先从左到右打印矩阵，然后从右到左打印第二层，依此类推。整数的数量为`5`，字段宽度为`2`：'
- en: '[PRE26]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Run the following command to execute the `zigzagmatrix.go` file:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以执行`zigzagmatrix.go`文件：
- en: '[PRE27]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The output is as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/286e2673-9acd-4a14-aa1b-199347d09999.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/286e2673-9acd-4a14-aa1b-199347d09999.png)'
- en: The next section talks about the spiral matrix data structure.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将讨论螺旋矩阵数据结构。
- en: Spiral matrix
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 螺旋矩阵
- en: 'A spiral matrix is an arrangement of *n *x *n* integers in which integers are
    arranged spirally in sequentially increasing order. A spiral matrix is an **old
    toy algorithm**. The spiral order is maintained using four loops, one for each
    corner of the matrix. The `PrintSpiral` method in the following code snippet creates
    a matrix with elements arranged spirally in increasing order. The method takes
    a parameter, `n`, and returns an integer array:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 螺旋矩阵是一个*n* x *n*整数的排列，其中整数按顺序螺旋式递增排列。螺旋矩阵是一个**古老的玩具算法**。使用四个循环来保持螺旋顺序，每个循环对应矩阵的一个角落。以下代码片段中的`PrintSpiral`方法创建了一个元素按递增顺序螺旋排列的矩阵。该方法接受一个参数`n`，并返回一个整数数组：
- en: '[PRE28]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the following code snippet, the `main` method invokes the `PrintSpiral`
    method, which takes the integer `n` and prints the integer values of the matrix spirally.
    The values returned from the `PrintSpiral` method are printed as fields with a
    width of `2`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码片段中，`main`方法调用`PrintSpiral`方法，该方法接受整数`n`并按螺旋方式打印矩阵的整数值。`PrintSpiral`方法返回的值以宽度为`2`的字段打印：
- en: '[PRE29]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Run the following command to execute the `spiralmatrix.go` file:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以执行`spiralmatrix.go`文件：
- en: '[PRE30]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The output is as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/cd70d982-4619-41a7-bb9e-ba7cf9527f44.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cd70d982-4619-41a7-bb9e-ba7cf9527f44.png)'
- en: The next section talks about the **Boolean matrix** data structure.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将讨论**布尔矩阵**数据结构。
- en: Boolean matrix
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布尔矩阵
- en: 'A Boolean matrix is a matrix that consists of elements in the *m*^(th )row
    and the *n*^(th )column with a value of 1. A matrix can be modified to be a Boolean
    matrix by making the values in the *m*^(th )row and the *n*^(th) column equal
    to 1. In the following code, the Boolean matrix transformation and print methods
    are shown in detail. The `changeMatrix` method transforms the input matrix in
    to a Boolean matrix by changing the row and column values from 0 to 1 if the cell
    value is 1\. The method takes the input matrix as the parameter and returns the
    changed matrix, as shown in the following code:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔矩阵是一个矩阵，它由第*m*行和第*n*列的元素组成，这些元素的值为1。可以通过将第*m*行和第*n*列的值设置为1来将矩阵修改为布尔矩阵。在以下代码中，布尔矩阵转换和打印方法被详细展示。`changeMatrix`方法通过将单元格值从0更改为1来将输入矩阵转换为布尔矩阵。该方法接受输入矩阵作为参数，并返回更改后的矩阵，如下所示：
- en: '[PRE31]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The example output of the change matrix method is shown the following screenshot.
    The elements with 1 in the row or column are checked and the row elements are
    updated to 1:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了更改矩阵方法的示例输出。检查行或列中的值为1的元素，并将行元素更新为1：
- en: '![](img/1ecb4abc-25cf-43c0-b6ab-c6f1eb3e8fb2.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1ecb4abc-25cf-43c0-b6ab-c6f1eb3e8fb2.png)'
- en: Let's take a look at the `printMatrix` method and the `main` method.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看`printMatrix`方法和`main`方法。
- en: The printMatrix method
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`printMatrix`方法'
- en: 'In the following code snippet, the `printMatrix` method takes the input matrix
    and prints the matrix values by row and traverses the columns for every row:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码片段中，`printMatrix`方法接受输入矩阵，并按行打印矩阵值，并为每一行遍历列：
- en: '[PRE32]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The main method
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`main`方法'
- en: 'The `main` method in the following code snippet invokes the `changeMatrix` method
    after initializing the matrix. The changed matrix is printed after the invocation
    of the `changeMatrix` method:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码片段中，`main`方法在初始化矩阵后调用`changeMatrix`方法。在调用`changeMatrix`方法后打印了更改后的矩阵：
- en: '[PRE33]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Run the following command to execute the `boolean_matrix.go` file:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以执行`boolean_matrix.go`文件：
- en: '[PRE34]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The output is as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/67aaa4cd-3f80-448e-b66d-4e8894a8f59a.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/67aaa4cd-3f80-448e-b66d-4e8894a8f59a.png)'
- en: The next section talks about multi-dimensional arrays.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分将讨论多维数组。
- en: Multi-dimensional arrays
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多维数组
- en: 'An **array** is a homogeneous collection of data elements. An array''s indexes
    range from index 0 to index *m*-1, where *m* is the fixed length of the array.
    An array with multiple dimensions is an array of an array. The following code
    initializes a multi-dimensional array. A three-dimensional array is printed:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**数组**是数据元素的同构集合。数组的索引范围从索引0到索引*m*-1，其中*m*是数组的固定长度。多维数组是一个数组的数组。以下代码初始化了一个多维数组。以下打印了一个三维数组：'
- en: '[PRE35]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Run the following command to execute the preceding code snippet:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以执行前面的代码片段：
- en: '[PRE36]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The output is as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/4e0cccfc-bba3-4058-812e-7ea3a5d323e1.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4e0cccfc-bba3-4058-812e-7ea3a5d323e1.png)'
- en: The next section talks about **tensor** data structures.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分将讨论**张量**数据结构。
- en: Tensors
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 张量
- en: A tensor is a multi-dimensional array of components that are spatial coordinates. Tensors
    are used extensively in physics and biological studies in topics such as electromagnetism
    and diffusion tensor imaging. William Rowan Hamilton was the first to come up
    with the term *tensor*. Tensors play a basic role in abstract algebra and algebraic
    topology.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 张量是由空间坐标组成的分量构成的多维数组。张量在物理学和生物学的电磁学和扩散张量成像等主题中被广泛使用。威廉·罗文·哈密顿是第一个提出“张量”这个术语的人。张量在抽象代数和代数拓扑中扮演着基本角色。
- en: The tensor order is the sum of the order of its arguments, plus the order of
    the result tensor. For example, an inertia matrix is a second-order tensor. Spinors
    are also multi-dimensional arrays, but the values of their elements change via
    coordinate transformations.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 张量阶数是其参数阶数之和，加上结果张量的阶数。例如，惯性矩阵是一个二阶张量。自旋也是多维数组，但它们的元素值通过坐标变换而改变。
- en: 'The initialization of a tensor is shown here. The array is initialized with
    integer values ranging from 0 to 3:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 张量的初始化如下所示。数组使用从0到3的整数值初始化：
- en: '[PRE37]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Unfolding a tensor is done along the first dimension. Rearranging the tensor
    mode''s *n* vectors is referred to as mode *n*-unfolding of a tensor. 0-mode unfolding
    of a tensor array is shown here:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 张量的展开是沿着第一维进行的。重新排列张量模式的*n*个向量被称为张量的*n*-展开。以下展示了张量数组的0模式展开：
- en: '[PRE38]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '1-mode unfolding of a tensor array is shown here. The array''s first dimension
    index is set to 1:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 以下展示了张量数组的1模式展开。数组的第一个维度索引被设置为1：
- en: '[PRE39]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The 2-mode unfolding of a tensor array is shown here. The array''s first dimension
    row index is set to 2:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 以下展示了张量数组的2模式展开。数组的第一个维度行索引被设置为2：
- en: '[PRE40]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Run the following command to execute the `tensor.go` file:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以执行`tensor.go`文件：
- en: '[PRE41]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The output is as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/83e23b7a-2bc8-4b85-adde-cf4290930718.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/83e23b7a-2bc8-4b85-adde-cf4290930718.png)'
- en: Summary
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter covered homogeneous data structures such as two-dimensional arrays
    and multi-dimensional arrays. Matrix operations such as sum, subtraction, multiplication,
    inverse, and determinant have been explained with code examples. Spiral matrices,
    zig-zag matrices, and Boolean matrices have been explained using two-dimensional
    arrays. Tensors and operations such as folding were also covered.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了诸如二维数组和多维数组等同构数据结构。使用代码示例解释了矩阵运算，如求和、减法、乘法、逆和行列式。使用二维数组解释了螺旋矩阵、之字形矩阵和布尔矩阵。还介绍了张量以及折叠等操作。
- en: In the next chapter, heterogeneous data structures such as linked lists, ordered
    lists, and unordered lists will be covered.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，将介绍诸如链表、有序列表和无序列表等异构数据结构。
- en: Questions
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is 2-mode unfolding of a tensor array?
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 张量数组的2模式展开是什么？
- en: Write a two-dimensional array of strings and initialize it. Print the strings.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个字符串二维数组并初始化它。打印字符串。
- en: Give an example of a multi-dimensional array and traverse through it.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给出一个多维数组的示例并遍历它。
- en: For a 3 x 3 matrix, write code that calculates the determinant of the matrix.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于一个 3 x 3 矩阵，编写计算矩阵行列式的代码。
- en: What is a transpose of a 3 x 3 matrix?
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 3 x 3 矩阵的转置是什么？
- en: What is a zig-zag matrix?
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是之字形矩阵？
- en: Write code with an example of a spiral matrix.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个螺旋矩阵的示例代码。
- en: Which dimension is typically unfolded for tensor arrays?
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 张量数组通常展开哪个维度？
- en: How do you define a Boolean matrix?
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何定义布尔矩阵？
- en: Choose two 3 x 3 matrices and find the product of the matrices.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择两个 3 x 3 矩阵并找出矩阵的乘积。
- en: Further reading
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following books are recommended if you want to learn more about arrays,
    matrices, and tensors:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于数组、矩阵和张量的知识，以下书籍推荐：
- en: '*Advanced Data Structures*, by Peter Brass'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《高级数据结构》，作者 Peter Brass
- en: '*Dynamic Data Structures: Lists, Stacks, Queues, and Trees*, by Bogdan Patrut,
    and Tiberiu Socaciu'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《动态数据结构：列表、栈、队列和树》，作者 Bogdan Patrut 和 Tiberiu Socaciu
- en: '*Data structures and Algorithms: An Easy Introduction*, by Rudolph Russell'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《数据结构与算法：简易入门》，作者 Rudolph Russell
