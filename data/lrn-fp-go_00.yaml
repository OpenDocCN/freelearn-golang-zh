- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: Until recently, the message has been *Go and functional programming—don't do
    it*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 直到最近，信息一直是*Go和函数式编程——不要这样做*。
- en: Functional programming (FP) is a perfect fit for multicore, parallel processing.
    Go is a concurrency baller (with Goroutines, channels, and so on) and already
    runs on every available CPU core. FP reduces complexity; simplicity is one of
    Go's biggest strengths.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式编程（FP）非常适合多核、并行处理。Go是一个并发球员（具有Goroutines、通道等），并且已经在每个可用的CPU核心上运行。FP减少了复杂性；简单性是Go最大的优势之一。
- en: 'So, what can FP bring to Go that will actually improve our software applications?
    Here''s what it offers:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，FP能为Go带来什么，实际上会改进我们的软件应用程序？它提供了什么：
- en: '**Composition**: FP shows us how to decompose our apps and rebuild them by
    reusing small building blocks.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构成**：FP向我们展示了如何分解我们的应用程序，并通过重用小的构建模块来重建它们。'
- en: '**Monads**: Using monads, we are able to safely order our workflows into pipelines
    of data transformations.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单子**：使用单子，我们能够将我们的工作流安全地排序为数据转换的管道。'
- en: '**Error handling**: We can leverage monadic error handling and still maintain
    compatibility with idiomatic Go code.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误处理**：我们可以利用单子错误处理，同时保持与成熟的Go代码的兼容性。'
- en: '**Performance**: Referential transparency is where we can evaluate our function
    once and then subsequently refer to its pre-computed value.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能**：引用透明性是我们可以评估我们的函数一次，然后随后引用其预先计算的值的地方。'
- en: '**Expressive code**: FP allows us to concisely express business intent in our
    code. We declare what our functions do, without the clutter of error checking
    after every function call, and without having to follow state changes (pure FP
    means immutable variables).'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表达性代码**：FP允许我们在代码中简洁地表达业务意图。我们声明我们的函数做什么，而不必在每个函数调用后进行错误检查的混乱，也不必遵循状态变化（纯FP意味着不可变变量）。'
- en: '**Simpler code**: No shared data means not having to deal with semaphores,
    locks, race conditions, or deadlocks.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更简单的代码**：没有共享数据意味着不必处理信号量、锁、竞争条件或死锁。'
- en: Most people have difficulty grasping FP.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数人都很难掌握FP。
- en: I did too. And when I got it, I wrote this book. Take this journey with me.
    We'll see hundreds of illustrations, read easy-to-understand explanations, and
    implement FP in Go code along the way.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我也是如此。当我懂了，我写了这本书。和我一起踏上这段旅程。我们将看到数百幅插图，阅读易于理解的解释，并在途中实现Go代码中的FP。
- en: I enjoyed coaching soccer. The litmus test I used to determine whether I succeeded
    as a coach was the answer to this simple question: *Did they all register for
    next season and request me to be their coach?* Just like planning practice, I
    planned each chapter, starting with simple concepts and adding to them. Read this
    book, then you too will be able to say, *I got it**.*
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢指导足球。我用来确定我是否成功作为教练的试金石是这个简单问题的答案：*他们是否都注册了下个赛季并请求我成为他们的教练？* 就像计划练习一样，我计划了每一章，从简单的概念开始，然后逐渐添加。阅读这本书，然后你也能说，*我懂了*。
- en: If you want to improve your FP skills, this book is for you.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想提高你的FP技能，这本书适合你。
- en: What this book covers
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本书涵盖了什么
- en: '[Chapter 1](../Text/Ch01.xhtml), *Pure Functional Programming in Go*, introduces
    the declarative style of programming and demonstrates recursion, memorization,
    and Go''s concurrency constructs using the Fibonacci Sequence. We will learn how
    to benchmark/performance test your recursive code and we will get some bad news.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[第1章](../Text/Ch01.xhtml)，*Go中的纯函数式编程*，介绍了声明式编程风格，并演示了使用斐波那契序列的递归、记忆化和Go的并发构造。我们将学习如何对递归代码进行基准/性能测试，我们将得到一些坏消息。'
- en: '[Chapter 2](../Text/Ch02.xhtml), *Manipulating Collections*, shows us how to
    use intermediate (Map, Filter, and Sort) and terminal (Reduce, GroupBy, and Join)
    functions to perform data transformations. We use a Mocha-like BDD Go framework
    to test predicate functions. Itertools helps us grasp the breadth of FP collection
    manipulating function and we look at a distributed MapReduce solution: Gleam =
    Go + LuaJIT + Unix Pipes.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[第2章](../Text/Ch02.xhtml)，*操作集合*，向我们展示了如何使用中间（Map、Filter和Sort）和终端（Reduce、GroupBy和Join）函数执行数据转换。我们使用类似Mocha的BDD
    Go框架来测试谓词函数。Itertools帮助我们掌握FP集合操作函数的广度，我们还看了一个分布式MapReduce解决方案：Gleam = Go + LuaJIT
    + Unix Pipes。'
- en: '[Chapter 3](../Text/Ch03.xhtml), *Using High-Order Functions*, covers a list
    of 27 FP characteristics: Anonymous function, closures, currying, Either data
    type, first-class functions, functions, functional composition, Hindley-Milner
    type system, Idempotence, immutable state, immutable variables, Lambda expressions,
    List Monad, Maybe data type, Maybe Monad, Monadic error, handling, No side-effects,
    operator overloading, option type, parametric polymorphism, partial function application,
    recursion, referential transparency, sum or union types, Tail Call Optimization,
    typeclasses, and Unit type. It also covers an example of Generics, and illustrates
    its value to FP programmers. We implement the Map, Filter, and Reduce functions,
    as well as lazy evaluation using Goroutines and a Go channel.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[第3章](../Text/Ch03.xhtml)，*使用高阶函数*，涵盖了27个FP特征的列表：匿名函数、闭包、柯里化、Either数据类型、一级函数、函数、函数组合、Hindley-Milner类型系统、幂等性、不可变状态、不可变变量、Lambda表达式、列表单子、Maybe数据类型、Maybe单子、单子错误处理、无副作用、运算符重载、选项类型、参数多态性、部分函数应用、递归、引用透明性、和类型的总和或联合类型、尾调用优化、类型类和单元类型。它还涵盖了泛型的示例，并说明了它对FP程序员的价值。我们实现了Map、Filter和Reduce函数，以及使用Goroutines和Go通道进行惰性评估。'
- en: '[Chapter 4](../Text/Ch04.xhtml), *SOLID Design in Go*, talks about why Gophers
    loath Java, principles of good software design, how to apply the Single Responsibility
    principle, function composition, the open/closed Principle, FP contracts, and
    duck typing. It also covers how to model behavior using interfaces, compose software
    using the Interface Segregation principle and embedded interfaces. We will learn
    about the law of Associativity with a purple Monoid chain and get the big reveal—Monads
    chain continuations.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章，“Go中的SOLID设计”，讨论了Gophers为什么憎恨Java，良好软件设计原则的应用，如何应用单一职责原则、函数组合、开闭原则、FP合同和鸭子类型。它还涵盖了如何使用接口建模行为，使用接口隔离原则和嵌入接口来组合软件。我们将学习使用紫色Monoid链的结合律，并揭示Monads链的延续。
- en: '[Chapter 5](../Text/Ch05.xhtml), *Adding Functionality with Decoration*, illustrates
    interface composition using Go''s complimentary Reader and Writer interfaces.
    Next, we will learn how procedural design compares to functional Inversion of
    Control. We will implement the following decorators: authorization, logging, and
    load balancing. Also, we will add easy-metrics to our app to see our decorator
    pattern in action.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章，“使用装饰添加功能”，演示了使用Go的互补Reader和Writer接口进行接口组合。接下来，我们将学习过程式设计与函数式控制反转的比较。我们将实现以下装饰器：授权、日志记录和负载平衡。此外，我们将向我们的应用程序添加easy-metrics，以查看我们的装饰器模式的实际效果。
- en: '[Chapter 6](../Text/Ch06.xhtml), *Applying FP at the Architectural Level*,
    builds an application framework using a layered architecture, which solves cyclical
    dependency errors. We will learn how to apply the Hollywood principle and the
    difference between the observer pattern and dependency injection. We will use
    Inversion of Control (IoC) to control the flow of logic and build a layered application.
    Also, we will build an effective table-driven framework to test our application''s
    API.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 第6章，“在架构层面应用函数式编程”，使用分层架构构建应用程序框架，解决循环依赖错误。我们将学习如何应用好莱坞原则，以及观察者模式和依赖注入之间的区别。我们将使用控制反转（IoC）来控制逻辑流，并构建一个分层应用程序。此外，我们将构建一个有效的表驱动框架来测试我们应用程序的API。
- en: '[Chapter 7](../Text/Ch07.xhtml), *Functional Parameters*, enlightens us as
    to why a lot of  we''ve learned from Java and object-oriented programming does
    not apply to Go, teaches us a better way to refactor long parameter lists using
    functional options, and helps us understand the difference between currying and
    partial application. We will learn how to apply partial application to create
    another function with a smaller arity. We will use a context to gracefully shut
    down our server and see  how to cancel and roll back a long-running database transaction
    using a context.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 第7章，“函数参数”，让我们明白了为什么我们从Java和面向对象编程中学到的很多东西并不适用于Go，教会我们使用函数选项更好地重构长参数列表，并帮助我们理解柯里化和部分应用之间的区别。我们将学习如何应用部分应用来创建另一个具有较小arity的函数。我们将使用上下文来优雅地关闭服务器，并了解如何使用上下文取消和回滚长时间运行的数据库事务。
- en: '[Chapter 8](../Text/Ch08.xhtml), *Increase Performance Using Pipelining*, covers
    data flow types (Read, Split, Transform, Merge, and Write) and teaches us when
    and how to build a data transformation pipeline. We use buffering to increase
    throughput, goroutines and channels to process data faster, improve API readability
    using interfaces, and implement some useful filters. We also implement and compare
    imperative and functional pipeline designs for processing credit card charges.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第8章，“使用流水线提高性能”，涵盖了数据流类型（读取、拆分、转换、合并和写入），并教会我们何时以及如何构建数据转换流水线。我们使用缓冲区来增加吞吐量，使用goroutines和通道来更快地处理数据，使用接口来改善API的可读性，并实现一些有用的过滤器。我们还实现并比较了用于处理信用卡交易的命令式和函数式流水线设计。
- en: '[Chapter 9](../Text/Ch09.xhtml), *Functors, Monoids, and Generics*, gives us
    an appreciation for the lack of support for Generics in Go. We will see how to
    use a code generation tool to solve the repetitive boilerplate code problem. We
    will dive deep into function composition, implement a few functors, and learn
    how to map between worlds. We will also learn how to write a Reduce function to
    implement an invoice processing monoid.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章，“函子、幺半群和泛型”，让我们对Go中缺乏对泛型的支持有了更深入的了解。我们将看到如何使用代码生成工具来解决重复样板代码的问题。我们将深入研究函数组合，实现一些函子，并学习如何在不同世界之间进行映射。我们还将学习如何编写一个Reduce函数来实现发票处理幺半群。
- en: '[Chapter 10](../Text/Ch10.xhtml), *Monads, Type Classes, and Generics*, shows
    us how a Monad works and teaches us how to compose functions using the Bind operation.
    It shows us how Monads process errors and deal with Input/Output (I/O). This chapter
    works through a monadic workflow implementation in Go. We cover what The Lambda
    Calculus is and what it has to do with Monads, see how The Lambda Calculus implements
    Recursion, and learn how the Y-Combinator works in Go. Next, we use the Y-Combinator
    to control a workflow and learn how to handle all errors at the end of the pipe.
    We will learn how type classes work and implement a few in Go. Finally, we review
    the pros and cons of generics in Go.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 第10章，“Monad、类型类和泛型”，向我们展示了Monad的工作原理，并教会我们如何使用Bind操作组合函数。它向我们展示了Monad如何处理错误并处理输入/输出（I/O）。本章通过Go中的monadic工作流程实现。我们将介绍Lambda演算是什么，以及它与Monad有什么关系，看看Lambda演算如何实现递归，并学习Y-组合器在Go中的工作原理。接下来，我们将使用Y-组合器来控制工作流程，并学习如何在管道的末尾处理所有错误。我们将学习类型类的工作原理，并在Go中实现一些类型类。最后，我们将回顾Go中泛型的优缺点。
- en: '[Chapter 11](../Text/Ch11.xhtml), *Category Theory That Applies*, gives us
    a working understanding of category theory. We will learn to appreciate the deep
    connection between category theory, logic, and type theory. We will increase our
    understanding with a journey through the history of FP. This chapter uses a Venn
    diagram to help explain various categories of programming languages. We come to
    understanding of what binding, currying, and application mean in the context of
    a lambda expression. This chapter shows us that the Lambda Calculus is like chocolate
    milk. This chapter covers the type system implications of FP, shows us different
    categories of homomorphisms and when to use them, and uses mathematics and the
    flight of a soccer ball to increase our understanding of morphisms. We will cover
    function composition with linear and quadratic functions, and we will learn about
    interface-driven development. We''ll explore the value in knowledge-driven systems,
    and we will learn how to apply our understanding of category theory to build better
    applications.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[第11章](../Text/Ch11.xhtml)，*适用的范畴论*，让我们对范畴论有了一个实际的理解。我们将学会欣赏范畴论、逻辑和类型理论之间的深刻联系。我们将通过FP历史之旅增进我们的理解。本章使用一个维恩图来帮助解释各种编程语言的范畴。我们将理解在lambda表达式的上下文中绑定、柯里化和应用的含义。本章向我们展示了Lambda演算就像巧克力牛奶。本章涵盖了FP的类型系统含义，向我们展示了不同类别的同态和何时使用它们，并使用数学和足球的飞行来增进我们对态射的理解。我们将用线性和二次函数来进行函数组合，并学习接口驱动开发。我们将探索知识驱动系统的价值，并学会如何应用我们对范畴论的理解来构建更好的应用。'
- en: 'Appendix, *Miscellaneous Information and How-Tos*, shows us how the author
    suggests that we build and run the Go projects in this book. It shows us how to
    propose changes to Go, introduces the Lexical Workflow Solution: a Go-compatible
    way to handle errors in one place, provides a place to go to provide feedback
    and an FP resources page, discusses the Minggatu-Catalan Number, and offers a
    solution for world peace.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 附录，*杂项信息和操作指南*，向我们展示了作者建议我们如何构建和运行本书中的Go项目。它向我们展示了如何提出对Go的更改，介绍了词法工作流解决方案：一种处理错误的Go兼容方式，提供了一个提供反馈的地方和一个FP资源页面，讨论了Minggatu-Catalan数，并提供了世界和平的解决方案。
- en: What you need for this book
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你需要为这本书做好什么准备
- en: If you want to run the Go projects discussed in each chapter, you need to install
    Go. Next, you need to get your Go development environment running and start writing
    code.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想运行每章讨论的Go项目，你需要安装Go。接下来，你需要启动你的Go开发环境并开始编写代码。
- en: Read  the *TL;DR* subsection of the *How to build and run Go projects *section
    of the *Appendix*. Go  to [Chapter 1](../Text/Ch01.xhtml), *Pure Functional Programming
    in Go* in the book and start reading the *Getting the source code* section. Continue
     reading on how to set up and run your first project.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读*附录*中*如何构建和运行Go项目*部分的*TL;DR*子部分。转到[第1章](../Text/Ch01.xhtml)，*Go中的纯函数式编程*，开始阅读*获取源代码*部分。继续阅读如何设置和运行你的第一个项目。
- en: 'Other Go resources include:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 其他Go资源包括：
- en: Tour of Go ([https://tour.golang.org/welcome/1](https://tour.golang.org/welcome/1))
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go之旅 ([https://tour.golang.org/welcome/1](https://tour.golang.org/welcome/1))
- en: Go by Example ([https://gobyexample.com/](https://gobyexample.com/))
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go by Example ([https://gobyexample.com/](https://gobyexample.com/))
- en: Learning Go book ([https://www.miek.nl/go/](https://www.miek.nl/go/))
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习Go书籍 ([https://www.miek.nl/go/](https://www.miek.nl/go/))
- en: Go language specification ([https://golang.org/ref/spec](https://golang.org/ref/spec))
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go语言规范 ([https://golang.org/ref/spec](https://golang.org/ref/spec))
- en: 'When I think of other things to add, I''ll put that information here: [https://lexsheehan.blogspot.com/2017/11/what-you-need-for-this-book.html](https://lexsheehan.blogspot.com/2017/11/what-you-need-for-this-book.html).'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当我想到其他要添加的东西时，我会把信息放在这里：[https://lexsheehan.blogspot.com/2017/11/what-you-need-for-this-book.html](https://lexsheehan.blogspot.com/2017/11/what-you-need-for-this-book.html)。
- en: Who this book is for
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这本书适合谁
- en: A lot of the information in this book requires only a high school education.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书中的很多信息只需要高中学历。
- en: For the programming sections in this book, you should have at least one year
    programming experience. Proficiency with Go or Haskell is ideal, but experience
    with other languages such as C/C++, Python, Javascript, Java, Scala or Ruby is
    also sufficient. You should have some familiarity using the command line.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书中的编程部分，你应该至少有一年的编程经验。精通Go或Haskell是理想的，但有其他语言（如C/C++、Python、Javascript、Java、Scala或Ruby）的经验也足够了。你应该对使用命令行有一定的了解。
- en: 'This book should appeal to two groups:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书应该吸引两个群体：
- en: 'Non-programmers (read [Chapter 11](../Text/Ch11.xhtml), *Category Theory That
    Applies*) If you are one of these:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 非程序员（阅读[第11章](../Text/Ch11.xhtml)，*适用的范畴论*）如果你是其中之一：
- en: K-12 math teacher and want to see why what you are teaching matters
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: K-12数学教师，想知道你所教的内容为什么重要
- en: Math teacher and want to see how what you are teaching relates to other branches
    of mathematics
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数学教师，想知道你所教的内容与数学的其他分支有何关联
- en: Student in law school and want to understand what you will be doing when you
    plead your client’s case
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 法学院的学生，想了解在为客户辩护时你将要做什么
- en: Soccer enthusiast and like math
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 足球爱好者，喜欢数学
- en: Person interested in learning category theory
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对范畴论感兴趣的人
- en: Lover of the Lambda Calculus and want to see it illustrated with diagrams, pictures,
    and Go code
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lambda演算的爱好者，想看到用图表、图片和Go代码来说明它
- en: Manager of software projects and want to see a better correspondence between
    requirement gathering, implementation, and testing
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件项目经理，想看到需求收集、实施和测试之间有更好的对应关系
- en: C-level executive and want to understand what motivates and excites your IT
    staff
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高管，想了解是什么激励和激发了你的IT员工
- en: 'Programmers: If you are one of these:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 程序员：如果你是其中之一：
- en: Software enthusiast and want to learn Functional Programming
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件爱好者，想学习函数式编程
- en: Software tester and want to see a better correspondence between requirement
    gathering, implementation, and testing
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件测试人员，想看到需求收集、实施和测试之间有更好的对应关系
- en: Software architect and want to understand how to use FP
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件架构师，想要了解如何使用FP
- en: Go developer and like soccer
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go开发人员，喜欢足球
- en: Go developer and want to implement your business use case programming tasks
    with more expressive code
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go开发人员，并希望使用更具表现力的代码实现您的业务用例编程任务
- en: Go developer and want to understand Generics
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go开发人员，并希望了解泛型
- en: Java developer and would like to understand why we say, *l*ess is more
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java开发人员，并希望了解为什么我们说*少即是多*
- en: '*Your_language_here* developer who knows FP and wants to transfer your skills
    to Go'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*您的语言*开发人员，了解FP并希望将您的技能转移到Go'
- en: Go developer looking for a better way to build data transformation pipelines
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go开发人员寻找更好的方法来构建数据转换管道
- en: Go developer and would like to see a viable way to write less code, that is,
    fewer if *err != nil* blocks
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go开发人员，并希望看到编写更少代码的可行方法，即更少的*err != nil*块
- en: Experienced Go developer and want to learn FP or add some tools to your toolbox
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有经验的Go开发人员，并希望学习FP或为工具箱添加一些工具
- en: Person involved in software development and want to understand any of the terms
    below.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参与软件开发并希望了解以下任何术语的人。
- en: 'If you are a Go developer looking for working code, with line-by-line explanations
    for any of the following, this book is for you:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是一名Go开发人员，正在寻找以下任何工作代码，并且需要逐行解释，那么这本书适合您：
- en: Benchmark testing
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基准测试
- en: Concurrency (Goroutines/Channels)
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并发（Goroutines/Channels）
- en: Currying
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 柯里化
- en: Data transformation pipeline
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据转换管道
- en: Decorator Pattern
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 装饰者模式
- en: Dependency Injection
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖注入
- en: Duck typing
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鸭子类型
- en: Embedding Interfaces
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌入接口
- en: Error handler
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误处理程序
- en: Function composition
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数组合
- en: Funcitonal parameters
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数参数
- en: Functors
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函子
- en: Generics via code generation
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过代码生成实现泛型
- en: Hollywood Principle
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 好莱坞原则
- en: Interface-driven development
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口驱动开发
- en: I18N (language translation)
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: I18N（语言翻译）
- en: IoC
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IoC
- en: Lambda expressions in Go
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go中的Lambda表达式
- en: Layered application framework
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分层应用框架
- en: Log handler
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志处理程序
- en: Monads
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单子
- en: Monoids
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单子
- en: Observer Pattern
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 观察者模式
- en: Partial application
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部分应用
- en: Pipeline to process credit card payments
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理信用卡支付的管道
- en: Recursion
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 递归
- en: Reduce function to sum invoice totals
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少函数以求和发票总额
- en: Solve circular dependency errors
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决循环依赖错误
- en: Table-driven http API test framework
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于表的http API测试框架
- en: Type Class
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型类
- en: Upload/download files to/from Google Cloud Buckets
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将文件上传/下载到/从Google Cloud Buckets
- en: Y-Combinator
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Y-组合子
- en: 'If I decide to change the format or update this info, I''ll put it here: [http://lexsheehan .blogspot.com/2017/11/who-this-book-is-for.html](http://lexsheehan%C2%A0.blogspot.com/2017/11/who-this-book-is-for.html).'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我决定更改格式或更新此信息，我会在这里放置它：[http://lexsheehan .blogspot.com/2017/11/who-this-book-is-for.html](http://lexsheehan%C2%A0.blogspot.com/2017/11/who-this-book-is-for.html)。
- en: Conventions
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 约定
- en: 'In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning. Code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles are shown as follows: "We update code, run the `glide-update` and `go-run` commands,
    and repeat until done." A block of code is set as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，您将找到一些文本样式，用以区分不同类型的信息。以下是一些样式的示例及其含义的解释。文本中的代码词、数据库表名、文件夹名、文件名、文件扩展名、路径名、虚拟URL、用户输入和Twitter句柄显示如下：“我们更新代码，运行`glide-update`和`go-run`命令，并重复直到完成。”代码块设置如下：
- en: '[PRE0]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望引起您对代码块的特定部分的注意时，相关行或项目将以粗体显示：
- en: '[PRE1]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Any command-line input or output is written as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 任何命令行输入或输出都按如下方式编写：
- en: '[PRE2]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "In order to download new modules, we will go to Files | Settings | Project
    Name | Project Interpreter."'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**新术语**和**重要单词**以粗体显示。屏幕上看到的单词，例如菜单或对话框中的单词，以这种方式出现在文本中：“为了下载新模块，我们将转到文件 |
    设置 | 项目名称 | 项目解释器。”'
- en: Warnings or important notes appear like this.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 警告或重要说明如下。
- en: Tips and tricks appear like this.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 技巧以这种方式出现。
