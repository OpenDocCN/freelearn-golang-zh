- en: Chapter 8. Methods, Interfaces, and Objects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。方法、接口和对象
- en: 'Using your skills at this point, you can write an effective Go program using
    the fundamental concepts covered so far. As you will see in this chapter, the
    Go type system can support idioms that go beyond simple functions. While the designers
    of Go did not intend to create an object-oriented language with deep class hierarchies,
    the language is perfectly capable of supporting type compositions with advanced
    features to express the creation of complex object-like structures, as covered
    in the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您目前的技能，您可以编写一个使用到目前为止涵盖的基本概念的有效的Go程序。正如您将在本章中看到的，Go类型系统可以支持超出简单函数的习语。虽然Go的设计者并不打算创建一个具有深层类层次结构的面向对象的语言，但该语言完全能够支持类型组合，具有高级特性来表达复杂对象结构的创建，如下面的主题所涵盖的那样：
- en: Go methods
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go方法
- en: Objects in Go
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go中的对象
- en: The interface type
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口类型
- en: Type assertion
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型断言
- en: Go methods
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go方法
- en: A Go function can be defined with a scope narrowed to that of a specific type.
    When a function is scoped to a type, or attached to the type, it is known as a
    *method*. A method is defined just like any other Go function. However, its definition
    includes a *method receiver*, which is an extra parameter placed before the method's
    name, used to specify the host type to which the method is attached.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将Go函数定义为仅限于特定类型的范围。当函数范围限定为类型或附加到类型时，它被称为*方法*。方法的定义与任何其他Go函数一样。但是，它的定义包括*方法接收器*，它是放置在方法名称之前的额外参数，用于指定方法附加到的主机类型。
- en: 'To better illustrate this concept, the following figure highlights the different
    parts involved in defining a method. It shows the `quart` method attached to the
    `type gallon` based receiver via the `g gallon` receiver parameter:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地说明这个概念，以下图示了定义方法涉及的不同部分。它显示了“quart”方法附加到“类型加仑”基于接收器参数“g加仑”的接收器：
- en: '![Go methods](img/image_08_001.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![Go方法](img/image_08_001.jpg)'
- en: 'As mentioned, a method has the scope of a type. Therefore, it can only be accessed
    via a declared value (concrete or pointer) of the attached type using *dot notation*.
    The following program shows how the declared method `quart` is accessed using
    this notation:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，方法具有类型的范围。因此，它只能通过已声明的值（具体或指针）使用*点表示法*来访问。以下程序显示了如何使用此表示法访问已声明的方法“quart”：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch08/method_basic.go
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch08/method_basic.go
- en: In the previous example, the `gal` variable is initialized as the `gallon` type.
    Therefore, the `quart` method can be accessed using `gal.quart()`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，“gal”变量被初始化为“gallon”类型。因此，可以使用“gal.quart()”访问“quart”方法。
- en: 'At runtime, the receiver parameter provides access to the value assigned to
    the base type of the method. In the example, the `quart` method receives the `g`
    parameter, which passes in a copy of the value for the declared type. So when
    the `gal` variable is initialized with a value of `5`, a call to `gal.quart()`
    sets the receiver parameter `g` to `5`. So the following would then print a value
    of `20`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，接收器参数提供对方法的基本类型分配的值的访问。在示例中，“quart”方法接收“g”参数，该参数传递了声明类型的值的副本。因此，当“gal”变量初始化为值“5”时，调用“gal.quart()”会将接收器参数“g”设置为“5”。因此，接下来将打印出值“20”：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'It is important to note that the base type for method receivers cannot be a
    pointer (nor an interface). For instance, the following will not compile:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，方法接收器的基本类型不能是指针（也不能是接口）。例如，以下内容将无法编译：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following shows a lengthier version of the source that implements a more
    general liquid volume conversion program. Each volumetric type receives its respective
    methods to expose behaviors attributed to that type:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下显示了实现更通用的液体体积转换程序的源代码的较长版本。每种容积类型都接收其各自的方法，以公开与该类型相关的行为：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: github.com/vladimirvivien/learning-go/ch08/methods.go
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: github.com/vladimirvivien/learning-go/ch08/methods.go
- en: 'For instance, converting `5` gallons to ounces can be done by invoking the
    proper conversion methods on a given value, as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，将“5”加仑转换为盎司可以通过在给定值上调用适当的转换方法来完成，如下所示：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The entire implementation uses a simple, but effective, typical structure to
    represent both data type and behavior. Reading the code, it cleanly expresses
    its intended meaning without any reliance on heavy class structures.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 整个实现使用了一个简单但有效的典型结构来表示数据类型和行为。阅读代码，它清晰地表达了其预期含义，而不依赖于繁重的类结构。
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Method set**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**方法集**'
- en: The number of methods attached to a type, via the receiver parameter, is known
    as the type's *method set*. This includes both concrete and pointer value receivers.
    The concept of a method set is important in determining type equality, interface
    implementation, and support of the notion of the empty method set for the *empty
    interface* (all discussed in this chapter).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通过接收器参数附加到类型的方法数量被称为类型的*方法集*。这包括具体和指针值接收器。方法集的概念在确定类型相等性、接口实现和*空接口*的空方法集的支持方面非常重要（本章中都有讨论）。
- en: Value and pointer receivers
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 值和指针接收器
- en: One aspect of methods that has escaped discussion so far is that receivers are
    normal function parameters. Therefore, they follow the pass-by-value mechanism
    of Go functions. This implies that the invoked method gets a copy of the original
    value from the declared type.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，逃脱讨论的方法的一个方面是接收器是普通函数参数。因此，它们遵循Go函数的传值机制。这意味着调用的方法会得到从声明类型中的原始值的副本。
- en: 'Receiver parameters can be passed as either values of or pointers of the base
    type. For instance, the following program shows two methods, `half` and `double`;
    both directly update the value of their respective method receiver parameters,
    `g`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接收器参数可以作为基本类型的值或指针传递。例如，以下程序显示了两种方法，“half”和“double”；两者都直接更新其各自的方法接收器参数“g”的值：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: golang.fyi/ch08/receiver_ptr.go
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch08/receiver_ptr.go
- en: 'In the `half` method, the code updates the receiver parameter with `g = gallon(g
    * 0.5)`. As you would expect, this will not update the original declared value,
    but rather the copy stored in the `g` parameter. So, when `gal.half()` is invoked
    in `main`, the original value remains unchanged and the following would print
    `5`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在`half`方法中，代码使用`g = gallon(g * 0.5)`更新接收器参数。正如您所期望的那样，这不会更新原始声明的值，而是存储在`g`参数中的副本。因此，当在`main`中调用`gal.half()`时，原始值保持不变，以下内容将打印`5`：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Similar to regular function parameters, a receiver parameter that uses a pointer
    to refer to its base value allows the code to dereference the original value to
    update it. This is highlighted in the `double` method following snippet. It uses
    a method receiver of the `*gallon` type, which is updated using `*g = gallon(*g
    * 2)`. So when the following is invoked in `main`, it would print a value of **10**:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 与常规函数参数类似，使用指针作为接收器参数来引用其基础值的参数允许代码对原始值进行解引用以更新它。这在以下代码片段中的`double`方法中得到了突出显示。它使用了`*gallon`类型的方法接收器，该接收器使用`*g
    = gallon(*g * 2)`进行更新。因此，当在`main`中调用以下内容时，它将打印出**10**的值：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Pointer receiver parameters are widely used in Go. This is because they make
    it possible to express object-like primitives that can carry both state and behaviors.
    As the next section shows, pointer receivers, along with other type features,
    are the basis for creating objects in Go.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 指针接收器参数在Go中被广泛使用。这是因为它们可以表达类似对象的原语，可以携带状态和行为。正如下一节所示，指针接收器以及其他类型特性是在Go中创建对象的基础。
- en: Objects in Go
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go中的对象
- en: The lengthy introductory material from the previous sections was the setup to
    lead to the discussion of objects in Go. It has been mentioned that Go was not
    designed to function as traditional object-oriented language. There are no object
    or class keywords defined in Go. So then, why are we discussing objects in Go
    at all? Well, it turns out that Go perfectly supports object idioms and the practice
    of object-oriented programming without the heavy baggage of classical hierarchies
    and complex inheritance structures found in other object-oriented languages.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 前几节的冗长介绍材料是为了引出讨论Go中的对象。已经提到Go并不是设计成传统的面向对象语言。Go中没有定义对象或类关键字。那么，为什么我们要讨论Go中的对象呢？事实证明，Go完全支持对象习语和面向对象编程实践，而不需要其他面向对象语言中复杂的继承结构。
- en: Let us review some of the primordial features usually attributed to an object-oriented
    language in the following table.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下表中回顾一些通常归因于面向对象语言的原始特性。
- en: '| **Object feature** | **Go** | **Comment** |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| **对象特性** | **Go** | **评论** |'
- en: '| Object: A data type that stores states and exposes behavior | Yes | In Go
    all types can achieve this. There is no special type called a class or object
    to do this. Any type can receive a set of method to define its behavior, although
    the `struct` type comes the closest to what is commonly called an object in other
    languages. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 对象：存储状态并公开行为的数据类型 | 是 | 在Go中，所有类型都可以实现这一点。没有称为类或对象的特殊类型来做到这一点。任何类型都可以接收一组方法来定义其行为，尽管`struct`类型最接近其他语言中通常称为对象的内容。'
- en: '| Composition | Yes | Using a type such as a `struct` or an `interface` (discussed
    later), it is possible to create objects and express their polymorphic relationships
    through composition. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 组合 | 是 | 使用诸如`struct`或`interface`（稍后讨论）的类型，可以通过组合创建对象并表达它们的多态关系。'
- en: '| Subtype via interface | Yes | A type that defines a set of behaviors (methods)
    that other types may implement. Later you will see how it is used to implement
    object sub-typing. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 通过接口进行子类型化 | 是 | 定义一组其他类型可以实现的行为（方法）的类型。稍后您将看到它是如何用于实现对象子类型化的。'
- en: '| Modularity and encapsulation | Yes | Go supports physical and logical modularity
    at its core with concepts such packages and an extensible type system, and code
    element visibility. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 模块化和封装 | 是 | Go在其核心支持物理和逻辑模块化，包括包和可扩展的类型系统，以及代码元素的可见性。'
- en: '| Type inheritance | No | Go does not support polymorphism through inheritance.
    A newly declared named type does not inherit all attributes of its underlying
    type and are treated differently by the type system. As a consequence, it is hard
    to implement inheritance via type lineage as found in other languages. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 类型继承 | 否 | Go不支持通过继承实现多态性。新声明的命名类型不会继承其基础类型的所有属性，并且在类型系统中会被不同对待。因此，通过类型谱系实现继承在其他语言中很难实现。'
- en: '| Classes | No | There is no notion of a class type that serves as the basis
    for objects in Go. Any data type in Go can be used as an object. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: 类 | 无 | Go中没有作为对象基础的类类型概念。Go中的任何数据类型都可以用作对象。
- en: As the previous table suggests, Go supports the majority of concepts that are
    usually attributed to object-oriented programming. The remainder of this chapter
    covers topics and examples showing how to use Go as an object-oriented programming
    language.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的表所示，Go支持通常归因于面向对象编程的大多数概念。本章的其余部分涵盖了如何将Go用作面向对象编程语言的主题和示例。
- en: The struct as object
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结构体作为对象
- en: 'Nearly all Go types can play the role of an object by storing states and exposing
    methods that are capable of accessing and modifying those states. The `struct`
    type, however, offers all of the features that are traditionally attributed to
    objects in other languages, such as:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有的Go类型都可以通过存储状态和公开能够访问和修改这些状态的方法来扮演对象的角色。然而，`struct`类型提供了传统上归因于其他语言中对象的所有特性，例如：
- en: Ability to host methods
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够承载方法
- en: Ability to be extended via composition
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够通过组合进行扩展
- en: Ability to be sub-typed (with help from the Go `interface` type)
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够被子类型化（借助Go的`interface`类型）
- en: The remainder of the chapter will base its discussion of objects on using the
    `struct` type.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的其余部分将基于使用`struct`类型来讨论对象。
- en: Object composition
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象组合
- en: 'Let us start with the following simple example to demonstrate how the `struct`
    type may be used as an object that can achieve polymorphic composition. The following
    source code snippet implements a typical structure that models components of motorized
    transportation including `fuel, engine`, `vehicle`, `truck`, and `plane`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从以下简单的示例开始，演示`struct`类型如何作为一个可以实现多态组合的对象。以下源代码片段实现了一个典型的结构，模拟了包括`fuel, engine`,
    `vehicle`, `truck`和`plane`在内的机动交通组件：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: golang.fyi/ch08/structobj.go
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch08/structobj.go
- en: 'The components and their relationships declared in the previous code snippet
    are illustrated in the following figure to visualize the type mapping and their
    compositions:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中声明的组件及其关系在下图中进行了说明，以可视化类型映射及其组成：
- en: '![Object composition](img/image_08_002.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![对象组合](img/image_08_002.jpg)'
- en: Go uses the *composition over inheritance* principle to achieve polymorphism
    using the type embedding mechanism supported by the `struct` type. In Go, there
    is no support for polymorphism via type inheritance. Recall that each type is
    independent and is considered to be different from all others. In fact, the semantics
    in the model above is slightly broken. Types `truck` and `plane` are shown to
    be composed of (or has-a) the `vehicle` type, which does not sound correct. Instead,
    the proper, or at least a more correct, representation would be to show that the
    types `truck` and `plane` *is a* `vehicle` via a subtype relationship. Later in
    the chapter, we will see how this can be achieved using the `interface` type.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Go使用*组合优于继承*原则，通过`struct`类型支持的类型嵌入机制实现多态性。在Go中，没有通过类型继承支持多态性。请记住，每种类型都是独立的，被认为与所有其他类型都不同。实际上，上面的模型中的语义略有问题。类型`truck`和`plane`被显示为由`vehicle`类型组成（或拥有），这听起来不正确。相反，正确的，或者至少更正确的表示应该是显示类型`truck`和`plane`*是*通过子类型关系`vehicle`。在本章的后面，我们将看到如何使用`interface`类型来实现这一点。
- en: Field and method promotion
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字段和方法提升
- en: 'Now that the objects have been established in the previous section, let us
    spend some time discussing the visibility of fields, methods, and embedded types
    inside the structs. The following source snippet shows a continuation of the previous
    example. It declares and initializes a variable `t` of type `truck` and `p` for
    `plane`. The former is initialized using a struct literal and the latter is updated
    using dot notation:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在前面的部分中已经建立了对象，让我们花一些时间讨论结构体内部字段、方法和嵌入类型的可见性。以下源代码片段显示了前面示例的延续。它声明并初始化了一个类型为`truck`的变量`t`和一个类型为`plane`的变量`p`。前者使用结构字面量进行初始化，后者使用点符号进行更新：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: golang.fyi/ch08/structobj.go
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch08/structobj.go
- en: 'One of the more interesting details in the previous snippet is how the `struct`
    type embedding mechanism promotes fields and methods when accessed using dot notation.
    For instance, the following fields (`make`, `mode`, `fuel`, and `thrust`), are
    all declared in types that are embedded inside of the `plane` type:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，一个更有趣的细节是`struct`类型嵌入机制如何在使用点符号访问时提升字段和方法。例如，以下字段（`make`, `mode`,
    `fuel`, 和 `thrust`）都声明在`plane`类型内部嵌入的类型中：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The previous fields are promoted from their embedded types. They are accessed
    as if they are members of the `plane` type when, in fact, they are coming from
    the types `vehicle` and `engine` respectively. To avoid ambiguity, the name of
    the fields can be qualified as shown here:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的字段是从它们的嵌入类型中提升出来的。当访问它们时，就好像它们是`plane`类型的成员一样，但实际上它们分别来自`vehicle`和`engine`类型。为了避免歧义，字段的名称可以被限定，如下所示：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Methods can also be promoted in a similar way. For instance, in the previous
    code we saw the methods `t.start()` and `p.start()` being invoked. However, neither
    type, `truck` nor `plane`, are receivers of a method named `start()`. As shown
    in the program from earlier, the `start()`method is defined for the `engine` type.
    Since the `engine` type is embedded in the types `truck` and `plane`, the `start()`method
    is promoted in scope to these enclosing types and is therefore  accessible.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 方法也可以以类似的方式提升。例如，在前面的代码中，我们看到了方法`t.start()`和`p.start()`被调用。然而，类型`truck`和`plane`都不是名为`start()`的方法的接收者。就像之前的程序中所示的那样，`start()`方法是为`engine`类型定义的。由于`engine`类型被嵌入到`truck`和`plane`类型中，`start()`方法在范围上被提升到这些封闭类型中，因此可以访问。
- en: The constructor function
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构造函数
- en: 'Since Go does not support classes, there is no such concept as a constructor.
    However, one conventional idiom you will encounter in Go is the use of a factory
    function to create and initialize values for a type. The following snippet shows
    a portion of the previous example that has been updated to use a constructor function
    for creating new values of the `plane` and `truck` types:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Go不支持类，因此没有构造函数的概念。然而，在Go中你会遇到的一个常规习语是使用工厂函数来创建和初始化类型的值。以下代码片段显示了前面示例的一部分，已更新为使用构造函数来创建`plane`和`truck`类型的新值：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: golang.fyi/ch08/structobj2.go
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch08/structobj2.go
- en: While not required, providing a function to help with the initialization of
    composite values, such as a struct, increases the usability of the code. It provides
    a place to encapsulate repeatable initialization logic that can enforce validation
    requirements. In the previous example, both constructor functions, `newTruck`
    and `newPlane`, are passed the make and model information to create and initialize
    their respected values.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管不是必需的，但提供一个函数来帮助初始化复合值，比如一个结构体，会增加代码的可用性。它提供了一个地方来封装可重复的初始化逻辑，可以强制执行验证要求。在前面的例子中，构造函数`newTruck`和`newPlane`都传递了制造和型号信息来创建和初始化它们各自的值。
- en: The interface type
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接口类型
- en: 'When you talk to people who have been doing Go for a while, they almost always
    list the interface as one of their favorite features of the language. The concept
    of interfaces in Go, similar to other languages, such as Java, is a set of methods
    that serves as a template to describe behavior. A Go interface, however, is a
    type specified by the `interface{}` literal, which is used to list a set of methods
    that satisfies the interface. The following example shows the `shape` variable
    being declared as an interface:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当您与已经使用Go一段时间的人交谈时，他们几乎总是将接口列为他们最喜欢的语言特性之一。Go中的接口概念，类似于Java等其他语言，是一组方法，用作描述行为的模板。然而，Go接口是由`interface{}`文字指定的类型，用于列出满足接口的一组方法。以下示例显示了将`shape`变量声明为接口：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the previous snippet, the `shape` variable is declared and assigned an unnamed
    type, `interface{area()float64; perim()float64}`. Declaring variables with unnamed
    `interface` literal types is not really practical. Using idiomatic Go, an `interface`
    type is almost always declared as a named `type`. The previous snippet can be
    rewritten to use a named interface type, as shown in the following example:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前的代码片段中，`shape`变量被声明并分配了一个未命名类型，`interface{area()float64; perim()float64}`。使用未命名的`interface`文字类型声明变量并不是很实用。使用惯用的Go方式，几乎总是将`interface`类型声明为命名的`type`。可以重写先前的代码片段以使用命名的接口类型，如以下示例所示：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Implementing an interface
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现接口
- en: The interesting aspect of interfaces in Go is how they are implemented and ultimately
    used. Implementing a Go interface is done implicitly. There is no separate element
    or keyword required to indicate the intent of implementation. Any type that defines
    the method set of an `interface` type automatically satisfies its implementation.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Go中接口的有趣之处在于它们是如何实现和最终使用的。实现Go接口是隐式完成的。不需要单独的元素或关键字来指示实现的意图。任何定义了`interface`类型的方法集的类型都会自动满足其实现。
- en: 'The following source code shows the `rect` type as an implementation of the
    `interface` type `shape`. The `rect` type is defined as a `struct` with receiver
    methods `area` and `perim`. This fact automatically qualifies `rect` as an implementation
    of `shape`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下源代码显示了`rect`类型作为`shape`接口类型的实现。`rect`类型被定义为具有接收器方法`area`和`perim`的`struct`。这一事实自动使`rect`成为`shape`的实现：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: golang.fyi/ch08/interface_impl.go
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch08/interface_impl.go
- en: Subtyping with Go interfaces
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Go接口进行子类型化
- en: 'Earlier, during the discussion on objects, it was mentioned that Go favors
    composition (*has-a*) relationships when building objects. While that is true,
    Go can also express "is-a" relationships among objects using subtyping via interfaces.
    In our previous example, it can be argued that the `rect` type (and any other
    type that implements the methods `area` and `perim`) can be treated as a subtype
    of `shape`, as shown in the following figure:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论对象时，曾提到Go在构建对象时更青睐组合（*具有*）关系。虽然如此，Go也可以使用接口通过子类型化来表达对象之间的“是一个”关系。在我们先前的示例中，可以认为`rect`类型（以及实现`area`和`perim`方法的任何其他类型）可以被视为`shape`的子类型，如下图所示：
- en: '![Subtyping with Go interfaces](img/image_08_003.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![使用Go接口进行子类型化](img/image_08_003.jpg)'
- en: 'As you may expect, any subtype of `shape` can participate in expressions or
    be passed as functions (or methods) parameters where the `shape` type is expected.
    This is shown in the following code snippet where both types, `rect` (defined
    previously) and `triangle`, are able to be passed to the `shapeInfo(shape)` function
    to return a `string` value containing shape calculations:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能期望的那样，`shape`的任何子类型都可以参与表达式或作为函数（或方法）参数传递，其中期望`shape`类型。在以下代码片段中，先前定义的`rect`和`triangle`类型都能够传递给`shapeInfo(shape)`函数，以返回包含形状计算的`string`值：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: golang.fyi/ch08/interface_impl.go
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch08/interface_impl.go
- en: Implementing multiple interfaces
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现多个接口
- en: 'The implicit mechanism of interfaces allows any named type to satisfy multiple
    interface types at once. This is achieved simply by having the method set of a
    given type intersect with the methods of each `interface` type to be implemented.
    Let us re-implement the previous code to show how this is done. Two new interfaces
    are introduced, `polygon` and `curved`, to better capture and categorize information
    and the behavior of shapes, as shown in the following code snippet:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接口的隐式机制允许任何命名类型同时满足多个接口类型。这只需让给定类型的方法集与要实现的每个`interface`类型的方法相交即可实现。让我们重新实现先前的代码以展示如何实现这一点。引入了两个新接口，`polygon`和`curved`，以更好地捕获和分类形状的信息和行为，如以下代码片段所示：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: golang.fyi/ch08/interface_impl2.go
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch08/interface_impl2.go
- en: 'The previous source code snippet shows how types can automatically satisfy
    multiple interfaces by simply declaring methods that satisfy the interfaces''
    method sets. This is illustrated by the following figure:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的源代码片段显示了类型如何通过简单声明满足接口的方法集来自动满足多个接口。如下图所示：
- en: '![Implementing multiple interfaces](img/image_08_004.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![实现多个接口](img/image_08_004.jpg)'
- en: Interface embedding
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接口嵌入
- en: 'Another interesting aspects of the `interface` type is its support for type
    embedding (similar to the `struct` type). This gives you the flexibility to structure
    your types in ways that maximize type reuse. Continuing with the shape example,
    the following code snippet reorganizes and reduces the previous interface count
    from three to two by embedding shape into the other two types:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`interface`类型的另一个有趣方面是它支持类型嵌入（类似于`struct`类型）。这使您可以以最大程度地重用类型的方式来构造您的类型。继续使用形状示例，以下代码片段通过将形状嵌入到其他两种类型中，重新组织并将先前的接口数量从三个减少到两个：'
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: golang.fyi/ch08/interface_impl3.go
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch08/interface_impl3.go
- en: 'The following illustration shows how the interface types may be combined so
    the *is-a* relationship still satisfies the relationships between code components:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 以下插图显示了如何组合接口类型，以便*是一个*关系仍然满足代码组件之间的关系：
- en: '![Interface embedding](img/image_08_005.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![接口嵌入](img/image_08_005.jpg)'
- en: When embedding interface types, the enclosing type will inherit the method set
    of the embedded types. The compiler will complain if the embedded type causes
    method signatures to clash. Embedding becomes a crucial feature, especially when
    the code applies type validation using type checking. It allows a type to roll
    up type information, thus reducing unnecessary assertion steps (type assertion
    is discussed later).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在嵌入接口类型时，封闭类型将继承嵌入类型的方法集。如果嵌入类型导致方法签名冲突，编译器将发出警告。嵌入成为一个至关重要的特性，特别是当代码应用类型检查时。它允许类型汇总类型信息，从而减少不必要的断言步骤（类型断言稍后讨论）。
- en: The empty interface type
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 空接口类型
- en: The `interface{}` type, or the empty `interface` type, is the literal representation
    of an `interface` type with an empty method set. According to our discussion so
    far, it can be deduced that *all types implement the empty interface* since all
    types can have a method set with zero or more members.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`interface{}` 类型，或空 `interface` 类型，是具有空方法集的 `interface` 类型的文字表示。根据我们迄今为止的讨论，可以推断出
    *所有类型都实现了空接口*，因为所有类型都可以具有零个或多个成员的方法集。'
- en: 'When a variable is assigned the `interface{}` type, the compiler relaxes its
    build-time type checks. The variable, however, still carries type information
    that can be queried at runtime. The following code illustrates how this works:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个变量被赋予 `interface{}` 类型时，编译器会放松其构建时的类型检查。然而，该变量仍然携带可以在运行时查询的类型信息。下面的代码说明了这是如何工作的：
- en: '[PRE19]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: golang.fyi/ch08/interface_empty.go
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch08/interface_empty.go
- en: 'In the previous code, the `anyType` variable is declared to be of the type
    `interface{}`. It is able to be assigned values of different types without complaints
    from the compiler:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`anyType` 变量被声明为 `interface{}` 类型。它能够被赋予不同类型的值，而不会受到编译器的投诉：
- en: '[PRE20]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `printAnyType()` function takes a parameter of the type `interface{}`.
    This means the function can be passed the values of any valid type, as shown here:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`printAnyType()` 函数以 `interface{}` 类型的参数。这意味着该函数可以传递任何有效类型的值，如下所示：'
- en: '[PRE21]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The empty interface is crucially important for idiomatic Go. Delaying type-checking
    until runtime makes the language feels more dynamic without completely sacrificing
    strong typing. Go offers mechanisms such as type assertion (covered next) to query
    the type information carried by interfaces at runtime.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 空接口对于 Go 语言的习惯用法至关重要。将类型检查延迟到运行时使得语言更具动态性，而不完全牺牲强类型。Go 语言提供了诸如类型断言（下文介绍）的机制，以在运行时查询接口所携带的类型信息。
- en: Type assertion
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型断言
- en: 'When an interface (empty or otherwise) is assigned to a variable, it carries
    type information that can be queried at runtime. Type assertion is a mechanism
    that is available in Go to idiomatically narrow a variable (of `interface` type)
    down to a concrete type and value that are stored in the variable. The following
    example uses type assertion in the `eat` function to select which `food` type
    to select in the `eat` function:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当将接口（空或其他）分配给变量时，它携带可以在运行时查询的类型信息。类型断言是 Go 语言中可用的一种机制，用于将变量（`interface` 类型）习惯上缩小到存储在变量中的具体类型和值。下面的示例使用类型断言在
    `eat` 函数中选择要在 `eat` 函数中选择的 `food` 类型：
- en: '[PRE22]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: golang.fyi/interface_assert.go
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/interface_assert.go
- en: 'The `eat` function takes the `food` interface type as its parameter. The code
    shows how to use idiomatic Go to extract the static type and value stored in the
    `f` interface parameter using assertion. The general form for type assertion expression
    is given as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`eat` 函数以 `food` 接口类型作为参数。代码展示了如何使用习惯用法的 Go 语言来使用断言提取存储在 `f` 接口参数中的静态类型和值。类型断言表达式的一般形式如下所示：'
- en: '*<interface_variable>.(concrete type name)*'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '*<interface_variable>.(具体类型名称)*'
- en: 'The expression starts with the variable of the interface type. It is then followed
    by a dot and the concrete type being asserted enclosed in parentheses. The type
    assertion expression can return two values: one is the concrete value (extracted
    from the interface) and the second is a Boolean indicating the success of the
    assertion, as shown here:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式以接口类型的变量开头。然后跟着一个点和括号括起来的具体断言的类型。类型断言表达式可以返回两个值：一个是具体值（从接口中提取），第二个是一个布尔值，指示断言的成功，如下所示：
- en: '*value, boolean := <interface_variable>.(concrete type name)*'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '*value, boolean := <interface_variable>.(具体类型名称)*'
- en: 'This is the form of assertion that is shown in the following snippet (extracted
    from the earlier example) when narrowing the `f` parameter to a specific type
    of `food`. If the type is asserted to be `meat`, then the code continues to test
    the value of the `mt` variable:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在下面的代码片段中显示的断言形式（从之前的示例中提取），用于将 `f` 参数缩小到特定类型的 `food`。如果断言的类型是 `meat`，则代码将继续测试
    `mt` 变量的值：
- en: '[PRE23]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'A type assertion expression can also return just the value, as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 类型断言表达式也可以只返回值，如下所示：
- en: '*value := <interface_variable>**.**(concrete type name)*'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '*value := <interface_variable>**.**(具体类型名称)*'
- en: This form of assertion is risky to do as the runtime will cause a panic in the
    program if the value stored in the interface variable is not of the asserted type.
    Use this form only if you have other safeguards to either prevent or gracefully
    handle a panic.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这种形式的断言是有风险的，因为如果接口变量中存储的值不是所断言的类型，运行时将导致程序崩溃。只有在有其他保障可以防止或优雅地处理崩溃时才使用这种形式。
- en: 'Lastly, when your code requires multiple assertions to test many types at runtime,
    a much nicer idiom for assertions is the type `switch` statement. It uses the
    `switch` statement semantic to query static type information from an interface
    value using case clauses. The `eat` function from the previous food-related example
    can been updated to use a type `switch` instead of `if` statement, as shown in
    the following code snippet:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当您的代码需要多个断言来在运行时测试多种类型时，更好的断言习惯是使用类型 `switch` 语句。它使用 `switch` 语句语义来使用 case
    子句从接口值中查询静态类型信息。前面与食品相关的示例中的 `eat` 函数可以更新为使用类型 `switch` 而不是 `if` 语句，如下面的代码片段所示：
- en: '[PRE24]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: golang.fyi/interface_assert2.go
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/interface_assert2.go
- en: Notice the code is much nicer to read. It can support any number of cases and
    is clearly laid out with visual clues that makes it easy to reason about. The
    `switch` type also makes the panic issue go away by simply specifying a default
    case that can handle any types not specifically handled in the case clause.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，代码的可读性大大提高。它可以支持任意数量的情况，并且清晰地布局，具有视觉线索，使人们能够轻松推理。`switch`类型还通过简单指定一个默认情况来消除了恐慌问题，该默认情况可以处理在情况子句中没有明确处理的任何类型。
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'This chapter attempted to give a broad and, at the same, somewhat comprehensive
    view of several important topics including methods, interfaces, and objects in
    Go. The chapter started with coverage of attaching methods to types using receiver
    parameters. Next the reader was introduced to objects and how to create idiomatic
    object-based programming in Go. Lastly, the chapter presented a comprehensive
    overview of the interface type and how it is used to support object semantics
    in Go. The next chapter takes the reader through one of the most fundamental concepts
    that has made Go such a sensation among developers: concurrency!'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 本章试图以广泛且在某种程度上全面的视角来介绍几个重要主题，包括在Go中的方法、接口和对象。本章首先介绍了如何使用接收器参数将方法附加到类型。接下来介绍了对象以及如何在Go中创建符合惯例的基于对象的编程。最后，本章全面概述了接口类型以及它在支持Go中对象语义方面的应用。下一章将引导读者了解Go中最基本的概念之一，这也是Go在开发者中引起轰动的原因：并发！
