- en: Chapter 2. Serving and Routing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。服务和路由
- en: The cornerstone of the Web as a commercial entity—the piece on which marketing
    and branding has relied on nearly exclusively—is the URL. While we're not yet
    looking at the top-level domain handling, we need to take up the reins of our
    URL and its paths (or endpoints).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 作为商业实体的Web的基石——营销和品牌依赖的基础——是URL。虽然我们还没有看到顶级域处理，但我们需要掌握我们的URL及其路径（或端点）。
- en: In this chapter, we'll do just this by introducing multiple routes and corresponding
    handlers. First, we'll do this with a simple flat file serving and then we'll
    introduce complex mixers to do the routing with more flexibility by implementing
    a library that utilizes regular expressions in its routes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过引入多个路由和相应的处理程序来做到这一点。首先，我们将通过简单的平面文件服务来做到这一点，然后我们将引入复杂的混合物，通过实现一个利用正则表达式的路由的库来实现更灵活的路由。
- en: By the end of this chapter, you should be able to create a site on localhost
    that can be accessed by any number of paths and return content relative to the
    requested path.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您应该能够在本地主机上创建一个可以通过任意数量的路径访问并返回相对于请求路径的内容的站点。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Serving files directly
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接提供文件
- en: Basic routing
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本路由
- en: Using more complex routing with Gorilla
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Gorilla进行更复杂的路由
- en: Redirecting requests
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重定向请求
- en: Serving basic errors
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供基本错误
- en: Serving files directly
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直接提供文件
- en: In the preceding chapter, we utilized the `fmt.Fprintln` function to output
    some generic Hello, World messaging in the browser.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们利用了`fmt.Fprintln`函数在浏览器中输出了一些通用的Hello, World消息。
- en: This obviously has limited utility. In the earliest days of the Web and web
    servers, the entirety of the Web was served by directing requests to corresponding
    static files. In other words, if a user requested `home.html`, the web server
    would look for a file called `home.html` and return it to the user.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这显然有限的效用。在Web和Web服务器的早期，整个Web都是通过将请求定向到相应的静态文件来提供的。换句话说，如果用户请求`home.html`，Web服务器将查找名为`home.html`的文件并将其返回给用户。
- en: This might seem quaint today, as a vast majority of the Web is now served in
    some dynamic fashion, with content often being determined via database IDs, which
    allows for pages to be generated and regenerated without someone modifying the
    individual files.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 今天这可能看起来有点古怪，因为现在绝大多数的Web都以某种动态方式提供，内容通常是通过数据库ID确定的，这允许页面在没有人修改单个文件的情况下生成和重新生成。
- en: 'Let''s take a look at the simplest way in which we can serve files in a way
    similar to those olden days of the Web as shown:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们可以以类似于Web早期的方式提供文件的最简单方法：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Pretty simple, huh? Any requests made to the site will attempt to find a corresponding
    file in our local `/var/www` directory. But while this has a more practical use
    compared to the example in [Chapter 1](ch01.html "Chapter 1. Introducing and Setting
    Up Go"), *Introducing and Setting Up Go*, it's still pretty limited. Let's take
    a look at expanding our options a bit.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 相当简单，对吧？对站点发出的任何请求都将尝试在我们本地的`/var/www`目录中找到相应的文件。但是，虽然与[第1章](ch01.html“第1章。介绍和设置Go”)
    *介绍和设置Go*中的例子相比，这更具实际用途，但仍然相当有限。让我们看看如何扩展我们的选择。
- en: Basic routing
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本路由
- en: In [Chapter 1](ch01.html "Chapter 1. Introducing and Setting Up Go"), *Introducing
    and Setting Up*, we produced a very basic URL endpoint that allowed static file
    serving.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html“第1章。介绍和设置Go”) *介绍和设置*中，我们生成了一个非常基本的URL端点，允许静态文件服务。
- en: 'The following are the simple routes we produced for that example:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们为该示例生成的简单路由：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In review, you can see two endpoints, `/static` and `/`, which either serve
    a single static file or generate output to the `http.ResponseWriter`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下，你可以看到两个端点，`/static`和`/`，它们要么提供单个静态文件，要么生成`http.ResponseWriter`的输出。
- en: We can have any number of routers sitting side by side. However, consider a
    scenario where we have a basic website with about, contact, and staff pages, with
    each residing in `/var/www/about/index.html`, `/var/www/contact.html`, and `/var/www/staff/home.html`.
    While it's an intentionally obtuse example, it demonstrates the limitations of
    Go's built-in and unmodified routing system. We cannot route all requests to the
    same directory locally, we need something that provides more malleable URLs.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以有任意数量的路由器并排坐着。但是，考虑这样一个情景，我们有一个基本的网站，包括关于、联系和员工页面，每个页面都驻留在`/var/www/about/index.html`、`/var/www/contact.html`和`/var/www/staff/home.html`。虽然这是一个故意晦涩的例子，但它展示了Go内置和未修改的路由系统的局限性。我们无法在本地将所有请求路由到同一个目录，我们需要一些提供更灵活URL的东西。
- en: Using more complex routing with Gorilla
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Gorilla进行更复杂的路由
- en: In the previous session, we looked at basic routing but that can only take us
    so far, we have to explicitly define our endpoints and then assign them to handlers.
    What happens if we have a wildcard or a variable in our URL? This is an absolutely
    essential part of the Web and any serious web server.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们看了基本路由，但这只能带我们走到这里，我们必须明确地定义我们的端点，然后将它们分配给处理程序。如果我们的URL中有通配符或变量会发生什么？这是Web和任何严肃的Web服务器的绝对必要部分。
- en: To invoke a very simple example, consider hosting a blog with unique identifiers
    for each blog entry. This could be a numeric ID representing a database ID entry
    or a text-based globally unique identifier, such as `my-first-block-entry`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 举一个非常简单的例子，考虑托管一个博客，每篇博客文章都有唯一的标识符。这可以是代表数据库ID条目的数字ID，也可以是基于文本的全局唯一标识符，比如`my-first-block-entry`。
- en: Note
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In the preceding example, we want to route a URL like `/pages/1` to a filename
    called `1.html`. Alternately, in a database-based scenario, we'd want to use `/pages/1`
    or `/pages/hello-world` to map to a database entry with a GUID of `1` or `hello-world`,
    respectively. To do this we either need to include an exhaustive list of possible
    endpoints, which is extremely wasteful, or implement wildcards, ideally through
    regular expressions.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们希望将类似`/pages/1`的URL路由到名为`1.html`的文件。或者，在基于数据库的情况下，我们希望使用`/pages/1`或`/pages/hello-world`来映射到具有GUID`1`或`hello-world`的数据库条目。为了做到这一点，我们要么需要包含一个可能的端点的详尽列表，这是非常浪费的，要么通过正则表达式实现通配符，这是理想的。
- en: In either case, we'd like to be able to utilize the value from the URL directly
    within our application. This is simple with URL parameters from `GET` or `POST`.
    We can extract those simply, but they aren't particularly elegant in terms of
    clean, hierarchical or descriptive URLs that are often necessary for search engine
    optimization purposes.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种情况，我们都希望能够直接在应用程序中利用URL中的值。这在使用`GET`或`POST`的URL参数时非常简单。我们可以简单地提取这些参数，但它们在干净、分层或描述性URL方面并不特别优雅，而这些通常是搜索引擎优化所必需的。
- en: The built-in `net/http` routing system is, perhaps by design, relatively simple.
    To get anything more complicated out of the values in any given request, we either
    need to extend the routing capabilities or use a package that has done this.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 内置的`net/http`路由系统可能出于设计考虑相对简单。要从任何给定请求的值中获得更复杂的内容，我们要么需要扩展路由功能，要么使用已经完成这一点的包。
- en: 'In the few years that Go has been publicly available and the community has
    been growing, a number of web frameworks have popped up. We''ll talk about these
    in a little more depth as we continue the book, but one in particular is well-received
    and very useful: the Gorilla web toolkit.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go公开可用并且社区不断发展的几年中，出现了许多Web框架。我们将在本书的后续部分更深入地讨论这些内容，但其中一个特别受欢迎和非常有用的是Gorilla
    Web Toolkit。
- en: 'As the name implies, Gorilla is less of a framework and more of a set of very
    useful tools that are generally bundled in frameworks. Specifically, Gorilla contains:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名称所暗示的，Gorilla更像是一组非常有用的工具，而不是一个框架。具体来说，Gorilla包含：
- en: '`gorilla/context`: This is a package for creating a globally-accessible variable
    from the request. It''s useful for sharing a value from the URL without repeating
    the code to access it across your application.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gorilla/context`：这是一个用于从请求中创建全局可访问变量的包。它对于在整个应用程序中共享URL的值而不重复访问代码非常有用。'
- en: '`gorilla/rpc`: This implements RPC-JSON, which is a system for remote code
    services and communication without implementing specific protocols. This relies
    on the JSON format to define the intentions of any request.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gorilla/rpc`：这实现了RPC-JSON，这是一种用于远程代码服务和通信的系统，而不实现特定协议。这依赖于JSON格式来定义任何请求的意图。'
- en: '`gorilla/schema`: This is a package that allows simple packing of form variables
    into a `struct`, which is an otherwise cumbersome process.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gorilla/schema`：这是一个允许将表单变量简单打包到`struct`中的包，否则这是一个繁琐的过程。'
- en: '`gorilla/securecookie`: This, unsurprisingly, implements authenticated and
    encrypted cookies for your application.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gorilla/securecookie`：毫不奇怪，这个包实现了应用程序的经过身份验证和加密的cookie。'
- en: '`gorilla/sessions`: Similar to cookies, this provides unique, long-term, and
    repeatable data stores by utilizing a file-based and/or cookie-based session system.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gorilla/sessions`：类似于cookie，这个包通过使用基于文件和/或基于cookie的会话系统提供了独特的、长期的和可重复的数据存储。'
- en: '`gorilla/mux`: This is intended to create flexible routes that allow regular
    expressions to dictate available variables for routers.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gorilla/mux`：旨在创建灵活的路由，允许正则表达式来指示路由器可用的变量。'
- en: The last package is the one we're most interested in here, and it comes with
    a related package called `gorilla/reverse`, which essentially allows you to reverse
    the process of creating regular expression-based muxes. We will cover that topic
    in detail in the later section.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一个包是我们在这里最感兴趣的包，它还带有一个相关的包叫做`gorilla/reverse`，它基本上允许您反转基于正则表达式的mux创建过程。我们将在后面的章节中详细介绍这个主题。
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can grab individual Gorilla packages by their GitHub location with a `go
    get`. For example, to get the mux package, going to [github.com/gorilla/mux](http://github.com/gorilla/mux)
    will suffice and bring the package into your `GOPATH`. For the locations of the
    other packages (they're fairly self-explanatory), visit [http://www.gorillatoolkit.org/](http://www.gorillatoolkit.org/)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过它们的GitHub位置使用`go get`获取单独的Gorilla包。例如，要获取mux包，只需访问[github.com/gorilla/mux](http://github.com/gorilla/mux)即可将该包带入您的`GOPATH`。有关其他包的位置（它们都相当自明），请访问[http://www.gorillatoolkit.org/](http://www.gorillatoolkit.org/)。
- en: 'Let''s dive-in and take a look at how to create a route that''s flexible and
    uses a regular expression to pass a parameter to our handler:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解如何创建一个灵活的路由，并使用正则表达式将参数传递给我们的处理程序：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This should look familiar to our last code with the exception of the Gorilla
    package import:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该看起来很熟悉，除了Gorilla包的导入之外：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, we've created a route handler to accept the response. The thing to be
    noted here is the use of `mux.Vars`, which is a method that will look for query
    string variables from the `http.Request` and parse them into a map. The values
    will then be accessible by referencing the result by key, in this case `id`, which
    we'll cover in the next section.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个路由处理程序来接受响应。这里需要注意的是使用了`mux.Vars`，这是一个方法，它将从`http.Request`中查找查询字符串变量并将它们解析成一个映射。然后可以通过键引用结果来访问这些值，本例中是`id`，我们将在下一节中介绍。
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, we can see a (very basic) regular expression in the handler. We're assigning
    any number of digits after `/pages/` to a parameter named `id` in `{id:[0-9]+}`;
    this is the value we pluck out in `pageHandler`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到处理程序中的（非常基本的）正则表达式。我们将`/pages/`后面的任意数量的数字分配给名为`id`的参数，即`{id:[0-9]+}`；这是我们在`pageHandler`中提取出来的值。
- en: 'A simpler version that shows how this can be used to delineate separate pages
    can be seen by adding a couple of dummy endpoints:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更简单的版本显示了如何用它来划分不同的页面，可以通过添加一对虚拟端点来看到：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When we visit a URL that matches this pattern, our `pageHandler` attempts to
    find the page in the `files/` subdirectory and returns that file directly.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们访问与此模式匹配的URL时，我们的`pageHandler`会尝试在`files/`子目录中找到页面并直接返回该文件。
- en: 'A response to `/pages/1` would look like this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对`/pages/1`的响应会像这样：
- en: '![Using more complex routing with Gorilla](img/B04294_02_01.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![使用Gorilla进行更复杂的路由](img/B04294_02_01.jpg)'
- en: At this point, you might already be asking, but what if we don't have the requested
    page? Or, what happens if we've moved that location? This brings us to two important
    mechanisms in web serving—returning error responses and, as part of that, potentially
    redirecting requests that have moved or have other interesting properties that
    need to be reported back to the end users.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你可能已经在问，但是如果我们没有请求的页面怎么办？或者，如果我们移动了那个位置会发生什么？这引出了网络服务中的两个重要机制——返回错误响应，以及作为其中一部分，可能重定向已移动或具有其他需要向最终用户报告的有趣属性的请求。
- en: Redirecting requests
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重定向请求
- en: Before we look at simple and incredibly common errors like 404s, let's address
    the idea of redirecting requests, something that's very common. Although not always
    for reasons that are evident or tangible for the average user.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们看简单和非常常见的错误，比如404之前，让我们先讨论重定向请求的想法，这是非常常见的。尽管并非总是对于普通用户来说是明显或可触及的原因。
- en: 'So we might we want to redirect requests to another request? Well there are
    quite a few reasons, as defined by the HTTP specification that could lead us to
    implement automatic redirects on any given request. Here are a few of them with
    their corresponding HTTP status codes:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们为什么要将请求重定向到另一个请求呢？好吧，根据HTTP规范的定义，有很多原因可能导致我们在任何给定的请求上实现自动重定向。以下是其中一些及其相应的HTTP状态码：
- en: A non-canonical address may need to be redirected to the canonical one for SEO
    purposes or for changes in site architecture. This is handled by *301 Moved Permanently*
    or *302 Found*.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非规范地址可能需要重定向到规范地址以用于SEO目的或站点架构的更改。这由*301永久移动*或*302找到*处理。
- en: Redirecting after a successful or unsuccessful `POST`. This helps us to prevent
    re-POSTing of the same form data accidentally. Typically, this is defined by *307
    Temporary Redirect*.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在成功或不成功的`POST`之后重定向。这有助于防止意外重新提交相同的表单数据。通常，这由*307临时重定向*定义。
- en: The page is not necessarily missing, but it now lives in another location. This
    is handled by the status code *301 Moved Permanently*.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面不一定丢失，但现在位于另一个位置。这由状态码*301永久移动*处理。
- en: Executing any one of these is incredibly simple in basic Go with `net/http`,
    but as you might expect, it is facilitated and improved with more robust frameworks,
    such as Gorilla.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在基本的Go中使用`net/http`执行任何一个都非常简单，但是正如你所期望的那样，使用更健壮的框架，比如Gorilla，可以更加方便和改进。
- en: Serving basic errors
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供基本错误
- en: At this point, it makes some sense to talk a bit about errors. In all likelihood,
    you may have already encountered one as you played with our basic flat file serving
    server, particularly if you went beyond two or three pages.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，谈论一下错误是有些合理的。很可能，当你玩我们的基本平面文件服务服务器时，特别是当你超出两三页时，你可能已经遇到了错误。
- en: Our example code includes four example HTML files for flat serving, numbered
    `1.html`, `2.html`, and so on. What happens when you hit the `/pages/5` endpoint,
    though? Luckily, the `http` package will automatically handle the file not found
    errors, just like most common web servers.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例代码包括四个用于平面服务的示例HTML文件，编号为`1.html`，`2.html`等等。然而，当你访问`/pages/5`端点时会发生什么？幸运的是，`http`包会自动处理文件未找到错误，就像大多数常见的网络服务器一样。
- en: 'Also, similar to most common web servers, the error page itself is small, bland,
    and nondescript. In the following section, you can see the **404 page not found**
    status response we get from Go:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，与大多数常见的网络服务器类似，错误页面本身很小，单调，毫无特色。在接下来的部分中，你可以看到我们从Go得到的**404页面未找到**状态响应：
- en: '![Serving basic errors](img/B04294_02_02.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![提供基本错误](img/B04294_02_02.jpg)'
- en: As mentioned, it's a very basic and nondescript page. Often, that's a good thing—error
    pages that contain more information or flair than necessary can have a negative
    impact.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，这是一个非常基本和毫无特色的页面。通常情况下，这是一件好事——错误页面包含的信息或风格超过必要的可能会产生负面影响。
- en: Consider this error—the `404`—as an example. If we include references to images
    and stylesheets that exist on the same server, what happens if those assets are
    also missing?
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这个错误——`404`——作为一个例子。如果我们包含对同一服务器上存在的图像和样式表的引用，如果这些资产也丢失了会发生什么？
- en: In short, you can very quickly end up with recursive errors—each `404` page
    calls an image and stylesheet that triggers `404` responses and the cycle repeats.
    Even if the web server is smart enough to stop this, and many are, it will produce
    a nightmare scenario in the logs, rendering them so full of noise that they become
    useless.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，你很快就会遇到递归错误——每个`404`页面都会调用一个触发`404`响应的图像和样式表，循环重复。即使网络服务器足够聪明以停止这一点，而且很多都是，它也会在日志中产生噩梦般的场景，使它们充满了噪音，变得毫无用处。
- en: 'Let''s look at some code that we can use to implement a catch-all `404` page
    for any missing files in our `/files` directory:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些代码，我们可以用来为我们的`/files`目录中任何丢失的文件实现一个全局的`404`页面：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, you can see that we first attempt to check the file with `os.Stat` (and
    its potential error) and output our own `404` response:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到我们首先尝试使用`os.Stat`检查文件（及其潜在错误），并输出我们自己的`404`响应：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now if we take a look at the `404.html` page, we will see that we've created
    a custom HTML file that produces something that is a little more user-friendly
    than the default **Go Page Not Found** message that we were invoking previously.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们看一下`404.html`页面，我们会发现我们创建了一个自定义的HTML文件，它产生的东西比我们之前调用的默认**Go页面未找到**消息更加用户友好。
- en: 'Let''s take a look at what this looks like, but remember that it can look any
    way you''d like:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这是什么样子，但请记住，它可以看起来任何你想要的样子：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Also, note that while we keep the `404.html` file in the same directory as the
    rest of our files, this is solely for the purposes of simplicity.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，请注意，虽然我们将`404.html`文件保存在与其他文件相同的目录中，但这仅仅是为了简单起见。
- en: In reality, and in most production environments with custom error pages, we'd
    much rather have it exist in its own directory, which is ideally outside the publicly
    available part of our web site. After all, you can now access the error page in
    a way that is not actually an error by visiting `http://localhost:8080/pages/404`.
    This returns the error message, but the reality is that in this case the file
    was found, and we're simply returning it.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，在大多数生产环境中，具有自定义错误页面，我们更希望它存在于自己的目录中，最好是在我们网站的公开可用部分之外。毕竟，现在您可以通过访问`http://localhost:8080/pages/404`的方式访问错误页面，这实际上并不是一个错误。这会返回错误消息，但实际情况是，在这种情况下找到了文件，我们只是返回它。
- en: 'Let''s take a look at our new, prettier `404` page by accessing `http://localhost/pages/5`,
    which specifies a static file that does not exist in our filesystem:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过访问`http://localhost/pages/5`来看一下我们新的、更漂亮的`404`页面，这指定了一个在我们的文件系统中不存在的静态文件：
- en: '![Serving basic errors](img/B04294_02_03.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![提供基本错误](img/B04294_02_03.jpg)'
- en: By showing a more user-friendly error message, we can provide more useful actions
    for users who encounter them. Consider some of the other common errors that might
    benefit from more expressive error pages.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通过显示更加用户友好的错误消息，我们可以为遇到错误的用户提供更有用的操作。考虑一些其他可能受益于更具表现力的错误页面的常见错误。
- en: Summary
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We can now produce not only the basic routes from the `net/http` package but
    more complicated ones using the Gorilla toolkit. By utilizing Gorilla, we can
    now create regular expressions and implement pattern-based routing and allow much
    more flexibility to our routing patterns.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们不仅可以从`net/http`包中产生基本路由，还可以使用Gorilla工具包产生更复杂的路由。通过利用Gorilla，我们现在可以创建正则表达式，并实现基于模式的路由，并允许我们的路由模式更加灵活。
- en: With this increased flexibility, we also have to be mindful of errors now, so
    we've looked at handling error-based redirects and messages, including a custom
    **404, Page not found** message to produce more customized error messages.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这种增加的灵活性，我们现在也必须注意错误，因此我们已经考虑了处理基于错误的重定向和消息，包括自定义的**404，页面未找到**消息，以产生更定制的错误消息。
- en: Now that we have the basics down for creating endpoints, routes, and handlers;
    we need to start doing some non-trivial data serving.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经掌握了创建端点、路由和处理程序的基础知识，我们需要开始进行一些非平凡的数据服务。
- en: In [Chapter 3](ch03.html "Chapter 3. Connecting to Data"), *Connecting to Data*,
    we'll start getting dynamic information from databases, so we can manage data
    in a smarter and more reliable fashion. By connecting to a couple of different,
    commonly-used databases, we'll be able to build robust, dynamic, and scalable
    web applications.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](ch03.html "第3章. 连接到数据") *连接到数据*中，我们将开始从数据库中获取动态信息，这样我们就可以更智能、更可靠地管理数据。通过连接到一些不同的常用数据库，我们将能够构建强大、动态和可扩展的Web应用程序。
