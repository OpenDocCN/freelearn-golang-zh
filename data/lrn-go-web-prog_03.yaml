- en: Chapter 3. Connecting to Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。连接到数据
- en: In the previous chapter, we explored how to take URLs and translate them to
    different pages in our web application. In doing so, we built URLs that were dynamic
    and resulted in dynamic responses from our (very simple) `net/http` handlers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们探讨了如何获取URL并将其转换为Web应用程序中的不同页面。这样做，我们构建了动态的URL，并从我们（非常简单的）`net/http`处理程序中获得了动态响应。
- en: By implementing an extended mux router from the Gorilla toolkit, we expanded
    the capabilities of the built-in router by allowing regular expressions, which
    gives our application a lot more flexibility.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通过从Gorilla工具包实现扩展的mux路由器，我们扩展了内置路由器的功能，允许使用正则表达式，从而使我们的应用程序具有更大的灵活性。
- en: This is something that's endemic to some of the most popular web servers. For
    example, both Apache and Nginx provide methods to utilize regular expressions
    in routes and staying at par with common solutions should be our minimal baseline
    for functionality.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一些最流行的Web服务器的固有特性。例如，Apache和Nginx都提供了在路由中利用正则表达式的方法，与常见解决方案保持一致应该是我们功能的最低基线。
- en: But this is just an admittedly important stepping stone to build a robust web
    application with a lot of varied functionality. To go any further, we need to
    look at bringing in data.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 但这只是构建具有多样功能的强大Web应用程序的一个重要的步骤。要进一步发展，我们需要考虑引入数据。
- en: Our examples in the previous chapter relied on hardcoded content grabbed from
    static files—this is obviously archaic and doesn't scale. Anyone who has worked
    in the pre-CGI early days of the Web could regale you with tales of site updates
    requiring total retooling of static files or explain the anachronism that was
    Server-Side Includes.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一章的示例中依赖于从静态文件中抓取的硬编码内容，这显然是过时的，不可扩展的。在Web的CGI早期，任何需要更新网站的人都需要重新制作静态文件，或者解释服务器端包含的过时性。
- en: But luckily, the Web became largely dynamic in the late 1990s and databases
    began to rule the world. While APIs, microservices and NoSQL have in some places
    replaced that architecture, it still remains the bread and butter of the way the
    Web works today.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 但幸运的是，Web在20世纪90年代后期变得非常动态，数据库开始统治世界。虽然API、微服务和NoSQL在某些地方取代了这种架构，但它仍然是Web工作的基础。
- en: So without further ado, let's get some dynamic data.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，话不多说，让我们获取一些动态数据。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Connecting to a database
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到数据库
- en: Using GUID for prettier URLs
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GUID创建更美观的URL
- en: Handling 404s
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理404错误
- en: Connecting to a database
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到数据库
- en: When it comes to accessing databases, Go's SQL interface provides a very simple
    and reliable way to connect to various database servers that have drivers.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在访问数据库方面，Go的SQL接口提供了一种非常简单可靠的方式来连接具有驱动程序的各种数据库服务器。
- en: At this point, most of the big names are covered—MySQL, Postgres, SQLite, MSSQL,
    and quite a few more have well-maintained drivers that utilize the `database/sql`
    interface provided by Go.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，大多数大名鼎鼎的数据库都已经涵盖了——MySQL、Postgres、SQLite、MSSQL等等都有由Go提供的`database/sql`接口提供的维护良好的驱动程序。
- en: The best thing about the way Go handles this through a standardized SQL interface
    is that you won't have to learn custom Go libraries to interact with your database.
    This doesn't preclude needing to know the nuances of the database's SQL implementation
    or other functionality, but it does eliminate one potential area of confusion.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Go处理这一点的最好之处在于通过标准化的SQL接口，您不必学习自定义的Go库来与数据库交互。这并不排除需要了解数据库的SQL实现或其他功能的细微差别，但它确实消除了一个潜在的困惑领域。
- en: Before you go too much farther, you'll want to make sure that you have a library
    and a driver for your database of choice installed via `go get` command.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，您需要确保通过`go get`命令安装了您选择的数据库的库和驱动程序。
- en: The Go project maintains a Wiki of all of the current SQLDrivers and is a good
    starting reference point when looking for an adapter at [https://github.com/golang/go/wiki/SQLDrivers](https://github.com/golang/go/wiki/SQLDrivers)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Go项目维护了所有当前SQL驱动程序的Wiki，这是寻找适配器的一个很好的起始参考点，网址为[https://github.com/golang/go/wiki/SQLDrivers](https://github.com/golang/go/wiki/SQLDrivers)
- en: Note
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note: We''re using MySQL and Postgres for various examples in this book, but
    use the solution that works best for you. Installing MySQL and Postgres is fairly
    basic on any Nix, Windows, or OS X machine.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：在本书的各种示例中，我们使用MySQL和Postgres，但请使用最适合您的解决方案。在任何Nix、Windows或OS X机器上安装MySQL和Postgres都相当基本。
- en: MySQL can be downloaded from [https://www.mysql.com/](https://www.mysql.com/)
    and although there are a few drivers listed by Google, we recommend the Go-MySQL-Driver.
    Though you won't go wrong with the recommended alternatives from the Go project,
    the Go-MySQL-Driver is very clean and well-tested. You can get it at [https://github.com/go-sql-driver/mysql/](https://github.com/go-sql-driver/mysql/)For
    Postgres, grab a binary or package manager command from [http://www.postgresql.org/](http://www.postgresql.org/).
    The Postgres driver of choice here is `pq`, which can be installed via `go get`
    at [github.com/lib/pq](http://github.com/lib/pq)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL可以从[https://www.mysql.com/](https://www.mysql.com/)下载，虽然Google列出了一些驱动程序，但我们推荐使用Go-MySQL-Driver。虽然您也可以选择Go项目推荐的替代方案，但Go-MySQL-Driver非常干净且经过了充分测试。您可以在[https://github.com/go-sql-driver/mysql/](https://github.com/go-sql-driver/mysql/)获取它。对于Postgres，可以从[http://www.postgresql.org/](http://www.postgresql.org/)下载二进制文件或包管理器命令。这里选择的Postgres驱动是`pq`，可以通过`go
    get`安装，网址为[github.com/lib/pq](http://github.com/lib/pq)
- en: Creating a MySQL database
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建MySQL数据库
- en: You can choose to design any application you wish, but for these examples we'll
    look at a very simple blog concept.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择设计任何您想要的应用程序，但在这些示例中，我们将看一个非常简单的博客概念。
- en: Our goal here is to have as few blog entries in our database as possible, to
    be able to call those directly from our database by GUID and display an error
    if the particular requested blog entry does not exist.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是在数据库中尽可能少地拥有博客条目，以便能够通过GUID直接从数据库中调用它们，并在特定请求的博客条目不存在时显示错误。
- en: To do this, we'll create a MySQL database that contains our pages. These will
    have an internal, automatically incrementing numeric ID, a textual globally unique
    identifier, or GUID, and some metadata around the blog entry itself.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们将创建一个包含我们页面的MySQL数据库。这些页面将具有内部自动递增的数字ID，一个文本全局唯一标识符或GUID，以及一些关于博客条目本身的元数据。
- en: To start simply, we'll create a title `page_title`, body text `page_content`
    and a Unix timestamp `page_date`. You can feel free to use one of MySQL's built-in
    date fields; using an integer field to store a timestamp is just a matter of preference
    and can allow for some more elaborate comparisons in your queries.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简单起见，我们将创建一个标题`page_title`，正文文本`page_content`和一个Unix时间戳`page_date`。您可以随意使用MySQL的内置日期字段之一；使用整数字段存储时间戳只是一种偏好，并且可以允许在查询中进行一些更复杂的比较。
- en: 'The following is the SQL in your MySQL console (or GUI application) to create
    the database `cms` and the requisite table `pages`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在MySQL控制台（或GUI应用程序）中创建数据库`cms`和必需表`pages`的SQL：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As mentioned, you can execute this query through any number of interfaces. To
    connect to MySQL, select your database and try these queries, you can follow the
    command line documentation at [http://dev.mysql.com/doc/refman/5.7/en/connecting.html](http://dev.mysql.com/doc/refman/5.7/en/connecting.html).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，您可以通过任意数量的接口执行此查询。要连接到MySQL，请选择您的数据库并尝试这些查询，您可以在[http://dev.mysql.com/doc/refman/5.7/en/connecting.html](http://dev.mysql.com/doc/refman/5.7/en/connecting.html)上查看命令行文档。
- en: Note the `UNIQUE KEY` on `page_guid`. This is pretty important, as if we happen
    to allow duplicate GUIDs, well, we have a problem. The idea of a globally unique
    key is that it cannot exist elsewhere, and since we'll rely on it for URL resolution,
    we want to make sure that there's only one entry per GUID.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`page_guid`上的`UNIQUE KEY`。这非常重要，因为如果我们允许重复的GUID，那么我们就有问题了。全局唯一键的概念是它不能存在于其他地方，而且由于我们将依赖它进行URL解析，因此我们希望确保每个GUID只有一个条目。
- en: As you can probably tell, this is a very basic content type of blog database.
    We have an auto-incrementing ID value, a title, a date and the page's content,
    and not a whole lot else going on.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，这是一个非常基本的博客数据库内容类型。我们有一个自动递增的ID值，一个标题，一个日期和页面内容，没有太多其他事情发生。
- en: While it's not a lot, it's enough to demonstrate dynamic pages in Go utilizing
    a database interface.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不多，但足以演示在Go中利用数据库接口动态页面。
- en: 'Just to make sure there''s some data in the `pages` table, add the following
    query to fill this in a bit:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 只是为了确保`pages`表中有一些数据，请添加以下查询以填充一些数据：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will give us something to start with.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们一些开始的东西。
- en: Now that we have our structure and some dummy data, let's take a look at how
    we can connect to MySQL, retrieve the data, and serve it dynamically based on
    URL requests and Gorilla's mux patterns.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了结构和一些虚拟数据，让我们看看如何连接到MySQL，检索数据，并根据URL请求和Gorilla的mux模式动态提供数据。
- en: 'To get started, let''s create a shell of what we''ll need to connect:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，让我们创建一个连接所需的外壳：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We're importing the MySQL driver package for what's known as *side effects*.
    By this, it's generally meant that the package is complementary to another and
    provides various interfaces that do not need to be referenced specifically.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在导入MySQL驱动程序包，以实现所谓的*副作用*。通常情况下，这意味着该包是与另一个包相辅相成，并提供各种不需要特别引用的接口。
- en: You can note this through the underscore `_` syntax that precedes the packages
    import. You're likely already familiar with this as a quick-and-dirty way to ignore
    the instantiation of a returned value from a method. For example `x, _ := something()`allows
    you to ignore the second returned value.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过下划线`_`语法来注意到这一点，该语法位于包的导入之前。您可能已经熟悉这种忽略方法返回值的快速而粗糙的方法。例如，`x，_：= something()`允许您忽略第二个返回值。
- en: It's also often used when a developer plans to use a library, but hasn't yet.
    By prepending the package this way, it allows the import declaration to stay without
    causing a compiler error. While this is frowned upon, the use of the underscore—or
    blank identifier—in the preceding method, for side effects, is fairly common and
    often acceptable.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发人员计划使用库但尚未使用时，通常会这样使用。通过这种方式在包名前加下划线，可以使导入声明保持而不会导致编译器错误。虽然这是不被赞同的，但在前面的方法中使用下划线或空白标识符来产生副作用是相当常见且通常可接受的。
- en: 'As always, though, this all depends on how and why you''re using the identifier:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，这一切都取决于您使用标识符的方式和原因：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Make sure to replace these values with whatever happens to be relevant to your
    installation, of course:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，确保用与您的安装相关的内容替换这些值：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'By keeping our database connection reference as a global variable, we can avoid
    a lot of duplicate code. For the sake of clarity, we''ll define it fairly high
    up in the code. There''s nothing preventing you from making this a constant instead,
    but we''ve left it mutable for any necessary future flexibility, such as adding
    multiple databases to a single application:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将数据库连接引用保持为全局变量，我们可以避免大量重复的代码。为了清晰起见，我们将在代码中相当高的位置定义它。没有什么可以阻止您将其变为常量，但我们将其保留为可变的，以便在必要时具有未来的灵活性，例如向单个应用程序添加多个数据库：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This `struct`, of course, matches our database schema rather closely, with
    `Title`, `Content` and `Date` representing the non-ID values in our table. As
    we''ll see a bit later in this chapter (and more in the next), describing our
    data in a nicely-designed struct helps parlay the templating functions of Go.
    And on that note, make sure your struct fields are exportable or public by keeping
    them propercased. Any lowercased fields will not be exportable and therefore not
    available to templates. We will talk more on that later:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这个`struct`与我们的数据库模式非常相似，`Title`，`Content`和`Date`表示我们表中的非ID值。正如我们稍后在本章中看到的（以及在下一章中看到的），在一个设计良好的结构中描述我们的数据有助于利用Go的模板函数。在这一点上，请确保您的结构字段是可导出的或公共的，方法是保持它们的大小写正确。任何小写字段都不会被导出，因此在模板中不可用。我们稍后会详细讨论这一点：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As we mentioned earlier, this is largely scaffolding. All we want to do here
    is ensure that we're able to connect to our database. If you get an error, check
    your connection and the log entry output after `Couldn't connect`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，这在很大程度上是搭架子。我们在这里要做的就是确保我们能够连接到我们的数据库。如果您遇到错误，请检查您的连接以及`Couldn't connect`后的日志条目输出。
- en: If, hopefully, you were able to connect with this script, we can move on to
    creating a generic route and outputting the relevant data from that particular
    request's GUID from our database.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果幸运的话，您能够连接到这个脚本，我们可以继续创建一个通用路由，并从我们的数据库中输出该特定请求的GUID的相关数据。
- en: To do this we need to reimplement Gorilla, create a single route, and then implement
    a handler that generates some very simple output that matches what we have in
    the database.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们需要重新实现Gorilla，创建一个单一路由，然后实现一个处理程序，生成一些非常简单的输出，与我们在数据库中的内容相匹配。
- en: 'Let''s take a look at the modifications and additions we''ll need to make to
    allow this to happen:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们需要进行的修改和添加，以便实现这一点：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The big change here is that we''re bringing Gorilla and `net/http` back into
    the project. We''ll obviously need these to serve pages:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的重大变化是我们重新引入了Gorilla和`net/http`到项目中。显然，我们需要这些来提供页面：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We've added a `PORT` constant, which refers to our HTTP server port.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个`PORT`常量，它指的是我们的HTTP服务器端口。
- en: 'Note that if your host is `localhost`/`127.0.0.1`, it''s not necessary to specify
    a `DBPort`, but we''ve kept this line in the constants section. We don''t use
    the host here in our MySQL connection:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您的主机是`localhost`/`127.0.0.1`，则不需要指定`DBPort`，但我们已经在常量部分保留了这一行。我们在MySQL连接中不使用主机：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`ServePage` is the function that takes an `id` from `mux.Vars` and queries
    our database for the blog entry ID. There''s some nuance in the way we make a
    query that is worth noting; the simplest way to eliminate SQL injection vulnerabilities
    is to use prepared statements, such as `Query`, `QueryRow`, or `Prepare`. Utilizing
    any of these and including a variadic of variables to be injected into the prepared
    statement removes the inherent risk of constructing a query by hand.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`ServePage`是一个函数，它从`mux.Vars`中获取一个`id`并查询我们的数据库以获取博客条目的ID。我们在查询方式上有一些微妙之处值得注意；消除SQL注入漏洞的最简单方法是使用预处理语句，比如`Query`、`QueryRow`或`Prepare`。利用其中任何一个，并包含一个可变的要注入到预处理语句中的变量，可以消除手工构建查询的固有风险。'
- en: 'The `Scan` method then takes the results of a query and translates them to
    a struct; you''ll want to make sure the struct matches the order and number of
    requested fields in the query. In this case, we''re mapping `page_title`, `page_content`
    and `page_date` to a `Page` struct''s `Title`, `Content` and `Date`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`Scan`方法然后获取查询结果并将其转换为一个结构体；您需要确保结构体与查询中请求字段的顺序和数量匹配。在这种情况下，我们将`page_title`、`page_content`和`page_date`映射到`Page`结构体的`Title`、`Content`和`Date`：'
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Note our regular expression here: it''s just numeric, with one or more digits
    comprising what will be the `id` variable accessible from our handler.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意我们的正则表达式：它只是数字，由一个或多个数字组成，这些数字将成为我们处理程序中可访问的`id`变量。
- en: 'Remember that we talked about using the built-in GUID? We''ll get to that in
    a moment, but for now let''s look at the output of `local` `host:8080/page/1`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得我们谈到使用内置的GUID吗？我们马上就会谈到这个，但现在让我们看一下`local` `host:8080/page/1`的输出：
- en: '![Creating a MySQL database](img/B04294_03_01.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![创建MySQL数据库](img/B04294_03_01.jpg)'
- en: In the preceding example, we can see the blog entry that we had in our database.
    This is good, but obviously lacking in quite a few ways.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们可以看到我们在数据库中的博客条目。这很好，但显然在很多方面还是不够的。
- en: Using GUID for prettier URLs
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GUID创建更美观的URL
- en: Earlier in this chapter we talked about using the GUID to act as the URL identifier
    for all requests. Instead, we started by yielding to the numeric, thus automatically
    incrementing column in the table. That was for the sake of simplicity, but switching
    this to the alphanumeric GUID is trivial.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的前面，我们谈到使用GUID作为所有请求的URL标识符。相反，我们首先让步于数字，因此自动递增表中的列。这是为了简单起见，但将其切换为字母数字GUID是微不足道的。
- en: All we'll need to do is to switch our regular expression and change our resulting
    SQL query in our `ServePage` handler.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的就是切换我们的正则表达式，并在我们的`ServePage`处理程序中更改我们的SQL查询结果。
- en: 'If we only change our regular expression, our last URL''s page will still work:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只改变我们的正则表达式，我们上一个URL的页面仍然可以工作：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The page will of course still pass through to our handler. To remove any ambiguity,
    let''s assign a `guid` variable to the route:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，页面仍然会通过我们的处理程序。为了消除任何歧义，让我们为路由分配一个`guid`变量：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'After that, we change our resulting call and SQL:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在那之后，我们改变了我们的调用和SQL：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After doing this, accessing our page by the `/pages/hello-world` URL will result
    in the same page content we got by accessing it through `/pages/1`. The only real
    advantage is cosmetic, it creates a prettier URL that is more human-readable and
    potentially more useful for search engines:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这样做之后，通过`/pages/hello-world` URL访问我们的页面将导致与通过`/pages/1`访问它时得到的相同页面内容。唯一的真正优势是外观上更美观，它创建了一个更易读的URL，对搜索引擎可能更有用：
- en: '![Using GUID for prettier URLs](img/B04294_03_02.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![使用GUID创建更美观的URL](img/B04294_03_02.jpg)'
- en: Handling 404s
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理404s
- en: A very obvious problem with our preceding code is that it does not handle a
    scenario wherein an invalid ID (or GUID) is requested.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们前面的代码中一个非常明显的问题是，它没有处理请求无效ID（或GUID）的情况。
- en: 'As it is, a request to, say, `/page/999` will just result in a blank page for
    the user and in the background a **Couldn''t get page!** message, as shown in
    the following screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，对`/page/999`的请求将只会导致用户看到一个空白页面，而在后台会显示**无法获取页面！**的消息，如下面的屏幕截图所示：
- en: '![Handling 404s](img/B04294_03_04.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![处理404](img/B04294_03_04.jpg)'
- en: Resolving this is pretty simple by passing proper errors. Now, in the previous
    chapter we explored custom `404` pages and you can certainly implement one of
    those here, but the easiest way is to just return an HTTP status code when a post
    cannot be found and allow the browser to handle the presentation.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 通过传递适当的错误来解决这个问题是非常简单的。在上一章中，我们探讨了自定义的`404`页面，您当然可以在这里实现其中一个，但最简单的方法是当找不到帖子时只返回一个HTTP状态代码，并允许浏览器处理呈现。
- en: 'In our preceding code, we have an error handler that doesn''t do much except
    return the issue to our log file. Let''s make that more specific:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的代码中，我们有一个错误处理程序，除了将问题返回到我们的日志文件之外，没有做太多事情。让我们把它变得更具体：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You will see the output in the following screenshot. Again, it would be trivial
    to replace this with a custom `404` page, but for now we want to make sure we''re
    addressing the invalid requests by validating them against our database:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在以下屏幕截图中看到输出。再次强调，将这个页面替换为自定义的`404`页面是微不足道的，但现在我们要确保通过校验它们来处理无效的请求：
- en: '![Handling 404s](img/B04294_03_03.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![处理404](img/B04294_03_03.jpg)'
- en: Providing good error messages helps improve usability for both developers and
    other users. In addition, it can be beneficial for SEO, so it makes sense to use
    HTTP status codes as defined in HTTP standards.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 提供良好的错误消息有助于提高开发人员和其他用户的可用性。此外，对于SEO也有好处，因此使用HTTP标准中定义的HTTP状态代码是有意义的。
- en: Summary
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we've taken the leap from simply showing content to showing
    content that's maintained in a sustainable and maintainable way using a database.
    While this allows us to display dynamic data easily, it's just a core step toward
    a fully-functional application.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经从简单地显示内容转向了以可持续和可维护的方式使用数据库维护内容。虽然这使我们能够轻松显示动态数据，但这只是实现完全功能的应用程序的核心步骤。
- en: We've looked at creating a database and then retrieving the data from it to
    inject into route while keeping our query parameters sanitized to prevent SQL
    injections.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了如何创建数据库，然后从中检索数据并将其注入到路由中，同时保持我们的查询参数经过清理，以防止SQL注入。
- en: We also accounted for potential bad requests with invalid GUIDs, by returning
    *404 Not Found* statuses for any requested GUID that does not exist in our database.
    We also looked at requesting data by ID as well as the alphanumeric GUID.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还考虑了潜在的坏请求，比如无效的GUID，对于任何在我们的数据库中不存在的请求的GUID，我们返回*404 Not Found*状态。我们还查看了通过ID和字母数字GUID请求数据。
- en: This is just the start of our application, though.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这只是我们应用程序的开始。
- en: In [Chapter 4](ch04.html "Chapter 4. Using Templates"), *Using Templates*, we'll
    take the data that we've grabbed from MySQL (and Postgres) and apply some of Go's
    template language to them to give us more frontend flexibility.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](ch04.html "第4章。使用模板")中，*使用模板*，我们将使用从MySQL（和Postgres）中获取的数据，并应用一些Go模板语言，以便在前端上更灵活地使用它们。
- en: By the end of that chapter, we will have an application that allows for creation
    and deletion of pages directly from our application.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 到了那一章的结束，我们将拥有一个允许直接从我们的应用程序创建和删除页面的应用程序。
