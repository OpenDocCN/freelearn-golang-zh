- en: Chapter 7. Microservices and Communication
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 微服务和通信
- en: Our application is beginning to get a little more real now. In the previous
    chapter, we added some APIs and client-side interfaces to them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用现在开始变得更加真实。在上一章中，我们为它们添加了一些API和客户端界面。
- en: Microservices have become very hot in the last few years, primarily because
    they reduce the developmental and support weight of a very large or monolithic
    application. By breaking apart these monoliths, microservices enable a more agile
    and concurrent development. They can allow separate teams to work on separate
    parts of the application without worrying too much about conflicts, backwards
    compatibility issues, or stepping on the toes of other parts of the application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几年中，微服务变得非常热门，主要是因为它们减少了非常大或单片应用的开发和支持负担。通过拆分这些单片应用，微服务实现了更加敏捷和并发的开发。它们可以让不同团队在不用太担心冲突、向后兼容性问题或者干扰应用的其他部分的情况下，分别处理应用的不同部分。
- en: In this chapter, we'll introduce microservices and explore how Go can work within
    them, to enable them and even drive their central mechanisms.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍微服务，并探讨Go语言如何在其中发挥作用，以实现它们甚至驱动它们的核心机制。
- en: 'To sum this all up, we will be covering the following aspects:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，我们将涵盖以下方面：
- en: Introducing the microservice approach
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务方法介绍
- en: Pros and cons of utilizing microservices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用微服务的利弊
- en: Understanding the heart of microservices
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解微服务的核心
- en: Communicating between microservices
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务之间的通信
- en: Putting a message on the wire
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将消息发送到网络
- en: Reading from another service
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从另一个服务中读取
- en: Introducing the microservice approach
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务方法介绍
- en: If you've not yet encountered the term microservice or explored its meaning
    in depth, we can very quickly demystify it. Microservices are, in essence, independent
    functions of an overall application being broken apart and made accessible via
    some universally known protocol.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有遇到过微服务这个术语，或者没有深入探讨过它的含义，我们可以很快地揭开它的神秘面纱。微服务本质上是一个整体应用的独立功能，被拆分并通过一些通用的协议变得可访问。
- en: The microservice approach is, usually, utilized to break apart a very large
    monolithic application.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，微服务方法被用来拆分非常庞大的单片应用。
- en: Imagine your standard web application in the mid-2000s. When new functionality
    is needed, let's say a function that emails new users, it's added directly to
    the codebase and integrated with the rest of the application.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下2000年代中期的标准Web应用。当需要新功能时，比如给新用户发送电子邮件的功能，它会直接添加到代码库中，并与应用的其他部分集成。
- en: As the application grows, so does the necessary test coverage. So, it increases
    the potential for critical errors too. In this scenario, a critical error doesn't
    just bring down that component, in this case the e-mailing system; it takes down
    the entire application.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 随着应用的增长，必要的测试覆盖范围也在增加。因此，关键错误的潜在可能性也在增加。在这种情况下，一个关键错误不仅会导致该组件（比如电子邮件系统）崩溃，还会导致整个应用崩溃。
- en: This can be a nightmare to track down, patch, and re-deploy, and it's exactly
    the type of nightmare that microservices were designed to address.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是一场噩梦，追踪、修补和重新部署，这正是微服务旨在解决的问题。
- en: 'If the e-mailing part of the application is separated into its own app, it
    has a level of isolation and insulation that makes finding problems much easier.
    It also means that the entire stack doesn''t fall down just because someone introduced
    a critical error into one small part of the whole app, as shown in the following
    figure:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用的电子邮件部分被分离到自己的应用中，它就具有了一定程度的隔离和保护，这样找到问题就容易得多。这也意味着整个堆栈不会因为有人在整个应用的一个小部分引入了关键错误而崩溃，如下图所示：
- en: '![Introducing the microservice approach](img/B04294_07_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![微服务方法介绍](img/B04294_07_01.jpg)'
- en: Consider the following basic example architecture, where an application is split
    into four separate concepts, which represent their own applications in the microservices
    framework.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下基本的示例架构，一个应用被拆分成四个独立的概念，它们在微服务框架中代表着自己的应用。
- en: Once, every single piece existed in its own application; now they are broken
    apart into smaller and more manageable systems. Communication between the applications
    happens via a message queue utilizing REST API endpoints.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经，每个部分都存在于自己的应用中；现在它们被拆分成更小、更易管理的系统。应用之间的通信通过使用REST API端点的消息队列进行。
- en: Pros and cons of utilizing microservices
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用微服务的利弊
- en: If microservices seem like a panacea at this point, we should also note that
    this approach does not come without its own set of issues. Whether the tradeoff
    is worth it or not depends heavily on an overall organizational approach.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果微服务在这一点上看起来像灵丹妙药，我们也应该注意到，这种方法并非没有自己的问题。是否值得进行权衡取决于整体组织方法。
- en: As mentioned earlier, stability and error detection comprise a big production-level
    win for microservices. But if you think of the flip side of applications not breaking,
    it could also mean that issues go hidden for longer than they otherwise would.
    It's hard to ignore the entire site being down, but it could be hours before anyone
    realizes that e-mails have not been sent, unless some very robust logging is in
    place.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，稳定性和错误检测对于微服务来说是一个重大的生产级胜利。但如果考虑到应用不会崩溃的另一面，这也可能意味着问题会隐藏得比原本更长时间。整个站点崩溃是很难忽视的，但除非有非常健壮的日志记录，否则可能需要几个小时才能意识到电子邮件没有发送。
- en: But there are other big pros to microservices. For one, utilizing an external
    standard communication protocol (REST, for example) means that you're not locked
    into a single language.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 但微服务还有其他很大的优势。首先，利用外部标准通信协议（比如REST）意味着你不会被锁定在单一语言中。
- en: 'If, for example, some part of your application can be written better in Node
    than in Go, you can do that without having to rewrite an entire application. This
    is a frequent temptation for developers: rewriting the whole thing because the
    new and shiny language app or feature is introduced. Well, microservices safely
    enable this behavior—it allows a developer or a group of developers to try something
    without needing to go deeper than the specific function they wish to write.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你的应用程序的某个部分在Node中的编写比在Go中更好，你可以这样做，而不必重写整个应用程序。这是开发人员经常会面临的诱惑：重写整个应用程序，因为引入了新的和闪亮的语言应用程序或功能。好吧，微服务可以安全地实现这种行为——它允许开发人员或一组开发人员尝试某些东西，而无需深入到他们希望编写的特定功能之外。
- en: This, too, comes with a potentially negative scenario—since the application
    components are decoupled, so can the institutional knowledge around them be decoupled.
    Few developers may know enough to keep the service operating ideally. Other members
    of the group may lack the language knowledge to jump in and fix critical errors.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这也带来了一个潜在的负面情景——因为应用程序组件是解耦的，所以围绕它们的机构知识也可以是解耦的。很少有开发人员可能了解足够多以使服务运行良好。团队中的其他成员可能缺乏语言知识，无法介入并修复关键错误。
- en: One final, but important, consideration is that microservice architecture generally
    means a distributed environment by default. This leads us to the biggest immediate
    caveat, which is the fact that this situation almost always means that eventual
    consistency is the name of the game.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个，但很重要的考虑是，微服务架构通常意味着默认情况下是分布式环境。这导致我们面临的最大的即时警告是，这种情况几乎总是意味着最终一致性是游戏的名字。
- en: Since every message must depend on multiple external services, you're subject
    to several layers of latency to get a change enacted.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每条消息都必须依赖于多个外部服务，因此您需要经历多层延迟才能使更改生效。
- en: Understanding the heart of microservices
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解微服务的核心
- en: 'You might be wondering about one thing as you consider this system to design
    dissonant services that work in congress: what''s the communication platform?
    To answer this, we''ll say there is an easy answer and a more intricate one.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想到一件事，当你考虑这个系统来设计协调工作的不和谐服务时：通信平台是什么？为了回答这个问题，我们会说有一个简单的答案和一个更复杂的答案。
- en: The easy answer is REST. This is great news, as you're likely to be well versed
    in REST or you at least understand some portion of it from [Chapter 5](ch05.html
    "Chapter 5. Frontend Integration with RESTful APIs"), *Frontend Integration with
    RESTful APIs*. There we described the basics of API communication utilizing RESTful,
    stateless protocols and implementing HTTP verbs as actions.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的答案是REST。这是一个好消息，因为您很可能对REST非常熟悉，或者至少从[第5章](ch05.html "第5章。RESTful API的前端集成")中了解了一些内容，*RESTful
    API的前端集成*。在那里，我们描述了利用RESTful、无状态协议进行API通信的基础，并实现HTTP动词作为操作。
- en: 'Which leads us to the more complex answer: not everything in a large or involved
    application can operate on REST alone. Some things require state or at least some
    level of long-lasting consistency.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我们得出了更复杂的答案：在一个大型或复杂的应用程序中，并非所有内容都可以仅仅依靠REST来运行。有些事情需要状态，或者至少需要一定程度的持久一致性。
- en: For the latter problem, most microservice architectures are centered on a message
    queue as a platform for information sharing and dissemination. A message queue
    serves as a conduit to receive REST requests from one service and holds it until
    another service retrieves the request for further processing.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于后者的问题，大多数微服务架构都以消息队列作为信息共享和传播的平台。消息队列充当一个通道，接收来自一个服务的REST请求，并将其保存，直到另一个服务检索请求进行进一步处理。
- en: Communicating between microservices
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务之间的通信
- en: There are a number of approaches to communicate between microservices, as mentioned;
    REST endpoints provide a nice landing pad for messages. You may recall the preceding
    graphic, which shows a message queue as the central conduit between services.
    This is one of the most common ways to handle message passing and we'll use RabbitMQ
    to demonstrate this.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多微服务之间进行通信的方法，正如前面提到的；REST端点为消息提供了一个很好的着陆点。您可能还记得前面的图表，显示消息队列作为服务之间的中央通道。这是处理消息传递的最常见方式之一，我们将使用RabbitMQ来演示这一点。
- en: In this case, we'll show when new users register to an e-mail queue for the
    delivery of a message in our RabbitMQ installation, which will then be picked
    up by an emailing microservice.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将展示当新用户注册到我们的RabbitMQ安装中的电子邮件队列以便传递消息时，这些消息将被电子邮件微服务接收。
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can read more about RabbitMQ, which utilizes **Advanced Message Queuing
    Protocol** (**AMQP**) here: [https://www.rabbitmq.com/](https://www.rabbitmq.com/).'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里阅读有关RabbitMQ的更多信息，它使用**高级消息队列协议**（**AMQP**）：[https://www.rabbitmq.com/](https://www.rabbitmq.com/)。
- en: To install an AMQP client for Go, we'll recommend Sean Treadway's AMQP package.
    You can install it with a `go get` command. You can get it at [github.com/streadway/amqp](http://github.com/streadway/amqp)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要为Go安装AMQP客户端，我们建议使用Sean Treadway的AMQP包。您可以使用`go get`命令安装它。您可以在[github.com/streadway/amqp](http://github.com/streadway/amqp)上获取它
- en: Putting a message on the wire
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将消息发送到网络
- en: There are a lot of approaches to use RabbitMQ. For example, one allows multiple
    workers to accomplish the same thing, as a method for distributing works among
    available resources.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多使用RabbitMQ的方法。例如，一种方法允许多个工作者完成相同的工作，作为在可用资源之间分配工作的方法。
- en: Assuredly, as a system grows, it is likely to find use for that method. But
    in our tiny example, we want to segregate tasks based on a specific channel. Of
    course, this is not analogous to Go's concurrency channels, so keep that in mind
    when you read about this approach.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，随着系统的增长，很可能会发现对该方法的使用。但在我们的小例子中，我们希望根据特定通道对任务进行分离。当然，这与Go的并发通道不相似，所以在阅读这种方法时请记住这一点。
- en: But to explain this method, we may have separate exchanges to route our messages.
    In our example, we might have a log queue where messages are aggregated from all
    services into a single log location, or a cache expiration method that removes
    cached items from memory when they're deleted from the database.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 但是要解释这种方法，我们可能有单独的交换机来路由我们的消息。在我们的示例中，我们可能有一个日志队列，其中来自所有服务的消息被聚合到一个单一的日志位置，或者一个缓存过期方法，当它们从数据库中删除时，从内存中删除缓存项。
- en: In this example, though, we'll implement an e-mail queue that can take a message
    from any other service and use its contents to send an e-mail. This keeps all
    e-mail functionality outside of core and supportive services.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将实现一个电子邮件队列，可以从任何其他服务接收消息，并使用其内容发送电子邮件。这将使所有电子邮件功能都在核心和支持服务之外。
- en: Recall that in [Chapter 5](ch05.html "Chapter 5. Frontend Integration with RESTful
    APIs"), *Frontend Integration with RESTful APIs*, we added register and login
    methods. The one we're most interested in here is `RegisterPOST()`, where we allowed
    users to register to our site and then comment on our posts.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，在[第5章](ch05.html "第5章。与RESTful API集成的前端")中，*与RESTful API集成的前端*，我们添加了注册和登录方法。我们在这里最感兴趣的是`RegisterPOST()`，在这里我们允许用户注册我们的网站，然后评论我们的帖子。
- en: It's not uncommon for newly registered users to get an e-mail, either for confirmation
    of identity or for a simple welcome message. We'll do the latter here, but adding
    confirmation is trivial; it's just a matter of producing a key, delivering via
    e-mail and then enabling the user once the link is hit.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 新注册用户收到电子邮件并不罕见，无论是用于确认身份还是用于简单的欢迎消息。我们将在这里做后者，但添加确认是微不足道的；只是生成一个密钥，通过电子邮件发送，然后在链接被点击后启用用户。
- en: Since we're using an external package, the first thing we need to do is import
    it.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用了外部包，我们需要做的第一件事是导入它。
- en: 'Here''s how we do it:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的做法：
- en: '[PRE0]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that here we've included `text/template`, which is not strictly necessary
    since we have `html/template`, but we've noted here in case you wish to use it
    in a separate process. We have also included `bufio`, which we'll use as part
    of the same templating process.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里我们包含了`text/template`，这并不是严格必要的，因为我们有`html/template`，但我们在这里注意到，以防您希望在单独的进程中使用它。我们还包括了`bufio`，我们将在同一模板处理过程中使用它。
- en: 'For the sake of sending an e-mail, it will be helpful to have a message and
    a title for the e-mail, so let''s declare these. In a production environment,
    we''d probably have a separate language file, but we don''t have much else to
    show at this point:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了发送电子邮件，有一个消息和一个电子邮件的标题将是有帮助的，所以让我们声明这些。在生产环境中，我们可能会有一个单独的语言文件，但在这一点上我们没有其他东西可以展示：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: These simply represent the e-mail variables we need to utilize when we have
    a successful registration.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是我们在成功注册时需要利用的电子邮件变量。
- en: Since we're putting a message on the wire and yielding some responsibility for
    the application's logic to another service, for now we'll only need to ensure
    that our message has been received by RabbitMQ.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在将消息发送到线上，并将一些应用程序逻辑的责任委托给另一个服务，所以现在我们只需要确保我们的消息已被RabbitMQ接收。
- en: Next, we'll need to connect to the queue, which we can pass either by reference
    or reconnect with each message. Generally, you'll want to keep the connection
    in the queue for a long time, but you may choose to reconnect and close your connection
    each time while testing.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要连接到队列，我们可以通过引用或重新连接每条消息来传递。通常，您会希望将连接保持在队列中很长时间，但在测试时，您可能选择重新连接和关闭每次连接。
- en: 'In order to do so, we''ll add our MQ host information to our constants:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这样做，我们将把我们的MQ主机信息添加到我们的常量中：
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When we create a connection, we''ll use the somewhat familiar `TCP Dial()`
    method, which returns an MQ connection. Here is our function for connecting:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建一个连接时，我们将使用一种相对熟悉的`TCP Dial()`方法，它返回一个MQ连接。这是我们用于连接的函数：
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We can choose to pass the connection by reference or sustain it as a global
    with all applicable caveats considered here.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以选择通过引用传递连接，或者将其作为全局连接，并考虑所有适用的注意事项。
- en: Tip
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can read a bit more about RabbitMQ connections and detecting disrupted connections
    at [https://www.rabbitmq.com/heartbeats.html](https://www.rabbitmq.com/heartbeats.html)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://www.rabbitmq.com/heartbeats.html](https://www.rabbitmq.com/heartbeats.html)了解更多关于RabbitMQ连接和检测中断连接的信息
- en: Technically, any producer (in this case our application) doesn't push messages
    to the queue; rather, it pushes them to the exchange. RabbitMQ allows you to find
    exchanges with the `rabbitmqctl` `list_exchanges` command (rather than `list_queues`).
    Here, we're using an empty exchange, which is totally valid. The distinction between
    a queue and an exchange is non-trivial; the latter is responsible for having defined
    the rules surrounding a message, en route to a queue or queues.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，任何生产者（在本例中是我们的应用程序）都不会将消息推送到队列，而是将它们推送到交换机。RabbitMQ允许您使用`rabbitmqctl`
    `list_exchanges`命令找到交换机（而不是`list_queues`）。在这里，我们使用一个空的交换机，这是完全有效的。队列和交换机之间的区别并不是微不足道的；后者负责定义围绕消息的规则，以便传递到一个或多个队列。
- en: 'Inside our `RegisterPOST()`, let''s send a JSON-encoded message when a successful
    registration takes place. We''ll want a very simple `struct` to maintain the data
    we''ll need:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`RegisterPOST()`中，当成功注册时，让我们发送一个JSON编码的消息。我们需要一个非常简单的`struct`来维护我们需要的数据：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now we''ll create a new `RegistrationData struct` if, and only if, the registration
    process succeeds:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果且仅如果注册过程成功，我们将创建一个新的`RegistrationData struct`：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And finally, we''ll need the function that actually sends our data, `MQPublish()`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要实际发送我们的数据的函数`MQPublish()`：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Reading from another service
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从另一个服务中读取
- en: Now that we've sent a message to our message queue in our app, let's use another
    microservice to pluck that from the queue on the other end.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在我们的应用程序中向消息队列发送了一条消息，让我们使用另一个微服务来从队列的另一端取出它。
- en: 'To demonstrate the flexibility of a microservice design, our secondary service
    will be a Python script that connects to the MQ and listens for messages on the
    e-mail queue, when it finds one. It will parse the message and send an e-mail.
    Optionally, it could publish a status message back on the queue or log it, but
    we won''t go down that road for now:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示微服务设计的灵活性，我们的次要服务将是一个连接到消息队列并监听电子邮件队列消息的Python脚本。当它找到一条消息时，它将解析消息并发送电子邮件。可选地，它可以将状态消息发布回队列或记录下来，但目前我们不会走这条路：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Summary
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at experimenting with utilizing microservices as
    a way to dissect your app into separate domains of responsibility. In this example,
    we delegated the e-mail aspect of our application to another service written in
    Python.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们试图通过利用微服务来将应用程序分解为不同的责任领域。在这个例子中，我们将我们应用程序的电子邮件方面委托给了另一个用Python编写的服务。
- en: We did this to utilize the concept of microservices or interconnected smaller
    applications as callable networked functions. This ethos is driving a large part
    of the Web of late and has myriad benefits and drawbacks.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这样做是为了利用微服务或互连的较小应用作为可调用的网络化功能的概念。这种理念最近驱动着网络的很大一部分，并具有无数的好处和缺点。
- en: In doing this, we implemented a message queue, which operates as the backbone
    of our communications system, allowing each component to speak to the other in
    a reliable and repeatable way. In this case, we used a Python application to read
    messages sent from our Go application across RabbitMQ and take that e-mail data
    and process it.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们实现了一个消息队列，它作为我们通信系统的支柱，允许每个组件以可靠和可重复的方式与其他组件交流。在这种情况下，我们使用了一个Python应用程序来读取消息，这些消息是从我们的Go应用程序通过RabbitMQ发送的，并且处理了那些电子邮件数据。
- en: In [Chapter 8](ch08.html "Chapter 8. Logging and Testing"), *Logging and Testing*,
    we'll focus on logging and testing, which we can use to extend the microservices
    concept so that we can recover from errors and understand where things might go
    awry in the process.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](ch08.html "第8章. 日志和测试")*日志和测试*中，我们将专注于日志记录和测试，这可以用来扩展微服务的概念，以便我们可以从错误中恢复，并了解在过程中可能出现问题的地方。
