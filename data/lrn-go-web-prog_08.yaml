- en: Chapter 8. Logging and Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。日志和测试
- en: In the previous chapter, we discussed delegating application responsibility
    to networked services accessible by API and intra-process communication and handled
    by a message queue.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了将应用程序责任委托给可通过API访问的网络服务和由消息队列处理的进程内通信。
- en: This approach mimics an emerging trend of breaking large monolithic applications
    into smaller chunks; thus, allowing developers to leverage dissonant languages,
    frameworks, and designs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法模仿了将大型单片应用程序分解为较小块的新兴趋势；因此，允许开发人员利用不同的语言、框架和设计。
- en: We listed a few upsides and downsides of this approach; while most of the upsides
    dealt with keeping the development agile and lean while preventing catastrophic
    and cascading errors that might bring down an entire application, a large downside
    is the fragility of each individual component. For example, if our e-mail microservice
    had bad code as a part of a large application, the error would make itself known
    quickly because it would almost assuredly have a direct and detectable impact
    on another component. But by isolating processes as part of microservices, we
    also isolate their state and status.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们列举了这种方法的一些优点和缺点；大多数优点涉及保持开发的敏捷和精益，同时防止可能导致整个应用程序崩溃和级联错误的灾难性错误，一个很大的缺点是每个单独组件的脆弱性。例如，如果我们的电子邮件微服务在大型应用程序中有糟糕的代码，错误会很快显现出来，因为它几乎肯定会直接对另一个组件产生可检测的影响。但通过将进程隔离为微服务的一部分，我们也隔离了它们的状态和状态。
- en: This is where the contents of this chapter come into play—the ability to test
    and log within a Go application is the strength of the language's design. By utilizing
    these in our application, it grows to include more microservices; due to which
    we can be in a better position to keep track of any issues with a cog in the system
    without imposing too much additional complexity to the overall application.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是本章内容发挥作用的地方——在Go应用程序中进行测试和记录的能力是该语言设计的优势。通过在我们的应用程序中利用这些功能，它可以扩展到包括更多的微服务；因此，我们可以更好地跟踪系统中任何问题的齿轮，而不会给整个应用程序增加太多额外的复杂性。
- en: 'In this chapter we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introducing logging in Go
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引入Go中的日志记录
- en: Logging to IO
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IO日志记录
- en: Formatting your output
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 格式化你的输出
- en: Using panics and fatal errors
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用panic和致命错误
- en: Introducing testing in Go
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引入Go中的测试
- en: Introducing logging in Go
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入Go中的日志记录
- en: Go comes with innumerable ways to display output to `stdout`, most commonly
    the `fmt` package's `Print` and `Println`. In fact, you can eschew the `fmt` package
    entirely and just use `print()` or `println()`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Go提供了无数种方法来将输出显示到`stdout`，最常见的是`fmt`包的`Print`和`Println`。事实上，你可以完全放弃`fmt`包，只使用`print()`或`println()`。
- en: In mature applications, you're unlikely to see too many of these, because simply
    displaying an output without having the capability to store that somewhere for
    debugging or later analysis is rare and lacks much utility. Even if you're just
    outputting minor feedback to a user, it often makes sense to do so and keep the
    ability to save that to a file or elsewhere, this is where the `log` package comes
    into play. Most of the examples in this book have used `log.Println` in lieu of
    `fmt.Println` for this very reason. It's trivial to make that change if, at some
    point, you choose to supplant `stdout` with some other (or additional) `io.Writer`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在成熟的应用程序中，你不太可能看到太多这样的情况，因为仅仅显示输出而没有能力将其存储在某个地方以进行调试或后续分析是罕见的，也缺乏实用性。即使你只是向用户输出一些反馈，通常也有意义这样做，并保留将其保存到文件或其他地方的能力，这就是`log`包发挥作用的地方。本书中的大多数示例出于这个原因使用了`log.Println`而不是`fmt.Println`。如果你在某个时候选择用其他（或附加）`io.Writer`替换`stdout`，这种更改是微不足道的。
- en: Logging to IO
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记录到IO
- en: So far we've been logging in to `stdout`, but you can utilize any `io.Writer`
    to ingest the log data. In fact, you can use multiple `io.Writers` if you want
    the output to be routed to more than one place.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在将日志记录到`stdout`，但你可以利用任何`io.Writer`来接收日志数据。事实上，如果你希望输出路由到多个地方，你可以使用多个`io.Writer`。
- en: Multiple loggers
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多个记录器
- en: Most mature applications will write to more than one log file to delineate between
    the various types of messages that need to be retained.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数成熟的应用程序将写入多个日志文件，以区分需要保留的各种类型的消息。
- en: The most common use case for this is found in web server. They typically keep
    an `access.log` and an `error.log` file to allow the analysis of all successful
    requests; however, they also maintain separate logging of different types of messages.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这种最常见的用例在Web服务器中找到。它们通常保留一个`access.log`和一个`error.log`文件，以允许分析所有成功的请求；然而，它们还保留了不同类型消息的单独记录。
- en: 'In the following example, we modify our logging concept to include errors as
    well as warnings:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们修改了我们的日志记录概念，包括错误和警告。
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can take this approach to store all sorts of information. For example, if
    we wanted to store registration errors, we can create a specific registration
    error logger and allow a similar approach if we encounter an error in that process
    as shown:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以采用这种方法来存储各种信息。例如，如果我们想要存储注册错误，我们可以创建一个特定的注册错误记录器，并在遇到该过程中的错误时允许类似的方法。
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Formatting your output
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 格式化你的输出
- en: When instantiating a new `Logger`, you can pass a few useful parameters and/or
    helper strings to help define and clarify the output. Each log entry can be prepended
    with a string, which can be helpful while reviewing multiple types of log entries.
    You can also define the type of date and time formatting that you would like on
    each entry.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在实例化新的`Logger`时，你可以传递一些有用的参数和/或辅助字符串，以帮助定义和澄清输出。每个日志条目都可以以一个字符串开头，这在审查多种类型的日志条目时可能会有所帮助。你还可以定义你希望在每个条目上的日期和时间格式。
- en: 'To create a custom formatted log, just invoke the `New()` function with an
    `io.Writer` as shown:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建自定义格式的日志，只需调用`New()`函数，并使用`io.Writer`，如下所示：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This not only allows us to utilize `stdout` with our `log.Println` function
    but also store more significant messages in a log file called `warnings.log`.
    Using the `os.O_RDWR|os.O_APPEND` constants allow us to write to the file and
    use an append file mode, which is useful for logging.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这不仅允许我们使用`log.Println`函数与我们的`stdout`，还允许我们在名为`warnings.log`的日志文件中存储更重要的消息。使用`os.O_RDWR|os.O_APPEND`常量允许我们写入文件并使用追加文件模式，这对于日志记录很有用。
- en: Using panics and fatal errors
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用panic和致命错误
- en: In addition to simply storing messages from your applications, you can create
    application panics and fatal errors that will prevent the application from continuing.
    This is critical for any use case where errors that do not halt execution lead
    to potential security issues, data loss, or any other unintended consequence.
    These types of mechanisms are generally relegated to the most critical of errors.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 除了简单地存储应用程序的消息之外，您还可以创建应用程序的panic和致命错误，这将阻止应用程序继续运行。这对于任何错误不会导致执行停止的用例至关重要，因为这可能会导致潜在的安全问题、数据丢失或任何其他意外后果。这些类型的机制通常被限制在最关键的错误上。
- en: When to use a `panic()` method is not always clear, but in practice this should
    be relegated to errors that are unrecoverable. An unrecoverable error typically
    means the one where state becomes ambiguous or cannot otherwise be guaranteed.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 何时使用`panic()`方法并不总是清楚的，但在实践中，这应该被限制在不可恢复的错误上。不可恢复的错误通常意味着状态变得模糊或无法保证。
- en: For example, operations on acquired database records that fail to return expected
    results from the database may be considered unrecoverable because future operations
    might occur on outdated or missing data.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对从数据库获取的记录进行操作，如果未能从数据库返回预期的结果，则可能被视为不可恢复的，因为未来的操作可能发生在过时或丢失的数据上。
- en: 'In the following example, we can implement a panic where we can''t create a
    new user; this is important so that we don''t attempt to redirect or move forward
    with any further creation steps:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，我们可以实现一个panic，我们无法创建一个新用户；这很重要，这样我们就不会尝试重定向或继续进行任何进一步的创建步骤：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Note that if you want to force this error, you can just make an intentional
    MySQL error in your query:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您想强制出现此错误，您可以在查询中故意制造一个MySQL错误：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When this error is triggered you will find this in your respective log file
    or `stdout`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当触发此错误时，您将在相应的日志文件或`stdout`中找到它：
- en: '![Using panics and fatal errors](img/B04294_08_01.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![使用panic和致命错误](img/B04294_08_01.jpg)'
- en: In the preceding example, we utilize the panic as a hard stop, one that will
    prevent further execution that could lead to further errors and/or data inconsistency.
    If it need not be a hard stop, utilizing the `recover()` function allows you to
    re-enter application flow once the problem has been addressed or mitigated.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们利用panic作为一个硬性停止，这将阻止进一步的执行，从而可能导致进一步的错误和/或数据不一致。如果不需要硬性停止，使用`recover()`函数允许您在问题得到解决或减轻后重新进入应用程序流程。
- en: Introducing testing in Go
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Go中引入测试
- en: Go comes packaged with a great deal of wonderful tools for making sure your
    code is clean, well-formatted, free of race conditions, and so on. From `go vet`
    to `go fmt`, many of the helper applications that you need to install separately
    in other languages come as a package with Go.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Go打包了大量出色的工具，用于确保您的代码干净、格式良好、没有竞争条件等。从`go vet`到`go fmt`，许多在其他语言中需要单独安装的辅助应用程序都作为Go的一部分打包了。
- en: Testing is a critical step for software-development. Unit testing and test-driven
    development helps find bugs that aren't immediately apparent, especially to the
    developer. Often we're too close and too familiar with the application to make
    the types of usability mistakes that can invoke the otherwise undiscovered errors.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是软件开发的关键步骤。单元测试和测试驱动开发有助于发现对开发人员来说并不立即显而易见的错误。通常我们对应用程序太熟悉，以至于无法发现可能引发其他未发现的错误的可用性错误。
- en: Go's testing package allows unit testing of actual functionality as well as
    making certain that all of the dependencies (network, file system locations) are
    available; testing in disparate environments allows you to discover these errors
    before users do.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Go的测试包允许对实际功能进行单元测试，同时确保所有依赖项（网络、文件系统位置）都可用；在不同的环境中进行测试可以让您在用户之前发现这些错误。
- en: 'If you''re already utilizing unit tests, Go''s implementation will be both
    familiar and pleasant to get started in:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经在使用单元测试，Go的实现将会非常熟悉和愉快：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This is saved as `example.go`. Next, create another Go file that tests this
    square root functionality, with the following code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这保存为`example.go`。接下来，创建另一个Go文件，测试这个平方根功能，代码如下：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can run this by entering the directory and simply typing `go test -v`.
    As expected, this passes given our test input:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过进入目录并简单地输入`go test -v`来运行此测试。如预期的那样，给定我们的测试输入，这是通过的：
- en: '![Introducing testing in Go](img/B04294_08_02.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![在Go中引入测试](img/B04294_08_02.jpg)'
- en: 'This example is obviously trivial, but to demonstrate what you will see if
    your tests fail, let''s change our `Square()` function as shown:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子显然是微不足道的，但为了演示如果您的测试失败会看到什么，让我们修改我们的`Square()`函数如下：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And again after running the test, we get:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行测试后，我们得到：
- en: '![Introducing testing in Go](img/B04294_08_03.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![在Go中引入测试](img/B04294_08_03.jpg)'
- en: Running command-line tests against command-line applications is different than
    interacting with the Web. Our application being the one that includes standard
    HTML endpoints as well as API endpoints; testing it requires more nuance than
    the approach we used earlier.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对命令行应用程序进行命令行测试与与Web交互是不同的。我们的应用程序包括标准的HTML端点以及API端点；测试它需要比我们之前使用的方法更多的细微差别。
- en: Luckily, Go also includes a package for specifically testing the results of
    an HTTP application, `net/http/httptest`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Go还包括一个专门用于测试HTTP应用程序结果的包，`net/http/httptest`。
- en: Unlike the preceding example, `httptest` lets us evaluate a number of pieces
    of metadata returned from our individual functions, which act as handlers in the
    HTTP version of unit tests.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的例子不同，`httptest`让我们评估从我们的各个函数返回的一些元数据，这些函数在HTTP版本的单元测试中充当处理程序。
- en: So let's look at a simple way of evaluating what our HTTP server might be producing,
    by generating a quick endpoint that simply returns the day of the year.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们来看一种简单的评估我们的HTTP服务器可能产生的内容的方法，通过生成一个快速端点，它简单地返回一年中的日期。
- en: 'To begin, we''ll add another endpoint to our API. Lets separate this handler
    example into its own application to isolate its impact:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将向我们的API添加另一个端点。让我们将这个处理程序示例分离成自己的应用程序，以便隔离其影响：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This will simply return the day (1-366) of the year through the HTTP endpoint
    `/test`. So how do we test this?
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这将简单地通过HTTP端点`/test`返回一年中的日期（1-366）。那么我们如何测试这个呢？
- en: 'First, we need a new file specifically for testing. When it comes to how much
    test coverage you''ll need to hit, which is often helpful to the developer or
    organization—ideally we''d want to hit every endpoint and method to get a fairly
    comprehensive coverage. For this example, we''ll make sure that one of our API
    endpoints returns a proper status code and that a `GET` request returns what we
    expect to see in the development:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要一个专门用于测试的新文件。当涉及到需要达到多少测试覆盖率时，这通常对开发人员或组织很有帮助，理想情况下，我们希望覆盖每个端点和方法，以获得相当全面的覆盖。在这个例子中，我们将确保我们的一个API端点返回一个正确的状态码，以及一个`GET`请求返回我们在开发中期望看到的内容：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now, we can implement this in our actual application by making certain that
    our endpoints pass (200) or fail (404) and return the text we expect them to return.
    We could also automate adding new content and validating it, and you should be
    equipped to take that on after these examples.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过确保我们的端点通过（200）或失败（404）并返回我们期望的文本来在我们的实际应用程序中实现这一点。我们还可以自动添加新内容并对其进行验证，通过这些示例后，您应该有能力承担这一任务。
- en: 'Given the fact that we have a hello-world endpoint, let''s write a quick test
    that validates our response from the endpoint and have a look at how we can get
    a proper response in a `test.go` file:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于我们有一个hello-world端点，让我们编写一个快速测试，验证我们从端点得到的响应，并看看我们如何在`test.go`文件中获得一个正确的响应：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here we can test that we're getting the status code we expect, which is not
    necessarily a trivial test despite its simplicity. In practice, we'd probably
    also create one that should fail and another test that checks to make sure that
    we get the HTTP response we expect. But this sets the stage for more complex test
    suites, such as sanity tests or deployment tests. For example, we might generate
    development-only pages that generate HTML content from templates and check the
    output to ensure our page access and our template parsing work as we expect.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以测试我们是否得到了我们期望的状态码，尽管它很简单，但这并不一定是一个微不足道的测试。实际上，我们可能还会创建一个应该失败的测试，以及另一个检查我们是否得到了我们期望的HTTP响应的测试。但这为更复杂的测试套件，比如健全性测试或部署测试，奠定了基础。例如，我们可能会生成仅供开发使用的页面，从模板生成HTML内容，并检查输出以确保我们的页面访问和模板解析按照我们的期望工作。
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Read more about the testing with http and the httptest package at [https://golang.org/pkg/net/http/httptest/](https://golang.org/pkg/net/http/httptest/)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://golang.org/pkg/net/http/httptest/](https://golang.org/pkg/net/http/httptest/)上阅读有关使用http和httptest包进行测试的更多信息
- en: Summary
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Simply building an application is not even half the battle and user-testing
    as a developer introduces a huge gap in testing strategy. Test coverage is a critical
    weapon when it comes to finding bugs, before they ever manifest to an end user.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 简单地构建一个应用程序甚至不到一半的战斗，作为开发人员进行用户测试引入了测试策略中的巨大差距。测试覆盖率是一种关键武器，当我们发现错误之前，它可以帮助我们找到错误。
- en: Luckily, Go provides all the tools necessary to implement automated unit tests
    and the logging architecture necessary to support it.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Go提供了实现自动化单元测试所需的所有工具，以及支持它所需的日志记录架构。
- en: In this chapter, we looked at both loggers and testing options. By producing
    multiple loggers for different messages, we were able separate warnings from errors
    brought about by internal application failures.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了日志记录器和测试选项。通过为不同的消息生成多个记录器，我们能够将由内部应用程序故障引起的警告与错误分开。
- en: We then examined unit testing using the test and the `httptest` packages to
    automatically check our application and keep it current by testing for potential
    breaking changes.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用测试和`httptest`包来进行单元测试，自动检查我们的应用程序并通过测试潜在的破坏性更改来保持其当前状态。
- en: In [Chapter 9](ch09.html "Chapter 9. Security"), *Security*, we'll look at implementing
    security more thoroughly; from better TLS/SSL, to preventing injection and man-in-the-middle
    and cross-site request forgery attacks in our application.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第9章](ch09.html "第9章. 安全")*安全*中，我们将更彻底地研究实施安全性；从更好的TLS/SSL到防止注入和中间人和跨站点请求伪造攻击。
