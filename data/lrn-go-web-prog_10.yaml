- en: Chapter 10. Caching, Proxies and Improved Performance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。缓存、代理和性能改进
- en: We have covered a great deal about the web application that you'll need to connect
    to data sources, render templates, utilize SSL/TLS, build APIs for single-page
    applications, and so on.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经涵盖了大量关于Web应用程序的内容，您需要连接数据源，渲染模板，利用SSL/TLS，为单页应用构建API等等。
- en: While the fundamentals are clear, you may find that putting an application built
    on these guidelines into production would lead to some quick problems, particularly
    under heavy load.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管基本原理很清楚，但您可能会发现，根据这些准则构建的应用程序投入生产后可能会迅速出现一些问题，特别是在负载较重的情况下。
- en: We've implemented some of the best security practices in the last chapter by
    addressing some of the most common security issues in web applications. Let's
    do the same here in this chapter, by applying the best practices against some
    of the biggest issues of performance and speed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们通过解决Web应用程序中一些最常见的安全问题，实施了一些最佳安全实践。让我们在本章中也做同样的事情，通过应用最佳实践来解决一些性能和速度方面的最大问题。
- en: To do this, we'll look at some of the most common bottlenecks in the pipeline
    and see how we can reduce these to make our application as performant as possible
    in production.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们将查看管道中一些最常见的瓶颈，并看看我们如何减少这些瓶颈，使我们的应用在生产中尽可能高效。
- en: Specifically, we'll be identifying those bottlenecks and then looking to reverse
    proxies and load balancing, implementing caching into our application, utilizing
    **SPDY**, and look at how to use managed cloud services to augment our speed initiatives
    by reducing the number of requests that get to our application.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们将确定这些瓶颈，然后寻找反向代理和负载平衡，将缓存实施到我们的应用程序中，利用**SPDY**，以及了解如何使用托管云服务来通过减少到达我们应用程序的请求数来增强我们的速度计划。
- en: By this chapter's end, we hope to produce tools that can help any Go application
    squeeze every bit of performance out of our environment.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章的结束，我们希望能够提供工具，帮助任何Go应用程序充分利用我们的环境，发挥最佳性能。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Identifying bottlenecks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别瓶颈
- en: Implementing reverse proxies
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施反向代理
- en: Implementing caching strategies
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施缓存策略
- en: Implementing HTTP/2
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施HTTP/2
- en: Identifying bottlenecks
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别瓶颈
- en: To simplify things a little, there are two types of bottlenecks for your application,
    those caused by development and programming deficiencies and those inherent to
    an underlying software or infrastructure limitation.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化事情，对于您的应用程序，有两种类型的瓶颈，一种是由开发和编程缺陷引起的，另一种是由底层软件或基础设施限制引起的。
- en: The answer to the former is simple, identify the poor design and fix it. Putting
    patches around bad code can hide the security vulnerabilities or delay even bigger
    performance issues from being discovered in a timely manner.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于前者的答案很简单，找出糟糕的设计并修复它。在糟糕的代码周围打补丁可能会隐藏安全漏洞，或者延迟更大的性能问题被及时发现。
- en: Sometimes these issues are born from a lack of stress testing; a code that is
    performant locally is not guaranteed to scale without applying artificial load.
    A lack of this testing sometimes leads to surprise downtime in production.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，这些问题源于缺乏压力测试；在本地性能良好的代码并不保证在不施加人为负载的情况下能够扩展。缺乏这种测试有时会导致生产中出现意外的停机时间。
- en: 'However, ignoring bad code as a source of issues, lets take a look at some
    of the other frequent offenders:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，忽略糟糕的代码作为问题的根源，让我们来看看一些其他常见的问题：
- en: Disk I/O
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 磁盘I/O
- en: Database access
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库访问
- en: High memory/CPU usage
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高内存/CPU使用率
- en: Lack of concurrency support
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺乏并发支持
- en: There are of course hundreds of offenders, such as network issues, garbage collection
    overhead in some applications, not compressing payloads/headers, non-database
    deadlocks, and so on.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当然还有数百种问题，例如网络问题、某些应用程序中的垃圾收集开销、不压缩有效载荷/标头、非数据库死锁等等。
- en: High memory and CPU usage is most often the result rather than the cause, but
    a lot of the other causes are specific to certain languages or environments.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 高内存和CPU使用率往往是结果而不是原因，但许多其他原因是特定于某些语言或环境的。
- en: For our application, we could have a weak point at the database layer. Since
    we're doing no caching, every request will hit the database multiple times. ACID-compliant
    databases (such as MySQL/PostgreSQL) are notorious for failing under loads, which
    would not be a problem on the same hardware for less strict key/value stores and
    NoSQL solutions. The cost of database consistency contributes heavily to this
    and it's one of the trade-offs of choosing a traditional relational database.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的应用程序，数据库层可能是一个薄弱点。由于我们没有进行缓存，每个请求都会多次命中数据库。ACID兼容的数据库（如MySQL/PostgreSQL）因负载而崩溃而臭名昭著，而对于不那么严格的键/值存储和NoSQL解决方案来说，在相同硬件上不会有问题。数据库一致性的成本对此有很大的影响，这是选择传统关系数据库的权衡之一。
- en: Implementing reverse proxies
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施反向代理
- en: As we know by now, unlike a lot of languages, Go comes with a complete and mature
    web server platform with `net/http`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们现在所知道的，与许多语言不同，Go配备了完整和成熟的Web服务器平台，其中包括`net/http`。
- en: Of late, some other languages have been shipped with small toy servers intended
    for local development, but they are not intended for production. In fact, many
    specifically warn against it. Some common ones are WEBrick for Ruby, Python's
    SimpleHTTPServer, and PHP's -S. Most of these suffer from concurrency issues that
    prevent them from being viable choices in production.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，一些其他语言已经配备了用于本地开发的小型玩具服务器，但它们并不适用于生产。事实上，许多明确警告不要这样做。一些常见的是Ruby的WEBrick，Python的SimpleHTTPServer和PHP的-S。其中大多数都存在并发问题，导致它们无法成为生产中的可行选择。
- en: Go's `net/http` is different; by default, it handles these issues with aplomb
    out of the box. Obviously, much of this depends on the underlying hardware, but
    in a pinch you could use it natively with success. Many sites are using `net/http`
    to serve non-trivial amounts of traffic.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Go的`net/http`是不同的；默认情况下，它可以轻松处理这些问题。显然，这在很大程度上取决于底层硬件，但在紧要关头，您可以成功地原生使用它。许多网站正在使用`net/http`来提供大量的流量。
- en: 'But even strong underlying web servers have some inherent limitations:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 但即使是强大的基础web服务器也有一些固有的局限性：
- en: They lack failover or distributed options
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们缺乏故障转移或分布式选项
- en: They have limited caching options upstream
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们在上游具有有限的缓存选项
- en: They cannot easily load balance the incoming traffic
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们不能轻易负载平衡传入的流量
- en: They cannot easily concentrate on centralized logging
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们不能轻易集中日志记录
- en: This is where a reverse proxy comes into play. A reverse proxy accepts all the
    incoming traffic on behalf of one or more servers and distributes it by applying
    the preceding (and other) options and benefits. Another example is URL rewriting,
    which is more applicable for underlying services that may not have built-in routing
    and URL rewriting.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是反向代理的作用。反向代理代表一个或多个服务器接受所有传入的流量，并通过应用前述（和其他）选项和优势来分发它。另一个例子是URL重写，这更适用于可能没有内置路由和URL重写的基础服务。
- en: There are two big advantages of throwing a simple reverse proxy in front of
    your web server, such as Go; they are caching options and the ability to serve
    static content without hitting the underlying application.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的web服务器（如Go）前放置一个简单的反向代理有两个重要的优势：缓存选项和无需访问基础应用程序即可提供静态内容的能力。
- en: 'One of the most popular options for reverse proxying sites is Nginx (pronounced
    Engine-X). While Nginx is a web server itself, it gained acclaim early on for
    being lightweight with a focus on concurrency. It quickly became the frontend
    du jour for front line defense of a web application in front of an otherwise slower
    or heavier web server, such as Apache. The situation has changed a bit in recent
    years, as Apache has caught up in terms of concurrency options and utilization
    of alternative approaches to events and threading. The following is an example
    of a reverse proxy Nginx configuration:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 反向代理站点的最受欢迎的选项之一是Nginx（发音为Engine-X）。虽然Nginx本身是一个web服务器，但它早期因轻量级和并发性而广受赞誉。它很快成为了前端应用程序在其他较慢或较重的web服务器（如Apache）前的首要防御。近年来情况有所改变，因为Apache在并发选项和利用替代事件和线程的方面已经赶上了。以下是一个反向代理Nginx配置的示例：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'With this in place, make sure that your Go app is running on port `8080` and
    restart Nginx. Requests to `http//:port 80` will be served through Nginx as a
    reverse proxy to your application. You can check this through viewing headers
    or in the **Developer tools** in your browser:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，请确保您的Go应用程序正在端口`8080`上运行，并重新启动Nginx。对`http//:port 80`的请求将通过Nginx作为反向代理传递到您的应用程序。您可以通过查看标头或在浏览器的**开发人员工具**中进行检查。
- en: '![Implementing reverse proxies](img/B04294_10_01.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![实施反向代理](img/B04294_10_01.jpg)'
- en: Remember that we wish to support TLS/SSL whenever possible, but providing a
    reverse proxy here is just a matter of changing the ports. Our application should
    run on another port, likely a nearby port for clarity and then our reverse proxy
    would run on port `443`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们希望尽可能支持TLS/SSL，但在这里提供反向代理只是改变端口的问题。我们的应用程序应该在另一个端口上运行，可能是一个附近的端口，以便清晰，然后我们的反向代理将在端口`443`上运行。
- en: 'As a reminder, any port is legal for HTTP or HTTPS. However, when a port is
    not specified, the browsers automatically direct to `443` for secure connections.
    It''s as simple as modifying the `nginx.conf` and our app''s constant:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒一下，任何端口都可以用于HTTP或HTTPS。但是，当未指定端口时，浏览器会自动将其定向到`443`以进行安全连接。只需修改`nginx.conf`和我们应用程序的常量即可。
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Lets see how to modify our application as shown in the following code:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何修改我们的应用程序，如下面的代码所示：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This allows us to pass through SSL requests with a frontend proxy.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够通过前端代理传递SSL请求。
- en: Tip
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: On many Linux distributions, you'll need SUDO or root privileges to use ports
    below 1000.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多Linux发行版中，您需要SUDO或root权限才能使用1000以下的端口。
- en: Implementing caching strategies
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施缓存策略
- en: There are a number of ways to decide when to create and when to expire the cache
    items, so we'll look at one of the easier and faster methods for doing so. But
    if you are interested in developing this further, you might consider other caching
    strategies; some of which can provide efficiencies for resource usage and performance.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以决定何时创建和何时过期缓存项，因此我们将看一种更简单更快的方法。但是，如果您有兴趣进一步开发，您可能会考虑其他缓存策略；其中一些可以提供资源使用效率和性能。
- en: Using Least Recently Used
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用最近最少使用
- en: One common tactic to maintain cache stability within allocated resources (disk
    space, memory) is the **Least Recently Used** (**LRU**) system for cache expiration.
    In this model, utilizing information about the last cache access time (creation
    or update) and the cache management system can remove the oldest entry in the
    list.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在分配的资源（磁盘空间、内存）内保持缓存稳定性的一种常见策略是**最近最少使用**（**LRU**）系统用于缓存过期。在这种模型中，利用有关最后缓存访问时间（创建或更新）的信息，缓存管理系统可以移除列表中最老的条目。
- en: This has a number of benefits for performance. First, if we assume that the
    most recently created/updated cache entries are for entries that are presently
    the most popular, we can remove entries that are not being accessed much sooner;
    in order to free up the resources for the existing and new resources that might
    be accessed much more frequently.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这对性能有很多好处。首先，如果我们假设最近创建/更新的缓存条目是当前最受欢迎的条目，我们可以更快地移除那些没有被访问的条目；以便为现有和可能更频繁访问的新资源释放资源。
- en: This is a fair assumption, assuming the allocated resources for caching is not
    inconsequential. If you have a large volume for file cache or a lot of memory
    for memcache, the oldest entries, in terms of last access, are quite likely not
    being utilized with great frequency.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个公平的假设，假设用于缓存的分配资源并不是微不足道的。如果你有大量的文件缓存或大量的内存用于内存缓存，那么最老的条目，就最后一次访问而言，很可能并没有被频繁地使用。
- en: There is a related and more granular strategy called Least Frequently Used that
    maintains strict statistics on the usage of the cache entries themselves. This
    not only removes the need for assumptions about cache data but also adds overhead
    for the statistics maintenance.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个相关且更精细的策略叫做最不常用，它严格维护缓存条目本身的使用统计。这不仅消除了对缓存数据的假设，还增加了统计维护的开销。
- en: For our demonstrations here, we will be using LRU.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里的演示中，我们将使用LRU。
- en: Caching by file
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过文件缓存
- en: Our first approach is probably best described as a classical one for caching,
    but a method not without issues. We'll utilize the disk to create file-based caches
    for individual endpoints, both API and Web.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个方法可能最好描述为一个经典的缓存方法，但并非没有问题。我们将利用磁盘为各个端点（API和Web）创建基于文件的缓存。
- en: So what are the issues associated with caching in the filesystem? Well, previously
    in the chapter, we mentioned that disk can introduce its own bottleneck. Here,
    we're doing a trade-off to protect the access to our database in lieu of potentially
    running into other issues with disk I/O.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 那么与在文件系统中缓存相关的问题是什么呢？嗯，在本章中我们提到过，磁盘可能会引入自己的瓶颈。在这里，我们做了一个权衡，以保护对数据库的访问，而不是可能遇到磁盘I/O的其他问题。
- en: This gets particularly complicated if our cache directory gets very big. At
    this point we end up introducing more file access issues.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的缓存目录变得非常大，这将变得特别复杂。在这一点上，我们将引入更多的文件访问问题。
- en: Another downside is that we have to manage our cache; because the filesystem
    is not ephemeral and our available space is. We'll need to be able to expire cache
    files by hand. This introduces another round of maintenance and another point
    of failure.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个缺点是我们必须管理我们的缓存；因为文件系统不是短暂的，我们的可用空间是有限的。我们需要手动过期缓存文件。这引入了另一轮维护和另一个故障点。
- en: 'All that said, it''s still a useful exercise and can still be utilized if you''re
    willing to take on some of the potential pitfalls:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，这仍然是一个有用的练习，如果你愿意承担一些潜在的问题，它仍然可以被利用：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This sets the stage to do a few things, such as create unique keys based on
    an endpoint and query parameters, check for the existence of a cache file, and
    if it does not exist, get the requested data as per normal.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们做了一些准备，比如基于端点和查询参数创建唯一的键，检查缓存文件的存在，如果不存在，按照正常情况获取请求的数据。
- en: 'In our application, we can implement this simply. Let''s put a file caching
    layer in front of our `/page` endpoint as shown:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，我们可以简单地实现这一点。让我们在`/page`端点前面放一个文件缓存层，如下所示：
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The preceding code creates a new `CacheItem`. We utilize the variadic `params`
    to generate a reference filename:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码创建了一个新的`CacheItem`。我们利用可变参数`params`来生成一个引用文件名：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When we have a `CacheItem` object, we can check using the `Get()` method, which
    will return `true` if the cache is still valid, otherwise the method will return
    `false`. We utilize filesystem information to determine if a cache item is within
    its valid time-to-live:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有一个`CacheItem`对象时，我们可以使用`Get()`方法进行检查，如果缓存仍然有效，它将返回`true`，否则该方法将返回`false`。我们利用文件系统信息来确定缓存项是否在其有效的存活时间内：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If we find an existing item via the `Get()` method, we''ll check to make sure
    that it has been updated within the set `TTL`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们通过`Get()`方法找到一个现有的项目，我们将检查确保它在设置的`TTL`内已经更新：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If the code is valid and within the TTL, we''ll return `true` and the file''s
    body will be updated. Otherwise, we will allow a passthrough to the page retrieval
    and generation. At the tail of this we can set the cache data:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果代码有效并且在TTL内，我们将返回`true`，并且文件的主体将被更新。否则，我们将允许页面检索和生成的通过。在这之后我们可以设置缓存数据：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We then save this as:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将保存这个为：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This function effectively writes the value of our cache file.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数有效地写入了我们的缓存文件的值。
- en: We now have a working system that will take individual endpoints and innumerable
    query parameters and create a file-based cache library, ultimately preventing
    unnecessary queries to our database, if data has not been changed.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有一个工作系统，它将接受各个端点和无数的查询参数，并创建一个基于文件的缓存库，最终防止了对数据库的不必要查询，如果数据没有改变的话。
- en: In practice we'd want to limit this to mostly read-based pages and avoid putting
    blind caching on any write or update endpoints, particularly on our API.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，我们希望将这个限制在大部分基于读的页面上，并避免在任何写或更新端点上盲目地进行缓存，特别是在我们的API上。
- en: Caching in memory
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内存中的缓存
- en: Just as file system caching became a lot more palatable because storage prices
    plummeted, we've seen a similar move in RAM, trailing just behind hard storage.
    The big advantage here is speed, caching in memory can be insanely fast for obvious
    reasons.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 正如文件系统缓存因存储价格暴跌而变得更加可接受，我们在RAM中也看到了类似的变化，紧随硬存储之后。这里的巨大优势是速度，内存中的缓存因为显而易见的原因可以非常快。
- en: Memcache, and its distributed sibling Memcached, evolved out of a need to create
    a light and super-fast caching for LiveJournal and a proto-social network from
    *Brad Fitzpatrick*. If that name feels familiar, it's because Brad now works at
    Google and is a serious contributor to the Go language itself.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Memcache及其分布式的兄弟Memcached，是为了为LiveJournal和*Brad Fitzpatrick*的原型社交网络创建一个轻量级和超快的缓存而演变而来。如果这个名字听起来很熟悉，那是因为Brad现在在谷歌工作，并且是Go语言本身的重要贡献者。
- en: As a drop-in replacement for our file caching system, Memcached will work similarly.
    The only major change is our key lookups, which will be going against working
    memory instead of doing file checks.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 作为我们文件缓存系统的一个替代方案，Memcached将起到类似的作用。唯一的主要变化是我们的键查找，它将针对工作内存而不是进行文件检查。
- en: Note
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To use memcache with Go language, go to [godoc.org/github.com/bradfitz/gomemcache/memcache](http://godoc.org/github.com/bradfitz/gomemcache/memcache)
    from *Brad Fitz*, and install it using `go get` command.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Go语言与memcache一起使用，访问*Brad Fitz*的网站 [godoc.org/github.com/bradfitz/gomemcache/memcache](http://godoc.org/github.com/bradfitz/gomemcache/memcache)，并使用`go
    get`命令进行安装。
- en: Implementing HTTP/2
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现HTTP/2
- en: One of the more interesting, perhaps noble, initiatives that Google has invested
    in within the last five years has been a focus on making the Web faster. Through
    tools, such as PageSpeed, Google has sought to push the Web as a whole to be faster,
    leaner, and more user-friendly.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌在过去五年中投资的更有趣、也许更高尚的举措之一是专注于使网络更快。通过诸如PageSpeed之类的工具，谷歌试图推动整个网络变得更快、更精简、更用户友好。
- en: No doubt this initiative is not entirely altruistic. Google has built their
    business on extensive web search and crawlers are always at the mercy of the speed
    of the pages they crawl. The faster the web pages, the faster and more comprehensive
    is the crawling; therefore, less time and less infrastructure resulting in less
    money required. The bottom line here is that a faster web benefits Google, as
    much as it does people creating and viewing web sites.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，这项举措并非完全无私。谷歌建立了他们的业务在广泛的网络搜索上，爬虫始终受制于它们爬取的页面速度。网页加载得越快，爬取就越快、更全面；因此，需要的时间和基础设施就越少，所需的资金也就越少。这里的底线是，更快的网络对谷歌有利，就像对创建和查看网站的人一样。
- en: But this is mutually beneficial. If web sites are faster to comply with Google's
    preferences, everyone benefits with a faster Web.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 但这是互惠的。如果网站更快地遵守谷歌的偏好，每个人都会从更快的网络中受益。
- en: This brings us to HTTP/2, a version of HTTP that replaces 1.1, introduced in
    1999 and largely the defacto method for most of the Web. HTTP/2 also envelops
    and implements a lot of SPDY, a makeshift protocol that Google developed and supported
    through Chrome.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这将我们带到了HTTP/2，这是HTTP的一个版本，取代了1999年引入的1.1版本，也是大部分网络的事实标准方法。HTTP/2还包含并实现了许多SPDY，这是谷歌开发并通过Chrome支持的临时协议。
- en: HTTP/2 and SPDY introduce a host of optimizations including header compression
    and non-blocking and multiplexed request handling.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP/2和SPDY引入了一系列优化，包括头部压缩和非阻塞和多路复用的请求处理。
- en: If you're using version 1.6, `net/http` supports HTTP/2 out of the box. If you're
    using version 1.5 or earlier, you can use the experimental package.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是1.6版本，`net/http`默认支持HTTP/2。如果您使用的是1.5或更早版本，则可以使用实验性包。
- en: Note
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To use HTTP/2 prior to Go version 1.6, go get it from [godoc.org/golang.org/x/net/http2](http://godoc.org/golang.org/x/net/http2)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Go版本1.6之前使用HTTP/2，请从 [godoc.org/golang.org/x/net/http2](http://godoc.org/golang.org/x/net/http2)
    获取。
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we focused on quick wins for increasing the overall performance
    for our application, by reducing impact on our underlying application's bottlenecks,
    namely our database.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们专注于通过减少对底层应用程序瓶颈的影响来增加应用程序整体性能的快速获胜策略，即我们的数据库。
- en: We've implemented caching at the file level and described how to translate that
    into a memory-based caching system. We looked at SPDY and HTTP/2, which has now
    become a part of the underlying Go `net/http` package by default.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在文件级别实施了缓存，并描述了如何将其转化为基于内存的缓存系统。我们研究了SPDY和HTTP/2，它现在已成为默认的Go `net/http`包的一部分。
- en: This in no way represents all the optimizations that we may need to produce
    highly performant code, but hits on some of the most common bottlenecks that can
    keep applications that work well in development from behaving similarly in production
    under heavy load.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这绝不代表我们可能需要生成高性能代码的所有优化，但涉及了一些最常见的瓶颈，这些瓶颈可能会导致在开发中表现良好的应用在生产环境中在重负载下表现不佳。
- en: This is where we end the book; hope you all enjoyed the ride!
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们结束这本书的地方；希望大家都享受这段旅程！
