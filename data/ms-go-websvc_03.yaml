- en: Chapter 3. Routing and Bootstrapping
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。路由和引导
- en: After the last two chapters, you should be comfortable with creating an API
    endpoint, the backend database to store your most pertinent information, and mechanisms
    necessary to route and output your data via HTTP requests.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的两章中，您应该已经熟悉了创建API端点、后端数据库来存储最重要信息以及通过HTTP请求路由和输出数据所需的机制。
- en: For the last point, other than our most basic example, we've yielded to a library
    for handling our URL multiplexers. This is the Gorilla web toolkit. As fantastic
    as this library (and its related frameworks) is, it's worth getting to know how
    to handle requests directly in Go, particularly to create more robust API endpoints
    that involve conditional and regular expressions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于最后一点，除了我们最基本的示例之外，我们已经使用了一个库来处理我们的URL多路复用器。这就是Gorilla Web Toolkit。尽管这个库（及其相关框架）非常棒，但了解如何直接在Go中处理请求是值得的，特别是为了创建涉及条件和正则表达式的更健壮的API端点。
- en: While we've briefly touched on the importance of header information for the
    web service consumer, including status codes, we'll start digging into some important
    ones as we continue to scale our application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们简要提到了头信息对于Web服务消费者的重要性，包括状态代码，但随着我们继续扩展我们的应用程序，我们将开始深入研究一些重要的内容。
- en: The importance of controlling and dictating state is critical for a web service,
    especially (and paradoxically) in stateless systems such as REST. We say this
    is a paradox because while the server should provide little information about
    the state of the application and each request, it's important to allow the client
    to understand this based on the absolute minimal and standard mechanisms that
    we're afforded.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 控制和指示状态的重要性对于Web服务至关重要，特别是（具有悖论性的）在无状态系统中，如REST。我们说这是一个悖论，因为虽然服务器应该提供有关应用程序状态和每个请求的少量信息，但重要的是允许客户端根据我们所提供的绝对最小和标准机制来理解这一点。
- en: For example, while we may not give a page number in a list or a GET request,
    we want to make sure that the consumer knows how to navigate to get more or previous
    result sets from our application.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，虽然我们可能在列表或GET请求中不提供页码，但我们希望确保消费者知道如何导航以获取更多或以前的结果集。
- en: Similarly, we may not provide a hard error message although it exists, but our
    web services should be bound to some standardization as it relates to feedback
    that we can provide in our headers.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可能不提供硬错误消息，尽管它存在，但我们的Web服务应该受到一些标准化的约束，因为它涉及我们可以在标头中提供的反馈。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Extending Go's multiplexer to handle more complex requests
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展Go的多路复用器以处理更复杂的请求
- en: Looking at more advanced requests in Gorilla
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看Gorilla中更高级的请求
- en: Introducing RPC and web sockets in Gorilla
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Gorilla中引入RPC和Web套接字
- en: Handling errors in our application and requests
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理应用程序和请求中的错误
- en: Dealing with binary data
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理二进制数据
- en: We'll also create a couple of consumer-friendly interfaces for our web application,
    which will allow us to interact with our social network API for requests that
    require `PUT`/`POST`/`DELETE`, and later on, `OPTIONS`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将为我们的Web应用程序创建一些消费者友好的接口，这将允许我们与我们的社交网络API进行交互，以满足需要`PUT`/`POST`/`DELETE`的请求，以及稍后的`OPTIONS`。
- en: By the end of this chapter, you should be comfortable with writing routers in
    Go as well as extending them to allow more complex requests.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章结束时，您应该已经熟悉了在Go中编写路由器以及扩展它们以允许更复杂的请求。
- en: Writing custom routers in Go
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Go中编写自定义路由器
- en: As mentioned earlier, until this point, we've focused on using the Gorilla Web
    Toolkit for handling URL routing and multiplexers, and we've done that primarily
    due to the simplicity of the `mux` package within Go itself.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，直到这一点，我们一直专注于使用Gorilla Web Toolkit来处理URL路由和多路复用器，主要是因为Go本身内部的`mux`包的简单性。
- en: By simplicity, we mean that pattern matching is explicit and doesn't allow for
    wildcards or regular expressions using the `http.ServeMux` struct.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 通过简单性，我们指的是模式匹配是明确的，不允许使用`http.ServeMux`结构进行通配符或正则表达式。
- en: 'By looking directly into the following setup of the `http.ServeMux` code, you
    can see how this can use a little more nuance:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 通过直接查看`http.ServeMux`代码的设置，您可以看到这可以使用更多的细微差别：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The key part here is the `!pathMatch` function, which calls another method
    that specifically checks whether a path literally matches a member of a `muxEntry`
    map:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键部分是`!pathMatch`函数，它调用另一个方法，专门检查路径是否与`muxEntry`映射的成员完全匹配：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Of course, one of the best things about having access to this code is that it
    is almost inconsequential to take it and expand upon it.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，访问此代码的最好之处之一是，几乎可以毫不费力地扩展它。
- en: There are two ways of doing this. The first is to write your own package, which
    will serve almost like an extended package. The second is to modify the code directly
    in your `src` directory. This option comes with the caveat that things could be
    replaced and subsequently broken on upgrade. So, this is an option that will fundamentally
    break the Go language.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以做到这一点。第一种是编写自己的包，几乎可以像扩展包一样使用。第二种是直接修改您的`src`目录中的代码。这种选择的缺点是在升级时可能会被替换并且随后被破坏。因此，这是一个基本上会破坏Go语言的选项。
- en: With this in mind, we'll go with the first option. So, how can we extend the
    `http` package? The short answer is that you really can't without going into the
    code directly, so we'll need to create our own that inherits the most important
    methods associated with the various `http` structs with which we'll be dealing.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，我们将选择第一种选项。那么，我们如何扩展`http`包呢？简短的答案是，您实际上不能在不直接进入代码的情况下进行扩展，因此我们需要创建自己的代码，继承与我们将要处理的各种`http`结构相关的最重要的方法。
- en: To start this, we'll need to create a new package. This should be placed in
    your Golang `src` directory under the domain-specific folder. In this case, we
    mean domain in the traditional sense, but by convention also in the web directory
    sense.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始这个过程，我们需要创建一个新的包。这应该放在你的Golang `src`目录下的特定域文件夹中。在这种情况下，我们指的是传统意义上的域，但按照惯例也是指web目录的意义。
- en: 'If you''ve ever executed a `go get` command to grab a third-party package,
    you should be familiar with these conventions. You should see something like the
    following screenshot in the `src` folder:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经执行过`go get`命令来获取第三方包，你应该熟悉这些约定。你应该在`src`文件夹中看到类似以下截图的内容：
- en: '![Writing custom routers in Go](img/1304OS_03_04.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![在Go中编写自定义路由器](img/1304OS_03_04.jpg)'
- en: In our case, we'll simply create a domain-specific folder that will hold our
    packages. Alternatively, you can create projects in your code repository of choice,
    such as GitHub, and import the packages directly from there via `go get`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们只需创建一个特定于域的文件夹，用于保存我们的包。或者，你可以在你选择的代码存储库中创建项目，比如GitHub，并直接从那里导入包，通过`go
    get`。
- en: For now though, we'll simply create a subfolder under that directory, in my
    case `nathankozyra.com`, and then a folder called `httpex` (a portmanteau of `http`
    and `regex`) for the `http` extension.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，现在我们只需在该目录下创建一个子文件夹，我的情况下是`nathankozyra.com`，然后一个名为`httpex`（`http`和`regex`的混成词）的文件夹，用于`http`扩展。
- en: Depending on your installation and operating system, your import directory may
    not be immediately apparent. To quickly see where your import packages should
    be, run the `go env` internal tool. You will find the directory under the `GOPATH`
    variable.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的安装和操作系统，你的导入目录可能不会立即显而易见。要快速查看你的导入包应该在哪里，运行`go env`内部工具。你会在`GOPATH`变量下找到目录。
- en: Tip
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you find your `go get` commands return the `GOPATH not set` error, you'll
    need to export that `GOPATH` variable. To do so, simply enter `export` `GOPATH=/your/directory`
    (for Linux or OS X). On Windows, you'll need to set an environment variable.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现你的`go get`命令返回`GOPATH not set`错误，你需要导出`GOPATH`变量。要这样做，只需输入`export GOPATH=/your/directory`（对于Linux或OS
    X）。在Windows上，你需要设置一个环境变量。
- en: One final caveat is that if you're using OS X and have difficulty in getting
    packages via `go get`, you may need to include the `-E` flag after your `sudo`
    call to ensure that you're using your local user's variables and not those of
    the root.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个警告是，如果你使用的是OS X，并且在通过`go get`获取包时遇到困难，你可能需要在`sudo`调用之后包含`-E`标志，以确保你使用的是本地用户的变量，而不是root的变量。
- en: 'For the sake of saving space, we won''t include all of the code here that is
    necessary to retrofit the `http` package that allows regular expressions. To do
    so, it''s important to copy all of the `ServeMux` structs, methods, and variables
    into your `httpex.go` file. For the most part, we''ll replicate everything as
    is. You''ll need a few important imported packages; this is what your file should
    look like:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了节省空间，我们不会在这里包含所有必要的代码，以便改装允许正则表达式的`http`包。为此，重要的是将所有的`ServeMux`结构、方法和变量复制到你的`httpex.go`文件中。在大多数情况下，我们会复制所有内容。你需要一些重要的导入包；你的文件应该是这样的：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The critical change happens with the `pathMatch()` function, which previously
    required a literal match of the longest possible string. Now, we will change any
    `==` equality comparisons to regular expressions:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 关键的变化发生在`pathMatch()`函数中，以前需要最长可能字符串的字面匹配。现在，我们将任何`==`相等比较改为正则表达式：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If all of this seems like reinventing the wheel, the important takeaway is that—as
    with many things in Go—the core packages provide a great starting point for the
    most part, but you shouldn't hesitate to augment them when you find that certain
    functionality is lacking.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有这些看起来都像是重复造轮子，重要的是——就像Go中的许多东西一样——核心包在大多数情况下提供了一个很好的起点，但当你发现某些功能缺失时，你不应该犹豫去增强它们。
- en: 'There is one other quick and dirty way of rolling your own `ServeMux` router,
    and that''s by intercepting all requests and running a regular expression test
    on them. Like the last example, this isn''t ideal (unless you wish to introduce
    some unaddressed efficiencies), but this can be used in a pinch. The following
    code illustrates a very basic example:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种快速而简单的方法来创建自己的`ServeMux`路由器，那就是拦截所有请求并对它们进行正则表达式测试。就像上一个例子一样，这并不理想（除非你希望引入一些未解决的效率问题），但在紧急情况下可以使用。以下代码演示了一个非常基本的例子：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Again, we include the `regexp` package so that we can do regular expression
    tests:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们包含了`regexp`包，以便我们可以进行正则表达式测试：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, instead of giving each match a specific handler, we test within a single
    handler for the `testing[3 digits]` matches and then react accordingly.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们不是为每个匹配项提供特定的处理程序，而是在单个处理程序中测试`testing[3 digits]`的匹配项，然后根据情况做出反应。
- en: 'In this case, we tell the client that there''s nothing unless they match the
    pattern. This pattern will obviously work for a `/testing123` request and fail
    for anything that doesn''t match this pattern:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们告诉客户端，除非他们匹配模式，否则什么都没有。这个模式显然适用于`/testing123`请求，并且对于任何不匹配这个模式的东西都会失败：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: And finally, we start our web server.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们启动我们的web服务器。
- en: Using more advanced routers in Gorilla
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Gorilla中使用更高级的路由器
- en: Now that we've played around a bit with extending the multiplexing of the built-in
    package, let's see what else Gorilla has to offer.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经玩弄了一下扩展内置包的多路复用，让我们看看Gorilla还提供了什么。
- en: In addition to simple expressions, we can take a URL parameter and apply it
    to a variable to be used later. We did this in our earlier examples without providing
    a lot of explanation of what we were producing.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 除了简单的表达式，我们还可以获取URL参数并将其应用到稍后使用的变量中。我们在之前的例子中做到了这一点，但没有提供很多关于我们正在生成的内容的解释。
- en: 'Here''s an example of how we might parlay an expression into a variable for
    use in an `httpHandler` function:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例，我们如何将一个表达式转化为一个变量，用于`httpHandler`函数中：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Both could be approached as `GET` requests for a specific entity within our
    `users` table. We could handle either with the following code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法都可以作为`GET`请求来处理`users`表中的特定实体。我们可以用以下代码来处理任何一种情况：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'However, we need to preserve the last value for use in our query. To do so,
    Gorilla allows us to set that expression to a key in a map. In this case, we''d
    address this with the following code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们需要保留最后一个值以供我们的查询使用。为此，Gorilla允许我们将该表达式设置为映射中的一个键。在这种情况下，我们可以用以下代码来解决这个问题：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This would allow us to extract that value in our handler via the following
    code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许我们通过以下代码从我们的处理程序中提取该值：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You''ll note that we used `"key"` here instead of an expression. You can do
    both here, which allows you to set a regular expression to a key. For example,
    if our user key variable consisted of letters, numbers, and dashes, we could set
    it like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到我们在这里使用了`"key"`而不是一个表达式。你可以在这里都做，这样你就可以将一个正则表达式设置为一个键。例如，如果我们的用户键变量由字母、数字和破折号组成，我们可以这样设置：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And, in our `UserRetrieve` function, we''d be able to pull that key (or any
    other that we added to the `mux` package) directly:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，在我们的`UserRetrieve`函数中，我们可以直接提取该键（或者我们添加到`mux`包中的任何其他键）：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Using Gorilla for JSON-RPC
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Gorilla进行JSON-RPC
- en: You may recall from [Chapter 2](ch02.html "Chapter 2. RESTful Services in Go"),
    *RESTful Services in Go*, that we touched on RPC briefly with the promise of returning
    to it.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还记得[第2章](ch02.html "第2章。Go中的RESTful服务")中我们简要介绍了RPC，并承诺会回到它。
- en: With REST as our primary method for delivery of the web service, we'll continue
    to limit our knowledge of RPC and JSON-RPC. However, this is a good time to demonstrate
    how we can create RPC services very quickly with the Gorilla toolkit.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以REST作为我们的主要Web服务交付方法，我们将继续限制我们对RPC和JSON-RPC的了解。然而，现在是一个很好的时机来演示我们如何可以使用Gorilla工具包非常快速地创建RPC服务。
- en: 'For this example, we''ll accept a string and return the number of total characters
    in the string via an RPC message:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，我们将接受一个字符串，并通过RPC消息返回字符串中的总字符数：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: One important note about the RPC method is that it needs to be exported, which
    means that a function/method must start with a capital letter. This is how Go
    treats a concept that is vaguely analogous to `public`/`private`. If the RPC method
    starts with a capital letter, it is exported outside of that package's scope,
    otherwise it's essentially `private`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 关于RPC方法的一个重要说明是，它需要被导出，这意味着一个函数/方法必须以大写字母开头。这是Go对一个概念的处理方式，它在某种程度上类似于`public`/`private`。如果RPC方法以大写字母开头，它就会被导出到该包的范围之外，否则它基本上是`private`。
- en: '![Using Gorilla for JSON-RPC](img/1304OS_03_06.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![使用Gorilla进行JSON-RPC](img/1304OS_03_06.jpg)'
- en: In this case, if you called the method `stringService` instead of `StringService`,
    you'd get the response **can't find service stringService**.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，如果你调用方法`stringService`而不是`StringService`，你会得到响应**找不到服务stringService**。
- en: Using services for API access
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用服务进行API访问
- en: One of the issues we'll quickly encounter when it comes to building and testing
    our web service is handling the `POST`/`PUT`/`DELETE` requests directly to ensure
    that our method-specific requests do what we expect them to.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及构建和测试我们的Web服务时，我们将迅速遇到的一个问题是直接处理`POST`/`PUT`/`DELETE`请求，以确保我们的特定于方法的请求能够按我们的预期进行。
- en: There are a few ways that exist for handling this easily without having to move
    to another machine or build something elaborate.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以轻松处理这个问题，而不必移动到另一台机器或构建复杂的东西。
- en: The first is our old friend cURL. By far the most popular method for making
    networked requests over a variety of protocols, cURL is simple and supported by
    almost any language you can think of.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法是我们的老朋友cURL。迄今为止，cURL是最受欢迎的一种通过各种协议进行网络请求的方法，它简单易用，并且几乎支持你能想到的任何语言。
- en: Note
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There is no single built-in cURL component in Go. However, this largely follows
    the ethos of slim, integrated language design that Go's developers seem to be
    most interested in.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Go中没有单独的内置cURL组件。然而，这在很大程度上遵循了Go开发人员似乎最感兴趣的精简、集成的语言设计理念。
- en: 'There are, however, a few third-party solutions you can look at:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你可以看一下一些第三方解决方案：
- en: '`go-curl`, a binding by ShuYu Wang is available at [https://github.com/andelf/go-curl](https://github.com/andelf/go-curl).'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`go-curl`，由ShuYu Wang提供的绑定，可以在[https://github.com/andelf/go-curl](https://github.com/andelf/go-curl)上找到。'
- en: '`go-av`, a simpler method with `http` bindings is available at [https://github.com/go-av/curl](https://github.com/go-av/curl).'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`go-av`，一种更简单的方法，带有`http`绑定，可以在[https://github.com/go-av/curl](https://github.com/go-av/curl)上找到。'
- en: For the purpose of testing things out though, we can use cURL very simply and
    directly from the command line. It's simple enough, so constructing requests should
    be neither difficult nor arduous.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，为了测试，我们可以简单直接地从命令行使用cURL。这很简单，所以构造请求既不难也不费力。
- en: 'Here''s an example call we can make to our create method at `/api/users` with
    a `POST` `http` method:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '以下是我们可以使用`POST` `http`方法向`/api/users`的创建方法发出的示例调用： '
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Keeping in mind that we already have this user in our database and it''s a
    unique database field, we return an error by simply modifying our `UserCreate`
    function. Note that in the following code, we change our response to a new `CreateResponse`
    struct, which for now includes only an error string:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们已经在我们的数据库中有了这个用户，并且它是一个唯一的数据库字段，我们只需修改我们的`UserCreate`函数就可以返回一个错误。请注意，在下面的代码中，我们将我们的响应更改为一个新的`CreateResponse`结构，目前只包括一个错误字符串：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'And now, we call it. If we get an error from our database, we''ll include it
    in our response, at least for now; shortly, we''ll look at translations. Otherwise,
    it will be blank and we can (for now) assume that the user was successfully created.
    We say *for now* because we''ll need to provide more information to our client
    depending on whether our request succeeds or fails:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们来调用它。如果我们从数据库得到一个错误，我们将把它包含在我们的响应中，至少目前是这样；不久之后，我们将研究翻译。否则，它将是空的，我们可以（目前）假设用户已经成功创建。我们说*目前*，因为根据我们的请求成功或失败，我们需要向我们的客户提供更多的信息：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here is how it looks if we try to create a duplicate user via a cURL request:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试通过cURL请求创建重复的用户，它看起来是这样的：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Using a simple interface for API access
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用简单的接口访问API
- en: Another way in which we can swiftly implement an interface for hitting our API
    is through a simple web page with a form. This is, of course, how many APIs are
    accessed—directly by the client instead of being handled server-side.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过一个简单的带有表单的网页迅速实现命中我们的API的接口。当然，这是许多API被访问的方式——直接由客户端访问而不是由服务器端处理。
- en: 'And although we''re not suggesting this is the way our social network application
    should work in practice, it provides us an easy way to visualize the application:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们并不建议这是我们的社交网络应用程序在实践中应该工作的方式，但它为我们提供了一种简单的可视化应用程序的方式：
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: When this is rendered, we'll have a quick basic visual form for getting data
    into our API as well as returning valuable error information and feedback.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个被渲染时，我们将有一个快速的基本可视化表单，用于将数据输入到我们的API中，以及返回有价值的错误信息和反馈。
- en: Tip
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Due to cross-domain restrictions, you may wish to either run this from the
    same port and domain as our API server, or include this header with every request
    from the server file itself:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 由于跨域限制，您可能希望从与我们的API服务器相同的端口和域运行此文件，或者在服务器文件本身的每个请求中包含此标头：
- en: '[PRE19]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here, `http://localhost:9000` represents the originating server for the request.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`http://localhost:9000`代表请求的来源服务器。
- en: 'Here''s what our rendered HTML presentation looks like:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们渲染的HTML演示如下：
- en: '![Using a simple interface for API access](img/1304OS_03_01.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: 使用简单的接口访问API
- en: Returning valuable error information
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 返回有价值的错误信息
- en: When we returned errors in our last request, we simply proxied the MySQL error
    and passed it along. This isn't always helpful though, because it seems to require
    at least some familiarity with MySQL to be valuable information for the client.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在上次请求中返回错误时，我们只是代理了MySQL错误并将其传递。不过这并不总是有帮助，因为似乎至少需要对MySQL有一定的了解才能为客户端提供有价值的信息。
- en: Granted, MySQL itself has a fairly clean and straightforward error messaging
    system, but the point is it's specific to MySQL and not our application.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，MySQL本身有一个相当清晰和简单的错误消息系统，但关键是它是特定于MySQL而不是我们的应用程序。
- en: What if your client doesn't understand what a "duplicate entry" means? What
    if they don't speak English? Will you translate the message or will you tell all
    of your dependencies what language to return with each request? Now you can see
    why this might get arduous.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的客户端不理解“重复条目”是什么意思怎么办？如果他们不会说英语怎么办？您会翻译消息，还是会告诉所有依赖项每个请求返回什么语言？现在您可以看到为什么这可能会变得繁琐。
- en: Most APIs have their own system for error reporting, if for no other reason
    than to have control over messaging. And while it's ideal to return the language
    based on the request header's language, if you can't, then it's helpful to return
    an error code so that you (or another party) can provide a translation down the
    road.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数API都有自己的错误报告系统，即使只是为了控制消息。虽然最理想的是根据请求头的语言返回语言，但如果不能，返回错误代码也是有帮助的，这样你（或其他方）可以在以后提供翻译。
- en: And then there are the most critical errors which are returned via HTTP status
    codes. By default, we're producing a few of these with Go's `http` package, as
    any request to an invalid resource will provide a standard 404 **not found** message.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然后还有通过HTTP状态代码返回的最关键的错误。默认情况下，我们使用Go的`http`包生成了一些这样的错误，因为对无效资源的任何请求都会提供一个标准的404
    **未找到**消息。
- en: 'However, there are also REST-specific error codes that we''ll get into shortly.
    For now, there''s one that''s relevant to our error: 409.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，还有一些特定于REST的错误代码，我们很快就会介绍。目前，有一个与我们的错误相关的错误代码：409。
- en: Note
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'As per W3C''s RFC 2616 protocol specification, we can send a 409 code that
    indicates a conflict. Here''s what the spec states:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 根据W3C的RFC 2616协议规范，我们可以发送一个表示冲突的409代码。以下是规范的说明：
- en: The request could not be completed due to a conflict with the current state
    of the resource. This code is only allowed in situations where it is expected
    that the user might be able to resolve the conflict and resubmit the request.
    The response body SHOULD include enough information for the user to recognize
    the source of the conflict. Ideally, the response entity would include enough
    information for the user or user agent to fix the problem; however, that might
    not be possible and is not required.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 由于资源的当前状态与请求的冲突，请求无法完成。此代码仅允许在预期用户可能能够解决冲突并重新提交请求的情况下使用。响应正文应包含足够的信息，以便用户识别冲突的来源。理想情况下，响应实体将包含足够的信息，以便用户或用户代理程序解决问题；但这可能是不可能的，也不是必需的。
- en: Conflicts are most likely to occur in response to a `PUT` request. For example,
    if versioning were being used and the entity being `PUT` included changes to a
    resource which conflict with those made by an earlier (third-party) request, the
    server might use the 409 response to indicate that it can't complete the request.
    In this case, the response entity would likely contain a list of the differences
    between the two versions in a format defined by the response `Content-Type`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 冲突最有可能发生在对`PUT`请求的响应中。例如，如果正在使用版本控制，并且`PUT`的实体包含与之前（第三方）请求所做的更改冲突的资源更改，服务器可能使用409响应来指示它无法完成请求。在这种情况下，响应实体可能包含两个版本之间差异的列表，格式由响应`Content-Type`定义。
- en: With that in mind, let's first detect an error that indicates an existing record
    and prevents the creation of a new record.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，让我们首先检测一个指示现有记录并阻止创建新记录的错误。
- en: Unfortunately, Go does not return a specific database error code along with
    the error, but at least with MySQL it's easy enough to extract the error if we
    know the pattern used.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，Go并没有返回特定的数据库错误代码，但至少对于MySQL来说，如果我们知道使用的模式，提取错误就足够简单了。
- en: 'Using the following code, we''ll construct a parser that will split a MySQL
    error string into its two components and return an integer error code:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码，我们将构建一个解析器，将MySQL错误字符串分割成两个组件并返回一个整数错误代码：
- en: '[PRE20]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We''ll also augment our `CreateResponse` struct with an error status code,
    represented as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将用错误状态码来增强我们的`CreateResponse`结构，表示如下：
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We''ll also take our MySQL response and message it into a `CreateResponse`
    struct by changing our error response behavior in the `UsersCreate` function:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将把MySQL的响应和消息转换成一个`CreateResponse`结构，通过改变`UsersCreate`函数中的错误响应行为：
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You''ll note the `dbErrorParse` function, which we defined earlier. We take
    the results from this and inject it into an `ErrorMessages` function that returns
    granular information about any given error and not database errors exclusively:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到我们之前定义的`dbErrorParse`函数。我们将从中获取的结果注入到一个`ErrorMessages`函数中，该函数返回有关任何给定错误的细致信息，而不仅仅是数据库错误：
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: For now, this is pretty lean, dealing with a single type of error. We'll expand
    upon this as we go along and add more error handling mechanisms and messages (as
    well as taking a stab at translation tables).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，这还比较简单，只处理一种类型的错误。随着我们的进展，我们将扩展这一点，并添加更多的错误处理机制和消息（以及尝试翻译表）。
- en: 'There''s one last thing we need to do with regard to the HTTP status code.
    The easiest way to set the HTTP status code is through the `http.Error()` function:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 关于HTTP状态码，我们还需要做最后一件事。设置HTTP状态码的最简单方法是通过`http.Error()`函数：
- en: '[PRE24]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If we put this in our error conditional block, we''ll return any status code
    we receive from the `ErrorMessages()` function:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们把这放在我们的错误条件块中，我们将返回从`ErrorMessages()`函数接收到的任何状态码：
- en: '[PRE25]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Running this again with cURL and the verbose flag (`-v`) will give us additional
    information about our errors, as shown in the following screenshot:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 使用cURL和verbose标志（`-v`）再次运行这个命令，将会给我们提供关于错误的额外信息，如下面的截图所示：
- en: '![Returning valuable error information](img/1304OS_03_03.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![返回有价值的错误信息](img/1304OS_03_03.jpg)'
- en: Handling binary data
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理二进制数据
- en: 'First, we''ll need to create a new field in MySQL to accommodate the image
    data. In the following case, we can go with `BLOB` data, which accepts large amounts
    of arbitrary binary data. For this purpose, we can assume (or enforce) that an
    image should not exceed 16 MB, so `MEDIUMBLOB` will handle all of the data that
    we throw at it:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在MySQL中创建一个新的字段来容纳图像数据。在这种情况下，我们可以选择`BLOB`数据，它接受大量的任意二进制数据。为此，我们可以假设（或强制）图像不应超过16MB，因此`MEDIUMBLOB`将处理我们提供的所有数据：
- en: '[PRE26]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'With our image column now in place, we can accept data. Add another field to
    our form for image data:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的图像列已经就位，我们可以接受数据。在我们的表单中添加另一个字段来存储图像数据：
- en: '[PRE27]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'And in our server, we can make a few quick modifications to accept this. First,
    we should get the file data itself from the form, as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的服务器中，我们可以进行一些快速的修改来接受这个数据。首先，我们应该从表单中获取文件数据本身，如下所示：
- en: '[PRE28]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Next, we want to read this entire file and convert it to a string:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们想要读取整个文件并将其转换为一个字符串：
- en: '[PRE29]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Then, we''ll pack it into a `base64` encoded text representation of our image
    data:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将把它打包成一个`base64`编码的文本表示我们的图像数据：
- en: '[PRE30]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'And then finally, we prepend our query with the inclusion of the new user image
    data:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在查询中加入新用户图像数据：
- en: '[PRE31]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Note
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: We'll come back to a couple of these SQL statements that are assembled here
    in our last chapter on security.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们关于安全性的最后一章中回顾一下这里组装的一些SQL语句。
- en: Summary
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Three chapters in and we've got the skeleton of a simple social networking application
    that we can replicate in REST as well as JSON-RPC. We've also spent some time
    on properly relaying errors to the client in REST.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 三章之后，我们已经有了一个简单的社交网络应用程序的框架，我们可以在REST和JSON-RPC中复制。我们还花了一些时间来正确地将错误传递给REST中的客户端。
- en: In our next chapter, *Designing APIs in Go*, we'll really begin to flesh out
    our social network as well as explore other Go packages that will be relevant
    to have a strong, robust API.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一章中，《在Go中设计API》，我们将真正开始完善我们的社交网络，并探索其他Go包，这些包对于拥有一个强大、健壮的API是相关的。
- en: In addition, we'll bring in a few other libraries and external services to help
    give verbose responses to connections between our users and their relationships.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将引入一些其他库和外部服务，以帮助在用户和他们的关系之间建立连接时提供详细的响应。
- en: We'll also start to experiment with web sockets for a more interactive client
    experience on the Web. Finally, we'll handle binary data to allow our clients
    to upload images through our API.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还将开始尝试使用Web套接字，以便在Web上为客户端提供更交互式的体验。最后，我们将处理二进制数据，允许我们的客户端通过我们的API上传图像。
