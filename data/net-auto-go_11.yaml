- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Expert Insights
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 专家见解
- en: As we’re getting closer to the end of the book, we want to do something special.
    Instead of a more traditional final chapter that reiterates the main points and
    tries to look into the future, we have done something different and, hopefully,
    more entertaining for you.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们接近本书的结尾，我们想要做一些特别的事情。与其写一个更传统的总结章节，重复主要观点并试图展望未来，我们做了些不同的事情，希望对您来说更有趣。
- en: We reached out to several people who have real-world hands-on experience with
    network automation and/or are using Go for network-related tasks and activities
    so that they could share their perspectives with us.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们联系了多位在网络安全自动化领域有实际操作经验的人，或者正在使用Go语言进行网络相关任务和活动的人，以便他们能与我们分享他们的观点。
- en: We hope that their thoughts, lessons learned, ideas, and opinions will provide
    you with guidance and more food for thought about the role and importance of automation
    in the networking industry and reinforce the point that Go is not an esoteric,
    niche language, but one that is used extensively today for a wide range of network-related
    use cases.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望他们的思考、经验教训、想法和观点能为你提供指导，并使你对网络行业自动化在角色和重要性方面的认识更加深刻，同时强调Go语言不是一种晦涩难懂、小众的语言，而是一种广泛用于各种网络相关用例的语言。
- en: Without further ado, we present to you the *Expert* *Insights* chapter.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 不再拖延，我们现在向您展示“专家见解”章节。
- en: David Barroso
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: David Barroso
- en: '*David is a Principal Engineer working in the intersection between infrastructure
    and software engineering. Among other things, he is responsible for creating open
    source projects such as NAPALM, Nornir, and Gornir.*'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*David是一位在基础设施和软件工程交叉领域工作的资深工程师。他负责创建了许多开源项目，如NAPALM、Nornir和Gornir。*'
- en: Traditionally, the networking space has been very stable. Most innovations came
    through standard bodies that took years to be ratified. In addition, vendors promoted
    certifications with clear and structured learning guides and courses. This meant
    that network engineers had a clear path to start their careers and become certified
    experts without having to worry too much about being sidetracked and even without
    having to bother to figure out what came next for them; someone else had already
    decided that.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，网络空间一直非常稳定。大多数创新都是通过标准机构实现的，这些机构需要数年才能获得批准。此外，厂商还推广了具有明确和结构化学习指南和课程的认证。这意味着网络工程师有明确的职业发展路径，可以成为认证专家，而无需过多担心被误导，甚至无需费心去想下一步是什么；其他人已经为他们决定了。
- en: However, the year is 2022 and our everyday vocabulary has gone from acronyms
    such as MPLS-over-GRE-over-IPSec to others such as IaC, CI, PR, and DevSecOps.
    Our vendor-driven, slow-changing, cozy life is no more and now we need to keep
    up with the latest industry buzzwords and the breaking changes in the latest update
    of our framework/library of choice (luckily, we don’t need to keep up with JavaScript
    frameworks, for now). But do not despair—take the red pill and be ready to choose
    your own path.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，现在是2022年，我们的日常词汇已经从MPLS-over-GRE-over-IPSec这样的缩写词转变为IaC、CI、PR和DevSecOps等。我们那种由厂商驱动、缓慢变化、舒适的生活已经一去不复返，现在我们需要跟上最新的行业术语和我们所选择的框架/库的最新更新中的重大变化（幸运的是，目前我们不需要跟上JavaScript框架）。但不要绝望——选择红色药丸，准备好选择自己的道路。
- en: 'My advice to keep up with this ever-changing crazy world is as follows: rely
    less on vendor-driven certifications unless they are a hard requirement for your
    job. Instead, grab books such as the one you are reading now. Get familiar with
    the ideas and concepts without worrying too much about the tiny details. Instead
    of setting up impossible lab scenarios, collaborate with open source projects
    and learn from the community, the tooling used to develop and maintain the project,
    the processes, the frameworks, the ideas, and so on. Finally, do not get overwhelmed.
    People will come up with new buzzwords, libraries, projects, and so on all the
    time, but if you focus on the ideas, you quickly notice that things are not as
    earth-shattering as they claim to be and the industry doesn’t move as fast as
    advertised.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于如何跟上这个不断变化且疯狂的世界，我的建议如下：除非是工作硬性要求，否则尽量减少对厂商驱动的认证的依赖。相反，阅读像你现在正在读的这样的书籍。熟悉其中的思想和概念，不必过于担心细节。与其设置不可能的实验室场景，不如与开源项目合作，从社区中学习，学习项目开发和维护所使用的工具，流程，框架，思想等等。最后，不要感到不知所措。人们会不断提出新的术语，库，项目等等，但如果你专注于思想，你会很快注意到事情并没有他们所说的那样震撼，行业的发展也没有广告中所说的那么快。
- en: Stuart Clark
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Stuart Clark
- en: '*Stuart is a Senior Developer Advocate Of Community AWS, author for Cisco Press,
    and a Cisco-Certified DevNet Expert #20220005.*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*斯图尔特是社区AWS的高级开发者倡导者，Cisco Press的作者，以及Cisco认证的DevNet专家 #20220005。*'
- en: It would be fair to say I would not be where I am now/today without network
    automation. I was not the first person on the “automate everything” bus, though.
    I fully admit I was late to the game, or so I felt back in 2014\. Since starting
    in networking in 2008, a number of people have said how they could automate many
    of their daily tasks, but yet, my ego said my CLI was still better. What held
    me back? Mostly fear, failure, and not knowing where to begin. It wasn’t until
    the summer of 2014 that I rolled up my sleeves and said, *I am going to master
    this now*. Being a network genius, I could easily do this! Nope. This humbled
    me and I found I could not brute-force learn to code the same way I learned network
    engineering. For me, a more logical approach was required. This started as just
    an hour a day in the morning when my brain was fresh and my day of customer network
    issues and network projects kicked off. I often found I would be stuck in areas
    for days, too. I could complete labs or copy the examples, but understanding concepts
    I would often struggle with, so I started making mini projects based on my current
    day tasks. This often was the same script, but I kept adding and building on this
    day after day, adding better error handling or validation. Having someone with
    more experience look over your work and get feedback is great too. After a while,
    your code has evolved into a work tool that your whole team now uses, and that
    kick-started many other exciting new workflows. It takes time, but it comes a
    year or 2 years later.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 公平地说，如果没有网络自动化，我现在不会处于这个位置。虽然我不是“自动化一切”这辆车的第一个乘客，但我完全承认我在2014年才加入这场游戏，或者至少我那时是这样感觉的。自从2008年开始从事网络工作以来，很多人都说他们可以自动化他们许多日常任务，但我的自负却说我仍然认为我的CLI更好。是什么阻止了我？主要是恐惧、失败和不知道从何开始。直到2014年的夏天，我才卷起袖子说：“我现在就要掌握它。”作为一个网络天才，我很容易做到这一点！不。这让我感到羞愧，我发现我不能像学习网络工程那样通过暴力学习编码。对我来说，需要一种更逻辑的方法。这最初只是每天早上大脑清醒时的一小时，那时我的客户网络问题和网络项目开始了。我经常发现我会被困在某个地方好几天。我可以完成实验室或复制示例，但理解概念我经常感到困难，所以我开始根据当天的任务制作小型项目。这通常是一个相同的脚本，但我每天都在添加和构建，添加更好的错误处理或验证。让有经验的人审阅你的工作并获得反馈也很好。过了一段时间，你的代码已经演变成整个团队现在都在使用的工具，这也启动了许多其他令人兴奋的新工作流程。这需要时间，但一年或两年后才会出现。
- en: 'When anyone asks me about careers, learning new things, or applying for a new
    role, I always ask: *Where do you want to be in 2 years’ time and 5 years’ time?*
    Your skills always need to be sharpened and to do that, you need to hone your
    skills and learn new things. It is not today we are preparing for, it is our future,
    and each step of the way requires discipline and consistency. That is where all
    the magic in you happens. I do not believe we are born with a skill. Sure, we
    might learn something faster than others. I believe we can be whoever we want
    to be, and if you have the passion and desire and are willing to put in the work,
    you can achieve anything.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当有人问我关于职业、学习新事物或申请新角色的问题时，我总是问：*你希望在两年后和五年后处于什么位置？* 你的技能总是需要磨砺的，为此，你需要磨练你的技能并学习新事物。我们今天所准备的，不是今天，而是我们的未来，每一步都需要纪律和一致性。这就是你身上所有神奇之处所在。我不相信我们生来就拥有某种技能。当然，我们可能比其他人更快地学会某些东西。我相信我们可以成为我们想要成为的人，如果你有激情、有欲望并且愿意付出努力，你就能实现任何目标。
- en: Good luck in all you do.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在你所做的一切中祝你好运。
- en: Claudia de Luna
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 克劳迪娅·德·卢纳
- en: '*After graduating from Stanford University, Claudia started working for NASA
    JPL initially in software development and then moving into enterprise networking.
    In 2006, she left JPL and worked in several verticals, including biotech and financial.
    In 2015, while working for one of the largest Cisco VARs, she began automating
    network workflows. Today, she works for a boutique consulting firm, Enterprise
    Infrastructure Acceleration, Inc., helping Fortune 100 companies deploy network
    and security programs at speed.*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*克劳迪娅在斯坦福大学毕业后，最初在NASA JPL工作，从事软件开发，后来转向企业网络。2006年，她离开了JPL，在多个领域工作，包括生物技术和金融。2015年，在为最大的Cisco
    VAR之一工作时，她开始自动化网络工作流程。如今，她在一家精品咨询公司，企业基础设施加速公司，帮助企业500强公司快速部署网络和安全计划。*'
- en: Network automation truths... so far...
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络自动化真理...到目前为止...
- en: 1 – Automation will not replace network engineers
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1 – 自动化不会取代网络工程师
- en: Make no mistake, the discipline of network engineering is not going anywhere.
    How we interact with devices is amid revolution to be sure, but the knowledge
    of how a TCP three-way handshake takes place or how a routing protocol works is,
    and will continue to be, essential. In fact, the depth of this knowledge will
    likely increase as scripting networking workflows will require an in-depth understanding.
    I never truly understood Cisco’s **Application Centric Infrastructure** (**ACI**)
    until I scripted a complete data center ACI fabric build-out.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 千万不要误会，网络工程这一学科是不会消失的。我们与设备的互动确实正处于革命之中，但关于TCP三次握手如何进行或路由协议如何工作这些知识，现在和将来都将是至关重要的。实际上，随着需要深入理解网络工作流程的脚本编写，这种知识的深度可能会增加。直到我编写了一个完整的数据中心ACI网络构建脚本，我才真正理解了思科的**应用中心基础设施**（**ACI**）。
- en: 2 – The power of text and revision control
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2 – 文本和版本控制的力量
- en: This does not get said often enough (or ever), but text is all-powerful. It
    is the lowest common denominator as well as the input to rich typesetting output
    with which to convey a written language (programming or otherwise). While putting
    together a richly formatted book or a computer script, you can take the simple
    text and snapshot its evolution over time. In this way, you know the exact nature
    of every change. This is revision control. Originally developed to track code
    changes, today, as with network automation, you can put configurations, configuration
    templates, state, diagrams, documents, and almost anything under revision control.
    Before you leap into scripting, take a little bit of time to learn a revision
    control system such as Git and GitHub.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这一点并不经常被提及（或从未被提及），但文本是无所不能的。它是最低的共同分母，也是传达书面语言（编程或其他）的丰富排版输出的输入。在制作一本格式丰富的书籍或计算机脚本时，你可以简单地记录文本随时间的演变。这样，你可以确切地知道每一次变化的本质。这就是版本控制。最初是为了跟踪代码变化而开发的，如今，正如网络自动化一样，你可以将配置、配置模板、状态、图表、文档和几乎所有东西都置于版本控制之下。在你开始脚本编写之前，花点时间学习Git和GitHub等版本控制系统。
- en: While we are on the topic of text, get a real text editor! Notepad and TextEdit
    are only handy if you have no other option (and learn `vi`—see *9 – Linux and
    regular expressions*). Invest the time to get familiar with more advanced text
    editors such as Sublime or Atom.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论文本时，请使用真正的文本编辑器！只有在没有其他选择的情况下（并且学习`vi`——见第9节“Linux和正则表达式”），记事本和TextEdit才方便。花时间熟悉更高级的文本编辑器，如Sublime或Atom。
- en: 3 – Just start
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3 – 立刻开始
- en: Approaching something new and unfamiliar can be daunting. Just start. If you
    are new to programming, search for resources on basic programming concepts or
    programming fundamentals. This is an important step if you are *NOT* familiar
    with the concepts of variables, scopes, operators, control structures, and namespaces.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 面对新鲜和不熟悉的事物可能会感到害怕。只需开始行动。如果你是编程新手，可以搜索有关基本编程概念或编程基础的资源。如果你不熟悉变量、作用域、运算符、控制结构和命名空间等概念，这是一个重要的步骤。
- en: Once you have a footing in these concepts, write down a particular problem you
    want to solve, pick a language, and **dive right in**. For me, it was generating
    configurations. In fact, for every new programming language I learn, that is the
    first problem I solve. I’m just working with text and not actual devices, so I
    can’t get into too much trouble. If there is a small problem at work that you
    are comfortable tackling, start there. Define the problem clearly, detail the
    desired outcome, and just start. Jot down the specific steps and tackle each one
    individually.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你掌握了这些概念，写下你想要解决的问题，选择一种语言，然后**立刻深入其中**。对我来说，是生成配置。实际上，对于我学习的每一种新编程语言，我都会解决第一个问题。我只是处理文本，而不是实际设备，所以我不太可能陷入麻烦。如果你在工作中遇到一个小问题，你愿意解决，就从那里开始。明确定义问题，详细说明期望的结果，然后开始。记下具体步骤，并逐一解决。
- en: 'Let’s say you want to generate configuration commands for configuring the same
    VLAN on 10 devices and, just to keep it simple, output the necessary commands
    you need to run on each device to the screen. Your first script could be as simple
    as taking a list of devices and printing out to the screen the following configuration:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要为10台设备配置相同的VLAN生成配置命令，为了简单起见，将每个设备上需要运行的必要命令输出到屏幕上。你的第一个脚本可能就像以下这样，简单地列出设备并打印出以下配置：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once you have that, you will want to save the output to a text file. After that,
    you will want a file for each switch. After that, you will start to customize
    each switch. You get the idea. Every enhancement will teach you something new.
    Every new feature will expand your experience.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了这些，你就会想要将输出保存到文本文件中。之后，你将想要为每个开关创建一个文件。之后，你将开始为每个开关进行定制。你明白了。每一次增强都会让你学到新的东西。每一个新特性都会扩展你的经验。
- en: 4 – Embrace the landscape
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4 – 拥抱变化
- en: Doubly daunting is the fact that you are trying to learn something new, but
    there is so much to learn! See *3 – J**ust start*. The experience you get from
    learning something and then abandoning it for something better is invaluable.
    Being able to articulate why you prefer one solution over another or why you are
    recommending a particular approach will immediately set you apart and will instantly
    generate credibility. This makes you a true engineer.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 更令人畏惧的是，你正在尝试学习新事物，但有很多东西要学！参见*3 – J**ust start*。从学习某事物然后放弃它以获得更好的事物中获得的经验是无价的。能够阐述你为什么喜欢一个解决方案而不是另一个，或者为什么你推荐特定的方法，将立即让你脱颖而出，并立即产生可信度。这使得你成为一个真正的工程师。
- en: I believe there is as much value in trying something and abandoning it as there
    is in trying something and adopting it. This process makes you credible. It moves
    you from someone who says, *You should use X. Why? Uh.. because ...* to the person
    who says, *For what you are trying to do, you should use X because X has these
    features or is easier to support in your environment or ...*. Cultivate the ability
    to articulate why you are recommending something, along with why you are not recommending
    something.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为尝试某事然后放弃它和尝试某事然后采纳它一样有价值。这个过程使你变得可信。它让你从那种说“你应该使用X。为什么？嗯...因为...”的人转变为那种说“对于你试图做的事情，你应该使用X，因为X具有这些特性或更容易在你的环境中得到支持或...”的人。培养阐述你为什么推荐某事物，以及为什么你不推荐某事物的能力。
- en: That experience, that *credibleness*, has served me well as a female in a largely
    male-dominated industry. I’ve shown up for a job or a meeting with males and had
    the client speak only to my male counterparts. That credibility and these fact-based
    recommendations always win the day. They may start out talking only to my male
    teammates, but they end up speaking with me. That will always hold true and not
    just for gender.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 那种经验，那种可信度，作为一个在男性主导的行业中的女性，对我大有裨益。我去面试或参加会议时，客户只和我的男性同事说话。那种可信度和基于事实的建议总是能赢得胜利。他们可能一开始只和我男性同事交谈，但最终他们会和我交谈。这始终是真理，而不仅仅是性别问题。
- en: 5 – Share and package
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5 – 分享和打包
- en: It’s tempting to code for yourself but think about the impact you can have if
    you empower your team. To that end, as you write your scripts, think about how
    you would write them if you had to share them. Think about teaching a teammate
    who has zero programming or even CLI experience to execute one of your scripts.
    This will get you thinking about how to package your script. There are many options,
    including turning your script into a Windows executable if that is your *audience,*
    or front-ending your script by a GUI or web page if your team leverages different
    operating systems.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为自己编写代码很有诱惑力，但想想如果你赋予你的团队力量，你可以产生多大的影响。为此，当你编写脚本时，想想如果你不得不分享它们，你会如何编写它们。想想教一个没有任何编程或甚至CLI经验的同学执行你的一个脚本。这将让你思考如何打包你的脚本。有许多选择，包括如果你的受众是Windows用户，将你的脚本转换为Windows可执行文件，或者如果你的团队使用不同的操作系统，通过GUI或网页来前端你的脚本。
- en: 6 – No limits
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 6 – 无限可能
- en: In network automation, it’s very easy to focus solely on automation for infrastructure.
    Don’t do that! Think about an environment where your final documentation was automatically
    generated by the configurations. Have to do lots of change control tickets that
    are often similar? Think about an environment where your change control information
    was generated by a script. And the closeout is also generated by a script. Want
    to add a diagram to your documentation? Think about a world where your diagram
    was autogenerated from your new topology. Have to interface with another team
    and share information with them? How appreciative would they be if you shared
    just the information that they needed in a consistent format rather than making
    them slog through an email thread or an exasperating Excel spreadsheet?
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络自动化中，很容易只关注基础设施的自动化。不要这样做！考虑一个环境，其中你的最终文档是由配置自动生成的。需要处理许多经常相似的变化控制票据？考虑一个环境，其中你的变化控制信息是由脚本生成的。关闭工作也是由脚本生成的。想要在你的文档中添加图表？考虑一个世界，其中你的图表是从新的拓扑自动生成的。需要与另一个团队接口并共享信息？如果他们只需要以一致格式共享所需信息，而不是让他们在邮件线程或令人沮丧的Excel电子表格中挣扎，他们会多么感激？
- en: 7 – Understand data structures
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7 – 理解数据结构
- en: 'How you put your data together has far-reaching implications. Get comfortable
    with complex data structures. By data structures, I mean lists and dictionaries
    and every combination thereof. Ask yourself: will my code be clearer if I iterate
    over a list of dictionaries or if I pick data from a set of keys? Get comfortable
    extracting the data you need when these data structures are highly nested. For
    more on this topic, see my post *Decomposing Data Structures* (in the *Further*
    *reading* section).'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你如何组合你的数据有着深远的影响。熟悉复杂的数据结构。这里所说的数据结构，是指列表、字典以及它们的任何组合。问问自己：如果我从字典列表中迭代或从键集合中选取数据，我的代码会更清晰吗？当这些数据结构高度嵌套时，要习惯提取所需的数据。关于这个话题的更多内容，请参阅我的文章《分解数据结构》（在“进一步阅读”部分）。
- en: 8 – Learn about and use APIs
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 8 – 了解并使用API
- en: Many modern network devices now offer APIs. These APIs will generally return
    the answers to queries in structured data (See *7 – Understand data structures*).
    If you don’t have to log in to a switch, pull a configuration, or show a command
    in semi-formatted text and then parse that text, don’t! Use an API. In addition
    to APIs offered by infrastructure appliances and network devices, there is a wealth
    of data available, often with open and free APIs.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 许多现代网络设备现在提供API。这些API通常以结构化数据的形式返回查询结果（参见“7 – 理解数据结构”）。如果你不需要登录交换机、拉取配置或以半格式化文本显示命令，然后解析该文本，请不要这样做！使用API。除了基础设施设备和网络设备提供的API之外，还有大量数据可用，通常带有开放和免费的API。
- en: Need to look up the vendor OUI of a MAC address? There is a public and free
    API for that. Need to look up the physical location of an IP address? There is
    a public and free API for that. Enrich your data, reports, and information with
    APIs.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 需要查找MAC地址的供应商OUI？有一个公开免费的API可以做到这一点。需要查找IP地址的物理位置？也有一个公开免费的API可以做到这一点。用API丰富你的数据、报告和信息。
- en: 9 – Linux and regular expressions
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 9 – Linux和正则表达式
- en: I can’t stress this enough. A background in Unix is invaluable. Many infrastructure
    devices start out with a Unix or Linux base. Having this background will further
    distinguish you from the run-of-the-mill network engineer. Part of having some
    Linux knowledge should include knowledge of regular expressions. Because network
    automation invariably requires some parsing, having a familiarity with regular
    expressions will help you do your own parsing and will help you work with other
    parsing modules. The more sophisticated text editors understand regular expressions
    to facilitate your searches.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我无法强调这一点的重要性。Unix背景是无价的。许多基础设施设备最初都是以Unix或Linux为基础的。拥有这样的背景将使你与普通网络工程师区别开来。拥有一些Linux知识应包括对正则表达式的了解。因为网络自动化不可避免地需要一些解析，熟悉正则表达式将帮助你进行自己的解析，并帮助你与其它解析模块协同工作。更高级的文本编辑器理解正则表达式以方便你的搜索。
- en: 10 – Wander and explore
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 10 – 漫游和探索
- en: Finally, set aside time to explore. I try to set aside at least two Sunday mornings
    a month where I take something I heard about or read about or saw and start exploring,
    or I take a problem and research solutions. No destination in mind, I just see
    where it takes me. Half the time, I start with one thing and wind up basically
    on another planet. I’m going to take an Udemy course on MongoDB and I wind up
    trying to create the best regular expression I can for matching an IP address.
    *I’m not hung up on this completion thing* (at least on Sundays).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，留出时间进行探索。我尽量每个月留出至少两个星期天早上，用来探索我听说、读到或看到的东西，或者我选择一个问题并研究解决方案。没有特定的目的地，我只是看看它将我带到哪里。一半的时间，我从一件事开始，最后基本上到了另一个星球。我打算参加一个关于MongoDB的Udemy课程，结果我试图创建一个尽可能好的正则表达式来匹配IP地址。*我对完成这件事并不执着*（至少在星期天是这样）。
- en: Alexis de Talhouët
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 亚历克斯·德·塔尔胡埃特
- en: '*Alexis de Talhouët is an avid network automation expert always trying to lessen
    network complexity by getting involved in open source communities; he was mainly
    involved with OpenDaylight (ODL) and Open Network Automation Platform (ONAP),
    both hosted by The Linux Foundation, where he held Technical Steering Committee
    membership.*'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*亚历克斯·德·塔尔胡埃特是一位热衷于网络自动化领域的专家，他总是试图通过参与开源社区来降低网络复杂性；他主要参与了由Linux基金会主办的OpenDaylight
    (ODL) 和 Open Network Automation Platform (ONAP)，在那里他担任技术指导委员会成员。*'
- en: I initially started my career as a Java developer, with a massive passion for
    networking. At first, it felt very weird to build systems automating networks
    without really understanding them. But throughout the years, I learned to be sufficiently
    proficient in networking to properly build automation platforms around it. Such
    knowledge can be acquired either by building labs, following workshops, or, for
    the luckiest ones, spending some time in a network operation center.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我最初是以Java开发者的身份开始我的职业生涯的，对网络有着极大的热情。起初，感觉非常奇怪，在并不真正理解网络的情况下构建自动化网络的系统。但经过多年的努力，我学会了在足够精通网络的基础上，围绕它构建自动化平台。这种知识可以通过构建实验室、参加研讨会，或者对于幸运的人来说，在网络运营中心工作一段时间来获得。
- en: Something that struck me the most, and is still true, is how much the path to
    network automation can be different if you come from a software developer versus
    a network engineering background. Both have their own acronyms, processes, standards,
    and so on, and yet, with the rise of cloud-native, Infra as Code, Network as Code,
    GitOps, and so on, we saw both worlds adopting similar concepts, methodologies,
    and tooling to do the initial provisioning and operate the entire life cycle of
    what was automated. So, at a high level, the *how* to perform the automation became
    fairly common, whereas the *what* still remains fairly domain-specific. When embarking
    on such a journey, we should really take advantage of this ecosystem to accelerate
    our automation strategies.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 最让我印象深刻，并且至今仍然如此的是，如果你来自软件开发背景而不是网络工程背景，网络自动化的路径可以有多么不同。两者都有自己的缩写、流程、标准等等，然而，随着云原生、基础设施即代码、网络即代码、GitOps等的兴起，我们看到了这两个世界都在采用类似的概念、方法和工具来进行初始配置和操作自动化的整个生命周期。因此，从高层次来看，*如何进行自动化*变得相当普遍，而*要自动化什么*仍然相对特定于领域。当我们开始这样的旅程时，我们应该真正利用这个生态系统来加速我们的自动化策略。
- en: In my opinion, the basis of network automation is the configuration to apply
    a (golden) template of that configuration with well-defined (typed) parameters,
    and the protocol used to apply that configuration. Another very important element
    required for service assurance is the notion of telemetry, to retrieve the running
    state and get updates on state changes and state.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，网络自动化的基础是对配置进行设置，应用一个（黄金）模板，该模板具有定义良好的（类型化）参数，以及应用该配置所使用的协议。对于服务保证而言，另一个非常重要的元素是遥测的概念，用于检索运行状态并获取状态变化和状态的更新。
- en: With my developer hat on, what matters most is the API/contract exposed by the
    network equipment/network function; these are commonly represented by the device
    YANG models. The main issue is, given the network is non-homogeneous, each vendor
    has its own models, and exposes more or less its functionalities. Even though
    there is a lot of effort being put into standardizing the configuration and monitoring
    of network equipment (OpenConfig, OpenROADM, and IETF), this is certainly not
    fully adopted, and thus still requires a lot of *cookie-cutter* handling.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 穿上我的开发者帽子，最重要的是网络设备/网络功能暴露的API/合同；这些通常由设备YANG模型表示。主要问题是，鉴于网络是非同质化的，每个供应商都有自己的模型，并或多或少地暴露其功能。尽管在标准化网络设备的配置和监控（OpenConfig、OpenROADM和IETF）方面投入了大量努力，但这肯定还没有得到全面采用，因此仍然需要大量的*一刀切*处理。
- en: Network automation strategies must account for this and accordingly design their
    platform to accept any type of network automation techniques. Of course, the more
    the said platform attempts to abstract that non-homogeneous environment, the more
    maintenance there is, as the shim layer that will convert from the device’s native
    API to that higher-level business API will have to keep up with the pace of device
    upgrade and device model change.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 网络自动化策略必须考虑到这一点，并相应地设计其平台以接受任何类型的网络自动化技术。当然，该平台试图抽象这种非同质化环境的程度越高，维护工作就越多，因为将设备原生API转换为高级业务API的适配层必须跟上设备升级和设备型号变化的步伐。
- en: 'This put forward the following design decision: should you strive to have one
    abstraction layer for your entire network and maintain a shim layer that talks
    southbound to devices?'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这提出了以下设计决策：你是否应该努力为整个网络实现一个抽象层，并维护一个与设备南向通信的适配层？
- en: If yes, you’d better be armed with a team of developers to build and maintain
    that abstraction.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是的话，你最好配备一个开发团队来构建和维护这个抽象。
- en: 'If not, I suggest solving the issue by letting the network engineers build
    that golden template for each network service and have a platform to load, version,
    and interact with them. And that interaction might be a shell script, a Python
    snippet, a Go program, an Ansible playbook, and so on: whatever might work for
    that specific team, as long as the said platform exposes a REST API with the ability
    to execute it. That way, network teams are empowered to automate by exposing the
    API and can stop worrying about the platform. The onus of keeping these golden
    templates and scriptlets becomes theirs.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不是，我建议通过让网络工程师为每个网络服务构建黄金模板，并有一个平台来加载、版本控制和与之交互来解决该问题。这种交互可能是一个shell脚本、一个Python片段、一个Go程序、一个Ansible剧本等等：只要该平台能够暴露一个能够执行它的REST
    API，对特定团队来说什么都可以。这样，网络团队就可以通过暴露API来自动化，并停止担心平台。保持这些黄金模板和脚本的责任就落在了他们身上。
- en: Another important aspect is having an orchestration engine enabling the definition
    of a workflow consuming these domain-specific APIs. With maturity and governance,
    enforcing pre-check and post-check tasks should become a must-have in these workflows.
    Also, always consider how to roll back if the post-check isn’t successful. Applying
    and rolling back configuration can be tricky when doing network-wide transactions;
    consider building helper functions to increase reusability.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要方面是拥有一个编排引擎，它能够定义一个使用这些特定领域API的工作流程。随着成熟度和治理的加强，强制执行预检查和后检查任务应成为这些工作流程的必备项。同时，始终考虑如果后检查不成功，如何回滚。在网络范围内的交易中应用和回滚配置可能会很棘手；考虑构建辅助函数以增加可重用性。
- en: These orchestration engines can either be distributed or centralized, but often
    there will be an end-to-end service orchestration that will consume these exposed
    domain-specific workflows.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这些编排引擎可以是分布式的，也可以是集中的，但通常会有一个端到端的服务编排来消费这些公开的特定领域工作流程。
- en: Finally, one of the key components to keep in mind is the inventory of the network
    elements/functions. As soon as a workflow does something, it is important to have
    and keep the inventory up to date so that service assurance workflows can properly
    act upon the active and available state of the network.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，需要牢记的一个关键组件是网络元素/功能的清单。一旦工作流程执行了某些操作，就非常重要地保持清单更新，以便服务保证工作流程可以正确地针对网络的活动和可用状态采取行动。
- en: Given most of the network automation is currently done either through NETCONF
    or gNxI southbound protocols, YANG has become the de facto model standard to define
    and express device configuration, and the tooling around YANG is mature enough
    to rely on XML/JSON for the golden templates. Rendering these templates is also
    something easily doable, regardless of the technology used, even if enforcing
    YANG-defined types. Considering all of this, when starting a network automation
    journey, I wouldn’t advocate for a specific programming/scripting language, but
    rather let each team manage that for themselves. But I would definitely advocate
    for standardizing as much as possible the southbound protocol and interaction.
    As the journey matures, and you feel that, as an organization, you have a better
    handle on a specific technology, then you can build more helpers and start putting
    forward some company-wide practice for automation.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到目前大多数网络自动化都是通过NETCONF或gNxI南向协议完成的，YANG已经成为定义和表达设备配置的事实上的模型标准，围绕YANG的工具已经足够成熟，可以依赖XML/JSON作为黄金模板。无论使用什么技术，渲染这些模板都是一件容易做到的事情，即使是在强制执行YANG定义的类型的情况下。考虑到所有这些，当开始网络自动化之旅时，我不会提倡特定的编程/脚本语言，而是让每个团队自己管理。但我肯定会提倡尽可能标准化南向协议和交互。随着旅程的成熟，当你感觉到作为一个组织，你对某种特定技术有了更好的掌握时，那么你可以构建更多的助手，并开始提出一些公司范围内的自动化实践。
- en: As the network automation domain evolves, infrastructure provisioning is also
    evolving. With the rise of Kubernetes, the latest trend is to extend the Kubernetes
    API to provide **Custom Resource Definition** (**CRD**) abstracting hardware and
    software configuration, and supporting their entire lifecycle through the use
    of an Operator. An Operator exposes the CRD as a K8S native API and contains the
    logic for managing the end-to-end lifecycle of a CRD instance. This is shifting
    the responsibility of operation to the Operator provider and is fostering intent-driven
    automation. As network equipment vendors adopt this concept, network automation
    will become even closer to application lifecycle management. And with this trend,
    one of the main programming languages being put forward is Go.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 随着网络自动化领域的演变，基础设施配置也在演变。随着Kubernetes的兴起，最新的趋势是将Kubernetes API扩展以提供**自定义资源定义**（**CRD**），抽象硬件和软件配置，并通过使用Operator支持它们的整个生命周期。Operator将CRD公开为K8S原生API，并包含管理CRD实例端到端生命周期的逻辑。这正在将操作责任转移到Operator提供商，并促进了以意图驱动的自动化。随着网络设备厂商采用这一概念，网络自动化将更加接近应用生命周期管理。随着这一趋势，被提出的主要编程语言之一是Go。
- en: One project to look at is Nephio, the latest Linux Foundation networking initiative
    aiming at providing network controllers using Kubernetes API extensions.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一看的项目是Nephio，这是Linux基金会的最新网络倡议，旨在通过Kubernetes API扩展提供网络控制器。
- en: Happy coding!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 开心编码！
- en: John Doak
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 约翰·道克
- en: '*John Doak is a Principal Software Engineer Manager at Microsoft, an ex-Google
    Network Systems Engineer (SRE), and an ex-LucasArts/Lucasfilm Network Engineer.*'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*约翰·道克是微软的高级软件工程师经理，前谷歌网络系统工程师（SRE），前LucasArts/Lucasfilm网络工程师。*'
- en: I cut my teeth in networking at LucasArts after I asked the Director of IT what
    my next career step was. He made me a network engineer on the spot and said to
    go buy a Cisco book and configure a router for a new T1 we just got. There is
    nothing quite like staring at a box in a closet, hoping that the Cisco book you
    have placed on top of your head will give you knowledge via osmosis. I spent the
    next several years there automating my way out of doing work (portals that reset
    network MAC security parameters, moved ports to new VLANs, auto-balanced inbound
    BGP traffic using route maps, and so on).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在我询问IT总监我的下一步职业发展是什么之后，我在LucasArts开始了我的网络生涯。他立刻让我成为了一名网络工程师，并让我去买一本思科的书，配置我们刚刚获得的新的T1路由器。没有什么比在壁橱里盯着一个盒子，希望你放在头顶上的思科书通过渗透作用给你知识更令人印象深刻了。我在那里度过了接下来的几年，通过自动化我的工作（例如，重置网络MAC安全参数的门户，将端口移动到新的VLAN，使用路由图自动平衡入站的BGP流量等等）。
- en: I moved from there to Google, where I spent the bulk of my time automating the
    vendor backbone known as **Backend Backbone** (**B2**). I wrote the first autonomous
    services that programmed the various routers. Then, I built the first workflow
    orchestration system for the network with some very talented software engineers
    (Sridhar Srinivasan, Benjamin Helsley, and Wencheng Lu), and then I went on to
    build the next version (because you never get it right the first time). The biggest
    change between the first and second was moving from Python to Go. We were able
    to decrease our bugs, increase the number of workflows by 10x, and made it possible
    to refactor the code without breaking everything. I spent the next few years migrating
    all of NetOps onto Go from Python and building automations that configured the
    network on a daily basis (BGP mesh deployments, LSP metrics, SRLG configuration
    deployments, edge router turn-ups, BGP-LU updates, ISIS metrics, LSP optimizations,
    and so on). One of the keys for making that scalable was another service I wrote
    that allows sending an RPC that could configure any vendor router we supported
    for a change (such as configuring a BGP peer).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我从那里转到谷歌，在那里我大部分时间都在自动化名为**后端骨干**（**B2**）的供应商骨干。我编写了第一个自动化的服务，该服务可以编程各种路由器。然后，我和一些非常有才华的软件工程师（Sridhar
    Srinivasan、Benjamin Helsley和Wencheng Lu）一起建立了网络的第一套工作流程编排系统，然后我又继续构建下一个版本（因为你永远不会第一次就做对）。第一版和第二版之间最大的变化是从Python迁移到Go。我们能够减少错误，将工作流程数量增加10倍，并使代码重构成为可能而不破坏一切。接下来几年，我将所有NetOps从Python迁移到Go，并构建了每天配置网络的自动化（BGP网状部署、LSP度量、SRLG配置部署、边缘路由器启动、BGP-LU更新、ISIS度量、LSP优化等）。使这一过程可扩展的关键是我编写的一个服务，它允许发送一个RPC来配置我们支持的任何供应商路由器（例如配置BGP对等体）。
- en: Now, I work at Microsoft where I no longer am working in networking, but write
    Go SDKs and manage a software group that deploys software to validate data, supply
    gating controls, audit data sources, and so on. This includes running Kubernetes
    clusters, deploying software, and building tools to run these systems.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我在微软工作，我不再从事网络工作，而是编写Go SDK并管理一个软件团队，该团队部署软件以验证数据、提供门控控制、审计数据源等。这包括运行Kubernetes集群、部署软件和构建运行这些系统的工具。
- en: Finally, I’m the author of the book *Go* *For DevOps*.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我是《Go for DevOps》一书的作者。
- en: 'If I could give one piece of advice for network automation: use a centralized
    workflow orchestration system. The benefits of a centralized workflow system to
    allow visibility into what is happening in your network, allow emergency controls,
    and provide policy enforcement have been proven time and time again.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我能给网络自动化提一条建议：使用中心化的工作流程编排系统。中心化工作流程系统的益处，包括允许了解网络中正在发生的事情、允许紧急控制和提供策略执行，已经被一次又一次地证明。
- en: So, what do I mean by centralized workflow enforcement? You want an RPC service
    that exists and has a set of actions that the service can do. Your tools submit
    an RPC describing the set of actions and monitor the running of that from the
    server.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我所说的中心化工作流程执行是什么意思呢？你想要一个存在的RPC服务，并且该服务有一系列可以执行的操作。你的工具提交一个描述操作集的RPC，并从服务器监控其运行。
- en: This means all executions are running out of the same place. You can then build
    emergency tools to stop problem network executions in case there are issues (or
    simply pause them). You can enforce concurrency limits on how many network devices
    can be touched within a time period. You can provide network health checks that
    have to run before an automation can run.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着所有执行都在同一个地方运行。然后你可以构建紧急工具来停止有问题的网络执行（或者简单地暂停它们）。你可以强制限制在一段时间内可以接触多少网络设备。你可以在自动化运行之前提供网络健康检查。
- en: Centralization is key to controlling the automation on your network. When you’re
    in a small group, it is easy to know what is going on. When your group grows much
    beyond five people, this starts to become impossible.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 中心化是控制网络自动化关键。当你在小团队中时，很容易了解正在发生的事情。当你的团队人数远远超过五人时，这开始变得不可能。
- en: Two of the largest outages I witnessed at Google were due to engineers running
    scripts on their desktops that mutated the network while they were working outside
    their time zone. Backtracking to who/what was causing the issue required scanning
    TACACS logs to find the culprits. And if the scripts had been making ongoing changes,
    no one could have stopped it without tracking down someone in security to disable
    their credentials. That precious time might mean that your entire network is down.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我在谷歌见证的最大两次故障中，都是由于工程师在他们的桌面电脑上运行脚本，在他们的时区外工作时改变了网络。要回溯到谁/什么导致了问题，需要扫描TACACS日志以找到罪魁祸首。如果脚本一直在进行持续更改，没有人能够在找到安全部门的人禁用他们的凭证之前停止它。那宝贵的时间可能意味着你的整个网络都会中断。
- en: If you’d like to look at a basic workflow system that could be used for network
    actions, see my *Designing for Chaos* chapter in the *Go For* *DevOps* book.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想看看一个可以用于网络操作的基本工作流程系统，请参阅我在*Go For DevOps*书中的*Designing for Chaos*章节。
- en: The packets must flow!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 数据包必须流动！
- en: Roman Dodin
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Roman Dodin
- en: '*Roman is a Network Automation Engineer with a product management hat signed
    by Nokia. Besides his professional affiliation, he is a renowned open source leader,
    maintainer, and contributor in the network automation landscape. You might recognize
    him as the current maintainer of the Containerlab project, which you will come
    across while working on the practical exercises provided within this book.*'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*Roman是一位戴着诺基亚产品管理帽的网络自动化工程师。除了他的专业关系外，他还是网络自动化领域的知名开源领导者、维护者和贡献者。你可能认识他作为Containerlab项目的当前维护者，你将在本书提供的实践练习中遇到这个项目。*'
- en: I assume you are already into Go, and you want to see how Go can apply to the
    network automation problem space, or you’re curious to know *why Go for network
    automation*. Allow me to share why I once switched to Go, what were the main drivers
    for that move, and why I think it is a perfect time for network engineers to start
    looking at Go.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设你已经对Go有所了解，并想看看Go如何应用于网络自动化问题领域，或者你对为什么选择Go进行网络自动化感到好奇。让我分享一下我为什么曾经转向Go，这次转变的主要驱动因素，以及为什么我认为现在是网络工程师开始关注Go的绝佳时机。
- en: Before delving into Go, I used Python for all things network automation; no
    big surprises here. For the past couple of decades, the *usual* network automation
    workflow revolved around crafting/templating CLI commands, sending them over SSH/Telnet
    to the network element’s CLI process, parsing the replies, and processing them.
    Back then, you were lucky to have any kind of vendor-provided REST API. Hence,
    most automation projects were using screen scraping libraries with all the pains
    of dealing with unstructured data in an ad hoc way.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究Go之前，我使用Python进行所有网络自动化工作；这里没有太大的惊喜。在过去几十年里，*通常*的网络自动化工作流程围绕着编写/制作CLI命令模板，通过SSH/Telnet将它们发送到网络设备的CLI进程，解析回复并处理它们。当时，能拥有任何类型的供应商提供的REST
    API就已经很幸运了。因此，大多数自动化项目都使用了屏幕抓取库，并承受着以临时方式处理非结构化数据的痛苦。
- en: Meanwhile, in the IT realm, the proliferation of containerization, micro-segmentation,
    and Infra-as-Code paradigms was coupled with the Go language mounting solid ground.
    The simplicity of the language syntax, coupled with a rich standard library, compiled
    nature, first-class concurrency, and decent performance, made Go win lots of developers’
    hearts. In no time, we witnessed a new ecosystem—**Cloud Native Computing Foundation**
    (**CNCF**)—emerge with a new set of requirements on how applications get deployed,
    run, and interface with one another. Consequently, the community revisited the
    networking layer to comply with the new way of running applications in an API-first,
    cloud-native setting.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，在IT领域，容器化、微分段和基础设施即代码（Infra-as-Code）范式的普及与Go语言的稳步发展相辅相成。该语言语法简洁，结合丰富的标准库、编译特性、一流的并发性和良好的性能，使得Go赢得了众多开发者的青睐。不久，我们见证了新生态系统的诞生——**云原生计算基金会**（**CNCF**），它提出了一套新的要求，关于应用程序的部署、运行和相互交互的方式。因此，社区重新审视了网络层，以适应在以API优先、云原生环境下的新应用程序运行方式。
- en: 'With time, the waves made in the sea of IT reached the networking island. Nowadays,
    any decent network OS carries on top a set of management APIs with structured
    and modeled data for anyone to consume. The modern automation workflow assumes
    leveraging those APIs solely in a concurrent, performant, and cloud-native way.
    And you guessed it right: being able to write concurrent, performant, easily deployable
    applications leveraging the sheer set of cloud-native tools and libraries is what
    Go offers to network automation engineers out of the box.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，在IT海洋中掀起的波浪也触及了网络岛屿。如今，任何不错的网络操作系统都在其上运行一套管理API，为任何人提供结构化和模型化的数据。现代自动化工作流程假设仅以并发、高性能和云原生的方式利用这些API。正如你所猜想的：能够编写利用大量云原生工具和库的并发、高性能、易于部署的应用程序，这正是Go为网络自动化工程师提供的现成解决方案。
- en: Even with the inertia levels we have in networking, the ecosystem of network-focused
    projects is growing fast. As you will see for yourself, getting through the chapters
    of this book, typical network-related libraries have been created for Go already.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在网络领域我们拥有如此大的惯性，以网络为中心的项目生态系统也在快速发展。正如您自己会看到的，通过这本书的章节，已经为Go语言创建了典型的网络相关库。
- en: Another critical player in the network automation/management field is the OpenConfig
    consortium. Spearheaded by Google with the participation of network operators,
    OpenConfig conceived many network automation projects that gravitate toward Go—`goyang`,
    `ygot`, `kne`, `ondatra`, and `featureprofiles`. Those who want to get a grasp
    of what these projects have to offer will have to get a hold of Go. As it often
    happens, the tools that we will consider a commodity in the future are being shaped
    by hyper-scalers today.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 网络自动化/管理领域的另一个关键参与者是OpenConfig联盟。由谷歌牵头，网络运营商参与，OpenConfig构想了许多围绕Go语言的网络自动化项目，包括`goyang`、`ygot`、`kne`、`ondatra`和`featureprofiles`。那些想要了解这些项目能提供什么的人将不得不掌握Go语言。正如经常发生的那样，我们未来可能视为商品的工具和库正在由超大规模公司今天塑造。
- en: 'In summary, if your network automation activities have any of the following
    properties, you might consider Go as a tool for the job:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，如果你的网络自动化活动具有以下任何特性，你可能需要考虑Go作为这项工作的工具：
- en: Require being performant at scale.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要在规模上保持高性能。
- en: Have a strong use case for concurrent execution.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有强大的并发执行用例。
- en: Use generated data classes off of YANG models.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基于YANG模型生成的数据类。
- en: Leverage Kubernetes control plane.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用Kubernetes控制平面。
- en: Integrate with CNCF tools and projects.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与CNCF工具和项目集成。
- en: Make use of OpenConfig projects.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用OpenConfig项目。
- en: Echoing others, Go is not an ultimate answer or a replacement for Python/Java/and
    so on. It is, though, a programming language with a solid set of strong points,
    a large community, and a flourishing ecosystem. In my opinion, it has a bright
    future in the network automation domain, and this book should be an excellent
    aid for those who want to see the practical aspects of using Go for network automation
    today.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 与他人一样，Go不是终极答案或Python/Java等的替代品。然而，它是一种具有强大优势、庞大社区和繁荣生态系统的编程语言。在我看来，它在网络自动化领域有着光明的未来，这本书应该是对那些想要了解今天使用Go进行网络自动化实际方面的一个极好的辅助。
- en: David Gee
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 大卫·吉
- en: '*David Gee is a Director of Product Management at Juniper Networks. He blogs
    at dave.dev, previously ipengineer.net. He is the creator of the JUNOS Terraform
    Automation Framework (JTAF), among other things. Twitter: @davedotdev*'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*大卫·吉是Juniper Networks的产品管理总监。他在dave.dev（之前是ipengineer.net）上写博客。他是JUNOS Terraform
    Automation Framework（JTAF）的创造者，以及其他事物。Twitter: @davedotdev*'
- en: If you’ve built knowledge in the network space, chances are you’ve purchased
    and inhaled knowledge from *Cisco Press* books. These books, for the most part,
    are well structured and provide knowledge that opens up like a flower. For those
    looking to build automation knowledge, good sources of knowledge that are multi-vendor-friendly
    are hard to come by. The industry itself is fairly immature, and network engineers
    developing software skills vertically in the networking silo tend to make very
    questionable decisions. This isn’t the fault of the network automation engineer
    but is due to a lack of discipline that’s present in the industry. In plain-old
    networking, if you configure BGP badly, a session might not come up. If you accidentally
    leak prefixes, then someone will correct your knowledge pretty quickly. The next
    time you configure BGP, you probably won’t make that mistake again!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经在网络领域建立了知识，那么你很可能已经购买了并吸收了来自*Cisco Press*书籍的知识。这些书籍大部分结构良好，提供像花朵一样展开的知识。对于那些想要建立自动化知识的人来说，难以找到多厂商友好的知识来源。该行业本身相对不成熟，网络工程师在网络安全域垂直发展软件技能时往往会做出非常可疑的决定。这不是网络自动化工程师的过错，而是由于行业存在的缺乏纪律。在普通的网络中，如果你配置BGP不当，会话可能无法建立。如果你不小心泄露了前缀，那么有人会很快纠正你的知识。下次你配置BGP时，你可能不会再犯同样的错误！
- en: Software discipline in the networking space is sorely needed, and many organizations
    are still in their nascent networking automation phase. Bad experiences in this
    phase normally are catastrophic for confidence levels and either confirm that
    it’s too hard or light the runway for a great take-off. There are lots of people
    going to bootcamps still, and thanks to Udemy, Pluralsight, and a raft of other
    learning platforms, it’s easier today than ever to get into software. This is
    a contentious topic and I want to be careful here, but software isn’t all just
    throwing lines of code at something until it works on a knife edge. It’s a discipline,
    a mindset, and requires rigor.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 网络领域的软件纪律非常必要，许多组织仍处于网络自动化的初级阶段。在这个阶段的不良经历通常会对信心水平造成灾难性的影响，要么证实这太难了，要么为一次伟大的起飞铺平道路。仍然有很多人在参加训练营，多亏了Udemy、Pluralsight以及其他众多学习平台，今天进入软件领域比以往任何时候都要容易。这是一个有争议的话题，我在这里要小心谨慎，但软件并不是只是不断地向某个东西扔代码直到它在边缘上工作。它是一门学科，一种心态，需要严谨。
- en: My journey toward a decade of Go
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我走向十年Go之旅
- en: 'Go is a great language, and for many, it’s a primary programming language as
    well as a tooling language. Go provides a “belts and braces approach” in which
    even the compiler nags you to do the right thing. Sure, you could write sloppy
    code, but the whole Go ecosystem is wired to help you not do that. Most of the
    IDEs on the market have great Go tooling and will further lint and format your
    code, kicking you into being a better developer. Mat Ryer of Grafana Labs and
    the “Go Time” podcast once said: "*Because of the Go tools, I can read other people’s
    code and it feels familiar as if I’d written it."* That’s down to how the Go community
    has baked best practices into the toolchain. You get that for free.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Go是一种伟大的语言，对许多人来说，它不仅是主要的编程语言，也是工具语言。Go提供了一种“双重保险的方法”，即使编译器也会提醒你做正确的事情。当然，你可以写出杂乱的代码，但整个Go生态系统都是为了帮助你避免这样做而设计的。市场上的大多数IDE都拥有出色的Go工具，并将进一步检查和格式化你的代码，帮助你成为一个更好的开发者。Grafana
    Labs的Mat Ryer和“Go Time”播客曾经说过：“*由于Go工具，我可以阅读其他人的代码，感觉就像是我自己写的。*”这要归功于Go社区将最佳实践融入工具链的方式。你可以免费获得这些。
- en: For amusement, but also to make a point, I’m going to share a moment from my
    past career. I wrote C back in the day (C99) and wrote it on Microsoft Windows
    Notepad, linked it, and compiled it with individual tools into a binary, which
    then needed burning onto EPROMs for an embedded system. I managed thousands of
    lines of plain text, without so much as a hint of what was going to work at the
    time of writing. Test rigs helped, but the real world is always the truth. One
    day, I was called to an industrial unit where one of my systems had blown the
    lid off a water reservoir tank. In the moment and under pressure, I managed to
    find a bug because I’d written down the algorithm and left key comments in the
    code so I could follow under stress. Great tools and a solid engineering approach
    to writing code will save you from being fired or, even worse, being sued. If
    it was all spaghetti code (some of it was—I’m no hero), I’d have probably been
    imprisoned. Since then, we have great IDEs at our fingertips, and Go takes the
    best bits of C (in my opinion) and gives you a development journey that I’ve not
    found anywhere else. Ahead of even risking a production run, the compiler can
    tell me about race conditions, pointer problems, and a whole raft of things that
    I’ve been waiting decades for.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了娱乐，同时也是为了说明一个观点，我想分享我过去职业生涯中的一个时刻。当时我使用 C 语言（C99）编写代码，在 Microsoft Windows
    Notepad 中编写，将其链接，并使用单独的工具编译成二进制文件，然后需要将其烧录到嵌入式系统的 EPROM 上。我管理着数千行纯文本，当时写作时甚至没有一点线索能说明什么会起作用。测试设备有所帮助，但现实世界总是真理。有一天，我被叫到一个工业单位，我的一个系统导致一个水储备罐爆炸。在那一刻和压力之下，我设法找到了一个错误，因为我已经写下了算法，并在代码中留下了关键注释，这样我就能在压力下跟踪。优秀的工具和坚实的编码工程方法可以让你免于被解雇，甚至更糟糕的是，被起诉。如果所有的代码都是意大利面式的（其中一些确实是——我不是英雄），我可能已经被监禁了。从那时起，我们手头上有优秀的
    IDE，Go 吸取了 C 语言（在我看来）的精华，为你提供了一个在其他地方找不到的开发之旅。甚至在风险生产运行之前，编译器就能告诉我关于竞争条件、指针问题以及我等待了几十年的一系列问题。
- en: Beyond the IDE, compiler, and Go toolchain, Go lends itself to writing clear,
    readable, and maintainable code because of things such as error handling and desirable
    repetition. Avoiding magic is a key tenet, and you should be able to import a
    package and initiate it deterministically in your own code because of the discipline
    within the Go community.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 IDE、编译器和 Go 工具链之外，Go 还因为诸如错误处理和期望的重复等因素，使得编写清晰、可读和可维护的代码变得容易。避免使用魔法是一个关键原则，你应该能够导入一个包，并在自己的代码中确定性地初始化它，因为
    Go 社区内部有纪律。
- en: Go offers so many out-of-the-box features, newcomers tend to get Go punch drunk.
    It’s normal to see goroutines appearing everywhere and channels being used in
    situations where they’re just not needed. Bill Kennedy of Ardan Labs has some
    great material on this, and if you think you need a goroutine, the chances are
    you probably do not. It’s worth profiling your code with `pprof` before building
    things that you don’t need and doing some benchmarks through Go’s testing capabilities.
    Go in its simplest form will probably outperform your use case, and deciding to
    keep your design architecturally simple in the early days will prevent complex
    headaches in the future.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Go 提供了如此多的开箱即用功能，新手往往容易陷入 Go 的“醉酒”状态。看到 goroutines 到处都是，以及在不必要的情况下使用 channels
    是很常见的。Ardan Labs 的 Bill Kennedy 有一些关于这个主题的精彩材料，如果你认为你需要一个 goroutine，那么你很可能并不需要。在构建不需要的东西之前，使用
    `pprof` 分析你的代码，并通过 Go 的测试能力进行一些基准测试是值得的。以最简单的形式，Go 可能会超越你的使用场景，而在早期就决定保持你的设计架构简单，将防止未来出现复杂的头痛问题。
- en: Go’s type system
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Go 的类型系统
- en: 'Go’s type system can be strict to work with, but it provides the rigor and
    structure that you absolutely need. Network operating systems are normally based
    on structured data and things such as NETCONF engines have API schemas that are
    modeled from YANG. By consuming the `.proto` files and get programmatic contract
    alignment for free when building client code. The same principle works for XML
    as it does for gRPC and GPB. There are many tools available for building data
    structures, and some IDEs have the capability to go from JSON to structs. Use
    the tools where they are available, but never dismiss the opportunity for entropy
    and drift. Version control is important for this very reason alone. As a final
    note on data encoding and schemas, XML is rich and programmatically powerful.
    JSON might be a cool kid thing, but XML is great to work with for generating configurations
    for platforms such as Junos. If you are comfortable with XML, working with NETCONF
    is one small stone’s throw away. When building types with Go, encoding XML is
    just as easy as JSON. Here’s an example of that:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Go的类型系统在处理时可能比较严格，但它提供了你绝对需要的严谨性和结构。网络操作系统通常基于结构化数据，例如NETCONF引擎具有从YANG模型化的API模式。通过消费`.proto`文件，在构建客户端代码时免费获得程序性合同对齐。同样的原则也适用于XML、gRPC和GPB。有许多工具可用于构建数据结构，一些IDE具有从JSON到结构体的转换能力。在可用时使用这些工具，但永远不要放弃熵和漂移的机会。仅就这一点而言，版本控制非常重要。最后，关于数据编码和模式的一则说明，XML丰富且程序化强大。JSON可能是一种时尚的东西，但XML对于为Junos等平台生成配置来说非常好用。如果你对XML感到舒适，那么与NETCONF一起工作就只是一小步之遥。在用Go构建类型时，编码XML与JSON一样简单。以下是一个例子：
- en: '[PRE1]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output is as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE2]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A note on version control
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于版本控制的一则说明
- en: On to version control, which is not only important for your own code but also
    important for Go’s package management system. There have been more than 10 package
    management attempts from the core Go team, but as of version `1.13`, the Go module
    system feels like they finally got it right. If you’re unfamiliar with `go mod`
    and its use, it’s worth investing the time. Being able to deterministically rebuild
    a Go program with the correct package is of prime importance, and it’s worth understanding
    how you can use semantic versioning and the `go mod` system to sturdy up your
    development habits. There are famous stories in the DevOps and SRE space about
    one patch version being off and code being entirely unpredictable. As great as
    those stories are when telling them at meet-ups, they aren’t fun in the moment
    and can be avoided by locking your code to use specific versions and trusting
    that in CI/CD pipelines or build systems, your code will be re-composed the same
    way you composed it in development.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是版本控制，它不仅对你的代码很重要，而且对Go的包管理系统也很重要。核心Go团队已经尝试了超过10次包管理，但截至`1.13`版本，Go模块系统似乎终于做对了。如果你对`go
    mod`及其用法不熟悉，那么投入时间是很值得的。能够以正确的包确定性地重新构建Go程序至关重要，了解如何使用语义版本控制和`go mod`系统来加强你的开发习惯是值得的。在DevOps和SRE领域有许多著名的故事，讲述了一个补丁版本出错，代码变得完全不可预测。虽然这些故事在聚会时讲述起来很棒，但在当时并不有趣，而且可以通过锁定代码以使用特定版本，并相信在CI/CD管道或构建系统中，代码将以与开发时相同的方式重新组合来避免这种情况。
- en: Growing your code
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码的增长
- en: 'I’m thankful to have been an electronics engineer before I went into networking
    and learned assembly language and C before even so much as touching a CLI. I found
    it odd that I could make more money typing commands into a serial port than building
    a system with a serial port. Roll the calendar forward two decades (yikes), and
    many of my old habits are still in existence. If I begin to write a new tool or
    software service, I start by building out the kernel of the idea without implementation.
    This vehicle enables experimentation and learning about the problem space without
    lots of tedious code changes in the early phases of exploration. The algorithm
    kind of grows itself, and over time, I’ll embed links to useful API code or comments
    I’ve found on forums and blogs, and so on:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入网络领域并学习汇编语言和C语言之前，我是一名电子工程师，对此我感到非常感激。我发现，通过在串行端口中输入命令，我能比构建一个带有串行端口的系统赚到更多的钱。向前滚动二十年（哎呀），我的许多旧习惯仍然存在。如果我开始编写一个新的工具或软件服务，我会先构建想法的核心，而不考虑实现。这个工具使得在探索的早期阶段，无需进行大量的繁琐代码更改，就能进行实验和学习。算法似乎是自己成长的，随着时间的推移，我会嵌入到论坛和博客上找到的有用API代码或注释，等等：
- en: '[PRE3]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output is as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE4]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: A couple of items in the preceding code are worth mentioning. The first mention
    is on the use of external packages. I tend to standardize on a given project for
    a logging library and method of dealing with configuration. It makes the code
    easy to work with and predictable in its nature. Also, great libraries are gifts
    that keep on giving. Logrus is a great example of that. Want JSON? Not an issue.
    Want to change the log destination? Easy. Logging is not only important in development,
    but it’s super important when you release a tool or put a software service into
    production. It might seem silly to have a UUID system in place for a low-use tool,
    but if it’s a software service with many invocations per day, you can PayPal me
    a suitable gift when operations tell you how nice it is to follow what your creation
    does.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码中有几个项目值得提及。第一个提及是关于外部包的使用。我倾向于在一个给定的项目中标准化日志库和配置处理方法。这使得代码易于使用，在本质上具有可预测性。此外，优秀的库是持续给予的礼物。Logrus就是这样一个很好的例子。想要JSON？没问题。想要更改日志目标？简单。日志不仅在开发中很重要，而且在发布工具或将软件服务投入生产时也非常重要。对于低使用工具来说，有一个UUID系统可能看起来很愚蠢，但如果是一个每天有多次调用的软件服务，当运维告诉你跟踪你的创造物的行为是多么令人愉快时，你可以给我一个合适的礼物。
- en: Comments
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注释
- en: 'The value of comments is an age-old subject for shouty arguments. Be kind to
    the future version of yourself or any poor soul that has to maintain your code.
    Comments are worthless if they point out the obvious, and so I write a small variation
    of comment styles. They say *know your audience* when you write, and for reading
    code, the required expertise is a basic understanding of Go, and so you do not
    need to point out that a string is a string. Here are some pointers on what you
    could include:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 注释的价值是一个古老的争论主题。请善待未来的自己或任何需要维护你代码的可怜人。如果注释只是指出显而易见的事情，那么它们就是无价值的，所以我写了一些注释风格的微小变化。他们说你写的时候要*了解你的受众*，对于阅读代码来说，所需的专长是对Go的基本理解，因此你不需要指出一个字符串就是一个字符串。以下是一些你可以包含的要点：
- en: '**Future hints**: This is when there is a known bottleneck or issue that’s
    likely to arise at a certain user base or request rate but is not worth solving
    at the time.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**未来提示**：这是当存在一个已知瓶颈或问题可能在某个用户基础或请求速率下出现，但当时不值得解决的情况。'
- en: '**To-do items**: When exploring problem spaces, there’s nothing wrong with
    leaving mental hooks so that you can relocate your thoughts. They should reduce
    over time as the algorithm becomes more concrete, so remove them and improve the
    explanations in larger comment chunks as you work through your to-do list.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**待办事项**：在探索问题空间时，留下一些心理钩子以便你可以重新定位你的思想是没有错的。随着时间的推移，随着算法变得更加具体，它们应该会减少，所以当你通过待办事项列表工作时，应该删除它们并在更大的注释块中改进解释。'
- en: When things get complex, write the algorithm out. It’s like reading an exec
    summary in a corporate document. It’s easier to understand what the code is trying
    to do from a tech memo comment than from reading the code, especially if it’s
    complex and deals with things such as recursion. Always worth leaving a date too
    so that readers can reconcile versions against comments.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当事情变得复杂时，写出算法。这就像在阅读企业文档中的执行摘要。从技术备忘录的注释中理解代码试图做什么比阅读代码本身更容易，尤其是如果代码复杂且涉及递归等问题。总是值得留下一个日期，这样读者可以对照注释来核对版本。
- en: Being blindsided
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 被突然袭击
- en: 'Because writing in Go forces you into good habits, it can also blindside you.
    Go is massively powerful and packed with features that are quickly turned into
    invisible guard rails. Imagine interacting with an API that’s been written in
    Python. Imagine also that the payload is encoded into a slice with each item being
    a small map—something simple, like this:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 因为用Go编写代码会迫使你养成好习惯，它也可能让你措手不及。Go非常强大，功能丰富，这些功能很快就被转化为看不见的防护栏。想象一下与用Python编写的API交互。想象一下，负载被编码到一个切片中，每个项目都是一个小的映射——像这样简单的东西：
- en: '[PRE5]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Immediately, we can see how to marshal and unmarshal, but a common gotcha,
    especially when interfacing between a strongly typed language and a dynamically
    typed language, is poor data type management discipline. The following example
    will trigger an error in Go when you attempt to marshal it because of the type
    system, but it’s really common to see, unfortunately:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 立刻，我们可以看到如何进行序列化和反序列化，但一个常见的陷阱，尤其是在强类型语言和动态类型语言之间进行接口时，是数据类型管理纪律不佳。以下示例将在尝试在Go中序列化它时触发错误，因为类型系统，但不幸的是，这种情况很常见：
- en: '[PRE6]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Some software engineers handle these scenarios with TLV-style data encoding
    (see next), but if you’re stuck with this problem, you can use Go’s `reflection`
    capabilities to inspect the data and de-serialize it in a customized way for handling
    within your code. You could use reflection with the preceding code to then instantiate
    in types such as the following. This approach has saved my bacon more than once
    and is especially of use in dynamic data scenarios where languages such as Python
    make it dangerously easy. The user of the underscore is normally a hint that this
    is a TLV-style data instance and used for inter-process communication:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 一些软件工程师使用TLV风格的编码方式（见下文）来处理这些场景，但如果你遇到这个问题，可以使用Go的`反射`功能来检查数据，并在你的代码中以定制化的方式反序列化它。你可以使用前面的代码通过反射来实例化以下类型。这种方法已经多次救了我的命，并且在动态数据场景中特别有用，在这些场景中，像Python这样的语言使得操作变得非常容易。下划线用户通常是一个提示，表明这是一个TLV风格的数据实例，用于进程间通信：
- en: '[PRE7]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Go is a great language, and I implore you to work with standardized interfaces
    such as NETCONF, REST, and gRPC while making an effort to avoid silver-bullet
    *network API*-style packages and middleware. Simple rules such as avoiding magic
    will pay dividends in the future and, having a memory like a sieve, I try to remember
    that at all times if nothing else.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Go是一种优秀的语言，我强烈建议你在使用标准化接口（如NETCONF、REST和gRPC）的同时，努力避免使用银弹式的*网络API*风格包和中间件。像避免魔法这样的简单规则将在未来带来回报，而且我记忆力像筛子一样，我总是努力记住这一点。
- en: Writing this section has been an honor, and I believe this book paves the way
    for you to develop your own discipline, rigor, and skill for an industry that
    desperately needs it. Without lightning-rod efforts to provide learning paths,
    we’ll find the network automation discipline heavily fragmented for years to come,
    and this book will help immensely with that journey. A huge thank you to the authors
    for letting me share these thoughts.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 写这个部分是一种荣幸，我相信这本书为你铺平了道路，让你能够为这个行业急需的纪律、严谨和技能发展自己的领域。如果没有提供学习路径的闪电战努力，我们将发现网络自动化领域在未来几年将严重碎片化，而这本书将极大地帮助这一旅程。非常感谢作者们让我分享这些想法。
- en: Daniel Hertzberg
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 丹尼尔·赫茨伯格
- en: '*Daniel is a Senior Technical Marketing Engineer at Arista Networks. He’s been
    working within this field for double-digit years and has always had one foot in
    the door of networking and one foot in the door of automation/programmability.
    He writes Go on Visual Studio Code multiple times per week because of his success
    with network automation, cloud-native technologies, and OpenConfig.*'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '*丹尼尔是Arista Networks的高级技术市场营销工程师。他在这个领域工作了十多年的时间，并且一直在这个网络和自动化/可编程性的门槛上。由于他在网络自动化、云原生技术和OpenConfig方面的成功，他每周多次在Visual
    Studio Code上编写Go语言。*'
- en: I started off my automation not with network devices but with network overlays
    and network security with VMware NSX. NSX provides way too many options to click
    on to break the system. The same way that a network person could make a mistake
    and fat-finger a switch made it really easy for me to enter the same OSPF router
    ID within the same network... whoops! This was a REST API built with XML as an
    encoding and used Python requests to talk to it. At the time, most were using
    PowerShell to make this work, so even Python in this community was way outside
    the barriers of normalcy.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我开始自动化时并不是从网络设备开始的，而是从网络叠加和网络安全（使用VMware NSX）开始的。NSX提供了太多的选项可以点击，以至于很容易破坏系统。就像一个网络人员可能会犯错并误操作交换机一样，这让我很容易在同一个网络中输入相同的OSPF路由器ID...哎呀！这是一个使用XML编码的REST
    API，使用Python请求与之通信。当时，大多数人使用PowerShell来完成这项工作，所以在这个社区中，Python的使用也远远超出了正常范围。
- en: Fast forward a few years later—we started to see a lot of usage with vendor
    APIs. I found Python more or less at home given the amount of “getting started”
    examples that were out there simply importing the `requests` library and doing
    the typical RESTful thing—that is, sending a request and getting a response back.
    I found it pretty simplistic to generally work with all the normal Python objects
    such as dictionaries, lists, tuples, and so on.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 快进几年后——我们开始看到很多使用供应商API的场景。鉴于有大量的“入门”示例，只需导入`requests`库并执行典型的RESTful操作（即发送请求并获取响应），我发现Python几乎无处不在。我发现使用所有正常的Python对象（如字典、列表、元组等）进行操作非常简单。
- en: 'Within every journey, you start to run into scaling problems, and there is
    no issue with Python if it works for what you are doing. I started getting more
    involved in cloud-native projects, Kubernetes, and OpenConfig. All things that
    ended up using Go. I felt the learning curve was a bit steeper than Python because
    the network community was not as into it as they were into Python. However, the
    benefits outweighed everything I knew about Python:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在每一次旅程中，你都会遇到扩展性问题，如果Python能满足你的需求，那么它就没有问题。我开始更多地参与到云原生项目中，比如Kubernetes和OpenConfig。所有这些最终都使用了Go。我感觉学习曲线比Python陡峭一些，因为网络社区对它的兴趣没有像对Python那样浓厚。然而，它的好处超过了我所知道的Python的任何东西：
- en: Typed system
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型化系统
- en: Compiled system
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译系统
- en: Concurrency
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并发
- en: Modules (`go mod` is so great to open it up and see what is being used across
    the entire project)
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块（`go mod`非常棒，可以打开它并查看整个项目中使用了什么）
- en: No white spacing
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无空格
- en: Garbage collection
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 垃圾回收
- en: I could probably add a bit more, but those are generally why I like Go so much.
    Having early access to this book and seeing the examples, I can see generations
    of network engineers picking this up rather easily and swapping out Python for
    Go.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我可能还能再补充一些，但这些都是我喜欢Go的原因。有了这本书的早期访问权和看到示例，我可以预见几代网络工程师会很容易地采用这本书，并用Go替换Python。
- en: Go overall has helped me tremendously in my career as customers are asking for
    more and more code written in Go for general networking projects including Kubernetes
    operators, network automation, and OpenConfig streaming. Best of luck, network
    gophers!
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Go总体上极大地帮助了我的职业生涯，因为客户越来越多地要求用Go编写通用网络项目代码，包括Kubernetes操作员、网络自动化和OpenConfig流。祝你好运，网络Goer们！
- en: Marcus Hines
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 马库斯·海因斯（Marcus Hines）
- en: '*Marcus has spent his career focused on network device testing, test framework
    development, test automation and generally asking why things can’t be done differently.
    He started his career as a Network Engineer and he now focuses on engineering
    productivity across his organization. He helps maintain most of the OpenConfig
    organization’s repositories.*'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '*马库斯（Marcus）在其职业生涯中一直专注于网络设备测试、测试框架开发、测试自动化，以及通常询问为什么事情不能以不同的方式完成。他最初是一名网络工程师，现在他专注于其组织内的工程生产力。他帮助维护了OpenConfig组织的大部分仓库。*'
- en: In a nutshell
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简而言之
- en: 'I have become a very strong proponent of Go for general development for several
    key aspects:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经成为了Go在几个关键方面的强烈支持者：
- en: Ease of use of language-provided tooling
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言提供的工具的易用性
- en: Ramp-up speed for engineers joining projects
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加入项目工程师的快速上手速度
- en: Speed of compilation and multi-platform support
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译速度和跨平台支持
- en: Strongly typed language for static analysis with great build-time validations
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强类型语言用于静态分析，具有出色的构建时验证
- en: Reasoning about automation
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化的推理
- en: '**Testing and automation are basically the** **same thing.**'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试和自动化基本上是同一件事。**'
- en: Testing and automation can be distilled down to an ordered set of operations
    and validations to transform an input state and intent into an expected output
    state.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 测试和自动化可以简化为一系列有序的操作和验证，以将输入状态和意图转换为预期的输出状态。
- en: '**A stream of bytes is not** **an API.**'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字节流不是一个API。**'
- en: SSH and shell scripts that contain vendor-specific details do not lend themselves
    to a heterogeneous environment.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 包含供应商特定细节的SSH和shell脚本不适合异构环境。
- en: Flexibility on API definition, which focuses on iterative versioning with non-breaking
    changes.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在API定义上的灵活性，它侧重于迭代版本和非破坏性更改。
- en: Go has strong first-class support for gRPC, which is a rich serialization and
    RPC framework with support for most popular programming languages.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: Go对gRPC有强大的第一类支持，这是一个丰富的序列化和RPC框架，支持大多数流行的编程语言。
- en: Automation should always only have one layer of templates and one layer of configuration.
    Everything else should be code.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化应该始终只有一层模板和一层配置。其他所有东西都应该是代码。
- en: One automated test running continuously is worth 1,000 manual tests.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个持续运行的自动化测试相当于1,000个手动测试。
- en: Automation systems themselves need to be life - cycled.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化系统本身需要生命周期管理。
- en: The first test developed for the system should be how to install, version, and
    tear down the system itself in a hermetic, repeatable way.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 为系统开发的第一个测试应该是如何以密封、可重复的方式安装、版本控制和拆除系统本身。
- en: Once you have that ecosystem, you can unlock the rest of your development team
    to quickly iterate on development with the trust they are not regressing the infrastructure.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦拥有了这个生态系统，你就可以解锁你的开发团队，让他们快速迭代开发，同时信任他们不会使基础设施退化。
- en: Background
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 背景
- en: I have had a very long winding path to come to where I am today.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我来到今天这个位置，经历了一条非常漫长和曲折的道路。
- en: I started my network automation *scripting* back in TCL/Expect and Perl. Both
    of these ecosystems allowed for at least consistent repeated operations; however,
    everything else was a mess. Python added a robust ecosystem around libraries and
    version systems to allow for a more hermetic and repeatable world.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我从TCL/Expect和Perl开始我的网络自动化*脚本*编写。这两个生态系统至少允许一致的重复操作；然而，其他一切都是混乱的。Python通过围绕库和版本系统添加了一个健壮的生态系统，以允许一个更封闭和可重复的世界。
- en: The Python code base, though, suffered from a couple of issues, which made it
    hard to maintain. The testing of the code itself was fairly straightforward. However,
    because of a lack of typing, we often had to write a lot of type validation into
    the code and could only find these errors during runtime. Also, the general focus
    on using mocking to drive up coverage numbers but not extensively testing the
    public contracts caused fairly brittle tests, which slowed development in the
    long term. I don’t blame Python specifically for this, but it is very easy to
    fall into a pattern without the right tooling to enforce good practices.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Python代码库存在一些问题，这使得维护变得困难。代码本身的测试相当直接。然而，由于缺乏类型，我们经常不得不在代码中写入大量的类型验证，并且只能在运行时找到这些错误。此外，由于过分关注使用模拟来提高覆盖率数字，而没有对公共契约进行充分测试，导致测试相当脆弱，从长远来看，这减缓了开发速度。我不怪Python本身，但如果没有适当的工具来强制执行良好的实践，很容易陷入这种模式。
- en: I was introduced to Go around 2014 on a project and was quickly impressed with
    its strong typing, built-in tooling, and compilation speed. Before this, I had
    been working on a C++ test framework for a project. I was constantly frustrated
    with the complexity of building *flexible* C++ code; it had become a meta-programming
    nightmare of templates to generically support all of our use cases. Go fixed most
    of this by providing interface definitions for our use cases.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我是在2014年左右的一个项目上接触到Go语言的，对其强类型、内置工具和编译速度印象深刻。在此之前，我一直在为一个项目开发C++测试框架。我总是对构建*灵活*的C++代码感到沮丧，它已经变成了一个模板的元编程噩梦，以支持我们所有的用例。Go通过为我们提供用例的接口定义来解决这些问题的大部分。
- en: Since then, I have written three Go-based test frameworks for different organizations,
    all with different system needs. The first framework represented some unique challenges
    for solution testing. It required the ability to be open sourced. It needed to
    control components written by four different teams developing code in three different
    languages across two different build ecosystems. The tests themselves had to run
    on both Linux and Windows test runners. Go allowed us to develop this ecosystem
    using just standard Go tools for compilation.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 从那时起，我为不同的组织编写了三个基于Go的测试框架，它们都有不同的系统需求。第一个框架在解决方案测试方面代表了一些独特的挑战。它需要能够开源。它需要控制由四个不同团队编写的组件，这些团队使用三种不同的语言在两个不同的构建生态系统中开发代码。测试本身必须在Linux和Windows测试运行器上运行。Go使我们能够仅使用标准的Go工具来编译这个生态系统。
- en: The next framework was used for solution testing of a cloud-based Kubernetes
    ecosystem. We were able to make quick progress given the tooling and library support
    for k8s based projects. We could leverage infrastructure for cluster bring-up,
    k8s deployment, operator deployment, and application lifecycle.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个框架用于基于Kubernetes的云解决方案测试。由于工具和库对基于k8s的项目支持，我们能够迅速取得进展。我们可以利用基础设施进行集群启动、k8s部署、操作员部署以及应用程序生命周期。
- en: The current framework I am involved with is Ondatra (see the *Further reading*
    section). This framework is focused on delivering an open source functional-,
    integration-, and solution-testing framework for network solutions. It is currently
    used by internal teams in my organization through feature profiles (see the *Further
    reading* section) for describing our network device requirements to vendors.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我目前参与的项目框架是Ondatra（参见*进一步阅读*部分）。这个框架专注于为网络解决方案提供开源的功能性、集成性和解决方案测试框架。它目前通过功能配置文件（参见*进一步阅读*部分）被我的组织内部团队使用，以向供应商描述我们的网络设备需求。
- en: Ability to impact the industry
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 影响行业的能力
- en: One last point I would like to make is the ability of individuals to change
    the industry.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我还想提到的一点是个体改变行业的能力。
- en: This industry has long been dominated by vendors and the perception that the
    IETF will solve your problems. When it comes to automation, vendors are disincentivized
    to help. Every vendor-specific knob and API that can be created locks an operator
    further into a vendor solution that translates into **purchase orders** (**POs**)
    for them.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这个行业长期以来一直被供应商和认为 IETF 会解决你问题的观念所主导。当涉及到自动化时，供应商缺乏帮助的动力。每个可以创建的特定于供应商的旋钮和 API
    都会让操作员进一步陷入供应商解决方案，这最终转化为他们的**采购订单**（**POs**）。
- en: By starting to shape this industry around software automation and APIs, we are
    moving a network from an art to computer science. We are on the path to where
    network devices are nothing more than general-purpose compute with fancy network
    interface cards. With general APIs that can express intent, such as OpenConfig
    over gNMI, operators can build a single configuration and telemetry system that
    can support any number of vendors. With additional operational APIs around bootstrapping,
    security, software, and file management, operators can uniformly build their infrastructure.
    This becomes a very consistent testable layer that then can be used to test northbound
    services and downstream devices separately at the unit test layer. Building a
    strong layered test strategy gives you confidence and finds breakages much faster
    in your development cycle.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 通过开始围绕软件自动化和 API 来塑造这个行业，我们正在将网络从一门艺术转变为计算机科学。我们正在走向网络设备不过是带有花哨网络接口卡的通用计算设备的地方。有了可以表达意图的通用
    API，例如通过 gNMI 的 OpenConfig，操作员可以构建一个单一配置和遥测系统，它可以支持任意数量的供应商。有了围绕引导、安全、软件和文件管理的附加操作
    API，操作员可以统一构建他们的基础设施。这变成了一层非常一致且可测试的层，然后可以用来在单元测试层单独测试北向服务和下游设备。构建一个强大的分层测试策略可以给你信心，并在你的开发周期中更快地发现故障。
- en: Don’t wait for others to solve your needs; it won’t happen. If you want something,
    demand it from the vendors. If they don’t do it, demand it from a standards body.
    If they don’t do it, take it upon yourself. Don’t assume your idea is a bad one
    or that others have more understanding of the ecosystem than you do. Get into
    the open source world and pitch your ideas. The model of software development
    and collaboration has drastically changed over the last 20 years, let alone just
    in the last 5 years. Network automation has many opportunities to develop ecosystems
    that can have a minimal number of transforms between operator intent and state
    on network devices.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 不要等待他人解决你的需求；这不会发生。如果你想要某样东西，就向供应商提出要求。如果他们不做，就向标准机构提出要求。如果他们还不做，那就自己动手。不要假设你的想法是错误的，或者其他人比你更了解生态系统。进入开源世界，提出你的想法。软件开发和协作的模式在过去
    20 年中发生了巨大变化，更不用说仅仅是过去 5 年了。网络自动化有许多机会开发出可以在操作员意图和网络设备状态之间进行最小转换的生态系统。
- en: Sneha Inguva
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Sneha Inguva
- en: '*Sneha is a Software Engineer at Fastly on the network control and optimization
    team and a former Network Engineer at DigitalOcean.*'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '*Sneha 是 Fastly 公司网络控制和优化团队的软件工程师，同时也是 DigitalOcean 公司的前网络工程师。*'
- en: My journey to writing networking code began on the internal Kubernetes and observability
    teams at DigitalOcean, a cloud hosting provider. Before I ever touched a line
    of network code or configuration logic, I learned that behind a planet-scale company
    is a multitude of distributed systems consisting of hundreds, if not thousands,
    of services, serviced by many teams of engineers. The process of building and
    deploying maintainable services required a proper CI/CD setup, monitoring, and
    actionable alerting. This was echoed in my experiences when I transitioned over
    to writing lower-level networking code in Go on various networking teams. When
    you are writing code that is meant to be deployed to thousands of hypervisors
    or servers in various locations around the world—and when that code controls fundamentals’
    ingress and egress networking—automation is key. This experience has continued
    at Fastly, a CDN provider with points of presence around the world.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我编写网络代码的旅程始于DigitalOcean的内部Kubernetes和可观察性团队，DigitalOcean是一家云托管提供商。在我接触任何一行网络代码或配置逻辑之前，我就了解到，在一家全球规模的公司背后，存在着由数百甚至数千个服务组成的分布式系统，这些服务由许多工程师团队提供。构建和部署可维护的服务需要适当的CI/CD设置、监控和可操作的警报。当我过渡到在各个网络团队用Go编写底层网络代码时，我的经历也反映了这一点。当你编写的代码旨在部署到世界各地数千个虚拟机或服务器上，并且该代码控制着基本的数据包进出网络时，自动化是关键。在Fastly，一个全球有多个节点的CDN提供商，我的这一经验得以延续。
- en: Whether it is homegrown networking software or third-party OSS such as the BIRD
    routing daemon, I have learned that we absolutely need to be able to roll forward
    or roll back changes with ease. I am also a huge proponent of actionable alerts
    and runbooks; from experience, noisy alerts that are not directly tied to specific
    actions should never be pageable. I’ve also come to appreciate Go for what it
    offers when writing networking code; compared to languages such as C, it has been
    far easier to iterate code quickly and cross-compile applications for various
    platforms using Go. Go also has a useful network standard library and a growing
    ecosystem of packages that ease the process of writing code all the way from layer
    2 and packet sockets to layer 7 using HTTP.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 不论是自研的网络软件还是第三方开源软件，如BIRD路由守护进程，我都了解到我们绝对需要能够轻松地向前或向后回滚更改。我也是可操作警报和运行手册的强烈支持者；从经验来看，与特定操作没有直接关联的嘈杂警报永远不应该被页码化。我也开始欣赏Go在编写网络代码时所提供的功能；与C语言等语言相比，使用Go快速迭代代码和为各种平台交叉编译应用程序要容易得多。Go还有一个有用的网络标准库和不断增长的包生态系统，它简化了从第2层和包套接字到第7层使用HTTP编写代码的过程。
- en: 'In summary, if I had to advise someone newly entering this field of networking
    and Go software engineering, I would say the following:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，如果我要给一个刚刚进入网络和Go软件工程领域的初学者提建议，我会说以下内容：
- en: My ethos when writing software at any large company is to keep it simple. Write
    such easily readable, modular, extensible, and well-documented code so that a
    new engineer well versed in Go but unfamiliar with the company’s ecosystem would
    be able to easily join and contribute. I believe that excellent documentation
    and clear, simple code will always beat clever code.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在任何大型公司编写软件时，我的信条是保持其简单性。编写易于阅读、模块化、可扩展且文档良好的代码，这样即使一个对Go语言非常熟悉但对公司生态系统不熟悉的工程师也能轻松加入并做出贡献。我相信，优秀的文档和清晰、简单的代码总是优于巧妙的代码。
- en: When it comes to CI/CD and Infrastructure as Code, there are numerous options
    available that often depend on the use case. Will the software be run as a binary
    on a host machine? Can it be containerized? Are we building Debian packages? Whatever
    it is you use, make sure it is easy to both deploy and roll back the version of
    a service with ease.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当涉及到CI/CD和基础设施即代码时，有众多选项可供选择，这通常取决于具体用例。软件是否将在主机上作为二进制文件运行？能否进行容器化？我们是否在构建Debian软件包？无论你使用什么，确保可以轻松部署和回滚服务的版本。
- en: Learn the idiosyncrasies of Go and have some agreed-upon best practices for
    company repositories.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习Go的特性和公司仓库的一些公认的最佳实践。
- en: Though I absolutely appreciate third-party packages in the Go networking ecosystem
    (`netaddr`, `gobgp`, and so on), I also like to read through code and confirm
    my understanding of its functionality. This also often allows us to find bugs
    and upstream contributions.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虽然我绝对欣赏Go网络生态系统中的第三方包（如`netaddr`、`gobgp`等），但我还是喜欢阅读代码并确认我对其功能的理解。这通常也允许我们找到错误和上游贡献。
- en: Make sure you have white-box monitoring and actionable alerts configured for
    your services.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您已为您的服务配置了白盒监控和可操作的警报。
- en: And with these tips, I encourage everyone to embrace the Gopher life!
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 并且，带着这些提示，我鼓励每个人都拥抱 Gopher 生活！
- en: Antonio Ojea
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安东尼奥·奥耶亚
- en: Antonio Ojea is a Software Engineer at Red Hat, where he works on Kubernetes
    and other open source projects, mainly focused on cloud technologies, networking,
    and containers. He is currently a maintainer and contributor on the Kubernetes
    and KIND projects and has contributed in the past to other projects such as OpenStack
    and MidoNet.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 安东尼奥·奥耶亚（Antonio Ojea）是红帽（Red Hat）的软件工程师，在那里他从事 Kubernetes 和其他开源项目的工作，主要关注云计算、网络和容器技术。他目前是
    Kubernetes 和 KIND 项目的维护者和贡献者，并且过去曾为其他项目如 OpenStack 和 MidoNet 做出贡献。
- en: 'During my early years as a professional, I started in the network department
    of a telecommunications company. We were responsible for the internal network
    and its services (DNS, email, WWW, and so on). At that time, our automation consisted
    basically of the following:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在我作为专业人士的早期岁月里，我开始在一家电信公司的网络部门工作。我们负责内部网络及其服务（DNS、电子邮件、WWW 等）。当时，我们的自动化基本上包括以下内容：
- en: '**Configuration**: TCL/Expect scripts that connected to the network devices
    to apply different configurations'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置**: 连接到网络设备以应用不同配置的 TCL/Expect 脚本'
- en: '**Monitoring**: Perl scripts that polled via SNMP the network devices and stored
    the data on **Round Robin Database** (**RRD**) files'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控**: 通过 SNMP 轮询网络设备并存储数据的 Perl 脚本，存储在 **轮询数据库**（**RRD**）文件中'
- en: '`cron`'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cron`'
- en: '`cat`, `grep`, `cut`, `awk`, `sed`, `sort`, and so on, and sending the result
    via email'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cat`、`grep`、`cut`、`awk`、`sed`、`sort` 等命令，并将结果通过电子邮件发送'
- en: If we look back, in hindsight, it’s incredible how much everything has improved
    and how interesting has been its evolution, especially in the open source area.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们回顾过去，从后视镜来看，一切改善得多么令人难以置信，其演变多么有趣，尤其是在开源领域。
- en: At the beginning of the 2000s, open source software was gathering momentum,
    the Apache license opened a new way for FOSS and corporations to interact, and
    there were already several stable Linux distributions providing the support, maintenance,
    security, and reliability required by enterprises.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2000 年代初，开源软件正在积聚力量，Apache 许可证为 FOSS 和企业之间的互动开辟了新的途径，并且已经有几个稳定的 Linux 发行版提供了企业所需的支持、维护、安全和可靠性。
- en: 'During the 2000s, some projects started to flourish, improving the existing
    network automation. Some of them are still alive these days:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2000 年代，一些项目开始蓬勃发展，改进了现有的网络自动化。其中一些项目至今仍然存在：
- en: '**Really Awesome New Cisco confIg Differ** (**RANCID**): Monitors the device
    configurations and uses a versioning backend such as CVS, Subversion, or Git to
    maintain a history of changes.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**真正令人惊叹的新思科配置差异工具**（**RANCID**）：监控设备配置，并使用版本控制后端，如 CVS、Subversion 或 Git 来维护更改的历史记录。'
- en: '**Nagios**: It was kind of the industry standard for monitoring and alerting.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Nagios**: 它曾是监控和警报的行业标准。'
- en: '**Cacti**: A complete network graphing solution designed to harness the power
    of RRDTool’s data storage and graphing functionality.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仙人掌**: 一个完整的网络绘图解决方案，旨在利用 RRDTool 的数据存储和绘图功能。'
- en: However, it wasn’t until the late 2000s that open source entered the spotlight,
    regulations were more clear about free software licenses, and the open source
    ecosystem was more solid and stable. Companies started to use and contribute to
    open source, attracted by the growth and change potential and the economic benefits
    in contrast to the existing licensing model of private software.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，直到 2000 年代末，开源才进入公众视野，关于免费软件许可证的规定更加明确，开源生态系统更加稳固和稳定。公司开始使用并贡献开源，被其增长和变革潜力以及与现有私有软件许可模式相比的经济效益所吸引。
- en: 'During this period, and driven by the necessity of businesses and companies
    to be more agile, the infrastructure becomes more flexible: virtual machines,
    containers, software-defined networks, and so on. All these changes cause an evolution
    in the industry. It’s the dawn of the cloud, and network engineers start to have
    access to the networking data plane with technologies such as OpenFlow, or to
    the physical or virtual device configurations via APIs. The network becomes more
    open and programmable, creating unlimited opportunities for software developers.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个时期，由于企业和公司需要更加敏捷，基础设施变得更加灵活：虚拟机、容器、软件定义网络等等。所有这些变化都导致了行业的演变。这是云的开始，网络工程师开始能够通过
    OpenFlow 等技术访问网络数据平面，或者通过 API 访问物理或虚拟设备配置。网络变得更加开放和可编程，为软件开发者创造了无限的机会。
- en: 'My career was following this evolution. I started creating simple scripts and
    using other software projects to help me automate my work. However, once you realize
    you can build your own tools, collaborate with others to add the features that
    you need, and/or fix the limitations or bugs that are impacting you, you just
    can’t stop. That’s how I became a Kubernetes contributor and maintainer on SIG-Network.
    There is no secret: study, practice ... repeat.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我的职业生涯遵循着这一演变。我开始编写简单的脚本，并使用其他软件项目来帮助我自动化我的工作。然而，一旦你意识到你可以构建自己的工具，与他人合作添加你需要的功能，或者修复影响你的限制或错误，你就无法停止。这就是我成为
    Kubernetes 贡献者和 SIG-Network 维护者的原因。没有秘密：学习、实践……重复。
- en: Nowadays, and thanks to the explosion of open source projects and collaborative
    tools, it is easy to practice. Every project will be happy to have people willing
    to help, or you can just create your own project. There will always be someone
    that will be interested. The same is happening for studying; there is a lot of
    material accessible for everyone – videos, tutorials, and blogs – but I always
    recommend having some key books at hand, not just for reading, but also for consulting.
    Good books never age.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，多亏了开源项目和协作工具的爆炸式增长，实践变得容易。每个项目都会欢迎愿意帮忙的人，或者你也可以创建自己的项目。总会有感兴趣的人。同样的事情也发生在学习上；有很多材料对每个人都是可访问的——视频、教程和博客——但我总是建议手头有一些关键书籍，不仅用于阅读，也用于咨询。好书永远不会过时。
- en: Remember, a programming language is just a tool. There is no ring to rule them
    all. There are tools you feel more comfortable with or are better suited for some
    kind of work or to solve some specific problem. Go is the core language for the
    container ecosystem; the main projects such as Kubernetes, Docker, and so on are
    built using Go. If you plan to work on network automation and containers, Go is
    definitively the appropriate language for you.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，编程语言只是工具。没有一种语言可以统治所有。有些工具你可能会觉得更舒适，或者更适合某些工作或解决某些特定问题。Go 是容器生态系统的核心语言；像
    Kubernetes、Docker 等主要项目都是使用 Go 构建的。如果你计划从事网络自动化和容器工作，Go 无疑是适合你的语言。
- en: Carl Montanari
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 卡尔·蒙特纳里
- en: '*Carl defines himself as an ex(?) network person. He is a Python and Go developer,
    and creator of Scrapli(go), a Go package used in this book.*'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '*卡尔将自己定义为前网络人士。他是一位 Python 和 Go 开发者，也是 Scrapli(go) 的创造者，这是一个在本书中使用的 Go 包。*'
- en: When I first started getting involved in the network automation community, the
    idea of anything but Python for network automation felt a bit insane. *Of course*,
    there were folks out there using things other than Python—maybe they had some
    Perl or Ruby, or maybe crazy folks had some C or something, but it really felt
    that Python was generally the *one ring to rule them all*. I leaned into Python,
    and, like many folks, I quickly fell in love. Python is a really neat language,
    and for somebody like me, without any kind of programming or computer science
    background, it served as an amazing and reasonably gentle introduction to the
    world of software.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 当我最初开始参与网络自动化社区时，除了 Python 之外进行网络自动化的想法似乎有点疯狂。*当然*，有些人使用的是其他语言——也许他们有一些 Perl
    或 Ruby，或者也许有些疯狂的人使用 C 或其他语言，但感觉 Python 通常是那个可以统治所有语言的“一统江山”。我倾向于 Python，就像许多人一样，我很快就爱上了它。Python
    是一种非常棒的语言，对于像我这样没有任何编程或计算机科学背景的人来说，它为我提供了进入软件世界的惊人且相对温和的入门途径。
- en: For a good long while, I kind of felt like the network automation folks espousing
    Go were living in a fantasy land! Why would you need anything other than Python?
    Certainly, the speed/ease of development of Python outweighed the general speed
    of Go. Surely the much larger network automation ecosystem in Python was such
    a leg up that Go could never compete! Perhaps, I thought, the Go network automation
    advocates only had the newest fanciest gear that had 100% support for everything
    they could need to do with RESTCONF or gRPC. They probably also drank only the
    finest artisan coffees and beers and had enviable mustaches and/or colorful, fancy
    hair!
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 很长一段时间，我总觉得那些宣扬Go的网络自动化人士生活在幻想中！你还需要什么其他东西呢？当然，Python的开发速度/便捷性超过了Go的一般速度。当然，Python中庞大的网络自动化生态系统给了Go一个巨大的优势，Go根本无法竞争！也许，我想，Go网络自动化倡导者只有最新最酷的工具，可以100%支持他们使用RESTCONF或gRPC所需的一切。他们可能只喝最好的手冲咖啡和啤酒，拥有令人羡慕的胡须和/或五彩斑斓、花哨的头发！
- en: Naturally, these thoughts are all silly, and eventually, I started growing out
    a fancy mustache and learning Go. Just kidding—I can’t grow a mustache, or at
    least not an enviable one, but I did dive into Go!
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 自然，这些想法都是愚蠢的，最终我开始留起一个花哨的胡须，学习Go。开玩笑——我无法留胡须，至少不是一个令人羡慕的胡须，但我确实深入研究了Go！
- en: 'Of course, I never had any delusion that Python was truly the *one ring to
    rule them all*, but learning one language was hard enough, so perhaps I was just
    protecting my sanity from trying to learn another one! It’s a bit unclear whether
    I’ve retained my sanity, but I do feel like I have learned quite a bit about Go
    over the past few years! For anyone that is on a journey like mine and looking
    to dig into Go, here are a few things I would recommend:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我从未有过幻想Python真的是那个可以统治一切的“一环”，但学习一门语言已经足够困难，所以也许我只是保护我的理智，避免尝试学习另一门语言！我是否保持了理智还不清楚，但我确实觉得在过去的几年里我对Go学到了很多！对于像我一样正在旅途中并希望深入研究Go的人，以下是我会推荐的一些事情：
- en: 'Lean into the typing ecosystem in Python. `mypy` is awesome—you will catch
    bugs you had no idea you had. You will learn a ton about typing, and the best
    part: if your typing is all broken, your programs will still run! Being a pretty
    rabid-type hinting fan, I feel it helped me a ton when going into Go where it
    is required.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入Python的打字生态系统。`mypy`非常棒——你将发现你从未意识到的错误。你将学到很多关于类型的信息，而且最好的部分是：如果你的类型全部出错，你的程序仍然可以运行！作为一个狂热的类型提示爱好者，我觉得这在我转向Go时帮了我很多。
- en: Take the time to really understand interfaces and how to use them idiomatically.
    At first, for me, they were just kind of clunky abstract base classes, but of
    course, they really are more than that. While we’re at it, make sure to understand
    the empty interface and how to use and abuse that!
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽出时间真正理解接口及其用法。起初，对我来说，它们只是有点笨拙的抽象基类，但当然，它们实际上远不止于此。当我们谈论接口时，确保你理解空接口以及如何使用和滥用它！
- en: Stop trying to inherit all the things! This was (is?!) difficult for me—I quite
    fancied inheritance (perhaps too much, and perhaps that is a taboo nowadays anyway?),
    so it has been somewhat of a challenge at times to break away from that pattern.
    Sure, embed a struct here and there, but generally try to move away from that
    inheritance style mentality.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 停止试图继承所有事物！这对我来说（是吗？！）一直很困难——我非常喜欢继承（也许太过分了，也许现在这已经是一种禁忌了？），所以有时摆脱这种模式是一种挑战。当然，这里和那里嵌入一个结构体，但通常尽量摆脱这种继承风格的心态。
- en: Let the robots (linters) yell at you and tell you how bad your code is! I like
    `golangci-lint`, which is a linter aggregator that runs tons of linters against
    your code. Get a ton of errors, and search-engine-engineer your way to understanding
    why the error exists and how you can do better. While annoying, I’ve learned a
    ton from all the errors I’ve created this way!
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让机器人（代码检查器）大声告诉你你的代码有多糟糕！我喜欢`golangci-lint`，这是一个运行大量代码检查器的代码检查器聚合器。获取大量错误，并通过搜索引擎工程师的方式理解错误存在的原因以及如何做得更好。虽然很烦人，但我从这种方式创建的所有错误中学到了很多！
- en: I suspect Go will continue to become more and more commonplace in the network
    automation community. The benefits of language—speed, small footprint, compiled
    binary, and on and on—are hard to ignore. Moreover, as the network automation
    ecosystem continues to expand and grow, I believe that network automation roles
    will be increasingly software-centric, rather than network-centric or automation/software
    as an afterthought of a network role; as that happens, Go will be increasingly
    important for all the reasons espoused in this very book! Of course, just as Python
    is not the *one ring to rule them all*, neither will Go be, but both are tools
    you should absolutely have in your toolbelt... or some other worn-out platitude.
    Happy Gophering!
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我怀疑Go将继续在自动化社区中变得越来越普遍。这种语言的优点——速度、小体积、编译的二进制文件等等——很难忽视。此外，随着网络自动化生态系统的持续扩展和增长，我相信网络自动化角色将越来越以软件为中心，而不是以网络为中心，或者自动化/软件只是网络角色的附属品；随着这种情况的发生，Go将因本书中阐述的所有原因而变得越来越重要！当然，就像Python不是“统治一切的那个戒指”一样，Go也不会是，但两者都是你应该绝对拥有的工具……或者某些陈词滥调。祝Gopher们快乐！
- en: Brent Salisbury
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布伦特·萨利文
- en: '*Brent is a Principle Software Engineer with over 20 years of networking and
    compute experience. He started in network ops and architecture and gradually transitioned
    into network software development. He is as bullish as ever on the future of the
    prospects for young engineers entering the networking industry.*'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '*布伦特是一位拥有20多年网络和计算经验的资深软件工程师。他从网络运营和架构开始，逐渐过渡到网络软件开发。他对年轻工程师进入网络行业的前景仍然充满信心。*'
- en: We have witnessed trends in networking come and go, and projects succeed and
    fail during a few innovation cycle booms and busts in the still-young life of
    the internet. Through these important iterations, one paradigm shift that will
    stick is the adoption of DevOps practices in networking. A core component of DevOps
    is automation. To scale network automation, it is important to have tools that
    are powerful yet not overly complex to use for the operator. The authors have
    done an excellent job laying out reasons Go has arguably become the de facto language
    for infrastructure programming over the past few years as libraries have matured,
    and some of the largest open source projects have been written in Go.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们见证了网络趋势的起伏，在互联网仍处于年轻的生命周期中，在几次创新周期繁荣与萧条期间，项目成功与失败。在这些重要的迭代过程中，一个将持久存在的范式转变是网络中DevOps实践的采用。DevOps的核心组件是自动化。为了扩展网络自动化，重要的是要拥有既强大又不过于复杂，便于操作员使用的工具。作者们出色地阐述了为什么Go在过去的几年中，随着库的成熟，以及一些最大的开源项目是用Go编写的，已经成为基础设施编程的既定语言。
- en: Whether you are a network engineer or a seasoned developer, it is often said
    a particular language is just a tool and we shouldn’t grow too attached to one
    specific technology. While there is some truth in that premise, in the specific
    case of a language such as Go for networking, I would argue the right tool for
    the job is incredibly important. We are expecting a large swath of networking
    professionals to evolve into DevOps engineers for the network. If we are expecting
    a retooling of engineers’ skill sets, we should make that path as easy as possible.
    The learning curve, packaging, and baseline performance of Go all benchmark exceptionally
    well as compared to peer languages, making it an excellent choice for both a newcomer
    and a seasoned developer for programming and automation.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 不论你是网络工程师还是经验丰富的开发者，人们常说一种特定的语言只是工具，我们不应该过分依赖某一种特定技术。虽然这个前提有一定的真实性，但在像Go这样的网络语言的具体情况下，我认为适合这项工作的正确工具至关重要。我们预计大量网络专业人士将转变为网络DevOps工程师。如果我们期待工程师技能集的重构，我们应该尽可能使这条路径变得容易。与同行语言相比，Go的学习曲线、打包和基准性能都表现出色，使其成为新人和经验丰富的开发者进行编程和自动化的绝佳选择。
- en: 'Here are some recommendations for those getting started in the network programming
    and automation journey:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这里为那些刚开始网络编程和自动化旅程的人们提供一些建议：
- en: Embrace open source.
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥抱开源。
- en: Learn Linux and Linux networking.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习Linux和Linux网络。
- en: Pick a language such as Go to start hacking.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择Go等语言开始编程。
- en: Get familiar with open source automation tools such as Ansible and Jinja.
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉开源自动化工具，如Ansible和Jinja。
- en: Learn how to use Git and its potential impact on configuration management.
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用Git及其对配置管理可能产生的影响。
- en: Start with a read-only project that won’t do damage to the network as you are
    getting comfortable with automation and coding. Examples such as network monitoring/telemetry
    or configuration management/backups are relatively safe places to begin.
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从一个只读项目开始，这样在你熟悉自动化和编码的同时，不会对网络造成损害。例如，网络监控/遥测或配置管理/备份是相对安全的起点。
- en: Programmatically improve the understanding of the state of your network. Stop
    driving using the rear-view mirror!
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过编程方式提高对网络状态的理解。停止使用后视镜驾驶！
- en: Learn about current developer tools and deployment mechanisms (Kubernetes, containers,
    popular libraries, and so on).
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解当前的开发者工具和部署机制（Kubernetes、容器、流行库等）。
- en: Explore how to create CI/CD pipelines for your networks.
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索如何为您的网络创建CI/CD管道。
- en: Start thinking of your network configurations as code. Automated outages are
    increasingly at the root of some of the more recent high-profile outages. Leverage
    your experience in operations, and create tests and safeguards to prevent common
    mistakes someone doing automation without a background in networking would not
    be aware of. Network engineers are not endangered species; it takes years to understand
    how networks work and how to build them at scale. By combining a new discipline
    such as programming, it makes you that much more valuable in being able to connect
    the increasingly complex environments in today’s networks.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 开始将您的网络配置视为代码。自动化的故障越来越多地成为一些最近高调故障的根源。利用您的运营经验，创建测试和保障措施，以防止那些没有网络背景的人在进行自动化时可能不会意识到的常见错误。网络工程师不是濒危物种；理解网络的工作原理以及如何大规模构建网络需要多年的时间。通过结合新的学科，如编程，它使您在连接今天日益复杂的网络环境方面更具价值。
- en: In closing, your goal should be to ensure the network is not a blocker of business
    velocity. Changes to the network taking weeks to implement must be a thing of
    the past. That is, of course, easier said than done, as network uptime is, and
    will always be, the number one metric a network team is going to be judged by.
    If I look at any projects, deployments, or products that I have done, the successful
    ones were where we took complexity and made it a little bit simpler. As networking
    professionals continue to evolve, powerful yet simple-to-use tools such as Go
    coupled with automation projects will be key enablers. Lastly, don’t be afraid
    to fail. Find your strengths and work around your weaknesses. The network is a
    big boat and hard to steer, but I firmly believe we are tacking in the right direction
    with automation.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您的目标应该是确保网络不会成为业务速度的阻碍。需要几周时间才能实施的网络更改必须成为过去式。当然，说起来容易做起来难，因为网络正常运行时间是，并将始终是，网络团队将被评判的第一项指标。如果我看任何项目、部署或产品，成功的是那些我们简化了复杂性并使其变得稍微简单一些的项目。随着网络专业人士的不断发展，功能强大且易于使用的工具，如Go，结合自动化项目将是关键推动力。最后，不要害怕失败。找到你的优势，克服你的弱点。网络是一艘大船，很难驾驭，但我坚信我们在自动化方面正朝着正确的方向前进。
- en: Maximilian Wilhelm
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 马克西米利安·威尔海姆
- en: '*Maximilian—Max—Wilhelm is a Holistic (Network) Automation Evangelist, trying
    to bring software engineering methods to network automation, and helping to overcome
    vendor lock-in.*'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '*马克西米利安（Max—Wilhelm）是一位整体（网络）自动化倡导者，试图将软件工程方法引入网络自动化，并帮助克服供应商锁定。*'
- en: '*He developed a weakness for networking, IPv6, and routing early on and is
    an avid open source enthusiast, cofounder, maintainer, and contributor of Bio-Routing
    and ifupdown-ng, a regular speaker at open source and networking conferences,
    founder of the FrOSCon Network Track, and co-host of the virtualNOG.net meetings.*'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '*他早期就对网络、IPv6和路由产生了兴趣，是一位热衷于开源的爱好者、共同创始人、维护者和贡献者，是开源和网络会议的常客，FrOSCon网络轨道的创始人，以及virtualNOG.net会议的联合主持人。*'
- en: '*He’s currently working as a Network Automation Engineer at Cloudflare and
    does a little moonlighting as a Senior Infrastructure Consultant. His second calling
    is being the lead architect behind the widely automated Freifunk Hochstift community
    network where he got his hands dirty with ifupdown2 as well as ifupdown-ng, VXLAN,
    Linux VRFs, BGP, and OSPF, plus infrastructure automation with Salt Stack, and
    has been afraid of commercial SDN solutions* *ever since.*'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '*他目前在Cloudflare担任网络自动化工程师，同时作为高级基础设施顾问兼职工作。他的第二职业是作为广泛自动化的Freifunk Hochstift社区网络的负责人，他在那里使用ifupdown2以及ifupdown-ng、VXLAN、Linux
    VRFs、BGP和OSPF，以及使用Salt Stack进行基础设施自动化，并且自那时起就害怕商业SDN解决方案。*'
- en: A little bit of history
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一点历史
- en: Coming from a Linux administrator/systems engineering background, I’ve been
    used to having home-grown automation solutions in place to manage a fleet of—for
    me at the time—a large number of servers and clients since my first job at the
    IT center of the Institute of Mathematics at Paderborn University in early 2004.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我来自Linux管理员/系统工程师的背景，自从2004年初在帕德伯恩大学数学研究所的IT中心的第一份工作以来，我就习惯了拥有自制的自动化解决方案来管理大量——当时对我来说是大量——的服务器和客户端。
- en: We had a locally developed software suite called SDeployment—written in Shell
    if I remember correctly—that was responsible for provisioning the correct software
    packages and desired configuration file state onto Linux-based servers and clients
    and enforcing the desired state to stay this way.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个本地开发的软件套件，叫做SDeployment——如果我记得正确的话，是用Shell编写的——它负责将正确的软件包和期望的配置文件状态部署到基于Linux的服务器和客户端，并强制执行期望状态保持不变。
- en: This even helped to detect an intruder who managed to exchange the `sshd` binary,
    which didn’t have support for Kerberos, so he needed to change the `sshd_config`,
    which got overwritten after 1 hour and the service didn’t start anymore.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这甚至帮助检测到一个入侵者，他成功交换了`sshd`二进制文件，该二进制文件不支持Kerberos，因此他需要更改`sshd_config`，这个配置在1小时后被覆盖，服务再也没有启动。
- en: At the time this was a huge benefit over solutions such as CFEngine, which could
    do incremental changes to configuration files but not maintain them holistically;
    Puppet had not been born yet (according to Wikipedia).
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 当时，这比CFEngine等解决方案具有巨大的优势，这些解决方案可以对配置文件进行增量更改，但不能整体维护；Puppet那时还没有出现（根据维基百科）。
- en: With the rise of Bcfg2, Puppet, Chef, Salt, and Ansible, we saw a shift from
    incremental configuration changes to intent-based configuration management in
    the wider industry, where the operator describes the desired state (intent) and
    writes templates to generate contents of entire configuration files, and the configuration
    management solution’s task is to make this a reality and keep it this way.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Bcfg2、Puppet、Chef、Salt和Ansible的兴起，我们看到整个行业从增量配置更改转向基于意图的配置管理，其中操作员描述了期望状态（意图），并编写模板来生成整个配置文件的内容，而配置管理解决方案的任务就是使这一状态成为现实并保持这种状态。
- en: Mental shift to holistic automation
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 思维转变至整体自动化
- en: The systems engineering/SRE world underwent this shift in thinking a long time
    ago, but it feels like the majority of network automation solutions are still
    following the idea of making incremental changes to the routers and switches out
    there, which, at the same time, might also be managed manually by operators typing
    (or copying) magic spells into a CLI.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 系统工程/SRE领域很早就经历了这种思维方式的转变，但感觉大多数网络自动化解决方案仍然遵循着对现有路由器和交换机进行增量更改的想法，同时，这些设备也可能被操作员手动管理，他们通过在CLI中输入（或复制）魔法咒语来操作。
- en: This makes the device configuration the synchronization point, and we don’t
    really have an idea of what this configuration will look like in full without
    checking back on the device.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得设备配置成为同步点，我们实际上没有检查设备的情况下，真的不知道这个配置将是什么样子。
- en: I believe we, as network (automation) engineers, need to follow suit, make the
    mental shift to the holistic approach, let Perl, Shell, and Expect scripts be,
    and bring software engineering methods to network automation. This way, we are
    able to tackle the problems at hand at an abstract level and build solutions that
    can be reasoned with, tested on their own, and that scale to our needs (see [*Chapter
    5*](B16971_05.xhtml#_idTextAnchor128), *Network Automation*).
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为我们作为网络（自动化）工程师，需要效仿，进行整体方法的思维转变，让Perl、Shell和Expect脚本保持原样，并将软件工程方法引入网络自动化。这样，我们才能在抽象层面上解决手头的问题，构建可以推理、自行测试并且能够扩展到我们需求的解决方案（参见[*第五章*](B16971_05.xhtml#_idTextAnchor128)，*网络自动化*）。
- en: For the most daunting problem of configuration management, this means plugging
    some of those systems together and building a solution that generates and owns
    the full device configuration.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 对于配置管理的最大难题，这意味着将一些系统连接起来，构建一个生成并拥有完整设备配置的解决方案。
- en: The automation will likely rely on multiple inputs to gain full knowledge of
    the topology, operational overrides, subscribers, and services, as well as rules
    to derive the configuration from all of that.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化可能需要依赖多个输入来获取拓扑结构、操作覆盖、订阅者和服务的全面知识，以及从所有这些中推导出配置的规则。
- en: This is following the overarching goal to do as few configuration changes as
    possible and leverage protocols such as BGP and BMP to extract/observe state or
    manipulate device state where more dynamic changes are required.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为了遵循总体目标，尽可能少地进行配置更改，并利用诸如BGP和BMP之类的协议在需要更多动态更改的地方提取/观察状态或操纵设备状态。
- en: This is the way
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这是方法
- en: Having all of this in the cards, the only API you need from a device is a function
    to upload a new complete configuration and let the device figure out the path
    from the current configuration to the new one.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有所有这些，你需要的唯一设备API是一个上传新完整配置的功能，并让设备确定从当前配置到新配置的路径。
- en: Dealing with diverging configuration parts across the fleet, carefully cleaning
    up old approaches to configure X, doing incremental changes, and figuring out
    how to interact with a platform API, a dialect of NETCONF, YANG, and so on would
    all be from the past—wouldn’t that be great?
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 处理整个舰队中的配置差异部分，仔细清理旧的配置X的方法，进行增量更改，并找出如何与平台API、NETCONF方言、YANG等交互，这些都将成为过去——那不是很好吗？
- en: I believe we have a bright future ahead of us!
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信我们面前有一个光明的未来！
- en: That’s where this great and inspiring book and Go come in!
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 正是这本书和Go的伟大和鼓舞人心之处！
- en: With Go, you have a very solid foundation to build reliable, scalable, and fairly
    easily testable and observable software. Prometheus integration is at your fingertips.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Go，你有一个非常坚实的基础来构建可靠、可扩展、并且相对容易测试和观察的软件。Prometheus集成触手可及。
- en: This way, you can build tools to monitor your network (via BMP or streaming
    telemetry, for example), inject routes via BGP, or build your own holistic network
    config generator and deployment pipeline, as outlined previously.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，你可以构建工具来监控你的网络（例如通过BMP或流遥测），通过BGP注入路由，或者构建自己的整体网络配置生成器和部署管道，如前所述。
- en: Existing open source suites such as Bio-Routing can help you on the first part
    (using BMP/RIS) and act as the foundation to, for example, build a route-injector
    following your business logic.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 现有的开源套件，如Bio-Routing，可以帮助你在第一部分（使用BMP/RIS）中，并作为构建遵循您业务逻辑的路由注入器的基石。
- en: The fact that you are reading this indicates you are looking into building your
    own automation solution to tackle your organization’s needs—that’s great!
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 你正在阅读这篇文章的事实表明，你正在考虑构建自己的自动化解决方案来解决你组织的需要——那太好了！
- en: If you can, please share it as open source and present it at your local NOG—or
    VirtualNOG—so that others can benefit and learn from it too. Good luck!
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可以的话，请将其作为开源分享，并在您当地的NOG或VirtualNOG上进行展示，这样其他人也能从中受益和学习。祝你好运！
- en: Matt Oswalt
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 马特·奥斯沃特
- en: '*Matt is a Systems Engineer at Cloudflare, where he works on proxies and control
    plane systems. He blogs at https://oswalt.dev and occasionally posts on Twitter
    as @Mierdin.*'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '*马特是Cloudflare的系统工程师，在那里他从事代理和控制平面系统的工作。他在https://oswalt.dev上写博客，偶尔在Twitter上以@Mierdin的身份发帖。*'
- en: I’m grateful to have been exposed to software development as well as infrastructure
    technologies such as networking at roughly the same time in my life. While I had
    toyed around with the BASIC-esque language on my TI-82 calculator in high school
    (okay, *toyed* is a stretch—I created a rudimentary Galaga clone while failing
    Geometry) and taken a single semester of programming in Visual Basic, it wasn’t
    until university that I first encountered Linux, networking, and a modern programming
    environment.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我很感激在我生命中大约同一时间接触到了软件开发以及像网络这样的基础设施技术。虽然我在高中时在我的TI-82计算器上玩弄了类似BASIC的语言（好吧，*玩弄*这个词有点夸张——我在几何学不及格的同时创建了一个基本的Galaga克隆），并且在上大学之前只学过一学期的Visual
    Basic编程，但直到大学我才第一次接触到Linux、网络和现代编程环境。
- en: Over the next few years, I bounced back and forth between what seemed to be
    fairly isolated technical domains. Doing so often made me feel like a beginner
    in everything and an expert in nothing. I’ve had more than a few moments of anxiety,
    worrying that I’m not doing the right things in my career. In retrospect, however,
    this was the best experience I could have asked for. It kept me uncomfortable,
    and in this state, I honed the skill that I prize above all others, and that’s
    my ability to learn. This skill has a snowball effect—having a formalized system
    of learning gives me the confidence to try new, more challenging things, which
    usually forces me to be even more rigorous and efficient in my learning process,
    and so on.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几年里，我在看似相当孤立的技术领域之间来回跳动。这样做往往让我觉得自己在每件事上都是新手，在每件事上都不是专家。我有过不少焦虑的时刻，担心我在职业生涯中做的事情不正确。然而，回顾起来，这可能是我能得到的最好的经验。它让我感到不舒服，在这种状态下，我磨练了我最珍视的技能，那就是学习能力。这种技能有滚雪球效应——有一个正式的学习体系让我有信心尝试新的、更具挑战性的事情，这通常迫使我在学习过程中更加严格和高效，等等。
- en: These days, there is a multitude of things to learn, and while it may be tempting
    to learn them all, we cannot. Something I’m still working on is my ability to
    seek out those skills that will really impact my career and the industry. In my
    experience, the kind of technologies and skills that have staying power are not
    always those that get the hype on social media or stars on GitHub—often, these
    are more fundamental technologies or ways of thinking that allow you to more quickly
    understand whatever the latest manifestation of those ideas might be.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 这些天，有许多东西要学习，虽然可能很有诱惑力去学习所有这些，但我们无法做到。我仍在努力的是寻找那些真正影响我的职业和行业的技能。在我的经验中，那些具有持久力的技术和技能并不总是那些在社交媒体或GitHub上获得炒作或明星的——通常，这些是更基础的技术或思维方式，让你能更快地理解那些想法的最新表现形式。
- en: 'If you’re new in your career, or if you feel like you might be stagnating a
    bit but you’re not sure where to go, hopefully the following advice is helpful
    to you:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你刚刚开始你的职业生涯，或者如果你觉得自己可能有点停滞不前，但不确定该往哪里去，希望以下建议对你有所帮助：
- en: Stay curious. The work of learning is never finished. Don’t get too focused
    on attaining certification *X* or being able to add technology *Y* to your resume—these
    are fleeting. Rather, take pride in building a continuously improving system of
    learning, and hone your own ability to acquire new skills efficiently.
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持好奇心。学习的工作永远不会结束。不要过于专注于获得认证 *X* 或能在简历上添加技术 *Y*——这些都是短暂的。相反，为建立一个持续改进的学习体系感到自豪，并磨练你高效获取新技能的能力。
- en: So much of what we tend to cling on to in our lives and careers is a crippling
    distraction. Separate the essential few from the trivial many and focus on what
    will allow you to make your highest level of contribution. It’s far better to
    do a few things exceptionally well than to create a bounty of mediocre work.
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在生活中和职业生涯中往往紧紧抓住的东西，往往是令人痛苦的干扰。将关键的少数与琐碎的多数区分开来，专注于能让你做出最高贡献的事情。做好几件事情远比创造大量平庸的工作要好。
- en: There are many more highly skilled engineers building efficient, scalable systems
    that you will never hear about; then, there are people posting about technology
    *X* on social media and getting *all the likes*. The vast majority of technology
    hot takes on social media aren’t worth the bits used to transmit them.
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有许多更多的高技能工程师正在构建高效、可扩展的系统，但你永远不会听说他们；然后，还有人在社交媒体上发布关于技术 *X* 的内容，并得到 *所有点赞*。社交媒体上大多数关于技术的热门观点都不值得用来传输它们的比特数。
- en: The technical skills that have the steepest learning curve can often (but do
    not always) have the biggest reward. Be very careful not to make career-limiting
    technical decisions based on how adoptable/approachable a technology may be; often,
    industry-changing innovations will not come with a perfect user experience at
    first, and the opportunities are much more plentiful for those who don’t wait
    for the polished user manual. At the same time, do not fall into the trap of believing
    that the more complex or difficult to learn, the better it must be. As with most
    things in life, the truth is probably somewhere in the middle.
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习曲线最陡峭的技术技能往往（但并非总是）能带来最大的回报。务必非常小心，不要基于一项技术可能被采用/接近的程度做出限制你职业生涯的技术决策；通常，改变行业的创新在最初可能不会提供完美的用户体验，而对于那些不等待完美用户手册的人来说，机会要多得多。同时，也不要陷入认为越复杂或越难学，就一定越好的陷阱。就像生活中大多数事情一样，真相可能就在中间某个地方。
- en: No technology is a panacea; they were all designed with specific trade-offs
    in mind, including Go. If you haven’t found the trade-offs, you haven’t looked
    hard enough. Your job as an engineer is to understand these trade-offs and pick
    a technology that aligns best with the trade-offs you want to make in your current
    situation.
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何技术是万能的；它们都是基于特定的权衡来设计的，包括 Go。如果你还没有找到这些权衡，那么你可能还没有足够深入地研究。作为工程师，你的工作是理解这些权衡，并选择一个最适合你当前情况所希望做出的权衡的技术。
- en: Happy learning!
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 快乐学习！
- en: Further reading
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*Decomposing Data* *Structures*: https://gratuitous-arp.net/decomposing-complex-json-data-structures/'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*分解数据* *结构*：https://gratuitous-arp.net/decomposing-complex-json-data-structures/'
- en: 'Ondatra: https://github.com/openconfig/ondatra'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ondatra：[https://github.com/openconfig/ondatra](https://github.com/openconfig/ondatra)
- en: 'Feature profiles: [https://github.com/openconfig/featureprofiles](https://github.com/openconfig/featureprofiles)'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能配置文件：[https://github.com/openconfig/featureprofiles](https://github.com/openconfig/featureprofiles)
- en: 'FrOSCon Network Track: [https://myfirst.network](https://myfirst.network)'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FrOSCon 网络轨道：[https://myfirst.network](https://myfirst.network)
