- en: The Go Programming Language
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go编程语言
- en: Before diving into the more complex examples of using Go for security, it is
    important to have a solid foundation. This chapter provides an overview of the
    Go programming language so that you have the knowledge necessary to follow the
    subsequent examples.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究使用Go进行安全性的更复杂示例之前，建立坚实的基础非常重要。本章概述了Go编程语言，以便您具备后续示例所需的知识。
- en: This chapter is not an exhaustive treatise of the Go programming language, but
    will give you a solid overview of the major features. The goal of this chapter
    is to provide you with the information you need to understand and follow the source
    code if you have never used Go before. If you are already familiar with Go, this
    chapter should be a quick and easy review of things you already know, but perhaps
    you will learn a new piece of information.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章不是Go编程语言的详尽论述，但将为您提供主要功能的扎实概述。本章的目标是为您提供必要的信息，以便在以前从未使用过Go的情况下理解和遵循源代码。如果您已经熟悉Go，本章应该是对您已经知道的内容的快速简单回顾，但也许您会学到一些新的信息。
- en: 'This chapter specifically covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章专门涵盖以下主题：
- en: The Go language specification
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go语言规范
- en: The Go playground
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go游乐场
- en: A tour of Go
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go之旅
- en: Keywords
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键字
- en: Notes about source code
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于源代码的注释
- en: Comments
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注释
- en: Types
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型
- en: Control structures
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制结构
- en: Defer
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 延迟
- en: Packages
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包
- en: Classes
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类
- en: Goroutines
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Goroutines
- en: Getting help and documentation
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取帮助和文档
- en: Go language specification
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go语言规范
- en: The entire Go language specification can be found online at [https://golang.org/ref/spec](https://golang.org/ref/spec).
    Much of the information in this chapter comes from the specification, as this
    is the one true documentation of the language. The rest of the information here
    is short examples, tips, best practices, and other things that I have learned
    during my time with Go.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 整个Go语言规范可以在[https://golang.org/ref/spec](https://golang.org/ref/spec)上找到。本章中的大部分信息来自规范，因为这是语言的真正文档。这里的其他信息是短小的示例、提示、最佳实践和我在使用Go期间学到的其他内容。
- en: The Go playground
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go游乐场
- en: 'The Go playground is a website where you can write and execute Go code without
    having to install anything. In the playground, [https://play.golang.org](https://play.golang.org),
    you can test pieces of code to explore the language and fiddle with things to
    understand how the language works. It also allows you to share your snippet by
    creating a unique URL that stores your snippet. Sharing code through the playground
    can be much more helpful than a plaintext snippet, since it allows the reader
    to actually execute the code and tinker with the source if they have any questions
    about how it works:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Go游乐场是一个网站，您可以在其中编写和执行Go代码，而无需安装任何东西。在游乐场中，[https://play.golang.org](https://play.golang.org)，您可以测试代码片段以探索语言，并尝试理解语言的工作原理。它还允许您通过创建存储代码片段的唯一URL来分享您的片段。通过游乐场分享代码可能比纯文本片段更有帮助，因为它允许读者实际执行代码并调整源代码，以便在对其工作原理有任何疑问时进行实验：
- en: '![](img/d5514c8a-7253-4641-8b61-3e02ebcac15e.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/d5514c8a-7253-4641-8b61-3e02ebcac15e.png)
- en: The preceding screenshot shows a simple program being run in the playground.
    There are buttons at the top to run, format, add import statements, and share
    the code with others.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的截图显示了在游乐场中运行的简单程序。顶部有按钮可以运行、格式化、添加导入语句和与他人共享代码。
- en: A tour of Go
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go之旅
- en: Another resource provided by the Go team is *A Tour of Go*. This website, [https://tour.golang.org](https://tour.golang.org),
    is built on top of the playground mentioned in the previous section. The tour
    was my first introduction to the language, and when I completed it, I felt well-equipped
    to start tackling projects in Go. It walks you through the language step by step
    along with working code examples so that you can run and modify the code to get
    familiar with the language. It is a practical way to introduce a newcomer to Go.
    If you have never used Go at all, I encourage you to check it out.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Go团队提供的另一个资源是*Go之旅*。这个网站，[https://tour.golang.org](https://tour.golang.org)，建立在前一节提到的游乐场之上。这次旅行是我对这种语言的第一次介绍，当我完成它时，我感到有能力开始处理Go项目。它会逐步引导您了解语言，并提供工作代码示例，以便您可以运行和修改代码以熟悉语言。这是向新手介绍Go的实用方式。如果您根本没有使用过Go，我鼓励您去看一看。
- en: '![](img/155646d8-315b-4b13-aa31-c7be08feb713.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/155646d8-315b-4b13-aa31-c7be08feb713.png)
- en: The preceding screenshot shows the first page of the tour. On the right-hand
    side, you will have a small embedded playground with the code sample relevant
    to the short lesson shown on the left-hand side. Each lesson comes with a short
    code example that you can run and tinker with.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的截图显示了游览的第一页。在右侧，您将看到一个嵌入式的小游乐场，其中包含左侧显示的短课程相关的代码示例。每节课都有一个简短的代码示例，您可以运行和调整。
- en: Keywords
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关键字
- en: To emphasize how simple Go is, here is a breakdown of all its 25 keywords. You
    probably already know most of them if you are familiar with other programming
    languages. The keywords are grouped together to examine them according to their
    use.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了强调Go的简单性，这里列出了其25个关键字的详细说明。如果您熟悉其他编程语言，您可能已经了解其中大部分。关键字根据其用途分组在一起进行检查。
- en: '**Data types**:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据类型**：'
- en: '| `var` | This defines a new variable |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `var` | 这定义了一个新变量 |'
- en: '| `const` | This defines a constant value that does not change |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `const` | 这定义一个不变的常量值 |'
- en: '| `type` | This defines a new data type |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `type` | 这定义了一个新数据类型 |'
- en: '| `struct` | This defines a new structured data type that contains multiple
    variables |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `struct` | 这定义了一个包含多个变量的新结构化数据类型 |'
- en: '| `map` | This defines a new map or hash variable |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `map` | 这定义了一个新的映射或哈希变量 |'
- en: '| `interface` | This defines a new interface |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `interface` | 这定义了一个新接口 |'
- en: '**Functions**:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**函数**：'
- en: '| `func` | This defines a new function |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `func` | 这定义了一个新函数 |'
- en: '| `return` | This exits a function, optionally returning values |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `return` | 这退出一个函数，可选地返回值 |'
- en: '**Packages**:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**包**：'
- en: '| `import`  | This imports an external package in the current package |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `import`  | 这在当前包中导入外部包 |'
- en: '| `package` | This specifies what package a file belongs to |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `package` | 这指定文件属于哪个包 |'
- en: '**Program flow**:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**程序流**：'
- en: '| `if` | This is used for branch execution based on a condition that is true
    |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `if` | 如果条件为真，则使用此分支执行 |'
- en: '| `else` | This is used for a branch if a condition is not true |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `else` | 如果条件不成立，则使用此分支 |'
- en: '| `goto` | This is used to jump directly to a label; it is rarely used and
    not encouraged |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `goto` | 这用于直接跳转到标签；它很少使用，也不鼓励使用 |'
- en: '**Switch statements**:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**Switch语句**：'
- en: '| `switch` | This is used to branch based off of a condition |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `switch` | 这用于基于条件进行分支 |'
- en: '| `case` | This defines the condition for the `switch` statement |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `case` | 这定义了`switch`语句的条件 |'
- en: '| `default` | This defines default execution when no case is matched |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `default` | 这定义了当没有匹配的情况时的默认执行 |'
- en: '| `fallthrough` | This is used to continue executing the next case |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `fallthrough` | 这用于继续执行下一个case |'
- en: '**Iteration**:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**迭代**：'
- en: '| `for` | The `for` loop can be used like in C, where you provide three expressions:
    the initializer, the condition, and the incrementer. In Go, there is no `while`
    loop and the `for` keyword takes on the role of both `for` and `while`. A `for`
    loop can be used just like a `while` loop if one expression, the condition, is
    passed. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `for` | `for`循环可以像在C中一样使用，其中提供三个表达式：初始化程序、条件和增量器。在Go中，没有`while`循环，`for`关键字承担了`for`和`while`的角色。如果传递一个表达式，条件，`for`循环可以像`while`循环一样使用。
    |'
- en: '| `range` | The `range` keyword is used with a `for` loop to iterate over a
    map or slice. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `range` | `range`关键字与`for`循环一起用于迭代map或slice。 |'
- en: '| `continue` | The `continue` keyword will skip any execution left in the current
    loop and jump directly to the next iteration. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `continue` | `continue`关键字将跳过当前循环中剩余的任何执行，并直接跳转到下一个迭代。 |'
- en: '| `break` | The `break` keyword will immediately exit the `for` loop completely,
    skipping any remaining iterations. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `break` | `break`关键字将立即完全退出`for`循环，跳过任何剩余的迭代。 |'
- en: '**Concurrency**:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**并发**：'
- en: '| `go` | Goroutines are lightweight threads built in to the language. You simply
    put the `go` keyword in front of a call to a function and Go will execute that
    function call in a separate thread. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `go` | Goroutines是内置到语言中的轻量级线程。您只需在函数调用前面加上`go`关键字，Go就会在单独的线程中执行该函数调用。 |'
- en: '| `chan` | To communicate between threads, channels are used. Channels are
    used to send and receive specific data types. They are blocking by default. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `chan` | 为了在线程之间通信，使用通道。通道用于发送和接收特定数据类型。它们默认是阻塞的。 |'
- en: '| `select` | The `select` statements allow channels to be used in a nonblocking
    fashion. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `select` | `select`语句允许通道以非阻塞方式使用。 |'
- en: '**Convenience**:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**便利**：'
- en: '| `defer` | The `defer` keyword is a relatively unique keyword that I have
    not previously encountered in other languages. It allows you to specify a function
    to be called later when the surrounding function returns. It is useful when you
    want to ensure some type of cleanup action whenever the current function ends,
    but you are not sure when or where it might return. A common use case is to defer
    a file closure. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `defer` | `defer`关键字是一个相对独特的关键字，在其他语言中我以前没有遇到过。它允许您指定在周围函数返回时稍后调用的函数。当您想要确保当前函数结束时执行某种清理操作，但不确定何时或何地它可能返回时，它非常有用。一个常见的用例是延迟文件关闭。
    |'
- en: Notes about source code
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于源代码的注释
- en: Go source code files should have the `.go` extension. The source code of Go
    files is encoded in UTF-8 Unicode. This means that you can use any Unicode characters
    in your code, like hardcoding Japanese characters in a string.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Go源代码文件应该有`.go`扩展名。Go文件的源代码以UTF-8 Unicode编码。这意味着您可以在代码中使用任何Unicode字符，比如在字符串中硬编码日语字符。
- en: Semicolons are optional at the end of a line and typically omitted. Semicolons
    are only required when separating multiple statements or expressions on a single
    line.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 分号在行尾是可选的，通常省略。只有在分隔单行上的多个语句或表达式时才需要分号。
- en: Go does have a code formatting standard which can easily be adhered to by running
    `go fmt` on source code files. The code formatting should be followed, but it
    is not strictly enforced by the compiler the way Python requires exact formatting
    to execute properly.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Go确实有一个代码格式化标准，可以通过在源代码文件上运行`go fmt`来轻松遵守。应该遵循代码格式化，但不像Python那样严格由编译器执行确切的格式化以正确执行。
- en: Comments
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注释
- en: 'Comments follow a C++ style allowing the double slash and the slash-asterisk
    wrapped style:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 注释遵循C++风格，允许双斜杠和斜杠星号包装样式：
- en: '[PRE0]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Types
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型
- en: The built-in data types are named intuitively enough. Go comes with a set of
    integer and unsigned integer types with varying bit lengths. There are also floating
    point numbers, Booleans, and strings, which should come as no surprise.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 内置数据类型的命名相当直观。Go带有一组具有不同位长度的整数和无符号整数类型。还有浮点数、布尔值和字符串，这应该不足为奇。
- en: There are a few types like runes that are not common in other languages. This
    section covers all of the different types.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些类型，如符文，在其他语言中不常见。本节涵盖了所有不同的类型。
- en: Boolean
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布尔
- en: 'The Boolean type represents a true or false value. Some languages don''t provide
    a `bool` type, and you have to use an integer or define your own enumeration,
    but Go conveniently comes with a predeclared `bool` type. The `true` and `false`
    constants are also predefined and used in all lowercase. Here is an example of
    creating a Boolean:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔类型表示真或假值。有些语言不提供`bool`类型，您必须使用整数或定义自己的枚举，但Go方便地预先声明了`bool`类型。`true`和`false`常量也是预定义的，并且以全小写形式使用。以下是创建布尔值的示例：
- en: '[PRE1]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `bool` type is not unique to Go by any means, but one interesting piece
    of trivia about the Boolean type is that it's the only type named after a person.
    George Boole lived from 1815 to 1864 and wrote *The Laws of Thought*, where he
    described Boolean algebra, which is what all digital logic is based upon. The
    `bool` type is very simple in Go, but the history behind the name is very rich.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool`类型并不是Go独有的，但关于布尔类型的一个有趣的小知识是，它是唯一以一个人命名的类型。乔治·布尔生于1815年，逝世于1864年，写了《思维的法则》，在其中描述了布尔代数，这是所有数字逻辑的基础。`bool`类型在Go中非常简单，但其名称背后的历史非常丰富。'
- en: Numeric
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数字
- en: The primary numeric data types are integers and floating point numbers. Go also
    offers a complex number type, a byte type, and a rune. Here are the numeric data
    types available in Go.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的数字数据类型是整数和浮点数。Go还提供了复数类型、字节类型和符文。以下是Go中可用的数字数据类型。
- en: Generic numbers
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通用数字
- en: These generic types can be used when you don't particularly care about whether
    a number is 32- or 64-bits. The largest available size will automatically be used,
    but will be compatible with 32- and 64-bit processors.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这些通用类型可以在您不特别关心数字是32位还是64位时使用。将自动使用最大可用大小，但将与32位和64位处理器兼容。
- en: '`uint`: This is an unsigned integer of either 32 or 64 bits'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uint`：这是一个32位或64位的无符号整数'
- en: '`int`: This is a signed integer with the same size as `uint`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int`：这是一个带有与`uint`相同大小的有符号整数'
- en: '`uintptr`: This is an unsigned integer to store a pointer value'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uintptr`：这是一个无符号整数，用于存储指针值'
- en: Specific numbers
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特定数字
- en: These numeric types specify the bit length and whether it has a sign bit to
    determine positive or negative values. The bit length will determine the maximum
    range. Signed integers have the range reduced by one bit because the last bit
    is reserved for the sign.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数字类型指定了位长度以及它是否具有符号位来确定正负值。位长度将确定最大范围。有符号整数的范围会减少一个位，因为最后一位保留给了符号。
- en: Unsigned integers
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无符号整数
- en: 'Using `uint` without a number generally chooses the largest size for your system,
    typically 64 bits. You can also specify one of the four specific `uint` sizes:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有数字的情况下使用`uint`通常会选择系统的最大大小，通常为64位。您还可以指定这四种特定的`uint`大小之一：
- en: '`uint8`: Unsigned 8-bit integer (0 to 255)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uint8`：无符号8位整数（0至255）'
- en: '`uint16`: Unsigned 16-bit integer (0 to 65535)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uint16`：无符号16位整数（0至65535）'
- en: '`uint32` : Unsigned 32-bit integer (0 to 4294967295)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uint32`：无符号32位整数（0至4294967295）'
- en: '`uint64`: Unsigned 64-bit integer (0 to 18446744073709551615)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uint64`：无符号64位整数（0至18446744073709551615）'
- en: Signed integers
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有符号整数
- en: 'Like unsigned integers, you can use `int` by itself to choose the best default
    size, or specify one of these four specific `int` sizes:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 与无符号整数一样，您可以单独使用`int`来选择最佳默认大小，或者指定这四种特定的`int`大小之一：
- en: '`int8`: 8-bit integer (-128 to 127)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int8`：8位整数（-128至127）'
- en: '`int16`: 16-bit integer (-32768 to 32767)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int16`：16位整数（-32768至32767）'
- en: '`int32`: 32-bit integer (-2147483648 to 2147483647)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int32`：32位整数（-2147483648至2147483647）'
- en: '`int64`: 64-bit integer (-9223372036854775808 to 9223372036854775807)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int64`：64位整数（-9223372036854775808至9223372036854775807）'
- en: Floating point numbers
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浮点数
- en: 'The floating point type does not have a generic type, and must be one of these
    two options:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点类型没有通用类型，必须是以下两种选项之一：
- en: '`float32`: IEEE-754 32-bit floating-point number'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`float32`：IEEE-754 32位浮点数'
- en: '`float64`: IEEE-754 64-bit floating-point number'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`float64`：IEEE-754 64位浮点数'
- en: Other numeric types
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他数字类型
- en: 'Go also provides a complex number for advanced mathematical applications, and
    a few aliases for conveniences:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Go还为高级数学应用提供了复数类型，以及一些别名以方便使用：
- en: '`complex64`: Complex number with `float32` real and imaginary parts'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`complex64`：具有`float32`实部和虚部的复数'
- en: '`complex128`: Complex number with `float64` real and imaginary parts'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`complex128`：具有`float64`实部和虚部的复数'
- en: '`byte`: Alias for `uint8`'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`byte`：`uint8`的别名'
- en: '`rune`: Alias for `int32`'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rune`：`int32`的别名'
- en: You can define numbers in the decimal, octal, or hexadecimal format. Decimal
    or base-ten numbers need no prefix. Octal or base-eight numbers should be prefixed
    with a zero. Hexadecimal or base-sixteen numbers should be prefixed with a zero
    and an x.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以以十进制、八进制或十六进制格式定义数字。十进制或十进制数字不需要前缀。八进制或八进制数字应以零为前缀。十六进制或十六进制数字应以零和x为前缀。
- en: You can read more about the octal numeral system at [https://en.wikipedia.org/wiki/Octal](https://en.wikipedia.org/wiki/Octal),
    decimal at [https://en.wikipedia.org/wiki/Decimal](https://en.wikipedia.org/wiki/Decimal),
    and hexadecimal at [https://en.wikipedia.org/wiki/Hexadecimal](https://en.wikipedia.org/wiki/Hexadecimal).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://en.wikipedia.org/wiki/Octal](https://en.wikipedia.org/wiki/Octal)上了解更多八进制数字系统，十进制数字在[https://en.wikipedia.org/wiki/Decimal](https://en.wikipedia.org/wiki/Decimal)，十六进制数字在[https://en.wikipedia.org/wiki/Hexadecimal](https://en.wikipedia.org/wiki/Hexadecimal)。
- en: 'Note that numbers are stored as integers, and there are no differences between
    them except for how they are formatted in the source code for the human. Octal
    and hexadecimal can be useful when working with binary data. Here is a short example
    of how to define integers:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，数字被存储为整数，它们之间没有区别，除了它们在源代码中的格式化方式。在处理二进制数据时，八进制和十六进制可能很有用。以下是如何定义整数的简短示例：
- en: '[PRE2]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: String
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串
- en: Go comes with a `string` type as well as a `strings` package with a suite of
    useful functions such as `Contains()`, `Join()`, `Replace()`, `Split()`, `Trim()`,
    and `ToUpper()`. There is additionally a `strconv` package dedicated to converting
    various data types to and from strings. You can read more about the `strings`
    package at [https://golang.org/pkg/strings/](https://golang.org/pkg/strings/),
    and the `strconv` package at [https://golang.org/pkg/strconv/](https://golang.org/pkg/strconv/).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Go还提供了`string`类型以及一个`strings`包，其中包含一套有用的函数，如`Contains()`，`Join()`，`Replace()`，`Split()`，`Trim()`和`ToUpper()`。此外还有一个专门用于将各种数据类型转换为字符串的`strconv`包。您可以在[https://golang.org/pkg/strings/](https://golang.org/pkg/strings/)上阅读有关`strings`包的更多信息，以及在[https://golang.org/pkg/strconv/](https://golang.org/pkg/strconv/)上阅读有关`strconv`包的更多信息。
- en: Double quotes are used for strings. Single quotes are used only for an individual
    character or runes, not strings. Strings can be defined using the long form or
    short form with the declare-and-assign operator. You can also use the [PRE3]
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 双引号用于字符串。单引号仅用于单个字符或符文，而不是字符串。可以使用长形式或使用声明和分配运算符的短形式来定义字符串。您还可以使用[PRE3]
- en: package main
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: package main
- en: import "fmt"
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: import "fmt"
- en: func main() {
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: func main() {
- en: // Long form assignment
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: // 长形式分配
- en: var myText = "test string 1"
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: var myText = "test string 1"
- en: // Short form assignment
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: // 短形式分配
- en: myText2 := "test string 2"
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: myText2 := "test string 2"
- en: // Multiline string
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: // 多行字符串
- en: myText3 := `long string
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: myText3 := `long string
- en: spanning multiple
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 跨越多个
- en: lines`
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: lines`
- en: fmt.Println(myText)
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(myText)
- en: fmt.Println(myText2)
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(myText2)
- en: fmt.Println(myText3)
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(myText3)
- en: '}'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE4]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: var myByteArray [128]byte
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: var myByteArray [128]byte
- en: '[PRE5]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: singleByte := myByteArray[4]
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: singleByte := myByteArray[4]
- en: '[PRE6]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: make([]T, lengthAndCapacity)
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: make([]T, lengthAndCapacity)
- en: make([]T, length, capacity)
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: make([]T, length, capacity)
- en: '[PRE7]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: package main
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: package main
- en: import "fmt"
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: import "fmt"
- en: func main() {
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: func main() {
- en: // Create a nil slice
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一个nil切片
- en: var mySlice []byte
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: var mySlice []byte
- en: // Create a byte slice of length 8 and max capacity 128
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建长度为8，最大容量为128的字节切片
- en: mySlice = make([]byte, 8, 128)
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: mySlice = make([]byte, 8, 128)
- en: // Maximum capacity of the slice
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: // 切片的最大容量
- en: fmt.Println("Capacity:", cap(mySlice))
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println("Capacity:", cap(mySlice))
- en: // Current length of slice
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: // 切片的当前长度
- en: fmt.Println("Length:", len(mySlice))
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println("Length:", len(mySlice))
- en: '}'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE8]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: package main
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: package main
- en: import "fmt"
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: import "fmt"
- en: func main() {
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: func main() {
- en: var mySlice []int // nil slice
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: var mySlice []int // nil slice
- en: // Appending works on nil slices.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: // 在nil切片上可以使用附加功能。
- en: // Since nil slices have zero capacity, and have
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: // 由于nil切片的容量为零，并且具有
- en: // no underlying array, it will create one.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: // 没有基础数组，它将创建一个。
- en: mySlice = append(mySlice, 1, 2, 3, 4, 5)
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: mySlice = append(mySlice, 1, 2, 3, 4, 5)
- en: // Individual elements can be accessed from a slice
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: // 可以从切片中访问单个元素
- en: // just like an array by using the square bracket operator.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: // 就像使用方括号运算符一样，就像数组一样。
- en: firstElement := mySlice[0]
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: firstElement := mySlice[0]
- en: fmt.Println("First element:", firstElement)
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println("First element:", firstElement)
- en: '// To get only the second and third element, use:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: // 仅获取第二个和第三个元素，请使用：
- en: subset := mySlice[1:4]
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: subset := mySlice[1:4]
- en: fmt.Println(subset)
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(subset)
- en: // To get the full contents of a slice except for the
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: // 要获取切片的全部内容，除了
- en: '// first element, use:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: // 第一个元素，使用：
- en: subset = mySlice[1:]
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: subset = mySlice[1:]
- en: fmt.Println(subset)
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(subset)
- en: // To get the full contents of a slice except for the
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: // 要获取切片的全部内容，除了
- en: '// last element, use:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: // 最后一个元素，使用：
- en: 'subset = mySlice[0 : len(mySlice)-1]'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 'subset = mySlice[0 : len(mySlice)-1]'
- en: fmt.Println(subset)
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(subset)
- en: // To copy a slice, use the copy() function.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: // 要复制切片，请使用copy()函数。
- en: // If you assign one slice to another with the equal operator,
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: // 如果您使用等号将一个切片分配给另一个切片，
- en: // the slices will point at the same memory location,
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: // 切片将指向相同的内存位置，
- en: // and changing one would change both slices.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: // 更改一个会更改两个切片。
- en: slice1 := []int{1, 2, 3, 4}
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: slice1 := []int{1, 2, 3, 4}
- en: slice2 := make([]int, 4)
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: slice2 := make([]int, 4)
- en: // Create a unique copy in memory
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: // 在内存中创建一个唯一的副本
- en: copy(slice2, slice1)
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: copy(slice2, slice1)
- en: // Changing one should not affect the other
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: // 更改一个不应影响另一个
- en: slice2[3] = 99
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: slice2[3] = 99
- en: fmt.Println(slice1)
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(slice1)
- en: fmt.Println(slice2)
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(slice2)
- en: '}'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE9]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: package main
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: package main
- en: import "fmt"
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: import "fmt"
- en: func main() {
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: func main() {
- en: // Define a Person type. Both fields public
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: // 定义一个Person类型。两个字段都是公共的
- en: type Person struct {
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: type Person struct {
- en: Name string
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Name string
- en: Age  int
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Age  int
- en: '}'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Create a Person object and store the pointer to it
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一个Person对象并存储指向它的指针
- en: 'nanodano := &Person{Name: "NanoDano", Age: 99}'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 'nanodano := &Person{Name: "NanoDano", Age: 99}'
- en: fmt.Println(nanodano)
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(nanodano)
- en: // Structs can also be embedded within other structs.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: // 结构也可以嵌入在其他结构中。
- en: // This replaces inheritance by simply storing the
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: // 这通过简单地存储
- en: // data type as another variable.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: // 另一个变量作为数据类型。
- en: type Hacker struct {
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: type Hacker struct {
- en: Person           Person
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: Person           Person
- en: FavoriteLanguage string
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: FavoriteLanguage string
- en: '}'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: fmt.Println(nanodano)
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(nanodano)
- en: hacker := &Hacker{
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: hacker := &Hacker{
- en: 'Person:           *nanodano,'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 'Person:           *nanodano,'
- en: 'FavoriteLanguage: "Go",'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 'FavoriteLanguage: "Go",'
- en: '}'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: fmt.Println(hacker)
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(hacker)
- en: fmt.Println(hacker.Person.Name)
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(hacker.Person.Name)
- en: fmt.Println(hacker)
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(hacker)
- en: '}'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE10]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: package main
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: package main
- en: import (
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: import (
- en: '"fmt"'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '"fmt"'
- en: '"reflect"'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '"reflect"'
- en: )
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: func main() {
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: func main() {
- en: myInt := 42
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: myInt := 42
- en: intPointer := &myInt
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: intPointer := &myInt
- en: fmt.Println(reflect.TypeOf(intPointer))
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(reflect.TypeOf(intPointer))
- en: fmt.Println(intPointer)
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(intPointer)
- en: fmt.Println(*intPointer)
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(*intPointer)
- en: '}'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE11]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: package main
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: package main
- en: import "fmt"
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: import "fmt"
- en: // Function with no parameters
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: // 没有参数的函数
- en: func sayHello() {
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: func sayHello() {
- en: fmt.Println("Hello.")
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println("Hello.")
- en: '}'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Function with one parameter
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: // 带有一个参数的函数
- en: func greet(name string) {
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: func greet(name string) {
- en: fmt.Printf("Hello, %s.\n", name)
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Printf("Hello, %s.\n", name)
- en: '}'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Function with multiple params of same type
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: // 具有相同类型的多个参数的函数
- en: func greetCustom(name, greeting string) {
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: func greetCustom(name, greeting string) {
- en: fmt.Printf("%s, %s.\n", greeting, name)
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Printf("%s, %s.\n", greeting, name)
- en: '}'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Variadic parameters, unlimited parameters
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: // 变参参数，无限参数
- en: func addAll(numbers ...int) int {
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: func addAll(numbers ...int) int {
- en: sum := 0
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: sum := 0
- en: for _, number := range numbers {
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: for _, number := range numbers {
- en: sum += number
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: sum += number
- en: '}'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: return sum
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: return sum
- en: '}'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Function with multiple return values
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: // 具有多个返回值的函数
- en: // Multiple values encapsulated by parenthesis
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: // 由括号封装的多个值
- en: func checkStatus() (int, error) {
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: func checkStatus() (int, error) {
- en: return 200, nil
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: return 200, nil
- en: '}'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Define a type as a function so it can be used
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: // 将类型定义为函数，以便可以使用
- en: // as a return type
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: // 作为返回类型
- en: type greeterFunc func(string)
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: type greeterFunc func(string)
- en: // Generate and return a function
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: // 生成并返回一个函数
- en: func generateGreetFunc(greeting string) greeterFunc {
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: func generateGreetFunc(greeting string) greeterFunc {
- en: return func(name string) {
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: return func(name string) {
- en: fmt.Printf("%s, %s.\n", greeting, name)
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Printf("%s, %s.\n", greeting, name)
- en: '}'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: func main() {
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: func main() {
- en: sayHello()
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: sayHello()
- en: greet("NanoDano")
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: greet("NanoDano")
- en: greetCustom("NanoDano", "Hi")
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: greetCustom("NanoDano", "Hi")
- en: fmt.Println(addAll(4, 5, 2, 3, 9))
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(addAll(4, 5, 2, 3, 9))
- en: russianGreet := generateGreetFunc("Привет")
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: russianGreet := generateGreetFunc("Привет")
- en: russianGreet("NanoDano")
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: russianGreet("NanoDano")
- en: statusCode, err := checkStatus()
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: var stringToIntMap map[string]int
- en: fmt.Println(statusCode, err)
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(statusCode, err)
- en: '}'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE12]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: type error interface {
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: // and signal when done
- en: Error() string
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: Error() string
- en: '}'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE13]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: package main
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: package main
- en: import "fmt"
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Define a custom type that will
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(map1)
- en: // be used to satisfy the error interface
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: // be used to satisfy the error interface
- en: type customError struct {
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: type customError struct {
- en: Message string
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: Message string
- en: '}'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Satisfy the error interface
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: // This is a blocking operation so execution
- en: // by implementing the Error() function
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: func main() {
- en: // which returns a string
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: // which returns a string
- en: func (e *customError) Error() string {
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: func (e *customError) Error() string {
- en: return e.Message
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: return e.Message
- en: '}'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Sample function to demonstrate
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: log.Println("No done signal yet. Waiting.")
- en: // how to use the custom error
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: // how to use the custom error
- en: func testFunction() error {
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: func testFunction() error {
- en: if true != false { // Mimic an error condition
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: log.Println(tempBool)
- en: return &customError{"Something went wrong."}
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println("n is not greater than 1000.")
- en: '}'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: // Initialize a map using make
- en: return nil
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: return nil
- en: '}'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: func main() {
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '"fmt"'
- en: err := testFunction()
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: err := testFunction()
- en: if err != nil {
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: if err != nil {
- en: fmt.Println(err)
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(err)
- en: '}'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: if x < 100 {
- en: '}'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE14]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: type Reader interface {
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: type Reader interface {
- en: Read(p []byte) (n int, err error)
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: Read(p []byte) (n int, err error)
- en: '}'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: type Writer interface {
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: import (
- en: Write(p []byte) (n int, err error)
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: Write(p []byte) (n int, err error)
- en: '}'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE15]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: package main
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: time.Sleep(time.Second * 3)
- en: import (
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: import (
- en: '"fmt"'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '"fmt"'
- en: '"reflect"'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '"reflect"'
- en: )
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: func main() {
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: package main
- en: // Nil maps will cause runtime panic if used
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println("x is less than 1000.")
- en: // without being initialized with make()
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: func main() {
- en: var intToStringMap map[int]string
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: for key := range myMap {
- en: var stringToIntMap map[string]int
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: for key, value := range map2 {
- en: fmt.Println(reflect.TypeOf(intToStringMap))
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(reflect.TypeOf(intToStringMap))
- en: fmt.Println(reflect.TypeOf(stringToIntMap))
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(reflect.TypeOf(stringToIntMap))
- en: // Initialize a map using make
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: func main() {
- en: map1 := make(map[string]string)
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: import (
- en: map1["Key Example"] = "Value Example"
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: map1["Key Example"] = "Value Example"
- en: map1["Red"] = "FF0000"
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: map1["Red"] = "FF0000"
- en: fmt.Println(map1)
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Initialize a map with literal values
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: // Initialize a map with literal values
- en: map2 := map[int]bool{
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: map2 := map[int]bool{
- en: '4:  false,'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '4:  false,'
- en: '6:  false,'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '6:  false,'
- en: '42: true,'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '42: true,'
- en: '}'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 'case done := <-doneChannel:'
- en: // Access individual elements using the key
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: // Access individual elements using the key
- en: fmt.Println(map1["Red"])
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(map1["Red"])
- en: fmt.Println(map2[42])
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(map2[42])
- en: // Use range to iterate through maps
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: // Use range to iterate through maps
- en: for key, value := range map2 {
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: return &customError{"Something went wrong."}
- en: 'fmt.Printf("%d: %t\n", key, value)'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 'fmt.Printf("%d: %t\n", key, value)'
- en: '}'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: // Satisfy the error interface
- en: '}'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE16]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: package main
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: package main
- en: import (
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: import (
- en: '"log"'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '"log"'
- en: '"time"'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '"time"'
- en: )
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '"fmt"'
- en: // Do some processing that takes a long time
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: statusCode, err := checkStatus()
- en: // in a separate thread and signal when done
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: // in a separate thread and signal when done
- en: func process(doneChannel chan bool) {
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: func process(doneChannel chan bool) {
- en: time.Sleep(time.Second * 3)
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: type error interface {
- en: doneChannel <- true
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: doneChannel <- true
- en: '}'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: func main() {
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: func main() {
- en: // Each channel can support one data type.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: // Each channel can support one data type.
- en: // Can also use custom types
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: // Can also use custom types
- en: var doneChannel chan bool
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: var doneChannel chan bool
- en: // Channels are nil until initialized with make
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: // Channels are nil until initialized with make
- en: doneChannel = make(chan bool)
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Kick off a lengthy process that will
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: type Writer interface {
- en: // signal when complete
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: // signal when complete
- en: go process(doneChannel)
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: go process(doneChannel)
- en: // Get the first bool available in the channel
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: // Get the first bool available in the channel
- en: // This is a blocking operation so execution
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println("x is greater than 10,000")
- en: // will not progress until value is received
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: tempBool := <-doneChannel
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: tempBool := <-doneChannel
- en: log.Println(tempBool)
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: for !readyToExit {
- en: // or to simply ignore the value but still wait
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: // or to simply ignore the value but still wait
- en: // <-doneChannel
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: n++
- en: // Start another process thread to run in background
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: // Start another process thread to run in background
- en: // and signal when done
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println("i:", i)
- en: go process(doneChannel)
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: go process(doneChannel)
- en: // Make channel non-blocking with select statement
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: // This gives you the ability to continue executing
- en: // This gives you the ability to continue executing
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: var intToStringMap map[int]string
- en: // even if no message is waiting in the channel
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: // even if no message is waiting in the channel
- en: var readyToExit = false
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: var readyToExit = false
- en: for !readyToExit {
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: select {
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: select {
- en: 'case done := <-doneChannel:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: // without being initialized with make()
- en: log.Println("Done message received.", done)
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: log.Println("Done message received.", done)
- en: readyToExit = true
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: readyToExit = true
- en: 'default:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 'default:'
- en: log.Println("No done signal yet. Waiting.")
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: for key, value := range intSlice {
- en: time.Sleep(time.Millisecond * 500)
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: time.Sleep(time.Millisecond * 500)
- en: '}'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: // Define a custom type that will
- en: '}'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE17]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: package main
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: package main
- en: import (
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: doneChannel = make(chan bool)
- en: '"fmt"'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '"math/rand"'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '"math/rand"'
- en: )
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: func main() {
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: func main() {
- en: x := rand.Int()
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: x := rand.Int()
- en: if x < 100 {
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: // <-doneChannel
- en: fmt.Println("x is less than 100.")
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println("x is less than 100.")
- en: '}'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: // Basic for loop
- en: if x < 1000 {
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: if x < 1000 {
- en: fmt.Println("x is less than 1000.")
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: // Make channel non-blocking with select statement
- en: '} else if x < 10000 {'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '} else if x < 10000 {'
- en: fmt.Println("x is less than 10,000.")
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println("x is less than 10,000.")
- en: '} else {'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '} else {'
- en: fmt.Println("x is greater than 10,000")
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: // Sample function to demonstrate
- en: '}'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: fmt.Println("x:", x)
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println("x:", x)
- en: // You can put a statement before the condition
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: map1 := make(map[string]string)
- en: // The variable scope of n is limited
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: // The variable scope of n is limited
- en: if n := rand.Int(); n > 1000 {
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: fmt.Println("n is greater than 1000.")
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println("n is greater than 1000.")
- en: fmt.Println("n:", n)
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println("n:", n)
- en: '} else {'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '} else {'
- en: fmt.Println("n is not greater than 1000.")
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: fmt.Println("n:", n)
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println("n:", n)
- en: '}'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // n is no longer available past the if statement
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: // n is no longer available past the if statement
- en: '}'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE18]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: package main
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: package main
- en: import (
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: // will not progress until value is received
- en: '"fmt"'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: // Kick off a lengthy process that will
- en: )
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: func main() {
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '"o": "Operator",'
- en: // Basic for loop
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: // Nil maps will cause runtime panic if used
- en: for i := 0; i < 3; i++ {
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: for i := 0; i < 3; i++ {
- en: fmt.Println("i:", i)
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: if n := rand.Int(); n > 1000 {
- en: '}'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: import "fmt"
- en: // For used as a while loop
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: // For used as a while loop
- en: n := 5
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: n := 5
- en: for n < 10 {
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: for n < 10 {
- en: fmt.Println(n)
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(n)
- en: n++
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: // by implementing the Error() function
- en: '[PRE19]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: package main
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: package main
- en: import "fmt"
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: import "fmt"
- en: func main() {
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: func main() {
- en: intSlice := []int{2, 4, 6, 8}
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: intSlice := []int{2, 4, 6, 8}
- en: for key, value := range intSlice {
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: fmt.Println(key, value)
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(key, value)
- en: '}'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: myMap := map[string]string{
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: // You can put a statement before the condition
- en: '"d": "Donut",'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '"d": "Donut",'
- en: '"o": "Operator",'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: if true != false { // Mimic an error condition
- en: '}'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: // Do some processing that takes a long time
- en: // Iterate over a map
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: // Iterate over a map
- en: for key, value := range myMap {
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: for key, value := range myMap {
- en: fmt.Println(key, value)
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(key, value)
- en: '}'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Iterate but only utilize keys
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: // Iterate but only utilize keys
- en: for key := range myMap {
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: myMap := map[string]string{
- en: fmt.Println(key)
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(key)
- en: '}'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Use underscore to ignore keys
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: // Use underscore to ignore keys
- en: for _, value := range myMap {
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: for _, value := range myMap {
- en: fmt.Println(value)
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '}'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(value)
- en: '[PRE20]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: package main
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: package main
- en: import (
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: import（
- en: '"fmt"'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: “fmt”
- en: '"math/rand"'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: “math/rand”
- en: )
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: func main() {
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: func main（）{
- en: x := 42
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: x：= 42
- en: switch x {
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: switch x {
- en: 'case 25:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: case 25：
- en: fmt.Println("X is 25")
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println（“X是25”）
- en: 'case 42:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: case 42：
- en: fmt.Println("X is the magical 42")
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println（“X是神奇的42”）
- en: // Fallthrough will continue to next case
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: //Fallthrough将继续下一个情况
- en: fallthrough
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: fallthrough
- en: 'case 100:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: case 100：
- en: fmt.Println("X is 100")
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println（“X是100”）
- en: 'case 1000:'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: case 1000：
- en: fmt.Println("X is 1000")
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println（“X是1000”）
- en: 'default:'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: default：
- en: fmt.Println("X is something else.")
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println（“X是其他东西。”）
- en: '}'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Like the if statement a statement
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: //像if语句一样的语句
- en: // can be put in front of the switched variable
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: //可以放在开关变量的前面
- en: switch r := rand.Int(); r {
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: switch r：= rand.Int（）; r {
- en: 'case r % 2:'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: case r％2：
- en: fmt.Println("Random number r is even.")
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println（“随机数r是偶数。”）
- en: 'default:'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: default：
- en: fmt.Println("Random number r is odd.")
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println（“随机数r是奇数。”）
- en: '}'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // r is no longer available after the switch statement
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: //在switch语句之后r不再可用
- en: '}'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE21]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: package main
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: package main
- en: import "fmt"
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: import "fmt"
- en: func main() {
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: func main（）{
- en: goto customLabel
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: goto customLabel
- en: // Will never get executed because
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: //永远不会被执行，因为
- en: // the goto statement will jump right
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: // goto语句将立即跳转
- en: // past this line
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: //过了这条线
- en: fmt.Println("Hello")
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println（“你好”）
- en: 'customLabel:'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: customLabel：
- en: fmt.Println("World")
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println（“世界”）
- en: '}'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE22]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: package main
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: package main
- en: import (
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: import（
- en: '"log"'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: “日志”
- en: '"os"'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: os"
- en: )
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: func main() {
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: func main（）{
- en: file, err := os.Create("test.txt")
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: file，err：= os.Create（“test.txt”）
- en: if err != nil {
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 如果err！= nil {
- en: log.Fatal("Error creating file.")
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: log.Fatal（“创建文件时出错。”）
- en: '}'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: defer file.Close()
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: defer file.Close（）
- en: // It is important to defer after checking the errors.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: //检查错误后延迟很重要。
- en: // You can't call Close() on a nil object
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: //您无法在空对象上调用Close（）
- en: // if the open failed.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: //如果打开失败。
- en: // ...perform some other actions here...
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: // ...在这里执行一些其他操作...
- en: // file.Close() will be called before final exit
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: //在最终退出之前将调用file.Close（）
- en: '}'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE23]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: import "fmt"
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: import "fmt"
- en: '[PRE24]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: import (
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: import（
- en: '"fmt"'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: “fmt”
- en: '"log"'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: “日志”
- en: )
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '[PRE25]'
  id: totrans-532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: package main
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: package main
- en: import (
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: import（
- en: '"fmt"'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: “fmt”
- en: '"reflect"'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: “reflect”
- en: )
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: type Person struct {
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 类型Person struct {
- en: Name string
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: Name string
- en: Age  int
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: Age  int
- en: '}'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: type Doctor struct {
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 类型Doctor struct {
- en: Person         Person
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: Person         Person
- en: Specialization string
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: Specialization string
- en: '}'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: func main() {
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: func main（）{
- en: nanodano := Person{
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: nanodano：= Person {
- en: 'Name: "NanoDano",'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: Name：“NanoDano”，
- en: 'Age:  99,'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: Age：99，
- en: '}'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: drDano := Doctor{
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: drDano：= Doctor {
- en: 'Person:         nanodano,'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: Person：         nanodano，
- en: 'Specialization: "Hacking",'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: Specialization：“黑客”，
- en: '}'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: fmt.Println(reflect.TypeOf(nanodano))
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println（reflect.TypeOf（nanodano））
- en: fmt.Println(nanodano)
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println（nanodano）
- en: fmt.Println(reflect.TypeOf(drDano))
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println（reflect.TypeOf（drDano））
- en: fmt.Println(drDano)
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println（drDano）
- en: '}'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE26]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: package main
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: package main
- en: import "fmt"
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: import "fmt"
- en: type Person struct {
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 类型Person struct {
- en: Name string
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: Name string
- en: '}'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: func NewPerson() Person {
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: func NewPerson（）Person {
- en: return Person{
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 返回Person {
- en: 'Name: "Anonymous",'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: Name：“匿名”，
- en: '}'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: func main() {
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: func main（）{
- en: p := NewPerson()
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: p：= NewPerson（）
- en: fmt.Println(p)
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println（p）
- en: '}'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE27]'
  id: totrans-575
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: myObject.myMethod()
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: myObject.myMethod（）
- en: '[PRE28]'
  id: totrans-577
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: package main
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: package main
- en: import "fmt"
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: import "fmt"
- en: type Person struct {
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 类型Person struct {
- en: Name string
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: Name string
- en: '}'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Person function receiver
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: //人员功能接收器
- en: func (p Person) PrintInfo() {
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: func（p Person）PrintInfo（）{
- en: 'fmt.Printf("Name: %s\n", p.Name)'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Printf（“Name：%s\n”，p.Name）
- en: '}'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Person pointer receiver
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: //人员指针接收器
- en: // If you did not use the pointer receivers
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: //如果您没有使用指针接收器
- en: // it would not modify the person object
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: //它不会修改人的对象
- en: // Try removing the asterisk here and seeing how the
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: //尝试删除这里的星号，看看
- en: // program changes behavior
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: //程序更改行为
- en: func (p *Person) ChangeName(newName string) {
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: func（p * Person）ChangeName（newName string）{
- en: p.Name = newName
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: p.Name = newName
- en: '}'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: func main() {
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: func main（）{
- en: 'nanodano := Person{Name: "NanoDano"}'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: nanodano：= Person {Name：“NanoDano”}
- en: nanodano.PrintInfo()
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: nanodano.PrintInfo（）
- en: nanodano.ChangeName("Just Dano")
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: nanodano.ChangeName（“Just Dano”）
- en: nanodano.PrintInfo()
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: nanodano.PrintInfo（）
- en: '}'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE29]'
  id: totrans-601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: package main
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: package main
- en: import (
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: import（
- en: '"log"'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: “日志”
- en: '"time"'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: “时间”
- en: )
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: func countDown() {
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: func countDown（）{
- en: for i := 5; i >= 0; i-- {
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: for i：= 5; i> = 0; i-- {
- en: log.Println(i)
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: log.Println（i）
- en: time.Sleep(time.Millisecond * 500)
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: time.Sleep（time.Millisecond * 500）
- en: '}'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: func main() {
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: func main（）{
- en: // Kick off a thread
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: //启动一个线程
- en: go countDown()
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: go countDown（）
- en: // Since functions are first-class
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: //由于函数是头等公民
- en: // you can write an anonymous function
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: //您可以编写匿名函数
- en: // for a goroutine
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: //用于goroutine
- en: go func() {
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: go func（）{
- en: time.Sleep(time.Second * 2)
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: time.Sleep（time.Second * 2）
- en: log.Println("Delayed greetings!")
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: log.Println（“延迟问候！”）
- en: '}()'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: （）
- en: // Use channels to signal when complete
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: //使用通道来表示何时完成
- en: // Or in this case just wait
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: //或在这种情况下只是等待
- en: time.Sleep(time.Second * 4)
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: time.Sleep（time.Second * 4）
- en: '}'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE30]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Get fmt package information
  id: totrans-628
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取fmt包信息
- en: godoc fmt
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: godoc fmt
- en: Get source code for fmt package
  id: totrans-630
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取fmt包的源代码
- en: godoc -src fmt
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: godoc -src fmt
- en: Get specific function information
  id: totrans-632
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取特定函数信息
- en: godoc fmt Printf
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: godoc fmt Printf
- en: Get source code for function
  id: totrans-634
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取函数的源代码
- en: godoc -src fmt Printf
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: godoc -src fmt Printf
- en: Run HTTP server to view HTML documentation
  id: totrans-636
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行HTTP服务器以查看HTML文档
- en: godoc -http=localhost:9999
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: godoc -http = localhost：9999
- en: '```'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The HTTP option serves the same documentation that is available on [https://golang.org/](https://golang.org/).
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP选项提供与[https://golang.org/](https://golang.org/)上可用的相同文档。
- en: Summary
  id: totrans-640
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: After reading this chapter you should have a basic understanding of Go fundamentals
    such as what the keywords are, what they do, and what basic data types are available.
    You should also feel comfortable creating functions and custom data types.
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本章后，您应该对Go基础有基本的了解，例如关键字是什么，它们的作用是什么，以及有哪些基本数据类型可用。您还应该可以轻松创建函数和自定义数据类型。
- en: The goal is not to memorize all of the preceding information, but to be aware
    of what tools are available in the language. Use this chapter as a reference if
    necessary. You can find more information about the Go language specification at
    [https://golang.org/ref/spec](https://golang.org/ref/spec).
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 目标不是记住所有先前的信息，而是了解语言中提供了哪些工具。如有必要，使用本章作为参考。您可以在[https://golang.org/ref/spec](https://golang.org/ref/spec)找到有关Go语言规范的更多信息。
- en: In the next chapter, we will look at working with files in Go. We will cover
    basics such as getting file information, seeing whether a file exists, truncating
    files, checking permissions, and creating new files. We will also cover the reader
    and writer interfaces, as well as a number of ways to read and write data. In
    addition to this, we will cover things such as archiving to ZIP or TAR files and
    compressing files with GZIP.
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论在Go中处理文件的工作。我们将涵盖基础知识，如获取文件信息，查看文件是否存在，截断文件，检查权限以及创建新文件。我们还将涵盖读取器和写入器接口，以及多种读取和写入数据的方法。除此之外，我们还将涵盖诸如打包到ZIP或TAR文件以及使用GZIP压缩文件等内容。
