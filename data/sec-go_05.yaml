- en: Packet Capturing and Injection
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据包捕获和注入
- en: Packet capturing is the process of monitoring the raw traffic going through
    a network. This applies to wired Ethernet and wireless network devices. The `tcpdump`
    and `libpcap` packages are the standard when it comes to packet capturing. They
    were written in the 1980s and are still being used today. The `gopacket` package
    not only wraps the C libraries but also adds layers of Go abstraction to make
    it more idiomatic to Go and practical to use.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 数据包捕获是监视通过网络传输的原始流量的过程。这适用于有线以太网和无线网络设备。在数据包捕获方面，`tcpdump`和`libpcap`包是标准。它们是在20世纪80年代编写的，至今仍在使用。`gopacket`包不仅包装了C库，还添加了Go抽象层，使其更符合Go的习惯用法并且更实用。
- en: The `pcap` library allows you to gather information about network devices, read
    packets *off the wire*, store traffic in a `.pcap` file, filter traffic based
    on a number of criteria, or forge custom packets and send them through the network
    device. For the `pcap` library, filtering is done with **Berkeley Packet Filters**
    (**BPF**).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`pcap`库允许您收集有关网络设备的信息，从网络中读取数据包，将流量存储在`.pcap`文件中，根据多种条件过滤流量，或伪造自定义数据包并通过网络设备发送它们。对于`pcap`库，过滤是使用**伯克利数据包过滤器**（**BPF**）完成的。'
- en: There are countless uses of packet capturing. It can be used to set up honeypots
    and monitor what kind of traffic is received. It can aid with forensic investigations
    to determine which hosts acted maliciously and which hosts were exploited. It
    can assist in identifying bottlenecks in a network. It can also be used maliciously
    for stealing information from wireless networks, performing packet scanning, fuzzing,
    ARP spoofing, and other types of attacks.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 数据包捕获有无数种用途。它可以用于设置蜜罐并监视接收到的流量类型。它可以帮助进行取证调查，以确定哪些主机表现恶意，哪些主机被利用。它可以帮助识别网络中的瓶颈。它也可以被恶意使用来从无线网络中窃取信息，执行数据包扫描，模糊测试，ARP欺骗和其他类型的攻击。
- en: These examples require a non-Go dependency and a `libpcap` package, and, therefore,
    they may present more of a challenge to get running. I highly recommend that you
    use Ubuntu or another Linux distribution in a virtual machine for best results
    when following these examples if you do not already use Linux as your primary
    desktop.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这些示例需要一个非Go依赖项和一个`libpcap`包，因此在运行时可能会更具挑战性。如果您尚未将Linux作为主要桌面系统使用，我强烈建议您在虚拟机中使用Ubuntu或其他Linux发行版以获得最佳结果。
- en: Tcpdump is the application written by the authors of `libpcap`. Tcpdump provides
    a command-line utility for capturing packets. These examples will allow you to
    replicate the functionality of the `tcpdump` package and embed it within other
    applications. Some of the examples closely mimic the existing functionality with
    `tcpdump`, and, when applicable, an example usage of `tcpdump` will be provided.
    Because `gopacket` and `tcpdump` both rely on the same underlying `libpcap` package,
    the file format is compatible between them. You can capture files with `tcpdump`
    and read them with `gopacket`, and you can capture packets with `gopacket` and
    read them with any application that uses `libpcap`, such as Wireshark.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Tcpdump是由`libpcap`的作者编写的应用程序。Tcpdump提供了一个用于捕获数据包的命令行实用程序。这些示例将允许您复制`tcpdump`包的功能，并将其嵌入到其他应用程序中。其中一些示例与`tcpdump`的现有功能非常相似，如果适用，将提供`tcpdump`的示例用法。由于`gopacket`和`tcpdump`都依赖于相同的底层`libpcap`包，因此它们之间的文件格式是兼容的。您可以使用`tcpdump`捕获文件，并使用`gopacket`读取它们，也可以使用`gopacket`捕获数据包，并使用任何使用`libpcap`的应用程序读取它们，例如Wireshark。
- en: The official documentation of the `gopacket` package is available at [https://godoc.org/github.com/google/gopacket](https://godoc.org/github.com/google/gopacket).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`gopacket`包的官方文档可在[https://godoc.org/github.com/google/gopacket](https://godoc.org/github.com/google/gopacket)找到。'
- en: Prerequisites
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 先决条件
- en: Before running these examples, you need to have `libpcap` installed. In addition,
    we have to use a third-party Go package. Fortunately, this package is provided
    by Google, a trusted source. Go's `get` ability will download and install the
    remote package. Git will also be needed for `go get` to work properly.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行这些示例之前，您需要安装`libpcap`。此外，我们还必须使用第三方Go包。幸运的是，这个包是由Google提供的，是一个可信赖的来源。Go的`get`功能将下载并安装远程包。Git也将需要用于使`go
    get`正常工作。
- en: Installing libpcap and Git
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装libpcap和Git
- en: The `libpcap` package dependency does not come pre-installed on most systems,
    and the installation procedure is different for each operating system. Here we
    will cover the installation steps for `libpcap` and `git` for Ubuntu, Windows,
    and macOS. I highly recommend that you use Ubuntu or other Linux distributions
    for best results. Without `libpcap`, `gopacket` will not function, and `git` is
    required to fetch the `gopacket` dependency.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`libpcap`包依赖项在大多数系统上都没有预安装，并且安装过程对每个操作系统都是不同的。在这里，我们将介绍Ubuntu、Windows和macOS上安装`libpcap`和`git`的步骤。我强烈建议您使用Ubuntu或其他Linux发行版以获得最佳结果。没有`libpcap`，`gopacket`将无法正常工作，而`git`是获取`gopacket`依赖项所必需的。'
- en: Installing libpcap on Ubuntu
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Ubuntu上安装libpcap
- en: 'In Ubuntu, `libpcap-0.8` is already installed by default. To install the `gopacket`
    library, though, you also need the header files in the development package. You
    can install the header files through the `libpcap-dev` package. We will also install
    `git` because it is needed to run the `go get` command later when installing `gopacket`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu中，默认情况下已经安装了`libpcap-0.8`。但是，要安装`gopacket`库，你还需要开发包中的头文件。你可以通过`libpcap-dev`包安装头文件。我们还将安装`git`，因为在安装`gopacket`时稍后需要运行`go
    get`命令。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Installing libpcap on Windows
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上安装libpcap
- en: Windows is the trickiest and presents the most problems. The Windows implementation
    is not very well supported, and your mileage may vary. The WinPcap is compatible
    with libpcap, and the source code used in these examples will work without modification.
    The only noticeable difference when running in Windows is the naming of network
    devices.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Windows是最棘手的，也是出现最多问题的地方。Windows实现的支持并不是很好，你的使用体验可能会有所不同。WinPcap与libpcap兼容，这些示例中使用的源代码也可以直接在Windows上运行而无需修改。在Windows上运行时唯一显著的区别是网络设备的命名。
- en: A WinPcap installer is available from [https://www.winpcap.org/](https://www.winpcap.org/)
    and is a required component. The developer package, should you need it, is available
    at [https://www.winpcap.org/devel.htm](https://www.winpcap.org/devel.htm) and
    contains the include files and example programs written in C. You should not need
    the developer package for most cases. Git can be installed from [https://git-scm.com/download/win](https://git-scm.com/download/win).
    You will also need MinGW for the compiler from [http://www.mingw.org](http://www.mingw.org).
    You will need to make sure that the 32-bit and 64-bit settings match for everything.
    You can set the `GOARCH=386` or `GOARCH=amd64` environment variables to change
    between 32-bit and 64-bit.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: WinPcap安装程序可从[https://www.winpcap.org/](https://www.winpcap.org/)获取，并且是一个必需的组件。如果需要开发人员包，可以在[https://www.winpcap.org/devel.htm](https://www.winpcap.org/devel.htm)获取，其中包含用C编写的包含文件和示例程序。对于大多数情况，您不需要开发人员包。Git可以从[https://git-scm.com/download/win](https://git-scm.com/download/win)获取。您还需要MinGW作为编译器，可以从[http://www.mingw.org](http://www.mingw.org)获取。您需要确保32位和64位设置匹配。您可以设置`GOARCH=386`或`GOARCH=amd64`环境变量来在32位和64位之间切换。
- en: Installing libpcap on macOS
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在macOS上安装libpcap
- en: In macOS, `libpcap` is already installed. You will also need Git, which is available
    through Homebrew at [https://brew.sh](https://brew.sh), or a Git package installer,
    which is available from [https://git-scm.com/downloads](https://git-scm.com/downloads).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS中，`libpcap`已经安装。您还需要Git，可以通过Homebrew在[https://brew.sh](https://brew.sh)获取，或者通过Git软件包安装程序在[https://git-scm.com/downloads](https://git-scm.com/downloads)获取。
- en: Installing gopacket
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装gopacket
- en: 'After fulfilling the requirement with the `libpcap` and `git` packages, you
    can get the `gopacket` package from GitHub:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在满足`libpcap`和`git`软件包的要求后，您可以从GitHub获取`gopacket`软件包：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Permission problems
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 权限问题
- en: When executing the programs in Linux and Mac environments, you may run into
    permission problems when attempting to access the network device. Run the examples
    using either `sudo` to elevate your permission or switch your user to `root`,
    which is not recommended.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux和Mac环境中执行程序时，可能会遇到访问网络设备时的权限问题。使用`sudo`来提升权限或切换用户到`root`来运行示例，但这并不推荐。
- en: Getting a list of network devices
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取网络设备列表
- en: Part of the `pcap` library includes a function for getting a list of network
    devices.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`pcap`库的一部分包括一个用于获取网络设备列表的函数。'
- en: This program will simply get a list of network devices and list their information.
    In Linux, a common default device name is `eth0` or `wlan0`. On a Mac, it is `en0`.
    In Windows, the names are not pronounceable because they are much longer and represent
    a unique ID. You use the device name as a string to identify the device to capture
    from in later examples. You may need to run the example with administrative privileges
    (for example, `sudo`) if you don't see the lists of the exact devices.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此程序将简单地获取网络设备列表并列出它们的信息。在Linux中，常见的默认设备名称是`eth0`或`wlan0`。在Mac上，是`en0`。在Windows上，名称不可读，因为它们更长并代表唯一的ID。您可以使用设备名称作为字符串来标识以后示例中要捕获的设备。如果您没有看到确切设备的列表，可能需要以管理员权限运行示例（例如`sudo`）。
- en: 'The equivalent `tcpdump` command to list devices is as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 列出设备的等效`tcpdump`命令如下：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Alternatively, you can use this command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用以下命令：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can also use utilities such as `ifconfig` and `ip` to get the names of
    your network devices:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`ifconfig`和`ip`等实用程序来获取您的网络设备的名称：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Capturing packets
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 捕获数据包
- en: The following program demonstrates the basics of capturing a packet. The device
    name is passed as a string. If you don't know the device name, use the previous
    example to get a list of the devices available on your machine. If you don't see
    the exact devices listed, you may need to elevate your privileges and run the
    program with `sudo`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序演示了捕获数据包的基础知识。设备名称以字符串形式传递。如果您不知道设备名称，可以使用前面的示例来获取机器上可用设备的列表。如果您没有看到确切的设备名称列表，可能需要提升权限并使用`sudo`来运行程序。
- en: The promiscuous mode is an option you can enable to listen for packets that
    are not destined for your device. The promiscuous mode is particularly relevant
    with wireless devices because wireless network devices actually have the capability
    to pick up packets in the air that were intended for other recipients.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 混杂模式是一种选项，您可以启用它来监听并捕获并非发送给您设备的数据包。混杂模式在无线设备中尤其相关，因为无线网络设备实际上有能力捕获空中本来是发给其他接收者的数据包。
- en: Wireless traffic is particularly vulnerable to *sniffing* because all the packets
    are broadcast through the air instead of through Ethernet, where physical access
    is required for the wire to intercept traffic. Providing free wireless internet
    with no encryption is very common for coffee shops and other venues. This is convenient
    for guests, but puts your information at risk. If a venue offers encrypted wireless
    internet, it is not automatically safer. If the password is posted somewhere on
    the wall, or it is given out freely, then anyone with the password can decrypt
    the wireless traffic. A popular technique to add security to guest wireless is
    with a captured portal. Captured portals require the user to authenticate in some
    way, even as a guest, and then their session is segmented with separate encryption
    so that others cannot decrypt it.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 无线流量特别容易受到*嗅探*的影响，因为所有数据包都是通过空气广播而不是通过以太网传输，以太网需要物理访问才能拦截流量。提供没有加密的免费无线互联网在咖啡店和其他场所非常常见。这对客人来说很方便，但会使你的信息处于风险之中。如果场所提供加密的无线互联网，并不代表它自动更安全。如果密码被张贴在墙上，或者自由分发，那么任何有密码的人都可以解密无线流量。增加对客人无线网络的安全性的一种流行技术是使用捕获门户。捕获门户要求用户以某种方式进行身份验证，即使是作为访客，然后他们的会话被分割并使用单独的加密，这样其他人就无法解密它。
- en: Wireless access points that offer completely unencrypted traffic must be used
    carefully. If you connect to a site where sensitive information is passed, be
    sure that it is using HTTPS so that your data is encrypted between you and the
    web server you are visiting. VPN connections also offer encrypted tunnels over
    unencrypted channels.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 提供完全未加密流量的无线接入点必须小心使用。如果你连接到一个传递敏感信息的网站，请确保它使用HTTPS，这样你和你访问的网站之间的数据就会被加密。VPN连接也可以在未加密的通道上提供加密隧道。
- en: Some websites are built by unaware or negligent programmers who do not implement
    SSL on their servers. Some websites only encrypt the login page so that your password
    is secure, but subsequently pass the session cookie in plaintext. This means that
    anyone who can pick up the wireless traffic can see the session cookie and use
    it to impersonate the victim to the web server. The web server will treat the
    attacker as if they were logged in as the victim. The attacker never learns the
    password but doesn't need it as long as the session remains active.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一些网站是由不知情或疏忽的程序员构建的，他们在服务器上没有实现SSL。一些网站只加密登录页面，以确保你的密码安全，但随后以明文传递会话cookie。这意味着任何可以拦截无线流量的人都可以看到会话cookie并使用它来冒充受害者访问网站。网站将把攻击者视为受害者已登录。攻击者永远不会得知密码，但只要会话保持活动状态，他们就不需要密码。
- en: Some websites do not have an expiration date on sessions, and they will remain
    active until explicitly logged out. Mobile applications are particularly vulnerable
    to this because users very rarely log out and log back into mobile apps. Closing
    an app and re-opening it does not necessarily create a new session.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一些网站的会话没有过期日期，它们会一直保持活动状态，直到明确退出登录。移动应用程序特别容易受到这种影响，因为用户很少退出并重新登录移动应用程序。关闭一个应用程序并重新打开它并不一定会创建一个新的会话。
- en: 'This example will open the network device for live capture and then print the
    details of each packet received. The program will continue to run until the program
    is killed using *Ctrl* + *C*:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子将打开网络设备进行实时捕获，然后打印每个接收到的数据包的详细信息。程序将继续运行，直到使用*Ctrl* + *C* 杀死程序。
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Capturing with filters
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用过滤器捕获
- en: 'The following program demonstrates how to set filters. Filters use the BPF
    format. If you have ever used Wireshark, you are probably already familiar with
    filters. There are many filter options that can be logically combined. Filters
    can be incredibly complex, and there are many cheat sheets online with common
    filters and examples of neat tricks. Here are a few examples to give you an idea
    of some very basic filters:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序演示了如何设置过滤器。过滤器使用BPF格式。如果你曾经使用过Wireshark，你可能已经熟悉过滤器了。有许多可以逻辑组合的过滤选项。过滤器可以非常复杂，在网上有许多常见过滤器和巧妙技巧的速查表。以下是一些基本过滤器的示例，以便让你了解一些基本过滤器的想法：
- en: '`host 192.168.0.123`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host 192.168.0.123`'
- en: '`dst net 192.168.0.0/24`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dst net 192.168.0.0/24`'
- en: '`port 22`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`port 22`'
- en: '`not broadcast and not multicast`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`not broadcast and not multicast`'
- en: Some of the preceding filters should be self-explanatory. The `host` filter
    will show only packets to or from that host. The `dst net` filter will capture
    incoming traffic that is going to a `192.168.0.*` address. The `port` filter is
    watching only for port `22` traffic. The `not broadcast and not multicast` filter
    demonstrates how you can negate and combine multiple filters. Filtering out `broadcast`
    and `multicast` is useful because they tend to clutter a capture.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的一些过滤器应该是不言自明的。`host`过滤器将只显示发送到或从该主机的数据包。`dst net`过滤器将捕获发送到`192.168.0.*`地址的流量。`port`过滤器只监视端口`22`的流量。`not
    broadcast and not multicast`过滤器演示了如何否定和组合多个过滤器。过滤掉`广播`和`多播`是有用的，因为它们往往会使捕获变得混乱。
- en: 'The equivalent `tcpdump` command for a basic capture is simply running it and
    passing it an interface:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一个基本捕获的等效`tcpdump`命令只需运行它并传递一个接口：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you want to pass filters, you just pass them as command-line arguments,
    like this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想传递过滤器，只需将它们作为命令行参数传递，就像这样：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This example is using a filter that will only capture traffic on TCP port `80`,
    which should be HTTP traffic. It does not specify whether the local port or remote
    port is `80`, so it will capture any port `80` traffic that is coming in or going
    out. If you are running it on your personal computer, you probably do not have
    a web server running so that it will capture HTTP traffic you make through the
    web browser. If you were running the capture on a web server, it would capture
    incoming HTTP request traffic.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子使用了一个只捕获TCP端口`80`流量的过滤器，这应该是HTTP流量。它没有指定本地端口或远程端口是否为`80`，因此它将捕获任何进出的端口`80`流量。如果你在个人电脑上运行它，你可能没有运行web服务器，所以它将捕获你通过web浏览器进行的HTTP流量。如果你在web服务器上运行捕获，它将捕获传入的HTTP请求流量。
- en: In this example, a handle for the network device is created using `pcap.OpenLive()`.
    Before reading packets from the device, the filter is set using `handle.SetBPFFilter()`,
    and then the packets are read from the handle. Read more about filters at [https://en.wikipedia.org/wiki/Berkeley_Packet_Filter](https://en.wikipedia.org/wiki/Berkeley_Packet_Filter).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，使用`pcap.OpenLive()`创建了一个网络设备的句柄。在从设备读取数据包之前，使用`handle.SetBPFFilter()`设置了过滤器，然后从句柄中读取数据包。在[https://en.wikipedia.org/wiki/Berkeley_Packet_Filter](https://en.wikipedia.org/wiki/Berkeley_Packet_Filter)上了解更多关于过滤器的信息。
- en: 'This example opens a network device for live capture and then sets a filter
    with `SetBPFFilter()`. In this case, we will use the `tcp and port 80` filter to
    look for HTTP traffic. Any packets captured are printed to standard output:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子打开一个网络设备进行实时捕获，然后使用`SetBPFFilter()`设置一个过滤器。在这种情况下，我们将使用`tcp and port 80`过滤器来查找HTTP流量。捕获到的任何数据包都会被打印到标准输出：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Saving to the pcap file
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据保存到pcap文件
- en: This program will perform a packet capture and store the results in a file.
    The important step in this example is the call to the `pcapgo` package—the `WriteFileHeader()`
    function of `Writer`. After that, the `WritePacket()` function can be used to
    write the desired packets to a file. You can capture all the traffic and choose
    to write only specific packets based on your own filtering criteria, if desired.
    Perhaps you only want to write odd or malformed packets to log anomalies.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序将执行数据包捕获并将结果存储在文件中。在这个例子中的重要步骤是调用`pcapgo`包——`Writer`的`WriteFileHeader()`函数。之后，`WritePacket()`函数可以用来将所需的数据包写入文件。您可以捕获所有流量，并根据自己的过滤条件选择只写入特定的数据包，如果需要的话。也许您只想将奇数或格式错误的数据包写入日志以记录异常。
- en: 'To do the equivalent with `tcpdump`, just pass it the `-w` flag with a filename,
    as shown in the following command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`tcpdump`进行等效操作，只需使用`-w`标志和文件名，如下命令所示：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The pcap files created with this example can be opened with Wireshark and viewed
    just like files created with `tcpdump`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个例子创建的pcap文件可以使用Wireshark打开，并且可以像使用`tcpdump`创建的文件一样查看。
- en: 'This example creates an output file named `test.pcap` and opens a network device
    for live capture. It captures 100 packets to the file and then exits:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子创建了一个名为`test.pcap`的输出文件，并打开一个网络设备进行实时捕获。它将100个数据包捕获到文件中，然后退出：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Reading from a pcap file
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从pcap文件中读取
- en: Instead of opening a device for live capture, you can also open a pcap file
    for inspection offline. After getting a handle, whether it was from `pcap.OpenLive()`
    or `pcap.OpenOffline()`, the handle is treated the same. No distinction is made
    between a live device and a capture file once the handle is created, except that
    a live device will continue to deliver packets, and a file will eventually end.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以打开一个pcap文件进行离线检查，而不是打开一个设备进行实时捕获。无论是从`pcap.OpenLive()`还是`pcap.OpenOffline()`获取了一个句柄之后，该句柄都会被同等对待。一旦创建了句柄，实时设备和捕获文件之间就没有区别，只是实时设备将继续传递数据包，而文件最终会结束。
- en: 'You can read pcap files that were captured with any `libpcap` client, including
    Wireshark, `tcpdump`, or other `gopacket` applications. This example opens a file
    named `test.pcap` using `pcap.OpenOffline()` and then iterates through the packets
    using `range` and prints the basic packet information. Change the filename from
    `test.pcap` to whatever file you want to read:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用任何`libpcap`客户端捕获的pcap文件，包括Wireshark、`tcpdump`或其他`gopacket`应用程序。这个例子使用`pcap.OpenOffline()`打开一个名为`test.pcap`的文件，然后使用`range`迭代数据包并打印基本数据包信息。将文件名从`test.pcap`更改为您想要读取的任何文件：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Decoding packet layers
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解码数据包层
- en: 'Packets can be decoded layer by layer with the `packet.Layer()` function. This
    program will inspect the packets, look for TCP traffic, and then output the Ethernet
    layer, IP layer, TCP layer, and application layer information. This is useful
    when you need to inspect the traffic and make a decision based on the information.
    When it gets to the application layer, it looks for the `HTTP` keyword and prints
    a message if one is detected:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 数据包可以使用`packet.Layer()`函数逐层解码。该程序将检查数据包，查找TCP流量，然后输出以太网层、IP层、TCP层和应用层信息。当需要检查流量并根据信息做出决定时，这是非常有用的。当它到达应用层时，它会查找`HTTP`关键字，如果检测到，则打印一条消息：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Creating a custom layer
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义层
- en: You are not restricted to the most common layers, such as Ethernet, IP, and
    TCP. You can create your own layers. This has limited use for most people, but
    in some extremely rare cases it may make sense to replace the TCP layer with something
    customized to meet specific requirements.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您不仅限于最常见的层，比如以太网、IP和TCP。您可以创建自己的层。对于大多数人来说，这种用途有限，但在一些极端罕见的情况下，用自定义层替换TCP层以满足特定要求可能是有意义的。
- en: This example demonstrates how to create a custom layer. This is good for implementing
    a protocol that is not already included with `gopacket/layers` package. There
    are over 100 layer types already included with `gopacket`. You can create custom
    layers at any level.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子演示了如何创建一个自定义层。这对于实现`gopacket/layers`包中尚未包含的协议非常有用。`gopacket`中已经包含了100多种层类型。您可以在任何级别创建自定义层。
- en: 'The first thing this code does is to define a custom data structure to represent
    our layer. The data structure not only holds our custom data (`SomeByte` and `AnotherByte`)
    but also needs a byte slice to store the rest of the actual payload, along with
    any other layers (`restOfData`):'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的第一件事是定义一个自定义数据结构来表示我们的层。数据结构不仅保存我们的自定义数据（`SomeByte`和`AnotherByte`），还需要一个字节片来存储实际负载的其余部分，以及其他层（`restOfData`）：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Converting bytes to and from packets
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将字节转换为数据包和从数据包转换
- en: In some cases, there may be raw bytes that you want to convert into a packet
    or vice versa. This example creates a simple packet and then obtains the raw bytes
    that make up the packet. The raw bytes are then taken and converted back into
    a packet to demonstrate the process.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，可能有原始字节，您希望将其转换为数据包，或者反之亦然。这个例子创建了一个简单的数据包，然后获取组成数据包的原始字节。然后取这些原始字节并将其转换回数据包以演示这个过程。
- en: 'In this example, we will create and serialize a packet using `gopacket.SerializeLayers()`.
    The packet consists of several layers: Ethernet, IP, TCP, and payload. During
    serialization, if any of the packets come back as nil, this means that it could
    not decode it into the proper layer (malformed or incorrect packet type). After
    serializing the packet into a buffer, we will get a copy of the raw bytes that
    make up the packet with `buffer.Bytes()`. With the raw bytes, we can then decode
    the data layer by layer using `gopacket.NewPacket()`. By taking advantage of `SerializeLayers()`,
    you can convert packet structs to raw bytes, and using `gopacket.NewPacket()`,
    you can convert the raw bytes back to structured data.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用`gopacket.SerializeLayers()`创建和序列化一个数据包。数据包由几个层组成：以太网、IP、TCP和有效负载。在序列化过程中，如果任何数据包返回为nil，这意味着它无法解码成正确的层（格式错误或不正确的数据包类型）。将数据包序列化到缓冲区后，我们将得到组成数据包的原始字节的副本，使用`buffer.Bytes()`。有了原始字节，我们可以使用`gopacket.NewPacket()`逐层解码数据。通过利用`SerializeLayers()`，您可以将数据包结构转换为原始字节，并使用`gopacket.NewPacket()`，您可以将原始字节转换回结构化数据。
- en: '`NewPacket()` takes the raw bytes as the first parameter. The second parameter
    is the lowest-level layer you want to decode. It will decode that layer and all
    layers on top of it. The third parameter for `NewPacket()` is the type of decoding
    and must be one of the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`NewPacket()`将原始字节作为第一个参数。第二个参数是您想要解码的最底层层。它将解码该层以及其上的所有层。`NewPacket()`的第三个参数是解码类型，必须是以下之一：'
- en: '`gopacket.Default`: This is to decode all at once, and is the safest.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gopacket.Default`：这是一次性解码所有内容，也是最安全的。'
- en: '`gopacket.Lazy`: This is to decode on demand, but it is not concurrent safe.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gopacket.Lazy`：这是按需解码，但不是并发安全的。'
- en: '`gopacket.NoCopy`: This will not create a copy of the buffer. Only use it if
    you can guarantee the packet data in the memory will not change'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gopacket.NoCopy`：这不会创建缓冲区的副本。只有在您可以保证内存中的数据包数据不会更改时才使用它'
- en: 'Here is the full code to turn a packet structs into bytes and then back to
    packets:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将数据包结构转换为字节，然后再转换回数据包的完整代码：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Creating and sending packets
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和发送数据包
- en: This example does a couple of things. First, it will show you how to use the
    network device to send raw bytes, so you can use it almost like a serial connection
    to send data. This is useful for really low-level data transfer, but if you want
    to interact with an application, you probably want to build a packet that other
    hardware and software can recognize.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子做了几件事。首先，它将向您展示如何使用网络设备发送原始字节，这样您就可以几乎像串行连接一样使用它来发送数据。这对于真正的低级数据传输很有用，但如果您想与应用程序交互，您可能希望构建一个其他硬件和软件可以识别的数据包。
- en: The next thing it does is show you how to create a packet with the Ethernet,
    IP, and TCP layers. Everything is default and empty, though, so it doesn't really
    do anything.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 它接下来要做的事情是向您展示如何创建一个包含以太网、IP和TCP层的数据包。不过，所有内容都是默认和空的，所以实际上并没有做任何事情。
- en: Finally, we will create another packet, but we'll actually fill in some MAC
    addresses for the Ethernet layer, some IP addresses for IPv4, and port numbers
    for the TCP layer. You should see how you can forge packets and impersonate devices
    with that.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将创建另一个数据包，但实际上会为以太网层填写一些MAC地址，为IPv4填写一些IP地址，为TCP层填写一些端口号。您应该看到如何伪造数据包并冒充设备。
- en: The TCP layer struct has Boolean fields for the `SYN`, `FIN`, and `ACK` flags,
    which can be read or set. This is good for manipulating and fuzzing TCP handshakes,
    sessions, and port scanning.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: TCP层结构具有`SYN`、`FIN`和`ACK`标志的布尔字段，可以读取或设置。这对于操纵和模糊化TCP握手、会话和端口扫描非常有用。
- en: The `pcap` library provides an easy way to send bytes, but the `layers` package
    in `gopacket` assists us in creating the byte structure for the several layers.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`pcap`库提供了一种发送字节的简单方法，但`gopacket`中的`layers`包协助我们创建了几个层的字节结构。'
- en: 'The following is the code implementation of this example:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是此示例的代码实现：
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Decoding packets faster
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更快地解码数据包
- en: If we know what layers to expect, we can use existing structures to store the
    packet information instead of creating new structs for every packet that takes
    time and memory. It is faster to use `DecodingLayerParser`. It is like marshaling
    and unmarshaling data.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们知道要期望的层，我们可以使用现有的结构来存储数据包信息，而不是为每个数据包创建新的结构，这需要时间和内存。使用`DecodingLayerParser`更快。这就像编组和解组数据。
- en: This example demonstrates how to create layer variables at the beginning of
    the program and reuse the same variables over and over instead of creating new
    ones for each packet. A parser is created with `gopacket.NewDecodingLayerParser()`,
    which we provide with the layer variables we want to use. One caveat here is that
    it will only decode the layer types that you created initially.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子演示了如何在程序开始时创建层变量，并重复使用相同的变量，而不是为每个数据包创建新的变量。使用`gopacket.NewDecodingLayerParser()`创建一个解析器，我们提供了要使用的层变量。这里的一个注意事项是，它只会解码最初创建的层类型。
- en: 'The following is the code implementation of this example:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是此示例的代码实现：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Summary
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Having read this chapter, you should now have a very good understanding of the
    `gopacket` package. You should be able to write a simple packet-capturing application
    using the examples from this chapter. Once again, it is not about memorizing all
    of the functions or the details about the layers. The important thing is to understand
    the big picture at a high level and be able to recall what tools are available
    to you when scoping and implementing an application.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本章后，您现在应该对`gopacket`包有很好的理解。您应该能够使用本章的示例编写一个简单的数据包捕获应用程序。再次强调，重要的不是记住所有的函数或层的细节。重要的是以高层次理解整体情况，并能够回忆起在范围和实施应用程序时可用的工具。
- en: Try writing your own program based on these examples to capture interesting
    network traffic from your machine. Try capturing and inspecting a specific port
    or application to see how it works over the wire. See the difference between applications
    that use encryption and ones that pass data over the wire in plaintext. You may
    just want to capture all the traffic going on in the background and see which
    applications are busy over the network, even when you are idle at the machine.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试根据这些示例编写自己的程序，以捕获来自您的计算机的有趣的网络流量。尝试捕获和检查特定端口或应用程序，以查看它在网络上传输时的工作方式。查看使用加密和以明文传输数据的应用程序之间的区别。您可能只是想捕获后台正在进行的所有流量，并查看在您空闲时哪些应用程序在网络上忙碌。
- en: All kinds of useful tools can be built using the `gopacket` library. Aside from
    basic packet capturing for later review, you can implement a monitoring system
    that alerts when a large spike in traffic is identified, or for spotting anomalous
    traffic.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`gopacket`库可以构建各种有用的工具。除了基本的数据包捕获以供以后审查之外，您还可以实现一个监控系统，当识别到大量流量激增或发现异常流量时发出警报。
- en: Because the `gopacket` library can also be used to send packets, a highly customized
    port scanner can be created. You can craft raw packets to perform TCP SYN-only
    scans, where the connection is never fully established; XMAS scans, where all
    of the flags are turned on; NULL scans, where every field is set to null; and
    a variety of other scans that require full control over the packets being sent,
    including sending malformed packets intentionally. You can also build fuzzers
    to send bad packets to a network service to see how it behaves. So, see what ideas
    you can come up with.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`gopacket`库也可以用于发送数据包，因此可以创建高度定制的端口扫描器。您可以制作原始数据包来执行仅进行TCP SYN扫描的操作，其中连接从未完全建立；XMAS扫描，其中所有标志都被打开；NULL扫描，其中每个字段都设置为null；以及一系列其他需要对发送的数据包进行完全控制的扫描，包括故意发送格式错误的数据包。您还可以构建模糊测试器，向网络服务发送错误的数据包，以查看其行为。因此，看看您能想出什么样的想法。
- en: In the next chapter, we will look at cryptography with Go. We will start by
    looking at hashing, checksums, and storing passwords securely. Then we will look
    at symmetric and asymmetric encryption, what they are, how they differ, why they
    are useful, and how to use them in Go. We will look at how to create an encrypted
    server with certificates, and how to use an encrypted client to connect. Understanding
    the application of cryptography is critical for modern security, so we will look
    at the most common and practical use cases.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习使用Go进行加密。我们将首先看一下哈希、校验和以及安全存储密码。然后我们将研究对称和非对称加密，它们是什么，它们的区别，为什么它们有用，以及如何在Go中使用它们。我们将学习如何创建带有证书的加密服务器，以及如何使用加密客户端进行连接。理解加密的应用对于现代安全至关重要，因此我们将研究最常见和实际的用例。
