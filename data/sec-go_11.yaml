- en: Host Discovery and Enumeration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主机发现和枚举
- en: Host discovery is the process of looking for hosts on a network. This is useful
    if you gained access to a machine on a private network, and you want to see which
    other machines are on the network and start to gather a picture of what the network
    looks like. You can also treat the entire internet as the network and look for
    certain types of hosts or just look for any hosts at all. Ping sweeps and port
    scanning are common techniques of identifying hosts. A common tool used for this
    purpose is nmap. In this chapter, we will cover basic port scanning with a TCP
    connect scan and banner grabbing, which are two of the most common use cases for
    nmap. We will also cover raw socket connections that can be used to manually interact
    and explore a server's ports.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 主机发现是查找网络上的主机的过程。如果你已经访问了私有网络上的一台机器，并且想要查看网络上的其他机器并开始收集网络的情况，这是很有用的。你也可以将整个互联网视为网络，并寻找特定类型的主机或者只是寻找任何主机。Ping扫描和端口扫描是识别主机的常用技术。用于此目的的常用工具是nmap。在本章中，我们将介绍使用TCP连接扫描和横幅抓取进行基本端口扫描，这是nmap的两种最常见用例。我们还将介绍可以用于手动交互和探索服务器端口的原始套接字连接。
- en: Enumeration is a similar idea, but refers to actively examining a specific machine
    to determine as much information as you can. This includes scanning a server's
    ports to see which one is open, grabbing banners to inspect services, making calls
    to various services to get version numbers and generally search for attack vectors.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举是一个类似的概念，但是指的是主动检查特定机器以获取尽可能多的信息。这包括扫描服务器的端口以查看哪个端口是开放的，获取横幅以检查服务，调用各种服务以获取版本号，并通常搜索攻击向量。
- en: Host discovery and enumeration are critical steps to an effective penetration
    test because you cannot exploit a machine if you don't even know it exists. For
    example, if an attacker only knows how to find hosts using the `ping` command,
    then you can easily hide all of your hosts from the attacker by simply ignoring
    ping requests.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 主机发现和枚举是有效渗透测试的关键步骤，因为如果你甚至不知道机器的存在，就无法利用它。例如，如果攻击者只知道如何使用`ping`命令查找主机，那么你可以通过简单地忽略ping请求来轻松地将所有主机隐藏起来，让攻击者无法找到。
- en: Host discovery and enumeration require active connections to a machine so that
    you will leave logs, possibly trigger alarms, and otherwise, get noticed. There
    are some ways to be sneaky, such as performing TCP SYN-only scans so that a complete
    TCP connection is never made, or using a proxy when connecting, which will not
    hide your presence, but will make it appear as if you are connecting from somewhere
    else. Using a proxy to hide your IP can be useful if the IP gets blocked, because
    you can simply switch to a new proxy.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 主机发现和枚举需要与机器进行主动连接，这样你就会留下日志，可能触发警报，或者被注意到。有一些方法可以偷偷摸摸，比如只执行TCP SYN扫描，这样就不会建立完整的TCP连接，或者在连接时使用代理，这样不会隐藏你的存在，但会让它看起来好像你是从其他地方连接的。如果IP被阻止，使用代理隐藏你的IP可能是有用的，因为你可以简单地切换到新的代理。
- en: Fuzzing is also covered in this chapter, although it is only touched on very
    briefly. Fuzzing warrants its own chapter and, in fact, whole books have been
    written about the topic. Fuzzing is more useful when reverse engineering or searching
    for vulnerabilities, but can be useful for getting information about a service.
    For example, a service may return no response, giving you no clues about its purpose,
    but if you fuzz it with bad data and it returns an error, you may learn what kind
    of input it is expecting.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还涵盖了模糊测试，尽管只是简要提及。模糊测试需要有自己的章节，事实上，已经有整本书专门讨论了这个主题。模糊测试在逆向工程或搜索漏洞时更有用，但也可以用于获取有关服务的信息。例如，一个服务可能不返回任何响应，让你对其用途一无所知，但如果你用错误的数据进行模糊测试，它返回一个错误，你可能会了解它期望接收的输入类型。
- en: 'In this chapter, we will specifically cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专门涵盖以下主题：
- en: TCP and UDP sockets
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TCP和UDP套接字
- en: Port scanning
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口扫描
- en: Banner grabbing
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 横幅抓取
- en: TCP proxies
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TCP代理
- en: Finding named hosts on a network
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在网络上查找命名主机
- en: Fuzzing network services
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模糊测试网络服务
- en: TCP and UDP sockets
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TCP和UDP套接字
- en: Sockets are the building blocks of networking. Servers listen and clients dial
    using sockets to bind together and share information. The **Internet Protocol**
    (**IP**) layer specifies the address of a machine, but the **Transmission Control
    Protocol** (**TCP**) or the **User Datagram Protocol** (**UDP**) specify which
    port on the machine should be used.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 套接字是网络的构建模块。服务器使用套接字监听，客户端使用套接字拨号来绑定并共享信息。**Internet Protocol**（**IP**）层指定了机器的地址，但**Transmission
    Control Protocol**（**TCP**）或**User Datagram Protocol**（**UDP**）指定了机器上应该使用的端口。
- en: The main difference between the two is the connection state. TCP keeps the connection
    alive and verifies that messages are received. UDP just sends a message off without
    receiving an acknowledgement from the remote host.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 两者之间的主要区别是连接状态。TCP保持连接活动并验证消息是否已接收。UDP只是发送消息而不从远程主机接收确认。
- en: Creating a server
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建服务器
- en: 'Here is an example server. The `tcp` argument for `net.Listen()` can be changed
    to `udp` if you want to change protocol:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例服务器。如果要更改协议，可以将`net.Listen()`的`tcp`参数更改为`udp`：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating a client
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建客户端
- en: 'This example creates a simple network client that will work with the server
    from the previous example. This example uses TCP but, like `net.Listen()`, you
    can simply swap `tcp` for `udp` in `net.Dial()` if you want to switch protocols:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例创建了一个简单的网络客户端，可以与前面示例中的服务器一起工作。这个示例使用了TCP，但是像`net.Listen()`一样，如果要切换协议，可以在`net.Dial()`中将`tcp`简单地替换为`udp`：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Port scanning
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 端口扫描
- en: After finding a host on the network, perhaps after doing a ping sweep or monitoring
    the network traffic, you typically want to scan the ports and see which ports
    are open and accepting connections. You can learn a lot about a machine just by
    seeing what ports are open. You might be able to determine whether it is Windows
    or Linux or whether it is hosting an email server, a web server, a database server,
    and more.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在找到网络上的主机之后，也许在进行ping扫描或监视网络流量之后，通常希望扫描端口并查看哪些端口是打开的并接受连接。通过查看哪些端口是打开的，您可以了解有关机器的很多信息。您可能能够确定它是Windows还是Linux，或者它是否托管电子邮件服务器、Web服务器、数据库服务器等。
- en: There are many types of port scans, but this example demonstrates the most basic
    and straightforward port scan example, which is a TCP connect scan. It connects
    like any typical client and sees whether the server accepts the request. It does
    not send or receive any data and immediately disconnects, logging if it was successful.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多类型的端口扫描，但这个例子演示了最基本和直接的端口扫描示例，即TCP连接扫描。它像任何典型的客户端一样连接，并查看服务器是否接受请求。它不发送或接收任何数据，并立即断开连接，记录是否成功。
- en: The following example scans the localhost machine only and limits the ports
    checked to the reserved ports 0-1024\. Database servers, such as MySQL, often
    listen on higher number ports such as `3306`, so remove you will want to adjust
    the port range or use a predefined list of common ports.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例仅扫描本地主机，并将检查的端口限制为保留端口0-1024。数据库服务器，如MySQL，通常在较高的端口上侦听，例如`3306`，因此您将需要调整端口范围或使用常见端口的预定义列表。
- en: 'Each TCP connect request is done in a separate goroutine, so they all will
    run concurrently and it finishes very quickly. The `net.DialTimeout()` function
    is used so that we can set the maximum duration of time we are willing to wait:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 每个TCP连接请求都在单独的goroutine中完成，因此它们都将并发运行，并且完成非常快。使用`net.DialTimeout()`函数，以便我们可以设置我们愿意等待的最长时间：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Grabbing a banner from a service
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从服务获取横幅
- en: After identifying the ports that are open, you can try to read from the connection
    and see whether the service provides a banner or an initial message.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 确定打开的端口后，您可以尝试从连接中读取并查看服务是否提供横幅或初始消息。
- en: 'The following example works like the previous, but instead of just connecting
    and disconnecting, it will connect and try to read an initial message from the
    server. If the server provides any data, it is printed, but if the server does
    not send any data, nothing is printed:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例与前一个示例类似，但不仅连接和断开连接，而是连接并尝试从服务器读取初始消息。如果服务器提供任何数据，则打印出来，但如果服务器没有发送任何数据，则不会打印任何内容：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Creating a TCP proxy
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建TCP代理
- en: Much like the HTTP proxy in [Chapter 9](f15910a1-239e-49a5-b4d9-3881a524bfa9.xhtml),
    *Web Applications*, a TCP level proxy can be useful for debugging, logging, analyzing
    traffic, and privacy. When doing port scans, host discovery, and enumeration,
    a proxy can be useful to hide your location and source IP address. You may want
    to hide where you are coming from, disguise who you are, or just use a throwaway
    IP in case you get blacklisted for performing the requests.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 与[第9章](f15910a1-239e-49a5-b4d9-3881a524bfa9.xhtml)中的HTTP代理类似，TCP级别代理对于调试、记录、分析流量和保护隐私都很有用。在进行端口扫描、主机发现和枚举时，代理可以隐藏您的位置和源IP地址。您可能希望隐藏您的来源地，伪装您的身份，或者只是使用一次性IP，以防因执行请求而被列入黑名单。
- en: The following example will listen in on a local port, forward a request to a
    remote host, and then send the response of the remote server back to the client.
    It will also log any requests.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将监听本地端口，将请求转发到远程主机，然后将远程服务器的响应发送回客户端。它还会记录任何请求。
- en: 'You can test out this proxy by running the server in the previous section and
    then setting up the proxy to forward to that server. When the echoing server and
    the proxy server are running, use the TCP client to connect to the proxy server:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在上一节中运行服务器，然后设置代理以转发到该服务器来测试此代理。当回显服务器和代理服务器正在运行时，使用TCP客户端连接到代理服务器：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Finding named hosts on a network
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在网络上查找命名主机
- en: If you have just gained access to a network, one of the first things you can
    do is to get an idea of what hosts are on the network. You can scan all IP addresses
    on a subnet and then do a DNS lookup to see if you can find any named hosts. Hostnames
    can have descriptive or informative names that give clues as to what a server
    may be running.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您刚刚获得对网络的访问权限，您可以做的第一件事之一是了解网络上有哪些主机。您可以扫描子网上的所有IP地址，然后进行DNS查找，看看是否可以找到任何命名主机。主机名可以具有描述性或信息性的名称，可以提供有关服务器可能正在运行的内容的线索。
- en: 'The pure Go resolver is default and can only block a goroutine instead of a
    system thread, making it a little more efficient. You can explicitly set the DNS
    resolver with an environment variable:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 纯Go解析器是默认的，只能阻塞一个goroutine而不是系统线程，这样更有效率一些。您可以使用环境变量显式设置DNS解析器：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This example looks for every possible host on a subnet and tries to resolve
    a hostname for each IP:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子寻找子网上的每个可能的主机，并尝试为每个IP解析主机名：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Fuzzing a network service
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对网络服务进行模糊测试
- en: Fuzzing is when you send intentionally malformed, excessive, or random data
    to an application in an attempt to make it misbehave, crash, or reveal sensitive
    information. You can identify buffer overflow vulnerabilities, which can result
    in remote code execution. If you cause an application to crash or stop responding
    after you send it data of a certain size, it may be due to a buffer overflow.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 模糊测试是指向应用程序发送故意格式不正确、过多或随机的数据，以使其行为异常、崩溃或泄露敏感信息。您可以识别缓冲区溢出漏洞，这可能导致远程代码执行。如果在向应用程序发送特定大小的数据后导致其崩溃或停止响应，可能是由于缓冲区溢出引起的。
- en: Sometimes, you will just cause a denial of service by causing a service to use
    too much memory or tie up all the processing power. Regular expressions are notoriously
    slow and can be abused in the URL routing mechanisms of web applications to consume
    all the CPU with few requests.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能会因为使服务使用过多内存或占用所有处理能力而导致拒绝服务。正则表达式因其速度慢而臭名昭著，并且可以在Web应用程序的URL路由机制中被滥用，用少量请求就可以消耗所有CPU。
- en: Nonrandom, but malformed, data can be just as dangerous, if not more so. A properly
    malformed video file can cause VLC to crash and expose code execution. A properly
    malformed packet, with 1 byte altered, can lead to sensitive data being exposed,
    as in the Heartbleed OpenSSL vulnerability.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 非随机但格式错误的数据可能同样危险，甚至更危险。一个正确格式错误的视频文件可能会导致VLC崩溃并暴露代码执行。一个正确格式错误的数据包，只需改变1个字节，就可能导致敏感数据暴露，就像Heartbleed
    OpenSSL漏洞一样。
- en: The following example will demonstrate a very basic TCP fuzzer. It sends random
    bytes of increasing length to a server. It starts with 1 byte and grows exponentially
    by a power of 2\. First, it sends 1 byte, then 2, 4, 8, 16, continuing until it
    returns an error or reaches the maximum configured limit.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将演示一个非常基本的TCP模糊器。它向服务器发送逐渐增加长度的随机字节。它从1字节开始，按2的幂指数级增长。首先发送1字节，然后是2、4、8、16，一直持续到返回错误或达到最大配置限制。
- en: 'Tweak `maxFuzzBytes` to set the maximum size of data you want to send to the
    service. Be aware that it launches all the threads at once, so be careful about
    the load on the server. Look for anomalies in the responses or for a total crash
    from the server:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 调整`maxFuzzBytes`以设置要发送到服务的数据的最大大小。请注意，它会同时启动所有线程，所以要小心服务器的负载。寻找响应中的异常或服务器的崩溃。
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Summary
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Having reading this chapter, you should now understand the basic concepts of
    host discovery and enumeration. You should be able to explain them at a high level
    and provide a basic example of each concept.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本章后，你现在应该了解主机发现和枚举的基本概念。你应该能够在高层次上解释它们，并提供每个概念的基本示例。
- en: First, we discussed raw TCP sockets with an example of a simple server and client.
    These examples aren't incredibly useful by themselves, but they are the template
    for building tools that perform custom interactions with services. This will be
    helpful when trying to fingerprint an unidentified service.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们讨论了原始的TCP套接字，以一个简单的服务器和客户端为例。这些例子本身并不是非常有用，但它们是构建执行与服务的自定义交互的工具的模板。在尝试对未识别的服务进行指纹识别时，这将是有帮助的。
- en: You should now know how to run a simple port scan, and why you might want to
    run a port scan. You should understand how to use a TCP proxy and what benefits
    it offers. You should understand how banner grabbing works and why it is a useful
    method for gathering information.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该知道如何运行一个简单的端口扫描，以及为什么你可能想要运行一个端口扫描。你应该了解如何使用TCP代理以及它提供了什么好处。你应该了解横幅抓取的工作原理以及为什么它是一种收集信息的有用方法。
- en: There are numerous other forms of enumeration. With web applications, you can
    enumerate usernames, user ids, emails, and more. For example, if a website used
    the URL format [www.example.com/user_profile/1234](http://www.example.com/user_profile/1234) you
    can potentially start with the number 1, and increment by 1, crawling through
    every single user profile available on the site. Other forms include SNMP, DNS,
    LDAP, and SMB.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他形式的枚举。在Web应用程序中，你可以枚举用户名、用户ID、电子邮件等。例如，如果一个网站使用URL格式[www.example.com/user_profile/1234](http://www.example.com/user_profile/1234)，你可以从数字1开始，逐渐增加1，遍历网站上的每个用户资料。其他形式包括SNMP、DNS、LDAP和SMB。
- en: What other forms of enumeration can you think of? What kind of enumeration can
    you think of if you were already on a server with a low privilege user? What kind
    of information would you want to gather about a server once you had a shell?
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你还能想到哪些其他形式的枚举？如果你已经是一个权限较低的用户，你能想到什么样的枚举？一旦你拥有一个shell，你会想收集关于服务器的什么样的信息？
- en: You can gather a lot of information once you are on a server: username and groups,
    hostnames, network device info, mounted filesystems, what services are running,
    iptables settings, cron jobs, startup services, and more. Refer to [Chapter 13](470c944c-e4ca-4a39-95e4-6c78d831aa27.xhtml),
    *Post Exploitation,* for more information about what to do once you already have
    access to a machine.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在服务器上，你可以收集大量信息：用户名和组、主机名、网络设备信息、挂载的文件系统、正在运行的服务、iptables设置、定时作业、启动服务等等。有关在已经访问到机器后该做什么的更多信息，请参阅[第13章](470c944c-e4ca-4a39-95e4-6c78d831aa27.xhtml)，*后期利用*。
- en: In the next chapter, we will look at social engineering and how to gather intel
    from the web via JSON REST APIs, send phishing emails, and generate QR codes.
    We will also look at multiple examples of honeypots including a TCP honeypot and
    two methods of HTTP honeypots.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论社会工程学以及如何通过JSON REST API从Web上收集情报，发送钓鱼邮件和生成QR码。我们还将看到多个蜜罐的例子，包括TCP蜜罐和两种HTTP蜜罐的方法。
