- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: Initially, SOAP-based web services became more popular with XML. Then, since
    2012,  REST picked up the pace and gulped SOAP in whole. The rise of a new generation
    of web languages, such as Python, JavaScript (Node.js), and Go, showed a different
    approach to web development compared to the traditional ones, such as ASP.NET
    and Spring. Since this decade, Go has become more and more popular due to its
    speed and intuitiveness. Less verbose code, strict type checking, and support
    for concurrency make Go a better choice for writing any web backend. Some of the
    best tools, such as Docker and Kubernetes, are written in Go. Google uses Go a
    lot in its daily activities. You can see a list of Go-using companies at [https://github.com/golang/go/wiki/GoUsers](https://github.com/golang/go/wiki/GoUsers).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，基于SOAP的Web服务因XML而变得更受欢迎。然后，自2012年以来，REST加快了步伐，并完全取代了SOAP。新一代的Web语言，如Python、JavaScript（Node.js）和Go，展示了与传统的ASP.NET和Spring等相比，不同的Web开发方法。自本十年以来，由于其速度和直观性，Go变得越来越受欢迎。少量冗长的代码、严格的类型检查和对并发的支持使Go成为编写任何Web后端的更好选择。一些最好的工具，如Docker和Kubernetes，都是用Go编写的。谷歌在日常活动中大量使用Go。您可以在[https://github.com/golang/go/wiki/GoUsers](https://github.com/golang/go/wiki/GoUsers)上看到使用Go的公司列表。
- en: For any internet company, the web development department is crucial. Data that
    the company accumulates needs to be served to the clients in form of an API or
    web service. Various clients (browser, mobile application, and server) consume
    API every day. REST is an architectural pattern that defines resource consumption
    in the form of methods.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何互联网公司，Web开发部门至关重要。公司积累的数据需要以API或Web服务的形式提供给客户。各种客户端（浏览器、移动应用程序和服务器）每天都会使用API。REST是一种定义资源消耗形式的架构模式。
- en: Go is a better language to write web servers. It is the responsibility of an
    intermediate Go developer to know how to create RESTful services using the constructs
    available in the language. Once the basics are understood, the developer should
    learn other things, such as testing, optimizing, and deploying services. This
    book is an attempt to make the reader comfortable with developing web services.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Go是一个更好的编写Web服务器的语言。作为中级Go开发人员，了解如何使用语言中提供的构造创建RESTful服务是其责任。一旦掌握了基础知识，开发人员应该学习其他内容，如测试、优化和部署服务。本书旨在使读者能够舒适地开发Web服务。
- en: Experts think that in the near future, as Python is moving into the Data Science
    space and competing with R, Go can emerge as the single go-to language in the
    web development space by competing with NodeJS. This book is not a cookbook. However,
    it offers many tips and tricks throughout your journey. By the end of the book,
    the reader will be comfortable with REST API development through a multitude of
    examples. They will also come to know about the latest practices, such as protocol
    buffers/gRPC/API Gateway, which will move their knowledge to the next level.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 专家认为，在不久的将来，随着Python进入数据科学领域并与R竞争，Go可能会成为与NodeJS竞争的Web开发领域的唯一选择语言。本书不是一本食谱。然而，在您的旅程中，它提供了许多技巧和窍门。通过本书，读者最终将能够通过大量示例舒适地进行REST
    API开发。他们还将了解到最新的实践，如协议缓冲区/gRPC/API网关，这将使他们的知识提升到下一个水平。
- en: What this book covers
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书涵盖内容
- en: Chapter 1, *Getting Started with REST API Development*, discusses the fundamentals
    of REST architecture and verbs.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 第1章，“开始REST API开发”，讨论了REST架构和动词的基本原理。
- en: Chapter 2, *Handling Routing for Our REST Services*, describes how to add routing
    to our API.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 第2章，“为我们的REST服务处理路由”，描述了如何为我们的API添加路由。
- en: Chapter 3, *Working with Middleware and RPC*, is about working with middleware
    handlers and basic RPC.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 第3章，“使用中间件和RPC”，讲述了如何使用中间件处理程序和基本的RPC。
- en: Chapter 4, *Simplifying RESTful Services with Popular Go Frameworks*, presents
    quick prototyping API with frameworks.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章，“使用流行的Go框架简化RESTful服务”，介绍了使用框架进行快速原型设计API。
- en: Chapter 5, *Working with MongoDB and Go to Create REST API*, explains how to
    use MongoDB as the database for our API.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章，“使用MongoDB和Go创建REST API”，解释了如何将MongoDB用作我们API的数据库。
- en: Chapter 6, *Working with Protocol Buffers and gRPC*, shows how to use Protocol
    buffers and gRPC to obtain performance boost over HTTP/JSON.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第6章，“使用协议缓冲区和gRPC”，展示了如何使用协议缓冲区和gRPC来获得比HTTP/JSON更高的性能提升。
- en: Chapter 7, *Working with PostgreSQL, JSON, and Go*, explains the benefits of
    PostgreSQL and a JSON store for creating APIs.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第7章，“使用PostgreSQL、JSON和Go”，解释了使用PostgreSQL和JSON存储创建API的好处。
- en: Chapter 8, *Building a REST API Client in Go and Unit Testing*, presents techniques
    for building client software and API testing with unit tests in Go.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 第8章，“在Go中构建REST API客户端和单元测试”，介绍了在Go中构建客户端软件和使用单元测试进行API测试的技术。
- en: Chapter 9, *Scaling Our REST API Using Microservices*, is about breaking our
    API service into microservices using Go Kit.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章，“使用微服务扩展我们的REST API”，讲述了如何使用Go Kit将我们的API服务拆分为微服务。
- en: Chapter 10, *Deploying Our REST Services*, shows how we can deploy services
    built on Nginx and monitor them using supervisord.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第10章，“部署我们的REST服务”，展示了如何使用Nginx部署服务，并使用supervisord进行监控。
- en: '[Chapter 11](68de1e8f-8be3-4e7b-91ab-81ca7f4868ed.xhtml), *Using an API Gateway
    to Monitor and Metricize REST API*, explains how to make our services production
    grade by adding multiple APIs behind API Gateway.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[第11章](68de1e8f-8be3-4e7b-91ab-81ca7f4868ed.xhtml)，“使用API网关监控和度量REST API”，解释了如何通过在API网关后添加多个API来使我们的服务达到生产级别。'
- en: '[Chapter 12](13f9aa66-f528-41d7-84ee-4a97de3df040.xhtml), *Handling Authentication
    for Our REST Services,* discusses securing our API with basic authentication and
    JSON Web Tokens (JWT).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[第12章](13f9aa66-f528-41d7-84ee-4a97de3df040.xhtml)，“为我们的REST服务处理身份验证”，讨论了如何使用基本身份验证和JSON
    Web Tokens（JWT）保护我们的API。'
- en: What you need for this book
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书所需内容
- en: For this book, you need a laptop/PC with Linux (Ubuntu 16.04), macOS X, or Windows
    installed. We will use Go 1.8+ as the version of our compiler and install many
    third-party packages, so a working internet connection is required.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这本书，您需要一台安装了Linux（Ubuntu 16.04）、macOS X或Windows的笔记本电脑/个人电脑。我们将使用Go 1.8+作为我们的编译器版本，并安装许多第三方软件包，因此需要一个可用的互联网连接。
- en: We will also use Docker in the final chapters to explain concepts of API Gateway.
    Docker V17.0+ is recommended. If Windows users have problems with the native Go
    installation for any examples, use Docker for Windows and run Ubuntu container,
    which gives more flexibility; refer to [https://www.docker.com/docker-windows](https://www.docker.com/docker-windows) for
    more details.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将在最后的章节中使用Docker来解释API网关的概念。建议使用Docker V17.0+。如果Windows用户在本书中的任何示例中遇到原生Go安装的问题，请使用Docker
    for Windows并运行Ubuntu容器，这样会更灵活；有关更多详细信息，请参阅[https://www.docker.com/docker-windows](https://www.docker.com/docker-windows)。
- en: Before diving into the book, refresh your language basics at [https://tour.golang.org/welcome/1](https://tour.golang.org/welcome/1).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入阅读本书之前，请在[https://tour.golang.org/welcome/1](https://tour.golang.org/welcome/1)上复习您的语言基础知识。
- en: Even though these are the basic requirements, we will guide you through the
    installations wherever required.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些是基本要求，但我们将在必要时为您安装指导。
- en: Who this book is for
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这本书适合谁
- en: This book is for all the Go developers who are comfortable with the language
    and seeking to learn REST API development. Even senior engineers can enjoy this
    book, as it has many cutting-edge concepts, such as microservices, protocol buffers,
    and gRPC.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书适用于所有熟悉Go语言并希望学习REST API开发的开发人员。即使是资深工程师也可以享受这本书，因为它涵盖了许多尖端概念，如微服务、协议缓冲区和gRPC。
- en: Developers who are already familiar with REST concepts and stepping into the
    Go world from other platforms, such as Python and Ruby, can also benefit a lot.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 已经熟悉REST概念并从其他平台（如Python和Ruby）进入Go世界的开发人员也可以受益匪浅。
- en: Conventions
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 约定
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，您将找到许多文本样式，用于区分不同类型的信息。以下是一些这些样式的示例及其含义的解释。
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "Name
    the preceding program as `basicHandler.go`."'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 文本中的代码单词、数据库表名、文件夹名、文件名、文件扩展名、路径名、虚拟URL、用户输入和Twitter句柄显示如下："将前面的程序命名为`basicHandler.go`。"
- en: 'A block of code is set as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块设置如下：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Any command-line input or output is written as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 任何命令行输入或输出都以以下形式编写：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "It returns message saying Logged In successfully."'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**新术语**和**重要单词**以粗体显示。您在屏幕上看到的单词，例如菜单或对话框中的单词，会在文本中以这种方式出现："它返回消息，说成功登录。"'
- en: Warnings or important notes appear in a box like this.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 警告或重要说明会以这样的形式出现在一个框中。
- en: Tips and tricks appear like this.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 提示和技巧会出现在这样的形式。
