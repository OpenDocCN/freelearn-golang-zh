["```go\nPOST /StockQuote HTTP/1.1\nHost: www.stockquoteserver.com\nContent-Type: text/xml; charset=\"utf-8\"\nContent-Length: nnnn\nSOAPAction: \"Some-URI\"\n\n<SOAP-ENV:Envelope\n  xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\n  SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">\n   <SOAP-ENV:Body>\n       <m:GetLastTradePrice >\n           <symbol>DIS</symbol>\n       </m:GetLastTradePrice>\n   </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>\n```", "```go\n /v1/books/?category=fiction&publish_date=2017\n```", "```go\n{\"name\" : \"Lord of the rings\", \"year\": 1954, \"author\" : \"J. R. R. Tolkien\"}\n```", "```go\n/v1/books/1256\n```", "```go\n{\"name\" : \"Lord of the rings\", \"year\": 1955, \"author\" : \"J. R. R. Tolkien\"}\n```", "```go\n/v1/books/1256\n```", "```go\n{\"isbn\" : \"0618640150\"}\n```", "```go\n>mkdir /home/naren/myproject\nexport GOPATH=/home/naren/myproject\n```", "```go\ngo get -u -v github.com/gorilla/mux\n```", "```go\n go install github.com/user/project\n```", "```go\nmkdir -p $GOPATH/src/github.com/narenaryan/romanserver\n```", "```go\ntouch $GOPATH/src/github.com/narenaryan/romanserver/main.go\n```", "```go\nmkdir $GOPATH/src/github.com/narenaryan/romanNumerals\n```", "```go\n// data.go\npackage romanNumerals\n\nvar Numerals = map[int]string{\n  10: \"X\",\n  9: \"IX\",\n  8: \"VIII\",\n  7: \"VII\",\n  6: \"VI\",\n  5: \"V\",\n  4: \"IV\",\n  3: \"III\",\n  2: \"II\",\n  1: \"I\",\n}\n```", "```go\n// main.go\npackage main\n\nimport (\n   \"fmt\"\n   \"github.com/narenaryan/romanNumerals\"\n   \"html\"\n   \"net/http\"\n   \"strconv\"\n   \"strings\"\n   \"time\"\n)\n\nfunc main() {\n   // http package has methods for dealing with requests\n   http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n       urlPathElements := strings.Split(r.URL.Path, \"/\")\n       // If request is GET with correct syntax\n       if urlPathElements[1] == \"roman_number\" {\n           number, _ := strconv.Atoi(strings.TrimSpace(urlPathElements[2]))\n           if number == 0 || number > 10 {\n           // If resource is not in the list, send Not Found status\n               w.WriteHeader(http.StatusNotFound)\n               w.Write([]byte(\"404 - Not Found\"))\n           } else {\n             fmt.Fprintf(w, \"%q\", html.EscapeString(romanNumerals.Numerals[number]))\n           }\n       } else {\n           // For all other requests, tell that Client sent a bad request\n           w.WriteHeader(http.StatusBadRequest)\n           w.Write([]byte(\"400 - Bad request\"))\n       }\n   })\n // Create a server and run it on 8000 port\n   s := &http.Server{\n     Addr: \":8000\",\n     ReadTimeout: 10 * time.Second,\n     WriteTimeout: 10 * time.Second,\n     MaxHeaderBytes: 1 << 20,\n   }\n   s.ListenAndServe()\n}\n```", "```go\ngo install github.com/narenaryan/romanserver\n```", "```go\n$GOPATH/bin/romanserver\n```", "```go\ncurl -X GET \"http://localhost:8000/roman_number/5\" # Valid request\n```", "```go\nHTTP/1.1 200 OK\nDate: Sun, 07 May 2017 11:24:32 GMT\nContent-Length: 3\nContent-Type: text/plain; charset=utf-8\n\n\"V\"\n```", "```go\ncurl -X GET \"http://localhost:8000/roman_number/12\" # Resource out of range\n```", "```go\nHTTP/1.1 404 Not Found\nDate: Sun, 07 May 2017 11:22:38 GMT\nContent-Length: 15\nContent-Type: text/plain; charset=utf-8\n\n404 - Not Found\n```", "```go\ncurl -X GET \"http://localhost:8000/random_resource/3\" # Invalid resource\n```", "```go\n\"HTTP/1.1 400 Bad request\nDate: Sun, 07 May 2017 11:22:38 GMT\nContent-Length: 15\nContent-Type: text/plain; charset=utf-8\n400 - Bad request\n```", "```go\nsudo apt-get install -y supervisor\n```", "```go\nbrew install supervisor\n```", "```go\n/etc/supervisor/conf.d/goproject.conf\n```", "```go\n[supervisord]\nlogfile = /tmp/supervisord.log\n```", "```go\n[program:myserver]\ncommand=$GOPATH/bin/romanserver\nautostart=true\nautorestart=true\nredirect_stderr=true\n```", "```go\nsupervisorctl\n```", "```go\nnpm install gulp gulp-shell\n```", "```go\nvar gulp = require(\"gulp\");\nvar shell = require('gulp-shell');\n\n// This compiles new binary with source change\ngulp.task(\"install-binary\", shell.task([\n 'go install github.com/narenaryan/romanserver'\n]));\n\n// Second argument tells install-binary is a deapendency for restart-supervisor\ngulp.task(\"restart-supervisor\", [\"install-binary\"], shell.task([\n 'supervisorctl restart myserver'\n]))\n\ngulp.task('watch', function() {\n // Watch the source code for all changes\n gulp.watch(\"*\", ['install-binary', 'restart-supervisor']);\n\n});\n\ngulp.task('default', ['watch']);\n```", "```go\ngulp\n```"]