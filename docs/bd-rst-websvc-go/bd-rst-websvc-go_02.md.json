["```go\npackage main\nimport (\n    \"io\"\n    \"net/http\"\n    \"log\"\n)\n// hello world, the web server\nfunc MyServer(w http.ResponseWriter, req *http.Request) {\n    io.WriteString(w, \"hello, world!\\n\")\n}\nfunc main() {\n    http.HandleFunc(\"/hello\", MyServer)\n    log.Fatal(http.ListenAndServe(\":8000\", nil))\n}\n```", "```go\ngo run basicHandler.go\n```", "```go\ncurl -X GET http://localhost:8000/hello\n```", "```go\nhello, world\n```", "```go\npackage main\nimport (\n    \"fmt\"\n    \"math/rand\"\n    \"net/http\"\n)\n// CustomServeMux is a struct which can be a multiplexer\ntype CustomServeMux struct {\n}\n// This is the function handler to be overridden\nfunc (p *CustomServeMux) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n    if r.URL.Path == \"/\" {\n        giveRandom(w, r)\n        return\n    }\n    http.NotFound(w, r)\n    return\n}\nfunc giveRandom(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintf(w, \"Your random number is: %f\", rand.Float64())\n}\nfunc main() {\n    // Any struct that has serveHTTP function can be a multiplexer\n    mux := &CustomServeMux{}\n    http.ListenAndServe(\":8000\", mux)\n}\n```", "```go\ngo run customMux.go\n```", "```go\ncurl -X GET http://localhost:8000/\n```", "```go\nYour random number is: 0.096970\n```", "```go\nnewMux := http.NewServeMux()\n\nnewMux.HandleFunc(\"/randomFloat\", func(w http.ResponseWriter, r *http.Request) {\n fmt.Fprintln(w, rand.Float64())\n})\n\nnewMux.HandleFunc(\"/randomInt\", func(w http.ResponseWriter, r *http.Request) {\n fmt.Fprintln(w, rand.Int(100))\n})\n```", "```go\nhttp.ListenAndServe(\":8000\", newMux)\n```", "```go\npackage main\nimport (\n    \"fmt\"\n    \"math/rand\"\n    \"net/http\"\n)\nfunc main() {\n    newMux := http.NewServeMux()\n    newMux.HandleFunc(\"/randomFloat\", func(w http.ResponseWriter, r *http.Request) {\n        fmt.Fprintln(w, rand.Float64())\n    })\n    newMux.HandleFunc(\"/randomInt\", func(w http.ResponseWriter, r\n*http.Request) {\n        fmt.Fprintln(w, rand.Intn(100))\n    })\n    http.ListenAndServe(\":8000\", newMux)\n}\n```", "```go\ngo run customMux.go\n```", "```go\ncurl -X GET http://localhost:8000/randomFloat\ncurl -X GET http://localhost:8000/randomInt\n```", "```go\n0.6046602879796196\n87\n```", "```go\ngo get github.com/julienschmidt/httprouter\n```", "```go\nimport \"github.com/julienschmidt/httprouter\"\n```", "```go\nimport \"os/exec\"\n```", "```go\n// arguments... means an array of strings unpacked as arguments in Go\ncmd := exec.Command(command, arguments...)\n```", "```go\npackage main\nimport (\n        \"bytes\"\n        \"fmt\"\n        \"log\"\n        \"net/http\"\n        \"os/exec\"\n        \"github.com/julienschmidt/httprouter\"\n)\n// This is a function to execute a system command and return output\nfunc getCommandOutput(command string, arguments ...string) string {\n        // args... unpacks arguments array into elements\n        cmd := exec.Command(command, arguments...)\n        var out bytes.Buffer\n        var stderr bytes.Buffer\n        cmd.Stdout = &out\n        cmd.Stderr = &stderr\n        err := cmd.Start()\n        if err != nil {\n                log.Fatal(fmt.Sprint(err) + \": \" + stderr.String())\n        }\n        err = cmd.Wait()\n        if err != nil {\n                log.Fatal(fmt.Sprint(err) + \": \" + stderr.String())\n        }\n        return out.String()\n}\nfunc goVersion(w http.ResponseWriter, r *http.Request, params httprouter.Params) {\n        fmt.Fprintf(w, getCommandOutput(\"/usr/local/bin/go\", \"version\"))\n}\nfunc getFileContent(w http.ResponseWriter, r *http.Request, params httprouter.Params) {\n        fmt.Fprintf(w, getCommandOutput(\"/bin/cat\",\nparams.ByName(\"name\")))\n}\nfunc main() {\n        router := httprouter.New()\n        // Mapping to methods is possible with HttpRouter\n        router.GET(\"/api/v1/go-version\", goVersion)\n        // Path variable called name used here\n        router.GET(\"/api/v1/show-file/:name\", getFileContent)\n        log.Fatal(http.ListenAndServe(\":8000\", router))\n}\n```", "```go\nLorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu.\n```", "```go\n\u039f\u1f31 \u03b4\u1f72 \u03a6\u03bf\u03af\u03bd\u03b9\u03f0\u03b5\u03c2 \u03bf\u1f57\u03c4\u03bf\u03b9 \u03bf\u1f31 \u03c3\u1f7a\u03bd \u039a\u03ac\u03b4\u03bc\u1ff3 \u1f00\u03c0\u03b9\u03f0\u03cc\u03bc\u03b5\u03bd\u03bf\u03b9.. \u1f10\u03c3\u03ae\u03b3\u03b1\u03b3\u03bf\u03bd \u03b4\u03b9\u03b4\u03b1\u03c3\u03f0\u03ac\u03bb\u03b9\u03b1 \u1f10\u03c2 \u03c4\u03bf\u1f7a\u03c2 \u1fde\u0395\u03bb\u03bb\u03b7\u03bd\u03b1\u03c2 \u03f0\u03b1\u1f76 \u03b4\u1f74 \u03f0\u03b1\u1f76 \u03b3\u03c1\u03ac\u03bc\u03bc\u03b1\u03c4\u03b1, \u03bf\u1f50\u03f0 \u1f10\u03cc\u03bd\u03c4\u03b1 \u03c0\u03c1\u1f76\u03bd \u1fde\u0395\u03bb\u03bb\u03b7\u03c3\u03b9 \u1f61\u03c2 \u1f10\u03bc\u03bf\u1f76 \u03b4\u03bf\u03f0\u03ad\u03b5\u03b9\u03bd, \u03c0\u03c1\u1ff6\u03c4\u03b1 \u03bc\u1f72\u03bd \u03c4\u03bf\u1fd6\u03c3\u03b9 \u03f0\u03b1\u1f76 \u1f05\u03c0\u03b1\u03bd\u03c4\u03b5\u03c2 \u03c7\u03c1\u03ad\u03c9\u03bd\u03c4\u03b1\u03b9 \u03a6\u03bf\u03af\u03bd\u03b9\u03f0\u03b5\u03c2\u00b7 \u03bc\u03b5\u03c4\u1f70 \u03b4\u1f72 \u03c7\u03c1\u03cc\u03bd\u03bf\u03c5 \u03c0\u03c1\u03bf\u03b2\u03b1\u03af\u03bd\u03bf\u03bd\u03c4\u03bf\u03c2 \u1f05\u03bc\u03b1 \u03c4\u1fc7 \u03d5\u03c9\u03bd\u1fc7 \u03bc\u03b5\u03c4\u03ad\u03b2\u03b1\u03bb\u03bf\u03bd \u03f0\u03b1\u1f76 \u03c4\u1f78\u03bd \u03f1\u03c5\u03d1\u03bc\u1f78\u03bd \u03c4\u1ff6\u03bd \u03b3\u03c1\u03b1\u03bc\u03bc\u03ac\u03c4\u03c9\u03bd. \u03a0\u03b5\u03c1\u03b9\u03bf\u03af\u03f0\u03b5\u03bf\u03bd \u03b4\u03ad \u03c3\u03d5\u03b5\u03b1\u03c2 \u03c4\u1f70 \u03c0\u03bf\u03bb\u03bb\u1f70 \u03c4\u1ff6\u03bd \u03c7\u03ce\u03c1\u03c9\u03bd \u03c4\u03bf\u1fe6\u03c4\u03bf\u03bd \u03c4\u1f78\u03bd \u03c7\u03c1\u03cc\u03bd\u03bf\u03bd \u1ffe\u0395\u03bb\u03bb\u03ae\u03bd\u03c9\u03bd \u1fce\u0399\u03c9\u03bd\u03b5\u03c2\u00b7 \u03bf\u1f33 \u03c0\u03b1\u03c1\u03b1\u03bb\u03b1\u03b2\u03cc\u03bd\u03c4\u03b5\u03c2 \u03b4\u03b9\u03b4\u03b1\u03c7\u1fc7 \u03c0\u03b1\u03c1\u1f70 \u03c4\u1ff6\u03bd \u03a6\u03bf\u03b9\u03bd\u03af\u03f0\u03c9\u03bd \u03c4\u1f70 \u03b3\u03c1\u03ac\u03bc\u03bc\u03b1\u03c4\u03b1, \u03bc\u03b5\u03c4\u03b1\u03c1\u03c1\u03c5\u03d1\u03bc\u03af\u03c3\u03b1\u03bd\u03c4\u03ad\u03c2 \u03c3\u03d5\u03b5\u03c9\u03bd \u1f40\u03bb\u03af\u03b3\u03b1 \u1f10\u03c7\u03c1\u03ad\u03c9\u03bd\u03c4\u03bf, \u03c7\u03c1\u03b5\u03ce\u03bc\u03b5\u03bd\u03bf\u03b9 \u03b4\u1f72 \u1f10\u03d5\u03ac\u03c4\u03b9\u03c3\u03b1\u03bd, \u1f65\u03c3\u03c0\u03b5\u03c1 \u03f0\u03b1\u1f76 \u03c4\u1f78 \u03b4\u03af\u03f0\u03b1\u03b9\u03bf\u03bd \u1f14\u03d5\u03b5\u03c1\u03b5 \u1f10\u03c3\u03b1\u03b3\u03b1\u03b3\u03cc\u03bd\u03c4\u03c9\u03bd \u03a6\u03bf\u03b9\u03bd\u03af\u03f0\u03c9\u03bd \u1f10\u03c2 \u03c4\u1f74\u03bd \u1ffe\u0395\u03bb\u03bb\u03ac\u03b4\u03b1, \u03d5\u03bf\u03b9\u03bd\u03b9\u03f0\u03ae\u03b9\u03b1 \u03f0\u03b5\u03f0\u03bb\u1fc6\u03c3\u03d1\u03b1\u03b9.\n```", "```go\ngo run execService.go\n```", "```go\ncurl -X GET http://localhost:8000/api/v1/go-version\n```", "```go\ngo version go1.8.3 darwin/amd64\n```", "```go\ncurl -X GET http://localhost:8000/api/v1/show-file/greek.txt\n```", "```go\n\u039f\u1f31 \u03b4\u1f72 \u03a6\u03bf\u03af\u03bd\u03b9\u03f0\u03b5\u03c2 \u03bf\u1f57\u03c4\u03bf\u03b9 \u03bf\u1f31 \u03c3\u1f7a\u03bd \u039a\u03ac\u03b4\u03bc\u1ff3 \u1f00\u03c0\u03b9\u03f0\u03cc\u03bc\u03b5\u03bd\u03bf\u03b9.. \u1f10\u03c3\u03ae\u03b3\u03b1\u03b3\u03bf\u03bd \u03b4\u03b9\u03b4\u03b1\u03c3\u03f0\u03ac\u03bb\u03b9\u03b1 \u1f10\u03c2 \u03c4\u03bf\u1f7a\u03c2 \u1fde\u0395\u03bb\u03bb\u03b7\u03bd\u03b1\u03c2 \u03f0\u03b1\u1f76 \u03b4\u1f74 \u03f0\u03b1\u1f76 \u03b3\u03c1\u03ac\u03bc\u03bc\u03b1\u03c4\u03b1, \u03bf\u1f50\u03f0 \u1f10\u03cc\u03bd\u03c4\u03b1 \u03c0\u03c1\u1f76\u03bd \u1fde\u0395\u03bb\u03bb\u03b7\u03c3\u03b9 \u1f61\u03c2 \u1f10\u03bc\u03bf\u1f76 \u03b4\u03bf\u03f0\u03ad\u03b5\u03b9\u03bd, \u03c0\u03c1\u1ff6\u03c4\u03b1 \u03bc\u1f72\u03bd \u03c4\u03bf\u1fd6\u03c3\u03b9 \u03f0\u03b1\u1f76 \u1f05\u03c0\u03b1\u03bd\u03c4\u03b5\u03c2 \u03c7\u03c1\u03ad\u03c9\u03bd\u03c4\u03b1\u03b9 \u03a6\u03bf\u03af\u03bd\u03b9\u03f0\u03b5\u03c2\u00b7 \u03bc\u03b5\u03c4\u1f70 \u03b4\u1f72 \u03c7\u03c1\u03cc\u03bd\u03bf\u03c5 \u03c0\u03c1\u03bf\u03b2\u03b1\u03af\u03bd\u03bf\u03bd\u03c4\u03bf\u03c2 \u1f05\u03bc\u03b1 \u03c4\u1fc7 \u03d5\u03c9\u03bd\u1fc7 \u03bc\u03b5\u03c4\u03ad\u03b2\u03b1\u03bb\u03bf\u03bd \u03f0\u03b1\u1f76 \u03c4\u1f78\u03bd \u03f1\u03c5\u03d1\u03bc\u1f78\u03bd \u03c4\u1ff6\u03bd \u03b3\u03c1\u03b1\u03bc\u03bc\u03ac\u03c4\u03c9\u03bd. \u03a0\u03b5\u03c1\u03b9\u03bf\u03af\u03f0\u03b5\u03bf\u03bd \u03b4\u03ad \u03c3\u03d5\u03b5\u03b1\u03c2 \u03c4\u1f70 \u03c0\u03bf\u03bb\u03bb\u1f70 \u03c4\u1ff6\u03bd \u03c7\u03ce\u03c1\u03c9\u03bd \u03c4\u03bf\u1fe6\u03c4\u03bf\u03bd \u03c4\u1f78\u03bd \u03c7\u03c1\u03cc\u03bd\u03bf\u03bd \u1ffe\u0395\u03bb\u03bb\u03ae\u03bd\u03c9\u03bd \u1fce\u0399\u03c9\u03bd\u03b5\u03c2\u00b7 \u03bf\u1f33 \u03c0\u03b1\u03c1\u03b1\u03bb\u03b1\u03b2\u03cc\u03bd\u03c4\u03b5\u03c2 \u03b4\u03b9\u03b4\u03b1\u03c7\u1fc7 \u03c0\u03b1\u03c1\u1f70 \u03c4\u1ff6\u03bd \u03a6\u03bf\u03b9\u03bd\u03af\u03f0\u03c9\u03bd \u03c4\u1f70 \u03b3\u03c1\u03ac\u03bc\u03bc\u03b1\u03c4\u03b1, \u03bc\u03b5\u03c4\u03b1\u03c1\u03c1\u03c5\u03d1\u03bc\u03af\u03c3\u03b1\u03bd\u03c4\u03ad\u03c2 \u03c3\u03d5\u03b5\u03c9\u03bd \u1f40\u03bb\u03af\u03b3\u03b1 \u1f10\u03c7\u03c1\u03ad\u03c9\u03bd\u03c4\u03bf, \u03c7\u03c1\u03b5\u03ce\u03bc\u03b5\u03bd\u03bf\u03b9 \u03b4\u1f72 \u1f10\u03d5\u03ac\u03c4\u03b9\u03c3\u03b1\u03bd, \u1f65\u03c3\u03c0\u03b5\u03c1 \u03f0\u03b1\u1f76 \u03c4\u1f78 \u03b4\u03af\u03f0\u03b1\u03b9\u03bf\u03bd \u1f14\u03d5\u03b5\u03c1\u03b5 \u1f10\u03c3\u03b1\u03b3\u03b1\u03b3\u03cc\u03bd\u03c4\u03c9\u03bd \u03a6\u03bf\u03b9\u03bd\u03af\u03f0\u03c9\u03bd \u1f10\u03c2 \u03c4\u1f74\u03bd \u1ffe\u0395\u03bb\u03bb\u03ac\u03b4\u03b1, \u03d5\u03bf\u03b9\u03bd\u03b9\u03f0\u03ae\u03b9\u03b1 \u03f0\u03b5\u03f0\u03bb\u1fc6\u03c3\u03d1\u03b1\u03b9.\n```", "```go\n/static/*\n```", "```go\nmkdir /users/naren/static\n```", "```go\npackage main\nimport (\n    \"github.com/julienschmidt/httprouter\"\n    \"log\"\n    \"net/http\"\n)\nfunc main() {\n    router := httprouter.New()\n    // Mapping to methods is possible with HttpRouter\n    router.ServeFiles(\"/static/*filepath\",\nhttp.Dir(\"/Users/naren/static\"))\n    log.Fatal(http.ListenAndServe(\":8000\", router))\n}\n```", "```go\ngo run fileserver.go\n```", "```go\nhttp://localhost:8000/static/latin.txt\n```", "```go\nLorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu.\n```", "```go\ngo get -u github.com/gorilla/mux\n```", "```go\nexport GOPATH=~/go\n```", "```go\nPATH=\"$GOPATH/bin:$PATH\"\n```", "```go\nvi ~/.profile\n(or)\nvi ~/.zshrc \n```", "```go\npackage main\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"time\"\n    \"github.com/gorilla/mux\"\n)\n// ArticleHandler is a function handler\nfunc ArticleHandler(w http.ResponseWriter, r *http.Request) {\n    // mux.Vars returns all path parameters as a map\n    vars := mux.Vars(r)\n    w.WriteHeader(http.StatusOK)\n    fmt.Fprintf(w, \"Category is: %v\\n\", vars[\"category\"])\n    fmt.Fprintf(w, \"ID is: %v\\n\", vars[\"id\"])\n}\nfunc main() {\n    // Create a new router\n    r := mux.NewRouter()\n    // Attach a path with handler\n    r.HandleFunc(\"/articles/{category}/{id:[0-9]+}\", ArticleHandler)\n    srv := &http.Server{\n        Handler: r,\n        Addr: \"127.0.0.1:8000\",\n        // Good practice: enforce timeouts for servers you create!\n        WriteTimeout: 15 * time.Second,\n        ReadTimeout: 15 * time.Second,\n    }\n    log.Fatal(srv.ListenAndServe())\n}\n```", "```go\ngo run muxRouter.go\n```", "```go\ncurl http://localhost:8000/articles/books/123\nCategory is: books\nID is: 123\n```", "```go\nr.HandleFunc(\"/articles/{category}/{id:[0-9]+}\", ArticleHandler)\n```", "```go\nr.HandlerFunc(\"/articles/{category}/{id:[0-9]+}\", ArticleHandler).\n  Name(\"articleRoute\")\n```", "```go\nurl, err := r.Get(\"articleRoute\").URL(\"category\", \"books\", \"id\", \"123\")\nfmt.Printf(url.URL) // prints /articles/books/123\n```", "```go\n      r := mux.NewRouter()\n```", "```go\n      r.Path(\"/articles/{category}/{id:[0-  9]+}\").HandlerFunc(ArticleHandler) //chaining is possible\n```", "```go\nr := mux.NewRouter()\ns := r.PathPrefix(\"/articles\").Subrouter()\ns.HandleFunc(\"{id}/settings\", settingsHandler)\ns.HandleFunc(\"{id}/details\", detailsHandler)\n```", "```go\nr.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"/tmp/static\"))))\n```", "```go\nhttp://localhost:8000/static/js/jquery.min.js \n```", "```go\nr := mux.NewRouter() \nr.StrictSlash(true)\nr.Path(\"/articles/\").Handler(ArticleHandler)\n```", "```go\nhttp://localhost:8000/articles\n```", "```go\nr := NewRouter() \nr.UseEncodedPath()\nr.NewRoute().Path(\"/category/id\")\n```", "```go\nhttp://localhost:8000/books/1%2F2\n```", "```go\nhttp://localhost:8000/articles/?id=123&category=books\n```", "```go\n// Add this in your main program\nr := mux.NewRouter()\nr.HandleFunc(\"/articles\", QueryHandler)\nr.Queries(\"id\", \"category\")\n```", "```go\nfunc QueryHandler(w http.ResponseWriter, r *http.Request){\n  queryParams := r.URL.Query()\n  w.WriteHeader(http.StatusOK)\n  fmt.Fprintf(w, \"Got parameter id:%s!\\n\", queryParams[\"id\"])\n  fmt.Fprintf(w, \"Got parameter category:%s!\", queryParams[\"category\"])\n}\n```", "```go\nr := mux.NewRouter()\nr.Host(\"aaa.bbb.ccc\")\nr.HandleFunc(\"/id1/id2/id3\", MyHandler)\n```", "```go\npackage main\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"time\"\n    \"github.com/gorilla/mux\"\n)\nfunc QueryHandler(w http.ResponseWriter, r *http.Request) {\n    // Fetch query parameters as a map\n    queryParams := r.URL.Query()\n    w.WriteHeader(http.StatusOK)\n    fmt.Fprintf(w, \"Got parameter id:%s!\\n\", queryParams[\"id\"][0])\n    fmt.Fprintf(w, \"Got parameter category:%s!\",\nqueryParams[\"category\"][0])\n}\nfunc main() {\n    // Create a new router\n    r := mux.NewRouter()\n    // Attach a path with handler\n    r.HandleFunc(\"/articles\", QueryHandler)\n    r.Queries(\"id\", \"category\")\n    srv := &http.Server{\n        Handler: r,\n        Addr: \"127.0.0.1:8000\",\n        // Good practice: enforce timeouts for servers you create!\n        WriteTimeout: 15 * time.Second,\n        ReadTimeout: 15 * time.Second,\n    }\n    log.Fatal(srv.ListenAndServe())\n}\n```", "```go\ngo run queryParameters.go\n```", "```go\ncurl -X GET http://localhost:8000/articles\\?id\\=1345\\&category\\=birds\n```", "```go\nGot parameter id:1345! \nGot parameter category:birds!\n```", "```go\nusername := r.Form.Get(\"id\")\npassword := r.Form.Get(\"category\")\nsql := \"SELECT * FROM article WHERE id='\" + username + \"' AND category='\" + password + \"'\"\nDb.Exec(sql)\n```", "```go\n?category=books&id=10 ORDER BY 10--\n```", "```go\nUnknown column '10' in 'order clause'\n```"]