["```go\n{\n  _id: 5,\n  name: 'Star Trek',\n  year: 2009,\n  directors: ['J.J. Abrams'],\n  writers: ['Roberto Orci', 'Alex Kurtzman'],\n  boxOffice: {\n     budget:150000000,\n     gross:257704099\n  }\n}\n```", "```go\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6 \n echo \"deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list\n\nsudo apt-get update && sudo apt-get install mongodb-org\n```", "```go\nsystemctl start mongod\n```", "```go\nbrew install mongodb\n```", "```go\nmkdir -p /data/db\n```", "```go\nchown -R `id -un` /data/db\n```", "```go\nmongod\n```", "```go\nmongo\n```", "```go\n> show databases\n```", "```go\n> use appdb\n```", "```go\n> db.movies.insertOne({ _id: 5, name: 'Star Trek', year: 2009, directors: ['J.J. Abrams'], writers: ['Roberto Orci', 'Alex Kurtzman'], boxOffice: { budget:150000000, gross:257704099 } } )\n{ \n \"acknowledged\" : true,\n \"insertedId\" : 5 \n}\n```", "```go\n> db.movies.insertOne({ name: 'The Dark Knight ', year: 2008, directors: ['Christopher Nolan'], writers: ['Jonathan Nolan', 'Christopher Nolan'], boxOffice: { budget:185000000, gross:533316061 } } )> db.movies.insertOne({ name: 'The Dark Knight ', year: 2008, directors: ['Christopher Nolan'], writers: ['Jonathan Nolan', 'Christopher Nolan'], boxOffice: { budget:185000000, gross:533316061 } } )\n{ \n \"acknowledged\" : true,\n \"insertedId\" : ObjectId(\"59574125bf7a73d140d5ba4a\")\n}\n```", "```go\n> db.movies.find()\n\n{ \"_id\" : 5, \"name\" : \"Star Trek\", \"year\" : 2009, \"directors\" : [ \"J.J. Abrams\" ], \"writers\" : [ \"Roberto Orci\", \"Alex Kurtzman\" ], \"boxOffice\" : { \"budget\" : 150000000, \"gross\" : 257704099 } }\n{ \"_id\" : ObjectId(\"59574125bf7a73d140d5ba4a\"), \"name\" : \"The Dark Knight \", \"year\" : 2008, \"directors\" : [ \"Christopher Nolan\" ], \"writers\" : [ \"Jonathan Nolan\", \"Christopher Nolan\" ], \"boxOffice\" : { \"budget\" : 185000000, \"gross\" : 533316061 } }\n```", "```go\n> db.movies.findOne()\n\n{ \"_id\" : 5, \"name\" : \"Star Trek\", \"year\" : 2009, \"directors\" : [ \"J.J. Abrams\" ], \"writers\" : [ \"Roberto Orci\", \"Alex Kurtzman\" ], \"boxOffice\" : { \"budget\" : 150000000, \"gross\" : 257704099 }}\n```", "```go\n> db.movies.find({year: {$eq: 2008}})\n\n{ \"_id\" : ObjectId(\"59574125bf7a73d140d5ba4a\"), \"name\" : \"The Dark Knight \", \"year\" : 2008, \"directors\" : [ \"Christopher Nolan\" ], \"writers\" : [ \"Jonathan Nolan\", \"Christopher Nolan\" ], \"boxOffice\" : { \"budget\" : 185000000, \"gross\" : 533316061 } }\n```", "```go\n{year: {$eq: 2008}}\n```", "```go\nSELECT * FROM movies WHERE year=2008;\n```", "```go\n> db.movies.find({year: 2008})\n```", "```go\n> db.movies.find({'boxOffice.budget': {$gt: 150000000}})\n\n{ \"_id\" : ObjectId(\"59574125bf7a73d140d5ba4a\"), \"name\" : \"The Dark Knight \", \"year\" : 2008, \"directors\" : [ \"Christopher Nolan\" ], \"writers\" : [ \"Jonathan Nolan\", \"Christopher Nolan\" ], \"boxOffice\" : { \"budget\" : 185000000, \"gross\" : 533316061 } }\n```", "```go\n> db.movies.find({'boxOffice.budget': {$gt: 150000000}, year: 2009})\n```", "```go\n> db.movies.find({$or: [{'boxOffice.budget': {$gt: 150000000}}, {year: 2009}]})\n\n{ \"_id\" : 5, \"name\" : \"Star Trek\", \"year\" : 2009, \"directors\" : [ \"J.J. Abrams\" ], \"writers\" : [ \"Roberto Orci\", \"Alex Kurtzman\" ], \"boxOffice\" : { \"budget\" : 150000000, \"gross\" : 257704099 } }\n{ \"_id\" : ObjectId(\"59574125bf7a73d140d5ba4a\"), \"name\" : \"The Dark Knight \", \"year\" : 2008, \"directors\" : [ \"Christopher Nolan\" ], \"writers\" : [ \"Jonathan Nolan\", \"Christopher Nolan\" ], \"boxOffice\" : { \"budget\" : 185000000, \"gross\" : 533316061 } }\n```", "```go\n> db.movies.deleteOne({\"_id\": ObjectId(\"59574125bf7a73d140d5ba4a\")})\n{ \"acknowledged\" : true, \"deletedCount\" : 1 }\n```", "```go\ngo get gopkg.in/mgo.v2\n```", "```go\nimport \"gopkg.in/mgo.v2\"\n```", "```go\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        mgo \"gopkg.in/mgo.v2\"\n        \"gopkg.in/mgo.v2/bson\"\n)\n\n// Movie holds a movie data\ntype Movie struct {\n        Name      string   `bson:\"name\"`\n        Year      string   `bson:\"year\"`\n        Directors []string `bson:\"directors\"`\n        Writers   []string `bson:\"writers\"`\n        BoxOffice `bson:\"boxOffice\"`\n}\n\n// BoxOffice is nested in Movie\ntype BoxOffice struct {\n        Budget uint64 `bson:\"budget\"`\n        Gross  uint64 `bson:\"gross\"`\n}\n\nfunc main() {\n        session, err := mgo.Dial(\"127.0.0.1\")\n        if err != nil {\n                panic(err)\n        }\n        defer session.Close()\n\n        c := session.DB(\"appdb\").C(\"movies\")\n\n        // Create a movie\n        darkNight := &Movie{\n                Name:      \"The Dark Knight\",\n                Year:      \"2008\",\n                Directors: []string{\"Christopher Nolan\"},\n                Writers:   []string{\"Jonathan Nolan\", \"Christopher Nolan\"},\n                BoxOffice: BoxOffice{\n                        Budget: 185000000,\n                        Gross:  533316061,\n                },\n        }\n\n        // Insert into MongoDB\n        err = c.Insert(darkNight)\n        if err != nil {\n                log.Fatal(err)\n        }\n\n        // Now query the movie back\n        result := Movie{}\n        // bson.M is used for nested fields\n        err = c.Find(bson.M{\"boxOffice.budget\": bson.M{\"$gt\": 150000000}}).One(&result)\n        if err != nil {\n                log.Fatal(err)\n        }\n\n        fmt.Println(\"Movie:\", result.Name)\n}\n```", "```go\nc := session.DB(\"appdb\").C(\"movies\")\n```", "```go\nbson.M{\"year\": \"2008\"}\n```", "```go\nbson.M{\"boxOffice.budget\": bson.M{\"$gt\": 150000000}}\n```", "```go\ngo run mgoIntro.go\n```", "```go\nMovie: The Dark Knight\n```", "```go\npackage main\n\nimport (\n        \"encoding/json\"\n        \"io/ioutil\"\n        \"log\"\n        \"net/http\"\n        \"time\"\n\n        \"github.com/gorilla/mux\"\n        mgo \"gopkg.in/mgo.v2\"\n        \"gopkg.in/mgo.v2/bson\"\n)\n\n// DB stores the database session imformation. Needs to be initialized once\ntype DB struct {\n        session    *mgo.Session\n        collection *mgo.Collection\n}\n\ntype Movie struct {\n        ID        bson.ObjectId `json:\"id\" bson:\"_id,omitempty\"`\n        Name      string        `json:\"name\" bson:\"name\"`\n        Year      string        `json:\"year\" bson:\"year\"`\n        Directors []string      `json:\"directors\" bson:\"directors\"`\n        Writers   []string      `json:\"writers\" bson:\"writers\"`\n        BoxOffice BoxOffice     `json:\"boxOffice\" bson:\"boxOffice\"`\n}\n\ntype BoxOffice struct {\n        Budget uint64 `json:\"budget\" bson:\"budget\"`\n        Gross  uint64 `json:\"gross\" bson:\"gross\"`\n}\n\n// GetMovie fetches a movie with a given ID\nfunc (db *DB) GetMovie(w http.ResponseWriter, r *http.Request) {\n        vars := mux.Vars(r)\n        w.WriteHeader(http.StatusOK)\n        var movie Movie\n        err := db.collection.Find(bson.M{\"_id\": bson.ObjectIdHex(vars[\"id\"])}).One(&movie)\n        if err != nil {\n                w.Write([]byte(err.Error()))\n        } else {\n                w.Header().Set(\"Content-Type\", \"application/json\")\n                response, _ := json.Marshal(movie)\n                w.Write(response)\n        }\n\n}\n\n// PostMovie adds a new movie to our MongoDB collection\nfunc (db *DB) PostMovie(w http.ResponseWriter, r *http.Request) {\n        var movie Movie\n        postBody, _ := ioutil.ReadAll(r.Body)\n        json.Unmarshal(postBody, &movie)\n        // Create a Hash ID to insert\n        movie.ID = bson.NewObjectId()\n        err := db.collection.Insert(movie)\n        if err != nil {\n                w.Write([]byte(err.Error()))\n        } else {\n                w.Header().Set(\"Content-Type\", \"application/json\")\n                response, _ := json.Marshal(movie)\n                w.Write(response)\n        }\n}\n\nfunc main() {\n        session, err := mgo.Dial(\"127.0.0.1\")\n        c := session.DB(\"appdb\").C(\"movies\")\n        db := &DB{session: session, collection: c}\n        if err != nil {\n                panic(err)\n        }\n        defer session.Close()\n        // Create a new router\n        r := mux.NewRouter()\n        // Attach an elegant path with handler\n        r.HandleFunc(\"/v1/movies/{id:[a-zA-Z0-9]*}\", db.GetMovie).Methods(\"GET\")\n        r.HandleFunc(\"/v1/movies\", db.PostMovie).Methods(\"POST\")\n        srv := &http.Server{\n                Handler: r,\n                Addr:    \"127.0.0.1:8000\",\n                // Good practice: enforce timeouts for servers you create!\n                WriteTimeout: 15 * time.Second,\n                ReadTimeout:  15 * time.Second,\n        }\n        log.Fatal(srv.ListenAndServe())\n}\n```", "```go\ngo run movieAPI.go\n```", "```go\ncurl -X POST \\\n http://localhost:8000/v1/movies \\\n -H 'cache-control: no-cache' \\\n -H 'content-type: application/json' \\\n -H 'postman-token: 6ef9507e-65b3-c3dd-4748-3a2a3e055c9c' \\\n -d '{ \"name\" : \"The Dark Knight\", \"year\" : \"2008\", \"directors\" : [ \"Christopher Nolan\" ], \"writers\" : [ \"Jonathan Nolan\", \"Christopher Nolan\" ], \"boxOffice\" : { \"budget\" : 185000000, \"gross\" : 533316061 }\n}'\n```", "```go\n{\"id\":\"5958be2a057d926f089a9700\",\"name\":\"The Dark Knight\",\"year\":\"2008\",\"directors\":[\"Christopher Nolan\"],\"writers\":[\"Jonathan Nolan\",\"Christopher Nolan\"],\"boxOffice\":{\"budget\":185000000,\"gross\":533316061}}\n```", "```go\ncurl -X GET \\\n http://localhost:8000/v1/movies/5958be2a057d926f089a9700 \\\n -H 'cache-control: no-cache' \\\n -H 'postman-token: 00282916-e7f8-5977-ea34-d8f89aeb43e2'\n```", "```go\n{\"id\":\"5958be2a057d926f089a9700\",\"name\":\"The Dark Knight\",\"year\":\"2008\",\"directors\":[\"Christopher Nolan\"],\"writers\":[\"Jonathan Nolan\",\"Christopher Nolan\"],\"boxOffice\":{\"budget\":185000000,\"gross\":533316061}}\n```", "```go\n// DB stores the database session imformation. Needs to be initialized once \ntype DB struct {\n   session *mgo.Session \n   collection *mgo.Collection \n}\n```", "```go\ntype Movie struct {\n  ID        bson.ObjectId `json:\"id\" bson:\"_id,omitempty\"`\n  Name      string        `json:\"name\" bson:\"name\"`\n  Year      string        `json:\"year\" bson:\"year\"`\n  Directors []string      `json:\"directors\" bson:\"directors\"`\n  Writers   []string      `json:\"writers\" bson:\"writers\"`\n  BoxOffice BoxOffice     `json:\"boxOffice\" bson:\"boxOffice\"`\n}\n```", "```go\n// UpdateMovie modifies the data of given resource\nfunc (db *DB) UpdateMovie(w http.ResponseWriter, r *http.Request) {\n    vars := mux.Vars(r)\n    var movie Movie\n    putBody, _ := ioutil.ReadAll(r.Body)\n    json.Unmarshal(putBody, &movie)\n    // Create an Hash ID to insert\n    err := db.collection.Update(bson.M{\"_id\": bson.ObjectIdHex(vars[\"id\"])}, bson.M{\"$set\": &movie})\n    if err != nil {\n      w.WriteHeader(http.StatusOK)\n      w.Write([]byte(err.Error()))\n    } else {\n      w.Header().Set(\"Content-Type\", \"text\")\n      w.Write([]byte(\"Updated succesfully!\"))\n    }\n}\n\n// DeleteMovie removes the data from the db\nfunc (db *DB) DeleteMovie(w http.ResponseWriter, r *http.Request) {\n    vars := mux.Vars(r)\n    // Create an Hash ID to insert\n    err := db.collection.Remove(bson.M{\"_id\": bson.ObjectIdHex(vars[\"id\"])})\n    if err != nil {\n      w.WriteHeader(http.StatusOK)\n      w.Write([]byte(err.Error()))\n    } else {\n      w.Header().Set(\"Content-Type\", \"text\")\n      w.Write([]byte(\"Deleted succesfully!\"))\n    }\n}\n```", "```go\nr.HandleFunc(\"/v1/movies/{id:[a-zA-Z0-9]*}\", db.UpdateMovie).Methods(\"PUT\")\nr.HandleFunc(\"/v1/movies/{id:[a-zA-Z0-9]*}\", db.DeleteMovie).Methods(\"DELETE\")\n```", "```go\n> db.movies.insertOne({ name: 'Star Trek',   year: 2009,   directors: ['J.J. Abrams'],   writers: ['Roberto Orci', 'Alex Kurtzman'],   boxOffice: {      budget:150000000,      gross:257704099   } } )\n{ \n \"acknowledged\" : true,\n \"insertedId\" : ObjectId(\"595a6cc01226e5fdf52026a1\")\n}\n```", "```go\n> db.movies.insertOne({ name: 'The Dark Knight ', year: 2008, directors: ['Christopher Nolan'], writers: ['Jonathan Nolan', 'Christopher Nolan'], boxOffice: { budget:185000000, gross:533316061 } } )\n{ \n \"acknowledged\" : true,\n \"insertedId\" : ObjectId(\"59603d3b0f41ead96110cf4f\")\n}\n```", "```go\ndb.movies.createIndex({year: 1})\n```", "```go\n> db.movies.find({year: {$lt: 2010}})\n{ \"_id\" : ObjectId(\"5957397f4e5c31eb7a9ed48f\"), \"name\" : \"Star Trek\", \"year\" : 2009, \"directors\" : [ \"J.J. Abrams\" ], \"writers\" : [ \"Roberto Orci\", \"Alex Kurtzman\" ], \"boxOffice\" : { \"budget\" : 150000000, \"gross\" : 257704099 } }\n{ \"_id\" : ObjectId(\"59603d3b0f41ead96110cf4f\"), \"name\" : \"The Dark Knight \", \"year\" : 2008, \"directors\" : [ \"Christopher Nolan\" ], \"writers\" : [ \"Jonathan Nolan\", \"Christopher Nolan\" ], \"boxOffice\" : { \"budget\" : 185000000, \"gross\" : 533316061 } }\n```", "```go\n{\n    _id: ObjectId(\"59603d3b0f41ead96110cf4f\"),\n    sku: 1022,\n    slug: \"highlander-shirt-223\",\n    name: \"Highlander casual shirt\",\n    description: \"A nice looking casual shirt for men\",\n    details: {\n      model_number: 235476,\n      manufacturer: \"HighLander\",\n      color: \"light blue\",\n      mfg_date: new Date(2017, 4, 8),\n      size: 40 \n    },\n    reviews: 3,\n    pricing: {\n      cost: 23,\n      retail: 29\n    },\n    categories: {\n      ObjectId(\"3d3b10f41efad96g110vcf4f\"),\n      ObjectId(\"603d3eb0ft41ead96110cf4f\")\n    },\n    tags: [\"shirts\", \"men\", \"clothing\"],\n    reviews: {\n      ObjectId(\"3bd310f41efad96g110vcf4f\"),\n      ObjectId(\"f4e603d3eb0ft41ead96110c\"),\n      ObjectId(\"96g3bd310f41efad110vcf4g\")\n    }\n}\n```", "```go\n{\n    _id: ObjectId(\"6d3b56900f41ead96110cf4f\"),\n    name: \"Casual Shirts\",\n    description: \"All casual shirts for men\",\n    slug: \"casual-shirts\",\n    parent_categories: [{\n      slug: \"home\"\n      name: \"Home\",\n      _id: ObjectId(\"3d3b10f41efad96g110vcf4f\"),\n    }, \n    {\n      slug: \"shirts\"\n      name: \"Shirts\",\n      _id: ObjectId(\"603d3eb0ft41ead96110cf4f\"),\n    }]\n}\n```", "```go\n{\n  _id: ObjectId(\"4fcf3eb0ft41ead96110\"),\n  username: \"John\",\n  email_address: \"john.p@gmail.com\",\n  password: \"5kj64k56hdfjkhdfkgdf98g79df7g9dfg\",\n  first_name: \"John\",\n  last_name: \"Pauling\",\n  address_multiple: [{\n    type: \"home\"\n    street: \"601 Sherwood Ave\",\n    city: \"San Bernardino\",\n    state: \"California\",\n    pincode: 94565\n  }, \n  {\n    type: \"work\"\n    street: \"241 Indian Spring St\",\n    city: \"Pittsburg\",\n    state: \"California\",\n    pincode: 94565\n  }] ,\n  payments: {\n    name: \"Paypal\",\n    auth: {\n      token: \"dfghjvbsclka76asdadn89\"\n    }\n  }\n}\n```", "```go\n{\n  _id: ObjectId(),\n  user: ObjectId(\"4fcf3eb0ft41ead96110\"),\n  state: \"cart\",\n  item_queue: [{\n    item: ObjectId(\"59603d3b0f41ead96110cf4f\"),\n    quantity: 1,\n    cost: 23\n  }],\n  shipping_address: {\n    type: \"work\"\n    street: \"241 Indian Spring St\",\n    city: \"Pittsburg\",\n    state: \"California\",\n    pincode: 94565\n  },\n  total: 23, \n}\n```", "```go\n{\n  _id: ObjectId(\"5tcf3eb0ft41ead96110\"),\n  product: ObjectId(\"4fcf3eb0ft41ead96110\"),\n  posted_date: new Date(2017, 2, 6),\n  title: \"Overall satisfied with product\",\n  body: \"The product is good and durable. After dry wash, the color hasn't changed much\",\n  user: ObjectId(),\n  rating: 4,\n  upvotes: 3,\n  downvotes: 0,\n  upvoters: [ObjectId(\"41ea5tcf3eb0ftd9233476hg\"),\n             ObjectId(\"507f1f77bcf86cd799439011\"),\n             ObjectId(\"54f113fffba522406c9cc20f\")\n            ],\n  downvoters: []\n}\n```"]