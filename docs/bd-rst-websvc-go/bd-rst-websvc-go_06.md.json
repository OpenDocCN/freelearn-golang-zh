["```go\nsyntax 'proto3';\n\nmessage NetworkInterface {\n  int index = 1;\n  int mtu = 2;\n  string name = 3;\n  string hardwareaddr = 4;\n}\n```", "```go\n{\n   \"networkInterface\": {\n       \"index\" : 0,\n       \"mtu\" : 68,\n       \"name\": \"eth0\",\n       \"hardwareAddr\": \"00:A0:C9:14:C8:29\"\n   }\n}\n```", "```go\nsyntax 'proto3';\n\nmessage Schedule{\n  enum Days{\n     SUNDAY = 0;\n     MONDAY = 1;\n     TUESDAY = 2;\n     WEDNESDAY = 3;\n     THURSDAY = 4;\n     FRIDAY = 5;\n     SATURDAY = 6;\n  }\n}\n```", "```go\nenum EnumAllowingAlias {\n  option allow_alias = true;\n  UNKNOWN = 0;\n  STARTED = 1;\n  RUNNING = 1;\n}\n```", "```go\nmessage Site{\n   string url = 1;\n   int latency = 2;\n   repeated string proxies = 3;\n}\n```", "```go\n{\n  outerJSON: {\n      outerKey1: val1,\n      innerJSON: {\n         innerKey1: val2\n      }\n  }\n}\n```", "```go\nmessage Site {\n  string url = 1;\n  int latency = 2;\n  repeated Proxy proxies = 3;\n}\n\nmessage Proxy {\n  string url = 1;\n  int latency = 2;\n}\n```", "```go\nbrew install protobuf\n```", "```go\n# Make sure you grab the latest version\ncurl -OL https://github.com/google/protobuf/releases/download/v3.3.0/protoc-3.3.0-linux-x86_64.zip\n# Unzip\nunzip protoc-3.3.0-linux-x86_64.zip -d protoc3\n# Move only protoc* to /usr/bin/\nsudo mv protoc3/bin/protoc /usr/bin/protoc\n```", "```go\nmkdir $GOPATH/src/github.com/narenaryan/protofiles\n```", "```go\nsyntax = \"proto3\";\npackage protofiles;\n\nmessage Person {\n  string name = 1;\n  int32 id = 2;  // Unique ID number for this person.\n  string email = 3;\n\n  enum PhoneType {\n    MOBILE = 0;\n    HOME = 1;\n    WORK = 2;\n  }\n\n  message PhoneNumber {\n    string number = 1;\n    PhoneType type = 2;\n  }\n\n  repeated PhoneNumber phones = 4;\n}\n\n// Our address book file is just one of these.\nmessage AddressBook {\n  repeated Person people = 1;\n}\n```", "```go\npackage protofiles;\n```", "```go\nprotoc --go_out=. *.proto\n```", "```go\n[16:20:27] naren:protofiles git:(master*) $ ls -l\ntotal 24\n-rw-r--r-- 1 naren staff 5657 Jul 15 16:20 person.pb.go\n-rw-r--r--@ 1 naren staff 433 Jul 15 15:58 person.proto\n```", "```go\n........\ntype Person_PhoneType int32\n\nconst (\n  Person_MOBILE Person_PhoneType = 0\n  Person_HOME   Person_PhoneType = 1\n  Person_WORK   Person_PhoneType = 2\n)\n\nvar Person_PhoneType_name = map[int32]string{\n  0: \"MOBILE\",\n  1: \"HOME\",\n  2: \"WORK\",\n}\nvar Person_PhoneType_value = map[string]int32{\n  \"MOBILE\": 0,\n  \"HOME\":   1,\n  \"WORK\":   2,\n}\n.......\n```", "```go\nmkdir $GOPATH/src/github.com/narenaryan/protobufs\n```", "```go\ngo get github.com/golang/protobuf/proto\n```", "```go\npackage main\n\nimport (\n  \"fmt\"\n\n  \"github.com/golang/protobuf/proto\"\n  pb \"github.com/narenaryan/protofiles\"\n)\n\nfunc main() {\n  p := &pb.Person{\n    Id:    1234,\n    Name:  \"Roger F\",\n    Email: \"rf@example.com\",\n    Phones: []*pb.Person_PhoneNumber{\n      {Number: \"555-4321\", Type: pb.Person_HOME},\n    },\n  }\n\n  p1 := &pb.Person{}\n  body, _ := proto.Marshal(p)\n  _ = proto.Unmarshal(body, p1)\n  fmt.Println(\"Original struct loaded from proto file:\", p, \"\\n\")\n  fmt.Println(\"Marshaled proto data: \", body, \"\\n\")\n  fmt.Println(\"Unmarshaled struct: \", p1)\n}\n```", "```go\ngo run main.go\nOriginal struct loaded from proto file: name:\"Roger F\" id:1234 email:\"rf@example.com\" phones:<number:\"555-4321\" type:HOME >\n\nMarshaled proto data: [10 7 82 111 103 101 114 32 70 16 210 9 26 14 114 102 64 101 120 97 109 112 108 101 46 99 111 109 34 12 10 8 53 53 53 45 52 51 50 49 16 1]\n\nUnmarshaled struct: name:\"Roger F\" id:1234 email:\"rf@example.com\" phones:<number:\"555-4321\" type:HOME >\n```", "```go\npackage main\n\nimport (\n  \"fmt\"\n\n  \"encoding/json\"\n  pb \"github.com/narenaryan/protofiles\"\n)\n\nfunc main() {\n  p := &pb.Person{\n    Id:    1234,\n    Name:  \"Roger F\",\n    Email: \"rf@example.com\",\n    Phones: []*pb.Person_PhoneNumber{\n      {Number: \"555-4321\", Type: pb.Person_HOME},\n    },\n  }\n  body, _ := json.Marshal(p)\n  fmt.Println(string(body))\n}\n```", "```go\ngo run main_json.go\n\n{\"name\":\"Roger F\",\"id\":1234,\"email\":\"rf@example.com\",\"phones\":[{\"number\":\"555-4321\",\"type\":1}]}\n```", "```go\ngo get google.golang.org/grpc\ngo get -u github.com/golang/protobuf/protoc-gen-go\n```", "```go\nmkdir grpc_example\ncd grpc_example\nmkdir datafiles\n```", "```go\nsyntax = \"proto3\";\npackage datafiles;\n\nmessage TransactionRequest {\n   string from = 1;\n   string to = 2;\n   float amount = 3;\n}\n\nmessage TransactionResponse {\n  bool confirmation = 1;\n}\n\nservice MoneyTransaction {\n    rpc MakeTransaction(TransactionRequest) returns (TransactionResponse) {}\n}\n```", "```go\nprotoc -I datafiles/ datafiles/transaction.proto --go_out=plugins=grpc:datafiles\n```", "```go\n-rw-r--r-- 1 naren staff 6215 Jul 16 17:28 transaction.pb.go\n-rw-r--r-- 1 naren staff 294 Jul 16 17:28 transaction.proto\n```", "```go\nmkdir grpcServer grpcClient\n```", "```go\npackage main\n\nimport (\n  \"log\"\n  \"net\"\n\n  pb \"github.com/narenaryan/grpc_example/datafiles\"\n  \"golang.org/x/net/context\"\n  \"google.golang.org/grpc\"\n  \"google.golang.org/grpc/reflection\"\n)\n\nconst (\n  port = \":50051\"\n)\n\n// server is used to create MoneyTransactionServer.\ntype server struct{}\n\n// MakeTransaction implements MoneyTransactionServer.MakeTransaction\nfunc (s *server) MakeTransaction(ctx context.Context, in *pb.TransactionRequest) (*pb.TransactionResponse, error) {\n  log.Printf(\"Got request for money Transfer....\")\n  log.Printf(\"Amount: %f, From A/c:%s, To A/c:%s\", in.Amount, in.From, in.To)\n  // Do database logic here....\n  return &pb.TransactionResponse{Confirmation: true}, nil\n}\n\nfunc main() {\n  lis, err := net.Listen(\"tcp\", port)\n  if err != nil {\n    log.Fatalf(\"Failed to listen: %v\", err)\n  }\n  s := grpc.NewServer()\n  pb.RegisterMoneyTransactionServer(s, &server{})\n  // Register reflection service on gRPC server.\n  reflection.Register(s)\n  if err := s.Serve(lis); err != nil {\n    log.Fatalf(\"Failed to serve: %v\", err)\n  }\n}\n```", "```go\nrpc MakeTransaction(TransactionRequest) returns (TransactionResponse) {}\n```", "```go\npackage main\n\nimport (\n  \"log\"\n\n  pb \"github.com/narenaryan/grpc_example/datafiles\"\n  \"golang.org/x/net/context\"\n  \"google.golang.org/grpc\"\n)\n\nconst (\n  address = \"localhost:50051\"\n)\n\nfunc main() {\n  // Set up a connection to the server.\n  conn, err := grpc.Dial(address, grpc.WithInsecure())\n  if err != nil {\n    log.Fatalf(\"Did not connect: %v\", err)\n  }\n  defer conn.Close()\n  c := pb.NewMoneyTransactionClient(conn)\n\n  // Prepare data. Get this from clients like Frontend or App\n  from := \"1234\"\n  to := \"5678\"\n  amount := float32(1250.75)\n\n  // Contact the server and print out its response.\n  r, err := c.MakeTransaction(context.Background(), &pb.TransactionRequest{From: from,\n    To: to, Amount: amount})\n  if err != nil {\n    log.Fatalf(\"Could not transact: %v\", err)\n  }\n  log.Printf(\"Transaction confirmed: %t\", r.Confirmation)\n}\n```", "```go\n&pb.TransactionRequest{From: from, To: to, Amount: amount}\n```", "```go\ngo run $GOPATH/src/github.com/narenaryan/grpc_example/grpcServer/server.go\n```", "```go\ngo run $GOPATH/src/github.com/narenaryan/grpc_example/grpcClient/client.go\n```", "```go\n2017/07/16 19:13:16 Transaction confirmed: true\n```", "```go\n2017/07/16 19:13:16 Amount: 1250.750000, From A/c:1234, To A/c:5678\n```", "```go\nmkdir $GOPATH/src/github.com/narenaryan/serverPush\nmkdir $GOPATH/src/github.com/narenaryan/serverPush/datafiles\n```", "```go\nsyntax = \"proto3\";\npackage datafiles;\n\nmessage TransactionRequest {\n   string from = 1;\n   string to = 2;\n   float amount = 3;\n}\n\nmessage TransactionResponse {\n  string status = 1;\n  int32 step = 2;\n  string description = 3;\n}\n\nservice MoneyTransaction {\n    rpc MakeTransaction(TransactionRequest) returns (stream TransactionResponse) {}\n}\n```", "```go\nrpc MakeTransaction(TransactionRequest) returns (stream TransactionResponse) {}\n```", "```go\nprotoc -I datafiles/ datafiles/transaction.proto --go_out=plugins=grpc:datafiles\n```", "```go\nmkdir $GOPATH/src/github.com/narenaryan/serverPush/grpcServer\nvi $GOPATH/src/github.com/narenaryan/serverPush/grpcServer/server.go\n```", "```go\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"net\"\n  \"time\"\n\n  pb \"github.com/narenaryan/serverPush/datafiles\"\n  \"google.golang.org/grpc\"\n  \"google.golang.org/grpc/reflection\"\n)\n\nconst (\n  port      = \":50051\"\n  noOfSteps = 3\n)\n\n// server is used to create MoneyTransactionServer.\ntype server struct{}\n\n// MakeTransaction implements MoneyTransactionServer.MakeTransaction\nfunc (s *server) MakeTransaction(in *pb.TransactionRequest, stream pb.MoneyTransaction_MakeTransactionServer) error {\n  log.Printf(\"Got request for money transfer....\")\n  log.Printf(\"Amount: $%f, From A/c:%s, To A/c:%s\", in.Amount, in.From, in.To)\n  // Send streams here\n  for i := 0; i < noOfSteps; i++ {\n    // Simulating I/O or Computation process using sleep........\n    // Usually this will be saving money transfer details in DB or\n    // talk to the third party API\n    time.Sleep(time.Second * 2)\n    // Once task is done, send the successful message back to the client\n    if err := stream.Send(&pb.TransactionResponse{Status: \"good\",\n      Step:        int32(i),\n      Description: fmt.Sprintf(\"Description of step %d\", int32(i))}); err != nil {\n      log.Fatalf(\"%v.Send(%v) = %v\", stream, \"status\", err)\n    }\n  }\n  log.Printf(\"Successfully transfered amount $%v from %v to %v\", in.Amount, in.From, in.To)\n  return nil\n}\n\nfunc main() {\n  lis, err := net.Listen(\"tcp\", port)\n  if err != nil {\n    log.Fatalf(\"Failed to listen: %v\", err)\n  }\n  // Create a new GRPC Server\n  s := grpc.NewServer()\n  // Register it with Proto service\n  pb.RegisterMoneyTransactionServer(s, &server{})\n  // Register reflection service on gRPC server.\n  reflection.Register(s)\n  if err := s.Serve(lis); err != nil {\n    log.Fatalf(\"Failed to serve: %v\", err)\n  }\n}\n```", "```go\nstream.Send()\n```", "```go\nmkdir $GOPATH/src/github.com/narenaryan/serverPush/grpcClient\nvi $GOPATH/src/github.com/narenaryan/serverPush/grpcClient/cilent.go\n```", "```go\npackage main\n\nimport (\n  \"io\"\n  \"log\"\n\n  pb \"github.com/narenaryan/serverPush/datafiles\"\n  \"golang.org/x/net/context\"\n  \"google.golang.org/grpc\"\n)\n\nconst (\n  address = \"localhost:50051\"\n)\n\n// ReceiveStream listens to the stream contents and use them\nfunc ReceiveStream(client pb.MoneyTransactionClient, request *pb.TransactionRequest) {\n  log.Println(\"Started listening to the server stream!\")\n  stream, err := client.MakeTransaction(context.Background(), request)\n  if err != nil {\n    log.Fatalf(\"%v.MakeTransaction(_) = _, %v\", client, err)\n  }\n  // Listen to the stream of messages\n  for {\n    response, err := stream.Recv()\n    if err == io.EOF {\n      // If there are no more messages, get out of loop\n      break\n    }\n    if err != nil {\n      log.Fatalf(\"%v.MakeTransaction(_) = _, %v\", client, err)\n    }\n    log.Printf(\"Status: %v, Operation: %v\", response.Status, response.Description)\n  }\n}\n\nfunc main() {\n  // Set up a connection to the server.\n  conn, err := grpc.Dial(address, grpc.WithInsecure())\n  if err != nil {\n    log.Fatalf(\"Did not connect: %v\", err)\n  }\n  defer conn.Close()\n  client := pb.NewMoneyTransactionClient(conn)\n\n  // Prepare data. Get this from clients like Front-end or Android App\n  from := \"1234\"\n  to := \"5678\"\n  amount := float32(1250.75)\n\n  // Contact the server and print out its response.\n  ReceiveStream(client, &pb.TransactionRequest{From: from,\n    To: to, Amount: amount})\n}\n```", "```go\ngo run $GOPATH/src/github.com/narenaryan/serverPush/grpcServer/server.go\n```", "```go\ngo run $GOPATH/src/github.com/narenaryan/serverPush/grpcClient/client.go\n```", "```go\n2017/07/16 15:08:15 Started listening to the server stream!\n2017/07/16 15:08:17 Status: good, Operation: Description of step 0\n2017/07/16 15:08:19 Status: good, Operation: Description of step 1\n2017/07/16 15:08:21 Status: good, Operation: Description of step 2\n```", "```go\n2017/07/16 15:08:15 Got request for money Transfer....\n2017/07/16 15:08:15 Amount: $1250.750000, From A/c:1234, To A/c:5678\n2017/07/16 15:08:21 Successfully transfered amount $1250.75 from 1234 to 5678\n```"]