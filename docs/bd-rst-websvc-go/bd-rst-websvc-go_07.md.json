["```go\n\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main\" >> /etc/apt/sources.list.d/pgdg.list' \nwget -q https://www.postgresql.org/media/keys/ACCC4CF8.asc -O - | sudo apt-key add -\n\n```", "```go\n\nsudo apt-get update\napt-get install postgresql postgresql-contrib\n```", "```go\nsudo su - postgres\n```", "```go\npsql\n```", "```go\nbrew install postgresql\n```", "```go\npg_ctl -D /usr/local/var/postgres start && brew services start postgresql\n```", "```go\nsudo su postgres\n```", "```go\n\\du - List roles\n```", "```go\npostgres=# \\du\n\n List of roles \n Role name |      Attributes               | Member of \n-----------+------------------------------------------------------------+-----------\n postgres | Superuser, Create role, Create DB, Replication, Bypass RLS | {}\n```", "```go\nCREATE ROLE naren with LOGIN PASSWORD 'passme123';\n```", "```go\nALTER USER naren CREATEDB, CREATEROLE;\n```", "```go\nDROP ROLE naren;\n```", "```go\nCREATE DATABASE mydb;\n```", "```go\nCREATE TABLE products (\n    product_no integer,\n    name text,\n    price numeric\n);\n```", "```go\nINSERT INTO products VALUES (1, 'Rice', 5.99);\n```", "```go\nUPDATE products SET price = 10 WHERE price = 5.99;\n```", "```go\nDELETE FROM products WHERE price = 5.99;\n```", "```go\ngo get github.com/lib/pq\n```", "```go\nCREATE DATABASE mydb;\n```", "```go\nmkdir github.com/narenaryan/src/models\n```", "```go\npackage models\n\nimport (\n        \"database/sql\"\n        \"log\"\n        _ \"github.com/lib/pq\"\n)\n\nfunc InitDB() (*sql.DB, error) {\n        var err error\n        db, err := sql.Open(\"postgres\", \"postgres://naren:passme123@localhost/mydb?sslmode=disable\")\n        if err != nil {\n                return nil, err\n        } else {\n                // Create model for our URL service\n                stmt, err := db.Prepare(\"CREATE TABLE WEB_URL(ID SERIAL PRIMARY KEY, URL TEXT NOT NULL);\")\n                if err != nil {\n                        log.Println(err)\n                        return nil, err\n                }\n                res, err := stmt.Exec()\n                log.Println(res)\n                if err != nil {\n                        log.Println(err)\n                        return nil, err\n                }\n                return db, nil\n        }\n}\n```", "```go\npackage main\n\nimport (\n       \"log\"\n      \"github.com/narenaryan/models\"\n)\n\nfunc main() {\n  db, err := models.InitDB()\n  if err != nil {\n    log.Println(db)\n  }\n}\n```", "```go\ngo run main.go\n```", "```go\n\\c mydb \\dt\n```", "```go\nYou are now connected to database \"mydb\" as user \"postgres\".\n List of relations\n Schema | Name | Type | Owner\n--------+---------+-------+-------\n public | web_url | table | naren\n(1 row)\n```", "```go\nmkdir $GOPATH/src/github.com/narenaryan/base62\n```", "```go\npackage base62\n\nimport (\n     \"math\"\n     \"strings\"\n)\n\nconst base = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nconst b = 62\n\n// Function encodes the given database ID to a base62 string\nfunc ToBase62(num int) string{\n    r := num % b\n    res := string(base[r])\n    div := num / b\n    q := int(math.Floor(float64(div)))\n\n    for q != 0 {\n        r = q % b\n        temp := q / b\n        q = int(math.Floor(float64(temp)))\n        res = string(base[int(r)]) + res\n    }\n\n    return string(res)\n}\n\n// Function decodes a given base62 string to datbase ID\nfunc ToBase10(str string) int{\n    res := 0\n    for _, r := range str {\n        res = (b * res) + strings.Index(base, string(r))\n    }\n    return res\n}\n```", "```go\nvi $GOPATH/src/github.com/narenaryan/usebase62.go\n```", "```go\npackage main\n\nimport (\n      \"log\"\n      base62 \"github.com/narenaryan/base62\"\n)\n\nfunc main() {\n  x := 100\n  base62String := base62.ToBase62(x)\n  log.Println(base62String)\n  normalNumber := base62.ToBase10(base62String)\n  log.Println(normalNumber)\n}\n```", "```go\ngo run usebase62.go\n```", "```go\n2017/08/07 23:00:05 1C\n2017/08/07 23:00:05 100\n```", "```go\nconst base = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n```", "```go\nurlshortener\n\u251c\u2500\u2500 main.go\n\u251c\u2500\u2500 models\n\u2502   \u2514\u2500\u2500 models.go\n\u2514\u2500\u2500 utils\n \u2514\u2500\u2500 encodeutils.go\n\n2 directories, 3 files\n```", "```go\npackage main\n\nimport (\n    \"database/sql\"\n    \"encoding/json\"\n    \"io/ioutil\"\n    \"log\"\n    \"net/http\"\n    \"time\"\n\n    \"github.com/gorilla/mux\"\n    _ \"github.com/lib/pq\"\n    \"github.com/narenaryan/urlshortener/models\"\n    base62 \"github.com/narenaryan/urlshortener/utils\"\n)\n\n// DB stores the database session imformation. Needs to be initialized once\ntype DBClient struct {\n  db *sql.DB\n}\n\n// Model the record struct\ntype Record struct {\n  ID  int    `json:\"id\"`\n  URL string `json:\"url\"`\n}\n\n// GetOriginalURL fetches the original URL for the given encoded(short) string\nfunc (driver *DBClient) GetOriginalURL(w http.ResponseWriter, r *http.Request) {\n  var url string\n  vars := mux.Vars(r)\n  // Get ID from base62 string\n  id := base62.ToBase10(vars[\"encoded_string\"])\n  err := driver.db.QueryRow(\"SELECT url FROM web_url WHERE id = $1\", id).Scan(&url)\n  // Handle response details\n  if err != nil {\n    w.Write([]byte(err.Error()))\n  } else {\n    w.WriteHeader(http.StatusOK)\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    responseMap := map[string]interface{}{\"url\": url}\n    response, _ := json.Marshal(responseMap)\n    w.Write(response)\n  }\n}\n\n// GenerateShortURL adds URL to DB and gives back shortened string\nfunc (driver *DBClient) GenerateShortURL(w http.ResponseWriter, r *http.Request) {\n  var id int\n  var record Record\n  postBody, _ := ioutil.ReadAll(r.Body)\n  json.Unmarshal(postBody, &record)\n  err := driver.db.QueryRow(\"INSERT INTO web_url(url) VALUES($1) RETURNING id\", record.URL).Scan(&id)\n  responseMap := map[string]interface{}{\"encoded_string\": base62.ToBase62(id)}\n  if err != nil {\n    w.Write([]byte(err.Error()))\n  } else {\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    response, _ := json.Marshal(responseMap)\n    w.Write(response)\n  }\n}\n\nfunc main() {\n  db, err := models.InitDB()\n  if err != nil {\n    panic(err)\n  }\n  dbclient := &DBClient{db: db}\n  if err != nil {\n    panic(err)\n  }\n  defer db.Close()\n  // Create a new router\n  r := mux.NewRouter()\n  // Attach an elegant path with handler\n  r.HandleFunc(\"/v1/short/{encoded_string:[a-zA-Z0-9]*}\", dbclient.GetOriginalURL).Methods(\"GET\")\n  r.HandleFunc(\"/v1/short\", dbclient.GenerateShortURL).Methods(\"POST\")\n  srv := &http.Server{\n    Handler: r,\n    Addr:    \"127.0.0.1:8000\",\n    // Good practice: enforce timeouts for servers you create!\n    WriteTimeout: 15 * time.Second,\n    ReadTimeout:  15 * time.Second,\n  }\n  log.Fatal(srv.ListenAndServe())\n}\n```", "```go\n// DB stores the database session imformation. Needs to be initialized once\ntype DBClient struct {\n  db *sql.DB\n}\n\n// Model the record struct\ntype Record struct {\n  ID  int    `json:\"id\"`\n  URL string `json:\"url\"`\n}\n```", "```go\ngo run $GOPATH/src/github.com/narenaryan/urlshortener/main.go\n```", "```go\ngo install github.com/narenaryan/urlshortener/main.go\n```", "```go\nurlshortener\n```", "```go\ncurl -X POST \\\n http://localhost:8000/v1/short \\\n -H 'cache-control: no-cache' \\\n -H 'content-type: application/json' \\\n -d '{\n \"url\": \"https://www.forbes.com/forbes/welcome/?toURL=https://www.forbes.com/sites/karstenstrauss/2017/04/20/the-highest-paying-jobs-in-tech-in-2017/&refURL=https://www.google.co.in/&referrer=https://www.google.co.in/\"\n}'\n```", "```go\n{\n  \"encoded_string\": \"1\"\n}\n```", "```go\ncurl -X GET \\\n http://localhost:8000/v1/short/1 \\\n -H 'cache-control: no-cache' \\\n```", "```go\n{   \n\"url\":\"https://www.forbes.com/forbes/welcome/?toURL=https://www.forbes.com/sites/karstenstrauss/2017/04/20/the-highest-paying-jobs-in-tech-in-2017/\\u0026refURL=https://www.google.co.in/\\u0026referrer=https://www.google.co.in/\"}\n```", "```go\ngo get -u github.com/jinzhu/gorm\n```", "```go\nmkdir jsonstore\nmkdir jsonstore/models\ntouch jsonstore/models/models.go\n```", "```go\npackage models\n\nimport (\n  \"github.com/jinzhu/gorm\"\n  _ \"github.com/lib/pq\"\n)\n\ntype User struct {\n  gorm.Model\n  Orders []Order\n  Data string `sql:\"type:JSONB NOT NULL DEFAULT '{}'::JSONB\" json:\"-\"`\n}\n\ntype Order struct {\n  gorm.Model\n  User User\n  Data string `sql:\"type:JSONB NOT NULL DEFAULT '{}'::JSONB\"`\n}\n\n// GORM creates tables with plural names. Use this to suppress it\nfunc (User) TableName() string {\n  return \"user\"\n}\n\nfunc (Order) TableName() string {\n  return \"order\"\n}\n\nfunc InitDB() (*gorm.DB, error) {\n  var err error\n  db, err := gorm.Open(\"postgres\", \"postgres://naren:passme123@localhost/mydb?sslmode=disable\")\n  if err != nil {\n    return nil, err\n  } else {\n    /*\n    // The below AutoMigrate is equivalent to this\n    if !db.HasTable(\"user\") {\n      db.CreateTable(&User{})\n    }\n\n    if !db.HasTable(\"order\") {\n      db.CreateTable(&Order{})        \n    }\n    */\n    db.AutoMigrate(&User{}, &Order{})\n    return db, nil\n  }\n}\n```", "```go\ndb.AutoMigrate(&User{}, &Order{})\n```", "```go\n`sql:\"type:JSONB NOT NULL DEFAULT '{}'::JSONB\" json:\"-\"`\n```", "```go\ntouch jsonstore/main.go\n```", "```go\npackage main\n\nimport (\n  \"encoding/json\"\n  \"io/ioutil\"\n  \"log\"\n  \"net/http\"\n  \"time\"\n\n  \"github.com/gorilla/mux\"\n  \"github.com/jinzhu/gorm\"\n    _ \"github.com/lib/pq\"\n  \"github.com/narenaryan/jsonstore/models\"\n)\n\n// DB stores the database session imformation. Needs to be initialized once\ntype DBClient struct {\n  db *gorm.DB\n}\n\n// UserResponse is the response to be send back for User\ntype UserResponse struct {\n  User models.User `json:\"user\"`\n  Data interface{} `json:\"data\"`\n}\n\n// GetUsersByFirstName fetches the original URL for the given encoded(short) string\nfunc (driver *DBClient) GetUsersByFirstName(w http.ResponseWriter, r *http.Request) {\n  var users []models.User\n  name := r.FormValue(\"first_name\")\n  // Handle response details\n  var query = \"select * from \\\"user\\\" where data->>'first_name'=?\"\n  driver.db.Raw(query, name).Scan(&users)\n  w.WriteHeader(http.StatusOK)\n  w.Header().Set(\"Content-Type\", \"application/json\")\n  //responseMap := map[string]interface{}{\"url\": \"\"}\n  respJSON, _ := json.Marshal(users)\n  w.Write(respJSON)\n}\n\n// GetUser fetches the original URL for the given encoded(short) string\nfunc (driver *DBClient) GetUser(w http.ResponseWriter, r *http.Request) {\n  var user = models.User{}\n  vars := mux.Vars(r)\n  // Handle response details\n  driver.db.First(&user, vars[\"id\"])\n  var userData interface{}\n  // Unmarshal JSON string to interface\n  json.Unmarshal([]byte(user.Data), &userData)\n  var response = UserResponse{User: user, Data: userData}\n  w.WriteHeader(http.StatusOK)\n  w.Header().Set(\"Content-Type\", \"application/json\")\n  //responseMap := map[string]interface{}{\"url\": \"\"}\n  respJSON, _ := json.Marshal(response)\n  w.Write(respJSON)\n}\n\n// PostUser adds URL to DB and gives back shortened string\nfunc (driver *DBClient) PostUser(w http.ResponseWriter, r *http.Request) {\n  var user = models.User{}\n  postBody, _ := ioutil.ReadAll(r.Body)\n  user.Data = string(postBody)\n  driver.db.Save(&user)\n  responseMap := map[string]interface{}{\"id\": user.ID}\n  var err string = \"\"\n  if err != \"\" {\n    w.Write([]byte(\"yes\"))\n  } else {\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    response, _ := json.Marshal(responseMap)\n    w.Write(response)\n  }\n}\n\nfunc main() {\n  db, err := models.InitDB()\n  if err != nil {\n    panic(err)\n  }\n  dbclient := &DBClient{db: db}\n  if err != nil {\n    panic(err)\n  }\n  defer db.Close()\n  // Create a new router\n  r := mux.NewRouter()\n  // Attach an elegant path with handler\n  r.HandleFunc(\"/v1/user/{id:[a-zA-Z0-9]*}\", dbclient.GetUser).Methods(\"GET\")\n  r.HandleFunc(\"/v1/user\", dbclient.PostUser).Methods(\"POST\")\n  r.HandleFunc(\"/v1/user\", dbclient.GetUsersByFirstName).Methods(\"GET\")\n  srv := &http.Server{\n    Handler: r,\n    Addr:    \"127.0.0.1:8000\",\n    // Good practice: enforce timeouts for servers you create!\n    WriteTimeout: 15 * time.Second,\n    ReadTimeout:  15 * time.Second,\n  }\n  log.Fatal(srv.ListenAndServe())\n}\n```", "```go\n  \"github.com/jinzhu/gorm\"\n   _ \"github.com/lib/pq\"\n  \"github.com/narenaryan/jsonstore/models\"\n```", "```go\n r.HandleFunc(\"/v1/user/{id:[a-zA-Z0-9]*}\", dbclient.GetUser).Methods(\"GET\")\n r.HandleFunc(\"/v1/user\", dbclient.PostUser).Methods(\"POST\")\n r.HandleFunc(\"/v1/user\", dbclient.GetUsersByFirstName).Methods(\"GET\")\n```", "```go\ndriver.db.First(&user, vars[\"id\"])\n```", "```go\n// UserResponse is the response to be send back for User\ntype UserResponse struct {\n  User models.User `json:\"user\"`\n  Data interface{} `json:\"data\"`\n}\n```", "```go\ngo run jsonstore/main.go\n```", "```go\ncurl -X POST \\\n  http://localhost:8000/v1/user \\\n  -H 'cache-control: no-cache' \\\n  -H 'content-type: application/json' \\\n  -d '{\n     \"username\": \"naren\",\n     \"email_address\": \"narenarya@live.com\",\n     \"first_name\": \"Naren\",\n     \"last_name\": \"Arya\"\n}'\n```", "```go\n{\n  \"id\": 1\n}\n```", "```go\ncurl -X GET http://localhost:8000/v1/user/1 \n```", "```go\n{\"user\":{\"ID\":1,\"CreatedAt\":\"2017-08-27T11:55:02.974371+05:30\",\"UpdatedAt\":\"2017-08-27T11:55:02.974371+05:30\",\"DeletedAt\":null,\"Orders\":null},\"data\":{\"email_address\":\"narenarya@live.com\",\"first_name\":\"Naren\",\"last_name\":\"Arya\",\"username\":\"naren\"}}\n```", "```go\ncurl -X POST \\\n  http://localhost:8000/v1/user \\\n  -H 'cache-control: no-cache' \\\n  -H 'content-type: application/json' \\\n  -d '{\n     \"username\": \"nareny\",\n     \"email_address\": \"naren.yellavula@gmail.com\",\n     \"first_name\": \"Naren\",\n     \"last_name\": \"Yellavula\"\n}'\n```", "```go\ncurl -X GET 'http://localhost:8000/v1/user?first_name=Naren' \n```", "```go\n[{\"ID\":1,\"CreatedAt\":\"2017-08-27T11:55:02.974371+05:30\",\"UpdatedAt\":\"2017-08-27T11:55:02.974371+05:30\",\"DeletedAt\":null,\"Orders\":null},{\"ID\":2,\"CreatedAt\":\"2017-08-27T11:59:41.84332+05:30\",\"UpdatedAt\":\"2017-08-27T11:59:41.84332+05:30\",\"DeletedAt\":null,\"Orders\":null}]\n```"]