["```go\ngo get github.com/go-kit/kit\n```", "```go\nmkdir $GOPATH/src/github.com/narenaryan/encryptString\ncd $GOPATH/src/github.com/narenaryan/encryptString\n```", "```go\n\u2514\u2500\u2500 encryptString\n    \u251c\u2500\u2500 main.go\n    \u2514\u2500\u2500 utils\n        \u2514\u2500\u2500 utils.go\n```", "```go\npackage utils\nimport (\n    \"crypto/aes\"\n    \"crypto/cipher\"\n    \"encoding/base64\"\n)\n```", "```go\n// Implements AES encryption algorithm(Rijndael Algorithm)\n/* Initialization vector for the AES algorithm\nMore details visit this link https://en.wikipedia.org/wiki/Advanced_Encryption_Standard */\nvar initVector = []byte{35, 46, 57, 24, 85, 35, 24, 74, 87, 35, 88, 98, 66, 32, 14, 05}\n```", "```go\n// EncryptString encrypts the string with given key\nfunc EncryptString(key, text string) string {\n    block, err := aes.NewCipher([]byte(key))\n    if err != nil {\n        panic(err)\n    }\n    plaintext := []byte(text)\n    cfb := cipher.NewCFBEncrypter(block, initVector)\n    ciphertext := make([]byte, len(plaintext))\n    cfb.XORKeyStream(ciphertext, plaintext)\n    return base64.StdEncoding.EncodeToString(ciphertext)\n}\n```", "```go\n// DecryptString decrypts the encrypted string to original\nfunc DecryptString(key, text string) string {\n    block, err := aes.NewCipher([]byte(key))\n    if err != nil {\n        panic(err)\n    }\n    ciphertext, _ := base64.StdEncoding.DecodeString(text)\n    cfb := cipher.NewCFBEncrypter(block, initVector)\n    plaintext := make([]byte, len(ciphertext))\n    cfb.XORKeyStream(plaintext, ciphertext)\n    return string(plaintext)\n}\n```", "```go\npackage main\nimport (\n    \"log\"\n    \"github.com/narenaryan/encryptString/utils\"\n)\n// AES keys should be of length 16, 24, 32\nfunc main() {\n    key := \"111023043350789514532147\"\n    message := \"I am A Message\"\n    log.Println(\"Original message: \", message)\n    encryptedString := utils.EncryptString(key, message)\n    log.Println(\"Encrypted message: \", encryptedString)\n    decryptedString := utils.DecryptString(key, encryptedString)\n    log.Println(\"Decrypted message: \", decryptedString)\n}\n```", "```go\ngo run main.go\n\nOriginal message: I am A Message\nEncrypted message: 8/+JCfTb+ibIjzQtmCo=\nDecrypted message: I am A Message\n```", "```go\n\u251c\u2500\u2500 helpers\n\u2502   \u251c\u2500\u2500 endpoints.go\n\u2502   \u251c\u2500\u2500 implementations.go\n\u2502   \u251c\u2500\u2500 jsonutils.go\n\u2502   \u2514\u2500\u2500 models.go\n\u2514\u2500\u2500 main.go\n```", "```go\nimport (\n  \"context\"\n)\n// EncryptService is a blueprint for our service\n\ntype EncryptService interface {\n  Encrypt(context.Context, string, string) (string, error)\n  Decrypt(context.Context, string, string) (string, error)\n}\n```", "```go\npackage helpers\n\n// EncryptRequest strctures request coming from client\ntype EncryptRequest struct {\n  Text string `json:\"text\"`\n  Key  string `json:\"key\"`\n}\n\n// EncryptResponse strctures response going to the client\ntype EncryptResponse struct {\n  Message string `json:\"message\"`\n  Err     string `json:\"error\"`\n}\n\n// DecryptRequest strctures request coming from client\ntype DecryptRequest struct {\n  Message string `json:\"message\"`\n  Key     string `json:\"key\"`\n}\n\n// DecryptResponse strctures response going to the client\ntype DecryptResponse struct {\n  Text string `json:\"text\"`\n  Err  string `json:\"error\"`\n}\n```", "```go\npackage helpers\nimport (\n    \"context\"\n    \"crypto/aes\"\n    \"crypto/cipher\"\n    \"encoding/base64\"\n    \"errors\"\n)\n// EncryptServiceInstance is the implementation of interface for micro service\ntype EncryptServiceInstance struct{}\n// Implements AES encryption algorithm(Rijndael Algorithm)\n/* Initialization vector for the AES algorithm\nMore details visit this link https://en.wikipedia.org/wiki/Advanced_Encryption_Standard */\nvar initVector = []byte{35, 46, 57, 24, 85, 35, 24, 74, 87, 35, 88, 98, 66, 32, 14, 05}\n// Encrypt encrypts the string with given key\nfunc (EncryptServiceInstance) Encrypt(_ context.Context, key string, text string) (string, error) {\n    block, err := aes.NewCipher([]byte(key))\n    if err != nil {\n        panic(err)\n    }\n    plaintext := []byte(text)\n    cfb := cipher.NewCFBEncrypter(block, initVector)\n    ciphertext := make([]byte, len(plaintext))\n    cfb.XORKeyStream(ciphertext, plaintext)\n    return base64.StdEncoding.EncodeToString(ciphertext), nil\n}\n// Decrypt decrypts the encrypted string to original\nfunc (EncryptServiceInstance) Decrypt(_ context.Context, key string, text string) (string, error) {\n    if key == \"\" || text == \"\" {\n        return \"\", errEmpty\n    }\n    block, err := aes.NewCipher([]byte(key))\n    if err != nil {\n        panic(err)\n    }\n    ciphertext, _ := base64.StdEncoding.DecodeString(text)\n    cfb := cipher.NewCFBEncrypter(block, initVector)\n    plaintext := make([]byte, len(ciphertext))\n    cfb.XORKeyStream(plaintext, ciphertext)\n    return string(plaintext), nil\n}\nvar errEmpty = errors.New(\"Secret Key or Text should not be empty\")\n```", "```go\npackage helpers\nimport (\n    \"context\"\n    \"github.com/go-kit/kit/endpoint\"\n)\n// EncryptService is a blueprint for our service\ntype EncryptService interface {\n    Encrypt(context.Context, string, string) (string, error)\n    Decrypt(context.Context, string, string) (string, error)\n}\n// MakeEncryptEndpoint forms endpoint for request/response of encrypt function\nfunc MakeEncryptEndpoint(svc EncryptService) endpoint.Endpoint {\n    return func(ctx context.Context, request interface{}) (interface{}, error) {\n        req := request.(EncryptRequest)\n        message, err := svc.Encrypt(ctx, req.Key, req.Text)\n        if err != nil {\n            return EncryptResponse{message, err.Error()}, nil\n        }\n        return EncryptResponse{message, \"\"}, nil\n    }\n}\n// MakeDecryptEndpoint forms endpoint for request/response of decrypt function\nfunc MakeDecryptEndpoint(svc EncryptService) endpoint.Endpoint {\n    return func(ctx context.Context, request interface{}) (interface{}, error) {\n        req := request.(DecryptRequest)\n        text, err := svc.Decrypt(ctx, req.Key, req.Message)\n        if err != nil {\n            return DecryptResponse{text, err.Error()}, nil\n        }\n        return DecryptResponse{text, \"\"}, nil\n    }\n}\n```", "```go\npackage helpers\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"net/http\"\n)\n// DecodeEncryptRequest fills struct from JSON details of request\nfunc DecodeEncryptRequest(_ context.Context, r *http.Request) (interface{}, error) {\n    var request EncryptRequest\n    if err := json.NewDecoder(r.Body).Decode(&request); err != nil {\n        return nil, err\n    }\n    return request, nil\n}\n// DecodeDecryptRequest fills struct from JSON details of request\nfunc DecodeDecryptRequest(_ context.Context, r *http.Request) (interface{}, error) {\n    var request DecryptRequest\n    if err := json.NewDecoder(r.Body).Decode(&request); err != nil {\n        return nil, err\n    }\n    return request, nil\n}\n// EncodeResponse is common for both the reponses from encrypt and decrypt services\nfunc EncodeResponse(_ context.Context, w http.ResponseWriter, response interface{}) error {\n    return json.NewEncoder(w).Encode(response)\n}\n```", "```go\npackage main\nimport (\n    \"log\"\n    \"net/http\"\n    httptransport \"github.com/go-kit/kit/transport/http\"\n    \"github.com/narenaryan/encryptService/helpers\"\n)\nfunc main() {\n    svc := helpers.EncryptServiceInstance{}\n    encryptHandler := httptransport.NewServer(helpers.MakeEncryptEndpoint(svc),\n        helpers.DecodeEncryptRequest,\\\n        helpers.EncodeResponse)\n    decryptHandler := httptransport.NewServer(helpers.MakeDecryptEndpoint(svc),\n        helpers.DecodeDecryptRequest,\n        helpers.EncodeResponse)\n    http.Handle(\"/encrypt\", encryptHandler)\n    http.Handle(\"/decrypt\", decryptHandler)\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n```", "```go\ngo run main.go\n```", "```go\ncurl -XPOST -d'{\"key\":\"111023043350789514532147\", \"text\": \"I am A Message\"}' localhost:8080/encrypt\n\n{\"message\":\"8/+JCfTb+ibIjzQtmCo=\",\"error\":\"\"}\n```", "```go\ncurl -XPOST -d'{\"key\":\"111023043350789514532147\", \"message\": \"8/+JCfTb+ibIjzQtmCo=\"}' localhost:8080/decrypt\n\n{\"text\":\"I am A Message\",\"error\":\"\"}\n```", "```go\npackage helpers\nimport (\n    \"context\"\n    \"time\"\n    log \"github.com/go-kit/kit/log\"\n)\n// LoggingMiddleware wraps the logs for incoming requests\ntype LoggingMiddleware struct {\n    Logger log.Logger\n    Next EncryptService\n}\n// Encrypt logs the encyption requests\nfunc (mw LoggingMiddleware) Encrypt(ctx context.Context, key string, text string) (output string, err error) {\n    defer func(begin time.Time) {\n        _ = mw.Logger.Log(\n            \"method\", \"encrypt\",\n            \"key\", key,\n            \"text\", text,\n            \"output\", output,\n            \"err\", err,\n            \"took\", time.Since(begin),\n        )\n    }(time.Now())\n    output, err = mw.Next.Encrypt(ctx, key, text)\n    return\n}\n// Decrypt logs the encyption requests\nfunc (mw LoggingMiddleware) Decrypt(ctx context.Context, key string,\ntext string) (output string, err error) {\n    defer func(begin time.Time) {\n        _ = mw.Logger.Log(\n            \"method\", \"decrypt\",\n            \"key\", key,\n            \"message\", text,\n            \"output\", output,\n            \"err\", err,\n            \"took\", time.Since(begin),\n        )\n    }(time.Now())\n    output, err = mw.Next.Decrypt(ctx, key, text)\n    return\n}\n```", "```go\nmw.Logger.Log(\n      \"method\", \"decrypt\",\n      \"key\", key,\n      \"message\", text,\n      \"output\", output,\n      \"err\", err,\n      \"took\", time.Since(begin),\n    )\n```", "```go\nmw.Next.(Encrypt/Decrypt)\n```", "```go\npackage main\nimport (\n    \"log\"\n    \"net/http\"\n    \"os\"\n    kitlog \"github.com/go-kit/kit/log\"\n    httptransport \"github.com/go-kit/kit/transport/http\"\n    \"github.com/narenaryan/encryptService/helpers\"\n)\nfunc main() {\n    logger := kitlog.NewLogfmtLogger(os.Stderr)\n    var svc helpers.EncryptService\n    svc = helpers.EncryptServiceInstance{}\n    svc = helpers.LoggingMiddleware{Logger: logger, Next: svc}\n    encryptHandler := httptransport.NewServer(helpers.MakeEncryptEndpoint(svc),\n        helpers.DecodeEncryptRequest,\n        helpers.EncodeResponse)\n    decryptHandler := httptransport.NewServer(helpers.MakeDecryptEndpoint(svc),\n        helpers.DecodeDecryptRequest,\n        helpers.EncodeResponse)\n    http.Handle(\"/encrypt\", encryptHandler)\n    http.Handle(\"/decrypt\", decryptHandler)\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n```", "```go\ngo run main.go\n```", "```go\ncurl -XPOST -d'{\"key\":\"111023043350789514532147\", \"text\": \"I am A Message\"}' localhost:8080/encrypt\n\ncurl -XPOST -d'{\"key\":\"111023043350789514532147\", \"message\": \"8/+JCfTb+ibIjzQtmCo=\"}' localhost:8080/decrypt\n{\"text\":\"I am A Message\",\"error\":\"\"}\n```", "```go\nmethod=encrypt key=111023043350789514532147 text=\"I am A Message\" output=\"8/+JCfTb+ibIjzQtmCo=\" err=null took=11.32\u00b5s\n\nmethod=decrypt key=111023043350789514532147 message=\"8/+JCfTb+ibIjzQtmCo=\" output=\"I am A Message\" err=null took=6.773\u00b5s\n```", "```go\ngo get github.com/prometheus/client_golang/prometheus\ngo get github.com/prometheus/client_golang/prometheus/promhttp\n```", "```go\n\u251c\u2500\u2500 helpers\n\u2502   \u251c\u2500\u2500 endpoints.go\n\u2502   \u251c\u2500\u2500 implementations.go\n\u2502   \u251c\u2500\u2500 instrumentation.go\n\u2502   \u251c\u2500\u2500 jsonutils.go\n\u2502   \u251c\u2500\u2500 middleware.go\n\u2502   \u2514\u2500\u2500 models.go\n\u2514\u2500\u2500 main.go\n```", "```go\n// Prometheus\nc := prometheus.NewCounter(stdprometheus.CounterOpts{\n    Name: \"request_duration\",\n    ...\n}, []string{\"method\", \"status_code\"})\nc.With(\"method\", \"MyMethod\", \"status_code\", strconv.Itoa(code)).Add(1)\n```", "```go\npackage helpers\nimport (\n    \"context\"\n    \"fmt\"\n    \"time\"\n    \"github.com/go-kit/kit/metrics\"\n)\n// InstrumentingMiddleware is a struct representing middleware\ntype InstrumentingMiddleware struct {\n    RequestCount metrics.Counter\n    RequestLatency metrics.Histogram\n    Next EncryptService\n}\nfunc (mw InstrumentingMiddleware) Encrypt(ctx context.Context, key string, text string) (output string, err error) {\n    defer func(begin time.Time) {\n        lvs := []string{\"method\", \"encrypt\", \"error\", fmt.Sprint(err != nil)}\n        mw.RequestCount.With(lvs...).Add(1)\n        mw.RequestLatency.With(lvs...).Observe(time.Since(begin).Seconds())\n    }(time.Now())\n    output, err = mw.Next.Encrypt(ctx, key, text)\n    return\n}\nfunc (mw InstrumentingMiddleware) Decrypt(ctx context.Context, key string, text string) (output string, err error) {\n    defer func(begin time.Time) {\n        lvs := []string{\"method\", \"decrypt\", \"error\", \"false\"}\n        mw.RequestCount.With(lvs...).Add(1)\n        mw.RequestLatency.With(lvs...).Observe(time.Since(begin).Seconds())\n    }(time.Now())\n    output, err = mw.Next.Decrypt(ctx, key, text)\n    return\n}\n```", "```go\nmw.RequestCount.With(lvs...).Add(1)\n```", "```go\nmw.RequestLatency.With(lvs...).Observe(time.Since(begin).Seconds())\n```", "```go\npackage main\nimport (\n    \"log\"\n    \"net/http\"\n    \"os\"\n    stdprometheus \"github.com/prometheus/client_golang/prometheus\"\n    \"github.com/prometheus/client_golang/prometheus/promhttp\"\n    kitlog \"github.com/go-kit/kit/log\"\n    httptransport \"github.com/go-kit/kit/transport/http\"\n    \"github.com/narenaryan/encryptService/helpers\"\n    kitprometheus \"github.com/go-kit/kit/metrics/prometheus\"\n)\nfunc main() {\n    logger := kitlog.NewLogfmtLogger(os.Stderr)\n    fieldKeys := []string{\"method\", \"error\"}\n    requestCount := kitprometheus.NewCounterFrom(stdprometheus.CounterOpts{\n        Namespace: \"encryption\",\n        Subsystem: \"my_service\",\n        Name: \"request_count\",\n        Help: \"Number of requests received.\",\n    }, fieldKeys)\n    requestLatency := kitprometheus.NewSummaryFrom(stdprometheus.SummaryOpts{\n        Namespace: \"encryption\",\n        Subsystem: \"my_service\",\n        Name: \"request_latency_microseconds\",\n        Help: \"Total duration of requests in microseconds.\",\n    }, fieldKeys)\n    var svc helpers.EncryptService\n    svc = helpers.EncryptServiceInstance{}\n    svc = helpers.LoggingMiddleware{Logger: logger, Next: svc}\n    svc = helpers.InstrumentingMiddleware{RequestCount: requestCount, RequestLatency: requestLatency, Next: svc}\n    encryptHandler := httptransport.NewServer(helpers.MakeEncryptEndpoint(svc),\n        helpers.DecodeEncryptRequest,\n        helpers.EncodeResponse)\n    decryptHandler := httptransport.NewServer(helpers.MakeDecryptEndpoint(svc),\n        helpers.DecodeDecryptRequest,\n        helpers.EncodeResponse)\n    http.Handle(\"/encrypt\", encryptHandler)\n    http.Handle(\"/decrypt\", decryptHandler)\n    http.Handle(\"/metrics\", promhttp.Handler())\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n```", "```go\n requestCount := kitprometheus.NewCounterFrom(stdprometheus.CounterOpts{\n    Namespace: \"encryption\",\n    Subsystem: \"my_service\",\n    Name:      \"request_count\",\n    Help:      \"Number of requests received.\",\n  }, fieldKeys)\n```", "```go\nencryption_my_service_request_count\n```", "```go\n\"github.com/prometheus/client_golang/prometheus/promhttp\"\n...\nhttp.Handle(\"/metrics\", promhttp.Handler())\n```", "```go\ngo run main.go # This starts the server\n```", "```go\nfor i in 1 2 3 4 5; do curl -XPOST -d'{\"key\":\"111023043350789514532147\", \"text\": \"I am A Message\"}' localhost:8080/encrypt; done\n\n{\"message\":\"8/+JCfTb+ibIjzQtmCo=\",\"error\":\"\"}\n{\"message\":\"8/+JCfTb+ibIjzQtmCo=\",\"error\":\"\"}\n{\"message\":\"8/+JCfTb+ibIjzQtmCo=\",\"error\":\"\"}\n{\"message\":\"8/+JCfTb+ibIjzQtmCo=\",\"error\":\"\"}\n{\"message\":\"8/+JCfTb+ibIjzQtmCo=\",\"error\":\"\"}\n```", "```go\nfor i in 1 2 3 4 5 6 7 8 9 10; do curl -XPOST -d'{\"key\":\"111023043350789514532147\", \"message\": \"8/+JCfTb+ibIjzQtmCo=\"}' localhost:8080/decrypt; done\n```", "```go\n# HELP encryption_my_service_request_count Number of requests received.\n# TYPE encryption_my_service_request_count counter\nencryption_my_service_request_count{error=\"false\",method=\"decrypt\"} 10\nencryption_my_service_request_count{error=\"false\",method=\"encrypt\"} 5\n# HELP encryption_my_service_request_latency_microseconds Total duration of requests in microseconds.\n# TYPE encryption_my_service_request_latency_microseconds summary\nencryption_my_service_request_latency_microseconds{error=\"false\",method=\"decrypt\",quantile=\"0.5\"} 5.4538e-05\nencryption_my_service_request_latency_microseconds{error=\"false\",method=\"decrypt\",quantile=\"0.9\"} 7.6279e-05\nencryption_my_service_request_latency_microseconds{error=\"false\",method=\"decrypt\",quantile=\"0.99\"} 8.097e-05\nencryption_my_service_request_latency_microseconds_sum{error=\"false\",method=\"decrypt\"} 0.000603101\nencryption_my_service_request_latency_microseconds_count{error=\"false\",method=\"decrypt\"} 10\nencryption_my_service_request_latency_microseconds{error=\"false\",method=\"encrypt\",quantile=\"0.5\"} 5.02e-05\nencryption_my_service_request_latency_microseconds{error=\"false\",method=\"encrypt\",quantile=\"0.9\"} 8.8164e-05\nencryption_my_service_request_latency_microseconds{error=\"false\",method=\"encrypt\",quantile=\"0.99\"} 8.8164e-05\nencryption_my_service_request_latency_microseconds_sum{error=\"false\",method=\"encrypt\"} 0.000284823\nencryption_my_service_request_latency_microseconds_count{error=\"false\",method=\"encrypt\"} 5\n```"]