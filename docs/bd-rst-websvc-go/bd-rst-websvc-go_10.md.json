["```go\nsudo apt-get update\nsudo apt-get install nginx\n```", "```go\nbrew install nginx\n```", "```go\nsudo vi /usr/local/etc/nginx/nginx.conf\n```", "```go\nsudo vi /etc/nginx/nginx.conf\n```", "```go\nserver {\n        listen 8080; # Change this to 80 \n        server_name localhost;\n        #charset koi8-r;\n        #access_log logs/host.access.log main;\n        location / {\n            root html;\n            index index.html index.htm;\n        }\n\n        ... \n}\n```", "```go\nservice nginx status\n```", "```go\n/etc/nginx/sites-available\n```", "```go\n/usr/local/etc/nginx/sites-avaiable\n```", "```go\nmkdir -p $GOPATH/src/github.com/narenaryan/basicServer\nvi $GOPATH/src/github.com/narenaryan/basicServer/main.go\n```", "```go\npackage main\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"os\"\n    \"time\"\n)\n// Book holds data of a book\ntype Book struct {\n    ID int\n    ISBN string\n    Author string\n    PublishedYear string\n}\nfunc main() {\n    // File open for reading, writing and appending\n    f, err := os.OpenFile(\"app.log\", os.O_RDWR|os.O_CREATE|os.O_APPEND, 0666)\n    if err != nil {\n        fmt.Printf(\"error opening file: %v\", err)\n    }\n    defer f.Close()\n    // This attache sprogram logs to file\n    log.SetOutput(f)\n    // Function handler for handling requests\n    http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n        log.Printf(\"%q\", r.UserAgent())\n        // Fill the book details\n        book := Book{\n            ID: 123,\n            ISBN: \"0-201-03801-3\",\n            Author: \"Donald Knuth\",\n            PublishedYear: \"1968\",\n        }\n        // Convert struct to JSON using Marshal\n        jsonData, _ := json.Marshal(book)\n        w.Header().Set(\"Content-Type\", \"application/json\")\n        w.Write(jsonData)\n    })\n    s := &http.Server{\n        Addr: \":8000\",\n        ReadTimeout: 10 * time.Second,\n        WriteTimeout: 10 * time.Second,\n        MaxHeaderBytes: 1 << 20,\n    }\n    log.Fatal(s.ListenAndServe())\n}\n```", "```go\nCURL -X GET \"http://localhost:8000\"\n```", "```go\n{\n  \"ID\":123,\n  \"ISBN\":\"0-201-03801-3\",\n  \"Author\":\"Donald Knuth\",\n  \"PublishedYear\":\"1968\"\n}\n```", "```go\nvi /etc/nginx/sites-available/default\n```", "```go\nserver {\n        listen 80 default_server;\n        listen [::]:80 default_server ipv6only=on;\n\n        root /usr/share/nginx/html;\n        index index.html index.htm;\n\n        # Make site accessible from http://localhost/\n        server_name localhost;\n\n        location / {\n                # First attempt to serve request as file, then\n                # as directory, then fall back to displaying a 404.\n                try_files $uri $uri/ =404;\n                # Uncomment to enable naxsi on this location\n                # include /etc/nginx/naxsi.rules\n                proxy_pass http://127.0.0.1:8000;\n        }\n}\n```", "```go\nhttp://example.com:8000\n```", "```go\nservice nginx restart\n```", "```go\nCURL -X GET \"http://localhost\"\n{\n  \"ID\":123,\n  \"ISBN\":\"0-201-03801-3\",\n  \"Author\":\"Donald Knuth\",\n  \"PublishedYear\":\"1968\"\n}\n```", "```go\nserver {\n    listen ...;\n    ...\n    location / {\n        proxy_pass http://127.0.0.1:8000;\n    }\n\n    location /api {\n        proxy_pass http://127.0.0.1:8001;\n    }\n    location /mail {\n        proxy_pass http://127.0.0.1:8002;\n    }\n    ...\n}\n```", "```go\nhttp://localhost/\nhttp://localhost/api/\nhttp://localhost/mail/\n```", "```go\nhttp {\n    upstream cluster {\n        server site1.mysite.com weight=5;\n        server site2.mysite.com weight=2;\n        server backup.mysite.com backup;\n    }\n}\n```", "```go\nserver {\n    location / {\n        proxy_pass http://cluster;\n    }\n}\n```", "```go\nhttp {\n    upstream cluster {\n        least_conn;\n        server site1.mysite.com weight=5;\n        server site2.mysite.com;\n        server backup.mysite.com backup;\n    }\n}\n\nserver {\n    location / {\n        proxy_pass http://cluster;\n    }\n}\n```", "```go\nlimit_conn_zone client_type zone=zone_type:size;\n```", "```go\nhttp {\n    limit_conn_zone $server_name zone=servers:10m;\n}\n```", "```go\nserver {\n   limit_conn servers 1000;\n}\n```", "```go\nserver {\n  location /api {\n      limit_conn addr 1;\n  }\n}\n```", "```go\nserver {\n  location /download {\n      limit_conn addr 10;\n      limit_rate 50k;\n  }\n}\n```", "```go\nlocation /api {\n    ...\n    deny 192.168.1.2;\n    allow 192.168.1.1/24;\n    allow 127.0.0.1;\n    deny all;\n}\n```", "```go\nserver {\n    listen 80 default_server;\n    root /usr/share/nginx/html;\n\n    location /api {\n\n        deny 192.168.1.2;\n        allow 192.168.1.1/24;\n        allow 127.0.0.1;\n        deny all;\n    }\n}\n```", "```go\nsudo apt-get install -y supervisor\n```", "```go\ngo install github.com/narenaryan/basicServer\n```", "```go\n/etc/supervisor/conf.d/goproject.conf\n```", "```go\n[supervisord]\nlogfile = /tmp/supervisord.log\n[program:myserver]\ncommand=/root/workspace/bin/basicServer\nautostart=true\nautorestart=true\nredirect_stderr=true\n```", "```go\nsupervisorctl reread\nsupervisorctl update\n```", "```go\nsupervisorctl\n```", "```go\nkill 6886\n```", "```go\nsupervisorctl> stop myserver\nsupervisorctl> start myserver\n```"]