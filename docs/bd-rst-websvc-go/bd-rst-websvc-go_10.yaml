- en: Deploying Our REST services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署我们的REST服务
- en: In this chapter, we are going to see how to deploy our Go applications using
    a few tools such as Nohup and Nginx. To make a website visible to the internet,
    we need to have a **Virtual Private Server** (**VPS**) and deployment tools. We
    will first see how to run a Go executable and make it a background process using
    Nohup. Next, we will install Nginx and configure it to proxy the Go server.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到如何使用Nohup和Nginx等工具部署我们的Go应用程序。要使网站对互联网可见，我们需要有一个**虚拟专用服务器**（**VPS**）和部署工具。我们首先将看到如何运行一个Go可执行文件并使用Nohup将其作为后台进程。接下来，我们将安装Nginx并配置它以代理Go服务器。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is an Nginx proxy server?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Nginx代理服务器？
- en: Learning Nginx server blocks
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习Nginx服务器块
- en: Load balancing strategies in Nginx
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nginx中的负载均衡策略
- en: Deploying our Go service using Nginx
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Nginx部署我们的Go服务
- en: Rate limiting and securing our Nginx proxy server
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制速率和保护我们的Nginx代理服务器
- en: Monitoring our Go service using a tool called Supervisord
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用名为Supervisord的工具监视我们的Go服务
- en: Getting the code
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取代码
- en: The code for this chapter is available at [https://github.com/narenaryan/gorestful/tree/master/chapter10](https://github.com/narenaryan/gorestful/tree/master/chapter10).
    Copy it to `GOPATH` and run according to the instructions given in the chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可在[https://github.com/narenaryan/gorestful/tree/master/chapter10](https://github.com/narenaryan/gorestful/tree/master/chapter10)找到。将其复制到`GOPATH`并按照章节中给出的说明运行。
- en: Installing and configuring Nginx
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置Nginx
- en: Nginx is a high performant web server and load balancer, and is well suited
    to deploying high traffic websites. Even though this decision is opinionated,
    Python and Node developers usually use this.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx是一个高性能的Web服务器和负载均衡器，非常适合部署高流量的网站。尽管这个决定是有意见的，但Python和Node开发人员通常使用它。
- en: Nginx can also act as an upstream proxy server that allows us to redirect the
    HTTP requests to multiple application servers running on the same server. The
    main contender of Nginx is Apache's httpd.Nginx is an excellent static file server
    that can be used by the web clients. Since we are dealing with APIs, we will look
    into aspects of dealing with HTTP requests.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx还可以充当上游代理服务器，允许我们将HTTP请求重定向到在同一服务器上运行的多个应用程序服务器。Nginx的主要竞争对手是Apache的httpd。Nginx是一个出色的静态文件服务器，可以被Web客户端使用。由于我们正在处理API，我们将研究处理HTTP请求的方面。
- en: 'On Ubuntu 16.04, use these commands to install Nginx:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu 16.04上，使用以下命令安装Nginx：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'On macOS X, you can install it with `brew`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS X上，您可以使用`brew`安装它：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[https://brew.sh/](https://brew.sh/) is a very useful software packaging system
    for macOS X users. My recommendation is to use it for installing software. Once
    it is successfully installed, you can check it by opening the machine IP in the
    browser. Open `http://localhost/` on your web browser. You will see this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://brew.sh/](https://brew.sh/)是一个非常有用的macOS X用户软件打包系统。我的建议是使用它来安装软件。安装成功后，您可以通过在浏览器中打开机器IP来检查它。在您的Web浏览器中打开`http://localhost/`。您将看到这个：'
- en: '![](img/0b1237f3-8514-42f1-8b8a-deed58642a4e.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b1237f3-8514-42f1-8b8a-deed58642a4e.png)'
- en: 'This means that Nginx is installed successfully. It is serving on port `80`
    and serving the default page. On macOS, the default Nginx listening port will
    be `8000`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着Nginx已成功安装。它正在端口`80`上提供服务并提供默认页面。在macOS上，默认的Nginx监听端口将是`8000`：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'On Ubuntu (Linux), the file will be on this path:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu（Linux）上，文件将位于此路径：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Open the file, and search for a server and modify port `80` to `8000`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 打开文件，搜索服务器并将端口`80`修改为`8000`：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now everything is ready. The server runs on the `80` HTTP port, which means
    a client can access it using a URL (`http://localhost/`) and no port (`http://localhost:3000`).
    This basic server serves static files from a directory called `html`. The `root` parameter can
    be modified to any directory where we place our web assets. You can check the
    status of Nginx with the following command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切准备就绪。服务器在`80` HTTP端口上运行，这意味着客户端可以使用URL（`http://localhost/`）访问它，而不需要端口（`http://localhost:3000`）。这个基本服务器从一个名为`html`的目录中提供静态文件。`root`参数可以修改为我们放置Web资产的任何目录。您可以使用以下命令检查Nginx的状态：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Nginx for the Windows operating system is quite basic and not really intended
    for production-grade deployments. Open-source developers usually prefer Debian
    or Ubuntu servers for deploying the API servers with Nginx.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Windows操作系统上的Nginx相当基本，实际上并不适用于生产级部署。开源开发人员通常更喜欢Debian或Ubuntu服务器来部署带有Nginx的API服务器。
- en: What is a proxy server?
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是代理服务器？
- en: A proxy server is a server that holds the information of original servers in
    it. It acts as the front block for the client request. Whenever a client makes
    an HTTP request, it can directly go the application server. But, if the application
    server is written in a programming language, you need a translator that can turn
    the application response into a client-understandable response. **Common Gateway
    Interface** (**CGI**) does the same thing. For Go, we can run a simple HTTP server
    and it can work as a normal server (no translation required). So, why are we using
    another server called Nginx? We are using Nginx because it brings a lot of things
    into the picture.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 代理服务器是一个保存原始服务器信息的服务器。它充当客户端请求的前端。每当客户端发出HTTP请求时，它可以直接进入应用服务器。但是，如果应用服务器是用编程语言编写的，您需要一个可以将应用程序响应转换为客户端可理解响应的翻译器。**通用网关接口**（**CGI**）也是这样做的。对于Go，我们可以运行一个简单的HTTP服务器，它可以作为一个普通服务器运行（不需要翻译）。那么，为什么我们要使用另一个名为Nginx的服务器？我们使用Nginx是因为它将许多东西带入了视野。
- en: 'The benefits of having a proxy server (Nginx):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有代理服务器（Nginx）的好处：
- en: It can act as a load balancer
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以充当负载均衡器
- en: It can sit in front of cluster of applications and redirect HTTP requests
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以坐在应用程序集群的前面并重定向HTTP请求
- en: It can serve a filesystem with a good performance
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以以良好的性能提供文件系统
- en: It streams media very well
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以很好地流媒体
- en: 'If the same machine is running multiple applications, then we can bring all
    those under one umbrella. Nginx can also act as the API gateway that can be the
    starting point for multiple API endpoints. We will see about a specially dedicated
    API gateway in the next chapter, but Nginx can also work as one. Refer to the
    following diagram:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果同一台机器正在运行多个应用程序，那么我们可以将所有这些应用程序放在一个伞下。Nginx也可以充当API网关，可以是多个API端点的起点。我们将在下一章中看到一个专门的API网关，但Nginx也可以起到这样的作用。参考以下图表：
- en: '![](img/3a9a868e-2d81-4eef-9fc9-35f663a39bb8.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a9a868e-2d81-4eef-9fc9-35f663a39bb8.jpg)'
- en: If you see, the illustration client is talking directly to Nginx instead of
    the ports where other applications are running. In the diagram, Go is running
    on port `8000` and other applications are running on different ports. It means
    the different servers are providing different API endpoints. If the client wishes
    to call those APIs, it needs to access three ports. Instead, if we have Nginx,
    it can act as a proxy server for all three and simplifies the client request-response
    cycle.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到，图示客户端直接与Nginx通信，而不是其他应用程序运行的端口。在图表中，Go正在`8000`端口上运行，其他应用程序正在不同的端口上运行。这意味着不同的服务器提供不同的API端点。如果客户端希望调用这些API，则需要访问三个端口。相反，如果我们有Nginx，它可以作为所有三个的代理服务器，并简化客户端的请求-响应周期。
- en: Nginx is also called an upstream server because it serves the requests from
    the other server. From the illustration, a Python app can request an API endpoint
    from a Go app smoothly.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx也被称为上游服务器，因为它为其他服务器提供请求。从图示中，Python应用程序可以顺利地从Go应用程序请求API端点。
- en: Important Nginx paths
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重要的Nginx路径
- en: 'There are a few important Nginx paths we need to know about to work with the
    proxy server. In Nginx, we can host multiple sites (`www.example1.com`, `www.exampl2.com`,
    and so on) at the same time. Take a look at the following table:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些重要的Nginx路径，我们需要了解如何使用代理服务器。在Nginx中，我们可以同时托管多个站点（`www.example1.com`，`www.exampl2.com`等）。看一下下表：
- en: '| **Type** | **Path** | **Description** |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| **类型** | **路径** | **描述** |'
- en: '| Configuration | `/etc/nginx/nginx.con` | This is the base Nginx configuration
    file. It can be used as the default file. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 配置 | `/etc/nginx/nginx.con` | 这是基本的Nginx配置文件。它可以用作默认文件。 |'
- en: '| Configuration | `/etc/nginx/sites-available/` | If we have multiple sites
    running within Nginx, we can have multiple configuration files. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 配置 | `/etc/nginx/sites-available/` | 如果我们在Nginx中运行多个站点，我们可以有多个配置文件。 |'
- en: '| Configuration | `/etc/nginx/sites-enabled/` | These are the sites activated
    currently on Nginx. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 配置 | `/etc/nginx/sites-enabled/` | 这些是当前在Nginx上激活的站点。 |'
- en: '| Log | `/var/log/nginx/access.log` | This log file records the server activity,
    such as timestamp and API endpoints.  |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 日志 | `/var/log/nginx/access.log` | 此日志文件记录服务器活动，如时间戳和API端点。 |'
- en: '| Log | `/var/log/nginx/error.log` | This log file logs all proxy server-related
    errors, such as disk space, file system permissions, and so on. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 日志 | `/var/log/nginx/error.log` | 此日志文件记录所有与代理服务器相关的错误，如磁盘空间，文件系统权限等。 |'
- en: These paths are in the Linux operating system. For macOS X, use `/usr/local/nginx`
    as the base path.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这些路径在Linux操作系统中。对于macOS X，请使用`/usr/local/nginx`作为基本路径。
- en: Using server blocks
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用服务器块
- en: 'Server blocks are the actual configuration pieces that tell the server what
    to serve and on which port to listen. We can define multiple server blocks in
    the `sites-available` folder. On Ubuntu, the location will be:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器块是实际的配置部分，告诉服务器要提供什么以及在哪个端口上监听。我们可以在`sites-available`文件夹中定义多个服务器块。在Ubuntu上，位置将是：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'On macOS X, the location will be:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS X上，位置将是：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Until we copy the `sites-available` to the `sites-enabled` directory, the configuration
    has no effect. So, always create a soft link for `sites-available` to `sites-enabled`
    for every new configuration you create.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 直到我们将`sites-available`复制到`sites-enabled`目录，配置才会生效。因此，对于您创建的每个新配置，始终为`sites-available`创建到`sites-enabled`的软链接。
- en: Creating a sample Go application and proxying it
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个示例Go应用程序并对其进行代理
- en: 'Now, let us create a bare application server in Go with logging:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在Go中创建一个简单的应用程序服务器，并记录日志：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This file is a basic Go server to illustrate the proxy server''s functioning.
    Then, we add a configuration to Nginx to proxy port `8000` (Go running port) to
    HTTP port (`80`). Now, let us write the code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件是一个基本的Go服务器，用来说明代理服务器的功能。然后，我们向Nginx添加一个配置，将端口`8000`（Go运行端口）代理到HTTP端口（`80`）。现在，让我们编写代码：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This is a simple server that returns book details as an API (dummy data here).
    Run the program and it runs on port `8000`. Now, open a shell and make a CURL
    command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的服务器，返回书籍详细信息作为API（这里是虚拟数据）。运行程序并在`8000`端口上运行。现在，打开一个shell并进行CURL命令：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'It returns the data:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 它返回数据：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'But the client needs to request to `8000` port here. How can we proxy this
    server using Nginx? As we previously discussed, we need to edit the default sites-available
    server block, called `default`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 但是客户端需要在这里请求`8000`端口。我们如何使用Nginx代理此服务器？正如我们之前讨论的，我们需要编辑默认的sites-available服务器块，称为`default`：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Edit this file, find the server block, and add one line to it:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑此文件，找到服务器块，并在其中添加一行：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This section of the `config` file is called the server block. This controls
    the setting up of the proxy server where `listen` says where `nginx` should listen.
    `root`and `index` point to the static files if we need to serve any. `server_name`is
    the domain name of yours. Since we don''t have a domain ready, it is just localhost.
    The `location`is the key section here. In `location`, we can define our `proxy_pass`,
    which can proxy a given `URL:PORT`. Since our Go application is running on `8000`
    port, we mentioned it there. If we are running it on a different machine, such
    as:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`config`文件的这一部分称为服务器块。这控制了代理服务器的设置，其中`listen`表示`nginx`应该监听的位置。`root`和`index`指向静态文件，如果需要提供任何文件。`server_name`是您的域名。由于我们还没有准备好域名，它只是本地主机。`location`是这里的关键部分。在`location`中，我们可以定义我们的`proxy_pass`，它可以代理给定的`URL:PORT`。由于我们的Go应用程序正在`8000`端口上运行，我们在那里提到了它。如果我们在不同的机器上运行它，比如：'
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can give the same thing as a parameter to `proxy_pass`. In order to take
    this configuration into effect, we need to restart the Nginx server. Do that using:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将相同的内容作为参数传递给`proxy_pass`。为了使这个配置生效，我们需要重新启动Nginx服务器。使用以下命令进行：
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, make CURL request to `http://localhost` and you will see the Go application''s
    output:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，进行CURL请求到`http://localhost`，您将看到Go应用程序的输出：
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`location` is a directive that defines a **Unified Resource Identifier** (**URI**)
    that can proxy a given `server:port` combination. It means that by defining various
    URIs, we can proxy multiple applications running on the same server. It looks
    like:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`location`是一个指令，定义了可以代理给定`server:port`组合的**统一资源标识符**（**URI**）。这意味着通过定义各种URI，我们可以代理在同一服务器上运行的多个应用程序。它看起来像：'
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here, three applications are running on different ports. These, after being
    added to our configuration file, can be accessed by the client as:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，三个应用程序在不同的端口上运行。在将它们添加到我们的配置文件后，客户端可以访问它们：
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Load balancing with Nginx
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Nginx进行负载均衡
- en: 'In practical cases, we use multiple servers instead of one for handling huge
    sets of incoming requests for APIs. But who needs to forward an incoming client request
    to a server instance? Load balancing is a process where the central server distributes
    the load to various servers based on certain criteria. Refer to the following
    diagram:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际情况下，我们使用多个服务器来处理大量的API请求。但是谁需要将传入的客户端请求转发到服务器实例？负载均衡是一个过程，其中中央服务器根据某些标准将负载分配给各个服务器。参考以下图表：
- en: '![](img/9477923c-dd86-43cd-a6bc-c009d8bbe88d.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9477923c-dd86-43cd-a6bc-c009d8bbe88d.jpeg)'
- en: 'Those requesting criteria are called load balancing methods. Let us see what
    each does in a simple table:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这些请求标准被称为负载均衡方法。让我们看看每个方法在一个简单的表中是如何工作的：
- en: '| **Load balancing method** | **Description** |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| **负载均衡方法** | **描述** |'
- en: '| Round Robin | Requests are distributed evenly across servers and server weights
    are taken into consideration. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 轮询 | 请求均匀分布到服务器上，并且考虑服务器权重。 |'
- en: '| Least Connection | Requests are sent to the server that is currently serving
    the least number of clients. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 最少连接 | 请求被发送到当前为最少客户端提供服务的服务器。 |'
- en: '| IP Hash | This is used to send the requests from a given client''s IP to
    the given server. Only when that server is not available is it given to another
    server.  |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| IP哈希 | 用于将来自特定客户端IP的请求发送到给定服务器。只有在该服务器不可用时才会被发送到另一个服务器。 |'
- en: '| Least Time | A request from the client is sent to the machine with the lowest
    average latency (time to serve client) and least number of active connections.
    |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 最少时间 | 客户端的请求被发送到平均延迟（为客户端提供服务的时间）最低且活动连接最少的机器。 |'
- en: 'We now see how load balancing is practically achieved in Nginx for our Go API
    servers. The first step in this process is to create an `upstream` in the `http`
    section of the Nginx configuration file:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在看到了如何在Nginx中实际实现负载均衡，用于我们的Go API服务器。这个过程的第一步是在Nginx配置文件的`http`部分创建一个`upstream`：
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Here, servers are the IP addresses or domain names of the servers running the
    same code. We are defining an `upstream` called `backend` here. It is a server
    group that we can refer to in our location directive. Weights should be given
    in proportion to the resources available. In the preceding code, `site1` is given
    a higher weight because it may be a bigger instance (memory and disk). Now, in
    the location directive, we can specify the server group with the `proxy_pass`
    command:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，服务器是运行相同代码的服务器的IP地址或域名。我们在这里定义了一个名为`backend`的`upstream`。这是一个我们可以在位置指令中引用的服务器组。权重应该根据可用资源进行分配。在前面的代码中，`site1`被赋予更高的权重，因为它可能是一个更大的实例（内存和磁盘）。现在，在位置指令中，我们可以使用`proxy_pass`命令指定服务器组：
- en: '[PRE20]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, the proxy server that is running will pass requests to the machines in
    the cluster for all API endpoints hitting `/`. The default request routing algorithm
    will be Round Robin, which means all the servers'' turns will be repeated one
    after the other. If we need to change it, we mention that in the upstream definition.
    Take a look at the following code snippet:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行的代理服务器将传递所有命中“/”的API端点的请求到集群中的机器。默认的请求路由算法将是轮询，这意味着所有服务器的轮流将一个接一个地重复。如果我们需要更改它，我们在上游定义中提到。看一下以下代码片段：
- en: '[PRE21]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The preceding configuration says to *create a cluster of three machines, and
    add load balancing method as least connections*. `least_conn` is the string we
    used to mention the load balancing method. The other values could be `ip_hash`
    or `least_time`. You can try this by having a set of machines in the **Local Area
    Network** (**LAN**). Or else, we can have Docker installed with multiple virtual
    containers as different machines to test out load balancing.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的配置表示*创建一个由三台机器组成的集群，并添加最少连接的负载均衡方法*。`least_conn`是我们用来指定负载均衡方法的字符串。其他值可以是`ip_hash`或`least_time`。您可以通过在**局域网**（**LAN**）中拥有一组机器来尝试这个。或者，我们可以安装Docker，并使用多个虚拟容器作为不同的机器来测试负载均衡。
- en: We need to add that `http` block in the `/etc/nginx/nginx.conf` file, whereas
    the server block is in `/etc/nginx/sites-enabled/default`.It is better to separate
    these two settings.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在`/etc/nginx/nginx.conf`文件中添加`http`块，而服务器块在`/etc/nginx/sites-enabled/default`中。最好将这两个设置分开。
- en: Rate limiting our REST API
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制我们的REST API的速率
- en: 'We can also limit the rate of access to our Nginx proxy server by rate limiting.
    It provides a directive called `limit_conn_zone` ([http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html#limit_conn_zone](http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html#limit_conn_zone)).
    The format of it is this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过速率限制来限制对Nginx代理服务器的访问速率。它提供了一个名为`limit_conn_zone`的指令（[http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html#limit_conn_zone](http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html#limit_conn_zone)）。其格式如下：
- en: '[PRE22]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`client_type` can be of two types:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`client_type`可以是两种类型：'
- en: IP address (limit requests from a given IP address)
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IP地址（限制来自给定IP地址的请求）
- en: Server name (limit requests from a server)
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器名称（限制来自服务器的请求）
- en: '`zone_type`also changes in correspondence to the `client_type`. It takes values
    as per the following table:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`zone_type`也会随着`client_type`的变化而改变。它的取值如下表所示：'
- en: '| **Client type** | **Zone type** |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| **客户端类型** | **区域类型** |'
- en: '| `$binary_remote_address` | `addr` |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `$binary_remote_address` | `addr` |'
- en: '| `$server_name` | `servers` |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `$server_name` | `servers` |'
- en: 'Nginx needs to save a few things to memory to remember the IP addresses and
    servers for rate limiting. `size` is the storage that we allocate for Nginx to
    perform its memorizing. It takes values such as 8m (8MB) or 16m (16MB). Now, let
    us see where to add these settings. The preceding one should be added as a global
    setting to the `http` directive in the `nginx.conf` file:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx需要将一些东西保存到内存中，以记住用于速率限制的IP地址和服务器。`size`是我们为Nginx分配的存储空间，用于执行其记忆功能。它可以取值如8m（8MB）或16m（16MB）。现在，让我们看看在哪里添加这些设置。前面的设置应该作为全局设置添加到`nginx.conf`文件中的`http`指令中：
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This allocates the shared memory for Nginx to use. Now, in the server directive
    of sites-available/default, add the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这为Nginx分配了用于使用的共享内存。现在，在sites-available/default的服务器指令中，添加以下内容：
- en: '[PRE24]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The total number of connections for the given server will not exceed 1K in
    the preceding configuration using `limit_conn`. If we try to put the rate limit
    from a given IP address to the client, then use this:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的配置中，使用`limit_conn`限制给定服务器的连接总数不会超过1K。如果我们尝试从给定IP地址对客户端进行速率限制，那么可以使用这个：
- en: '[PRE25]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This setting stops a client (IP address) from opening more than one connection
    to the server (for example, railway booking online). If we have a file that the
    client downloads and need to set a bandwidth constraint, use `limit_rate`:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 此设置阻止客户端（IP地址）向服务器（例如在线铁路订票）打开多个连接。如果我们有一个客户端下载文件并需要设置带宽约束，可以使用`limit_rate`：
- en: '[PRE26]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In this way, we can control the client's interaction with our services that
    are proxied under Nginx. If we use Go binary directly to run the service, we lose
    all these features.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们可以控制客户端与Nginx代理的服务的交互。如果我们直接使用Go二进制文件运行服务，就会失去所有这些功能。
- en: Securing our Nginx proxy server
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护我们的Nginx代理服务器
- en: 'This is the most important piece in the Nginx set up. In this section, we will
    see how to restrict access to our server using basic authentication. This will
    be very important for our REST API servers because, let us suppose we have servers
    X, Y, and Z that talk to each other. X can serve clients directly, but X talks
    to Y and Z for some information by calling an internal API. Since we know that
    clients should not access Y or Z, we can make it so that only X is allowed to
    access the resources. We can allow or deny the IP addresses using the `nginx`
    access module. It looks like this:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Nginx设置中最重要的部分。在本节中，我们将看到如何使用基本身份验证限制对服务器的访问。这对于我们的REST API服务器非常重要，因为假设我们有服务器X、Y和Z彼此通信。X可以直接为客户端提供服务，但X通过调用内部API与Y和Z交流获取一些信息。由于我们知道客户端不应该访问Y或Z，我们可以设置只允许X访问资源。我们可以使用`nginx`访问模块允许或拒绝IP地址。它看起来像这样：
- en: '[PRE27]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This configuration tells Nginx to allow requests from clients ranging `192.168.1.1/24`,
    excluding `192.168.1.2`. The next line says to allow requests from the same host
    and block all other requests from any other client. The complete server block
    looks like this:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置告诉Nginx允许来自范围为`192.168.1.1/24`的客户端的请求，但排除`192.168.1.2`。下一行表示允许来自同一主机的请求，并阻止来自任何其他客户端的所有其他请求。完整的服务器块如下所示：
- en: '[PRE28]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: For more information regarding this, see the documentation at [nginx_http_access_module](http://nginx.org/en/docs/http/ngx_http_access_module.html?_ga=2.117850185.1364707364.1504109372-1654310658.1503918562).
    We can also add password-secured access to our Nginx served static files. It is
    mostly not applicable to the API because there, the application takes care of
    authenticating the user.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此更多信息，请参阅[nginx_http_access_module](http://nginx.org/en/docs/http/ngx_http_access_module.html?_ga=2.117850185.1364707364.1504109372-1654310658.1503918562)上的文档。我们还可以为Nginx提供的静态文件添加密码保护访问。这在API中通常不适用，因为在那里，应用程序负责对用户进行身份验证。
- en: Monitoring our Go API server with Supervisord
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Supervisord监控我们的Go API服务器
- en: It is fine that Nginx is sitting in front of our Go API server, it just proxies
    a port. However, sometimes that web application may stop due to the operating
    system restarting or crashing. Whenever your web server gets killed, it is someone's
    job to automatically bring it back to life. Supervisord is such a task runner.
    To make our API server run all the time, we need to monitor it. Supervisord is
    a tool that can monitor running processes (system) and can restart them when they
    were terminated.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx坐在我们的Go API服务器前面，只是代理一个端口，这是可以的。但是，有时Web应用程序可能会因操作系统重新启动或崩溃而停止。每当您的Web服务器被终止时，就有人的工作是自动将其恢复。Supervisord就是这样一个任务运行程序。为了使我们的API服务器一直运行，我们需要对其进行监控。Supervisord是一个可以监控运行中进程（系统）并在它们被终止时重新启动它们的工具。
- en: Installing Supervisord
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Supervisord
- en: 'We can easily install Supervisord using Python’s `pip` command. On Ubuntu 16.04,
    just use the `apt-get` command:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Python的`pip`命令轻松安装Supervisord。在Ubuntu 16.04上，只需使用`apt-get`命令：
- en: '[PRE29]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This installs two tools, `supervisor` and `supervisorctl`. `Supervisorctl`
    is intended to control the supervisor and add tasks, restart tasks, and so on.
    Let us use the sample `basicServre.go` program we created for illustrating Nginx
    for this too. Install the binary to the `$GOPATH/bin` directory. Here, suppose
    my `GOPATH` is `/root/workspace`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装两个工具，`supervisor`和`supervisorctl`。`Supervisorctl`用于控制supervisor并添加任务、重新启动任务等。让我们使用我们为Nginx创建的`basicServre.go`程序来说明这一点。将二进制文件安装到`$GOPATH/bin`目录中。在这里，假设我的`GOPATH`是`/root/workspace`：
- en: '[PRE30]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Always add the `bin` folder of your current `GOPATH` to the system path. Whenever
    you install the project binary, it is available as a normal executable from the
    overall system environment. You can do it adding this line to the `~/.profile`
    file: `export PATH=$PATH:/usr/local/go/bin`.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 始终将当前`GOPATH`的`bin`文件夹添加到系统路径中。每当安装项目二进制文件时，它将作为普通可执行文件在整个系统环境中可用。您可以通过将以下行添加到`~/.profile`文件来实现：`export
    PATH=$PATH:/usr/local/go/bin`。
- en: 'Now, create a configuration file at:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在以下位置创建一个配置文件：
- en: '[PRE31]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You can add any number of configuration files and `supervisord` treats them
    as separate processes to run. Add the following content to the preceding file:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以添加任意数量的配置文件，`supervisord`将它们视为要运行的单独进程。将以下内容添加到前述文件中：
- en: '[PRE32]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'By default, we have a file called `supervisord.conf` at `/etc/supervisor/`.
    Look at it for further reference:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，我们在`/etc/supervisor/`有一个名为`supervisord.conf`的文件。查看它以供参考：
- en: The `[supervisord]` section gives the location of the log file for `supervisord`.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[supervisord]`部分提供了`supervisord`的日志文件位置。'
- en: '`[program:myserver]` is the task block that traverses to a given directory
    and executes the command given.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[program:myserver]`是遍历到给定目录并执行给定命令的任务块。'
- en: 'Now, we can ask our `supervisorctl` to re-read the configuration and restart
    the task (process). For that, just say:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以要求我们的`supervisorctl`重新读取配置并重新启动任务（进程）。为此，只需说：
- en: '[PRE33]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Then, launch our `supervisorctl` with:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下命令启动我们的`supervisorctl`：
- en: '[PRE34]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'You will see something like this:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到类似于这样的内容：
- en: '![](img/bca1c706-5370-4956-8339-561e3be10032.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bca1c706-5370-4956-8339-561e3be10032.png)'
- en: 'So, our book service is getting monitored by `Supervisor`. Let us try to kill
    the process and see what `Supervisor` does:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的书籍服务正在被`Supervisor`监视。让我们试图杀死进程，看看`Supervisor`会做什么：
- en: '[PRE35]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now, as soon as possible, `Supervisor` starts a new process (different `pid`)
    by running the binary:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，尽快，`Supervisor`通过运行二进制文件启动一个新进程（不同的`pid`）：
- en: '![](img/6d881926-4c63-499a-9472-245d8cf528db.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6d881926-4c63-499a-9472-245d8cf528db.png)'
- en: 'This is very useful in production scenarios where a service needs to be up
    in case of any crash or OS restart. One question here, how do we start/stop an
    application service? Use the `start` and `stop` commands from `supervisorctl`
    for smooth operations:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这在生产场景中非常有用，因为服务需要在任何崩溃或操作系统重新启动的情况下保持运行。这里有一个问题，我们如何启动/停止应用程序服务？使用`supervisorctl`的`start`和`stop`命令进行平稳操作：
- en: '[PRE36]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: For more details about the Supervisor, visit [http://supervisord.org/](http://supervisord.org/).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Supervisor的更多详细信息，请访问[http://supervisord.org/](http://supervisord.org/)。
- en: Summary
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'This chapter is dedicated to showing how we can deploy our API services into
    production. One way is to run the Go binary and access it through the `IP: Port`
    combination directly from the client. That IP will be the **Virtual Private Server**
    (**VPS**) IP address. Instead, we can have a domain name registered and pointed
    to the VPS. The second and better way is to hide it behind a proxy server. Nginx
    is such a proxy server, using which we can have multiple application servers under
    one umbrella.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 本章专门介绍了如何将API服务部署到生产环境中。一种方法是运行Go二进制文件，并直接从客户端访问`IP:端口`组合。该IP将是**虚拟专用服务器**（**VPS**）的IP地址。相反，我们可以注册一个域名并指向VPS。第二种更好的方法是将其隐藏在代理服务器后面。Nginx就是这样一个代理服务器，使用它，我们可以在一个伞下拥有多个应用服务器。
- en: We saw how to install Nginx and start configuring it. Nginx provides features
    such as load balancing and rate limiting, which could be crucial while giving
    APIs to clients. Load balancing is the process of distributing loads among similar
    servers. We saw what types of loading mechanisms are available. Some of them are
    Round Robin, IP Hash, Least Connection, and so on. Then, we added authentication
    to our servers by allowing and denying a few sets of IP addresses.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了如何安装Nginx并开始配置它。Nginx提供了诸如负载平衡和速率限制之类的功能，在向客户端提供API时可能至关重要。负载平衡是在类似服务器之间分配负载的过程。我们看到了有哪些类型的负载均衡机制可用。其中一些是轮询、IP哈希、最小连接等。然后，我们通过允许和拒绝一些IP地址集来为我们的服务器添加了认证。
- en: Finally, we need a process monitor that can bring our crashed application back
    to life. Supervisord is a very good tool for the job. We saw how to install Supervisord
    and also launch supervisorctl, a command-line application to control running servers.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要一个进程监视器，可以将我们崩溃的应用程序恢复过来。Supervisord是这项工作的一个非常好的工具。我们看到了如何安装Supervisord，以及如何启动supervisorctl，一个用于控制运行服务器的命令行应用程序。
- en: In the next chapter, we are going to see how to make our API production-grade
    using an API gateway. We will discuss deeply how we can put our API behind an
    entity that takes care of authentication and rate limiting.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何使用API网关使我们的API达到生产级别。我们将深入讨论如何将我们的API置于一个负责认证和速率限制的实体后面。
