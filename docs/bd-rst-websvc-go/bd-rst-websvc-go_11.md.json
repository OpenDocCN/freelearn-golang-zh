["```go\ndocker -v\nDocker version 17.09.0-ce, build afdb6d4\n```", "```go\ndocker run -d --name kong-database \\\n -p 5432:5432 \\\n -e \"POSTGRES_USER=kong\" \\\n -e \"POSTGRES_DB=kong\" \\\n postgres:9.4\n```", "```go\ndocker run --rm \\\n --link kong-database:kong-database \\\n -e \"KONG_DATABASE=postgres\" \\\n -e \"KONG_PG_HOST=kong-database\" \\\n kong:latest kong migrations up\n```", "```go\nmkdir kongExample\n```", "```go\npackage main\nimport (\n    \"fmt\"\n    \"github.com/gorilla/mux\"\n    \"log\"\n    \"net/http\"\n    \"time\"\n)\nfunc HealthcheckHandler(w http.ResponseWriter, r *http.Request) {\n    w.WriteHeader(http.StatusOK)\n    fmt.Fprintf(w, time.Now().String())\n}\nfunc main() {\n    // Create a new router\n    r := mux.NewRouter()\n    // Attach an elegant path with handler\n    r.HandleFunc(\"/healthcheck\", HealthcheckHandler)\n    srv := &http.Server{\n        Handler: r,\n        Addr: \"0.0.0.0:3000\",\n        // Good practice: enforce timeouts for servers you create!\n        WriteTimeout: 15 * time.Second,\n        ReadTimeout: 15 * time.Second,\n    }\n    log.Fatal(srv.ListenAndServe())\n}\n```", "```go\nFROM golang\nADD kongExample /go/src/github.com/narenaryan/kongExample\nRUN go get github.com/gorilla/mux\nRUN go install github.com/narenaryan/kongExample\nENTRYPOINT /go/bin/kongExample\n```", "```go\ndocker build . -t gobuild\n```", "```go\ndocker run  -p 3000:3000 --name go-server -dit gobuild\n```", "```go\ndocker run -d --name kong \\\n --link kong-database:kong-database \\\n --link go-server:go-server \\\n -e \"KONG_DATABASE=postgres\" \\\n -e \"KONG_PG_HOST=kong-database\" \\\n -e \"KONG_PROXY_ACCESS_LOG=/dev/stdout\" \\\n -e \"KONG_ADMIN_ACCESS_LOG=/dev/stdout\" \\\n -e \"KONG_PROXY_ERROR_LOG=/dev/stderr\" \\\n -e \"KONG_ADMIN_ERROR_LOG=/dev/stderr\" \\\n -p 8000:8000 \\\n -p 8443:8443 \\\n -p 8001:8001 \\\n -p 8444:8444 \\\n kong:latest\n```", "```go\ndocker ps -q\nb6cd3ad39f75\n53d800fe3b15\nbbc9d2ba5679\n```", "```go\ncurl -X GET http://localhost:8001/status\n```", "```go\n{\n  \"database\": {\n    \"reachable\": true\n  },\n  \"server\": {\n    \"connections_writing\": 1,\n    \"total_requests\": 13,\n    \"connections_handled\": 14,\n    \"connections_accepted\": 14,\n    \"connections_reading\": 0,\n    \"connections_active\": 2,\n    \"connections_waiting\": 1\n  }\n}\n```", "```go\n{\n    \"name\": \"myapi\",\n    \"hosts\": \"server1\",\n    \"upstream_url\": \"http://go-server:3000\",\n    \"uris\":[\"/api/v1\"],\n    \"strip_uri\": true,\n    \"preserve_host\": false\n}\n```", "```go\n{\n  \"created_at\": 1509195475000,\n  \"strip_uri\": true,\n  \"id\": \"795409ae-89ae-4810-8520-15418b96161f\",\n  \"hosts\": [\n    \"server1\"\n  ],\n  \"name\": \"myapi\",\n  \"http_if_terminated\": false,\n  \"preserve_host\": false,\n  \"upstream_url\": \"http://go-server:3000\",\n  \"uris\": [\n    \"/api/v1\"\n  ],\n  \"upstream_connect_timeout\": 60000,\n  \"upstream_send_timeout\": 60000,\n  \"upstream_read_timeout\": 60000,\n  \"retries\": 5,\n  \"https_only\": false\n}\n```", "```go\nhttp://localhost:8000/api/v1/healthcheck\n```", "```go\n{\n  \"created_at\": 1509202704000,\n  \"config\": {\n    \"path\": \"/tmp/file.log\",\n    \"reopen\": false\n  },\n  \"id\": \"57954bdd-ee11-4f00-a7aa-1a48f672d36d\",\n  \"name\": \"file-log\",\n  \"api_id\": \"795409ae-89ae-4810-8520-15418b96161f\",\n  \"enabled\": true\n}\n```", "```go\ndocker exec -i -t kong /bin/bash\n```", "```go\ncat /tmp/file.log\n```", "```go\n{\"api\":{\"created_at\":1509195475000,\"strip_uri\":true,\"id\":\"795409ae-89ae-4810-8520-15418b96161f\",\"hosts\":[\"server1\"],\"name\":\"myapi\",\"headers\":{\"host\":[\"server1\"]},\"http_if_terminated\":false,\"https_only\":false,\"retries\":5,\"uris\":[\"\\/api\\/v1\"],\"preserve_host\":false,\"upstream_connect_timeout\":60000,\"upstream_read_timeout\":60000,\"upstream_send_timeout\":60000,\"upstream_url\":\"http:\\/\\/go-server:3000\"},\"request\":{\"querystring\":{},\"size\":\"423\",\"uri\":\"\\/api\\/v1\\/healthcheck\",\"request_uri\":\"http:\\/\\/server1:8000\\/api\\/v1\\/healthcheck\",\"method\":\"GET\",\"headers\":{\"cache-control\":\"no-cache\",\"cookie\":\"session.id=MTUwODY2NTE3MnxOd3dBTkZaUVNqVTBURmRTUlRSRVRsUlpRMHhGU2xkQlZVNDFVMFJNVmxjMlRFNDJUVXhDTWpaWE1rOUNORXBFVkRJMlExSXlSMEU9fNFxTxKgoEsN2IWvrF-sJgH4tSLxTw8o52lfgj2DwnHI\",\"postman-token\":\"b70b1881-d7bd-4d8e-b893-494952e44033\",\"user-agent\":\"PostmanRuntime\\/3.0.11-hotfix.2\",\"accept\":\"*\\/*\",\"connection\":\"keep-alive\",\"accept-encoding\":\"gzip, deflate\",\"host\":\"server1\"}},\"client_ip\":\"172.17.0.1\",\"latencies\":{\"request\":33,\"kong\":33,\"proxy\":0},\"response\":{\"headers\":{\"content-type\":\"text\\/plain; charset=utf-8\",\"date\":\"Sat, 28 Oct 2017 15:02:05 GMT\",\"via\":\"kong\\/0.11.0\",\"connection\":\"close\",\"x-kong-proxy-latency\":\"33\",\"x-kong-upstream-latency\":\"0\",\"content-length\":\"58\"},\"status\":200,\"size\":\"271\"},\"tries\":[{\"balancer_latency\":0,\"port\":3000,\"ip\":\"172.17.0.3\"}],\"started_at\":1509202924971}\n```", "```go\n    {\n      \"created_at\": 1509212748000,\n      \"config\": {\n        \"key_in_body\": false,\n        \"anonymous\": \"\",\n        \"key_names\": [\n          \"apikey\"\n        ],\n        \"hide_credentials\": true\n      },\n      \"id\": \"5c7d23dd-6dda-4802-ba9c-7aed712c2101\",\n      \"enabled\": true,\n      \"api_id\": \"795409ae-89ae-4810-8520-15418b96161f\",\n      \"name\": \"key-auth\"\n    }\n```", "```go\n{\n  \"message\": \"No API key found in request\"\n}\n```", "```go\n{\n  \"created_at\": 1509213840000,\n  \"username\": \"johnd\",\n  \"id\": \"df024acb-5cbd-4e4d-b3ed-751287eafd36\"\n}\n```", "```go\n{\n  \"id\": \"664435b8-0f16-40c7-bc7f-32c69eb6c39c\",\n  \"created_at\": 1509214422000,\n  \"key\": \"89MH58EXzc4xHBO8WZB9axZ4uhZ1vW9d\",\n  \"consumer_id\": \"df024acb-5cbd-4e4d-b3ed-751287eafd36\"\n}\n```", "```go\n{\n  \"created_at\": 1509216578000,\n  \"config\": {\n    \"hour\": 5000,\n    \"redis_database\": 0,\n    \"policy\": \"cluster\",\n    \"hide_client_headers\": false,\n    \"redis_timeout\": 2000,\n    \"redis_port\": 6379,\n    \"limit_by\": \"consumer\",\n    \"fault_tolerant\": true\n  },\n  \"id\": \"b087a740-62a2-467a-96b5-9cee1871a368\",\n  \"enabled\": true,\n  \"name\": \"rate-limiting\",\n  \"api_id\": \"795409ae-89ae-4810-8520-15418b96161f\",\n  \"consumer_id\": \"df024acb-5cbd-4e4d-b3ed-751287eafd36\"\n}\n```", "```go\n{\"message\":\"API rate limit exceeded\"}\n```", "```go\nX-RateLimit-Limit-hour \u21925000\nX-RateLimit-Remaining-hour \u21924990\n```"]