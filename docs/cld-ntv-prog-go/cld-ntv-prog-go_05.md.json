["```go\n$ npm install -g typescript\n```", "```go\n$ npm install -g webpack\n```", "```go\n$ npm init\n```", "```go\n{ \n  \"name\": \"myevents-ui\", \n  \"version\": \"1.0.0\", \n  \"description\": \"\", \n  \"main\": \"dist/bundle.js\", \n  \"author\": \"Martin Helmich\", \n  \"license\": \"MIT\" \n} \n```", "```go\n$ npm install --save react@16 react-dom@16 @types/react@16 @types/react-dom@16\n```", "```go\n$ npm install --save-dev typescript awesome-typescript-loader source-map-loader\n```", "```go\n{ \n  \"compilerOptions\": { \n    \"outDir\": \"./dist/\", \n    \"module\": \"commonjs\", \n    \"target\": \"es5\", \n    \"sourceMap\": true, \n    \"noImplicitAny\": true, \n    \"jsx\": \"react\" \n  }, \n  \"include\": [ \n    \"./src/**/*\" \n  ] \n} \n```", "```go\nmodule.exports = { \n  entry: \"./src/index.tsx\", \n  output: { \n    filename: \"bundle.js\", \n    path: __dirname + \"/dist\" \n  }, \n  resolve: { \n    extensions: [\".ts\", \".tsx\"] \n  }, \n  module: { \n    rules: [ \n      { \n        test: /\\.tsx?$/, \n        loader: \"awesome-typescript-loader\" \n      } \n    ] \n  }, \n  externals: { \n    \"react\": \"React\", \n    \"react-dom\": \"ReactDOM\" \n  } \n} \n```", "```go\nclass HelloWorld extends React.Component { \n  render() { \n    return <div className=\"greeting\"> \n      <h1>Hello {this.props.name}!</h1> \n    </div>; \n  } \n} \n```", "```go\nclass HelloWorld extends React.Component { \n  render() { \n    return React.createElement(\"div\", {class: \"greeting\"}, \n      React.createElement(\"h1\", {}, `Hello ${this.props.name}!`) \n    ); \n  } \n} \n```", "```go\nexport interface HelloWorldProps { \n  name: string; \n} \n\nexport class HelloWorld extends React.Component \n<HelloWorldProps, any> { \n  render() { \n    // ... \n  } \n} \n```", "```go\nimport {HelloWorld} from \"./hello_world\"; \n\nclass ExampleComponents extends React.Component<{}, any> { \n  render() { \n    return <div class=\"greeting-list\"> \n      <HelloWorld name=\"Foo\"/> \n      <HelloWorld name=\"Bar\"/> \n    </div> \n  } \n} \n```", "```go\nexport interface CounterState { \n  counter: number; \n} \n\nexport class Counter extends React.Component<{}, CounterState> { \n  constructor() { \n    super(); \n    this.state = {counter: 0}; \n  } \n\n  render() { \n    return <div>Current count: {this.state.counter}</div>; \n  } \n} \n```", "```go\nconstructor() { \n  super();\n   this.state = {counter: 0}; \n\n  setInterval(() => { \n    this.setState({counter: this.state.counter + 1}); \n  }, 1000); \n} \n```", "```go\nexport interface CounterProps { \n  start: number; \n} \n\nexport interface CounterState { \n  counter: number \n} \n\nexport class Counter extends React.Component<CounterProps, CounterState> { \n  constructor(props: CounterProps) { \n    super(props); \n\n    this.state = { \n      counter: props.start \n    }; \n\n    setInterval(() => { \n      // ... \n  } \n} \n```", "```go\n<!DOCTYPE html> \n<html lang=\"en\"> \n  <head> \n    <meta charset=\"UTF-8\"> \n    <title>MyEvents</title> \n  </head> \n  <body> \n    <div id=\"myevents-app\"></div> \n\n    <script src=\"img/react.production.min.js\"></script> \n    <script src=\"img/react-dom.production.min.js\"></script> \n    <script src=\"img/bundle.js\"></script> \n  </body> \n</html> \n```", "```go\n$ npm install --save bootstrap@^3.3.7\n```", "```go\n<!DOCTYPE html> \n<html lang=\"en\"> \n<head> \n  <meta charset=\"UTF-8\"> \n  <title>MyEvents</title> \n  <link rel=\"stylesheet\" href=\"./node_modules/bootstrap/dist/css/bootstrap.min.css\"/> \n</head> \n<body> \n  <!-- ... --> \n</body> \n</html> \n```", "```go\nimport * as React from \"React\"; \n\nexport interface HelloProps { \n  name: string; \n} \n\nexport class Hello extends React.Component<HelloProps, {}> { \n  render() { \n    return <div>Hello {this.props.name}!</div>; \n  } \n} \n```", "```go\nimport * as React from \"react\"; \nimport * as ReactDOM from \"react-dom\"; \nimport {Hello} from \"./components/hello\"; \n\nReactDOM.render( \n  <div className=\"container\"> \n    <h1>MyEvents</h1> \n    <Hello name=\"World\"/> \n  </div>, \n  document.getElementById(\"myevents-app\") \n); \n```", "```go\n$ webpack\n```", "```go\n$ webpack --watch\n```", "```go\n$ npm install -g http-server\n$ http-server\n```", "```go\n$ npm install --save whatwg-fetch promise-polyfill\n```", "```go\n<script src=\"img/react.min.js\"></script> \n<script src=\"img/react-dom.min.js\"></script> \n<script src=\"img/promise.min.js\"></script> \n<script src=\"img/fetch.js\"></script> \n<script src=\"img/bundle.js\"></script> \n```", "```go\nexport interface Event { \n  ID string; \n  Name string; \n  Country string; \n  Location { \n    ID string; \n    Name string; \n    Address string; \n  }; \n  StartDate number; \n  EndDate number; \n  OpenTime: number; \n  CloseTime: number; \n} \n```", "```go\nimport {Event} from \"../models/event\"; \nimport * as React from \"react\"; \n\nexport interface EventListItemProps { \n  event: Event; \n} \n\nexport class EventListItem extends React.Component<EventListItemProps, {}> { \n  render() { \n    const start = new Date(this.props.event.StartDate * 1000); \n    const end = new Date(this.props.event.EndDate * 1000); \n\n    return <tr> \n      <td>{this.props.event.Name}</td> \n      <td>{this.props.event.Location.Name}</td> \n      <td>{start.toLocaleDateString()}</td> \n      <td>{end.toLocaleDateString()}</td> \n      <td></td> \n    </tr> \n  } \n} \n```", "```go\nimport {Event} from \"../models/event\"; \nimport {EventListItem} from \"./event_list_item\"; \nimport * as React from \"react\"; \n\nexport interface EventListProps { \n  events: Event[]; \n} \n\nexport class EventList extends React.Component<EventListProps, {}> { \n  render() { \n    const items = this.props.events.map(e => \n      <EventListItem event={e} /> \n    ); \n\n    return <table className=\"table\"> \n      <thead> \n        <tr> \n          <th>Event</th> \n          <th>Where</th> \n          <th colspan=\"2\">When (start/end)</th> \n          <th>Actions</th> \n        </tr> \n      </thead> \n      <tbody> \n        {items} \n      </tbody> \n    </table> \n  }   \n} \n```", "```go\nimport * as React from \"react\"; \nimport {EventList} from \"./event_list\"; \nimport {Event} from \"../models/event\"; \n\nexport interface EventListContainerProps { \n  eventListURL: string; \n} \n\nexport interface EventListContainerState { \n  loading: boolean; \n  events: Event[] \n} \n```", "```go\nexport class EventListContainer extends React.Component \n<EventListContainerProps, EventListContainerState> { \n  construct(p: EventListContainerProps) { \n    super(p); \n\n    this.state = { \n      loading: true, \n      events: [] \n    }; \n\n    fetch(p.eventListURL) \n      .then<Event[]>(response => response.json()) \n      .then(events => { \n        this.setState({ \n          loading: false, \n          events: events \n        }); \n      }); \n  } \n} \n```", "```go\nrender() { \n  if (this.state.loading) { \n    return <div>Loading...</div>; \n  } \n\n  return <EventList events={this.state.events} />; \n} \n```", "```go\nimport * as React from \"react\"; \nimport * as ReactDOM from \"react-dom\"; \nimport {EventListContainer} from \"./components/event_list_container\"; \n\nReactDOM.render( \n  <div className=\"container\"> \n    <h1>MyEvents</h1> \n    <EventListContainer eventListURL=\"http://localhost:8181\"/> \n  </div>, \n  document.getElementById(\"myevents-app\") \n); \n```", "```go\nclass App extends React.Component<{}, {}> { \n  render() { \n    return <div className=\"container\"> \n      <h1>MyEvents</h1> \n      <EventListContainer eventListURL=\"http://localhost:8181\"/> \n    </div> \n  } \n} \n\nReactDOM.render( \n  <App/> \n  document.getElementById(\"myevents-app\") \n); \n```", "```go\nHTTP/1.1 200 OK\n Content-Type: application/json; charset=utf-8\n Content-Length: 1524\n Date: Fri, 24 Mar 2017 16:02:55 GMT\n Access-Control-Allow-Origin: http://localhost:8080 \n```", "```go\n$ go get github.com/gorilla/handlers\n```", "```go\npackage rest \n\nimport ( \n  // ... \n  \"github.com/gorilla/mux\" \n  \"github.com/gorilla/handlers\" \n) \n\nfunc ServeAPI(endpoint string, dbHandler persistence.DatabaseHandler, eventEmitter msgqueue.EventEmitter) error { \n  handler := newEventHandler(dbHandler, eventEmitter) \n  r := mux.NewRouter() \n\n  // ... \n\n  server := handlers.CORS()(r) \n  return http.ListenAndServe(endpoint, server) \n} \n```", "```go\n$ npm install --save react-router-dom\n$ npm install --save-dev @types/react-router-dom\n```", "```go\nimport * as React from \"react\"; \nimport * as ReactDOM from \"react-dom\"; \nimport {HashRouter as Router, Route} from \"react-router-dom\"; \n// ... \n\nclass App extends React.Component<{}, {}> { \n  render() { \n    const eventList = () => <EventListContainer eventServiceURL=\"http://localhost:8181\"/> \n\n    return <Router> \n      <div className=\"container\"> \n        <h1>My Events</h1> \n\n        <Route exact path=\"/\" component={eventList}/> \n      </div> \n    </Router> \n  } \n} \n```", "```go\nimport * as React from \"react\"; \nimport {Link} from \"react-router-dom\"; \n\nexport interface NavigationProps { \n  brandName: string; \n} \n\nexport class Navigation extends React.Component<NavigationProps, {}> { \n} \n```", "```go\nrender() { \n  return <nav className=\"navbar navbar-default\"> \n    <div className=\"container\"> \n      <div className=\"navbar-header> \n        <Link to=\"/\" className=\"navbar-brand\"> \n          {this.props.brandName} \n        </Link> \n      </div> \n\n      <ul className=\"nav navbar-nav\"> \n        <li><Link to=\"/\">Events</Link></li> \n      </ul> \n    </div> \n  </nav> \n} \n```", "```go\n// ... \nimport {Navigation} from \"./components/navigation\"; \n\nclass App extends React.Component<{}, {}> { \n  render() { \n    const eventList = () => <EventListContainer eventServiceURL=\"http://localhost:8181\"/> \n\n    return <Router> \n      <Navigation brandName=\"MyEvents\"/> \n      <div className=\"container\"> \n        <h1>My Events</h1> \n\n        <Route exact path=\"/\" component={eventList}/> \n      </div> \n    </Router> \n  } \n} \n```", "```go\nimport * as React from \"react\"; \n\nexport interface FormRowProps { \n  label?: string; \n} \n\nexport class FormRow extends React.Component<FormRowProps, {}> { \n  render() { \n    return <div className=\"form-group\"> \n      <label className=\"col-sm-2 control-label\"> \n        {this.props.label} \n      </label> \n      <div className=\"col-sm-10\"> \n        {this.props.children} \n      </div> \n    </div> \n  } \n} \n```", "```go\n<FormRow label=\"Some input field\"> \n  <input className=\"form-control\" placeholder=\"Some value...\"/> \n</FormRow> \n```", "```go\nimport * as React from \"react\"; \nimport {Event} from \"../model/event\"; \nimport {FormRow} from \"./form_row\"; \n\nexport interface EventBookingFormProps { \n  event: Event; \n  onSubmit: (seats: number) => any \n} \n\nexport interface EventBookingFormState { \n  seats: number; \n} \n\nexport class EventBookingForm\n  extends React.Component<EventBookingFormProps, EventBookingFormState> { \n  constructor(p:  EventBookingFormProps) { \n    super(p); \n\n    this.state = {seats: 1}; \n  } \n} \n```", "```go\nrender() { \n  return <div> \n    <h2>Book tickets for {this.props.event.name}</h2> \n    <form className=\"form-horizontal\"> \n      <FormRow label=\"Event\"> \n        <p className=\"form-control-static\"> \n          {this.props.event.name} \n        </p> \n      </FormRow> \n      <FormRow label=\"Number of tickets\"> \n        <select className=\"form-control\" value={this.state.seats} \nonChange={event => this.handleNewAmount(event)}> \n          <option value=\"1\">1</option> \n          <option value=\"2\">2</option> \n          <option value=\"3\">3</option> \n          <option value=\"4\">4</option> \n        </select> \n      </FormRow> \n      <FormRow> \n        <button className=\"btn btn-primary\" \nonClick={() => this.props.onSubmit(this.state.seats)}> \n          Submit order \n        </button> \n      </FormRow> \n    </form> \n  </div> \n} \n```", "```go\nimport * as React from \"react\"; \nimport {ChangeEvent} from \"react\"; \n// ... \n\nexport class EventBookingForm extends React.Component<EventBookingFormProps, EventBookingFormState> { \n  // ... \n\n  private handleNewAmount(event: ChangeEvent<HTMLSelectElement>) { \n    const state: EventBookingFormState = { \n      seats: parseInt(event.target.value) \n    } \n\n    this.setState(state); \n  } \n} \n```", "```go\nimport * as React from \"react\"; \nimport {EventBookingForm} from \"./event_booking_form\"; \nimport {Event} from \"../model/event\"; \nexport class EventBookingFormContainerProps { \n  eventID: string; \n  eventServiceURL: string; \n  bookingServiceURL: string; \n} \nexport class EventBookingFormContainerState { \n  state: \"loading\"|\"ready\"|\"saving\"|\"done\"|\"error\"; \n  event?: Event; \n} \n```", "```go\nexport class EventBookingFormContainer\n  extends React.Component<EventBookingFormContainerProps,  EventBookingFormContainerState> { \n  constructor(p: EventBookingFormContainerProps) { \n    super(p); \n\n    this.state = {state: \"loading\"}; \n\n    fetch(p.eventServiceURL + \"/events/\" + p.eventID) \n      .then<Event>(response => response.json()) \n      .then(event => { \n        this.setState({ \n          state: \"ready\", \n          event: event \n        }) \n      }); \n  } \n} \n```", "```go\nrender() { \n  if (this.state.state === \"loading\") { \n    return <div>Loading...</div>; \n  } \n\n  if (this.state.state === \"saving\") { \n    return <div>Saving...</div>; \n  } \n\n  if (this.state.state === \"done\") { \n    return <div className=\"alert alert-success\"> \n      Booking completed! Thank you! \n    </div> \n  } \n\n  if (this.state.state === \"error\" || !this.state.event) { \n    return <div className=\"alert alert-danger\"> \n      Unknown error! \n    </div> \n  } \n\n  return <EventBookingForm event={this.state.event} \nonSubmit={seats => this.handleSubmit(seats)} /> \n} \n```", "```go\nprivate handleSubmit(seats: number) { \n  const url = this.props.bookingServiceURL + \"/events/\" + this.eventID + \"/bookings\"; \n  const payload = {seats: seats}; \n\n  this.setState({ \n    event: this.state.event, \n    state: \"saving\" \n  }); \n\n  fetch(url, {method: \"POST\", body: JSON.stringify(payload)}) \n    .then(response => { \n      this.setState({ \n        event: this.state.event, \n        state: response.ok ? \"done\" : \"error\" \n      }); \n    }) \n} \n```", "```go\nrender() { \n  const eventList = () => <EventListContainer eventServiceURL=\"http://localhost:8181\" />; \n  const eventBooking = ({match}: any) => \n    <EventBookingFormContainer eventID={match.params.id} \n      eventServiceURL=\"http://localhost8181\" \n      bookingServiceURL=\"http://localhost:8282\" />; \n\n  return <Router> \n    <div className=\"container\"> \n      <h1>My Events</h1> \n\n      <Route exact path=\"/\" component={eventList} /> \n      <Route path=\"/events/:id/book\" component={eventBooking} /> \n    </div> \n  </Router> \n} \n```", "```go\nimport {Link} from \"react-router-dom\"; \n// ... \n\nexport class EventListItem extends React.Component<EventListItemProps, {}> { \n  render() { \n    const start = new Date(this.props.event.StartDate * 1000); \n    const end = new Date(this.props.event.EndDate * 1000); \n\n    return <tr> \n      <td>{this.props.event.Name}</td> \n      <td>{this.props.event.Location.Name}</td> \n      <td>{start.toLocaleDateString()}</td> \n      <td>{end.toLocaleDateString()}</td> \n      <td> \n        <Link to={`/events/${this.props.event.ID}/book`}> \n          Book now! \n        </Link> \n      </td> \n    </tr> \n  } \n} \n```"]