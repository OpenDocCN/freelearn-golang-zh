["```go\n$ docker container run --rm hello-world \n```", "```go\n$ docker container run -d --name webserver -p 80:80 nginx \n```", "```go\n$ docker container ls \n```", "```go\nFROM debian:jessie \nMAINTAINER You <you@example.com> \n\nRUN echo 'Hello World' > /hello.txt \nCMD cat /hello.txt \n```", "```go\n$ docker image build -t test-image .\n```", "```go\n$ docker container run --rm test-image\n```", "```go\n$ docker network create test\n```", "```go\n$ docker container run -d --network=test --name=web nginx \n```", "```go\n$ docker container run --rm --network=test appropriate/curl http://web/\n```", "```go\n$ docker volume create test \n```", "```go\n$ docker volume ls \n```", "```go\n$ docker container run --rm -v test:/my-volume debian:jessie \n/bin/bash -c \"echo Hello > /my-volume/test.txt\" \n```", "```go\n$ docker container run -rm -v test:/my-volume debian:jessie \ncat /my-volume/test.txt\n```", "```go\n$ GOOS=linux go build \n```", "```go\n$ file eventservice \neventservice: ELF 64-bit executable, x86-64, version 1 (SYSV),  \nstatically linked, not stripped \n```", "```go\nFROM debian:jessie \n\nCOPY eventservice /eventservice \nRUN  useradd eventservice \nUSER eventservice \n\nENV LISTEN_URL=0.0.0.0:8181 \nEXPOSE 8181 \nCMD [\"/eventservice\"] \n```", "```go\n$ docker image build -t myevents/eventservice .\n```", "```go\nFROM debian:jessie \n\nCOPY bookingservice /bookingservice \nRUN  useradd bookingservice \nUSER bookingservice \n\nENV LISTEN_URL=0.0.0.0:8181 \nEXPOSE 8181 \nCMD [\"/bookingservice\"] \n```", "```go\n$ docker image build -t myevents/bookingservice .\n```", "```go\n$ docker network create myevents\n```", "```go\n$ docker container run -d --name rabbitmq --network myevents \nrabbitmq:3-management\n```", "```go\n$ docker container run -d --name events-db --network myevents mongo \n$ docker container run -d --name bookings-db --network myevents mongo \n```", "```go\n$ docker container run \\ \n    --detach \\ \n    --name events \\ \n    --network myevents \\ \n    -e AMQP_BROKER_URL=amqp://guest:guest@rabbitmq:5672/ \\ \n    -e MONGO_URL=mongodb://events-db/events \\ \n    -p 8181:8181 \\ \n    myevents/eventservice \n$ docker container run \\ \n    --detach \\ \n    --name bookings \\ \n    --network myevents \\ \n    -e AMQP_BROKER_URL=amqp://guest:guest@rabbitmq:5672/ \\ \n    -e MONGO_URL=mongodb://bookings-db/bookings \\ \n    -p 8282:8181 \\\n    myevents/bookingservice \n```", "```go\n$ ldd ./eventservice \n    linux-vdso.so.1 (0x00007ffed09b1000) \n    libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fd523c36000) \n    libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fd52388b000) \n    /lib64/ld-linux-x86-64.so.2 (0x0000564d70338000)  \n```", "```go\n$ ldd ./eventservice \n    not a dynamic executable \n```", "```go\n$ CGO_ENABLED=0 go build \n$ ldd ./eventservice \n    not a dynamic executable \n```", "```go\nFROM scratch \n\nCOPY eventservice /eventservice \n\nENV LISTEN_URL=0.0.0.0:8181 \nEXPOSE 8181 \nCMD [\"/eventservice\"] \n```", "```go\nFROM nginx:1.11-alpine \n\nCOPY index.html /usr/share/nginx/html/ \nCOPY dist /usr/share/nginx/html/dist/ \nCOPY node_modules/bootstrap/dist/css/bootstrap.min.css /usr/share/nginx/html/node_modules/bootstrap/dist/css/bootstrap.min.css \nCOPY node_modules/react/umd/react.production.min.js /usr/share/nginx/html/node_modules/react/umd/react.production.min.js\nCOPY node_modules/react-dom/umd/react-dom.production.min.js /usr/share/nginx/html/node_modules/react-dom/umd/react-dom.production.min.js\nCOPY node_modules/promise-polyfill/promise.min.js /usr/share/nginx/html/node_modules/promise-polyfill/promise.min.js \nCOPY node_modules/whatwg-fetch/fetch.js /usr/share/nginx/html/node_modules/whatwg-fetch/fetch.js \n```", "```go\n$ webpack -p \n$ npm install \n```", "```go\n$ docker container build -t myevents/frontend . \n```", "```go\n$ docker container run --name frontend -p 80:80 myevents/frontend\n```", "```go\n$ docker-compose -v \n```", "```go\nversion: \"3\" \nnetworks: \n  myevents: \n```", "```go\n$ docker-compose up \n```", "```go\nversion: \"3\" \nnetworks: \n  myevents:\n\nservices: \n  rabbitmq: \n    image: rabbitmq:3-management \n    ports: \n      - 15672:15672 \n    networks: \n      - myevents \n```", "```go\n$ docker-compose up -d \n```", "```go\nversion: \"3\" \nnetworks: \n  - myevents\n\nservices: \n  rabbitmq: #... \n\n  events-db: \n    image: mongo \n    networks: \n      - myevents \n\n  bookings-db: \n    image: mongo \n    networks: \n      - myevents \n```", "```go\nversion: \"3\" \nnetworks: \n  - myevents\n\nservices: \n  rabbitmq: #... \n  events-db: #... \n  bookings-db: #... \n  events: \n    build: path/to/eventservice \n    ports: \n      - \"8181:8181\" \n    networks: \n      - myevents \n    environment: \n      - AMQP_BROKER_URL=amqp://guest:guest@rabbitmq:15672/ \n      - MONGO_URL=mongodb://events-db/events \n  bookings: \n    build: path/to/bookingservice \n    ports: \n      - \"8282:8181\" \n    networks: \n      - myevents \n    environment: \n      - AMQP_BROKER_URL=amqp://guest:guest@rabbitmq:15672/ \n      - MONGO_URL=mongodb://bookings-db/bookings \n```", "```go\n$ docker-compose pull \n```", "```go\n$ docker-compose build \n```", "```go\nversion: \"3\" \nnetworks: \n  - myevents\n\nservices: \n  rabbitmq: #... \n  events-db: #... \n  bookings-db: #... \n  events: #... \n  bookings: #... \n\n  frontend: \n    build: path/to/frontend \n    ports: \n      - \"80:80\" \n```", "```go\n$ docker login \n```", "```go\n$ docker image build -t martinhelmich/test . \n$ docker image push martinhelmich/test \n```", "```go\n$ docker login quay.io \n```", "```go\n$ docker image build -t quay.io/martinhelmich/test .\n$ docker image push quay.io/martinhelmich/test \n```", "```go\n$ docker volume create registry-images \n$ docker container run \\ \n    --detach \\ \n    -p 5000:5000 \\ \n    -v registry-images:/var/lib/registry \\ \n    --name registry \\ \n    registry:2.6.1 \n```", "```go\n$ docker image build -t localhost:5000/martinhelmich/test . \n$ docker image push localhost:5000/martinhelmich/test \n```", "```go\n$ curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.18.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/ \n```", "```go\ncurl -LO https://storage.googleapis.com/kubernetes-release/release/1.6.1/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin \n```", "```go\n$ minikube start \n```", "```go\n$ kubectl get nodes \n```", "```go\napiVersion: v1 \nkind: Pod \nmetadata: \n  name: nginx-test \nspec: \n  containers: \n  - name: nginx \n    image: nginx \n    ports: \n      - containerPort: 80 \n        name: http \n        protocol: TCP \n```", "```go\n$ kubectl apply -f nginx-pod.yaml \n```", "```go\n$ kubectl get pods \n```", "```go\n# ... \nspec: \n  containers: \n  - name: nginx \n    image: nginx \n    resources: \n      limits: \n        memory: 128Mi \n        cpu: 0.5 \n    ports: # ... \n```", "```go\n$ kubectl delete pod nginx-test \n```", "```go\napiVersion: apps/v1beta1 \nkind: Deployment \nmetadata: \n  name: nginx-deployment \nspec: \n  replicas: 2 \n  template: \n    metadata: \n      labels: \n        app: nginx \n    spec: \n      containers: \n      - name: nginx \n        image: nginx \n        ports: \n        - containerPort: 80 \n          name: http \n          protocol: TCP \n```", "```go\n$ kubectl apply -f nginx-deployment.yaml \n```", "```go\n$ kubectl delete pod nginx-deployment-1397492275-qz8k5 \n```", "```go\n$ kubectl edit deployment nginx-deployment \n```", "```go\n$ kubectl scale --replicas=4 deployment/nginx-deployment \n```", "```go\napiVersion: v1 \nkind: Service \nmetadata: \n  name: nginx \nspec: \n  type: NodePort \n  selector: \n    app: nginx \n  ports: \n  - name: http \n    port: 80 \n```", "```go\n$ minikube service nginx \n```", "```go\napiVersion: v1 \nkind: PersistentVolume \nmetadata: \n  name: volume01 \nspec: \n  capacity: \n    storage: 1Gi \n  accessModes: \n  - ReadWriteOnce \n  - ReadWriteMany \n  hostPath: \n    path: /data/volume01 \n```", "```go\napiVersion: v1 \nkind: PersistentVolume \nmetadata: \n  name: volume01 \nspec: \n  capacity: \n    storage: 1Gi \n  accessModes: \n  - ReadWriteOnce \n  awsElasticBlockStore: \n    volumeID: <volume-id> \n    fsType: ext4 \n```", "```go\napiVersion: v1 \nkind: PersistentVolumeClaim \nmetadata: \n  name: my-data \nspec: \n  accessModes: \n    - ReadWriteOnce \n  resources: \n    requests: \n      storage: 1Gi \n```", "```go\napiVersion: v1 \nkind: Pod \nspec: \n  volumes: \n  - name: data \n    persistentVolumeClaim: \n      claimName: my-data \n  containers: \n  - name: nginx \n    image: nginx \n    volumeMounts: \n    - mountPath: \"/usr/share/nginx/html\" \n      name: data \n```", "```go\napiVersion: apps/v1beta1 \nkind: StatefulSet \nmetadata: \n  name: rmq \nspec: \n  serviceName: amqp-broker \n  replicas: 1 \n  template: \n    metadata: \n      labels: \n        myevents/app: amqp-broker \n    spec: \n      containers: \n      - name: rmq \n        image: rabbitmq:3-management \n        ports: \n        - containerPort: 5672 \n          name: amqp \n        - containerPort: 15672 \n          name: http \n```", "```go\napiVersion: apps/v1beta1 \nkind: StatefulSet \nmetadata: \n  name: rmq \nspec: \n  serviceName: amqp-broker \n  replicas: 1 \n  template: # ... \n  volumeClaimTemplates: \n  - metadata: \n      name: data \n      annotations: \n        volume.alpha.kubernetes.io/storage-class: standard \n    spec: \n      accessModes: [\"ReadWriteOnce\"] \n      resources: \n        requests: \n          storage: 1Gi \n```", "```go\ncontainers: \n- name: rmq \n  image: rabbitmq:3-management \n  ports: # ... \n  volumeMounts: \n  - name: data \n    mountPath: /var/lib/rabbitmq \n```", "```go\napiVersion: v1 \nkind: Service \nmetadata: \n  name: amqp-broker \nspec: \n  selector: \n    myevents/app: amqp-broker \n  ports: \n  - port: 5672 \n    name: amqp \n```", "```go\napiVersion: apps/v1beta1 \nkind: StatefulSet \nmetadata: \n  name: events-db \nspec: \n  serviceName: events-db \n  replicas: 1 \n  template: \n    metadata: \n      labels: \n        myevents/app: events \n        myevents/tier: database \n    spec: \n      containers: \n      - name: mongo \n        image: mongo:3.4.3 \n        ports: \n        - containerPort: 27017 \n          name: mongo \n        volumeMounts: \n        - name: database \n          mountPath: /data/db \n  volumeClaimTemplates: \n  - metadata: \n      name: data \n      annotations: \n        volume.alpha.kubernetes.io/storage-class: standard \n    spec: \n      accessModes: [\"ReadWriteOnce\"] \n      resources: \n        requests: \n          storage: 1Gi \n```", "```go\napiVersion: v1 \nkind: Service \nmetadata: \n  name: events-db \nspec: \n  clusterIP: None \n  selector: \n    myevents/app: events \n    myevents/tier: database \n  ports: \n  - port: 27017 \n    name: mongo \n```", "```go\n$ eval $(minikube docker-env) \n$ docker image build -t myevents/eventservice .\n```", "```go\n$ kubectl create secret docker-registry my-private-registry \\\n --docker-server https://index.docker.io/v1/ \\\n --docker-username <your-username> \\\n --docker-password <your-password> \\\n --docker-email <your-email>\n```", "```go\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example-from-private-registry\nspec:\n  containers:\n  - name: secret\n    image: quay.io/martins-private-registry/secret-application:v1.2.3\n  imagePullSecrets:\n  - name: my-private-registry\n```", "```go\napiVersion: apps/v1beta1 \nkind: Deployment \nmetadata: \n  name: eventservice \nspec: \n  replicas: 2 \n  template: \n    metadata: \n      labels: \n        myevents/app: events \n        myevents/tier: api \n    spec: \n      containers: \n      - name: api \n        image: myevents/eventservice \n        imagePullPolicy: Never \n        ports: \n        - containerPort: 8181 \n          name: http \n        environment: \n        - name: MONGO_URL \n          value: mongodb://events-db/events \n        - name: AMQP_BROKER_URL \n          value: amqp://guest:guest@amqp-broker:5672/ \n```", "```go\napiVersion: v1 \nkind: Service \nmetadata: \n  name: events \nspec: \n  selector: \n    myevents/app: events \n    myevents/tier: api \n  ports: \n  - port: 80 \n    targetPort: 8181 \n    name: http \n```", "```go\napiVersion: apps/v1beta1 \nkind: Deployment \nmetadata: \n  name: frontend \nspec: \n  replicas: 2 \n  template: \n    metadata: \n      labels: \n        myevents/app: frontend \n    spec: \n      containers: \n      - name: frontend \n        image: myevents/frontend \n        imagePullPolicy: Never \n        ports: \n        - containerPort: 80 \n          name: http \n```", "```go\napiVersion: v1 \nkind: Service \nmetadata: \n  name: frontend \nspec: \n  selector: \n    myevents/app: frontend \n  ports: \n  - port: 80 \n    targetPort: 80 \n    name: http \n```", "```go\napiVersion: v1 \nkind: Service \nmetadata: \n  name: frontend \nspec: \n  type: LoadBalancer \n  selector: \n    myevents/app: frontend \n  # ... \n```", "```go\n$ minikube addons enable ingress \n```", "```go\napiVersions: extensions/v1beta1 \nkind: Ingress \nmetadata: \n  name: myevents \nspec: \n  rules: \n  - host: api.myevents.example \n    http: \n      paths: \n      - path: /events \n        backend: \n          serviceName: events \n          servicePort: 80 \n      - path: /bookings \n        backend: \n          serviceName: bookings \n          servicePort: 80 \n  - host: www.myevents.example \n    http: \n      paths: \n      - backend: \n          serviceName: frontend \n          servicePort: 80 \n```", "```go\n192.168.99.100 api.myevents.example \n192.168.99.100 www.myevents.example\n```"]