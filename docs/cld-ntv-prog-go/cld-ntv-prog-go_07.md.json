["```go\ngo get -u github.com/aws/aws-sdk-go/...\n```", "```go\n[default]\naws_access_key_id = <YOUR_DEFAULT_ACCESS_KEY_ID>\naws_secret_access_key = <YOUR_DEFAULT_SECRET_ACCESS_KEY>\n\n[test-account]\naws_access_key_id = <YOUR_TEST_ACCESS_KEY_ID>\naws_secret_access_key = <YOUR_TEST_SECRET_ACCESS_KEY>\n\n[prod-account]\n; work profile\naws_access_key_id = <YOUR_PROD_ACCESS_KEY_ID>\naws_secret_access_key = <YOUR_PROD_SECRET_ACCESS_KEY>\n```", "```go\n$ AWS_PROFILE=test-account testAWSapp\n```", "```go\nsession, err := session.NewSession()\n```", "```go\nsession, err := session.NewSession(&aws.Config{\n    Region: aws.String(\"us-east-2\"),\n})\n```", "```go\nsession,err := session.NewSessionWithOptions(session.Options{\n   Profile: \"test-account\",\n})\n```", "```go\n//Don't forget to import github.com/aws/aws-sdk-go/service/s3\n\n sess, err := session.NewSession(&aws.Config{\n    Region: aws.String(\"us-west-1\"),\n  })\n  if err != nil {\n    log.Fatal(err)\n  }\n  s3Svc := s3.New(sess)\n  results, err := s3Svc.ListBuckets(nil)\n  if err != nil {\n    log.Fatal(\"Unable to get bucket list\")\n  }\n\n  fmt.Println(\"Buckets:\")\n  for _, b := range results.Buckets {\n    log.Printf(\"Bucket: %s \\n\", aws.StringValue(b.Name))\n  }\n```", "```go\nfunc IntValue(v *int) int {\n  if v != nil {\n    return *v\n  }\n  return 0\n}\n```", "```go\n[default]\nregion=us-west-2\n```", "```go\nsess, err := session.NewSessionWithOptions(session.Options{\n    SharedConfigState: SharedConfigEnable,\n})\n```", "```go\nfunc(*ListObjectsOutput, bool) bool\n```", "```go\nsvc, err := s3.NewSession(sess)\nif err != nil {\n    fmt.Println(\"Error creating session \", err)\n}\ninputparams := &s3.ListObjectsInput{\n    Bucket: aws.String(\"mybucket\"),\n    MaxKeys: aws.Int64(10),\n}\npageNum := 0\nsvc.ListObjectsPages(inputparams, func(page *s3.ListObjectsOutput, lastPage bool) bool {\n    pageNum++\n    for _, value := range page.Contents {\n        fmt.Println(*value.Key)\n    }\n    return pageNum < 3\n})\n```", "```go\n    result, err := dynamodbsvc.GetItem(&dynamodb.GetItemInput{\n      Key: map[string]*dynamodb.AttributeValue{\n        \"ID\": {\n          N: aws.String(\"9485\"),\n        },\n      },\n      TableName: aws.String(\"bla\"),\n    })\n    if err != nil {\n      if v, ok := err.(awserr.Error); ok {\n        log.Println(\"AWS ERROR...\")\n        if v.Code() == dynamodb.ErrCodeResourceNotFoundException {\n          log.Println(\"Requested resource was not found...\")\n          return\n        }\n      }\n    }\n```", "```go\n    if err != nil {\n      if v, ok := err.(awserr.Error); ok {\n        log.Println(\"AWS ERROR...\")\n        if v.Code() == dynamodb.ErrCodeResourceNotFoundException {\n          log.Println(\"Requested resource was not found...\")\n          return\n        }\n      }\n    }\n```", "```go\nchmod 400 my-super-secret-key-pair.pem\n```", "```go\nssh -i \"my-super-secret-key-pair.pem\" ec2-user@ec2-54-193-5-28.us-west-1.compute.amazonaws.com\n```"]