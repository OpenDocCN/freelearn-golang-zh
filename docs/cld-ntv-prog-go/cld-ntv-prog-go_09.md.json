["```go\n$ git init . \n```", "```go\n/eventservice/eventservice \n/bookingservice/bookingservice \n```", "```go\n$ git add . \n$ git commit -m \"Initial commit\" \n```", "```go\n$ git remote add origin ssh://git@github.com/<user>/myevents.git \n$ git push origin master \n```", "```go\n$ curl https://glide.sh/get | sh \n```", "```go\n$ cp $GOPATH/bin/glide /usr/local/bin/glide \n```", "```go\n$ glide init . \n```", "```go\npackage: todo.com/myevents \nimport: \n- package: github.com/Shopify/sarama \n  version: ^1.11.0 \n- package: github.com/aws/aws-sdk-go \n  version: ^1.8.17 \n  subpackages: \n  - service/dynamodb \n- package: github.com/gorilla/handlers \n  version: ^1.2.0 \n# ... \n```", "```go\n$ git add vendor \n$ git commit -m\"Add dependencies\" \n$ git push \n```", "```go\n$ git add node_modules \n$ git commit -m \"Add dependencies\" \n$ git push \n```", "```go\nlanguage: go \ngo: \n  - 1.6 \n  - 1.7 \n  - 1.8 \n - 1.9\nenv: \n  - CGO_ENABLED=0 \n\ninstall: true \nscript: \n  - go build \n```", "```go\ninstall: \n  - go get -v github.com/Masterminds/glide \n  - glide install \n```", "```go\nscripts: \n  - go vet $(go list ./... | grep -v vendor)\n - cd eventservice && go build \n  - cd bookingservice && go build \n```", "```go\n$ git add .travis.yml \n$ git commit -m \"Configure Travis CI\" \n$ git push \n```", "```go\nsudo: required \nservices: \n  - docker \nlanguage: go \ngo: \n  - 1.9 \n```", "```go\nsudo: required \nservices: \n  - docker \nlanguage: go \ngo: 1.9 \nenv: \n  global: \n    - CGO_ENABLED=0 \n  matrix: \n    - SERVICE=eventservice \n    - SERVICE=bookingservice\n install: true \nscript: \n  - go vet $(go list ./... | grep -v vendor) \n  - cd $SERVICE && go build \n```", "```go\nscript: \n  - go vet $(go list ./... | grep -v vendor) \n  - cd $SERVICE && go build \n  - docker image build -t myevents/$SERVICE:$TRAVIS_BRANCH $SERVICE \n```", "```go\nafter_success: \n  - if [ -n \"${TRAVIS_TAG}\" ] ; then \n      docker login -u=\"${DOCKER_USERNAME}\" -p=\"${DOCKER_PASSWORD}\"; \n      docker push myevents/$SERVICE:$TRAVIS_BRANCH; \n    fi \n```", "```go\n$ gem install travis\n```", "```go\n$ travis encrypt DOCKER_PASSWORD=\"my-super-secret-password\" --add\n```", "```go\n...\nenv:\n global:\n - secure: <encrypted value>\n```", "```go\n$ git tag v1.0.0 \n$ git push --tags \n```", "```go\nlanguage: node_js \nnode_js: \n  - 6 \nenv: \n  - SERVICE=frontend \ninstall: \n  - npm install -g webpack typescript \n  - npm install \nscript: \n  - webpack \nafter_success: \n  - if [ -n \"${TRAVIS_TAG}\" ] ; then \n    docker login -u=\"${DOCKER_USERNAME}\" -p=\"${DOCKER_PASSWORD}\"; \n    docker push myevents/${SERVICE}:${TRAVIS_BRANCH}; \n    fi \n```", "```go\n$ kubectl create serviceaccount travis-ci \n```", "```go\n$ kubectl describe serviceaccount travis-ci \nName:        travis-ci \nNamespace:   default \nLabels:      <none> \nAnnotations: <none> \n\nImage pull secrets: <none> \nMountable secrets:  travis-ci-token-mtxrh \nTokens:             travis-ci-token-mtxrh \n```", "```go\n$ kubectl get secret travis-ci-token-mtxrh -o=yaml \napiVersion: v1 \nkind: Secret \ndata: \n  ca.crt: ... \n  namespace: ZGVmYXVsdA== \n  token: ... \n# ... \n```", "```go\n$ echo \"<token from above>\" | base64 --decode \n$ echo \"<ca.crt from above>\" | base64 --decode \n```", "```go\ninstall: \n  - curl -LO https://storage.googleapis.com/kubernetes- \nrelease/release/v1.6.1/bin/linux/amd64/kubectl && chmod +x kubectl \n  - echo \"${KUBE_CA_CERT}\" > ./ca.crt \n  - ./kubectl config set-credentials travis-ci --token=\"${KUBE_TOKEN}\" \n  - ./kubectl config set-cluster your-cluster --server=https://your-kubernetes-cluster --certificate-authority=ca.crt \n  - ./kubectl config set-context your-cluster --cluster=your-cluster --user=travis-ci --namespace=default \n  - ./kubectl config use-context your-cluster \n```", "```go\nafter_success: \n  - if [ -n \"${TRAVIS_TAG}\" ] ; then \n    docker login -u=\"${DOCKER_USERNAME}\" -p=\"${DOCKER_PASSWORD}\"; \n    docker push myevents/${SERVICE}:$TRAVIS_BRANCH; \n    ./kubectl set image deployment/${SERVICE} api=myevents/${SERVICE}:${TRAVIS_BRANCH}; \n    fi \n```", "```go\n$ docker container run --detach \\\n  -e GITLAB_OMNIBUS_CONFIG=\"external_url 'http://192.168.2.125/';\" \\\n  --name gitlab \\\n  -p 80:80 \\\n  -p 22:22 \\\n  gitlab/gitlab-ce:9.1.1-ce.0\n```", "```go\n$ docker volume create gitlab-config\n$ docker volume create gitlab-data\n```", "```go\n$ git remote add gitlab ssh://git@localhost/root/myevents.git \n$ git push gitlab master:master \n```", "```go\n$ docker container run --detach \\ \n    --name gitlab-runner \\ \n    --link gitlab:gitlab \\ \n    -v /var/run/docker.sock:/var/run/docker.sock \\ \n    gitlab/gitlab-runner:v1.11.4 \n```", "```go\n$ docker container exec \\ \n    -it gitlab-runner \\ \n    gitlab-runner register -n \\ \n      --url http://gitlab \\ \n      --registration-token <TOKEN> \\ \n      --executor docker \\ \n      --docker-image ubuntu:16.04 \\ \n      --docker-volumes /var/run/docker.sock:/var/run/docker.sock \\\n      --description \"Gitlab CI Runner\" \n```", "```go\nbuild:eventservice: \n  image: golang:1.9.2 \n  stage: build \n  before_script: \n    - mkdir -p $GOPATH/src/todo.com \n    - ln -nfs $PWD $GOPATH/src/todo.com/myevents \n    - cd $GOPATH/src/todo.com/myevents/eventservice \n  script: \n    - CGO_ENABLED=0 go build \n  artifacts: \n    paths: \n      - ./eventservice/eventservice \n```", "```go\n$ git add .gitlab-ci.yml \n$ git commit -m \"Configure GitLab CI\" \n$ git push gitlab \n```", "```go\nbuild:eventservice: # ... \n\nbuild:bookingservice: \n  image: golang:1.9.2 \n  stage: build \n  before_script: \n    - mkdir -p $GOPATH/src/todo.com \n    - ln -nfs $PWD $GOPATH/src/todo.com/myevents \n    - cd $GOPATH/src/todo.com/myevents/bookingservice \n  script: \n    - CGO_ENABLED=0 go build \n  artifacts: \n    paths: \n      - ./bookingservice/bookingservice \n```", "```go\nstages: \n  - build \n  - dockerbuild \n  - publish \n  - deploy \n\nbuild:eventservice: # ... \n```", "```go\ndockerbuild:eventservice: \n  image: docker:17.04.0-ce \n  stage: dockerbuild \n  dependencies: \n    - build:eventservice \n  script: \n    - docker container build -t myevents/eventservice:$CI_COMMIT_REF_NAME eventservice \n  only: \n    - tags \n```", "```go\ndockerbuild:bookingservice: \n  image: docker:17.04.0-ce \n  stage: dockerbuild \n  dependencies: \n    - build:bookingservice \n  script: \n    - docker container build -t myevents/bookingservice:$CI_COMMIT_REF_NAME bookingservice \n  only: \n    - tags \n```", "```go\n$ git add .gitlab-ci.yml \n$ git commit -m\"Configure Docker builds\" \n$ git push gitlab \n\n$ git tag v1.0.1 \n$ git push gitlab --tags \n```", "```go\npublish: \n  image: docker:17.04.0-ce \n  stage: publish \n  dependencies: \n    - dockerbuild:eventservice \n    - dockerbuild:bookingservice \n  before_script: \n    - docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD} \n  script: \n    - docker push myevents/eventservice:${CI_COMMIT_REF_NAME} \n    - docker push myevents/bookingservice:${CI_COMMIT_REF_NAME} \n  only: \n    - tags \n```", "```go\ndeploy: \n  image: alpine:3.5 \n  stage: deploy \n  environment: production \n  before_script: \n    - apk add --update openssl \n    - wget -O /usr/local/bin/kubectl https://storage.googleapis.com/kubernetes- \nrelease/release/v1.6.1/bin/linux/amd64/kubectl && chmod +x /usr/local/bin/kubectl \n    - echo \"${KUBE_CA_CERT}\" > ./ca.crt \n    - kubectl config set-credentials gitlab-ci --token=\"${KUBE_TOKEN}\" \n    - kubectl config set-cluster your-cluster --server=https://your-kubernetes-cluster.example --certificate-authority=ca.crt \n    - kubectl config set-context your-cluster --cluster=your-cluster --user=gitlab-ci --namespace=default \n    - kubectl config use-context your-cluster \n  script: \n    - kubectl set image deployment/eventservice api=myevents/eventservice:${CI_COMMIT_REF_NAME} \n    - kubectl set image deployment/bookingservice api=myevents/eventservice:${CI_COMMIT_REF_NAME} \n  only: \n    - tags \n```"]