["```go\nmemory_consumption_bytes 6168432 \nhttp_requests_count{path=\"/events\",method=\"get\"} 241 \nhttp_requests_count{path=\"/events\",method=\"post\"} 5 \nhttp_requests_count{path=\"/events/:id\",method=\"get\"} 125 \n```", "```go\nhttp_request_duration_seconds_bucket{le=\"0.1\"} 6835 \nhttp_request_duration_seconds_bucket{le=\"0.5\"} 79447 \nhttp_request_duration_seconds_bucket{le=\"1\"} 80700 \nhttp_request_duration_seconds_bucket{le=\"+Inf\"} 80953 \nhttp_request_duration_seconds_sum 46135 \nhttp_request_duration_seconds_count 80953 \n```", "```go\nglobal: \n  scrape_interval: 15s \n\nscrape_configs: \n  - job_name: prometheus \n    static_configs: \n      - targets: [\"localhost:9090\"] \n```", "```go\n$ docker network create monitoring \n```", "```go\n$ docker volume create prometheus-data \n```", "```go\n$ docker container run \\ \n    --name prometheus \\ \n    --network monitoring \\ \n    --network myevents \\ \n    -v $PWD/prometheus.yml:/etc/prometheus/prometheus.yml \n    -v prometheus-data:/prometheus \n    -p 9090:9090 \n    prom/prometheus:v1.6.1 \n```", "```go\nrate(process_cpu_seconds_total[1m]) \n```", "```go\n$ docker volume create grafana-data \n```", "```go\n$ docker container run \\ \n    -v grafana-data \\ \n    -p 3000:3000 \\ \n    --name grafana \\ \n    --network monitoring \\ \n    grafana/grafana:4.2.0 \n```", "```go\n$ go get -u github.com/prometheus/client_golang \n```", "```go\n$ glide get github.com/prometheus/client_golang \n$ glide update \n```", "```go\nimport \"net/http\" \nimport \"github.com/prometheus/client_golang/prometheus/promhttp\" \n// ... \n\nfunc main() { \n  // ... \n\n  go func() { \n    fmt.Println(\"Serving metrics API\") \n\n    h := http.NewServeMux() \n    h.Handle(\"/metrics\", promhttp.Handler()) \n\n    http.ListenAndServe(\":9100\", h) \n  }() \n\n  fmt.Println(\"Serving API\") \n  // ... \n} \n```", "```go\nglobal: \n  scrape_interval: 15s \n\nscrape_configs: \n  - job_name: prometheus \n    static_configs: \n      - targets: [\"localhost:9090\"] \n  - job_name: eventservice \n    static_configs: \n      - targets: [\"events:9090\"] \n  - job_name: bookingservice \n    static_configs: \n      - targets: [\"bookings:9090\"] \n```", "```go\npackage rest \n\nimport \"github.com/prometheus/client_golang/prometheus\" \n\nvar bookingCount = prometheus.NewCounterVec( \n  prometheus.CounterOpts{ \n    Name:      \"bookings_count\", \n    Namespace: \"myevents\", \n    Help:      \"Amount of booked tickets\", \n  }, \n  []string{\"eventID\", \"eventName\"}, \n) \n\nfunc init() { \n  prometheus.MustRegister(bookingCount) \n} \n```", "```go\nmyevents_bookings_count{eventID=\"507...\",eventName=\"Foo\"} 251 \nmyevents_bookings_count{eventID=\"508...\",eventName=\"Bar} 51 \n```", "```go\nvar seatsPerBooking = prometheus.NewHistogram( \n  prometheus.HistogramOpts{ \n    Name: \"seats_per_booking\", \n    Namespace: \"myevents\", \n    Help: \"Amount of seats per booking\", \n    Buckets: []float64{1,2,3,4} \n  } \n) \n\nfunc init() { \n  prometheus.MustRegister(bookingCount) \n  prometheus.MustRegister(seatsPerBooking) \n} \n```", "```go\nmyevents_seats_per_booking_bucket{le=\"1\"} 1 \nmyevents_seats_per_booking_bucket{le=\"2\"} 8 \nmyevents_seats_per_booking_bucket{le=\"3\"} 18 \nmyevents_seats_per_booking_bucket{le=\"4\"} 20 \nmyevents_seats_per_booking_bucket{le=\"+Inf\"} 22 \nmyevents_seats_per_booking_sum 72 \nmyevents_seats_per_booking_count 22 \n```", "```go\nh.eventEmitter.emit(&msg) \n\nbookingCount. \n  WithLabelValues(eventID, event.Name). \n  Add(float64(request.Seats)) \nseatsPerBooking. \n  Observe(float64(bookingRequest.Seats)) \n\nh.database.AddBookingForUser(\n   // ... \n```", "```go\nmyevents_bookings_count{eventName=\"Foo\",job=\"bookingservice-0\"} 1 \nmyevents_bookings_count{eventName=\"Foo\",job=\"bookingservice-1\"} 3 \nmyevents_bookings_count{eventName=\"Bar\",job=\"bookingservice-0\"} 2 \nmyevents_bookings_count{eventName=\"Bar\",job=\"bookingservice-1\"} 1 \n```", "```go\nsum(myevents_bookings_count) by (eventName) \n```", "```go\napiVersion: v1 \nkind: ConfigMap \nname: prometheus-config \ndata: \n  prometheus.yml: | \n    global: \n      scrape_config: 15s \n\n    scrape_configs: \n    - job_name: prometheus \n      static_configs: \n      - targets: [\"localhost:9090\"] \n```", "```go\napiVersion: apps/v1beta1 \nkind: StatefulSet \nmetadata: \n  name: prometheus \nspec: \n  serviceName: prometheus \n  replicas: 1 \n  template: \n    metadata: \n      labels: \n        app: prometheus \n    spec: \n      containers: \n      - name: prometheus \n        image: prom/prometheus:v1.6.1 \n        ports: \n        - containerPort: 9090 \n          name: http \n        volumeMounts: \n        - name: data \n          mountPath: /prometheus \n        - name: config \n          mountPath: /etc/prometheus \n      volumes: \n      - name: config \n        configMap: \n          name: prometheus-config \n  volumeClaimTemplates: \n  - metadata: \n      name: data \n      annotations: \n        volume.alpha.kubernetes.io/storage-class: standard \n    spec: \n      accessModes: [\"ReadWriteOnce\"] \n      resources: \n        requests: \n          storage: 5Gi \n```", "```go\napiVersion: v1 \nkind: Service \nmetadata: \n  name: prometheus \nspec: \n  clusterIP: None \n  selector: \n    app: prometheus \n  ports: \n  - port: 9090 \n    name: http \n```", "```go\nscrape_configs: \n  # ... \n  - job_name: kubernetes-pods \n    kubernetes_sd_configs: \n    - role: pod \n  relabel_configs: \n  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape] \n    action: keep \n    regex: true \n  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path] \n    action: replace \n    target_label: __metrics_path__ \n    regex: (.+) \n  - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port] \n    action: replace \n    regex: ([^:]+)(?::\\d+)?;(\\d+) \n    replacement: $1:$2 \n    target_label: __address__ \n  - action: labelmap \n    regex: __meta_kubernetes_pod_label_(.+) \n  - source_labels: [__meta_kubernetes_namespace] \n    action: replace \n    target_label: kubernetes_namespace \n  - source_labels: [__meta_kubernetes_pod_name] \n    action: replace \n    target_label: kubernetes_pod_name \n```", "```go\n$ kubectl delete pod -l app=prometheus \n```", "```go\napiVersion: apps/v1beta1 \nkind: Deployment \nmetadata: \n  name: eventservice \nspec: \n  replicas: 2 \n  template: \n    metadata: \n      labels: \n        myevents/app: events \n        myevents/tier: api \n      annotations: \n        prometheus.io/scrape: true \n        prometheus.io/port: 9100 \n    spec: \n      containers: \n      - name: api \n        image: myevents/eventservice \n        imagePullPolicy: Never \n        ports: \n        - containerPort: 8181 \n          name: http \n        - containerPort: 9100 \n          name: metrics \n        # ... \n```"]