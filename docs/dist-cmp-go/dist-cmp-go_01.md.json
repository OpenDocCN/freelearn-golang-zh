["```go\n$ tree $GOPATH/pkg\npkg\n\u2514\u2500\u2500 linux_amd64\n \u251c\u2500\u2500 github.com\n \u2502 \u251c\u2500\u2500 abbot\n \u2502 \u2502 \u2514\u2500\u2500 go-http-auth.a\n \u2502 \u251c\u2500\u2500 dimfeld\n \u2502 \u2502 \u2514\u2500\u2500 httppath.a\n \u2502 \u251c\u2500\u2500 oklog\n \u2502 \u2502 \u2514\u2500\u2500 ulid.a\n \u2502 \u251c\u2500\u2500 rcrowley\n \u2502 \u2502 \u2514\u2500\u2500 go-metrics.a\n \u2502 \u251c\u2500\u2500 sirupsen\n \u2502 \u2502 \u2514\u2500\u2500 logrus.a\n \u2502 \u251c\u2500\u2500 sony\n \u2502 \u2502 \u2514\u2500\u2500 gobreaker.a\n \u2514\u2500\u2500 golang.org\n \u2514\u2500\u2500 x\n \u251c\u2500\u2500 crypto\n \u2502 \u251c\u2500\u2500 bcrypt.a\n \u2502 \u251c\u2500\u2500 blowfish.a\n \u2502 \u2514\u2500\u2500 ssh\n \u2502 \u2514\u2500\u2500 terminal.a\n \u251c\u2500\u2500 net\n \u2502 \u2514\u2500\u2500 context.a\n \u2514\u2500\u2500 sys  \n```", "```go\n$ go get git-server.com/user-name/library-we-need\n```", "```go\n$ curl https://glide.sh/get | sh\n$ mkdir new-project && cd new-project\n$ glide create\n$ glide get github.com/last-ent/skelgor # A helper project to generate project skeleton.\n$ glide install # In case any dependencies or configuration were manually added.\n$ glide up # Update dependencies to latest versions of the package.\n$ tree\n.\n\u251c\u2500\u2500 glide.lock\n\u251c\u2500\u2500 glide.yaml\n\u2514\u2500\u2500 vendor\n \u2514\u2500\u2500 github.com\n \u2514\u2500\u2500 last-ent\n \u2514\u2500\u2500 skelgor\n \u251c\u2500\u2500 LICENSE\n \u251c\u2500\u2500 main.go\n \u2514\u2500\u2500 README.md  \n```", "```go\n$ tree\n.\n\u251c\u2500\u2500 common\n\u2502 \u251c\u2500\u2500 helpers.go\n\u2502 \u2514\u2500\u2500 test_helpers.go\n\u2514\u2500\u2500 main.go\n```", "```go\n$ docker --version\nDocker version 17.12.0-ce, build c97c6d6\n```", "```go\n$ docker info\nContainers: 38\n Running: 0\n Paused: 0\n Stopped: 38\nImages: 24\nServer Version: 17.12.0-ce \n```", "```go\n$ docker run docker/whalesay cowsay Welcome to GopherLand!  \n\nUnable to find image 'docker/whalesay:latest' locally\nTrying to pull repository docker.io/docker/whalesay ...\nsha256:178598e51a26abbc958b8a2e48825c90bc22e641de3d31e18aaf55f3258ba93b: Pulling from docker.io/docker/whalesay\ne190868d63f8: Pull complete\n909cd34c6fd7: Pull complete\n0b9bfabab7c1: Pull complete\na3ed95caeb02: Pull complete\n00bf65475aba: Pull complete\nc57b6bcc83e3: Pull complete\n8978f6879e2f: Pull complete\n8eed3712d2cf: Pull complete\nDigest: sha256:178598e51a26abbc958b8a2e48825c90bc22e641de3d31e18aaf55f3258ba93b\nStatus: Downloaded newer image for docker.io/docker/whalesay:latest\n ________________________\n< Welcome to GopherLand! >\n ------------------------\n    \\\n     \\\n    \\ \n     ## .\n     ## ## ## ==\n     ## ## ## ## ===\n     /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"___/ ===\n  ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ / ===- ~~~\n     \\______ o __/\n    \\ __/\n     \\__________/\n\n```", "```go\n$ docker pull docker/whalesay & docker run docker/whalesay cowsay Welcome to GopherLand!\n```", "```go\n$ docker images\nREPOSITORY TAG IMAGE ID CREATED SIZE\ndocker.io/docker/whalesay latest 6b362a9f73eb 2 years ago 247 MB\n$ docker container ls --all \nCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES \na1b1efb42130 docker/whalesay \"cowsay Welcome to...\" 5 minutes ago Exited (0) 5 minutes ago frosty_varahamihira \n\n```", "```go\n$ docker rmi --force 'docker images -q -f dangling=true'\n# list of hashes for all deleted images.\n```", "```go\nFROM golang:1.10\n# The base image we want to use to build our docker image from. \n# Since this image is specialized for golang it will have GOPATH = /go \n\nADD . /go/src/hello\n# We copy files & folders from our system onto the docker image \n\nRUN go install hello \n# Next we can create an executable binary for our project with the command,\n'go install' ENV NAME Bob\n# Environment variable NAME will be picked up by the program 'hello' \nand printed to console.ENTRYPOINT /go/bin/hello\n# Command to execute when we start the container # EXPOSE 9000 # Generally used for network applications. Allows us to connect to the\napplication running inside the container from host system's localhost. \n```", "```go\npackage main \n\nimport ( \n    \"fmt\" \n    \"os\" \n) \n\nfunc main() { \n    fmt.Println(os.Getenv(\"NAME\") + \" is your uncle.\") \n} \n```", "```go\n$ cd docker\n$ tree\n.\n\u251c\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 main.go\"\n0 directories, 2 files $ # -t tag lets us name our docker images so that we can easily refer to them $ docker build . -t hello-uncle Sending build context to Docker daemon 3.072 kB Step 1/5 : FROM golang:1.9.1 ---> 99e596fc807e Step 2/5 : ADD . /go/src/hello ---> Using cache ---> 64d080d7eb39 Step 3/5 : RUN go install hello ---> Using cache ---> 13bd4a1f2a60 Step 4/5 : ENV NAME Bob ---> Using cache ---> cc432fe8ffb4 Step 5/5 : ENTRYPOINT /go/bin/hello ---> Using cache ---> e0bbfb1fe52b Successfully built e0bbfb1fe52b $ # Let's now try to run the docker image. $ docker run hello-uncle Bob is your uncle. $ # We can also change the environment variables on the fly. $ docker run -e NAME=Sam hello-uncle Sam is your uncle. \n```", "```go\n// variadic.go \n\npackage main \n\nfunc simpleVariadicToSlice(numbers ...int) []int { \n   return numbers \n} \n\nfunc mixedVariadicToSlice(name string, numbers ...int) (string, []int) { \n   return name, numbers \n} \n\n// Does not work. \n// func badVariadic(name ...string, numbers ...int) {} \n```", "```go\n// variadic_test.go \npackage main \n\nimport \"testing\" \n\nfunc TestSimpleVariadicToSlice(t *testing.T) { \n    // Test for no arguments \n    if val := simpleVariadicToSlice(); val != nil { \n        t.Error(\"value should be nil\", nil) \n    } else { \n        t.Log(\"simpleVariadicToSlice() -> nil\") \n    } \n\n    // Test for random set of values \n    vals := simpleVariadicToSlice(1, 2, 3) \n    expected := []int{1, 2, 3} \n    isErr := false \n    for i := 0; i < 3; i++ { \n        if vals[i] != expected[i] { \n            isErr = true \n            break \n        } \n    } \n    if isErr { \n        t.Error(\"value should be []int{1, 2, 3}\", vals) \n    } else { \n        t.Log(\"simpleVariadicToSlice(1, 2, 3) -> []int{1, 2, 3}\") \n    } \n\n    // Test for a slice \n    vals = simpleVariadicToSlice(expected...) \n    isErr = false \n    for i := 0; i < 3; i++ { \n        if vals[i] != expected[i] { \n            isErr = true \n            break \n        } \n    } \n    if isErr { \n        t.Error(\"value should be []int{1, 2, 3}\", vals) \n    } else { \n        t.Log(\"simpleVariadicToSlice([]int{1, 2, 3}...) -> []int{1, 2, 3}\") \n    } \n} \n\nfunc TestMixedVariadicToSlice(t *testing.T) { \n    // Test for simple argument & no variadic arguments \n    name, numbers := mixedVariadicToSlice(\"Bob\") \n    if name == \"Bob\" && numbers == nil { \n        t.Log(\"Recieved as expected: Bob, <nil slice>\") \n    } else { \n        t.Errorf(\"Received unexpected values: %s, %s\", name, numbers) \n    } \n} \n```", "```go\n$ go test -v ./{variadic_test.go,variadic.go} \n=== RUN TestSimpleVariadicToSlice \n--- PASS: TestSimpleVariadicToSlice (0.00s) \n variadic_test.go:10: simpleVariadicToSlice() -> nil \n variadic_test.go:26: simpleVariadicToSlice(1, 2, 3) -> []int{1, 2, 3} \n variadic_test.go:41: simpleVariadicToSlice([]int{1, 2, 3}...) -> []int{1, 2, 3} \n=== RUN TestMixedVariadicToSlice \n--- PASS: TestMixedVariadicToSlice (0.00s) \n variadic_test.go:49: Received as expected: Bob, <nil slice> \nPASS \nok command-line-arguments 0.001s   \n```", "```go\n// addInt.go \n\npackage main \n\nfunc addInt(numbers ...int) int { \n    sum := 0 \n    for _, num := range numbers { \n        sum += num \n    } \n    return sum \n} \n```", "```go\n// addInt_test.go \n\npackage main \n\nimport ( \n    \"testing\" \n) \n\nfunc TestAddInt(t *testing.T) { \n    testCases := []struct { \n        Name     string \n        Values   []int \n        Expected int \n    }{ \n        {\"addInt() -> 0\", []int{}, 0}, \n        {\"addInt([]int{10, 20, 100}) -> 130\", []int{10, 20, 100}, 130}, \n    } \n\n    for _, tc := range testCases { \n        t.Run(tc.Name, func(t *testing.T) { \n            sum := addInt(tc.Values...) \n            if sum != tc.Expected { \n                t.Errorf(\"%d != %d\", sum, tc.Expected) \n            } else { \n                t.Logf(\"%d == %d\", sum, tc.Expected) \n            } \n        }) \n    } \n} \n```", "```go\n$ go test -v ./{addInt.go,addInt_test.go} \n=== RUN TestAddInt \n=== RUN TestAddInt/addInt()_->_0 \n=== RUN TestAddInt/addInt([]int{10,_20,_100})_->_130 \n--- PASS: TestAddInt (0.00s) \n --- PASS: TestAddInt/addInt()_->_0 (0.00s) \n addInt_test.go:23: 0 == 0 \n --- PASS: TestAddInt/addInt([]int{10,_20,_100})_->_130 (0.00s) \n addInt_test.go:23: 130 == 130 \nPASS \nok command-line-arguments 0.001s   \n```", "```go\n// nil_test.go \n\npackage main \n\nimport ( \n    \"fmt\" \n    \"io/ioutil\" \n    \"net/http\" \n    \"net/http/httptest\" \n    \"testing\" \n) \n\nconst passMark = \"\\u2713\" \nconst failMark = \"\\u2717\" \n\nfunc assertResponseEqual(t *testing.T, expected string, actual string) { \n    t.Helper() // comment this line to see tests fail due to 'if expected != actual' \n    if expected != actual { \n        t.Errorf(\"%s != %s %s\", expected, actual, failMark) \n    } else { \n        t.Logf(\"%s == %s %s\", expected, actual, passMark) \n    } \n} \n\nfunc TestServer(t *testing.T) { \n    testServer := httptest.NewServer( \n        http.HandlerFunc( \n            func(w http.ResponseWriter, r *http.Request) { \n                path := r.RequestURI \n                if path == \"/1\" { \n                    w.Write([]byte(\"Got 1.\")) \n                } else { \n                    w.Write([]byte(\"Got None.\")) \n                } \n            })) \n    defer testServer.Close() \n\n    for _, testCase := range []struct { \n        Name     string \n        Path     string \n        Expected string \n    }{ \n        {\"Request correct URL\", \"/1\", \"Got 1.\"}, \n        {\"Request incorrect URL\", \"/12345\", \"Got None.\"}, \n    } { \n        t.Run(testCase.Name, func(t *testing.T) { \n            res, err := http.Get(testServer.URL + testCase.Path) \n            if err != nil { \n                t.Fatal(err) \n            } \n\n            actual, err := ioutil.ReadAll(res.Body) \n            res.Body.Close() \n            if err != nil { \n                t.Fatal(err) \n            } \n            assertResponseEqual(t, testCase.Expected, fmt.Sprintf(\"%s\", actual)) \n        }) \n    } \n    t.Run(\"Fail for no reason\", func(t *testing.T) {\n        assertResponseEqual(t, \"+\", \"-\")\n    })\n} \n```", "```go\n$ go test -v ./nil_test.go \n=== RUN TestServer \n=== RUN TestServer/Request_correct_URL \n=== RUN TestServer/Request_incorrect_URL \n=== RUN TestServer/Fail_for_no_reason \n--- FAIL: TestServer (0.00s) \n --- PASS: TestServer/Request_correct_URL (0.00s) \n nil_test.go:55: Got 1\\. == Got 1\\. ![](img/1a82adfd-2d48-47fe-8d7d-776e1ae5d133.png) \n --- PASS: TestServer/Request_incorrect_URL (0.00s) \n nil_test.go:55: Got None. == Got None. ![](img/1a82adfd-2d48-47fe-8d7d-776e1ae5d133.png)\n  --- FAIL: TestServer/Fail_for_no_reason (0.00s)   \n nil_test.go:59: + != - ![](img/5270c9e7-2a17-4ce4-bdd5-4b72eb407085.jpg)\n FAIL exit status 1 FAIL command-line-arguments 0.003s \n```"]