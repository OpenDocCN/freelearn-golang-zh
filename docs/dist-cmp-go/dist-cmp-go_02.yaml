- en: Understanding Goroutines
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Goroutines
- en: Software development and programming has advanced quite a lot in the past decade.
    Many concepts that were previously considered academic and inefficient are beginning
    to find a place among modern software solutions. Two such concepts are coroutines
    (goroutines in Go) and channels. Conceptually, they have evolved over time and
    they have been implemented differently in each programming language. In many programming
    languages such as Ruby or Clojure, they are implemented as libraries, but in Go,
    they are implemented within the language as a native feature. As we shall see,
    this makes the language really modern, quite efficient, and an advanced programming
    language.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的十年里，软件开发和编程已经取得了相当大的进步。许多以前被认为是学术和低效的概念开始在现代软件解决方案中找到位置。其中两个概念是协程（Go中的goroutines）和通道。从概念上讲，它们随着时间的推移而发展，并且它们在每种编程语言中的实现方式也不同。在许多编程语言中，比如Ruby或Clojure，它们被实现为库，但在Go中，它们作为一种本地特性在语言中实现。正如我们将看到的，这使得该语言真正现代化，相当高效，并且是一种先进的编程语言。
- en: 'In this chapter we will try to gain an understanding of Go by looking at goroutines
    and the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过查看goroutines和以下主题来尝试理解Go：
- en: Concurrency and parallelism
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并发和并行
- en: Go's runtime scheduler
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go的运行时调度程序
- en: Gotchas when using goroutines
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用goroutines时要注意的事项
- en: Concurrency and parallelism
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并发和并行
- en: Computer and software programs are useful because they do a lot of laborious
    work very fast and can also do multiple things at once. We want our programs to
    be able to do multiple things simultaneously, that is, multitask, and the success
    of a programming language can depend on how easy it is to write and understand
    multitasking programs.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机和软件程序很有用，因为它们可以快速完成大量繁重的工作，还可以同时做多件事情。我们希望我们的程序能够同时做多件事情，也就是说，多任务处理，编程语言的成功可能取决于编写和理解多任务处理程序的难易程度。
- en: Concurrency and parallelism are two terms that we are bound to come across often
    when looking into multitasking and they are often used interchangeably. However,
    they mean two distinctly different things.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 并发和并行是我们在研究多任务处理时经常遇到的两个术语，它们经常被互换使用。然而，它们意味着两个截然不同的事情。
- en: 'The standard definitions given on the Go blog ([https://blog.golang.org/concurrency-is-not-parallelism](https://blog.golang.org/concurrency-is-not-parallelism))
    are as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Go博客上给出的标准定义（[https://blog.golang.org/concurrency-is-not-parallelism](https://blog.golang.org/concurrency-is-not-parallelism)）如下：
- en: '**Concurrency**: *Concurrency is about dealing with lots of things at once*.
    This means that we manage to get multiple things done at once in a given period
    of time. However, we will only be doing a single thing at a time. This tends to
    happen in programs where one task is waiting and the program decides to run another
    task in the idle time. In the following diagram, this is denoted by running the
    yellow task in idle periods of the blue task.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并发性**：*并发性是指同时处理很多事情*。这意味着我们在一段时间内设法同时完成多项任务。但是，我们一次只做一件事。这往往发生在一个任务在等待时，程序决定在空闲时间运行另一个任务。在下图中，这是通过在蓝色任务的空闲时段运行黄色任务来表示的。'
- en: '**Parallelism**: *Parallelism is about doing lots of things at once*. This
    means that even if we have two tasks, they are continuously working without any
    breaks in between them. In the diagram, this is shown by the fact that the green
    task is running independently and is not influenced by the red task in any manner:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并行性**：*并行性是指同时做很多事情*。这意味着即使我们有两个任务，它们也在不间断地工作，没有任何间断。在图中，这表明绿色任务是独立运行的，并且不受红色任务的影响：'
- en: '![](img/66b44862-4bcb-4fcb-a816-4125f4fdf8ca.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/66b44862-4bcb-4fcb-a816-4125f4fdf8ca.png)'
- en: It is important to understand the difference between these two terms. Let's
    look at a few concrete examples to further elaborate upon the difference between
    the two.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解这两个术语之间的区别。让我们通过一些具体的例子来进一步阐述两者之间的区别。
- en: Concurrency
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 并发
- en: Let's look at the concept of concurrency using a simple example of a few daily
    routine tasks and the way we can perform them.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个简单的例子来看看并发的概念，以及我们如何执行一些日常例行任务。
- en: 'Imagine you start your day and need to get six things done:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你开始一天，需要完成六件事：
- en: Make hotel reservation
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预订酒店。
- en: Book flight tickets
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预订机票
- en: Order a dress
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订购一件连衣裙
- en: Pay credit card bills
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支付信用卡账单
- en: Write an email
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写电子邮件
- en: Listen to an audiobook
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 听有声读物
- en: 'The order in which they are completed doesn''t matter, and for some of the
    tasks, such as  writing an email or listening to an audiobook, you need not complete
    them in a single sitting. Here is one possible way to complete the tasks:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 完成它们的顺序并不重要，对于一些任务，比如写电子邮件或听有声读物，你不需要一次完成它们。以下是完成任务的一种可能方式：
- en: Order a dress.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 订购一件连衣裙。
- en: Write one-third of the email.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 写电子邮件的三分之一。
- en: Make hotel reservation.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 预订酒店。
- en: Listen to 10 minutes of audiobook.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 听10分钟的有声读物。
- en: Pay credit card bills.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支付信用卡账单。
- en: Write another one-third of the email.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 写电子邮件的另外三分之一。
- en: Book flight tickets.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 预订机票。
- en: Listen to another 20 minutes of audiobook.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 听20分钟的有声读物。
- en: Complete writing the email.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成写电子邮件。
- en: Continue listening to audiobook until you fall asleep.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续听有声读物直到入睡。
- en: In programming terms, we have executed the above tasks **concurrently**. We
    had a complete day and we chose particular tasks from our list of tasks and started
    to work on them. For certain tasks, we even decided to break them up into pieces
    and work on the pieces between other tasks.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程术语中，我们**同时**执行了上述任务。我们度过了一整天，从任务列表中选择了特定的任务，并开始处理它们。对于某些任务，我们甚至决定将它们分成几部分，在其他任务之间处理这些部分。
- en: 'We will eventually write a program which does all of the preceding steps concurrently,
    but let''s take it one step at a time. Let''s start by building a program that
    executes the tasks sequentially, and then modify it progressively until it is
    purely concurrent code and uses goroutines. The progression of the program will
    be in three steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最终我们将编写一个程序，以并发的方式执行所有前面的步骤，但让我们一步一步来。让我们首先构建一个按顺序执行任务的程序，然后逐渐修改它，直到它成为纯并发代码并使用goroutines。程序的进展将分为三个步骤：
- en: Serial task execution.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 串行任务执行。
- en: Serial task execution with goroutines.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用goroutines的串行任务执行。
- en: Concurrent task execution.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并发任务执行。
- en: Code overview
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 代码概述
- en: 'The code will consist of a set of functions that print out their assigned tasks
    as completed. In the cases of writing an email or listening to an audiobook, we
    further divide the tasks into more functions. This can be seen as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 代码将由一组打印出其分配任务的函数组成。在写电子邮件或听有声读物的情况下，我们进一步将任务细分为更多函数。具体如下：
- en: '`writeMail`, `continueWritingMail1`, `continueWritingMail2`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`writeMail`，`continueWritingMail1`，`continueWritingMail2`'
- en: '`listenToAudioBook`*,* `continueListeningToAudioBook`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`listenToAudioBook`，`continueListeningToAudioBook`'
- en: Serial task execution
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 串行任务执行
- en: 'Let''s first implement a program that will execute all the tasks in a linear
    manner. Based on the code overview we discussed previously, the following code
    should be straightforward:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先实现一个以线性方式执行所有任务的程序。根据我们之前讨论的代码概述，以下代码应该很简单：
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We take each of the main tasks and start executing them in simple sequential
    order. Executing the preceding code should produce unsurprising output, as shown
    here:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接受每个主要任务，并按简单的顺序开始执行它们。执行上述代码应该产生预期之外的输出，如下所示：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Serial task execution with goroutines
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用goroutines进行串行任务执行
- en: 'We took a list of tasks and wrote a program to execute them in a linear and
    sequential manner. However, we want to execute the tasks concurrently! Let''s
    start by first introducing goroutines for the split tasks and see how it goes.
    We will only show the code snippet where the code actually changed here:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们列出了一系列任务，并编写了一个程序以线性和顺序的方式执行它们。但是，我们希望同时执行这些任务！让我们首先为分割任务引入goroutines，看看效果如何。我们只会展示代码片段，其中代码实际上发生了变化：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following is a possible output:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可能的输出：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Whoops! That's not what we were expecting. The output from the `continueWritingMail1`,
    `continueWritingMail2`, and `continueListeningToAudioBook` functions is missing;
    the reason being that we are using goroutines. Since goroutines are not waited
    upon, the code in the `main` function continues executing and once the control
    flow reaches the end of the `main` function, the program ends. What we would really
    like to do is to wait in the `main` function until all the goroutines have finished
    executing. There are two ways we can do this—using channels or using `WaitGroup`.
    Since we have [Chapter 3](../Text/Ch03.xhtml), *Channels and Messages*, dedicated
    to channels, let's use `WaitGroup` in this section.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！这不是我们期望的。`continueWritingMail1`，`continueWritingMail2`和`continueListeningToAudioBook`函数的输出缺失；原因是我们使用了goroutines。由于goroutines没有等待，`main`函数中的代码继续执行，一旦控制流到达`main`函数的末尾，程序就会结束。我们真正想做的是在`main`函数中等待，直到所有goroutines都执行完毕。我们可以通过两种方式实现这一点——使用通道或使用`WaitGroup`。由于我们有[第3章](../Text/Ch03.xhtml)，*通道和消息*专门讨论通道，让我们在本节中使用`WaitGroup`。
- en: 'In order to use `WaitGroup`, we have to keep the following in mind:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用`WaitGroup`，我们必须记住以下几点：
- en: Use `WaitGroup.Add(int)` to keep count of how many goroutines we will be running
    as part of our logic.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`WaitGroup.Add(int)`来计算我们将作为逻辑的一部分运行多少goroutines。
- en: Use `WaitGroup.Done()` to signal that a goroutine is done with its task.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`WaitGroup.Done()`来表示goroutine完成了其任务。
- en: Use `WaitGroup.Wait()` to wait until all goroutines are done.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`WaitGroup.Wait()`来等待直到所有goroutines都完成。
- en: Pass `WaitGroup` instance to the goroutines so they can call the `Done()` method.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`WaitGroup`实例传递给goroutines，以便它们可以调用`Done()`方法。
- en: 'Based on these points, we should be able to modify the source code to use `WaitGroup`.
    The following is the updated code:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这些观点，我们应该能够修改源代码以使用`WaitGroup`。以下是更新后的代码：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here is one possible output order; notice how `continueWritingMail1` and `continueWritingMail2`
    were executed at the end after `listenToAudioBook` and `continueListeningToAudioBook`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一种可能的输出顺序；请注意`continueWritingMail1`和`continueWritingMail2`在`listenToAudioBook`和`continueListeningToAudioBook`之后执行：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Concurrent task execution
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 并发任务执行
- en: 'In the final output of the previous section, we can see that all the tasks
    in `listOfTasks` are being executed in serial order, and the last step for maximum
    concurrency would be to let the order be determined by Go runtime instead of the
    order in `listOfTasks`. This might sound like a laborious task, but in reality
    this is quite simple to achieve. All we need to do is add the `go` keyword in
    front of `task(&waitGroup)`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节的最终输出中，我们可以看到`listOfTasks`中的所有任务都是按顺序执行的，最大并发的最后一步是让顺序由Go运行时决定，而不是由`listOfTasks`中的顺序。这听起来可能是一项费力的任务，但实际上这是非常简单实现的。我们只需要在`task(&waitGroup)`前面加上`go`关键字：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Following is a possible output:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可能的输出：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If we look at this possible output, the tasks were executed in the following
    order:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看一下这种可能的输出，任务是按以下顺序执行的：
- en: Listen to audiobook.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 听有声读物。
- en: Book flight tickets.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 预订机票。
- en: Order a dress.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 订购一件连衣裙。
- en: Pay credit card bills.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支付信用卡账单。
- en: Write an email.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 写一封电子邮件。
- en: Make hotel reservations.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 预订酒店。
- en: Now that we have a good idea on what concurrency is and how to write concurrent
    code using `goroutines` and `WaitGroup`, let's dive into parallelism.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对并发是什么以及如何使用`goroutines`和`WaitGroup`编写并发代码有了一个很好的了解，让我们深入了解并行性。
- en: Parallelism
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 并行性
- en: 'Imagine that you have to write a few emails. They are going to be long and
    laborious, and the best way to keep yourself entertained is to listen to music
    while writing them, that is, listening to music "in parallel" to writing the emails.
    If we wanted to write a program that simulates this scenario, the following is
    one possible implementation:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你需要写几封电子邮件。它们将会很长、很费力，而让自己保持愉快的最好方法是在写邮件的同时听音乐，也就是说，在“并行”写邮件的同时听音乐。如果我们想编写一个模拟这种情况的程序，以下是一种可能的实现：
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output of the program might be as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的输出可能如下：
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The numbers represent the time in terms of `Hour:Minutes:Seconds` and, as can
    be seen, they are being executed in parallel. You might have noticed that the
    code for parallelism looks almost identical to the code for the final concurrency
    example. However, in the function `listenForever`, we are printing `Listening...`
    in an infinite loop. If the preceding example was written without goroutines,
    the output would keep printing `Listening...` and never reach the `writeMail`
    function calls.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 数字代表时间，以`小时:分钟:秒`表示，可以看到它们是并行执行的。您可能已经注意到，并行代码看起来几乎与最终并发示例的代码相同。然而，在`listenForever`函数中，我们在一个无限循环中打印`Listening...`。如果前面的示例没有使用协程编写，输出将继续打印`Listening...`，永远不会到达`writeMail`函数调用。
- en: Now that we understand how goroutine can be used to run concurrent programs,
    let's look at how Go is allowing us to do this. We shall next look at the scheduler
    used by Go runtime.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了如何使用协程来运行并发程序，让我们看看Go是如何允许我们做到这一点的。接下来我们将看一下Go运行时使用的调度器。
- en: Go's runtime scheduler
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Go的运行时调度器
- en: The Go program, along with the runtime, is managed and executed on multiple
    OS threads. The runtime uses a scheduler strategy known as **M:N** scheduler,
    which will schedule M number of goroutines on N number of OS threads. As a result,
    whenever we need to run or switch to a different goroutine, the context switching
    will be fast, and this also enables us to use multiple cores of the CPU for parallel
    computing.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Go程序连同运行时在多个OS线程上进行管理和执行。运行时使用一种称为**M:N**调度器的调度策略，它将M个协程调度到N个OS线程上。因此，每当我们需要运行或切换到不同的协程时，上下文切换将会很快，这也使我们能够利用CPU的多个核进行并行计算。
- en: A solid understanding of Go's runtime and scheduler would be quite interesting
    and useful, and now would be a good time to look at them in detail.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对Go的运行时和调度器有一个扎实的理解会非常有趣和有用，现在是一个详细了解它们的好时机。
- en: 'From the Go scheduler''s perspective, there are primarily three entities:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 从Go调度器的角度来看，主要有三个实体：
- en: Goroutine (G)
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协程（G）
- en: OS thread or machine (M)
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OS线程或机器（M）
- en: Context or processor (P)
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上下文或处理器（P）
- en: Let's look at what they do. We will also be looking the partial struct definitions
    of these entities to provide a better idea of how scheduling is implemented and
    how it works.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它们做了什么。我们还将查看这些实体的部分结构定义，以便更好地了解调度是如何实现和运行的。
- en: Goroutine
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 协程
- en: 'It is the logical unit of execution that contains the actual instructions for
    our program/functions to run. It also contains other important information regarding
    the goroutine, such as the stack memory, which machine (M) it is running on, and
    which Go function called it. The following are some of the elements in the goroutine
    struct that might come in handy for this section:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 它是包含程序/函数实际指令的逻辑执行单元。它还包含有关协程的其他重要信息，例如堆栈内存、它正在运行的机器（M）以及调用它的Go函数。以下是协程结构中可能有用的一些元素：
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: An interesting thing to know is that when our Go program starts, a goroutine
    called main goroutine is first launched, and it takes care of setting up the runtime
    space before starting our program. A typical runtime setup might include things
    such as maximum stack size, enabling garbage collector, and so on.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣的事情是，当我们的Go程序启动时，首先启动一个名为主协程的协程，它负责在启动我们的程序之前设置运行时空间。典型的运行时设置可能包括最大堆栈大小、启用垃圾回收等。
- en: OS thread or machine
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OS线程或机器
- en: 'Initially, the OS threads or machines are created by and managed by the OS.
    Later on, the scheduler can request for more OS threads or machines to be created
    or destroyed. It is the actual resource upon which a goroutine will be executed.
    It also maintains information about the main goroutine, the G currently being
    run on it, **thread local storage** (**tls**), and so on:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，OS线程或机器由OS创建和管理。随后，调度器可以请求创建或销毁更多的OS线程或机器。这是协程将要执行的实际资源。它还维护有关主协程、当前正在其上运行的G、**线程本地存储**（**tls**）等信息：
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Context or processor
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 上下文或处理器
- en: 'We have a global scheduler which takes care of bringing up new M, registering
    G, and handling system calls. However, it does not handle the actual execution
    of goroutines. This is done by an entity called **Processor**, which has its own
    internal scheduler and a queue called runqueue (`runq` in code) consisting of
    goroutines that will be executed in the current context. It also handles switching
    between various goroutines and so on:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个全局调度器负责启动新的M，注册G和处理系统调用。然而，它不处理协程的实际执行。这是由一个名为**处理器**的实体来完成的，它有自己的内部调度器和一个名为运行队列（代码中的`runq`）的队列，其中包含将在当前上下文中执行的协程。它还处理在各种协程之间的切换等：
- en: '[PRE12]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: From Go 1.5 onwards, a Go runtime can have a maximum number of `GOMAXPROCS`
    Ps running at any given point in the program's lifetime. Of course, we can change
    this number by either setting the `GOMAXPROCS` environment variable or by calling
    the `GOMAXPROCS()` function.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 从Go 1.5开始，Go运行时可以在程序生命周期的任何时刻运行最大数量的`GOMAXPROCS` Ps。当然，我们可以通过设置`GOMAXPROCS`环境变量或调用`GOMAXPROCS()`函数来更改这个数字。
- en: Scheduling with G, M, and P
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用G、M和P进行调度
- en: 'By the time the program is ready to start executing, the runtime has machines
    and processors set up. The runtime would request the OS to start an ample number
    of Machines (M), GOMAXPROCS number of Processors to execute goroutines (G). It
    is important to understand that M is the actual unit of execution and G is the
    logical unit of execution. However, they require P to actually execute G against
    the M. Let''s look at a possible scenario to better explain the scheduling process.
    First let''s look at the components we shall be using for the scenario:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序准备开始执行时，运行时已经设置好了机器和处理器。运行时会请求操作系统启动足够数量的机器（M），GOMAXPROCS数量的处理器来执行goroutine（G）。重要的是要理解M是实际的执行单元，G是逻辑执行单元。然而，它们需要P来实际执行G对M。让我们看一个可能的场景来更好地解释调度过程。首先让我们看看我们将在场景中使用的组件：
- en: 'We have a set of M ready to run: M1...Mn'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有一组准备运行的M：M1...Mn
- en: 'We also have two Ps: P1 and P2 with runqueues—runq1 and runq2 respectively'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还有两个P：P1和P2，分别带有运行队列—runq1和runq2
- en: Last but not least, we also have 20 goroutines, G1...G20, which we want to execute
    as part of the program
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后但并非最不重要的，我们还有20个goroutine，G1...G20，我们希望作为程序的一部分执行
- en: 'Go''s runtime and all of the components, M1...Mn, P1 and P2, and G1...G20,
    are represented as shown in the following figure:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Go的运行时和所有组件，M1...Mn，P1和P2，以及G1...G20，如下图所示：
- en: '![](img/9389276b-2d9b-4ead-9efb-8f28f5ffec93.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9389276b-2d9b-4ead-9efb-8f28f5ffec93.png)'
- en: 'Given that we have two Processors, the global scheduler would ideally distribute
    the goroutines between the two Processors equally. Assume that P1 is assigned
    to work on G1...G10 and and puts them into its runqueue, and similarly P2 puts
    G11...G20 in its runqueue. Next, P1''s scheduler pops a goroutine from its runqueue
    to run, G1, picks a machine to run it on, M1, and similarly P2 runs G11 on M2\.
    This can be illustrated by the following diagram:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于我们有两个处理器，全局调度器理想情况下会在两个处理器之间平均分配goroutine。假设P1被分配为处理G1...G10并将它们放入其运行队列，同样P2将G11...G20放入其运行队列。接下来，P1的调度器从其运行队列中弹出一个goroutine来运行，G1，选择一个机器来运行它，M1，同样P2在M2上运行G11。这可以通过以下图示进行说明：
- en: '![](img/a5f54f92-848d-4ee8-bd6b-bb0d8874a3e0.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a5f54f92-848d-4ee8-bd6b-bb0d8874a3e0.png)'
- en: 'A process''s internal scheduler is also responsible for switching out the current
    goroutine with the next one that it wants to execute. If everything is going well,
    the scheduler will switch the current goroutine for one of three possible reasons:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 一个进程的内部调度器还负责将当前的goroutine与它想要执行的下一个goroutine进行切换。如果一切顺利，调度器会出于以下三个可能的原因之一切换当前的goroutine：
- en: 'Time slice for current execution is over: A process will use **schedtick**
    (it is incremented every time the scheduler is called) to keep track of how long
    the current goroutine has been executing and, once a certain time limit is reached,
    the current goroutine will be put back in the runqueue and the next goroutine
    is picked up for execution.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前执行的时间片已经结束：进程将使用**schedtick**（每次调度器调用时递增）来跟踪当前goroutine执行了多长时间，一旦达到一定的时间限制，当前goroutine将被放回运行队列，下一个goroutine将被选中执行。
- en: 'Done with execution: Simply put, the goroutine is done executing all of its
    instructions. In this case, it will not be put back in the runqueue.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行完成：简而言之，goroutine已经执行完所有指令。在这种情况下，它不会被放回运行队列。
- en: 'Waiting on system call: In some cases, the goroutine might need to make a system
    system call, and as a result, the goroutine will be blocked. Given that we have
    a handful of processors, it doesn''t make sense to block such an expensive resource.
    The good news is that in Go, the processor is not required to wait on the system
    call; instead it can leave the waiting M and G combo, which will be picked up
    by the global scheduler after the system call. In the meantime, the processor
    can pick another M from the available machines, pick another goroutine from its
    runqueue, and start executing it. This is explained with the help of the following
    diagram:'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等待系统调用：在某些情况下，goroutine可能需要进行系统调用，结果会导致goroutine被阻塞。鉴于我们有一些处理器，阻塞这样一个昂贵的资源是没有意义的。好消息是，在Go中，处理器不需要等待系统调用；相反，它可以离开等待的M和G组合，系统调用后会被全局调度器接管。与此同时，处理器可以从可用的机器中选择另一个M，从其运行队列中选择另一个goroutine，并开始执行。这可以通过以下图示进行解释：
- en: '![](img/27d5e056-2609-4609-8d1c-e0c9437d8e90.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/27d5e056-2609-4609-8d1c-e0c9437d8e90.png)'
- en: 'The previous diagram explains that the processor P1 is running goroutine G1
    on machine M1\. G1 will now begin making a system call. This can be illustrated
    in the following diagram:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图解释了处理器P1在机器M1上运行goroutine G1。现在G1将开始进行系统调用。这可以通过以下图示进行说明：
- en: '![](img/a1445b62-98e8-44cb-b0f0-74679a42fb4a.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a1445b62-98e8-44cb-b0f0-74679a42fb4a.png)'
- en: 'The previous diagram explains that the processor P1 detaches itself from machine
    M1 and goroutine G1 due to a system call. P1 picks a new machine, M5, and a new
    goroutine, G9, to execute:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图解释了处理器P1由于系统调用从机器M1和goroutine G1中分离。P1选择一个新的机器M5，并选择一个新的goroutine G9来执行：
- en: '![](img/d547d370-30c7-4e37-b22a-28b74e49ea40.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d547d370-30c7-4e37-b22a-28b74e49ea40.png)'
- en: In the previous diagram, the G1-M1 system call is completed. Now G1 is put back
    in the P1 runqueue and M1 is added to the set of idle machines.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，G1-M1系统调用已经完成。现在G1被放回P1的运行队列，M1被添加到空闲机器的集合中。
- en: In the last part of this section, we are going to discuss another strategy implemented
    in the scheduler, called **work-stealing**.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的最后部分，我们将讨论调度器中实施的另一种策略，称为**work-stealing**。
- en: 'Let''s say that processor P1 has 10 goroutines and P2 has 10 goroutines. However,
    it turns out that the goroutines in P1 were quickly completed and now there are
    zero goroutines in P1''s runqueue. It would be a tragedy if P1 were idle and waiting
    for the global scheduler to provide it with more work. With the help of the work-stealing
    strategy, P1 starts checking with other processors and, if another processor has
    goroutines in its runqueue, it will "steal" half of them and start executing them.
    This ensures that we are maximizing the CPU usage for our program. Let''s ask
    two interesting questions:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 假设处理器P1有10个goroutines，P2有10个goroutines。然而，事实证明P1中的goroutines很快就完成了，现在P1的运行队列中没有goroutines了。如果P1空闲并等待全局调度器提供更多工作，那将是一场悲剧。通过工作窃取策略的帮助，P1开始与其他处理器进行检查，如果另一个处理器的运行队列中有goroutines，它将“窃取”其中一半并开始执行它们。这确保了我们最大程度地利用了程序的CPU使用率。让我们提出两个有趣的问题：
- en: What if a processor realizes that it can't steal any more tasks? The procesor
    will wait for a little while expecting new goroutines and, if none are created,
    the processor is killed.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个处理器意识到它无法再窃取任何任务怎么办？处理器会等待一小段时间，期望有新的goroutines，如果没有创建，处理器就会被终止。
- en: Can a processor steal more than half of a runqueue? Even if we have many processors
    at work, work-stealing will always take half of the target processor's runqueue.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理器能否窃取超过一半的运行队列？即使我们有很多处理器在工作，工作窃取策略也总是会窃取目标处理器运行队列的一半。
- en: 'This can be illustrated with the following diagram:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以用以下图示说明：
- en: '![](img/c4bbff37-03f6-4395-a197-b2506b88d511.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4bbff37-03f6-4395-a197-b2506b88d511.png)'
- en: 'The preceding diagram shows two processors, P1 and P2, executing a goroutine
    each from their runqueue on two machines. Let''s consider that the tasks for processor
    P2 complete while P1 is running. This is shown in the figure here:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 上图显示了两个处理器P1和P2，在两台机器上执行各自运行队列中的一个goroutine。假设当P1在运行时，处理器P2的任务已经完成。如下图所示：
- en: '![](img/d6b8362d-5400-407c-bfca-f5b4146abd5e.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d6b8362d-5400-407c-bfca-f5b4146abd5e.png)'
- en: 'Processor P2 has exhausted its runqueue, and does not have any more goroutines
    to execute. Thanks to the work-stealing strategy, P2 has "stolen" half of the
    goroutines from P1''s runqueue and can start executing them, as shown in the figure
    here:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 处理器P2已经耗尽了它的运行队列，没有更多的goroutines可以执行。多亏了工作窃取策略，P2已经“窃取”了P1运行队列中一半的goroutines，并可以开始执行它们，如下图所示：
- en: '![](img/5fdef3cb-e16d-4e5c-8e08-ca3fb705debc.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5fdef3cb-e16d-4e5c-8e08-ca3fb705debc.png)'
- en: Gotchas when using goroutines
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在使用goroutines时要注意的事项
- en: By this point, we should have developed a good understanding of how goroutines
    and the scheduler works. Let's now look at a few things that may catch us by surprise
    while working with goroutines.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 到这个点，我们应该已经对goroutines和调度器的工作原理有了很好的理解。现在让我们来看看在使用goroutines时可能会让我们感到意外的一些事情。
- en: Single goroutine halting the complete program
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单个goroutine使整个程序停止
- en: 'We know that goroutines run across multiple threads and multiple cores. So
    what happens when we have a panic in one of the threads? Here is an example that
    would let us simulate such a situation. We will create a lot of similar goroutines,
    whose sole purpose is to take a number and divide it by itself after subtracting
    10 from the denominator. This will work fine for the majority of cases, except
    when the number is `10`. The following code implements the described functionality:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道goroutines在多个线程和多个核心上运行。那么当一个线程发生panic时会发生什么？下面是一个可以让我们模拟这种情况的例子。我们将创建许多类似的goroutines，它们的唯一目的是取一个数字，并在从分母减去10后将其除以自身。这对大多数情况都有效，除了当数字是`10`时。以下代码实现了所描述的功能：
- en: '[PRE13]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output of the previous code can be as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 先前代码的输出可能如下所示：
- en: '[PRE14]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Essentially, a lot of goroutines were put in the runqueue, and upon being executed
    in random order, their outputs were printed to the console. However, as soon as
    the goroutine with index == 10 was executed, it raised a panic which was not handled
    by the function, and this resulted in the complete program halting and exiting
    with status code `2`. This shows that even a single error or panic that hasn't
    been handled will halt the complete program!
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，许多goroutines被放入运行队列中，并以随机顺序执行，它们的输出被打印到控制台。然而，一旦执行了索引==10的goroutine，它引发了一个panic，该panic没有被函数处理，导致整个程序停止并以状态码`2`退出。这表明即使一个未被处理的错误或panic也会使整个程序停止！
- en: 'However, it wouldn''t make sense to crash the program because we faced a panic
    that we might have been able to handle graciously. Go allows us to recover from
    a panic with an appropriately named function called `recover`. Let''s look at
    how to use `recover` in the previous code example:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果因为我们遇到了一个我们本来可以优雅处理的panic而导致程序崩溃是没有意义的。Go允许我们使用一个名为`recover`的适当命名的函数从panic中恢复。让我们看看如何在先前的代码示例中使用`recover`：
- en: '[PRE15]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output for the preceding code can be as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 先前代码的输出可能如下所示：
- en: '[PRE16]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Goroutines aren't predictable
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Goroutines是不可预测的
- en: In this chapter, we started by looking at how Go enables us to write code that
    is concurrent and, to an extent, parallel. Then we followed up with a discussion
    on how Go schedules goroutines over machines and processors. It is possible that
    we might be able to reason how the goroutines are going to be distributed over
    machines and processors, which in turn might let us write non-standard or hacky
    Go code.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先看了Go如何使我们能够编写并发的代码，并在一定程度上实现并行。然后我们讨论了Go如何在机器和处理器上调度goroutines。我们可能能够推断goroutines将如何分布在机器和处理器上，这反过来可能让我们编写非标准或hacky的Go代码。
- en: 'Consider the code from the *Parallelism* section, where we tried to simulate
    listening to music while writing a few emails. Here is the output of the code
    for quick reference:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑*并行性*部分的代码，我们试图模拟在听音乐的同时写几封电子邮件。以下是代码的输出，供快速参考：
- en: '[PRE17]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We can now easily infer that there were at least two Ps, and one of them was
    being used by the goroutine printing `Listening...`, while the other P was handling
    the goroutines related to writing emails.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以很容易地推断出至少有两个P，其中一个被用于打印`Listening...`的goroutine，而另一个P则处理与写邮件相关的goroutines。
- en: This is all well and good, however consider the case where `GOMAXPROCS` is set
    to `1` or the system has low hardware capabilities which might result in fewer
    machines. It is possible that this might lead to the goroutine printing `Listening...` run
    forever and never giving control to the other goroutines. In reality, the Go compiler
    should detect this case and accordingly plan the scheduling of goroutines. However,
    it would be better to plan our code so that we do not have to rely on Go's scheduler
    and its current implementation.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都很好，但考虑一种情况，即`GOMAXPROCS`设置为`1`，或者系统硬件能力较低，可能导致较少的机器。这可能导致goroutine打印`Listening...`永远运行，永远不会将控制权交给其他goroutines。实际上，Go编译器应该检测到这种情况，并相应地计划goroutines的调度。然而，最好是规划我们的代码，这样我们就不必依赖Go的调度器及其当前的实现。
- en: Summary
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: Goroutines are concurrent and, to an extent, parallel; however, we should think
    of them as being concurrent. The order of execution of goroutines is not predictable
    and we should not rely on them to be executed in any particular order.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Goroutines是并发的，到一定程度上是并行的；然而，我们应该将它们视为并发。Goroutines的执行顺序是不可预测的，我们不应该依赖它们按任何特定顺序执行。
- en: We should also take care to handle errors and panics in our goroutines because
    even though they are being executed in parallel, a panic in one goroutine will
    crash the complete program. Finally, goroutines can block on system calls, however
    this will not block the execution of the program nor slow down the performance
    of the overall program.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还应该注意处理goroutines中的错误和恐慌，因为即使它们在并行执行，一个goroutine中的恐慌也会导致整个程序崩溃。最后，goroutines可能会在系统调用上阻塞，但这不会阻塞程序的执行，也不会减慢整个程序的性能。
- en: We looked at a few of the design concepts behind Go's runtime scheduler to understand
    why all of this happens.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看了一些Go运行时调度器背后的设计概念，以了解为什么会发生所有这些。
- en: You might be wondering why we haven't discussed channels in this chapter. The
    reason is that by not relying on channels we were able to look at goroutines in
    their most elemental form. This allowed us to dive deeper into the concept and
    implementation of goroutines.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你会想为什么我们在本章没有讨论通道。原因是，通过不依赖通道，我们能够以它们最基本的形式来看待goroutines。这使我们能够更深入地了解goroutines的概念和实现。
- en: In the next chapter, we shall be looking at channels and how they further empower
    goroutines.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看一下通道以及它们如何进一步增强goroutines的功能。
