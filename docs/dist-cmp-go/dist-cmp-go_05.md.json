["```go\n# openapi/books.yaml\n\nopenapi: 3.0.0\nservers: \n  - url: /api \ninfo: \n  title: Books API \n  version: '1.0' \n  description: ; \n    API responsible for adding, reading and updating list of books. \npaths: \n  /books: \n    get: \n      description: | \n        Get list of all books \n      responses: \n        '200': \n          description: | \n            Request successfully returned list of all books \n          content: \n            application/json: \n              schema: \n                $ref: '#/components/schemas/response' \n  /books/{id}: \n    get: \n      description: | \n        Get a particular books with ID 'id' \n      responses: \n        '200': \n          description: | \n            Request was successfully completed. \n          content: \n            application/json: \n              schema: \n                $ref: '#/components/schemas/document' \n      parameters: \n        - in: query \n          name: id \n          schema: \n            type: integer \n          description: Book ID of the book to get. \n    post: \n      description: | \n        Get a particular books with ID 'id' \n      responses: \n        '200': \n          description: | \n            Request was successfully completed. \n          content: \n            application/json: \n              schema: \n                $ref: '#/components/schemas/payload' \n      requestBody: \n        content: \n          application/json: \n            schema: \n                $ref: '#/components/schemas/document' \n    put: \n      description: | \n        Update the data of a Book with ID 'id' with the payload sent in the request body. \n      responses: \n        '200': \n          description: | \n            Request was successfully completed. \n          content: \n            application/json: \n              schema: \n                $ref: '#/components/schemas/payload' \n      requestBody: \n        content: \n          application/json: \n            schema: \n                $ref: '#/components/schemas/document' \n    delete: \n      description: | \n        Get a particular books with ID 'id' \n      responses: \n        '200': \n          description: | \n            Request was successfully completed. \n      parameters: \n        - in: query \n          name: id \n          schema: \n            type: integer \n          description: Book ID of the book to get. \ncomponents: \n  schemas: \n    response: \n      type: array \n      items: \n        $ref: '#/components/schemas/document' \n\n    document: \n      type: object \n      required: \n        - title \n        - link \n      properties: \n        id: \n          type: integer \n          description: Book ID \n        title: \n          type: string \n          description: Title of the book \n        link:  \n          type: string \n          description: Link to the book \n\n    payload: \n      type: object \n      required: \n        - title \n        - link \n      properties: \n        title: \n          type: string \n          description: Title of the book \n        link:  \n          type: string \n          description: Link to the book \n```", "```go\n# openapi/concierge.yaml\n\nopenapi: 3.0.0\n\nservers: \n  - url: /api \ninfo: \n  title: Goophr Concierge API \n  version: '1.0' \n  description: > \n    API responsible for responding to user input and communicating with Goophr \n    Librarian. \npaths: \n  /feeder: \n    post: \n      description: | \n        Register new document to be indexed. \n      responses: \n        '200': \n          description: | \n            Request was successfully completed. \n          content: \n            application/json: \n              schema: \n                $ref: '#/components/schemas/response' \n        '400': \n          description: > \n            Request was not processed because payload was incomplete or \n            incorrect. \n          content: \n            application/json: \n              schema: \n                $ref: '#/components/schemas/response' \n      requestBody: \n        content: \n          application/json: \n            schema: \n              $ref: '#/components/schemas/document' \n        required: true \n  /query: \n    post: \n      description: | \n        Search query \n      responses: \n        '200': \n          description: | \n            Response consists of links to document \n          content: \n            application/json: \n              schema: \n                type: array \n                items: \n                  $ref: '#/components/schemas/document' \n      requestBody: \n        content: \n          application/json: \n            schema: \n              type: array \n              items: \n                type: string \n        required: true \ncomponents: \n  schemas: \n    response: \n      type: object \n      properties: \n        code: \n          type: integer \n          description: Status code to send in response \n        msg: \n          type: string \n          description: Message to send in response \n    document: \n      type: object \n      required: \n        - title \n        - link \n      properties: \n        title: \n          type: string \n          description: Title of the document \n        link: \n          type: string \n          description: Link to the document\n```", "```go\n# openapi/librarian.yaml\n\nopenapi: 3.0.0\nservers: \n  - url: /api \ninfo: \n  title: Goophr Librarian API \n  version: '1.0' \n  description: | \n    API responsible for indexing & communicating with Goophr Concierge. \npaths: \n  /index: \n    post: \n      description: | \n        Add terms to index. \n      responses: \n        '200': \n          description: | \n            Terms were successfully added to the index. \n        '400': \n          description: > \n            Request was not processed because payload was incomplete or \n            incorrect. \n          content: \n            application/json: \n              schema: \n                $ref: '#/components/schemas/error' \n      requestBody: \n        content: \n          application/json: \n            schema: \n              $ref: '#/components/schemas/terms' \n        description: | \n          List of terms to be added to the index. \n        required: true \n  /query: \n    post: \n      description: | \n        Search for all terms in the payload. \n      responses: \n        '200': \n          description: | \n            Returns a list of all the terms along with their frequency, \n            documents the terms appear in and link to the said documents. \n          content: \n            application/json: \n              schema: \n                $ref: '#/components/schemas/results' \n        '400': \n          description: > \n            Request was not processed because payload was incomplete or \n            incorrect. \n          content: \n            application/json: \n              schema: \n                $ref: '#/components/schemas/error' \n    parameters: [] \ncomponents: \n  schemas: \n    error: \n      type: object \n      properties: \n        msg: \n          type: string \n    term: \n      type: object \n      required: \n        - title \n        - token \n        - doc_id \n        - line_index \n        - token_index \n      properties: \n        title: \n          description: | \n            Title of the document to which the term belongs. \n          type: string \n        token: \n          description: | \n            The term to be added to the index. \n          type: string \n        doc_id: \n          description: | \n            The unique hash for each document. \n          type: string \n        line_index: \n          description: | \n            Line index at which the term occurs in the document. \n          type: integer \n        token_index: \n          description: | \n            Position of the term in the document. \n          type: integer \n    terms: \n      type: object \n      properties: \n        code: \n          type: integer \n        data: \n          type: array \n          items: \n            $ref: '#/components/schemas/term' \n    results: \n      type: object \n      properties: \n        count: \n          type: integer \n        data: \n          type: array \n          items: \n            $ref: '#/components/schemas/result' \n    result: \n      type: object \n      properties: \n        doc_id: \n          type: string \n        score: \n          type: integer\n```", "```go\nversion: '3' \n\nservices: \n  concierge: \n    build: concierge/. \n    ports: \n      - \"6060:9000\" \n  a_m_librarian: \n    build: librarian/. \n    ports: \n      - \"7070:9000\" \n  n_z_librarian: \n      build: librarian/. \n      ports: \n        - \"8080:9000\" \n  others_librarian: \n      build: librarian/. \n      ports: \n        - \"9090:9000\"\n```", "```go\n$ tree . \u251c\u2500\u2500 concierge \u2502 \u251c\u2500\u2500 api \u2502 \u2502 \u251c\u2500\u2500 feeder.go \u2502 \u2502 \u2514\u2500\u2500 query.go \u2502 \u251c\u2500\u2500 common \u2502 \u2502 \u251c\u2500\u2500 helpers.go \u2502 \u2502 \u2514\u2500\u2500 state.go \u2502 \u251c\u2500\u2500 Dockerfile \u2502 \u2514\u2500\u2500 main.go \u251c\u2500\u2500 docker-compose.yaml \u2514\u2500\u2500 librarian \u251c\u2500\u2500 api \u2502 \u251c\u2500\u2500 index.go \u2502 \u2514\u2500\u2500 query.go \u251c\u2500\u2500 common \u2502 \u251c\u2500\u2500 helpers.go \u2502 \u2514\u2500\u2500 state.go \u251c\u2500\u2500 Dockerfile \u2514\u2500\u2500 main.go \n```", "```go\n// {concierge,librarian}/main.go \npackage main \n\nimport \"fmt\" \n\nfunc main() { \n    fmt.Println(\"Hello from Concierge!\")  // Or, Hello from Librarian! \n} \n```", "```go\n# {concierge,librarian}/Dockerfile FROM golang:1.9.1 # In case of librarian, '/concierge' will be replaced with '/librarian' ADD . /go/src/github.com/last-ent/distributed-go/chapter5/goophr/concierge WORKDIR /go/src/github.com/last-ent/distributed-go/chapter5/goophr/concierge RUN go install github.com/last-ent/distributed-go/chapter5/goophr/concierge ENTRYPOINT /go/bin/concierge EXPOSE 9000 \n```", "```go\n$ docker-compose up --build\n# ...\nCreating goophr_a_m_librarian_1 ... \nCreating goophr_concierge_1 ... \nCreating goophr_m_z_librarian_1 ... \nCreating goophr_others_librarian_1 ... \nCreating goophr_a_m_librarian_1 \nCreating goophr_m_z_librarian_1 \nCreating goophr_others_librarian_1 \nCreating goophr_others_librarian_1 ... done \nAttaching to goophr_a_m_librarian_1, goophr_m_z_librarian_1, goophr_concierge_1, goophr_others_librarian_1 \na_m_librarian_1 | Hello from Librarian! \nm_z_librarian_1 | Hello from Librarian! \nothers_librarian_1 | Hello from Librarian! \nconcierge_1 | Hello from Concierge! \ngoophr_a_m_librarian_1 exited with code 0 \ngoophr_m_z_librarian_1 exited with code 0 \ngoophr_concierge_1 exited with code 0 \ngoophr_others_librarian_1 exited with code 0 \n```"]