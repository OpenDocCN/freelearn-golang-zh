- en: Goophr Concierge
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Goophr Concierge
- en: 'In the previous chapter, [Chapter 5](../Text/Ch05.xhtml), *Introducing Goophr*,
    we split our application into two components: Concierge and Librarian. In this
    chapter, we shall look at the design and implementation of Concierge. The following
    are the major sections in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章[第5章](../Text/Ch05.xhtml)中，*介绍Goophr*，我们将我们的应用程序分成了两个组件：Concierge和Librarian。在本章中，我们将看一下Concierge的设计和实现。本章的主要部分如下：
- en: A deeper look at document feeder and query handler APIs
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入了解文档馈送器和查询处理程序API
- en: Diagrams explaining the architecture and logical flow of Concierge
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释Concierge的架构和逻辑流的图表
- en: Tests for Concierge
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Concierge的测试
- en: Revisiting the API definition
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新审视API定义
- en: 'Let''s have another look at the API definition for Concierge, and discuss what
    the definition conveys regarding the expected behavior by the API and application:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次查看Concierge的API定义，并讨论定义对API和应用程序预期行为的传达：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Based on the API definition, we can state the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 根据API定义，我们可以说明如下：
- en: All communication to and from Concierge is using the JSON format
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有与Concierge的通信都使用JSON格式进行。
- en: Two endpoints for Concierge are `/api/feeder` and `/api/query`
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Concierge有两个端点，分别是“/api/feeder”和“/api/query”
- en: '`/api/feeder`: This uses the `POST` method to add new documents'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “/api/feeder”：这使用“POST”方法添加新文档
- en: '`/api/query`: This uses the `POST` method to receive search query terms and
    returns a list of documents related to the search term'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “/api/query”：这使用“POST”方法接收搜索查询词，并返回与搜索词相关的文档列表
- en: Now let's look at each of the endpoints in detail.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们详细看看每个端点。
- en: Document feeder – the REST API endpoint
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档馈送器 - REST API端点
- en: The main aim of `/api/feeder` is to receive documents to be indexed, process
    them, and forward the processed data to Librarian to be added to the index. This
    means we need to accurately process the document. But what do we mean by "processing
    a document?"
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: “/api/feeder”的主要目的是接收要索引的文档，处理它们，并将处理后的数据转发给图书管理员以添加到索引中。这意味着我们需要准确处理文档。但是，“处理文档”是什么意思呢？
- en: 'It can be defined as the following set of consecutive tasks:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以定义为以下一系列连续的任务：
- en: We rely on the payload to provide us with a title and link to the document.
    We download the linked document and use it in our index.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们依赖有效载荷为我们提供标题和文档链接。我们下载链接的文档并在我们的索引中使用它。
- en: The document can be thought of as one big blob of text, and it is possible that
    we might have multiple documents with the same title. We need to be able to identify
    each document uniquely and also be able to easily retrieve them.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文档可以被视为一个大的文本块，可能会有多个具有相同标题的文档。我们需要能够唯一标识每个文档，并且能够轻松地检索它们。
- en: The result of a search query expects the provided words to be present in the
    document. This means we need to extract all words from a document and also keep
    track of where a word occurs within a document.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索查询的结果期望所提供的单词出现在文档中。这意味着我们需要从文档中提取所有单词，并跟踪单词在文档中的位置。
- en: Would it make sense to differentiate between "HELLO", "hello", and "HELLO!!!"?
    In the context of the text it occurs in, they certainly convey different meanings.
    However, for the index, it depends on how complex and accurate we want to make
    our index. For our case, we keep the implementation simple, and thus we normalize
    the words, that is, we treat all these variations of the word as a single unit/token.
    Additionally, we do not index pronouns, articles, propositions, and so on.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 区分“HELLO”、“hello”和“HELLO!!!”有意义吗？在它们出现的文本上下文中，它们确实传达了不同的含义。但是，对于索引来说，这取决于我们想要使索引变得多么复杂和准确。对于我们的情况，我们保持实现简单，因此我们规范化单词，也就是说，我们将单词的所有这些变体视为单个单元/令牌。此外，我们不索引代词、冠词、介词等。
- en: For a search engine, pronouns, articles, and so on are termed as **stop words**,
    and it is common to ignore them in the index. The main reason is that while they
    provide valuable information for the user, they tend to have little to no relevance
    for the index.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于搜索引擎来说，代词、冠词等被称为**停用词**，通常在索引中被忽略。主要原因是，虽然它们为用户提供了有价值的信息，但它们往往对索引几乎没有相关性。
- en: Finally, we would like to add all these tokens to the index maintained by the
    Librarian.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们想将所有这些令牌添加到由图书管理员维护的索引中。
- en: 'In the source code for Concierge, each of the preceding tasks stated is handled
    by certain functions. The following is a list showing associated functions for
    each of the tasks:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在Concierge的源代码中，每个前述任务都由特定的函数处理。以下是显示每个任务的相关函数的列表：
- en: 'Task 1: `api.FeedHandler` and `api.docProcessor`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务1：“api.FeedHandler”和“api.docProcessor”
- en: 'Task 2: `api.docStore` and `api.lineStore`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务2：“api.docStore”和“api.lineStore”
- en: 'Task 3 and Task 4: `api.indexProcessor` and `common.SimplifyToken`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务3和任务4：“api.indexProcessor”和“common.SimplifyToken”
- en: 'Task 5: `api.indexAdder`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务5：“api.indexAdder”
- en: Query handler – the REST API endpoint
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查询处理程序 - REST API端点
- en: Similarly, if we consider the case of handling a search query at `/api/query`,
    we should be able to take the search terms from the payload, request results from
    various instances of the Librarian, process them, and then return search results
    back to the user in the descending order of search relevance. However, since we
    haven't implemented the Librarian yet, we shall discuss the implementation of
    this endpoint later in [Chapter 8](../Text/Ch08.xhtml), *Deploying Goophr*, the
    distributed search index.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果我们考虑在“/api/query”处理搜索查询的情况，我们应该能够从有效载荷中获取搜索词，从图书管理员的各个实例请求结果，处理它们，然后以搜索相关性的降序返回搜索结果给用户。但是，由于我们尚未实现图书管理员，我们将在[第8章](../Text/Ch08.xhtml)中稍后讨论此端点的实现，*部署Goophr*，分布式搜索索引。
- en: Conventions
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 约定
- en: The source code for Concierge has a lot of moving parts. Directly jumping into
    the code without any prior understanding might not be the best way to proceed.
    Instead, we shall take the tasks defined in the previous sections and present
    them as flow diagrams. However, first, let's have a brief look at the symbols
    and naming conventions we are using in the diagrams and code.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Concierge的源代码有很多组成部分。在没有任何先前理解的情况下直接跳入代码可能不是最好的方法。相反，我们将把前几节中定义的任务作为流程图呈现出来。然而，首先让我们简要看一下我们在图表和代码中使用的符号和命名约定。
- en: Code conventions
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码约定
- en: 'Following are the entities in Concierge:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Concierge中的实体：
- en: '**payload** (**p**): This represents the payload received to add a new document
    to index.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有效负载**（**p**）：这代表接收到的用于向索引添加新文档的有效负载。'
- en: '**document** (**d**): This represents all the metadata representing a unique
    document.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档**（**d**）：这代表表示唯一文档的所有元数据。'
- en: '**line** (**l**): This represents all the metadata for a single line within
    a document.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行**（**l**）：这代表文档中单行的所有元数据。'
- en: '**token** (**t**): This represents all the metadata for each token within a
    document.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标记**（**t**）：这代表文档中每个标记的所有元数据。'
- en: '**Message** (**xMsg**): For a given entity, **x**, it provides information
    to identify a unique entity and a callback channel to return the unique entity.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息**（**xMsg**）：对于给定的实体**x**，它提供了用于识别唯一实体和返回唯一实体的回调通道的信息。'
- en: '**Process Channels** (**xProcessCh**): For a given entity, **x**, the channel
    is used by **xProcessor** goroutine to consume and process the entity.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**处理通道**（**xProcessCh**）：对于给定的实体**x**，该通道由**xProcessor** goroutine使用来消耗和处理实体。'
- en: '**Stores** (or **Data Stores**): The Concierge is also responsible for storing
    and maintaining information regarding all the documents and lines in the system.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储**（或**数据存储**）：Concierge还负责存储和维护系统中所有文档和行的信息。'
- en: '**Store Channels** (xStoreCh): For a given entity, **x**, the channel is used
    to update the entity''s store.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储通道**（xStoreCh）：对于给定的实体**x**，该通道用于更新实体的存储。'
- en: '**Get Channels** (**xGetCh** or **xGetAllCh**): These channels are used by
    stores to provide a mechanism to retrieve an entity using callback channels.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**获取通道**（**xGetCh**或**xGetAllCh**）：这些通道由存储使用，提供一种机制来使用回调通道检索实体。'
- en: '**done**: This is a special channel that will stop all running goroutines once
    it is closed. We should be careful to close this channel and not send a message
    on it, the reason being that sending a message will only signal a single goroutine
    to stop. Instead, if we were to close the channel, all goroutines listening on
    the channel will receive message to stop.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**done**：这是一个特殊的通道，一旦关闭，将停止所有正在运行的goroutines。我们应该小心关闭这个通道，而不是在上面发送消息，原因是发送消息只会向一个goroutine发出停止信号。相反，如果我们关闭通道，所有监听该通道的goroutines都将收到停止消息。'
- en: 'Let''s look at a few examples so that we have perfect understanding of the
    conventions:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些例子，以便我们对约定有完美的理解：
- en: '**dStoreCh**: This is the channel to add new documents to Document Store'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**dStoreCh**：这是用于向文档存储添加新文档的通道'
- en: '**dGetCh**: This is the channel to get a single document from Document Store'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**dGetCh**：这是从文档存储获取单个文档的通道'
- en: Diagram conventions
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图表约定
- en: 'Next, let''s look at the symbols we will be using in our diagrams:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看一下我们将在图表中使用的符号：
- en: '![](img/32bcf0f7-1c6d-4c2c-b72a-9ba9e7398520.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/32bcf0f7-1c6d-4c2c-b72a-9ba9e7398520.png)'
- en: Now, let's proceed to visualize Concierge's logic with help of logical flow
    diagrams.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '现在，让我们通过逻辑流程图来可视化Concierge的逻辑。 '
- en: Logical flow diagrams
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逻辑流程图
- en: We can split the logic for Concierge into five major chunks. We shall address
    the required logic flow for each of the individual chunks, and then at the end,
    combine them all to get the big picture of what we are trying to achieve.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将Concierge的逻辑分为五个主要部分。我们将解决每个单独部分所需的逻辑流程，然后最后将它们合并在一起，以获得我们试图实现的整体情况。
- en: The doc processor
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文档处理器
- en: 'First and foremost, we want to accept the payload sent to endpoint and start
    processing the document. Let''s assume that `api.FeedHandler` accepts, validates,
    and sends the payload on **pProcessCh**:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们想要接受发送到端点的有效负载并开始处理文档。假设`api.FeedHandler`接受、验证并将有效负载发送到**pProcessCh**：
- en: '![](img/a5ee380a-1d6f-440e-9360-c2fc668361c2.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a5ee380a-1d6f-440e-9360-c2fc668361c2.png)'
- en: The doc store
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文档存储
- en: 'Let''s then consider **dStoreCh**, which is the channel used for adding and
    retrieving documents:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来考虑一下**dStoreCh**，这是用于添加和检索文档的通道：
- en: '![](img/9c59ee7d-56b5-4f6c-8e59-629c3aee8e6e.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9c59ee7d-56b5-4f6c-8e59-629c3aee8e6e.png)'
- en: The index processor
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引处理器
- en: 'Apart from adding to `docstore`, `docProcessor` also sends the document to
    `indexProcessor`*,* which is responsible for storing lines in the document and
    converting lines into tokens:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 除了添加到`docstore`中，`docProcessor`还将文档发送到`indexProcessor`，后者负责存储文档中的行并将行转换为标记：
- en: '![](img/b6881d8b-9ad5-4e9d-a89c-7668f2375fd3.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b6881d8b-9ad5-4e9d-a89c-7668f2375fd3.png)'
- en: The line store
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 行存储
- en: '`indexProcessor` splits the document into lines, and `lineStore` is responsible
    for storing them and also returning them when queried:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`indexProcessor`将文档拆分为行，`lineStore`负责存储它们，并在查询时返回它们：'
- en: '![](img/809153a9-efa6-44d3-bdc8-3a91fca7456c.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/809153a9-efa6-44d3-bdc8-3a91fca7456c.png)'
- en: '`indexProcessor` also splits the lines into tokens and adds them to `iAddCh`
    channel. `indexAdder` is responsible for adding these tokens to the index (Librarian).'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`indexProcessor`还将行拆分为标记，并将它们添加到`iAddCh`通道。`indexAdder`负责将这些标记添加到索引（图书管理员）中。'
- en: '![](img/a70e7bec-20d6-4dd3-ab8b-66c9d0e2bb27.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a70e7bec-20d6-4dd3-ab8b-66c9d0e2bb27.png)'
- en: The consolidated flow diagram
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 综合流程图
- en: 'Now that we have defined each of the individual chunks, you might have noticed
    that they flow into one another and have some components that they share among
    themselves. Let us consolidate all of these flow diagrams now:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了每个单独部分，您可能已经注意到它们相互衔接，并且它们之间有一些共享的组件。现在让我们整合所有这些流程图：
- en: '![](img/1dd32720-e188-44c8-8ee3-6308e598b06d.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1dd32720-e188-44c8-8ee3-6308e598b06d.png)'
- en: This might be a good opportunity to try and build Concierge on your own. However,
    please read the following three design points to have complete knowledge of the
    system.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是一个很好的机会，让你自己尝试构建Concierge。但是，请阅读以下三个设计要点，以完全了解系统。
- en: Queue workers
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 队列工作者
- en: In the consolidated flow diagram, you might have noticed that we run four instances
    of `docProcessor`*,* `indexProcessor`, and `indexAdder`*.* The reason for this
    is that the tasks handled by these goroutines are embarrassingly parallel, that
    is, they can be run in parallel without side effects. This allows us to parallelize
    and process the documents at a faster pace.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在综合流程图中，您可能已经注意到我们运行了四个`docProcessor`、`indexProcessor`和`indexAdder`的实例。这样做的原因是这些goroutine处理的任务是尴尬地并行的，也就是说，它们可以在没有副作用的情况下并行运行。这使我们能够并行处理文档，加快处理速度。
- en: Single stores
  id: totrans-73
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单个存储
- en: In contrast, we run `docStore` and `lineStore` as single instances because we
    want to a maintain consistent state for these stores.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，我们将“docStore”和“lineStore”作为单个实例运行，因为我们希望为这些存储保持一致的状态。
- en: Buffered channels
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 缓冲通道
- en: For almost all the channels in our code, we will be using buffered channels
    with a capacity of 8\. This allows us to avoid blocking the `api.FeedHandler`
    endpoint in case `docProcessors` are busy. Also because of queue workers and single
    stores, `lStoreCh` and `dStoreCh` have a capacity of 16 each.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们代码中的几乎所有通道，我们将使用容量为8的缓冲通道。这样可以避免在`docProcessors`忙碌时阻塞`api.FeedHandler`端点。另外，由于队列工作者和单个存储，`lStoreCh`和`dStoreCh`的容量分别为16。
- en: The Concierge source code
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Concierge源代码
- en: 'Now that we have discussed the design of Concierge in detail, let us implement
    Concierge based on these design points. We will discuss the implementation of
    `api/query.go` and Dockerfile in [Chapter 8](../Text/Ch08.xhtml), *Deploying Goophr*.
    Let''s look at the project structure & source code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经详细讨论了Concierge的设计，让我们根据这些设计要点实现Concierge。我们将在[第8章](../Text/Ch08.xhtml)，*部署Goophr*中讨论`api/query.go`和Dockerfile的实现。让我们看看项目结构和源代码：
- en: '[PRE1]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now let''s look at the source code for each of the files:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看每个文件的源代码：
- en: '**main.go**:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**main.go**：'
- en: '[PRE2]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**common/helpers.go**:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**common/helpers.go**：'
- en: '[PRE3]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**api/feeder.go**:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**api/feeder.go**：'
- en: '[PRE4]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**api/feeder_test.go**:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**api/feeder_test.go**：'
- en: '[PRE5]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Running tests
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行测试
- en: 'In `api/feeder_test.go`, we have three main test case scenarios:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在`api/feeder_test.go`中，我们有三个主要的测试用例场景：
- en: To test if a unique hash is generated for each new document
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试是否为每个新文档生成了唯一的哈希值
- en: Testing if payload sent to the `/api/feeder` endpoint returns document content
    as expected
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试发送到“/api/feeder”端点的有效负载是否返回预期的文档内容
- en: Test to ensure the indexing of documents is working as expected
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试以确保文档的索引工作正常
- en: 'The following is the expected output after running the tests:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行测试后，以下是预期的输出：
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The Concierge server
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Concierge服务器
- en: 'Let''s try to post the book, *Hackers: Heroes of the Computer Revolution* to
    the Concierge endpoint, `/api/feeder`. We need to have the Concierge server running
    in another terminal window:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试将书籍*《黑客：计算机革命的英雄》*发布到Concierge端点“/api/feeder”。我们需要在另一个终端窗口中运行Concierge服务器：
- en: '[PRE7]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, let''s see what happens on the server:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看服务器上会发生什么：
- en: '[PRE8]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Summary
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we took an in-depth look at the `feeder` component of Concierge.
    We designed the system and used logical flow diagrams to understand how the various
    parts of the code interact. Next, we tested our code with tests and also with
    a real-world example.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入研究了Concierge的“feeder”组件。我们设计了系统，并使用逻辑流程图来理解代码的各个部分是如何交互的。接下来，我们用测试和一个真实的例子来测试我们的代码。
- en: In the next chapter, [Chapter 7](../Text/Ch07.xhtml), *Goophr Librarian*, we
    will delve into the design and implementation of Goophr Librarian.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，[第7章](../Text/Ch07.xhtml)，*Goophr图书管理员*中，我们将深入探讨Goophr图书管理员的设计和实现。
