["```go\n$ tree -a\n.\n\u03b52;\u2500\u2500 goophr\n \u251c\u2500\u2500 concierge\n \u2502 \u251c\u2500\u2500 api\n \u2502 \u2502 \u251c\u2500\u2500 feeder.go\n \u2502 \u2502 \u251c\u2500\u2500 feeder_test.go\n \u2502 \u2502 \u2514\u2500\u2500 query.go\n \u2502 \u251c\u2500\u2500 common\n \u2502 \u2502 \u2514\u2500\u2500 helpers.go\n \u2502 \u251c\u2500\u2500 Dockerfile\n \u2502 \u2514\u2500\u2500 main.go\n \u251c\u2500\u2500 docker-compose.yaml\n \u251c\u2500\u2500 .env\n \u251c\u2500\u2500 librarian\n \u2502 \u251c\u2500\u2500 api\n \u2502 \u2502 \u251c\u2500\u2500 index.go\n \u2502 \u2502 \u2514\u2500\u2500 query.go\n \u2502 \u251c\u2500\u2500 common\n \u2502 \u2502 \u2514\u2500\u2500 helpers.go\n \u2502 \u251c\u2500\u2500 Dockerfile\n \u2502 \u2514\u2500\u2500 main.go\n \u2514\u2500\u2500 simple-server\n \u251c\u2500\u2500 Dockerfile\n \u2514\u2500\u2500 main.go\n\n8 directories, 15 files\n```", "```go\npackage main \n\nimport ( \n    \"fmt\" \n    \"net/http\" \n    \"os\" \n\n    \"github.com/last-ent/distributed-go/chapter8/goophr/librarian/api\" \n    \"github.com/last-ent/distributed-go/chapter8/goophr/librarian/common\" \n) \n\nfunc main() { \n    common.Log(\"Adding API handlers...\") \n    http.HandleFunc(\"/api/index\", api.IndexHandler) \n    http.HandleFunc(\"/api/query\", api.QueryHandler) \n\n    common.Log(\"Starting index...\") \n    api.StartIndexSystem() \n\n    port := fmt.Sprintf(\":%s\", os.Getenv(\"API_PORT\")) \n    common.Log(fmt.Sprintf(\"Starting Goophr Librarian server on port %s...\", port)) \n    http.ListenAndServe(port, nil) \n} \n```", "```go\npackage main \n\nimport ( \n    \"fmt\" \n    \"net/http\" \n    \"os\" \n\n    \"github.com/last-ent/distributed-go/chapter8/goophr/concierge/api\" \n    \"github.com/last-ent/distributed-go/chapter8/goophr/concierge/common\" \n) \n\nfunc main() { \n    common.Log(\"Adding API handlers...\") \n    http.HandleFunc(\"/api/feeder\", api.FeedHandler) \n    http.HandleFunc(\"/api/query\", api.QueryHandler) \n\n    common.Log(\"Starting feeder...\") \n    api.StartFeederSystem() \n\n    port := fmt.Sprintf(\":%s\", os.Getenv(\"API_PORT\")) \n    common.Log(fmt.Sprintf(\"Starting Goophr Concierge server on port %s...\", port)) \n    http.ListenAndServe(port, nil) \n} \n```", "```go\npackage api \n\nimport ( \n    \"bytes\" \n    \"encoding/json\" \n    \"fmt\" \n    \"io\" \n    \"io/ioutil\" \n    \"log\" \n    \"net/http\" \n    \"os\" \n    \"sort\" \n\n    \"github.com/last-ent/distributed-go/chapter8/goophr/concierge/common\" \n) \n\nvar librarianEndpoints = map[string]string{} \n\nfunc init() { \n    librarianEndpoints[\"a-m\"] = os.Getenv(\"LIB_A_M\") \n    librarianEndpoints[\"n-z\"] = os.Getenv(\"LIB_N_Z\") \n    librarianEndpoints[\"*\"] = os.Getenv(\"LIB_OTHERS\") \n} \n\ntype docs struct { \n    DocID string 'json:\"doc_id\"' \n    Score int    'json:\"doc_score\"' \n} \n\ntype queryResult struct { \n    Count int    'json:\"count\"' \n    Data  []docs 'json:\"data\"' \n} \n\nfunc queryLibrarian(endpoint string, stBytes io.Reader, ch chan<- queryResult) { \n    resp, err := http.Post( \n        endpoint+\"/query\", \n        \"application/json\", \n        stBytes, \n    ) \n    if err != nil { \n        common.Warn(fmt.Sprintf(\"%s -> %+v\", endpoint, err)) \n        ch <- queryResult{} \n        return \n    } \n    body, _ := ioutil.ReadAll(resp.Body) \n    defer resp.Body.Close() \n\n    var qr queryResult \n    json.Unmarshal(body, &qr) \n    log.Println(fmt.Sprintf(\"%s -> %#v\", endpoint, qr)) \n    ch <- qr \n} \n\nfunc getResultsMap(ch <-chan queryResult) map[string]int { \n    results := []docs{} \n    for range librarianEndpoints { \n        if result := <-ch; result.Count > 0 { \n            results = append(results, result.Data...) \n        } \n    } \n\n    resultsMap := map[string]int{} \n    for _, doc := range results { \n            docID := doc.DocID \n            score := doc.Score \n            if _, exists := resultsMap[docID]; !exists { \n                resultsMap[docID] = 0 \n            } \n            resultsMap[docID] = resultsMap[docID] + score \n        } \n\n    return resultsMap \n} \n\nfunc QueryHandler(w http.ResponseWriter, r *http.Request) { \n    if r.Method != \"POST\" { \n        w.WriteHeader(http.StatusMethodNotAllowed) \n        w.Write([]byte('{\"code\": 405, \"msg\": \"Method Not Allowed.\"}')) \n        return \n    } \n\n    decoder := json.NewDecoder(r.Body) \n    defer r.Body.Close() \n\n    var searchTerms []string \n    if err := decoder.Decode(&searchTerms); err != nil { \n        common.Warn(\"Unable to parse request.\" + err.Error()) \n\n        w.WriteHeader(http.StatusBadRequest) \n        w.Write([]byte('{\"code\": 400, \"msg\": \"Unable to parse payload.\"}')) \n        return \n    } \n\n    st, err := json.Marshal(searchTerms) \n    if err != nil { \n        panic(err) \n    } \n    stBytes := bytes.NewBuffer(st) \n\n    resultsCh := make(chan queryResult) \n\n    for _, le := range librarianEndpoints { \n        func(endpoint string) { \n            go queryLibrarian(endpoint, stBytes, resultsCh) \n        }(le) \n    } \n\n    resultsMap := getResultsMap(resultsCh) \n    close(resultsCh) \n\n    sortedResults := sortResults(resultsMap) \n\n    payload, _ := json.Marshal(sortedResults) \n    w.Header().Add(\"Content-Type\", \"application/json\") \n    w.Write(payload) \n\n    fmt.Printf(\"%#v\\n\", sortedResults) \n} \n\nfunc sortResults(rm map[string]int) []document { \n    scoreMap := map[int][]document{} \n    ch := make(chan document) \n\n    for docID, score := range rm { \n        if _, exists := scoreMap[score]; !exists { \n            scoreMap[score] = []document{} \n        } \n\n        dGetCh <- dMsg{ \n            DocID: docID, \n            Ch:    ch, \n        } \n        doc := <-ch \n\n        scoreMap[score] = append(scoreMap[score], doc) \n    } \n\n    close(ch) \n\n    scores := []int{} \n    for score := range scoreMap { \n        scores = append(scores, score) \n    } \n    sort.Sort(sort.Reverse(sort.IntSlice(scores))) \n\n    sortedResults := []document{} \n    for _, score := range scores { \n        resDocs := scoreMap[score] \n        sortedResults = append(sortedResults, resDocs...) \n    } \n    return sortedResults \n} \n```", "```go\nFROM golang:1.10 \n\nADD . /go/src/littlefs \n\nWORKDIR /go/src/littlefs \n\nRUN go install littlefs \n\nENTRYPOINT /go/bin/littlefs\n```", "```go\npackage main \n\nimport ( \n    \"log\" \n    \"net/http\" \n) \n\nfunc reqHandler(w http.ResponseWriter, r *http.Request) { \n    books := map[string]string{ \n        \"book1\": 'apple apple cat zebra', \n        \"book2\": 'banana cake zebra', \n        \"book3\": 'apple cake cake whale', \n    } \n\n    bookID := r.URL.Path[1:] \n    book, _ := books[bookID] \n    w.Write([]byte(book)) \n} \n\nfunc main() { \n\n    log.Println(\"Starting File Server on Port :9876...\") \n    http.HandleFunc(\"/\", reqHandler) \n    http.ListenAndServe(\":9876\", nil) \n} \n```", "```go\nversion: '3' \n\nservices: \n  a_m_librarian: \n    build: librarian/. \n    environment: \n      - API_PORT=${A_M_PORT} \n    ports: \n      - ${A_M_PORT}:${A_M_PORT} \n  n_z_librarian: \n      build: librarian/. \n      environment: \n        - API_PORT=${N_Z_PORT} \n      ports: \n        - ${N_Z_PORT}:${N_Z_PORT} \n  others_librarian: \n      build: librarian/. \n      environment: \n        - API_PORT=${OTHERS_PORT} \n      ports: \n        - ${OTHERS_PORT}:${OTHERS_PORT} \n  concierge: \n    build: concierge/. \n    environment: \n      - API_PORT=${CONCIERGE_PORT} \n      - LIB_A_M=http://a_m_librarian:${A_M_PORT}/api \n      - LIB_N_Z=http://n_z_librarian:${N_Z_PORT}/api \n      - LIB_OTHERS=http://others_librarian:${OTHERS_PORT}/api \n    ports: \n      - ${CONCIERGE_PORT}:${CONCIERGE_PORT} \n    links: \n      - a_m_librarian \n      - n_z_librarian \n      - others_librarian \n      - file_server \n  file_server: \n    build: simple-server/. \n    ports: \n      - ${SERVER_PORT}:${SERVER_PORT} \n```", "```go\nCONCIERGE_PORT=9090\nA_M_PORT=6060\nN_Z_PORT=7070\nOTHERS_PORT=8080\nSERVER_PORT=9876  \n```", "```go\n$ pwd GO-WORKSPACE/src/github.com/last-ent/distributed-go/chapter8/goophr $ docker-compose config services: a_m_librarian: build: context: /home/entux/Documents/Code/GO-WORKSPACE/src/github.com/last-ent/distributed-go/chapter8/goophr/librarian environment: API_PORT: '6060' ports: - 6060:6060/tcp concierge: build: context: /home/entux/Documents/Code/GO-WORKSPACE/src/github.com/last-ent/distributed-go/chapter8/goophr/concierge environment: API_PORT: '9090' LIB_A_M: http://a_m_librarian:6060/api LIB_N_Z: http://n_z_librarian:7070/api LIB_OTHERS: http://others_librarian:8080/api links: - a_m_librarian - n_z_librarian - others_librarian - file_server ports: - 9090:9090/tcp file_server: build: context: /home/entux/Documents/Code/GO-WORKSPACE/src/github.com/last-ent/distributed-go/chapter8/goophr/simple-server ports: - 9876:9876/tcp n_z_librarian: build: context: /home/entux/Documents/Code/GO-WORKSPACE/src/github.com/last-ent/distributed-go/chapter8/goophr/librarian environment: API_PORT: '7070' ports: - 7070:7070/tcp others_librarian: build: context: /home/entux/Documents/Code/GO-WORKSPACE/src/github.com/last-ent/distributed-go/chapter8/goophr/librarian environment: API_PORT: '8080' ports: - 8080:8080/tcp version: '3.0' \n```", "```go\n$ docker-compose up --build Building a_m_librarian ... Successfully built 31e0b1a7d3fc Building n_z_librarian ... Successfully built 31e0b1a7d3fc Building others_librarian ... Successfully built 31e0cdb1a7d3fc Building file_server ... Successfully built 244831d4b86a Building concierge ... Successfully built ba1167718d29 Starting goophr_a_m_librarian_1 ... Starting goophr_file_server_1 ... Starting goophr_a_m_librarian_1 Starting goophr_n_z_librarian_1 ... Starting goophr_others_librarian_1 ... Starting goophr_file_server_1 Starting goophr_n_z_librarian_1 Starting goophr_others_librarian_1 ... done Starting goophr_concierge_1 ... Starting goophr_concierge_1 ... done Attaching to goophr_a_m_librarian_1, goophr_n_z_librarian_1, goophr_file_server_1, goophr_others_librarian_1, goophr_concierge_1 a_m_librarian_1 | 2018/01/21 19:21:00 INFO - Adding API handlers... a_m_librarian_1 | 2018/01/21 19:21:00 INFO - Starting index... a_m_librarian_1 | 2018/01/21 19:21:00 INFO - Starting Goophr Librarian server on port :6060... n_z_librarian_1 | 2018/01/21 19:21:00 INFO - Adding API handlers... others_librarian_1 | 2018/01/21 19:21:01 INFO - Adding API handlers... others_librarian_1 | 2018/01/21 19:21:01 INFO - Starting index... others_librarian_1 | 2018/01/21 19:21:01 INFO - Starting Goophr Librarian server on port :8080... n_z_librarian_1 | 2018/01/21 19:21:00 INFO - Starting index... n_z_librarian_1 | 2018/01/21 19:21:00 INFO - Starting Goophr Librarian server on port :7070... file_server_1 | 2018/01/21 19:21:01 Starting File Server on Port :9876... concierge_1 | 2018/01/21 19:21:02 INFO - Adding API handlers... concierge_1 | 2018/01/21 19:21:02 INFO - Starting feeder... concierge_1 | 2018/01/21 19:21:02 INFO - Starting Goophr Concierge server on port :9090... \n```", "```go\n$ curl -LX POST -d '{\"url\":\"http://file_server:9876/book1\",\"title\":\"Book 1\"}' localhost:9090/api/feeder | jq && > curl -LX POST -d '{\"url\":\"http://file_server:9876/book2\",\"title\":\"Book 2\"}' localhost:9090/api/feeder | jq && > curl -LX POST -d '{\"url\":\"http://file_server:9876/book3\",\"title\":\"Book 3\"}' localhost:9090/api/feeder | jq % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 107 100 51 100 56 51 56 0:00:01 --:--:-- 0:00:01 104k { \"code\": 200, \"msg\": \"Request is being processed.\" } % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 107 100 51 100 56 51 56 0:00:01 --:--:-- 0:00:01 21400 { \"code\": 200, \"msg\": \"Request is being processed.\" } % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 107 100 51 100 56 51 56 0:00:01 --:--:-- 0:00:01 21400 { \"code\": 200, \"msg\": \"Request is being processed.\" } \n```", "```go\nn_z_librarian_1 | 2018/01/21 19:29:23 Token received api.tPayload{Token:\"zebra\", Title:\"Book 1\", DocID:\"6911b2295fd23c77fca7d739c00735b14cf80d3c\", LIndex:0, Index:3} concierge_1 | adding to librarian: zebra concierge_1 | adding to librarian: apple concierge_1 | adding to librarian: apple concierge_1 | adding to librarian: cat concierge_1 | 2018/01/21 19:29:23 INFO - Request was posted to Librairan. Msg:{\"code\": 200, \"msg\": \"Tokens are being added to index.\"} ... concierge_1 | 2018/01/21 19:29:23 INFO - Request was posted to Librairan. Msg:{\"code\": 200, \"msg\": \"Tokens are being added to index.\"} a_m_librarian_1 | 2018/01/21 19:29:23 Token received api.tPayload{Token:\"apple\", Title:\"Book 1\", DocID:\"6911b2295fd23c77fca7d739c00735b14cf80d3c\", LIndex:0, Index:0} ... n_z_librarian_1 | 2018/01/21 19:29:23 Token received api.tPayload{Token:\"zebra\", Title:\"Book 2\", DocID:\"fbf2b6c400680389459dff13283cb01dfe9be7d6\", LIndex:0, Index:2} concierge_1 | adding to librarian: zebra concierge_1 | adding to librarian: banana concierge_1 | adding to librarian: cake ... concierge_1 | adding to librarian: whale concierge_1 | adding to librarian: apple concierge_1 | adding to librarian: cake concierge_1 | adding to librarian: cake ... concierge_1 | 2018/01/21 19:29:23 INFO - Request was posted to Librairan. Msg:{\"code\": 200, \"msg\": \"Tokens are being added to index.\"} \n```", "```go\n$ curl -LX POST -d '[\"apple\"]' localhost:9090/api/query | jq \n % Total % Received % Xferd Average Speed Time Time Time Current \n Dload Upload Total Spent Left Speed \n100 124 100 115 100 9 115 9 0:00:01 --:--:-- 0:00:01 41333 \n[ \n { \n \"title\": \"Book 1\", \n \"url\": \"http://file_server:9876/book1\" \n }, \n { \n \"title\": \"Book 3\", \n \"url\": \"http://file_server:9876/book3\" \n } \n] \n\n```", "```go\nconcierge_1 | 2018/01/21 20:27:11 http://n_z_librarian:7070/api -> api.queryResult{Count:0, Data:[]api.docs{}}\nconcierge_1 | 2018/01/21 20:27:11 http://a_m_librarian:6060/api -> api.queryResult{Count:2, Data:[]api.docs{api.docs{DocID:\"7bded23abfac73630d247b6ad24370214fe1811c\", Score:2}, api.docs{DocID:\"3c9c56d31ccd51bc7ac0011020819ef38ccd74a4\", Score:1}}}\nconcierge_1 | []api.document{api.document{Doc:\"apple apple cat zebra\", Title:\"Book 1\", DocID:\"7bded23abfac73630d247b6ad24370214fe1811c\", URL:\"http://file_server:9876/book1\"}, api.document{Doc:\"apple cake cake whale\", Title:\"Book 3\", DocID:\"3c9c56d31ccd51bc7ac0011020819ef38ccd74a4\", URL:\"http://file_server:9876/book3\"}}\nconcierge_1 | 2018/01/21 20:27:11 http://others_librarian:8080/api -> api.queryResult{Count:0, Data:[]api.docs{}}\n\n```", "```go\n$ curl -LX POST -d '[\"cake\"]' localhost:9090/api/query | jq \n % Total % Received % Xferd Average Speed Time Time Time Current \n    Dload Upload Total Spent Left Speed \n100 123 100 115 100 8 115 8 0:00:01 --:--:-- 0:00:01 61500 \n[ \n { \n \"title\": \"Book 3\", \n \"url\": \"http://file_server:9876/book3\" \n }, \n { \n \"title\": \"Book 2\", \n \"url\": \"http://file_server:9876/book2\" \n } \n] \n```", "```go\nconcierge_1 | 2018/01/21 20:30:13 http://a_m_librarian:6060/api -> api.queryResult{Count:2, Data:[]api.docs{api.docs{DocID:\"3c9c56d31ccd51bc7ac0011020819ef38ccd74a4\", Score:2}, api.docs{DocID:\"28582e23c02ed3f14f8b4bdae97f91106273c0fc\", Score:1}}}\nconcierge_1 | 2018/01/21 20:30:13 ---------------------------\nconcierge_1 | 2018/01/21 20:30:13 WARN: http://others_librarian:8080/api -> Post http://others_librarian:8080/api/query: http: ContentLength=8 with Body length 0\nconcierge_1 | 2018/01/21 20:30:13 ---------------------------\nconcierge_1 | 2018/01/21 20:30:13 http://n_z_librarian:7070/api -> api.queryResult{Count:0, Data:[]api.docs{}}\nconcierge_1 | []api.document{api.document{Doc:\"apple cake cake whale\", Title:\"Book 3\", DocID:\"3c9c56d31ccd51bc7ac0011020819ef38ccd74a4\", URL:\"http://file_server:9876/book3\"}, api.document{Doc:\"banana cake zebra\", Title:\"Book 2\", DocID:\"28582e23c02ed3f14f8b4bdae97f91106273c0fc\", URL:\"http://file_server:9876/book2\"}}\n\n```", "```go\n$ curl -LX POST -d '[\"cake\", \"apple\"]' localhost:9090/api/query | jq \n % Total % Received % Xferd Average Speed Time Time Time Current \n Dload Upload Total Spent Left Speed \n100 189 100 172 100 17 172 17 0:00:01 --:--:-- 0:00:01 27000 \n[ \n { \n \"title\": \"Book 3\", \n \"url\": \"http://file_server:9876/book3\" \n }, \n { \n \"title\": \"Book 1\", \n \"url\": \"http://file_server:9876/book1\" \n }, \n { \n \"title\": \"Book 2\", \n \"url\": \"http://file_server:9876/book2\" \n } \n] \n```", "```go\nconcierge_1 | 2018/01/21 20:31:06 http://a_m_librarian:6060/api -> api.queryResult{Count:3, Data:[]api.docs{api.docs{DocID:\"3c9c56d31ccd51bc7ac0011020819ef38ccd74a4\", Score:3}, api.docs{DocID:\"7bded23abfac73630d247b6ad24370214fe1811c\", Score:2}, api.docs{DocID:\"28582e23c02ed3f14f8b4bdae97f91106273c0fc\", Score:1}}}\nconcierge_1 | 2018/01/21 20:31:06 http://n_z_librarian:7070/api -> api.queryResult{Count:0, Data:[]api.docs{}}\nconcierge_1 | 2018/01/21 20:31:06 ---------------------------\nconcierge_1 | 2018/01/21 20:31:06 WARN: http://others_librarian:8080/api -> Post http://others_librarian:8080/api/query: http: ContentLength=16 with Body length 0\nconcierge_1 | 2018/01/21 20:31:06 ---------------------------\nconcierge_1 | []api.document{api.document{Doc:\"apple cake cake whale\", Title:\"Book 3\", DocID:\"3c9c56d31ccd51bc7ac0011020819ef38ccd74a4\", URL:\"http://file_server:9876/book3\"}, api.document{Doc:\"apple apple cat zebra\", Title:\"Book 1\", DocID:\"7bded23abfac73630d247b6ad24370214fe1811c\", URL:\"http://file_server:9876/book1\"}, api.document{Doc:\"banana cake zebra\", Title:\"Book 2\", DocID:\"28582e23c02ed3f14f8b4bdae97f91106273c0fc\", URL:\"http://file_server:9876/book2\"}}\n```", "```go\n$ docker-compose logs concierge\nAttaching to goophr_concierge_1\nconcierge_1 | 2018/01/21 19:18:30 INFO - Adding API handlers...\nconcierge_1 | 2018/01/21 19:18:30 INFO - Starting feeder...\nconcierge_1 | 2018/01/21 19:18:30 INFO - Starting Goophr Concierge server on port :9090...\nconcierge_1 | 2018/01/21 19:21:02 INFO - Adding API handlers...\nconcierge_1 | 2018/01/21 19:21:02 INFO - Starting feeder...\nconcierge_1 | 2018/01/21 19:21:02 INFO - Starting Goophr Concierge server on port :9090...\nconcierge_1 | adding to librarian: zebra\nconcierge_1 | adding to librarian: apple\nconcierge_1 | adding to librarian: apple\nconcierge_1 | adding to librarian: cat\nconcierge_1 | 2018/01/21 19:25:40 INFO - Request was posted to Librairan. Msg:{\"code\": 200, \"msg\": \"Tokens are being added to index.\"}\nconcierge_1 | 2018/01/21 20:31:06 http://a_m_librarian:6060/api -> api.queryResult{Count:3, Data:[]api.docs{api.docs{DocID:\"3c9c56d31ccd51bc7ac0011020819ef38ccd74a4\", Score:3}, api.docs{DocID:\"7bded23abfac73630d247b6ad24370214fe1811c\", Score:2}, api.docs{DocID:\"28582e23c02ed3f14f8b4bdae97f91106273c0fc\", Score:1}}}\nconcierge_1 | 2018/01/21 20:31:06 http://n_z_librarian:7070/api -> api.queryResult{Count:0, Data:[]api.docs{}}\nconcierge_1 | 2018/01/21 20:31:06 ---------------------------\nconcierge_1 | 2018/01/21 20:31:06 WARN: http://others_librarian:8080/api -> Post http://others_librarian:8080/api/query: http: ContentLength=16 with Body length 0\nconcierge_1 | 2018/01/21 20:31:06 ---------------------------\nconcierge_1 | []api.document{api.document{Doc:\"apple cake cake whale\", Title:\"Book 3\", DocID:\"3c9c56d31ccd51bc7ac0011020819ef38ccd74a4\", URL:\"http://file_server:9876/book3\"}, api.document{Doc:\"apple apple cat zebra\", Title:\"Book 1\", DocID:\"7bded23abfac73630d247b6ad24370214fe1811c\", URL:\"http://file_server:9876/book1\"}, api.document{Doc:\"banana cake zebra\", Title:\"Book 2\", DocID:\"28582e23c02ed3f14f8b4bdae97f91106273c0fc\", URL:\"[http://file_server:9876/book2](http://file_server:9876/book2)\"}}\n```", "```go\n// secure/secure.go \npackage main \n\nimport ( \n    \"fmt\" \n    \"log\" \n    \"net/http\" \n    \"strings\" \n) \n\nvar authTokens = map[string]string{ \n    \"AUTH-TOKEN-1\": \"User 1\", \n    \"AUTH-TOKEN-2\": \"User 2\", \n} \n\n// getAuthorizedUser tries to retrieve user for the given token. \nfunc getAuthorizedUser(token string) (string, error) { \n    var err error \n\n    user, valid := authTokens[token] \n    if !valid { \n        err = fmt.Errorf(\"Auth token '%s' does not exist.\", token) \n    } \n\n    return user, err \n} \n\n// isAuthorized checks request to ensure that it has Authorization header \n// with defined value: \"Bearer AUTH-TOKEN\" \nfunc isAuthorized(r *http.Request) bool { \n    rawToken := r.Header[\"Authorization\"] \n    if len(rawToken) != 1 { \n        return false \n    } \n\n    authToken := strings.Split(rawToken[0], \" \") \n    if !(len(authToken) == 2 && authToken[0] == \"Bearer\") { \n        return false \n    } \n\n    user, err := getAuthorizedUser(authToken[1]) \n    if err != nil { \n        log.Printf(\"Error: %s\", err) \n        return false \n    } \n\n    log.Printf(\"Successful request made by '%s'\", user) \n    return true \n} \n\nvar success = []byte(\"Received authorized request.\") \nvar failure = []byte(\"Received unauthorized request.\") \n\nfunc requestHandler(w http.ResponseWriter, r *http.Request) { \n    if isAuthorized(r) { \n        w.Write(success) \n    } else { \n        w.WriteHeader(http.StatusUnauthorized) \n        w.Write(failure) \n    } \n} \n\nfunc main() { \n    http.HandleFunc(\"/\", requestHandler) \n    fmt.Println(\"Starting server @ http://localhost:8080\") \n    http.ListenAndServe(\":8080\", nil) \n} \n```", "```go\n// secure/secure_test.go \n\npackage main \n\nimport ( \n    \"net/http\" \n    \"net/http/httptest\" \n    \"testing\" \n) \n\nfunc TestIsAuthorizedSuccess(t *testing.T) { \n    req, err := http.NewRequest(\"GET\", \"http://example.com\", nil) \n    if err != nil { \n        t.Error(\"Unable to create request\") \n    } \n\n    req.Header[\"Authorization\"] = []string{\"Bearer AUTH-TOKEN-1\"} \n\n    if isAuthorized(req) { \n        t.Log(\"Request with correct Auth token was correctly processed.\") \n    } else { \n        t.Error(\"Request with correct Auth token failed.\") \n    } \n} \n\nfunc TestIsAuthorizedFailTokenType(t *testing.T) { \n    req, err := http.NewRequest(\"GET\", \"http://example.com\", nil) \n    if err != nil { \n        t.Error(\"Unable to create request\") \n    } \n\n    req.Header[\"Authorization\"] = []string{\"Token AUTH-TOKEN-1\"} \n\n    if isAuthorized(req) { \n        t.Error(\"Request with incorrect Auth token type was successfully processed.\") \n    } else { \n        t.Log(\"Request with incorrect Auth token type failed as expected.\") \n    } \n} \n\nfunc TestIsAuthorizedFailToken(t *testing.T) { \n    req, err := http.NewRequest(\"GET\", \"http://example.com\", nil) \n    if err != nil { \n        t.Error(\"Unable to create request\") \n    } \n\n    req.Header[\"Authorization\"] = []string{\"Token WRONG-AUTH-TOKEN\"} \n\n    if isAuthorized(req) { \n        t.Error(\"Request with incorrect Auth token was successfully processed.\") \n    } else { \n        t.Log(\"Request with incorrect Auth token failed as expected.\") \n    } \n} \n\nfunc TestRequestHandlerFailToken(t *testing.T) { \n    req, err := http.NewRequest(\"GET\", \"http://example.com\", nil) \n    if err != nil { \n        t.Error(\"Unable to create request\") \n    } \n\n    req.Header[\"Authorization\"] = []string{\"Token WRONG-AUTH-TOKEN\"} \n\n    // http.ResponseWriter it is an interface hence we use \n    // httptest.NewRecorder which implements the interface http.ResponseWriter \n    rr := httptest.NewRecorder() \n    requestHandler(rr, req) \n\n    if rr.Code == 401 { \n        t.Log(\"Request with incorrect Auth token failed as expected.\") \n    } else { \n        t.Error(\"Request with incorrect Auth token was successfully processed.\") \n    } \n} \n\nfunc TestGetAuthorizedUser(t *testing.T) { \n    if user, err := getAuthorizedUser(\"AUTH-TOKEN-2\"); err != nil { \n        t.Errorf(\"Couldn't find User 2\\. Error: %s\", err) \n    } else if user != \"User 2\" { \n        t.Errorf(\"Found incorrect user: %s\", user) \n    } else { \n        t.Log(\"Found User 2.\") \n    } \n} \n\nfunc TestGetAuthorizedUserFail(t *testing.T) { \n    if user, err := getAuthorizedUser(\"WRONG-AUTH-TOKEN\"); err == nil { \n        t.Errorf(\"Found user for invalid token!. User: %s\", user) \n    } else if err.Error() != \"Auth token 'WRONG-AUTH-TOKEN' does not exist.\" { \n        t.Errorf(\"Error message does not match.\") \n    } else { \n        t.Log(\"Got expected error message for invalid auth token\") \n    } \n} \n```", "```go\n$ go test -v ./... === RUN TestIsAuthorizedSuccess 2018/02/19 00:08:06 Successful request made by 'User 1' --- PASS: TestIsAuthorizedSuccess (0.00s) secure_test.go:18: Request with correct Auth token was correctly processed. === RUN TestIsAuthorizedFailTokenType --- PASS: TestIsAuthorizedFailTokenType (0.00s) secure_test.go:35: Request with incorrect Auth token type failed as expected. === RUN TestIsAuthorizedFailToken --- PASS: TestIsAuthorizedFailToken (0.00s) secure_test.go:50: Request with incorrect Auth token failed as expected. === RUN TestRequestHandlerFailToken --- PASS: TestRequestHandlerFailToken (0.00s) secure_test.go:68: Request with incorrect Auth token failed as expected. === RUN TestGetAuthorizedUser --- PASS: TestGetAuthorizedUser (0.00s) secure_test.go:80: Found User 2\\. === RUN TestGetAuthorizedUserFail --- PASS: TestGetAuthorizedUserFail (0.00s) secure_test.go:90: Got expected error message for invalid auth token PASS ok chapter8/secure 0.003s \n```"]