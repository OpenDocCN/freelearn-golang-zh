- en: Deploying Goophr
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署Goophr
- en: 'In [Chapter 6](../Text/Ch06.xhtml), *Goophr Concierge* and [Chapter 7](../Text/Ch07.xhtml),
    *Goophr Librarian*, we built two components of Goophr: Concierge and Librarian.
    We took time to understand the rationale behind the design of each of the components
    and how they are expected to work together.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](../Text/Ch06.xhtml)中，*Goophr Concierge*和[第7章](../Text/Ch07.xhtml)中，*Goophr
    Librarian*，我们构建了Goophr的两个组件：Concierge和Librarian。我们花时间了解了每个组件设计背后的原理，以及它们如何预期一起工作。
- en: 'In this chapter, we will conclude building Goophr by achieving the following
    objectives:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过实现以下目标来完成Goophr的构建：
- en: Update `concierge/api/query.go` so that Concierge can query multiple instances
    of Librarians for the search terms
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新`concierge/api/query.go`，以便Concierge可以查询多个Librarian实例的搜索词
- en: Update `docker-compose.yaml` so that we can run the complete Goophr system with
    little effort
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新`docker-compose.yaml`，以便我们可以轻松运行完整的Goophr系统
- en: Test the setup by adding documents to the index and querying the index via the
    REST API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过向索引添加文档并通过REST API查询索引来测试设置
- en: Updating Goophr Concierge
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新Goophr Concierge
- en: 'In order to make Concierge fully functional as per the design of Goophr, we
    need to do the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使Concierge按照Goophr的设计完全功能，我们需要执行以下操作：
- en: Request search results from multiple Librarians
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从多个Librarian请求搜索结果
- en: Rank the combined search results
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对组合搜索结果进行排名
- en: Let's discuss these points in detail.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细讨论这些要点。
- en: Handle multiple Librarians
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理多个Librarian
- en: The core functionality of Goophr Librarian is to update the index and return
    relevant `DocID`s based on the search terms. As we saw while implementing the
    codebase for Librarian, we need to update the index, retrieve relevant `DocID`s,
    and then, based on relevance, sort them before returning query results. Many operations
    are involved and a lot of maps are being used for lookups and updates. These operations
    might seem trivial. However, as the size of the lookup table (map) increases,
    the performance of operations on the lookup table will start to decline. In order
    to avoid such a decline in performance, many approaches can be taken.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Goophr Librarian的核心功能是更新索引并根据搜索词返回相关的`DocID`。正如我们在实现Librarian的代码库时所看到的，我们需要更新索引，检索相关的`DocID`，然后根据相关性对其进行排序，然后返回查询结果。涉及许多操作，并且在查找和更新时使用了许多映射。这些操作可能看起来微不足道。然而，随着查找表（映射）的大小增加，查找表上的操作性能将开始下降。为了避免性能下降，可以采取许多方法。
- en: 'Our primary goal is to understand distributed systems in the context of Go,
    and, for this reason, we will split Librarian to handle only a certain set of
    the index. Partitioning is one of the standard techniques used in databases, where
    the database is split into multiple partitions. In our case, we  we will have
    three instances of Librarian running, each of which is responsible for handling
    index for all tokens that are within character range, that are assigned to each
    of the partitions:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主要目标是在Go的上下文中理解分布式系统，因此，我们将拆分Librarian以仅处理一定范围的索引。分区是数据库中使用的标准技术之一，其中数据库被分成多个分区。在我们的情况下，我们将运行三个Librarian实例，每个实例负责处理分配给每个分区的字符范围内的所有令牌的索引：
- en: '`a_m_librarian`: Librarian responsible for tokens starting with character "A"
    to "M"'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a_m_librarian`：负责以字符“A”到“M”开头的令牌的图书管理员'
- en: '`n_z_librarian`: Librarian responsible for tokens starting with character "N"
    to "Z"'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`n_z_librarian`：负责以字符“N”到“Z”开头的令牌的图书管理员'
- en: '`others_librarian`: Librarian responsible for tokens starting with numbers'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`others_librarian`：负责以数字开头的令牌的图书管理员'
- en: Aggregated search results
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 聚合搜索结果
- en: 'The next step would be to aggregate results of the search terms from the multiple
    instances of Librarian and return them as a payload to the query request. This
    would require us to do the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步将是从多个Librarian实例聚合搜索词的结果，并将它们作为有效载荷返回给查询请求。这将要求我们执行以下操作：
- en: Get a list of the URLs for all of the Librarians available
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取所有可用图书管理员的URL列表
- en: Request search results from all the Librarians when a query is received
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在接收到查询时从所有Librarian请求搜索结果
- en: Aggregate search results based on `DocID`
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据`DocID`聚合搜索结果
- en: Sort the results in descending order of relevance score
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按相关性分数降序排序结果
- en: Form and return the JSON payload as per the Swagger API definition
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据Swagger API定义形成并返回JSON有效载荷
- en: Now that we understand the rationale behind having multiple instances of Librarian,
    and how we are going to handle queries based on this new configuration, we can
    apply these changes to `concierge/api/query.go`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了拥有多个Librarian实例的原因，以及我们将如何根据这个新配置处理查询，我们可以将这些更改应用到`concierge/api/query.go`中。
- en: Orchestrating with docker-compose
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用docker-compose进行编排
- en: 'We have been running the servers for Librarian and Concierge on our system''s
    localhost at hardcoded network port values. We haven''t faced any issues with
    it so far. However, when we consider that we will be running three instances of
    Librarian, requiring to connect all of them to Concierge and be able to easily
    start and monitor the servers, we realize that there are a lot of moving parts.
    This can lead to unnecessary errors while operating the system. In order to make
    our life easy, we can rely on `docker-compose`, which will take care of all this
    complexity for us. All we have to do is define a configuration YAML file called
    `docker-compose.yaml` that will provide the following information:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在我们系统的localhost上以硬编码的网络端口值运行Librarian和Concierge的服务器。到目前为止，我们还没有遇到任何问题。然而，当我们考虑到我们将运行三个Librarian实例，需要连接所有这些实例到Concierge并且能够轻松地启动和监视服务器时，我们意识到有很多移动部分。这可能导致在操作系统时出现不必要的错误。为了让我们的生活变得更轻松，我们可以依赖于`docker-compose`，它将为我们处理所有这些复杂性。我们所要做的就是定义一个名为`docker-compose.yaml`的配置YAML文件，其中包含以下信息：
- en: Identify the services we want to run together
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定我们想要一起运行的服务
- en: The location or name of the respective Dockerfile or Docker image for every
    service defined in the YAML file so that we can build Docker images for all of
    them and run them as containers
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在YAML文件中为每个服务定义的相应的Dockerfile或Docker镜像的位置或名称，以便我们可以为所有这些服务构建Docker镜像并将它们作为容器运行
- en: Ports to expose for each of the running containers
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要为每个正在运行的容器公开的端口
- en: Any further environment variables we might want to inject into our server instances
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可能想要注入到我们的服务器实例中的任何其他环境变量
- en: Ensure that Concierge's container has access to all other running containers
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保Concierge容器可以访问所有其他正在运行的容器
- en: Environment variables and API ports
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 环境变量和API端口
- en: We mentioned that we will specify the port we want each of the containers to
    run on in `docker-compose.yaml`. However, we also need to update `{concierge,librarian}/main.go`
    so that they can start the servers at ports defined by environment variables.
    We will also need to update `concierge/query.go` so that it can access the Librarian
    instances on URLs and ports as defined by `docker-compose`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提到我们将在`docker-compose.yaml`中指定我们希望每个容器运行的端口。但是，我们还需要更新`{concierge,librarian}/main.go`，以便它们可以在环境变量定义的端口上启动服务器。我们还需要更新`concierge/query.go`，以便它可以访问由`docker-compose`定义的URL和端口上的Librarian实例。
- en: The file server
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文件服务器
- en: In order to quickly test our setup by loading documents into the indexes, to
    be able to query the system and validate the query results, we will also be including
    a simple HTTP server that serves documents containing a few words.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了通过将文档加载到索引中快速测试我们的设置，以便能够查询系统并验证查询结果，我们还将包括一个简单的HTTP服务器，用于提供包含几个单词的文档。
- en: The Goophr source code
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Goophr源代码
- en: In the previous two chapters, [Chapter 6](../Text/Ch06.xhtml), *Goophr Concierge*
    and [Chapter 7](../Text/Ch07.xhtml), *Goophr Librarian*, we discussed the code
    for Concierge and Librarian respectively. In order to run the complete Goophr
    application using `docker-compose`, we will need to merge the codebases of both
    Librarian and Concierge into a single codebase. The codebase will also include
    `docker-compose.yaml` and code for the file server.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两章中，[第6章](../Text/Ch06.xhtml) *Goophr Concierge* 和 [第7章](../Text/Ch07.xhtml)
    *Goophr Librarian*，我们分别讨论了Concierge和Librarian的代码。为了使用`docker-compose`运行完整的Goophr应用程序，我们需要将Librarian和Concierge的代码库合并为一个单一的代码库。代码库还将包括`docker-compose.yaml`和文件服务器的代码。
- en: 'In this chapter, we will not list the code for all the files in Librarian and
    Concierge but only the files with changes. Let''s start by looking at the structure
    of the complete project:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们不会列出Librarian和Concierge中所有文件的代码，而只列出有更改的文件。让我们先看一下完整项目的结构：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: librarian/main.go
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: librarian/main.go
- en: 'We want to allow the Librarian to start on a custom port based on the environment
    variable, `API_PORT`, passed to it:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望允许Librarian根据传递给它的环境变量`API_PORT`在自定义端口上启动：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: concierge/main.go
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: concierge/main.go
- en: 'Allow Concierge to start on a custom port based on the environment variable,
    `API_PORT`, passed to it:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 允许Concierge根据传递给它的环境变量`API_PORT`在自定义端口上启动：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: concierge/api/query.go
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: concierge/api/query.go
- en: 'Query all the available Librarian instances to retrieve search query results,
    rank them in order, and then send back the results:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 查询所有可用的Librarian实例以检索搜索查询结果，按顺序对其进行排名，然后将结果发送回去：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: simple-server/Dockerfile
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: simple-server/Dockerfile
- en: 'Let''s use `Dockerfile` to create a simple file server:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`Dockerfile`来创建一个简单的文件服务器：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: simple-server/main.go
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: simple-server/main.go
- en: 'Let''s look at a simple program that returns a set of words as an HTTP response
    based on `bookID`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个简单的程序，根据`bookID`返回一组单词作为HTTP响应：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: docker-compose.yaml
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: docker-compose.yaml
- en: This file will allow us to build, run, connect and stop our containers from
    a single interface.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件将允许我们从单个界面构建、运行、连接和停止我们的容器。
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Linked services can be referred to using the service name as the domain name.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用服务名称作为域名来引用链接的服务。
- en: .env
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: .env
- en: '`.env` is used within `docker-compose.yaml` to load template variables. It
    follows the format of `<template-variable>=<value>`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`.env`在`docker-compose.yaml`中用于加载模板变量。它遵循`<template-variable>=<value>`的格式：'
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can view the `docker-compose.yaml` with substituted values by running the
    following command:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过运行以下命令查看替换值后的`docker-compose.yaml`：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Running Goophr with docker-compose
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用docker-compose运行Goophr
- en: 'Now that we have everything in place, let''s start the complete application:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备就绪，让我们启动完整的应用程序：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Adding documents to Goophr
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向Goophr添加文档
- en: 'Since we have three documents in our file server, we can add them to Goophr
    using the following `curl` commands:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的文件服务器中有三个文档，我们可以使用以下`curl`命令将它们添加到Goophr中：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following are the logs for the preceding cURL requests as seen by `docker-compose`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是由`docker-compose`看到的前述cURL请求的日志：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Searching for keywords with Goophr
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Goophr搜索关键词
- en: 'Now that we have the complete application running and some documents in the
    index, let''s test it by searching for some of the keywords. The following is
    the list of terms we will be searching for and the expected order:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经运行了完整的应用程序并且索引中有一些文档，让我们通过搜索一些关键词来测试它。以下是我们将要搜索的术语列表以及预期的顺序：
- en: '**"apple"** - book1 (score: 2), book 3 (score: 1)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**"apple"** - book1 (score: 2), book 3 (score: 1)'
- en: '**"cake"** - book 3 (score: 2), book 2 (score: 1)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**"cake"** - book 3 (score: 2), book 2 (score: 1)'
- en: '**"apple"**, "**cake"** - book 3 (score 3), book 1 (score: 2), book 2 (score:
    1)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**"apple"**, "**cake"** - book 3 (score 3), book 1 (score: 2), book 2 (score:
    1)'
- en: Search – "apple"
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 搜索 – "apple"
- en: 'Let us search for `"apple"` alone using the cURL command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用cURL命令单独搜索`"apple"`：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following are the `docker-compose` logs when we search for `"apple"`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们搜索`"apple"`时，以下是`docker-compose`的日志：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Search – "cake"
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 搜索 – "cake"
- en: 'Let us search for `"cake"` alone using the cURL command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用cURL命令单独搜索`"cake"`：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following are the `docker-compose` logs when we search for `"cake"`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们搜索`"cake"`时，以下是`docker-compose`的日志：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Search – "apple", "cake"
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 搜索 – "apple", "cake"
- en: 'Let us search for `"apple"` and `"cake"` together using the cURL command:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用cURL命令一起搜索`"apple"`和`"cake"`：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following are the `docker-compose` logs when we search for `"apple"` and `"cake"`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们搜索“apple”和“cake”时，以下是`docker-compose`日志：
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Individual logs with docker-compose
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用docker-compose的个人日志
- en: 'We can also view logs of each service separately. The following are the logs
    for Concierge:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以单独查看每个服务的日志。以下是礼宾的日志：
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Authorization on a web server
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Web服务器上的授权
- en: Our search application trusts every incoming request. However, sometimes restricting
    access might be the right way to go. It would be desirable if, for every incoming
    request, we could accept and identify requests from certain users. This can be
    achieved using **authorization tokens** (**auth tokens**). An auth token is a
    secret code/phrase sent in the header for the key, **Authorization**.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的搜索应用程序信任每个传入的请求。然而，有时限制访问可能是正确的方式。如果对每个传入请求都能够接受和识别来自某些用户的请求，那将是可取的。这可以通过**授权令牌**（**auth
    tokens**）来实现。授权令牌是在标头中发送的秘密代码/短语，用于密钥**Authorization**。
- en: Authorization and auth tokens are deep and important topics. It would not be
    possible to cover the complexity of the subject in this section. Instead, we will
    build a simple server that will make use of auth tokens to accept or reject a
    request. Let us look at the source code.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 授权和认证令牌是深奥而重要的话题。在本节中不可能涵盖主题的复杂性。相反，我们将构建一个简单的服务器，该服务器将利用认证令牌来接受或拒绝请求。让我们看看源代码。
- en: secure/secure.go
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: secure/secure.go
- en: '`secure.go` shows the logic for the simple server. It has been divided into
    four functions:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`secure.go`显示了简单服务器的逻辑。它已分为四个函数：'
- en: The `requestHandler` function to respond to incoming HTTP requests.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`requestHandler`函数用于响应传入的HTTP请求。'
- en: The `isAuthorized` function to check if the incoming request is authorized.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isAuthorized`函数用于检查传入请求是否经过授权。'
- en: The `getAuthorizedUser` function to check if the token has an associated user.
    If the token does not have an associated user, then the token is considered to
    be invalid.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getAuthorizedUser`函数用于检查令牌是否有关联用户。如果令牌没有关联用户，则认为令牌无效。'
- en: The `main` function to start the server.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main`函数用于启动服务器。'
- en: 'Now let''s look at the code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看代码：
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: secure/secure_test.go
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: secure/secure_test.go
- en: 'Next, we will try to test the logic we have written in `secure.go` using unit
    tests. A good practice is to test each of the functions for all possible cases
    of success and failure. The test names explain the intent of the test, so let''s
    look at the code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将尝试使用单元测试测试我们在`secure.go`中编写的逻辑。一个好的做法是测试每个函数的所有可能的成功和失败情况。测试名称解释了测试的意图，所以让我们看看代码：
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Test results
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试结果
- en: 'Finally, let us run the tests and see if they produce the expected results:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们运行测试，看看它们是否产生了预期的结果：
- en: '[PRE21]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we started by trying to understand why we need to run multiple
    instances of Goophr Librarian. Next, we looked at how to implement the updated `concierge/api/query.go` so
    that it can work with multiple instances of Librarian. Then we looked into why
    using `docker-compose` to orchestrate the application might be a good idea and
    what may be the various factors to keep in mind to make it work. We also updated
    the Librarian and Concierge codebase so that they would work seamlessly with `docker-compose`.
    Finally, we tested the complete application using a few small documents and reasoning
    about the expected order of results.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先尝试理解为什么需要运行多个Goophr图书管理员实例。接下来，我们看了如何实现更新的`concierge/api/query.go`，以便它可以与多个图书管理员实例一起工作。然后，我们研究了使用`docker-compose`编排应用程序可能是一个好主意的原因，以及使其工作的各种因素。我们还更新了图书管理员和礼宾代码库，以便它们可以与`docker-compose`无缝工作。最后，我们使用一些小文档测试了完整的应用程序，并推理了预期结果的顺序。
- en: We were able to orchestrate all the servers we needed to run the complete Goophr
    application on our local machine using `docker-compose`. However, designing the
    architecture of a resilient web application to withstand heavy user traffic on
    the internet can be quite challenging. [Chapter 9](../Text/Ch09.xhtml), *Foundations
    of Web Scale Architecture* tries to address this issue by providing some basic
    knowledge of things to take into consideration while designing for the web.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能够使用`docker-compose`在本地机器上编排运行完整的Goophr应用程序所需的所有服务器。然而，在互联网上设计一个能够承受大量用户流量的弹性Web应用程序的架构可能会非常具有挑战性。[第9章](../Text/Ch09.xhtml)，*Web规模架构的基础*试图通过提供一些关于在Web设计时需要考虑的基本知识来解决这个问题。
