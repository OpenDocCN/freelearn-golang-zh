["```go\ntype Athlete struct{} \n\nfunc (a *Athlete) Train() { \n  fmt.Println(\"Training\") \n} \n\n```", "```go\ntype CompositeSwimmerA struct{ \n  MyAthlete Athlete \n  MySwim func() \n} \n\n```", "```go\nfunc Swim(){ \n  fmt.Println(\"Swimming!\") \n} \n\n```", "```go\nswimmer := CompositeSwimmerA{ \n  MySwim: Swim, \n} \n\nswimmer.MyAthlete.Train() \nswimmer.MySwim() \n\n```", "```go\n$ go run main.go\nTraining\nSwimming!\n\n```", "```go\ntype CompositeSwimmerA struct{ \n  MyAthlete Athlete \n  MySwim    func() \n} \n\n```", "```go\nlocalSwim := Swim \n\nswimmer := CompositeSwimmerA{ \n  MySwim: localSwim, \n} \n\nswimmer.MyAthlete.Train() \nswimmer.MySwim () \n\n```", "```go\ntype Animal struct{} \n\nfunc (r *Animal)Eat() { \n  println(\"Eating\") \n} \n\n```", "```go\ntype Shark struct{ \n  Animal \n  Swim func() \n} \n\n```", "```go\nfish := Shark{ \n  Swim: Swim, \n} \n\nfish.Eat() \nfish.Swim() \n\n```", "```go\n$ go run main.go \nEating \nSwimming!\n\n```", "```go\ntype Swimmer interface { \n  Swim() \n} \ntype Trainer interface { \n  Train() \n} \n\ntype SwimmerImpl struct{} \nfunc (s *SwimmerImpl) Swim(){ \n  println(\"Swimming!\") \n} \n\ntype CompositeSwimmerB struct{ \n  Trainer \n  Swimmer \n} \n\n```", "```go\nswimmer := CompositeSwimmerB{ \n  &Athlete{}, \n  &SwimmerImpl{}, \n} \n\nswimmer.Train() \nswimmer.Swim() \n\n```", "```go\n$ go run main.go\nTraining\nSwimming!\n\n```", "```go\ntype Tree struct { \n  LeafValue int \n  Right     *Tree \n  Left      *Tree \n} \n\n```", "```go\nroot := Tree{ \n  LeafValue: 0, \n  Right:&Tree{ \n    LeafValue: 5, \n    Right: &1Tree{ 6, nil, nil }, \n    Left: nil, \n  }, \n  Left:&Tree{ 4, nil, nil }, \n} \n\n```", "```go\nfmt.Println(root.Right.Right.LeafValue) \n\n$ go run main.go \n6\n\n```", "```go\ntype Parent struct { \n  SomeField int \n} \n\ntype Son struct { \n  Parent \n} \n\n```", "```go\nfunc GetParentField(p *Parent) int{ \n  fmt.Println(p.SomeField) \n} \n\n```", "```go\ncannot use son (type Son) as type Parent in argument to GetParentField\n\n```", "```go\ntype Son struct { \n  P Parent \n} \n\n```", "```go\nson := Son{} \nGetParentField(son.P) \n\n```", "```go\ntype LegacyPrinter interface { \n  Print(s string) string \n} \ntype MyLegacyPrinter struct {} \n\nfunc (l *MyLegacyPrinter) Print(s string) (newMsg string) { \n  newMsg = fmt.Sprintf(\"Legacy Printer: %s\\n\", s) \n  println(newMsg) \n  return \n} \n\n```", "```go\ntype ModernPrinter interface { \n  PrintStored() string \n} \n\n```", "```go\ntype PrinterAdapter struct{ \n  OldPrinter LegacyPrinter \n  Msg        string \n} \nfunc(p *PrinterAdapter) PrintStored() (newMsg string) { \n  return \n} \n\n```", "```go\nfunc TestAdapter(t *testing.T){ \n  msg := \"Hello World!\" \n\n```", "```go\nadapter := PrinterAdapter{OldPrinter: &MyLegacyPrinter{}, Msg: msg} \n\n```", "```go\nreturnedMsg := adapter.PrintStored() \n\nif returnedMsg != \"Legacy Printer: Adapter: Hello World!\\n\" { \n  t.Errorf(\"Message didn't match: %s\\n\", returnedMsg) \n} \n\n```", "```go\nadapter = PrinterAdapter{OldPrinter: nil, Msg: msg} \nreturnedMsg = adapter.PrintStored() \n\nif returnedMsg != \"Hello World!\" { \n  t.Errorf(\"Message didn't match: %s\\n\", returnedMsg) \n} \n\n```", "```go\n$ go test -v .\n=== RUN   TestAdapter\n--- FAIL: TestAdapter (0.00s)\n adapter_test.go:11: Message didn't match: \n adapter_test.go:17: Message didn't match: \nFAIL\nexit status 1\nFAIL\n\n```", "```go\ntype PrinterAdapter struct{ \n  OldPrinter LegacyPrinter \n  Msg        string \n} \n\nfunc(p *PrinterAdapter) PrintStored() (newMsg string) { \n  if p.OldPrinter != nil { \n    newMsg = fmt.Sprintf(\"Adapter: %s\", p.Msg) \n    newMsg = p.OldPrinter.Print(newMsg) \n  } \n  else { \n    newMsg = p.Msg \n  } \nreturn \n} \n\n```", "```go\n$ go test -v .\n=== RUN   TestAdapter\nLegacy Printer: Adapter: Hello World!\n--- PASS: TestAdapter (0.00s)\nPASS\nok\n\n```", "```go\npackage main \n\nimport ( \n    \"fmt\" \n    \"log\" \n    \"net/http\" \n) \ntype MyServer struct{ \n  Msg string \n} \nfunc (m *MyServer) ServeHTTP(w http.ResponseWriter,r *http.Request){ \n  fmt.Fprintf(w, \"Hello, World\") \n} \n\nfunc main() { \n  server := &MyServer{ \n  Msg:\"Hello, World\", \n} \n\nhttp.Handle(\"/\", server)  \nlog.Fatal(http.ListenAndServe(\":8080\", nil)) \n} \n\n```", "```go\ntype Handler interface { \n  ServeHTTP(ResponseWriter, *Request) \n} \n\n```", "```go\nfunc main() { \n  http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) { \n    fmt.Fprintf(w, \"Hello, World\") \n  }) \n\n  log.Fatal(http.ListenAndServe(\":8080\", nil)) \n} \n\n```", "```go\ntype HandlerFunc func(ResponseWriter, *Request) \n\nfunc (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) { \n  f(w, r) \n} \n\n```", "```go\ntype Reader interface { \n  Read(p []byte) (n int, err error) \n} \n\ntype Writer interface { \n  Write(p []byte) (n int, err error) \n} \n\n```", "```go\ntype Counter struct {} \nfunc (f *Counter) Count(n uint64) uint64 { \n  if n == 0 { \n    println(strconv.Itoa(0)) \n    return 0 \n  } \n\n  cur := n \n  println(strconv.FormatUint(cur, 10)) \n  return f.Count(n - 1) \n} \n\n```", "```go\n3\n2\n1\n\n```", "```go\ntype Counter struct { \n  Writer io.Writer \n} \nfunc (f *Counter) Count(n uint64) uint64 { \n  if n == 0 { \n    f.Writer.Write([]byte(strconv.Itoa(0) + \"\\n\")) \n    return 0 \n  } \n\n  cur := n \n  f.Writer.Write([]byte(strconv.FormatUint(cur, 10) + \"\\n\")) \n  return f.Count(n - 1) \n}\n\n```", "```go\npipeReader, pipeWriter := io.Pipe() \ndefer pw.Close() \ndefer pr.Close() \n\ncounter := Counter{ \n  Writer: pipeWriter, \n} \n\n```", "```go\ntee := io.TeeReader(pipeReader, file) \n\n```", "```go\ngo func(){ \n  io.Copy(os.Stdout, tee) \n}() \n\n```", "```go\ncounter.Count(5) \n\n```", "```go\n$ go run counter.go\n5\n4\n3\n2\n1\n0\n\n```", "```go\n$ cat /tmp/pipe\n5\n4\n3\n2\n1\n0\n\n```", "```go\ntype PrinterAPI interface { \n  PrintMessage(string) error \n} \n\n```", "```go\ntype PrinterImpl1 struct{} \n\nfunc (p *PrinterImpl1) PrintMessage(msg string) error { \n  return errors.New(\"Not implemented yet\") \n} \n\n```", "```go\nfunc TestPrintAPI1(t *testing.T){ \n  api1 := PrinterImpl1{} \n\n  err := api1.PrintMessage(\"Hello\") \n  if err != nil { \n    t.Errorf(\"Error trying to use the API1 implementation: Message: %s\\n\", err.Error()) \n  } \n} \n\n```", "```go\n$ go test -v -run=TestPrintAPI1 . \n=== RUN   TestPrintAPI1 \n--- FAIL: TestPrintAPI1 (0.00s) \n        bridge_test.go:14: Error trying to use the API1 implementation: Message: Not implemented yet \nFAIL \nexit status 1 \nFAIL    _/C_/Users/mario/Desktop/go-design-patterns/structural/bridge/traditional\n\n```", "```go\ntype PrinterImpl2 struct{ \n  Writer io.Writer \n} \n\nfunc (d *PrinterImpl2) PrintMessage(msg string) error { \n  return errors.New(\"Not implemented yet\") \n} \n\n```", "```go\ntype TestWriter struct { \n  Msg string \n} \n\nfunc (t *TestWriter) Write(p []byte) (n int, err error) { \n  n = len(p) \n  if n > 0 { \n    t.Msg = string(p) \n    return n, nil \n  } \n  err = errors.New(\"Content received on Writer was empty\") \n  return \n} \n\n```", "```go\nfunc TestPrintAPI2(t *testing.T){ \n  api2 := PrinterImpl2{} \n\n  err := api2.PrintMessage(\"Hello\") \n  if err != nil { \n    expectedErrorMessage := \"You need to pass an io.Writer to PrinterImpl2\" \n    if !strings.Contains(err.Error(), expectedErrorMessage) { \n      t.Errorf(\"Error message was not correct.\\n \n      Actual: %s\\nExpected: %s\\n\", err.Error(), expectedErrorMessage) \n    } \n  } \n\n```", "```go\n  testWriter := TestWriter{} \n  api2 = PrinterImpl2{ \n    Writer: &testWriter, \n  } \n\n  expectedMessage := \"Hello\" \n  err = api2.PrintMessage(expectedMessage) \n  if err != nil { \n    t.Errorf(\"Error trying to use the API2 implementation: %s\\n\", err.Error()) \n  } \n\n  if testWriter.Msg !=  expectedMessage { \n    t.Fatalf(\"API2 did not write correctly on the io.Writer. \\n  Actual: %s\\nExpected: %s\\n\", testWriter.Msg, expectedMessage) \n  } \n} \n\n```", "```go\n$ go test -v -run=TestPrintAPI2 .\n=== RUN   TestPrintAPI2\n--- FAIL: TestPrintAPI2 (0.00s)\nbridge_test.go:39: Error message was not correct.\nActual: Not implemented yet\nExpected: You need to pass an io.Writer to PrinterImpl2\nbridge_test.go:52: Error trying to use the API2 implementation: Not \nimplemented yet\nbridge_test.go:57: API2 did not write correctly on the io.Writer.\nActual:\nExpected: Hello\nFAIL\nexit status 1\nFAIL\n\n```", "```go\ntype PrinterAbstraction interface { \n  Print() error \n} \n\n```", "```go\ntype NormalPrinter struct { \n  Msg     string \n  Printer PrinterAPI \n} \n\nfunc (c *NormalPrinter) Print() error { \n  return errors.New(\"Not implemented yet\") \n} \n\n```", "```go\nfunc TestNormalPrinter_Print(t *testing.T) { \n  expectedMessage := \"Hello io.Writer\" \n\n  normal := NormalPrinter{ \n    Msg:expectedMessage, \n    Printer: &PrinterImpl1{}, \n  } \n\n  err := normal.Print() \n  if err != nil { \n    t.Errorf(err.Error()) \n  } \n} \n\n```", "```go\n  testWriter := TestWriter{} \n  normal = NormalPrinter{ \n    Msg: expectedMessage, \n    Printer: &PrinterImpl2{ \n      Writer:&testWriter, \n    }, \n  } \n\n  err = normal.Print() \n  if err != nil { \n    t.Error(err.Error()) \n  } \n\n  if testWriter.Msg != expectedMessage { \n    t.Errorf(\"The expected message on the io.Writer doesn't match actual.\\n  Actual: %s\\nExpected: %s\\n\", testWriter.Msg, expectedMessage) \n  } \n} \n\n```", "```go\n$ go test -v -run=TestNormalPrinter_Print .\n=== RUN   TestNormalPrinter_Print\n--- FAIL: TestNormalPrinter_Print (0.00s)\n bridge_test.go:72: Not implemented yet\n bridge_test.go:85: Not implemented yet\n bridge_test.go:89: The expected message on the io.Writer doesn't match actual.\n Actual:\n Expected: Hello io.Writer\nFAIL\nexit status 1\nFAIL\n\n```", "```go\ntype PacktPrinter struct { \n  Msg     string \n  Printer PrinterAPI \n} \n\nfunc (c *PacktPrinter) Print() error { \n  return errors.New(\"Not implemented yet\") \n} \n\n```", "```go\nfunc TestPacktPrinter_Print(t *testing.T) { \n  passedMessage := \"Hello io.Writer\" \n  expectedMessage := \"Message from Packt: Hello io.Writer\" \n\n  packt := PacktPrinter{ \n    Msg:passedMessage, \n    Printer: &PrinterImpl1{}, \n  } \n\n  err := packt.Print() \n  if err != nil { \n    t.Errorf(err.Error()) \n  } \n\n  testWriter := TestWriter{} \n  packt = PacktPrinter{ \n    Msg: passedMessage, \n    Printer:&PrinterImpl2{ \n      Writer:&testWriter, \n    }, \n  } \n\n  err = packt.Print() \n  if err != nil { \n    t.Error(err.Error()) \n  } \n\n  if testWriter.Msg != expectedMessage { \n    t.Errorf(\"The expected message on the io.Writer doesn't match actual.\\n  Actual: %s\\nExpected: %s\\n\", testWriter.Msg,expectedMessage) \n  } \n} \n\n```", "```go\n$ go test -v -run=TestPacktPrinter_Print .\n=== RUN   TestPacktPrinter_Print\n--- FAIL: TestPacktPrinter_Print (0.00s)\n bridge_test.go:104: Not implemented yet\n bridge_test.go:117: Not implemented yet\n bridge_test.go:121: The expected message on the io.Writer d\noesn't match actual.\n Actual:\n Expected: Message from Packt: Hello io.Writer\nFAIL\nexit status 1\nFAIL\n\n```", "```go\ntype PrinterImpl1 struct{} \nfunc (d *PrinterImpl1) PrintMessage(msg string) error { \n  fmt.Printf(\"%s\\n\", msg) \n  return nil \n} \n\n```", "```go\n$ go test -v -run=TestPrintAPI1 .\n=== RUN   TestPrintAPI1\nHello\n--- PASS: TestPrintAPI1 (0.00s)\nPASS\nok\n\n```", "```go\ntype PrinterImpl2 struct { \n  Writer io.Writer \n} \n\nfunc (d *PrinterImpl2) PrintMessage(msg string) error { \n  if d.Writer == nil { \n    return errors.New(\"You need to pass an io.Writer to PrinterImpl2\") \n  } \n\n  fmt.Fprintf(d.Writer, \"%s\", msg) \n  return nil \n} \n\n```", "```go\n$ go test -v -run=TestPrintAPI2 .\n=== RUN   TestPrintAPI2\n--- PASS: TestPrintAPI2 (0.00s)\nPASS\nok\n\n```", "```go\ntype NormalPrinter struct { \n  Msg     string \n  Printer PrinterAPI \n} \n\nfunc (c *NormalPrinter) Print() error { \n  c.Printer.PrintMessage(c.Msg) \n  return nil \n}\n```", "```go\n$ go test -v -run=TestNormalPrinter_Print . \n=== RUN   TestNormalPrinter_Print \nHello io.Writer \n--- PASS: TestNormalPrinter_Print (0.00s) \nPASS \nok\n\n```", "```go\ntype PacktPrinter struct { \n  Msg     string \n  Printer PrinterAPI \n} \n\nfunc (c *PacktPrinter) Print() error { \n  c.Printer.PrintMessage(fmt.Sprintf(\"Message from Packt: %s\", c.Msg)) \n  return nil \n} \n\n```", "```go\n$ go test -v -run=TestPacktPrinter_Print .\n=== RUN   TestPacktPrinter_Print\nMessage from Packt: Hello io.Writer\n--- PASS: TestPacktPrinter_Print (0.00s)\nPASS\nok\n\n```", "```go\n$ go test -cover .\nok      \n2.622s  coverage: 100.0% of statements\n\n```"]