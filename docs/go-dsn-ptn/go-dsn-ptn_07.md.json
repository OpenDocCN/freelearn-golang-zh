["```go\npackage visitor \n\nimport ( \n  \"io\" \n  \"os\" \n  \"fmt\" \n) \n\ntype MessageA struct { \n  Msg string \n  Output io.Writer \n} \n\ntype MessageB struct { \n  Msg string \n  Output io.Writer \n} \n\ntype Visitor interface { \n  VisitA(*MessageA) \n  VisitB(*MessageB) \n} \n\ntype Visitable interface { \n  Accept(Visitor) \n} \n\ntype MessageVisitor struct {} \n\n```", "```go\npackage visitor \n\nimport \"testing\" \n\ntype TestHelper struct { \n  Received string \n} \n\nfunc (t *TestHelper) Write(p []byte) (int, error) { \n  t.Received = string(p) \n  return len(p), nil \n} \n\n```", "```go\nfunc Test_Overall(t *testing.T) { \n  testHelper := &TestHelper{} \n  visitor := &MessageVisitor{} \n  ... \n} \n\n```", "```go\nfunc Test_Overall(t *testing.T) { \n  testHelper := &TestHelper{} \n  visitor := &MessageVisitor{} \n\n  t.Run(\"MessageA test\", func(t *testing.T){ \n    msg := MessageA{ \n      Msg: \"Hello World\", \n      Output: testHelper, \n    } \n\n    msg.Accept(visitor) \n    msg.Print() \n\n    expected := \"A: Hello World (Visited A)\" \n    if testHelper.Received !=  expected { \n      t.Errorf(\"Expected result was incorrect. %s != %s\", \n      testHelper.Received, expected) \n    } \n  }) \n  ... \n} \n\n```", "```go\n  t.Run(\"MessageB test\", func(t *testing.T){ \n    msg := MessageB { \n      Msg: \"Hello World\", \n      Output: testHelper, \n    } \n\n    msg.Accept(visitor) \n    msg.Print() \n\n    expected := \"B: Hello World (Visited B)\" \n    if testHelper.Received !=  expected { \n      t.Errorf(\"Expected result was incorrect. %s != %s\", \n        testHelper.Received, expected) \n    } \n  }) \n} \n\n```", "```go\nfunc (m *MessageA) Accept(v Visitor) { \n  //Do nothing \n} \n\nfunc (m *MessageB) Accept(v Visitor) { \n  //Do nothing \n} \n\n```", "```go\nfunc (mf *MessageVisitor) VisitA(m *MessageA){ \n  //Do nothing \n} \nfunc (mf *MessageVisitor) VisitB(m *MessageB){ \n  //Do nothing \n} \n\n```", "```go\nfunc (m *MessageA) Print(){ \n  //Do nothing \n} \n\nfunc (m *MessageB) Print(){ \n  //Do nothing \n} \n\n```", "```go\ngo test -v .\n=== RUN   Test_Overall\n=== RUN   Test_Overall/MessageA_test\n=== RUN   Test_Overall/MessageB_test\n--- FAIL: Test_Overall (0.00s)\n --- FAIL: Test_Overall/MessageA_test (0.00s)\n visitor_test.go:30: Expected result was incorrect.  != A: Hello World (Visited A)\n --- FAIL: Test_Overall/MessageB_test (0.00s)\n visitor_test.go:46: Expected result was incorrect.  != B: Hello World (Visited B)\nFAIL\nexit status 1\nFAIL\n\n```", "```go\nfunc (mf *MessageVisitor) VisitA(m *MessageA){ \n  m.Msg = fmt.Sprintf(\"%s %s\", m.Msg, \"(Visited A)\") \n} \nfunc (mf *MessageVisitor) VisitB(m *MessageB){ \n  m.Msg = fmt.Sprintf(\"%s %s\", m.Msg, \"(Visited B)\") \n} \n\n```", "```go\nfunc (m *MessageA) Accept(v Visitor) { \n  v.VisitA(m) \n} \n\nfunc (m *MessageB) Accept(v Visitor) { \n  v.VisitB(m) \n} \n\n```", "```go\nfunc (m *MessageA) Print() { \n  if m.Output == nil { \n    m.Output = os.Stdout \n  } \n\n  fmt.Fprintf(m.Output, \"A: %s\", m.Msg) \n} \n\nfunc (m *MessageB) Print() { \n  if m.Output == nil { \n    m.Output = os.Stdout \n  } \n  fmt.Fprintf(m.Output, \"B: %s\", m.Msg) \n} \n\n```", "```go\ngo test -v .\n=== RUN   Test_Overall\n=== RUN   Test_Overall/MessageA_test\n=== RUN   Test_Overall/MessageB_test\n--- PASS: Test_Overall (0.00s)\n --- PASS: Test_Overall/MessageA_test (0.00s)\n --- PASS: Test_Overall/MessageB_test (0.00s)\nPASS\nok\n\n```", "```go\ntype MsgFieldVisitorPrinter struct {} \n\nfunc (mf *MsgFieldVisitorPrinter) VisitA(m *MessageA){ \n  fmt.Printf(m.Msg) \n} \nfunc (mf *MsgFieldVisitorPrinter) VisitB(m *MessageB){ \n  fmt.Printf(m.Msg) \n} \n\n```", "```go\ntype ProductInfoRetriever interface { \n  GetPrice() float32 \n  GetName() string \n} \n\ntype Visitor interface { \n  Visit(ProductInfoRetriever) \n} \n\ntype Visitable interface { \n  Accept(Visitor) \n} \n\n```", "```go\ntype Product struct { \n  Price float32 \n  Name  string \n} \n\nfunc (p *Product) GetPrice() float32 { \n  return p.Price \n} \n\nfunc (p *Product) Accept(v Visitor) { \n  v.Visit(p) \n} \n\nfunc (p *Product) GetName() string { \n  return p.Name \n} \n\n```", "```go\ntype Rice struct { \n  Product \n} \n\ntype Pasta struct { \n  Product \n} \n\n```", "```go\ntype PriceVisitor struct { \n  Sum float32 \n} \n\nfunc (pv *PriceVisitor) Visit(p ProductInfoRetriever) { \n  pv.Sum += p.GetPrice() \n} \n\ntype NamePrinter struct { \n  ProductList string \n} \n\nfunc (n *NamePrinter) Visit(p ProductInfoRetriever) { \n  n.Names = fmt.Sprintf(\"%s\\n%s\", p.GetName(), n.ProductList) \n} \n\n```", "```go\nfunc main() { \n  products := make([]Visitable, 2) \n  products[0] = &Rice{ \n    Product: Product{ \n      Price: 32.0, \n      Name:  \"Some rice\", \n    }, \n  } \n  products[1] = &Pasta{ \n    Product: Product{ \n      Price: 40.0, \n      Name:  \"Some pasta\", \n    }, \n  } \n\n  //Print the sum of prices \n  priceVisitor := &PriceVisitor{} \n\n  for _, p := range products { \n    p.Accept(priceVisitor) \n  } \n\n  fmt.Printf(\"Total: %f\\n\", priceVisitor.Sum) \n\n  //Print the products list \n  nameVisitor := &NamePrinter{} \n\n  for _, p := range products { \n    p.Accept(nameVisitor) \n  } \n\n  fmt.Printf(\"\\nProduct list:\\n-------------\\n%s\",  nameVisitor.ProductList) \n} \n\n```", "```go\ngo run visitor.go\nTotal: 72.000000\nProduct list:\n-------------\nSome pasta\nSome rice\n\n```", "```go\ntype Fridge struct { \n  Product \n} \n\n```", "```go\ntype Fridge struct { \n  Product \n} \n\nfunc (f *Fridge) GetPrice() float32 { \n  return f.Product.Price + 20 \n} \n\n```", "```go\ntype Fridge struct { \n  Product \n} \n\nfunc (f *Fridge) GetPrice() float32 { \n  return f.Product.Price + 20 \n} \n\nfunc (f *Fridge) Accept(v Visitor) { \n  v.Visit(f) \n} \n\n```", "```go\nfunc main() { \n  products := make([]Visitable, 3) \n  products[0] = &Rice{ \n    Product: Product{ \n      Price: 32.0, \n      Name:  \"Some rice\", \n    }, \n  } \n  products[1] = &Pasta{ \n    Product: Product{ \n      Price: 40.0, \n      Name:  \"Some pasta\", \n    }, \n  } \n  products[2] = &Fridge{ \n    Product: Product{ \n      Price: 50, \n      Name:  \"A fridge\", \n    }, \n  } \n  ... \n} \n\n```", "```go\n$ go run visitor.go\nTotal: 142.000000\nProduct list:\n-------------\nA fridge\nSome pasta\nSome rice\n\n```", "```go\ntype GameState interface { \n  executeState(*GameContext) bool \n} \n\ntype GameContext struct { \n  SecretNumber int \n  Retries int \n  Won bool \n  Next GameState \n} \n\n```", "```go\ntype StartState struct{} \nfunc(s *StartState) executeState(c *GameContext) bool { \n  c.Next = &AskState{} \n\n  rand.Seed(time.Now().UnixNano()) \n  c.SecretNumber = rand.Intn(10) \n\n  fmt.Println(\"Introduce a number a number of retries to set the difficulty:\") \n  fmt.Fscanf(os.Stdin, \"%d\\n\", &c.Retries) \n\n  return true \n} \n\n```", "```go\ntype AskState struct {} \nfunc (a *AskState) executeState(c *GameContext) bool{ \n  fmt.Printf(\"Introduce a number between 0 and 10, you have %d tries left\\n\", c.Retries) \n\n  var n int \n  fmt.Fscanf(os.Stdin, \"%d\", &n) \n  c.Retries = c.Retries - 1 \n\n  if n == c.SecretNumber { \n    c.Won = true \n    c.Next = &FinishState{} \n  } \n\n  if c.Retries == 0 { \n    c.Next = &FinishState{} \n  } \n\n  return true \n} \n\n```", "```go\ntype FinishState struct{} \nfunc(f *FinishState) executeState(c *GameContext) bool { \n  if c.Won { \n    println(\"Congrats, you won\") \n  }  \n  else { \n    println(\"You lose\") \n  } \n  return false \n} \n\n```", "```go\nfunc main() { \n  start := StartState{} \n  game := GameContext{ \n    Next:&start, \n  } \n  for game.Next.executeState(&game) {} \n} \n\n```", "```go\ngo run state.go\nIntroduce a number a number of retries to set the difficulty:\n5\nIntroduce a number between 0 and 10, you have 5 tries left\n8\nIntroduce a number between 0 and 10, you have 4 tries left\n2\nIntroduce a number between 0 and 10, you have 3 tries left\n1\nIntroduce a number between 0 and 10, you have 2 tries left\n3\nIntroduce a number between 0 and 10, you have 1 tries left\n4\nYou lose\n\n```", "```go\nfmt.Printf(\"You lose. The correct number was: %d\\n\", c.SecretNumber) \n\n```", "```go\ngo run state.go\nIntroduce a number a number of retries to set the difficulty:\n3\nIntroduce a number between 0 and 10, you have 3 tries left\n6\nIntroduce a number between 0 and 10, you have 2 tries left\n2\nIntroduce a number between 0 and 10, you have 1 tries left\n1\nYou lose. The correct number was: 9\n\n```", "```go\ngo run state.go\nIntroduce a number a number of retries to set the difficulty:\n5\nIntroduce a number between 0 and 10, you have 5 tries left\n3\nIntroduce a number between 0 and 10, you have 4 tries left\n4\nIntroduce a number between 0 and 10, you have 3 tries left\n5\nIntroduce a number between 0 and 10, you have 2 tries left\n6\nCongrats, you won\n\n```", "```go\ntype WinState struct{} \n\nfunc (w *WinState) executeState(c *GameContext) bool { \n  println(\"Congrats, you won\") \n\n  return false \n} \n\ntype LoseState struct{} \n\nfunc (l *LoseState) executeState(c *GameContext) bool { \n  fmt.Printf(\"You lose. The correct number was: %d\\n\", c.SecretNumber) \n  return false \n} \n\n```", "```go\nfunc (f *FinishState) executeState(c *GameContext) bool { \n  if c.Won { \n    c.Next = &WinState{} \n  } else { \n    c.Next = &LoseState{} \n  } \n  return true \n} \n\n```", "```go\npackage main \n\ntype One struct{} \ntype Two struct{} \ntype Three struct{} \ntype Four struct{} \ntype Five struct{} \ntype Six struct{} \ntype Seven struct{} \ntype Eight struct{} \ntype Nine struct{} \ntype Zero struct{} \n\n```", "```go\ntype One struct{} \n\nfunc (o *One) OnePlus(n interface{}) interface{} { \n  switch n.(type) { \n  case One: \n    return &Two{} \n  case Two: \n    return &Three{} \n  case Three: \n    return &Four{} \n  case Four: \n    return &Five{} \n  case Five: \n    return &Six{} \n  case Six: \n    return &Seven{} \n  case Seven: \n    return &Eight{} \n  case Eight: \n    return &Nine{} \n  case Nine: \n    return [2]interface{}{&One{}, &Zero{}} \n  default: \n    return fmt.Errorf(\"Number not found\") \n  } \n} \n\n```", "```go\nfunc Sum(a, b interface{}) interface{}{ \n  switch a := a.(type) { \n    case One: \n    switch b.(type) { \n      case One: \n        return &Two{} \n      case Two: \n        return &Three{} \n      default: \n        return fmt.Errorf(\"Number not found\") \n    } \n    case Two: \n    switch b.(type) { \n      case One: \n        return &Three{} \n      case Two: \n        return &Four{} \n      default: \n      return fmt.Errorf(\"Number not found\") \n\n    } \n    case int: \n    switch b := b.(type) { \n      case One: \n        return &Three{} \n      case Two: \n        return &Four{} \n      case int: \n        return a + b \n      default: \n      return fmt.Errorf(\"Number not found\") \n\n    } \n    default: \n    return fmt.Errorf(\"Number not found\") \n  } \n} \n\n```", "```go\nfunc main(){ \n  fmt.Printf(\"%#v\\n\", Sum(One{}, Two{})) \n  fmt.Printf(\"%d\\n\", Sum(1,2)) \n} \n\n```", "```go\n$go run mediator.go\n&main.Three{}\n7\n\n```", "```go\n  case One: \n    switch b := b.(type) { \n    case One: \n      return &Two{} \n    case Two: \n      return &Three{} \n    case int: \n      return b+1 \n    default: \n      return fmt.Errorf(\"Number not found\") \n    } \n\n```", "```go\nfunc main(){ \n  fmt.Printf(\"%#v\\n\", Sum(One{}, Two{})) \n  fmt.Printf(\"%d\\n\", Sum(1,2)) \n fmt.Printf(\"%d\\n\", Sum(One{},2)) \n} \n$go run mediator.go&main.Three{}33\n\n```", "```go\ntype Observer interface { \n  Notify(string) \n} \n\n```", "```go\ntype Publisher struct { \n  ObserversList []Observer \n} \n\nfunc (s *Publisher) AddObserver(o Observer) {} \n\nfunc (s *Publisher) RemoveObserver(o Observer) {} \n\nfunc (s *Publisher) NotifyObservers(m string) {} \n\n```", "```go\ntype TestObserver struct { \n  ID      int \n  Message string \n} \nfunc (p *TestObserver) Notify(m string) { \n  fmt.Printf(\"Observer %d: message '%s' received \\n\", p.ID, m) \n  p.Message = m \n} \n\n```", "```go\nfunc TestSubject(t *testing.T) { \n  testObserver1 := &TestObserver{1, \"\"} \n  testObserver2 := &TestObserver{2, \"\"} \n  testObserver3 := &TestObserver{3, \"\"} \n  publisher := Publisher{} \n\n```", "```go\n  t.Run(\"AddObserver\", func(t *testing.T) { \n    publisher.AddObserver(testObserver1) \n    publisher.AddObserver(testObserver2) \n    publisher.AddObserver(testObserver3) \n\n    if len(publisher.ObserversList) != 3 { \n      t.Fail() \n    } \n  }) \n\n```", "```go\n  t.Run(\"RemoveObserver\", func(t *testing.T) { \n    publisher.RemoveObserver(testObserver2) \n\n    if len(publisher.ObserversList) != 2 { \n      t.Errorf(\"The size of the observer list is not the \" + \n        \"expected. 3 != %d\\n\", len(publisher.ObserversList)) \n    } \n\n    for _, observer := range publisher.ObserversList { \n      testObserver, ok := observer.(TestObserver) \n      if !ok {  \n        t.Fail() \n      } \n\n      if testObserver.ID == 2 { \n        t.Fail() \n      } \n    } \n  }) \n\n```", "```go\nt.Run(\"Notify\", func(t *testing.T) { \n    for _, observer := range publisher.ObserversList { \n      printObserver, ok := observer.(*TestObserver) \n      if !ok { \n        t.Fail() \n        break \n      } \n\n      if printObserver.Message != \"\" { \n        t.Errorf(\"The observer's Message field weren't \" + \"  empty: %s\\n\", printObserver.Message) \n      } \n    } \n\n```", "```go\n    ... \n    message := \"Hello World!\" \n    publisher.NotifyObservers(message) \n\n    for _, observer := range publisher.ObserversList { \n      printObserver, ok := observer.(*TestObserver) \n      if !ok { \n        t.Fail() \n        break \n      } \n\n      if printObserver.Message != message { \n        t.Errorf(\"Expected message on observer %d was \" + \n          \"not expected: '%s' != '%s'\\n\", printObserver.ID, \n          printObserver.Message, message) \n      } \n    } \n  }) \n} \n\n```", "```go\ngo test -v  \n=== RUN   TestSubject \n=== RUN   TestSubject/AddObserver \n=== RUN   TestSubject/RemoveObserver \n=== RUN   TestSubject/Notify \n--- FAIL: TestSubject (0.00s) \n    --- FAIL: TestSubject/AddObserver (0.00s) \n    --- FAIL: TestSubject/RemoveObserver (0.00s) \n        observer_test.go:40: The size of the observer list is not the expected. 3 != 0 \n    --- PASS: TestSubject/Notify (0.00s) \nFAIL \nexit status 1 \nFAIL\n\n```", "```go\n  if len(publisher.ObserversList) == 0 { \n      t.Errorf(\"The list is empty. Nothing to test\\n\") \n  } \n\n```", "```go\ngo test -v\n=== RUN   TestSubject\n=== RUN   TestSubject/AddObserver\n=== RUN   TestSubject/RemoveObserver\n=== RUN   TestSubject/Notify\n--- FAIL: TestSubject (0.00s)\n --- FAIL: TestSubject/AddObserver (0.00s)\n --- FAIL: TestSubject/RemoveObserver (0.00s)\n observer_test.go:40: The size of the observer list is not the expected. 3 != 0\n --- FAIL: TestSubject/Notify (0.00s)\n observer_test.go:58: The list is empty. Nothing to test\nFAIL\nexit status 1\nFAIL\n\n```", "```go\nfunc (s *Publisher) AddObserver(o Observer) { \n  s.ObserversList = append(s.ObserversList, o) \n} \n\n```", "```go\ngo test -v\n=== RUN   TestSubject\n=== RUN   TestSubject/AddObserver\n=== RUN   TestSubject/RemoveObserver\n=== RUN   TestSubject/Notify\n--- FAIL: TestSubject (0.00s)\n --- PASS: TestSubject/AddObserver (0.00s)\n --- FAIL: TestSubject/RemoveObserver (0.00s)\n observer_test.go:40: The size of the observer list is not the expected. 3 != 3\n --- FAIL: TestSubject/Notify (0.00s)\n observer_test.go:87: Expected message on observer 1 was not expected: 'default' != 'Hello World!'\n observer_test.go:87: Expected message on observer 2 was not expected: 'default' != 'Hello World!'\n observer_test.go:87: Expected message on observer 3 was not expected: 'default' != 'Hello World!'\nFAIL\nexit status 1\nFAIL\n\n```", "```go\nfunc (s *Publisher) RemoveObserver(o Observer) { \n  var indexToRemove int \n\n  for i, observer := range s.ObserversList { \n    if observer == o { \n      indexToRemove = i \n      break \n    } \n  } \n\n  s.ObserversList = append(s.ObserversList[:indexToRemove], s.ObserversList[indexToRemove+1:]...) \n} \n\n```", "```go\ngo test -v           \n=== RUN   TestSubject \n=== RUN   TestSubject/AddObserver \n=== RUN   TestSubject/RemoveObserver \n=== RUN   TestSubject/Notify \n--- FAIL: TestSubject (0.00s) \n    --- PASS: TestSubject/AddObserver (0.00s) \n    --- PASS: TestSubject/RemoveObserver (0.00s) \n    --- FAIL: TestSubject/Notify (0.00s) \n        observer_test.go:87: Expected message on observer 1 was not expected: 'default' != 'Hello World!' \n        observer_test.go:87: Expected message on observer 3 was not expected: 'default' != 'Hello World!' \nFAIL \nexit status 1 \nFAIL \n\n```", "```go\nfunc (s *Publisher) NotifyObservers(m string) { \n  fmt.Printf(\"Publisher received message '%s' to notify observers\\n\", m) \n  for _, observer := range s.ObserversList { \n    observer.Notify(m) \n  } \n} \n\n```", "```go\ngo test -v \n=== RUN   TestSubject \n=== RUN   TestSubject/AddObserver \n=== RUN   TestSubject/RemoveObserver \n=== RUN   TestSubject/Notify \nPublisher received message 'Hello World!' to notify observers \nObserver 1: message 'Hello World!' received  \nObserver 3: message 'Hello World!' received  \n--- PASS: TestSubject (0.00s) \n    --- PASS: TestSubject/AddObserver (0.00s) \n    --- PASS: TestSubject/RemoveObserver (0.00s) \n    --- PASS: TestSubject/Notify (0.00s) \nPASS \nok\n\n```", "```go\nhey! I have received the message\u00a0 'Hello World!' and I'm going to pass the same message to the observers\u00a0\n```", "```go\nhey, I'm observer 1 and I have received the message 'Hello World!'\n```"]