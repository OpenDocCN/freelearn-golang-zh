- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: I decided to write *Go Programming Blueprints* because I wanted to expel the
    myth that Go, being a relatively young language and community, is a bad choice
    for writing and iterating on software quickly. I have a friend who knocks out
    complete Ruby on Rails apps in a weekend by mashing up pre-existing gems and libraries;
    Rails as a platform has become known for enabling rapid development. Since I do
    the same with Go and the ever-growing buffet of open source packages, I wanted
    to share some real-world examples of how we can quickly build and release software
    that performs great from day one and is ready to scale when our projects take
    off in a way that Rails cannot compete with. Of course, most scalability happens
    outside the language, but features like Go's built-in concurrency mean you can
    get some very impressive results from even the most basic hardware, giving you
    a head start when things start to get real.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我决定写《Go编程蓝图》是因为我想驱散一个谣言，即相对年轻的Go语言和社区不适合快速编写和迭代软件。我有一个朋友，他可以在一个周末内用Ruby on Rails开发完整的应用程序，通过混合现有的宝石和库；Rails作为一个平台已经以其快速开发而闻名。由于我在Go和不断增长的开源软件包中也做到了同样的事情，我想分享一些真实世界的例子，展示我们如何可以快速构建和发布表现出色的软件，从第一天起就准备好扩展，这是Rails无法与之竞争的。当然，大多数的可扩展性发生在语言之外，但是像Go内置的并发性这样的特性意味着即使在最基本的硬件上，你也可以获得一些非常令人印象深刻的结果，这让你在事情开始变得真实时就能提前开始。
- en: This book explores five very different projects, any of which could form the
    basis of a genuine start-up. Whether it's a low-latency chat application, a domain
    name suggestion tool, a social polling and election service built on Twitter,
    or a random night out generator powered by Google Places, each chapter touches
    upon a variety of problems that most products or services written in Go will need
    to address. The solutions I present in the book are just one of many ways to tackle
    each project, and I would encourage you to make up your own mind about how I approached
    them. The concepts are more important than the code itself, but you'll hopefully
    pick up a few tips and tricks here and there that can go into your Go toolbelt.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书探讨了五个非常不同的项目，其中任何一个都可以成为一个真正的创业基础。无论是低延迟的聊天应用程序、域名建议工具、建立在Twitter上的社交投票和选举服务，还是由Google
    Places提供支持的随机夜生活生成器，每一章都涉及大多数使用Go编写的产品或服务需要解决的各种问题。我在书中提出的解决方案只是解决每个项目的许多方法之一，我鼓励你自己对我如何解决它们做出自己的判断。概念比代码本身更重要，但你希望能够从中学到一些技巧和窍门，可以加入到你的Go工具包中。
- en: The process by which I wrote this book might be interesting because it represents
    something about the philosophies adopted by many agile developers. I started by
    giving myself the challenge of building a real deployable product (albeit a simple
    one; minimum viable product if you will) before getting stuck into it and writing
    a version 1\. Once I got it working, I would rewrite it from scratch. It has been
    said many times by novelists and journalists that the art of writing is rewriting;
    I have found this to be true for software as well. The first time we write a piece
    of code, all we are really doing is learning about the problem and how it might
    be tackled as well as getting some of our thinking out of our heads and onto paper
    (or into a text editor). The second time we write it, we are applying our new
    knowledge to actually solve the problem. If you've never tried this, give it a
    shot—you might find that the quality of your code shoots up quite dramatically
    as I did. It doesn't mean the second time will be the last time—software evolves
    and we should try to keep it as cheap and disposable as possible, so we don't
    mind throwing pieces away if they go stale or start to get in the way.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我写这本书的过程可能会很有趣，因为它代表了许多敏捷开发者采用的一些哲学。我开始给自己一个挑战，即在深入研究并编写第一个版本之前，先构建一个真正可部署的产品（尽管是一个简单的产品；如果你愿意，可以称之为最小可行产品）。一旦我让它运行起来，我会从头开始重写它。小说家和记者们多次说过写作的艺术就是重写；我发现这对软件也是真实的。第一次我们写代码时，我们真正做的只是了解问题以及可能解决问题的方式，并将一些想法从我们的脑海中记录到纸上（或文本编辑器中）。第二次写代码时，我们将应用我们的新知识来真正解决问题。如果你从未尝试过这样做，试一试吧——你可能会发现，就像我一样，你的代码质量会显著提高。这并不意味着第二次就是最后一次——软件是不断演进的，我们应该尽量保持它的成本低廉和可替换性，这样如果某些部分过时或开始妨碍我们，我们也不介意将其丢弃。
- en: I write all of my code following Test-driven Development (TDD) practices, some
    of which we will do together throughout the chapters and some you'll just see
    the result of in the final code. All of the test code can be found in the GitHub
    repositories for this book even if it's not included in print.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我所有的代码都遵循测试驱动开发（TDD）的实践，其中一些我们将在章节中一起完成，而一些你只会在最终代码中看到结果。即使在印刷版中没有包含，所有的测试代码都可以在本书的GitHub存储库中找到。
- en: Once I had my test-driven second versions completed, I would start writing the
    chapter describing how and why I did what I did. In most cases, the iterative
    approach I took is left out of the book because it would just add pages of tweaks
    and edits, which would likely just become frustrating for the reader. However,
    on a couple of occasions, we will iterate together to get a feel of how a process
    of gradual improvements and small iterations (starting and keeping it simple and
    introducing complexity only when absolutely necessary) can be applied when writing
    Go packages and programs.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我完成了我的测试驱动的第二个版本，我会开始撰写描述我做了什么以及为什么这样做的章节。在大多数情况下，我采取的迭代方法被省略在书中，因为这只会增加页面的调整和编辑，这可能会让读者感到沮丧。然而，在一些情况下，我们将一起进行迭代，以了解渐进改进和小迭代的过程（从简单开始，只在绝对必要时引入复杂性）如何应用于编写Go软件包和程序。
- en: I moved to the United States from England in 2012, but that is not why the chapters
    are authored in American English; it was a requirement from the publisher. I suppose
    this book is aimed at an American audience, or perhaps it's because American English
    is the standard language of computing (in British code, properties that deal with
    color are spelled without the U). Either way, I apologize in advance for any trans-Atlantic
    slips; I know how pedantic programmers can be.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我在2012年从英国搬到美国，但这并不是为什么这些章节以美式英语撰写的原因；这是出版商的要求。我想这本书是针对美国读者的，或者可能是因为美式英语是计算机的标准语言（在英国的代码中，处理颜色的属性是不带U拼写的）。无论如何，我提前为任何跨大西洋的差错道歉；我知道程序员有多么苛刻。
- en: Any questions, improvements, suggestions, or debates (I love how opinionated
    the Go community—as well as the core team and the language itself—is) are more
    than welcome. These should probably take place in the GitHub issues for the book
    set up specifically at [https://github.com/matryer/goblueprints](https://github.com/matryer/goblueprints)
    so that everybody can take part.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 任何问题、改进、建议或辩论（我喜欢Go社区以及核心团队和语言本身的主张）都是非常欢迎的。这些可能最好在专门设置的书籍GitHub问题中进行，网址为[https://github.com/matryer/goblueprints](https://github.com/matryer/goblueprints)，以便每个人都可以参与。
- en: Finally, I would be thrilled if somebody forms a start-up based on any of these
    projects, or makes use of them in other places. I would love to hear about it;
    you can tweet me at `@matryer` and let me know either way.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果有人基于这些项目创建了一家初创公司，或者在其他地方利用了它们，我会感到非常兴奋。我很想听听这方面的消息；你可以在Twitter上@matryer给我发消息，让我知道情况。
- en: What this book covers
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书内容包括
- en: '[Chapter 1](text00015.html#ch01 "Chapter 1. Chat Application with Web Sockets")
    , *Chat Application with Web Sockets* , shows how to build a complete web application
    that allows multiple people to have a real-time conversation right in their web
    browser. We see how the net/http package lets us serve HTML pages as well as connect
    to the client''s browser with web sockets.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[第1章](text00015.html#ch01 "第1章. 使用Web套接字的聊天应用程序") ，*使用Web套接字的聊天应用程序*，展示了如何构建一个完整的Web应用程序，允许多人在其Web浏览器中进行实时对话。我们看到net/http包如何让我们提供HTML页面，并与客户端的浏览器建立Web套接字连接。'
- en: '[Chapter 2](text00020.html#page "Chapter 2. Adding Authentication") , *Adding
    Authentication* , shows how to add OAuth to our chat application so that we can
    keep track of who is saying what, but let them log in using Google, Facebook,
    or GitHub.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[第2章](text00020.html#page "第2章. 添加身份验证") ，*添加身份验证*，展示了如何向我们的聊天应用程序添加OAuth，以便我们可以跟踪谁说了什么，但让他们可以使用Google、Facebook或GitHub登录。'
- en: '[Chapter 3](text00027.html#ch03 "Chapter 3. Three Ways to Implement Profile
    Pictures") , *Three Ways to Implement Profile Pictures* , explains how to add
    profile pictures to the chat application taken from either the authentication
    service, the [Gravitar.com](http://Gravitar.com) web service, or by allowing users
    to upload their own picture from their hard drive.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[第3章](text00027.html#ch03 "第3章. 实现个人资料图片的三种方式") ，*实现个人资料图片的三种方式*，解释了如何向聊天应用程序添加个人资料图片，可以从身份验证服务、[Gravitar.com](http://Gravitar.com)网站获取，或者允许用户从硬盘上传自己的图片。'
- en: '[Chapter 4](text00032.html#page "Chapter 4. Command-line Tools to Find Domain
    Names") , *Command-line Tools to Find Domain Names* , explores how easy building
    command-line tools is in Go and puts those skills to use to tackle the problem
    of finding the perfect domain name for our chat application. It also explores
    how easy Go makes it to utilize the standard in and standard out pipes to produce
    some pretty powerful composable tools.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[第4章](text00032.html#page "第4章. 用命令行工具查找域名") ，*用命令行工具查找域名*，探讨了在Go中构建命令行工具的简易性，并将这些技能应用于解决为我们的聊天应用程序找到完美域名的问题。它还探讨了Go语言如何轻松利用标准输入和标准输出管道来生成一些非常强大的可组合工具。'
- en: '[Chapter 5](text00036.html#page "Chapter 5. Building Distributed Systems and
    Working with Flexible Data") , *Building Distributed Systems and Working with
    Flexible Data* , explains how to prepare for the future of democracy by building
    a highly scalable Twitter polling and vote counting engine powered by NSQ and
    MongoDB.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[第5章](text00036.html#page "第5章. 构建分布式系统并处理灵活数据") ，*构建分布式系统并处理灵活数据*，解释了如何通过NSQ和MongoDB构建高度可扩展的Twitter投票和计票引擎，为民主的未来做准备。'
- en: '[Chapter 6](text00042.html#page "Chapter 6. Exposing Data and Functionality
    through a RESTful Data Web Service API") , *Exposing Data and Functionality through
    a RESTful Data Web Service API* , looks at how to expose the capabilities we built
    in [Chapter 5](text00036.html#page "Chapter 5. Building Distributed Systems and
    Working with Flexible Data") , *Building Distributed Systems and Working with
    Flexible Data* , through a JSON web service, specifically how wrapping http.HandlerFunc
    functions gives us a powerful pipeline pattern.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[第6章](text00042.html#page "第6章. 通过RESTful数据Web服务API公开数据和功能") ，*通过RESTful数据Web服务API公开数据和功能*，介绍了如何通过JSON
    Web服务公开我们在[第5章](text00036.html#page "第5章. 构建分布式系统并处理灵活数据") 中构建的功能，具体来说，是如何通过包装http.HandlerFunc函数来实现强大的管道模式。'
- en: '[Chapter 7](text00052.html#page "Chapter 7. Random Recommendations Web Service")
    , *Random Recommendations Web Service* , shows how to consume the Google Places
    API to generate a location-based random recommendations API that represents a
    fun way to explore any area. It also explores why it''s important to keep internal
    data structures private, controlling the public view into the same data, as well
    as how to implement enumerators in Go.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[第7章](text00052.html#page "第7章. 随机推荐Web服务") ，*随机推荐Web服务*，展示了如何使用Google Places
    API来生成基于位置的随机推荐API，这是探索任何地区的一种有趣方式。它还探讨了保持内部数据结构私有的重要性，控制对相同数据的公共视图，以及如何在Go中实现枚举器。'
- en: '[Chapter 8](text00056.html#page "Chapter 8. Filesystem Backup") , *Filesystem
    Backup* , helps to build a simple but powerful filesystem backup tool for our
    code projects and explore interacting with the filesystem using the os package
    from the Go standard library. It also looks at how Go''s interfaces allow simple
    abstractions to yield powerful results.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[第8章](text00056.html#page "第8章 文件系统备份")，*文件系统备份*，帮助我们构建一个简单但功能强大的文件系统备份工具，用于我们的代码项目，并探索使用Go标准库中的os包与文件系统进行交互。它还探讨了Go的接口如何允许简单的抽象产生强大的结果。'
- en: '[Appendix](text00062.html#page "Appendix A. Good Practices for a Stable Go
    Environment") , *Good Practices for a Stable Go Environment* , teaches us how
    to install Go from scratch on a new machine and discusses some of the environmental
    options we have and the impact they might have in the future. We will also consider
    how collaboration might influence some of our decisions as well as the impact
    open sourcing our packages might have.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[附录](text00062.html#page "附录A 稳定的Go环境的良好实践")，*稳定的Go环境的良好实践*，教会我们如何从头开始在新机器上安装Go，并讨论了我们可能拥有的一些环境选项以及它们将来可能产生的影响。我们还将考虑协作如何影响我们的一些决定，以及开源我们的包可能产生的影响。'
- en: What you need for this book
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书所需内容
- en: To compile and run the code from this book, you will need a computer capable
    of running an operating system that supports the Go toolset, a list of which can
    be found at [https://golang.org/doc/install#requirements](https://golang.org/doc/install#requirements)
    .
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要编译和运行本书中的代码，您需要一台能够运行支持Go工具集的操作系统的计算机，可以在[https://golang.org/doc/install#requirements](https://golang.org/doc/install#requirements)找到支持的操作系统列表。
- en: '[Appendix](text00062.html#page "Appendix A. Good Practices for a Stable Go
    Environment") , *Good Practices for a Stable Go Environment* , has some useful
    tips to install Go and set up your development environment including how to work
    with the GOPATH environment variable.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[附录](text00062.html#page "附录A 稳定的Go环境的良好实践")，*稳定的Go环境的良好实践*，提供了一些有用的提示，包括如何安装Go并设置开发环境，以及如何使用GOPATH环境变量。'
- en: Who this book is for
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书适合对象
- en: This book is for all Go programmers—from beginners looking to explore the language
    by building real projects to expert gophers with an interest in how the language
    can be applied in interesting ways.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本书适用于所有Go程序员——从想通过构建真实项目来探索该语言的初学者到对如何以有趣的方式应用该语言感兴趣的专家gophers。
- en: 读累了记得休息一会哦~
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读累了记得休息一会哦~
- en: '**公众号：古德猫宁李**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**公众号：古德猫宁李**'
- en: 电子书搜索下载
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 书单分享
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书单分享
- en: 书友学习交流
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书友学习交流
- en: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
- en: 电子书搜索下载
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 电子书打包资源分享
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书打包资源分享
- en: 学习资源分享
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习资源分享
- en: Conventions
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 约定
- en: In this book, you will find a number of styles of text that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，您会发现一些文本样式，用于区分不同类型的信息。以下是一些这些样式的示例及其含义的解释。
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "We
    can use functionality from other packages using the `import` keyword, after we
    have used `go get` to download them."'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 文本中的代码单词、数据库表名、文件夹名、文件名、文件扩展名、路径名、虚拟URL、用户输入和Twitter用户名显示如下："我们可以使用`import`关键字从其他包中使用功能，之前我们使用`go
    get`来下载它们。"
- en: 'A block of code is set as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块设置如下：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望引起您对代码块的特定部分的注意时，相关行或项目会以粗体显示：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Any command-line input or output is written as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 任何命令行输入或输出都会以以下方式书写：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, in menus or dialog boxes for example, appear in the text like this:
    "Once you install Xcode, you open **Preferences** and navigate to the **Downloads**
    section.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**新术语**和**重要单词**以粗体显示。您在屏幕上看到的单词，比如菜单或对话框中的单词，会以这样的方式出现在文本中："一旦安装了Xcode，您就打开**首选项**，然后导航到**下载**部分。'
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Warnings or important notes appear in a box like this.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 警告或重要提示会以这样的方式出现在一个框中。
- en: Tip
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Tips and tricks appear like this.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 提示和技巧会以这种方式出现。
