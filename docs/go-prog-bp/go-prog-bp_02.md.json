["```go\npackage main\nimport (\n  \"net/http\"\n)\ntype authHandler struct {\n  next http.Handler\n}\nfunc (h *authHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n  if _, err := r.Cookie(\"auth\"); err == http.ErrNoCookie {\n    // not authenticated\n    w.Header().Set(\"Location\", \"/login\")\n    w.WriteHeader(http.StatusTemporaryRedirect)\n  } else if err != nil {\n    // some other error\n    panic(err.Error())\n  } else {\n    // success - call the next handler\n    h.next.ServeHTTP(w, r)\n  }\n}\nfunc MustAuth(handler http.Handler) http.Handler {\n  return &authHandler{next: handler}\n}\n```", "```go\nhttp.Handle(\"/\", &templateHandler{filename: \"chat.html\"})\n```", "```go\nhttp.Handle(\"/chat\", MustAuth(&templateHandler{filename: \"chat.html\"}))\n```", "```go\n\ngo build -o chat\n\n./chat -host=\":8080\"\n\n```", "```go\nhttp.Handle(\"/assets/\", http.StripPrefix(\"/assets\", http.FileServer(http.Dir(\"/path/to/assets/\"))))\n```", "```go\nhttp.Handle(\"/chat\", MustAuth(&templateHandler{filename: \"chat.html\"}))\n\nhttp.Handle(\"/login\", &templateHandler{filename: \"login.html\"})\n\nhttp.Handle(\"/room\", r)\n```", "```go\n<html>\n  <head>\n    <title>Login</title>\n    <link rel=\"stylesheet\"\n      href=\"//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\">\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"page-header\">\n        <h1>Sign in</h1>\n      </div>\n      <div class=\"panel panel-danger\">\n        <div class=\"panel-heading\">\n          <h3 class=\"panel-title\">In order to chat, you must be signed in</h3>\n        </div>\n        <div class=\"panel-body\">\n          <p>Select the service you would like to sign in with:</p>\n          <ul>\n            <li>\n              <a href=\"/auth/login/facebook\">Facebook</a>\n            </li>\n            <li>\n              <a href=\"/auth/login/github\">GitHub</a>\n            </li>\n            <li>\n              <a href=\"/auth/login/google\">Google</a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </body>\n</html>\n```", "```go\n\"auth/:action/:provider_name\"\n```", "```go\n\"auth/\"\n```", "```go\n// loginHandler handles the third-party login process.\n// format: /auth/{action}/{provider}\nfunc loginHandler(w http.ResponseWriter, r *http.Request) {\n  segs := strings.Split(r.URL.Path, \"/\")\n  action := segs[2]\n  provider := segs[3]\n  switch action {\n  case \"login\":\n    log.Println(\"TODO handle login for\", provider)\n  default:\n     w.WriteHeader(http.StatusNotFound)\n     fmt.Fprintf(w, \"Auth action %s not supported\", action)\n  }\n}\n```", "```go\nhttp.Handle(\"/chat\", MustAuth(&templateHandler{filename: \"chat.html\"}))\nhttp.Handle(\"/login\", &templateHandler{filename: \"login.html\"})\n\nhttp.HandleFunc(\"/auth/\", loginHandler)\n\nhttp.Handle(\"/room\", r)\n```", "```go\n\ngo build \u2013o chat\n\n./chat \u2013host=\":8080\"\n\n```", "```go\n\ngo get github.com/stretchr/gomniauth\n\n```", "```go\n// set up gomniauth\ngomniauth.SetSecurityKey(\"some long key\")\ngomniauth.WithProviders(\n  facebook.New(\"key\", \"secret\",\n    \"http://localhost:8080/auth/callback/facebook\"),\n  github.New(\"key\", \"secret\",\n    \"http://localhost:8080/auth/callback/github\"),\n  google.New(\"key\", \"secret\",\n    \"http://localhost:8080/auth/callback/google\"),\n)\n```", "```go\nimport (\n  \"github.com/stretchr/gomniauth/providers/facebook\"\n  \"github.com/stretchr/gomniauth/providers/github\"\n  \"github.com/stretchr/gomniauth/providers/google\"\n)\n```", "```go\nfunc loginHandler(w http.ResponseWriter, r *http.Request) {\n  segs := strings.Split(r.URL.Path, \"/\")\n  action := segs[2]\n  provider := segs[3]\n  switch action {\n  case \"login\":\n    provider, err := gomniauth.Provider(provider)\n    if err != nil {\n      log.Fatalln(\"Error when trying to get provider\", provider, \"-\", err)\n    }\n    loginUrl, err := provider.GetBeginAuthURL(nil, nil)\n    if err != nil {\n      log.Fatalln(\"Error when trying to GetBeginAuthURL for\", provider, \"-\", err)\n    }\n    w.Header.Set(\"Location\",loginUrl)\n    w.WriteHeader(http.StatusTemporaryRedirect)\n  default:\n    w.WriteHeader(http.StatusNotFound)\n    fmt.Fprintf(w, \"Auth action %s not supported\", action)\n  }\n}\n```", "```go\n\ngo build -o chat\n\n./chat -host=\":8080\"\n\n```", "```go\nhttp://localhost:8080/auth/callback/google?\ncode=4/Q92xJ-BQfoX6PHhzkjhgtyfLc0Ylm.QqV4u9AbA9sYguyfbjFEsNoJKMOjQI\n\n```", "```go\ncase \"callback\":\n\n  provider, err := gomniauth.Provider(provider)\n  if err != nil {\n    log.Fatalln(\"Error when trying to get provider\", provider, \"-\", err)\n  }\n\ncreds, err := provider.CompleteAuth(objx.MustFromURLQuery(r.URL.RawQuery))\n\n  if err != nil {\n    log.Fatalln(\"Error when trying to complete auth for\", provider, \"-\", err)\n  }\n\nuser, err := provider.GetUser(creds)\n\n  if err != nil {\n    log.Fatalln(\"Error when trying to get user from\", provider, \"-\", err)\n  }\n\nauthCookieValue := objx.New(map[string]interface{}{\n\n \"name\": user.Name(),\n\n }).MustBase64()\n\n http.SetCookie(w, &http.Cookie{\n\n Name:  \"auth\",\n\n Value: authCookieValue,\n\n Path:  \"/\"})\n\n  w.Header()[\"Location\"] = []string{\"/chat\"}\n  w.WriteHeader(http.StatusTemporaryRedirect)\n```", "```go\n\ngo build \u2013o chat\n\n./chat \u2013host=\":8080\"\n\n```", "```go\nfunc (t *templateHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n  t.once.Do(func() {\n    t.templ = template.Must(template.ParseFiles(filepath.Join(\"templates\", t.filename)))\n  })\n\ndata := map[string]interface{}{\n\n \"Host\": r.Host,\n\n }\n\n if authCookie, err := r.Cookie(\"auth\"); err == nil {\n\n data[\"UserData\"] = objx.MustFromBase64(authCookie.Value)\n\n }\n\n  t.templ.Execute(w, data)\n}\n```", "```go\n<form id=\"chatbox\">\n\n{{.UserData.name}}:<br/>\n\n  <textarea></textarea>\n  <input type=\"submit\" value=\"Send\" />\n</form>\n```", "```go\n\ngo build -o chat\n\n./chat \u2013host=\":8080\"\n\n```", "```go\npackage main\nimport (\n  \"time\"\n)\n// message represents a single message\ntype message struct {\n  Name    string\n  Message string\n  When    time.Time\n}\n```", "```go\nfunc (c *client) read() {\n  for {\n\nvar msg *message\n\n if err := c.socket.ReadJSON(&msg); err == nil {\n\n msg.When = time.Now()\n\n msg.Name = c.userData[\"name\"].(string)\n\n c.room.forward <- msg\n\n    } else {\n      break\n    }\n  }\n  c.socket.Close()\n}\nfunc (c *client) write() {\n  for msg := range c.send {\n    if err := \nc.socket.WriteJSON(msg)\n\n; err != nil {\n      break\n    }\n  }\n  c.socket.Close()\n}\n```", "```go\n// client represents a single chatting user.\ntype client struct {\n  // socket is the web socket for this client.\n  socket *websocket.Conn\n  // send is a channel on which messages are sent.\n  send chan *message\n  // room is the room this client is chatting in.\n  room *room\n  // userData holds information about the user\n  userData map[string]interface{}\n}\n```", "```go\nfunc (r *room) ServeHTTP(w http.ResponseWriter, req *http.Request) {\n  socket, err := upgrader.Upgrade(w, req, nil)\n  if err != nil {\n    log.Fatal(\"ServeHTTP:\", err)\n    return\n  }\n\nauthCookie, err := req.Cookie(\"auth\")\n\n if err != nil {\n\n log.Fatal(\"Failed to get auth cookie:\", err)\n\n return\n\n }\n\n client := &client{\n\n socket:   socket,\n\n send:     make(chan *message, messageBufferSize),\n\n room:     r,\n\n userData: objx.MustFromBase64(authCookie.Value),\n\n }\n\n  r.join <- client\n  defer func() { r.leave <- client }()\n  go client.write()\n  client.read()\n}\n```", "```go\nsocket.send(JSON.stringify({\"Message\": msgBox.val()}));\n```", "```go\nsocket.onmessage = function(e) {\n  var msg = eval(\"(\"+e.data+\")\");\n  messages.append(\n    $(\"<li>\").append(\n      $(\"<strong>\").text(msg.Name + \": \"),\n      $(\"<span>\").text(msg.Message)\n    )\n  );\n}\n```", "```go\n\ngo build -o chat\n\n./chat -host=\":8080\"\n\n```"]