["```go\nauthCookieValue := objx.New(map[string]interface{}{\n  \"name\":       user.Name(),\n\n \"avatar_url\": user.AvatarURL(),\n\n}).MustBase64()\n```", "```go\ntype message struct {\n  Name      string\n  Message   string\n  When      time.Time\n\nAvatarURL string\n\n}\n```", "```go\nfunc (c *client) read() {\n  for {\n    var msg *message\n    if err := c.socket.ReadJSON(&msg); err == nil {\n      msg.When = time.Now()\n      msg.Name = c.userData[\"name\"].(string)\n\nif avatarUrl, ok := c.userData[\"avatar_url\"]; ok {\n\nmsg.AvatarURL = avatarUrl.(string)\n\n}\n\n      c.room.forward <- msg\n    } else {\n      break\n    }\n  }\n  c.socket.Close()\n}\n```", "```go\nsocket.onmessage = function(e) {\n  var msg = eval(\"(\"+e.data+\")\");\n  messages.append(\n    $(\"<li>\").append(\n\n$(\"<img>\").css({\n\nwidth:50,\n\nverticalAlign:\"middle\"\n\n}).attr(\"src\", msg.AvatarURL),\n\n      $(\"<strong>\").text(msg.Name + \": \"),\n      $(\"<span>\").text(msg.Message)\n    )\n  );\n}\n```", "```go\nhttp.HandleFunc(\"/logout\", func(w http.ResponseWriter, r *http.Request) {\n  http.SetCookie(w, &http.Cookie{\n    Name:   \"auth\",\n    Value:  \"\",\n    Path:   \"/\",\n    MaxAge: -1,\n  })\n  w.Header()[\"Location\"] = []string{\"/chat\"}\n  w.WriteHeader(http.StatusTemporaryRedirect)\n})\n```", "```go\nif cookie, err := r.Cookie(\"auth\"); err == http.ErrNoCookie || cookie.Value == \"\"\n```", "```go\n<form id=\"chatbox\">\n  {{.UserData.name}}:<br/>\n  <textarea></textarea>\n  <input type=\"submit\" value=\"Send\" />\n\nor <a href=\"/logout\">sign out</a>\n\n</form>\n```", "```go\n\ngo build \u2013o chat\n\n./chat \u2013host=:8080\n\n```", "```go\n<link rel=\"stylesheet\" href=\"//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\">\n<style>\n  ul#messages        { list-style: none; }\n  ul#messages li     { margin-bottom: 2px; }\n  ul#messages li img { margin-right: 10px; }\n</style>\n```", "```go\n<div class=\"container\">\n  <div class=\"panel panel-default\">\n    <div class=\"panel-body\">\n      <ul id=\"messages\"></ul>\n    </div>\n  </div>\n  <form id=\"chatbox\" role=\"form\">\n    <div class=\"form-group\">\n      <label for=\"message\">Send a message as {{.UserData.name}}</label> or <a href=\"/logout\">Sign out</a>\n      <textarea id=\"message\" class=\"form-control\"></textarea>\n    </div>\n    <input type=\"submit\" value=\"Send\" class=\"btn btn-default\" />\n  </form>\n</div>\n```", "```go\nsocket.onmessage = function(e) {\n  var msg = eval(\"(\"+e.data+\")\");\n  messages.append(\n    $(\"<li>\").append(\n      $(\"<img>\").\nattr(\"title\", msg.Name)\n\n.css({\n        width:50,\n        verticalAlign:\"middle\"\n      }).attr(\"src\", msg.AvatarURL),\n      $(\"<span>\").text(msg.Message)\n    )\n  );\n}\n```", "```go\n\ngo build \u2013o chat\n\n./chat \u2013host=:8080\n\n```", "```go\npackage main\nimport (\n  \"errors\"\n)\n// ErrNoAvatar is the error that is returned when the\n// Avatar instance is unable to provide an avatar URL.\nvar ErrNoAvatarURL = errors.New(\"chat: Unable to get an avatar URL.\")\n// Avatar represents types capable of representing\n// user profile pictures.\ntype Avatar interface {\n  // GetAvatarURL gets the avatar URL for the specified client,\n  // or returns an error if something goes wrong.\n  // ErrNoAvatarURL is returned if the object is unable to get\n  // a URL for the specified client.\n  GetAvatarURL(c *client) (string, error)\n}\n```", "```go\npackage main\nimport \"testing\"\nfunc TestAuthAvatar(t *testing.T) {\n  var authAvatar AuthAvatar\n  client := new(client)\n  url, err := authAvatar.GetAvatarURL(client)\n  if err != ErrNoAvatarURL {\n    t.Error(\"AuthAvatar.GetAvatarURL should return ErrNoAvatarURL when no value present\")\n  }\n  // set a value\n  testUrl := \"http://url-to-gravatar/\"\n  client.userData = map[string]interface{}{\"avatar_url\": testUrl}\n  url, err = authAvatar.GetAvatarURL(client)\n  if err != nil {\n    t.Error(\"AuthAvatar.GetAvatarURL should return no error when value present\")\n  } else {\n    if url != testUrl {\n      t.Error(\"AuthAvatar.GetAvatarURL should return correct URL\")\n    }\n  }\n}\n```", "```go\ntype AuthAvatar struct{}\nvar UseAuthAvatar AuthAvatar\nfunc (_ AuthAvatar) GetAvatarURL(c *client) (string, error) {\n  if url, ok := c.userData[\"avatar_url\"]; ok {\n    if urlStr, ok := url.(string); ok {\n      return urlStr, nil\n    }\n  }\n  return \"\", ErrNoAvatarURL\n}\n```", "```go\n\ngo test\n\n```", "```go\n// avatar is how avatar information will be obtained.\navatar Avatar\n```", "```go\n// newRoom makes a new room that is ready to go.\nfunc newRoom(avatar Avatar) *room {\n  return &room{\n    forward: make(chan *message),\n    join:    make(chan *client),\n    leave:   make(chan *client),\n    clients: make(map[*client]bool),\n    tracer:  trace.Off(),\n    avatar:  avatar,\n  }\n}\n```", "```go\nr := newRoom(UseAuthAvatar)\n```", "```go\nfunc move(animated bool) { /* ... */ }\nconst Animate = true\nconst DontAnimate = false\n```", "```go\nmove(true)\nmove(false)\nmove(Animate)\nmove(DontAnimate)\n```", "```go\nfunc (c *client) read() {\n  for {\n    var msg *message\n    if err := c.socket.ReadJSON(&msg); err == nil {\n      msg.When = time.Now()\n      msg.Name = c.userData[\"name\"].(string)\n      msg.AvatarURL, _ = c.room.avatar.GetAvatarURL(c)\n      c.room.forward <- msg\n    } else {\n      break\n    }\n  }\n  c.socket.Close()\n}\n```", "```go\nfunc TestGravatarAvatar(t *testing.T) {\n  var gravatarAvitar GravatarAvatar\n  client := new(client)\n  client.userData = map[string]interface{}{\"email\": \"MyEmailAddress@example.com\"}\n  url, err := gravatarAvitar.GetAvatarURL(client)\n  if err != nil {\n    t.Error(\"GravatarAvitar.GetAvatarURL should not return an error\")\n  }\n  if url != \"//www.gravatar.com/avatar/0bc83cb571cd1c50ba6f3e8a78ef1346\" {\n    t.Errorf(\"GravatarAvitar.GetAvatarURL wrongly returned %s\", url)\n  }\n}\n```", "```go\ntype GravatarAvatar struct{}\nvar UseGravatar GravatarAvatar\nfunc (_ GravatarAvatar) GetAvatarURL(c *client) (string, error) {\n  if email, ok := c.userData[\"email\"]; ok {\n    if emailStr, ok := email.(string); ok {\n      m := md5.New()\n      io.WriteString(m, strings.ToLower(emailStr))\n      return fmt.Sprintf(\"//www.gravatar.com/avatar/%x\", m.Sum(nil)), nil\n    }\n  }\n  return \"\", ErrNoAvatarURL\n}\n```", "```go\nauthCookieValue := objx.New(map[string]interface{}{\n  \"name\":       user.Name(),\n  \"avatar_url\": user.AvatarURL(),\n  \"email\":      user.Email(),\n}).MustBase64()\n```", "```go\nr := newRoom(UseGravatar)\n```", "```go\nm := md5.New()\nio.WriteString(m, strings.ToLower(user.Name()))\nuserId := fmt.Sprintf(\"%x\", m.Sum(nil))\n// save some data\nauthCookieValue := objx.New(map[string]interface{}{\n  \"userid\":     userId,\n  \"name\":       user.Name(),\n  \"avatar_url\": user.AvatarURL(),\n  \"email\":      user.Email(),\n}).MustBase64()\n```", "```go\nclient.userData = map[string]interface{}{\"email\": \"MyEmailAddress@example.com\"}\n```", "```go\nclient.userData = map[string]interface{}{\"userid\": \"0bc83cb571cd1c50ba6f3e8a78ef1346\"}\n```", "```go\nfunc (_ GravatarAvatar) GetAvatarURL(c *client) (string, error) {\n  if userid, ok := c.userData[\"userid\"]; ok {\n    if useridStr, ok := userid.(string); ok {\n      return \"//www.gravatar.com/avatar/\" + useridStr, nil\n    }\n  }\n  return \"\", ErrNoAvatarURL\n}\n```", "```go\n<html>\n  <head>\n    <title>Upload</title>\n    <link rel=\"stylesheet\" href=\"//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\">\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"page-header\">\n        <h1>Upload picture</h1>\n      </div>\n      <form role=\"form\" action=\"/uploader\" enctype=\"multipart/form-data\" method=\"post\">\n        <input type=\"hidden\" name=\"userid\" value=\"{{.UserData.userid}}\" />\n        <div class=\"form-group\">\n          <label for=\"message\">Select file</label>\n          <input type=\"file\" name=\"avatarFile\" />\n        </div>\n        <input type=\"submit\" value=\"Upload\" class=\"btn \" />\n      </form>\n    </div>\n  </body>\n</html>\n```", "```go\nhttp.Handle(\"/upload\", &templateHandler{filename: \"upload.html\"})\n```", "```go\nfunc uploaderHandler(w http.ResponseWriter, req *http.Request) {\n  userId := req.FormValue(\"userid\")\n  file, header, err := req.FormFile(\"avatarFile\")\n  if err != nil {\n    io.WriteString(w, err.Error())\n    return\n  }\n  data, err := ioutil.ReadAll(file)\n  if err != nil {\n    io.WriteString(w, err.Error())\n    return\n  }\n  filename := path.Join(\"avatars\", userId+path.Ext(header.Filename))\n  err = ioutil.WriteFile(filename, data, 0777)\n  if err != nil {\n    io.WriteString(w, err.Error())\n    return\n  }\n  io.WriteString(w, \"Successful\")\n}\n```", "```go\nhttp.HandleFunc(\"/uploader\", uploaderHandler)\n```", "```go\n\ngo build -o chat\n\n./chat -host=:8080\n\n```", "```go\nhttp.Handle(\"/avatars/\",\n  http.StripPrefix(\"/avatars/\",\n    http.FileServer(http.Dir(\"./avatars\"))))\n```", "```go\nfunc TestFileSystemAvatar(t *testing.T) {\n\n  // make a test avatar file\n  filename := path.Join(\"avatars\", \"abc.jpg\")\n  ioutil.WriteFile(filename, []byte{}, 0777)\n  defer func() { os.Remove(filename) }()\n\n  var fileSystemAvatar FileSystemAvatar\n  client := new(client)\n  client.userData = map[string]interface{}{\"userid\": \"abc\"}\n  url, err := fileSystemAvatar.GetAvatarURL(client)\n  if err != nil {\n    t.Error(\"FileSystemAvatar.GetAvatarURL should not return an error\")\n  }\n  if url != \"/avatars/abc.jpg\" {\n    t.Errorf(\"FileSystemAvatar.GetAvatarURL wrongly returned %s\", url)\n  }\n}\n```", "```go\ntype FileSystemAvatar struct{}\nvar UseFileSystemAvatar FileSystemAvatar\nfunc (_ FileSystemAvatar) GetAvatarURL(c *client) (string, error) {\n  if userid, ok := c.userData[\"userid\"]; ok {\n    if useridStr, ok := userid.(string); ok {\n      return \"/avatars/\" + useridStr + \".jpg\", nil\n    }\n  }\n  return \"\", ErrNoAvatarURL\n}\n```", "```go\nr := newRoom(UseFileSystemAvatar)\n```", "```go\nfunc (_ FileSystemAvatar) GetAvatarURL(c *client) (string, error) {\n  if userid, ok := c.userData[\"userid\"]; ok {\n    if useridStr, ok := userid.(string); ok {\n      if files, err := ioutil.ReadDir(\"avatars\"); err == nil {\n        for _, file := range files {\n          if file.IsDir() {\n            continue\n          }\n          if match, _ := path.Match(useridStr+\"*\", file.Name()); match {\n            return \"/avatars/\" + file.Name(), nil\n          }\n        }\n      }\n    }\n  }\n  return \"\", ErrNoAvatarURL\n}\n```", "```go\nimport gomniauthcommon \"github.com/stretchr/gomniauth/common\"\ntype ChatUser interface {\n  UniqueID() string\n  AvatarURL() string\n}\ntype chatUser struct {\n  gomniauthcommon.User\n  uniqueID string\n}\nfunc (u chatUser) UniqueID() string {\n  return u.uniqueID\n}\n```", "```go\nfunc TestAuthAvatar(t *testing.T) {\n  var authAvatar AuthAvatar\n  testUser := &gomniauthtest.TestUser{}\n  testUser.On(\"AvatarURL\").Return(\"\", ErrNoAvatarURL)\n  testChatUser := &chatUser{User: testUser}\n  url, err := authAvatar.GetAvatarURL(testChatUser)\n  if err != ErrNoAvatarURL {\n    t.Error(\"AuthAvatar.GetAvatarURL should return ErrNoAvatarURL when no value present\")\n  }\n  testUrl := \"http://url-to-gravatar/\"\n  testUser = &gomniauthtest.TestUser{}\n  testChatUser.User = testUser\n  testUser.On(\"AvatarURL\").Return(testUrl, nil)\n  url, err = authAvatar.GetAvatarURL(testChatUser)\n  if err != nil {\n    t.Error(\"AuthAvatar.GetAvatarURL should return no error when value present\")\n  } else {\n    if url != testUrl {\n      t.Error(\"AuthAvatar.GetAvatarURL should return correct URL\")\n    }\n  }\n}\n```", "```go\nfunc TestGravatarAvatar(t *testing.T) {\n  var gravatarAvitar GravatarAvatar\n  user := &chatUser{uniqueID: \"abc\"}\n  url, err := gravatarAvitar.GetAvatarURL(user)\n  if err != nil {\n    t.Error(\"GravatarAvitar.GetAvatarURL should not return an error\")\n  }\n  if url != \"//www.gravatar.com/avatar/abc\" {\n    t.Errorf(\"GravatarAvitar.GetAvatarURL wrongly returned %s\", url)\n  }\n}\nfunc TestFileSystemAvatar(t *testing.T) {\n  // make a test avatar file\n  filename := path.Join(\"avatars\", \"abc.jpg\")\n  ioutil.WriteFile(filename, []byte{}, 0777)\n  defer func() { os.Remove(filename) }()\n  var fileSystemAvatar FileSystemAvatar\n  user := &chatUser{uniqueID: \"abc\"}\n  url, err := fileSystemAvatar.GetAvatarURL(user)\n  if err != nil {\n    t.Error(\"FileSystemAvatar.GetAvatarURL should not return an error\")\n  }\n  if url != \"/avatars/abc.jpg\" {\n    t.Errorf(\"FileSystemAvatar.GetAvatarURL wrongly returned %s\", url)\n  }\n}\n```", "```go\nGetAvatarURL(ChatUser) (string, error)\n```", "```go\nfunc (_ FileSystemAvatar) GetAvatarURL(u ChatUser) (string, error) {\n  if files, err := ioutil.ReadDir(\"avatars\"); err == nil {\n    for _, file := range files {\n      if file.IsDir() {\n        continue\n      }\n      if match, _ := path.Match(u.UniqueID()+\"*\", file.Name()); match {\n        return \"/avatars/\" + file.Name(), nil\n      }\n    }\n  }\n  return \"\", ErrNoAvatarURL\n}\n```", "```go\nfunc (_ AuthAvatar) GetAvatarURL(u ChatUser) (string, error) {\n  url := u.AvatarURL()\n  if len(url) > 0 {\n    return url, nil\n  }\n  return \"\", ErrNoAvatarURL\n}\n```", "```go\nfunc (_ GravatarAvatar) GetAvatarURL(u ChatUser) (string, error) {\n  return \"//www.gravatar.com/avatar/\" + u.UniqueID(), nil\n}\n```", "```go\n// set the active Avatar implementation\nvar avatars Avatar = UseFileSystemAvatar\n```", "```go\nif avatarUrl, ok := c.userData[\"avatar_url\"]; ok {\n  msg.AvatarURL = avatarUrl.(string)\n}\n```", "```go\nuser, err := provider.GetUser(creds)\nif err != nil {\n  log.Fatalln(\"Error when trying to get user from\", provider, \"-\", err)\n}\nchatUser := &chatUser{User: user}\nm := md5.New()\nio.WriteString(m, strings.ToLower(user.Name()))\nchatUser.uniqueID = fmt.Sprintf(\"%x\", m.Sum(nil))\navatarURL, err := avatars.GetAvatarURL(chatUser)\nif err != nil {\n  log.Fatalln(\"Error when trying to GetAvatarURL\", \"-\", err)\n}\n```", "```go\nauthCookieValue := objx.New(map[string]interface{}{\n  \"userid\":     chatUser.uniqueID,\n  \"name\":       user.Name(),\n  \"avatar_url\": avatarURL,\n}).MustBase64()\n```", "```go\nfunc newRoom() *room {\n  return &room{\n    forward: make(chan *message),\n    join:    make(chan *client),\n    leave:   make(chan *client),\n    clients: make(map[*client]bool),\n    tracer:  trace.Off(),\n  }\n}\n```", "```go\ntype TryAvatars []Avatar\n```", "```go\nfunc (a TryAvatars) GetAvatarURL(u ChatUser) (string, error) {\n  for _, avatar := range a {\n    if url, err := avatar.GetAvatarURL(u); err == nil {\n      return url, nil\n    }\n  }\n  return \"\", ErrNoAvatarURL\n}\n```", "```go\nvar avatars Avatar = TryAvatars{\n  UseFileSystemAvatar,\n  UseAuthAvatar,\n  UseGravatar}\n```", "```go\n\n    go build \u2013o chat\n\n    ./chat \u2013host=:8080\n\n    ```"]