["```go\ntype HandlerFunc func(http.ResponseWriter, *http.Request)\n```", "```go\npackage main\nimport (\n  \"net/http\"\n  \"sync\"\n)\nvar vars map[*http.Request]map[string]interface{}\nvar varsLock sync.RWMutex\n```", "```go\nfunc OpenVars(r *http.Request) {\n  varsLock.Lock()\n  if vars == nil {\n    vars = map[*http.Request]map[string]interface{}{}\n  }\n  vars[r] = map[string]interface{}{}\n  varsLock.Unlock()\n}\n```", "```go\nfunc CloseVars(r *http.Request) {\n  varsLock.Lock()\n  delete(vars, r)\n  varsLock.Unlock()\n}\n```", "```go\nfunc GetVar(r *http.Request, key string) interface{} {\n  varsLock.RLock()\n  value := vars[r][key]\n  varsLock.RUnlock()\n  return value\n}\nfunc SetVar(r *http.Request, key string, value interface{}) {\n  varsLock.Lock()\n  vars[r][key] = value\n  varsLock.Unlock()\n}\n```", "```go\npackage main\nfunc main(){}\n```", "```go\nfunc withAPIKey(fn http.HandlerFunc) http.HandlerFunc {\n  return func(w http.ResponseWriter, r *http.Request) {\n    if !isValidAPIKey(r.URL.Query().Get(\"key\")) {\n      respondErr(w, r, http.StatusUnauthorized, \"invalid API key\")\n      return\n    }\n    fn(w, r)\n  }\n}\n```", "```go\nfunc isValidAPIKey(key string) bool {\n  return key == \"abc123\"\n}\n```", "```go\nfunc withData(d *mgo.Session, f http.HandlerFunc) http.HandlerFunc {\n  return func(w http.ResponseWriter, r *http.Request) {\n    thisDb := d.Copy()\n    defer thisDb.Close()\n    SetVar(r, \"db\", thisDb.DB(\"ballots\"))\n    f(w, r)\n  }\n}\n```", "```go\nfunc withVars(fn http.HandlerFunc) http.HandlerFunc {\n  return func(w http.ResponseWriter, r *http.Request) {\n    OpenVars(r)\n    defer CloseVars(r)\n    fn(w, r)\n  }\n}\n```", "```go\nfunc withCORS(fn http.HandlerFunc) http.HandlerFunc {\n  return func(w http.ResponseWriter, r *http.Request) {\n    w.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n    w.Header().Set(\"Access-Control-Expose-Headers\", \"Location\")\n    fn(w, r)\n  }\n}\n```", "```go\nfunc decodeBody(r *http.Request, v interface{}) error {\n  defer r.Body.Close()\n  return json.NewDecoder(r.Body).Decode(v)\n}\nfunc encodeBody(w http.ResponseWriter, r *http.Request, v interface{}) error {\n  return json.NewEncoder(w).Encode(v)\n}\n```", "```go\nfunc respond(w http.ResponseWriter, r *http.Request,\n  status int, data interface{},\n) {\n  w.WriteHeader(status)\n  if data != nil {\n    encodeBody(w, r, data)\n  }\n}\n```", "```go\nfunc respondErr(w http.ResponseWriter, r *http.Request,\n  status int, args ...interface{},\n) {\n  respond(w, r, status, map[string]interface{}{\n    \"error\": map[string]interface{}{\n      \"message\": fmt.Sprint(args...),\n    },\n  })\n}\n```", "```go\nfunc respondHTTPErr(w http.ResponseWriter, r *http.Request,\n  status int,\n) {\n  respondErr(w, r, status, http.StatusText(status))\n}\n```", "```go\npackage main\nimport (\n  \"strings\"\n)\nconst PathSeparator = \"/\"\ntype Path struct {\n  Path string\n  ID   string\n}\nfunc NewPath(p string) *Path {\n  var id string\n  p = strings.Trim(p, PathSeparator)\n  s := strings.Split(p, PathSeparator)\n  if len(s) > 1 {\n    id = s[len(s)-1]\n    p = strings.Join(s[:len(s)-1], PathSeparator)\n  }\n  return &Path{Path: p, ID: id}\n}\nfunc (p *Path) HasID() bool {\n  return len(p.ID) > 0\n}\n```", "```go\nfunc main() {\n  var (\n    addr  = flag.String(\"addr\", \":8080\", \"endpoint address\")\n    mongo = flag.String(\"mongo\", \"localhost\", \"mongodb address\")\n  )\n  flag.Parse()\n  log.Println(\"Dialing mongo\", *mongo)\n  db, err := mgo.Dial(*mongo)\n  if err != nil {\n    log.Fatalln(\"failed to connect to mongo:\", err)\n  }\n  defer db.Close()\n  mux := http.NewServeMux()\n  mux.HandleFunc(\"/polls/\", withCORS(withVars(withData(db, withAPIKey(handlePolls)))))\n  log.Println(\"Starting web server on\", *addr)\n  graceful.Run(*addr, 1*time.Second, mux)\n  log.Println(\"Stopping...\")\n}\n```", "```go\nwithCORS(withVars(withData(db, withAPIKey(handlePolls)))))\n```", "```go\npackage main\nimport \"gopkg.in/mgo.v2/bson\"\ntype poll struct {\n  ID      bson.ObjectId  `bson:\"_id\" json:\"id\"`\n  Title   string         `json\":\"title\"\"`\n  Options []string       `json:\"options\"`\n  Results map[string]int `json:\"results,omitempty\"`\n}\n```", "```go\nID bson.ObjectId `bson:\"_id\" json:\"id\"`\n```", "```go\nfunc handlePolls(w http.ResponseWriter, r *http.Request) {\n  switch r.Method {\n  case \"GET\":\n    handlePollsGet(w, r)\n    return\n  case \"POST\":\n    handlePollsPost(w, r)\n    return\n  case \"DELETE\":\n    handlePollsDelete(w, r)\n    return\n  }\n  // not found\n  respondHTTPErr(w, r, http.StatusNotFound)\n}\n```", "```go\nfunc handlePollsGet(w http.ResponseWriter, r *http.Request) {\n  respondErr(w, r, http.StatusInternalServerError, errors.New(\"not implemented\"))\n}\nfunc handlePollsPost(w http.ResponseWriter, r *http.Request) {\n  respondErr(w, r, http.StatusInternalServerError, errors.New(\"not implemented\"))\n}\nfunc handlePollsDelete(w http.ResponseWriter, r *http.Request) {\n  respondErr(w, r, http.StatusInternalServerError, errors.New(\"not implemented\"))\n}\n```", "```go\nfunc handlePollsGet(w http.ResponseWriter, r *http.Request) {\n  db := GetVar(r, \"db\").(*mgo.Database)\n  c := db.C(\"polls\")\n  var q *mgo.Query\n  p := NewPath(r.URL.Path)\n  if p.HasID() {\n    // get specific poll\n    q = c.FindId(bson.ObjectIdHex(p.ID))\n  } else {\n    // get all polls\n    q = c.Find(nil)\n  }\n  var result []*poll\n  if err := q.All(&result); err != nil {\n    respondErr(w, r, http.StatusInternalServerError, err)\n    return\n  }\n  respond(w, r, http.StatusOK, &result)\n}\n```", "```go\n> use ballots\nswitched to db ballots\n> db.polls.insert({\"title\":\"Test poll\",\"options\":[\"one\",\"two\",\"three\"]})\n> db.polls.insert({\"title\":\"Test poll two\",\"options\":[\"four\",\"five\",\"six\"]})\n```", "```go\n\ngo build \u2013o api\n\n./api\n\n```", "```go\nfunc handlePollsPost(w http.ResponseWriter, r *http.Request) {\n  db := GetVar(r, \"db\").(*mgo.Database)\n  c := db.C(\"polls\")\n  var p poll\n  if err := decodeBody(r, &p); err != nil {\n    respondErr(w, r, http.StatusBadRequest, \"failed to read poll from request\", err)\n    return\n  }\n  p.ID = bson.NewObjectId()\n  if err := c.Insert(p); err != nil {\n    respondErr(w, r, http.StatusInternalServerError, \"failed to insert poll\", err)\n    return\n  }\n  w.Header().Set(\"Location\", \"polls/\"+p.ID.Hex())\n  respond(w, r, http.StatusCreated, nil)\n}\n```", "```go\nfunc handlePollsDelete(w http.ResponseWriter, r *http.Request) {\n  db := GetVar(r, \"db\").(*mgo.Database)\n  c := db.C(\"polls\")\n  p := NewPath(r.URL.Path)\n  if !p.HasID() {\n    respondErr(w, r, http.StatusMethodNotAllowed, \"Cannot delete all polls.\")\n    return\n  }\n  if err := c.RemoveId(bson.ObjectIdHex(p.ID)); err != nil {\n    respondErr(w, r, http.StatusInternalServerError, \"failed to delete poll\", err)\n    return\n  }\n  respond(w, r, http.StatusOK, nil) // ok\n}\n```", "```go\ncase \"OPTIONS\":\n  w.Header().Add(\"Access-Control-Allow-Methods\", \"DELETE\")\n  respond(w, r, http.StatusOK, nil)\n  return\n```", "```go\n\ngo build \u2013o api\n\n./api\n\n```", "```go\n\n    curl -X GET http://localhost:8080/polls/?key=abc123\n\n    ```", "```go\n\n    [{\"id\":\"541727b08ea48e5e5d5bb189\",\"title\":\"Best Beatle?\",\"options\":[\"john\",\"paul\",\"george\",\"ringo\"]},{\"id\":\"541728728ea48e5e5d5bb18a\",\"title\":\"Favorite language?\",\"options\":[\"go\",\"java\",\"javascript\",\"ruby\"]}]\n\n    ```", "```go\n\n    curl --data '{\"title\":\"test\",\"options\":[\"one\",\"two\",\"three\"]}' -X POST http://localhost:8080/polls/?key=abc123\n\n    ```", "```go\n\n    curl -X GET http://localhost:8080/polls/?key=abc123\n\n    ```", "```go\n\n    curl -X GET http://localhost:8080/polls/541727b08ea48e5e5d5bb189?key=abc123\n\n    [{\"id\":\"541727b08ea48e5e5d5bb189\",\",\"title\":\"Best Beatle?\",\"options\":[\"john\",\"paul\",\"george\",\"ringo\"]}]\n\n    ```", "```go\n\n    curl -X DELETE http://localhost:8080/polls/541727b08ea48e5e5d5bb189?key=abc123\n\n    ```", "```go\n\n    curl -X GET http://localhost:8080/polls/?key=abc123\n\n    [{\"id\":\"541728728ea48e5e5d5bb18a\",\"title\":\"Favorite language?\",\"options\":[\"go\",\"java\",\"javascript\",\"ruby\"]}]\n\n    ```", "```go\npackage main\nimport (\n  \"flag\"\n  \"log\"\n  \"net/http\"\n)\nfunc main() {\n  var addr = flag.String(\"addr\", \":8081\", \"website address\")\n  flag.Parse()\n  mux := http.NewServeMux()\n  mux.Handle(\"/\", http.StripPrefix(\"/\", \n    http.FileServer(http.Dir(\"public\"))))\n  log.Println(\"Serving website at:\", *addr)\n  http.ListenAndServe(*addr, mux)\n}\n```", "```go\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Polls</title>\n  <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n</body>\n</html>\n```", "```go\n<div class=\"container\">\n  <div class=\"col-md-4\"></div>\n  <div class=\"col-md-4\">\n    <h1>Polls</h1>\n    <ul id=\"polls\"></ul>\n    <a href=\"new.html\" class=\"btn btn-primary\">Create new poll</a>\n  </div>\n  <div class=\"col-md-4\"></div>\n</div>\n```", "```go\n<script src=\"img/jquery.min.js\"></script>\n<script src=\"img/bootstrap.min.js\"></script>\n<script>\n  $(function(){\n    var update = function(){\n      $.get(\"http://localhost:8080/polls/?key=abc123\", null, null, \"json\")\n        .done(function(polls){\n          $(\"#polls\").empty();\n          for (var p in polls) {\n            var poll = polls[p];\n            $(\"#polls\").append(\n              $(\"<li>\").append(\n                $(\"<a>\")\n                  .attr(\"href\", \"view.html?poll=polls/\" + poll.id)\n                  .text(poll.title)\n              )\n            )\n          }\n        }\n      );\n      window.setTimeout(update, 10000);\n    }\n    update();\n  });\n</script>\n```", "```go\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Create Poll</title>\n  <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n  <script src=\"img/jquery.min.js\"></script>\n  <script src=\"img/bootstrap.min.js\"></script>\n</body>\n</html>\n```", "```go\n<div class=\"container\">\n  <div class=\"col-md-4\"></div>\n  <form id=\"poll\" role=\"form\" class=\"col-md-4\">\n    <h2>Create Poll</h2>\n    <div class=\"form-group\">\n      <label for=\"title\">Title</label>\n      <input type=\"text\" class=\"form-control\" id=\"title\" placeholder=\"Title\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"options\">Options</label>\n      <input type=\"text\" class=\"form-control\" id=\"options\" placeholder=\"Options\">\n      <p class=\"help-block\">Comma separated</p>\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\">Create Poll</button> or <a href=\"/\">cancel</a>\n  </form>\n  <div class=\"col-md-4\"></div>\n</div>\n```", "```go\n<script>\n  $(function(){\n    var form = $(\"form#poll\");\n    form.submit(function(e){\n      e.preventDefault();\n      var title = form.find(\"input[id='title']\").val();\n      var options = form.find(\"input[id='options']\").val();\n      options = options.split(\",\");\n      for (var opt in options) {\n        options[opt] = options[opt].trim();\n      }\n      $.post(\"http://localhost:8080/polls/?key=abc123\",\n        JSON.stringify({\n          title: title, options: options\n        })\n      ).done(function(d, s, r){\n        location.href = \"view.html?poll=\" + r.getResponseHeader(\"Location\");\n      });\n    });\n  });\n</script>\n```", "```go\n<!DOCTYPE html>\n<html>\n<head>\n  <title>View Poll</title>\n  <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"col-md-4\"></div>\n    <div class=\"col-md-4\">\n      <h1 data-field=\"title\">...</h1>\n      <ul id=\"options\"></ul>\n      <div id=\"chart\"></div>\n      <div>\n        <button class=\"btn btn-sm\" id=\"delete\">Delete this poll</button>\n      </div>\n    </div>\n    <div class=\"col-md-4\"></div>\n  </div>\n</body>\n</html>\n```", "```go\n<script src=\"img/\"></script>\n<script src=\"img/jquery.min.js\"></script>\n<script src=\"img/bootstrap.min.js\"></script>\n<script>\ngoogle.load('visualization', '1.0', {'packages':['corechart']});\ngoogle.setOnLoadCallback(function(){\n  $(function(){\n    var chart;\n    var poll = location.href.split(\"poll=\")[1];\n    var update = function(){\n      $.get(\"http://localhost:8080/\"+poll+\"?key=abc123\", null, null, \"json\")\n        .done(function(polls){\n          var poll = polls[0];\n          $('[data-field=\"title\"]').text(poll.title);\n          $(\"#options\").empty();\n          for (var o in poll.results) {\n            $(\"#options\").append(\n              $(\"<li>\").append(\n                $(\"<small>\").addClass(\"label label-default\").text(poll.results[o]),\n                \" \", o\n              )\n            )\n          }\n          if (poll.results) {\n            var data = new google.visualization.DataTable();\n            data.addColumn(\"string\",\"Option\");\n            data.addColumn(\"number\",\"Votes\");\n            for (var o in poll.results) {\n              data.addRow([o, poll.results[o]])\n            }\n            if (!chart) {\n              chart = new google.visualization.PieChart(document.getElementById('chart'));\n            }\n            chart.draw(data, {is3D: true});\n          }\n        }\n      );\n      window.setTimeout(update, 1000);\n    };\n    update();\n    $(\"#delete\").click(function(){\n      if (confirm(\"Sure?\")) {\n        $.ajax({\n          url:\"http://localhost:8080/\"+poll+\"?key=abc123\",\n          type:\"DELETE\"\n        })\n        .done(function(){\n          location.href = \"/\";\n        })\n      }\n    });\n  });\n});\n</script>\n```", "```go\n\n    nsqlookupd\n\n    ```", "```go\n\n    nsqd --lookupd-tcp-address=localhost:4160\n\n    ```", "```go\n\n    mongod\n\n    ```", "```go\n\n    cd counter\n\n    go build \u2013o counter\n\n    ./counter\n\n    ```", "```go\n\n    cd ../twittervotes\n\n    go build \u2013o twittervotes\n\n    ./twittervotes\n\n    ```", "```go\n\n    cd ../api\n\n    go build \u2013o api\n\n    ./api\n\n    ```", "```go\n\n    cd ../web\n\n    go build \u2013o web\n\n    ./web\n\n    ```"]