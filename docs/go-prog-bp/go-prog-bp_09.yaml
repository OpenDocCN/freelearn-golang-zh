- en: Appendix A. Good Practices for a Stable Go Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录A.稳定的Go环境的良好实践
- en: Writing Go code is a fun and enjoyable experience where compile-time errors—rather
    than being a pain—actually guide you to write robust, high-quality code. However,
    every now and again, you will encounter environmental issues that start to get
    in the way and break your flow. While you can usually resolve these issues after
    some searching and a little tweaking, setting up your development environment
    correctly goes a long way in reducing problems, allowing you to focus on building
    useful applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 编写Go代码是一种有趣且愉快的体验，其中编译时错误——而不是痛苦——实际上会指导您编写健壮、高质量的代码。然而，偶尔会遇到环境问题，开始妨碍并打断您的工作流程。虽然通常可以在一些搜索和一些微调后解决这些问题，但正确设置开发环境可以大大减少问题，使您能够专注于构建有用的应用程序。
- en: In this chapter, we are going to install Go from scratch on a new machine and
    discuss some of the environmental options we have and the impact they might have
    in the future. We will also consider how collaboration might influence some of
    our decisions, as well as what impact open sourcing our packages might have.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将在新机器上从头开始安装Go，并讨论我们拥有的一些环境选项以及它们可能在未来产生的影响。我们还将考虑协作如何影响我们的一些决定，以及开源我们的软件包可能会产生什么影响。
- en: 'Specifically, we are going to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们将：
- en: Get the Go source code and build it natively on your development machine
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取Go源代码并在开发机器上本地构建它
- en: Learn what the `GOPATH` environment variable is for, and discuss a sensible
    approach to its use
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解`GOPATH`环境变量的用途，并讨论其合理的使用方法
- en: Learn about the Go tools and how to use them to keep the quality of our code
    high
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Go工具以及如何使用它们来保持我们代码的质量
- en: Learn how to use a tool to automatically manage our imports
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用工具自动管理我们的导入
- en: Think about "on save" operations for our `.go` files, and how we can integrate
    the Go tools as part of our daily development
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑我们的`.go`文件的“保存时”操作，以及我们如何将Go工具集成为我们日常开发的一部分。
- en: Installing Go
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Go
- en: Go is an open source project written originally in C, which means we can compile
    our own version from the code easily; this remains the best option for installing
    Go for a variety of reasons. It allows us to navigate through the source if we
    need to look something up later, either in the standard library Go code, or in
    the C code of the tools. It also allows us to easily update to newer versions
    of Go or experiment with release candidates as they come out, just by pulling
    a different tag or branch from the code repository and building again. Of course,
    we can also easily roll back to earlier versions if we need to, and even fix bugs
    and generate pull requests to send to the Go core team for them to consider contributions
    to the project.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Go是一个最初用C编写的开源项目，这意味着我们可以轻松地从代码中编译我们自己的版本；这仍然是安装Go的最佳选项，出于各种原因。它允许我们在需要稍后查找某些内容时浏览源代码，无论是在标准库Go代码中还是在工具的C代码中。它还允许我们轻松地更新到Go的新版本，或者在发布候选版本出现时进行实验，只需从代码存储库中拉取不同的标签或分支并重新构建。当然，如果需要，我们也可以轻松地回滚到早期版本，甚至修复错误并生成拉取请求发送给Go核心团队，以便他们考虑对项目的贡献。
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A continually updated resource for installing Go from its source on a variety
    of platforms can be found online at [http://golang.org/doc/install/source](http://golang.org/doc/install/source)
    or by searching for `Install Golang from source` . This chapter will cover the
    same things, but if you encounter problems, the Internet is going to be your best
    friend in helping resolve issues.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在[http://golang.org/doc/install/source](http://golang.org/doc/install/source)上找到一个不断更新的资源，用于在各种平台上从源代码安装Go，或者通过搜索`Install
    Golang from source`。本章将涵盖相同的内容，但如果遇到问题，互联网将成为帮助解决问题的最佳途径。
- en: Installing the C tools
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装C工具
- en: Since the Go tool chain is written in C, we will actually be compiling C code
    when we build our Go installation. This may seem a little counter-intuitive; a
    programming language was written using a different programming language, but of
    course, Go didn't exist when the Go core team started writing Go, but C did. It
    is more accurate to say that the tools used to build and link Go programs are
    written in C. Either way, for now, we need to be able to compile the C source
    code.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Go工具链是用C编写的，因此在构建Go安装时实际上会编译C代码。这可能看起来有点反直觉；使用一种不同的编程语言编写了一种编程语言，但当然，当Go核心团队开始编写Go时，Go并不存在，但C存在。更准确地说，用于构建和链接Go程序的工具是用C编写的。无论如何，现在我们需要能够编译C源代码。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: At the first ever Gophercon in Denver, Colorado in 2014, Rob Pike and the team
    expressed that one of their goals would be to replace the C tool chain with programs
    written in Go— so that the entire stack becomes Go. At the time of writing, this
    hasn't happened yet, so we will need the C tools.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在2014年的丹佛科罗拉多州举行的首届Gophercon上，Rob Pike和他的团队表示，他们的目标之一将是用Go编写的程序替换C工具链，以便整个堆栈都变成Go。在撰写本文时，这还没有发生，因此我们将需要C工具。
- en: 'To determine whether you need to install the C tools or not, open a terminal
    and try to use the `gcc` command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定是否需要安装C工具，请打开终端并尝试使用`gcc`命令：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you receive a `command not found` error or similar, you will likely have
    to install the C tools. If, however, you see the output from `gcc` giving you
    version information (that's what the `-v` flag was for), you can likely skip this
    section.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果收到`command not found`错误或类似错误，则可能需要安装C工具。但是，如果您看到`gcc`的输出给出版本信息（这就是`-v`标志的作用），则可能可以跳过此部分。
- en: Installing C tools differs for various platforms and could change over time,
    so this section should be treated only as a rough guide to help you get the tools
    you need.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 安装C工具因各种平台而异，并且随时间可能会发生变化，因此本节应该只被视为帮助您获取所需工具的粗略指南。
- en: The tools on a Mac running OS X are shipped with Xcode, which is available in
    App Store for free. Once you install Xcode, you open **Preferences** and navigate
    to the **Downloads** section. From there, you find the command-line tools that
    include the C tools you will need to build Go.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行OS X的Mac上，工具随Xcode一起提供，可在App Store免费获取。安装Xcode后，您打开**首选项**并导航到**下载**部分。从那里，您可以找到包含构建Go所需的C工具的命令行工具。
- en: 'On Ubuntu and Debian systems, you can use `apt-get` to install the tools:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu和Debian系统上，您可以使用`apt-get`安装工具：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For RedHat and Centos 6 systems, you can use `yum` to install the tools:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于RedHat和Centos 6系统，您可以使用`yum`安装工具：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For Windows, the MinGW project offers a Windows installer that will install
    the tools for you. Navigate to [http://www.mingw.org/](http://www.mingw.org/)
    and follow the instructions there to get started.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows，MinGW项目提供了一个Windows安装程序，可以为您安装工具。转到[http://www.mingw.org/](http://www.mingw.org/)并按照那里的说明开始。
- en: 'Once you have successfully installed the tools and ensured the appropriate
    binaries are included in your `PATH` environment variable, you should be able
    to see some sensible output when running `gcc -v` :'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您成功安装了工具，并确保适当的二进制文件包含在您的`PATH`环境变量中，当运行`gcc -v`时，您应该能够看到一些合理的输出：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding snippet is the output on an Apple Mac computer, and the most important
    thing to look for is the lack of the `command not found` error.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 上述片段是在Apple Mac计算机上的输出，最重要的是要查看是否缺少`command not found`错误。
- en: Downloading and building Go from the source
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从源代码下载和构建Go
- en: The Go source code is hosted at Google Code in a Mercurial repository, so we
    will use the `hg` command to clone it in preparation for building.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Go源代码托管在Google Code的Mercurial存储库中，因此我们将使用`hg`命令克隆它以准备构建。
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you do not have the `hg` command, you can get Mercurial from the download
    page at [http://mercurial.selenic.com/downloads](http://mercurial.selenic.com/downloads)
    .
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有`hg`命令，您可以从[http://mercurial.selenic.com/downloads](http://mercurial.selenic.com/downloads)下载页面获取Mercurial。
- en: In a terminal, to install Go, navigate to a suitable location such as `/opt`
    on Unix systems, or `C:\` on Windows.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中，要安装Go，请转到适当的位置，例如Unix系统上的`/opt`，或Windows上的`C:\`。
- en: 'Get the latest release of Go by typing the following command:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通过输入以下命令获取Go的最新版本：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: After a while, the latest Go source code will download into a new `go` folder.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 过一会儿，最新的Go源代码将下载到一个新的`go`文件夹中。
- en: Navigate to the `go/src` folder that was just created and run the `all` script,
    which will build an instance of Go from the source code. On Unix systems this
    is `all.bash` , on Windows it's `all.bat` .
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 转到刚刚创建的`go/src`文件夹并运行`all`脚本，这将从源代码构建Go的实例。在Unix系统上，这是`all.bash`，在Windows上是`all.bat`。
- en: Once all the build steps are complete, you should notice that all the tests
    have successfully passed.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有构建步骤完成，您应该注意到所有测试都已成功通过。
- en: Configuring Go
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Go
- en: Go is now installed, but in order to use the tools we must ensure it is properly
    configured. To make calling the tools easier, we need to add our `go/bin` path
    to the `PATH` environment variable.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Go已安装，但为了使用工具，我们必须确保它已正确配置。为了更容易调用工具，我们需要将我们的`go/bin`路径添加到`PATH`环境变量中。
- en: Note
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: On Unix systems, you should add export `PATH=$PATH:/opt/go/bin` (make sure it
    is the path you chose when downloading the source) to your `.bashrc` file.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unix系统上，您应该将export `PATH=$PATH:/opt/go/bin`（确保这是您下载源代码时选择的路径）添加到您的`.bashrc`文件中。
- en: On Windows, open **System Properties** (try right-clicking on **My Computer**
    ) and under **Advanced** , click on the **Environment Variables** button and use
    the UI to ensure the `PATH` variable contains the path to your `go/bin` folder.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，打开**系统属性**（尝试右键单击**我的电脑**），在**高级**下，单击**环境变量**按钮，并使用UI确保`PATH`变量包含到您的`go/bin`文件夹的路径。
- en: 'In a terminal (you may need to restart it for your changes to take effect),
    you can make sure this worked by printing the value of the `PATH` variable:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中（您可能需要重新启动它以使更改生效），您可以通过打印`PATH`变量的值来确保这一点：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Ensure the value printed contains the correct path to your `go/bin` folder,
    for example, on my machine it prints as:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 确保打印的值包含正确的路径到您的`go/bin`文件夹，例如，在我的机器上打印为：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The colons (semicolons on Windows) between the paths indicate that the `PATH`
    variable is actually a list of folders rather than just one folder. This indicates
    that each folder included will be searched when you enter commands in your terminal.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 路径之间的冒号（在Windows上是分号）表明`PATH`变量实际上是一个文件夹列表，而不仅仅是一个文件夹。这表明在输入终端命令时，将搜索每个包含的文件夹。
- en: 'Now we can make sure the Go build we just made runs successfully:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以确保我们刚刚构建的Go构建成功运行：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Executing the `go` command (that can be found in your `go/bin` location) like
    this will print out the current version for us. For example, for Go 1.3, you should
    see something similar to:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`go`命令（可以在您的`go/bin`位置找到）如下将为我们打印出当前版本。例如，对于Go 1.3，您应该看到类似于：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Getting GOPATH right
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取正确的GOPATH
- en: '`GOPATH` is another environment variable to a folder (like `PATH` in the previous
    section) that is used to specify the location for Go source code and compiled
    binary packages. Using the `import` command in your Go programs will cause the
    compiler to look in the `GOPATH` location to find the packages you are referring
    to. When using `go get` and other commands, projects are downloaded into the `GOPATH`
    folder.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`GOPATH`是另一个环境变量，用于指定Go源代码和已编译二进制包的位置（就像前一节中的`PATH`一样）。在您的Go程序中使用`import`命令将导致编译器在`GOPATH`位置查找您所引用的包。使用`go
    get`和其他命令时，项目将下载到`GOPATH`文件夹中。'
- en: While the `GOPATH` location can contain a list of colon-separated folders such
    as `PATH` , and you can even have a different value for `GOPATH` depending on
    which project you are working in, it is strongly recommended that you use a single
    `GOPATH` location for everything, and this is what we will assume you will do
    for the projects in this book.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`GOPATH`位置可以包含一系列以冒号分隔的文件夹，例如`PATH`，并且您甚至可以根据您正在工作的项目来使用不同的`GOPATH`值，但强烈建议您为所有内容使用单个`GOPATH`位置，这是我们假设您将为本书中的项目所做的。
- en: 'Create a new folder called `go` , this time in your `Users` folder somewhere,
    perhaps in a `Work` subfolder. This will be our `GOPATH` target and is where all
    the third-party code and binaries will end up, as well as where we will write
    our Go programs and packages. Using the same technique you used when setting the
    `PATH` environment variable in the previous section, set the `GOPATH` variable
    to the new `go` folder. Let''s open a terminal and use one of the newly installed
    commands to get a third-party package for us to use:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的`Users`文件夹中的某个地方，也许是`Work`子文件夹中，创建一个名为`go`的新文件夹。这将是我们的`GOPATH`目标，也是所有第三方代码和二进制文件的存放地，以及我们将编写Go程序和包的地方。使用在上一节设置`PATH`环境变量时使用的相同技术，将`GOPATH`变量设置为新的`go`文件夹。让我们打开一个终端并使用新安装的命令之一来获取一个我们要使用的第三方包：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Getting the `powerwalk` library from `Stretchr` will actually cause the following
    folder structure to be created; `$GOPATH/src/github.com/stretchr/powerwalk` .
    You can see that the path segments are important in how Go organizes things, which
    helps namespace projects and keeps them unique. For example, if you created your
    own package called `powerwalk` , you wouldn't keep it in the GitHub repository
    of `Stretchr` , so the path would be different.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 从`Stretchr`获取`powerwalk`库实际上会创建以下文件夹结构；`$GOPATH/src/github.com/stretchr/powerwalk`。您可以看到路径段在Go组织事物方面很重要，这有助于命名空间项目并使它们保持唯一。例如，如果您创建了自己的名为`powerwalk`的包，您不会将其保存在`Stretchr`的GitHub存储库中，因此路径将不同。
- en: When we create projects in this book, you should consider a sensible `GOPATH`
    root for them. For example, I used `github.com/matryer/goblueprints` , and if
    you were to `go get` that, you would actually get a complete copy of all the source
    code for this book in your `GOPATH` folder!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在本书中创建项目时，您应该为它们考虑一个合理的`GOPATH`根目录。例如，我使用了`github.com/matryer/goblueprints`，如果您要`go
    get`它，实际上会在您的`GOPATH`文件夹中获得本书的所有源代码的完整副本！
- en: Go tools
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go工具
- en: An early decision made by the Go core team was that all Go code should look
    familiar and obvious to everybody who speaks Go rather than each code base requiring
    additional learning in order for new programmers to understand it or work on it.
    This is an especially sensible approach when you consider open source projects,
    some of which have hundreds of contributors coming and going all the time.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Go核心团队早期做出的决定是，所有Go代码应该对每个说Go语言的人看起来熟悉和明显，而不是每个代码库都需要额外的学习才能让新程序员理解或处理它。当考虑到开源项目时，这是一个特别明智的做法，其中一些项目有数百名贡献者不断涌入和离开。
- en: There is a range of tools that can assist us in achieving the high standards
    set by the Go core team, and we will see some of the tools in action in this section.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 有一系列工具可以帮助我们达到Go核心团队设定的高标准，我们将在本节中看到其中一些工具的实际应用。
- en: 'In your `GOPATH` location, create a new folder called `tooling` and create
    a new `main.go` file containing the following code verbatim:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的`GOPATH`位置，创建一个名为`tooling`的新文件夹，并创建一个包含以下代码的新`main.go`文件：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The tight spaces and lack of indentation are deliberate as we are going to look
    at a very cool utility that comes with Go.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 紧凑的空间和缺乏缩进是故意的，因为我们将要看一个随Go一起提供的非常酷的实用工具。
- en: 'In a terminal, navigate to your new folder and run:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中，导航到您的新文件夹并运行：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'At Gophercon 2014 in Denver, Colorado, most people learned that rather than
    pronouncing this little triad as "format" or "f, m, t" it is actually pronounced
    as a word. Try saying it to yourself now: "fhumt"; it seems that computer programmers
    aren''t weird enough without speaking an alien language to each other too!'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在2014年的Gophercon在科罗拉多州丹佛市，大多数人都了解到，与其将这个小三合一发音为“格式”或“f, m, t”，实际上它是作为一个单词发音的。现在试着对自己说：“fhumt”；似乎计算机程序员没有说一个外星语言的话，他们就不够怪异！
- en: 'You will notice that this little tool has actually tweaked our code file to
    ensure that the layout (or format) of our program matches Go standards. The new
    version is much easier to read:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到，这个小工具实际上已经调整了我们的代码文件，以确保我们的程序布局（或格式）符合Go标准。新版本要容易阅读得多：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `go fmt` command cares about indentation, code blocks, unnecessary whitespace,
    unnecessary extra line feeds, and more. Formatting your code in this way is a
    great practice to ensure that your Go code looks like all other Go code.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`go fmt`命令关心缩进、代码块、不必要的空格、不必要的额外换行等。以这种方式格式化代码是一个很好的实践，可以确保您的Go代码看起来像所有其他Go代码。'
- en: 'Next we are going to vet our program to make sure we haven''t made any mistakes
    or decisions that might be confusing to our users; we can do this automatically
    with another great tool that we get for free:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将对我们的程序进行审查，以确保我们没有犯任何可能令用户困惑的错误或决定；我们可以使用另一个很棒的免费工具来自动完成这个过程：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output for our little program points out an obvious and glaring mistake:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的小程序的输出指出了一个明显而显眼的错误：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We are calling `return` at the top of our function and then trying to do other
    things afterwards. The `go vet` tool has noticed this and points out that we have
    unreachable code in our file.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在函数顶部调用`return`，然后尝试在此之后做其他事情。`go vet`工具已经注意到了这一点，并指出我们的文件中有无法访问的代码。
- en: Tip
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'If you get an error running any Go tools, it usually means you have to get
    the command before you can use it. However, in the case of the vet tool, you just
    have to open a terminal and run:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在运行任何Go工具时遇到错误，通常意味着您必须获取该命令才能使用它。但是，在vet工具的情况下，您只需打开终端并运行：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: It isn't just silly mistakes like this that `go vet` will catch, it will also
    look for subtler aspects of your program that will guide you towards writing the
    best Go code you can. For an up-to-date list of what the vet tool will report
    on, check out the documentation at [https://godoc.org/code.google.com/p/go.tools/cmd/vet](https://godoc.org/code.google.com/p/go.tools/cmd/vet)
    .
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`go vet`不仅会捕捉到这样的愚蠢错误，它还会寻找程序的更微妙的方面，这将指导您编写尽可能好的Go代码。有关vet工具将报告的最新列表，请查看[https://godoc.org/code.google.com/p/go.tools/cmd/vet](https://godoc.org/code.google.com/p/go.tools/cmd/vet)上的文档。'
- en: 'The final tool we will play with is called `goimports` , and was written by
    Brad Fitzpatrick to automatically fix (add or remove) `import` statements for
    Go files. It is an error in Go to import a package and not use it, and obviously
    trying to use a package without importing it won''t work either. The `goimports`
    tool will automatically rewrite our `import` statement based on the contents of
    our code file. First, let''s install `goimports` with the familiar command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要使用的最后一个工具叫做`goimports`，由Brad Fitzpatrick编写，用于自动修复（添加或删除）Go文件的`import`语句。在Go中导入一个包而不使用它是一个错误，显然尝试使用一个未导入的包也不会起作用。`goimports`工具将根据我们代码文件的内容自动重写我们的`import`语句。首先，让我们使用熟悉的命令安装`goimports`：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Update your program to import some packages that we are not going to use and
    remove the `fmt` package:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 更新您的程序以导入一些我们不打算使用的包，并删除`fmt`包：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'When we try to run our program by calling `go run main.go` , we will see that
    we get some errors:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们尝试通过调用`go run main.go`来运行我们的程序时，我们会看到我们得到了一些错误：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'These errors are telling us that we have imported packages that we are not
    using and missing the `fmt` package, and that in order to continue we need to
    make corrections. This is where `goimports` comes in:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这些错误告诉我们，我们已经导入了我们不使用的包，并且缺少了`fmt`包，为了继续，我们需要进行更正。这就是`goimports`发挥作用的地方：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We are calling the `goimports` command with the `-w` write flag, which will
    save us the task of making corrections to all files ending with `.go` .
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用`goimports`命令和`-w`写入标志，这将节省我们对所有以`.go`结尾的文件进行更正的任务。
- en: Have a look at your `main.go` file now and notice that the `net/http` and `sync`
    packages have been removed and the `fmt` package has been put back in.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看看您的`main.go`文件，注意`net/http`和`sync`包已被移除，而`fmt`包已被重新放回。
- en: You could argue that switching to a terminal to run these commands takes more
    time than just doing it manually, and you would probably be right in most cases,
    which is why it is highly recommended that you integrate the Go tools with your
    text editor.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以争论切换到终端运行这些命令比手动操作需要更多时间，而在大多数情况下您可能是正确的，这就是为什么强烈建议您将Go工具与您的文本编辑器集成。
- en: Cleaning up, building, and running tests on save
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在保存时进行清理、构建和运行测试
- en: 'Since the Go core team has provided us with such great tools as `fmt` , `vet`
    , `test` , and `goimports` , we are going to look at a development practice that
    has proven to be extremely useful. Whenever we save a `.go` file, we want to perform
    the following tasks automatically:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Go核心团队为我们提供了`fmt`、`vet`、`test`和`goimports`等优秀的工具，我们将看一下一个被证明非常有用的开发实践。每当我们保存一个`.go`文件时，我们希望自动执行以下任务：
- en: Use `goimports` and `fmt` to fix our imports and format the code.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`goimports`和`fmt`来修复我们的导入并格式化代码。
- en: Vet the code for any faux pas and tell us immediately.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查代码是否有任何错误，并立即告诉我们。
- en: Attempt to build the current package and output any build errors.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试构建当前包并输出任何构建错误。
- en: If the build is successful, run the tests for the package and output any failures.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果构建成功，请运行包的测试并输出任何失败。
- en: Because Go code compiles so quickly (Rob Pike once actually said that it doesn't
    build quickly, but it's just not slow like everything else), we can comfortably
    build entire packages every time we save a file. The same is true for running
    tests, to help us if we are developing in a TDD style, and the experience is great.
    Every time we make changes to our code, we can immediately see if we have broken
    something or had an unexpected impact on some other part of our project. We'll
    never see package import errors again, because our `import` statement will have
    been fixed for us, and our code will be correctly formatted right in front of
    our eyes.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 因为Go代码编译速度如此之快（Rob Pike曾经说过它并不快速构建，但它只是不像其他一切那样慢），所以我们可以在每次保存文件时轻松地构建整个包。对于运行测试也是如此，这有助于我们如果我们以TDD风格进行开发，体验非常好。每当我们对代码进行更改时，我们可以立即看到我们是否破坏了某些东西，或者对项目的其他部分产生了意外的影响。我们再也不会看到包导入错误了，因为我们的`import`语句已经被自动修复了，我们的代码也会在我们眼前被正确格式化。
- en: Some editors will likely not support running code in response to specific events,
    such as saving a file, which leaves you with two options; you can either switch
    to a better editor or write your own script file that runs in response to filesystem
    changes. The latter solution is out of scope for this book, instead we will focus
    on how to implement this functionality in a popular text editor.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一些编辑器可能不支持响应特定事件运行代码，比如保存文件，这给您留下了两个选择；您可以切换到更好的编辑器，或者编写自己的脚本文件以响应文件系统的更改。后一种解决方案不在本书的范围之内，相反，我们将专注于如何在流行的文本编辑器中实现这个功能。
- en: Sublime Text 3
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Sublime Text 3
- en: Sublime Text 3 is an excellent editor for writing Go code that runs on OS X,
    Linux, and Windows, and has an extremely powerful expansion model, which makes
    it easy to customize and extend. You can download Sublime Text from [http://www.sublimetext.com/](http://www.sublimetext.com/)
    and trial-use it for free before deciding if you want to buy it or not.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Sublime Text 3是一个在OS X、Linux和Windows上运行的编写Go代码的优秀编辑器，并且具有非常强大的扩展模型，这使得它易于定制和扩展。您可以从[http://www.sublimetext.com/](http://www.sublimetext.com/)下载Sublime
    Text，并在决定是否购买之前免费试用。
- en: Thanks to **DisposaBoy** (see [https://github.com/DisposaBoy](https://github.com/DisposaBoy)
    ), there is already a Sublime expansion package for Go, which actually gives us
    a wealth of features and power that a lot of Go programmers actually miss out
    on. We are going to install this `GoSublime` package and then build upon it to
    add our desired on-save functionality.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢**DisposaBoy**（参见[https://github.com/DisposaBoy](https://github.com/DisposaBoy)），已经为Go创建了一个Sublime扩展包，实际上为我们提供了许多Go程序员实际上错过的功能和功能。我们将安装这个`GoSublime`包，然后在此基础上添加我们想要的保存功能。
- en: Before we can install `GoSublime` , we need to install Package Control into
    Sublime Text. Head over to [https://sublime.wbond.net/](https://sublime.wbond.net/)
    and click on the **Installation** link for instructions on how to install Package
    Control. At the time of writing, it's simply a case of copying the single, albeit
    long, line command, and pasting it into the Sublime console which can be opened
    by navigating to **View** | **Show Console** from the menu.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装`GoSublime`之前，我们需要将Package Control安装到Sublime Text中。前往[https://sublime.wbond.net/](https://sublime.wbond.net/)，点击**Installation**链接，获取有关如何安装Package
    Control的说明。在撰写本文时，只需复制单行命令，并将其粘贴到Sublime控制台中即可，控制台可以通过从菜单中导航到**View** | **Show
    Console**来打开。
- en: 'Once that is complete, press *shift* + *command* + *P* and type `Package Control:
    Install Package` and press *return* when you have selected the option. After a
    short delay (where Package Control is updating its listings), a box will appear
    allowing you to search for and install GoSublime just by typing it in, selecting
    it, and pressing *return* . All being well, GoSublime will be installed and writing
    Go code has just become an order of magnitude easier.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '完成后，按*shift* + *command* + *P*，然后键入`Package Control: Install Package`，选择该选项后按*return*。稍等片刻（Package
    Control正在更新其列表），将出现一个框，允许您通过输入并选择GoSublime来搜索并安装GoSublime，然后按*return*。如果一切顺利，GoSublime将被安装，编写Go代码将变得更加容易。'
- en: Tip
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Now that you have GoSublime installed, you can open a short help file containing
    the details of the package by pressing *command* + *.* , *command* + *2* (the
    *command* key and period at the same time, followed by the *command* key and number
    *2* ).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经安装了GoSublime，您可以按*command* + *.*，*command* + *2*（同时按下*command*键和句点，然后按下*command*键和数字*2*）打开一个包含该包详细信息的简短帮助文件。
- en: Tyler Bunnell is another popular name in the Go open source community (see [https://github.com/tylerb](https://github.com/tylerb)
    ) and we are going to use his customizations to implement our on-save functionality.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Tyler Bunnell是Go开源社区中另一个知名人物（参见[https://github.com/tylerb](https://github.com/tylerb)），我们将使用他的自定义来实现我们的保存功能。
- en: 'Press *command* + *.* , *command* + *5* to open the GoSublime settings and
    add the following entry to the object:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 按*command* + *.*，*command* + *5*打开GoSublime设置，并向对象添加以下条目：
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Tip
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Notice that the settings file is actually a JSON object, so be sure to add the
    `on_save` property without corrupting the file. For example, if you have properties
    before and after, ensure the appropriate commas are in place.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，设置文件实际上是一个JSON对象，因此在添加`on_save`属性时，请确保不要损坏文件。例如，如果在之前和之后有属性，请确保逗号放置在适当的位置。
- en: The preceding setting will tell Sublime Text to build the code looking for errors,
    install test dependencies, run tests, and vet the code whenever we save the file.
    Save the settings file (don't close it just yet), and let's see this in action.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 上述设置将告诉Sublime Text在保存文件时构建代码以查找错误，安装测试依赖项，运行测试并检查代码。保存设置文件（暂时不要关闭它），让我们看看它的效果。
- en: 'Navigate to **Choose File** | **Open…** from the menu and select a folder to
    open—for now let''s open our `tooling` folder. The simple user interface of Sublime
    Text makes it clear that we only have one file in our project right now, `main.go`
    . Click on the file, add some extra linefeeds, and add and remove some indenting.
    Then navigate to **File** | **Save** from the menu, or press *command* + *S* .
    Notice that the code is immediately cleaned up, and provided you haven''t removed
    the oddly placed `return` statement from `main.go` , you will notice that the
    console has appeared, and it is reporting the issue thanks to `go vet` :'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 从菜单中导航到**选择文件** | **打开…**并选择要打开的文件夹-现在让我们打开我们的`tooling`文件夹。Sublime Text的简单用户界面清楚地表明，我们目前项目中只有一个文件，`main.go`。单击文件，添加一些额外的换行符，并添加和删除一些缩进。然后从菜单中导航到**文件**
    | **保存**，或按*command* + *S*。注意代码立即被清理了，只要你没有删除`main.go`中奇怪放置的`return`语句，你会注意到控制台已经出现，并且由于`go
    vet`的原因报告了问题：
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Holding down *command* + *shift* and double-clicking on the unreachable code
    line in the console will open the file and jump the cursor to the right line in
    question. You can see how helpful this feature is going to be as you continue
    to write Go code.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 按住*command* + *shift*，双击控制台中无法到达的代码行将打开文件并将光标跳转到相关行。随着您继续编写Go代码，您会看到这个功能有多么有用。
- en: 'If you add an unwanted import to the file, you will notice that on using `on_save`
    you are told about the problem, but it wasn''t automatically fixed. That''s because
    we have another tweak to make. In the same settings file as you added the `on_save`
    property to, add the following property:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您向文件添加了不需要的导入，您会注意到在使用`on_save`时会收到有关问题的通知，但它不会自动修复。这是因为我们还需要进行另一个调整。在与您添加`on_save`属性的相同设置文件中，添加以下属性：
- en: '[PRE22]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This tells GoSublime to use the `goimports` command instead of `go fmt` . Save
    this file again and head back to `main.go` . Add `net/http` to the imports again,
    remove `fmt` import, and save the file. Notice that the unused package was removed
    and `fmt` was again put back.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉GoSublime使用`goimports`命令而不是`go fmt`。再次保存此文件并返回到`main.go`。再次将`net/http`添加到导入中，删除`fmt`导入，并保存文件。注意未使用的包已被移除，`fmt`再次被放回。
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this appendix, we installed our own build of Go from the source code, which
    means we can easily use the `hg` command to keep our installation up to date,
    or to test our beta features before they are released. It's also nice to have
    the entire Go language code for us to browse on those lonely nights by the fire.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个附录中，我们从源代码安装了自己的Go构建，这意味着我们可以轻松使用`hg`命令来保持我们的安装最新，或者在发布之前测试我们的测试功能。在孤独的夜晚，有整个Go语言代码供我们浏览也是很不错的。
- en: You learned about the `GOPATH` environment variable, and discovered a common
    practice of keeping one value for all projects. This approach dramatically simplifies
    working on Go projects, where otherwise you would likely continue to encounter
    tricky failures.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你了解了`GOPATH`环境变量，并发现了将一个值用于所有项目的常见做法。这种方法极大地简化了在Go项目上的工作，否则你可能会继续遇到棘手的失败。
- en: We discovered how the Go toolset can really help us to produce high quality,
    community-standards-compliant code that any other programmer could pick up and
    work on with little to no additional learning. And more importantly, we looked
    at how automating the use of these tools means we can truly get down to the business
    of writing applications and solving problems, which is all that developers really
    want to do.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现了Go工具集如何真正帮助我们生成高质量、符合社区标准的代码，任何其他程序员都可以轻松上手并进行开发，几乎不需要额外学习。更重要的是，我们看到了如何自动化使用这些工具意味着我们可以真正专注于编写应用程序和解决问题，这正是开发人员真正想要做的事情。
- en: 读累了记得休息一会哦~
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读累了记得休息一会哦~
- en: '**公众号：古德猫宁李**'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 公众号：古德猫宁李
- en: 电子书搜索下载
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 书单分享
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书单分享
- en: 书友学习交流
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书友学习交流
- en: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 网站：沉金书屋 https://www.chenjin5.com
- en: 电子书搜索下载
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 电子书打包资源分享
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书打包资源分享
- en: 学习资源分享
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习资源分享
