- en: Error Handling in Go
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go中的错误处理
- en: Error handling is important for even the most basic Go program. Errors in Go
    implement the `Error` interface and must be dealt with at every layer of the code.
    Go errors do not work like exceptions, and unhandled errors can cause enormous
    problems. You should strive to handle and consider errors whenever they occur.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是最基本的Go程序，错误处理也很重要。Go中的错误实现了`Error`接口，并且必须在代码的每一层中处理。Go的错误不像异常那样工作，未处理的错误可能会导致巨大的问题。您应该努力处理和考虑每当出现错误时。
- en: This chapter also covers logging since it's common to log whenever an actual
    error occurs. We'll also investigate wrapping errors, so that the given error
    should provide an additional context as it's returned up the function stack, so
    that it's easier to determine the actual cause of certain errors.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还涵盖了日志记录，因为在实际错误发生时通常会记录日志。我们还将研究包装错误，以便给定的错误在返回到函数堆栈时提供额外的上下文，这样更容易确定某些错误的实际原因。
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将介绍以下配方：
- en: Handling errors and the Error interface
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理错误和Error接口
- en: Using the pkg/errors package and wrapping errors
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用pkg/errors包和包装错误
- en: Using the log package and understanding when to log errors
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用日志包并了解何时记录错误
- en: Structured logging with the apex and logrus packages
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用apex和logrus包进行结构化日志记录
- en: Logging with the context package
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用上下文包进行日志记录
- en: Using package-level global variables
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用包级全局变量
- en: Catching panics for long-running processes
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获长时间运行进程的panic
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In order to proceed with all the recipes in this chapter, configure your environment
    according to these steps:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了继续本章中的所有配方，请根据以下步骤配置您的环境：
- en: Download and install Go 1.12.6, or later, on your operating system at [https://golang.org/doc/install](https://golang.org/doc/install).
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的操作系统上下载并安装Go 1.12.6或更高版本，网址为[https://golang.org/doc/install](https://golang.org/doc/install)。
- en: Open a Terminal/console application; create and navigate to a project directory
    such as `~/projects/go-programming-cookbook`. All code will be run and modified
    from this directory.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/控制台应用程序；创建并导航到项目目录，例如`~/projects/go-programming-cookbook`。所有代码将在此目录中运行和修改。
- en: 'Clone the latest code into `~/projects/go-programming-cookbook-original` and,
    optionally, work from that directory, rather than typing in the examples manually:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将最新的代码克隆到`~/projects/go-programming-cookbook-original`，或者可以选择从该目录工作，而不是手动输入示例：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Handling errors and the Error interface
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理错误和Error接口
- en: 'The `Error` interface is a pretty small and simple interface:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`Error`接口是一个非常小且简单的接口：'
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This interface is elegant because it's simple to make anything in order to satisfy
    it. Unfortunately, this also creates confusion for packages that need to take
    certain actions depending on the error received.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个接口很简洁，因为很容易制作任何东西来满足它。不幸的是，这也给需要根据接收到的错误采取某些操作的包带来了困惑。
- en: There are a number of ways to create errors in Go; this recipe will explore
    the creation of basic errors, errors that have assigned values or types, and a
    custom error using a structure.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go中创建错误的方法有很多种；本篇将探讨创建基本错误、具有分配值或类型的错误，以及使用结构创建自定义错误。
- en: How to do it...
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'These steps cover the writing and running of your application:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤涵盖了编写和运行应用程序：
- en: From your Terminal/console application, create a new directory called `~/projects/go-programming-cookbook/chapter4/basicerrors`
    and navigate to this directory.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端/控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter4/basicerrors`的新目录，并导航到该目录。
- en: 'Run the following command:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter4/basicerrors`,
    or use this as an exercise to write some of your own code!
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter4/basicerrors`复制测试，或者利用这个机会编写一些您自己的代码！
- en: 'Create a file called `basicerrors.go` with the following content:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`basicerrors.go`的文件，其中包含以下内容：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a file called `custom.go` with the following content:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`custom.go`的文件，其中包含以下内容：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录并导航到该目录。
- en: 'Create a `main.go` file with the following content:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，其中包含以下内容：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Run `go run main.go`.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You may also run the following commands:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您也可以运行以下命令：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You should now see the following output:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该看到以下输出：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you copied or wrote your own tests, then go up one directory and run `go
    test`. Ensure that all the tests pass.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Whether you use `errors.New`, `fmt.Errorf`, or a custom error, the most important
    thing to remember is that you should never leave errors unhandled in your code.
    These different methods of defining errors give a lot of flexibility. You can,
    for example, put extra functions in your structure to further interrogate an error
    and cast the interface to your error type in the calling function to get some
    added functionality.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您使用`errors.New`、`fmt.Errorf`还是自定义错误，最重要的是要记住，您不应该在代码中留下未处理的错误。定义错误的这些不同方法提供了很大的灵活性。例如，您可以在结构中添加额外的函数来进一步查询错误，并在调用函数中将接口转换为您的错误类型以获得一些附加功能。
- en: The interface itself is very simple and the only requirement is that you return
    a valid string. Connecting this to a structure can be useful for some high-level
    applications that have consistent error handling throughout, but want to work
    nicely with other applications.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接口本身非常简单，唯一的要求是返回一个有效的字符串。将其连接到结构可能对一些高级应用程序有用，这些应用程序在整个过程中具有一致的错误处理，但希望与其他应用程序良好地配合。
- en: Using the pkg/errors package and wrapping errors
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pkg/errors包和包装错误
- en: 'The `errors` package located in `github.com/pkg/errors` is a drop-in replacement
    for the standard Go `errors` package. Additionally, it provides some very useful
    functionality for wrapping and handling errors. The typed and declared errors
    in the preceding recipe are a good example—they can be useful to add additional
    information to an error, but wrapping it in the standard way will change its type
    and break the type assertion:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 位于`github.com/pkg/errors`的`errors`包是标准Go `errors`包的一个可替换项。此外，它还提供了一些非常有用的功能来包装和处理错误。前面的示例中的类型和声明的错误就是一个很好的例子——它们可以用来向错误添加额外的信息，但以标准方式包装它将改变其类型并破坏类型断言：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This recipe will demonstrate how to use the `pkg/errors` package to add annotation
    to errors throughout your code.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例将演示如何使用`pkg/errors`包在整个代码中添加注释。
- en: How to do it...
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover the writing and running of your application:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序的过程：
- en: From your Terminal/console application, create a new directory called `~/projects/go-programming-cookbook/chapter4/errwrap`
    and navigate to this directory.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端/控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter4/errwrap`的新目录，并导航到该目录。
- en: 'Run the following command:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter4/errwrap`,
    or use this as an exercise to write some of your own code!
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter4/errwrap`复制测试，或者将其用作练习编写自己的一些代码！
- en: 'Create a file called `errwrap.go` with the following content:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`errwrap.go`的文件，内容如下：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create a file called `unwrap.go` with the following content:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`unwrap.go`的文件，内容如下：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录，并导航到该目录。
- en: 'Create a `main.go` file with the following content:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`main.go`文件，内容如下：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Run `go run main.go`.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You may also run the following commands:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以运行以下命令：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You should now see the following output:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该看到以下输出：
- en: '[PRE16]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `go.mod` file should be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件应该已更新，顶级示例目录中现在应该存在`go.sum`文件。'
- en: If you copied or wrote your own tests, then go up one directory and run `go
    test`. Ensure that all the tests pass.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回到上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `pkg/errors` package is a very useful tool. It makes sense to wrap every
    returned error using this package to provide extra context in logging and error
    debugging. It''s flexible enough to print the entire stack traces when an error
    occurs or to just add a prefix to your errors when printing them. It can also
    clean up code, since a wrapped nil returns a `nil` value; for example, consider
    the following code:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`pkg/errors`包是一个非常有用的工具。使用这个包来包装每个返回的错误以提供额外的上下文记录和错误调试是有意义的。当错误发生时，它足够灵活，可以打印整个堆栈跟踪，也可以在打印错误时只是添加前缀。它还可以清理代码，因为包装的nil返回一个`nil`值；例如，考虑以下代码：'
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In some cases, this can save you from having to check whether an error is `nil`
    first, before simply returning it. This recipe demonstrates how to use the package
    to wrap and unwrap errors, as well as basic stack trace functionality. The documentation
    for the package also provides some other useful examples such as printing partial
    stacks. Dave Cheney, the author of this library, has also written a number of
    helpful blogs and given talks on the subject; you can go to [https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully](https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully)
    to find out more.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，这可以使您免于在简单返回错误之前首先检查错误是否为`nil`。本示例演示了如何使用该包来包装和解包错误，以及基本的堆栈跟踪功能。该包的文档还提供了一些其他有用的示例，例如打印部分堆栈。该库的作者Dave
    Cheney还写了一些有用的博客并就此主题发表了一些演讲；您可以访问[https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully](https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully)了解更多信息。
- en: Using the log package and understanding when to log errors
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用日志包并了解何时记录错误
- en: Logging should typically occur when an error is the final result. In other words,
    it's useful to log when something exceptional or unexpected occurs. It might also
    be appropriate, if you use a log that provides log levels, to sprinkle debug or
    info statements at key parts of your code to quickly debug issues during development.
    Too much logging will make it difficult to find anything useful, but not enough
    logging can result in broken systems with no insight into the root cause. This
    recipe will demonstrate the use of the default Go `log` package and some useful
    options, and also showcase when a log should likely occur.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通常在错误是最终结果时应记录日志。换句话说，当发生异常或意外情况时记录日志是有用的。如果您使用提供日志级别的日志，可能还适合在代码的关键部分添加调试或信息语句，以便在开发过程中快速调试问题。过多的日志记录会使查找有用信息变得困难，但日志记录不足可能导致系统崩溃而无法了解根本原因。本示例将演示默认的Go
    `log`包和一些有用的选项的使用，还展示了何时可能应该记录日志。
- en: How to do it...
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover the writing and running of your application:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序的过程：
- en: From your Terminal/console application, create a new directory called `~/projects/go-programming-cookbook/chapter4/log`
    and navigate to this directory.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端/控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter4/log`的新目录，并导航到该目录。
- en: 'Run the following command:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE19]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter4/log`,
    or use this as an exercise to write some of your own code!
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter4/log`复制测试，或者将其用作练习编写自己的一些代码！
- en: 'Create a file called `log.go` with the following content:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`log.go`的文件，内容如下：
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a file called `error.go` with the following content:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`error.go`的文件，内容如下：
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录，并导航到该目录。
- en: 'Create a `main.go` file with the following content:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，内容如下：
- en: '[PRE22]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Run `go run main.go`.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You may also run the following commands:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以运行以下命令：
- en: '[PRE23]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You should see the following output:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE24]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `go.mod` file gets updated and the `go.sum` file should now be present in
    the top-level recipe directory.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod` 文件将被更新，`go.sum` 文件现在应该存在于顶级配方目录中。'
- en: If you copied or wrote your own tests, then go up one directory and run `go
    test`. Ensure that all the tests pass.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You can either initialize a logger and pass it around using `log.NewLogger()`,
    or use the `log` package level logger to log messages. The `log.go` file in this
    recipe does the former and `error.go` does the latter. It also shows when logging
    might make sense after an error has reached its final destination; otherwise,
    it's likely that you'll log multiple times for one event.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以初始化一个记录器并传递它使用 `log.NewLogger()`，或者使用 `log` 包级别的记录器来记录消息。这个配方中的 `log.go`
    文件执行前者，`error.go` 执行后者。它还显示了在错误到达最终目的地后记录可能是有意义的时间；否则，可能会为一个事件记录多次。
- en: There are a few issues with this approach. First, you may have additional context
    in one of the intermediate functions, such as the variables you'd like to log.
    Second, logging a bunch of variables can get messy, making it confusing and difficult
    to read. The next recipe explores structured logging that provides flexibility
    in logging variables, and, in a later recipe, we will explore implementing a global
    package-level logger as well.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法存在一些问题。首先，您可能在其中一个中间函数中有额外的上下文，比如您想要记录的变量。其次，记录一堆变量可能会变得混乱，使其令人困惑和难以阅读。下一个配方将探讨提供灵活性的结构化日志记录，以记录变量，并且在以后的配方中，我们将探讨实现全局包级别记录器。
- en: Structured logging with the apex and logrus packages
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 apex 和 logrus 包进行结构化日志记录
- en: The primary reason to log information is to examine the state of the system
    when events occur or have occurred in the past. Basic log messages are tricky
    to comb over when you have a large number of microservices that are logging.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 记录信息的主要原因是在事件发生或过去发生时检查系统的状态。当有大量微服务记录日志时，基本的日志消息很难查看。
- en: There's a variety of third-party packages for combing over logs if you can get
    the logs into a data format they understand. These packages provide indexing functionality,
    searchability, and more. The `sirupsen/logrus` and `apex/log` packages provide
    a way to do structured logging where you can log a number of fields that can be
    reformatted to fit these third-party log readers. For example, it's simple to
    emit logs in JSON format to be parsed by a variety of services.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您可以将日志记录到它们理解的数据格式中，那么有各种第三方包可以对日志进行检索。这些包提供索引功能、可搜索性等。`sirupsen/logrus` 和
    `apex/log` 包提供了一种结构化日志记录的方式，您可以记录许多字段，这些字段可以重新格式化以适应这些第三方日志读取器。例如，可以简单地以 JSON
    格式发出日志，以便被各种服务解析。
- en: How to do it...
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover the writing and running of your application:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了您的应用程序的编写和运行：
- en: From your Terminal/console application, create a new directory called `~/projects/go-programming-cookbook/chapter4/structured`
    and navigate to this directory.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端/控制台应用程序中，创建一个名为 `~/projects/go-programming-cookbook/chapter4/structured`
    的新目录，并导航到该目录。
- en: 'Run the following command:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE25]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为 `go.mod` 的文件，其中包含以下内容：
- en: '[PRE26]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter4/structured`,
    or use this as an exercise to write some of your own code!
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `~/projects/go-programming-cookbook-original/chapter4/structured` 复制测试，或者将其作为练习编写一些自己的代码！
- en: 'Create a file called `logrus.go` with the following content:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `logrus.go` 的文件，内容如下：
- en: '[PRE27]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create a file called `apex.go` with the following content:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `apex.go` 的文件，内容如下：
- en: '[PRE28]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录并导航到该目录。
- en: 'Create a `main.go` file with the following content:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，内容如下：
- en: '[PRE29]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Run `go run main.go`.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You may also run the following commands:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以运行以下命令：
- en: '[PRE30]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You should now see the following output:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该看到以下输出：
- en: '[PRE31]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The `go.mod` file should be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod` 文件应该被更新，`go.sum` 文件现在应该存在于顶级配方目录中。'
- en: If you copied or wrote your own tests, then go up one directory and run `go
    test`. Ensure that all the tests pass.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `sirupsen/logrus` and `apex/log` packages are both excellent structured
    loggers. Both provide hooks for either emitting to multiple events or to add extra
    fields to a log entry. It would be relatively simple, for example, to use the
    `logrus` hook or the `apex` custom handler to add line numbers to all of your
    logs, as well as service names. Another use for a hook might include `traceID`, in
    order to trace a request across different services.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`sirupsen/logrus` 和 `apex/log` 包都是优秀的结构化记录器。两者都提供了钩子，可以用于发出多个事件或向日志条目添加额外字段。例如，可以相对简单地使用
    `logrus` 钩子或 `apex` 自定义处理程序来向所有日志添加行号以及服务名称。钩子的另一个用途可能包括 `traceID`，以跟踪请求在不同服务之间的传递。'
- en: While `logrus` splits the hook and the formatter, `apex` combines them. In addition
    to this, `apex` adds some convenience functions such as `WithError` to add an
    `error` field as well as tracing, both of which are demonstrated in this recipe.
    It's also relatively simple to adapt hooks from `logrus` to the `apex` handlers.
    For both solutions, it would be a simple change to convert to JSON formatting,
    instead of ANSI-colored text.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `logrus` 将钩子和格式化器分开，但 `apex` 将它们合并在一起。除此之外，`apex` 还添加了一些方便的功能，比如 `WithError`
    添加一个 `error` 字段以及跟踪，这两者都在这个配方中进行了演示。从 `logrus` 转换到 `apex` 处理程序的适配也相对简单。对于这两种解决方案，将转换为
    JSON 格式，而不是 ANSI 彩色文本，将是一个简单的改变。
- en: Logging with the context package
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用上下文包进行日志记录
- en: This recipe will demonstrate a way to pass log fields between various functions.
    The Go `pkg/context` package is an excellent way to pass additional variables
    and cancellations between functions. This recipe will explore using this functionality
    to distribute variables between functions for logging purposes.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方将演示一种在各种函数之间传递日志字段的方法。Go `pkg/context`包是在函数之间传递附加变量和取消的绝佳方式。这个配方将探讨使用这个功能将变量分发到函数之间以进行日志记录。
- en: This style can be adapted to `logrus` or `apex` from the previous recipe. We'll
    use `apex` for this recipe.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这种风格可以从前一个配方中适应`logrus`或`apex`。我们将在这个配方中使用`apex`。
- en: How to do it...
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover the writing and running of your application:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序的过程：
- en: From your Terminal/console application, create a new directory called `~/projects/go-programming-cookbook/chapter4/context`
    and navigate to this directory.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端/控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter4/context`的新目录，并转到该目录。
- en: 'Run the following command:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE32]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE33]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter4/context`,
    or use this as an exercise to write some of your own code!
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter4/context`中复制测试，或者将其用作编写自己代码的练习！
- en: 'Create a file called `log.go` with the following content:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`log.go`的文件，其中包含以下内容：
- en: '[PRE34]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create a file called `collect.go` with the following content:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`collect.go`的文件，其中包含以下内容：
- en: '[PRE35]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录，并转到该目录。
- en: 'Create a `main.go` file with the following content:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`main.go`文件，其中包含以下内容：
- en: '[PRE36]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Run `go run main.go`.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You may also run the following commands:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以运行以下命令：
- en: '[PRE37]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'You should see the following output:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE38]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The `go.mod` file gets updated and the `go.sum` file should now be present in
    the top-level recipe directory.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件已更新，`go.sum`文件现在应该存在于顶层配方目录中。'
- en: If you copied or wrote your own tests, then go up one directory and run `go
    test`. Ensure that all the tests pass.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `context` package now appears in a variety of packages, including the database
    and HTTP packages. This recipe will allow you to attach log fields to a context
    and use them for logging purposes. The idea is that separate methods can attach
    more fields to a context as it is passed around, and then the final call site
    can perform logging and aggregate variables.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`context`包现在出现在各种包中，包括数据库和HTTP包。这个配方将允许您将日志字段附加到上下文中，并将它们用于日志记录目的。其思想是不同的方法可以在上下文中附加更多字段，然后最终的调用站点可以执行日志记录和聚合变量。'
- en: 'This recipe mimics the `WithField` and `WithFields` methods found in the logging
    packages in the previous recipe. These modify a single value stored in the context
    and also provide the other benefits of using a context: cancellation, timeouts,
    and thread safety.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方模仿了前一个配方中日志包中找到的`WithField`和`WithFields`方法。这些方法修改了上下文中存储的单个值，并提供了使用上下文的其他好处：取消、超时和线程安全。
- en: Using package-level global variables
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用包级全局变量
- en: The `apex` and `logrus` packages in the earlier examples both used a package-level
    global variable. Sometimes, it's useful to structure your libraries to support
    both structures with a variety of methods and top-level functions so that you
    can use them directly without passing them around.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，`apex`和`logrus`包都使用了包级全局变量。有时，将您的库结构化以支持具有各种方法和顶级函数的结构是有用的，这样您可以直接使用它们而不必传递它们。
- en: This recipe also demonstrates using `sync.Once` to ensure that the global logger
    will only be initialized once. It can also be bypassed by the `Set` method. The
    recipe only exports `WithField` and `Debug`, but you can imagine exporting every
    method attached to a `log` object.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方还演示了使用`sync.Once`来确保全局记录器只初始化一次。它也可以被`Set`方法绕过。该配方只导出`WithField`和`Debug`，但您可以想象导出附加到`log`对象的每个方法。
- en: How to do it...
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover the writing and running of your application:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序的过程：
- en: From your Terminal/console application, create a new directory called `~/projects/go-programming-cookbook/chapter4/global`
    and navigate to this directory.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端/控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter4/global`的新目录，并转到该目录。
- en: 'Run the following command:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE39]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE40]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter4/global`,
    or use this as an exercise to write some of your own code!
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制`~/projects/go-programming-cookbook-original/chapter4/global`中的测试，或者将其用作编写自己代码的练习！
- en: 'Create a file called `global.go` with the following content:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`global.go`的文件，其中包含以下内容：
- en: '[PRE41]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Create a file called `log.go` with the following content:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`log.go`的文件，其中包含以下内容：
- en: '[PRE42]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录，并转到该目录。
- en: 'Create a `main.go` file with the following content:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`main.go`文件，其中包含以下内容：
- en: '[PRE43]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Run `go run main.go`.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You may also run the following commands:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以运行以下命令：
- en: '[PRE44]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'You should see the following output:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE45]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The `go.mod` file gets updated and the `go.sum` file should now be present in
    the top-level recipe directory.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件已更新，`go.sum`文件现在应该存在于顶层配方目录中。'
- en: If you copied or wrote your own tests, then go up one directory and run `go
    test`. Ensure that all the tests pass.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: A common pattern for these `global` package-level objects is to keep the `global` variable
    unexported and expose only the desired functionality through methods. Typically,
    you could also include a method to return a copy of the `global` logger for packages
    that want a `logger` object.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这些`global`包级别对象的常见模式是保持`global`变量未导出，并仅通过方法公开所需的功能。通常，你还可以包括一个方法来返回`global`日志记录器的副本，以供需要`logger`对象的包使用。
- en: The `sync.Once` type is a newly introduced structure. This structure, in conjunction
    with the `Do` method, will only execute in the code once. We use this in our initialization
    code, and the `Init` function will throw an error if `Init` is called more than
    once. We use a custom `Init` function instead of the built-in `init()` function,
    if we want to pass in parameters to our `global` log.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`sync.Once`类型是一个新引入的结构。这个结构与`Do`方法一起，只会在代码中执行一次。我们在初始化代码中使用这个结构，如果`Init`被调用多次，`Init`函数将抛出错误。如果我们想要向我们的`global`日志传递参数，我们使用自定义的`Init`函数而不是内置的`init()`函数。'
- en: Although this example uses a log, you can also imagine cases where this might
    be useful with a database connection, data streams, and a number of other use
    cases.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个例子使用了日志，你也可以想象在数据库连接、数据流和许多其他用例中这可能是有用的情况。
- en: Catching panics for long-running processes
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 捕获长时间运行进程的panic
- en: When implementing long-running processes, it's possible that certain code paths
    will result in a panic. This is usually common for things such as uninitialized
    maps and pointers, as well as division by zero problems in the case of poorly
    validated user input.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现长时间运行的进程时，可能会出现某些代码路径导致panic的情况。这通常是常见的情况，比如未初始化的映射和指针，以及在用户输入验证不良的情况下出现的除零问题。
- en: Having a program crash completely in these cases is frequently much worse than
    the panic itself, and so it can be helpful to catch and handle panics.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下，程序完全崩溃通常比panic本身更糟糕，因此捕获和处理panic是有帮助的。
- en: How to do it...
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover the writing and running of your application:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序的过程：
- en: From your Terminal/console application, create a new directory called `~/projects/go-programming-cookbook/chapter4/panic`
    and navigate to this directory.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter4/panic`的新目录，并导航到该目录。
- en: 'Run the following command:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE46]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE47]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter4/panic`,
    or use this as an exercise to write some of your own code!
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter4/panic`复制测试，或者利用这个机会编写一些你自己的代码！
- en: 'Create a file called `panic.go` with the following content:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`panic.go`的文件，内容如下：
- en: '[PRE48]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录，并导航到该目录。
- en: 'Create a `main.go` file with the following content:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE49]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Run `go run main.go`.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You may also run the following commands:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行以下命令：
- en: '[PRE50]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'You should see the following output:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE51]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: If you copied or wrote your own tests, then go up one directory and run `go
    test`. Ensure that all the tests pass.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，那么返回上一个目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe is a very basic example of how to catch panics. You can imagine
    with more complex middleware how you can defer a recover and catch it after running
    many nested functions. Within the recover, you can, essentially, do anything you
    want, although emitting a log is common.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例是如何捕获panic的一个非常基本的例子。你可以想象使用更复杂的中间件，如何可以延迟恢复并在运行许多嵌套函数后捕获它。在恢复中，你可以做任何你想做的事情，尽管发出日志是常见的。
- en: In most web applications, it's common to catch panics and emit an `http.InternalServerError`
    message when a panic occurs.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数Web应用程序中，捕获panic并在发生panic时发出`http.InternalServerError`消息是很常见的。
