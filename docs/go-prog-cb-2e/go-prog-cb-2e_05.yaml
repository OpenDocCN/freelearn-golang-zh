- en: Network Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络编程
- en: The Go standard library provides a lot of support for network operations. It
    includes packages that allow you to manage TCP/IP, UDP, DNS, mail, and RPC using
    HTTP. Third-party packages can also fill in the gaps from what's included in the
    standard library, including `gorilla/websockets` ([https://github.com/gorilla/websocket/](https://github.com/gorilla/websocket/))
    for a WebSocket implementation that can be used in a normal HTTP handler. This
    chapter explores these libraries and demonstrates some simple recipes for how
    you can make use of each of them. These recipes will assist developers who are
    unable to use a higher-level abstraction such as REST or GRPC, but need network
    connectivity. It's also useful for DevOps applications that need to perform DNS
    lookups or work with raw emails. After reading this chapter, you should've gained
    some mastery of basic networking programming and be prepared to dive deeper.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Go标准库为网络操作提供了大量支持。它包括允许您使用TCP/IP、UDP、DNS、邮件和使用HTTP的RPC的包。第三方包也可以填补标准库中包含的内容的空白，包括`gorilla/websockets`
    ([https://github.com/gorilla/websocket/](https://github.com/gorilla/websocket/))，用于WebSocket实现，可以在普通的HTTP处理程序中使用。本章探讨了这些库，并演示了一些简单的用法。这些用法将帮助那些无法使用更高级的抽象，如REST或GRPC，但需要网络连接的开发人员。它对需要执行DNS查找或处理原始电子邮件的DevOps应用程序也很有用。阅读完本章后，您应该已经掌握了基本的网络编程，并准备深入学习。
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将涵盖以下用法：
- en: Writing a TCP/IP echo server and client
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写TCP/IP回显服务器和客户端
- en: Writing a UDP server and client
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写UDP服务器和客户端
- en: Working with domain name resolution
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理域名解析
- en: Working with WebSockets
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用WebSockets
- en: Working with net/rpc for calling remote methods
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用net/rpc调用远程方法
- en: Using net/mail for parsing emails
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用net/mail解析电子邮件
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In order to proceed with all the recipes in this chapter, configure your environment
    according to these steps:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了继续本章中的所有用法，请按照以下步骤配置您的环境：
- en: Download and install Go 1.12.6 or greater on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install).
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://golang.org/doc/install](https://golang.org/doc/install)下载并安装Go 1.12.6或更高版本到您的操作系统上。
- en: Open a Terminal or console application, and then create and navigate to a project
    directory such as `~/projects/go-programming-cookbook`. All code will be run and
    modified from this directory.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端或控制台应用程序，然后创建并导航到一个项目目录，例如`~/projects/go-programming-cookbook`。所有代码都将从这个目录运行和修改。
- en: 'Clone the latest code into `~/projects/go-programming-cookbook-original` and
    you have the option to work from that directory rather than typing the examples
    manually:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将最新的代码克隆到`~/projects/go-programming-cookbook-original`，您可以选择从该目录工作，而不是手动输入示例：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Writing a TCP/IP echo server and client
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写TCP/IP回显服务器和客户端
- en: TCP/IP is a common network protocol and the HTTP protocol was built on top of
    it. TCP requires a client to connect to a server in order to send and receive
    data. This recipe will use the `net` package to make a TCP connection between
    a client and a server. The client will send user input to the server and the server
    will respond with the same string inputted, but converted to uppercase using the
    results of `strings.ToUpper()`. The client will print any messages received from
    the server so it should output the uppercase version of our input.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: TCP/IP是一种常见的网络协议，HTTP协议是在其上构建的。TCP要求客户端连接到服务器以发送和接收数据。这个用法将使用`net`包在客户端和服务器之间建立TCP连接。客户端将把用户输入发送到服务器，服务器将用`strings.ToUpper()`的结果将输入的相同字符串转换为大写形式进行响应。客户端将打印从服务器接收到的任何消息，因此它应该输出我们输入的大写版本。
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行您的应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter5/tcp` and
    navigate to this directory.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter5/tcp`的新目录，并导航到该目录。
- en: 'Run the following command:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter5/tcp` or
    use this as an exercise to write some of your own code!
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter5/tcp`复制测试，或者使用这个作为练习编写一些您自己的代码！
- en: Create a new directory named `server` and navigate to it.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`server`的新目录，并导航到该目录。
- en: 'Create a file called `main.go` with the following content:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Navigate to the previous directory.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到上一个目录。
- en: Create a new directory named `client` and navigate to it.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`client`的新目录，并导航到该目录。
- en: 'Create a file called `main.go` with the following content:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Navigate to the previous directory.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到上一个目录。
- en: 'Run `go run ./server` and you will see the following output:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run ./server`，您将看到以下输出：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In a separate Terminal, run `go run ./client` from the `tcp` directory and
    you will see the following output:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个终端中，从`tcp`目录运行`go run ./client`，您将看到以下输出：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Type `this is a test` and hit *Enter*. You will see the following:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`this is a test`并按*Enter*。您将看到以下内容：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Press *Ctrl* + *C* to exit.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*Ctrl* + *C*退出。
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一个目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The server is listening on port `8888`. Whenever a request comes in, the server
    must pick up the request and manage the client connection. In the case of this
    program, it dispatches a Goroutine that reads the request from the client, capitalizes
    the data it receives, sends it back to the client, and, lastly, closes the connection.
    The server immediately loops again, waiting to receive new client connections
    while the previous connection is handled separately.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器正在侦听端口`8888`。每当有请求时，服务器必须接收请求并管理客户端连接。在这个程序的情况下，它会派发一个Goroutine来从客户端读取请求，将接收到的数据大写，发送回客户端，最后关闭连接。服务器立即再次循环，等待接收新的客户端连接，同时处理先前的连接。
- en: The client reads input from `STDIN`, connects to the address via a TCP connection,
    writes the message that was read from the input, and then prints back the response
    from the server. Afterward, it closes the connection and loops the reading once
    again from `STDIN`. It's also possible for you to rework this example to have
    the client stay connected until the program exits rather than on each request.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端从`STDIN`读取输入，通过TCP连接到地址，写入从输入中读取的消息，然后打印服务器的响应。之后，它关闭连接并再次从`STDIN`循环读取。您也可以重新设计此示例，使客户端保持连接，直到程序退出，而不是在每个请求上。
- en: Writing a UDP server and client
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写UDP服务器和客户端
- en: The UDP protocol is often used for games and in places where speed is more important
    than reliability. UDP servers and clients do not need to connect with one another.
    This recipe will create a UDP server that will listen for messages from clients,
    add their IPs to its list, and broadcast messages to each of the previously seen
    clients.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: UDP协议通常用于游戏和速度比可靠性更重要的地方。UDP服务器和客户端不需要相互连接。这个示例将创建一个UDP服务器，它将监听来自客户端的消息，将它们的IP添加到其列表中，并向先前看到的每个客户端广播消息。
- en: The server will write a message to `STDOUT` whenever a client connects and it
    will broadcast the same message to all of its clients. The text of this message
    should be `Sent <count>`, where `<count>` will increment each time the server
    broadcasts to all of its clients. As a result, `count` may have different values
    depending on how long it takes you to connect to your client as the server will
    broadcast regardless of the number of clients it sends a message to.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 每当客户端连接时，服务器将向`STDOUT`写入一条消息，并将相同的消息广播给所有客户端。这条消息的文本应该是`Sent <count>`，其中`<count>`将在服务器向所有客户端广播时递增。因此，`count`的值可能会有所不同，这取决于您连接到客户端所需的时间，因为服务器将无论发送消息给多少客户端都会广播。
- en: How to do it...
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover the process of writing and running your application:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序的过程：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter5/udp` and
    navigate to this directory.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter5/udp`的新目录，并导航到该目录。
- en: 'Run the following command:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter5/udp` or
    use this as an exercise to write some of your own code!
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter5/udp`复制测试，或者将其用作编写自己代码的练习！
- en: Create a new directory named `server` and navigate to it.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`server`的新目录，并导航到该目录。
- en: 'Create a file called `broadcast.go` with the following content:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`broadcast.go`的文件，内容如下：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Create a file called `main.go` with the following content:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Navigate to the previous directory.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到上一个目录。
- en: Create a new directory named `client` and navigate to it.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`client`的新目录，并导航到该目录。
- en: 'Create a file called `main.go` with the following content:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Navigate to the previous directory.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到上一个目录。
- en: 'Run `go run ./server` and you will see the following output:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run ./server`，您将看到以下输出：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In a separate Terminal, run `go run ./client` from the `udp` directory and
    you will see the following output, although the counts may differ:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个终端中，从`udp`目录运行`go run ./client`，您将看到以下输出，尽管计数可能有所不同：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Navigate to the Terminal that is running the server and you should see something
    similar to the following:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到运行服务器的终端，您应该看到类似以下的内容：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Press *Ctrl* + *C* to exit both the server and client.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*Ctrl* + *C*退出服务器和客户端。
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The server is listening on port `8888` just like in the previous recipe. If
    a client starts, it sends a message to the server and the server adds its address
    to a list of addresses. Because clients can connect asynchronously, the server
    must use a mutex before modifying or reading from the list.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器正在监听端口`8888`，就像在上一个示例中一样。如果客户端启动，它会向服务器发送一条消息，服务器会将其地址添加到地址列表中。因为客户端可以异步连接，所以服务器在修改或读取列表之前必须使用互斥锁。
- en: A separate broadcast Goroutine runs separately and sends the same message to
    all client addresses that have previously sent it messages. Assuming they're still
    listening, they'll receive the same message from the server at roughly the same
    time. You may also connect with more clients to see this in effect.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一个单独的广播Goroutine独立运行，并将相同的消息发送到以前发送消息的所有客户端地址。假设它们仍在监听，它们将在大致相同的时间从服务器接收相同的消息。您还可以连接更多的客户端来查看这种效果。
- en: Working with domain name resolution
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用域名解析
- en: The `net` package provides a number of useful functions around DNS lookup. This
    information is comparable to what you might get from using the Unix `dig` command.
    This information can be extremely useful for you to implement any kind of network
    programming that requires dynamically determining IP addresses.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`net`包提供了许多有用的DNS查找功能。这些信息与使用Unix的`dig`命令获得的信息相似。这些信息对于您实现任何需要动态确定IP地址的网络编程非常有用。'
- en: This recipe will explore how you might gather this data. To demonstrate this,
    we'll implement a simplified `dig` command. We'll seek to map a URL to all of
    its IPv4 and IPv6 addresses. By modifying `GODEBUG=netdns=` to be set to `go`
    or `cgo`, it will either use the pure Go DNS resolver or the `cgo` resolver. By
    default, the pure Go DNS resolver is used.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将探讨如何收集这些数据。为了演示这一点，我们将实现一个简化的`dig`命令。我们将寻求将URL映射到其所有IPv4和IPv6地址。通过修改`GODEBUG=netdns=`为`go`或`cgo`，它将使用纯Go
    DNS解析器或`cgo`解析器。默认情况下，使用纯Go DNS解析器。
- en: How to do it...
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤涵盖了编写和运行应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter5/dns` and
    navigate to this directory.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter5/dns`的新目录，并导航到该目录。
- en: 'Run the following command:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter5/dns` or
    use this as an exercise to write some of your own code!
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter5/dns`复制测试，或者使用此作为练习来编写一些您自己的代码！
- en: 'Create a `dns.go` file with the following content:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`dns.go`的文件，内容如下：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录，并导航到该目录。
- en: 'Create a `main.go` file with the following content:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Run the `go run main.go golang.org` command.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go golang.org`命令。
- en: 'You may also run the following:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以运行以下命令：
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You should see the following output:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件可能已更新，`go.sum`文件现在应该存在于顶级配方目录中。'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: This recipe performed a `CNAME` and host lookup of the address provided. In
    our case, we used `golang.org`. We store the result in a lookup structure that
    prints the output results using the `String()` method. This method will be called
    automatically when we print our object as a string, or we can call the method
    directly. We implement some basic argument checking in `main.go` to ensure that
    an address is provided when the program is run.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程执行了提供的地址的`CNAME`和主机查找。在我们的案例中，我们使用了`golang.org`。我们将结果存储在一个查找结构中，该结构使用`String()`方法打印输出结果。当我们将对象打印为字符串时，将自动调用此方法，或者我们可以直接调用该方法。我们在`main.go`中实现了一些基本的参数检查，以确保在运行程序时提供了地址。
- en: Working with WebSockets
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用WebSockets
- en: WebSockets allow a server application to connect to a web-based client written
    in JavaScript. This allows you to create web applications with two-way communication
    and to create updates such as chat rooms and more.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: WebSockets允许服务器应用程序连接到用JavaScript编写的基于Web的客户端。这使您可以创建具有双向通信的Web应用程序，并创建更新，例如聊天室等。
- en: This recipe will explore writing a WebSocket server in Go and also demonstrate
    the process of a client consuming and communicating with a WebSocket server. It
    uses `github.com/gorilla/websocket` to upgrade a standard handler into a WebSocket
    handler and also to create the client application.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将探讨如何在Go中编写WebSocket服务器，并演示客户端使用WebSocket服务器的过程。它使用`github.com/gorilla/websocket`将标准处理程序升级为WebSocket处理程序，并创建客户端应用程序。
- en: How to do it...
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter5/websocket` and
    navigate to this directory.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter5/websocket`的新目录，并导航到该目录。
- en: 'Run the following command:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE22]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE23]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter5/websocket` or
    use this as an exercise to write some of your own code!
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter5/websocket`复制测试，或者使用此作为练习来编写一些您自己的代码！
- en: Create a new directory named `server` and navigate to it.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`server`的新目录，并导航到该目录。
- en: 'Create a file called `handler.go` with the following content:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`handler.go`的文件，内容如下：
- en: '[PRE24]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create a file called `main.go` with the following content:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE25]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Navigate to the previous directory.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到上一个目录。
- en: Create a new directory named `client` and navigate to it.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`client`的新目录，并导航到该目录。
- en: 'Create a file called `process.go` with the following content:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`process.go`的文件，内容如下：
- en: '[PRE26]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create a file called `main.go` with the following content:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE27]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Navigate to the previous directory.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到上一个目录。
- en: 'Run `go run ./server` and you will see the following output:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run ./server`，您将看到以下输出：
- en: '[PRE28]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In a separate Terminal, run `go run ./client` from the `websocket` directory
    and you will see the following output:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个终端中，从`websocket`目录运行`go run ./client`，您将看到以下输出：
- en: '[PRE29]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Enter the `test` string and you should see the following:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`test`字符串，您应该看到以下内容：
- en: '[PRE30]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Navigate to the Terminal running the server and you should see something similar
    to the following:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到运行服务器的终端，您应该看到类似以下内容的内容：
- en: '[PRE31]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Press *Ctrl* + *C* to exit both the server and client. You may also have to
    hit *Enter* after pressing *Ctrl* + *C* on the client.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*Ctrl* + *C*退出服务器和客户端。在按下*Ctrl* + *C*后，您可能还需要按*Enter*。
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件可能已更新，`go.sum`文件现在应该存在于顶级配方目录中。'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The server is listening on port `8000` for WebSocket connections. When a request
    comes in, the `github.com/gorilla/websocket` package is used to upgrade the request
    to a WebSocket connection. Similar to earlier echo server examples, the server
    waits for a message on the WebSocket connection and responds with the same message
    back to the client. Because it's a handler, it can handle many WebSocket connections
    asynchronously and they will remain connected until the client terminates.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器正在端口`8000`上监听WebSocket连接。当请求到来时，`github.com/gorilla/websocket`包用于将请求升级为WebSocket连接。与先前的回声服务器示例类似，服务器等待在WebSocket连接上接收消息，并将相同的消息作为响应发送回客户端。因为它是一个处理程序，所以它可以异步处理许多WebSocket连接，并且它们将保持连接，直到客户端终止。
- en: In the client, we added a `catchsig` function to handle the *Ctrl* + *C* event.
    This allows us to cleanly terminate the connection with the server when the client
    exits. Otherwise, the client just takes user input on `STDIN` and sends it to
    the server, logs the response, and then repeats.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端中，我们添加了一个`catchsig`函数来处理*Ctrl* + *C*事件。这使我们能够在客户端退出时清楚地终止与服务器的连接。否则，客户端只是在`STDIN`上接受用户输入并将其发送到服务器，记录响应，然后重复。
- en: Working with net/rpc for calling remote methods
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用net/rpc调用远程方法
- en: Go provides your system with basic RPC functionality with the `net/rpc` package.
    This is a potential alternative to making RPC calls without relying on GRPC or
    other more complex RPC packages. However, its functionality is rather limited
    and any function you may wish to export must conform to a very specific function
    signature.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Go通过`net/rpc`包为您的系统提供基本的RPC功能。这是在不依赖于GRPC或其他更复杂的RPC包的情况下进行RPC调用的潜在替代方案。但是，它的功能相当有限，您可能希望导出的任何函数都必须符合非常特定的函数签名。
- en: The comments in the code note some of these restrictions for a method that can
    be called remotely. This recipe demonstrates how to create a shared function that
    has a number of parameters passed in via a structure and can be called remotely.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中的注释指出了一些可以远程调用的方法的限制。本配方演示了如何创建一个共享函数，该函数通过结构传递了许多参数，并且可以远程调用。
- en: How to do it...
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序的过程：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter5/rpc` and
    navigate to this directory.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter5/rpc`的新目录，并导航到该目录。
- en: 'Run the following command:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE32]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE33]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter5/rpc` or
    use this as an exercise to write some of your own code!
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter5/rpc`复制测试，或者利用这个机会编写一些您自己的代码！
- en: Create a new directory named `tweak` and navigate to it.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`tweak`的新目录，并导航到该目录。
- en: 'Create a file called `tweak.go` with the following content:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`tweak.go`的文件，内容如下：
- en: '[PRE34]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Navigate to the previous directory.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到上一个目录。
- en: Create a new directory named `server` and navigate to it.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`server`的新目录，并导航到该目录。
- en: 'Create a file called `main.go` with the following content:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE35]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Navigate to the previous directory.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到上一个目录。
- en: Create a new directory named `client` and navigate to it.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`client`的新目录，并导航到该目录。
- en: 'Create a file called `main.go` with the following content:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE36]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Navigate to the previous directory.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到上一个目录。
- en: 'Run `go run ./server` and you will see the following output:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run ./server`，您将看到以下输出：
- en: '[PRE37]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In a separate Terminal, run `go run ./client` from the `rpc` directory and
    you will see the following output:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单独的终端中，从`rpc`目录运行`go run ./client`，您将看到以下输出：
- en: '[PRE38]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Press *Ctrl* + *C* to exit the server.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl* + *C*退出服务器。
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一个目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `StringTweaker` structure is put into a separate library so that its exported
    types can be accessed by the client (to set arguments) and the server (to register
    the RPC and start the server). It also conforms to the rules mentioned at the
    start of this recipe in order to work with `net/rpc`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`StringTweaker`结构被放入一个单独的库中，以便客户端（用于设置参数）和服务器（用于注册RPC和启动服务器）可以访问其导出类型。它还符合本配方开头提到的规则，以便与`net/rpc`一起使用。'
- en: '`StringTweaker` can be used to take an input string and, optionally, reverse
    and uppercase all the characters contained within it, depending on the options
    passed. This pattern can be extended to create far more complex functions and
    you can also use extra functions to make the code more readable as it grows.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`StringTweaker`可用于接受输入字符串，并根据传递的选项，可选地反转和大写其中包含的所有字符。这种模式可以扩展为创建更复杂的函数，并且您还可以使用额外的函数使代码在增长时更易读。'
- en: Using net/mail for parsing emails
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用net/mail解析电子邮件
- en: The `net/mail` package provides a number of useful functions that assist you
    when working with email. If you have the raw text of the email, it can be parsed
    into extract headers, information about the send date, and much more. This recipe
    will demonstrate a number of these functions by parsing a raw email hardcoded
    as a string.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`net/mail`包提供了许多有用的函数，可在处理电子邮件时帮助您。如果您有电子邮件的原始文本，可以将其解析为提取标题、发送日期信息等。本配方将通过解析硬编码为字符串的原始电子邮件来演示其中的一些功能。'
- en: How to do it...
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序的过程：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter5/mail` and
    navigate to this directory.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter5/mail`的新目录，并导航到该目录。
- en: 'Run the following command:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE39]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE40]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter5/mail` or
    use this as an exercise to write some of your own code!
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `~/projects/go-programming-cookbook-original/chapter5/mail` 复制测试，或者利用这个机会编写一些自己的代码！
- en: 'Create a `header.go` file with the following content:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `header.go` 的文件，内容如下：
- en: '[PRE41]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Create a `main.go` file with the following content:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，内容如下：
- en: '[PRE42]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Run the `go run .` command.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run .` 命令。
- en: 'You may also run the following:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您也可以运行以下内容：
- en: '[PRE43]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'You should see the following output:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE44]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `printHeaderInfo` function does the majority of the work for this recipe.
    It parses the addresses from the header into a `*mail.Address` structure and parses
    the date header into a date object. Then, it takes all of the information in the
    message and formats it into a readable format. The main function parses the initial
    email and passes this header along.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`printHeaderInfo` 函数为此示例大部分工作。它将地址从标题中解析为 `*mail.Address` 结构，并将日期标题解析为日期对象。然后，它将消息中的所有信息格式化为可读格式。主函数解析初始电子邮件并传递此标题。'
