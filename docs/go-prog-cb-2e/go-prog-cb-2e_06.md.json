["```go\n$ git clone git@github.com:PacktPublishing/Go-Programming-Cookbook-Second-Edition.git go-programming-cookbook-original\n```", "```go\n$ go mod init github.com/PacktPublishing/Go-Programming-Cookbook-Second-Edition/chapter6/database \n```", "```go\nmodule github.com/PacktPublishing/Go-Programming-Cookbook-Second-Edition/chapter6/database    \n```", "```go\n        package database\n\n        import (\n            \"database/sql\"\n            \"fmt\"\n            \"os\"\n            \"time\"\n\n            _ \"github.com/go-sql-driver/mysql\" //we import supported \n            libraries for database/sql\n        )\n\n        // Example hold the results of our queries\n        type Example struct {\n            Name string\n            Created *time.Time\n        }\n\n        // Setup configures and returns our database\n        // connection poold\n        func Setup() (*sql.DB, error) {\n            db, err := sql.Open(\"mysql\", \n            fmt.Sprintf(\"%s:%s@/gocookbook? \n            parseTime=true\", os.Getenv(\"MYSQLUSERNAME\"), \n            os.Getenv(\"MYSQLPASSWORD\")))\n            if err != nil {\n                return nil, err\n            }\n            return db, nil\n        }\n```", "```go\n        package database\n\n        import (\n            \"database/sql\"\n\n            _ \"github.com/go-sql-driver/mysql\" //we import supported \n            libraries for database/sql\n        )\n\n        // Create makes a table called example\n        // and populates it\n        func Create(db *sql.DB) error {\n            // create the database\n            if _, err := db.Exec(\"CREATE TABLE example (name \n            VARCHAR(20), created DATETIME)\"); err != nil {\n                return err\n            }\n\n            if _, err := db.Exec(`INSERT INTO example (name, created) \n            values (\"Aaron\", NOW())`); err != nil {\n                return err\n            }\n\n            return nil\n        }\n```", "```go\n        package database\n\n        import (\n            \"database/sql\"\n            \"fmt\"\n\n            _ \"github.com/go-sql-driver/mysql\" //we import supported \n            libraries for database/sql\n        )\n\n        // Query grabs a new connection\n        // creates tables, and later drops them\n        // and issues some queries\n        func Query(db *sql.DB, name string) error {\n            name := \"Aaron\"\n            rows, err := db.Query(\"SELECT name, created FROM example \n            where name=?\", name)\n            if err != nil {\n                return err\n            }\n            defer rows.Close()\n            for rows.Next() {\n                var e Example\n                if err := rows.Scan(&e.Name, &e.Created); err != nil {\n                    return err\n                }\n                fmt.Printf(\"Results:\\n\\tName: %s\\n\\tCreated: %v\\n\", \n                e.Name, e.Created)\n            }\n            return rows.Err()\n        }\n```", "```go\n        package database\n\n        // Exec replaces the Exec from the previous\n        // recipe\n        func Exec(db DB) error {\n\n            // uncaught error on cleanup, but we always\n            // want to cleanup\n            defer db.Exec(\"DROP TABLE example\")\n\n            if err := Create(db); err != nil {\n                return err\n            }\n\n            if err := Query(db, \"Aaron\"); err != nil {\n                return err\n            }\n            return nil\n        }\n```", "```go\n        package main\n\n        import (\n            \"PacktPublishing/Go-Programming-Cookbook-Second-Edition/\n             go-cookbook/chapter6/database\"\n            _ \"github.com/go-sql-driver/mysql\" //we import supported \n            libraries for database/sql\n        )\n\n        func main() {\n            db, err := database.Setup()\n            if err != nil {\n                panic(err)\n            }\n\n            if err := database.Exec(db); err != nil {\n                panic(err)\n            }\n        }\n```", "```go\n$ go build $ ./example\n```", "```go\n$ go run main.go\nResults:\n Name: Aaron\n Created: 2017-02-16 19:02:36 +0000 UTC\n```", "```go\n$ go mod init github.com/PacktPublishing/Go-Programming-Cookbook-Second-Edition/chapter6/dbinterface \n```", "```go\nmodule github.com/PacktPublishing/Go-Programming-Cookbook-Second-Edition/chapter6/dbinterface    \n```", "```go\npackage dbinterface\n\nimport \"database/sql\"\n\n// DB is an interface that is satisfied\n// by an sql.DB or an sql.Transaction\ntype DB interface {\n  Exec(query string, args ...interface{}) (sql.Result, error)\n  Prepare(query string) (*sql.Stmt, error)\n  Query(query string, args ...interface{}) (*sql.Rows, error)\n  QueryRow(query string, args ...interface{}) *sql.Row\n}\n\n// Transaction can do anything a Query can do\n// plus Commit, Rollback, or Stmt\ntype Transaction interface {\n  DB\n  Commit() error\n  Rollback() error\n}\n```", "```go\npackage dbinterface\n\nimport _ \"github.com/go-sql-driver/mysql\" //we import supported libraries for database/sql\n\n// Create makes a table called example\n// and populates it\nfunc Create(db DB) error {\n  // create the database\n  if _, err := db.Exec(\"CREATE TABLE example (name VARCHAR(20), created DATETIME)\"); err != nil {\n    return err\n  }\n\n  if _, err := db.Exec(`INSERT INTO example (name, created) values (\"Aaron\", NOW())`); err != nil {\n    return err\n  }\n\n  return nil\n}\n```", "```go\npackage dbinterface\n\nimport (\n  \"fmt\"\n\n  \"github.com/PacktPublishing/Go-Programming-Cookbook-Second-Edition/chapter6/database\"\n)\n\n// Query grabs a new connection\n// creates tables, and later drops them\n// and issues some queries\nfunc Query(db DB) error {\n  name := \"Aaron\"\n  rows, err := db.Query(\"SELECT name, created FROM example where name=?\", name)\n  if err != nil {\n    return err\n  }\n  defer rows.Close()\n  for rows.Next() {\n    var e database.Example\n    if err := rows.Scan(&e.Name, &e.Created); err != nil {\n      return err\n    }\n    fmt.Printf(\"Results:\\n\\tName: %s\\n\\tCreated: %v\\n\", e.Name, \n                e.Created)\n  }\n  return rows.Err()\n}\n```", "```go\npackage dbinterface\n\n// Exec replaces the Exec from the previous\n// recipe\nfunc Exec(db DB) error {\n\n  // uncaught error on cleanup, but we always\n  // want to cleanup\n  defer db.Exec(\"DROP TABLE example\")\n\n  if err := Create(db); err != nil {\n    return err\n  }\n\n  if err := Query(db); err != nil {\n    return err\n  }\n  return nil\n}\n```", "```go\npackage main\n\nimport (\n  \"github.com/PacktPublishing/Go-Programming-Cookbook-Second-Edition/chapter6/database\"\n  \"github.com/PacktPublishing/Go-Programming-Cookbook-Second-Edition/chapter6/dbinterface\"\n  _ \"github.com/go-sql-driver/mysql\" //we import supported libraries for database/sql\n)\n\nfunc main() {\n  db, err := database.Setup()\n  if err != nil {\n    panic(err)\n  }\n\n  tx, err := db.Begin()\n  if err != nil {\n    panic(err)\n  }\n  // this wont do anything if commit is successful\n  defer tx.Rollback()\n\n  if err := dbinterface.Exec(tx); err != nil {\n    panic(err)\n  }\n  if err := tx.Commit(); err != nil {\n    panic(err)\n```", "```go\n$ go build $ ./example\n```", "```go\n$ go run main.go\nResults:\n Name: Aaron\n Created: 2017-02-16 20:00:00 +0000 UTC\n```", "```go\n$ go mod init github.com/PacktPublishing/Go-Programming-Cookbook-Second-Edition/chapter6/pools \n```", "```go\nmodule github.com/PacktPublishing/Go-Programming-Cookbook-Second-Edition/chapter6/pools    \n```", "```go\n        package pools\n\n        import (\n            \"database/sql\"\n            \"fmt\"\n            \"os\"\n\n            _ \"github.com/go-sql-driver/mysql\" //we import supported \n            libraries for database/sql\n        )\n\n        // Setup configures the db along with pools\n        // number of connections and more\n        func Setup() (*sql.DB, error) {\n            db, err := sql.Open(\"mysql\", \n            fmt.Sprintf(\"%s:%s@/gocookbook? \n            parseTime=true\", os.Getenv(\"MYSQLUSERNAME\"),         \n            os.Getenv(\"MYSQLPASSWORD\")))\n            if err != nil {\n                return nil, err\n            }\n\n            // there will only ever be 24 open connections\n            db.SetMaxOpenConns(24)\n\n            // MaxIdleConns can never be less than max open \n            // SetMaxOpenConns otherwise it'll default to that value\n            db.SetMaxIdleConns(24)\n\n            return db, nil\n        }\n```", "```go\npackage pools\n\nimport (\n  \"context\"\n  \"time\"\n)\n\n// ExecWithTimeout will timeout trying\n// to get the current time\nfunc ExecWithTimeout() error {\n  db, err := Setup()\n  if err != nil {\n    return err\n  }\n\n  ctx := context.Background()\n\n  // we want to timeout immediately\n  ctx, cancel := context.WithDeadline(ctx, time.Now())\n\n  // call cancel after we complete\n  defer cancel()\n\n  // our transaction is context aware\n  _, err = db.BeginTx(ctx, nil)\n  return err\n}\n```", "```go\n        package main\n\n        import \"PacktPublishing/\n                Go-Programming-Cookbook-Second-Edition/\n                go-cookbook/chapter6/pools\"\n\n        func main() {\n            if err := pools.ExecWithTimeout(); err != nil {\n                panic(err)\n            }\n        }\n```", "```go\n$ go build $ ./example\n```", "```go\n$ go run main.go\npanic: context deadline exceeded\n\ngoroutine 1 [running]:\nmain.main()\n/go/src/PacktPublishing/Go-Programming-Cookbook-Second-\nEdition/go-cookbook/chapter6/pools/example/main.go:7 +0x4e\nexit status 2\n```", "```go\n$ git clone git@github.com:PacktPublishing/Go-Programming-Cookbook-Second-Edition.git go-programming-cookbook-original\n```", "```go\n$ go mod init github.com/PacktPublishing/Go-Programming-Cookbook-Second-Edition/chapter6/redis \n```", "```go\nmodule github.com/PacktPublishing/Go-Programming-Cookbook-Second-Edition/chapter6/redis    \n```", "```go\n        package redis\n\n        import (\n            \"os\"\n\n            redis \"gopkg.in/redis.v5\"\n        )\n\n        // Setup initializes a redis client\n        func Setup() (*redis.Client, error) {\n            client := redis.NewClient(&redis.Options{\n                Addr: \"localhost:6379\",\n                Password: os.Getenv(\"REDISPASSWORD\"),\n                DB: 0, // use default DB\n         })\n\n         _, err := client.Ping().Result()\n         return client, err\n        }\n```", "```go\n        package redis\n\n        import (\n            \"fmt\"\n            \"time\"\n\n            redis \"gopkg.in/redis.v5\"\n        )\n\n        // Exec performs some redis operations\n        func Exec() error {\n            conn, err := Setup()\n            if err != nil {\n                return err\n            }\n\n            c1 := \"value\"\n            // value is an interface, we can store whatever\n            // the last argument is the redis expiration\n            conn.Set(\"key\", c1, 5*time.Second)\n\n            var result string\n            if err := conn.Get(\"key\").Scan(&result); err != nil {\n                switch err {\n                // this means the key\n                // was not found\n                case redis.Nil:\n                    return nil\n                default:\n                    return err\n                }\n            }\n\n            fmt.Println(\"result =\", result)\n\n            return nil\n        }\n```", "```go\npackage redis\n\nimport (\n  \"fmt\"\n\n  redis \"gopkg.in/redis.v5\"\n)\n\n// Sort performs a sort redis operations\nfunc Sort() error {\n  conn, err := Setup()\n  if err != nil {\n    return err\n  }\n\n  listkey := \"list\"\n  if err := conn.LPush(listkey, 1).Err(); err != nil {\n    return err\n  }\n  // this will clean up the list key if any of the subsequent commands error\n  defer conn.Del(listkey)\n\n  if err := conn.LPush(listkey, 3).Err(); err != nil {\n    return err\n  }\n  if err := conn.LPush(listkey, 2).Err(); err != nil {\n    return err\n  }\n\n  res, err := conn.Sort(listkey, redis.Sort{Order: \"ASC\"}).Result()\n  if err != nil {\n    return err\n  }\n  fmt.Println(res)\n\n  return nil\n}\n```", "```go\n        package main\n\n        import \"PacktPublishing/\n                Go-Programming-Cookbook-Second-Edition/\n                go-cookbook/chapter6/redis\"\n\n        func main() {\n            if err := redis.Exec(); err != nil {\n                panic(err)\n            }\n\n            if err := redis.Sort(); err != nil {\n                panic(err)\n            }\n        }\n```", "```go\n$ go build $ ./example\n```", "```go\n$ go run main.go\nresult = value\n[1 2 3]\n```", "```go\n$ git clone git@github.com:PacktPublishing/Go-Programming-Cookbook-Second-Edition.git go-programming-cookbook-original\n```", "```go\n$ go mod init github.com/PacktPublishing/Go-Programming-Cookbook-Second-Edition/chapter6/mongodb \n```", "```go\nmodule github.com/PacktPublishing/Go-Programming-Cookbook-Second-Edition/chapter6/mongodb    \n```", "```go\npackage mongodb\n\nimport (\n  \"context\"\n  \"time\"\n\n  \"github.com/mongodb/mongo-go-driver/mongo\"\n  \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\n// Setup initializes a mongo client\nfunc Setup(ctx context.Context, address string) (*mongo.Client, error) {\n  ctx, cancel := context.WithTimeout(ctx, 10*time.Second)\n  // cancel will be called when setup exits\n  defer cancel()\n\n  client, err := mongo.NewClient(options.Client().ApplyURI(address))\n  if err != nil {\n    return nil, err\n  }\n\n  if err := client.Connect(ctx); err != nil {\n    return nil, err\n  }\n  return client, nil\n}\n```", "```go\npackage mongodb\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/mongodb/mongo-go-driver/bson\"\n)\n\n// State is our data model\ntype State struct {\n  Name string `bson:\"name\"`\n  Population int `bson:\"pop\"`\n}\n\n// Exec creates then queries an Example\nfunc Exec(address string) error {\n  ctx := context.Background()\n  db, err := Setup(ctx, address)\n  if err != nil {\n    return err\n  }\n\n  coll := db.Database(\"gocookbook\").Collection(\"example\")\n\n  vals := []interface{}{&State{\"Washington\", 7062000}, &State{\"Oregon\", 3970000}}\n\n  // we can inserts many rows at once\n  if _, err := coll.InsertMany(ctx, vals); err != nil {\n    return err\n  }\n\n  var s State\n  if err := coll.FindOne(ctx, bson.M{\"name\": \"Washington\"}).Decode(&s); err != nil {\n    return err\n  }\n\n  if err := coll.Drop(ctx); err != nil {\n    return err\n  }\n\n  fmt.Printf(\"State: %#v\\n\", s)\n  return nil\n}\n```", "```go\npackage main\n\nimport \"github.com/PacktPublishing/Go-Programming-Cookbook-Second-Edition/chapter6/mongodb\"\n\nfunc main() {\n  if err := mongodb.Exec(\"mongodb://localhost\"); err != nil {\n    panic(err)\n  }\n}\n```", "```go\n$ go build $ ./example\n```", "```go\n$ go run main.go\nState: mongodb.State{Name:\"Washington\", Population:7062000}\n```", "```go\n$ go mod init github.com/PacktPublishing/Go-Programming-Cookbook-Second-Edition/chapter6/storage \n```", "```go\nmodule github.com/PacktPublishing/Go-Programming-Cookbook-Second-Edition/chapter6/storage    \n```", "```go\n        package storage\n\n        import \"context\"\n\n        // Item represents an item at\n        // a shop\n        type Item struct {\n            Name  string\n            Price int64\n        }\n\n        // Storage is our storage interface\n        // We'll implement it with Mongo\n        // storage\n        type Storage interface {\n            GetByName(context.Context, string) (*Item, error)\n            Put(context.Context, *Item) error\n        }\n```", "```go\npackage storage\n\nimport (\n  \"context\"\n  \"time\"\n\n  \"github.com/mongodb/mongo-go-driver/mongo\"\n)\n\n// MongoStorage implements our storage interface\ntype MongoStorage struct {\n  *mongo.Client\n  DB string\n  Collection string\n}\n\n// NewMongoStorage initializes a MongoStorage\nfunc NewMongoStorage(ctx context.Context, connection, db, collection string) (*MongoStorage, error) {\n  ctx, cancel := context.WithTimeout(ctx, 10*time.Second)\n  defer cancel()\n\n  client, err := mongo.Connect(ctx, \"mongodb://localhost\")\n  if err != nil {\n    return nil, err\n  }\n\n  ms := MongoStorage{\n    Client: client,\n    DB: db,\n    Collection: collection,\n  }\n  return &ms, nil\n}\n```", "```go\npackage storage\n\nimport (\n  \"context\"\n\n  \"github.com/mongodb/mongo-go-driver/bson\"\n)\n\n// GetByName queries mongodb for an item with\n// the correct name\nfunc (m *MongoStorage) GetByName(ctx context.Context, name string) (*Item, error) {\n  c := m.Client.Database(m.DB).Collection(m.Collection)\n  var i Item\n  if err := c.FindOne(ctx, bson.M{\"name\": name}).Decode(&i); err != nil {\n    return nil, err\n  }\n\n  return &i, nil\n}\n\n// Put adds an item to our mongo instance\nfunc (m *MongoStorage) Put(ctx context.Context, i *Item) error {\n  c := m.Client.Database(m.DB).Collection(m.Collection)\n  _, err := c.InsertOne(ctx, i)\n  return err\n}\n```", "```go\npackage storage\n\nimport (\n  \"context\"\n  \"fmt\"\n)\n\n// Exec initializes storage, then performs operations\n// using the storage interface\nfunc Exec() error {\n  ctx := context.Background()\n  m, err := NewMongoStorage(ctx, \"localhost\", \"gocookbook\", \"items\")\n  if err != nil {\n    return err\n  }\n  if err := PerformOperations(m); err != nil {\n    return err\n  }\n\n  if err := m.Client.Database(m.DB).Collection(m.Collection).Drop(ctx); err != nil {\n    return err\n  }\n\n  return nil\n}\n\n// PerformOperations creates a candle item\n// then gets it\nfunc PerformOperations(s Storage) error {\n  ctx := context.Background()\n  i := Item{Name: \"candles\", Price: 100}\n  if err := s.Put(ctx, &i); err != nil {\n    return err\n  }\n\n  candles, err := s.GetByName(ctx, \"candles\")\n  if err != nil {\n    return err\n  }\n  fmt.Printf(\"Result: %#v\\n\", candles)\n  return nil\n}\n```", "```go\n        package main\n\n        import \"PacktPublishing/Go-Programming-Cookbook-Second-Edition/\n                go-cookbook/chapter6/storage\"\n\n        func main() {\n            if err := storage.Exec(); err != nil {\n                panic(err)\n            }\n        }\n```", "```go\n$ go build $ ./example\n```", "```go\n$ go run main.go\nResult: &storage.Item{Name:\"candles\", Price:100}\n```"]