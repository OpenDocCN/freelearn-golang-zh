- en: Microservices for Applications in Go
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go应用程序的微服务
- en: 'Out of the box, Go is an excellent choice for writing web applications. The
    built-in `net/http` packages combined with packages such as `html/template` allow
    for fully featured modern web applications out of the box. It''s so easy that
    it encourages spinning up web interfaces for the management of even basic long-running
    applications. Although the standard library is fully featured, there is still
    a large variety of third-party web packages for everything from routes to full-stack
    frameworks, including the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Go是一个编写Web应用程序的绝佳选择。内置的`net/http`包结合`html/template`等包，可以实现现代完整功能的Web应用程序。它如此简单，以至于它鼓励为管理甚至是基本的长期运行的应用程序启动Web界面。尽管标准库功能齐全，但仍然有大量第三方Web包，涵盖从路由到全栈框架的各种功能，包括以下内容：
- en: '[https://github.com/urfave/negroni](https://github.com/urfave/negroni)'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/urfave/negroni](https://github.com/urfave/negroni)'
- en: '[https://github.com/gin-gonic/gin](https://github.com/gin-gonic/gin)'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/gin-gonic/gin](https://github.com/gin-gonic/gin)'
- en: '[https://github.com/labstack/echo](https://github.com/labstack/echo)'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/labstack/echo](https://github.com/labstack/echo)'
- en: '[http://www.gorillatoolkit.org/](http://www.gorillatoolkit.org/)'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.gorillatoolkit.org/](http://www.gorillatoolkit.org/)'
- en: '[https://github.com/julienschmidt/httprouter](https://github.com/julienschmidt/httprouter)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/julienschmidt/httprouter](https://github.com/julienschmidt/httprouter)'
- en: The recipes in this chapter will focus on basic tasks you might run into when
    working with handlers, when navigating response and request objects, and in dealing
    with concepts such as middleware.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的食谱将侧重于处理程序、响应和请求对象以及处理中间件等概念时可能遇到的基本任务。
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将涵盖以下食谱：
- en: Working with web handlers, requests, and ResponseWriter instances
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理web处理程序、请求和ResponseWriter实例
- en: Using structures and closures for stateful handlers
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用结构和闭包进行有状态处理程序
- en: Validating input for Go structures and user inputs
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证Go结构和用户输入的输入
- en: Rendering and content negotiation
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染和内容协商
- en: Implementing and using middleware
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现和使用中间件
- en: Building a reverse proxy application
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个反向代理应用程序
- en: Exporting GRPC as a JSON API
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将GRPC导出为JSON API
- en: Technical requirements
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In order to proceed with all the recipes in this chapter, configure your environment
    according to these steps:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了继续本章中的所有食谱，根据以下步骤配置您的环境：
- en: Download and install Go 1.12.6 or greater on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install).
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://golang.org/doc/install](https://golang.org/doc/install)下载并安装Go 1.12.6或更高版本到您的操作系统上。
- en: Open a Terminal or console application; create a project directory such as `~/projects/go-programming-cookbook` and
    navigate to this directory. All code will be run and modified from this directory.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端或控制台应用程序；创建一个项目目录，例如`~/projects/go-programming-cookbook`，并导航到该目录。所有的代码都将在这个目录中运行和修改。
- en: 'Clone the latest code into `~/projects/go-programming-cookbook-original` and
    optionally work from that directory rather than typing the examples manually,
    as follows:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将最新的代码克隆到`~/projects/go-programming-cookbook-original`，或者选择从该目录工作，而不是手动输入示例，如下所示：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Install the `curl` command from [https://curl.haxx.se/download.html](https://curl.haxx.se/download.html).
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://curl.haxx.se/download.html](https://curl.haxx.se/download.html)安装`curl`命令。
- en: Working with web handlers, requests, and ResponseWriter instances
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理web处理程序、请求和ResponseWriter实例
- en: 'Go defines `HandlerFunc` and a `Handler` interface with the following signatures:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Go定义了具有以下签名的`HandlerFunc`和`Handler`接口：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By default, the `net/http` package makes extensive use of these types. For example,
    a route can be attached to a `Handler` or `HandlerFunc` interface. This recipe
    will explore creating a `Handler` interface, listening on a local port, and performing
    some operations on an `http.ResponseWriter` interface after processing `http.Request`.
    This should be considered the basis for Go web applications and RESTful APIs.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`net/http`包广泛使用这些类型。例如，路由可以附加到`Handler`或`HandlerFunc`接口。本教程将探讨创建`Handler`接口，监听本地端口，并在处理`http.Request`后对`http.ResponseWriter`接口执行一些操作。这应该被视为Go
    Web应用程序和RESTful API的基础。
- en: How to do it...
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps cover the writing and running of your application:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤涵盖了编写和运行应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter8/handlers`, and
    navigate to this directory.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter8/handlers`的新目录，并导航到该目录。
- en: 'Run the following command:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter8/handlers`,
    or use this as an exercise to write some of your own code!
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter8/handlers`复制测试，或者使用这个作为练习来编写一些自己的代码！
- en: 'Create a file called `get.go` with the following contents:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`get.go`的文件，内容如下：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a file called `post.go` with the following contents:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`post.go`的文件，内容如下：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录，并导航到该目录。
- en: 'Create a file called `main.go` with the following contents:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Run `go run main.go`.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You could also run the following command:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您也可以运行以下命令：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You should see the following output:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In a separate Terminal, run the following commands:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个单独的终端中，运行以下命令：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You should see the following output:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件可能会被更新，顶级食谱目录中现在应该存在`go.sum`文件。'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: For this recipe, we set up two handlers. The first handler expects a `GET` request
    with a `GET` parameter called `name`. When we `curl` it, it returns the plain
    text string `Hello <name>!`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们设置了两个处理程序。第一个处理程序期望使用名为`name`的`GET`参数的`GET`请求。当我们使用`curl`时，它返回纯文本字符串`Hello
    <name>!`。
- en: The second handler expects a `POST` method with `PostForm` requests. This is
    what you'd get if you used a standard HTML form without any AJAX calls. Alternatively,
    we could parse JSON out of the request body instead. This is commonly done with
    `json.Decoder`. I recommend trying this as an exercise as well. Lastly, the handler
    sends a JSON-formatted response and sets all the appropriate headers.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个处理程序期望使用`PostForm`请求的`POST`方法。这是如果您使用标准HTML表单而没有任何AJAX调用时会得到的结果。或者，我们可以从请求体中解析JSON。这通常使用`json.Decoder`来完成。我建议您也尝试这个练习。最后，处理程序发送一个JSON格式的响应并设置所有适当的标头。
- en: 'Although all of this was written explicitly, there are a number of methods
    for making the code less verbose, including the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管所有这些都是明确写出的，但有许多方法可以使代码更简洁，包括以下方法：
- en: Using [https://github.com/unrolled/render](https://github.com/unrolled/render)
    to handle responses
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[https://github.com/unrolled/render](https://github.com/unrolled/render)来处理响应
- en: Using various web frameworks mentioned in the *Working with web handlers, requests,
    and ResponseWriters* recipe of this chapter to parse route arguments, restrict
    routes to specific HTTP verbs, handle graceful shutdown, and more
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用本章中提到的各种Web框架来解析路由参数，限制路由到特定的HTTP动词，处理优雅的关闭等
- en: Using structures and closures for stateful handlers
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用结构和闭包进行有状态的处理程序
- en: Due to the sparse signatures of HTTP handler functions, it may seem tricky to
    add state to a handler. For example, there are a variety of ways to include a
    database connection. Two approaches to doing this are to pass in the state via
    closures, which is useful for achieving flexibility on a single handler, or by
    using a structure.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 由于HTTP处理程序函数的签名稀疏，向处理程序添加状态可能会显得棘手。例如，有多种方法可以包含数据库连接。实现这一点的两种方法是通过闭包传递状态，这对于在单个处理程序上实现灵活性非常有用，或者使用结构。
- en: This recipe will demonstrate both. We'll use a `struct` controller to store
    a storage interface and create two routes with a single handler that are modified
    by an outer function.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例将演示两者。我们将使用一个`struct`控制器来存储一个存储接口，并创建两个由外部函数修改的单个处理程序的路由。
- en: How to do it...
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps cover the writing and running of your application:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤涵盖了编写和运行应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter8/controllers`, and
    navigate to this directory.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter8/controllers`的新目录，并进入该目录。
- en: 'Run the following command:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Copy the tests from `~/projects/go-programming-cookbook-original/chapter8/controllers`,
    or use this as an exercise to write some of your own code!
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter8/controllers`复制测试，或者将其用作编写自己代码的练习！
- en: 'Create a file called `controller.go` with the following contents:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`controller.go`的文件，内容如下：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a file called `storage.go` with the following contents:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`storage.go`的文件，内容如下：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a file called `post.go` with the following contents:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`post.go`的文件，内容如下：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create a file called `get.go` with the following contents:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`get.go`的文件，内容如下：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录并进入该目录。
- en: 'Create a file called `main.go` with the following contents:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Run `go run main.go`.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You could also run the following:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以运行以下命令：
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You should see the following output:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE19]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In a separate Terminal, run the following commands:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个终端中，运行以下命令：
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You should see the following output:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件可能会被更新，顶级配方目录中现在应该存在`go.sum`文件。'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: These strategies work because Go allows methods to satisfy typed functions such
    as `http.HandlerFunc`. By using a structure, we can inject various pieces in `main.go`,
    which could include database connections, logging, and more. In this recipe, we
    inserted a `Storage` interface. All handlers connected to the controller can make
    use of its methods and attributes.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这些策略有效是因为Go允许方法满足诸如`http.HandlerFunc`之类的类型化函数。通过使用结构，我们可以在`main.go`中注入各种部分，其中包括数据库连接，日志记录等。在这个示例中，我们插入了一个`Storage`接口。连接到控制器的所有处理程序都可以使用它的方法和属性。
- en: The `GetValue` method doesn't have an `http.HandlerFunc` signature, and instead,
    returns one. This is how we can use a closure to inject state. In `main.go`, we
    define two routes—one with `UseDefault` set to `false`, and the other with it
    set to `true`. This could be used when defining a function that spans multiple
    routes, or when using a structure where your handlers feel too cumbersome.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`GetValue`方法没有`http.HandlerFunc`签名，而是返回一个。这就是我们可以使用闭包来注入状态的方式。在`main.go`中，我们定义了两个路由，一个将`UseDefault`设置为`false`，另一个将其设置为`true`。这可以在定义跨多个路由的函数时使用，或者在使用结构时，您的处理程序感觉太繁琐时使用。'
- en: Validating input for Go structures and user inputs
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证Go结构和用户输入的输入
- en: Validation for web can be a problem. This recipe will explore using closures
    to support the easy mocking of validation functions and to allow flexibility in
    the type of validation performed when initializing a controller structure as described
    by the previous recipe.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Web验证可能会有问题。这个示例将探讨使用闭包来支持验证函数的易于模拟，并在初始化控制器结构时允许对验证类型的灵活性，正如前面的示例所描述的那样。
- en: We'll perform this validation on a structure, but not explore how to populate
    the structure. We can assume that the data will be populated by parsing a JSON
    payload, populating explicitly from the form input, or other methods.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将对一个结构执行此验证，但不探讨如何填充这个结构。我们可以假设数据是通过解析JSON有效载荷、明确从表单输入中填充或其他方法填充的。
- en: How to do it...
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps cover the writing and running of your application:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤涵盖了编写和运行应用程序的过程：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter8/validation`, and
    navigate to this directory.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter8/validation`的新目录，并导航到该目录。
- en: 'Run the following command:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE23]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Copy the tests from `~/projects/go-programming-cookbook-original/chapter8/validation`,
    or use this as an exercise to write some of your own code!
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter8/validation`复制测试，或者利用这个机会编写一些你自己的代码！
- en: 'Create a file called `controller.go` with the following contents:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`controller.go`的文件，内容如下：
- en: '[PRE24]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create a file called `validate.go` with the following contents:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`validate.go`的文件，内容如下：
- en: '[PRE25]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create a file called `process.go` with the following contents:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`process.go`的文件，内容如下：
- en: '[PRE26]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录，并导航到该目录。
- en: 'Create a file called `main.go` with the following contents:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE27]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Run `go run main.go`.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You could also run the following:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行以下命令：
- en: '[PRE28]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You should see the following output:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE29]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In a separate Terminal, run the following commands:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个终端中，运行以下命令：
- en: '[PRE30]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You should see the following output:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE31]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件可能会被更新，`go.sum`文件现在应该存在于顶层食谱目录中。'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We handle validation by passing in a closure to our controller structure. For
    any input that the controller might need to validate, we'd need one of these closures.
    The advantage to this approach is that we can mock and replace the validation
    functions at runtime, so testing becomes far simpler. In addition, we're not bound
    to a single function signature and we can pass in things such as a database connection
    to our validation functions.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过向我们的控制器结构传递一个闭包来处理验证。对于控制器可能需要验证的任何输入，我们都需要一个这样的闭包。这种方法的优势在于我们可以在运行时模拟和替换验证函数，因此测试变得更简单。此外，我们不受限于单个函数签名，可以传递诸如数据库连接之类的东西给我们的验证函数。
- en: The other thing this recipe demonstrates is returning a typed error called `Verror`.
    This type holds validation error messages that can be displayed to users. One
    shortcoming of this approach is that it doesn't handle multiple validation messages
    at once. This would be possible by modifying the `Verror` type to allow for more
    state, for example, by including a map, in order to house a number of validation
    errors before it returns from our `ValidatePayload` function.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱展示的另一件事是返回一个名为`Verror`的类型错误。这种类型保存了可以显示给用户的验证错误消息。这种方法的一个缺点是它不能一次处理多个验证消息。通过修改`Verror`类型以允许更多状态，例如通过包含一个映射，来容纳多个验证错误，然后从我们的`ValidatePayload`函数返回，这是可能的。
- en: Rendering and content negotiation
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染和内容协商
- en: Web handlers can return a variety of content types; for example, they can return
    JSON, plain text, images, and more. Frequently, when communicating with APIs,
    it's possible to specify and accept a content type to clarify what format you'll
    pass data in as and what data you want to receive back out.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Web处理程序可以返回各种内容类型；例如，它们可以返回JSON、纯文本、图像等。在与API通信时，通常可以指定和接受内容类型，以澄清你将以什么格式传递数据，以及你想要接收什么数据。
- en: This recipe will explore using `unrolled/render` and a custom function to negotiate
    the content type and respond accordingly.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱将探讨使用`unrolled/render`和一个自定义函数来协商内容类型并相应地做出响应。
- en: How to do it...
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps cover the writing and running of your application:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤涵盖了编写和运行应用程序的过程：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter8/negotiate`, and
    navigate to this directory.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter8/negotiate`的新目录，并导航到该目录。
- en: 'Run the following command:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE32]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE33]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Copy the tests from `~/projects/go-programming-cookbook-original/chapter8/negotiate`,
    or use this as an exercise to write some of your own code!
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制来自`~/projects/go-programming-cookbook-original/chapter8/negotiate`的测试，或者利用这个机会编写一些你自己的代码！
- en: 'Create a file called `negotiate.go` with the following contents:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`negotiate.go`的文件，内容如下：
- en: '[PRE34]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create a file called `respond.go` with the following contents:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`respond.go`的文件，内容如下：
- en: '[PRE35]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Create a file called `handler.go` with the following contents:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`handler.go`的文件，内容如下：
- en: '[PRE36]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录，并导航到该目录。
- en: 'Create a file called `main.go` with the following contents:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE37]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Run `go run main.go`.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You could also run the following:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行以下命令：
- en: '[PRE38]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'You should see the following output:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE39]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In a separate Terminal, run the following commands:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个终端中，运行以下命令：
- en: '[PRE40]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'You should see the following output:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE41]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件可能会被更新，`go.sum`文件现在应该存在于顶层食谱目录中。'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `github.com/unrolled/render` package does the heavy lifting for this recipe.
    There are a huge number of other options you can input if you need to work with
    HTML templates and more. This recipe can be used to auto negotiate when working
    through web handlers as demonstrated here by passing in various content type headers,
    or by directly manipulating the structure.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`github.com/unrolled/render`包为这个教程做了大量的工作。如果需要处理HTML模板等，还有大量其他选项可以输入。这个教程可以用于在通过传递各种内容类型标头来自动协商工作时，或者通过直接操作结构来演示如何解耦中间件逻辑和处理程序。'
- en: A similar pattern can be applied to accept headers, but beware that these headers
    often include multiple values and your code will have to take that into account.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的模式可以应用于接受标头，但要注意这些标头通常包含多个值，您的代码将不得不考虑到这一点。
- en: Implementing and using middleware
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现和使用中间件
- en: Middleware for handlers in Go is an area that has been widely explored. There
    are a variety of packages for handling middleware. This recipe will create middleware
    from scratch and implement an `ApplyMiddleware` function to chain together a bunch
    of middlewares.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Go中用于处理程序的中间件是一个被广泛探索的领域。有各种各样的包用于处理中间件。这个教程将从头开始创建中间件，并实现一个`ApplyMiddleware`函数来链接一系列中间件。
- en: It will also explore setting values in the request context object and retrieving
    them later using middleware. This will all be done with a very basic handler to
    help demonstrate how to decouple middleware logic from your handlers.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 它还将探讨在请求上下文对象中设置值并稍后使用中间件检索它们。这将通过一个非常基本的处理程序来完成，以帮助演示如何将中间件逻辑与处理程序解耦。
- en: How to do it...
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps cover the writing and running of your application:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤涵盖了编写和运行应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter8/middleware`, and
    navigate to this directory.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter8/middleware`的新目录，并导航到该目录。
- en: 'Run the following command:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE42]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE43]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Copy the tests from `~/projects/go-programming-cookbook-original/chapter8/middleware`,
    or use this as an exercise to write some of your own code!
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制`~/projects/go-programming-cookbook-original/chapter8/middleware`中的测试，或者将其用作编写一些自己代码的练习！
- en: 'Create a file called `middleware.go` with the following contents:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`middleware.go`的文件，其中包含以下内容：
- en: '[PRE44]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Create a file called `context.go` with the following contents:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`context.go`的文件，其中包含以下内容：
- en: '[PRE45]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Create a file called `handler.go` with the following contents:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`handler.go`的文件，其中包含以下内容：
- en: '[PRE46]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录并导航到该目录。
- en: 'Create a file called `main.go` with the following contents:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，其中包含以下内容：
- en: '[PRE47]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Run `go run main.go`.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You could also run the following commands:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以运行以下命令：
- en: '[PRE48]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'You should see the following output:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE49]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'In a separate Terminal, run the following `curl` command several times:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个终端中，运行以下`curl`命令多次：
- en: '[PRE50]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'You should see the following output:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE51]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'In the original `main.go`, you should see the following:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在原始的`main.go`中，您应该看到以下内容：
- en: '[PRE52]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件可能会被更新，`go.sum`文件现在应该存在于顶级教程目录中。'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Middlewares can be used to perform simple operations such as logging, metric
    collection, and analytics. Middlewares can also be used to dynamically populate
    variables on each request. This can be done, for example, to collect an X-header
    from the request to set an ID or generate an ID, like we did in this recipe. Another
    ID strategy might be to generate a **Universal Unique Identifier** (**UUID**)
    for every request—this allows us to easily correlate log messages together and
    trace your request across different applications if multiple microservices are
    involved in building the response.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 中间件可以用于执行简单的操作，比如日志记录、度量收集和分析。中间件也可以用于在每个请求上动态填充变量。例如，可以收集请求中的X-header来设置一个ID或生成一个ID，就像我们在这个教程中所做的那样。另一种ID策略可能是为每个请求生成一个**通用唯一标识符**（**UUID**）—这样我们就可以轻松地将日志消息关联在一起，并跟踪您的请求穿越不同的应用程序，如果多个微服务参与构建响应的话。
- en: When working with context values, it's important to consider the order of your
    middlewares. Typically, it's better to not make middlewares reliant on one another.
    For example, in this recipe, it would probably be better to generate the UUID
    in the logging middleware itself. However, this recipe should serve as a guide
    for layering middlewares and initializing them in `main.go`.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理上下文值时，考虑中间件的顺序是很重要的。通常，最好不要让中间件相互依赖。例如，在这个教程中，最好在日志中间件本身生成UUID。然而，这个教程应该作为分层中间件和在`main.go`中初始化它们的指南。
- en: Building a reverse proxy application
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建反向代理应用程序
- en: In this recipe, we will develop a reverse proxy application. The idea is, by
    hitting `http://localhost:3333` in a browser, all traffic will be forwarded to
    a configurable host and the responses will be forwarded to your browser. The end
    result should be [https://www.golang.org](https://www.golang.org) rendered in
    a browser through our proxy application.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将开发一个反向代理应用程序。这个想法是，通过在浏览器中访问`http://localhost:3333`，所有流量将被转发到一个可配置的主机，并且响应将被转发到您的浏览器。最终结果应该是通过我们的代理应用程序在浏览器中呈现[https://www.golang.org](https://www.golang.org)。
- en: This can be combined with port forwarding and SSH tunnels in order to securely
    hit websites through an intermediate server. This recipe will build a reverse
    proxy from the ground up, but this functionality is also provided by the `net/http/httputil`
    package. Using this package, the incoming request can be modified by `Director
    func(*http.Request)` and the outgoing response can be modified by `ModifyResponse
    func(*http.Response) error`. In addition, there's support for buffering the response.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以与端口转发和SSH隧道结合使用，以便通过中间服务器安全地访问网站。这个配方将从头开始构建一个反向代理，但这个功能也由`net/http/httputil`包提供。使用这个包，传入的请求可以通过`Director
    func(*http.Request)`进行修改，传出的响应可以通过`ModifyResponse func(*http.Response) error`进行修改。此外，还支持对响应进行缓冲。
- en: How to do it...
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps cover the writing and running of your application:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤涵盖了编写和运行应用程序的过程：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter8/proxy`, and
    navigate to this directory.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter8/proxy`的新目录，并进入该目录。
- en: 'Run the following command:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE53]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE54]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Copy the tests from `~/projects/go-programming-cookbook-original/chapter8/proxy`,
    or use this as an exercise to write some of your own code!
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter8/proxy`复制测试，或者将其作为练习编写一些自己的代码！
- en: 'Create a file called `proxy.go` with the following contents:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`proxy.go`的文件，内容如下：
- en: '[PRE55]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Create a file called `process.go` with the following contents:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`process.go`的文件，内容如下：
- en: '[PRE56]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录并进入。
- en: 'Create a file called `main.go` with the following contents:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE57]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Run `go run main.go`.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You could also run the following:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您也可以运行以下命令：
- en: '[PRE58]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'You should see the following output:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE59]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Navigate a browser to `localhost:3333/`. You should see the [https://golang.org/](https://golang.org/)
    website rendered!
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将浏览器导航到`localhost:3333/`。您应该看到[https://golang.org/](https://golang.org/)网站呈现出来！
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件可能已更新，`go.sum`文件现在应该存在于顶级配方目录中。'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Go request and response objects are largely shareable between clients and handlers.
    This code takes a request obtained by a `Proxy` structure that satisfies a `Handler`
    interface. The `main.go` file is using `Handle` instead of `HandleFunc` used elsewhere.
    Once the request is available, it's modified to prepend `Proxy.BaseURL` for the
    request, which the client then dispatches. Lastly, the response is copied back
    to the `ResponseWriter` interface. This includes all headers, the body, and the
    status.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: Go请求和响应对象在客户端和处理程序之间大部分是可共享的。这段代码使用了一个满足`Handler`接口的`Proxy`结构获取的请求。`main.go`文件使用了`Handle`而不是其他地方使用的`HandleFunc`。一旦请求可用，它就被修改为在请求中添加`Proxy.BaseURL`，然后客户端进行分发。最后，响应被复制回`ResponseWriter`接口。这包括所有标头、正文和状态。
- en: We can also add some additional features such as basic `auth` for requests,
    token management, and more if needed. This can be useful for token management
    where the proxy manages sessions for a JavaScript or other client application.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，我们还可以添加一些额外的功能，比如基本的`auth`请求，令牌管理等。这对于代理管理JavaScript或其他客户端应用程序的会话非常有用。
- en: Exporting GRPC as a JSON API
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将GRPC导出为JSON API
- en: In the *Understanding GRPC clients* recipe from Chapter 7, *Web Clients and
    APIs*, we wrote a basic GRPC server and client. This recipe will expand on that
    idea by putting common RPC functions in a package and wrapping them in both a
    GRPC server and a standard web handler. This can be useful when your API wants
    to support both types of client, but you don't want to replicate code for common
    functionality.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在第7章*Web Clients and APIs*的*理解GRPC客户端*配方中，我们编写了一个基本的GRPC服务器和客户端。这个配方将扩展这个想法，将常见的RPC函数放在一个包中，并将它们包装在一个GRPC服务器和一个标准的Web处理程序中。当您的API希望支持两种类型的客户端，但又不想为常见功能复制代码时，这将非常有用。
- en: Getting ready
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Configure your environment according to the following steps:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下步骤配置您的环境：
- en: Refer to the steps given in the *Technical requirements* section at the beginning
    of this chapter.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 参考本章开头的*技术要求*部分中给出的步骤。
- en: 'Install GRPC ([https://grpc.io/docs/quickstart/go/](https://grpc.io/docs/quickstart/go/)) and
    run the following commands:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装GRPC ([https://grpc.io/docs/quickstart/go/](https://grpc.io/docs/quickstart/go/))并运行以下命令：
- en: '`go get -u github.com/golang/protobuf/{proto,protoc-gen-go}`'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`go get -u github.com/golang/protobuf/{proto,protoc-gen-go}`'
- en: '`go get -u google.golang.org/grpc`'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`go get -u google.golang.org/grpc`'
- en: How to do it...
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps cover the writing and running of your application:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤涵盖了编写和运行应用程序的过程：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter8/grpcjson`, and
    navigate to this directory.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter8/grpcjson`的新目录，并进入该目录。
- en: 'Run the following command:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE60]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE61]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Copy the tests from `~/projects/go-programming-cookbook-original/chapter8/grpcjson`,
    or use this as an exercise to write some of your own code!
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter8/grpcjson`复制测试，或者将其作为练习编写一些自己的代码！
- en: Create a new directory named `keyvalue` and navigate to it.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`keyvalue`的新目录并进入。
- en: 'Create a file called `keyvalue.proto` with the following contents:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`keyvalue.proto`的文件，内容如下：
- en: '[PRE62]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Run the following command:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE63]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Navigate back up a directory.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回上一级目录。
- en: Create a new directory named `internal`.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`internal`的新目录。
- en: 'Create a file called `internal/keyvalue.go` with the following contents:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`internal/keyvalue.go`的文件，内容如下：
- en: '[PRE64]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Create a new directory named `grpc`.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`grpc`的新目录。
- en: 'Create a file called `grpc/main.go` with the following contents:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`grpc/main.go`的文件，内容如下：
- en: '[PRE65]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Create a new directory named `http`.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`http`的新目录。
- en: 'Create a file called `http/set.go` with the following contents:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`http/set.go`的文件，内容如下：
- en: '[PRE66]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Create a file called `http/get.go` with the following contents:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`http/get.go`的文件，内容如下：
- en: '[PRE67]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Create a file called `http/main.go` with the following contents:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`http/main.go`的文件，内容如下：
- en: '[PRE68]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Run the `go run ./http` command. You should see the following output:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run ./http`命令。您应该会看到以下输出：
- en: '[PRE69]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'In a separate Terminal, run the following commands:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单独的终端中，运行以下命令：
- en: '[PRE70]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'You should see the following output:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到以下输出：
- en: '[PRE71]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件可能已更新，`go.sum`文件现在应该存在于顶层配方目录中。'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Although this recipe omits the client, you could replicate the steps in the
    *Understanding GRPC clients* recipe from [Chapter 7](88b98c5e-808c-4f00-80ce-899bf4bc9331.xhtml),
    *Web Clients and APIs*, and you should see identical results to what we see with
    our curls. Both the `http` and `grpc` directories make use of the same internal
    package. We have to be careful in this package to return appropriate GRPC error
    codes and to correctly map those error codes to our HTTP response. In this case,
    we use `codes.NotFound`, which we map to `http.StatusNotFound`. If you have to
    handle more than a few errors, a `switch` statement may make more sense than an
    `if…else` statement.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个配方省略了客户端，但您可以复制[第7章](88b98c5e-808c-4f00-80ce-899bf4bc9331.xhtml)中*理解GRPC客户端*配方中的步骤，并且您应该会看到与我们的curls看到的相同的结果。`http`和`grpc`目录都使用相同的内部包。在这个包中，我们必须小心返回适当的GRPC错误代码，并将这些错误代码正确映射到我们的HTTP响应中。在这种情况下，我们使用`codes.NotFound`，将其映射到`http.StatusNotFound`。如果您需要处理多个错误，使用`switch`语句可能比`if...else`语句更合适。
- en: The other thing you may notice is that GRPC signatures are usually very consistent.
    They take a request and return an optional response and an error. It's possible
    to create a generic handler, `shim`, if your GRPC calls are repetitive enough
    and it also seems like it lends itself well to code generation; you may eventually
    see something like that with a package such as `goadesign/goa`.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还注意到的另一件事是，GRPC签名通常非常一致。它们接受一个请求并返回一个可选的响应和一个错误。如果您的GRPC调用足够重复，并且似乎很适合代码生成，那么可能可以创建一个通用的处理程序`shim`；最终您可能会看到类似`goadesign/goa`这样的包。
