- en: Testing Go Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试Go代码
- en: This chapter will be different from the previous chapters; this chapter will
    focus on testing and testing methodologies. Go provides excellent testing support
    out of the box. However, it can be difficult to understand for developers coming
    from more dynamic languages where monkey patching and mocking are relatively straightforward.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章将与之前的章节不同；这一章将专注于测试和测试方法。Go提供了出色的测试支持。但是，对于来自更动态语言的开发人员来说，理解它可能会有困难，因为猴子补丁和模拟相对来说比较简单。
- en: Go testing encourages a specific structure for your code. In particular, testing
    and mocking interfaces is very straightforward and well supported. Some types
    of code can be more difficult to test. For example, it can be difficult to test
    code that makes use of package-level global variables, places that have not been
    abstracted into interfaces, and structures that have non-exported variables or
    methods. This chapter will share some recipes for testing Go code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Go测试鼓励为您的代码使用特定的结构。特别是，测试和模拟接口非常简单并且得到了很好的支持。某些类型的代码可能更难测试。例如，对于使用包级全局变量的代码、尚未抽象为接口的地方以及具有非导出变量或方法的结构，测试可能更加困难。本章将分享一些测试Go代码的示例。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下示例：
- en: Mocking using the standard library
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用标准库进行模拟
- en: Using the Mockgen package to mock interfaces
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Mockgen包来模拟接口
- en: Using table-driven tests to improve coverage
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用表驱动测试来提高覆盖率
- en: Using third-party testing tools
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用第三方测试工具
- en: Behavior testing using Go
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Go进行行为测试
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In order to proceed with all the recipes in this chapter, configure your environment
    according to these steps:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了继续本章中的所有示例，根据以下步骤配置您的环境：
- en: Download and install Go 1.12.6 or greater on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install).
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://golang.org/doc/install](https://golang.org/doc/install)下载并在您的操作系统上安装Go
    1.12.6或更高版本。
- en: Open a Terminal or console application, then create and navigate to a project
    directory such as `~/projects/go-programming-cookbook`. All code will be run and
    modified from this directory.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端或控制台应用程序，然后创建并导航到一个项目目录，例如`~/projects/go-programming-cookbook`。所有代码将从该目录运行和修改。
- en: 'Clone the latest code into `~/projects/go-programming-cookbook-original`, and
    you have the option to work from that directory rather than typing the examples
    manually:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将最新的代码克隆到`~/projects/go-programming-cookbook-original`，您可以选择从该目录中工作，而不是手动输入示例：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Mocking using the standard library
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用标准库进行模拟
- en: In Go, mocking typically means implementing an interface with a test version
    that allows you to control runtime behavior from tests. It may also refer to mocking
    functions and methods, for which we'll explore another trick in this recipe. This
    trick uses the `Patch` and `Restore` functions defined at [https://play.golang.org/p/oLF1XnRX3C](https://play.golang.org/p/oLF1XnRX3C).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go中，模拟通常意味着使用测试版本实现一个接口，允许您从测试中控制运行时行为。它也可能指模拟函数和方法，对于这一点，我们将在本示例中探讨另一个技巧。这个技巧使用了在[https://play.golang.org/p/oLF1XnRX3C](https://play.golang.org/p/oLF1XnRX3C)定义的`Patch`和`Restore`函数。
- en: In general, it's better to compose code so that you can use interfaces frequently
    and so that the code is in small, testable chunks. Code that contains lots of
    branching conditions or deeply nested logic can be tricky to test and tests tend
    to be more brittle at the end. This is because a developer will need to keep track
    of more mock objects, patches, return values, and states within their tests.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，最好组合代码，以便您可以经常使用接口，并且代码是由小的、可测试的块组成的。包含大量分支条件或深度嵌套逻辑的代码可能很难测试，测试结果往往更加脆弱。这是因为开发人员需要在测试中跟踪更多的模拟对象、补丁、返回值和状态。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行您的应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter9/mocking`, and
    navigate to this directory.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter9/mocking`的新目录，并导航到该目录。
- en: 'Run the following command:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a file called `mock.go` with the following content:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`mock.go`的文件，内容如下：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a file called `patch.go` with the following content:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`patch.go`的文件，内容如下：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a file called `exec.go` with the following content:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`exec.go`的文件，内容如下：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create a file called `mock_test.go` with the following content:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`mock_test.go`的文件，内容如下：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create a file called `exec_test.go` with the following content:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`exec_test.go`的文件，内容如下：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Fill in tests for the remaining functions and go up one directory and run `go
    test`. Ensure that all the tests pass:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为剩余的函数填写测试，并进入上一级目录运行`go test`。确保所有测试都通过：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件可能会被更新，顶级示例目录中现在应该存在`go.sum`文件。'
- en: How it works...
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'This recipe demonstrates how to mock interfaces as well as functions that have
    been declared as variables. There are also certain libraries that can mimic this
    patch/restore directly on declared functions, but they bypass a lot of Go''s type
    safety to accomplish that feat. If you need to patch functions from an external
    package, you may use the following trick:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例演示了如何模拟接口以及已声明为变量的函数。还有一些库可以直接模拟这些已声明函数的补丁/恢复，但它们绕过了很多Go的类型安全来实现这一功能。如果您需要对外部包中的函数进行补丁，可以使用以下技巧：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For this recipe, we start by setting up our test and using table-driven tests.
    There's a lot of literature about this technique, such as [https://github.com/golang/go/wiki/TableDrivenTests](https://github.com/golang/go/wiki/TableDrivenTests),
    and I recommend exploring it further. Once our tests are set up, we choose outputs
    for our mocked functions. In order to mock our interface, our mocked objects define
    closures that can be rewritten at runtime. The patch/restore technique is applied
    to change our global function and restore it after each loop. This is thanks to
    `t.Run`, which sets up a new function for each loop of the test.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们首先设置我们的测试并使用表驱动测试。关于这种技术有很多文献，比如[https://github.com/golang/go/wiki/TableDrivenTests](https://github.com/golang/go/wiki/TableDrivenTests)，我建议进一步探索。一旦我们设置了测试，我们就为我们的模拟函数选择输出。为了模拟我们的接口，我们的模拟对象定义了可以在运行时重写的闭包。补丁/恢复技术被应用于在每次循环后更改我们的全局函数并恢复它。这要归功于`t.Run`，它为测试的每次循环设置了一个新函数。
- en: Using the Mockgen package to mock interfaces
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Mockgen包来模拟接口
- en: The previous example used our custom mock objects. When you're working with
    a lot of interfaces, writing these can become cumbersome and error-prone. This
    is a place where generating code makes a lot of sense. Fortunately, there's a
    package called `github.com/golang/mock/gomock` that provides a generation of mock
    objects and gives us a very useful library to use in conjunction with interface
    testing.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例使用了我们的自定义模拟对象。当您使用大量接口时，编写这些内容可能会变得繁琐且容易出错。这是生成代码非常有意义的地方。幸运的是，有一个名为`github.com/golang/mock/gomock`的包，它提供了模拟对象的生成，并为我们提供了一个非常有用的库，可以与接口测试一起使用。
- en: This recipe will explore some of the functionality of `gomock` and will cover
    trade-offs on where, when, and how to work with and generate mock objects.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例将探讨`gomock`的一些功能，并涵盖在何时、何地以及如何使用和生成模拟对象的权衡。
- en: Getting ready
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Configure your environment according to these steps:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下步骤配置您的环境：
- en: Refer to the *Technical requirements* section at the beginning of this chapter.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请参阅本章开头的*技术要求*部分。
- en: Run the `go get github.com/golang/mock/mockgen` command.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go get github.com/golang/mock/mockgen`命令。
- en: How to do it...
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序的过程：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter9/mockgen` and
    navigate to this directory.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter9/mockgen`的新目录，并导航到该目录。
- en: 'Run the following command:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create a file called `interface.go` with the following content:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`interface.go`的文件，内容如下：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Create a directory named `internal`.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`internal`的目录。
- en: Run the `mockgen -destination internal/mocks.go -package internal github.com/PacktPublishing/Go-Programming-Cookbook-Second-Edition/chapter9/mockgen
    GetSetter` command. This will create a file named `internal/mocks.go`.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`mockgen -destination internal/mocks.go -package internal github.com/PacktPublishing/Go-Programming-Cookbook-Second-Edition/chapter9/mockgen
    GetSetter`命令。这将创建一个名为`internal/mocks.go`的文件。
- en: 'Create a file called `exec.go` with the following content:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`exec.go`的文件，内容如下：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a file called `interface_test.go` with the following content:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`interface_test.go`的文件，内容如下：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a file called `exec_test.go` with the following content:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`exec_test.go`的文件，内容如下：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Fill in tests for the remaining functions, go up one directory, and run `go
    test`. Ensure that all the tests pass.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为剩余的函数填写测试，返回上一级目录，并运行`go test`。确保所有测试都通过。
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件可能会被更新，`go.sum`文件现在应该存在于顶级配方目录中。'
- en: How it works...
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The mock objects that have been generated allow tests to specify what arguments
    are expected, the number of times a function will be called, and what to return.
    They also allow us to set additional artifacts. For example, we could write to
    a channel directly if the original function had a similar workflow. The `interface_test.go`
    file showcases some examples of using mock objects while calling them in line.
    Generally, tests will look more like `exec_test.go`, where we'll want intercept
    interface function calls performed by our actual code and change their behavior
    at test time.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的模拟对象允许测试指定预期的参数、函数将被调用的次数以及返回的内容。它们还允许我们设置额外的工件。例如，如果原始函数具有类似的工作流程，我们可以直接写入通道。`interface_test.go`文件展示了在调用模拟对象时使用一些示例。通常，测试看起来更像`exec_test.go`，在这里我们希望拦截实际代码执行的接口函数调用，并在测试时更改它们的行为。
- en: The `exec_test.go` file also showcases how you might use mocked objects in a
    table-driven test environment. The `Any()` function means that the mocked function
    can be called zero or more times, which is great for cases where the code terminates
    early.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`exec_test.go`文件还展示了如何在表驱动测试环境中使用模拟对象。`Any()`函数表示模拟函数可以被调用零次或多次，这对于代码提前终止的情况非常有用。'
- en: One last trick demonstrated in this recipe is sticking mocked objects into the
    `internal` package. This is useful when you need to mock functions declared in
    packages outside of your own. This allows those methods to be defined in a `non
    _test.go` file, but they won't be visible to users of your libraries as they cannot
    import from the internal package. Generally, it's easier to just stick mocked
    objects into `_test.go` files, using the same package name as the tests you're
    currently writing.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中演示的最后一个技巧是将模拟对象放入`internal`包中。当您需要模拟在您自己之外的包中声明的函数时，这是很有用的。这允许这些方法在`non
    _test.go`文件中定义，但它们对您的库的用户不可见，因为他们无法从内部包导入。通常，最容易的方法是将模拟对象放入与您当前编写的测试相同的包名的`_test.go`文件中。
- en: Using table-driven tests to improve coverage
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用表驱动测试来提高覆盖率
- en: This recipe will demonstrate the process of how to write a table-driven test,
    collect test coverage, and improve it. It will also make use of the `github.com/cweill/gotests`
    package to generate tests. If you've been downloading the test code for other
    chapters, these should look very familiar. Using a combination of this recipe
    and the previous two, you should be able to achieve 100% test coverage in all
    cases with some work.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例将演示如何编写表驱动测试、收集测试覆盖率并改进它的过程。它还将使用`github.com/cweill/gotests`包来生成测试。如果您已经下载了其他章节的测试代码，这些内容应该会很熟悉。通过结合这个示例和前两个示例，您应该能够在所有情况下通过一些工作实现100%的测试覆盖率。
- en: How to do it...
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序的过程：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter9/coverage`, and
    navigate to this directory.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter9/coverage`的新目录，并导航到该目录。
- en: 'Run the following command:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a file called `coverage.go` with the following content:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`coverage.go`的文件，内容如下：
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Run the `gotests -all -w` command.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`gotests -all -w`命令。
- en: 'This will generate a file named `coverage_test.go` with the following content:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将生成一个名为`coverage_test.go`的文件，内容如下：
- en: '[PRE19]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Fill in the `TODO` section with the following:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下内容填写`TODO`部分：
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Run the `go test -cover` command, and you will see the following output:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go test -cover`命令，您将看到以下输出：
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add the following item to the `TODO` section:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到`TODO`部分：
- en: '[PRE22]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Run the `go test -cover` command, and you will see the following output:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go test -cover`命令，您将看到以下输出：
- en: '[PRE23]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Run the following commands:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE24]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Open the `coverage.html` file in a browser to see a graphical coverage report.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开`coverage.html`文件，以查看图形覆盖报告。
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件可能会被更新，顶级示例目录中现在应该存在`go.sum`文件。'
- en: How it works...
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `go test -cover` command comes with a basic Go installation. It can be used
    to collect a coverage report of your Go application. In addition, it has the ability
    to output coverage metrics and an HTML coverage report. This tool is often wrapped
    by other tools, which will be covered in the next recipe. These table-driven test
    styles are covered at [https://github.com/golang/go/wiki/TableDrivenTests](https://github.com/golang/go/wiki/TableDrivenTests)
    and are an excellent way to make clean tests that can handle many cases without
    writing a bunch of extra code.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`go test -cover`命令是基本的Go安装中自带的。它可以用来收集您的Go应用程序的覆盖报告。此外，它还可以输出覆盖度指标和HTML覆盖报告。这个工具通常被其他工具包装，下一个示例将介绍这些内容。这些表驱动测试样式在[https://github.com/golang/go/wiki/TableDrivenTests](https://github.com/golang/go/wiki/TableDrivenTests)中有介绍，是一种优秀的方式，可以处理许多情况而不需要编写大量额外的代码。'
- en: This recipe starts by automatically generating test code, then filling in test
    cases as needed to help create more coverage. The only time this is especially
    tricky is when you have non-variable functions or methods being invoked. For example,
    it can be tricky to make `gob.Encode()` return an error to increase test coverage.
    It can also seem quirky to use the method described in the *Mocking using the
    standard library* recipe of this chapter and use `var gobEncode = gob.Encode`
    to allow patching. For this reason, it can be difficult to advocate for 100% test
    coverage and instead argue for focusing on testing the external interface extensively—that
    is, testing many variations of input and output—and in some cases, as we'll see
    in the *Behavior testing using Go* recipe of this chapter, fuzzing can become
    useful.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例首先通过自动生成测试代码，然后根据需要填写测试用例来帮助创建更多的覆盖。唯一特别棘手的时候是当您调用非变量函数或方法时。例如，让`gob.Encode()`返回一个错误以增加测试覆盖率可能会很棘手。使用本章的*使用标准库进行模拟*示例中描述的方法，并使用`var
    gobEncode = gob.Encode`来允许打补丁，也可能看起来有些古怪。因此，很难主张100%的测试覆盖率，而是主张集中测试外部接口的广泛性——也就是测试输入和输出的许多变化，有时，正如我们将在本章的*使用Go进行行为测试*示例中看到的那样，模糊测试可能会变得有用。
- en: Using third-party testing tools
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用第三方测试工具
- en: 'There are a number of helpful tools for Go testing: tools that make it easier
    to get an idea of code coverage at a per-function level, tools to implement assertions
    to reduce testing lines of code, and test runners. This recipe will cover the `github.com/axw/gocov`
    and `github.com/smartystreets/goconvey` packages in order to demonstrate some
    of this functionality. There are a number of other notable test frameworks depending
    on your needs. The `github.com/smartystreets/goconvey` package supports both assertions
    and is a test runner. It used to be the cleanest way to have labeled subtests
    prior to Go 1.7.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多有用的Go测试工具：可以更轻松地了解每个函数级别的代码覆盖情况的工具，可以实现断言以减少测试代码行数的工具，以及测试运行器。这个示例将介绍`github.com/axw/gocov`和`github.com/smartystreets/goconvey`包，以演示其中一些功能。根据您的需求，还有许多其他值得注意的测试框架。`github.com/smartystreets/goconvey`包支持断言和是一个测试运行器。在Go
    1.7之前，这是最干净的方法来拥有带标签的子测试。
- en: Getting ready
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Configure your environment according to these steps:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下步骤配置您的环境：
- en: Refer to the *Technical requirements* section at the beginning of this chapter.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请参考本章开头的*技术要求*部分。
- en: Run the `go get github.com/axw/gocov/gocov` command.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go get github.com/axw/gocov/gocov`命令。
- en: Run the `go get github.com/smartystreets/goconvey` command.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go get github.com/smartystreets/goconvey`命令。
- en: How to do it...
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序的过程：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter9/tools`, and
    navigate to this directory.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter9/tools`的新目录，并导航到该目录。
- en: 'Run the following command:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE25]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE26]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create a file called `funcs.go` with the following content:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`funcs.go`的文件，内容如下：
- en: '[PRE27]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create a file called `structs.go` with the following content:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`structs.go`的文件，内容如下：
- en: '[PRE28]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Create a file called `funcs_test.go` with the following content:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`funcs_test.go`的文件，内容如下：
- en: '[PRE29]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create a file called `structs_test.go` with the following content:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`structs_test.go`的文件，内容如下：
- en: '[PRE30]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Run the `gocov test | gocov report` command, and you will see the following
    output:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`gocov test | gocov report`命令，你会看到以下输出：
- en: '[PRE31]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Run the `goconvey` command, and it will open a browser that should look like
    this:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`goconvey`命令，它将打开一个看起来像这样的浏览器：
- en: '![](img/c786af09-2ea5-4497-931c-aa087f5fa85d.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c786af09-2ea5-4497-931c-aa087f5fa85d.png)'
- en: Ensure that all the tests pass.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保所有测试都通过。
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件可能已更新，`go.sum`文件现在应该存在于顶级配方目录中。'
- en: How it works...
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'This recipe demonstrates how to wire the `goconvey` command into your tests.
    The `Convey` keyword basically replaces `t.Run` and adds additional labels in
    the `goconvey` web UI, but it behaves slightly differently. If you have nested
    `Convey` blocks, they''re always re-executed in order, as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程演示了如何将`goconvey`命令与你的测试连接起来。`Convey`关键字基本上取代了`t.Run`，并在`goconvey`Web UI中添加了额外的标签，但它的行为略有不同。如果你有嵌套的`Convey`块，它们总是按顺序重新执行，如下所示：
- en: '[PRE32]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The preceding code, using the `goconvey` command, will print `1`. If we had
    used the built-in `t.Run` instead, it would print `2` instead. In other words,
    Go `t.Run` tests are run sequentially and are never repeated. This behavior can
    be useful for putting the setup code into outer `Convey` blocks, but it's important
    to remember this distinction if you have to work with both.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`goconvey`命令，上面的代码将打印`1`。如果我们使用内置的`t.Run`，它将打印`2`。换句话说，Go的`t.Run`测试是顺序运行的，永远不会重复。这种行为对于将设置代码放入外部`Convey`块非常有用，但如果你必须同时使用，记住这个区别是很重要的。
- en: When using `Convey` assertions, there are check marks on successes in the web
    UI and in additional stats. It can also reduce the size of checks to a single
    line, and it's even possible to create custom assertions.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`Convey`断言时，在Web UI和额外的统计信息中会有成功的勾号。它还可以将检查的大小减少到一行，甚至可以创建自定义断言。
- en: If you leave the `goconvey` web interface up and turn on notifications, as you
    save your code, tests will automatically be run and you'll receive notifications
    on any increase or decrease in coverage, as well as when your build fails.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你保持`goconvey`Web界面打开并打开通知，当你保存代码时，测试将自动运行，并且你将收到有关覆盖率增加或减少以及构建失败的通知。
- en: All three tools assertions, the test runner, and the web UI can be used independently
    or together.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 所有三个工具断言、测试运行器和Web UI都可以独立或一起使用。
- en: The `gocov` tool can be useful when working toward higher test coverage. It
    can quickly identify functions that are lacking in coverage and help you to dive deep
    into your coverage report. In addition, `gocov` can be used to generate an alternate
    HTML report that is shipped with the Go code by using the `github.com/matm/gocov-html`
    package.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`gocov`工具在提高测试覆盖率时非常有用。它可以快速识别缺乏覆盖的函数，并帮助你深入了解你的覆盖报告。此外，`gocov`还可以用来生成一个随Go代码一起提供的替代HTML报告，使用`github.com/matm/gocov-html`包。'
- en: Behavior testing using Go
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Go进行行为测试
- en: Behavior testing or integration testing is a good method of implementing end-to-end
    black box testing. One popular framework for this type of testing is Cucumber ([https://cucumber.io/](https://cucumber.io/)),
    which uses the Gherkin language to describe the steps to a test in English, and
    then implements those steps in code. Go has a Cucumber library as well (`github.com/DATA-DOG/godog`).
    This recipe will use the `godog` package to write behavior tests.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 行为测试或集成测试是实现端到端黑盒测试的一种好方法。这种类型测试的一个流行框架是Cucumber（[https://cucumber.io/](https://cucumber.io/)），它使用Gherkin语言来描述测试的步骤，然后在代码中实现这些步骤。Go也有一个Cucumber库（`github.com/DATA-DOG/godog`）。本教程将使用`godog`包来编写行为测试。
- en: Getting ready
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Configure your environment according to these steps:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下步骤配置你的环境：
- en: Refer to the *Technical requirements* section at the beginning of this chapter.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请参考本章开头的*技术要求*部分。
- en: Run the `go get github.com/DATA-DOG/godog/cmd/godog` command.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go get github.com/DATA-DOG/godog/cmd/godog`命令。
- en: How to do it...
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter9/bdd`, and
    navigate to this directory.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter9/bdd`的新目录，并导航到该目录。
- en: 'Run the following command:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE33]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE34]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create a file called `handler.go` with the following content:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`handler.go`的文件，内容如下：
- en: '[PRE35]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Create a new directory called `features`, and create a file called `features/handler.go`
    with the following content:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`features`的新目录，并创建一个名为`features/handler.go`的文件，内容如下：
- en: '[PRE36]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Run the `godog` command, and you will see the following output:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`godog`命令，你会看到以下输出：
- en: '[PRE37]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This should give you a skeleton to implement the tests that we wrote in our
    feature file; copy those into `handler_test.go` and implement the first two steps:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将为你提供一个骨架来实现我们在特性文件中编写的测试；将它们复制到`handler_test.go`中并实现前两个步骤：
- en: '[PRE38]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Run the `godog` command, and you will see the following output:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`godog`命令，你会看到以下输出：
- en: '[PRE39]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Fill in the remaining two steps:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写剩下的两个步骤：
- en: '[PRE40]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Run the `godog` command, and you will see the following output:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`godog`命令，你会看到以下输出：
- en: '[PRE41]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: How it works...
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Cucumber frameworks work excellently for pair programming, end-to-end testing,
    and any sort of testing that is best communicated with written instructions and
    is understandable for non-technical people. Once a step has been implemented,
    it's generally possible to reuse it wherever it's needed. If you want to test
    integrations between services, tests can be written to use actual HTTP clients
    if you first ensure that your environment is set up to receive HTTP connections.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Cucumber框架非常适用于配对编程、端到端测试以及任何需要通过书面说明进行最佳沟通并且非技术人员可以理解的测试。一旦一个步骤被实现，通常可以在需要的任何地方重复使用它。如果您想要测试服务之间的集成，可以编写测试来使用实际的HTTP客户端，只要首先确保您的环境已设置为接收HTTP连接。
- en: The datadog implementation of **behavior-driven development** (**BDD**) is lacking
    a few features that you might expect if you've used other Cucumber frameworks,
    including lack of examples, passing a context between functions, and a number
    of other keywords. However, it's a good start, and by using a few tricks in this
    recipe, such as globals for tracking state (and ensuring that you clean up those
    globals between scenarios), it's possible to build a fairly robust set of tests.
    The datadog testing package also uses a third-party test runner, so it's impossible
    to put it together with packages such as `gocov` or `go test -cover`.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Datadog对**行为驱动开发**（BDD）的实现缺少一些功能，如果您曾经使用过其他Cucumber框架，可能会期望这些功能，包括缺乏示例、在函数之间传递上下文，以及许多其他关键字。然而，这是一个很好的开始，通过在这个配方中使用一些技巧，比如使用全局变量来跟踪状态（并确保在场景之间清理这些全局变量），可以构建一个相当健壮的测试集。Datadog测试包还使用了第三方测试运行器，因此无法与诸如`gocov`或`go
    test -cover`等包一起使用。
