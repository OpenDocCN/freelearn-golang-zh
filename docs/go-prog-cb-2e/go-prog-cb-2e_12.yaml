- en: Reactive Programming and Data Streams
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应式编程和数据流
- en: In this chapter, we will discuss reactive programming design patterns in Go.
    Reactive programming is a programming concept that focuses on data streams and
    the propagation of change. Technologies such as Kafka allow you to quickly produce
    or consume a stream of data. As a result, these technologies are a natural fit
    for one another. In the *Connecting Kafka to Goflow* recipe, we'll explore combining
    a `kafka` message queue with `goflow` to show a practical example of using these
    technologies. This chapter will also explore various ways to connect with Kafka
    and use it to process messages. Lastly, this chapter will demonstrate how to create
    a basic `graphql` server in Go.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论Go中的响应式编程设计模式。响应式编程是一种专注于数据流和变化传播的编程概念。诸如Kafka之类的技术允许您快速生成或消费数据流。因此，这些技术彼此之间是自然契合的。在*将Kafka连接到Goflow*配方中，我们将探讨将`kafka`消息队列与`goflow`结合起来，以展示使用这些技术的实际示例。本章还将探讨连接到Kafka并使用它来处理消息的各种方法。最后，本章将演示如何在Go中创建一个基本的`graphql`服务器。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下配方：
- en: Using Goflow for data flow programming
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Goflow进行数据流编程
- en: Using Kafka with Sarama
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Sarama与Kafka
- en: Using async producers with Kafka
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用异步生产者与Kafka
- en: Connecting Kafka to Goflow
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Kafka连接到Goflow
- en: Writing a GraphQL server in Go
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Go编写GraphQL服务器
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In order to proceed with all the recipes in this chapter, configure your environment
    according to these steps:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了继续本章中的所有配方，根据以下步骤配置您的环境：
- en: Download and install Go 1.12.6 or greater on your operating system from [https://golang.org/doc/install.](https://golang.org/doc/install)
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的操作系统上下载并安装Go 1.12.6或更高版本，网址为[https://golang.org/doc/install.](https://golang.org/doc/install)
- en: Open a Terminal or console application, and create and navigate to a project
    directory such as `~/projects/go-programming-cookbook`. All code will be run and
    modified from this directory.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端或控制台应用程序，并创建并导航到一个名为`~/projects/go-programming-cookbook`的项目目录。所有代码都将从这个目录运行和修改。
- en: 'Clone the latest code into `~/projects/go-programming-cookbook-original` and
    optionally work from that directory, rather than typing the examples manually:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将最新的代码克隆到`~/projects/go-programming-cookbook-original`，或者选择从该目录工作，而不是手动输入示例：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Using Goflow for data flow programming
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Goflow进行数据流编程
- en: The `github.com/trustmaster/goflow` package is useful for creating data flow-based
    applications. It tries to abstract the concepts so that you can write components
    and connect them together using a custom network. This recipe will recreate the
    application discussed in [Chapter 9](1f759ff3-1337-4dbc-a4c4-cb513eb5041f.xhtml),
    *Testing Go Code*, but will do so using the `goflow` package.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`github.com/trustmaster/goflow`包对于创建基于数据流的应用程序非常有用。它试图抽象概念，以便您可以编写组件并使用自定义网络将它们连接在一起。这个配方将重新创建[第9章](1f759ff3-1337-4dbc-a4c4-cb513eb5041f.xhtml)中讨论的应用程序，*测试Go代码*，但将使用`goflow`包来实现。'
- en: How to do it...
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter12/goflow` and
    navigate to this directory.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter12/goflow`的新目录，并导航到该目录。
- en: 'Run the following command:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Copy the tests from `~/projects/go-programming-cookbook-original/chapter12/goflow`,
    or use this as an exercise to write some of your own code!
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter12/goflow`复制测试，或者使用这个作为练习来编写一些您自己的代码！
- en: 'Create a file called `components.go` with the following content:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`components.go`的文件，内容如下：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a file called `network.go` with the following content:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`network.go`的文件，内容如下：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录，并导航到该目录。
- en: 'Create a file named `main.go` with the following content:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Run `go run main.go`.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You may also run the following commands:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您也可以运行以下命令：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You should now see the following output:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该看到以下输出：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `go.mod` file may be updated, and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件可能会更新，顶级配方目录中现在应该存在`go.sum`文件。'
- en: If you have copied or written your own tests, go up one directory and run the `go
    test` command. Ensure that all the tests pass.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您已经复制或编写了自己的测试，请返回上一级目录并运行`go test`命令。确保所有测试都通过。
- en: How it works...
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `github.com/trustmaster/goflow` package works by defining a network/graph,
    registering some components, and then wiring them together. This can feel a bit
    error-prone since components are described using strings, but usually this will
    fail early in runtime until the application is set up and functioning correctly.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`github.com/trustmaster/goflow`包的工作方式是定义一个网络/图，注册一些组件，然后将它们连接在一起。这可能会感觉有点容易出错，因为组件是用字符串描述的，但通常在运行时会在应用程序设置和功能正确运行之前就会出现错误。'
- en: In this recipe, we set up two components, one that Base64-encodes an incoming
    string, and one that prints anything passed to it. We connect it to an in channel
    that is initialized in `main.go`, and anything passed onto that channel will flow
    through our pipeline.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们设置了两个组件，一个是对传入的字符串进行Base64编码，另一个是打印传递给它的任何内容。我们将它连接到在`main.go`中初始化的输入通道，任何传递到该通道的内容都将通过我们的管道流动。
- en: A lot of the emphasis of this approach is on ignoring the internals of what's
    going on. We treat everything like a connected black box and let `goflow` do the
    rest. You can see, in this recipe, how small the code is to accomplish this pipeline
    of tasks and that we have fewer knobs to control the number of workers, among
    other things.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的重点很大程度上在于忽略正在进行的内部工作。我们把一切都当作连接的黑匣子，并让`goflow`来处理剩下的事情。您可以看到，在这个配方中，完成这个任务流水线的代码是多么简洁，而且我们有更少的旋钮来控制工作人员的数量，等等。
- en: Using Kafka with Sarama
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Sarama与Kafka
- en: Kafka is a popular distributed message queue with a lot of advanced functions
    for building distributed systems. This recipe will show how to write to a Kafka
    topic using a synchronous producer, and how to consume the same topic using a
    partition consumer. This recipe will not explore different configurations of Kafka,
    as that is a much wider topic beyond the scope of this book, but I suggest beginning
    at [https://kafka.apache.org/intro](https://kafka.apache.org/intro).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Kafka是一个流行的分布式消息队列，具有许多用于构建分布式系统的高级功能。本配方将展示如何使用同步生产者向Kafka主题写入，并如何使用分区消费者消费相同的主题。本配方不会探讨Kafka的不同配置，因为这是一个超出本书范围的更广泛的主题，但我建议从[https://kafka.apache.org/intro](https://kafka.apache.org/intro)开始。
- en: Getting ready
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做好准备
- en: 'Configure your environment according to these steps:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下步骤配置您的环境：
- en: Refer to the *Technical requirements* section at the beginning of this chapter.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 参考本章开头的*技术要求*部分。
- en: Install Kafka using the steps mentioned at [https://www.tutorialspoint.com/apache_kafka/apache_kafka_installation_steps.htm](https://www.tutorialspoint.com/apache_kafka/apache_kafka_installation_steps.htm).
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照[https://www.tutorialspoint.com/apache_kafka/apache_kafka_installation_steps.htm](https://www.tutorialspoint.com/apache_kafka/apache_kafka_installation_steps.htm)中提到的步骤安装Kafka。
- en: Alternatively, you can also access [https://github.com/spotify/docker-kafka](https://github.com/spotify/docker-kafka).
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或者，您也可以访问[https://github.com/spotify/docker-kafka](https://github.com/spotify/docker-kafka)。
- en: How to do it...
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行您的应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter12/synckafka` and
    navigate to this directory.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter12/synckafka`的新目录，并导航到该目录。
- en: 'Run this command:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行此命令：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Copy the tests from `~/projects/go-programming-cookbook-original/chapter12/synckafka`,
    or use this as an exercise to write some of your own code!
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter12/synckafka`复制测试，或者使用这个作为练习来编写一些您自己的代码！
- en: Ensure that Kafka is up and running on `localhost:9092`.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保Kafka在`localhost:9092`上运行正常。
- en: 'Create a file called `main.go` in a directory named `consumer` with the following
    content:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名为`consumer`的目录中创建一个名为`main.go`的文件，其中包含以下内容：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Create a file called `main.go` in a directory named `producer` with the following
    content:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名为`producer`的目录中创建一个名为`main.go`的文件，其中包含以下内容：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Navigate up a directory.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到上一级目录。
- en: Run `go run ./consumer`.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run ./consumer`。
- en: In a separate Terminal from the same directory, run `go run ./producer`.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与同一目录的另一个终端中运行`go run ./producer`。
- en: 'In the producer Terminal, you should see the following:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在生产者终端中，您应该看到以下内容：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the consumer Terminal, you should see this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在消费者终端中，您应该看到以下内容：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件可能已更新，顶级配方目录中现在应该存在`go.sum`文件。'
- en: If you have copied or written your own tests, go up one directory and run `go
    test`. Ensure all tests pass.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您已经复制或编写了自己的测试，请返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何运作...
- en: This recipe demonstrates passing simple messages via Kafka. More complex methods
    should use a serialization format such as `json`, `gob`, `protobuf`, or others.
    The producer can send a message to Kafka synchronously through `sendMessage`.
    This does not handle cases well where the Kafka cluster is down, and may result
    in a hung process for these cases. This is important to consider for applications
    such as web handlers, as it may result in timeouts and hard dependencies on the
    Kafka cluster.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 该配方演示了通过Kafka传递简单消息。更复杂的方法应该使用诸如`json`、`gob`、`protobuf`或其他的序列化格式。生产者可以通过`sendMessage`同步地向Kafka发送消息。这在Kafka集群宕机的情况下处理得不好，并且可能导致这些情况下的进程挂起。这对于诸如Web处理程序之类的应用程序来说很重要，因为它可能导致超时并且对Kafka集群有硬性依赖。
- en: Assuming the message queues correctly, our consumer will observe the Kafka stream
    and do something with the results. Previous recipes in this chapter might make
    use of this stream to do some additional processing.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 假设消息队列正确，我们的消费者将观察Kafka流并对结果进行处理。本章中的先前配方可能利用此流来进行一些额外的处理。
- en: Using async producers with Kafka
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Kafka的异步生产者
- en: It's often useful not to wait for a Kafka producer to complete before moving
    on to the next task. In cases like this, you can use an asynchronous producer.
    These producers take Sarama messages on a channel and have methods to return a
    success/error channel that can be checked separately.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续下一个任务之前，等待Kafka生产者完成通常是没有意义的。在这种情况下，您可以使用异步生产者。这些生产者在通道上接收Sarama消息，并具有返回成功/错误通道的方法，可以单独检查。
- en: In this recipe, we'll create a Go routine that will handle success and failure
    messages while we allow a handler to queue messages to send, regardless of the
    result.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将创建一个Go例程，用于处理成功和失败的消息，同时允许处理程序排队发送消息，而不管结果如何。
- en: Getting ready
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做好准备
- en: Refer to the *Getting ready* section of the *Using Kafka with Sarama* recipe.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 参考*Sarama使用Kafka*配方中的*做好准备*部分。
- en: How to do it...
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行您的应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter12/asynckafka` and
    navigate to this directory.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter12/asynckafka`的新目录，并导航到该目录。
- en: 'Run this command:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行此命令：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Copy the tests from `~/projects/go-programming-cookbook-original/chapter12/asynckafka`,
    or use this as an exercise to write some of your own code!
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter12/asynckafka`复制测试，或者使用这个作为练习来编写一些您自己的代码！
- en: Ensure that Kafka is up and running on `localhost:9092`.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保Kafka在`localhost:9092`上运行正常。
- en: Copy the consumer directory from the previous recipe.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从上一个配方中复制consumer目录。
- en: Create a directory named `producer` and navigate to it.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`producer`的目录并导航到该目录。
- en: 'Create a file called `producer.go` with the following content:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`producer.go`的文件，其中包含以下内容：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create a file called `handler.go` with the following content:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`handler.go`的文件，其中包含以下内容：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a file called `main.go` with the following content:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，其中包含以下内容：
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Navigate up a directory.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到上一级目录。
- en: Run `go run ./consumer`.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run ./consumer`。
- en: In a separate Terminal from the same directory, run `go run ./producer`.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与同一目录的另一个终端中运行`go run ./producer`。
- en: 'In a third Terminal, run the following commands:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第三个终端中，运行以下命令：
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the producer Terminal, you should see the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产者终端中，您应该看到以下内容：
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the consumer Terminal, you should see this:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在消费者终端中，您应该看到这个：
- en: '[PRE21]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `go.mod` file may be updated, and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件可能会被更新，`go.sum`文件现在应该存在于顶级食谱目录中。'
- en: If you have copied or written your own tests, go up one directory and run `go
    test`. Ensure that all tests pass.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您已经复制或编写了自己的测试，请返回到上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Our modifications in this chapter were all made to the producer. This time,
    we created a separate Go routine to handle successes and errors. If these are
    left unhandled, your application will deadlock. Next, we attached our producer
    to a handler and we emit messages on it whenever a message is received, via a
    `GET` call to the handler.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中的修改都是针对生产者的。这一次，我们创建了一个单独的Go例程来处理成功和错误。如果这些问题没有得到处理，您的应用程序将陷入死锁。接下来，我们将我们的生产者附加到一个处理程序上，并在收到消息时通过对处理程序的`GET`调用发出消息。
- en: The handler will immediately return success upon sending the message, regardless
    of its response. If this is not acceptable, a synchronous approach should be used
    instead. In our case, we're okay with later processing successes and errors separately.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 处理程序在发送消息后将立即返回成功，而不管其响应如何。如果这是不可接受的，应该改用同步方法。在我们的情况下，我们可以接受稍后分别处理成功和错误。
- en: Lastly, we `curl` our endpoint with a few different messages, and you can see
    them flow from the handler to where they're eventually printed by the Kafka consumer
    we wrote in the previous section.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们用几条不同的消息`curl`我们的端点，您可以看到它们从处理程序流向我们在上一节中编写的Kafka消费者最终打印的地方。
- en: Connecting Kafka to Goflow
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Kafka连接到Goflow
- en: This recipe will combine a Kafka consumer with a Goflow pipeline. As our consumer
    receives messages from Kafka, it will run `strings.ToUpper()` on them and then
    print the results. These naturally pair, as Goflow is designed to operate on an
    incoming stream, which is exactly what Kafka provides us.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱将把Kafka消费者与Goflow管道结合起来。当我们的消费者从Kafka接收消息时，它将对它们运行`strings.ToUpper()`，然后打印结果。这些自然配对，因为Goflow旨在操作传入流，这正是Kafka提供给我们的。
- en: Getting ready
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Refer to the *Getting ready* section of the *Using Kafka with Sarama* recipe*.*
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 参考*使用Sarama与Kafka*食谱*的*准备就绪*部分。
- en: How to do it...
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序的过程：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter12/kafkaflow` and
    navigate to this directory.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter12/kafkaflow`的新目录，并导航到该目录。
- en: 'Run this command:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE23]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Copy the tests from `~/projects/go-programming-cookbook-original/chapter12/kafkaflow`,
    or use this as an exercise to write some of your own code!
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter12/kafkaflow`复制测试，或者将其用作编写一些自己代码的练习！
- en: Ensure that Kafka is up and running on `localhost:9092`.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保Kafka在`localhost:9092`上运行。
- en: 'Create a file called `components.go` with the following content:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`components.go`的文件，其中包含以下内容：
- en: '[PRE24]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create a file called `network.go` with the following content:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`network.go`的文件，其中包含以下内容：
- en: '[PRE25]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create a file called `main.go` in a directory named `consumer` with the following
    content:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名为`consumer`的目录中创建一个名为`main.go`的文件，其中包含以下内容：
- en: '[PRE26]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Copy the `producer` directory from the *Using Kafka with Saram* recipe.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从*使用Sarama与Kafka*食谱中复制`producer`目录。
- en: Run `go run ./consumer`.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run ./consumer`。
- en: In a separate Terminal from the same directory, run `go run ./producer`.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与同一目录的另一个终端中运行`go run ./producer`。
- en: 'In the producer Terminal, you should now see the following:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在生产者终端中，您现在应该看到以下内容：
- en: '[PRE27]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the consumer Terminal, you should see the following:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在消费者终端中，您应该看到以下内容：
- en: '[PRE28]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `go.mod` file may be updated, and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件可能会被更新，`go.sum`文件现在应该存在于顶级食谱目录中。'
- en: If you have copied or written your own tests, go up one directory and run `go
    test`. Ensure that all the tests pass.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您已经复制或编写了自己的测试，请返回到上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe combines ideas from previous recipes in this chapter. As in previous
    recipes, we set up a Kafka consumer and producer. This recipe uses the synchronous
    producer from the *Using Kafka with Sarama* recipe, but could have also used an
    asynchronous producer instead. Once a message is received, we enqueue it on an
    in channel just as we did in the *Goflow for dataflow programming* recipe*.* We
    modify the components from this recipe to convert our incoming string to uppercase,
    rather than Base64-encoding it. We reuse the print components and the resultant
    network configuration is similar.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱结合了本章中以前食谱的想法。与以前的食谱一样，我们设置了Kafka消费者和生产者。这个食谱使用了*使用Sarama与Kafka*食谱中的同步生产者，但也可以使用异步生产者。一旦收到消息，我们就像在*数据流编程的Goflow*食谱中一样，在输入通道上排队。我们修改了这个食谱中的组件，将我们的传入字符串转换为大写，而不是Base64编码。我们重用打印组件，结果网络配置类似。
- en: The end result is that all messages received through the Kafka consumer are
    transported into our flow-based work pipeline to be operated on. This allows us
    to instrument our pipeline components to be modular and reusable, and we can use
    the same component multiple times in different configurations. Similarly, we'll
    receive traffic from any producer that writes to Kafka, so we can multiplex producers
    into a single data stream.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果是，通过Kafka消费者接收的所有消息都被传输到我们基于流的工作流中进行操作。这使我们能够将我们的工作流组件进行模块化和可重用，并且我们可以在不同的配置中多次使用相同的组件。同样，我们将从任何写入Kafka的生产者接收流量，因此我们可以将生产者多路复用成单个数据流。
- en: Writing a GraphQL server in Go
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Go中编写GraphQL服务器
- en: GraphQL is an alternative to REST, created by Facebook ([http://graphql.org/](http://graphql.org/)).
    This technology allows a server to implement and publish a schema, and the clients
    then can ask for the information they need, rather than understanding and making
    use of various API endpoints.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL是由Facebook创建的REST的替代品（[http://graphql.org/](http://graphql.org/)）。这项技术允许服务器实现和发布模式，然后客户端可以请求他们需要的信息，而不是理解和利用各种API端点。
- en: For this recipe, we'll create a `Graphql` schema that represents a deck of playing
    cards. We'll expose one resource card, which can be filtered by suit and value.
    Alternatively, this schema can return all the cards in the deck if no arguments
    are specified.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们将创建一个代表一副扑克牌的`Graphql`模式。我们将公开一个名为card的资源，可以按花色和值进行过滤。或者，如果未指定参数，此模式可以返回牌组中的所有牌。
- en: How to do it...
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter12/graphql` and
    navigate to this directory.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter12/graphql`的新目录，并导航到该目录。
- en: 'Run this command:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行此命令：
- en: '[PRE29]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE30]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Copy the tests from `~/projects/go-programming-cookbook-original/chapter12/graphql`,
    or use this as an exercise to write some of your own code!
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`~/projects/go-programming-cookbook-original/chapter12/graphql`复制测试，或者将其用作练习来编写自己的代码！
- en: Create and navigate to the `cards` directory.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并导航到`cards`目录。
- en: 'Create a file called `card.go` with the following content:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`card.go`的文件，其中包含以下内容：
- en: '[PRE31]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create a file called `type.go` with the following content:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`type.go`的文件，其中包含以下内容：
- en: '[PRE32]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Create a file called `resolve.go` with the following content:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`resolve.go`的文件，其中包含以下内容：
- en: '[PRE33]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Create a file called `schema.go` with the following content:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`schema.go`的文件，其中包含以下内容：
- en: '[PRE34]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Navigate back to the `graphql` directory.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航回`graphql`目录。
- en: Create a new directory named `example` and navigate to it.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录并导航到该目录。
- en: 'Create a file named `main.go` with the following content:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，其中包含以下内容：
- en: '[PRE35]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Run `go run main.go`.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You may also run the following command:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以运行以下命令：
- en: '[PRE36]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You should see the following output:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE37]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Test some additional queries, such as the following:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试一些额外的查询，例如以下内容：
- en: '`cards(suit: "Spades")`'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cards(suit: "Spades")`'
- en: '`cards(value: "3", suit:"Diamonds")`'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cards(value: "3", suit:"Diamonds")`'
- en: The `go.mod` file may be updated, and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件可能已更新，并且`go.sum`文件现在应该存在于顶级示例目录中。'
- en: If you have copied or written your own tests, go up one directory and run `go
    test`. Ensure that all the tests pass.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您已经复制或编写了自己的测试，请返回上一个目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `cards.go` file defines a `card` object and initializes the base deck in
    a global variable called `cards`. This state could also be held in long-term storage,
    such as a database. We then define `CardType` in `types.go`, which allows `graphql`
    to resolve card objects to responses. Next, we jump into `resolve.go`, where we
    define how to filter cards by value and type. This `Resolve` function will be
    used by the final schema, which is defined in `schema.go`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`cards.go`文件定义了一个`card`对象，并在名为`cards`的全局变量中初始化了基本牌组。这种状态也可以保存在长期存储中，例如数据库中。然后，我们在`types.go`中定义了`CardType`，它允许`graphql`将卡对象解析为响应。接下来，我们进入`resolve.go`，在那里我们定义了如何按值和类型过滤卡片。这个`Resolve`函数将被最终的模式使用，该模式在`schema.go`中定义。'
- en: For example, you would modify the `Resolve` function in this recipe in order
    to retrieve data from a database. Lastly, we load the schema and run a query against
    it. It's a small modification to mount our schema onto a REST endpoint, but for
    brevity, this recipe just runs a hardcoded query. For more information about `GraphQL`
    queries, visit [http://graphql.org/learn/queries/](http://graphql.org/learn/queries/).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以修改此示例中的`Resolve`函数，以从数据库中检索数据。最后，我们加载模式并对其运行查询。这是一个小修改，将我们的模式挂载到REST端点，但为了简洁起见，此示例只运行一个硬编码查询。有关`GraphQL`查询的更多信息，请访问[http://graphql.org/learn/queries/](http://graphql.org/learn/queries/)。
