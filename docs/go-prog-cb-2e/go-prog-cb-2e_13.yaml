- en: Serverless Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器编程
- en: This chapter will focus on serverless architectures and using them with the
    Go language. Serverless architectures are one where the developer does not manage
    the backend server. This includes services such as Amazon Lambda, Google App Engine
    and Firebase. These services allow you to quickly deploy applications and store
    data on the web.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将重点介绍无服务器架构以及如何在Go语言中使用它们。无服务器架构是指开发人员不管理后端服务器的架构。这包括Amazon Lambda、Google
    App Engine和Firebase等服务。这些服务允许您快速部署应用程序并在网络上存储数据。
- en: All of the recipes in this chapter deal with third-party services that bill
    for use; ensure that you clean up when you're done using them. Otherwise, think
    of these recipes as kick-starters for spinning up larger applications on these
    platforms.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有示例都涉及到按使用计费的第三方服务；确保在使用完毕后进行清理。否则，可以将这些示例视为在这些平台上启动更大型应用程序的起步器。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Go programming on Lambda with Apex
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Apex在Lambda上进行Go编程
- en: Apex serverless logging and metrics
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apex无服务器日志和指标
- en: Google App Engine with Go
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Go的Google App Engine
- en: Working with Firebase using `firebase.google.com/go`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`firebase.google.com/go`与Firebase一起工作
- en: Go programming on Lambda with Apex
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Apex在Lambda上进行Go编程
- en: Apex is a tool for building, deploying, and managing AWS Lambda functions. It
    used to provide a Go `shim` for managing Lambda functions in code, but this is
    now done using the native AWS library ([https://github.com/aws/aws-lambda-go](https://github.com/aws/aws-lambda-go)).
    This recipe will explore creating Go Lambda functions and deploying them with
    Apex.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Apex是一个用于构建、部署和管理AWS Lambda函数的工具。它曾经提供了一个用于在代码中管理Lambda函数的Go `shim`，但现在可以使用原生的AWS库([https://github.com/aws/aws-lambda-go](https://github.com/aws/aws-lambda-go))来完成这个任务。本教程将探讨如何创建Go
    Lambda函数并使用Apex部署它们。
- en: Getting ready
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Configure your environment according to these steps:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下步骤配置您的环境：
- en: Download and install Go 1.12.6 or greater on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install).
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://golang.org/doc/install](https://golang.org/doc/install)下载并安装Go 1.12.6或更高版本到您的操作系统上。
- en: Install Apex from [http://apex.run/#installation](http://apex.run/#installation).
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://apex.run/#installation](http://apex.run/#installation)安装Apex。
- en: Open Terminal or console application and create and navigate to a project directory
    such as `~/projects/go-programming-cookbook`. All the code we will cover in this
    recipe will be run and modified from this directory.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端或控制台应用程序，并创建并导航到一个项目目录，例如`~/projects/go-programming-cookbook`。本教程中涵盖的所有代码都将在此目录中运行和修改。
- en: 'Clone the latest code into `~/projects/go-programming-cookbook-original`. Here,
    you have the option to work from that directory rather than typing in the examples
    manually:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将最新的代码克隆到`~/projects/go-programming-cookbook-original`。在这里，您可以选择从该目录中工作，而不是手动输入示例：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行您的应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter13/lambda` and
    navigate to it.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter13/lambda`的新目录，并导航到该目录。
- en: 'Run the following command:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should see a file called `go.mod` that contains the following content:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Create an Amazon account and an IAM role that can edit Lambda functions, which
    can be done from [https://aws.amazon.com/lambda/](https://aws.amazon.com/lambda/).
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个Amazon账户和一个可以编辑Lambda函数的IAM角色，可以从[https://aws.amazon.com/lambda/](https://aws.amazon.com/lambda/)完成。
- en: 'Create a file called `~/.aws/credentials` with the following content, copying
    your credentials from what you set up in the Amazon console:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`~/.aws/credentials`的文件，内容如下，将您在Amazon控制台中设置的凭据复制进去：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create an environment variable to hold your desired region:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个环境变量来保存您想要的区域：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run the `apex init` command and follow the onscreen instructions:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`apex init`命令并按照屏幕上的说明进行操作：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Remove the `lambda/functions/hello` directory.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`lambda/functions/hello`目录。
- en: 'Create a new `lambda/functions/greeter1/main.go` file with the following content:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`lambda/functions/greeter1/main.go`文件，内容如下：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create a new `lambda/functions/greeter/main.go` file with the following content:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`lambda/functions/greeter/main.go`文件，内容如下：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Deploy them:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署它们：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Invoke the newly deployed functions:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用新部署的函数：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Take a look at the logs:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看日志：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Clean up the deployed services:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清理已部署的服务：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works...
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: AWS Lambda makes it easy to run functions on demand without maintaining a server.
    Apex provides facilities for deploying, versioning, and testing functions as you
    ship them to Lambda.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda使得无需维护服务器即可按需运行函数变得容易。Apex提供了部署、版本控制和测试函数的功能，使您可以将它们发送到Lambda。
- en: 'The Go library ([https://github.com/aws/aws-lambda-go](https://github.com/aws/aws-lambda-go))
    provides native Go compilation in Lambda and allows us to deploy Go code as Lambda
    functions. This is accomplished by defining a handler, processing incoming request
    payloads, and returning a response. Currently, the functions you define must follow
    these rules:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Go库([https://github.com/aws/aws-lambda-go](https://github.com/aws/aws-lambda-go))在Lambda中提供了原生的Go编译，并允许我们将Go代码部署为Lambda函数。这是通过定义一个处理程序、处理传入的请求有效负载并返回响应来实现的。目前，您定义的函数必须遵循这些规则：
- en: The handler must be a function.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理程序必须是一个函数。
- en: The handler may take between zero and two arguments.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理程序可能需要零到两个参数。
- en: If there are two arguments, the first argument must satisfy the `context.Context`
    interface.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有两个参数，则第一个参数必须满足`context.Context`接口。
- en: The handler may return between zero and two arguments.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理程序可能返回零到两个参数。
- en: If there are two return values, the second argument must be an error.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有两个返回值，则第二个参数必须是一个错误。
- en: If there is one return value, it must be an error.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果只有一个返回值，它必须是一个错误。
- en: In this recipe, we defined two greeter functions, one that took a full name
    and one where we split the name into a first name and last name. If we modified
    a single function, `greeter`, instead of creating two, Apex would have deployed
    the new version instead and called in `v2` rather than `v1` in all the preceding
    examples. It would be possible to roll back with `apex rollback greeter` as well.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们定义了两个问候函数，一个接受全名，另一个将名字分成名和姓。如果我们修改了一个函数`greeter`，而不是创建两个，Apex将部署新版本，并在所有先前的示例中调用`v2`而不是`v1`。也可以使用`apex
    rollback greeter`进行回滚。
- en: Apex serverless logging and metrics
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apex无服务器日志和指标
- en: When working with serverless functions such as Lambda, it is valuable to have
    portable, structured logs. In addition, you can combine the earlier recipes that
    dealt with logging with this recipe. The recipes that we covered in Chapter 4,
    *Error Handling in Go*, are just as relevant. Because we're using Apex to manage
    our Lambda functions, we chose to use the Apex logger for this recipe. We'll also
    rely on metrics provided by Apex, as well as the AWS console. The earlier recipes
    explored more complex logging and metrics examples, and those still apply—the
    Apex logger can easily be configured to aggregate logs using, for example, Amazon
    Kinesis or Elasticsearch.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Lambda等无服务器函数时，拥有可移植的结构化日志非常有价值。此外，您还可以将处理日志的早期配方与此配方结合使用。我们在第4章*Go中的错误处理*中涵盖的配方同样相关。因为我们使用Apex来管理我们的Lambda函数，所以我们选择使用Apex记录器进行此配方。我们还将依赖Apex提供的指标，以及AWS控制台。早期的配方探讨了更复杂的日志记录和指标示例，这些仍然适用——Apex记录器可以轻松配置为使用例如Amazon
    Kinesis或Elasticsearch来聚合日志。
- en: Getting ready
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Refer to the *Getting ready* section of the *Go programming on Lambda with Apex*
    recipe in this chapter.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 参考本章中*Go编程在Apex上的Lambda*配方的*准备工作*部分。
- en: How to do it...
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter13/logging` and
    navigate to it.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter13/logging`的新目录，并导航到该目录。
- en: 'Run the following command:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You should see a file called `go.mod` that contains the following content:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Create an Amazon account and an IAM role that can edit Lambda functions, which
    can be done at [https://aws.amazon.com/lambda/](https://aws.amazon.com/lambda/).
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个可以编辑Lambda函数的Amazon帐户和IAM角色，可以在[https://aws.amazon.com/lambda/](https://aws.amazon.com/lambda/)上完成。
- en: 'Create a `~/.aws/credentials` file with the following content, copying your
    credentials from what you set up in the Amazon console:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`~/.aws/credentials`文件，其中包含以下内容，将您在Amazon控制台中设置的凭据复制过来：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create an environment variable to hold your desired region:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个环境变量来保存您想要的区域：
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Run the `apex init` command and follow the onscreen instructions:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`apex init`命令并按照屏幕上的说明进行操作：
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Remove the `lambda/functions/hello` directory.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`lambda/functions/hello`目录。
- en: 'Create a new `lambda/functions/secret/main.go` file with the following content:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`lambda/functions/secret/main.go`文件，其中包含以下内容：
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Deploy it to your specified region:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其部署到指定的区域：
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To invoke it, run the following command:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要调用它，请运行以下命令：
- en: '[PRE19]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Check the logs:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查日志：
- en: '[PRE20]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Check your metrics:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查您的指标：
- en: '[PRE21]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Clean up the deployed services:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清理已部署的服务：
- en: '[PRE22]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How it works...
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we created a new Lambda function called secret that will respond
    with whether or not you guessed a secret phrase. The function parses an incoming
    JSON request, performs some logging using `Stderr`, and returns a response.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们创建了一个名为secret的新Lambda函数，它将根据您是否猜对了秘密短语来做出响应。该函数解析传入的JSON请求，使用`Stderr`进行一些日志记录，并返回一个响应。
- en: After using the function a few times, we can see that our logs are visible using
    the `apex logs` command. This command can be run on a single Lambda function or
    across all of our managed functions. This is especially useful if you are chaining
    Apex commands together and want to watch logs across many services.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用函数几次后，我们可以看到我们的日志可以使用`apex logs`命令查看。此命令可以在单个Lambda函数或所有受管理的函数上运行。如果您正在链接Apex命令并希望观看许多服务的日志，这将非常有用。
- en: In addition, we have shown you how to use the `apex metrics` command to collect
    general metrics about your application, including cost and invocations. You can
    also see a lot of this information directly in the AWS console in the Lambda section.
    Like the other recipes, we tried to clean up after ourselves at the end.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还向您展示了如何使用`apex metrics`命令收集有关应用程序的一般指标，包括成本和调用。您还可以在Lambda部分的AWS控制台中直接查看大量此信息。与其他配方一样，我们在最后尽力清理。
- en: Google App Engine with Go
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Go的Google App Engine
- en: App Engine is a Google service that facilitates the quick deployment of web
    applications. These applications have access to cloud storage and various other
    Google APIs. The general idea is that App Engine will scale easily with the load
    and simplify any operations management associated with hosting an app. This recipe
    will show how to create and optionally deploy a basic App Engine application.
    This recipe won't get into the details of setting up a Google Cloud account, setting
    up billing, or the specifics on cleaning up your instance. As a minimum requirement,
    access to Google Cloud Datastore ([https://cloud.google.com/datastore/docs/concepts/overview](https://cloud.google.com/datastore/docs/concepts/overview))
    is required for this recipe to work.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: App Engine是谷歌的一个服务，可以快速部署Web应用程序。这些应用程序可以访问云存储和各种其他谷歌API。总体思路是App Engine将根据负载轻松扩展，并简化与托管应用相关的任何操作管理。这个配方将展示如何创建并可选部署一个基本的App
    Engine应用程序。这个配方不会深入讨论设置谷歌云帐户、设置计费或清理实例的具体细节。作为最低要求，此配方需要访问Google Cloud Datastore
    ([https://cloud.google.com/datastore/docs/concepts/overview](https://cloud.google.com/datastore/docs/concepts/overview))。
- en: Getting ready
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Configure your environment according to these steps:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这些步骤配置您的环境：
- en: Download and install Go 1.11.1 or greater on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install).
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://golang.org/doc/install](https://golang.org/doc/install)下载并安装Go 1.11.1或更高版本到您的操作系统。
- en: Download the Google Cloud SDK from [https://cloud.google.com/appengine/docs/flexible/go/quickstart](https://cloud.google.com/appengine/docs/flexible/go/quickstart).
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://cloud.google.com/appengine/docs/flexible/go/quickstart](https://cloud.google.com/appengine/docs/flexible/go/quickstart)下载Google
    Cloud SDK。
- en: Create an app that allows you to perform datastore access and record the app
    name. For this recipe, we'll use `go-cookbook`.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个允许您执行数据存储访问并记录应用程序名称的应用程序。对于这个配方，我们将使用`go-cookbook`。
- en: Install the `gcloud components install app-engine-go` Go app engine component.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`gcloud components install app-engine-go` Go app engine组件。
- en: Open Terminal or console application and create and navigate to a project directory
    such as `~/projects/go-programming-cookbook`. All the code we will cover in this
    recipe will be run and modified from this directory.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端或控制台应用程序，并创建并导航到一个项目目录，例如`~/projects/go-programming-cookbook`。本配方中涵盖的所有代码都将从此目录运行和修改。
- en: 'Clone the latest code into `~/projects/go-programming-cookbook-original`. Here,
    you have the option of working from that directory rather than typing in the examples
    manually:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将最新的代码克隆到`~/projects/go-programming-cookbook-original`。在这里，您可以选择从该目录中工作，而不是手动输入示例：
- en: '[PRE23]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: How to do it...
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter13/appengine` and
    navigate to it.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter13/appengine`的新目录，并导航到该目录。
- en: 'Run the following command:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE24]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You should see a file called `go.mod` that contains the following content:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE25]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create a file called `app.yml` with the following content, replacing `go-cookbook`
    with the name of the app you created in the *Getting ready* section:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`app.yml`的文件，其中包含以下内容，将`go-cookbook`替换为您在*准备就绪*部分创建的应用程序名称：
- en: '[PRE26]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create a file called `message.go` with the following content:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`message.go`的文件，其中包含以下内容：
- en: '[PRE27]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create a file called `controller.go` with the following content:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`controller.go`的文件，其中包含以下内容：
- en: '[PRE28]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Create a file called `main.go` with the following content:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，其中包含以下内容：
- en: '[PRE29]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Run the `gcloud config set project go-cookbook` command, where `go-cookbook`
    is the project you created in the *Getting ready* section.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`gcloud config set project go-cookbook`命令，其中`go-cookbook`是您在*准备就绪*部分创建的项目。
- en: Run the `gcloud auth application-default login` command and follow the instructions.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`gcloud auth application-default login`命令，并按照说明操作。
- en: Run the `export PORT=8080` command.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`export PORT=8080`命令。
- en: Run the `export GCLOUD_DATASET_ID=go-cookbook` command, where `go-cookbook`
    is the project you created in the *Getting ready* section.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`export GCLOUD_DATASET_ID=go-cookbook`命令，其中`go-cookbook`是您在*准备就绪*部分创建的项目。
- en: Run the `go build` command.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go build`命令。
- en: Run the `./appengine` command.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`./appengine`命令。
- en: Navigate to [http://localhost:8080/?message=hello%20there](http://localhost:8080/?message=hello%20there).
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到[http://localhost:8080/?message=hello%20there](http://localhost:8080/?message=hello%20there)。
- en: Try a few more messages (`?message=other`).
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试几条消息(`?message=other`)。
- en: Optionally, deploy the app to your instance with `gcloud app deploy`.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选择使用`gcloud app deploy`将应用程序部署到您的实例。
- en: Navigate to the deployed app with `gcloud app browse`.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`gcloud app browse`导航到部署的应用程序。
- en: 'Optionally clean up your `appengine` instance and datastore at the following
    URLs:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选择清理您的`appengine`实例和数据存储在以下URL：
- en: '[https://console.cloud.google.com/datastore](https://console.cloud.google.com/datastore)'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://console.cloud.google.com/datastore](https://console.cloud.google.com/datastore)'
- en: '[https://console.cloud.google.com/appengine](https://console.cloud.google.com/appengine)'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://console.cloud.google.com/appengine](https://console.cloud.google.com/appengine)'
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件可能会更新，`go.sum`文件现在应该存在于顶级配方目录中。'
- en: If you copied or wrote your own tests, run the `go test` command. Ensure that
    all the tests pass.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请运行`go test`命令。确保所有测试都通过。
- en: How it works...
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Once the cloud SDK is configured to point at your application and has been authenticated,
    the GCloud tool allows quick deployment and configuration, allowing local applications
    to access Google services.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦云SDK配置为指向您的应用程序并已经经过身份验证，GCloud工具允许快速部署和配置，使本地应用程序能够访问Google服务。
- en: After authenticating and setting the port, we run the application on `localhost`,
    and we can begin working with the code. The application defines a message object
    that can be stored and retrieved from the datastore. This demonstrates how you
    might isolate this sort of code. You may also use a storage/database interface,
    as shown in previous chapters.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在验证和设置端口之后，我们在`localhost`上运行应用程序，然后可以开始使用代码。该应用程序定义了一个可以从数据存储中存储和检索的消息对象。这演示了您可能如何隔离这种代码。您还可以使用存储/数据库接口，如前几章所示。
- en: Next, we set up a handler that attempts to insert a message into the datastore,
    then retrieves all the messages, displaying them in a browser. This creates something
    resembling a basic guestbook. You may notice that the message doesn't always appear
    immediately. If you navigate without a message parameter or send another message,
    it should appear on a reload.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们设置一个处理程序，尝试将消息插入数据存储，然后检索所有消息，在浏览器中显示它们。这创建了类似基本留言簿的东西。您可能会注意到消息并不总是立即出现。如果您在没有消息参数的情况下导航或发送另一条消息，它应该在重新加载时出现。
- en: Lastly, ensure that you clean up the instances if you're no longer using them.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，请确保在不再使用它们时清理实例。
- en: Working with Firebase using firebase.google.com/go
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用firebase.google.com/go使用Firebase进行工作
- en: Firebase is another Google Cloud service that creates a scalable, easy-to-manage
    database that can support authentication and works especially well with mobile
    applications. For this recipe, we'll use the latest Firestore as our database
    backend. The Firebase service provides significantly more than what will be covered
    in this recipe, but we will just be looking at storing and retrieving data. We'll
    also look into how to set up authentication for your application and wrap the
    Firebase client with our own custom client.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase是另一个谷歌云服务，它创建了一个可扩展、易于管理的数据库，可以支持身份验证，并且特别适用于移动应用程序。在这个示例中，我们将使用最新的Firestore作为我们的数据库后端。Firebase服务提供的功能远远超出了本示例涵盖的范围，但我们只会关注存储和检索数据。我们还将研究如何为您的应用程序设置身份验证，并使用我们自己的自定义客户端封装Firebase客户端。
- en: Getting ready
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Configure your environment according to these steps:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下步骤配置您的环境：
- en: Download and install Go 1.11.1 or greater on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install).
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://golang.org/doc/install](https://golang.org/doc/install)下载并安装Go 1.11.1或更高版本到您的操作系统。
- en: Create a Firebase account, project, and database at [https://console.firebase.google.com/](https://console.firebase.google.com/).
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[https://console.firebase.google.com/](https://console.firebase.google.com/)创建一个Firebase帐户、项目和数据库。
- en: This recipe runs in test mode, which is not secure by default.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例以测试模式运行，默认情况下不安全。
- en: Generate a service admin token by going to [https://console.firebase.google.com/project/go-cookbook/settings/serviceaccounts/adminsdk](https://console.firebase.google.com/project/go-cookbook/settings/serviceaccounts/adminsdk).
    Here, `go-cookbook` is replaced with your project name.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问[https://console.firebase.google.com/project/go-cookbook/settings/serviceaccounts/adminsdk](https://console.firebase.google.com/project/go-cookbook/settings/serviceaccounts/adminsdk)生成服务管理员令牌。在这里，`go-cookbook`将替换为您的项目名称。
- en: Move the downloaded token to `/tmp/service_account.json`.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将下载的令牌移动到`/tmp/service_account.json`。
- en: Open Terminal or console application and create and navigate to a project directory
    such as `~/projects/go-programming-cookbook`. All the code we will cover in this
    recipe will be run and modified from this directory.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端或控制台应用程序，并创建并导航到一个项目目录，例如`~/projects/go-programming-cookbook`。本示例中涵盖的所有代码都将从该目录运行和修改。
- en: 'Clone the latest code into `~/projects/go-programming-cookbook-original`. Here,
    you have the option to work from that directory rather than typing in the examples
    manually:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将最新的代码克隆到`~/projects/go-programming-cookbook-original`。在这里，您可以选择从该目录工作，而不是手动输入示例：
- en: '[PRE30]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How to do it...
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序：
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter13/firebase` and
    navigate to it.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端或控制台应用程序中，创建一个名为`~/projects/go-programming-cookbook/chapter13/firebase`的新目录，并进入该目录。
- en: 'Run the following command:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE31]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You should see a file called `go.mod` that contains the following content:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个名为`go.mod`的文件，其中包含以下内容：
- en: '[PRE32]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Create a file called `client.go` with the following content:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`client.go`的文件，内容如下：
- en: '[PRE33]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Create a file called `auth.go` with the following content:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`auth.go`的文件，内容如下：
- en: '[PRE34]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录并进入该目录。
- en: 'Create a file named `main.go` with the following content:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下：
- en: '[PRE35]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Run `go run main.go`.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You may also run `go build ./example`. You should see the following output:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您也可以运行`go build ./example`。您应该会看到以下输出：
- en: '[PRE36]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件可能已更新，顶级示例目录中现在应该存在`go.sum`文件。'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，返回上一级目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Firebase provides convenient functions so that you can log in with a credentials
    file. After we're logged in, we can store any sort of structured, map-like object.
    In this case, we are storing `map[string]interface{}`. This data is accessible
    by a number of clients, including on the web and via mobile devices.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase提供了方便的功能，让您可以使用凭据文件登录。登录后，我们可以存储任何类型的结构化、类似地图的对象。在这种情况下，我们存储`map[string]interface{}`。这些数据可以被多个客户端访问，包括Web和移动设备。
- en: The client code wraps all the operations in an interface for ease of testing.
    This is a common pattern when writing client code and is also used in other recipes.
    In our case, we create a `Get` and `Set` function that stores and retrieves a
    value by a key. We also expose `Close()` so that code that's using the client
    can defer `close()` and clean up our connection at the end.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端代码将所有操作封装在一个接口中，以便进行测试。这是编写客户端代码时常见的模式，也用于其他示例中。在我们的情况下，我们创建了一个`Get`和`Set`函数，用于按键存储和检索值。我们还公开了`Close()`，以便使用客户端的代码可以延迟`close()`并在最后清理我们的连接。
