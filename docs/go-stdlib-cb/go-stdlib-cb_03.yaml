- en: Dealing with Numbers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理数字
- en: 'The recipes in this chapter are:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的食谱有：
- en: Converting strings to numbers
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将字符串转换为数字
- en: Comparing floating-point numbers
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较浮点数
- en: Rounding floating-point numbers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 舍入浮点数
- en: Floating-point arithmetics
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浮点数运算
- en: Formatting numbers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 格式化数字
- en: Converting between binary, octal, decimal, and hexadecimal
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在二进制、八进制、十进制和十六进制之间转换
- en: Formatting with the correct plurals
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用正确的复数格式
- en: Generating random numbers
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成随机数
- en: Operating complex numbers
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作复数
- en: Converting between degrees and radians
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在度和弧度之间转换
- en: Taking logarithms
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取对数
- en: Generating checksums
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成校验和
- en: Introduction
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: The numbers are generally the inevitable part of each application—printing the
    formatted numbers, converting base representations, and so on. This chapter presents
    a lot of operations that you can commonly deal with.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 数字通常是每个应用程序的不可避免的部分——打印格式化的数字、转换基数表示等等。本章介绍了许多常见的操作。
- en: Check if Go is properly installed. The *Getting ready* section from the *Retrieving
    Golang version* recipe of [Chapter 1](acf67248-0aa9-4150-a43b-d13eb9de89f2.xhtml), *Interacting
    With Environment,* will help you.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 检查Go是否已正确安装。[第1章](acf67248-0aa9-4150-a43b-d13eb9de89f2.xhtml)的*准备就绪*部分，*与环境交互*，将对您有所帮助。
- en: Converting strings to numbers
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将字符串转换为数字
- en: This recipe will show you how to convert the strings containing numbers to a
    numeric type (integer or floating-point value).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱将向您展示如何将包含数字的字符串转换为数值类型（整数或浮点值）。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: Open the console and create the folder `chapter03/recipe01`.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter03/recipe01`。
- en: Navigate to the directory.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到该目录。
- en: 'Create the `main.go` file with the following content:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建包含以下内容的`main.go`文件：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Execute the command `go run main.go` in the Terminal.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中执行命令`go run main.go`。
- en: 'You will see the following output:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](img/4697cb54-bfb3-4630-8572-03032913534e.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4697cb54-bfb3-4630-8572-03032913534e.png)'
- en: How it works...
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'The dominant function in the preceding sample code is the `ParseInt` function
    of package `strconv`. The function is called with three arguments: input, the
    base of input, and bit size. The base determines how the number is parsed. Note
    that the hexadecimal has the base (second argument) of 16 and the binary has the
    base of 2\. The function `Atoi` of package `strconv` is, in fact, the `ParseInt`
    function with the base of 10.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面示例代码中的主要函数是`strconv`包的`ParseInt`函数。该函数带有三个参数：输入、输入的基数和位大小。基数确定了如何解析数字。请注意，十六进制的基数（第二个参数）为16，二进制的基数为2。`strconv`包的`Atoi`函数实际上就是带有基数10的`ParseInt`函数。
- en: The  `ParseFloat` function converts the string to a floating-point number. The
    second argument is the precision of `bitSize`. `bitSize = 64` will result in `float64`. `bitSize
    = 32` will result in `float64`, but it is convertible to `float32` without changing
    its value.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`ParseFloat`函数将字符串转换为浮点数。第二个参数是`bitSize`的精度。`bitSize = 64`将导致`float64`。`bitSize
    = 32`将导致`float64`，但可以在不改变其值的情况下转换为`float32`。'
- en: Comparing floating-point numbers
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较浮点数
- en: Because of how floating-point numbers are represented, there can be inconsistencies
    while comparing two numbers that appear to be identical. Unlike integers, IEEE
    floating-point numbers are only approximated. The need to convert the numbers
    to a form the computer can store in binary leads to minor precision or round-off
    deviations. For example, a value of 1.3 could be represented as 1.29999999999\.
    The comparison could be done with some tolerance. To compare numbers with arbitrary
    precision, the `big` package is here.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 由于浮点数的表示方式，比较两个看似相同的数字时可能会出现不一致。与整数不同，IEEE浮点数只是近似值。需要将数字转换为计算机可以以二进制形式存储的形式，这会导致轻微的精度或舍入偏差。例如，值1.3可以表示为1.29999999999。可以通过一些容差进行比较。要比较任意精度的数字，可以使用`big`包。
- en: How to do it...
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: Open the console and create the folder `chapter03/recipe02`.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter03/recipe02`。
- en: Navigate to the directory.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到该目录。
- en: 'Create the `tolerance.go` file with the following content:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建包含以下内容的`tolerance.go`文件：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Execute the command `go run tolerance.go` in the Terminal.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中执行命令`go run tolerance.go`。
- en: 'You will see the following output:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](img/ffd1275f-99b9-48e6-bafa-7c159fc14936.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ffd1275f-99b9-48e6-bafa-7c159fc14936.png)'
- en: 'Create the file `big.go` with the following content:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建包含以下内容的`big.go`文件：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Execute the code by running `go run big.go` in the Terminal.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中执行命令`go run big.go`。
- en: 'You will see the following output:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](img/0136243d-dd1c-46a6-8960-ab6da27dec7b.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0136243d-dd1c-46a6-8960-ab6da27dec7b.png)'
- en: How it works...
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The first approach for the floating-point numbers comparison without the use
    of any built-in package (steps **1-5**) requires the use of a so-called `EPSILON`
    constant. This is the value chosen to be a sufficient small delta (difference)
    between two numbers to consider the values as equal. The delta constant could
    be on the order of 1e-8, which is usually sufficient precision.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在不使用任何内置包的情况下进行浮点数比较的第一种方法（步骤1-5）需要使用所谓的`EPSILON`常量。这是选择的足够小的增量（差异）的值，以便将两个数字视为相等。增量常数可以达到1e-8的数量级，这通常是足够的精度。
- en: The second option is more complex, but also more useful for further work with
    floating-point numbers. The package `math/big` offers the `Float` type that could
    be configured for a given precision. The advantage of this package is that the
    precision could be much higher than the precision of the `float64` type. For illustrative
    purposes, the small precision values were used to show the rounding and comparison
    in the given precision.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个选项更复杂，但对于进一步处理浮点数更有用。`math/big`包提供了可以配置为给定精度的`Float`类型。该包的优势在于精度可以比`float64`类型的精度高得多。出于说明目的，使用了较小的精度值来显示给定精度的四舍五入和比较。
- en: Note that the `da` and `db` numbers are equal when using the precision of 16-bits
    and not equal when using the precision of 32-bits. The maximal configurable precision
    can be obtained from the `big.MaxPrec` constant.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当使用16位精度时，`da`和`db`数字相等，当使用32位精度时，它们不相等。最大可配置的精度可以从`big.MaxPrec`常量中获得。
- en: Rounding floating-point numbers
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 四舍五入浮点数
- en: The rounding of a floating-point number to an integer or to a particular precision
    has to be done properly. The most common error is to cast the floating-point type
    `float64` to an integer type and consider it as well-handled.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 将浮点数四舍五入为整数或特定精度必须正确进行。最常见的错误是将浮点类型`float64`转换为整数类型，并认为它已经处理好了。
- en: An example could be casting the number 3.9999 to an integer and expect it to
    become an integer of value 4\. The real result would be 3\. At the time of writing
    this book, the current version of Go (1.9.2) does not contain the `Round` function.
    However, in version 1.10, the `Round` function was already implemented in the `math` package.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子可能是将数字3.9999转换为整数，并期望它变成值为4的整数。实际结果将是3。在撰写本书时，Go的当前版本（1.9.2）不包含`Round`函数。然而，在1.10版本中，`Round`函数已经在`math`包中实现。
- en: How to do it...
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter03/recipe03`.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter03/recipe03`。
- en: Navigate to the directory.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到该目录。
- en: 'Create the `round.go` file with the following content:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`round.go`文件，内容如下：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Execute the code by running `go run round.go` in the Terminal.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中运行`go run round.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](img/a221961c-c58e-4d32-b204-067f02439de8.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a221961c-c58e-4d32-b204-067f02439de8.png)'
- en: How it works...
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Casting the float to integer actually just truncates the float value. Let's
    say the value 2 is represented as 1.999999; in this case, the output would be
    1, which is not what you expected.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 将浮点数转换为整数实际上只是截断了浮点值。比如值2表示为1.999999；在这种情况下，输出将是1，这不是您期望的。
- en: The proper way of rounding the float number is to use the function that would
    also consider the decimal part. The commonly used method of rounding is to half
    away from zero (also known as commercial rounding).Put simply, if the number contains
    the absolute value of the decimal part which is greater or equal to 0.5, the number
    is rounded up, otherwise, it is rounded down.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 正确的浮点数四舍五入的方法是使用一个函数，该函数还会考虑小数部分。常用的四舍五入方法是向远离零的方向舍入（也称为商业舍入）。简而言之，如果数字包含小数部分的绝对值大于或等于0.5，则将数字四舍五入，否则将向下舍入。
- en: In the function `Round`, the function `Trunc` of package `math` truncates the
    decimal part of the number. Then, the decimal part of the number is extracted.
    If the value exceeds the limit of 0.5 than the value of 1 with the same sign as
    the integer value is added.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Round`函数中，`math`包的`Trunc`函数截断了数字的小数部分。然后提取了数字的小数部分。如果值超过0.5的限制，那么就会加上与整数值相同的符号的1。
- en: Go version 1.10 uses a faster implementation of the function mentioned in the
    example. In version 1.10, you can just call the `math.Round` function to get the
    rounded number.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Go版本1.10使用了一个更快的实现，该实现在示例中提到。在1.10版本中，您可以直接调用`math.Round`函数来获得四舍五入的数字。
- en: Floating-point arithmetics
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浮点数算术
- en: As described in previous recipes, the representation of the floating-point numbers
    also complicates the arithmetic. For general purposes, the operations on the built-in
    `float64` are sufficient. In case more precision is needed, the `math/big` package
    comes into play. This recipe will show you how to handle this.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的示例所述，浮点数的表示也使算术变得复杂。对于一般目的，内置的`float64`上的操作已经足够。如果需要更高的精度，则需要使用`math/big`包。本示例将向您展示如何处理这个问题。
- en: How to do it...
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter03/recipe04`.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter03/recipe04`。
- en: Navigate to the directory.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到该目录。
- en: 'Create the `main.go` file with the following content:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`main.go`文件，内容如下：
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Execute the code by running `go run main.go` in the Terminal.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中运行`go run main.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](img/3194fc9d-7405-422a-b8e4-02876be60b4a.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3194fc9d-7405-422a-b8e4-02876be60b4a.png)'
- en: How it works...
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `big` package provides support for the arithmetic of floating-point numbers
    with high precision. The previous example illustrates the basic operations over
    the numbers. Note that the code compares the operation with the `float64` type
    and the `big.Float` type.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`big`包提供了对高精度浮点数进行算术运算的支持。前面的示例说明了对数字的基本操作。请注意，代码将`float64`类型和`big.Float`类型的操作进行了比较。'
- en: By working with numbers with a high precision, it is crucial to use the `big.Float` type.
    When `big.Float` is converted back to the built-in `float64` type, high precision
    is lost.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用高精度数字，使用`big.Float`类型是至关重要的。当`big.Float`转换回内置的`float64`类型时，高精度会丢失。
- en: There's more...
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The big package contains more operations of the `Float` type. See the documentation
    ([https://golang.org/pkg/math/big/#Float](https://golang.org/pkg/math/big/#Float)) of
    this package for more details.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`big`包包含`Float`类型的更多操作。查看此包的文档（[https://golang.org/pkg/math/big/#Float](https://golang.org/pkg/math/big/#Float)）以获取更多详细信息。'
- en: See also
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The comparison and rounding of floating-point numbers is mentioned in the *Comparing
    floating-point numbers* and *Rounding floating-point numbers* recipes.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点数的比较和四舍五入在*比较浮点数*和*四舍五入浮点数*示例中有提到。
- en: Formatting numbers
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 格式化数字
- en: If the numbers are converted to the string, they usually need to be reasonably
    formatted. The formatting of a number means the number is printed with a given
    number, made up of digits and decimals. The representation of a value can also
    be chosen. A closely related problem with this, however, is the localization of
    number formatting. For example, some languages use comma-separated zeros.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数字转换为字符串，通常需要合理格式化。数字的格式化意味着数字以给定的数字和小数点打印出来。还可以选择值的表示。然而，与此密切相关的问题是数字格式的本地化。例如，一些语言使用逗号分隔的零。
- en: How to do it...
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter03/recipe05`.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter03/recipe05`。
- en: Navigate to the directory.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `format.go` file with the following content:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`format.go`文件，内容如下：
- en: '[PRE5]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Execute the code by running `go run format.go` in the main Terminal.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主终端中运行`go run format.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '![](img/cb4d778a-300d-4f9c-ad11-af183f0a73f9.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cb4d778a-300d-4f9c-ad11-af183f0a73f9.png)'
- en: 'Create the file `localized.go` with the following content:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件`localized.go`，内容如下：
- en: '[PRE6]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Execute the code by running `go run localized.go` in the main Terminal.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主终端中运行`go run localized.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '![](img/a019fad9-c657-4ab9-a5a7-ed653a3cb8e4.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a019fad9-c657-4ab9-a5a7-ed653a3cb8e4.png)'
- en: How it works...
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The code example shows the most commonly used options for integers and floating-point
    numbers.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 代码示例显示了整数和浮点数的最常用选项。
- en: The formatting in Go is derived from C's `printf` function. The so-called `verbs` are
    used to define the formatting of a number. The verb, for example, could be `%X`,
    which in fact is a placeholder for the value.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Go中的格式化源自C的`printf`函数。所谓的`动词`用于定义数字的格式化。例如，动词可以是`%X`，实际上是值的占位符。
- en: Besides the basic formatting, there are also rules in formatting that are related
    to the local manners. With formatting, according to the locale, the package `golang.org/x/text/message`
    could help. See the second code example in this recipe. This way, it is possible
    to localize the number formatting.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基本格式化外，还有与本地习俗相关的格式化规则。根据区域设置进行格式化，包`golang.org/x/text/message`可以提供帮助。请参阅本食谱中的第二个代码示例。这样，可以对数字格式进行本地化。
- en: There's more...
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: For all formatting options, see the `fmt` package. The `strconv` package could
    also be useful in case you are looking to format numbers in a different base. The
    following recipe describes the possibility of number conversion, but as a side
    effect, the options of how to format numbers in a different base are presented.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 有关所有格式选项，请参阅`fmt`包。`strconv`包在需要以不同基数格式化数字时也可能很有用。以下食谱描述了数字转换的可能性，但副作用是如何以不同基数格式化数字的选项。
- en: Converting between binary, octal, decimal, and hexadecimal
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在二进制、八进制、十进制和十六进制之间转换
- en: In some cases, the integer values can be represented by other than decimal representations.
    The conversion between these representations is easily done with the use of the `strconv`
    package.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，整数值可以用除十进制表示以外的其他表示。这些表示之间的转换很容易通过`strconv`包来完成。
- en: How to do it...
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter03/recipe06`.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter03/recipe06`。
- en: Navigate to the directory.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `convert.go` file with the following content:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`convert.go`文件，内容如下：
- en: '[PRE7]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Execute the code by running `go run convert.go` in the main Terminal.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主终端中运行`go run convert.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '![](img/79ef55f3-a6aa-4f4c-afc3-1cfc94405bd9.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/79ef55f3-a6aa-4f4c-afc3-1cfc94405bd9.png)'
- en: How it works...
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `strconv` package provides the functions `ParseInt` and `FormatInt` which
    are the, let's say, complementary functions. The function `ParseInt` is able to
    parse the integer number in any base representation. The function `FormatInt`,
    on the other hand, can format the integer into any given base.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`strconv`包提供了`ParseInt`和`FormatInt`函数，这些函数可以说是互补的函数。函数`ParseInt`能够解析任何基数表示的整数。另一方面，函数`FormatInt`可以将整数格式化为任何给定的基数。'
- en: Finally, it is possible to parse the string representation of the integer to
    the built-in `int64` type and subsequently, format the string of the parsed integer
    into the given base representation.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，可以将整数的字符串表示解析为内置的`int64`类型，然后将解析后的整数的字符串格式化为给定的基数表示。
- en: Formatting with the correct plurals
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用正确的复数格式
- en: When displaying messages for the user, the interaction is more pleasant if the
    sentences feel more human. The Go package `golang.org/x/text`, which is the extension
    package, contains this feature for formatting plurals in the correct way.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在为用户显示消息时，如果句子更加人性化，交互会更加愉快。Go包`golang.org/x/text`，即扩展包，包含了以正确方式格式化复数的功能。
- en: Getting ready
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Execute `go get -x golang.org/x/text` to obtain the extension package in case
    you don't have it already.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`go get -x golang.org/x/text`以获取扩展包，如果你还没有的话。
- en: How to do it...
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter03/recipe07`.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter03/recipe07`。
- en: Navigate to the directory.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `plurals.go` file with the following content:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`plurals.go`文件，内容如下：
- en: '[PRE8]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Execute the code by running `go run plurals.go` in the main Terminal.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主终端中运行`go run plurals.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '![](img/75073d10-7a06-4434-a380-68ebb5aca0ed.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/75073d10-7a06-4434-a380-68ebb5aca0ed.png)'
- en: How it works...
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The package `golang.org/x/text/message` contains the function `NewPrinter` which
    accepts the language identification and creates the formatted I/O, the same as
    the `fmt` package does, but with the ability to translate messages based on gender
    and plural forms.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 包`golang.org/x/text/message`包含函数`NewPrinter`，接受语言标识并创建格式化的I/O，与`fmt`包相同，但具有根据性别和复数形式翻译消息的能力。
- en: The `Set` function of the `message` package adds the translation and plurals
    selection. The plural form itself is selected based on rules set via the `Selectf` function.
    The `Selectf` function produces the `catalog.Message` type with rules based on
    the `plural.Form` or selector.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`message`包的`Set`函数添加了翻译和复数选择。复数形式本身是根据`Selectf`函数设置的规则选择的。`Selectf`函数生成基于`plural.Form`或选择器的规则的`catalog.Message`类型。'
- en: The preceding sample code uses `plural.One` and `plural.Other` forms, and `=x,
    <x` selectors. These are matched against the formatting verb `%d` (other verbs
    can also be used). The first matching case is chosen.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例代码使用了`plural.One`和`plural.Other`形式，以及`=x, <x`选择器。这些与格式化动词`%d`匹配（也可以使用其他动词）。选择第一个匹配的情况。
- en: There's more...
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: For more information about the selectors and forms, see the documentation for
    the `golang.org/x/text/message` package.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 有关选择器和形式的更多信息，请参阅`golang.org/x/text/message`包的文档。
- en: Generating random numbers
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成随机数
- en: This recipe shows how to generate random numbers. This functionality is provided
    by the `math/rand` package. The random numbers generated by `math/rand` are considered
    cryptographically insecure because the sequences are repeatable with given seed.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程展示了如何生成随机数。这个功能由`math/rand`包提供。由`math/rand`生成的随机数被认为是不安全的，因为序列是可重复的，具有给定的种子。
- en: To generate cryptographically secure numbers, the `crypto/rand` package should
    be used. These sequences are not repeatable.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成加密安全的数字，应使用`crypto/rand`包。这些序列是不可重复的。
- en: How to do it...
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter03/recipe08`.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter03/recipe08`。
- en: Navigate to the directory.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `rand.go` file with the following content:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建具有以下内容的`rand.go`文件：
- en: '[PRE9]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Execute the code by running `go run rand.go` in the main Terminal.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在主终端中运行`go run rand.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](img/e1ee4c40-cc18-430c-afa5-df69330e3611.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e1ee4c40-cc18-430c-afa5-df69330e3611.png)'
- en: How it works...
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The previous code presents two possibilities on how to generate random numbers.
    The first option uses the `math/rand` package, which is cryptographically insecure,
    and allows us to generate the same sequence with the use of `Source` with the
    same seed number. This approach is usually used in tests. The reason for doing
    so is for the reproducibility of the sequence.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码介绍了如何生成随机数的两种可能性。第一种选项使用`math/rand`包，这是不安全的，允许我们使用相同的种子号生成相同的序列。这种方法通常用于测试。这样做的原因是为了使序列可重现。
- en: The second option, the cryptographically secure one, is the use of the `crypto/rand`
    package. The API uses the `Reader` to provide the instance of a cryptographically
    strong pseudo-random generator. The package itself has the default `Reader` which
    is usually based on the system-based random number generator.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个选项，即加密安全选项，是使用`crypto/rand`包。API使用`Reader`提供具有加密强大伪随机生成器实例。包本身具有默认的`Reader`，通常基于基于系统的随机数生成器。
- en: Operating complex numbers
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作复数
- en: Complex numbers are usually used for scientific applications and calculations.
    Go implements complex numbers as the primitive type. The specific operations on
    complex numbers are part of the `math/cmplx` package.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 复数通常用于科学应用和计算。Go将复数实现为原始类型。复数的特定操作是`math/cmplx`包的一部分。
- en: How to do it...
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter03/recipe09`.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter03/recipe09`。
- en: Navigate to the directory.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `complex.go` file with the following content:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建具有以下内容的`complex.go`文件：
- en: '[PRE10]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Execute the code by running `go run complex.go` in the main Terminal.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在主终端中运行`go run complex.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](img/8449d9d2-92ea-4486-bb15-1a3b0817cd1b.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8449d9d2-92ea-4486-bb15-1a3b0817cd1b.png)'
- en: How it works...
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The basic operators are implemented for the primitive type `complex`. The other
    operations on complex numbers are provided by the `math/cmplx` package. In case
    high precision operations are needed, there is no `big` implementation.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 基本运算符是为原始类型`complex`实现的。复数的其他操作由`math/cmplx`包提供。如果需要高精度操作，则没有`big`实现。
- en: On the other hand, the complex number could be implemented as real, and the
    imaginary part expressed by the `big.Float` type.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，复数可以实现为实数，并且虚部由`big.Float`类型表示。
- en: Converting between degrees and radians
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在度和弧度之间转换
- en: The trigonometric operations and geometric manipulation are usually done in
    radians; it is always useful to be able to convert these into degrees and vice
    versa. This recipe will show you some tips on how to handle the conversion between
    these units.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 三角函数运算和几何操作通常以弧度为单位进行；能够将这些转换为度数及其相反是非常有用的。本教程将向您展示如何处理这些单位之间的转换。
- en: How to do it...
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter03/recipe10`.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter03/recipe10`。
- en: Navigate to the directory.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `radians.go` file with the following content:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建具有以下内容的`radians.go`文件：
- en: '[PRE11]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Execute the code by running `go run radians.go` in the main Terminal.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在主终端中运行`go run radians.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](img/62ee5c8a-9b69-4fa2-bcea-affcc05b99b6.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62ee5c8a-9b69-4fa2-bcea-affcc05b99b6.png)'
- en: How it works...
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Go standard library does not contain any package with a function converting
    radians to degrees and vice versa. But at least the Pi constant is a part of the `math`
    package, so the conversion could be done as shown in the sample code.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Go标准库不包含任何将弧度转换为度数及其相反的函数。但至少Pi常数是`math`包的一部分，因此可以按照示例代码中所示进行转换。
- en: The preceding code also presents the approach of defining the custom type with
    additional methods. These are simplifying the conversion of values by handy API.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码还介绍了定义具有附加方法的自定义类型的方法。这些方法通过方便的API简化了值的转换。
- en: Taking logarithms
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 取对数
- en: Logarithms are used in scientific applications as well as in data visualizations
    and measurements. The built-in `math` package contains the commonly used bases
    of the logarithm. Using these, you are able to get all bases.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 对数在科学应用以及数据可视化和测量中被使用。内置的`math`包包含了常用的对数基数。使用这些，你可以得到所有的基数。
- en: How to do it...
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: Open the console and create the folder `chapter03/recipe11`.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter03/recipe11`。
- en: Navigate to the directory.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `log.go` file with the following content:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`log.go`文件，内容如下：
- en: '[PRE12]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Execute the code by running `go run log.go` in the main Terminal.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主终端中运行`go run log.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '![](img/c9934563-74ce-4201-8e54-e604592356fd.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c9934563-74ce-4201-8e54-e604592356fd.png)'
- en: How it works...
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'The standard package, `math`, contains functions for all commonly used logarithms,
    and so you can easily get binary, decimal, and natural logarithms. See the *Log* function
    which counts any logarithm of *y* with base *x* through the helper-defined formula:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 标准包`math`包含了所有常用对数的函数，因此你可以轻松地得到二进制、十进制和自然对数。查看*Log*函数，它通过助手定义的公式计算任何以*x*为底的*y*的对数：
- en: '![](img/3e8c5979-71d4-41ab-986f-0fbe73a8998f.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3e8c5979-71d4-41ab-986f-0fbe73a8998f.jpg)'
- en: The internal implementation of the logarithm in standard lib is naturally based
    on approximation. This function can be seen in the `$GOROOT/src/math/log.go` file.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 标准库中对数的内部实现自然是基于近似值的。这个函数可以在`$GOROOT/src/math/log.go`文件中找到。
- en: Generating checksums
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成校验和
- en: The hash, or so-called checksum, is the easiest way to quickly compare any content.
    This recipe demonstrates how to create the checksum of the file content. For demonstration
    purposes, the MD5 hash function will be used.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希，或者所谓的校验和，是快速比较任何内容的最简单方法。这个示例演示了如何创建文件内容的校验和。为了演示目的，将使用MD5哈希函数。
- en: How to do it...
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: Open the console and create the folder `chapter03/recipe12`.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter03/recipe12`。
- en: Navigate to the directory.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `content.dat` file with the following content:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`content.dat`文件，内容如下：
- en: '[PRE13]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create the `checksum.go` file with the following content:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`checksum.go`文件，内容如下：
- en: '[PRE14]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Execute the code by running `go run checksum.go` in the main Terminal.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主终端中运行`go run checksum.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '![](img/2cb3110e-966d-41d5-9e99-8d526fd63d71.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2cb3110e-966d-41d5-9e99-8d526fd63d71.png)'
- en: 'Create the `sha_panic.go` file with the following content:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`sha_panic.go`文件，内容如下：
- en: '[PRE15]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Execute the code by running `go run sha_panic.go` in the main Terminal.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主终端中运行`go run sha_panic.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '![](img/ae1c2f79-fe03-4ae9-aef3-7eabc74ae3d8.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae1c2f79-fe03-4ae9-aef3-7eabc74ae3d8.png)'
- en: How it works...
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `crypto` package contains implementations of well-known hash functions.
    The `MD5` hash function is located in the `crypto/md5` package. Each hash function
    in the `crypto` package implements the `Hash` interface.  Note that `Hash` contains
    the `Write`  method. With the `Write` method, it can be utilized as a `Writer`.
    This can be seen in the `FileMD5` function. The `Sum` method of `Hash` accepts
    the argument of byte slice, where the resulting hash should be placed.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`crypto`包包含了众所周知的哈希函数的实现。`MD5`哈希函数位于`crypto/md5`包中。`crypto`包中的每个哈希函数都实现了`Hash`接口。注意`Hash`包含了`Write`方法。通过`Write`方法，它可以被用作`Writer`。这可以在`FileMD5`函数中看到。`Hash`的`Sum`方法接受字节切片的参数，结果哈希值将放置在其中。'
- en: Beware of this. The `Sum` method does not compute the hash of the argument,
    but computes the hash into an argument.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这一点。`Sum`方法不会计算参数的哈希值，而是将哈希计算到参数中。
- en: On the other hand, `md5.Sum`, the package function, can be used to produce the
    hash directly. In this case, the argument of the `Sum` function is the one from
    the hash values computed.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`md5.Sum`包函数可以直接用于生成哈希。在这种情况下，`Sum`函数的参数是计算出的哈希值。
- en: Naturally, the `crypto` package implements the `SHA` variants and other hash
    functions as well. These are usually used in the same way. The hash functions
    can be accessed through the `crypto` package constant `crypto.Hash` (for example, `crypto.MD5.New()`),
    but this way, the package with the given function must be linked to a built binary
    as well (the blank import could be used, `import _ "crypto/md5"`), otherwise the
    call for `New` will panic.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 自然地，`crypto`包实现了`SHA`变体和其他哈希函数。这些通常以相同的方式使用。哈希函数可以通过`crypto`包的常量`crypto.Hash`（例如，`crypto.MD5.New()`）来访问，但是这种方式，给定函数的包也必须链接到构建的二进制文件中（可以使用空白导入，`import
    _ "crypto/md5"`），否则对`New`的调用将会导致恐慌。
- en: The `hash` package itself contains the CRC checksums and more.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`hash`包本身包含了CRC校验和等内容。'
