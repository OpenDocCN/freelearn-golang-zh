["```go\n        package main\n\n        import (\n          \"fmt\"\n          \"os\"\n        )\n\n        func main() {\n\n          f, err := os.Open(\"test.file\")\n          if err != nil {\n            panic(err)\n          }\n          fi, err := f.Stat()\n          if err != nil {\n            panic(err)\n          }\n\n          fmt.Printf(\"File name: %v\\n\", fi.Name())\n          fmt.Printf(\"Is Directory: %t\\n\", fi.IsDir())\n          fmt.Printf(\"Size: %d\\n\", fi.Size())\n          fmt.Printf(\"Mode: %v\\n\", fi.Mode())\n\n        }\n```", "```go\n        package main\n\n        import \"io/ioutil\"\n        import \"os\"\n        import \"fmt\"\n\n        func main() {\n          tFile, err := ioutil.TempFile(\"\", \"gostdcookbook\")\n          if err != nil {\n            panic(err)\n          }\n          // The called is responsible for handling\n          // the clean up.\n          defer os.Remove(tFile.Name())\n\n          fmt.Println(tFile.Name())\n\n          // TempDir returns\n          // the path in string.\n          tDir, err := ioutil.TempDir(\"\", \"gostdcookbookdir\")\n          if err != nil {\n            panic(err)\n          }\n          defer os.Remove(tDir)\n          fmt.Println(tDir)\n\n        }\n```", "```go\n        package main\n\n        import (\n          \"io\"\n          \"os\"\n          \"strings\"\n        )\n\n        func main() {\n\n          f, err := os.Create(\"sample.file\")\n          if err != nil {\n            panic(err)\n          }\n          defer f.Close()\n\n          _, err = f.WriteString(\"Go is awesome!\\n\")\n          if err != nil {\n            panic(err)\n          }\n\n          _, err = io.Copy(f, strings.NewReader(\"Yeah! Go \n                           is great.\\n\"))\n          if err != nil {\n            panic(err)\n          }\n        }\n```", "```go\n        package main\n\n        import (\n          \"fmt\"\n          \"io\"\n          \"os\"\n          \"sync\"\n        )\n\n        type SyncWriter struct {\n          m sync.Mutex\n          Writer io.Writer\n        }\n\n        func (w *SyncWriter) Write(b []byte) (n int, err error) {\n          w.m.Lock()\n          defer w.m.Unlock()\n          return w.Writer.Write(b)\n        }\n\n        var data = []string{\n          \"Hello!\",\n          \"Ola!\",\n          \"Ahoj!\",\n        }\n\n        func main() {\n\n          f, err := os.Create(\"sample.file\")\n          if err != nil {\n            panic(err)\n          }\n\n          wr := &SyncWriter{sync.Mutex{}, f}\n          wg := sync.WaitGroup{}\n          for _, val := range data {\n            wg.Add(1)\n            go func(greetings string) {\n              fmt.Fprintln(wr, greetings)\n              wg.Done()\n            }(val)\n          }\n\n          wg.Wait()\n        }\n```", "```go\n        package main\n\n        import (\n          \"fmt\"\n          \"io/ioutil\"\n          \"os\"\n          \"path/filepath\"\n        )\n\n        func main() {\n\n          fmt.Println(\"List by ReadDir\")\n          listDirByReadDir(\".\")\n          fmt.Println()\n          fmt.Println(\"List by Walk\")\n          listDirByWalk(\".\")\n        }\n\n        func listDirByWalk(path string) {\n          filepath.Walk(path, func(wPath string, info os.FileInfo,\n                                   err error) error {\n\n          // Walk the given dir\n          // without printing out.\n          if wPath == path {\n            return nil\n          }\n\n          // If given path is folder\n          // stop list recursively and print as folder.\n          if info.IsDir() {\n            fmt.Printf(\"[%s]\\n\", wPath)\n            return filepath.SkipDir\n          }\n\n          // Print file name\n          if wPath != path {\n            fmt.Println(wPath)\n          }\n          return nil\n        })\n        }\n\n        func listDirByReadDir(path string) {\n          lst, err := ioutil.ReadDir(path)\n          if err != nil {\n            panic(err)\n          }\n          for _, val := range lst {\n            if val.IsDir() {\n              fmt.Printf(\"[%s]\\n\", val.Name())\n            } else {\n              fmt.Println(val.Name())\n            }\n          }\n        }\n```", "```go\n        package main\n\n        import (\n          \"fmt\"\n          \"os\"\n        )\n\n        func main() {\n\n          f, err := os.Create(\"test.file\")\n          if err != nil {\n            panic(err)\n          }\n          defer f.Close()\n\n          // Obtain current permissions\n          fi, err := f.Stat()\n          if err != nil {\n            panic(err)\n          }\n          fmt.Printf(\"File permissions %v\\n\", fi.Mode())\n\n          // Change permissions\n          err = f.Chmod(0777)\n          if err != nil {\n            panic(err)\n          }\n          fi, err = f.Stat()\n          if err != nil {\n            panic(err)\n          }\n          fmt.Printf(\"File permissions %v\\n\", fi.Mode())\n\n        }\n```", "```go\n        package main\n\n        import (\n          \"os\"\n        )\n\n        func main() {\n\n          f, err := os.Create(\"created.file\")\n          if err != nil {\n            panic(err)\n          }\n          f.Close()\n\n          f, err = os.OpenFile(\"created.byopen\", os.O_CREATE|os.O_APPEND,\n                               os.ModePerm)\n          if err != nil {\n            panic(err)\n          }\n          f.Close()\n\n          err = os.Mkdir(\"createdDir\", 0777)\n          if err != nil {\n            panic(err)\n          }\n\n          err = os.MkdirAll(\"sampleDir/path1/path2\", 0777)\n          if err != nil {\n            panic(err)\n          }\n\n        }\n```", "```go\n        package main\n\n        import (\n          \"fmt\"\n          \"os\"\n          \"path/filepath\"\n        )\n\n        func main() {\n\n          for i := 1; i <= 6; i++ {\n            _, err := os.Create(fmt.Sprintf(\"./test.file%d\", i))\n            if err != nil {\n              fmt.Println(err)\n            }\n          }\n\n          m, err := filepath.Glob(\"./test.file[1-3]\")\n          if err != nil {\n            panic(err)\n          }\n\n          for _, val := range m {\n            fmt.Println(val)\n          }\n\n          // Cleanup\n          for i := 1; i <= 6; i++ {\n            err := os.Remove(fmt.Sprintf(\"./test.file%d\", i))\n            if err != nil {\n              fmt.Println(err)\n            }\n          }\n        }\n```", "```go\n        package main\n\n        import (\n          \"bufio\"\n          \"crypto/md5\"\n          \"fmt\"\n          \"io\"\n          \"os\"\n        )\n\n        var data = []struct {\n          name string\n          cont string\n          perm os.FileMode\n        }{\n          {\"test1.file\", \"Hello\\nGolang is great\", 0666},\n          {\"test2.file\", \"Hello\\nGolang is great\", 0666},\n          {\"test3.file\", \"Not matching\\nGolang is great\\nLast line\",\n           0666},\n        }\n\n        func main() {\n\n          files := []*os.File{}\n          for _, fData := range data {\n            f, err := os.Create(fData.name)\n            if err != nil {\n              panic(err)\n            }\n            defer f.Close()\n            _, err = io.WriteString(f, fData.cont)\n            if err != nil {\n              panic(err)\n            }\n            files = append(files, f)\n          }\n\n          // Compare by checksum\n          checksums := []string{}\n          for _, f := range files {\n            f.Seek(0, 0) // reset to beginning of file\n            sum, err := getMD5SumString(f)\n            if err != nil {\n              panic(err)\n            }\n            checksums = append(checksums, sum)\n          }\n\n          fmt.Println(\"### Comparing by checksum ###\")\n          compareCheckSum(checksums[0], checksums[1])\n          compareCheckSum(checksums[0], checksums[2])\n\n          fmt.Println(\"### Comparing line by line ###\")\n          files[0].Seek(0, 0)\n          files[2].Seek(0, 0)\n          compareFileByLine(files[0], files[2])\n\n          // Cleanup\n          for _, val := range data {\n            os.Remove(val.name)\n          }\n\n        }\n\n        func getMD5SumString(f *os.File) (string, error) {\n          file1Sum := md5.New()\n          _, err := io.Copy(file1Sum, f)\n          if err != nil {\n            return \"\", err\n          }\n          return fmt.Sprintf(\"%X\", file1Sum.Sum(nil)), nil\n        }\n\n        func compareCheckSum(sum1, sum2 string) {\n          match := \"match\"\n          if sum1 != sum2 {\n            match = \" does not match\"\n          }\n          fmt.Printf(\"Sum: %s and Sum: %s %s\\n\", sum1, sum2, match)\n        }\n\n        func compareLines(line1, line2 string) {\n          sign := \"o\"\n          if line1 != line2 {\n            sign = \"x\"\n          }\n          fmt.Printf(\"%s | %s | %s \\n\", sign, line1, line2)\n        }\n\n        func compareFileByLine(f1, f2 *os.File) {\n          sc1 := bufio.NewScanner(f1)\n          sc2 := bufio.NewScanner(f2)\n\n          for {\n            sc1Bool := sc1.Scan()\n            sc2Bool := sc2.Scan()\n            if !sc1Bool && !sc2Bool {\n              break\n            }\n            compareLines(sc1.Text(), sc2.Text())\n          }\n        }\n```", "```go\n        package main\n\n        import (\n          \"fmt\"\n          \"log\"\n          \"os/user\"\n        )\n\n        func main() {\n          usr, err := user.Current()\n          if err != nil {\n            log.Fatal(err)\n          }\n          fmt.Println(\"The user home directory: \" + usr.HomeDir)\n        }\n```"]