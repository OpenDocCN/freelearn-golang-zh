["```go\n       package main\n\n       import (\n         \"database/sql\"\n         \"fmt\"\n\n         _ \"github.com/lib/pq\"\n       )\n\n       func main() {\n         connStr := \"postgres://postgres:postgres@\n                     localhost:5432/example?sslmode=disable\"\n         db, err := sql.Open(\"postgres\", connStr)\n         if err != nil {\n           panic(err)\n         }\n         defer db.Close()\n         err = db.Ping()\n         if err != nil {\n           panic(err)\n         }\n         fmt.Println(\"Ping OK\")\n       }\n```", "```go\n        package main\n\n        import (\n          \"context\"\n          \"database/sql\"\n          \"fmt\"\n          \"time\"\n\n          _ \"github.com/lib/pq\"\n        )\n\n        func main() {\n          connStr := \"postgres://postgres:postgres@\n                      localhost:5432/example?sslmode=disable\"\n          db, err := sql.Open(\"postgres\", connStr)\n          if err != nil {\n            panic(err)\n          }\n          defer db.Close()\n          err = db.Ping()\n          if err != nil {\n            panic(err)\n          }\n          fmt.Println(\"Ping OK.\")\n          ctx, _ := context.WithTimeout(context.Background(),\n                                        time.Nanosecond)\n          err = db.PingContext(ctx)\n          if err != nil {\n            fmt.Println(\"Error: \" + err.Error())\n          }\n\n          // Verify the connection is\n          conn, err := db.Conn(context.Background())\n          if err != nil {\n            panic(err)\n          }\n          defer conn.Close()\n          err = conn.PingContext(context.Background())\n          if err != nil {\n            panic(err)\n          }\n          fmt.Println(\"Connection Ping OK.\")\n\n        }\n```", "```go\n        DROP TABLE IF EXISTS post;\n        CREATE TABLE post (\n          ID serial,\n          TITLE varchar(40),\n          CONTENT varchar(255),\n          CONSTRAINT pk_post PRIMARY KEY(ID)\n        );\n        SELECT * FROM post;\n```", "```go\n        package main\n\n        import (\n          \"database/sql\"\n          \"fmt\"\n          _ \"github.com/lib/pq\"\n        )\n\n        const sel = \"SELECT * FROM post;\"\n        const trunc = \"TRUNCATE TABLE post;\"\n        const ins = \"INSERT INTO post(ID,TITLE,CONTENT)\n                     VALUES (1,'Title 1','Content 1'),\n                     (2,'Title 2','Content 2') \"\n\n        func main() {\n          db := createConnection()\n          defer db.Close()\n\n          _, err := db.Exec(trunc)\n          if err != nil {\n            panic(err)\n          }\n          fmt.Println(\"Table truncated.\")\n          r, err := db.Exec(ins)\n          if err != nil {\n            panic(err)\n          }\n          affected, err := r.RowsAffected()\n          if err != nil {\n            panic(err)\n          }\n          fmt.Printf(\"Inserted rows count: %d\\n\",\n                     affected)\n\n          rs, err := db.Query(sel)\n          if err != nil {\n            panic(err)\n          }\n          count := 0\n          for rs.Next() {\n            count++\n          }\n          fmt.Printf(\"Total of %d was selected.\\n\", count)\n        }\n\n        func createConnection() *sql.DB {\n          connStr := \"postgres://postgres:postgres@\n                      localhost:5432/example?sslmode=disable\"\n          db, err := sql.Open(\"postgres\", connStr)\n          if err != nil {\n            panic(err)\n          }\n          err = db.Ping()\n          if err != nil {\n            panic(err)\n          }\n          return db\n        }\n```", "```go\n        DROP TABLE IF EXISTS post;\n        CREATE TABLE post (\n          ID serial,\n          TITLE varchar(40),\n          CONTENT varchar(255),\n          CONSTRAINT pk_post PRIMARY KEY(ID)\n        );\n        SELECT * FROM post;\n```", "```go\n        package main\n\n        import (\n          \"database/sql\"\n          \"fmt\"\n          _ \"github.com/lib/pq\"\n        )\n\n        const trunc = \"TRUNCATE TABLE post;\"\n        const ins = \"INSERT INTO post(ID,TITLE,CONTENT)\n                     VALUES ($1,$2,$3)\"\n\n        var testTable = []struct {\n          ID int\n          Title string\n          Content string\n        }{\n          {1, \"Title One\", \"Content of title one\"},\n          {2, \"Title Two\", \"Content of title two\"},\n          {3, \"Title Three\", \"Content of title three\"},\n        }\n\n        func main() {\n          db := createConnection()\n          defer db.Close()\n\n          // Truncate table\n          _, err := db.Exec(trunc)\n          if err != nil {\n            panic(err)\n          }\n\n          stm, err := db.Prepare(ins)\n          if err != nil {\n            panic(err)\n          }\n\n          inserted := int64(0)\n          for _, val := range testTable {\n            fmt.Printf(\"Inserting record ID: %d\\n\", val.ID)\n            // Execute the prepared statement\n            r, err := stm.Exec(val.ID, val.Title, val.Content)\n            if err != nil {\n              fmt.Printf(\"Cannot insert record ID : %d\\n\",\n                         val.ID)\n            }\n            if affected, err := r.RowsAffected(); err == nil {\n              inserted = inserted + affected\n            }\n          }\n\n          fmt.Printf(\"Result: Inserted %d rows.\\n\", inserted)\n\n        }\n\n        func createConnection() *sql.DB {\n          connStr := \"postgres://postgres:postgres@\n                      localhost:5432/example?sslmode=disable\"\n          db, err := sql.Open(\"postgres\", connStr)\n          if err != nil {\n            panic(err)\n          }\n          err = db.Ping()\n          if err != nil {\n            panic(err)\n          }\n          return db\n        }\n```", "```go\n        DROP TABLE IF EXISTS post;\n        CREATE TABLE post (\n          ID serial,\n          TITLE varchar(40),\n          CONTENT varchar(255),\n          CONSTRAINT pk_post PRIMARY KEY(ID)\n        );\n        SELECT * FROM post;\n        INSERT INTO post(ID,TITLE,CONTENT) VALUES\n                        (1,'Title One','Content One'),\n                        (2,'Title Two','Content Two');\n```", "```go\n        package main\n\n        import (\n          \"context\"\n          \"database/sql\"\n          \"fmt\"\n          \"time\"\n          _ \"github.com/lib/pq\"\n        )\n\n        const sel = \"SELECT * FROM post p CROSS JOIN\n           (SELECT 1 FROM generate_series(1,1000000)) tbl\"\n\n        func main() {\n          db := createConnection()\n          defer db.Close()\n\n          ctx, canc := context.WithTimeout(context.Background(),\n                                           20*time.Microsecond)\n          rows, err := db.QueryContext(ctx, sel)\n          canc() //cancel the query\n          if err != nil {\n            fmt.Println(err)\n            return\n          }\n          defer rows.Close()\n          count := 0\n          for rows.Next() {\n            if rows.Err() != nil {\n              fmt.Println(rows.Err())\n              continue\n            }\n            count++\n          }\n\n          fmt.Printf(\"%d rows returned\\n\", count)\n\n        }\n\n        func createConnection() *sql.DB {\n          connStr := \"postgres://postgres:postgres@\n                      localhost:5432/example?sslmode=disable\"\n          db, err := sql.Open(\"postgres\", connStr)\n          if err != nil {\n            panic(err)\n          }\n          err = db.Ping()\n          if err != nil {\n            panic(err)\n          }\n          return db\n        }\n```", "```go\n        DROP TABLE IF EXISTS post;\n        CREATE TABLE post (\n          ID serial,\n          TITLE varchar(40),\n          CONTENT varchar(255),\n          CONSTRAINT pk_post PRIMARY KEY(ID)\n        );\n        SELECT * FROM post;\n        INSERT INTO post(ID,TITLE,CONTENT) VALUES\n                        (1,'Title One','Content One'),\n                        (2,'Title Two','Content Two');\n\n```", "```go\n        package main\n\n        import (\n          \"database/sql\"\n          \"fmt\"\n          _ \"github.com/lib/pq\"\n        )\n\n        const sel = \"SELECT * FROM post p\"\n\n        func main() {\n\n          db := createConnection()\n          defer db.Close()\n\n          rs, err := db.Query(sel)\n          if err != nil {\n            panic(err)\n          }\n          defer rs.Close()\n          columns, err := rs.Columns()\n          if err != nil {\n            panic(err)\n          }\n          fmt.Printf(\"Selected columns: %v\\n\", columns)\n\n          colTypes, err := rs.ColumnTypes()\n          if err != nil {\n            panic(err)\n          }\n          for _, col := range colTypes {\n            fmt.Println()\n            fmt.Printf(\"%+v\\n\", col)\n          }\n\n        }\n\n        func createConnection() *sql.DB {\n          connStr := \"postgres://postgres:postgres@\n                      localhost:5432/example?sslmode=disable\"\n          db, err := sql.Open(\"postgres\", connStr)\n          if err != nil {\n            panic(err)\n          }\n          err = db.Ping()\n          if err != nil {\n            panic(err)\n          }\n          return db\n        }\n```", "```go\n       DROP TABLE IF EXISTS post;\n       CREATE TABLE post (\n         ID serial,\n         TITLE varchar(40),\n         CONTENT varchar(255),\n         CONSTRAINT pk_post PRIMARY KEY(ID)\n       );\n       SELECT * FROM post;\n       INSERT INTO post(ID,TITLE,CONTENT) VALUES\n                       (1,'Title One','Content One'),\n                       (2,NULL,'Content Two');\n```", "```go\n        package main\n\n        import (\n          \"database/sql\"\n          \"fmt\"\n          _ \"github.com/lib/pq\"\n        )\n\n        const sel = `SELECT title,content FROM post;\n        SELECT 1234 NUM; `\n\n        const selOne = \"SELECT title,content FROM post\n                        WHERE ID = $1;\"\n\n        type Post struct {\n          Name sql.NullString\n          Text sql.NullString\n        }\n\n        func main() {\n          db := createConnection()\n          defer db.Close()\n\n          rs, err := db.Query(sel)\n          if err != nil {\n            panic(err)\n          }\n          defer rs.Close()\n\n          posts := []Post{}\n          for rs.Next() {\n            if rs.Err() != nil {\n              panic(rs.Err())\n            }\n            p := Post{}\n            if err := rs.Scan(&p.Name, &p.Text); err != nil {\n              panic(err)\n            }\n            posts = append(posts, p)\n          }\n\n          var num int\n          if rs.NextResultSet() {\n            for rs.Next() {\n              if rs.Err() != nil {\n                panic(rs.Err())\n              }\n              rs.Scan(&num)\n            }\n          }\n\n          fmt.Printf(\"Retrieved posts: %+v\\n\", posts)\n          fmt.Printf(\"Retrieved number: %d\\n\", num)\n\n          row := db.QueryRow(selOne, 100)\n          or := Post{}\n          if err := row.Scan(&or.Name, &or.Text); err != nil {\n            fmt.Printf(\"Error: %s\\n\", err.Error())\n            return\n          }\n\n          fmt.Printf(\"Retrieved one post: %+v\\n\", or)\n\n        }\n\n        func createConnection() *sql.DB {\n          connStr := \"postgres://postgres:postgres@\n                      localhost:5432/example?sslmode=disable\"\n          db, err := sql.Open(\"postgres\", connStr)\n          if err != nil {\n            panic(err)\n          }\n          err = db.Ping()\n          if err != nil {\n            panic(err)\n          }\n          return db\n        }\n```", "```go\n        DROP TABLE IF EXISTS post;\n        CREATE TABLE post (\n          ID serial,\n          TITLE varchar(40),\n          CONTENT varchar(255),\n          CONSTRAINT pk_post PRIMARY KEY(ID)\n        );\n        SELECT * FROM post;\n        INSERT INTO post(ID,TITLE,CONTENT) VALUES \n                        (1,NULL,'Content One'),\n                        (2,'Title Two','Content Two');\n```", "```go\n        package main\n\n        import (\n          \"database/sql\"\n          \"fmt\"\n          _ \"github.com/lib/pq\"\n        )\n\n        const selOne = \"SELECT id,title,content FROM post\n                        WHERE ID = $1;\"\n\n        func main() {\n          db := createConnection()\n          defer db.Close()\n\n          rows, err := db.Query(selOne, 1)\n          if err != nil {\n            panic(err)\n          }\n          cols, _ := rows.Columns()\n          for rows.Next() {\n            m := parseWithRawBytes(rows, cols)\n            fmt.Println(m)\n            m = parseToMap(rows, cols)\n            fmt.Println(m)\n          }\n        }\n\n        func parseWithRawBytes(rows *sql.Rows, cols []string)\n                               map[string]interface{} {\n          vals := make([]sql.RawBytes, len(cols))\n          scanArgs := make([]interface{}, len(vals))\n          for i := range vals {\n            scanArgs[i] = &vals[i]\n          }\n          if err := rows.Scan(scanArgs...); err != nil {\n            panic(err)\n          }\n          m := make(map[string]interface{})\n          for i, col := range vals {\n            if col == nil {\n              m[cols[i]] = nil\n            } else {\n              m[cols[i]] = string(col)\n            }\n          }\n          return m\n        }\n\n        func parseToMap(rows *sql.Rows, cols []string)\n                        map[string]interface{} {\n          values := make([]interface{}, len(cols))\n          pointers := make([]interface{}, len(cols))\n          for i := range values {\n            pointers[i] = &values[i]\n          }\n\n          if err := rows.Scan(pointers...); err != nil {\n            panic(err)\n          }\n\n          m := make(map[string]interface{})\n          for i, colName := range cols {\n            if values[i] == nil {\n              m[colName] = nil\n            } else {\n              m[colName] = values[i]\n            }\n          }\n          return m\n        }\n\n        func createConnection() *sql.DB {\n          connStr := \"postgres://postgres:postgres@\n                      localhost:5432/example?sslmode=disable\"\n          db, err := sql.Open(\"postgres\", connStr)\n          if err != nil {\n            panic(err)\n          }\n          err = db.Ping()\n          if err != nil {\n            panic(err)\n          }\n          return db\n        }\n```", "```go\n        DROP TABLE IF EXISTS post;\n        CREATE TABLE post (\n          ID serial,\n          TITLE varchar(40),\n          CONTENT varchar(255),\n          CONSTRAINT pk_post PRIMARY KEY(ID)\n        );\n        SELECT * FROM post;\n        INSERT INTO post(ID,TITLE,CONTENT) VALUES\n                        (1,'Title One','Content One'),\n                        (2,NULL,'Content Two');\n```", "```go\n        package main\n\n        import (\n          \"database/sql\"\n          \"fmt\"\n          _ \"github.com/lib/pq\"\n        )\n\n        const selOne = \"SELECT id,title,content FROM post\n                        WHERE ID = $1;\"\n        const insert = \"INSERT INTO post(ID,TITLE,CONTENT)\n                VALUES (4,'Transaction Title','Transaction Content');\"\n\n        type Post struct {\n          ID int\n          Title string\n          Content string\n        }\n\n        func main() {\n          db := createConnection()\n          defer db.Close()\n\n          tx, err := db.Begin()\n          if err != nil {\n            panic(err)\n          }\n          _, err = tx.Exec(insert)\n          if err != nil {\n            panic(err)\n          }\n          p := Post{}\n          // Query in other session/transaction\n          if err := db.QueryRow(selOne, 4).Scan(&p.ID,\n                &p.Title, &p.Content); err != nil {\n            fmt.Println(\"Got error for db.Query:\" + err.Error())\n          }\n          fmt.Println(p)\n          // Query within transaction\n          if err := tx.QueryRow(selOne, 4).Scan(&p.ID,\n                 &p.Title, &p.Content); err != nil {\n            fmt.Println(\"Got error for db.Query:\" + err.Error())\n          }\n          fmt.Println(p)\n          // After commit or rollback the\n          // transaction need to recreated.\n          tx.Rollback()\n\n        }\n\n        func createConnection() *sql.DB {\n          connStr := \"postgres://postgres:postgres@\n                      localhost:5432/example?sslmode=disable\"\n          db, err := sql.Open(\"postgres\", connStr)\n          if err != nil {\n            panic(err)\n          }\n          err = db.Ping()\n          if err != nil {\n            panic(err)\n          }\n          return db\n        }\n```", "```go\n        CREATE OR REPLACE FUNCTION format_name\n        (firstname Text,lastname Text,age INT) RETURNS \n        VARCHAR AS $$\n        BEGIN\n          RETURN trim(firstname) ||' '||trim(lastname) ||' ('||age||')';\n        END;\n        $$ LANGUAGE plpgsql;\n```", "```go\n        package main\n\n        import (\n          \"database/sql\"\n          \"fmt\"\n\n          _ \"github.com/go-sql-driver/mysql\"\n          _ \"github.com/lib/pq\"\n        )\n\n        const call = \"select * from format_name($1,$2,$3)\"\n\n        const callMySQL = \"CALL simpleproc(?)\"\n\n        type Result struct {\n          Name string\n          Category int\n        }\n\n        func main() {\n          db := createConnection()\n          defer db.Close()\n          r := Result{}\n\n          if err := db.QueryRow(call, \"John\", \"Doe\",\n                    32).Scan(&r.Name); err != nil {\n            panic(err)\n          }\n          fmt.Printf(\"Result is: %+v\\n\", r)\n        }\n\n        func createConnection() *sql.DB {\n          connStr := \"postgres://postgres:postgres@localhost:5432\n                      /example?sslmode=disable\"\n          db, err := sql.Open(\"postgres\", connStr)\n          if err != nil {\n            panic(err)\n          }\n          err = db.Ping()\n          if err != nil {\n            panic(err)\n          }\n          return db\n        }\n```"]