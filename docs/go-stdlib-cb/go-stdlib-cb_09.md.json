["```go\n        package main\n\n        import (\n          \"bufio\"\n          \"fmt\"\n          \"io\"\n          \"net\"\n        )\n\n        func main() {\n\n          l, err := net.Listen(\"tcp\", \":8080\")\n          if err != nil {\n            panic(err)\n          }\n          for {\n            fmt.Println(\"Waiting for client...\")\n            conn, err := l.Accept()\n            if err != nil {\n              panic(err)\n            }\n\n            msg, err := bufio.NewReader(conn).ReadString('\\n')\n            if err != nil {\n              panic(err)\n            }\n            _, err = io.WriteString(conn, \"Received: \"+string(msg))\n            if err != nil {\n              fmt.Println(err)\n            }\n            conn.Close()\n          }\n        }\n```", "```go\n        package main\n\n        import (\n          \"fmt\"\n          \"log\"\n          \"net\"\n        )\n\n        func main() {\n\n          pc, err := net.ListenPacket(\"udp\", \":7070\")\n          if err != nil {\n            log.Fatal(err)\n          }\n          defer pc.Close()\n\n          buffer := make([]byte, 2048)\n          fmt.Println(\"Waiting for client...\")\n          for {\n            _, addr, err := pc.ReadFrom(buffer)\n            if err == nil {\n              rcvMsq := string(buffer)\n              fmt.Println(\"Received: \" + rcvMsq)\n              if _, err := pc.WriteTo([]byte(\"Received: \"+rcvMsq), addr);\n              err != nil {\n                fmt.Println(\"error on write: \" + err.Error())\n              }\n            } else {\n              fmt.Println(\"error: \" + err.Error())\n            }\n          }\n        }\n```", "```go\n        package main\n\n        import (\n          \"fmt\"\n          \"log\"\n          \"net\"\n        )\n\n        func main() {\n\n          pc, err := net.ListenPacket(\"udp\", \":7070\")\n          if err != nil {\n            log.Fatal(err)\n          }\n          defer pc.Close()\n\n          buffer := make([]byte, 2048)\n          fmt.Println(\"Waiting for client...\")\n          for {\n\n            _, addr, err := pc.ReadFrom(buffer)\n            if err == nil {\n              rcvMsq := string(buffer)\n              fmt.Println(\"Received: \" + rcvMsq)\n              if _, err := pc.WriteTo([]byte(\"Received: \"+rcvMsq), addr);\n              err != nil {\n                fmt.Println(\"error on write: \" + err.Error())\n              }\n            } else {\n              fmt.Println(\"error: \" + err.Error())\n            }\n          }\n\n        }\n```", "```go\n        package main\n\n        import (\n          \"fmt\"\n          \"net/http\"\n        )\n\n        type SimpleHTTP struct{}\n\n        func (s SimpleHTTP) ServeHTTP(rw http.ResponseWriter,\n                            r *http.Request) {\n          fmt.Fprintln(rw, \"Hello world\")\n        }\n\n        func main() {\n          fmt.Println(\"Starting HTTP server on port 8080\")\n          // Eventually you can use\n          // http.ListenAndServe(\":8080\", SimpleHTTP{})\n          s := &http.Server{Addr: \":8080\", Handler: SimpleHTTP{}}\n          s.ListenAndServe()\n        }\n```", "```go\n        package main\n\n        import (\n          \"fmt\"\n          \"net/http\"\n        )\n\n        func main() {\n\n          mux := http.NewServeMux()\n          mux.HandleFunc(\"/user\", func(w http.ResponseWriter, \n                         r *http.Request) {\n            if r.Method == http.MethodGet {\n              fmt.Fprintln(w, \"User GET\")\n            }\n            if r.Method == http.MethodPost {\n              fmt.Fprintln(w, \"User POST\")\n            }\n          })\n\n          // separate handler\n          itemMux := http.NewServeMux()\n          itemMux.HandleFunc(\"/items/clothes\", func(w http.ResponseWriter,\n                             r *http.Request) {\n            fmt.Fprintln(w, \"Clothes\")\n          })\n          mux.Handle(\"/items/\", itemMux)\n\n          // Admin handlers\n          adminMux := http.NewServeMux()\n          adminMux.HandleFunc(\"/ports\", func(w http.ResponseWriter,\n                              r *http.Request) {\n            fmt.Fprintln(w, \"Ports\")\n          })\n\n          mux.Handle(\"/admin/\", http.StripPrefix(\"/admin\",\n                                adminMux))\n\n          // Default server\n          http.ListenAndServe(\":8080\", mux)\n\n        }\n```", "```go\n        package main\n\n        import (\n          \"io\"\n          \"net/http\"\n        )\n\n        func main() {\n\n          // Secured API\n          mux := http.NewServeMux()\n          mux.HandleFunc(\"/api/users\", Secure(func(w http.ResponseWriter,\n                         r *http.Request) {\n            io.WriteString(w,  `[{\"id\":\"1\",\"login\":\"ffghi\"},\n                           {\"id\":\"2\",\"login\":\"ffghj\"}]`)\n          }))\n\n          http.ListenAndServe(\":8080\", mux)\n\n        }\n\n        func Secure(h http.HandlerFunc) http.HandlerFunc {\n          return func(w http.ResponseWriter, r *http.Request) {\n            sec := r.Header.Get(\"X-Auth\")\n            if sec != \"authenticated\" {\n              w.WriteHeader(http.StatusUnauthorized)\n              return\n            }\n            h(w, r) // use the handler\n          }\n\n        }\n```", "```go\n        Hi, Go is awesome!\n```", "```go\n        <html>\n          <body>\n            Hi, I'm HTML body for index.html!\n          </body>\n        </html>\n```", "```go\n        package main\n\n        import (\n          \"net/http\"\n        )\n\n        func main() {\n\n          fileSrv := http.FileServer(http.Dir(\"html\"))\n          fileSrv = http.StripPrefix(\"/html\", fileSrv)\n\n          http.HandleFunc(\"/welcome\", serveWelcome)\n          http.Handle(\"/html/\", fileSrv)\n          http.ListenAndServe(\":8080\", nil)\n        }\n\n        func serveWelcome(w http.ResponseWriter, r *http.Request) {\n          http.ServeFile(w, r, \"welcome.txt\")\n        }\n```", "```go\n        <html>\n          <body>\n            Hi, I'm HTML body for index.html!\n          </body>\n        </html>\n```", "```go\n        package main\n\n        import \"net/http\"\n        import \"html/template\"\n\n        func main() {\n          tpl, err := template.ParseFiles(\"template.tpl\")\n          if err != nil {\n            panic(err)\n          }\n\n          http.HandleFunc(\"/\",func(w http.ResponseWriter, r *http.Request){\n            err := tpl.Execute(w, \"John Doe\")\n            if err != nil {\n              panic(err)\n            }\n          })\n          http.ListenAndServe(\":8080\", nil)\n        }\n```", "```go\n        package main\n\n        import (\n          \"fmt\"\n          \"log\"\n          \"net/http\"\n        )\n\n        func main() {\n          log.Println(\"Server is starting...\")\n\n          http.Handle(\"/secured/handle\",\n               http.RedirectHandler(\"/login\", \n                      http.StatusTemporaryRedirect))\n          http.HandleFunc(\"/secured/hadlefunc\", \n               func(w http.ResponseWriter, r *http.Request) {\n            http.Redirect(w, r, \"/login\", http.StatusTemporaryRedirect)\n          })\n          http.HandleFunc(\"/login\", func(w http.ResponseWriter,\n                          r *http.Request) {\n            fmt.Fprintf(w, \"Welcome user! Please login!\\n\")\n          })\n          if err := http.ListenAndServe(\":8080\", nil); err != nil {\n            panic(err)\n          }\n        }\n```", "```go\n        package main\n\n        import (\n          \"fmt\"\n          \"log\"\n          \"net/http\"\n          \"time\"\n        )\n\n        const cookieName = \"X-Cookie\"\n\n        func main() {\n          log.Println(\"Server is starting...\")\n\n          http.HandleFunc(\"/set\", func(w http.ResponseWriter,\n                          r *http.Request) {\n            c := &http.Cookie{\n              Name: cookieName,\n              Value: \"Go is awesome.\",\n              Expires: time.Now().Add(time.Hour),\n              Domain: \"localhost\",\n            }\n            http.SetCookie(w, c)\n            fmt.Fprintln(w, \"Cookie is set!\")\n          })\n          http.HandleFunc(\"/get\", func(w http.ResponseWriter,\n                          r *http.Request) {\n            val, err := r.Cookie(cookieName)\n            if err != nil {\n              fmt.Fprintln(w, \"Cookie err: \"+err.Error())\n              return\n            }\n            fmt.Fprintf(w, \"Cookie is: %s \\n\", val.Value)\n            fmt.Fprintf(w, \"Other cookies\")\n            for _, v := range r.Cookies() {\n              fmt.Fprintf(w, \"%s => %s \\n\", v.Name, v.Value)\n            }\n          })\n          http.HandleFunc(\"/remove\", func(w http.ResponseWriter,\n                          r *http.Request) {\n            val, err := r.Cookie(cookieName)\n            if err != nil {\n              fmt.Fprintln(w, \"Cookie err: \"+err.Error())\n              return\n            }\n            val.MaxAge = -1\n            http.SetCookie(w, val)\n            fmt.Fprintln(w, \"Cookie is removed!\")\n          })\n          if err := http.ListenAndServe(\":8080\", nil); err != nil {\n            panic(err)\n          }\n        }\n```", "```go\n        package main\n\n        import (\n          \"context\"\n          \"fmt\"\n          \"log\"\n          \"net/http\"\n          \"os\"\n          \"os/signal\"\n          \"time\"\n        )\n\n        func main() {\n\n          mux := http.NewServeMux()\n          mux.HandleFunc(\"/\",func(w http.ResponseWriter, r *http.Request){\n            fmt.Fprintln(w, \"Hello world!\")\n          })\n\n          srv := &http.Server{Addr: \":8080\", Handler: mux}\n          go func() {\n            if err := srv.ListenAndServe(); err != nil {\n              log.Printf(\"Server error: %s\\n\", err)\n            }\n          }()\n\n          log.Println(\"Server listening on : \" + srv.Addr)\n\n          stopChan := make(chan os.Signal)\n          signal.Notify(stopChan, os.Interrupt)\n\n          <-stopChan // wait for SIGINT\n          log.Println(\"Shutting down server...\")\n\n          ctx, cancel := context.WithTimeout(\n            context.Background(),\n            5*time.Second)\n          srv.Shutdown(ctx)\n          <-ctx.Done()\n          cancel()\n          log.Println(\"Server gracefully stopped\")\n        }\n```", "```go\n        package main\n\n        import (\n          \"fmt\"\n          \"net/http\"\n        )\n\n        type SimpleHTTP struct{}\n\n          func (s SimpleHTTP) ServeHTTP(rw http.ResponseWriter,\n                              r *http.Request) {\n            fmt.Fprintln(rw, \"Hello world\")\n          }\n\n          func main() {\n            fmt.Println(\"Starting HTTP server on port 8080\")\n            // Eventually you can use\n            // http.ListenAndServe(\":8080\", SimpleHTTP{})\n            s := &http.Server{Addr: \":8080\", Handler: SimpleHTTP{}}\n            if err := s.ListenAndServeTLS(\"server.crt\", \"server.key\");\n            err != nil {\n              panic(err)\n            }\n          }\n```", "```go\n        package main\n\n        import (\n          \"fmt\"\n          \"net/http\"\n        )\n\n        type StringServer string\n\n        func (s StringServer) ServeHTTP(rw http.ResponseWriter,\n                              req *http.Request) {\n          fmt.Printf(\"Prior ParseForm: %v\\n\", req.Form)\n          req.ParseForm()\n          fmt.Printf(\"Post ParseForm: %v\\n\", req.Form)\n          fmt.Println(\"Param1 is : \" + req.Form.Get(\"param1\"))\n          rw.Write([]byte(string(s)))\n        }\n\n        func createServer(addr string) http.Server {\n          return http.Server{\n            Addr: addr,\n            Handler: StringServer(\"Hello world\"),\n          }\n        }\n\n        func main() {\n          s := createServer(\":8080\")\n          fmt.Println(\"Server is starting...\")\n          if err := s.ListenAndServe(); err != nil {\n            panic(err)\n          }\n        }\n```", "```go\n curl -X POST -H \"Content-Type: app\nlication/x-www-form-urlencoded\" -d \"param1=data1&param2=data2\" \"localhost:8080?\nparam1=overriden&param3=data3\"\n```"]