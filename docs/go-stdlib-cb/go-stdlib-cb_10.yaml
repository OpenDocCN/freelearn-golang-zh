- en: Fun with Concurrency
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并发乐趣
- en: 'This chapter contains the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含以下教程：
- en: Synchronizing access to a resource with Mutex
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Mutex同步对资源的访问
- en: Creating a map for concurrent access
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为并发访问创建map
- en: Running a code block only once
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只运行一次代码块
- en: Pooling resources across multiple goroutines
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多个goroutines之间池化资源
- en: Synchronizing goroutines with WaitGroup
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用WaitGroup同步goroutines
- en: Getting the fastest result from multiple sources
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从多个来源获取最快的结果
- en: Propagating errors with errgroup
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用errgroup传播错误
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: The programming of concurrent behavior is always hard. Go has pretty good mechanisms for
    managing the concurrency in the form of channels. Besides the channels as a synchronization
    mechanism, the Go standard library provides the package to handle the concurrent
    parts of the more traditional core way. This chapter describes how to leverage
    the sync package for implementing common synchronization tasks. The final recipe
    will show the simplification of error propagation for a group of goroutines.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 并发行为的编程总是很困难的。Go具有非常好的机制来管理并发，如通道。除了通道作为同步机制外，Go标准库还提供了处理更传统核心方式的并发部分的包。本章描述了如何利用sync包来实现常见的同步任务。最后一个教程将展示如何简化一组goroutines的错误传播。
- en: Check if Go is properly installed. The *Getting ready* section in the *Retrieving
    Golang version* recipe of *[Chapter 1](acf67248-0aa9-4150-a43b-d13eb9de89f2.xhtml),*
    *Interacting with the Environment,* will help you.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 检查Go是否已正确安装。*[第1章](acf67248-0aa9-4150-a43b-d13eb9de89f2.xhtml)*的*检索Golang版本*教程中的*准备就绪*部分将对你有所帮助。
- en: Make sure the ports `8080` and `7070` are not used by another application.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 确保端口`8080`和`7070`没有被其他应用程序使用。
- en: Synchronizing access to a resource with Mutex
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Mutex同步对资源的访问
- en: In case the code uses the concurrent access to any resource which is considered
    to be unsafe for concurrent use, it is necessary to implement a synchronization
    mechanism to secure the access. Besides the channel usage, Mutex could be leveraged
    for this purpose. This recipe will show you how.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果代码使用并发访问被认为对并发使用不安全的任何资源，就需要实现同步机制来保护访问。除了使用通道，还可以利用互斥锁来实现这一目的。这个教程将向你展示如何做到这一点。
- en: How to do it...
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter10/recipe01`.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter10/recipe01`。
- en: Navigate to the directory.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the file `mutex.go` with the following content:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件`mutex.go`，内容如下：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Execute the code by `go run mutex.go`.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`go run mutex.go`执行代码。
- en: 'See the output:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看输出：
- en: '![](img/74cd4a32-0ae7-4ae9-a01d-818c46a48289.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/74cd4a32-0ae7-4ae9-a01d-818c46a48289.png)'
- en: How it works...
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The synchronization primitive `Mutex` is provided by the package `sync`. The
    `Mutex` works as a lock above the secured section or resource. Once the `goroutine`
    calls `Lock` on the `Mutex` and the `Mutex` is in the unlocked state, the `Mutex`
    becomes locked and the `goroutine` gets exclusive access to the critical section.
    In case the `Mutex` is in the locked state, the `goroutine` calls the `Lock` method.
    This `goroutine` is blocked and needs to wait until the `Mutex` gets unlocked
    again.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 同步原语`Mutex`由`sync`包提供。`Mutex`作为一个锁，用于保护部分或资源。一旦`goroutine`在`Mutex`上调用`Lock`并且`Mutex`处于未锁定状态，`Mutex`就会被锁定，`goroutine`就可以独占地访问临界区。如果`Mutex`处于锁定状态，`goroutine`调用`Lock`方法。这个`goroutine`会被阻塞，需要等待`Mutex`再次解锁。
- en: Note that in the example, we use the `Mutex` to synchronize access on a slice
    primitive, which is considered to be unsafe for the concurrent use.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在示例中，我们使用`Mutex`来同步对切片原语的访问，这被认为是不安全的并发使用。
- en: The important fact is that the `Mutex` cannot be copied after its first use.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的事实是`Mutex`在第一次使用后不能被复制。
- en: Creating map for concurrent access
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为并发访问创建map
- en: The map primitive in Golang should be considered as unsafe for concurrent access.
    In the previous recipe, we described how to synchronize access to the resource
    with Mutex, which could also be leveraged with access to the map primitive. But
    the Go standard library also provides the map structure designed for concurrent
    access. This recipe will illustrate how to work with it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在Golang中，map原语应被视为不安全的并发访问。在上一个教程中，我们描述了如何使用Mutex同步对资源的访问，这也可以用于对map原语的访问。但是Go标准库还提供了专为并发访问设计的map结构。这个教程将说明如何使用它。
- en: How to do it...
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter10/recipe02`.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter10/recipe02`。
- en: Navigate to the directory.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the file `map.go` with the following content:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件`map.go`，内容如下：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Execute the code by `go run map.go`.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`go run map.go`执行代码。
- en: 'See the output:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看输出：
- en: '![](img/45f734cb-36b0-4b7a-85c7-e88fbef33ba4.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/45f734cb-36b0-4b7a-85c7-e88fbef33ba4.png)'
- en: How it works...
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The package `sync`, contains the structure `Map` that is designed to be used
    concurrently from multiple Go routines. The `Map` struct, with its methods, mimics
    the behavior of the map primitive. The `Store` method is the equivalent of the
    `m[key] = val` statement. The `Load` method is equal to `val, ok := m[key]` and
    the  `Range` method provides the ability to iterate through the map. Note that
    the `Range` function works with the current state of `Map`, so if the values are
    changed during the running `Range` method, the changes are reflected, but only
    if the key wasn't already visited. The `Range` function visits its keys only once.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`sync`包中包含了`Map`结构，该结构被设计用于从多个Go例程中并发使用。`Map`结构及其方法模仿了map原语的行为。`Store`方法相当于`m[key]
    = val`语句。`Load`方法相当于`val, ok := m[key]`，`Range`方法提供了遍历map的能力。请注意，`Range`函数与`Map`的当前状态一起工作，因此如果在运行`Range`方法期间更改了值，则会反映这些更改，但前提是该键尚未被访问。`Range`函数只会访问其键一次。'
- en: Running a code block only once
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 只运行一次代码块
- en: In situations when multiple goroutines run the same code and there is a code
    block that initializes, for example, shared resource, the Go standard library
    offers the solution, which will be described further.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在多个goroutine运行相同代码的情况下，例如，有一个初始化共享资源的代码块，Go标准库提供了解决方案，将在下文中描述。
- en: How to do it...
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter10/recipe03`.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter10/recipe03`。
- en: Navigate to the directory.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the file `once.go` with the following content:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件`once.go`，内容如下：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Execute the code by `go run once.go`.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`go run once.go`执行代码。
- en: 'See the output:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看输出：
- en: '![](img/4e9a0641-c657-405e-9403-e46cea0a4fcd.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e9a0641-c657-405e-9403-e46cea0a4fcd.png)'
- en: How it works...
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The sample code illustrates the lazy loading of the data while accessing the
    container structure. As the data should be loaded only once, the `Once` struct
    from the sync package is used in the method `Pop`. The `Once` implements only
    one method called `Do` which consumes the `func` with no arguments and the function
    is executed only once per `Once` instance, during the execution.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 示例代码说明了在访问容器结构时数据的延迟加载。由于数据只应加载一次，因此在`Pop`方法中使用了`sync`包中的`Once`结构。`Once`只实现了一个名为`Do`的方法，该方法消耗了一个无参数的`func`，并且该函数在每个`Once`实例的执行期间只执行一次。
- en: The `Do` method calls blocks until the first run is done. This fact corresponds
    with the fact that `Once` is intended to be used for initialization.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`Do`方法调用会阻塞，直到第一次运行完成。这一事实与`Once`旨在用于初始化的事实相对应。'
- en: Pooling resources across multiple goroutines
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在多个goroutine之间池化资源
- en: Resource pooling is the traditional way to improve performance and save resources.
    Usually, it is worth pooling the resources with expensive initialization. The
    Go standard library provides the skeleton structure for a resource pool, which
    is considered to be safe for multiple goroutines access. This recipe describes
    how to use it.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 资源池是提高性能和节省资源的传统方式。通常，值得使用昂贵初始化的资源进行池化。Go标准库提供了用于资源池的骨架结构，被认为对多个goroutine访问是安全的。本示例描述了如何使用它。
- en: How to do it...
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter10/recipe04`.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter10/recipe04`。
- en: Navigate to the directory.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the file `pool.go` with the following content:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件`pool.go`，内容如下：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Execute the code by `go run pool.go`.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`go run pool.go`执行代码。
- en: 'See the output:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看输出：
- en: '![](img/4b1f1b1a-910b-46ea-8e86-82980e37e096.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4b1f1b1a-910b-46ea-8e86-82980e37e096.png)'
- en: How it works...
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `sync` package contains the struct for pooling the resources. The `Pool`
    struct has the `Get` and `Put` method to retrieve and put the resource back to
    the pool. The `Pool` struct is considered to be safe for concurrent access.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`sync`包包含了用于池化资源的结构。`Pool`结构具有`Get`和`Put`方法，用于检索资源并将其放回池中。`Pool`结构被认为对并发访问是安全的。'
- en: While creating the `Pool` struct, the `New` field needs to be set. The `New`
    field is a no-argument function that should return the pointer to the pooled item.
    This function is then called in case the new object in the pool needs to be initialized.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建`Pool`结构时，需要设置`New`字段。`New`字段是一个无参数函数，应该返回指向池化项目的指针。如果需要初始化池中的新对象，则会调用此函数。
- en: Note from the logs of the preceding example, that the `Worker` is reused while
    returned to the pool. The important fact is that there shouldn't be any assumption
    related to the retrieved items by `Get` and returned items to `Put` method (like
    I've put three objects to pool just now, so there will be at least three available).
    This is mainly caused by the fact that that the idle items in a `Pool` could be
    automatically removed at any time.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面示例的日志中可以看出，`Worker`在返回到池中时被重用。重要的事实是，不应该对`Get`检索的项目和`Put`方法返回的项目做任何假设（比如我刚刚把三个对象放到池中，所以至少会有三个可用）。这主要是因为`Pool`中的空闲项目可能随时被自动删除。
- en: The pooling of resources is usually worth it if the resource initialization
    is expensive. Still, the management of resources brings some additional cost.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果资源初始化很昂贵，资源池化通常是值得的。然而，资源的管理也带来了一些额外的成本。
- en: Synchronizing goroutines with WaitGroup
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用WaitGroup同步goroutine
- en: While working with concurrently running code branches, it is no exception that
    at some point the program needs to wait for concurrently running parts of the
    code. This recipe gives insight into how to use the `WaitGroup` to wait for running
    goroutines.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理并发运行的代码分支时，程序在某个时刻需要等待并发运行的代码部分。本示例介绍了如何使用`WaitGroup`等待运行的goroutine。
- en: How to do it...
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter10/recipe05`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter10/recipe05`。
- en: Navigate to the directory.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the file `syncgroup.go` with the following content:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件`syncgroup.go`，内容如下：
- en: '[PRE4]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Execute the code by `go run syncgroup.go`.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`go run syncgroup.go`执行代码。
- en: 'See the output:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看输出：
- en: '![](img/ecce87d6-6a87-44ff-a4d1-d0fcc182549d.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ecce87d6-6a87-44ff-a4d1-d0fcc182549d.png)'
- en: How it works...
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: With help of the  `WaitGroup` struct from the `sync` package, the program run
    is able to wait until some finite number of goroutines finish. The `WaitGroup`
    struct implements the method `Add` to add the number of goroutines to wait for.
    Then after the goroutine finishes,  the `Done` method should be called to decrement
    the number of goroutines to wait for. The method `Wait` is called as a block until
    the given number of `Done` calls has been done (usually at the end of a `goroutine`).
    The `WaitGroup` should be used the same way as all synchronization primitives
    within the sync package. After the creation of the object, the struct should not
    be copied.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`sync`包中的`WaitGroup`结构，程序可以等待有限数量的goroutine完成运行。`WaitGroup`结构实现了`Add`方法，用于添加要等待的goroutine数量。然后在goroutine完成后，应调用`Done`方法来减少要等待的goroutine数量。`Wait`方法被调用时会阻塞，直到完成给定数量的`Done`调用（通常在`goroutine`结束时）。`WaitGroup`应该与`sync`包中的所有同步原语一样使用。在创建对象后，结构不应被复制。
- en: Getting the fastest result from multiple sources
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从多个来源获取最快的结果
- en: In some cases, for example, while integrating information retrieval from multiple
    sources, you only need the first result, the fastest one, and the other results
    are irrelevant after that. An example from the real world could be extracting
    the currency rate to count the price. You have multiple third-party services and
    because you need to show the prices as fast as possible, you need only the first
    rate received from any service. This recipe will show the pattern for how to achieve
    such behavior.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，例如，在整合来自多个来源的信息检索时，您只需要第一个结果，最快的结果，其他结果在那之后就不相关了。现实世界中的一个例子可能是提取货币汇率以计算价格。您有多个第三方服务，因为您需要尽快显示价格，所以只需要从任何服务接收到的第一个汇率。本教程将展示如何实现这种行为的模式。
- en: How to do it...
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter10/recipe06`.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹 `chapter10/recipe06`。
- en: Navigate to the directory.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the file `first.go` with following content:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件 `first.go`，内容如下：
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Execute the code by `go run first.go`.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过 `go run first.go` 执行代码。
- en: 'See the output:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看输出：
- en: '![](img/2011444d-0d1e-4b2b-afb4-2806dc133819.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2011444d-0d1e-4b2b-afb4-2806dc133819.png)'
- en: How it works...
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The preceding code proposes the solution on executing multiple tasks that output
    some results, and we need only the first fastest one. The solution uses the `Context`
    with the cancel function to call cancel once the first result is obtained. The
    `SearchSrc` structure provides the `Search` method that results in a  channel
    where the result is written. Note that the `Search` method simulates the delay
    with the `time.Sleep` function. The merge function, for each channel from the `Search`
    method, triggers the `goroutine` that writes to the final output channel that
    is read in the `main` method. While the first result is received from the output
    channel produced from the `merge` function, the `CancelFunc` stored in the variable
    `cancel` is called to cancel the rest of the processing.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码提出了执行多个任务并输出一些结果的解决方案，我们只需要最快的一个。解决方案使用 `Context` 和取消函数来在获得第一个结果后调用取消。`SearchSrc`
    结构提供了 `Search` 方法，该方法会导致写入结果的通道。请注意，`Search` 方法使用 `time.Sleep` 函数模拟延迟。对于来自 `Search`
    方法的每个通道，合并函数触发写入最终输出通道的 `goroutine`，该通道在 `main` 方法中读取。从 `merge` 函数产生的输出通道接收到第一个结果时，将调用存储在变量
    `cancel` 中的 `CancelFunc` 来取消其余处理。
- en: Be aware that the `Search` method still needs to end, even if its result would
    not be processed; so this needs to be handled to avoid the `goroutine` and channel
    leak.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`Search` 方法仍然需要结束，即使其结果不会被处理；因此，需要处理以避免 `goroutine` 和通道泄漏。
- en: Propagating errors with errgroup
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 errgroup 传播错误
- en: This recipe will show how to easily use the errgroup extension package to detect
    the error within the group of goroutines that run subtasks, within a common task.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将展示如何轻松使用 errgroup 扩展包来检测 goroutine 组中运行子任务的错误。
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter10/recipe07`.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹 `chapter10/recipe07`。
- en: Navigate to the directory.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the file `lines.go` with the following content:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件 `lines.go`，内容如下：
- en: '[PRE6]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Execute the code by `go run lines.go`.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过 `go run lines.go` 执行代码。
- en: 'See the output:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看输出：
- en: '![](img/424e9afe-d9e4-4440-ab5a-1eba1b4e7aeb.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/424e9afe-d9e4-4440-ab5a-1eba1b4e7aeb.png)'
- en: How it works...
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `golang.org/x/sync/errgroup` package helps to simplify the error propagation
    and cancellation by context for goroutine groups. The `Group` contains the Go
    method which consumes the no-arg function returning the `error`. This function
    should contain the task which should be done by the executed `goroutine`. The
    `Wait` method of the `Group` from `errgroup` waits until all executed tasks from
    the Go method are complete, and if any of them are returned `err`, then the first
    non-nil error is returned. This way, it is possible to simply propagate the error
    from the group of running goroutines.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`golang.org/x/sync/errgroup` 包有助于简化 goroutine 组的错误传播和上下文取消。`Group` 包含消耗无参数函数返回
    `error` 的 Go 方法。此函数应包含应由执行的 `goroutine` 完成的任务。`errgroup` 的 `Group` 的 `Wait` 方法等待直到
    Go 方法中执行的所有任务完成，如果其中任何一个返回 `err`，则返回第一个非空错误。这样，就可以简单地从运行的 goroutine 组中传播错误。'
- en: Note that the `Group` is also created with the use of context. The `Context`
    serves as the mechanism to cancel other tasks, if the error occurs. After the
    `goroutine` function returns the `error` , the inner implementation cancels the
    context and so could be the running task.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`Group` 也是使用上下文创建的。`Context` 用作取消其他任务的机制，如果发生错误。在 `goroutine` 函数返回 `error`
    后，内部实现会取消上下文，因此正在运行的任务也可能会被取消。
