["```go\n        package main\n\n        import (\n          \"log\"\n          \"os\"\n        )\n\n        func main() {\n          custLogger := log.New(os.Stdout, \"custom1: \",\n                                log.Ldate|log.Ltime)\n          custLogger.Println(\"Hello I'm customized\")\n\n          custLoggerEnh := log.New(os.Stdout, \"custom2: \",\n                                   log.Ldate|log.Lshortfile)\n          custLoggerEnh.Println(\"Hello I'm customized logger 2\")\n\n        }\n```", "```go\n        package main\n\n        import (\n          \"strconv\"\n          \"testing\"\n        )\n\n        func TestSampleOne(t *testing.T) {\n          expected := \"11\"\n          result := strconv.Itoa(10)\n          compare(expected, result, t)\n        }\n\n        func TestSampleTwo(t *testing.T) {\n          expected := \"11\"\n          result := strconv.Itoa(10)\n          compareWithHelper(expected, result, t)\n        }\n\n        func TestSampleThree(t *testing.T) {\n          expected := \"10\"\n          result := strconv.Itoa(10)\n          compare(expected, result, t)\n        }\n\n        func compareWithHelper(expected, result string, t *testing.T) {\n          t.Helper()\n          if expected != result {\n            t.Fatalf(\"Expected result %v does not match result %v\",\n                     expected, result)\n          }\n        }\n\n        func compare(expected, result string, t *testing.T) {\n          if expected != result {\n            t.Fatalf(\"Fail: Expected result %v does not match result %v\",\n                     expected, result)\n          }\n          t.Logf(\"OK: Expected result %v = %v\",\n                 expected, result)\n        }\n```", "```go\n        package main\n\n        import (\n          \"log\"\n          \"testing\"\n        )\n\n        func BenchmarkSampleOne(b *testing.B) {\n          logger := log.New(devNull{}, \"test\", log.Llongfile)\n          b.ResetTimer()\n          b.StartTimer()\n          for i := 0; i < b.N; i++ {\n            logger.Println(\"This si awesome\")\n          }\n          b.StopTimer()\n        }\n\n        type devNull struct{}\n\n        func (d devNull) Write(b []byte) (int, error) {\n          return 0, nil\n        }\n```", "```go\n        package main\n\n        import (\n          \"fmt\"\n          \"strconv\"\n          \"testing\"\n        )\n\n        var testData = []int{10, 11, 017}\n\n        func TestSampleOne(t *testing.T) {\n          expected := \"10\"\n          for _, val := range testData {\n            tc := val\n            t.Run(fmt.Sprintf(\"input = %d\", tc), func(t *testing.T) {\n              if expected != strconv.Itoa(tc) {\n                t.Fail()\n              }\n            })\n          }\n        }\n```", "```go\n        package main\n\n        import (\n          \"fmt\"\n          \"io/ioutil\"\n          \"net/http\"\n          \"net/http/httptest\"\n          \"testing\"\n          \"time\"\n        )\n\n        const cookieName = \"X-Cookie\"\n\n        func HandlerUnderTest(w http.ResponseWriter, r *http.Request) {\n          http.SetCookie(w, &http.Cookie{\n            Domain: \"localhost\",\n            Expires: time.Now().Add(3 * time.Hour),\n            Name: cookieName,\n          })\n          r.ParseForm()\n          username := r.FormValue(\"username\")\n          fmt.Fprintf(w, \"Hello %s!\", username)\n        }\n\n        func TestHttpRequest(t *testing.T) {\n\n          req := httptest.NewRequest(\"GET\",\n                          \"http://unknown.io?username=John\", nil)\n          w := httptest.NewRecorder()\n          HandlerUnderTest(w, req)\n\n          var res *http.Cookie\n          for _, c := range w.Result().Cookies() {\n            if c.Name == cookieName {\n              res = c\n            }\n          }\n\n          if res == nil {\n            t.Fatal(\"Cannot find \" + cookieName)\n          }\n\n          content, err := ioutil.ReadAll(w.Result().Body)\n          if err != nil {\n            t.Fatal(\"Cannot read response body\")\n          }\n\n          if string(content) != \"Hello John!\" {\n            t.Fatal(\"Content not matching expected value\")\n          }\n        }\n```", "```go\n        package main\n\n        import (\n          \"fmt\"\n          \"reflect\"\n        )\n\n        type Person struct {\n          Name string `json:\"p_name\" bson:\"pName\"`\n          Age int `json:\"p_age\" bson:\"pAge\"`\n        }\n\n        func main() {\n          f := &Person{\"Tom\", 30}\n          describe(f)\n        }\n\n        func describe(f interface{}) {\n          val := reflect.TypeOf(f).Elem()\n          for i := 0; i < val.NumField(); i++ {\n            typeF := val.Field(i)\n            fieldName := typeF.Name\n            jsonTag := typeF.Tag.Get(\"json\")\n            bsonTag := typeF.Tag.Get(\"bson\")\n            fmt.Printf(\"Field : %s jsonTag: %s bsonTag: %s\\n\",\n                       fieldName, jsonTag, bsonTag)\n          }\n        }\n```", "```go\n        package main\n\n        import (\n          \"fmt\"\n          \"sort\"\n        )\n\n        type Gopher struct {\n          Name string\n          Age int\n        }\n\n        var data = []Gopher{\n          {\"Daniel\", 25},\n          {\"Tom\", 19},\n          {\"Murthy\", 33},\n        }\n\n        type Gophers []Gopher\n\n        func (g Gophers) Len() int {\n          return len(g)\n        }\n\n        func (g Gophers) Less(i, j int) bool {\n          return g[i].Age > g[j].Age\n        }\n\n        func (g Gophers) Swap(i, j int) {\n          tmp := g[j]\n          g[j] = g[i]\n          g[i] = tmp\n        }\n\n        func main() {\n\n          sort.Slice(data, func(i, j int) bool {\n            return sort.StringsAreSorted([]string{data[i].Name, \n                                      data[j].Name})\n          })\n\n          fmt.Printf(\"Sorted by name: %v\\n\", data)\n\n          gophers := Gophers(data)\n          sort.Sort(gophers)\n\n          fmt.Printf(\"Sorted by age: %v\\n\", data)\n\n        }\n```", "```go\n        package main\n\n        import (\n          \"fmt\"\n          \"log\"\n          \"net/http\"\n        )\n\n         func main() {\n\n           log.Println(\"Staring server...\")\n           // Adding to mani Mux\n           mainMux := http.NewServeMux()\n           mainMux.Handle(\"/api/\",\n           http.StripPrefix(\"/api\", restModule()))\n           mainMux.Handle(\"/ui/\",\n           http.StripPrefix(\"/ui\", uiModule()))\n\n           if err := http.ListenAndServe(\":8080\", mainMux); err != nil {\n             panic(err)\n           }\n\n         }\n\n         func restModule() http.Handler {\n           // Separate Mux for all REST\n           restApi := http.NewServeMux()\n           restApi.HandleFunc(\"/users\", func(w http.ResponseWriter,\n                              r *http.Request) {\n             w.Header().Set(\"Content-Type\", \"application/json\")\n             fmt.Fprint(w, `[{\"id\":1,\"name\":\"John\"}]`)\n           })\n           return restApi\n         }\n\n         func uiModule() http.Handler {\n           // Separate Mux for all UI\n           ui := http.NewServeMux()\n           ui.HandleFunc(\"/users\", func(w http.ResponseWriter, \n                         r *http.Request) {\n             w.Header().Set(\"Content-Type\", \"text/html\")\n             fmt.Fprint(w, `<html><body>Hello from UI!</body></html>`)\n           })\n\n           return ui\n         }\n```", "```go\n        package main\n\n        import (\n          \"io\"\n          \"log\"\n          \"net/http\"\n        )\n\n        func main() {\n\n          log.Println(\"Staring server...\")\n          // Adding to mani Mux\n          http.HandleFunc(\"/\",func(w http.ResponseWriter, r *http.Request){\n            if p, ok := w.(http.Pusher); ok {\n              if err := p.Push(\"/app.css\", nil); err != nil {\n                log.Printf(\"Push err : %v\", err)\n              }\n            }\n            io.WriteString(w,\n              `<html>\n                 <head>\n                   <link rel=\"stylesheet\" type=\"text/css\" href=\"app.css\">\n                 </head>\n                 <body>\n                   <p>Hello</p>\n                 </body>\n               </html>`\n             )\n           })\n           http.HandleFunc(\"/app.css\", func(w http.ResponseWriter,\n                           r *http.Request) {\n             io.WriteString(w,\n               `p {\n                 text-align: center;\n                 color: red;\n               }`)\n           })\n\n           if err := http.ListenAndServeTLS(\":8080\", \"server.crt\",\n                                            \"server.key\", nil);\n           err != nil {\n             panic(err)\n           }\n\n         }\n```"]