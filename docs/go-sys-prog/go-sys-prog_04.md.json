["```go\npackage main \n\nimport ( \n   \"fmt\" \n   \"sort\" \n) \n\ntype aStructure struct { \n   person string \n   height int \n   weight int \n} \n```", "```go\nfunc main() { \n\n   mySlice := make([]aStructure, 0) \n   a := aStructure{\"Mihalis\", 180, 90}\n\n   mySlice = append(mySlice, a) \n   a = aStructure{\"Dimitris\", 180, 95} \n   mySlice = append(mySlice, a) \n   a = aStructure{\"Marietta\", 155, 45} \n   mySlice = append(mySlice, a) \n   a = aStructure{\"Bill\", 134, 40} \n   mySlice = append(mySlice, a)\n```", "```go\n   fmt.Println(\"0:\", mySlice) \n   sort.Slice(mySlice, func(i, j int) bool { \n         return mySlice[i].weight <mySlice[j].weight \n   }) \n   fmt.Println(\"<:\", mySlice) \n   sort.Slice(mySlice, func(i, j int) bool { \n         return mySlice[i].weight >mySlice[j].weight \n   }) \n   fmt.Println(\">:\", mySlice) \n} \n```", "```go\n$ go run sortSlice.go\n0: [{Mihalis 180 90} {Dimitris 180 95} {Marietta 155 45} {Bill 134 40}]\n<: [{Bill 134 40} {Marietta 155 45} {Mihalis 180 90} {Dimitris 180 95}]\n>: [{Dimitris 180 95} {Mihalis 180 90} {Marietta 155 45} {Bill 134 40}]\n```", "```go\n$ go version\ngo version go1.3.3 linux/amd64\n$ go run sortSlice.go\n# command-line-arguments\n./sortSlice.go:27: undefined: sort.Slice\n./sortSlice.go:31: undefined: sort.Slice\n```", "```go\npackage main \n\nimport ( \n   \"fmt\" \n) \n```", "```go\ntype Node struct { \n   Value int \n   Next  *Node \n} \n\nfunc addNode(t *Node, v int) int { \n   if root == nil { \n         t = &Node{v, nil} \n         root = t \n         return 0 \n   } \n\n   if v == t.Value { \n         fmt.Println(\"Node already exists:\", v) \n         return -1 \n   } \n\n   if t.Next == nil { \n         t.Next = &Node{v, nil} \n         return -2 \n   } \n\n   return addNode(t.Next, v)\n\n} \n```", "```go\nfunc traverse(t *Node) { \n   if t == nil { \n         fmt.Println(\"-> Empty list!\") \n         return \n   } \n\n   for t != nil {\n\n         fmt.Printf(\"%d -> \", t.Value) \n         t = t.Next \n   } \n   fmt.Println() \n} \n```", "```go\nvar root = new(Node)\nfunc main() { \n   fmt.Println(root) \n   root = nil \n   traverse(root) \n   addNode(root, 1) \n   addNode(root, 1) \n   traverse(root) \n   addNode(root, 10) \n   addNode(root, 5) \n   addNode(root, 0) \n   addNode(root, 0) \n   traverse(root) \n   addNode(root, 100) \n   traverse(root) \n}\n```", "```go\n$ go run linkedList.go\n&{0 <nil>}\n-> Empty list!\nNode already exists: 1\n1 ->\nNode already exists: 0\n1 -> 10 -> 5 -> 0 ->\n1 -> 10 -> 5 -> 0 -> 100 ->\n```", "```go\npackage main \n\nimport ( \n   \"fmt\" \n   \"math/rand\" \n   \"time\" \n) \ntype Tree struct { \n   Left  *Tree \n   Value int \n   Right *Tree \n} \n```", "```go\nfunc traverse(t *Tree) { \n   if t == nil { \n         return \n   } \n   traverse(t.Left) \n   fmt.Print(t.Value, \" \") \n   traverse(t.Right) \n} \n\nfunc create(n int) *Tree { \n   var t *Tree \n   rand.Seed(time.Now().Unix()) \n   for i := 0; i< 2*n; i++ { \n         temp := rand.Intn(n) \n         t = insert(t, temp) \n   } \n   return t \n} \n\nfunc insert(t *Tree, v int) *Tree { \n   if t == nil { \n         return&Tree{nil, v, nil} \n   } \n   if v == t.Value { \n         return t \n   } \n   if v <t.Value { \n         t.Left = insert(t.Left, v) \n         return t \n   } \n   t.Right = insert(t.Right, v) \n   return t \n} \n```", "```go\nfunc main() { \n   tree := create(30) \n   traverse(tree) \n   fmt.Println() \n   fmt.Println(\"The value of the root of the tree is\", tree.Value) \n} \n```", "```go\n$ go run tree.go\n0 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 21 22 23 24 25 26 27 28 29\nThe value of the root of the tree is 16\n```", "```go\npackage main \n\nimport ( \n   \"fmt\" \n) \n\ntype Node struct { \n   Value int \n   Next  *Node \n} \n\ntype HashTablestruct { \n   Table map[int]*Node\n\n   Size  int \n} \n```", "```go\nfunc hashFunction(i, size int) int { \n   return (i % size) \n} \n\nfunc insert(hash *HashTable, value int) int { \n   index := hashFunction(value, hash.Size) \n   element := Node{Value: value, Next: hash.Table[index]} \n   hash.Table[index] = &element \n   return index \n} \n\nfunc traverse(hash *HashTable) { \n   for k := range hash.Table { \n         if hash.Table[k] != nil { \n               t := hash.Table[k] \n               for t != nil { \n                     fmt.Printf(\"%d -> \", t.Value) \n                     t = t.Next \n               } \n               fmt.Println() \n         } \n   } \n}\n```", "```go\nfunc main() { \n   table := make(map[int]*Node, 10) \n   hash := &HashTable{Table: table, Size: 10} \n   fmt.Println(\"Number of spaces:\", hash.Size) \n   for i := 0; i< 95; i++ { \n         insert(hash, i) \n   } \n   traverse(hash) \n} \n```", "```go\n$ go run hash.go\nNumber of spaces: 10 89 -> 79 -> 69 -> 59 -> 49 -> 39 -> 29 -> 19 -> 9 ->\n86 -> 76 -> 66 -> 56 -> 46 -> 36 -> 26 -> 16 -> 6 ->\n92 -> 82 -> 72 -> 62 -> 52 -> 42 -> 32 -> 22 -> 12 -> 2 ->\n94 -> 84 -> 74 -> 64 -> 54 -> 44 -> 34 -> 24 -> 14 -> 4 ->\n85 -> 75 -> 65 -> 55 -> 45 -> 35 -> 25 -> 15 -> 5 ->\n87 -> 77 -> 67 -> 57 -> 47 -> 37 -> 27 -> 17 -> 7 ->\n88 -> 78 -> 68 -> 58 -> 48 -> 38 -> 28 -> 18 -> 8 ->\n90 -> 80 -> 70 -> 60 -> 50 -> 40 -> 30 -> 20 -> 10 -> 0 ->\n91 -> 81 -> 71 -> 61 -> 51 -> 41 -> 31 -> 21 -> 11 -> 1 ->\n93 -> 83 -> 73 -> 63 -> 53 -> 43 -> 33 -> 23 -> 13 -> 3 ->\n```", "```go\npackage aSimplePackage \n\nimport ( \n   \"fmt\" \n) \n```", "```go\nconst Pi = \"3.14159\" \n\nfunc Add(x, y int) int { \n   return x + y \n} \n\nfunc Println(x int) { \n   fmt.Println(x) \n} \n```", "```go\n$ mkdir ~/go\n$ mkdir ~/go/src\n$ mkdir ~/go/src/aSimplePackage\n$ export GOPATH=~/go\n$ vi ~/go/src/aSimplePackage/aSimplePackage.go\n$ go install aSimplePackage \n```", "```go\n$ ls -lR ~/go\ntotal 0\ndrwxr-xr-x  3 mtsouk  staff  102 Apr  4 22:35 pkg\ndrwxr-xr-x  3 mtsouk  staff  102 Apr  4 22:35 src\n\n/Users/mtsouk/go/pkg:\ntotal 0\ndrwxr-xr-x  3 mtsouk  staff  102 Apr  4 22:35 darwin_amd64\n\n/Users/mtsouk/go/pkg/darwin_amd64:\ntotal 8\n-rw-r--r--  1 mtsouk  staff  2918 Apr  4 22:35 aSimplePackage.a\n\n/Users/mtsouk/go/src:\ntotal 0\ndrwxr-xr-x  3 mtsouk  staff  102 Apr  4 22:35 aSimplePackage\n\n/Users/mtsouk/go/src/aSimplePackage:\ntotal 8\n-rw-r--r--  1 mtsouk  staff  148 Apr  4 22:30 aSimplePackage.go\n```", "```go\n$ diff aSimplePackage.go anotherPackage.go\n1c1\n<packageaSimplePackage\n---\n>packageanotherPackage\n7a8\n>const version = \"1.1\"\n15a17,20\n>\n>func Version() {\n>     fmt.Println(\"The version of the package is\", version)\n> }\n```", "```go\nfunc init() { \n   fmt.Println(\"The init function of anotherPackage\") \n} \n```", "```go\npackage main \n\nimport ( \n   \"aSimplePackage\" \n   \"fmt\" \n) \n\nfunc main() { \n   temp := aSimplePackage.Add(5, 10) \n   fmt.Println(temp)\n\n   fmt.Println(aSimplePackage.Pi) \n} \n```", "```go\n$ go run usePackage.go\nusePackage.go:4:2: cannot find package \"aSimplePackage\" in any of:\n      /usr/local/Cellar/go/1.8/libexec/src/aSimplePackage (from $GOROOT)\n      /Users/mtsouk/go/src/aSimplePackage (from $GOPATH)\n```", "```go\n$ go run usePackage.go\n15\n3.14159\n```", "```go\npackage main \n\nimport ( \n   \"anotherPackage\" \n   \"fmt\" \n) \n\nfunc main() { \n   anotherPackage.Version() \n   fmt.Println(anotherPackage.version) \n   fmt.Println(anotherPackage.Pi) \n} \n```", "```go\n$ go run privateFail.go\n# command-line-arguments\n./privateFail.go:10: cannot refer to unexported name anotherPackage.version\n./privateFail.go:10: undefined: anotherPackage.version\n```", "```go\n$ go run privateFail.go\nThe init function of anotherPackage\nThe version of the package is 1.1\n3.14159\n```", "```go\npackage main \n\nimport ( \n   \"fmt\" \n   _ \"github.com/go-sql-driver/mysql\"\n) \n\nfunc main() { \n   fmt.Println(\"Using the MySQL Go driver!\") \n} \n```", "```go\n$ go run useMySQL.go\nuseMySQL.go:5:2: cannot find package \"github.com/go-sql-driver/mysql\" in any of:\n      /usr/local/Cellar/go/1.8/libexec/src/github.com/go-sql-driver/mysql (from $GOROOT)\n      /Users/mtsouk/go/src/github.com/go-sql-driver/mysql (from $GOPATH)\n```", "```go\n$ go get github.com/go-sql-driver/mysql\n$ go run useMySQL.go\nUsing the MySQL Go driver!\n```", "```go\n$ ls -lR ~/go\ntotal 0\ndrwxr-xr-x  3 mtsouk  staff  102 Apr  4 22:35 pkg\ndrwxr-xr-x  5 mtsouk  staff  170 Apr  6 21:32 src\n\n/Users/mtsouk/go/pkg:\ntotal 0\ndrwxr-xr-x  5 mtsouk  staff  170 Apr  6 21:32 darwin_amd64\n\n/Users/mtsouk/go/pkg/darwin_amd64:\ntotal 24\n-rw-r--r--  1 mtsouk  staff  2918 Apr  4 23:07 aSimplePackage.a\n-rw-r--r--  1 mtsouk  staff  6102 Apr  4 22:50 anotherPackage.a\ndrwxr-xr-x  3 mtsouk  staff   102 Apr  6 21:32 github.com\n\n/Users/mtsouk/go/pkg/darwin_amd64/github.com:\ntotal 0\ndrwxr-xr-x  3 mtsouk  staff  102 Apr  6 21:32 go-sql-driver\n\n/Users/mtsouk/go/pkg/darwin_amd64/github.com/go-sql-driver:\ntotal 728\n-rw-r--r--  1 mtsouk  staff  372694 Apr  6 21:32 mysql.a\n\n/Users/mtsouk/go/src:\ntotal 0\ndrwxr-xr-x  3 mtsouk  staff  102 Apr  4 22:35 aSimplePackage\ndrwxr-xr-x  3 mtsouk  staff  102 Apr  4 22:50 anotherPackage\ndrwxr-xr-x  3 mtsouk  staff  102 Apr  6 21:32 github.com\n\n/Users/mtsouk/go/src/aSimplePackage:\ntotal 8\n-rw-r--r--  1 mtsouk  staff  148 Apr  4 22:30 aSimplePackage.go\n\n/Users/mtsouk/go/src/anotherPackage:\ntotal 8\n-rw-r--r--@ 1 mtsouk  staff  313 Apr  4 22:50 anotherPackage.go\n\n/Users/mtsouk/go/src/github.com:\ntotal 0\ndrwxr-xr-x  3 mtsouk  staff  102 Apr  6 21:32 go-sql-driver\n\n/Users/mtsouk/go/src/github.com/go-sql-driver:\ntotal 0\ndrwxr-xr-x  35 mtsouk  staff  1190 Apr  6 21:32 mysql\n\n/Users/mtsouk/go/src/github.com/go-sql-driver/mysql:\ntotal 584\n-rw-r--r--  1 mtsouk  staff   2066 Apr  6 21:32 AUTHORS\n-rw-r--r--  1 mtsouk  staff   5581 Apr  6 21:32 CHANGELOG.md\n-rw-r--r--  1 mtsouk  staff   1091 Apr  6 21:32 CONTRIBUTING.md\n-rw-r--r--  1 mtsouk  staff  16726 Apr  6 21:32 LICENSE\n-rw-r--r--  1 mtsouk  staff  18610 Apr  6 21:32 README.md\n-rw-r--r--  1 mtsouk  staff    470 Apr  6 21:32 appengine.go\n-rw-r--r--  1 mtsouk  staff   4965 Apr  6 21:32 benchmark_test.go\n-rw-r--r--  1 mtsouk  staff   3339 Apr  6 21:32 buffer.go\n-rw-r--r--  1 mtsouk  staff   8405 Apr  6 21:32 collations.go\n-rw-r--r--  1 mtsouk  staff   8525 Apr  6 21:32 connection.go\n-rw-r--r--  1 mtsouk  staff   1831 Apr  6 21:32 connection_test.go\n-rw-r--r--  1 mtsouk  staff   3111 Apr  6 21:32 const.go\n-rw-r--r--  1 mtsouk  staff   5036 Apr  6 21:32 driver.go\n-rw-r--r--  1 mtsouk  staff   4246 Apr  6 21:32 driver_go18_test.go\n-rw-r--r--  1 mtsouk  staff  47090 Apr  6 21:32 driver_test.go\n-rw-r--r--  1 mtsouk  staff  13046 Apr  6 21:32 dsn.go\n-rw-r--r--  1 mtsouk  staff   7872 Apr  6 21:32 dsn_test.go\n-rw-r--r--  1 mtsouk  staff   3798 Apr  6 21:32 errors.go\n-rw-r--r--  1 mtsouk  staff    989 Apr  6 21:32 errors_test.go\n-rw-r--r--  1 mtsouk  staff   4571 Apr  6 21:32 infile.go\n-rw-r--r--  1 mtsouk  staff  31362 Apr  6 21:32 packets.go\n-rw-r--r--  1 mtsouk  staff   6453 Apr  6 21:32 packets_test.go\n-rw-r--r--  1 mtsouk  staff    600 Apr  6 21:32 result.go\n-rw-r--r--  1 mtsouk  staff   3698 Apr  6 21:32 rows.go\n-rw-r--r--  1 mtsouk  staff   3609 Apr  6 21:32 statement.go\n-rw-r--r--  1 mtsouk  staff    729 Apr  6 21:32 transaction.go\n-rw-r--r--  1 mtsouk  staff  17924 Apr  6 21:32 utils.go\n-rw-r--r--  1 mtsouk  staff   5784 Apr  6 21:32 utils_test.go\n```", "```go\n$ go clean -x -i aSimplePackage\ncd /Users/mtsouk/go/src/aSimplePackage\nrm -f aSimplePackage.test aSimplePackage.test.exe\nrm -f /Users/mtsouk/go/pkg/darwin_amd64/aSimplePackage.a\n```", "```go\n$ go clean -x -i github.com/go-sql-driver/mysql\ncd /Users/mtsouk/go/src/github.com/go-sql-driver/mysql\nrm -f mysql.test mysql.test.exe appengine appengine.exe\nrm -f /Users/mtsouk/go/pkg/darwin_amd64/github.com/go-sql-driver/mysql.a\n```", "```go\npackage main \n\nimport ( \n   \"fmt\" \n   \"runtime\" \n   \"time\" \n) \n\nfunc printStats(mem runtime.MemStats) { \n   runtime.ReadMemStats(&mem) \n   fmt.Println(\"mem.Alloc:\", mem.Alloc) \n   fmt.Println(\"mem.TotalAlloc:\", mem.TotalAlloc) \n   fmt.Println(\"mem.HeapAlloc:\", mem.HeapAlloc) \n   fmt.Println(\"mem.NumGC:\", mem.NumGC) \n   fmt.Println(\"-----\") \n} \n```", "```go\nfunc main() { \n   var memruntime.MemStats \n   printStats(mem) \n\n   for i := 0; i< 10; i++ { \n         s := make([]byte, 100000000) \n         if s == nil { \n               fmt.Println(\"Operation failed!\") \n         } \n   } \n   printStats(mem) \n\n   for i := 0; i< 10; i++ { \n         s := make([]byte, 100000000) \n         if s == nil { \n               fmt.Println(\"Operation failed!\") \n         } \n         time.Sleep(5 * time.Second) \n   } \n   printStats(mem)\n\n} \n```", "```go\n$ go run garbageCol.go\nmem.Alloc: 53944\nmem.TotalAlloc: 53944\nmem.HeapAlloc: 53944\nmem.NumGC: 0\n-----\nmem.Alloc: 100071680\nmem.TotalAlloc: 1000146400\nmem.HeapAlloc: 100071680\nmem.NumGC: 10\n-----\nmem.Alloc: 66152\nmem.TotalAlloc: 2000230496\nmem.HeapAlloc: 66152\nmem.NumGC: 20\n-----\n```", "```go\n$ GODEBUG=gctrace=1 go run garbageCol.go\n```", "```go\ngc 11 @0.101s 0%: 0.003+0.083+0.020 ms clock, 0.030+0.059/0.033/0.006+0.16 mscpu, 95->95->0 MB, 96 MB goal, 8 P\n```", "```go\npackage main \n\nimport ( \n   \"fmt\" \n   \"runtime\" \n) \n\nfunc main() { \n   fmt.Print(\"You are using \", runtime.Compiler, \" \") \n   fmt.Println(\"on a\", runtime.GOARCH, \"machine\") \n   fmt.Println(\"with Go version\", runtime.Version()) \n   fmt.Println(\"Number of Goroutines:\", runtime.NumGoroutine())\n} \n```", "```go\n$ go run runTime.go\nYou are using gc on a amd64 machine\nwith Go version go1.8\nNumber of Goroutines: 1  \n```", "```go\n$ go run runTime.go\nYou are using gc on a amd64 machine\nwith Go version go1.3.3\nNumber of Goroutines: 4\n```", "```go\n$ date\nSat Apr  8 09:16:46 EEST 2017\n$ go version\ngo version go1.8.1 darwin/amd64\n```"]