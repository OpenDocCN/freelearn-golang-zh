["```go\npackage main \n\nimport ( \n   \"fmt\" \n   \"os\" \n   \"path/filepath\" \n) \n```", "```go\nfunc main() { \n   arguments := os.Args \n   if len(arguments) != 3 { \n         fmt.Printf(\"usage: %s message filename\\n\", filepath.Base(arguments[0])) \n         os.Exit(1) \n   } \n   message := arguments[1] \n   filename := arguments[2] \n\n   f, err := os.OpenFile(filename, \nos.O_RDWR|os.O_APPEND|os.O_CREATE, 0660) \n```", "```go\n   if err != nil { \n         fmt.Println(err) \n         os.Exit(-1) \n   } \n   defer f.Close() \n\n   fmt.Fprintf(f, \"%s\\n\", message) \n} \n```", "```go\n$ cat test\n[test]: test\n: test\n$ go run appendData.go test test\n$ cat test\n[test]: test\n: test\ntest \n```", "```go\npackage main \n\nimport ( \n   \"flag\" \n   \"fmt\" \n   \"io/ioutil\" \n   \"os\" \n   \"strings\" \n) \n```", "```go\nfunc main() { \n   minusINIT := flag.Int(\"init\", 1, \"Initial Value\") \n   flag.Parse() \n   flags := flag.Args() \n\n   if len(flags) == 0 { \n         fmt.Printf(\"usage: insertLineNumber <files>\\n\") \n         os.Exit(1) \n   } \n\n   lineNumber := *minusINIT\n   for _, filename := range flags { \n         fmt.Println(\"Processing:\", filename) \n```", "```go\n         input, err := ioutil.ReadFile(filename) \n         if err != nil { \n               fmt.Println(err) \n               os.Exit(-1) \n         } \n\n         lines := strings.Split(string(input), \"\\n\") \n```", "```go\n         for i, line := range lines { \n               lines[i] = fmt.Sprintf(\"%d: %s \", lineNumber, line) \n               lineNumber = lineNumber + 1\n         } \n\n         lines[len(lines)-1] = \"\" \n         output := strings.Join(lines, \"\\n\") \n         err = ioutil.WriteFile(filename, []byte(output), 0644) \n         if err != nil { \n               fmt.Println(err) \n               os.Exit(-1) \n         } \n   } \n   fmt.Println(\"Processed\", lineNumber-*minusINIT, \"lines!\") \n}\n```", "```go\n$ cat test\na\n\nb\n$ go run insertLineNumber.go -init=10 test\nProcessing: test\nProcessed 4 lines!\n$ cat test\n10: a\n11:\n12: b\n```", "```go\n$ cat test\na\n\nb\n$ go run insertLineNumber.go -init=10 test test test\nProcessing: test\nProcessing: test\nProcessing: test\nProcessed 12 lines!\n$ cat test\n18: 14: 10: a\n19: 15: 11:\n20: 16: 12: b\n```", "```go\npackage main \n\nimport ( \n   \"fmt\" \n   \"log\" \n   \"log/syslog\" \n   \"os\" \n   \"path/filepath\" \n) \n```", "```go\nfunc main() { \n   programName := filepath.Base(os.Args[0]) \n   sysLog, e := syslog.New(syslog.LOG_INFO|syslog.LOG_LOCAL7, programName) \n   if e != nil { \n         log.Fatal(e) \n   } \n   sysLog.Crit(\"Crit: Logging in Go!\") \n```", "```go\n   sysLog, e = syslog.New(syslog.LOG_ALERT|syslog.LOG_LOCAL7, \"Some program!\") \n   if e != nil { \n         log.Fatal(sysLog) \n   } \nsysLog.Emerg(\"Emerg: Logging in Go!\") \n```", "```go\n   fmt.Fprintf(sysLog, \"log.Print: Logging in Go!\") \n} \n```", "```go\n$ go run useSyslog.go\n\nBroadcast Message from _iconservices@iMac.local\n        (no tty) at 18:01 EEST...\n\nEmerg: Logging in Go!\n$ grep \"Logging in Go\" /var/log/* 2>/dev/null\n/var/log/system.log:May 19 18:01:31 iMac useSyslog[22608]: Crit: Logging in Go!\n/var/log/system.log:May 19 18:01:31 iMac Some program![22608]: Emerg: Logging in Go!\n/var/log/system.log:May 19 18:01:31 iMac Some program![22608]: log.Print: Logging in Go!\n```", "```go\n$ go run useSyslog.go\n\nMessage from syslogd@mail at May 19 18:03:00 ...\nSome program![1688]: Emerg: Logging in Go!\n$\nBroadcast message from systemd-journald@mail (Fri 2017-05-19 18:03:00 EEST):\n\nuseSyslog[1688]: Some program![1688]: Emerg: Logging in Go!\n$ tail -5 /var/log/syslog\nMay 19 18:03:00 mail useSyslog[1688]: Crit: Logging in Go!\nMay 19 18:03:00 mail Some program![1688]: Emerg: Logging in Go!\nMay 19 18:03:00 mail Some program![1688]: log.Print: Logging in Go!\n$ grep \"Logging in Go\" /var/log/* 2>/dev/null\n/var/log/cisco.log:May 19 18:03:00 mail useSyslog[1688]: Crit: Logging in Go!\n/var/log/cisco.log:May 19 18:03:00 mail Some program![1688]: Emerg: Logging in Go!\n/var/log/cisco.log:May 19 18:03:00 mail Some program![1688]: log.Print: Logging in Go!\n/var/log/syslog:May 19 18:03:00 mail useSyslog[1688]: Crit: Logging in Go!\n/var/log/syslog:May 19 18:03:00 mail Some program![1688]: Emerg: Logging in Go!\n/var/log/syslog:May 19 18:03:00 mail Some program![1688]: log.Print: Logging in Go!\n```", "```go\npackage main \n\nimport ( \n   \"bufio\" \n   \"flag\" \n   \"fmt\" \n   \"io\" \n   \"net\" \n   \"os\" \n   \"path/filepath\" \n   \"strings\" \n) \n```", "```go\nfunc main() { \n   minusCOL := flag.Int(\"COL\", 1, \"Column\") \n   flag.Parse() \n   flags := flag.Args() \n\n   if len(flags) == 0 { \n         fmt.Printf(\"usage: %s <file1> [<file2> [... <fileN]]\\n\", filepath.Base(os.Args[0])) \n         os.Exit(1) \n   } \n\n   column := *minusCOL \n   if column < 0 {\n         fmt.Println(\"Invalid Column number!\") \n         os.Exit(1) \n   } \n```", "```go\n   myIPs := make(map[string]int) \n   for _, filename := range flags { \n         fmt.Println(\"\\t\\t\", filename) \n         f, err := os.Open(filename) \n         if err != nil { \n               fmt.Printf(\"error opening file %s\\n\", err) \n               continue \n         } \n         defer f.Close() \n\n         r := bufio.NewReader(f) \n         for { \n               line, err := r.ReadString('\\n') \n\n               if err == io.EOF { \n                     break \n               } else if err != nil { \n                     fmt.Printf(\"error reading file %s\", err) \n                     continue \n               } \n```", "```go\n               data := strings.Fields(line) \n               ip := data[column-1] \n               trial := net.ParseIP(ip) \n               if trial.To4() == nil { \n                     continue \n               } \n\n               _, ok := myIPs[ip] \n               if ok { \n                     myIPs[ip] = myIPs[ip] + 1 \n               } else { \n                     myIPs[ip] = 1 \n               } \n         } \n   } \n\n   for key, _ := range myIPs { \n         fmt.Printf(\"%s %d\\n\", key, myIPs[key]) \n   } \n} \n```", "```go\n$ go run countIP.go /tmp/log.1 /tmp/log.2\n             /tmp/log.1\n             /tmp/log.2\n164.132.161.85 4\n66.102.8.135 17\n5.248.196.10 15\n180.76.15.10 12\n66.249.69.40 142\n51.255.65.35 7\n95.158.53.56 1\n64.183.178.218 31\n$ go run countIP.go /tmp/log.1 /tmp/log.2 | wc\n    1297    2592   21266\n```", "```go\n$ go run countIP.go /tmp/log.1 /tmp/log.2 | sort -rn -k2\n45.55.38.245 979\n159.203.126.63 976\n130.193.51.27 698\n5.9.63.149 370\n77.121.238.13 340\n46.4.116.197 308\n51.254.103.60 302\n51.255.194.31 277\n195.74.244.47 201\n61.14.225.57 179\n69.30.198.242 152\n66.249.69.40 142\n2.86.9.124 140\n2.86.27.46 127\n66.249.69.18 125\n```", "```go\n$ go run countIP.go /tmp/log.1 /tmp/log.2 | sort -rn -k2 | head\n45.55.38.245 979\n159.203.126.63 976\n130.193.51.27 698\n5.9.63.149 370\n77.121.238.13 340\n46.4.116.197 308\n51.254.103.60 302\n51.255.194.31 277\n195.74.244.47 201\n61.14.225.57 179\n```", "```go\npackage main \n\nimport ( \n   \"fmt\" \n   \"os\" \n   \"path/filepath\" \n) \n```", "```go\nfunc tripletToBinary(triplet string) string { \n   if triplet == \"rwx\" { \n         return \"111\" \n   } \n   if triplet == \"-wx\" { \n         return \"011\" \n   } \n   if triplet == \"--x\" { \n         return \"001\" \n   } \n   if triplet == \"---\" { \n         return \"000\" \n   } \n   if triplet == \"r-x\" { \n         return \"101\" \n   } \n   if triplet == \"r--\" { \n         return \"100\" \n   } \n   if triplet == \"--x\" { \n         return \"001\" \n   } \n   if triplet == \"rw-\" { \n         return \"110\" \n   } \n   if triplet == \"-w-\" { \n         return \"010\" \n   } \n   return \"unknown\" \n} \n\nfunc convertToBinary(permissions string) string { \n   binaryPermissions := permissions[1:] \n   p1 := binaryPermissions[0:3] \n   p2 := binaryPermissions[3:6] \n   p3 := binaryPermissions[6:9] \n   return tripletToBinary(p1) + tripletToBinary(p2) + tripletToBinary(p3) \n} \n```", "```go\nfunc main() { \n   arguments := os.Args \n   if len(arguments) == 1 { \n         fmt.Printf(\"usage: %s filename\\n\", filepath.Base(arguments[0])) \n         os.Exit(1) \n   } \n\n   filename := arguments[1] \n   info, _ := os.Stat(filename) \n   mode := info.Mode() \n\n   fmt.Println(filename, \"mode is\", mode) \n   fmt.Println(\"As string is\", mode.String()[1:10]) \n   fmt.Println(\"As binary is\", convertToBinary(mode.String())) \n} \n```", "```go\n$ go run filePerm.go .\n. mode is drwxr-xr-x\nAs string is rwxr-xr-x\nAs binary is 111101101\n$ go run filePerm.go /tmp/swtag.log\n/tmp/swtag.log mode is -rw-rw-rw-\nAs string is rw-rw-rw-\nAs binary is 110110110\n```", "```go\npackage main \n\nimport ( \n   \"fmt\" \n   \"os\" \n   \"path/filepath\" \n   \"strconv\" \n) \n```", "```go\nfunc tripletToBinary(triplet string) string { \n   if triplet == \"rwx\" { \n         return \"111\" \n   } \n   if triplet == \"-wx\" { \n         return \"011\" \n   } \n   if triplet == \"--x\" { \n         return \"001\" \n   } \n   if triplet == \"---\" { \n         return \"000\" \n   } \n   if triplet == \"r-x\" { \n         return \"101\" \n   } \n   if triplet == \"r--\" { \n         return \"100\" \n   } \n   if triplet == \"--x\" { \n         return \"001\" \n   } \n   if triplet == \"rw-\" { \n         return \"110\" \n   } \n   if triplet == \"-w-\" { \n         return \"010\" \n   } \n   return \"unknown\" \n} \n```", "```go\nfunc convertToBinary(permissions string) string { \n   p1 := permissions[0:3] \n   p2 := permissions[3:6] \n   p3 := permissions[6:9] \n\n   p1 = tripletToBinary(p1) \n   p2 = tripletToBinary(p2) \n   p3 = tripletToBinary(p3) \n\n   p1Int, _ := strconv.ParseInt(p1, 2, 64) \n   p2Int, _ := strconv.ParseInt(p2, 2, 64) \n   p3Int, _ := strconv.ParseInt(p3, 2, 64) \n\n   returnValue := p1Int*100 + p2Int*10 + p3Int \n   tempReturnValue := int(returnValue) \n   returnString := \"0\" + strconv.Itoa(tempReturnValue) \n   return returnString \n} \n```", "```go\nfunc main() { \n   arguments := os.Args \n   if len(arguments) != 3 { \n         fmt.Printf(\"usage: %s filename permissions\\n\",  \nfilepath.Base(arguments[0])) \n         os.Exit(1) \n   } \n\n   filename, _ := filepath.EvalSymlinks(arguments[1]) \n   permissions := arguments[2] \n   if len(permissions) != 9 { \n         fmt.Println(\"Permissions should be 9 characters  \n(rwxrwxrwx):\", permissions) \n         os.Exit(-1) \n   } \n\n   bin := convertToBinary(permissions) \n   newPerms, _ := strconv.ParseUint(bin, 0, 32) \n   newMode := os.FileMode(newPerms) \n   os.Chmod(filename, newMode) \n} \n```", "```go\n$ go run setFilePerm.go /tmp/swtag.log rwxrwxrwx\n$ ls -l /tmp/swtag.log\n-rwxrwxrwx  1 mtsouk  wheel  7066 May 22 19:17 /tmp/swtag.log\n$ go run setFilePerm.go /tmp/swtag.log rwxrwx---\n$ ls -l /tmp/swtag.log\n-rwxrwx---  1 mtsouk  wheel  7066 May 22 19:17 /tmp/swtag.log\n```", "```go\npackage main \n\nimport ( \n   \"fmt\" \n   \"os\" \n   \"path/filepath\" \n   \"syscall\" \n) \n```", "```go\nfunc main() { \n   arguments := os.Args \n   if len(arguments) == 1 { \n         fmt.Printf(\"usage: %s <files>\\n\", filepath.Base(arguments[0])) \n         os.Exit(1) \n   } \n\n   for _, filename := range arguments[1:] { \n         fileInfo, err := os.Stat(filename) \n         if err != nil { \n               fmt.Println(err) \n               continue \n         } \n```", "```go\n         fmt.Printf(\"%+v\\n\", fileInfo.Sys()) \n         fmt.Println(fileInfo.Sys().(*syscall.Stat_t).Uid) \n         fmt.Println(fileInfo.Sys().(*syscall.Stat_t).Gid) \n   } \n} \n```", "```go\n$ go run findOG.go /tmp/swtag.log\n&{Dev:16777218 Mode:33206 Nlink:1 Ino:50547755 Uid:501 Gid:0 Rdev:0 Pad_cgo_0:[0 0 0 0] Atimespec:{Sec:1495297106 Nsec:0} Mtimespec:{Sec:1495297106 Nsec:0} Ctimespec:{Sec:1495297106 Nsec:0} Birthtimespec:{Sec:1495044975 Nsec:0} Size:2586 Blocks:8 Blksize:4096 Flags:0 Gen:0 Lspare:0 Qspare:[0 0]}\n501\n0\n$ ls -l /tmp/swtag.log\n-rw-rw-rw-  1 mtsouk  wheel  2586 May 20 19:18 /tmp/swtag.log\n$ grep wheel /etc/group\nwheel:*:0:root \n```", "```go\n$ go run findOG.go /home/mtsouk/connections.data\n&{Dev:2048 Ino:1196167 Nlink:1 Mode:33188 Uid:1000 Gid:1000 X__pad0:0 Rdev:0 Size:9626800 Blksize:4096 Blocks:18840 Atim:{Sec:1412623801 Nsec:0} Mtim:{Sec:1495307521 Nsec:929812185} Ctim:{Sec:1495307521 Nsec:929812185} X__unused:[0 0 0]}\n1000\n1000\n$ ls -l /home/mtsouk/connections.data\n-rw-r--r-- 1 mtsouk mtsouk 9626800 May 20 22:12 /home/mtsouk/connections.data\ncode$ grep ^mtsouk /etc/group\nmtsouk:x:1000:\n```", "```go\npackage main \n\nimport ( \n   \"bufio\" \n   \"fmt\" \n   \"io\" \n   \"net\" \n   \"os\" \n   \"path/filepath\" \n   \"regexp\" \n) \n```", "```go\nfunc findIP(input string) string { \n   partIP := \"(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\" \n   grammar := partIP + \"\\\\.\" + partIP + \"\\\\.\" + partIP + \"\\\\.\" + partIP \n   matchMe := regexp.MustCompile(grammar) \n   return matchMe.FindString(input) \n} \n```", "```go\nfunc main() { \n   if len(os.Args) != 2 { \n         fmt.Printf(\"usage: %s logFile\\n\", filepath.Base(os.Args[0])) \n         os.Exit(1) \n   } \n   filename := os.Args[1] \n\n   f, err := os.Open(filename) \n   if err != nil { \n         fmt.Printf(\"error opening file %s\\n\", err) \n         os.Exit(-1) \n   } \n   defer f.Close() \n\n   myIPs := make(map[string]int) \n   r := bufio.NewReader(f) \n   for { \n         line, err := r.ReadString('\\n') \n         if err == io.EOF { \n               break \n         } else if err != nil { \n               fmt.Printf(\"error reading file %s\", err) \n               break \n         } \n```", "```go\n         ip := findIP(line) \n         trial := net.ParseIP(ip) \n         if trial.To4() == nil { \n               continue \n         } else { \n               _, ok := myIPs[ip] \n               if ok { \n                     myIPs[ip] = myIPs[ip] + 1 \n               } else { \n                     myIPs[ip] = 1 \n               } \n         } \n   } \n   for key, _ := range myIPs { \n         fmt.Printf(\"%s %d\\n\", key, myIPs[key]) \n   } \n} \n```", "```go\n$ wc /var/log/auth.log\n  1499647  20313719 155224677 /var/log/auth.log\n$ go run findIP.go /var/log/auth.log\n39.114.101.107 1003\n111.224.233.41 10\n189.41.147.179 306\n55.31.112.181 1\n5.141.131.102 10\n171.60.251.143 30\n218.237.65.48 1\n24.16.210.120 8\n199.115.116.50 3\n139.160.113.181 1\n```", "```go\n$ go run findIP.go /var/log/auth.log | sort -nr -k2 | head\n218.65.30.156 102533\n61.177.172.27 37746\n218.65.30.43 34640\n109.74.11.18 32870\n61.177.172.55 31968\n218.65.30.124 31649\n59.63.188.3 30970\n61.177.172.28 30023\n116.31.116.30 29314\n61.177.172.14 28615\n```", "```go\n127.0.0.1 - - [24/May/2017:06:41:11 +0300] \"GET /contact HTTP/1.1\" 200 6048 \"http://www.mtsoukalos.eu/\" \"Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; rv:11.0) like Gecko\" 132953\n```", "```go\npackage main \n\nimport ( \n   \"bufio\" \n   \"flag\" \n   \"fmt\" \n   \"io\" \n   \"os\" \n   \"regexp\" \n) \n```", "```go\nfunc main() { \n   flag.Parse() \n   if flag.NArg() != 1 { \n         fmt.Println(\"Please provide one log file to process!\") \n         os.Exit(-1) \n   } \n   numberOfLines := 0 \n   numberOfLinesMatched := 0 \n\n   filename := flag.Arg(0) \n   f, err := os.Open(filename) \n   if err != nil { \n         fmt.Printf(\"error opening file %s\", err) \n         os.Exit(1) \n   } \n   defer f.Close() \n```", "```go\n   r := bufio.NewReader(f) \n   for { \n         line, err := r.ReadString('\\n') \n         if err == io.EOF { \n               break \n         } else if err != nil { \n               fmt.Printf(\"error reading file %s\", err) \n         } \n```", "```go\n         numberOfLines++ \n         r := regexp.MustCompile(`(.*) (\\[\\d\\d\\/(\\w+)/\\d\\d\\d\\d:\\d\\d:\\d\\d:\\d\\d(.*)\\]) (.*) (\\d+)`) \n         if r.MatchString(line) { \n               numberOfLinesMatched++ \n               match := r.FindStringSubmatch(line) \n               fmt.Println(match[1], match[6], match[5], match[2]) \n         } \n   } \n   fmt.Println(\"Line processed:\", numberOfLines) \n   fmt.Println(\"Line matched:\", numberOfLinesMatched) \n} \n```", "```go\n$ go run swapRE.go /tmp/log.log\n127.0.0.1 - - 28787 \"GET /taxonomy/term/35/feed HTTP/1.1\" 200 2360 \"-\" \"Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)\" [24/May/2017:07:04:48 +0300]\n- - 32145 HTTP/1.1\" 200 2616 \"http://www.mtsoukalos.eu/\" \"Mozilla/5.0 (compatible; inoreader.com-like FeedFetcher-Google)\" [24/May/2017:07:09:24 +0300]\nLine processed: 3\nLine matched: 2\n```", "```go\npackage main \n\nimport ( \n   \"flag\" \n   \"fmt\" \n   \"os\" \n   \"path/filepath\" \n   \"regexp\" \n) \n\nvar RE string\nvar renameString string \n```", "```go\nfunc walk(path string, f os.FileInfo, err error) error { \n   regex, err := regexp.Compile(RE) \n   if err != nil { \n         fmt.Printf(\"Error in RE: %s\\n\", RE) \n         return err \n   } \n\n   if path == \".\" { \n         return nil \n   } \n   nameOfFile := filepath.Base(path) \n   if regex.MatchString(nameOfFile) { \n         newName := filepath.Dir(path) + \"/\" + renameString + \"_\" + nameOfFile \n         os.Rename(path, newName) \n   } \n   return nil \n} \n```", "```go\nfunc main() { \n   flag.Parse() \n   if flag.NArg() != 3 { \n         fmt.Printf(\"Usage: %s REGEXP RENAME Path\", filepath.Base(os.Args[0])) \n         os.Exit(-1) \n   } \n\n   RE = flag.Arg(0) \n   renameString = flag.Arg(1) \n   Path := flag.Arg(2) \n   Path, _ = filepath.EvalSymlinks(Path) \n   filepath.Walk(Path, walk) \n} \n```", "```go\n$ ls -l /tmp/swtag.log\n-rw-rw-rw-  1 mtsouk  wheel  446 May 22 09:18 /tmp/swtag.log\n$ go run multipleMV.go 'log$' new /tmp\n$ ls -l /tmp/new_swtag.log\n-rw-rw-rw-  1 mtsouk  wheel  446 May 22 09:18 /tmp/new_swtag.log\n$ go run multipleMV.go 'log$' new /tmp\n$ ls -l /tmp/new_new_swtag.log\n-rw-rw-rw-  1 mtsouk  wheel  446 May 22 09:18 /tmp/new_new_swtag.log\n$ go run multipleMV.go 'log$' new /tmp\n$ ls -l /tmp/new_new_new_swtag.log\n-rw-rw-rw-  1 mtsouk  wheel  446 May 22 09:18 /tmp/new_new_new_swtag.log \n```", "```go\n$ id -u\n33\n$ id -u root\n0\n```", "```go\npackage main \n\nimport ( \n   \"fmt\" \n   \"os\" \n   \"os/user\" \n) \n\nfunc main() { \n   arguments := os.Args \n   if len(arguments) == 1 { \n         uid := os.Getuid() \n         fmt.Println(uid) \n         return \n   } \n```", "```go\n   username := arguments[1] \n   u, err := user.Lookup(username) \n   if err != nil { \n         fmt.Println(err) \n         return \n   } \n   fmt.Println(u.Uid) \n}\n\n```", "```go\n$ go run userID.go\n501\n$ go run userID.go root\n0\n$ go run userID.go doesNotExist\nuser: unknown user doesNotExist\n```", "```go\npackage main \n\nimport ( \n   \"fmt\" \n   \"os\" \n   \"os/user\" \n) \n```", "```go\nfunc main() { \n   arguments := os.Args \n   var u *user.User \n   var err error \n   if len(arguments) == 1 { \n         u, err = user.Current() \n         if err != nil { \n               fmt.Println(err) \n               return \n         } \n```", "```go\n   } else { \n         username := arguments[1] \n         u, err = user.Lookup(username) \n         if err != nil { \n               fmt.Println(err) \n               return \n         } \n   } \n```", "```go\n   gids, _ := u.GroupIds() \n   for _, gid := range gids { \n         group, err := user.LookupGroupId(gid) \n         if err != nil { \n               fmt.Println(err) \n               continue \n         } \n         fmt.Printf(\"%s(%s) \", group.Gid, group.Name) \n   } \n   fmt.Println() \n} \n```", "```go\n$ go run listGroups.go\n    20(staff) 701(com.apple.sharepoint.group.1) 12(everyone) 61(localaccounts) 79(_appserverusr) 80(admin) 81(_appserveradm) 98(_lpadmin) 33(_appstore) 100(_lpoperator) 204(_developer) 395(com.apple.access_ftp) 398(com.apple.access_screensharing) 399(com.apple.access_ssh)\n$ go run listGroups.go www\n70(_www) 12(everyone) 61(localaccounts) 701(com.apple.sharepoint.group.1) 100(_lpoperator)\n```", "```go\n$ id -G -n\nstaff com.apple.sharepoint.group.1 everyone localaccounts _appserverusr admin _appserveradm _lpadmin _appstore _lpoperator _developer com.apple.access_ftp com.apple.access_screensharing com.apple.access_ssh\n$ groups\nstaff com.apple.sharepoint.group.1 everyone localaccounts _appserverusr admin _appserveradm _lpadmin _appstore _lpoperator _developer com.apple.access_ftp com.apple.access_screensharing com.apple.access_ssh\n```", "```go\npackage main \n\nimport ( \n   \"flag\" \n   \"fmt\" \n   \"os\" \n   \"os/user\" \n   \"path/filepath\" \n   \"strconv\" \n   \"syscall\" \n) \n\nvar uid int32 = 0\nvar INCLUDE bool = true \n```", "```go\nfunc userOfFIle(filename string) int32 { \n   fileInfo, err := os.Stat(filename) \n   if err != nil { \n         fmt.Println(err) \n         return 1000000 \n   } \n   UID := fileInfo.Sys().(*syscall.Stat_t).Uid \n   return int32(UID) \n} \n```", "```go\nfunc walkFunction(path string, info os.FileInfo, err error) error { \n   _, err = os.Lstat(path) \n   if err != nil { \n         return err \n   } \n\n   if userOfFIle(path) == uid && INCLUDE { \n         fmt.Println(path) \n   } else if userOfFIle(path) != uid && !(INCLUDE) { \n         fmt.Println(path) \n   } \n\n   return err \n} \n```", "```go\nfunc main() { \n   minusNO := flag.Bool(\"no\", true, \"Include\") \n   minusPATH := flag.String(\"path\", \".\", \"Path to Search\") \n   flag.Parse() \n   flags := flag.Args() \n\n   INCLUDE = *minusNO \n   Path := *minusPATH \n\n   if len(flags) == 0 { \n         uid = int32(os.Getuid()) \n   } else { \n         u, err := user.Lookup(flags[0]) \n         if err != nil { \n               fmt.Println(err) \n               os.Exit(1) \n         } \n         temp, err := strconv.ParseInt(u.Uid, 10, 32) \n         uid = int32(temp) \n   } \n\n   err := filepath.Walk(Path, walkFunction) \n   if err != nil { \n         fmt.Println(err) \n   } \n} \n```", "```go\n$ go run userFiles.go -path=/tmp www-data\n/tmp/.htaccess\n/tmp/update-cache-2a113cac\n/tmp/update-extraction-2a113cac\n```", "```go\n$ go run userFiles.go\n.\nappendData.go\ncountIP.go\n```", "```go\n$ go run userFiles.go -no=false -path=/srv/www/www.highiso.net www-data\n/srv/www/www.highiso.net/list.files\n/srv/www/www.highiso.net/public_html/wp-content/.htaccess\n/srv/www/www.highiso.net/public_html.UnderCon/.htaccess\n```", "```go\npackage main \n\nimport ( \n   \"fmt\" \n   \"os\" \n   \"path/filepath\" \n) \n\nvar PERMISSIONS string\n```", "```go\nfunc permissionsOfFIle(filename string) string { \n   info, err := os.Stat(filename) \n   if err != nil { \n         return \"-1\" \n   } \n   mode := info.Mode() \n   return mode.String()[1:10] \n} \n```", "```go\nfunc walkFunction(path string, info os.FileInfo, err error) error { \n   _, err = os.Lstat(path) \n   if err != nil { \n         return err \n   } \n\n   if permissionsOfFIle(path) == PERMISSIONS { \n         fmt.Println(path) \n   } \n   return err \n} \n```", "```go\nfunc main() { \n   arguments := os.Args \n   if len(arguments) != 3 { \n         fmt.Printf(\"usage: %s RootDirectory permissions\\n\",  \nfilepath.Base(arguments[0])) \n         os.Exit(1) \n   } \n\n   Path := arguments[1] \n   Path, _ = filepath.EvalSymlinks(Path) \n   PERMISSIONS = arguments[2] \n\n   err := filepath.Walk(Path, walkFunction) \n   if err != nil { \n         fmt.Println(err) \n   } \n} \n```", "```go\n$ go run findPerm.go /tmp rw-------\n/private/tmp/.adobeLockFile\n$ ls -l /private/tmp/.adobeLockFile\n-rw-------  1 mtsouk  wheel  0 May 19 14:36 /private/tmp/.adobeLockFile\n```", "```go\npackage main \n\nimport ( \n   \"fmt\" \n   \"time\" \n) \n\nfunc main() { \n\n   fmt.Println(\"Epoch time:\", time.Now().Unix()) \n   t := time.Now() \n   fmt.Println(t, t.Format(time.RFC3339)) \n   fmt.Println(t.Weekday(), t.Day(), t.Month(), t.Year()) \n   time.Sleep(time.Second) \n   t1 := time.Now() \n   fmt.Println(\"Time difference:\", t1.Sub(t)) \n\n   formatT := t.Format(\"01 January 2006\") \n   fmt.Println(formatT) \n   loc, _ := time.LoadLocation(\"Europe/London\") \n   londonTime := t.In(loc) \n   fmt.Println(\"London:\", londonTime) \n```", "```go\n   myDate := \"23 May 2017\" \n   d, _ := time.Parse(\"02 January 2006\", myDate) \n   fmt.Println(d) \n\n   myDate1 := \"23 May 2016\" \n   d1, _ := time.Parse(\"02 February 2006\", myDate1) \n   fmt.Println(d1)\n\n```", "```go\n   myDT := \"Tuesday 23 May 2017 at 23:36\" \n   dt, _ := time.Parse(\"Monday 02 January 2006 at 15:04\", myDT) \n   fmt.Println(dt) \n} \n```", "```go\n$ go run dateTime.go\nEpoch time: 1495572122\n2017-05-23 23:42:02.459713551 +0300 EEST 2017-05-23T23:42:02+03:00\nTuesday 23 May 2017\nTime difference: 1.001749054s\n05 May 2017\nLondon: 2017-05-23 21:42:02.459713551 +0100 BST\n2017-05-23 00:00:00 +0000 UTC\n0001-01-01 00:00:00 +0000 UTC\n2017-05-23 23:36:00 +0000 UTC\n```", "```go\npackage main \n\nimport ( \n   \"bufio\" \n   \"flag\" \n   \"fmt\" \n   \"io\" \n   \"os\" \n   \"regexp\" \n   \"strings\" \n   \"time\" \n) \n```", "```go\nfunc main() { \n   flag.Parse() \n   if flag.NArg() != 1 { \n         fmt.Println(\"Please provide one log file to process!\") \n         os.Exit(-1) \n   } \n\n   filename := flag.Arg(0) \n   f, err := os.Open(filename) \n   if err != nil { \n         fmt.Printf(\"error opening file %s\", err) \n         os.Exit(1) \n   } \n   defer f.Close() \n```", "```go\n   r := bufio.NewReader(f) \n   for { \n         line, err := r.ReadString('\\n') \n         if err == io.EOF { \n               break \n         } else if err != nil { \n               fmt.Printf(\"error reading file %s\", err) \n         } \n```", "```go\n         r := regexp.MustCompile(`.*\\[(\\d\\d\\/\\w+/\\d\\d\\d\\d:\\d\\d:\\d\\d:\\d\\d.*)\\] .*`) \n         if r.MatchString(line) { \n               match := r.FindStringSubmatch(line) \n               d1, err := time.Parse(\"02/Jan/2006:15:04:05 -0700\", match[1]) \n               if err != nil { \n                     fmt.Println(err) \n               } \n               newFormat := d1.Format(time.RFC3339) \n               fmt.Print(strings.Replace(line, match[1], newFormat, 1)) \n         } \n   } \n} \n```", "```go\n$ go run dateTimeLog.go /tmp/log.log\n127.0.0.1 - - [2017-05-24T07:04:48+03:00] \"GET /taxonomy/term/35/feed HTTP/1.1\" 200 2360 \"-\" \"Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)\" 28787\n- - [2017-05-24T07:09:24+03:00] HTTP/1.1\" 200 2616 \"http://www.mtsoukalos.eu/\" \"Mozilla/5.0 (compatible; inoreader.com-like FeedFetcher-Google)\" 32145\n[2017-05-24T07:38:08+03:00] \"GET /tweets?page=181 HTTP/1.1\" 200 8605 \"-\" \"Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)\" 100531\n```", "```go\npackage main \n\nimport ( \n   \"fmt\" \n   \"log\" \n   \"os\" \n   \"strconv\" \n   \"time\" \n) \n\nvar TOTALWRITES int = 0 \nvar ENTRIESPERLOGFILE int = 100 \nvar WHENTOSTOP int = 230 \nvar openLogFile os.File \n```", "```go\nfunc rotateLogFile(filename string) error { \n   openLogFile.Close() \n   os.Rename(filename, filename+\".\"+strconv.Itoa(TOTALWRITES)) \n   err := setUpLogFile(filename) \n   return err \n} \n\nfunc setUpLogFile(filename string) error { \n   openLogFile, err := os.OpenFile(filename, os.O_RDWR|os.O_CREATE|os.O_APPEND, 0644) \n   if err != nil { \n         return err \n   } \n   log.SetOutput(openLogFile) \n   return nil \n} \n```", "```go\nfunc main() { \n   numberOfLogEntries := 0 \n   filename := \"/tmp/myLog.log\" \n   err := setUpLogFile(filename) \n   if err != nil { \n         fmt.Println(err) \n         os.Exit(-1) \n   } \n\n   for { \n         log.Println(numberOfLogEntries, \"This is a test log entry\") \n         numberOfLogEntries++ \n         TOTALWRITES++ \n         if numberOfLogEntries > ENTRIESPERLOGFILE { \n               rotateLogFile(filename)\n               numberOfLogEntries = 0 \n         } \n         if TOTALWRITES > WHENTOSTOP { \n               rotateLogFile(filename)\n               break \n         } \n         time.Sleep(time.Second) \n   } \n   fmt.Println(\"Wrote\", TOTALWRITES, \"log entries!\") \n} \n```", "```go\n$ go run rotateLog.go\nWrote 231 log entries!\n$ wc /tmp/myLog.log*\n   0       0       0 /tmp/myLog.log\n 101     909    4839 /tmp/myLog.log.101\n 101     909    4839 /tmp/myLog.log.202\n  29     261    1382 /tmp/myLog.log.231\n 231    2079   11060 total\n```", "```go\npackage main \n\nimport ( \n   \"encoding/binary\" \n   \"fmt\" \n   \"math/rand\" \n   \"os\" \n   \"path/filepath\" \n   \"strconv\" \n) \n```", "```go\nvar MAX int = 90 \nvar MIN int = 0 \nvar seedSize int = 10 \n\nfunc random(min, max int) int { \n   return rand.Intn(max-min) + min \n} \n```", "```go\nfunc main() { \n   if len(os.Args) != 2 { \n         fmt.Printf(\"usage: %s length\\n\", filepath.Base(os.Args[0])) \n         os.Exit(1) \n   } \n\n   LENGTH, _ := strconv.ParseInt(os.Args[1], 10, 64) \n   f, _ := os.Open(\"/dev/random\") \n   var seed int64 \n   binary.Read(f, binary.LittleEndian, &seed) \n   rand.Seed(seed) \n   f.Close() \n   fmt.Println(\"Seed:\", seed) \n```", "```go\n   startChar := \"!\" \n   var i int64 \n   for i = 0; i < LENGTH; i++ { \n         anInt := int(random(MIN, MAX)) \n         newChar := string(startChar[0] + byte(anInt)) \n         if newChar == \" \" { \n               i = i - i \n               continue \n         } \n         fmt.Print(newChar) \n   } \n   fmt.Println() \n} \n```", "```go\n$ go run goodPass.go 1\nSeed: -5195038511418503382\nb\n$ go run goodPass.go 10\nSeed: 8492864627151568776\nk43Ve`+YD)\n$ go run goodPass.go 50\nSeed: -4276736612056007162\n!=Gy+;XV>6eviuR=ST\\u:Mk4Q875Y4YZiZhq&q_4Ih/]''`2:x\n```", "```go\n$ date\nWed May 24 13:35:36 EEST 2017\n$ go version\ngo version go1.8.2 darwin/amd64 \n```"]