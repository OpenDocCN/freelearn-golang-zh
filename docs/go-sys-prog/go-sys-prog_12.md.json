["```go\n$ tshark -r handshake.pcap -Y '(tcp.flags.syn==1 ) || (tcp.flags == 0x0010 && tcp.seq==1 && tcp.ack==1)'\n       18   5.144264    10.0.2.15 \u2192 80.244.178.150 TCP 74 59897 \u2192 80 [SYN] Seq=0 Win=29200 Len=0 MSS=1460 SACK_PERM=1 TSval=1585402 TSecr=0 WS=128\n       19   5.236792 80.244.178.150 \u2192 10.0.2.15    TCP 60 80 \u2192 59897 [SYN, ACK] Seq=0 Ack=1 Win=65535 Len=0 MSS=1460\n       20   5.236833    10.0.2.15 \u2192 80.244.178.150 TCP 54 59897 \u2192 80 [ACK] Seq=1 Ack=1 Win=29200 Len=0\n```", "```go\n$ netcat 192.168.1.123 1234\n```", "```go\n$ netcat -vv -u amachine.com 2345\n```", "```go\n$ netcat -vv -l localhost -p 80\nCan't grab 0.0.0.0:80 with bind : Permission denied\n```", "```go\npackage main \n\nimport ( \n   \"fmt\" \n   \"net\" \n   \"os\" \n) \n```", "```go\nfunc echoServer(c net.Conn) { \n   for { \n         buf := make([]byte, 1024) \n         nr, err := c.Read(buf) \n         if err != nil { \n               return \n         } \n\n         data := buf[0:nr] \n         fmt.Printf(\"->: %v\\n\", string(data)) \n         _, err = c.Write(data) \n         if err != nil { \n               fmt.Println(err) \n         } \n   } \n} \n```", "```go\nfunc main() { \n   arguments := os.Args \n   if len(arguments) == 1 { \n         fmt.Println(\"Please provide a socket file.\") \n         os.Exit(100) \n   } \n   socketFile := arguments[1] \n\n   l, err := net.Listen(\"unix\", socketFile) \n   if err != nil { \n         fmt.Println(err) \nos.Exit(100) \n   } \n```", "```go\n   for { \n         fd, err := l.Accept() \n         if err != nil { \n               fmt.Println(err) \n               os.Exit(100) \n         } \n         go echoServer(fd) \n   } \n} \n```", "```go\n$ go run socketServer.go /tmp/aSocket\n->: Hello Server!\n```", "```go\n$ go run socketServer.go /tmp/aSocket\nlisten unix /tmp/aSocket: bind: address already in use\nexit status 100\n```", "```go\npackage main \n\nimport ( \n   \"fmt\" \n   \"io\" \n   \"log\" \n   \"net\" \n   \"os\" \n   \"time\" \n) \n```", "```go\nfunc readSocket(r io.Reader) {\n\n   buf := make([]byte, 1024) \n   for { \n         n, err := r.Read(buf[:]) \n         if err != nil { \n               fmt.Println(err) \n               return \n         } \n         fmt.Println(\"-> \", string(buf[0:n])) \n   } \n} \n```", "```go\nfunc main() { \n   arguments := os.Args \n   if len(arguments) == 1 { \n         fmt.Println(\"Please provide a socket file.\") \n         os.Exit(100) \n   } \n   socketFile := arguments[1] \n\n   c, err := net.Dial(\"unix\", socketFile) \n   if err != nil { \n         fmt.Println(err) \n         os.Exit(100) \n   } \n   defer c.Close() \n```", "```go\n   go readSocket(c) \n   for { \n         _, err := c.Write([]byte(\"Hello Server!\")) \n         if err != nil { \n               fmt.Println(err) \n               os.Exit(100) \n         } \n         time.Sleep(1 * time.Second) \n   } \n} \n```", "```go\n$ go run socketClient.go /tmp/aSocket\n->: Hello Server!\n```", "```go\n$ go run socketClient.go /tmp/aSocket\ndial unix /tmp/aSocket: connect: permission denied\nexit status 100\n```", "```go\n$ go run socketClient.go /tmp/aSocket\ndial unix /tmp/aSocket: connect: no such file or directory\nexit status 100\n```", "```go\n$ host 109.74.193.253\n253.193.74.109.in-addr.arpa domain name pointer li140-253.members.linode.com.\n```", "```go\n$ host www.mtsoukalos.eu\nwww.mtsoukalos.eu has address 109.74.193.253\n$ host www.highiso.net\nwww.highiso.net has address 109.74.193.253\n$ host -t a cnn.com\ncnn.com has address 151.101.1.67\ncnn.com has address 151.101.129.67\ncnn.com has address 151.101.65.67\ncnn.com has address 151.101.193.67\n```", "```go\npackage main \n\nimport ( \n   \"fmt\" \n   \"net\" \n   \"os\" \n) \n```", "```go\nfunc main() { \n   arguments := os.Args \n   if len(arguments) == 1 { \n         fmt.Println(\"Please provide an IP address!\") \n         os.Exit(100) \n   } \n\n   IP := arguments[1] \n   addr := net.ParseIP(IP) \n   if addr == nil { \n         fmt.Println(\"Not a valid IP address!\") \n         os.Exit(100) \n   } \n```", "```go\n   hosts, err := net.LookupAddr(IP) \n   if err != nil { \n         fmt.Println(err) \n         os.Exit(100) \n   } \n\n   for _, hostname := range hosts { \n         fmt.Println(hostname) \n   } \n} \n```", "```go\n$ go run lookIP.go 288.8.8.8\nNot a valid IP address!\nexit status 100\n$ go run lookIP.go 8.8.8.8\ngoogle-public-dns-a.google.com.\n```", "```go\n$ host 8.8.8.8\n8.8.8.8.in-addr.arpa domain name pointer google-public-dns-a.google.com.\n```", "```go\npackage main \n\nimport ( \n   \"fmt\" \n   \"net\" \n   \"os\" \n) \n```", "```go\nfunc main() { \n   arguments := os.Args \n   if len(arguments) == 1 { \n         fmt.Println(\"Please provide an argument!\") \n         os.Exit(100) \n   } \n\n   hostname := arguments[1] \n   IPs, err := net.LookupHost(hostname) \n```", "```go\n   if err != nil { \n         fmt.Println(err) \n         os.Exit(100) \n   } \n\n   for _, IP := range IPs { \n         fmt.Println(IP) \n   } \n} \n```", "```go\n$ go run lookHost.go www.google\nlookup www.google: no such host\nexit status 100\n$ go run lookHost.go www.google.com\n2a00:1450:4001:81f::2004\n172.217.16.164\n```", "```go\n$ host www.google.com\nwww.google.com has address 172.217.16.164\nwww.google.com has IPv6 address 2a00:1450:4001:81a::2004\n```", "```go\npackage main \n\nimport ( \n   \"fmt\" \n   \"net\" \n   \"os\" \n) \n```", "```go\nfunc main() { \n   arguments := os.Args \n   if len(arguments) == 1 { \n         fmt.Println(\"Please provide a domain!\") \n         os.Exit(100) \n   } \n\n   domain := arguments[1] \n\n   NSs, err := net.LookupNS(domain) \n```", "```go\n   if err != nil { \n         fmt.Println(err) \n         os.Exit(100) \n   } \n\n   for _, NS := range NSs { \n         fmt.Println(NS.Host) \n   } \n} \n```", "```go\n$ go run lookNS.go mtsoukalos.eu\nns5.linode.com.\nns2.linode.com.\nns3.linode.com.\nns1.linode.com.\nns4.linode.com.\n```", "```go\n$ go run lookNS.go www.mtsoukalos.eu\nlookup www.mtsoukalos.eu on 8.8.8.8:53: no such host\nexit status 100\n```", "```go\n$ host -t ns mtsoukalos.eu\nmtsoukalos.eu name server ns5.linode.com.\nmtsoukalos.eu name server ns4.linode.com.\nmtsoukalos.eu name server ns3.linode.com.\nmtsoukalos.eu name server ns1.linode.com.\nmtsoukalos.eu name server ns2.linode.com.\n$ host -t ns www.mtsoukalos.eu\nwww.mtsoukalos.eu has no NS record\n```", "```go\n$ grep echo /etc/services\necho        7/tcp\necho        7/udp\n```", "```go\npackage main \n\nimport ( \n   \"bufio\" \n   \"fmt\" \n   \"net\" \n   \"os\" \n   \"strings\" \n) \n```", "```go\nfunc main() { \n   arguments := os.Args \n   if len(arguments) == 1 { \n         fmt.Println(\"Please provide port number\") \n         os.Exit(100) \n   } \n```", "```go\n   PORT := \":\" + arguments[1] \n   l, err := net.Listen(\"tcp\", PORT) \n   if err != nil { \n         fmt.Println(err) \n         os.Exit(100) \n   } \n   defer l.Close() \n```", "```go\n   c, err := l.Accept() \n   if err != nil { \n         fmt.Println(err) \n         os.Exit(100) \n   } \n```", "```go\n   for { \n         netData, err := bufio.NewReader(c).ReadString('\\n') \n         if err != nil { \n               fmt.Println(err) \n               os.Exit(100) \n         } \n```", "```go\n         fmt.Print(\"-> \", string(netData)) \n         c.Write([]byte(netData)) \n         if strings.TrimSpace(string(netData)) == \"STOP\" { \n               fmt.Println(\"Exiting TCP server!\") \n               return \n         } \n   } \n} \n```", "```go\n$ go run TCPserver.go 1234\n-> Hi!\n-> STOP\nExiting TCP server!\n```", "```go\n$ nc localhost 1234 \nHi!\nHi!\nSTOP\nSTOP\n```", "```go\n$ go run TCPserver.go 123456\nlisten tcp: address 123456: invalid port\nexit status 100\n```", "```go\npackage main \n\nimport ( \n   \"bufio\" \n   \"fmt\" \n   \"net\" \n   \"os\" \n   \"strings\" \n) \n```", "```go\nfunc main() { \n   arguments := os.Args \n   if len(arguments) == 1 { \n         fmt.Println(\"Please provide host:port.\") \n         os.Exit(100) \n   } \n```", "```go\n   CONNECT := arguments[1] \n   c, err := net.Dial(\"tcp\", CONNECT) \n   if err != nil { \n         fmt.Println(err) \n         os.Exit(100) \n   } \n```", "```go\n   for { \n         reader := bufio.NewReader(os.Stdin) \n         fmt.Print(\">> \") \n         text, _ := reader.ReadString('\\n') \n         fmt.Fprintf(c, text+\"\\n\") \n```", "```go\n         message, _ := bufio.NewReader(c).ReadString('\\n') \n         fmt.Print(\"->: \" + message) \n         if strings.TrimSpace(string(text)) == \"STOP\" { \n               fmt.Println(\"TCP client exiting...\") \n               return \n         } \n   } \n} \n```", "```go\n$ go run TCPclient.go localhost:1024\n>> 123\n->: 123\n>> Hello server!\n->: Hello server!\n>> STOP\n->: STOP\nTCP client exiting...\n```", "```go\n$ go run TCPclient.go localhost:1024\ndial tcp [::1]:1024: getsockopt: connection refused\nexit status 100\n```", "```go\npackage main \n\nimport ( \n   \"fmt\" \n   \"net\" \n   \"os\" \n) \n```", "```go\nfunc main() { \n   arguments := os.Args \n   if len(arguments) == 1 { \n         fmt.Println(\"Please provide a port number!\") \n         os.Exit(100) \n   } \n\n   SERVER := \"localhost\" + \":\" + arguments[1] \n```", "```go\n   s, err := net.ResolveTCPAddr(\"tcp\", SERVER) \n   if err != nil { \n         fmt.Println(err) \n         os.Exit(100) \n   } \n\n   l, err := net.ListenTCP(\"tcp\", s) \n   if err != nil { \n         fmt.Println(err) \n         os.Exit(100) \n   } \n```", "```go\n   buffer := make([]byte, 1024) \n\n   for { \n         conn, err := l.Accept() \n         n, err := conn.Read(buffer) \n         if err != nil { \n               fmt.Println(err) \n               os.Exit(100) \n         } \n\n         fmt.Print(\"> \", string(buffer[0:n]))\n\n         _, err = conn.Write(buffer) \n\n         conn.Close() \n         if err != nil { \n               fmt.Println(err) \n               os.Exit(100) \n         } \n   } \n} \n```", "```go\n$ go run TCPs.go 123456\naddress 123456: invalid port\nexit status 100\n```", "```go\npackage main \n\nimport ( \n   \"fmt\" \n   \"net\" \n   \"os\" \n) \n```", "```go\nfunc main() { \n   arguments := os.Args \n   if len(arguments) == 1 { \n         fmt.Println(\"Please provide a server:port string!\") \n         os.Exit(100) \n   } \n\n   CONNECT := arguments[1] \n   myMessage := \"Hello from TCP client!\\n\" \n```", "```go\n   tcpAddr, err := net.ResolveTCPAddr(\"tcp\", CONNECT) \n   if err != nil { \n         fmt.Println(err) \n         os.Exit(100) \n   } \n\n   conn, err := net.DialTCP(\"tcp\", nil, tcpAddr) \n   if err != nil { \n         fmt.Println(err) \n         os.Exit(100) \n   } \n```", "```go\n   _, err = conn.Write([]byte(myMessage)) \n   if err != nil { \n         fmt.Println(err) \n         os.Exit(100) \n   } \n\n   fmt.Print(\"-> \", myMessage) \n   buffer := make([]byte, 1024)\n\n   n, err := conn.Read(buffer) \n   if err != nil { \n         fmt.Println(err) \n         os.Exit(100) \n   } \n\n   fmt.Print(\">> \", string(buffer[0:n])) \n   conn.Close() \n} \n```", "```go\npackage main \n\nimport ( \n   \"fmt\" \n   \"net\" \n   \"os\" \n   \"strings\" \n) \n```", "```go\nfunc main() { \n   arguments := os.Args \n   if len(arguments) == 1 { \n         fmt.Println(\"Please provide a port number!\") \n         os.Exit(100) \n   } \n   PORT := \":\" + arguments[1] \n```", "```go\n   s, err := net.ResolveUDPAddr(\"udp\", PORT) \n   if err != nil { \n         fmt.Println(err) \n         os.Exit(100) \n   } \n\n   connection, err := net.ListenUDP(\"udp\", s) \n   if err != nil { \n         fmt.Println(err) \n         os.Exit(100) \n   } \n```", "```go\n   defer connection.Close() \n   buffer := make([]byte, 1024) \n\n   for { \n         n, addr, err := connection.ReadFromUDP(buffer) \n         fmt.Print(\"-> \", string(buffer[0:n])) \n         data := []byte(buffer[0:n]) \n         _, err = connection.WriteToUDP(data, addr) \n         if err != nil { \n               fmt.Println(err) \n               os.Exit(100) \n         } \n```", "```go\n         if strings.TrimSpace(string(data)) == \"STOP\" { \n               fmt.Println(\"Exiting UDP server!\") \n               return \n         } \n   } \n} \n```", "```go\n$ go run UDPserver.go 1234\n-> Hi!\n-> Hello!\n-> STOP\nExiting UDP server!\n```", "```go\npackage main \n\nimport ( \n   \"fmt\" \n   \"net\" \n   \"os\" \n) \n```", "```go\nfunc main() { \n   arguments := os.Args \n   if len(arguments) == 1 { \n         fmt.Println(\"Please provide a host:port string\") \n         os.Exit(100) \n   } \n   CONNECT := arguments[1] \n```", "```go\n   s, err := net.ResolveUDPAddr(\"udp\", CONNECT) \n   c, err := net.DialUDP(\"udp\", nil, s) \n\n   if err != nil { \n         fmt.Println(err) \n         os.Exit(100) \n   } \n\n   fmt.Printf(\"The UDP server is %s\\n\", c.RemoteAddr().String()) \n   defer c.Close() \n```", "```go\n   data := []byte(\"Hello UDP Echo server!\\n\") \n   _, err = c.Write(data) \n\n   if err != nil { \n         fmt.Println(err) \n         os.Exit(100) \n   } \n```", "```go\n   buffer := make([]byte, 1024) \n   n, _, err := c.ReadFromUDP(buffer) \n   fmt.Print(\"Reply: \", string(buffer[:n])) \n} \n```", "```go\n$ go run UDPclient.go localhost:1234\nThe UDP server is 127.0.0.1:1234\nReply: Hello UDP Echo server!\n```", "```go\n$ go run UDPclient.go localhost:1024\nThe UDP server is 127.0.0.1:1024\nReply:\n```", "```go\npackage main \n\nimport ( \n   \"bufio\" \n   \"fmt\" \n   \"net\" \n   \"os\" \n   \"strings\" \n   \"time\" \n) \n```", "```go\nfunc handleConnection(c net.Conn) { \n   for { \n         netData, err := bufio.NewReader(c).ReadString('\\n') \n         if err != nil { \n               fmt.Println(err) \n               os.Exit(100) \n         } \n\n         fmt.Print(\"-> \", string(netData)) \n         c.Write([]byte(netData)) \n         if strings.TrimSpace(string(netData)) == \"STOP\" { \n               break \n         } \n   } \n   time.Sleep(3 * time.Second) \n   c.Close() \n} \n```", "```go\nfunc main() { \n   arguments := os.Args \n   if len(arguments) == 1 { \n         fmt.Println(\"Please provide a port number!\") \n         os.Exit(100) \n   } \n\n   PORT := \":\" + arguments[1] \n```", "```go\n   l, err := net.Listen(\"tcp\", PORT) \n   if err != nil { \n         fmt.Println(err) \n         os.Exit(100) \n   } \n   defer l.Close() \n```", "```go\n   for { \n         c, err := l.Accept() \n         if err != nil { \n               fmt.Println(err) \n               os.Exit(100) \n         } \n         go handleConnection(c) \n   } \n} \n```", "```go\n$ go run concTCP.go 1234\n-> Hi!\n-> Hello!\n-> STOP\n...\n```", "```go\npackage sharedRPC \n\ntype MyInts struct { \n   A1, A2 uint \n   S1, S2 bool \n} \n\ntype MyInterface interface {\n\n   Add(arguments *MyInts, reply *int) error \n   Subtract(arguments *MyInts, reply *int) error \n} \n```", "```go\n$ mkdir ~/go\n$ mkdir ~/go/src\n$ mkdir ~/go/src/sharedRPC\n$ export GOPATH=~/go\n$ vi ~/go/src/sharedRPC/sharedRPC.go\n$ go install sharedRPC\n```", "```go\n$ cd ~/go/pkg/darwin_amd64/\n$ ls -l sharedRPC.a\n-rw-r--r--  1 mtsouk  staff  4698 Jul 27 11:49 sharedRPC.a\n```", "```go\npackage main \n\nimport ( \n   \"fmt\" \n   \"net\" \n   \"net/rpc\" \n   \"os\" \n   \"sharedRPC\" \n) \n```", "```go\ntype MyInterface int \n\nfunc (t *MyInterface) Add(arguments *sharedRPC.MyInts, reply *int) error { \n   s1 := 1 \n   s2 := 1 \n\n   if arguments.S1 == true { \n         s1 = -1 \n   } \n\n   if arguments.S2 == true { \n         s2 = -1 \n   } \n\n   *reply = s1*int(arguments.A1) + s2*int(arguments.A2) \n   return nil \n} \n```", "```go\nfunc (t *MyInterface) Subtract(arguments *sharedRPC.MyInts, reply *int) error { \n   s1 := 1 \n   s2 := 1 \n\n   if arguments.S1 == true { \n         s1 = -1 \n   } \n\n   if arguments.S2 == true { \n         s2 = -1 \n   } \n\n   *reply = s1*int(arguments.A1) - s2*int(arguments.A2) \n   return nil \n} \n```", "```go\nfunc main() { \n   PORT := \":1234\" \n\n   myInterface := new(MyInterface) \n   rpc.Register(myInterface) \n\n   t, err := net.ResolveTCPAddr(\"tcp\", PORT) \n   if err != nil { \n         fmt.Println(err) \n         os.Exit(100) \n   } \n   l, err := net.ListenTCP(\"tcp\", t) \n   if err != nil { \n         fmt.Println(err) \n         os.Exit(100) \n   } \n```", "```go\n   for { \n         c, err := l.Accept() \n         if err != nil { \n               continue \n         } \n         rpc.ServeConn(c) \n   } \n} \n```", "```go\npackage main \n\nimport ( \n   \"fmt\" \n   \"net/rpc\" \n   \"os\" \n   \"sharedRPC\" \n) \n```", "```go\nfunc main() { \n   arguments := os.Args \n   if len(arguments) == 1 { \n         fmt.Println(\"Please provide a host:port string!\") \n         os.Exit(100) \n   } \n\n   CONNECT := arguments[1] \n```", "```go\n   c, err := rpc.Dial(\"tcp\", CONNECT) \n   if err != nil { \n         fmt.Println(err) \n         os.Exit(100) \n   } \n\n   args := sharedRPC.MyInts{17, 18, true, false} \n   var reply int \n```", "```go\n   err = c.Call(\"MyInterface.Add\", args, &reply) \n   if err != nil { \n         fmt.Println(err) \n         os.Exit(100) \n   } \n   fmt.Printf(\"Reply (Add): %d\\n\", reply) \n```", "```go\n   err = c.Call(\"MyInterface.Subtract\", args, &reply) \n   if err != nil { \n         fmt.Println(err) \n         os.Exit(100) \n   } \n   fmt.Printf(\"Reply (Subtract): %d\\n\", reply) \n} \n```", "```go\n$ go run RPCserver.go\n```", "```go\n$ go run RPCclient.go localhost:1234\nReply (Add): 1\nReply (Subtrack): -35\n```", "```go\n$ go run RPCclient.go localhost:1234\ndial tcp [::1]:1234: getsockopt: connection refused\nexit status 100\n```"]