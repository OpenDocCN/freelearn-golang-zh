- en: The Request/Response Cycle
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请求/响应循环
- en: Before you can build a web scraper, you must take a second and think about how
    the internet works. At its core, the internet is a network of computers connected
    together, discoverable through **Domain Lookup System** (**DNS**) servers. When
    you want to visit a website, your browser sends the website URL to a DNS server,
    the URL is translated into an IP address, and your browser then sends a request
    to the machine at that IP address. The machine, called a web server, receives
    and inspects the request, and makes a decision on what to send back to your browser.
    Your browser then parses the information sent by the server and displays content
    on your screen depending on the format of the data. The web server and browser
    are able to communicate because of the adherence to a global set of rules called
    the HTTP. In this chapter, you will learn some of the key points on the HTTP request
    and response cycle.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建网络爬虫之前，您必须花一点时间思考互联网是如何工作的。在其核心，互联网是一组通过**域名查找系统**（**DNS**）服务器连接在一起的计算机网络。当您想访问一个网站时，您的浏览器将网站URL发送到DNS服务器，URL被翻译成IP地址，然后您的浏览器发送请求到该IP地址的机器。这台机器称为Web服务器，接收并检查请求，并决定发送什么内容回到您的浏览器。然后您的浏览器解析服务器发送的信息，并根据数据的格式在屏幕上显示内容。Web服务器和浏览器之间能够通信是因为它们遵守了一套全球规则，称为HTTP。在本章中，您将学习HTTP请求和响应循环的一些关键点。
- en: 'This chapter covers the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: What do HTTP requests look like?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP请求是什么样子的？
- en: What do HTTP responses look like?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP响应是什么样子的？
- en: What are HTTP status codes?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP状态码是什么？
- en: What do HTTP requests/responses look like in Go?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go中的HTTP请求/响应是什么样子的？
- en: What do HTTP requests look like?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP请求是什么样子的？
- en: When a client (such as a browser) requests a web page from a server, it sends
    an HTTP request. The format for such a request defines an action, a resource,
    and the Version of the HTTP protocol. Some HTTP requests include extra information
    for the server to process, such as a query or specific metadata. Depending on
    the action, you also may be sending the server new information for the server
    to process.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端（如浏览器）从服务器请求网页时，它发送一个HTTP请求。这种请求的格式定义了一个操作、一个资源和HTTP协议的版本。一些HTTP请求包括额外的信息供服务器处理，如查询或特定的元数据。根据操作，您还可能向服务器发送新信息供服务器处理。
- en: HTTP request methods
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP请求方法
- en: 'There are nine current HTTP request methods, which define a general action
    desired by the client. Each method carries a particular connotation as to how
    the server should process the request. The nine request methods are as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有九种HTTP请求方法，它们定义了客户端期望的一般操作。每种方法都带有特定的含义，告诉服务器应该如何处理请求。这九种请求方法如下：
- en: '`GET`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET`'
- en: '`POST`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST`'
- en: '`PUT`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PUT`'
- en: '`DELETE`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE`'
- en: '`HEAD`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HEAD`'
- en: '`CONNECT`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CONNECT`'
- en: '`TRACE`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TRACE`'
- en: '`OPTIONS`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OPTIONS`'
- en: '`PATCH`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PATCH`'
- en: The most common request methods that you will need are `GET`, `POST`, and `PUT`. `GET`
    requests are used for retrieving information from a website. `POST` and `PUT`
    requests are for sending information, such as user login data, to a website. These
    types of requests are usually sent only when submitting some type of form data,
    which we will cover in later chapters in this book.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要的最常见的请求方法是`GET`、`POST`和`PUT`。`GET`请求用于从网站检索信息。`POST`和`PUT`请求用于向网站发送信息，例如用户登录数据。这些类型的请求通常只在提交某种形式的表单数据时发送，我们将在本书的后面章节中介绍这些内容。
- en: 'In building a web scraper, the vast majority of the time you will be sending
    HTTP `GET` requests to a server in order to get a web page. The simplest example
    of a `GET` request for [http://example.com/index.html](http://example.com/index.html)
    looks something like this:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建网络爬虫时，您将大部分时间向服务器发送HTTP `GET`请求以获取网页。对于[http://example.com/index.html](http://example.com/index.html)的最简单的`GET`请求示例如下：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The client sends this message to the server with the `GET` action to obtain
    the `index.html` resource using the `1.1` Version of the HTTP protocol. This first
    line of an HTTP request is called the request line and is the core of an HTTP
    request.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端使用`GET`操作将此消息发送到服务器，以使用HTTP协议的`1.1`版本获取`index.html`资源。HTTP请求的第一行称为请求行，是HTTP请求的核心。
- en: HTTP headers
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP头
- en: Below the request line are a series of key-value pairs that provide metadata
    describing how the request should be handled. These metadata fields are called
    HTTP headers. In our simple request, made earlier, we have a single HTTP header
    that defines the target host we are trying to reach. This information is not required
    by the HTTP protocol; however, it is almost always sent in order to provide clarification
    on who should be receiving the request.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在请求行下面是一系列键值对，提供了描述请求应该如何处理的元数据。这些元数据字段称为HTTP头。在我们之前的简单请求中，我们有一个单独的HTTP头，定义了我们要到达的目标主机。这些信息并不是HTTP协议要求的，但几乎总是发送以提供关于谁应该接收请求的澄清。
- en: 'If you were to inspect the HTTP request sent by your web browser, you would
    see many more HTTP headers. The following is an example sent by a Google Chrome
    browser to the same [example.com](http://example.com) website:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您检查您的Web浏览器发送的HTTP请求，您将看到更多的HTTP头。以下是Google Chrome浏览器发送给相同的[example.com](http://example.com)网站的示例：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The basics of the HTTP request are the same, however, your browser provides
    significantly more request headers, mostly related to how to handle cached HTML
    pages. We will discuss some of these headers in more detail in the following chapters.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP请求的基础是相同的，但是您的浏览器提供了更多的请求头，主要与如何处理缓存的HTML页面有关。我们将在接下来的章节中更详细地讨论其中一些头部。
- en: The server reads the request and processes all of the headers to decide how
    to respond to your request. In the most basic scenario, the server will respond
    saying Your request is OK and deliver the contents of `index.html`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器读取请求并处理所有头部，以决定如何响应您的请求。在最基本的情况下，服务器将回复说您的请求是OK，并传送`index.html`的内容。
- en: Query parameters
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询参数
- en: 'For some HTTP requests, extra information needs to be provided by the client
    in order to refine the request. This is usually done in two different ways. For
    HTTP `GET` requests, there is a defined way to include extra information in a
    request using the URL. Placing a `?` at the end of a URL defines the end of the
    URL resource, and the next section defines query parameters. These parameters
    are key-value pairs defining the extra information sent to the server. The key
    value pairs are written as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一些HTTP请求，客户端需要提供额外的信息以便细化请求。这通常有两种不同的方式。对于HTTP `GET`请求，有一种定义的方式来在请求中包含额外的信息。在URL的末尾放置一个`?`定义了URL资源的末尾，接下来的部分定义了查询参数。这些参数是键值对，定义了发送到服务器的额外信息。键值对的书写格式如下：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You will see this quite commonly when you are performing searches. As a hypothetical
    example, if you were on a site searching for shoes, you might encounter a paginated
    results page and the URL might look something like this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行搜索时，您会经常看到这种情况。举个假设的例子，如果您在一个网站上搜索鞋子，您可能会遇到一个分页的结果页面，URL可能看起来像这样：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice that the resource is `product_search`, which is followed by the query
    parameters for the `keyword` and the `page`. This way, you can collect the products
    from all pages by adjusting the query.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 注意资源是`product_search`，后面是`keyword`和`page`的查询参数。这样，您可以通过调整查询来收集所有页面的产品。
- en: Query parameters are defined by the website. There are no standard parameters
    that all websites must have, so it will take some investigation on your part depending
    on the site you are scraping.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 查询参数由网站定义。并没有所有网站都必须具有的标准参数，因此根据您正在抓取的网站的不同，您需要进行一些调查。
- en: Request body
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请求主体
- en: 'Query parameters are typically only used on HTTP `GET` requests. For requests
    where you are sending data to the server, such as `POST` and `PUT` requests, you
    would send a request body that holds all of your extra information. Request bodies
    are placed after the HTTP headers in an HTTP request, with a one-line space between
    them. The following is a hypothetical `POST` request for logging into an imaginary
    website:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 查询参数通常只用于HTTP `GET`请求。对于您向服务器发送数据的请求，比如`POST`和`PUT`请求，您将发送一个包含所有额外信息的请求主体。请求主体放置在HTTP请求的头部之后，它们之间有一行空格。以下是一个假设的用于登录到一个虚构网站的`POST`请求：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this request, we are sending our `username` and `password` to `myprotectedsite.com/login`.
    The headers for this request must describe the request body so the server is able
    to process it. In this case, we declare that the request body be in the `x-www-form-urlencoded`
    format, which is the same format used for the query parameters in the *Query parameters *section.
    We could use alternative formats, such as `JSON` or `XML` or even plain text,
    but only if it is supported by the server. The `x-www-form-urlencoded` format
    is the most widely supported and is generally a safe bet. The second parameter
    we define in the header is the length of the request body in bytes. This allows
    the server to efficiently prepare for processing the data, or rejecting the request
    completely if it is too large.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个请求中，我们将我们的`username`和`password`发送到`myprotectedsite.com/login`。这个请求的头部必须描述请求主体，以便服务器能够处理它。在这种情况下，我们声明请求主体以`x-www-form-urlencoded`格式，这是*查询参数*部分中使用的相同格式。我们可以使用其他格式，比如`JSON`或`XML`甚至纯文本，但前提是服务器支持。`x-www-form-urlencoded`格式是最广泛支持的，通常是一个安全的选择。我们在头部中定义的第二个参数是请求主体的字节长度。这允许服务器有效地准备处理数据，或者如果请求太大，则完全拒绝请求。
- en: The Go standard library has good support for building HTTP requests quite simply—if
    you are familiar with the structure, at least. We will revisit how this is done
    later in this chapter.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您熟悉结构，Go标准库对构建HTTP请求有很好的支持。我们将在本章后面重新讨论如何做到这一点。
- en: What do HTTP responses look like?
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP响应是什么样子的？
- en: When the server responds to your request, it will provide a status code, some
    response headers, and the content of the resource in most cases. Staying with
    our previous request for [http://www.example.com/index.html](http://www.example.com/index.html),
    you will be able to see what a typical response looks like, section by section.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器响应您的请求时，它通常会提供一个状态码、一些响应头和资源的内容。继续使用我们之前对[http://www.example.com/index.html](http://www.example.com/index.html)的请求，您将能够逐节看到典型响应的样子。
- en: Status line
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 状态行
- en: 'The first line of an HTTP response is called the status line and typically
    looks like this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP响应的第一行称为状态行，通常看起来像这样：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: First, it tells you what Version of the HTTP protocol the server is using. This
    should always match the version sent by the client HTTP request. In this case,
    our server is using version `1.1`. The next portion is the HTTP status code. This
    is code used to indicate the status of the response. Most of the time, you should
    see a status code of 200, indicating that the request was successful and a response
    body will follow. This is not always the case, and we will look deeper into HTTP
    status codes in the next section. The OK is a human-readable description of the
    status code, which is only used for your own reference.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，它告诉您服务器正在使用的HTTP协议的版本。这应该始终与客户端HTTP请求发送的版本匹配。在这种情况下，我们的服务器正在使用版本`1.1`。接下来是HTTP状态码。这是用来指示响应状态的代码。大多数情况下，您应该看到状态码为200，表示请求成功，并且会有一个响应主体跟随。这并不总是这样，我们将在下一节更深入地了解HTTP状态码。OK是状态码的可读描述，仅供您参考使用。
- en: Response headers
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应头
- en: 'HTTP response headers follow the status line and look very similar to HTTP
    request headers. These also provide metadata specific to the response, much like
    request headers do. Here are the headers from our [example.com](http://example.com)
    response:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP响应头跟随状态行，看起来与HTTP请求头非常相似。它们也提供了特定于响应的元数据，就像请求头一样。以下是我们[example.com](http://example.com)响应的头部：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this response, you can see some headers describing the content of the page,
    how to cache it, and the size of the remaining data. This information is useful
    for processing the data after it has been received.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在此响应中，您可以看到一些描述页面内容、如何缓存以及剩余数据大小的标头。在接收到数据后，这些信息对于处理数据是有用的。
- en: Response body
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应主体
- en: 'The rest of the response is the actual web page that renders `index.html`.
    Your browser would take this and draw the text, images, and styling for the web
    page itself, but for the purpose of scraping, it is not necessary. An abbreviated
    version of the response body looks similar to this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 响应的其余部分是实际呈现`index.html`的网页。您的浏览器将使用此内容绘制网页本身的文本、图像和样式，但是对于爬取的目的，这并非必要。响应主体的缩写版本类似于这样：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The majority of the time, you will be handling responses from a web server that
    has a status code of 200, meaning that the request was OK. However, from time
    to time, you will encounter other status codes that your web scraper should be
    aware of.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，您将处理具有状态码200的Web服务器的响应，表示请求正常。但是，偶尔您会遇到其他状态代码，您的网络爬虫应该知道。
- en: What are HTTP status codes?
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP状态码是什么？
- en: HTTP status codes are used to inform the HTTP client of the status of the HTTP
    request. In some cases, the HTTP server needs to inform the client that the request
    was not understood, or that extra actions need to be taken in order to get a full
    response. The HTTP status codes are divided into four separate ranges, each one
    covering a specific type of response.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP状态码用于通知HTTP客户端HTTP请求的状态。在某些情况下，HTTP服务器需要通知客户端请求未被理解，或者需要采取额外的操作才能获得完整的响应。HTTP状态码分为四个独立的范围，每个范围覆盖特定类型的响应。
- en: 100–199 range
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 100–199范围
- en: These codes are used to provide information to the HTTP client on how to deliver
    a request. These codes are usually processed by the HTTP client itself and will
    be handled before your web scraper needs to worry about them.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这些代码用于向HTTP客户端提供关于如何传递请求的信息。这些代码通常由HTTP客户端自己处理，在您的网络爬虫需要担心它们之前就会被处理。
- en: For example, the client may prefer that requests be sent using the HTTP 2.0
    protocol and request the server to change. If the server can support HTTP 2.0,
    it will respond with a status code of 101, meaning switching protocols. A case
    like this would be handled by the client under the hood, so you need not to be
    concerned about it.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，客户端可能希望使用HTTP 2.0协议发送请求，并请求服务器进行更改。如果服务器支持HTTP 2.0，它将以101状态代码响应，表示切换协议。这样的情况将由客户端在后台处理，因此您无需担心。
- en: 200–299 range
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 200–299范围
- en: The `200-299` range of status codes indicates that the request was successfully
    processed with no issues. The most important code to note here is a status code
    of 200\. This means you have a response body coming your way and everything was
    perfect!
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`200-299`范围的状态代码表示请求已成功处理，没有问题。在这里需要注意的最重要的代码是200状态代码。这意味着您将收到一个响应主体，并且一切都很完美！'
- en: In some cases, you might be downloading chunks of a large file (think on the
    scale of gigabytes) where you are requesting ranges of bytes to download from
    the server. In this case, a successful response should be a 206, meaning the server
    is returning partial content from the original file.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您可能正在下载大文件的块（考虑到几十亿字节的规模），在这种情况下，成功的响应应该是206，表示服务器正在返回原始文件的部分内容。
- en: Other codes in this range indicate that the request was successful but the server
    is processing information in the background, or there is no content at all. These
    are not typically seen in web scraping.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 此范围内的其他代码表示请求成功，但服务器正在后台处理信息，或者根本没有内容。这些通常不会在网络爬取中看到。
- en: 300–399 range
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 300–399范围
- en: If you encounter a status code in this range, it means that the request is understood
    but extra steps are necessary to get to the actual content. The most common cases
    you will run into here are for redirection.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遇到此范围内的状态代码，这意味着请求已被理解，但需要采取额外步骤才能获得实际内容。您在这里遇到的最常见情况是重定向。
- en: 'The 301, 302, 307, and 308 status codes all indicate that the resource you
    are looking for can be found at another location. In the header for this response,
    the server should indicate where the final location in the response header is.
    For example, a 301 response might look like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 301、302、307和308状态代码都表示您正在寻找的资源可以在另一个位置找到。在此响应的标头中，服务器应指示响应标头中的最终位置在哪里。例如，301响应可能如下所示：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The server includes a `Location` header telling the client where the location
    of the resource was moved to, and that the client should send the next request
    to that location. The content here can be ignored in most cases.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器包括一个`Location`标头，告诉客户端资源的位置已移动，并且客户端应该将下一个请求发送到该位置。在大多数情况下，这里的内容可以被忽略。
- en: Other status codes in this range are related to the use of proxies and cached
    information, both of which we will discuss in future chapters.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此范围内的其他状态代码与代理和缓存信息的使用有关，这两者我们将在未来的章节中讨论。
- en: 400–499 range
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 400–499范围
- en: When you encounter status codes in this range, you should be concerned. The
    `400` range indicates that there was something wrong with your request. There
    are many different issues that can trigger these responses, such as poor formatting,
    authentication issues, or unusual requests. Servers send these codes back to their
    clients to tell them that they will not fulfill the request because something
    looks sketchy.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当您遇到此范围内的状态代码时，您应该关注。`400`范围表示您的请求出了问题。许多不同的问题可能触发这些响应，例如格式不佳、身份验证问题或异常请求。服务器将这些代码发送回给它们的客户端，告诉它们不会满足请求，因为某些东西看起来可疑。
- en: One status code you may already be familiar with is 404 Not Found. This occurs
    when your request a resource that the server cannot seem to find. This could be
    due to a misspelling of the resource or because the page does not exist at all.
    Sometimes, websites update files on their servers and possibly forget to update
    the links in the web pages with their new locations. This can cause **broken links**,
    and it is especially common when a page links to an external website.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经熟悉的一个状态码是404 Not Found。当您请求服务器似乎找不到的资源时就会出现这种情况。这可能是由于资源拼写错误或页面根本不存在。有时，网站会在服务器上更新文件，可能忘记更新网页中与新位置的链接。这可能导致**损坏的链接**，尤其是当页面链接到外部网站时，这种情况特别常见。
- en: Other common status codes in this range that you may encounter are 401 Unauthorized
    and 403 Forbidden. In both cases, this means that you are trying to access pages
    that require proper authentication credentials. There are many different forms
    of authentication for the web, and this book will cover only the basics in the
    future chapters.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个范围内，您可能会遇到的其他常见状态码是401 Unauthorized和403 Forbidden。在这两种情况下，这意味着您正在尝试访问需要适当身份验证凭据的页面。网络上有许多不同形式的身份验证，本书将在未来的章节中仅涵盖基础知识。
- en: The last status code that I would like to highlight in this range is 429 Too
    Many Requests. Some web servers are configured with rate limits, meaning that
    you can only maintain a certain number of requests over a certain period of time.
    If you are surpassing this rate, then you are not only putting unreasonable stress
    on the web server, but you are also exposing your web scraper, which puts it at
    risk for being blacklisted. Following the proper web scraping etiquette is beneficial
    for both you and your target website.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我想要在这个范围内强调的最后一个状态码是429 Too Many Requests。一些Web服务器配置了速率限制，这意味着您在一定时间内只能维持一定数量的请求。如果您超过了这个速率，那么不仅会对Web服务器造成不合理的压力，而且还会暴露您的网络爬虫，使其有被列入黑名单的风险。遵守适当的网络爬取礼仪对您和目标网站都有益处。
- en: 500–599 range
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 500-599范围
- en: Status codes in this range usually represent errors pertaining to the server
    itself. Although these errors are usually not your fault, you will still need
    to be aware of them and adapt to the situation.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个范围内的状态码通常表示与服务器本身相关的错误。尽管这些错误通常不是您的错，但您仍需要意识到它们并适应情况。
- en: The status codes 502 Bad Gateway and 503 Service Temporarily Unavailable indicate
    that the server was unable to produce the resource due to a problem within the
    server. This does not necessarily mean that the resource does not exist, or that
    you are not allowed to access it. When you encounter these codes, it is best to
    put the request aside and try again later. If you are seeing these codes often,
    you may want to stop all requests and allow the server to address its issues.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 状态码502 Bad Gateway和503 Service Temporarily Unavailable表示服务器由于服务器内部问题而无法生成资源。这并不一定意味着资源不存在，或者您无权访问它。当遇到这些代码时，最好将请求搁置，稍后再试。如果您经常看到这些代码，您可能希望停止所有请求，让服务器解决其问题。
- en: There are cases where something in the web server breaks for no particular reason.
    In this case, you will receive a status code of 500 Internal Server Error. These
    errors are generic and are often the cause of a crash in the server code. The
    same advice for retrying your request, or having your scraper back off, are also
    relevant in this case.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候网页服务器会因为没有特定的原因而出现故障。在这种情况下，您将收到500 Internal Server Error状态码。这些错误是通用的，通常是服务器代码崩溃的原因。在这种情况下，重试您的请求或让您的抓取器暂时停止也是相关的建议。
- en: What do HTTP requests/responses look like in Go?
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Go中，HTTP请求/响应是什么样子的？
- en: Now that you are familiar with the basics of HTTP requests and responses, it's
    time to see what this looks like in Go. The standard library in Go provides a
    package named `net/http`, which contains all of the tools you will need to build
    a client that is capable of requesting pages from web servers and processing the
    responses with very little effort.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经熟悉了HTTP请求和响应的基础知识，是时候看看在Go中是什么样子了。Go中的标准库提供了一个名为`net/http`的包，其中包含了构建客户端所需的所有工具，可以从Web服务器请求页面并以极少的努力处理响应。
- en: 'Let''s take a look at the example from the beginning of this chapter, where
    we were accessing the web page at [http://www.example.com/index.html](http://www.example.com/index.html).
    The underlying HTTP request instructs the web server at [example.com](http://example.com)
    to `GET` the `index.html` resource:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下本章开头的示例，我们在访问[http://www.example.com/index.html](http://www.example.com/index.html)的网页。底层的HTTP请求指示[example.com](http://example.com)的Web服务器`GET`
    `index.html`资源：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Using the Go `net/http` package, you would use the following line of code:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Go的`net/http`包，您可以使用以下代码行：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The Go programming language allows for multiple variables to be returned from
    a single function. This is also how errors are typically thrown and handled.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Go编程语言允许从单个函数返回多个变量。这也是通常抛出和处理错误的方式。
- en: 'This is using the `net/http` package''s default HTTP client to request the
    `index.html` resource, which returns two objects: the HTTP response (`r`) and
    an error (`err`). In Go, errors are returned as values, instead of being thrown
    and caught by other code. If the `err` is equal to `nil`, then we know there were
    no issues communicating with the web server.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用`net/http`包的默认HTTP客户端请求`index.html`资源，返回两个对象：HTTP响应（`r`）和错误（`err`）。在Go中，错误是作为值返回的，而不是被其他代码抛出和捕获。如果`err`等于`nil`，那么我们知道与Web服务器通信没有问题。
- en: 'Let''s look at the response from the beginning of this chapter. If the request
    were successful, the server would return something like this:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下本章开头的响应。如果请求成功，服务器将返回类似以下内容：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'All of this information is contained in the `r` variable, which is a `*http.Response` that
    was returned from the `http.Get()` function. Let''s take a look at the definition
    of what an `http.Response` object looks like in Go. The following `struct` is
    defined in the Go standard library:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些信息都包含在`r`变量中，这是从`http.Get()`函数返回的`*http.Response`。让我们来看看Go中`http.Response`对象的定义。以下`struct`在Go标准库中定义：
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `http.Response` object contains all of the fields you need to process an
    HTTP response. Most notably, the `StatusCode`, `Header`, and `Body` would be useful
    in scraping. Let's put the request and response together in a simple example that
    saves the `index.html` file to your computer.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`http.Response`对象包含处理HTTP响应所需的所有字段。特别是，`StatusCode`，`Header`和`Body`在爬取中会很有用。让我们在一个简单的例子中将请求和响应放在一起，将`index.html`文件保存到您的计算机上。'
- en: A simple request example
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个简单的请求示例
- en: 'Inside the `$GOPATH/src` folder that you set up, create a folder called `simplerequest`.
    Inside `simplerequest`, create a file called `main.go`. Set the contents of `main.go`
    to be the following code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在您设置的`$GOPATH/src`文件夹中，创建一个名为`simplerequest`的文件夹。在`simplerequest`中，创建一个名为`main.go`的文件。将`main.go`的内容设置为以下代码：
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The example given here is a little verbose in order to show you the basics of
    Go programming. As you progress through the book, you will be introduced to tips
    and tricks to make your code more succinct.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这里给出的示例有点冗长，以便向您展示Go编程的基础知识。随着您在本书中的进展，您将了解到一些技巧，使您的代码更加简洁。
- en: 'You can run this code from inside the `simplerequest` folder by typing following
    command inside of a terminal window:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`terminal`窗口中输入以下命令来从`simplerequest`文件夹内运行此代码：
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If all goes well, you should not see messages printed, and there should be a
    new file called `index.html` containing the contents of the response body. You
    can even open the file with a web browser!
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，您不应该看到打印的消息，应该有一个名为`index.html`的新文件，其中包含响应主体的内容。您甚至可以用Web浏览器打开该文件！
- en: With these basics in mind, you should be on your way to creating a web scraper
    in Go that can create HTTP requests and read HTTP responses with just a few lines
    of code.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些基础知识，您应该可以创建一个在Go中可以使用几行代码创建HTTP请求和读取HTTP响应的网络爬虫。
- en: Summary
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered the basic formats of HTTP requests and responses.
    We also saw how HTTP requests are made in Go, as well as how the `http.Response`
    struct relates to real HTTP responses. Finally, we created a small program that
    sent an HTTP response to [http://www.example.com/index.html](http://www.example.com/index.html) and
    processed the HTTP response. For the full HTTP specification, I encourage you
    to visit [https://www.w3.org/Protocols/](https://www.w3.org/Protocols/).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了HTTP请求和响应的基本格式。我们还看到了如何在Go中进行HTTP请求，以及`http.Response`结构如何与真实的HTTP响应相关联。最后，我们创建了一个小程序，向[http://www.example.com/index.html](http://www.example.com/index.html)发送了一个HTTP响应，并处理了HTTP响应。有关完整的HTTP规范，我鼓励您访问[https://www.w3.org/Protocols/](https://www.w3.org/Protocols/)。
- en: In [Chapter 3](16487efd-3a75-4823-ad19-627a83752cd4.xhtml), *Web Scraping Etiquette*,
    we look at the best practices for being a good citizen of the web.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](16487efd-3a75-4823-ad19-627a83752cd4.xhtml)中，*网络爬虫礼仪*，我们将看到成为网络良好公民的最佳实践。
