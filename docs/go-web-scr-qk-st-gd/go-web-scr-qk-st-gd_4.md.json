["```go\n<!doctype html>\n<html>\n<head>\n  <title>Example Domain</title>\n  <meta charset=\"utf-8\" />\n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <!-- The <style> section was removed for brevity -->\n</head>\n<body>\n  <div>\n    <h1>Example Domain</h1>\n    <p>This domain is established to be used for illustrative examples \n       in documents. You may use this domain in examples without prior\n       coordination or asking for permission.</p>\n    <p><a href=\"http://www.iana.org/domains/example\">More \n        information...</a></p>\n  </div>\n</body>\n</html>\n```", "```go\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n```", "```go\npackage main\n\nimport (\n  \"fmt\"\n  \"io/ioutil\"\n  \"net/http\"\n  \"strings\"\n)\n\nfunc main() {\n  resp, err := http.Get(\"https://www.packtpub.com/\")\n  if err != nil {\n    panic(err)\n  }\n\n  data, err := ioutil.ReadAll(resp.Body)\n  if err != nil {\n    panic(err)\n  }\n\n  stringBody := string(data)\n\n  numLinks := strings.Count(stringBody, \"<a\")\n  fmt.Printf(\"Packt Publishing homepage has %d links!\\n\", numLinks)\n}\n```", "```go\npackage main\n\nimport (\n  \"io/ioutil\"\n  \"net/http\"\n  \"strings\"\n)\n\nfunc main() {\n  resp, err := http.Get(\"https://www.packtpub.com/\")\n  if err != nil {\n    panic(err)\n  }\n\n  data, err := ioutil.ReadAll(resp.Body)\n  if err != nil {\n    panic(err)\n  }\n\n  stringBody := strings.ToLower(string(data))\n\n  if strings.Contains(stringBody, \"<!doctype html>\") {\n    println(\"This webpage is HTML5\")\n  } else if strings.Contains(stringBody, \"html/strict.dtd\") {\n    println(\"This webpage is HTML4 (Strict)\")\n  } else if strings.Contains(stringBody, \"html/loose.dtd\") {\n    println(\"This webpage is HTML4 (Tranistional)\")\n  } else if strings.Contains(stringBody, \"html/frameset.dtd\") {\n    println(\"This webpage is HTML4 (Frameset)\")\n  } else {\n    println(\"Could not determine doctype!\")\n  }\n}\n```", "```go\n <a.*href\\s*=\\s*[\"'](http[s]{0,1}:\\/\\/.[^\\s]*)[\"'].*>\n```", "```go\npackage main\n\nimport (\n  \"fmt\"\n  \"io/ioutil\"\n  \"net/http\"\n        \"regexp\"\n)\n\nfunc main() {\n  resp, err := http.Get(\"https://www.packtpub.com/\")\n  if err != nil {\n    panic(err)\n  }\n\n  data, err := ioutil.ReadAll(resp.Body)\n  if err != nil {\n    panic(err)\n  }\n\n  stringBody := string(data)\n\n        re := regexp.MustCompile(`<a.*href\\s*=\\s*[\"'](http[s]{0,1}:\\/\\/.[^\\s]*)[\"'].*>`)\n        linkMatches := re.FindAllStringSubmatch(stringBody, -1)\n\n        fmt.Printf(\"Found %d links:\\n\", len(linkMatches))\n        for _,linkGroup := range(linkMatches){\n            println(linkGroup[1])\n        }\n}\n```", "```go\npackage main\n\nimport (\n  \"fmt\"\n  \"io/ioutil\"\n  \"net/http\"\n        \"regexp\"\n)\n\nfunc main() {\n  resp, err := http.Get(\"https://www.packtpub.com/application-development/hands-go-programming\")\n  if err != nil {\n    panic(err)\n  }\n\n  data, err := ioutil.ReadAll(resp.Body)\n  if err != nil {\n    panic(err)\n  }\n\n  stringBody := string(data)\n\n  re := regexp.MustCompile(`.*main-book-price.*\\n.*(\\$[0-9]*\\.[0-9]{0,2})`)\n  priceMatches := re.FindStringSubmatch(stringBody)\n\n  fmt.Printf(\"Book Price: %s\\n\", priceMatches[1])\n}\n```", "```go\ngo get github.com/antchfx/htmlquery\n```", "```go\npackage main\n\nimport (\n  \"regexp\"\n  \"strings\"\n\n  \"github.com/antchfx/htmlquery\"\n)\n\nfunc main() {\n  doc, err := htmlquery.LoadURL(\"https://www.packtpub.com/packt/offers/free-learning\")\n  if err != nil {\n    panic(err)\n  }\n\n  dealTextNodes := htmlquery.Find(doc, `//div[@class=\"dotd-main-book-summary float-left\"]//text()`)\n\n  if err != nil {\n    panic(err)\n  }\n\n  println(\"Here is the free book of the day!\")\n  println(\"----------------------------------\")\n\n  for _, node := range dealTextNodes {\n    text := strings.TrimSpace(node.Data)\n    matchTagNames, _ := regexp.Compile(\"^(div|span|h2|br|ul|li)$\")\n    text = matchTagNames.ReplaceAllString(text,\"\")\n    if text != \"\" {\n      println(text)\n    }\n  }\n}\n```", "```go\npackage main\n\nimport (\n  \"fmt\"\n  \"strconv\"\n\n  \"github.com/antchfx/htmlquery\"\n)\n\nfunc main() {\n  doc, err := htmlquery.LoadURL(\"https://www.packtpub.com/latest-\n  releases\")\n  if err != nil {\n    panic(err)\n  }\n\n  nodes := htmlquery.Find(doc, `//div[@class=\"landing-page-row \n  cf\"]/div[@itemtype=\"http://schema.org/Product\"]`)\n  if err != nil {\n    panic(err)\n  }\n\n  println(\"Here are the latest releases!\")\n  println(\"-----------------------------\")\n\n  for _, node := range nodes {\n    var title string\n    var price float64\n\n    for _, attribute := range node.Attr {\n      switch attribute.Key {\n      case \"data-product-title\":\n        title = attribute.Val\n      case \"data-product-price\":\n        price, err = strconv.ParseFloat(attribute.Val, 64)\n        if err != nil {\n          println(\"Failed to parse price\")\n        }\n      }\n    }\n    fmt.Printf(\"%s ($%0.2f)\\n\", title, price)\n  }\n}\n```", "```go\ngo get github.com/PuerkitoBio/goquery\n```", "```go\npackage main\n\nimport (\n  \"fmt\"\n  \"strconv\"\n\n  \"github.com/PuerkitoBio/goquery\"\n)\n\nfunc main() {\n  doc, err := goquery.NewDocument(\"https://www.packtpub.com/latest-\n  releases\")\n  if err != nil {\n    panic(err)\n  }\n\n  println(\"Here are the latest releases!\")\n  println(\"-----------------------------\")\n  doc.Find(`div.landing-page-row div[itemtype$=\"/Product\"]`).\n    Each(func(i int, e *goquery.Selection) {\n      var title string\n      var price float64\n\n      title,_ = e.Attr(\"data-product-title\")\n      priceString, _ := e.Attr(\"data-product-price\")\n      price, err = strconv.ParseFloat(priceString, 64)\n      if err != nil {\n        println(\"Failed to parse price\")\n      }\n      fmt.Printf(\"%s ($%0.2f)\\n\", title, price)\n    })\n}\n```", "```go\npackage main\n\nimport (\n  \"bufio\"\n  \"strings\"\n\n  \"github.com/PuerkitoBio/goquery\"\n)\n\nfunc main() {\n  doc, err := goquery.NewDocument(\"https://www.packtpub.com/packt/offers/free-learning\")\n  if err != nil {\n    panic(err)\n  }\n\n  println(\"Here is the free book of the day!\")\n  println(\"----------------------------------\")\n  rawText := doc.Find(`div.dotd-main-book-summary div:not(.eighteen-days-countdown-bar)`).Text()\n  reader := bufio.NewReader(strings.NewReader(rawText))\n\n  var line []byte\n  for err == nil{\n    line, _, err = reader.ReadLine()\n    trimmedLine := strings.TrimSpace(string(line))\n    if trimmedLine != \"\" {\n      println(trimmedLine)\n    }\n  }\n}\n```"]