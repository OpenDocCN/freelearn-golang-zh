["```go\npackage main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"time\"\n  \"github.com/PuerkitoBio/goquery\"\n)\n\nfunc main() {\n  doc, err := goquery.NewDocument(\"https://www.packtpub.com/latest-releases\")\n  if err != nil {\n    panic(err)\n  }\n\n  println(\"Here are the latest releases!\")\n  println(\"-----------------------------\")\n  time.Sleep(1 * time.Second)\n  doc.Find(`div.landing-page-row div[itemtype$=\"/Product\"] a`).\n    Each(func(i int, e *goquery.Selection) {\n      var title, description, author, price string\n      link, _ := e.Attr(\"href\")\n      link = \"https://www.packtpub.com\" + link\n\n      bookPage, err := goquery.NewDocument(link)\n      if err != nil {\n        panic(err)\n      }\n      title = bookPage.Find(\"div.book-top-block-info h1\").Text()\n      description = strings.TrimSpace(bookPage.Find(\"div.book-top-\n      block-info div.book-top-block-info-one-liner\").Text())\n      price = strings.TrimSpace(bookPage.Find(\"div.book-top-block-info \n      div.onlyDesktop div.book-top-pricing-main-ebook-price\").Text())\n      authorNodes := bookPage.Find(\"div.book-top-block-info div.book-\n      top-block-info-authors\")\n       if len(authorNodes.Nodes) < 1 {\n        return\n      } \n      author = strings.TrimSpace(authorNodes.Nodes[0].FirstChild.Data)\n      fmt.Printf(\"%s\\nby: %s\\n%s\\n%s\\n---------------------\\n\\n\", \n      title, author, price, description)\n      time.Sleep(1 * time.Second)\n    })\n}\n```", "```go\npackage main\n\nimport (\n  \"net/http\"\n  \"net/url\"\n)\n\nfunc main() {\n  data := url.Values{}\n  data.Set(\"s\", \"Golang\")\n\n  response, err := http.PostForm(\"https://hub.packtpub.com/\", data)\n\n  // ... Continue processing the response ...\n}\n```", "```go\nvisitedMap := map[string]interface{}{}\n```", "```go\nvisitedMap[\"http://example.com/index.html\"] = nil\n```", "```go\n_, ok := visitedMap[\"http://example.com/index.html\"]\n\nif ok {\n  // ok == true, meaning the URL exists in the visitedMap\n  // Skip this URL\n} else {\n  // ok == false, meaning the URL does not exist in the visitedMap\n  // Make the HTTP Request and continue processing this page\n  // ...\n} \n```", "```go\ngo get github.com/tebeka/selenium\n```", "```go\ngo get cloud.google.com/go/storage\ngo get github.com/golang/glog\ngo get google.golang.org/api/option\n```", "```go\ngo run init.go\n```", "```go\npackage main\n\nimport (\n  \"github.com/tebeka/selenium\"\n)\n```", "```go\nfunc main() {\n\n // The paths to these binaries will be different on your machine!\n\n  const (\n    seleniumPath = \"/home/vincent/Documents/workspace/Go/src/github.com/tebeka/selenium/vendor/selenium-server-standalone-3.14.0.jar\"\n\n  geckoDriverPath = \"/home/vincent/Documents/workspace/Go/src/github.com/tebeka/selenium/vendor/geckodriver-v0.23.0-linux64\"\n  )\n```", "```go\n  service, err := selenium.NewSeleniumService(\n    seleniumPath, \n    8080, \n    selenium.GeckoDriver(geckoDriverPath))\n\n  if err != nil {\n    panic(err)\n  }\n  defer service.Stop()\n\n  caps := selenium.Capabilities{\"browserName\": \"firefox\"}\n  wd, err := selenium.NewRemote(caps, \"http://localhost:8080/wd/hub\")\n  if err != nil {\n    panic(err)\n  }\n  defer wd.Quit()\n```", "```go\n  err = wd.Get(\"https://www.packtpub.com/networking-and-servers/mastering-go\")\n  if err != nil {\n    panic(err)\n  }\n\n  var elems []selenium.WebElement\n  wd.Wait(func(wd2 selenium.WebDriver) (bool, error) {\n    elems, err = wd.FindElements(selenium.ByCSSSelector, \"div.product-reviews-review div.review-body\")\n    if err != nil {\n      return false, err\n    } else {\n      return len(elems) > 0, nil\n    }\n  })\n\n  for _, review := range elems {\n    body, err := review.Text()\n    if err != nil {\n      panic(err)\n    }\n    println(body)\n  }\n}\n```"]