["```go\npackage main\nimport \n(\n  \"fmt\"\n  \"log\"\n  \"net/http\"\n)\nconst \n(\n  CONN_HOST = \"localhost\"\n  CONN_PORT = \"8080\"\n)\nfunc helloWorld(w http.ResponseWriter, r *http.Request) \n{\n  fmt.Fprintf(w, \"Hello World!\")\n}\nfunc main() \n{\n  http.HandleFunc(\"/\", helloWorld)\n  err := http.ListenAndServe(CONN_HOST+\":\"+CONN_PORT, nil)\n  if err != nil \n  {\n    log.Fatal(\"error starting http server : \", err)\n    return\n  }\n}\n```", "```go\n$ go run http-server.go\n```", "```go\npackage main\nimport \n(\n  \"crypto/subtle\"\n  \"fmt\"\n  \"log\"\n  \"net/http\"\n)\nconst \n(\n  CONN_HOST = \"localhost\"\n  CONN_PORT = \"8080\"\n  ADMIN_USER = \"admin\"\n  ADMIN_PASSWORD = \"admin\"\n)\nfunc helloWorld(w http.ResponseWriter, r *http.Request) \n{\n  fmt.Fprintf(w, \"Hello World!\")\n}\nfunc BasicAuth(handler http.HandlerFunc, realm string) http.HandlerFunc {\n  return func(w http.ResponseWriter, r *http.Request) \n  {\n    user, pass, ok := r.BasicAuth()\n    if !ok || subtle.ConstantTimeCompare([]byte(user),\n    []byte(ADMIN_USER)) != 1||subtle.ConstantTimeCompare([]byte(pass), \n    []byte(ADMIN_PASSWORD)) != 1 \n    {\n      w.Header().Set(\"WWW-Authenticate\", `Basic realm=\"`+realm+`\"`)\n      w.WriteHeader(401)\n      w.Write([]byte(\"You are Unauthorized to access the\n      application.\\n\"))\n      return\n    }\n    handler(w, r)\n  }\n}\nfunc main() \n{\n  http.HandleFunc(\"/\", BasicAuth(helloWorld, \"Please enter your\n  username and password\"))\n  err := http.ListenAndServe(CONN_HOST+\":\"+CONN_PORT, nil)\n  if err != nil \n  {\n    log.Fatal(\"error starting http server : \", err)\n    return\n  }\n}\n```", "```go\n$ go run http-server-basic-authentication.go\n```", "```go\n$ curl --user admin:admin http://localhost:8080/\nHello World!\n```", "```go\n$ curl -i -H 'Authorization:Basic YWRtaW46YWRtaW4=' http://localhost:8080/\n\nHTTP/1.1 200 OK\nDate: Sat, 12 Aug 2017 12:02:51 GMT\nContent-Length: 12\nContent-Type: text/plain; charset=utf-8\nHello World!\n```", "```go\nfunc BasicAuth(handler http.HandlerFunc, realm string) http.HandlerFunc \n{\n  return func(w http.ResponseWriter, r *http.Request)\n  {\n    user, pass, ok := r.BasicAuth()\n    if !ok || subtle.ConstantTimeCompare([]byte(user),\n    []byte(ADMIN_USER)) != 1||subtle.ConstantTimeCompare\n    ([]byte(pass),\n    []byte(ADMIN_PASSWORD)) != 1\n    {\n      w.Header().Set(\"WWW-Authenticate\", `Basic realm=\"`+realm+`\"`)\n      w.WriteHeader(401)\n      w.Write([]byte(\"Unauthorized.\\n\"))\n      return\n    }\n    handler(w, r)\n  }\n}\n```", "```go\nhttp.HandleFunc(\"/\", BasicAuth(helloWorld, \"Please enter your username and password\"))\n```", "```go\n$ go get github.com/gorilla/handlers\n```", "```go\npackage main\nimport \n(\n  \"io\"\n  \"net/http\"\n  \"github.com/gorilla/handlers\"\n)\nconst \n(\n  CONN_HOST = \"localhost\"\n  CONN_PORT = \"8080\"\n)\nfunc helloWorld(w http.ResponseWriter, r *http.Request) \n{\n  io.WriteString(w, \"Hello World!\")\n}\nfunc main() \n{\n  mux := http.NewServeMux()\n  mux.HandleFunc(\"/\", helloWorld)\n  err := http.ListenAndServe(CONN_HOST+\":\"+CONN_PORT,\n  handlers.CompressHandler(mux))\n  if err != nil \n  {\n    log.Fatal(\"error starting http server : \", err)\n    return\n  }\n}\n```", "```go\n$ go run http-server-mux.go\n```", "```go\npackage main\nimport \n(\n  \"log\"\n  \"net\"\n)\nconst \n(\n  CONN_HOST = \"localhost\"\n  CONN_PORT = \"8080\"\n  CONN_TYPE = \"tcp\"\n)\nfunc main() \n{\n  listener, err := net.Listen(CONN_TYPE, CONN_HOST+\":\"+CONN_PORT)\n  if err != nil \n  {\n    log.Fatal(\"Error starting tcp server : \", err)\n  }\n  defer listener.Close()\n  log.Println(\"Listening on \" + CONN_HOST + \":\" + CONN_PORT)\n  for \n  {\n    conn, err := listener.Accept()\n    if err != nil \n    {\n      log.Fatal(\"Error accepting: \", err.Error())\n    }\n    log.Println(conn)\n  }\n}\n```", "```go\n$ go run tcp-server.go\n```", "```go\nfor \n{\n  conn, err := listener.Accept()\n  if err != nil \n  {\n    log.Fatal(\"Error accepting: \", err.Error())\n  }\n  log.Println(conn)\n}\n```", "```go\npackage main\nimport \n(\n  \"bufio\"\n  \"fmt\"\n  \"log\"\n  \"net\"\n)\nconst \n(\n  CONN_HOST = \"localhost\"\n  CONN_PORT = \"8080\"\n  CONN_TYPE = \"tcp\"\n)\nfunc main() \n{\n  listener, err := net.Listen(CONN_TYPE, CONN_HOST+\":\"+CONN_PORT)\n  if err != nil \n  {\n    log.Fatal(\"Error starting tcp server : \", err)\n  }\n  defer listener.Close()\n  log.Println(\"Listening on \" + CONN_HOST + \":\" + CONN_PORT)\n  for \n  {\n    conn, err := listener.Accept()\n    if err != nil \n    {\n      log.Fatal(\"Error accepting: \", err.Error())\n    }\n    go handleRequest(conn)\n  }\n}\nfunc handleRequest(conn net.Conn) \n{\n  message, err := bufio.NewReader(conn).ReadString('\\n')\n  if err != nil \n  {\n    fmt.Println(\"Error reading:\", err.Error())\n  }\n  fmt.Print(\"Message Received from the client: \", string(message))\n  conn.Close()\n}\n```", "```go\n$ go run tcp-server-read-data.go\n```", "```go\n$ echo -n \"Hello to TCP server\\n\" | nc localhost 8080\n```", "```go\nfunc main() \n{\n  ...\n  go handleRequest(conn)\n  ...\n}\n```", "```go\nfunc handleRequest(conn net.Conn) \n{\n  message, err := bufio.NewReader(conn).ReadString('\\n')\n  if err != nil \n  {\n    fmt.Println(\"Error reading:\", err.Error())\n  }\n  fmt.Print(\"Message Received: \", string(message))\n  conn.Close()\n}\n```", "```go\npackage main\nimport \n(\n  \"bufio\"\n  \"fmt\"\n  \"log\"\n  \"net\"\n)\nconst \n(\n  CONN_HOST = \"localhost\"\n  CONN_PORT = \"8080\"\n  CONN_TYPE = \"tcp\"\n)\nfunc main() \n{\n  listener, err := net.Listen(CONN_TYPE, CONN_HOST+\":\"+CONN_PORT)\n  if err != nil \n  {\n    log.Fatal(\"Error starting tcp server : \", err)\n  }\n  defer listener.Close()\n  log.Println(\"Listening on \" + CONN_HOST + \":\" + CONN_PORT)\n  for \n  {\n    conn, err := listener.Accept()\n    if err != nil \n    {\n      log.Fatal(\"Error accepting: \", err.Error())\n    }\n    go handleRequest(conn)\n  }\n}\nfunc handleRequest(conn net.Conn) \n{\n  message, err := bufio.NewReader(conn).ReadString('\\n')\n  if err != nil \n  {\n    fmt.Println(\"Error reading: \", err.Error())\n  }\n  fmt.Print(\"Message Received:\", string(message))\n  conn.Write([]byte(message + \"\\n\"))\n  conn.Close()\n}\n```", "```go\n$ go run tcp-server-write-data.go\n```", "```go\n$ echo -n \"Hello to TCP server\\n\" | nc localhost 8080\n```", "```go\nHello to TCP server\n```", "```go\nfunc handleRequest(conn net.Conn) \n{\n  ...\n  conn.Write([]byte(message + \"\\n\"))\n  ...\n}\n```", "```go\npackage main\nimport \n(\n  \"fmt\"\n  \"log\"\n  \"net/http\"\n)\nconst \n(\n  CONN_HOST = \"localhost\"\n  CONN_PORT = \"8080\"\n)\nfunc helloWorld(w http.ResponseWriter, r *http.Request) \n{\n  fmt.Fprintf(w, \"Hello World!\")\n}\nfunc login(w http.ResponseWriter, r *http.Request) \n{\n  fmt.Fprintf(w, \"Login Page!\")\n}\nfunc logout(w http.ResponseWriter, r *http.Request) \n{\n  fmt.Fprintf(w, \"Logout Page!\")\n}\nfunc main() \n{\n  http.HandleFunc(\"/\", helloWorld)\n  http.HandleFunc(\"/login\", login)\n  http.HandleFunc(\"/logout\", logout)\n  err := http.ListenAndServe(CONN_HOST+\":\"+CONN_PORT, nil)\n  if err != nil \n  {\n    log.Fatal(\"error starting http server : \", err)\n    return\n  }\n}\n```", "```go\n$ go run http-server-basic-routing.go\n```", "```go\n$ curl -X GET -i http://localhost:8080/\n```", "```go\n$ curl -X GET -i http://localhost:8080/login\n```", "```go\nfunc helloWorld(w http.ResponseWriter, r *http.Request) \n{\n  fmt.Fprintf(w, \"Hello World!\")\n}\nfunc login(w http.ResponseWriter, r *http.Request) \n{\n  fmt.Fprintf(w, \"Login Page!\")\n}\nfunc logout(w http.ResponseWriter, r *http.Request) \n{\n  fmt.Fprintf(w, \"Logout Page!\")\n}\n```", "```go\nfunc main() \n{\n  http.HandleFunc(\"/\", helloWorld)\n  http.HandleFunc(\"/login\", login)\n  http.HandleFunc(\"/logout\", logout)\n  err := http.ListenAndServe(CONN_HOST+\":\"+CONN_PORT, nil)\n  if err != nil \n  {\n    log.Fatal(\"error starting http server : \", err)\n    return\n  }\n}\n```", "```go\n$ go get github.com/gorilla/mux\n```", "```go\npackage main\nimport \n(\n  \"net/http\"\n  \"github.com/gorilla/mux\"\n)\nconst \n(\n  CONN_HOST = \"localhost\"\n  CONN_PORT = \"8080\"\n)\nvar GetRequestHandler = http.HandlerFunc\n(\n  func(w http.ResponseWriter, r *http.Request) \n  {\n    w.Write([]byte(\"Hello World!\"))\n  }\n)\nvar PostRequestHandler = http.HandlerFunc\n(\n  func(w http.ResponseWriter, r *http.Request) \n  {\n    w.Write([]byte(\"It's a Post Request!\"))\n  }\n)\nvar PathVariableHandler = http.HandlerFunc\n(\n  func(w http.ResponseWriter, r *http.Request) \n  {\n    vars := mux.Vars(r)\n    name := vars[\"name\"]\n    w.Write([]byte(\"Hi \" + name))\n  }\n)\nfunc main() \n{\n  router := mux.NewRouter()\n  router.Handle(\"/\", GetRequestHandler).Methods(\"GET\")\n  router.Handle(\"/post\", PostRequestHandler).Methods(\"POST\")\n  router.Handle(\"/hello/{name}\", \n  PathVariableHandler).Methods(\"GET\", \"PUT\")\n  http.ListenAndServe(CONN_HOST+\":\"+CONN_PORT, router)\n}\n```", "```go\n$ go run http-server-gorilla-mux-routing.go\n```", "```go\n$ curl -X GET -i http://localhost:8080/\n```", "```go\n$ curl -X GET -i http://localhost:8080/hello/foo\n```", "```go\nvar GetRequestHandler = http.HandlerFunc\n(\n  func(w http.ResponseWriter, r *http.Request) \n  {\n    w.Write([]byte(\"Hello World!\"))\n  }\n)\nvar PostRequestHandler = http.HandlerFunc\n(\n  func(w http.ResponseWriter, r *http.Request) \n  {\n    w.Write([]byte(\"It's a Post Request!\"))\n  }\n)\n```", "```go\nvar PathVariableHandler = http.HandlerFunc\n(\n  func(w http.ResponseWriter, r *http.Request) \n  {\n    vars := mux.Vars(r)\n    name := vars[\"name\"]\n    w.Write([]byte(\"Hi \" + name))\n  }\n)\n```", "```go\nfunc main() \n{\n  router := mux.NewRouter()\n  router.Handle(\"/\", GetRequestHandler).Methods(\"GET\")\n  router.Handle(\"/post\", PostCallHandler).Methods(\"POST\")\n  router.Handle(\"/hello/{name}\", PathVariableHandler).\n  Methods(\"GET\", \"PUT\")\n  http.ListenAndServe(CONN_HOST+\":\"+CONN_PORT, router)\n}\n```", "```go\n$ go get github.com/gorilla/handlers\n$ go get github.com/gorilla/mux\n```", "```go\npackage main\nimport \n(\n  \"net/http\"\n  \"os\"\n  \"github.com/gorilla/handlers\"\n  \"github.com/gorilla/mux\"\n)\nconst \n(\n  CONN_HOST = \"localhost\"\n  CONN_PORT = \"8080\"\n)\nvar GetRequestHandler = http.HandlerFunc\n(\n  func(w http.ResponseWriter, r *http.Request) \n  {\n    w.Write([]byte(\"Hello World!\"))\n  }\n)\nvar PostRequestHandler = http.HandlerFunc\n(\n  func(w http.ResponseWriter, r *http.Request) \n  {\n    w.Write([]byte(\"It's a Post Request!\"))\n  }\n)\nvar PathVariableHandler = http.HandlerFunc\n(\n  func(w http.ResponseWriter, r *http.Request) \n  {\n    vars := mux.Vars(r)\n    name := vars[\"name\"]\n    w.Write([]byte(\"Hi \" + name))\n  }\n)\nfunc main() \n{\n  router := mux.NewRouter()\n  router.Handle(\"/\", handlers.LoggingHandler(os.Stdout,\n  http.HandlerFunc(GetRequestHandler))).Methods(\"GET\")\n  logFile, err := os.OpenFile(\"server.log\",\n  os.O_WRONLY|os.O_CREATE|os.O_APPEND, 0666)\n  if err != nil \n  {\n    log.Fatal(\"error starting http server : \", err)\n    return\n  }\n  router.Handle(\"/post\", handlers.LoggingHandler(logFile,\n  PostRequestHandler)).Methods(\"POST\")\n  router.Handle(\"/hello/{name}\",\n  handlers.CombinedLoggingHandler(logFile,\n  PathVariableHandler)).Methods(\"GET\")\n  http.ListenAndServe(CONN_HOST+\":\"+CONN_PORT, router)\n}\n```", "```go\n$ go run http-server-request-logging.go\n```", "```go\n$ curl -X GET -i http://localhost:8080/\n```", "```go\n$ curl -X GET -i http://localhost:8080/hello/foo\n```", "```go\nimport ( \"net/http\" \"os\" \"github.com/gorilla/handlers\" \"github.com/gorilla/mux\" )\n```", "```go\nlogFile, err := os.OpenFile(\"server.log\", os.O_WRONLY|os.O_CREATE|os.O_APPEND, 0666)\nif err != nil \n{\n  log.Fatal(\"error starting http server : \", err)\n  return\n}\n```"]