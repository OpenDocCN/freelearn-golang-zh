["```go\n$ protoc --version\n libprotoc 3.3.2\n```", "```go\n$ git clone https://github.com/google/protobuf\n$ cd protobuf\n$ ./autogen.sh\n$ ./configure\n$ make\n$ make check\n$ make install\n```", "```go\nsyntax = \"proto3\";\nservice Say \n{\n  rpc Hello(Request) returns (Response) {}\n}\nmessage Request \n{\n  string name = 1;\n}\nmessage Response \n{\n  string msg = 1;\n}\n```", "```go\n$ protoc --go_out=plugins=micro:. hello.proto\n```", "```go\n$ consul version\n Consul v0.8.5\n Protocol 2 spoken by default, understands 2 to 3 (agent will automatically use protocol >2 when speaking to compatible agents)\n```", "```go\n$ consul agent -dev\n```", "```go\n$ consul members\n```", "```go\n$ consul agent -dev\n```", "```go\n$ go get github.com/micro/micro\n$ micro api\n 2018/02/06 00:03:36 Registering RPC Handler at /rpc\n 2018/02/06 00:03:36 Registering API Default Handler at /\n 2018/02/06 00:03:36 Listening on [::]:8080\n 2018/02/06 00:03:36 Listening on [::]:54814\n 2018/02/06 00:03:36 Broker Listening on [::]:54815\n 2018/02/06 00:03:36 Registering node: go.micro.api-a6a82a54-0aaf-11e8-8d64-685b35d52676\n```", "```go\npackage main\nimport \n(\n  \"log\"\n  \"time\"\n  hello \"../proto\"\n  \"github.com/micro/go-micro\"\n)\ntype Say struct{}\nfunc (s *Say) Hello(ctx context.Context, req *hello.Request, \nrsp *hello.Response) error \n{\n  log.Print(\"Received Say.Hello request - first greeting service\")\n  rsp.Msg = \"Hello \" + req.Name\n  return nil\n}\nfunc main() \n{\n  service := micro.NewService\n  (\n    micro.Name(\"go.micro.service.greeter\"),\n    micro.RegisterTTL(time.Second*30),\n    micro.RegisterInterval(time.Second*10),\n  )\n  service.Init()\n  hello.RegisterSayHandler(service.Server(), new(Say))\n  if err := service.Run(); err != nil \n  {\n    log.Fatal(\"error starting service : \", err)\n    return\n  }\n}\n```", "```go\n$ go run first-greeting-service.go\n```", "```go\n$ curl -X POST -H 'Content-Type: application/json' -d '{\"service\": \"go.micro.service.greeter\", \"method\": \"Say.Hello\", \"request\": {\"name\": \"Arpit Aggarwal\"}}' http://localhost:8080/rpc\n```", "```go\npackage main\nimport \n(\n  \"context\"\n  \"log\"\n  \"time\"\n  hello \"../proto\"\n  \"github.com/micro/go-micro\"\n)\ntype Say struct{}\nfunc (s *Say) Hello(ctx context.Context, req *hello.Request, \nrsp *hello.Response) error \n{\n  log.Print(\"Received Say.Hello request - second greeting\n  service\")\n  rsp.Msg = \"Hello \" + req.Name\n  return nil\n}\nfunc main() \n{\n  service := micro.NewService\n  (\n    micro.Name(\"go.micro.service.greeter\"),\n    micro.RegisterTTL(time.Second*30),\n    micro.RegisterInterval(time.Second*10),\n  )\n  service.Init()\n  hello.RegisterSayHandler(service.Server(), new(Say))\n  if err := service.Run(); err != nil \n  {\n    log.Fatal(\"error starting service : \", err)\n    return\n  }\n}\n```", "```go\n$ go run second-greeting-service.go\n```", "```go\n$ curl -X POST -H 'Content-Type: application/json' -d '{\"service\": \"go.micro.service.greeter\", \"method\": \"Say.Hello\", \"request\": {\"name\": \"Arpit Aggarwal\"}}' http://localhost:8080/rpc\n```", "```go\n$ consul agent -dev\n$ micro api\n$ go run first-greeting-service.go\n$ go run second-greeting-service.go\n```", "```go\npackage main\nimport \n(\n  \"context\"\n  \"encoding/json\"\n  \"log\"\n  \"strings\"\n  hello \"../proto\"\n  \"github.com/micro/go-micro\"\n  api \"github.com/micro/micro/api/proto\"\n)\ntype Say struct \n{\n  Client hello.SayClient\n}\nfunc (s *Say) Hello(ctx context.Context, req *api.Request, \nrsp *api.Response) error \n{\n  log.Print(\"Received Say.Hello request - Micro Greeter API\")\n  name, ok := req.Get[\"name\"]\n  if ok \n  {\n    response, err := s.Client.Hello\n    (\n      ctx, &hello.Request\n      {\n        Name: strings.Join(name.Values, \" \"),\n      }\n    )\n    if err != nil \n    {\n      return err\n    }\n    message, _ := json.Marshal\n    (\n      map[string]string\n      {\n        \"message\": response.Msg,\n      }\n    )\n    rsp.Body = string(message)\n  }\n  return nil\n}\nfunc main() \n{\n  service := micro.NewService\n  (\n    micro.Name(\"go.micro.api.greeter\"),\n  )\n  service.Init()\n  service.Server().Handle\n  (\n    service.Server().NewHandler\n    (\n      &Say{Client: hello.NewSayClient(\"go.micro.service.\n      greeter\", service.Client())},\n    ),\n  )\n  if err := service.Run(); err != nil \n  {\n    log.Fatal(\"error starting micro api : \", err)\n    return\n  }\n}\n```", "```go\n$ go run greeting-api.go\n```", "```go\n$ go get github.com/micro/micro\n```", "```go\n$ micro web\n```"]