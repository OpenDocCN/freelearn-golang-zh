["```go\n$ go get github.com/gorilla/websocket\n```", "```go\npackage main \nimport \n(\n  \"log\"\n  \"net/http\"\n  \"github.com/gorilla/websocket\"\n)\nvar clients = make(map[*websocket.Conn]bool)\nvar broadcast = make(chan Message) \nvar upgrader = websocket.Upgrader{}\ntype Message struct \n{\n  Message string `json:\"message\"`\n}\nfunc HandleClients(w http.ResponseWriter, r *http.Request) \n{\n  go broadcastMessagesToClients()\n  websocket, err := upgrader.Upgrade(w, r, nil)\n  if err != nil \n  {\n    log.Fatal(\"error upgrading GET request to a \n    websocket :: \", err)\n  }\n  defer websocket.Close()\n  clients[websocket] = true\n  for \n  {\n    var message Message\n    err := websocket.ReadJSON(&message)\n    if err != nil \n    {\n      log.Printf(\"error occurred while reading \n      message : %v\", err)\n      delete(clients, websocket)\n      break\n    }\n    broadcast <- message\n  }\n}\nfunc main() \n{\n  http.HandleFunc\n  (\n    \"/\", func(w http.ResponseWriter, \n    r *http.Request) \n    {\n      http.ServeFile(w, r, \"index.html\")\n    }\n  )\n  http.HandleFunc(\"/echo\", HandleClients)\n  err := http.ListenAndServe(\":8080\", nil)\n  if err != nil \n  {\n    log.Fatal(\"error starting http server :: \", err)\n    return\n  }\n}\nfunc broadcastMessagesToClients() \n{\n  for \n  {\n    message := <-broadcast\n    for client := range clients \n    {\n      err := client.WriteJSON(message)\n      if err != nil \n      {\n        log.Printf(\"error occurred while writing \n        message to client: %v\", err)\n        client.Close()\n        delete(clients, client)\n      }\n    }\n  }\n}\n```", "```go\n$ go run websocket-server.go\n```", "```go\n<html>\n  <title>WebSocket Server</title>\n  <input id=\"input\" type=\"text\" />\n  <button onclick=\"send()\">Send</button>\n  <pre id=\"output\"></pre>\n  <script>\n    var input = document.getElementById(\"input\");\n    var output = document.getElementById(\"output\");\n    var socket = new WebSocket(\"ws://\" + window.\n    location.host + \"/echo\");\n    socket.onopen = function () \n    {\n      output.innerHTML += \"Status: Connected\\n\";\n    };\n    socket.onmessage = function (e) \n    {\n      output.innerHTML += \"Message from Server: \" + \n      e.data + \"\\n\";\n    };\n    function send() \n    {\n      socket.send\n      (\n        JSON.stringify\n        (\n          {\n            message: input.value\n          }\n        )\n      );\n      input.value = \"\";\n    }\n  </script>\n</html>\n```", "```go\n$ go run websocket-server.go\n```", "```go\ndlv debug --headless --listen=:2345 --api-version=2\n```", "```go\n$ go get github.com/gorilla/websocket\n$ go get github.com/stretchr/testify/assert\n```", "```go\npackage main\nimport \n(\n  \"net/http\"\n  \"net/http/httptest\"\n  \"strings\"\n  \"testing\"\n  \"github.com/gorilla/websocket\"\n  \"github.com/stretchr/testify/assert\"\n)\nfunc TestWebSocketServer(t *testing.T) \n{\n  server := httptest.NewServer(http.HandlerFunc\n  (HandleClients))\n  defer server.Close()\n  u := \"ws\" + strings.TrimPrefix(server.URL, \"http\")\n  socket, _, err := websocket.DefaultDialer.Dial(u, nil)\n  if err != nil \n  {\n    t.Fatalf(\"%v\", err)\n  }\n  defer socket.Close()\n  m := Message{Message: \"hello\"}\n  if err := socket.WriteJSON(&m); err != nil \n  {\n    t.Fatalf(\"%v\", err)\n  }\n  var message Message\n  err = socket.ReadJSON(&message)\n  if err != nil \n  {\n    t.Fatalf(\"%v\", err)\n  }\n  assert.Equal(t, \"hello\", message.Message, \"they \n  should be equal\")\n}\n```", "```go\n$ go test websocket-server_test.go websocket-server.go\nok  command-line-arguments 0.048s\n```", "```go\n...\nassert.Equal(t, \"hi\", message.Message, \"they should be equal\")\n...\n```", "```go\n$ go test websocket-server_test.go websocket-server.go\n```"]