- en: Working with the Go Web Application Framework – Beego
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Go Web应用程序框架-Beego
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Creating your first project using Beego
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Beego创建你的第一个项目
- en: Creating your first controller and router
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你的第一个控制器和路由器
- en: Creating your first view
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你的第一个视图
- en: Creating your first session variable
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你的第一个会话变量
- en: Creating your first filter
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你的第一个过滤器
- en: Handling HTTP errors in Beego
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Beego中处理HTTP错误
- en: Implementing caching in Beego
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Beego中实现缓存
- en: Monitoring the Beego application
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监视Beego应用程序
- en: Deploying the Beego application on a local machine
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本地机器上部署Beego应用程序
- en: Deploying the Beego application with Nginx
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Nginx部署Beego应用程序
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: A web application framework is a must whenever we are developing an application
    because it significantly speeds up and simplifies our work by eliminating the
    need to write a lot of repetitive code and providing features such as models,
    APIs, and other elements. Using an application framework, we can enjoy the perks
    of its architecture pattern and boost the development of an application.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 无论何时我们开发一个应用程序，Web应用程序框架都是必不可少的，因为它通过消除编写大量重复代码的需要并提供模型、API和其他元素等功能，显著加快和简化了我们的工作。使用应用程序框架，我们可以享受其架构模式的好处，并加速应用程序的开发。
- en: A popular type of web application framework is **Model-View-Controller** (**MVC**)
    and there are many MVC frameworks available for Go, such as Revel, Utron, and
    Beego.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一种流行的Web应用程序框架类型是**模型-视图-控制器**（**MVC**），Go语言有许多MVC框架可用，如Revel、Utron和Beego。
- en: In this chapter, we will learn about Beego, which is one of the most popular
    and commonly used web MVC frameworks. We will start with creating the project
    and then move on to creating controllers, views, and  filters. We will also look
    at implementing caching, and monitoring and deploying an application.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习Beego，这是一个最受欢迎和常用的Web MVC框架之一。我们将从创建项目开始，然后转向创建控制器、视图和过滤器。我们还将看看如何实现缓存，监视和部署应用程序。
- en: Creating your first project using Beego
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Beego创建你的第一个项目
- en: The first and the foremost thing we have to do to start a project is to set
    up its basic architecture. In Beego, this can be achieved easily using a tool
    called `bee`, which we will cover in this recipe.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 开始一个项目的第一件事是设置其基本架构。在Beego中，可以使用一个叫做`bee`的工具轻松实现这一点，我们将在这个示例中介绍。
- en: How to do it…
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Install the `github.com/beego/bee` package using the `go get` command, as follows:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`go get`命令安装`github.com/beego/bee`包，如下所示：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Open a terminal to your `$GOPATH/src` directory and create a project using
    the `bee new` command, as follows:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端到你的`$GOPATH/src`目录，并使用`bee new`命令创建一个项目，如下所示：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once the command has executed successfully, it will create a new Beego project,
    and the creation steps on the console will look like the following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令成功执行，它将创建一个新的Beego项目，并在控制台上的创建步骤将如下屏幕截图所示：
- en: '![](img/a8194ce7-d255-4723-b99f-c570e1fdeb92.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a8194ce7-d255-4723-b99f-c570e1fdeb92.png)'
- en: 'Go to the path of the newly created project and enter `bee run` to compile
    and run the project, as follows:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到新创建的项目路径，输入`bee run`编译和运行项目，如下所示：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once, command has executed successfully, `bee` will build the project and start
    the application, as shown in the following screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令成功执行，`bee`将构建项目并启动应用程序，如下面的屏幕截图所示：
- en: '![](img/edc1967e-3c91-4b9e-ae04-4f85abd4cb87.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/edc1967e-3c91-4b9e-ae04-4f85abd4cb87.png)'
- en: How it works…
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Once the command has executed successfully, a web application will run on the
    default Beego port `8080` and browsing `http://localhost:8080/` will render the
    welcome page of the application, as shown in the following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令成功执行，Web应用程序将在默认的Beego端口`8080`上运行，并浏览`http://localhost:8080/`将呈现应用程序的欢迎页面，如下面的屏幕截图所示：
- en: '![](img/34d6133d-8cb1-476f-af60-3dccfa850c63.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/34d6133d-8cb1-476f-af60-3dccfa850c63.png)'
- en: Creating your first controller and router
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你的第一个控制器和路由器
- en: One of the main components of a web application is the controller, which acts
    as a coordinator between the view and the model and handles the user's requests,
    which could be a button click, or a menu selection, or HTTP `GET` and `POST` requests.
    In this recipe, we will learn how we can create a controller in Beego.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序的一个主要组件是控制器，它充当视图和模型之间的协调者，并处理用户的请求，这可能是按钮点击、菜单选择或HTTP `GET`和`POST`请求。在这个示例中，我们将学习如何在Beego中创建一个控制器。
- en: How to do it…
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Move to `$GOPATH/src/my-first-beego-project/controllers` and create `firstcontroller.go`,
    as follows:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`$GOPATH/src/my-first-beego-project/controllers`并创建`firstcontroller.go`，如下所示：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Move to `$GOPATH/src/my-first-beego-project/routers` and edit `router.go` to
    add `GET` mapping `/employees`, which will be handled by the `GetEmployees` handler
    defined in `FirstController`, as follows:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`$GOPATH/src/my-first-beego-project/routers`并编辑`router.go`以添加`GET`映射`/employees`，由`FirstController`中定义的`GetEmployees`处理程序处理，如下所示：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run the project using the following command:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行项目：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works…
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Once the command has executed successfully, the web application will run on
    the default Beego port `8080`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令成功执行，Web应用程序将在默认的Beego端口`8080`上运行。
- en: 'Next, executing a `GET` request from the command line will give you a list
    of all the employees:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，从命令行执行`GET`请求将给你列出所有员工的列表：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let’s understand the program we have written:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们理解我们编写的程序：
- en: '`import “github.com/astaxie/beego"`: Here, we imported Beego.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入“github.com/astaxie/beego”：在这里，我们导入了Beego。
- en: '`type FirstController struct { beego.Controller }`: Here, we defined the `FirstController`
    struct type, which contains an anonymous struct field of type `beego.Controller`
    because of which `FirstController` automatically acquires all the methods of `beego.Controller`.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type FirstController struct { beego.Controller }`：在这里，我们定义了`FirstController`结构类型，它包含了一个匿名的`beego.Controller`类型的结构字段，因此`FirstController`自动获取了`beego.Controller`的所有方法。'
- en: '`func (this *FirstController) GetEmployees() { this.Ctx.ResponseWriter.WriteHeader(200)
    this.Data["json"] = employees this.ServeJSON() }` : Here, we defined the `GetEmployees`
    handler, which will execute for every `GET` request for the URL pattern `/employees`.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`func (this *FirstController) GetEmployees() { this.Ctx.ResponseWriter.WriteHeader(200)
    this.Data["json"] = employees this.ServeJSON() }`：在这里，我们定义了`GetEmployees`处理程序，它将为URL模式`/employees`的每个`GET`请求执行。'
- en: In Go, functions or handlers that start with a capital letter are exported functions,
    which means they are public and can be used outside the program. That’s the reason
    we have defined all the functions in our program using a capital letter rather
    than in camel case.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go中，以大写字母开头的函数或处理程序是导出函数，这意味着它们是公共的，并且可以在程序外部使用。这就是我们在程序中定义所有函数时都使用大写字母而不是驼峰命名法的原因。
- en: Creating your first view
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你的第一个视图
- en: A view is a visual representation of a model. It accesses data through the model
    and specifies how that data should be presented. It  maintains consistency in
    its presentation when the model changes, which can be either through a push model,
    where the view registers itself with the model for change notifications, or a
    pull model, where the view is responsible for calling the model when it needs
    to retrieve the most current data. In this recipe, we will learn how to create
    our first view to render the list of employees.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 视图是模型的可视表示。它通过模型访问数据，并指定数据应该如何呈现。当模型发生变化时，它保持其呈现的一致性，这可以通过推模型或拉模型来实现。在推模型中，视图向模型注册自己以获取更改通知，而在拉模型中，视图负责在需要检索最新数据时调用模型。在本示例中，我们将学习如何创建我们的第一个视图来呈现员工列表。
- en: How to do it…
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Move to `$GOPATH/src/my-first-beego-project/views` and create `dashboard.tpl` and
    copy the following content:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动到`$GOPATH/src/my-first-beego-project/views`并创建`dashboard.tpl`，并复制以下内容：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Move to `$GOPATH/src/my-first-beego-project/controllers` and edit `firstcontroller.go`
    to add the `Dashboard` handler, as follows:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动到`$GOPATH/src/my-first-beego-project/controllers`并编辑`firstcontroller.go`，添加`Dashboard`处理程序，如下所示：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Move to `$GOPATH/src/my-first-beego-project/routers` and edit `router.go` to
    add the `GET` mapping `/dashboard`, which will be handled by the `Dashboard` handler
    defined in `FirstController`, as follows:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动到`$GOPATH/src/my-first-beego-project/routers`并编辑`router.go`，添加`GET`映射`/dashboard`，由`FirstController`中定义的`Dashboard`处理程序处理，如下所示：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Run the project using the following command:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行项目：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works…
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Once the command has executed successfully, the web application will run on
    the default Beego port `8080`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令成功执行，Web应用程序将在默认的Beego端口`8080`上运行。
- en: 'Browsing `http://localhost:8080/dashboard` will render the employee dashboard,
    as shown in the following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览`http://localhost:8080/dashboard`将呈现员工仪表板，如下截图所示：
- en: '![](img/bb36f8f2-6852-4f28-8e3f-6778731ecb60.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bb36f8f2-6852-4f28-8e3f-6778731ecb60.png)'
- en: Creating your first session variable
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你的第一个会话变量
- en: Whenever we need to pass on the user data from one HTTP request to another,
    we can make use of HTTP sessions, which we will be covering in this recipe.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们需要将用户数据从一个HTTP请求传递到另一个HTTP请求时，我们可以使用HTTP会话，我们将在本示例中介绍。
- en: Getting ready…
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备好…
- en: This recipe assumes you have `Redis` installed and running locally on port `6379`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例假定您已经在本地端口`6379`上安装并运行了`Redis`。
- en: How to do it…
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Install the `github.com/astaxie/beego/session/redis` package using the `go
    get` command, as follows:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`go get`命令安装`github.com/astaxie/beego/session/redis`包，如下所示：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Move to `$GOPATH/src/my-first-beego-project/controllers` and create `sessioncontroller.go`,
    where we will define handlers which make sure that only authenticated users can
    view the home page, as follows:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动到`$GOPATH/src/my-first-beego-project/controllers`并创建`sessioncontroller.go`，在这里我们将定义处理程序，确保只有经过身份验证的用户才能查看主页，如下所示：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Move to `$GOPATH/src/my-first-beego-project/routers` and edit `router.go` to
    add the `GET` mapping `/home`, `/login`, and `/logout`, which will be handled
    by the `Home`, `Login`, and `Logout` handlers defined in `FirstController`, respectively,
    as follows:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动到`$GOPATH/src/my-first-beego-project/routers`并编辑`router.go`，添加`GET`映射`/home`，`/login`和`/logout`，分别由`FirstController`中定义的`Home`，`Login`和`Logout`处理程序处理，如下所示：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Move to `$GOPATH/src/my-first-beego-project` and edit `main.go` to import `github.com/astaxie/beego/session/redis`,
    as follows:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动到`$GOPATH/src/my-first-beego-project`并编辑`main.go`，导入`github.com/astaxie/beego/session/redis`，如下所示：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Switch on the `session` usage in `$GOPATH/src/my-first-beego-project/conf/app.conf`,
    as follows:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`$GOPATH/src/my-first-beego-project/conf/app.conf`中打开`session`的使用，如下所示：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Run the program using the following command:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行程序：
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works…
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Once the command has executed successfully, the web application will run on
    the default Beego port `8080`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令成功执行，Web应用程序将在默认的Beego端口`8080`上运行。
- en: 'Next, we will execute a couple of commands to see how the session works. Firstly,
    we will access `/home` by executing the following command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将执行一些命令来看会话是如何工作的。首先，我们将通过执行以下命令访问`/home`：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This will give us an unauthorized access message as a response from the server:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致我们从服务器收到未经授权的访问消息：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Apparently, we can''t access it because we have to login into the application
    first, which will create a `beegosessionID`. Now let''s log in to the application
    by executing the following command:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们无法访问它，因为我们必须首先登录到应用程序，这将创建一个`beegosessionID`。现在让我们通过执行以下命令登录到应用程序：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This will result in the following response from the server:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致服务器返回以下响应：
- en: '![](img/6ddd6d86-c388-4b8b-bcb9-bb0a801be17d.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6ddd6d86-c388-4b8b-bcb9-bb0a801be17d.png)'
- en: 'Now we will use the cookie `beegosessionID` created as part of the `/login`
    request to access `/home`, as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用作为`/login`请求的一部分创建的cookie`beegosessionID`来访问`/home`，如下所示：
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Creating your first filter
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你的第一个过滤器
- en: Sometimes, we may want to perform logic either before an action method is called
    or after an action method runs. In that case, we use filters, which we will be
    covering in this recipe.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们可能希望在调用操作方法之前或之后执行逻辑。在这种情况下，我们使用过滤器，我们将在本示例中介绍。
- en: Filters are basically handlers which encapsulate the common functionality or
    the cross-cutting concern. We just define them once and then apply them to the
    different controllers and action methods.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤器基本上是封装常见功能或横切关注点的处理程序。我们只需定义它们一次，然后将它们应用于不同的控制器和操作方法。
- en: How to do it…
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤…
- en: 'Install the `github.com/astaxie/beego/context` package using the `go get` command,
    as follows:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`go get`命令安装`github.com/astaxie/beego/context`包，如下所示：
- en: '[PRE21]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Move to `$GOPATH/src/my-first-beego-project/filters` and create `firstfilter.go`,
    which runs before the `Controller`, and log the IP address and current timestamp,
    as follows:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动到`$GOPATH/src/my-first-beego-project/filters`并创建`firstfilter.go`，在`Controller`之前运行，并记录IP地址和当前时间戳，如下所示：
- en: '[PRE22]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Move to `$GOPATH/src/my-first-beego-project/routers` and edit `router.go` to
    add the `GET` mapping `/*`, which will be handled by the `LogManager` filter,
    as follows:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动到`$GOPATH/src/my-first-beego-project/routers`并编辑`router.go`以添加`GET`映射`/*`，将由`LogManager`过滤器处理，如下所示：
- en: '[PRE23]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Run the program using the following command:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行程序：
- en: '[PRE24]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works…
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Once the command has executed successfully, the web application will run on
    the default Beego port `8080`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令成功执行，Web应用程序将在默认的Beego端口`8080`上运行。
- en: 'Next, we will execute a request to get all the employees by executing the following
    command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将执行一个请求，通过执行以下命令获取所有员工：
- en: '[PRE25]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Once the command has executed successfully, we can see the IP and timestamp
    printed in the application logs on the console, as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令成功执行，我们可以在控制台的应用程序日志中看到打印的IP和时间戳，如下所示：
- en: '![](img/5f17dd63-8b1e-4118-a2fa-686a57917a47.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5f17dd63-8b1e-4118-a2fa-686a57917a47.png)'
- en: 'Using `beego.InsertFilter("/*", beego.BeforeRouter, filters.LogManager) `,
    we inserted a filter in an application which executes for the URL pattern `/*`
    before finding a router and that is handled by `LogManager`. Similar to `beego.BeforeRouter`,
    there are four other places where we can position the filters: `beego**.**BeforeStatic`,
    `beego.BeforeExec`, `beego.AfterExec`, and `beego.FinishRouter`.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`beego.InsertFilter("/*", beego.BeforeRouter, filters.LogManager)`，我们在应用程序中插入了一个过滤器，该过滤器在找到路由器之前执行URL模式`/*`，并由`LogManager`处理。类似于`beego.BeforeRouter`，还有四个其他位置可以放置过滤器：`beego.BeforeStatic`，`beego.BeforeExec`，`beego.AfterExec`和`beego.FinishRouter`。
- en: Handling HTTP errors in Beego
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Beego中处理HTTP错误
- en: Error handling is one of the most important aspects in a web application design
    because it helps in two ways. Firstly, it lets the application user know in a
    relatively friendly manner that something has gone wrong and they should contact
    the technical support department or someone from tech support should be notified.
    Secondly, it allows the programmer to put in some niceties to aid in the debugging
    of issues. In this recipe, we will learn how we can implement error handling in
    Beego.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 错误处理是Web应用程序设计中最重要的方面之一，因为它在两个方面有所帮助。首先，它以相对友好的方式让应用程序用户知道出了问题，他们应该联系技术支持部门或者应该通知技术支持部门的人员。其次，它允许程序员添加一些细节来帮助调试问题。在本示例中，我们将学习如何在Beego中实现错误处理。
- en: How to do it…
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤…
- en: 'Move to `$GOPATH/src/my-first-beego-project/controllers` and create `errorcontroller.go`,
    where we will define handlers to handle `404` and `500` HTTP errors as well as
    the handler to handle any generic error in an application, as follows:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动到`$GOPATH/src/my-first-beego-project/controllers`并创建`errorcontroller.go`，在其中我们将定义处理`404`和`500`
    HTTP错误的处理程序，以及处理应用程序中任何通用错误的处理程序，如下所示：
- en: '[PRE26]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Move to `$GOPATH/src/my-first-beego-project/controllers` and edit `firstcontroller.go`
    to add the `GetEmployee` handler, which will get the ID from an HTTP request parameter,
    fetch the employee details from the static employee array, and return it as a
    response or throw the generic error if the requested ID does not exist, as follows:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动到`$GOPATH/src/my-first-beego-project/controllers`并编辑`firstcontroller.go`以添加`GetEmployee`处理程序，该处理程序将从HTTP请求参数中获取ID，从静态员工数组中获取员工详细信息，并将其作为响应返回，或者如果请求的ID不存在，则抛出通用错误，如下所示：
- en: '[PRE27]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Move to `$GOPATH/src/my-first-beego-project/views` and create `genericerror.tpl`
    with the following content:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动到`$GOPATH/src/my-first-beego-project/views`并创建`genericerror.tpl`，内容如下：
- en: '[PRE28]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Run the program using the following command:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行程序：
- en: '[PRE29]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How it works…
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Once the command has executed successfully, the web application will run on
    the default Beego port `8080`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令成功执行，Web应用程序将在默认的Beego端口`8080`上运行。
- en: 'Next, browsing `http://localhost:8080/employee?id=2` will give you the employee
    details, as shown in the following screenshot:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，浏览`http://localhost:8080/employee?id=2`将会给出员工的详细信息，如下面的屏幕截图所示：
- en: '![](img/46d2b6f4-a78c-46ce-b33c-653bf5346abe.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/46d2b6f4-a78c-46ce-b33c-653bf5346abe.png)'
- en: 'Whereas browsing `http://localhost:8080/employee?id=4` as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当浏览`http://localhost:8080/employee?id=4`时：
- en: '![](img/15fa193a-8f0a-4154-b574-38c885b00a10.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/15fa193a-8f0a-4154-b574-38c885b00a10.png)'
- en: It will give you the error message as Some Error Occurred. This is because we
    have asked for details of the employee with the ID as `4`, which does not exist
    in the static employee array, hence the generic error thrown from the server,
    which is handled by the `ErrorGeneric` handler defined in `errorcontroller.go`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 它将给出错误消息，如“发生了一些错误”。这是因为我们要求获取ID为`4`的员工的详细信息，而在静态员工数组中不存在，因此服务器抛出通用错误，由`errorcontroller.go`中定义的`ErrorGeneric`处理程序处理。
- en: Implementing caching in Beego
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Beego中实现缓存
- en: Caching data in a web application is sometimes necessary to avoid requesting
    the static data from a database or external service again and again. In this recipe,
    we will learn how we can implement caching in a Beego application.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web应用程序中缓存数据有时是必要的，以避免反复请求数据库或外部服务的静态数据。在本示例中，我们将学习如何在Beego应用程序中实现缓存。
- en: 'Beego supports four cache providers: `file`, `Memcache`, `memory`, and `Redis`.
    In this recipe, we will be working with the framework default cache provider,
    which is a `memory` cache provider.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Beego支持四种缓存提供程序：`file`，`Memcache`，`memory`和`Redis`。在本示例中，我们将使用框架默认的`memory`缓存提供程序。
- en: How to do it…
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤…
- en: 'Install the `github.com/astaxie/beego/cache` package using the `go get` command,
    as follows:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`go get`命令安装`github.com/astaxie/beego/cache`包，如下所示：
- en: '[PRE30]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Move to `$GOPATH/src/my-first-beego-project/controllers` and create `cachecontroller.go`,
    where we will define the `GetFromCache` handler, which will get the value for
    a key from a cache and write it to an HTTP response, as follows:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动到`$GOPATH/src/my-first-beego-project/controllers`并创建`cachecontroller.go`，在其中我们将定义`GetFromCache`处理程序，该处理程序将从缓存中获取键的值并将其写入HTTP响应，如下所示：
- en: '[PRE31]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Move to `$GOPATH/src/my-first-beego-project/routers` and edit `router.go` to
    add the `GET` mapping `/getFromCache`, which will be handled by the `GetFromCache`
    handler defined in a `CacheController`, as follows:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动到`$GOPATH/src/my-first-beego-project/routers`并编辑`router.go`以添加`GET`映射`/getFromCache`，该映射将由`CacheController`中定义的`GetFromCache`处理程序处理，如下所示：
- en: '[PRE32]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Run the program using the following command:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行程序：
- en: '[PRE33]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: How it works…
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Once the command has executed successfully, the web application will run on
    the default Beego port `8080`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令成功执行，Web应用程序将在默认的Beego端口`8080`上运行。
- en: 'On application startup, the key with the name `foo` with the value as `bar`
    will be added to the cache. Next, browsing `http://localhost:8080/getFromCache`
    will read a `foo` key value from the cache, append it to Hello, and display it
    on the browser,as shown in the following screenshot:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序启动时，将使用名称为`foo`且值为`bar`的键添加到缓存中。接下来，浏览`http://localhost:8080/getFromCache`将从缓存中读取`foo`键值，将其附加到Hello，并在浏览器上显示，如下面的屏幕截图所示：
- en: '![](img/35ad2340-26fa-41f7-9b3b-dd7c9c2d5056.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/35ad2340-26fa-41f7-9b3b-dd7c9c2d5056.png)'
- en: Monitoring the Beego application
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控Beego应用程序
- en: Once the Beego application is up and running, we can easily monitor application
    request statistics, performance, health checks, tasks, and the configuration status
    through its admin dashboard. We will learn how to do this in this recipe.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Beego应用程序启动并运行，我们可以轻松地通过其管理仪表板监视应用程序请求统计信息、性能、健康检查、任务和配置状态。我们将在本教程中学习如何做到这一点。
- en: How to do it…
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Enable the application live monitor by adding `EnableAdmin = true` in `$GOPATH/src/my-first-beego-project/conf/app.conf`,
    as follows:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`$GOPATH/src/my-first-beego-project/conf/app.conf`中添加`EnableAdmin = true`来启用应用程序实时监视，如下所示：
- en: '[PRE34]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Optionally, change the port it listens on, by adding fields in `$GOPATH/src/my-first-beego-project/conf/app.conf`:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，通过在`$GOPATH/src/my-first-beego-project/conf/app.conf`中添加字段来更改其监听的端口：
- en: '[PRE35]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Run the program using the following command:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行程序：
- en: '[PRE36]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How it works…
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Once the command has executed successfully, the web application will run on
    the default Beego port `8080` and browsing `http://localhost:8088/` will render
    the admin dashboard, as shown in the following screenshot:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令成功执行，Web应用程序将在默认的Beego端口`8080`上运行，并且浏览`http://localhost:8088/`将呈现管理仪表板，如下面的屏幕截图所示：
- en: '![](img/c53d95cd-edbc-432a-b968-96b5e9211ce8.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c53d95cd-edbc-432a-b968-96b5e9211ce8.png)'
- en: 'Browsing `http://localhost:8088/qps` will show us the request statistics of
    an application, as shown in the following screenshot:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览`http://localhost:8088/qps`将显示应用程序的请求统计信息，如下面的屏幕截图所示：
- en: '![](img/b9affdd6-bf38-4319-8855-584efdaf1be2.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b9affdd6-bf38-4319-8855-584efdaf1be2.png)'
- en: Deploying the Beego application on a local machine
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在本地机器上部署Beego应用程序
- en: Once the application development is over, we have to deploy it to make it available
    for use by the end users, which can be done either locally or remotely. In this
    recipe, we will learn how we can deploy our Beego application on a local machine.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序开发结束，我们必须部署它以供最终用户使用，这可以在本地或远程进行。在本教程中，我们将学习如何在本地机器上部署我们的Beego应用程序。
- en: How to do it…
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Because the application created by `bee` is in the development mode by default
    and it’s always a best practice to run an application in the production mode on
    the public facing servers, we have to change the `RunMode` as `prod` in `$GOPATH/src/my-first-beego-project/conf/app.conf`,
    as follows:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为`bee`创建的应用程序默认处于开发模式，并且在公共服务器上运行应用程序时，始终以生产模式运行应用程序是最佳实践，因此我们必须在`$GOPATH/src/my-first-beego-project/conf/app.conf`中将`RunMode`更改为`prod`，如下所示：
- en: '[PRE37]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Include static files, configuration files, and templates as part of the Beego
    application bytecode file in a separate directory by executing the following commands:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令将静态文件、配置文件和模板作为Beego应用程序的字节码文件的一部分包含在一个单独的目录中：
- en: '[PRE38]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Move to `$GOPATH/my-first-beego-app-deployment` and use the `nohup` command
    to run an application as a backend process, as follows:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动到`$GOPATH/my-first-beego-app-deployment`并使用`nohup`命令将应用程序作为后台进程运行，如下所示：
- en: '[PRE39]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: How it works…
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Once the command has executed successfully, the web application will run on
    the default Beego port `8080`, and browsing `http://localhost:8080/` will render
    the welcome page of the application, as shown in the following screenshot:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令成功执行，Web应用程序将在默认的Beego端口`8080`上运行，浏览`http://localhost:8080/`将呈现应用程序的欢迎页面，如下面的屏幕截图所示：
- en: '![](img/4d67d510-d668-4788-b5fe-53b2f4d307bb.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4d67d510-d668-4788-b5fe-53b2f4d307bb.png)'
- en: Deploying the Beego application with Nginx
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Nginx部署Beego应用程序
- en: In the previous recipe, we learned how we can run the Beego application locally.
    In this recipe, we will be deploying the same application with `Nginx`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个教程中，我们学习了如何在本地运行Beego应用程序。在本教程中，我们将使用`Nginx`部署相同的应用程序。
- en: Getting ready…
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪…
- en: This recipe assumes you have `Nginx` installed and running on port `80`. For
    me, it's installed at `/Users/ArpitAggarwal/nginx`.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程假设您已经安装并在端口`80`上运行了`Nginx`。对我来说，它安装在`/Users/ArpitAggarwal/nginx`。
- en: How to do it…
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Open the Nginx configuration file at `/Users/ArpitAggarwal/nginx/conf/nginx.conf`
    and replace the `location` block under `server` with the following content:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`/Users/ArpitAggarwal/nginx/conf/nginx.conf`中的Nginx配置文件，并将`server`下的`location`块替换为以下内容：
- en: '[PRE40]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Start Nginx by executing the following command:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令启动Nginx：
- en: '[PRE41]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Run the Beego application by executing the following command:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令运行Beego应用程序：
- en: '[PRE42]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: How it works…
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Once the command has executed successfully, browsing `http://localhost:80/`
    will render the welcome page of the application, as shown in the following screenshot:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令成功执行，浏览`http://localhost:80/`将呈现应用程序的欢迎页面，如下截图所示：
- en: '![](img/9ca23b43-cd30-4fb7-8c77-33a1e83f9530.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9ca23b43-cd30-4fb7-8c77-33a1e83f9530.png)'
