["```go\n$ docker --version\nDocker version 18.03.0-ce, build 0520e24  $ docker-machine --version\ndocker-machine version 0.14.0, build 89b8332\n```", "```go\npackage main\nimport \n(\n  \"fmt\"\n  \"log\"\n  \"net/http\"\n)\nconst \n(\n  CONN_HOST = \"localhost\"\n  CONN_PORT = \"8080\"\n)\nfunc helloWorld(w http.ResponseWriter, r *http.Request) \n{\n  fmt.Fprintf(w, \"Hello World!\")\n}\nfunc main() \n{\n  http.HandleFunc(\"/\", helloWorld)\n  err := http.ListenAndServe(CONN_HOST+\":\"+CONN_PORT, nil)\n  if err != nil \n  {\n    log.Fatal(\"error starting http server : \", err)\n    return\n  }\n}\n```", "```go\nFROM golang:1.9.2\n ENV SRC_DIR=/go/src/github.com/arpitaggarwal/\n ENV GOBIN=/go/bin\n\n WORKDIR $GOBIN\n\n # Add the source code:\n ADD . $SRC_DIR\n\n RUN cd /go/src/;\n\n RUN go install github.com/arpitaggarwal/;\n ENTRYPOINT [\"./arpitaggarwal\"]\n\n EXPOSE 8080\n```", "```go\n$ docker build --no-cache=true -t golang-image .\n```", "```go\nFROM golang:1.9.2\n....\nENV http_proxy \"http://proxy.corp.com:80\"\nENV https_proxy \"http://proxy.corp.com:80\"\n...\n```", "```go\n$ docker build --no-cache=true --build-arg http_proxy=\"http://proxy.corp.com:80\" -t golang-image.\n```", "```go\n$ docker images\n```", "```go\n$ docker run -d -p 8080:8080 --name golang-container -it golang-image\n 9eb53d8d41a237ac216c9bb0f76b4b47d2747fab690569ef6ff4b216e6aab486\n```", "```go\n$ docker ps\n```", "```go\n$ curl -X GET http://localhost:8080/\n Hello World!\n```", "```go\n$ docker login --username arpitaggarwal --password XXXXX\n Login Succeeded\n```", "```go\n$ docker tag golang-image arpitaggarwal/golang-image\n```", "```go\n$ docker images\n```", "```go\n$ docker push arpitaggarwal/golang-image\n The push refers to a repository [docker.io/arpitaggarwal\n /golang-image]\n 4db0afeaa6dd: Pushed\n 4e648ebe6cf2: Pushed\n 6bfc813a3812: Mounted from library/golang\n e1e44e9665b9: Mounted from library/golang\n 1654abf914f4: Mounted from library/golang\n 2a55a2194a6c: Mounted from library/golang\n 52c175f1a4b1: Mounted from library/golang\n faccc7315fd9: Pushed\n e38b8aef9521: Mounted from library/golang\n a75caa09eb1f: Mounted from library/golang\n latest: digest: sha256:ca8f0a1530d3add72ad4e328e51235ef70c5fb8f38bde906a378d74d2b75c8a8 size: 2422\n```", "```go\n$ docker network create my-bridge-network\n 325bca66cc2ccb98fb6044b1da90ed4b6b0f29b54c4588840e259fb7b6505331\n```", "```go\n$ docker network ls\n NETWORK ID NAME DRIVER\n 20dc090404cb bridge bridge\n 9fa39d9bb674 host host\n 325bca66cc2c my-bridge-network bridge\n f36203e11372 none null\n```", "```go\n$ docker network inspect my-bridge-network\n [\n {\n \"Name\": \"my-bridge-network\",\n \"Id\": \"325bca66cc2ccb98fb6044b1da90ed4b6b0\n     f29b54c4588840e259fb7b6505331\",\n \"Scope\": \"local\",\n \"Driver\": \"bridge\",\n \"EnableIPv6\": false,\n \"IPAM\": \n     {\n \"Driver\": \"default\",\n \"Options\": {},\n \"Config\": \n       [\n {\n \"Subnet\": \"172.18.0.0/16\",\n \"Gateway\": \"172.18.0.1\"\n }\n ]\n },\n \"Internal\": false,\n \"Containers\": {},\n \"Options\": {},\n \"Labels\": {}\n }\n ]\n```", "```go\n$ docker run --net=my-bridge-network -p 3306:3306 --name mysql-container -e MYSQL_ROOT_PASSWORD=my-pass -d mysql:latest\n c3ca3e6f253efa40b1e691023155ab3f37eb07b767b1744266ac4ae85fca1722\n```", "```go\n$ docker ps\n CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\n f2ec80f82056 mysql:latest \"docker-entrypoint.sh\" 8 seconds ago Up 6 seconds 0.0.0.0:3306->3306/tcp mysql-container\n```", "```go\n$ docker network inspect my-bridge-network\n[\n {\n \"Name\": \"my-bridge-network\",\n \"Id\": \"325bca66cc2ccb98fb6044b1da90ed\n    4b6b0f29b54c4588840e259fb7b6505331\",\n \"Scope\": \"local\",\n \"Driver\": \"bridge\",\n \"EnableIPv6\": false,\n \"IPAM\": \n    {\n \"Driver\": \"default\",\n \"Options\": {},\n \"Config\": \n      [\n {\n \"Subnet\": \"172.18.0.0/16\",\n \"Gateway\": \"172.18.0.1\"\n }\n ]\n },\n \"Internal\": false,\n \"Containers\": \n    {\n \"f2ec80f820566707ba7b18ce12ca7a65\n      c87fa120fd4221e11967131656f68e59\": \n      {\n \"Name\": \"mysql-container\",\n \"EndpointID\": \"58092b80bd34135d94154e4d8a8f5806bad\n        601257cfbe28e53b5d7161da3b350\",\n \"MacAddress\": \"02:42:ac:12:00:02\",\n \"IPv4Address\": \"172.18.0.2/16\",\n \"IPv6Address\": \"\"\n }\n },\n \"Options\": {},\n \"Labels\": {}\n }\n]\n```", "```go\npackage main\nimport \n(\n  \"bytes\"\n  \"database/sql\"\n  \"fmt\"\n  \"log\"\n  \"net/http\"\n  \"github.com/go-sql-driver/mysql\"\n  \"github.com/gorilla/mux\"\n)\nvar db *sql.DB\nvar connectionError error\nconst \n(\n  CONN_PORT = \"8080\"\n  DRIVER_NAME = \"mysql\"\n  DATA_SOURCE_NAME = \"root:my-pass@tcp(mysql-container:3306)/mysql\"\n)\nfunc init() \n{\n  db, connectionError = sql.Open(DRIVER_NAME, DATA_SOURCE_NAME)\n  if connectionError != nil \n  {\n    log.Fatal(\"error connecting to database : \", connectionError)\n  }\n}\nfunc getDBInfo(w http.ResponseWriter, r *http.Request) \n{\n  rows, err := db.Query(\"SELECT SUBSTRING_INDEX(USER(), \n  '@', -1) AS ip, @@hostname as hostname, @@port as port,\n  DATABASE() as current_database;\")\n  if err != nil \n  {\n    log.Print(\"error executing database query : \", err)\n    return\n  }\n  var buffer bytes.Buffer\n  for rows.Next() \n  {\n    var ip string\n    var hostname string\n    var port string\n    var current_database string\n    err = rows.Scan(&ip, &hostname, &port, &current_database)\n    buffer.WriteString(\"IP :: \" + ip + \" | HostName :: \" + \n    hostname + \" | Port :: \" + port + \" | Current \n    Database :: \" + current_database)\n  }\n  fmt.Fprintf(w, buffer.String())\n}\nfunc main() \n{\n  router := mux.NewRouter()\n  router.HandleFunc(\"/\", getDBInfo).Methods(\"GET\")\n  defer db.Close()\n  err := http.ListenAndServe(\":\"+CONN_PORT, router)\n  if err != nil \n  {\n    log.Fatal(\"error starting http server : \", err)\n    return\n  }\n}\n```", "```go\nFROM golang:1.9.2\n\n ENV SRC_DIR=/go/src/github.com/arpitaggarwal/\n ENV GOBIN=/go/bin\n\n WORKDIR $GOBIN\n\n ADD . $SRC_DIR\n\n RUN cd /go/src/;\n RUN go get github.com/go-sql-driver/mysql;\n RUN go get github.com/gorilla/mux;\n\n RUN go install github.com/arpitaggarwal/;\n ENTRYPOINT [\"./arpitaggarwal\"]\n\n EXPOSE 8080\n```", "```go\n$ docker build --no-cache=true -t web-application-image .\n```", "```go\n$ docker images\n```", "```go\n...\nRUN go get github.com/go-sql-driver/mysql;\nRUN go get github.com/gorilla/mux;\n...\n```", "```go\n$ docker run --net=my-bridge-network -p 8090:8080 --name web-application-container -d web-application-image\n ef9c73396e9f9e04c94b7327e8f02cf57ce5f0cd674791e2805c86c70e5b9564\n```", "```go\n$ docker ps\n```", "```go\n$ docker network inspect my-bridge-network\n[\n {\n \"Name\": \"my-bridge-network\",\n \"Id\": \"325bca66cc2ccb98fb6044b1da90ed4b6b0\n    f29b54c4588840e259fb7b6505331\",\n \"Scope\": \"local\",\n \"Driver\": \"bridge\",\n \"EnableIPv6\": false,\n \"IPAM\": \n    {\n \"Driver\": \"default\",\n \"Options\": {},\n \"Config\": \n      [\n {\n \"Subnet\": \"172.18.0.0/16\",\n \"Gateway\": \"172.18.0.1\"\n }\n ]\n },\n \"Internal\": false,\n \"Containers\": \n    {\n \"08ce8f20c3205fa3e421083fa1077b\n      673cdd10fd5be34f5ef431fead06219019\": \n      {\n \"Name\": \"web-application-container\",\n \"EndpointID\": \"d22f7076cf037ef0f0057ffb9fec\n        0a07e07b44b442182544731db1ad10db87e4\",\n \"MacAddress\": \"02:42:ac:12:00:03\",\n \"IPv4Address\": \"172.18.0.3/16\",\n \"IPv6Address\": \"\"\n },\n \"f2ec80f820566707ba7b18ce12ca7a65\n      c87fa120fd4221e11967131656f68e59\": \n      {\n \"Name\": \"mysql-container\",\n \"EndpointID\": \"58092b80bd34135d94154e4d8\n        a8f5806bad601257cfbe28e53b5d7161da3b350\",\n \"MacAddress\": \"02:42:ac:12:00:02\",\n \"IPv4Address\": \"172.18.0.2/16\",\n \"IPv6Address\": \"\"\n }\n },\n \"Options\": {},\n \"Labels\": {}\n }\n]\n```"]