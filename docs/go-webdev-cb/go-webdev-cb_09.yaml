- en: Working with Go and Docker
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Go和Docker
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Building your first Go Docker image
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建你的第一个Go Docker镜像
- en: Running your first Go Docker container
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行你的第一个Go Docker容器
- en: Pushing your Docker image to the Docker Registry
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将你的Docker镜像推送到Docker注册表
- en: Creating your first user-defined bridge network
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你的第一个用户定义的桥接网络
- en: Running a MySQL Docker image on a user-defined bridge network
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在用户定义的桥接网络上运行MySQL Docker镜像
- en: Building a Go web application Docker image
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个Go web应用的Docker镜像
- en: Running a web application Docker container linked with a MySQL Docker container
    on a user-defined bridge network
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在用户定义的桥接网络上运行一个与MySQL Docker容器链接的web应用Docker容器
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: With organizations moving towards DevOps, Docker has started to gain popularity
    as well. Docker allows for packaging an application with all of its dependencies
    into a standardized unit for software development. And if that unit runs on your
    local machine, we can guarantee that it will run exactly the same way, anywhere
    from QA, to staging, and to production environments. With the knowledge of the
    concepts covered in this chapter, we will be able to write Docker images and deploy
    Docker containers with ease.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 随着组织向DevOps迈进，Docker也开始变得流行起来。Docker允许将应用程序及其所有依赖项打包成标准化的软件开发单元。如果该单元在您的本地机器上运行，我们可以保证它将在任何地方，从QA到暂存，再到生产环境中以完全相同的方式运行。通过本章涵盖的概念，我们将能够轻松编写Docker镜像并部署Docker容器。
- en: In this chapter, we will learn how to create a Docker image and Docker containers
    to deploy a simple Go web application, following which we will be looking at how
    we can save the container to an image and push it to the Docker registry, along
    with some basic concepts of Docker networking.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何创建一个Docker镜像和Docker容器来部署一个简单的Go web应用，之后我们将看看如何将容器保存为镜像并将其推送到Docker注册表，以及一些Docker网络的基本概念。
- en: As we are going to work with Docker, I assume it's installed and running on
    your local machine.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将要使用Docker，我假设它已经安装并在您的本地机器上运行。
- en: Building your first Go Docker image
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建你的第一个Go Docker镜像
- en: A Docker image is the filesystem and configuration of our application and is
    further used to create Docker containers. There are two ways by which a Docker
    image can be created, which is either from scratch or from a parent image. In
    this recipe, we will learn how to create a Docker image from a parent image. This
    means an image created basically refers to the contents of its parent and subsequent
    declarations in the `Dockerfile` modify the parent image.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Docker镜像是我们应用程序的文件系统和配置，进一步用于创建Docker容器。有两种方式可以创建Docker镜像，即从头开始或从父镜像创建。在这个示例中，我们将学习如何从父镜像创建Docker镜像。这意味着基本上创建的镜像是指其父级的内容，并且`Dockerfile`中的后续声明修改了父镜像的内容。
- en: Getting ready…
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪…
- en: 'Verify whether `Docker` and `Docker Machine` are installed by executing the
    following commands:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下命令验证`Docker`和`Docker Machine`是否已安装：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it…
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤如下…
- en: 'Create `http-server.go`, where we will create a simple HTTP server that will
    render Hello World! browsing  `http://docker-machine-ip:8080` or executing `curl
    -X GET http://docker-machine-ip:8080` from the command line, as follows:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`http-server.go`，在这里我们将创建一个简单的HTTP服务器，它将在浏览`http://docker-machine-ip:8080`或从命令行执行`curl
    -X GET http://docker-machine-ip:8080`时呈现Hello World！
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a `DockerFile`, which is a text file that contains all the commands
    needed to build an image. We will use `golang:1.9.2` as the base, or the parent
    image, which we have specified using the `FROM` directive in the `Dockerfile`,
    as follows:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`DockerFile`，这是一个包含构建镜像所需的所有命令的文本文件。我们将使用`golang:1.9.2`作为基础或父镜像，我们在`Dockerfile`中使用`FROM`指令指定了这一点，如下所示：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With everything in place, the directory structure should look like the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一切就绪后，目录结构应该如下所示：
- en: '![](img/b05638b8-f7e8-4def-a9ad-9d7bd0942ae1.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b05638b8-f7e8-4def-a9ad-9d7bd0942ae1.png)'
- en: 'Build a Docker image from the `Dockerfile` executing the `docker build` command
    with the image name as `golang-image` using the `-t` flag, as follows:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`-t`标志执行`docker build`命令构建一个名为`golang-image`的Docker镜像，如下所示：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once the preceding command has executed successfully, it will render the following
    output:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦前面的命令成功执行，它将产生以下输出：
- en: '![](img/cad5fe0a-9f6d-4cb3-971c-2acb0b1f758a.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cad5fe0a-9f6d-4cb3-971c-2acb0b1f758a.png)'
- en: 'If you are building an image behind a corporate proxy, you will probably have
    to provide the proxy settings. You can do this by adding environment variables
    using the `ENV` statement in the `Dockerfile`, which we often call as a runtime
    customization, as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在公司代理后面构建镜像，您可能需要提供代理设置。您可以通过在`Dockerfile`中使用`ENV`语句添加环境变量来实现这一点，我们通常称之为运行时定制，如下所示：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can also pass the proxy settings at build time to the builder using the
    `--build-arg <varname>=<value>` flag, which is called as a build time customization,
    as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`--build-arg <varname>=<value>`标志在构建时将代理设置传递给构建器，这被称为构建时定制。
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works…
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'Verify whether the Docker image has been created successfully by executing
    the following command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下命令验证Docker镜像是否已成功创建：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will list all the top-level images, their repositories, tags, and their
    size, as shown in the following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这将列出所有顶级镜像，它们的仓库、标签和大小，如下截图所示：
- en: '![](img/be6f1c2f-31f0-42c1-98a7-ee42c510de4c.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/be6f1c2f-31f0-42c1-98a7-ee42c510de4c.png)'
- en: 'Let''s understand the `Dockerfile` we have created:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解我们创建的`Dockerfile`：
- en: '`FROM golang:1.9.2`: The `FROM` instruction specifies the base image, which
    is, for us `golang:1.9.2`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FROM golang:1.9.2`: `FROM`指令指定了基础镜像，对我们来说是`golang:1.9.2`'
- en: '`ENV SRC_DIR=/go/src/github.com/arpitaggarwal/`: Here, we are setting the Go
    source code directory as an environment variable using the `ENV` statement'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ENV SRC_DIR=/go/src/github.com/arpitaggarwal/`：在这里，我们使用`ENV`语句将Go源代码目录设置为环境变量'
- en: '`ENV GOBIN=/go/bin`: Here, we are setting the `GOBIN` or a directory to generate
    executable binaries as an environment variable using the `ENV` statement'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ENV GOBIN=/go/bin`：在这里，我们使用`ENV`语句将`GOBIN`或生成可执行二进制文件的目录设置为环境变量。'
- en: '`WORKDIR $GOBIN`: The `WORKDIR` instruction sets the working directory for
    any `RUN`, `CMD`, `ENTRYPOINT`, `COPY` and `ADD` statements, which is `/go/bin`
    for our image'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WORKDIR $GOBIN`：`WORKDIR`指令为我们的镜像设置了任何`RUN`、`CMD`、`ENTRYPOINT`、`COPY`和`ADD`语句的工作目录，对于我们的镜像来说，这个目录是`/go/bin`。'
- en: '`ADD . $SRC_DIR`: Here, we copy`http-server.go` from the current directory
    on our host machine to the `/go/src/github.com/arpitaggarwal/` directory of `golang-image`
    using the `ADD` statement'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ADD . $SRC_DIR`：在这里，我们使用`ADD`语句将当前目录中的`http-server.go`复制到`golang-image`的`/go/src/github.com/arpitaggarwal/`目录中。'
- en: '`RUN cd /go/src/`: Here, we change the current directory to`/go/src/` in a
    `golang-image` using the `RUN` statement'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RUN cd /go/src/`：在这里，我们使用`RUN`语句将当前目录更改为`/go/src/`中的`golang-image`。'
- en: '`RUN go install github.com/arpitaggarwal/`: Here, we compile `/go/src/github.com/arpitaggarwal/http-server.go`
    and generate an executable binary file of it in the `/go/bin` directory'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RUN go install github.com/arpitaggarwal/`：在这里，我们编译`/go/src/github.com/arpitaggarwal/http-server.go`，并在`/go/bin`目录中生成可执行二进制文件。'
- en: '`ENTRYPOINT ["./arpitaggarwal"]`: Here, we are specifying the executable binary
    generated to run as an executable when running a container'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ENTRYPOINT ["./arpitaggarwal"]`：在这里，我们指定要作为可执行文件运行的可执行二进制文件。'
- en: '`EXPOSE 8080`: The `EXPOSE` instruction informs Docker that the container that
    we will create from an image will listen on the network port `8080` at runtime'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EXPOSE 8080`：`EXPOSE`指令通知Docker，我们将从镜像创建的容器在运行时监听网络端口`8080`。'
- en: Running your first Go Docker container
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行您的第一个Go Docker容器
- en: A Docker container includes an application and all of its dependencies. It shares
    the kernel with other containers and runs as an isolated process in the user space
    on the host operating system. To run the actual application, we have to create
    and run the containers from an image, which we will be covering in this recipe.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Docker容器包括一个应用程序及其所有依赖项。它与其他容器共享内核，并作为主机操作系统上用户空间中的隔离进程运行。要运行实际的应用程序，我们必须从镜像创建和运行容器，这将在本教程中介绍。
- en: How to do it…
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Execute the `docker run` command to create and run a Docker container from
    the `golang-image`, assigning the container name as `golang-container` using the
    `-name` flag, as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`docker run`命令从`golang-image`创建并运行一个Docker容器，使用`-name`标志将容器命名为`golang-container`，如下所示：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `-d` flag specified in the `docker run` command starts the container in
    a daemon mode and the hash string at the end represents the ID of the `golang-container`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker run`命令中指定的`-d`标志以守护进程模式启动容器，末尾的哈希字符串代表`golang-container`的ID。'
- en: How it works…
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'Verify whether the Docker container has been created and is running successfully
    by executing the following command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下命令验证Docker容器是否已创建并成功运行：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once the preceding command has executed successfully, it will give us the running
    Docker container details, as shown in the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦上述命令成功执行，它将给我们正在运行的Docker容器的详细信息，如下面的屏幕截图所示：
- en: '![](img/9a846dfe-dc9b-4426-ac8f-f9d8d08c6ebd.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9a846dfe-dc9b-4426-ac8f-f9d8d08c6ebd.png)'
- en: To list all the Docker containers, whether they are running or not, we have
    to pass an additional flag, `-a`, as `docker ps -a`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出所有Docker容器，无论它们是否正在运行，我们必须传递一个额外的标志`-a`，如`docker ps -a`。
- en: 'Browse `http://localhost:8080/` or execute a `GET` call from the command line,
    as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览`http://localhost:8080/`或从命令行执行`GET`调用，如下所示：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will give us Hello World! as a response, which means the HTTP server is
    listening inside a Docker container at port `8080`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们一个Hello World!的响应，这意味着HTTP服务器在Docker容器内的端口`8080`上监听。
- en: Pushing your Docker image to the Docker Registry
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将您的Docker镜像推送到Docker注册表
- en: Once a Docker image has been created, it's always best practice to store or
    save the image so that the next time you have to boot up the containers from your
    custom image, you don't have to bother about or remember the steps you performed
    earlier while creating it.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了Docker镜像，最佳做法是存储或保存该镜像，这样下次您要从自定义镜像启动容器时，就不必再去烦恼或记住之前创建它时执行的步骤。
- en: You can save an image either on a local machine or in an artifactory or to any
    of the public or private Docker Registries, such as Docker Hub, Quay, Google Container
    Registry, AWS Container Registry, and so on. In this recipe, we will learn how
    to save or push an image which we have created in one of our previous recipes
    to the Docker Hub.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将镜像保存在本地计算机上，也可以保存在艺术工厂或任何公共或私有的Docker注册表中，例如Docker Hub、Quay、Google容器注册表、AWS容器注册表等。在本教程中，我们将学习如何将我们在之前的教程中创建的镜像保存或推送到Docker
    Hub。
- en: See the *Building your first Go Docker image* recipe*.*
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 查看*构建您的第一个Go Docker镜像*教程*.*
- en: How to do it…
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: Create your account on the Docker Hub (`https://hub.docker.com/`).
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Docker Hub（`https://hub.docker.com/`）上创建您的帐户。
- en: 'Login into the Docker Hub from the command line by executing the `docker login`
    command, as follows:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行`docker login`命令从命令行登录到Docker Hub，如下所示：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Tag the `golang-image`:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`golang-image`打标签：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Verify whether the image has been tagged successfully by executing the `docker
    images` command:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行`docker images`命令验证镜像是否已成功标记：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Executing the preceding command will list all the Docker images, as shown in
    the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述命令将列出所有Docker镜像，如下面的屏幕截图所示：
- en: '![](img/40e5fcf6-d25b-4998-b6fc-5b91f72ca170.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/40e5fcf6-d25b-4998-b6fc-5b91f72ca170.png)'
- en: 'Push the tagged image to the Docker Hub by executing the `docker push` command,
    as follows:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行`docker push`命令将标记的镜像推送到Docker Hub，如下所示：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works…
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'To verify whether an image has been pushed successfully to the Docker Hub,
    browse `https://hub.docker.com/`, sign in using your credentials, and, once logged
    in, you will see the tagged image, as shown in the following screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证图像是否已成功推送到Docker Hub，请浏览`https://hub.docker.com/`，使用您的凭据登录，一旦登录，您将看到已标记的图像，如下面的屏幕截图所示：
- en: '![](img/ee77a49d-e970-41bc-8a31-abdc1640fb86.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee77a49d-e970-41bc-8a31-abdc1640fb86.png)'
- en: 'If you performed any changes to the Docker container and want to persist them
    as well as part of an image, then first you have to commit the changes to a new
    image or to the same image using the `docker commit` command before tagging and
    pushing it to the Docker Hub, as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对Docker容器进行了任何更改，并且希望将其作为图像的一部分进行持久化，那么首先必须使用`docker commit`命令将更改提交到新图像或相同图像，然后将其标记并推送到Docker
    Hub，如下所示：
- en: '**`$ docker commit <container-id> golang-image-new`**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**`$ docker commit <container-id> golang-image-new`**'
- en: '**`$ docker tag golang-image-new arpitaggarwal/golang-image`**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**`$ docker tag golang-image-new arpitaggarwal/golang-image`**'
- en: '**`$ docker push arpitaggarwal/golang-image`**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**`$ docker push arpitaggarwal/golang-image`**'
- en: Creating your first user-defined bridge network
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的第一个用户定义的桥接网络
- en: Whenever we want to connect one Docker container to another Docker container
    by the container name, then first we have to create a user-defined network. This
    is because Docker does not support automatic service discovery on the default
    bridge network. In this recipe, we will learn how to create our own bridge network.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们想要通过容器名称将一个Docker容器连接到另一个Docker容器时，首先我们必须创建一个用户定义的网络。这是因为Docker不支持在默认桥接网络上的自动服务发现。在本教程中，我们将学习如何创建自己的桥接网络。
- en: How to do it…
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Execute the `docker network` command to create a bridge network with the name
    as `my-bridge-network`, as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`docker network`命令创建一个名为`my-bridge-network`的桥接网络，如下所示：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How it works…
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Verify whether `my-bridge-network` has been created successfully by executing
    the following command:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下命令验证`my-bridge-network`是否已成功创建：
- en: '[PRE15]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To see detailed information about `my-bridge-network`, run the `docker network
    inspect` command followed by the network name, as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看有关`my-bridge-network`的详细信息，请运行`docker network inspect`命令，然后输入网络名称，如下所示：
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Running a MySQL Docker image on a user-defined bridge network
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在用户定义的桥接网络上运行MySQL Docker图像
- en: Whenever we run a Docker image to create and boot up a container, it uses the
    default bridge network, which Docker creates during installation. To run an image
    on a specific network, which may be either user-defined or one of the other two
    networks that Docker creates automatically, host or none, we have to provide the
    additional `--net` flag with the value as the network name as part of the `docker
    run` command.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们运行Docker图像创建和启动容器时，它都会使用默认的桥接网络，Docker在安装期间创建。要在特定网络上运行图像，该网络可以是用户定义的，也可以是Docker自动创建的另外两个网络之一，即主机或无网络，我们必须在`docker
    run`命令的一部分中提供附加的`--net`标志，并将值作为网络名称。
- en: In this recipe, we will run a MySQL image on the user-defined bridge network
    that we created in the previous recipe, passing the `--net` flag value as `my-bridge-network`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将在上一个教程中创建的用户定义的桥接网络上运行MySQL图像，将`--net`标志值传递为`my-bridge-network`。
- en: How to do it…
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Execute the `docker run` command to create and run a MySQL Docker container
    from the `mysql:latest` image, assigning the container name as `mysql-container`
    using the `--name` flag, as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`docker run`命令，从`mysql:latest`图像创建和运行MySQL Docker容器，并使用`--name`标志将容器名称分配为`mysql-container`，如下所示：
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `--net` flag specified in the `docker run` command connects `mysql-container`
    to `my-bridge-network`. The `-p` flag specified in the `docker run` command publishes
    the container's `3306` port to the host `3306` port. The `-e` flag specified in
    the `docker run` command sets the `MYSQL_ROOT_PASSWORD` value as `my-pass`, which
    is an environment variable of the `mysql:latest` image. The `-d` flag specified
    in the `docker run` command starts the container in a daemon mode, and the hash
    string at the end represents the ID of the `mysql-container`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker run`命令中指定的`--net`标志将`mysql-container`连接到`my-bridge-network`。`docker
    run`命令中指定的`-p`标志将容器的`3306`端口发布到主机的`3306`端口。`docker run`命令中指定的`-e`标志将`MYSQL_ROOT_PASSWORD`值设置为`my-pass`，这是`mysql:latest`图像的环境变量。`docker
    run`命令中指定的`-d`标志以守护进程模式启动容器，末尾的哈希字符串表示`mysql-container`的ID。'
- en: How it works…
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作…
- en: 'Verify whether the Docker container has been created and is running successfully
    by executing the following command:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下命令验证Docker容器是否已成功创建并正在运行：
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Inspecting the `my-bridge-network` again will show us the `mysql-container`
    details in the `Containers` section, as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 再次检查`my-bridge-network`将在`Containers`部分显示`mysql-container`的详细信息，如下所示：
- en: '[PRE19]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Building a Go web application Docker image
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建Go Web应用程序Docker图像
- en: In this recipe, we will build a Docker image that connects to the MySQL database
    instance running in a separate Docker container.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将构建一个Docker图像，该图像连接到单独运行的MySQL数据库实例的Docker容器。
- en: How to do it…
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Create `http-server.go`, where we will create a simple HTTP server and a handler
    which will give us the current database details, such as machine IP, hostname,
    port, and selected database, as follows:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`http-server.go`，在其中我们将创建一个简单的HTTP服务器和一个处理程序，该处理程序将为我们提供当前数据库详细信息，例如机器IP、主机名、端口和所选数据库，如下所示：
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a `DockerFile`, which is a text file that contains all the commands
    needed to build an image, as follows:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`DockerFile`，这是一个包含构建图像所需的所有命令的文本文件，如下所示：
- en: '[PRE21]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'With everything in place, the directory structure should look like the following:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一切就绪后，目录结构应如下所示：
- en: '![](img/f165d975-c3c5-4163-b580-0f4266b4ded8.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f165d975-c3c5-4163-b580-0f4266b4ded8.png)'
- en: 'Build a Docker image from the `Dockerfile` executing the `docker build` command
    with the image name as `web-application-image` using the `-t` flag, as follows:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Dockerfile`构建Docker图像，使用`-t`标志将图像名称设置为`web-application-image`，如下所示：
- en: '[PRE22]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Once the preceding command has executed successfully, it will render the following
    output:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦上述命令成功执行，它将呈现以下输出：
- en: '![](img/884a7e97-83a5-47dc-beeb-3dbcf5eb767f.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/884a7e97-83a5-47dc-beeb-3dbcf5eb767f.png)'
- en: How it works…
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'Verify whether the Docker image has been created successfully by executing
    the following command:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下命令验证Docker镜像是否已成功创建：
- en: '[PRE23]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This will list all the top-level images, their repositories, tags, and their
    size, as shown in the following screenshot:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这将列出所有顶级镜像，它们的存储库、标签和大小，如下截图所示：
- en: '![](img/4a91e907-a6a4-4095-afa9-ad6fb5853bc6.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4a91e907-a6a4-4095-afa9-ad6fb5853bc6.png)'
- en: 'The `Dockerfile` we created in this recipe is exactly the same as the one we
    created in one of our previous recipes, except for the two additional commands
    that install the Go MySQL Driver and the Gorilla Mux URL router while building
    the image, as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这个教程中创建的`Dockerfile`与我们在之前的教程中创建的完全相同，除了在构建镜像时安装Go MySQL Driver和Gorilla Mux
    URL路由器的两个额外命令，如下：
- en: '[PRE24]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: See the *Building your first Go Docker image* recipe.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 参见*构建您的第一个Go Docker镜像*教程。
- en: Running a web application Docker container linked with a MySQL Docker container
    on a user-defined bridge network
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在用户定义的桥接网络上运行与MySQL Docker容器链接的Web应用程序Docker容器
- en: In this recipe, we will learn how to run a Go web application Docker image to
    create a container which will communicate with the MYSQL database instance running
    in a separate Docker container.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将学习如何运行一个Go Web应用程序Docker镜像，创建一个容器，该容器将与在单独的Docker容器中运行的MYSQL数据库实例进行通信。
- en: As we know Docker does not support automatic service discovery on the default
    bridge network, we will be using the user-defined network that we created in one
    of our previous recipes to run a Go web application Docker image.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们知道Docker不支持默认桥接网络上的自动服务发现，我们将使用我们在之前的教程中创建的用户定义网络来运行Go Web应用程序Docker镜像。
- en: How to do it…
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Execute the `docker run` command to create a web application Docker container
    from the `web-application-image`, assigning the container name as `web-application-container`
    using the `--name` flag, as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`docker run`命令，从`web-application-image`创建一个Web应用程序Docker容器，使用`--name`标志将容器名称指定为`web-application-container`，命令如下：
- en: '[PRE25]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `--net` flag specified in the `docker run` command connects the `mysql-container`
    to the `my-bridge-network`. The `-p` flag specified in the `docker run` command
    publishes the container's `8080` port to the host `8080` port. The `-d` flag specified
    in the `docker run` command starts the container in a daemon mode and the hash
    string at the end represents the ID of the `web-application-container`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker run`命令中指定的`--net`标志将`mysql-container`连接到`my-bridge-network`。`docker
    run`命令中指定的`-p`标志将容器的`8080`端口发布到主机的`8080`端口。`docker run`命令中指定的`-d`标志以守护进程模式启动容器，末尾的哈希字符串表示`web-application-container`的ID。'
- en: How it works…
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'Verify whether the Docker container has been created and is running successfully
    by executing the following command:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下命令验证Docker容器是否已成功创建并正在运行：
- en: '[PRE26]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This will render the following output:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这将呈现以下输出：
- en: '![](img/f2028534-abca-4878-b2fc-192464b36bb2.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f2028534-abca-4878-b2fc-192464b36bb2.png)'
- en: 'Browsing `http://localhost:8090/` as will give us the machine IP, hostname,
    port, and current database details as the response:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览`http://localhost:8090/`将会给我们返回机器IP、主机名、端口和当前数据库详情：
- en: '![](img/96c2854b-5a25-492a-8c25-c9fb8b438d93.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/96c2854b-5a25-492a-8c25-c9fb8b438d93.png)'
- en: 'Moreover, inspecting `my-bridge-network` again will show us the `mysql-container`
    and `web-application-container` details in the `Containers` section, as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，再次检查`my-bridge-network`将显示`mysql-container`和`web-application-container`的详细信息在`Containers`部分，如下：
- en: '[PRE27]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
