- en: Introduction to the ACME Registration Service
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ACME注册服务简介
- en: In this chapter, we will introduce a small but fake service called the ***ACME
    registration service***. The code for this service will serve as the basis for
    most of the examples in the rest of the book. We will examine the business environment
    in which this service lives, discuss the goals for the service and the code, and
    finally, we will look at some examples of the problems that we can fix by applying
    **dependency injection** (**DI**).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍一个名为***ACME注册服务***的小型但虚假的服务。这个服务的代码将成为本书其余大部分示例的基础。我们将研究这个服务所在的商业环境，讨论服务和代码的目标，最后，我们将看一些我们可以通过应用**依赖注入**（**DI**）来解决的问题的例子。
- en: By the end of this chapter, you should have enough knowledge to join the team
    as we work our way through the improvements we will make in the following chapters.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章结束时，您应该有足够的知识来加入团队，一起完成我们将在接下来的章节中进行的改进。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Goals for our system
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们系统的目标
- en: Introduction to our system
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们系统的介绍
- en: Known issues
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已知问题
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: As we are learning about the system that we are going to use for the rest of
    the book, I would strongly recommend downloading the source code and running it
    in your favorite IDE.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在了解本书中将要使用的系统，我强烈建议下载源代码并在您喜欢的IDE中运行它。
- en: All of the code in this chapter is available at [https://github.com/PacktPublishing/Hands-On-Dependency-Injection-in-Go/tree/master/ch04](https://github.com/PacktPublishing/Hands-On-Dependency-Injection-in-Go/tree/master/ch04).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有代码都可以在[https://github.com/PacktPublishing/Hands-On-Dependency-Injection-in-Go/tree/master/ch04](https://github.com/PacktPublishing/Hands-On-Dependency-Injection-in-Go/tree/master/ch04)找到。
- en: Instructions on how to obtain the code and configure the sample service are
    available in the README file, found at [https://github.com/PacktPublishing/Hands-On-Dependency-Injection-in-Go/](https://github.com/PacktPublishing/Hands-On-Dependency-Injection-in-Go/).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何获取代码和配置示例服务的说明，请参阅README文件，网址为[https://github.com/PacktPublishing/Hands-On-Dependency-Injection-in-Go/](https://github.com/PacktPublishing/Hands-On-Dependency-Injection-in-Go/)。
- en: You can find the code for the service in the `ch04/acme `file.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`ch04/acme`文件中找到服务的代码。
- en: Goals for our system
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们系统的目标
- en: Have you ever tried to grow your own vegetables from seed? It's a long, slow,
    but gratifying experience. Building great code is no different. In gardening,
    it's perhaps more common to skip the first step and buy plants as seedlings from
    the nursery, and programming is much the same. Most of the time, when we join
    a project, the code already exists; sometimes it's happy and healthy, but often
    it's sick and dying.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您有没有尝试过从种子开始种植自己的蔬菜？这是一个漫长、缓慢但令人满意的经历。构建优秀的代码也是一样的。在园艺中，跳过第一步直接从苗圃购买植物作为幼苗可能更常见，编程也是如此。大多数情况下，当我们加入一个项目时，代码已经存在；有时它很健康，但通常它是生病和垂死的。
- en: In this situation, we are adopting a system. It works, but has a few thorns—Ok,
    maybe more than a few. With some tender loving care, we will turn this system
    into something healthy and thriving.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们正在采用一个系统。它有效，但有一些问题——好吧，也许不止一些。通过一些精心的关怀，我们将把这个系统变成健康和蓬勃发展的东西。
- en: So, how do we define a healthy system? The system we have works; it does what
    the business needs it to do. That's enough, right?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何定义一个健康的系统？我们现有的系统有效；它做了业务需要它做的事情。这就足够了，对吧？
- en: 'Absolutely not! We might explicitly be paid to deliver a certain amount of
    features, but we are implicitly paid to provide code that can be maintained and
    extended. Beyond considering why we are paid, let''s take a more selfish view:
    do you want your work tomorrow to be easier or harder than it is today?'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对不！我们可能明确地被支付一定数量的功能，但我们隐含地被支付以提供可维护和可扩展的代码。除了考虑我们为什么被支付，让我们以更自私的角度来看：您希望明天的工作比今天更容易还是更难？
- en: 'A healthy code base has the following key features:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一个健康的代码库具有以下关键特征：
- en: High readability
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高可读性
- en: High testability
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高可测试性
- en: Low coupling
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 低耦合
- en: We have talked about or alluded to all of these asks in part 1, but their importance
    means that we will go over them one more time.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第一部分中已经谈到或暗示了所有这些要求，但它们的重要性意味着我们将再次重点介绍它们。
- en: High readability
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高可读性
- en: Simply put, high readability means being able to read the code and understand
    it. Code that is not readable will slow you down and could lead to mistakes, where
    you assume it does one thing but in fact it does something else.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，高可读性意味着能够阅读代码并理解它。不可读的代码会减慢您的速度，并可能导致错误，您可能会假设它做一件事，但实际上它做了另一件事。
- en: 'Let''s look at an example, shown in the following code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个示例，如下所示的代码：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, the code has a problem with its naming. Short variable names
    seem like a win; less typing means less work, right? In the short term, yes, but
    in the long run, they are hard to understand. You are forced to read the code
    to determine what the variable means and then re-read the code within that context,
    whereas a good name would have saved us from the first step. This does not indicate
    that super-long names are right either; they also add to the mental burden and
    waste screen real estate. A good variable is typically one word, with a commonly
    understood meaning or purpose.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，代码的命名存在问题。短变量名似乎是一个胜利；少打字意味着少工作，对吗？短期内是的，但从长远来看，它们很难理解。您被迫阅读代码以确定变量的含义，然后在该上下文中重新阅读代码，而一个好的名称本来可以省去我们的第一步。这并不意味着超长的名称是正确的；它们也增加了心理负担并浪费了屏幕空间。一个好的变量通常是一个单词，具有常见的含义或目的。
- en: There are two situations in which the aforementioned principles should not be
    followed. The first is methods. Perhaps it's because of my time using C++ and
    Java and the lack of a `this` operator in Go, but I find short method receivers
    to be useful, probably because of the fact that they are consistent throughout
    the struct, and only the short variable differentiates them from all the others.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种情况下不应遵循上述原则。第一种是方法。也许是因为我使用C++和Java的时间以及Go中缺少`this`运算符，但我发现短方法接收器很有用，可能是因为它们在整个结构中是一致的，只有短变量使它们与其他所有变量有所不同。
- en: The second situation is when we are working with test names. Tests are essentially
    mini stories; in this case, long names are often entirely appropriate. Comments
    would work too, but less effectively, as the test runner outputs the test's name
    when it fails and not the comments.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种情况是我们在处理测试名称时。测试本质上是小故事；在这种情况下，长名称通常是完全合适的。注释也可以起作用，但效果较差，因为测试运行器在失败时输出测试的名称而不是注释。
- en: 'Let''s update the preceding example with these ideas in mind and see if it''s
    any better, as shown in the following code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在考虑这些想法的基础上更新前面的示例，看看它是否更好，如下所示：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For more on readability, flip back to the *Optimizing for humans *section in
    [Chapter 3](26893ac5-a588-4954-943e-0eaf690feb34.xhtml), *Coding for User Experience*.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有关可读性的更多信息，请翻回到[第3章](26893ac5-a588-4954-943e-0eaf690feb34.xhtml)中的*Optimizing
    for humans*部分。
- en: High testability
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高可测试性
- en: 'Writing automated tests can feel like *extra work*, something that takes time
    away from our real purpose of writing features. In fact, the primary goal of automated
    tests is to ensure that code performs as expected, and continues to do so despite
    any changes or additions we might make to the code base as a whole. Automated
    tests do, however, have a cost: you have to write and maintain them. Therefore,
    if our code is easy to test, we will be less inclined to skimp on the tests and
    rush on to that exciting next feature.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 编写自动化测试可能会感觉像是*额外的工作*，会占用我们编写功能的真正目的的时间。事实上，自动化测试的主要目标是确保代码的执行符合预期，并且尽管我们对代码库作出任何更改或添加，它仍然如此。但自动化测试确实有成本：您必须编写和维护它们。因此，如果我们的代码易于测试，我们就不太可能在测试上吝啬，并匆忙进行下一个令人兴奋的功能。
- en: 'Let''s look at an example, as shown in the following code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个示例，如下所示：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: So what's wrong with the example? The simplest answer is that it knows too much,
    or if I was being more selfish, it makes me know too much.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这个例子有什么问题？最简单的答案是它知道得太多，或者更自私地说，它让我知道得太多。
- en: 'It contains boundary-layer (HTTP and database) logic, and it also contains
    business logic. It is rather long, meaning that I have to keep more context in
    my head. It''s basically one massive violation of the **single responsibility
    principle** (**SRP**). There are many reasons it could change. The input format
    could change. The database format could change. The business rules could change.
    Any such change would mean that every test for this code would likely also need
    to change. Let''s look at what a test for the preceding code might look like,
    as shown in the following code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 它包含边界层（HTTP和数据库）逻辑，也包含业务逻辑。它相当长，意味着我必须在脑海中保留更多的上下文。它基本上违反了**单一职责原则**（**SRP**）。有很多原因它可能会改变。输入格式可能会改变。数据库格式可能会改变。业务规则可能会改变。任何这样的改变都意味着这段代码的每个测试很可能也需要改变。让我们看看前面代码的测试可能是什么样子，如下所示：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, the test is verbose and unwieldy. Perhaps worst of all, any
    other tests for this method will involve copying this test and making minor changes.
    This sounds effective, but there are two issues. The small differences will likely
    be hard to spot among all this boilerplate code, and any change to the feature
    we are testing will need to be made to all these tests as well.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，这个测试冗长且笨重。最糟糕的是，对于这个方法的任何其他测试都将涉及复制这个测试并进行微小的更改。这听起来很有效，但有两个问题。这些样板代码中可能很难发现小的差异，而我们测试的功能发生任何更改都需要对所有这些测试进行更改。
- en: 'While there are many ways to fix the testability of our example, perhaps the
    simplest option is to separate the different concerns and then do the bulk of
    our testing one method at a time, as shown in the following code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有许多方法可以修复我们示例的可测试性，但也许最简单的选择是分离不同的关注点，然后逐个方法进行大部分测试，如下所示：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For more on what unit testing can do for you, flip back to the *A security blanket
    named unit tests* section in [Chapter 3](26893ac5-a588-4954-943e-0eaf690feb34.xhtml),
    *Coding for User Experience*.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 有关单元测试对您的作用，可以翻回到[第3章](26893ac5-a588-4954-943e-0eaf690feb34.xhtml)中的*A security
    blanket named unit tests*部分。
- en: Low coupling
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 低耦合度
- en: Coupling is a measure of how an object or package relates to others. An object
    is considered to have high coupling if changes to it will likely result in changes
    to other objects, or vice versa. Conversely, when an object has low coupling,
    it is independent of other objects or packages. In Go, low coupling is best achieved
    through implicit interfaces and stable and minimal exported APIs.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 耦合是一个对象或包与其他对象的关系程度的度量。如果对一个对象的更改可能导致其他对象的更改，或者反之亦然，则认为该对象的耦合度高。相反，当一个对象的耦合度低时，它独立于其他对象或包。在Go中，低耦合度最好通过隐式接口和稳定且最小化的公开API来实现。
- en: 'Low coupling is desirable as it leads to code where changes are localized.
    In the following example, by using an implicit interface to define our requirements
    we are able to insulate ourselves from changes to our dependency:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 低耦合度是可取的，因为它导致代码的更改局部化。在下面的示例中，通过使用隐式接口来定义我们的要求，我们能够使自己免受对依赖项的更改的影响：
- en: '![](img/a89adf8d-2d89-403c-85e4-14f073fe2245.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a89adf8d-2d89-403c-85e4-14f073fe2245.png)'
- en: As you can see from the preceding example, we no longer depend on the FileManager
    Package, and this helps us in other ways. This lack of dependence also means that
    we have less context to remember when reading the code and fewer dependencies
    when writing our tests.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您从前面的例子中所看到的，我们不再依赖FileManager Package，这在其他方面也对我们有所帮助。这种缺乏依赖也意味着在阅读代码时我们需要记住的上下文更少，在编写测试时依赖更少。
- en: For more on how to achieve low coupling, flip back to the SOLID principles covered
    in [Chapter 2](53a15217-38a7-4622-9242-a57fe46335ec.xhtml), *SOLID Design Principles
    for Go*.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何实现低耦合性，请翻回到[第2章](53a15217-38a7-4622-9242-a57fe46335ec.xhtml)中涵盖的*SOLID
    Design Principles for Go*。
- en: Final thoughts on goals
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于目标的最终想法
- en: By now, you might be seeing a pattern. All of these goals will lead to code
    that is easy to read, understand, test, and extend—that is to say, code that is
    maintainable. While these may seem like selfish or perfectionist goals, I would
    argue that it is imperative for the business in the long term. In the short term,
    delivering value to the users, typically in the form of features, is essential.
    But when this is done poorly, the rate at which features can be added, the number
    of programmers required to add features, and the number of bugs that are introduced
    because of changes will all increase and cost the business more than the cost
    of developing good code.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，您可能已经看到了一个模式。所有这些目标将导致易于阅读、理解、测试和扩展的代码，也就是说，可维护的代码。虽然这些目标可能看起来是自私或完美主义的，但我认为这对于企业长远来说是必不可少的。在短期内，向用户提供价值，通常以功能的形式，是至关重要的。但是，当这样做得不好时，可以添加功能的速度、添加功能所需的程序员数量以及因更改引入的错误数量都会增加，并且会给企业带来的成本将超过开发良好代码的成本。
- en: So now that we have defined the goals that we have for our service, let's take
    a look at its current state.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了我们对服务的目标，让我们来看看它的当前状态。
- en: Introduction to our system
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们系统的介绍
- en: Welcome to the project! So what do you need to know to join the team? As with
    any project, the first thing you want to know is what it does, its users, and
    the business environment in which it is deployed.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎加入项目！那么，加入团队需要了解什么呢？与任何项目一样，您首先想要了解它的功能，用户以及部署环境。
- en: 'The system we are working on is an HTTP-based event registration service. It
    is designed to be called by our web application or native mobile applications.
    The following diagram shows how it fits into our network:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在处理的系统是基于HTTP的事件注册服务。它旨在被我们的Web应用程序或原生移动应用程序调用。以下图表显示了它如何适应我们的网络：
- en: '![](img/f6f650d4-a5f0-4ddf-8df7-9eb76718354a.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/f6f650d4-a5f0-4ddf-8df7-9eb76718354a.png)
- en: 'Currently, there are three endpoints, listed as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有三个端点，列举如下：
- en: '**Register**: This will create a new registration record'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册**：这将创建一个新的注册记录'
- en: '**Get**: This will return the full details of an existing registration record'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**获取**：这将返回现有注册记录的全部详细信息'
- en: '**List**: This will return a list of all the registrations'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**列表**：这将返回所有注册的列表'
- en: All request and response payloads are in JSON. The data is stored in a MySQL
    database.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 所有请求和响应负载都是JSON格式。数据存储在MySQL数据库中。
- en: We also have an upstream currency conversion service—which we call during registration—to
    convert the registration price of 100 euros to the requested currency of the user.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一个上游货币转换服务——我们在注册时调用它，将100欧元的注册价格转换为用户请求的货币。
- en: If you wish to run the service or the tests locally, please refer to the `ch04/README.md`
    file for instructions.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望在本地运行服务或测试，请参考`ch04/README.md`文件中的说明。
- en: Software architecture
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件架构
- en: 'Conceptually, our code has three layers, as shown in the following diagram:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 从概念上讲，我们的代码有三层，如下图所示：
- en: '![](img/b9bd6944-d7c7-40ee-b32d-b3ad0dfe40ce.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/b9bd6944-d7c7-40ee-b32d-b3ad0dfe40ce.png)
- en: 'These layers are as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这些层如下：
- en: 'REST: This package accepts the HTTP requests and converts them into function
    calls in the business logic. It then converts the business logic response back
    into HTTP.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST：这个包接受HTTP请求并将它们转换为业务逻辑中的函数调用。然后将业务逻辑响应转换回HTTP。
- en: 'Business Logic: This is where the magic happens. This layer uses the external
    service and data layer to perform the business functions.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 业务逻辑：这就是魔法发生的地方。这一层使用外部服务和数据层来执行业务功能。
- en: 'External Services and Data: This layer consists of code that accesses the database
    and the upstream services that provides the currency exchange rates.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部服务和数据：这一层包括访问数据库和提供货币汇率的上游服务的代码。
- en: 'I used the word *conceptually* at the beginning of this section because our
    import graph shows a slightly different story:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我在本节的开头使用了“概念上”的词，因为我们的导入图显示了一个略有不同的故事：
- en: '![](img/2c796c74-08f7-49c5-acce-06f2aca8863b.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/2c796c74-08f7-49c5-acce-06f2aca8863b.png)
- en: As you can see, we have a quasi-fourth layer with the config and logging packages,
    and what's worse, everything seems to depend on them. This is likely going to
    cause us problems somewhere down the road.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们有一个准第四层，其中包括配置和日志包，更糟糕的是，一切似乎都依赖于它们。这很可能会在某个时候给我们带来问题。
- en: There is one less obvious problem that is shown here. See the link between the
    rest and data packages? This indicates that our HTTP layer depends on the data
    layer. This is risky because they have different life cycles and different reasons
    to change. We will look at this and some other nasty surprises in the next section.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示了一个不太明显的问题。看到REST和数据包之间的链接了吗？这表明我们的HTTP层依赖于数据层。这是有风险的，因为它们有不同的生命周期和不同的变更原因。我们将在下一节中看到这一点以及其他一些令人不快的惊喜。
- en: Known issues
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 已知问题
- en: Every system has its skeletons, parts of the code we are not proud of. Sometimes,
    they are parts of the code that we would have done better if we'd just had more
    time. This project is no different. Let's examine the issues that we currently
    know about.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 每个系统都有它的骨架，我们不以之为傲的代码部分。有时，它们是我们本可以做得更好的代码部分，如果我们有更多的时间的话。这个项目也不例外。让我们来看看我们目前知道的问题。
- en: Testability
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可测试性
- en: 'Despite being a small and working service, we have quite a few issues, perhaps
    the most egregious of which is its difficulty to test. Now, we don''t want to
    start introducing test-induced damage, but we do want to have a system that we
    are confident in. To achieve this, we are going to need to reduce the complexity
    and verbosity of the tests. Take a look at the following test:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管是一个小型且工作正常的服务，但我们有相当多的问题，其中最严重的是难以测试。现在，我们不想开始引入测试导致的破坏，但我们确实希望有一个我们有信心的系统。为了实现这一点，我们需要减少测试的复杂性和冗长。看看下面的测试：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This test is for our most straightforward endpoint, `Get`. Ask yourself, how
    could this test break? What changes, technical or business-related, would cause
    this test to need to be updated? What parts of the system must be working correctly
    for this test to pass?
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试是针对我们最简单的端点“Get”的。问问自己，这个测试可能会以什么方式失败？什么样的技术或业务相关的变化会导致这个测试需要更新？系统的哪些部分必须正常工作才能通过这个测试？
- en: 'Some potential answers to these questions include following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 对这些问题的一些潜在答案包括以下：
- en: If the URL path changed, this test would break
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果URL路径发生变化，这个测试就会失败
- en: If the output format changed, this test would break
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果输出格式发生变化，这个测试就会失败
- en: If the `config` file wasn't configured correctly, this test would break
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果“config”文件没有正确配置，这个测试就会失败
- en: If the database wasn't working, this test would break
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果数据库不工作，这个测试就会失败
- en: If the record ID 1 were missing from the database, this test would break
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果数据库中缺少记录ID 1，这个测试就会失败
- en: If the business logic layer had a bug, this test would break
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果业务逻辑层出现错误，这个测试就会失败
- en: If the database layer had a bug, this test would break
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果数据库层出现错误，这个测试就会失败
- en: This list is rather nasty for a simple endpoint. The fact that this test can
    break in so many ways means it's a brittle test. Brittle tests are exhausting
    to maintain and often exhausting to write as well.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单端点的测试列表相当恶劣。这个测试可以以这么多种方式失败意味着它是一个脆弱的测试。脆弱的测试令人筋疲力尽，而且通常编写起来也很费力。
- en: Duplication of effort
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作的重复
- en: 'Let''s examine the test for the `Get` endpoint in the business layer, as shown
    in the following code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看业务层中“Get”端点的测试，如下所示：
- en: '[PRE6]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This test is almost the same as the one in the previous section. Perhaps this
    is logical, given that it's the same endpoint. But let's take a selfish view—what
    does this test give us, other than better unit test coverage, that the previous
    one did not?
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试几乎与前一节的测试相同。也许这是合理的，因为它是相同的端点。但让我们以自私的角度来看，这个测试除了更好的单元测试覆盖率之外，还给了我们什么？
- en: Nothing. Because the previous test was effectively an integration test, it tested
    the entire stack. This test is also an integration test, but one layer down. Because
    it tests code that was tested by the previous example, we have performed double
    the work, have double the amount of tests to maintain, and have gained nothing.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 没有。因为之前的测试实际上是一个集成测试，它测试了整个堆栈。这个测试也是一个集成测试，但是更深一层。因为它测试了之前示例中测试过的代码，我们做了双倍的工作，有双倍数量的测试需要维护，但没有任何收获。
- en: Lack of isolation in tests
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试中的隔离不足
- en: The lack of isolation shown in our preceding code is a symptom of high coupling
    between the layers. In the following section, we will be applying DI and the **dependency
    inversion principle** (**DIP**) to fix this.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的代码中显示的缺乏隔离是层之间高耦合的症状。在接下来的部分，我们将应用DI和**依赖反转原则**（**DIP**）来解决这个问题。
- en: High coupling between the data and REST packages
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据和REST包之间的高耦合
- en: Our `REST` package is using the `Person` struct defined in the `data` package.
    On the surface, this makes some sense. Less code means less work to write and
    maintain that code; however, this means that the output format and the data format
    are tied to each other. Consider what happens if we start storing private information
    relating to the customer, such as a password or IP address. This information might
    be necessary for some functions, but it is very unlikely that it should need to
    be published via the `Get` or `List` endpoints.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的“REST”包使用了“data”包中定义的“Person”结构。从表面上看，这是有道理的。更少的代码意味着写和维护更少的工作；然而，这意味着输出格式和数据格式是相互关联的。考虑一下，如果我们开始存储与客户相关的私人信息，比如密码或IP地址会发生什么。这些信息可能对某些功能是必要的，但很少需要通过“Get”或“List”端点发布。
- en: There is another consideration that we should bear in mind. As the volume of
    data that is stored or the amount of usage grows, it might be necessary to change
    the format of the data. Any such change to this struct would break the API contract
    and, therefore, our users.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一个考虑我们应该记住。随着存储的数据量或使用量的增长，可能需要更改数据的格式。对这个结构的任何更改都会破坏API合同，因此也会破坏我们的用户。
- en: Perhaps the most significant risk here is simply human error; if you are working
    on the `data` package, you may not remember that the `REST` package uses that
    struct, or how. Let's say that we added the ability for users to log in to our
    system. The most straightforward implementation of this would be to add a password
    field to the database. What happens if our `Get` endpoint was building its output
    as shown in the following code?
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 也许这里最大的风险就是人为错误；如果你在“data”包上工作，你可能不记得“REST”包如何使用那个结构。假设我们添加了用户登录系统的功能。最简单的实现方式是在数据库中添加一个密码字段。如果我们的“Get”端点构建其输出如下所示的代码会发生什么？
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Our `Get` endpoint payload would now include the password. Whoops!
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的“Get”端点负载现在将包括密码。哎呀！
- en: This issue is an SRP violation, and the fix for this is to ensure that these
    two use cases are decoupled and allowed to evolve separately.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题是SRP违规，解决这个问题的方法是确保这两个用例是解耦的，并允许它们分别发展。
- en: High coupling with the config package
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与配置包的高耦合
- en: As we saw in our dependency graph, just about everything depends on the `config`
    package. The primary cause of this is code that directly references a public global
    variable to configure itself. The first issue with this is how it affects the
    tests. All tests now pretty much make sure that the config global has been properly
    initialized before being run. Because all of the tests are using the same global
    variable, we are forced to choose between not changing the config, which hampers
    our ability to test, or running the tests in serial, which wastes our time.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在依赖图中看到的那样，几乎所有东西都依赖于“config”包。这主要原因是代码直接引用公共全局变量来配置自身。这带来的第一个问题是它对测试的影响。现在几乎所有的测试都确保在运行之前已经正确初始化了配置全局变量。因为所有的测试都使用同一个全局变量，我们被迫在不改变配置的情况下进行选择，这影响了我们的测试能力，或者按顺序运行测试，这浪费了我们的时间。
- en: 'Let''s look at an example, as shown in the following code:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个例子，如下面的代码所示：
- en: '[PRE8]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this code, we are starting our REST server and passing it the address (host
    and port) to bind to. If we decided that we wanted to start multiple servers to
    test different things in isolation, then we would have to change the value stored
    in `config.App.Address`. However, by doing so in one test, we could accidentally
    influence a different test.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们正在启动我们的REST服务器，并将地址（主机和端口）传递给它以绑定。如果我们决定要启动多个服务器以便隔离测试不同的事物，那么我们将不得不更改存储在“config.App.Address”中的值。然而，通过在一个测试中这样做，我们可能会意外地影响到另一个测试。
- en: The second issue doesn't appear as often, but this coupling also means that
    this code cannot be easily used by other projects, packages, or use cases beyond
    its original intent.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个问题并不经常出现，但这种耦合也意味着这段代码不能轻松地被其他项目、包或用例所使用，超出了最初的意图。
- en: 'The final issue is perhaps the most annoying: you cannot use custom data types,
    defined outside of the `Config` package, in your config as a result of a circular
    dependency issue.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个问题可能是最烦人的：由于循环依赖问题，您无法在配置中使用自定义数据类型，这些类型在“Config”包之外定义。
- en: 'Consider the following code:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下代码：
- en: '[PRE9]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Say that your config included the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您的配置包括以下内容：
- en: '[PRE10]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this case, any attempt to use the config package in the same package as our
    `Currency` type would be prevented.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，任何尝试在与我们的“Currency”类型相同的包中使用配置包都将被阻止。
- en: Downstream currency service
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下游货币服务
- en: 'The exchange package makes HTTP calls to an external service for exchange rates.
    Currently, when the tests are run, it will make calls to that service. This means
    that our tests have the following features:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 交换包对外部服务进行HTTP调用以获取汇率。目前，当运行测试时，它将调用该服务。这意味着我们的测试具有以下特点：
- en: They require an internet connection
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们需要互联网连接
- en: They are dependent on the downstream service being accessible and working properly
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们依赖于下游服务可访问和正常工作
- en: They require proper credentials and quotas from the downstream service
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们需要来自下游服务的适当凭据和配额
- en: All of these factors are either out of our control or otherwise wholly unrelated
    to our service. If we take the perspective that the reliability of our tests is
    a measure of the quality of our work, then our quality is now dependent on things
    we cannot control. This is far from ideal.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些因素要么超出我们的控制，要么与我们的服务完全无关。如果我们从测试的可靠性是我们工作质量的衡量标准的角度来看，那么我们的质量现在取决于我们无法控制的事情。这远非理想。
- en: We could create a fake currency service and change our config to point to that,
    and when testing the exchange package, I would likely do just that. But having
    to do this in other places is annoying and prone to error.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个虚假的货币服务，并更改我们的配置指向该服务，在测试交换包时，我可能会这样做。但在其他地方这样做是令人讨厌的，并且容易出错。
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we introduced a small service that is in pretty rough shape.
    We are going to improve this service with a series of refactorings as we explore
    the many DI techniques. In the following chapters, we will tackle the problems
    we have outlined in this chapter by applying the different DI techniques available
    in Go.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了一个状况相当糟糕的小型服务。我们将通过一系列重构来改进这个服务，同时探索许多DI技术。在接下来的章节中，我们将通过应用Go中可用的不同DI技术来解决本章中概述的问题。
- en: For each different technique, keep in mind the code smells, the SOLID principles,
    the code UX, and all the other ideas we discussed in part 1\. Also, remember to
    bring along your inner skeptic.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每种不同的技术，要记住代码异味，SOLID原则，代码UX以及我们在第一部分讨论的所有其他想法。还要记得带上你内心的怀疑者。
- en: Always ask yourself, what does this technique achieve? How does this technique
    make the code better/worse? How could you apply this technique to improve other
    code that belongs to you?
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 始终要问自己，这种技术实现了什么？这种技术如何使代码变得更好/更糟？你如何应用这种技术来改进属于你的其他代码？
- en: Questions
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which of the goals that are defined for our service is most important to you
    personally?
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于我们的服务定义的目标，哪一个对你个人来说最重要？
- en: Which of the issues outlined seem to be the most urgent or important?
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 概述中列出的问题中哪一个似乎是最紧迫或最重要的？
