- en: Getting Started with Go
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Go
- en: This book will help you on your Go programming journey, especially when you
    begin to actively develop applications with Go. This chapter addresses the most
    common problems that new Go developers, as well as people working with other languages,
    face in their daily programming. I hope you enjoy the book and find it useful.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将帮助您在Go编程之旅中，特别是在您开始积极开发Go应用程序时。本章节解决了新的Go开发人员以及与其他语言一起工作的人在日常编程中面临的最常见问题。希望您喜欢这本书并且觉得它有用。
- en: 'We will be covering the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Installing Go binaries
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Go二进制文件
- en: A quick look at the Go language
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速了解Go语言
- en: Installing Go binaries
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Go二进制文件
- en: Let's get started with Go. In this section, we will learn how to install Go
    binaries and briefly take a look at the Go language.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始使用Go。在本节中，我们将学习如何安装Go二进制文件，并简要了解Go语言。
- en: 'To install the Go binaries, the first thing to do is to navigate to the following
    link: [https://golang.org/doc/install](https://golang.org/doc/install); you can
    also access it if you search for it directly in Google. You''ll find a step-by-step
    guide to installing Go on different platforms and operating systems. If you click
    on Download Go, it will take you to the Downloads page, where you can find various
    binary formats.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Go二进制文件，首先要做的是转到以下链接：[https://golang.org/doc/install](https://golang.org/doc/install)；您也可以直接在Google中搜索并访问它。您将找到一个逐步指南，介绍如何在不同平台和操作系统上安装Go。如果您点击“下载Go”，它将带您到下载页面，在那里您可以找到各种二进制格式。
- en: 'You''ll find MSI for Windows, Linux, and macOS, as shown in the following screenshot:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在以下截图中找到Windows、Linux和macOS的MSI：
- en: '![](img/cc1f0180-dd8d-4c29-88bf-3e936a68fed2.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cc1f0180-dd8d-4c29-88bf-3e936a68fed2.png)'
- en: I'll be using macOS, but you'll find the steps similar with other platforms
    as well. Let's go ahead with the download.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用macOS，但您也会发现其他平台的步骤类似。让我们继续进行下载。
- en: 'The installer is basically a step-by-step wizard; you can just run it and keep
    clicking Continue until the installation is complete. After you''ve installed
    it, you may want to do one more thing, and that is, set your environment variable.
    Furthermore, you will have to set up your workspace. You''ll have three folders,
    `bin`, `pkg`, and `src`, as shown in the following screenshot:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 安装程序基本上是一个逐步向导；您只需运行它并不断点击“继续”，直到安装完成。安装完成后，您可能还需要做一件事，那就是设置您的环境变量。此外，您还需要设置您的工作区。您将有三个文件夹，`bin`、`pkg`和`src`，如下截图所示：
- en: '![](img/ad693586-b8d7-4898-b568-296ea7bd9c88.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ad693586-b8d7-4898-b568-296ea7bd9c88.png)'
- en: 'The `src` folder is where you put your source files, the `pkg` folder is where Go
    stores your object files, and the `bin` folder is where the binaries, which are
    the actual executables, are stored. Moving ahead, I''m going to be using my shell
    and you need to set a couple of environment variables by using `export`. You can
    also use profile files to set your environment variable. If you check the following
    screenshot, you can see the path `$PATH:/usr/local/go/bin`, and this is where
    my Go binaries are located:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`src`文件夹是您放置源文件的地方，`pkg`文件夹是Go存储对象文件的地方，`bin`文件夹是存储二进制文件（实际可执行文件）的地方。接下来，我将使用我的shell，并且您需要使用`export`来设置一些环境变量。您还可以使用配置文件来设置您的环境变量。如果您查看下面的截图，您可以看到路径`$PATH:/usr/local/go/bin`，这就是我的Go二进制文件所在的位置：'
- en: '![](img/a05dd85f-116b-482c-83c9-2b17140c83d1.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a05dd85f-116b-482c-83c9-2b17140c83d1.png)'
- en: So, when I run the `Go` command, it will automatically find where the Go program
    is located.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我运行`Go`命令时，它将自动找到Go程序的位置。
- en: Next, we set the `GOPATH`. The `GOPATH` is basically where your Go workspace
    is located. The workspace, if you remember, contains three folders, `pkg`, `src`,
    and `bin`. `GoProject` is the parent folder of that structure. The last is `$GOPATH/bin`,
    which is used when you want your terminal to find the installed Go binaries. Just
    make sure that you're adding these three things and saving this file before restarting
    your terminal. Then, you will be good to Go!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们设置`GOPATH`。`GOPATH`基本上是您的Go工作区所在的位置。如果您记得的话，工作区包含三个文件夹，`pkg`、`src`和`bin`。`GoProject`是该结构的父文件夹。最后是`$GOPATH/bin`，当您希望终端找到已安装的Go二进制文件时使用。只需确保在重新启动终端之前添加这三个内容并保存此文件。然后，您就可以开始使用Go了！
- en: 'You can also find out how to set environment variables for a Go path by clicking
    the link, shown in the following screenshot, which is on the same page:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过点击链接找出如何设置Go路径的环境变量，如下截图所示，该链接位于同一页面上：
- en: '![](img/ece31944-4fa2-4491-8969-1db2b04813f2.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ece31944-4fa2-4491-8969-1db2b04813f2.png)'
- en: 'You''ll find instructions for different operating systems. For instance, for
    Unix-based systems, you can use `~/.bash_profile` or, depending on which shell
    you''re using, you can use various profile files. In mine, I use the profile as
    seen in the following screenshot:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您将找到不同操作系统的说明。例如，对于基于Unix的系统，您可以使用`~/.bash_profile`，或者根据您使用的shell不同，您可以使用各种配置文件。在我的系统中，我使用的是如下截图中所见的配置文件：
- en: '![](img/2ec25741-dc7c-4fb6-b138-7fcda340d3f4.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ec25741-dc7c-4fb6-b138-7fcda340d3f4.png)'
- en: 'For Windows, following installation, and once you have your Go workspace, follow
    the instructions given and you are pretty much good to Go. The instructions will
    look like the following screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows，在安装完成后，一旦您有了Go工作区，按照给定的说明进行操作，您就可以开始使用Go了。说明将如下截图所示：
- en: '![](img/1ee9027a-dde7-4abd-88ee-598e7c11adc4.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1ee9027a-dde7-4abd-88ee-598e7c11adc4.png)'
- en: 'The quickest way to test whether you have Go installed is to just type in `go`,
    as shown in the following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 测试您是否已安装Go的最快方法就是输入`go`，如下截图所示：
- en: '![](img/ae4661b5-6535-46c1-8ed7-1e5ca5c58cf2.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae4661b5-6535-46c1-8ed7-1e5ca5c58cf2.png)'
- en: It will bring up the help tutorial, and you can see the available commands and
    which version of code you have by using the Go version.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 它将带出帮助教程，您可以通过使用Go版本查看可用命令和您拥有的代码版本。
- en: That's how you can easily set up your Go environment. In the next section, we
    will take a quick look at the Go language itself.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您如何轻松设置Go环境。在下一节中，我们将快速了解Go语言本身。
- en: A quick look at the Go language
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速了解Go语言
- en: 'In this section, we''re going to take a quick look at the Go programming language.
    Go is an expressive, concise, and clean language; it has concurrency mechanisms,
    and this helps programmers to write programs that get the most out of multi-core
    and networking machines. It also compiles quickly to machine code and has the
    convenience of garbage collection and the power of runtime reflection. It is a
    statically typed-in, compiled language, but, for most, it feels like a dynamically
    typed and interpreted language. All right then! Let''s look at the syntax of Go
    by navigating to [https://tour.golang.org/welcome/1](https://tour.golang.org/welcome/1);
    this is a good starting point for those who want to learn Go syntax:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将快速了解Go编程语言。 Go是一种表达力强，简洁，干净的语言；它具有并发机制，这有助于程序员编写能充分利用多核和网络机器的程序。它还可以快速编译为机器代码，并具有垃圾回收的便利性和运行时反射的强大性。它是一种静态类型的编译语言，但对大多数人来说，它感觉像是一种动态类型和解释语言。好了！让我们通过导航到[https://tour.golang.org/welcome/1](https://tour.golang.org/welcome/1)来查看Go的语法；这对于想要学习Go语法的人来说是一个很好的起点：
- en: '![](img/0531d92f-0fa8-49d2-b0a5-5fe4de42171d.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0531d92f-0fa8-49d2-b0a5-5fe4de42171d.png)'
- en: 'OK, So if you look at the syntax in the screenshot, and if you come from languages
    such as Java and C#, or C and C++, you may find the syntax a little bit different.
    For instance, if you look at the return type, instead of defining the type, you
    actually define the return types at the end of your function. We also have a main
    function, which is the entry point of our application, similar to many other programming
    languages, and if you look at the context shown in the following screenshot, you
    can see that we have packages, variables, and functions, and flow control statements:  `for`,
    `if...else`, and types such as `struct`, `slices`, and `maps`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以如果您看一下截图中的语法，如果您来自诸如Java和C#，或C和C++之类的语言，您可能会发现语法有点不同。例如，如果您看一下返回类型，您实际上是在函数的末尾定义返回类型，而不是定义类型。我们还有一个主函数，这是我们应用程序的入口点，类似于许多其他编程语言，如果您看一下下面截图中显示的上下文，您会发现我们有包、变量和函数，以及流程控制语句：`for`、`if...else`，以及`struct`、`slices`和`maps`等类型：
- en: '![](img/2aff032d-e205-49a6-a873-da00529d102e.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2aff032d-e205-49a6-a873-da00529d102e.png)'
- en: If you want to create a class, such as structure, you can use a struct type
    and combine it with a pointer. Additionally, it has methods and interfaces and
    concurrency, but it doesn't have generics.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想创建一个类，比如结构，您可以使用结构类型并将其与指针结合。此外，它具有方法和接口以及并发性，但它没有泛型。
- en: Having said that, I will also talk about the tools that I'm going to be using
    throughout this book. There are a couple of tools available in **GoLand**. GoLand
    is a relatively new IDE by JetBrains. We will be using GoLand throughout the book.
    You can easily create new projects and give them a name and choose the SDK, which
    is Go 1.9\. You can also add new files or new packages, and so on.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 说到这一点，我还将谈论我将在整本书中使用的工具。**GoLand**中有几个可用的工具。 GoLand是JetBrains推出的一个相对较新的IDE。我们将在整本书中使用GoLand。您可以轻松创建新项目并为其命名，并选择SDK，即Go
    1.9。您还可以添加新文件或新包等。
- en: 'You can define your configurations, and build your Go, by typing your entry
    file, as shown in the following screenshot. You can then run  `main.go` and click OK:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过输入您的入口文件来定义您的配置并构建您的Go，如下截图所示。然后，您可以运行`main.go`并单击OK：
- en: '![](img/ef4f11d9-cb81-44f4-a70b-f72f7bcf9fdf.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ef4f11d9-cb81-44f4-a70b-f72f7bcf9fdf.png)'
- en: 'Finally, pressing *Ctrl *+ *r* will build your project, as can be seen in the
    following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，按下*Ctrl* + *r*将构建您的项目，如下截图所示：
- en: '![](img/c3e1bc05-93d5-4ec2-95ae-1da7786c8ce7.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c3e1bc05-93d5-4ec2-95ae-1da7786c8ce7.png)'
- en: 'Before I conclude this chapter, let me quickly show you an example that uses
    just the terminal. I''m going to use the  `touch` command to create the `main.go`
    file and add the following code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在我结束本章之前，让我快速向您展示一个仅使用终端的示例。我将使用`touch`命令创建`main.go`文件并添加以下代码：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can run it by using the `go run main.go` command and you will get the following
    output:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`go run main.go`命令运行它，然后您将获得以下输出：
- en: '![](img/ed40c885-8935-47d5-8781-bf553c172e2f.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed40c885-8935-47d5-8781-bf553c172e2f.png)'
- en: You can save it and then run it. So, this is how you can use the terminal to
    quickly write Go code and run it.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以保存它，然后运行它。因此，这就是您如何使用终端快速编写Go代码并运行它。
- en: Summary
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned how to install Go binaries and taken a brief
    look at the Go language. We have learned how to write Go code and run it using
    just the terminal. We have also looked at the tools that are going to be used
    throughout all chapters and what other tools can be used to develop Go applications.
    We are now ready to move on to the next chapter, where we will see some recipes
    for manipulating string values.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何安装Go二进制文件，并简要了解了Go语言。我们学会了如何编写Go代码并仅使用终端运行它。我们还看了将在所有章节中使用的工具以及可以用来开发Go应用程序的其他工具。我们现在准备继续下一章，在那里我们将看到一些操作字符串值的示例。
