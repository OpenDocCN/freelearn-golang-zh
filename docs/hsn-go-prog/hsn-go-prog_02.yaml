- en: Manipulating String Values
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作字符串值
- en: We now have an overview of what this book will take us through. We know how
    to install Go binaries and write Go code and run it using just the terminal. In
    this chapter, we're going to learn some recipes for manipulating string values,
    such as trimming spaces from beginning and end of a string, extracting sub strings,
    replacing parts of a string, escaping characters in a string value, and capitalizing
    string values.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了这本书将带领我们完成的内容概述。我们知道如何安装Go二进制文件，编写Go代码并使用终端运行它。在本章中，我们将学习一些操作字符串值的技巧，比如从字符串的开头和结尾修剪空格，提取子字符串，替换字符串的部分，转义字符串值中的字符，以及将字符串值大写。
- en: Trimming spaces from the beginning and end of a string
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从字符串的开头和结尾修剪空格
- en: Let's start with trimming spaces from the beginning and end of a string. There
    are many reasons why you may want to remove spaces from the beginning and end
    of a string; for instance, if you were accepting some values such as first name,
    you usually don't require any spaces at the end or at the beginning of that string
    value.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从字符串的开头和结尾修剪空格开始。有许多原因你可能想要从字符串的开头和结尾删除空格；例如，如果你接受一些值，比如名字，你通常不需要在字符串值的末尾或开头有任何空格。
- en: 'So, let''s go ahead with our project and see how we can carry out this process
    in Go language. So, you have to add a new project for trimming spaces and have
    the `main.go` file that we''re going to put our code in and then we''re just going
    to run it; your screen should look something like this:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们继续进行我们的项目，并看看我们如何在Go语言中进行这个过程。所以，你必须为修剪空格添加一个新项目，并有一个我们将放置我们的代码的`main.go`文件，然后我们只需要运行它；你的屏幕应该看起来像这样：
- en: '![](img/d928383e-79c9-4b4c-9ae3-36e489d22922.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d928383e-79c9-4b4c-9ae3-36e489d22922.png)'
- en: 'To begin, let''s imagine that we have a string variable that has some spaces
    in it:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们想象一下，我们有一个字符串变量，其中有一些空格：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the preceding code snippet, `/t` is for tab and we have some space after
    it. There is *hello World* and some more space. I have put this string value to
    the console with its length property. The `len` function will give us the length
    of the greetings string, indicating the number of characters in that string. Let''s
    run this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码片段中，`/t`代表制表符，后面有一些空格。有*hello World*和一些空格。我已经将这个字符串值与它的长度属性一起放到控制台上。`len`函数将给我们字符串的长度，表示字符串中的字符数。让我们运行一下：
- en: '![](img/5cf1f06e-2e5f-4398-abbc-932f34a332f8.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5cf1f06e-2e5f-4398-abbc-932f34a332f8.png)'
- en: As you can see from the screenshot, it has 15 characters, including the tab
    and the spaces and the rest of the string.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 从屏幕截图中可以看出，它有15个字符，包括制表符、空格和字符串的其余部分。
- en: 'Now, let''s go ahead and trim the spaces from the variable. We have `strings.TrimSpace`,
    which returns another string, as shown in the following screenshot:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续修剪变量中的空格。我们有`strings.TrimSpace`，它返回另一个字符串，如下面的屏幕截图所示：
- en: '![](img/d5b7429f-3f3d-4967-bd9f-ac7e9f16f587.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d5b7429f-3f3d-4967-bd9f-ac7e9f16f587.png)'
- en: 'We can then capture the string within a variable. Check the following code:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以将字符串捕获到一个变量中。检查以下代码：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output for the preceding code is as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 上面代码的输出如下：
- en: '![](img/61ab38f8-1c83-447e-ae87-23c8c64c4d78.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/61ab38f8-1c83-447e-ae87-23c8c64c4d78.png)'
- en: Voila! As you see, our spaces from the beginning and end, including the tab,
    are gone and now we have 12 characters here. That's how you trim spaces in Go.
    In the next section, we are going to see how we can extract sub-strings from a
    string value.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 看！正如你所看到的，我们的开头和结尾的空格，包括制表符，都消失了，现在我们这里有12个字符。这就是你在Go中修剪空格的方法。在下一节中，我们将看到如何从字符串值中提取子字符串。
- en: Extracting sub-strings from a string value
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从字符串值中提取子字符串
- en: In this section, you will learn how to extract sub-strings from a string value.
    String in Go language is effectively a read-only slice of bytes, which means that
    you can perform any slice operation on a string as well. Let's go to our editor
    and see how we can proceed with it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，你将学习如何从字符串值中提取子字符串。Go语言中的字符串实际上是一个只读的字节切片，这意味着你也可以对字符串执行任何切片操作。让我们去编辑器看看我们如何进行操作。
- en: 'In the editor, add a new file and name it `main.go`. You have to change the
    Package to `main` and add a new function called `main`. This `main` function will
    be the entry point of our example. So, let''s imagine we have a string value as
    follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑器中，添加一个新文件并将其命名为`main.go`。你必须将包更改为`main`，并添加一个名为`main`的新函数。这个`main`函数将是我们示例的入口点。所以，让我们假设我们有一个字符串值如下：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'I want to remove the word *Mars* and the word *and* from the string and extract
    just the *Hello, World* part of it. This can be done as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我想从字符串中删除*Mars*和*and*这两个词，只提取其中的*Hello, World*部分。可以这样做：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The index starts from a 0, since it is slice.  The output of the preceding
    code is as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 索引从0开始，因为它是切片。上面代码的输出如下：
- en: '![](img/4112dafd-57f4-4f89-85fe-baf862ef351d.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4112dafd-57f4-4f89-85fe-baf862ef351d.png)'
- en: As you can see, we only extracted the *Hello, World* part of the whole phrase.
    It will still work without a zero in the index. If we only want the *World* and
    *Mars* part of this string, the index can be [6:].
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们只提取了整个短语中的*Hello, World*部分。如果索引中没有0，它仍然可以工作。如果我们只想要这个字符串的*World*和*Mars*部分，索引可以是[6:]。
- en: That's how you extract sub-strings from a string value. In our next video, we're
    going to see how we can replace a part of a string with another string.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你从字符串值中提取子字符串的方法。在我们的下一个视频中，我们将看到如何用另一个字符串替换字符串的一部分。
- en: Replacing parts of a string
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 替换字符串的部分
- en: In this section, we're going to see how we can quickly replace a part of a string
    with another value. When it comes to string manipulation in Go language, you will
    find a lot of utility methods under the strings package. Herein, we are going
    to use the same package for replacing a part of the string with another value.
    Let's go back to our editor and see how we can commence this process.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何快速将字符串的一部分替换为另一个值。在Go语言中进行字符串操作时，您会发现在字符串包下有许多实用方法。在这里，我们将使用相同的包来将字符串的一部分替换为另一个值。让我们回到我们的编辑器，看看我们如何开始这个过程。
- en: 'So, I''m going to have a `helloWorld` variable and we''re going to replace
    *World* with *Mars*. Check the following code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我将有一个`helloWorld`变量，并且我们将用*Mars*替换*World*。检查以下代码：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following screenshot will explain the code that we just looked at:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的屏幕截图将解释我们刚刚看到的代码：
- en: '![](img/5814b177-4e26-4d61-a5d1-8fd981a31820.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5814b177-4e26-4d61-a5d1-8fd981a31820.png)'
- en: As shown in the screenshot, we're going to use `strings` package and it has
    a  `replace` function and it accepts the variable that we're going to search as
    the first parameter, which is *Hello,  World*. The old string would be the things
    in the string that we want to replace, which is *World*. The new string would
    be *Mars*, and number of repetitions that we want to apply to this replacement
    would be '1'.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如屏幕截图所示，我们将使用`strings`包，它有一个`replace`函数，它接受我们要搜索的变量作为第一个参数，即*Hello, World*。旧字符串将是我们要替换的字符串中的内容，即*World*。新字符串将是*Mars*，我们要应用于此替换的重复次数将是'1'。
- en: 'If you look at it, the signature of this method returns another string and
    we''re going to assign it to another variable, in this case `helloMars`. Thus,
    you will see the following output:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看一下，此方法的签名返回另一个字符串，并且我们将其分配给另一个变量，在这种情况下是`helloMars`。因此，您将看到以下输出：
- en: '![](img/5dbd4c75-dc8b-4889-a38b-a6eaf0bfd9fb.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5dbd4c75-dc8b-4889-a38b-a6eaf0bfd9fb.png)'
- en: As you can see, we've replaced *World* with *Mars*.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们已经用*Mars*替换了*World*。
- en: 'Now, let''s imagine that we have multiple instances of *World* in the sentence
    and you use the following code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们在句子中有多个*World*实例，并且您使用以下代码：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'So, if you have a strength value like that, using 1 will not help. It''ll only
    replace the first occurrence of the word *World* with *Mars* but the rest of it
    will still remain as *World,* as seen in the following screenshot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您有这样的字符串值，使用1将无济于事。它只会用*Mars*替换第一个*World*出现，但其余部分仍将保留为*World*，如下面的屏幕截图所示：
- en: '![](img/25508dbe-50fe-4367-b3de-a25ecc622bd8.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/25508dbe-50fe-4367-b3de-a25ecc622bd8.png)'
- en: 'Thus, you can replace as many instances of *World* as you like by changing
    the number of repetitions. For instance, if you would want to replace the first
    two instances of *World* with *Mars*, the number of repetitions would be 2, and
    so on and so forth. If you want to replace all instances of *World* with *Mars*,
    one quick and easy way would be to use minus one, and that effectively tells Go
    to replace any instance of the World within that string that you can find with
    the word *Mars*. Let''s run the following code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您可以通过更改重复次数来替换尽可能多的*World*实例。例如，如果您想要用*Mars*替换前两个*World*实例，重复次数将为2，依此类推。如果您想要用*Mars*替换所有*World*实例，一个快速简单的方法是使用减一，这有效地告诉Go用单词*Mars*替换您可以找到的字符串中的任何*World*实例。让我们运行以下代码：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The preceding code will give the following output:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将产生以下输出：
- en: '![](img/16d3d73a-73e5-425a-8429-6c109e3165a5.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16d3d73a-73e5-425a-8429-6c109e3165a5.png)'
- en: Now, all instances of world have been replaced by the word *Mars*. The Go strings
    package gives you a lot of other options, and, as you have seen, replacement of
    a string is really easy. In our next section, we're going to see how we can escape
    characters in strings.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有*world*实例都已被单词*Mars*替换。Go字符串包提供了许多其他选项，正如您所见，替换字符串真的很容易。在下一节中，我们将看到如何在字符串中转义字符。
- en: Escaping characters in a string
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在字符串中转义字符
- en: In this section, we're going to see how to escape special characters in string
    values. Similar to many other languages in the market today, Go treats certain
    characters in a special way. For instance, if Go sees \t characters in a string
    value, it will treat them as a tab character instead. Also, without escaping it,
    you cannot have double quotes within a double quote, and right now we're going
    to see how to escape them in order to properly show those characters to our output.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何转义字符串值中的特殊字符。与今天市场上许多其他语言类似，Go以特殊方式处理某些字符。例如，如果Go在字符串值中看到\t字符，它将将其视为制表符字符。此外，如果不进行转义，您无法在双引号内包含双引号，现在我们将看到如何转义它们以正确显示这些字符到我们的输出中。
- en: As always, we will have our `main.go` file and the `main` function. So let's
    check an example that is similar to the previous one.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，我们将有我们的`main.go`文件和`main`函数。因此，让我们检查一个与之前类似的示例。
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'So, if I want to include double quotes around the term Tarik, I can do it,
    but, as you can see, it gives me a compile time error, as shown in the following
    screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我想在术语Tarik周围包含双引号，我可以这样做，但是，正如您所看到的，它会给我一个编译时错误，如下面的屏幕截图所示：
- en: '![](img/ba60f272-bc4b-4602-a2a7-32053c00cb32.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba60f272-bc4b-4602-a2a7-32053c00cb32.png)'
- en: 'So, let''s fix this. All I need to do is use `\`. So, anytime you want to escape
    a special character, you escape it with a `\`. So, let''s go ahead and add it
    to our console:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们来修复这个问题。我所需要做的就是使用`\`。因此，每当您想要转义特殊字符时，都要用`\`进行转义。让我们继续并将其添加到我们的控制台：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output for the the preceding code will be as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出将如下所示：
- en: '![](img/08b1ad84-c990-4a17-aed7-62879f0a4566.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/08b1ad84-c990-4a17-aed7-62879f0a4566.png)'
- en: All right! As you can see, it says Hello World, this is "Tarik.", but Tarik
    is within two double quotes as desired.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 好了！正如您所看到的，它说Hello World, this is "Tarik."，但Tarik被包含在两个双引号中，这是我们想要的。
- en: 'Now, there are other problems as well. Let''s imagine that I want to, for some
    reason, output `\t` without the double quotes:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在还有其他问题。假设我想以某种原因输出`\t`而不带双引号：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'It looks good to go and, since we don''t see any compile time error, we can
    go ahead and run it. The following output is obtained:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来可以运行，既然我们没有看到任何编译时错误，我们可以继续运行。得到以下输出：
- en: '![](img/13045bfc-e96b-4df1-895d-1ffc2ea35d43.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/13045bfc-e96b-4df1-895d-1ffc2ea35d43.png)'
- en: 'As you can see, `\t` does not appear in the console; in fact, I see a big tab
    because this is a special character; `\t` means tab. There are other special characters
    like that, for instance `\n`, which means new line. So, let''s try and run the
    following code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，\t不会出现在控制台中；实际上，我看到了一个大制表符，因为这是一个特殊字符；\t表示制表符。还有其他类似的特殊字符，例如\n，表示换行。因此，让我们尝试运行以下代码：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The preceding code will give the following output:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将产生以下输出：
- en: '![](img/6efe8ca7-17d6-4ca7-93b5-a8bdaec6d69f.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6efe8ca7-17d6-4ca7-93b5-a8bdaec6d69f.png)'
- en: 'As you can see, `Hello again`, instead of being on the same line, is put on
    a new line. If I remove `/n` and run the code again, the hello again will be back
    to the same line and we''ll also have a big space because of the special character
    `\t`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`Hello again`不再在同一行上，而是放在了新的一行上。如果我删除/n并再次运行代码，hello again将回到同一行，我们还会因为特殊字符\t而有一个大的空格：
- en: '![](img/4257ff60-42f1-4acc-ace5-4714afc05243.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4257ff60-42f1-4acc-ace5-4714afc05243.png)'
- en: 'So, how can we escape the `\t`?  Let''s see what happens if we include another
    `\` and run the following code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何转义\t？让我们看看如果包含另一个\会发生什么，并运行以下代码：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As you can see in the following screenshot, we now have the \t within the string
    value and Go does not treat it as a special character any more:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在以下屏幕截图中所见，我们现在在字符串值中有了\t，Go不再将其视为特殊字符：
- en: '![](img/dc5f9031-2a97-42f3-b989-105a8b825d3d.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc5f9031-2a97-42f3-b989-105a8b825d3d.png)'
- en: That's how you use escape characters in Go. In our next section, we're going
    to see how to capitalize string values easily.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是在Go中使用转义字符的方法。在我们的下一节中，我们将看到如何轻松地将字符串值大写。
- en: Capitalizing string values
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 大写字符串值
- en: In this section, we're going to see how to capitalize words in Go. There are
    various ways in which you might want to capitalize words in a sentence; for instance,
    you may want to capitalize all the letters in the sentence or just the first letters
    of all the words and we're going to see how to do it.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何在Go中大写单词。有多种方式可以大写句子中的单词；例如，您可能希望大写句子中的所有字母，或者只是所有单词的首字母，我们将看到如何做到这一点。
- en: 'Let''s go back to our editor. The first few steps remain the same as followed
    while trimming spaces from the beginning and end of a string. However, here, we
    have a variable that has "hello world, how are you today", and we want to capitalize
    just the first letters of all the words in this sentence. So, the strings package,
    which we''ve seen before in our previous section, has a function called `title`
    and the signature of this method, too, returns another string that we can assign
    to another variable, which is `HelloWorldtitle`. To proceed, we will have to run
    the, code just described:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到我们的编辑器。前几个步骤与从字符串的开头和结尾修剪空格时一样。然而，在这里，我们有一个变量，其值为"hello world, how are
    you today"，我们希望只大写这个句子中所有单词的首字母。因此，我们之前在上一节中看到的strings包中有一个名为`title`的函数，该方法的签名也返回另一个字符串，我们可以将其赋给另一个变量，即`HelloWorldtitle`。为了继续，我们将不得不运行刚刚描述的代码：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The preceding code will give the following output:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将产生以下输出：
- en: '![](img/2c064635-37d6-4fc4-bb17-d4adf025420b.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c064635-37d6-4fc4-bb17-d4adf025420b.png)'
- en: 'As you can see, the code has resulted in the capitalization of all the first
    letters of the sentence. Now, if we want to capitalize all the letters in this
    sentence, we will have to run the following code with the new `ToUpper` function:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，该代码导致了句子中所有首字母的大写。现在，如果我们想要大写这个句子中的所有字母，我们将不得不使用新的`ToUpper`函数运行以下代码：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you do print `Ln`, it actually prints that string in a new line, whereas
    if you do not print, it doesn''t do that. The code that we just saw will give
    the following output:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打印`Ln`，它实际上会在新的一行中打印该字符串，而如果您不打印，它就不会这样做。我们刚刚看到的代码将产生以下输出：
- en: '![](img/c2e4a283-6ac9-40e3-8556-d4c302a7f66d.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c2e4a283-6ac9-40e3-8556-d4c302a7f66d.png)'
- en: This is all about capitalizing string values!
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是关于大写字符串值的全部内容！
- en: Summary
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to trim spaces from the beginning and end of
    strings, how to extract sub-strings from a string value, how to replace parts
    of a string, how to escape characters in a string, and how to capitalize string
    values. With this, we have finished learning about string manipulation. The next
    chapter will describe how to carry out type conversions among various types and
    we're going to start off with converting pool to a string value.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何从字符串的开头和结尾修剪空格，如何从字符串值中提取子字符串，如何替换字符串的部分内容，如何在字符串中转义字符，以及如何将字符串值大写。有了这些，我们已经完成了关于字符串操作的学习。下一章将描述如何在各种类型之间进行类型转换，我们将从将pool转换为字符串值开始。
