- en: Files and Directories
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件和目录
- en: 'In the last chapter, you learned how to deal with errors and logging. In this
    chapter, we are going to see recipes for working with files and directories in
    the Go language. You will also learn about parsing and using various formats such
    a XML, YAML, and JSON. This chapter will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您学会了如何处理错误和日志记录。在本章中，我们将看到如何在Go语言中处理文件和目录的相关操作。您还将了解解析和使用各种格式，如XML、YAML和JSON。本章将涵盖以下主题：
- en: Checking the existence of a file
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查文件是否存在
- en: Reading the entire content of a text file
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取文本文件的全部内容
- en: Writing to a file
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写入文件
- en: Creating temporary files
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建临时文件
- en: Counting lines in a file
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算文件中的行数
- en: Reading a particular line in a file
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在文件中读取特定行
- en: Comparing the contents of two files
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较两个文件的内容
- en: Deleting a file
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除文件
- en: Copying or moving a file
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制或移动文件
- en: Renaming files
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重命名文件
- en: Deleting a directory and its contents
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除目录及其内容
- en: Listing all the files under a directory
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出目录下的所有文件
- en: Checking the existence of a file
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查文件是否存在
- en: We are going to start off by checking the existence of a file. So, to begin,
    let's create a file by clicking on New | File and naming it `log.txt`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从检查文件是否存在开始。因此，首先让我们通过单击New | File并将其命名为`log.txt`来创建一个文件。
- en: 'To start checking whether the file exists, we are going to be using the `os.Stat`
    package. It returns two values: the first one is the file info and the second
    one is the error. We don''t need the file information but just the error itself
    because we are going to check the error to see whether the file exists. If the
    error is `nil` (no error occurs), then the file exists. Check out the following
    code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始检查文件是否存在，我们将使用`os.Stat`包。它返回两个值：第一个是文件信息，第二个是错误。我们不需要文件信息，只需要错误本身，因为我们将检查错误以查看文件是否存在。如果错误是`nil`（没有错误发生），那么文件存在。请查看以下代码：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'On running the preceding code, you''ll obtain the following output:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码时，您将获得以下输出：
- en: '![](img/1b6a4608-dc38-45fd-81c2-2a7fcde62f49.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b6a4608-dc38-45fd-81c2-2a7fcde62f49.png)'
- en: 'To check whether the file exists in an opposite way, we just type `os.IsNotExist()` and
    pass the `err` that we captured and print it to the console. Check out the following
    code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要以相反的方式检查文件是否存在，我们只需输入`os.IsNotExist()`并传递我们捕获的`err`并将其打印到控制台。请查看以下代码：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'On running the preceding code, we will get the same output saying `Log.txt
    file exists`. Now, let''s try to run the same code, but we delete the `log.txt`
    file this time. You will get the following output:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码时，我们将得到相同的输出，显示`Log.txt文件存在`。现在，让我们尝试运行相同的代码，但这次删除`log.txt`文件。您将得到以下输出：
- en: '![](img/3f4015dc-873e-4739-878f-bcc035a86f58.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f4015dc-873e-4739-878f-bcc035a86f58.png)'
- en: You can see that now the output displays `Log.txt file does not exist` and that's
    how you can easily check whether a file exists. In our next section, we're going
    to see how to read the entire contents of a file.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到现在输出显示`Log.txt文件不存在`，这样您就可以轻松地检查文件是否存在。在下一节中，我们将看到如何读取文件的全部内容。
- en: Reading the entire contents of a text file
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取文本文件的全部内容
- en: 'In this section, we''re going to see how to read the entire contents of a file.
    We will create a new file called `names` and I have a bunch of names, for instance,
    `Tarik`, `Guney`, `Michael`, `John`, and `Montana`. We are going to read this
    file. We''re going to use the `io` utility package that provides a read file function
    and it accepts the path of the file, that is, `names.txt`. It returns two things:
    the actual content of the file and errors. If no error occurs, we''re going to
    convert the `contentBytes` to a `string` representation first. Now let''s write
    the content to the console using the following code:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何读取文件的全部内容。我们将创建一个名为`names`的新文件，我有一堆名字，例如`Tarik`，`Guney`，`Michael`，`John`和`Montana`。我们将读取这个文件。我们将使用提供读取文件功能的`io`实用程序包，并接受文件的路径，即`names.txt`。它返回两个东西：文件的实际内容和错误。如果没有错误发生，我们将首先将`contentBytes`转换为`string`表示。现在让我们使用以下代码将内容写入控制台：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'On running the code in the terminal by using `go run main.go` command, you''ll
    obtain the following output:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在终端中使用`go run main.go`命令运行代码，您将获得以下输出：
- en: '![](img/0c58474b-7b23-4b89-9a69-29121a73758b.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0c58474b-7b23-4b89-9a69-29121a73758b.png)'
- en: Thus, you can see that we have read all the names from the file. That's how
    you can easily read the entire content of a file into your memory.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您可以看到我们已经从文件中读取了所有的名字。这就是您如何轻松地将文件的全部内容读入内存中。
- en: In our next section, we're going to see how to write to a file.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到如何写入文件。
- en: Writing to a file
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写入文件
- en: 'In this section, we''re going to see how to write to a file. Similar to reading
    a file, we''re going to use the `ioutil` package. We will use the `ioutil.WriteFile`
    function and it accepts three parameters. The first parameter is the name of the
    file that we''re going to write into, the second one is the data that we want
    to write, and the last one is the file permissions. The advantage here is that
    if the file does not exist, then `WriteFile` will create the file with the permissions
    given through the `perm` parameter, and if the file order exists, then it will
    truncate the file before writing. We are going to go ahead and write something
    to our file and since our file does not exist yet, it will create a new file for
    us. We are going to write `Hello, World`, which is a `string` parameter and we''re
    going to convert it to a `byte` array before being able to pass it into the `WriteFile`.
    The name of the file will be `hello_world` and the second parameter will be the
    byte representation of the `hello` variable. This will return an error. If it''s
    not `nil`, it means something happened. Let''s check the code:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将看到如何写入文件。与读取文件类似，我们将使用`ioutil`包。我们将使用`ioutil.WriteFile`函数，它接受三个参数。第一个参数是我们要写入的文件名，第二个是我们要写入的数据，最后一个是文件权限。这里的优势是，如果文件不存在，`WriteFile`将使用`perm`参数给出的权限创建文件，如果文件已经存在，则在写入之前将截断文件。我们将继续往我们的文件中写入一些内容，因为我们的文件还不存在，它会为我们创建一个新文件。我们将写入`Hello,
    World`，这是一个`string`参数，我们将把它转换为`byte`数组，然后才能传递给`WriteFile`。文件名将是`hello_world`，第二个参数将是`hello`变量的字节表示。这将返回一个错误。如果它不是`nil`，意味着发生了某些事情。让我们检查一下代码：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'On running the code, you''ll see that no error occurs and that our `hello_world`
    file exists. If you open the file, you''ll see `Hello, World` has been written
    in all the same:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码时，你会看到没有错误发生，我们的`hello_world`文件存在。如果你打开文件，你会看到`Hello, World`已经被写入了：
- en: '![](img/e95a2f11-50ae-4abe-964a-7769cdef2f44.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e95a2f11-50ae-4abe-964a-7769cdef2f44.png)'
- en: 'If we run the code again with a different `string` and `Hello, World Again`
    you will see that the previous content was wiped out and replaced with the new
    content, which is shown in the following screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次用不同的`string`和`Hello, World Again`运行代码，你会看到之前的内容被清除并替换为新内容，如下截图所示：
- en: '![](img/fca14fb8-c3bb-44ec-a633-e81e0859989c.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fca14fb8-c3bb-44ec-a633-e81e0859989c.png)'
- en: That's basically how you write into a file. In our next section, we're going
    to see how to create temporary files.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上就是如何写入文件。在我们的下一部分中，我们将看到如何创建临时文件。
- en: Creating temporary files
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建临时文件
- en: 'In this section, we''re going to see how to create a temporary file. Let''s
    also have a variable that contains a string called `helloWorld := "Hello, World"`.
    We''re going to use `ioutil` package and it provides the `TempFile()` method.
    The first parameter is directory; if you don''t pass anything to it, it will use
    its default temporary directory, which we will be using in this case, and the
    second one is to give a prefix to your temporary file, which will be `hello_world_temp`.
    It returns two things: the first one is the temporary file that is created and
    the second one is the error (`err`). Now, if any error occurs, then we are going
    to panic and we''ll throw the error as the message.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将看到如何创建临时文件。我们还将有一个包含字符串的变量，叫做`helloWorld := "Hello, World"`。我们将使用`ioutil`包，它提供了`TempFile()`方法。第一个参数是目录；如果你不给它传递任何东西，它将使用默认的临时目录，这在这种情况下我们将使用，第二个是给你的临时文件一个前缀，将是`hello_world_temp`。它返回两个东西：第一个是创建的临时文件，第二个是错误（`err`）。现在，如果发生任何错误，我们将会抛出错误作为消息。
- en: 'When you''re done with the temporary file, what''s recommended is you remove
    the file, and we can use the `defer` function where we have a `os.Remove()` method.
    You just have to provide the name of the file and it will find it and remove it.
    Now we''re going to write the `helloWorld` into our file. Let''s check the code
    now:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成临时文件后，建议删除文件，我们可以使用`defer`函数，其中有一个`os.Remove()`方法。你只需要提供文件名，它就会找到并删除它。现在我们要把`helloWorld`写入我们的文件。现在让我们检查一下代码：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'On running the preceding code, you''ll obtain the following output:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码，你将得到以下输出：
- en: '![](img/8a87c71d-62b3-4fca-b709-b271a2b0377f.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8a87c71d-62b3-4fca-b709-b271a2b0377f.png)'
- en: The path is where our file is located and the selected part is the name of our
    file, which is a temporary file and, of course, this file is deleted. If it was
    not deleted, we would have seen it in that location. Now, we are not going to
    delete the file this time just by commenting the `deferos.Remove(file.Name())` line
    from the preceding code block and running it.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 路径是我们的文件所在的位置，选择的部分是我们文件的名称，这是一个临时文件，当然，这个文件会被删除。如果没有被删除，我们会在那个位置看到它。现在，我们不会删除文件，只需注释掉前面代码块中的`deferos.Remove(file.Name())`一行并运行它。
- en: 'Furthermore, we''ll open the file and by using the terminal, we will just display
    the content of that file with the `less` command (in Linux) and the `more <` command
    (in Windows) as shown in the screenshot:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将打开文件，并使用终端，我们将显示该文件的内容，使用`less`命令（在Linux中）和`more <`命令（在Windows中），如截图所示：
- en: '![](img/350448fe-4fe4-4618-8ed6-f1f6c76d2676.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/350448fe-4fe4-4618-8ed6-f1f6c76d2676.png)'
- en: If you look at the preceding screenshot, you'll see that `Hello, World` is present
    there.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看前面的截图，你会看到`Hello, World`在那里。
- en: That's how you can create a temporary file in Go.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你如何在Go中创建临时文件。
- en: In our next section, we're going to see how to count the lines of a file.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一部分中，我们将看到如何计算文件的行数。
- en: Counting lines in a file
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在文件中计算行数
- en: 'In this section, we''re going to see how to count the lines of a file. Consider
    that we have a file and it has a bunch of names in each line, and we have to count
    how many lines there are in the file. First, we will open our file using the `os.Open`
    package and the name of our file will be `names.txt`. It returns an error, but
    for this example, we''re not going to care about the error because we know that
    the file exists. So, I''m going to use a file scanner to scan the file. We have
    the `bufio.NewScanner` package that has the new scanner and it accepts a reader
    so we can pass the file. The line count will start from `0` and we are going to
    do this for `fileScanner.scan`. Thus, as long as it scans, it will increment the
    line count. Finally, we''re going to write the number of the line to the console.
    Of course, when everything is done, we will use the `defer file.Close()` function.
    Let''s check the code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何计算文件的行数。假设我们有一个文件，每行都有一堆名字，我们必须计算文件中有多少行。首先，我们将使用`os.Open`包打开我们的文件，文件名将是`names.txt`。它返回一个错误，但是对于这个例子，我们不会关心错误，因为我们知道文件是存在的。因此，我将使用文件扫描程序来扫描文件。我们有`bufio.NewScanner`包，其中有新的扫描程序，它接受一个读取器，因此我们可以传递文件。行数将从`0`开始，我们将对`fileScanner.scan`进行此操作。因此，只要它扫描，它将增加行数。最后，我们将将行号写入控制台。当一切都完成时，我们将使用`defer
    file.Close()`函数。让我们检查代码：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When you run the preceding code, you''ll get the output as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码时，您将获得以下输出：
- en: '![](img/745e2305-90c6-48b5-9b06-24c3d98ca5f7.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/745e2305-90c6-48b5-9b06-24c3d98ca5f7.png)'
- en: The output printed out `5`, and you can confirm it by going to the file and
    manually counting it too.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 输出打印出`5`，您也可以通过查看文件并手动计数来确认。
- en: In our next section, we're going to see how to read a particular line in a file.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一节中，我们将看到如何读取文件中的特定行。
- en: Reading a particular line in a file
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取文件中的特定行
- en: 'In this section, we''re going to see how to read a particular line in a file.
    We have a file called `names.txt` and it has a bunch of names in it in each line:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何读取文件中的特定行。我们有一个名为`names.txt`的文件，每行都有一堆名字：
- en: '![](img/95227ee6-4354-4493-bb79-bd20b3e0b606.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/95227ee6-4354-4493-bb79-bd20b3e0b606.png)'
- en: 'We want to read only the third line from the file. Check out the following
    code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只想从文件中读取第三行。查看以下代码：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To begin with, we will have a `ReadLine()` function that accepts line numbers
    and returns a string. First, we are going to open the file using the `os.Open()`
    function, and second we are going to use `fileScanner`. We will then pass the
    file, and the line count that we''re going to use will start from `0`. If the
    line count equals the line number that is given to us, then we will return the
    file `scanner.txt`; otherwise, we are going to increment the counter. Finally,
    we are going to use the `defer file.Close()` function. On running the preceding
    code, you''ll obtain the following output:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将有一个`ReadLine()`函数，它接受行号并返回一个字符串。首先，我们将使用`os.Open()`函数打开文件，然后我们将使用`fileScanner`。然后我们将传递文件，我们将使用的行数将从`0`开始。如果行数等于给定给我们的行号，那么我们将返回文件`scanner.txt`；否则，我们将递增计数器。最后，我们将使用`defer
    file.Close()`函数。运行上述代码时，您将获得以下输出：
- en: '![](img/4fa59ff5-ddd9-4385-960f-94f8e33941dc.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4fa59ff5-ddd9-4385-960f-94f8e33941dc.png)'
- en: Thus, it returns `john`, which is on the third line as you start counting `0`.
    You can change the index and start with `1` if you want it to be more aligned
    with what people expect when they count lines in a file. That's how you can easily
    get a particular line from a file.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，它返回`john`，这是第三行，从`0`开始计数。如果您希望与人们在文件中计算行数时的预期更加一致，可以更改索引并从`1`开始。这样您就可以轻松地从文件中获取特定行。
- en: In our next section, we are going to see how to compare the contents of two
    files.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一节中，我们将看到如何比较两个文件的内容。
- en: Comparing the contents of two files
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较两个文件的内容
- en: 'In this section, we''re going to see how to compare contents of the two files.
    First, we are going to create two text files, having the same content, to compare,
    `one.txt` and `two.txt`. We are going to use the `ioutil` package to read the
    file into memory; as always, we will make sure that there is no error when we
    import the first file, and if there''s an error, we simply will panic. We''re
    also going to import the second file. There is a very easy way of checking whether
    these two files have the same content (are equal), which is by using the `Equal`
    function defined under the `byte` package. Check out the following code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何比较两个文件的内容。首先，我们将创建两个文本文件，内容相同，以便比较，`one.txt`和`two.txt`。我们将使用`ioutil`包将文件读入内存；与往常一样，我们将确保在导入第一个文件时没有错误，如果有错误，我们将简单地发生panic。我们还将导入第二个文件。有一种非常简单的方法来检查这两个文件是否具有相同的内容（相等），即使用`byte`包下定义的`Equal`函数。查看以下代码：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'On running the preceding code, you will get the following output:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码时，您将获得以下输出：
- en: '![](img/af24c517-9553-4d45-bbbf-fb54e3e25a01.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af24c517-9553-4d45-bbbf-fb54e3e25a01.png)'
- en: The output is `true`, which means that the content of the files was equal. If
    you change the content in one file and run the same code again, the output is
    `false`. That's how you check whether the content in two different files is the
    same or not.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 输出为`true`，这意味着文件的内容相等。如果更改一个文件中的内容并再次运行相同的代码，则输出为`false`。这就是您检查两个不同文件中的内容是否相同的方法。
- en: In the next section, we are going to learn how to delete a file using the Go
    language.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何使用Go语言删除文件。
- en: Deleting a file
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除文件
- en: 'In this section, we''re going to see how to delete a file in Go. Deleting a
    file is one of the easiest operations in Go because the `os` package provides
    a function called `Remove()` that allows you to remove any file. So, to begin,
    we will create a new file and name it `new.txt`. The following screenshot will
    show the folder structure after the `new.txt` is created:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将看到如何在Go中删除文件。删除文件是Go中最简单的操作之一，因为`os`包提供了一个名为`Remove()`的函数，允许您删除任何文件。因此，首先，我们将创建一个新文件并命名为`new.txt`。下面的屏幕截图将显示在创建`new.txt`后的文件夹结构：
- en: '![](img/85fe0208-841b-4aff-90e9-3ee20c9afb3e.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/85fe0208-841b-4aff-90e9-3ee20c9afb3e.png)'
- en: 'We are going to see how to remove the `new.txt` file. The `Remove()` function
    accepts the path of your file. It returns an error if something happens and we''re
    going to `catch` that error and panic if it is not `nil`. Check out the following
    code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到如何删除`new.txt`文件。`Remove()`函数接受您文件的路径。如果发生错误，它会返回一个错误，我们将“捕获”该错误，如果它不是`nil`，则会触发。查看以下代码：
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s run the code and check the output:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行代码并检查输出：
- en: '![](img/0a6265c5-edb4-4ed5-b9d4-50f5c0c35887.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0a6265c5-edb4-4ed5-b9d4-50f5c0c35887.png)'
- en: 'You can see that the `new.txt` file has disappeared and we have successfully
    deleted the file. So, what I''m going to do is go ahead and run this and, as you
    saw, the `new.txt` file disappeared. Let''s run this again and see what type of
    panic we''ll get and what error message you will see when you try to remove a
    file that does not exist in the first place:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到`new.txt`文件已经消失，我们已成功删除了该文件。因此，我要继续运行这个，正如您所看到的，`new.txt`文件消失了。让我们再次运行这个并看看当您尝试删除一开始不存在的文件时，我们将得到什么类型的恐慌和错误消息：
- en: '![](img/3f26b6bf-03fe-4ca6-a365-28dc4e283b6d.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f26b6bf-03fe-4ca6-a365-28dc4e283b6d.png)'
- en: Alright, this is how you can easily delete a file in Go. In our next section,
    we're going to see how to copy or move a file.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，这就是您如何在Go中轻松删除文件。在下一节中，我们将看到如何复制或移动文件。
- en: Copying or moving a file
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复制或移动文件
- en: 'In this section, we''re going to see how to copy or move a file. There are
    various ways you can do this and some of them depend on the operating system you''re
    going to use. However, we''re going to see the easiest way of copying or moving
    a file without depending on the operating system too much. First of all, we''ll
    add a file that we''re going to copy and name it `original.txt` and add some content
    that has `Hello, World` in it. Then, we are going to open the file by using `os.Open()`,
    which will return two things, original, which is our file, and an error. If there
    is no error, we''re going to continue and carry out a `defer` and then close the
    file. Furthermore, we are going to use `os.Create()` and create a new file at
    the same location, which will also return an error. Now the easiest thing to do
    is to use `io.Copy()`. Thus, the code will look something like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将看到如何复制或移动文件。您可以以各种方式执行此操作，其中一些取决于您将要使用的操作系统。但是，我们将看到在不过多依赖操作系统的情况下复制或移动文件的最简单方法。首先，我们将添加一个要复制的文件并命名为`original.txt`，并添加一些包含`Hello,
    World`的内容。然后，我们将使用`os.Open()`打开文件，它将返回两个东西，原始文件和一个错误。如果没有错误，我们将继续执行`defer`，然后关闭文件。此外，我们将使用`os.Create()`创建一个新文件在相同的位置，它也会返回一个错误。现在最简单的方法是使用`io.Copy()`。因此，代码将看起来像这样：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'On running the code, we see that `copy.txt` appears and, on opening it, we
    can see `Hello, World` in it that has been copied from the  `original.txt` file:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码后，我们看到`copy.txt`出现，并且打开它时，我们可以看到其中包含从`original.txt`文件复制的`Hello, World`：
- en: '![](img/54b81394-f01b-4afb-ba56-8b01b8257960.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/54b81394-f01b-4afb-ba56-8b01b8257960.png)'
- en: 'Now, let''s check how to move a file. First, we will create a new folder called
    `target` and copy `original.txt` into `target`, and delete the `original.txt`
    file that is placed outside the `target` folder. To do this, `original_copy, err2
    := os.Create("copy.txt")` will change to `original_copy, err2 := os.Create("target/original.txt")`.
    If you see the following screenshot, you''ll notice that the `original.txt` file
    has been copied under the `target` folder:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看如何移动文件。首先，我们将创建一个名为`target`的新文件夹，并将`original.txt`复制到`target`中，并删除放置在`target`文件夹外部的`original.txt`文件。为此，`original_copy,
    err2 := os.Create("copy.txt")`将更改为`original_copy, err2 := os.Create("target/original.txt")`。如果您看到以下屏幕截图，您将注意到`original.txt`文件已被复制到`target`文件夹下：
- en: '![](img/adc1d602-be2b-4525-8097-0be21234491b.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/adc1d602-be2b-4525-8097-0be21234491b.png)'
- en: 'We can now delete the outside `original.txt` file. Add the following two lines
    of code at the end of the `main` function in the preceding code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以删除外部的`original.txt`文件。在上述代码的`main`函数末尾添加以下两行代码：
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'On running the preceding code, you''ll obtain the following output:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码后，您将获得以下输出：
- en: '![](img/a7d9ea9e-8779-4bd6-b9a1-467be9e39726.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a7d9ea9e-8779-4bd6-b9a1-467be9e39726.png)'
- en: As you can see, the code effectively moved the `original.txt` file by moving
    and deleting the file. That's how you can simply copy and move files in Go.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，该代码有效地通过移动和删除文件来移动`original.txt`文件。这就是您如何简单地在Go中复制和移动文件。
- en: In our next section, we're going to see how we can easily rename files in Go.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到如何在Go中轻松重命名文件。
- en: Renaming files
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重命名文件
- en: 'In this section, we''re going to see how to rename files in Go. First of all,
    we''re going to create a new file and name it `old.txt` and the folder structure
    will be as shown in the following screenshot:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将看到如何在Go中重命名文件。首先，我们将创建一个新文件并命名为`old.txt`，文件夹结构将如下屏幕截图所示：
- en: '![](img/60b9bac7-c0df-439b-8862-7e32ab5867bf.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/60b9bac7-c0df-439b-8862-7e32ab5867bf.png)'
- en: 'We are going to change the name of this file to `new.txt`. To do this, the
    easiest way is to use the `os` package that provides a `Rename()` function. The
    function accepts the old path, which is `old.txt`, and a new path, which is `new.txt`.
    Let''s check the code:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更改此文件的名称为`new.txt`。要做到这一点，最简单的方法是使用`os`包提供的`Rename()`函数。该函数接受旧路径`old.txt`和新路径`new.txt`。让我们来看看代码：
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'On running the code, you can see in the following screenshot that the name
    `old.txt` has been changed to `new.txt`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行代码时，您可以看到在以下屏幕截图中，名称`old.txt`已更改为`new.txt`：
- en: '![](img/1b7e6add-0928-4b42-91c5-51bd0843ad74.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b7e6add-0928-4b42-91c5-51bd0843ad74.png)'
- en: So, that's basically how we can rename our files in Go.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这基本上是我们如何在Go中重命名文件的方法。
- en: In our next section, we're going to see how to delete a directory and all of
    its contents.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到如何删除目录及其所有内容。
- en: Deleting a directory and its contents
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除目录及其内容
- en: 'In this section, we''re going to see how to delete a directory and its contents.
    We are going to use the `os` package and it provides two functions, `Remove()`
    and `RemoveAll()`. We will check both these functions. First, we will create a
    new directory called `hello` and keep it empty, as shown in the following screenshot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何删除目录及其内容。我们将使用`os`包，它提供了两个函数，`Remove（）`和`RemoveAll（）`。我们将检查这两个函数。首先，我们将创建一个名为`hello`的新目录，并保持为空，如下面的屏幕截图所示：
- en: '![](img/06f763ca-9e82-4c16-9470-64388339dd92.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/06f763ca-9e82-4c16-9470-64388339dd92.png)'
- en: 'As mentioned earlier, we are going to use the `os` package and it accepts either
    a file or a directory. We''re going to pass a directory, which always returns
    an error if something happens. We will have to check whether this error is not
    `nil`. Check out the following code:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们将使用`os`包，它接受文件或目录。我们将传递一个目录，如果发生任何事情，它总是返回一个错误。我们必须检查这个错误是否不是`nil`。请查看以下代码：
- en: '[PRE13]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If you run the code, you''ll obtain the following folder structure as output:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您运行代码，将获得以下文件夹结构作为输出：
- en: '![](img/b9cd3c16-0a56-4800-8e83-e986b2723d47.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b9cd3c16-0a56-4800-8e83-e986b2723d47.png)'
- en: 'If you compare the two output screenshots, you can see that we have effectively
    removed our `hello` directory. However, if there''s a file (say `world.txt`) in
    the directory, that is, the directory is not empty and you run the same code,
    the directory will not be deleted and the following message will be displayed
    if there''s a file in the `hello` directory:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您比较两个输出屏幕截图，您会发现我们已成功删除了`hello`目录。但是，如果目录中有文件（比如`world.txt`），也就是说，目录不是空的，并且您运行相同的代码，那么目录将不会被删除，并且如果`hello`目录中有文件，则会显示以下消息：
- en: '![](img/137c35c3-58be-4eea-928e-467a30bde069.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/137c35c3-58be-4eea-928e-467a30bde069.png)'
- en: Now, there is an option to delete the file as well as the directory. We can
    use the `RemoveAll()` function that we spoke about at the beginning of the section.
    To do this, just change the `err := os.Remove("hello")` to `err := os.RemoveAll("hello")` from
    the preceding code.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，有一个选项可以删除文件以及目录。我们可以使用我们在本节开头提到的`RemoveAll（）`函数。要做到这一点，只需将上述代码中的`err：= os.Remove（“hello”）`更改为`err：=
    os.RemoveAll（“hello”）`。
- en: 'On running the preceding code, you''ll find that you have successfully deleted
    both the file and the directory and you will be viewing the following folder structure
    again:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行上述代码时，您会发现您已成功删除了文件和目录，并且您将再次查看以下文件夹结构：
- en: '![](img/d2ffbd3c-0af5-4b86-af53-c543117243f7.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d2ffbd3c-0af5-4b86-af53-c543117243f7.png)'
- en: In our next section, we're going to see how to list all the files under a directory.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到如何列出目录下的所有文件。
- en: Listing all the files under a directory
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出目录下的所有文件
- en: 'In this section, we are going to see how to list all the files under a directory.
    We will create a new directory called `hello` comprising three files; namely, `jupiter.txt`,
    `mars.txt`, and `world.txt`:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何列出目录下的所有文件。我们将创建一个名为`hello`的新目录，其中包括三个文件，即`jupiter.txt`，`mars.txt`和`world.txt`：
- en: '![](img/0e8b0a22-d83b-425f-9296-8c09a188fccc.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e8b0a22-d83b-425f-9296-8c09a188fccc.png)'
- en: 'What we are going to do is read all the files and output their names to the
    console. We are going to use the `ioutil.ReadDir` package and pass in `hello`,
    which is the name of our directory. This will return two types of things: two
    files and an error. We will check whether the error is not `nil` and print out
    the content by using panic. We will also use the `for` loop to iterate over the
    files. Check out the following code:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的是读取所有文件并将它们的名称输出到控制台。我们将使用`ioutil.ReadDir`包并传入`hello`，这是我们目录的名称。这将返回两种类型的东西：两个文件和一个错误。我们将检查错误是否不是`nil`，并使用panic打印出内容。我们还将使用`for`循环来遍历文件。请查看以下代码：
- en: '[PRE14]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You get the following output if you run the preceding code:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您运行上述代码，将获得以下输出：
- en: '![](img/d2ee0c53-9b60-48ec-8b1d-c7e90ab11019.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d2ee0c53-9b60-48ec-8b1d-c7e90ab11019.png)'
- en: That's how you can simply list all the files under your directory.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您如何简单列出目录下的所有文件。
- en: Summary
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to work with files and directories in an operating
    system. You also learned parsing and using various formats such a XML, YAML, and
    JSON. In the next chapter, we're going to learn recipes about concurrency, and
    we're going to start by running multiple functions concurrently.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何在操作系统中处理文件和目录。您还学习了解析和使用各种格式，如XML，YAML和JSON。在下一章中，我们将学习有关并发的技巧，并且我们将从同时运行多个函数开始。
