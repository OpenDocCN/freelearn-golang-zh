- en: System Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统编程
- en: 'System programming allows you to work with system messages and run processing
    tasks. In this chapter, you will learn how to process command-line arguments using
    Go. The following topics will be covered in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 系统编程允许你处理系统消息并运行处理任务。在本章中，你将学习如何使用Go处理命令行参数。本章将涵盖以下主题：
- en: Catching signals
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获信号
- en: Running child processes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Go应用程序中运行子进程
- en: Processing command-line arguments
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理命令行参数
- en: Catching signals
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 捕获信号
- en: Before we go in-depth into catching signals, let's understand what signals are
    and how you can use them. Signals are a limited form of inter-process communication
    and are typically used in Unix and Unix-like operating systems. A signal is an
    asynchronous notification sent to a specific threat in the same process or another
    target process to notify it of an event occurrence. You can catch signals for
    various reasons; for instance, you can catch a termination signal made to your
    process from another process to perform some termination cleanup operation in
    your application. When it comes to Go, Go signal notification works by sending
    `os.signal` values on our channel. Now, let's proceed and see what it looks like
    in our Go application.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入了解如何捕获信号之前，让我们先了解一下信号是什么，以及你如何使用它们。信号是一种有限的进程间通信形式，通常用于Unix和类Unix操作系统。信号是一种异步通知，发送给同一进程中的特定线程或另一个目标进程，通知它发生了某个事件。你可以捕获信号的原因有很多；例如，你可以捕获来自另一个进程的终止信号，以执行一些终止清理操作。在Go中，Go信号通知通过在我们的通道上发送`os.signal`值来工作。现在，让我们继续看看在我们的Go应用程序中是什么样子。
- en: 'First of all, we will create a new channel called signals and use `os.signal`
    here. If you want to catch more than one signal, you can use a buffered channel
    and type 3 or 4 as the integer. To catch only one signal at a time, we can type
    1, or you can just pass that and the default will be 1 automatically. We will
    also need some other channel to notify that we are done with the signal processing
    so that we can terminate our application or carry out other operations. In our
    `signal` package, we have a method called `Notify()`, so let''s go ahead and see
    the documentation that says that *Notify causes package signals to relay incoming
    signals to channel*. So, Go will automatically listen to signals and relate those
    signals to this channel that we''re going to provide as its first argument. Now,
    check the following code:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个名为signals的新通道，并在这里使用`os.signal`。如果你想捕获多个信号，你可以使用一个带缓冲的通道，并将3或4作为整数类型。要一次只捕获一个信号，我们可以输入1，或者你可以只传递这个，那么默认值将自动为1。我们还需要一些其他通道来通知我们已经完成了信号处理，这样我们就可以终止我们的应用程序或执行其他操作。在我们的`signal`包中，有一个名为`Notify()`的方法，所以让我们继续看看文档，它说*Notify会导致包信号将传入的信号中继到通道*。因此，Go将自动监听信号，并将这些信号关联到我们将作为其第一个参数提供的通道上。现在，检查以下代码：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There are parameters to filter which signals you want to listen to, namely,
    `syscall.SIGINT` and `syscall.SIGTERM`. Furthermore, we will create a Go routine
    that will simply listen to this signal and perform an operation. Furthermore,
    we are going to read the value and write the content of the signal to the console.
    We will add a `print` statement stating `Signal captured and processed...`. In
    addition, `done <- true` will help us with the processing of the signal. Finally,
    we will type the `print` statement `Waiting for signal` and then we are done with
    our signal capturing and processing. Let''s proceed and run the code to obtain
    the output. We are going to run the `main.go` application now, and it''ll print
    `Waiting for signal`:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有参数可以过滤你想要监听的信号，即`syscall.SIGINT`和`syscall.SIGTERM`。此外，我们将创建一个Go例程，简单地监听这个信号并执行一个操作。此外，我们将读取这个值并将信号的内容写入控制台。我们将添加一个`print`语句，说明`信号已捕获并处理...`。此外，`done
    <- true`将帮助我们处理信号。最后，我们将输入`print`语句`等待信号`，然后我们完成了信号的捕获和处理。让我们继续运行代码以获得输出。我们现在将运行`main.go`应用程序，它将打印`等待信号`：
- en: '![](img/0912732c-aef3-4fe4-be62-f53299e646da.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0912732c-aef3-4fe4-be62-f53299e646da.png)'
- en: 'Now, we can send a signal to close the application using the *Ctrl* + *C* command,
    and, as you can see in the following screenshot, an interruption occurs. Our interruption
    is captured and processed and now we exit the application, which can also be seen
    in the following screenshot:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以发送一个信号来关闭应用程序，使用*Ctrl* + *C*命令，正如你在下面的截图中所看到的，发生了中断。我们的中断被捕获并处理，现在我们退出应用程序，这也可以在下面的截图中看到：
- en: '![](img/1464852b-0859-47f3-b5a0-24ec0bcda1cc.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1464852b-0859-47f3-b5a0-24ec0bcda1cc.png)'
- en: This is how you can simply capture processes and use signals in your Go application.
    In our next section, we're going to see how to run child processes from a Go application.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你可以简单地捕获进程并在你的Go应用程序中使用信号的方法。在下一节中，我们将看到如何从Go应用程序中运行子进程。
- en: Running child processes
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行子进程
- en: In this video, we're going to see how to run child processes within your application.
    In our application, we will run a command called `ls` (in Linux) and `dir` (in
    Windows). The `ls` and `dir` command is an application that simply lists all the
    files within a given directory. Thus, from our current directory, it will give
    us `hello.txt` and `main.go` files. We are going to run this `ls` utility app
    within our application. So, the first thing we have to do is to use the `exec`
    package, which provides commands. We are going to use the `ls` command and not
    pass any argument right now. This will return the command itself. You will find
    two functions; one is `start` and the other one is `run`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个视频中，我们将看到如何在应用程序中运行子进程。在我们的应用程序中，我们将运行一个名为`ls`（在Linux中）和`dir`（在Windows中）的命令。`ls`和`dir`命令是一个简单地列出给定目录中所有文件的应用程序。因此，从我们当前的目录中，它将给我们返回`hello.txt`和`main.go`文件。我们将在我们的应用程序中运行这个`ls`实用程序应用。因此，我们首先要做的是使用`exec`包，它提供了命令。我们将使用`ls`命令，现在不传递任何参数。这将返回命令本身。你会发现两个函数；一个是`start`，另一个是`run`。
- en: The difference between `start` and `r` is, if you look at the documentation,
    you'll see that `run` starts the specified command and waits for it to complete.
    Based on your requirements, you can choose `start` or `run`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: “start”和“r”的区别在于，如果您查看文档，您会发现“run”启动指定的命令并等待其完成。根据您的要求，您可以选择“start”或“run”。
- en: 'We also have `PID`, which is the process ID, and we are going to output that
    to the console. So, let''s proceed and run the code. You can see the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有“PID”，即进程ID，并且我们将将其输出到控制台。因此，让我们继续运行代码。您会看到以下内容：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You will get the following output:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您将得到以下输出：
- en: '![](img/eb96b7d3-53e9-45ec-8a16-636df48002eb.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb96b7d3-53e9-45ec-8a16-636df48002eb.png)'
- en: 'As you can see, we get the process ID, but we don''t see the files yet that
    are within the directory. Now, let''s try `run`. We would want to read whatever
    comes from the `ls` command and then we''ll print it out to the console. We''re
    going to use `lsCommand.Output()`, which returns a byte array and an error, but
    we are going to ignore the error for now. Okay! Let''s check the as-described
    code now:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们得到了进程ID，但尚未看到目录中的文件。现在，让我们尝试“run”。我们希望读取来自“ls”命令的任何内容，然后将其打印到控制台上。我们将使用“lsCommand.Output（）”，它返回一个字节数组和一个错误，但我们现在将忽略错误。好了！现在让我们检查上述代码：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We will also clear the terminal and then check the output:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将清除终端，然后检查输出：
- en: '![](img/a05fed55-3db4-4954-b005-49f51cade729.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a05fed55-3db4-4954-b005-49f51cade729.png)'
- en: As you can see, it gave us the two filenames and also the process ID. That's
    how you can simply run a process from within your Go application. Of course there
    are more ways to this. You can run other types of process, such as Google Chrome
    or Firefox, or another application that you've developed. Thus, it is a pretty
    powerful tool that you may want to use when you need to start a process from within
    your application. In our next section, we're going to see how we can process command-line
    arguments.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，它给了我们两个文件名和进程ID。这就是您可以简单地从Go应用程序中运行进程的方法。当然，还有更多的方法。您可以运行其他类型的进程，例如Google
    Chrome或Firefox，或者您开发的另一个应用程序。因此，当您需要从应用程序内部启动进程时，这是一个非常强大的工具。在下一节中，我们将看到如何处理命令行参数。
- en: Processing command-line arguments
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理命令行参数
- en: In this section, we're going to see how to process command-line arguments. A
    typical example of a command-line argument is `ls -a`. Here, `a` is a command-line
    argument that is passed to our last command, and `ls` is a program located in
    the operating system. Based on the arguments that are passed to the `ls` command,
    it behaves differently.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何处理命令行参数。命令行参数的典型示例是“ls -a”。在这里，“a”是传递给我们最后一个命令的命令行参数，“ls”是操作系统中的一个程序。根据传递给“ls”命令的参数，它的行为会有所不同。
- en: 'For instance, if we type `ls`, it will show us all the visible files. If we
    type `ls -a`, then it shows everything under that directory, including invisible
    items as well, which can be seen in the following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们键入“ls”，它将显示所有可见文件。如果我们键入“ls -a”，那么它将显示该目录下的所有内容，包括不可见项目，这可以在以下截图中看到：
- en: '![](img/e35aa49a-a983-4e9e-937a-2c45ee281411.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e35aa49a-a983-4e9e-937a-2c45ee281411.png)'
- en: 'So, we''re going to do the same thing to our program. You can use `os.Args`
    to read your arguments that are passed to your application. We are going to read
    and write these arguments to the console and see how it looks after we passed
    some arguments to our application. We will have to clear our terminal first and
    type `go run main.go`. Since, initially, we are not going to pass any argument,
    we can expect to see just one argument and that is the path of our executable.
    However, since we use `go run`, it will just create a temporary executable file
    and run it for us, hence, that''s the `temp` location:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将对我们的程序执行相同的操作。您可以使用“os.Args”来读取传递给应用程序的参数。我们将读取并将这些参数写入控制台，然后查看在我们向应用程序传递一些参数后的外观。我们首先需要清除我们的终端并输入“go
    run main.go”。由于最初我们不会传递任何参数，因此我们可以期望只看到一个参数，那就是我们可执行文件的路径。但是，由于我们使用“go run”，它将为我们创建一个临时可执行文件并运行它，因此那是“temp”位置：
- en: '![](img/89961188-ade2-488f-a20b-04ac43867414.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/89961188-ade2-488f-a20b-04ac43867414.png)'
- en: 'If we type `go run main.go -someArgument`, we will get the second item, and
    that''s `- someArgument`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们键入“go run main.go -someArgument”，我们将得到第二个项目，即“- someArgument”：
- en: '![](img/3ad043dd-4f1c-4f88-99c4-c5f56bf5da15.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ad043dd-4f1c-4f88-99c4-c5f56bf5da15.png)'
- en: 'If we don''t care about the first argument, we can use `realArgs`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不关心第一个参数，我们可以使用“realArgs”：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You will get the following output:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您将得到以下输出：
- en: '![](img/11f0f182-4278-4a29-b500-9675fb734e87.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/11f0f182-4278-4a29-b500-9675fb734e87.png)'
- en: 'Let''s go ahead and check a real-world example. Let''s assume that we only
    expect one argument that is passed. Check the following code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续检查一个真实的例子。假设我们只期望传递一个参数。检查以下代码：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see in the preceding code, we've typed `realArgs[0] == "a"`, which
    will run a function called `writeHelloWorld()`; if it's `realArgs[0] == "b"`,
    then it will run `writeHelloMars()` and, for anything that is a default, we'll
    print a warning, `Please pass a valid argument`. Now, we will add the `writeHelloWorld()` and
    `writeHelloMars()` functions. Furthermore, we're going to use a built-in function
    to get the length of our `realArgs` and, if it's `0`, we're going to print `Please
    pass an argument`. After that is done, we will need to add a `return` statement
    and exit.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的代码中所看到的，我们已经输入了“realArgs[0] == "a"”，这将运行一个名为“writeHelloWorld（）”的函数；如果是“realArgs[0]
    == "b"”，那么它将运行“writeHelloMars（）”，对于任何默认情况，我们将打印一个警告，“请传递有效的参数”。现在，我们将添加“writeHelloWorld（）”和“writeHelloMars（）”函数。此外，我们将使用内置函数来获取我们的“realArgs”的长度，如果是“0”，我们将打印“请传递参数”。完成后，我们需要添加一个“return”语句并退出。
- en: 'On running the code, you will get the following output:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码后，您将得到以下输出：
- en: '![](img/450e0c02-df4b-45b7-a076-a604d5590583.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/450e0c02-df4b-45b7-a076-a604d5590583.png)'
- en: 'As you can see, we get our first message. If we type `go run main.go a`, we
    get `Hello, World` printed on the console, as shown in the following screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们收到了我们的第一条消息。如果我们输入 `go run main.go a`，我们会在控制台上看到 `Hello, World` 的输出，如下面的截图所示：
- en: '![](img/c1c21852-4c85-4653-8698-8738c4979892.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c1c21852-4c85-4653-8698-8738c4979892.png)'
- en: 'If we type `go run main.go b`, we get `Hello, Mars` printed on the console,
    as shown in the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们输入 `go run main.go b`，我们会在控制台上看到 `Hello, Mars` 的输出，如下面的截图所示：
- en: '![](img/21173ecf-0784-4eba-bd53-f1c2d1239970.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/21173ecf-0784-4eba-bd53-f1c2d1239970.png)'
- en: That is simply how you can execute command-line argument processing in your
    Go application. This concludes our chapter.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你如何在Go应用程序中执行命令行参数处理的方法。这就结束了我们的章节。
- en: Summary
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about catching signals, running child processes,
    and processing command-line arguments. In the next chapter, you will learn how
    to download web pages and files from the internet. You will also see how to create
    files and web servers, as well as handle HTTP request and responses.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学会了捕获信号、运行子进程和处理命令行参数。在下一章中，你将学习如何从互联网上下载网页和文件。你还将看到如何创建文件和Web服务器，以及处理HTTP请求和响应。
