- en: Web Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web编程
- en: 'In this chapter, we''re going to see effective recipes that will involve interactions
    with the internet, such as downloading a web page, creating our own sample web
    servers, and handling HTTP requests. The following topics will be covered in this
    chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将看到一些有效的配方，这些配方将涉及与互联网的交互，比如下载网页，创建我们自己的示例网页服务器，以及处理HTTP请求。本章将涵盖以下主题：
- en: Downloading a web page from the internet
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从互联网下载网页
- en: Downloading files from the internet
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从互联网下载文件
- en: Creating a simple web server
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的网页服务器
- en: Creating a simple file server
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的文件服务器
- en: Downloading a web page from the internet
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从互联网下载网页
- en: Let's start with how to download a web page from the internet. We are going
    to start with defining our URL, which will be `golang.org`, and we're going to
    use the `net/http` package to get the content of this URL. This will return two
    things: `response` and `error`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从如何从互联网下载网页开始。我们将从定义我们的URL开始，它将是`golang.org`，然后我们将使用`net/http`包来获取此URL的内容。这将返回两个东西：`response`和`error`。
- en: 'If you quickly look at the documentation here, you see that it issues a `get`
    request to specify the URL and it also returns some of the HTTP code based on
    the response:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您快速查看这里的文档，您会发现它发出了一个`get`请求来指定URL，并且还根据响应返回了一些HTTP代码：
- en: '![](img/d909cb08-295c-439b-af79-f3866d0cb9ab.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d909cb08-295c-439b-af79-f3866d0cb9ab.png)'
- en: 'Check the following code:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 检查以下代码：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If an `err` happens, we''re going to call `panic`, and hence we type `panic
    (err)`, in which we provide `err` as its parameter. When everything is done, we
    will have to close the body. Let''s proceed and run this code in our terminal
    to get the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发生错误，我们将调用`panic`，因此我们输入`panic(err)`，其中我们将`err`作为其参数。当一切都完成时，我们将不得不关闭主体。让我们继续在终端中运行此代码，以获得以下结果：
- en: '![](img/e8a36631-cf93-440a-8db9-b78e26e097f9.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e8a36631-cf93-440a-8db9-b78e26e097f9.png)'
- en: 'As you can, it is a byte array and we''re going to change it to `string`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，它是一个字节数组，我们将把它改为`string`：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If we now run the code, we obtain the following output:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在运行代码，我们将获得以下输出：
- en: '![](img/c6ab87be-0d78-4cac-8e38-616190c03278.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c6ab87be-0d78-4cac-8e38-616190c03278.png)'
- en: Now we have this HTML source code printing out to our console, and that is how
    you can simply download a web page from the internet using Go. In the next section,
    we're going to see how to download files from the internet.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在控制台上打印出了这个HTML源代码，这就是您可以简单地使用Go从互联网下载网页的方法。在下一节中，我们将看到如何从互联网下载文件。
- en: Downloading files from the internet
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从互联网下载文件
- en: 'In this section, we are going to see how to download files from the internet.
    For this, we are going to take an example of downloading an image. We are going
    to type the URL of the image, which the logo of Go. Check the following code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何从互联网下载文件。为此，我们将以下载图像为例。我们将输入图像的URL，即Go的标志。检查以下代码：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, we've used the `http.Get()` method here. If our `err` is not
    `nil`, we've typed `panic(err)` and we are going to exit the `defer response.Body.Close()`
    function. Before our function exits, we're going to close the body of the `out`
    response. So, the first thing we have to do is create a new file so that we can
    copy the content of the image to the file. If the error is not `nil` again, we're
    going to panic and will be using `io.Copy()`. We're just going to write that image
    downloading to the console is successful.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们在这里使用了`http.Get()`方法。如果我们的`err`不是`nil`，我们会输入`panic(err)`，然后退出`defer response.Body.Close()`函数。在我们的函数退出之前，我们将关闭`out`响应的主体。因此，我们首先要做的是创建一个新文件，以便我们可以将图像的内容复制到文件中。如果错误再次不是`nil`，我们将会发生panic，并且将使用`io.Copy()`。我们将简单地写入图像下载成功到控制台。
- en: 'Let''s proceed and run the code to check the output:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续运行代码来检查输出：
- en: '![](img/94973b74-b647-4d5c-86f1-caf0685edd5e.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/94973b74-b647-4d5c-86f1-caf0685edd5e.png)'
- en: Voilà! The download is successful. That's how you can download images or any
    type of files from the internet using Golang. In our next section, we're going
    to see how to create a simple web server.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！下载成功了。这就是您可以使用Golang从互联网下载图像或任何类型的文件的方法。在下一节中，我们将看到如何创建一个简单的网页服务器。
- en: Creating a simple web server
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个简单的网页服务器
- en: 'In this section, we''re going to see how to create a simple web server in Go.
    It is really easy to create a simple web server in Go due to the built-in API.
    To begin, we are going to use the `net/http` package. A `net/http` package has
    the `HandleFunc()` method, which means that it will accept two things. The first
    is the path of the URL, and the second is the function that you want to handle
    incoming requests with. Check the following code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何在Go中创建一个简单的网页服务器。由于内置的API，使用Go创建一个简单的网页服务器非常容易。首先，我们将使用`net/http`包。`net/http`包有`HandleFunc()`方法，这意味着它将接受两个参数。第一个是URL的路径，第二个是您想要处理传入请求的函数。检查以下代码：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As long as your method signature satisfies the `func sayHello(w http.ResponseWriter,
    r *http.Request){}` type of method, it will be accepted by our `HandleFunc()`.
    We will use `sayHello` as our function and it''ll return two things, firstly,
    `http.ResponseWriter`, while the second thing is the request itself as the pointer. Since
    it''s going to be a hello server, we''re just going to write some data back to
    our response and, for that, we will be using our response writer. Since we have
    to listen to a specific port, we are going to use `http.ListenAndServe.` Moreover,
    we have used `5050`; you can choose any port as long as it is available. We have
    also added `nil` to the function, which returns an error if something unexpected
    happens, and, if the error is not `nil`, we''re going to panic. So let''s go ahead
    and run the code and try to access the path using our browser. We will have to
    run our `main.go` file first and Allow it so that we can access it:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 只要您的方法签名满足`func sayHello(w http.ResponseWriter, r *http.Request){}`类型的方法，它将被我们的`HandleFunc()`接受。我们将使用`sayHello`作为我们的函数，并且它将返回两件事，首先是`http.ResponseWriter`，而第二件事是请求本身作为指针。由于它将是一个hello服务器，我们只需将一些数据写回我们的响应，为此，我们将使用我们的响应写入器。由于我们必须监听特定端口，我们将使用`http.ListenAndServe`。此外，我们使用了`5050`；只要可用，您可以选择任何端口。我们还向函数添加了`nil`，如果发生意外情况，它将返回错误，如果错误不是`nil`，我们将会恐慌。所以让我们继续运行代码，并尝试使用浏览器访问路径。我们必须先运行我们的`main.go`文件并允许它，以便我们可以访问它：
- en: '![](img/eed6ce6f-ab3a-4e7e-a584-3c92e775e1f3.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eed6ce6f-ab3a-4e7e-a584-3c92e775e1f3.png)'
- en: 'Once this is done, we will have to open up a browser tab and try to access
    `http://localhost:5050/`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们将不得不打开一个浏览器选项卡，并尝试访问`http://localhost:5050/`：
- en: '![](img/dc59fd06-831f-46e1-a02a-adf91ec78b5d.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc59fd06-831f-46e1-a02a-adf91ec78b5d.png)'
- en: 'You will clearly see `Hello, world`. Now, let''s do one more quick sample with
    a query string or URL parameters. We are going to modify the method so we can
    decide which planet we want to say "hello" to. Check the following code:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您将清楚地看到`Hello, world`。现在，让我们用一个查询字符串或URL参数做一个更快的示例。我们将修改方法，以便我们可以决定要对哪个行星说“你好”。检查以下代码：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We have this URL that has a query function. We are going to read the query
    string, also known as a URL parameter called `planet`, and we''ll assign its value
    to a variable. We have to stop our current server and run it again. Upon opening
    `http://localhost:5050/`, we don''t see the name of any planet:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个具有查询功能的URL。我们将读取查询字符串，也称为名为`planet`的URL参数，并将其值分配给一个变量。我们必须停止当前服务器并再次运行它。打开`http://localhost:5050/`后，我们看不到任何行星的名称：
- en: '![](img/461d784c-b1ac-4d40-8e1a-0664640afe10.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/461d784c-b1ac-4d40-8e1a-0664640afe10.png)'
- en: 'Thus, you can change the URL to `http://localhost:5050/?planet=World` and try
    again:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您可以将URL更改为`http://localhost:5050/?planet=World`并重试：
- en: '![](img/67a486bf-1522-4966-b843-27ec0350b526.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67a486bf-1522-4966-b843-27ec0350b526.png)'
- en: 'Voilà! Now let''s try the same with the planet `Jupiter`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 瞧！现在让我们尝试使用`Jupiter`相同的方法：
- en: '![](img/27f1716d-9d3e-48be-b596-e38d5c0b9b67.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/27f1716d-9d3e-48be-b596-e38d5c0b9b67.png)'
- en: This is how we can quickly create your own web server in Go.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们如何快速在Go中创建自己的Web服务器。
- en: In our next section, we're going to see how to create a simple file server.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到如何创建一个简单的文件服务器。
- en: Creating a simple file server
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个简单的文件服务器
- en: 'In this section, we''re going to see how to create a simple file server. The
    main idea behind a file server is to serve static files, such as images, or CSS
    files, or JavaScript files, and, in our code, we''re going to see how to do this.
    Check the following code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何创建一个简单的文件服务器。文件服务器背后的主要思想是提供静态文件，例如图像、CSS文件或JavaScript文件，在我们的代码中，我们将看到如何做到这一点。检查以下代码：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see, we have used the HTTP handle, and this `Handle` is different
    from `handleFunc` and accepts a handler interface as a second parameter; the first
    parameter is `pattern`. We are going to use a special API called `FileServer`
    and it will work as a file server here; we will add a location (image directory,
    `./images`) in the server to serve the static files.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们已经使用了HTTP处理，而这个`Handle`与`handleFunc`不同，并接受处理程序接口作为第二个参数；第一个参数是`pattern`。我们将使用一个名为`FileServer`的特殊API，在这里它将作为文件服务器工作；我们将在服务器中添加一个位置（图像目录，`./images`）来提供静态文件。
- en: 'So, what''s going to happen is that when the request hits the route path, a
    file server will serve the requests and it will give static files under the location `http.Dir("./images"`).
    We are going to use `http.ListenAndServe(":5050", nil)`, as in the previous section.
    Furthermore, as mentioned in the previous section, we are going to run the server,
    allow permissions, and type `localhost:5050` in the browser:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当请求到达路由路径时，文件服务器将服务请求，并且它将在位置`http.Dir("./images")`下提供静态文件。我们将使用`http.ListenAndServe(":5050",
    nil)`，就像在上一节中一样。此外，如前一节所述，我们将运行服务器，允许权限，并在浏览器中键入`localhost:5050`：
- en: '![](img/9c575d28-4f9a-40a2-9864-88e9dfd401fa.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9c575d28-4f9a-40a2-9864-88e9dfd401fa.png)'
- en: 'You can see the list of our files on the location and, if we click gopher_aviator.png,
    it gives us the image from that location:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到我们位置上的文件列表，如果我们单击gopher_aviator.png，它会给我们该位置的图像：
- en: '![](img/c22b7ec3-826f-4255-a72c-9fcfb0f2b318.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c22b7ec3-826f-4255-a72c-9fcfb0f2b318.png)'
- en: 'If we go back and click the other one (gopher.png), it''ll display the following
    image:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们返回并单击另一个（gopher.png），它将显示以下图像：
- en: '![](img/c3328254-7f79-4b7a-bcab-d50ddc07141b.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c3328254-7f79-4b7a-bcab-d50ddc07141b.png)'
- en: Alternatively, you can comment out `http.Handle("/", http.FileServer(http.Dir("./images")))` from
    the preceding code and replace `nil` with the location. If you follow the same
    procedure, as we did previously, and check the browser, it will still give us
    those two images properly, and this is how you can create a simple file server
    in Go.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以注释掉前面代码中的`http.Handle("/", http.FileServer(http.Dir("./images")))`，并将`nil`替换为位置。如果您按照我们之前所做的相同步骤，并检查浏览器，它仍然会正确地给我们这两个图像，这就是您如何在Go中创建一个简单的文件服务器。
- en: Summary
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about downloading a web page from the internet,
    downloading files from the internet, creating a simple web server, and creating
    a simple file server. The next chapter will take you through recipes explaining
    how to read, update, delete, and create data on relational databases with Go.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何从互联网上下载网页，如何从互联网上下载文件，如何创建一个简单的Web服务器，以及如何创建一个简单的文件服务器。下一章将带您了解如何使用Go语言在关系型数据库上读取、更新、删除和创建数据的方法。
