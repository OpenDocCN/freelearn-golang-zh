- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: '*Hands-On High Performance with Go* is a complete resource with proven methodologies
    and techniques to help you diagnose and fix performance problems in your Go applications.
    The book starts with an introduction to the concepts of performance, where you
    will learn about the ideology behind the performance of Go. Next, you will learn
    how to implement Go data structures and algorithms effectively and explore data
    manipulation and organization in order to write programs for scalable software.
    Channels and goroutines for parallelism and concurrency in order to write high-performance
    codes for distributed systems are also a core part of this book. Moving on, you''ll
    learn how to manage memory effectively. You''ll explore the **Compute Unified
    Device Architecture** (**CUDA**) driver **application programming interface**
    (**API**), use containers to build Go code, and work with the Go build cache for
    faster compilation. You''ll also get a clear picture of profiling and tracing
    Go code to detect bottlenecks in your system. At the end of the book, you''ll
    evaluate clusters and job queues for performance optimization and monitor the
    application for performance regression.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 《Go高性能实战》是一个完整的资源，具有经过验证的方法和技术，可帮助您诊断和解决Go应用程序中的性能问题。本书从性能概念入手，您将了解Go性能背后的思想。接下来，您将学习如何有效地实现Go数据结构和算法，并探索数据操作和组织，以便编写可扩展软件的程序。通道和goroutines用于并行和并发，以编写分布式系统的高性能代码也是本书的核心部分。接着，您将学习如何有效地管理内存。您将探索**CUDA**驱动**API**，使用容器构建Go代码，并利用Go构建缓存加快编译速度。您还将清楚地了解如何对Go代码进行性能分析和跟踪，以检测系统中的瓶颈。最后，您将评估集群和作业队列以进行性能优化，并监视应用程序以检测性能回归。
- en: Who this book is for
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书适合对象
- en: This Go book is a must for developers and professionals who have an intermediate-to-advanced
    understanding of Go programming and are interested in improving their speed of
    code execution.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这本Go书对于具有中级到高级Go编程理解的开发人员和专业人士来说是必不可少的，他们有兴趣提高代码执行速度。
- en: What this book covers
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书涵盖内容
- en: '[Chapter 1](27d9fd37-672c-499b-88b9-89b9990117ed.xhtml), *Introduction to Performance
    in Go*, will discuss why performance in computer science is important. You will
    also learn why performance is important in the Go language.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 第1章《Go性能简介》将讨论计算机科学中性能为何重要。您还将了解为什么Go语言中性能很重要。
- en: '[Chapter 2](7bacdf42-9455-4499-a70a-c50c9a6c4e26.xhtml), *Data Structures and
    Algorithms*, deals with data structures and algorithms, which are the basic units
    of building software, notably complex performance software. Understanding them
    will help you to think about how to most impact fully organize and manipulate
    data in order to write effective, performant software. Also, iterators and generators
    are essential to Go. This chapter will include explanations of different data
    structures and algorithms, as well as how their big O notation is impacted.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 第2章《数据结构和算法》涉及数据结构和算法，它们是构建软件的基本单元，尤其是复杂性能软件。理解它们将帮助您思考如何最有效地组织和操作数据，以编写有效的、高性能的软件。此外，迭代器和生成器对于Go是必不可少的。本章将包括不同数据结构和算法的解释，以及它们的大O符号是如何受影响的。
- en: '[Chapter 3](61b73482-0431-4b8f-a069-d647ac1c1b87.xhtml), *Understanding Concurrency*,
    will talk about utilizing channels and goroutines for parallelism and concurrency,
    which are idiomatic in Go and are the best ways to write high-performance code
    in your system. Being able to understand when and where to use each of these design
    patterns is essential to writing performant Go.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 第3章《理解并发》将讨论利用通道和goroutines进行并行和并发，这在Go中是惯用的，也是在系统中编写高性能代码的最佳方式。能够理解何时何地使用这些设计模式对于编写高性能的Go是至关重要的。
- en: '[Chapter 4](ce982065-5176-4ca4-9346-8bae29d1ccee.xhtml), *STL Algorithm Equivalents
    in Go*, discusses how many programmers coming from other high-performance languages,
    namely C++, understand the concept of the standard template library, which provides
    common programming data structures and functions in a generalized library in order
    to rapidly iterate and write performant code at scale.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章《Go中的STL算法等价物》讨论了许多来自其他高性能语言（尤其是C++）的程序员如何理解标准模板库的概念，该库提供了常见的编程数据结构和函数，以便快速迭代和编写大规模的高性能代码。
- en: '[Chapter 5](46e7d59b-5fd8-45c7-92ab-885e6b5fcbf3.xhtml), *Matrix and Vector
    Computation in Go*, deals with matrix and vector computations in general. Matrices
    are important in graphics manipulation and AI, namely image recognition. Vectors
    can hold a myriad of objects in dynamic arrays. They use contiguous storage and
    can be manipulated to accommodate growth.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章《Go中的矩阵和向量计算》涉及一般的矩阵和向量计算。矩阵在图形处理和人工智能中很重要，特别是图像识别。向量可以在动态数组中保存大量对象。它们使用连续存储，并可以被操作以适应增长。
- en: '[Chapter 6](3ce4cee8-eaaa-4a6d-b817-4fdd3899f973.xhtml), *Composing Readable
    Go Code*, focuses on the importance of writing readable Go code. Understanding
    the patterns and idioms discussed in this chapter will help you to write Go code
    that is more easily readable and operable between teams. Also, being able to write
    idiomatic Go will help raise the level of your code quality and help your project
    maintain velocity.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 第6章《编写可读的Go代码》着重于编写可读的Go代码的重要性。理解本章讨论的模式和习惯用法将帮助您编写更易读、更易操作的Go代码。此外，能够编写习惯用法的Go将有助于提高代码质量，并帮助项目保持速度。
- en: '[Chapter 7](229edf23-22b1-4fe9-b0d6-4cb3801da7aa.xhtml), *Template Programming
    in Go*, focuses on template programming in Go. Metaprogramming allows the end
    user to write Go programs that produce, manipulate, and run Go programs. Go has
    clear, static dependencies, which helps with metaprogramming. It has shortcomings
    that other languages don''t have in metaprogramming, such as `__getattr__` in
    Python, but we can still generate Go code and compile the resulting code if it''s
    deemed prudent.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第7章《Go中的模板编程》专注于Go中的模板编程。元编程允许最终用户编写生成、操作和运行Go程序的Go程序。Go具有清晰的静态依赖关系，这有助于元编程。它在元编程方面存在其他语言所没有的缺点，比如Python中的`__getattr__`，但如果被认为明智，我们仍然可以生成Go代码并编译生成的代码。
- en: '[Chapter 8](8b95d93a-6bc1-4307-bd75-0e317898321a.xhtml), *Memory Management
    in Go*, discusses how memory management is paramount to system performance. Being
    able to utilize a computer''s memory footprint to the fullest allows you to keep
    highly functioning programs in memory so that you don''t often have to take the
    large performance hit of swapping to disk. Being able to manage memory effectively
    is a core tenet of writing performant Go code.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第8章《Go中的内存管理》讨论了内存管理对系统性能至关重要。能够充分利用计算机的内存占用量使您能够将高性能程序保留在内存中，这样您就不必经常承受切换到磁盘的巨大性能损失。有效地管理内存是编写高性能Go代码的核心原则。
- en: '[Chapter 9](6e715e38-3db3-4f02-9c6d-f5da8e35c2e3.xhtml), *GPU Parallelization
    in Go*, focuses on GPU accelerated programming, which is becoming more and more
    important in today''s high-performance computing stacks.  We can use the CUDA
    driver API for GPU acceleration.  This is commonly used in topics such as deep
    learning algorithms.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章《Go中的GPU并行化》专注于GPU加速编程，在当今高性能计算堆栈中变得越来越重要。我们可以使用CUDA驱动程序API进行GPU加速。这在诸如深度学习算法等主题中通常被使用。
- en: '[Chapter 10](6a020af6-5b7c-48af-95a7-cf52014ae1ca.xhtml), *Compile Time Evaluations
    in Go*, discusses minimizing dependencies and each file declaring its own dependencies
    while writing a Go program. Regular syntax and module support also help to improve
    compile times, as well as interface satisfaction. These things help to make Go
    compilation quicker, alongside using containers for building Go code and utilizing
    the Go build cache.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第10章《Go中的编译时评估》讨论了在编写Go程序时最小化依赖关系以及每个文件声明自己的依赖关系。常规语法和模块支持也有助于提高编译时间，以及接口满足。这些都有助于加快Go编译速度，同时利用容器构建Go代码并利用Go构建缓存。
- en: '[Chapter 11](c20222c4-26c2-4ea3-837b-5c55227b22b8.xhtml), *Building and Deploying
    Go Code*, focuses on how to deploy new Go code. To elaborate further, this chapter
    explains how we can push this out to one or multiple places in order to test against
    different environments. Doing this will allow us to push the envelope of the amount
    of throughput that we have for our system.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第11章《构建和部署Go代码》着重介绍了如何部署新的Go代码。更进一步地，本章解释了我们如何将其推送到一个或多个地方，以便针对不同环境进行测试。这样做将使我们能够推动系统的吞吐量极限。
- en: '[Chapter 12](3ad3f76b-80c3-4992-8201-c025ece696b7.xhtml), *Profiling Go Code*,
    focuses on profiling Go code, which is one of the best ways to determine where
    bottlenecks live within your Go functions. Performing this profiling will help
    you to deduce where you can make improvements within your function and how much
    time individual pieces take within your function call with respect to the overall
    system.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第12章《Go代码性能分析》专注于对Go代码进行性能分析，这是确定Go函数中瓶颈所在的最佳方法之一。进行这种性能分析将帮助您推断在函数内部可以进行哪些改进，以及在整个系统中个别部分在函数调用中所占用的时间。
- en: '[Chapter 13](ec12b9e7-c528-45c2-b0b8-dea297659b3e.xhtml), *Tracing Go Code*,
    deals with a fantastic way to check interoperability between functions and services
    within your Go program, also known as tracing. Tracing allows you to pass context
    through your system and evaluate where you are being held up. Whether it''s a
    third-party API call, a slow messaging queue, or an *O(n²)* function, tracing
    will help you to find where this bottleneck resides.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第13章《跟踪Go代码》介绍了一种检查Go程序中函数和服务之间互操作性的绝妙方法，也称为跟踪。跟踪允许您通过系统传递上下文并评估您所卡住的位置。无论是第三方API调用、缓慢的消息队列还是O(n²)函数，跟踪都将帮助您找到瓶颈所在。
- en: '[Chapter 14](74c0cef8-9628-4e31-abc3-9bd9aa52fafa.xhtml), *Clusters and Job
    Queues*, focuses on the importance of clustering and job queues in Go as good
    ways to get distributed systems to work synchronously and deliver a consistent
    message. Distributed computing is difficult, and it becomes very important to
    watch for potential performance optimizations within both clustering and job queues.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第14章《集群和作业队列》着重介绍了集群和作业队列在Go中的重要性，作为使分布式系统同步工作并传递一致消息的良好方式。分布式计算很困难，因此在集群和作业队列中寻找潜在的性能优化变得非常重要。
- en: '[Chapter 15](88e04ed3-8f84-43a9-ac4a-bf9d26b88e68.xhtml), *Comparing Code Quality
    Across Versions*, deals with what you should do after you have written, debugged,
    profiled, and monitored Go code that is monitoring your application in the long
    term for performance regressions. Adding new features to your code is fruitless
    if you can''t continue to deliver a level of performance that other systems in
    your infrastructure depend on.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第15章《跨版本比较代码质量》讨论了在编写、调试、分析和监控长期监控应用程序性能的Go代码之后，您应该做些什么。如果您无法继续提供基础架构中其他系统所依赖的性能水平，那么向您的代码添加新功能是毫无意义的。
- en: To get the most out of this book
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为了充分利用本书
- en: This book is for Go professionals and developers seeking to execute their code
    faster, so an intermediate to advanced understanding of Go programming is necessary
    to make the most out of this book. The Go language has relatively minimal system
    requirements.  A modern computer with a modern operating system should support
    the Go runtime and its dependencies.  Go is used in many low power devices that
    have limited CPU, Memory, and I/O requirements.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本书适用于Go专业人士和开发人员，他们希望加快代码执行速度，因此需要具有中级到高级的Go编程理解才能充分利用本书。Go语言的系统要求相对较低。现代计算机和现代操作系统应该支持Go运行时及其依赖项。Go在许多低功耗设备上使用，这些设备具有有限的CPU、内存和I/O要求。
- en: You can see the requirements for the language listed at the following URL: [https://github.com/golang/go/wiki/MinimumRequirements](https://github.com/golang/go/wiki/MinimumRequirements).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下网址查看语言的要求：[https://github.com/golang/go/wiki/MinimumRequirements](https://github.com/golang/go/wiki/MinimumRequirements)。
- en: In this book I used Fedora Core Linux (version 29 during the time of writing
    this book) as the operating system.  Instructions on how to install the Fedora
    Workstation Linux distribution can be found on the Fedora page at the following
    URL: [https://getfedora.org/en/workstation/download/](https://getfedora.org/en/workstation/download/).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我使用Fedora Core Linux（在撰写本书时为第29版）作为操作系统。有关如何安装Fedora Workstation Linux发行版的说明，请访问以下网址：[https://getfedora.org/en/workstation/download/](https://getfedora.org/en/workstation/download/)。
- en: Docker is used for many of the examples in this book.  You can see the requirements
    listed for Docker at the following URL: [https://docs.docker.com/install/](https://docs.docker.com/install/).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Docker在本书的许多示例中使用。您可以在以下网址查看Docker的要求：[https://docs.docker.com/install/](https://docs.docker.com/install/)。
- en: 'In [Chapter 9](6e715e38-3db3-4f02-9c6d-f5da8e35c2e3.xhtml), *GPU Parallelization
    in Go*, we discuss GPU programming.  To perform the tasks of this chapter, you''ll
    need one of two things:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第9章](6e715e38-3db3-4f02-9c6d-f5da8e35c2e3.xhtml)中，《Go中的GPU并行化》，我们讨论了GPU编程。要执行本章的任务，您需要以下两种东西之一：
- en: A NVIDIA enabled GPU. I used a NVIDIA GeForce GTX 670 in my testing, with a
    Compute Capability of 3.0.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用NVIDIA的GPU。我在测试中使用了一款NVIDIA GeForce GTX 670，计算能力为3.0。
- en: A GPU enabled cloud instance.  Chapter 9 discusses a couple of different providers
    and methodologies for this.  GPUs on Compute Engine work for this. More up to
    date information on GPUs on Compute Engine can be found at the following URL: [https://cloud.google.com/compute/docs/gpus](https://cloud.google.com/compute/docs/gpus).
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用GPU的云实例。第9章讨论了几种不同的提供商和方法。Compute Engine上的GPU适用于此。有关Compute Engine上GPU的最新信息，请访问以下网址：[https://cloud.google.com/compute/docs/gpus](https://cloud.google.com/compute/docs/gpus)。
- en: After you read this book; I hope you'll be able to write more efficient Go code. 
    You'll hopefully be able to quantify and validate your efforts as well.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读本书后，希望您能够编写更高效的Go代码。您将有望能够量化和验证自己的努力。
- en: Download the example code files
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载示例代码文件
- en: You can download the example code files for this book from your account at [www.packt.com](http://www.packt.com).
    If you purchased this book elsewhere, you can visit [www.packtpub.com/support](https://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[www.packt.com](http://www.packt.com)的帐户中下载本书的示例代码文件。如果您在其他地方购买了本书，可以访问[www.packtpub.com/support](https://www.packtpub.com/support)注册，直接将文件发送到您的邮箱。
- en: 'You can download the code files by following these steps:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤下载代码文件：
- en: Log in or register at [www.packt.com](http://www.packt.com).
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录或注册[www.packt.com](http://www.packt.com)。
- en: Select the Support tab.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“支持”选项卡。
- en: Click on Code Downloads.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“代码下载”。
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中输入书名，然后按照屏幕上的说明操作。
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 下载文件后，请确保您使用最新版本的解压缩或提取文件夹：
- en: WinRAR/7-Zip for Windows
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WinRAR/7-Zip适用于Windows
- en: Zipeg/iZip/UnRarX for Mac
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zipeg/iZip/UnRarX适用于Mac
- en: 7-Zip/PeaZip for Linux
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 7-Zip/PeaZip适用于Linux
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/bobstrecansky/HighPerformanceWithGo/](https://github.com/bobstrecansky/HighPerformanceWithGo/). In
    case there's an update to the code, it will be updated on the existing GitHub
    repository.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的代码包也托管在GitHub上，网址为[https://github.com/bobstrecansky/HighPerformanceWithGo/](https://github.com/bobstrecansky/HighPerformanceWithGo/)。如果代码有更新，将在现有的GitHub存储库上进行更新。
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还提供了来自我们丰富书籍和视频目录的其他代码包，可在**[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**上找到。快去看看吧！
- en: Code in Action
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实际代码
- en: Code in Action videos for this book can be viewed at [http://bit.ly/2QcfEJI](http://bit.ly/2QcfEJI).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的实际代码视频可在[http://bit.ly/2QcfEJI](http://bit.ly/2QcfEJI)上观看。
- en: Download the color images
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载彩色图片
- en: 'We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://static.packt-cdn.com/downloads/9781789805789_ColorImages.pdf](https://static.packt-cdn.com/downloads/9781789805789_ColorImages.pdf).'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还提供了一个PDF文件，其中包含本书中使用的屏幕截图/图表的彩色图片。您可以在此处下载：[https://static.packt-cdn.com/downloads/9781789805789_ColorImages.pdf](https://static.packt-cdn.com/downloads/9781789805789_ColorImages.pdf)。
- en: Conventions used
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用的约定
- en: There are a number of text conventions used throughout this book.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中使用了许多文本约定。
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    Here is an example: " The following code blocks will show the `Next()` incantation"'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`CodeInText`：表示文本中的代码字词、数据库表名、文件夹名、文件名、文件扩展名、路径名、虚拟URL、用户输入和Twitter句柄。例如："以下代码块将显示`Next()`咒语"'
- en: 'A block of code is set as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块设置如下：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望引起你对代码块的特定部分的注意时，相关的行或项目会以粗体显示：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Any command-line input or output is written as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 任何命令行输入或输出都是这样写的：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "The **reverse algorithm** takes a dataset and reverses the values
    of the set"'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**粗体**：表示一个新术语，一个重要的词，或者你在屏幕上看到的词。例如，菜单或对话框中的单词会以这种方式出现在文本中。这是一个例子：“**reverse
    algorithm**接受一个数据集，并颠倒集合的值”'
- en: Warnings or important notes appear like this.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 警告或重要提示会以这种方式出现。
- en: Tips and tricks appear like this.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 技巧和窍门会以这种方式出现。
