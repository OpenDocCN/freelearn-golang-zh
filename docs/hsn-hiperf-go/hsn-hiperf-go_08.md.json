["```go\ngo mod init github.com/bobstrecansky/HighPerformanceWithGo\ngo: creating new go.mod: module github.com/bobstrecansky/HighPerformanceWithGo\n```", "```go\npackage main\nimport \"github.com/gin-gonic/gin\"\nfunc main() {\n  server := gin.Default()\n  server.GET(\"/foo\", func(c *gin.Context) {\n    c.JSON(200, gin.H{\n      \"response\": \"bar\",\n    })\n  })\n  server.Run()\n}\n```", "```go\n#!/bin/bash\nFILES=$(/usr/bin/git diff --cached --name-only --diff-filter=dr | grep '\\.go$')\n[ -z \"$FILES\" ] && exit 0\nFORMAT=$(gofmt -l $FILES)\n[ -z \"$FORMAT\" ] && exit 0\n\necho >&2 \"gofmt should be used on your source code. Please execute:\"\n  for gofile in $FORMAT; do\n      echo >&2 \" gofmt -w $PWD/$gofile\"\n  done\n  exit 1\n```", "```go\ngit commit -m \"test\"\n//gofmt should be used on your source code. Please execute:\ngofmt -w /home/bob/go/example/badformat.go\n```", "```go\npackage main\nimport \"fmt\"\nfunc main() {\n    var tmp = []int{1, 2, 3}\n    b := tmp[1:len(tmp)]\n    fmt.Println(b)\n    for i, _ := range tmp {\n       fmt.Println(tmp[i])\n    }\n}\n```", "```go\npackage main\nimport \"fmt\"\nfunc main() {\n    var tmp = []int{1, 2, 3}\n    b := tmp[1:]\n    fmt.Println(b)\n    for i := range tmp {\n       fmt.Println(tmp[i]) \n    }\n}\n```", "```go\ntype example interface {\nfoo() int\nbar() float64\n}\n```", "```go\npackage main\nimport \"fmt\"\nfunc main() {\n    var x interface{}\n    x = \"hello Go\"\n    fmt.Printf(\"(%v, %T)\\n\", x, x)\n    x = 123\n    fmt.Printf(\"(%v, %T)\\n\", x, x)\n    x = true\n    fmt.Printf(\"(%v, %T)\\n\", x, x)\n}\n```", "```go\npackage main\nimport \"fmt\"\ntype User struct {\n    uid int\n    name string\n    email string\n    phone string\n}\n\nfunc (u User) displayEmail() {\n    fmt.Printf(\"User %d Email: %s\\n\", u.uid, u.email)\n}\n```", "```go\nfunc main() {\n    userExample := User{\n       uid: 1,\n       name: \"bob\",\n       email: \"bob@example.com\",\n       phone: \"123-456-7890\",\n    }\n\n    userExample.displayEmail()\n}\n```", "```go\npackage main \nimport \"fmt\"\n\ntype User struct {\n    uid int\n    name string\n    email string\n    phone string\n} \n\nfunc (u User) updateEmail(newEmail string) {\n    u.email = newEmail\n} \n\nfunc (u *User) updatePhone(newPhone string) {\n    u.phone = newPhone\n} \n```", "```go\nfunc main() {\n      userExample := User{ \n        uid: 1, \n        name: \"bob\",\n        email: \"bob@example.com\",\n        phone: \"123-456-7890\",\n    } \n```", "```go\nuserExample.updateEmail(\"bob.strecansky@example.com\") \n    (userExample).updatePhone(\"000-000-0000\")\n    fmt.Println(\"Updated User Email: \", userExample.email)\n    fmt.Println(\"Updated User Phone: \", userExample.phone)\n}     \n```", "```go\npackage main\nimport \"fmt\" \n\nfunc main() {\n    type Utensils struct {\n        fork string\n        spoon string\n        knife string\n    } \n\n    type Appliances struct {\n        stove string\n        dishwasher string\n        oven string\n    } \n```", "```go\n    type Kitchen struct {\n        Utensils\n        Appliances\n    } \n```", "```go\n    bobKitchen := new(Kitchen)\n    bobKitchen.Utensils.fork = \"3 prong\"\n    bobKitchen.Utensils.knife = \"dull\"\n    bobKitchen.Utensils.spoon = \"deep\"\n    bobKitchen.Appliances.stove = \"6 burner\"\n    bobKitchen.Appliances.dishwasher = \"3 rack\"\n    bobKitchen.Appliances.oven = \"self cleaning\"\n    fmt.Printf(\"%+v\\n\", bobKitchen) \n}                 \n```", "```go\nType foo int\nvar x int\nvar y foo\n```", "```go\npackage main\n\nimport (\n    \"fmt\"\n    \"reflect\"\n)\n\nfunc main() {\n    var foo string = \"Hi Go!\"\n    fooType := reflect.TypeOf(foo)\n    fmt.Println(\"Foo type: \", fooType)\n}\n```", "```go\npackage main\nimport (\n    \"fmt\"\n    \"reflect\"\n)\n\nfunc main() {\n    i := []string{\"foo\", \"bar\", \"baz\"}\n    ti := reflect.TypeOf(i)\n    fmt.Println(ti.Kind())\n}\n```", "```go\npackage main\nimport (\n    \"fmt\"\n    \"reflect\"\n)\n\nfunc main() {\n    example := \"foo\"\n    exampleVal := reflect.ValueOf(example)\n    fmt.Println(exampleVal)\n}\n```"]