["```go\npackage main\n\n/*\n\n #include <stdio.h>\n const char* hello_gophers() {\n    return \"Hello Gophers!\";\n }\n*/\n\nimport \"C\"\nimport \"fmt\"\nfunc main() {\n    fmt.Println(C.GoString(C.hello_gophers()))\n}\n```", "```go\npackage benchmark\n\n/*\n #include <stdio.h>\n const char* hello_gophers() {\n     return \"Hello Gophers!\";\n }\n*/\n\nimport \"C\"\nimport \"fmt\"\n\nfunc CgoPrint(n int) {\n    for i := 0; i < n; i++ {\n       fmt.Sprintf(C.GoString(C.hello_gophers()))\n    }\n}\n\nfunc GoPrint(n int) {\n    for i := 0; i < n; i++ {\n       fmt.Sprintf(\"Hello Gophers!\")\n    }\n}\n```", "```go\npackage benchmark\n\nimport \"testing\"\n\nfunc BenchmarkCPrint(b *testing.B) {\n    CgoPrint(b.N)\n}\n\nfunc BenchmarkGoPrint(b *testing.B) {\n    GoPrint(b.N)\n}\n```", "```go\nsudo dnf install kernel-devel-$(uname -r) kernel-headers-$(uname -r)\n```", "```go\nsudo dnf groupinstall \"Development Tools\"\n```", "```go\nwget http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_440.33.01_linux.run\n```", "```go\nsudo ./cuda_10.2.89_440.33.01_linux.run\n```", "```go\n./CUDA-Z-0.10.251-64bit.run\n```", "```go\ndistribution=$(. /etc/os-release;echo $ID$VERSION_ID)\ncurl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.repo | sudo tee /etc/yum.repos.d/nvidia-docker.repo\n```", "```go\nsudo yum install -y nvidia-container-toolkit\n```", "```go\nsudo systemctl restart docker\n```", "```go\nsetenforce 0 #as root\n```", "```go\ndocker run --gpus all tensorflow/tensorflow:latest-gpu nvidia-smi\n```", "```go\ncurl -O http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-repo-ubuntu1804_10.0.130-1_amd64.deb\n```", "```go\nsudo dpkg -i cuda-repo-ubuntu1804_10.0.130-1_amd64.deb\n```", "```go\nsudo apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub\n```", "```go\nsudo apt-get update && sudo apt-get install cuda\n```", "```go\nnvidia-smi\n```", "```go\nsudo apt-get remove docker docker-engine docker.io containerd runc\n```", "```go\nsudo apt-get update\n```", "```go\nsudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common\n```", "```go\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\nsudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n```", "```go\nsudo apt-get update\n```", "```go\nsudo apt-get install docker-ce docker-ce-cli containerd.io\n```", "```go\ndistribution=$(. /etc/os-release;echo $ID$VERSION_ID)\n```", "```go\ncurl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -\ncurl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list\n```", "```go\nsudo apt-get update && sudo apt-get install -y nvidia-container-toolkit\n```", "```go\n#!/bin/bash\n\n# Install the CUDA driver\ncurl -O http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-repo-ubuntu1804_10.0.130-1_amd64.deb\ndpkg -i cuda-repo-ubuntu1804_10.0.130-1_amd64.deb\napt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub\napt-get -y update && sudo apt-get -y install cuda\n```", "```go\n# Install Docker CE\napt-get remove docker docker-engine docker.io containerd runc\napt-get update\napt-get -y install apt-transport-https ca-certificates curl gnupg-agent software-properties-common\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\nadd-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\napt-get -y update\napt-get -y install docker-ce docker-ce-cli containerd.io\n```", "```go\n# Install nvidia-docker\ndistribution=$(. /etc/os-release;echo $ID$VERSION_ID)\ncurl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -\ncurl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list\napt-get -y update && sudo apt-get -y install nvidia-container-toolkit\nusermod -aG docker $USER\nsystemctl restart docker\n```", "```go\nsudo bash nvidia-cuda-gcp-setup.sh\n```", "```go\n#include <cstdlib>\n#include <iostream>\n\nconst int ELEMENTS = 1 << 20;\n```", "```go\n__global__ void multiply(int j, float * a, float * b, float * c) {\n\n  int index = threadIdx.x * blockDim.x + threadIdx.x;\n  int stride = blockDim.x * gridDim.x; \n\n  for (int i = index; i < j; i += stride)\n    c[i] = a[i] * b[i];\n}\n```", "```go\nextern \"C\" {\n\n  int cuda_multiply(void) {\n    float * a, * b, * c;\n    cudaMallocManaged( & a, ELEMENTS * sizeof(float));\n    cudaMallocManaged( & b, ELEMENTS * sizeof(float));\n    cudaMallocManaged( & c, ELEMENTS * sizeof(float));\n```", "```go\n    for (int i = 0; i < ELEMENTS; i++) {\n      a[i] = rand() % 10;\n      b[i] = rand() % 10;\n    }\n```", "```go\n    int blockSize = 256;\n    int numBlocks = (ELEMENTS + blockSize - 1) / blockSize;\n    multiply << < numBlocks, blockSize >>> (ELEMENTS, a, b, c);\n```", "```go\n    //for (int k = 0; k < ELEMENTS; k++) {\n      //std::cout << k << \":\" << a[k] << \"*\" << b[k] << \"=\" << c[k] << \"\\n\";\n    //}\n```", "```go\n    cudaFree(a);\n    cudaFree(b);\n    cudaFree(c);\n    return 0;\n  }\n}\n```", "```go\nint cuda_multiply(void);\n```", "```go\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n```", "```go\n    //#cgo CFLAGS: -I.\n    //#cgo LDFLAGS: -L. -lmultiply\n    //#cgo LDFLAGS: -lcudart\n    //#include <cuda_multiply.h>\n\n    import \"C\"\n    func main() {\n        fmt.Printf(\"Invoking cuda library...\\n\")\n        start := time.Now()\n        C.cuda_multiply()\n        elapsed := time.Since(start)\n        fmt.Println(\"\\nCuda Execution took\", elapsed)\n    }\n    ```", "```go\n    //target:\n        nvcc -o libmultiply.so --shared -Xcompiler -fPIC cuda_multiply.cu\n    //go:\n        go run cuda_multiply.go\n    ```", "```go\n\n    //clean:\n        rm *.so\n    ```", "```go\n    FROM tensorflow/tensorflow:latest-gpu\n    ENV LD_LIBRARY_PATH=/usr/local/cuda-10.1/lib64\n    RUN ln -s /usr/local/cuda-10.1/lib64/libcudart.so /usr/lib/libcudart.so\n    RUN apt-get install -y golang\n    COPY . /tmp\n    WORKDIR /tmp\n    RUN make\n    RUN mv libmultiply.so /usr/lib/libmultiply.so \n    ENTRYPOINT [\"/usr/bin/go\", \"run\", \"cuda_multiply.go\"]  \n    ```", "```go\n    $ sudo docker build -t cuda-go .\n    Sending build context to Docker daemon  8.704kB\n    Step 1/9 : FROM tensorflow/tensorflow:latest-gpu\n     ---> 3c0df9ad26cc\n    Step 2/9 : ENV LD_LIBRARY_PATH=/usr/local/cuda-10.1/lib64\n     ---> Using cache\n     ---> 65aba605af5a\n    Step 3/9 : RUN ln -s /usr/local/cuda-10.1/lib64/libcudart.so /usr/lib/libcudart.so\n     ---> Using cache\n     ---> a0885eb3c1a8\n    Step 4/9 : RUN apt-get install -y golang\n     ---> Using cache\n     ---> bd85bd4a8c5e\n    Step 5/9 : COPY . /tmp\n     ---> 402d800b4708\n    Step 6/9 : WORKDIR /tmp\n     ---> Running in ee3664a4669f\n    Removing intermediate container ee3664a4669f\n     ---> 96ba0678c758\n    Step 7/9 : RUN make\n     ---> Running in 05df1a58cfd9\n    nvcc -o libmultiply.so --shared -Xcompiler -fPIC cuda_multiply.cu\n    Removing intermediate container 05df1a58cfd9\n     ---> 0095c3bd2f58\n    Step 8/9 : RUN mv libmultiply.so /usr/lib/libmultiply.so\n     ---> Running in 493ab6397c29\n    Removing intermediate container 493ab6397c29\n     ---> 000fcf47898c\n    Step 9/9 : ENTRYPOINT [\"/usr/bin/go\", \"run\", \"cuda_multiply.go\"]\n     ---> Running in 554b8bf32a1e\n    Removing intermediate container 554b8bf32a1e\n     ---> d62266019675\n    Successfully built d62266019675\n    Successfully tagged cuda-go:latest \n    ```", "```go\n    sudo docker run --gpus all -it --rm cuda-go\n    ```"]