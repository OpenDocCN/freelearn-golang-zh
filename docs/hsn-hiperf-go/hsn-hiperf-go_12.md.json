["```go\ngc# @#s #%: #+#+# ms clock, #+#/#/#+# ms cpu, #->#-># MB, # MB goal, #P\n```", "```go\n\npackage main\nimport (\n    \"fmt\"\n    \"net/http\"\n)\n\nfunc hello(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintf(w, \"Hello Gophers\")\n}\n\nfunc main() {\n    http.HandleFunc(\"/\", hello)\n    err := http.ListenAndServe(\":8080\", nil)\n    if err != nil {\n       fmt.Println(err)\n    }\n}\n```", "```go\nscvg1: 57 MB released\nscvg1: inuse: 1, idle: 61, sys: 63, released: 57, consumed: 5 (MB)\n```", "```go\n#!/bin/bash\n\nexport GOGC=off\nprintf \"\\nBuild with GOGC=off:\"\ntime go build -a std\nprintf \"\\nBuild with GOGC=50:\"\nexport GOGC=50\ntime go build -a std\nfor i in 0 500 1000 1500 2000\ndo\n    printf \"\\nBuild with GOGC = $i:\"\n    export GOGC=$i\n    time go build -a std\ndone\n```", "```go\n#!/bin/bash\nfor i in 1 2 3 4\ndo\n    export GOMAXPROCS=$i\n    printf \"\\nBuild with GOMAXPROCS=$i:\"\n    time go build -a std\ndone  \n```", "```go\npackage main\nimport (\n    \"time\"\n)\n\nfunc main() {\n    c := make(chan bool, 1)\n    go panicRoutine(c)\n    for i := 0; i < 2; i++ {\n       <-c\n    }\n}\n\nfunc panicRoutine(c chan bool) {\n    time.Sleep(100 * time.Millisecond)\n    panic(\"Goroutine Panic\")\n    c <- true\n}\n\n```", "```go\npackage main\nimport (\n    \"net/http\"\n\n    \"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\n\nfunc main() {\n    http.Handle(\"/promMetrics\", promhttp.Handler())\n    http.ListenAndServe(\":1234\", nil)\n}\n```", "```go\npackage main\n\nimport (\n    \"fmt\"\n    \"runtime\"\n)\n\nfunc main() {\n    fmt.Println(\"Number of CPUs Available: \", runtime.NumCPU())\n}\n```", "```go\npackage main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"runtime\"\n) \n\nfunc memStats(w http.ResponseWriter, r *http.Request) {\n    var memStats runtime.MemStats\n    runtime.ReadMemStats(&memStats)\n```", "```go\n    fmt.Fprintln(w, \"Alloc:\", memStats.Alloc)\n    fmt.Fprintln(w, \"Total Alloc:\", memStats.TotalAlloc)\n    fmt.Fprintln(w, \"Sys:\", memStats.Sys)\n    fmt.Fprintln(w, \"Lookups:\", memStats.Lookups)\n    fmt.Fprintln(w, \"Mallocs:\", memStats.Mallocs)\n    fmt.Fprintln(w, \"Frees:\", memStats.Frees)\n```", "```go\n    fmt.Fprintln(w, \"Heap Alloc:\", memStats.HeapAlloc)\n    fmt.Fprintln(w, \"Heap Sys:\", memStats.HeapSys)\n    fmt.Fprintln(w, \"Heap Idle:\", memStats.HeapIdle)\n    fmt.Fprintln(w, \"Heap In Use:\", memStats.HeapInuse)\n    fmt.Fprintln(w, \"Heap Released:\", memStats.HeapReleased)\n    fmt.Fprintln(w, \"Heap Objects:\", memStats.HeapObjects)\n```", "```go\n    fmt.Fprintln(w, \"Stack In Use:\", memStats.StackInuse)\n    fmt.Fprintln(w, \"Stack Sys:\", memStats.StackSys)\n    fmt.Fprintln(w, \"MSpanInuse:\", memStats.MSpanInuse)\n    fmt.Fprintln(w, \"MSpan Sys:\", memStats.MSpanSys)\n    fmt.Fprintln(w, \"MCache In Use:\", memStats.MCacheInuse)\n    fmt.Fprintln(w, \"MCache Sys:\", memStats.MCacheSys)\n    fmt.Fprintln(w, \"Buck Hash Sys:\", memStats.BuckHashSys)\n```", "```go\n    fmt.Fprintln(w, \"EnableGC:\", memStats.EnableGC)\n    fmt.Fprintln(w, \"GCSys:\", memStats.GCSys)\n    fmt.Fprintln(w, \"Other Sys:\", memStats.OtherSys)\n    fmt.Fprintln(w, \"Next GC:\", memStats.NextGC)\n    fmt.Fprintln(w, \"Last GC:\", memStats.LastGC)\n    fmt.Fprintln(w, \"Num GC:\", memStats.NumGC)\n    fmt.Fprintln(w, \"Num Forced GC:\", memStats.NumForcedGC)\n```", "```go\n    fmt.Fprintln(w, \"Pause Total NS:\", memStats.PauseTotalNs)\n    fmt.Fprintln(w, \"Pause Ns:\", memStats.PauseNs)\n    fmt.Fprintln(w, \"Pause End:\", memStats.PauseEnd)\n    fmt.Fprintln(w, \"GCCPUFraction:\", memStats.GCCPUFraction)\n    fmt.Fprintln(w, \"BySize Size:\", memStats.BySize)\n```", "```go\n func main() {\n    http.HandleFunc(\"/\", memStats)\n    http.ListenAndServe(\":1234\", nil)\n}\n```", "```go\nab -n 1000 -c 1000 http://localhost:1234/\n```"]