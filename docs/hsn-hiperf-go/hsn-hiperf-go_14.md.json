["```go\ngo build [-o output] [build flags] [packages]\n```", "```go\npackage main\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\n\nfunc main() {\n    http.Handle(\"/\", promhttp.Handler())\n    port := \":2112\"\n    fmt.Println(\"Prometheus Handler listening on port \", port)\n    http.ListenAndServe(port, nil)\n}                                                                \n```", "```go\ngo build -p 4 -race -x prometheusExporterExample.go\n```", "```go\nWORK=/tmp/go-build924967855\n```", "```go\nmkdir -p $WORK/b001/\n```", "```go\ncat >$WORK/b001/importcfg.link << 'EOF' # internal\n```", "```go\npackagefile command-line-arguments=/home/bob/.cache/go-build/aa/aa63d73351c57a147871fde4964d74c9a39330b467c6d73640815775e6673084-d\n```", "```go\npackagefile fmt=/home/bob/.cache/go-build/74/749e110dc104578def1859fbd4ca5c5546f4032f02ffd5ea4d14c730fbd65b81-d\n```", "```go\npackagefile github.com/prometheus/client_golang/prometheus/promhttp=/home/bob/.cache/go-build/e9/e98940b17504e2f647dccc7832793448aa4e8a64047385341c94c1c4431d59cf-d\n```", "```go\nmkdir -p $WORK/b001/exe/\n```", "```go\n/usr/lib/golang/pkg/tool/linux_amd64/link -o $WORK/b001/exe/a.out -importcfg $WORK/b001/importcfg.link -installsuffix race -buildmode=exe -buildid=bGYa4XecCYqWj3VjKraU/eHfXIjk2XJ_C2azyW4yU/8YHxpy5Xa69CGQ4FC9Kb/bGYa4XecCYqWj3VjKraU -race -extld=gcc /home/bob/.cache/go-build/aa/aa63d73351c57a147871fde4964d74c9a39330b467c6d73640815775e6673084-\n```", "```go\n/usr/lib/golang/pkg/tool/linux_amd64/buildid -w $WORK/b001/exe/a.out # internal\n```", "```go\ncp $WORK/b001/exe/a.out prometheusExporterExample\n```", "```go\nrm -r $WORK/b001/\n```", "```go\ngo tool compile -help\ngo tool link -help\n```", "```go\npackage main\nimport \"fmt\"\n\nvar linkerFlag string\nfunc main() {\n    fmt.Println(linkerFlag)\n}\n```", "```go\n$ go build -ldflags \"-X main.linkerFlag=Hi_Gophers\" -o nonOptimized\n```", "```go\n$ go build -gcflags=\"-N -l\" -ldflags \"-X main.linkerFlag=Hi_Gophers -s -w\" -o Optimized\n```", "```go\n// +build [OPTIONS]\n\npackage main\n```", "```go\n// +build ignore\n```", "```go\n// +build windows, 386, cgo\n```", "```go\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc main() {\n    fmt.Println(\"Hello Gophers\")\n    fmt.Println(math.Sqrt(64))\n}\n```", "```go\npackage main \nfunc main() {}\n```", "```go\npackage main\nimport \"go.uber.org/zap\"\nfunc main() {\n  zapLogger: = zap.NewExample()\n  defer zapLogger.Sync()\n  zapLogger.Debug(\"Hi Gophers - from our Zap Logger\")\n}\n```", "```go\ngo mod init github.com/bobstrecansky/HighPerformanceWithGo/11-deploying-go-code/multiStageDockerBuild\n```", "```go\ngo mod vendor\n\n```", "```go\n# Builder - stage 1 of 2\nFROM golang:alpine as builder\nCOPY . /src\nWORKDIR /src\nRUN CGO_ENABLED=0 GOOS=linux go build -mod=vendor -o zapLoggerExample\n# Executor - stage 2 of 2\nFROM alpine:latest\nWORKDIR /src/\nCOPY --from=builder /src/zapLoggerExample .\nCMD [\"./zapLoggerExample\"]\n```", "```go\ndocker build -t zaploggerexample .\n```", "```go\ndocker run -it --rm zaploggerexample\n```"]