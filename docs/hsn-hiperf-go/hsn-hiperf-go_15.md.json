["```go\nfunction foo() {\npprof.StartCPUProfile()\ndefer pprof.StopCPUProfile()\n...\ncode\n...\n}\n```", "```go\nfunction bar() {\nruntime.GC()\ndefer pprof.WriteHeapProfile()\n...\ncode\n...\n}\n```", "```go\nimport (\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n    _ \"net/http/pprof\"\n    \"time\"\n)\n```", "```go\nfunc main() {\n    Handler := func(w http.ResponseWriter, req *http.Request) {\n        sleep(5)\n        sleep(10)\n        io.WriteString(w, \"Memory Management Test\")\n    }\n    http.HandleFunc(\"/\", Handler)\n    http.ListenAndServe(\":1234\", nil)\n}\n```", "```go\nfunc sleep(sleepTime int) {\n    time.Sleep(time.Duration(sleepTime) * time.Millisecond)\n    fmt.Println(\"Slept for \", sleepTime, \" Milliseconds\")\n}\n```", "```go\npackage main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  _ \"net/http/pprof\"\n  \"strconv\"\n  \"time\"\n)\n```", "```go\nfunc main() { \n    Handler := func(w http.ResponseWriter, r *http.Request) {\n        sleepDuration := r.URL.Query().Get(\"time\")\n        sleepDurationInt, err := strconv.Atoi(sleepDuration)\n        if err != nil {\n            fmt.Println(\"Incorrect value passed as a query string for time\")\n            return\n        }\n        sleep(sleepDurationInt)\n        fmt.Fprintf(w, \"Slept for %v Milliseconds\", sleepDuration)\n    } \n    http.HandleFunc(\"/\", Handler)\n    http.ListenAndServe(\":1234\", nil)\n}\n```", "```go\nfunc sleep(sleepTime int) {\n    time.Sleep(time.Duration(sleepTime) * time.Millisecond)\n    fmt.Println(\"Slept for \", sleepTime, \" Milliseconds\")\n}\n```", "```go\ngo run timedHttpProfiling.go\n```", "```go\ncurl -s \"localhost:1234/debug/pprof/profile?seconds=20\" > 5-millisecond-profile.dump\n```", "```go\nab -n 10000 -c 10 http://localhost:1234/?time=5\n```", "```go\ncurl -s \"localhost:1234/debug/pprof/profile?seconds=20\" > 10-millisecond-profile.dump\n```", "```go\nab -n 10000 -c 10 http://localhost:1234/?time=10\n```", "```go\npackage main\n\nimport (\n \"fmt\"\n \"net/http\"\n\n _ \"net/http/pprof\"                                                                   \n \"runtime\"\n \"time\"\n)\n```", "```go\nfunc main() {\n http.HandleFunc(\"/leak\", leakyAbstraction)\n http.ListenAndServe(\"localhost:6060\", nil)\n}  \n```", "```go\nfunc leakyAbstraction(w http.ResponseWriter, r *http.Request) {\n ch := make(chan string)                                                                \n\n for {\n   fmt.Fprintln(w, \"Number of Goroutines: \", runtime.NumGoroutine())\n   go func() { ch <- wait() }()\n }          \n}\n```", "```go\nfunc wait() string {\n time.Sleep(5 * time.Microsecond)\n return \"Hello Gophers!\"\n}\n```", "```go\ngo run memoryLeak.go\n```", "```go\ncurl localhost:6060/leak\n```"]