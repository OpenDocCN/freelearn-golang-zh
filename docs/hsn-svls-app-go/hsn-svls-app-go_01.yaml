- en: Go Serverless
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go无服务器
- en: This chapter will give you a foundational understanding of what **serverless
    architecture** is, how it works, and what its features are. You'll learn how **AWS
    Lambda** is on a par with big players such as Google Cloud Functions and Microsoft
    Azure Functions. Then, you will discover AWS Lambda's different execution environments
    and its Go support. Moreover, we'll discuss the advantages of using Go as your
    programming language for building serverless applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将为您提供对**无服务器架构**是什么，它是如何工作的，以及它的特点是什么的基础理解。您将了解到**AWS Lambda**如何与谷歌云函数和微软Azure函数等大型参与者不相上下。然后，您将了解AWS
    Lambda的不同执行环境及其对Go语言的支持。此外，我们将讨论使用Go作为构建无服务器应用程序的编程语言的优势。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Cloud-computing models—understanding what they are and what they can be used
    for.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云计算模型——了解它们是什么以及可以用于什么。
- en: Pros and cons of serverless architecture.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无服务器架构的优缺点。
- en: Why Go is a great fit for AWS Lambda.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么Go非常适合AWS Lambda。
- en: The serverless paradigm
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器范式
- en: Cloud-based applications can be built on low-level infrastructure pieces or
    can use higher-level services that provide abstraction from the management, architecting,
    and scaling requirements of core infrastructure. In the following section, you
    will learn about the different cloud-computing models.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 基于云的应用程序可以构建在低级基础设施部件上，也可以使用提供抽象层的更高级服务，从而摆脱核心基础设施的管理、架构和扩展要求。在接下来的部分，您将了解不同的云计算模型。
- en: The cloud-computing evolution
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云计算的演进
- en: 'Cloud providers offer their services according to four main models: IaaS, PaaS,
    CaaS, and FaaS. All the aforementioned models are just thousands of servers, disks,
    routers, and cables under the hood. They just add layers of abstraction on top
    to make management easier and increase the development velocity.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 云提供商根据四种主要模型提供其服务：IaaS、PaaS、CaaS和FaaS。所有上述模型只是在底层添加了数千台服务器、磁盘、路由器和电缆。它们只是在顶部添加了抽象层，以使管理更容易，并增加开发速度。
- en: Infrastructure as a Service
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基础设施即服务
- en: '**Infrastructure as a Service** (**IaaS**), sometimes abbreviated to IaaS, is
    the basic cloud-consumption model. It exposes an API built on top of a virtualized
    platform to access compute, storage, and network resources. It allows customers
    to scale out their application infinitely (no capacity planning).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**基础设施即服务**（**IaaS**），有时缩写为IaaS，是基本的云消费模型。它在虚拟化平台之上构建了一个API，以访问计算、存储和网络资源。它允许客户无限扩展其应用程序（无需容量规划）。'
- en: In this model, the cloud provider abstracts the hardware and physical servers,
    and the cloud user is responsible for managing and maintaining the guest operating
    systems and applications on top of it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种模型中，云提供商抽象了硬件和物理服务器，云用户负责管理和维护其上的客户操作系统和应用程序。
- en: AWS is the leader according to Gartner's Infrastructure as a Service Magic Quadrant.
    Irrespective of whether you're looking for content delivery, compute power, storage,
    or other service functionality, AWS is the most advantageous of the various available
    options when it comes to the IaaS cloud-computing model. It dominates the public
    cloud market, while Microsoft Azure is gradually catching up with to Amazon, followed
    by Google Cloud Platform and IBM Cloud.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Gartner的基础设施即服务魔力象限图，AWS是领先者。无论您是在寻找内容传递、计算能力、存储还是其他服务功能，AWS在IaaS云计算模型方面是各种可用选项中最有利的。它主导着公共云市场，而微软Azure正在逐渐赶上亚马逊，其次是谷歌云平台和IBM云。
- en: Platform as a Service
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 平台即服务
- en: '**Platform as a Service** (**PaaS**) provides developers with a framework in
    which they can develop applications. It simplifies, speeds up, and lowers the
    costs associated with the process of developing, testing, and deploying applications
    while hiding all implementation details, such as server management, load balancers,
    and database configurations.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**平台即服务**（**PaaS**）为开发人员提供了一个框架，他们可以在其中开发应用程序。它简化、加快了开发、测试和部署应用程序的过程，同时隐藏了所有实现细节，如服务器管理、负载均衡器和数据库配置。'
- en: PaaS is built on top of IaaS and thus hides the underlying infrastructure and
    operating systems, to allow developers to focus on delivering business values
    and reduce operational overhead.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: PaaS建立在IaaS之上，因此隐藏了底层基础设施和操作系统，使开发人员能够专注于提供业务价值并减少运营开销。
- en: Among the first to launch PaaS was Heroku, in 2007; later, Google App Engine
    and AWS Elastic Beanstalk joined the fray.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku是最早推出PaaS的之一，于2007年；后来，谷歌应用引擎和AWS弹性Beanstalk也加入了竞争。
- en: Container as a Service
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器即服务
- en: '**Container as a Service** (**CaaS**) became popular with the release of Docker
    in 2013\. It made it easy to build and deploy containerized applications on on-premise
    data centers or over the cloud.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**容器即服务**（**CaaS**）随着2013年Docker的发布而变得流行。它使得在本地数据中心或云上构建和部署容器化应用变得容易。'
- en: Containers changed the unit of scale for DevOps and site reliability engineers.
    Instead of one dedicated VM per application, multiple containers can run on a
    single virtual machine, which allows better server utilization and reduces costs.
    Also, it brings developer and operation teams closer together by eliminating the
    "worked on my machine" joke. This transition to containers has allowed multiple
    companies to modernize their legacy applications and move them to cloud.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 容器改变了DevOps和站点可靠性工程师的规模单位。多个容器可以在单个虚拟机上运行，这样可以更好地利用服务器并降低成本。它还通过消除“在我的机器上运行”的笑话，使开发人员和运维团队更加紧密地联系在一起。这种转变到容器使多家公司能够现代化其传统应用程序并将其迁移到云上。
- en: To achieve fault-tolerance, high-availability, and scalability, an orchestrations
    tool, such as Docker Swarm, Kubernetes, or Apache Mesos, was needed to manage
    containers in a cluster of nodes. As a result, CaaS was introduced to build, ship,
    and run containers quickly and efficiently. It also handles heavy tasks, such
    as cluster management, scaling, blue/green deployment, canary updates, and rollbacks.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现容错、高可用性和可伸缩性，需要一个编排工具，比如Docker Swarm、Kubernetes或Apache Mesos，来管理节点集群中的容器。因此，引入了CaaS来快速高效地构建、部署和运行容器。它还处理了诸如集群管理、扩展、蓝/绿部署、金丝雀更新和回滚等重型任务。
- en: The most popular CaaS platform in the market today is AWS as 57% of the Kubernetes
    workload is running on Amazon **Elastic Container Service** (**ECS**), **Elastic
    Kubernetes Service** (**EKS**), and AWS Fargate, followed by Docker Cloud, CloudFoundry,
    and Google Container Engine.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 市场上最流行的CaaS平台是AWS，因为57%的Kubernetes工作负载运行在亚马逊**弹性容器服务**（**ECS**）、**弹性Kubernetes服务**（**EKS**）和AWS
    Fargate上，其次是Docker Cloud、CloudFoundry和Google容器引擎。
- en: This model, CaaS, enables you to split your virtual machines further to achieve
    higher utilization and orchestrate containers across a cluster of machines, but
    the cloud user still needs to manage the life cycle of containers; as a solution
    to this, **Function as a Service** (**FaaS**) was introduced.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模型，CaaS，使您能够进一步分割虚拟机以实现更高的利用率，并在机器集群中编排容器，但云用户仍然需要管理容器的生命周期；作为解决方案，引入了**函数即服务**（**FaaS**）。
- en: Function as a Service
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数即服务
- en: The FaaS model allows developers to run code (called functions) without provisioning
    or maintaining a complex infrastructure. Cloud Providers deploy customer code
    to fully-managed, ephemeral, time-boxed containers that are live only during the
    invocation of the functions. Therefore, business can grow without customers having
    to worry about scaling or maintaining a complex infrastructure; this is called
    going serverless.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: FaaS模型允许开发人员在不需要预配或维护复杂基础设施的情况下运行代码（称为函数）。云提供商将客户代码部署到完全托管的、临时的、有时间限制的容器中，这些容器仅在函数调用期间处于活动状态。因此，企业可以在不必担心扩展或维护复杂基础设施的情况下实现增长；这被称为无服务器化。
- en: Amazon kicked off the serverless revolution with AWS Lambda in 2014, followed
    by Microsoft Azure Functions and Google Cloud Functions.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊在2014年推出了AWS Lambda，开启了无服务器革命，随后是微软Azure Functions和Google Cloud Functions。
- en: Serverless architecture
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器架构
- en: Serverless computing, or FaaS, is the fourth way to consume cloud computing.
    In this model, the responsibility for provisioning, maintaining, and patching
    servers is shifted from the customer to cloud providers. Developers can now focus
    on building new features and innovating, and pay only for the compute time that
    they consume.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器计算，或者说FaaS，是云计算的第四种消费方式。在这种模式下，预配、维护和打补丁的责任从客户转移到了云提供商。开发人员现在可以专注于构建新功能和创新，并且只支付他们消耗的计算时间。
- en: Benefits of going serverless
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器化的好处
- en: 'There are a number of reasons why going serverless makes sense:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器化有很多合理之处：
- en: '**NoOps**: The server infrastructure is managed by the cloud provider, and
    this reduces the overhead and increases developer velocity. OS updates are taken
    care of and patching is done by the FaaS provider. This results in decreased time
    to market and faster software releases, and eliminates the need for a system administrator.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无运维**：服务器基础设施由云提供商管理，这减少了开销并提高了开发速度。操作系统更新和补丁由FaaS提供商处理。这导致了缩短的上市时间和更快的软件发布，消除了系统管理员的需求。'
- en: '**Autoscaling and high-availability**: Function as a unit of scale leads to
    small, loosely-coupled, and stateless components that, in the long run, lead to
    scalable applications. It is up to the service provider to decide how to use its
    infrastructure effectively to serve requests from the customers and horizontally
    scale functions-based on the load.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动扩展和高可用性**：作为规模的单位，函数导致了小型、松耦合和无状态的组件，从长远来看，这会导致可伸缩的应用程序。如何有效地利用基础设施来为客户提供服务请求并根据负载水平扩展函数，这取决于服务提供商。'
- en: '**Cost-optimization**: You pay only for the compute time and resources (RAM,
    CPU, network, or invocation time) that you consume. You don''t pay for idle resources.
    No work indicates no cost. If the billing period on a Lambda function, for example,
    is 100 milliseconds, then it could significantly reduce costs.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本优化**：您只支付您消耗的计算时间和资源（RAM、CPU、网络或调用时间）。您不支付闲置资源。没有工作意味着没有成本。例如，如果Lambda函数的计费周期为100毫秒，那么它可以显著降低成本。'
- en: '**Polygot**: One benefit that the serverless approach brings to the table is
    that, as a programmer, you can choose between different language runtimes depending
    on your use case. One part of the application can be written in Java, another
    in Go, another in Python; it doesn''t really matter as long as it gets the job
    done.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多语言**：无服务器方法带来的一个好处是，作为程序员，您可以根据您的用例选择不同的语言运行时。应用程序的一部分可以用Java编写，另一部分可以用Go编写，另一部分可以用Python编写；只要能完成工作，就没有关系。'
- en: Drawbacks of going serverless
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器化的缺点
- en: 'On the other hand, serverless computing is still in its infancy; hence, it
    is not suitable for all use cases and it does have its limitations:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，无服务器计算仍处于起步阶段；因此，并不适用于所有用例，并且它确实有其局限性：
- en: '**Transparency**: The infrastructure is managed by the FaaS provider. This
    is in exchange for flexibility; you don''t have full control of your application,
    you cannot access the underlying infrastructure, and you cannot switch between
    platform providers (vendor lock-in). In future, we expect increasing work toward
    the unification of FaaS; this will help avoid vendor lock-in and allow us to run
    serverless applications on different cloud providers or even on-premise.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**透明性**：基础设施由FaaS提供商管理。这是为了灵活性；您无法完全控制您的应用程序，无法访问底层基础设施，也无法在不同平台提供商之间切换（供应商锁定）。未来，我们预计将会有更多工作朝着FaaS的统一化方向发展；这将有助于避免供应商锁定，并允许我们在不同的云提供商甚至本地运行无服务器应用程序。'
- en: '**Debugging**: Monitoring and debugging tools were built without serverless
    architecture in mind. Therefore, serverless functions are hard to debug and monitor.
    In addition, it''s difficult to set up a local environment to test your functions
    before deployment (pre-integration testing). The good news is that tools will
    eventually arrive to improve observability in serverless environments, as serverless
    popularity is rising and multiple open source projects and frameworks have been
    created by the community and cloud providers (AWS X-Ray, Datadog, Dashbird, and
    Komiser).'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试**：监控和调试工具并非是针对无服务器架构而构建的。因此，无服务器函数很难进行调试和监控。此外，在部署之前很难设置本地环境来测试您的函数（预集成测试）。好消息是，随着无服务器的普及和社区和云提供商创建了多个开源项目和框架（如AWS
    X-Ray、Datadog、Dashbird和Komiser），最终会出现工具来改善无服务器环境的可观察性。'
- en: '**Cold starts**: It takes some time to handle a first request by your function
    as the cloud provider needs to allocate proper resources (AWS Lambda needs to
    start a container) for your tasks. To avoid this situation, your function must
    remain in an active state.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**冷启动**：处理函数的第一个请求需要一些时间，因为云提供商需要为您的任务分配适当的资源（AWS Lambda需要启动一个容器）。为了避免这种情况，您的函数必须保持活动状态。'
- en: '**Stateless**: Functions need to be stateless to provide the provisioning that
    enables serverless applications to be transparently scalable. Therefore, to persist
    data or manage sessions, you need to use an external database, such as DynamoDB
    or RDS, or an in-memory cache engine, such as Redis or Memcached.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无状态**：函数需要是无状态的，以提供使无服务器应用程序能够透明扩展的提供。因此，要持久保存数据或管理会话，您需要使用外部数据库，如DynamoDB或RDS，或内存缓存引擎，如Redis或Memcached。'
- en: Having stated all these limitations, these aspects will change in the future
    with an increasing number of vendors coming up with upgraded versions of their
    platforms.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管已经说明了所有这些限制，但这些方面将随着越来越多的供应商推出升级版本的平台而发生变化。
- en: Serverless cloud providers
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器云提供商
- en: 'There are multiple FaaS providers out there, but to keep it simple we''ll compare
    only the biggest three:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 有多个FaaS提供商，但为了简单起见，我们只比较最大的三个：
- en: AWS Lambda
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS Lambda
- en: Google Cloud Functions
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Cloud Functions
- en: Microsoft Azure Functions
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Azure Functions
- en: 'The following is a pictorial comparison:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一张图示比较：
- en: '![](img/d9753fec-4fb3-46ed-a985-de9fb4b21fad.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9753fec-4fb3-46ed-a985-de9fb4b21fad.png)'
- en: As shown in the preceding diagram, AWS Lambda is the most used, best-known,
    and the most mature solution in the serverless space today, and that's why upcoming
    chapters will be fully dedicated to AWS Lambda.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，AWS Lambda是当今无服务器空间中使用最广泛、最知名和最成熟的解决方案，这就是为什么即将到来的章节将完全专注于AWS Lambda。
- en: AWS Lambda
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS Lambda
- en: 'AWS Lambda is the center of the AWS serverless platform:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda是AWS无服务器平台的核心：
- en: '![](img/c79de2b6-2b19-4d23-95a9-95be3e42fc0a.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c79de2b6-2b19-4d23-95a9-95be3e42fc0a.png)'
- en: AWS Lambda was launched at re:Invent 2014\. It was the first implementation
    of serverless computing where users could upload their code to Lambda. It performs operational
    and administrative activities on their behalf, including provisioning capacity,
    monitoring fleet health, applying security patches, deploying their code, and publishing
    realtime logs and metrics to Amazon CloudWatch.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda在2014年的re:Invent上推出。这是无服务器计算的第一个实现，用户可以将他们的代码上传到Lambda。它会代表用户执行操作和管理活动，包括提供容量、监控舰队健康状况、应用安全补丁、部署他们的代码，并将实时日志和指标发布到Amazon
    CloudWatch。
- en: Lambda follows the event-driven architecture. Your code is triggered in response
    to events and runs in parallel. Every trigger is processed individually. Moreover,
    you are charged only per execution, while with EC2 you are billed by the hour.
    Therefore, you benefit from autoscaling and fault-tolerance for your application
    with low cost and zero upfront infrastructure investment.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda遵循事件驱动架构。您的代码会在响应事件时触发并并行运行。每个触发器都会被单独处理。此外，您只需按执行次数收费，而使用EC2时则按小时计费。因此，您可以以低成本和零前期基础设施投资获得应用程序的自动扩展和容错能力。
- en: Source events
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件源
- en: 'AWS Lambda runs your code in response to events. Your function will be invoked
    when these event sources detect events:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda根据事件运行您的代码。当这些事件源检测到事件时，将调用您的函数：
- en: '![](img/0cd47bd2-b1b1-45d6-b1aa-16b2f9f54182.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0cd47bd2-b1b1-45d6-b1aa-16b2f9f54182.png)'
- en: Amazon is now supporting SQS as a source event for Lambda
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon现在支持SQS作为Lambda的事件源
- en: Use cases
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用情况
- en: 'AWS Lambda can be used for endless application scenarios:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda可用于无尽的应用场景：
- en: '**Web applications**:Instead of a maintaining a dedicated instance with a web
    server to host your static website, you can combine S3 and Lambda to benefit from
    scalability at a cheaper cost. An example of a serverless website is described
    in the following diagram:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web应用程序**：您可以使用S3和Lambda来代替维护带有Web服务器的专用实例来托管您的静态网站，以便以更低的成本获得可伸缩性。下图描述了一个无服务器网站的示例：'
- en: '![](img/495d1451-4d2a-41db-8913-711919a45c94.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/495d1451-4d2a-41db-8913-711919a45c94.png)'
- en: An alias record in **Route 53** points to a **CloudFront** distribution. The
    **CloudFront** distribution is built on top of an **S3 Bucket** where a static
    website is hosted. **CloudFront** reduces the response time to static assets (JavaScripts,
    CSS, fonts, and images), improves webpage load times, and mitigates distributed
    denial of service (DDoS) attacks. HTTP requests coming from the website then go
    through **API Gateway** HTTP endpoints that trigger the right **Lambda Function**
    to handle the application logic and persist data to a fully managed database service,
    such as **DynamoDB**.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**Route 53**中的别名记录指向**CloudFront**分发。**CloudFront**分发建立在**S3 Bucket**之上，其中托管着静态网站。**CloudFront**减少了对静态资产（JavaScript、CSS、字体和图像）的响应时间，提高了网页加载时间，并减轻了分布式拒绝服务（DDoS）攻击。然后，来自网站的HTTP请求通过**API
    Gateway** HTTP端点，触发正确的**Lambda Function**来处理应用程序逻辑并将数据持久保存到完全托管的数据库服务，如**DynamoDB**。'
- en: '**Mobile and IoT**:A schematic for building a sensor application, which measures
    the temperature from a realtime sensor-connected device and sends an SMS alert
    if the temperature is out of range, can be given as follows:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移动和物联网**：构建传感器应用程序的示意图，该应用程序从实时传感器连接的设备中测量温度，并在温度超出范围时发送短信警报，如下所示：'
- en: '![](img/747c45cd-e10b-4c40-98af-0092c7dea0df.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/747c45cd-e10b-4c40-98af-0092c7dea0df.png)'
- en: The **Connected Device** will ingest data to **AWS IoT**. **AWS IoT** rules
    will invoke a **Lambda Function** in order to analyze the data and publish a message
    to an **SNS Topic** in case of emergency. Once the message is published, Amazon SNS
    will attempt to deliver that message to every endpoint that is subscribed to the
    topic. In this case it will be an **SMS**.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**连接设备**将数据摄入到**AWS IoT**。**AWS IoT**规则将调用**Lambda函数**以分析数据，并在紧急情况下向**SNS主题**发布消息。发布消息后，Amazon
    SNS将尝试将该消息传递给订阅主题的每个端点。在这种情况下，它将是**短信**。'
- en: '**Data ingestion: **Monitoring your logs and keeping an audit trail is mandatory,
    and you should be aware of any security breaches in your cloud infrastructure. The
    following diagram illustrates a realtime log-processing pipeline with Lambda:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据摄入：**监控日志并保持审计跟踪是强制性的，您应该意识到云基础设施中的任何安全漏洞。以下图表说明了一个实时日志处理管道与Lambda：'
- en: '![](img/9027c43f-240d-45cf-a725-6e9c965aa317.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9027c43f-240d-45cf-a725-6e9c965aa317.png)'
- en: The VPC Flow Logs feature captures information about the IP traffic going to
    and from network interfaces in your VPC and ships the logs to Amazon CloudWatch
    Logs. AWS CloudTrail maintains records of all AWS API calls on your account. All
    logs are aggregated and streamed to AWS Kinesis Data Streams.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: VPC流日志功能捕获有关VPC中网络接口的IP流量信息，并将日志发送到Amazon CloudWatch日志。AWS CloudTrail记录您帐户上的所有AWS
    API调用。所有日志都被聚合并流式传输到AWS Kinesis数据流。
- en: Kinesis triggers Lambda Functions, which analyze logs for events or patterns
    and send a notification to Slack or PagerDuty in the event of abnormal activity.
    Finally, Lambda posts the dataset to Amazon Elasticsearch with a pre-installed
    Kibana to visualize and analyze network traffic and logs with dynamic and interactive
    dashboards. This is done for long-term retention and to archive the logs, especially
    for organizations with compliance programs. Kinesis will store logs in S3 bucket
    for backup. The bucket can be configured with a life cycle policy to archive unused
    logs to Glacier.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Kinesis触发Lambda函数，分析日志以查找事件或模式，并在异常活动发生时向Slack或PagerDuty发送通知。最后，Lambda将数据集发布到预安装了Kibana的Amazon
    Elasticsearch，以可视化和分析网络流量和日志，使用动态和交互式仪表板。这是为了长期保留和存档日志，特别是对于具有合规性计划的组织。Kinesis将日志存储在S3存储桶中进行备份。可以配置存储桶的生命周期策略，将未使用的日志存档到Glacier。
- en: '**Scheduling tasks**:Scheduled tasks and events are a perfect fit for Lambda.
    Instead of keeping an instance up and running 24/7, you can use Lambda to create
    backups, generate reports, and execute cron-jobs. The following schematic diagram
    describes how to use AWS Lambda to perform a post-processing job:'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定时任务：**定时任务和事件非常适合Lambda。您可以使用Lambda创建备份，生成报告和执行cron作业，而不是保持实例24/7运行。以下示意图描述了如何使用AWS
    Lambda执行后处理作业：'
- en: '![](img/9ce30d4e-f069-458d-ba7a-508814f4453e.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9ce30d4e-f069-458d-ba7a-508814f4453e.png)'
- en: When a video arrives at an S3 bucket, an event will trigger a Lambda Function,
    which will pass the video filename and path to an Elastic Transcoder pipeline
    to perform video transcoding, generate multiple video formats (`.avi`, `.h264`,
    `.webm`, `.mp3`, and so on), and store the results in an S3 bucket.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当视频到达S3存储桶时，事件将触发一个Lambda函数，该函数将视频文件名和路径传递给弹性转码器管道，以执行视频转码，生成多种视频格式（.avi，.h264，.webm，.mp3等），并将结果存储在S3存储桶中。
- en: '**Chatbots and voice assistants: **You can use a **Natural Language Understanding**
    (**NLU**) or **Automatic Speech Recognition** (**ASR**) service, such as Amazon
    Lex, to build application bots that can trigger Lambda Functions for intent fulfillment
    in response to voice commands or text. The following diagram describes a use case
    for building a personal assistant with Lambda:'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聊天机器人和语音助手：**您可以使用**自然语言理解**（**NLU**）或**自动语音识别**（**ASR**）服务，如Amazon Lex，构建可以触发Lambda函数以响应语音命令或文本的应用程序机器人。以下图表描述了使用Lambda构建个人助手的用例：'
- en: '![](img/c4062825-155f-4520-9594-ad9055d56db3.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4062825-155f-4520-9594-ad9055d56db3.png)'
- en: A user can ask **Amazon Echo** about its to-do list. Echo will intercept the
    user's voice command and pass it to a custom **Alexa Skill**, which will carry
    out speech recognition and transform the user's voice commands into intents, which
    will trigger a **Lambda Function** that in turn will query **Trello** API to fetch
    a list of tasks for today.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以询问**Amazon Echo**关于其待办事项清单。Echo将拦截用户的语音命令并将其传递给自定义**Alexa技能**，该技能将进行语音识别并将用户的语音命令转换为意图，触发**Lambda函数**，然后查询**Trello**
    API以获取今天的任务列表。
- en: Due to Lambda's limitation in terms of memory, CPU, and timeout execution, it's
    not suited for long-running workflows and other massive workloads.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Lambda在内存、CPU和超时执行方面的限制，它不适用于长时间运行的工作流和其他大规模工作负载。
- en: Go serverless
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go无服务器
- en: 'AWS announced its support for Go as the language for AWS Lambda in January
    2018\. There were already some open source frameworks and libraries with which
    to shim Go applications that used Node.js (Apex serverless Framework), but now
    Go is officially supported and added to list of programming languages that you
    can use to write your Lambda Functions:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: AWS在2018年1月宣布支持Go作为AWS Lambda的语言。已经有一些开源框架和库可以用来支持使用Node.js的Go应用程序（Apex无服务器框架），但现在Go已经得到官方支持，并添加到可以用来编写Lambda函数的编程语言列表中：
- en: Go
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go
- en: Node.js
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js
- en: Java
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java
- en: Python
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python
- en: .NET
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET
- en: 'But which language should we use to write efficient Lambda Functions?  One
    of the reasons to go serverless is being a polygot. Regardless of the language
    you choose, there is a common pattern to writing code for a Lambda Function. Meanwhile,
    you need to pay extra attention to performance and cold starts. That''s where
    Go comes into play. The following diagram highlights the main advantages of using
    Go for serverless applications in AWS Lambda:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我们应该使用哪种语言来编写高效的Lambda函数呢？无服务器的一个原因是多语言。无论您选择哪种语言，编写Lambda函数的代码都有一个共同的模式。同时，您需要特别注意性能和冷启动。这就是Go发挥作用的地方。以下图表突出了在AWS
    Lambda中使用Go进行无服务器应用程序的主要优势：
- en: '![](img/eb71b2e0-fac2-48d8-a69b-3ed77650afb6.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb71b2e0-fac2-48d8-a69b-3ed77650afb6.png)'
- en: '**Cloud-oriented**: It was designed by Google primarily for the cloud with
    scalability in mind, and to reduce the amount of build time. Go is a solid language
    for distributed systems and infrastructure tools. Docker, Kubernetes, Terraform, etcd,
    Prometheus, and many orchestration, provisioning, and monitoring tools are built
    using Go.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**面向云**：它是由谷歌专门为云设计的，考虑到可扩展性，并减少构建时间。Go是分布式系统和基础设施工具的坚实语言。Docker、Kubernetes、Terraform、etcd、Prometheus等许多编排、提供和监控工具都是使用Go构建的。'
- en: '**Fast**: Go complies into a single binary. Therefore, you provide a precompiled
    Go binary to AWS Lambda. AWS does not compile the Go source files for you and
    this has certain consequences, such as Fast cold-boot time. Lambda doesn''t need
    to set up a runtime environment; Java, on the other hand, requires spinning up
    a JVM instance to make your function hot. Go has a clean syntax and clear language
    specifications. This delivers an easy language for developers to learn and shows
    good results quickly while producing maintainable code.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速**：Go编译成单个二进制文件。因此，您可以向AWS Lambda提供预编译的Go二进制文件。AWS不会为您编译Go源文件，这会产生一些后果，比如快速的冷启动时间。Lambda不需要设置运行时环境；另一方面，Java需要启动JVM实例来使您的函数热起来。Go具有清晰的语法和明确的语言规范。这为开发人员提供了一种易于学习的语言，并在产生可维护的代码的同时快速显示出良好的结果。'
- en: '**Scalable**: Go has built-in concurrency with goroutines instead of threads.
    They consume almost 2 Kb memory from the heap and work faster than threads; hence,
    you can spin up millions of goroutine at any time. For software development, there
    is no need for a framework; the Golang community has built many tools that are
    natively supported by Go''s language core:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展**：Go具有内置的goroutines并发，而不是线程。它们从堆中消耗了几乎2 Kb的内存，并且比线程工作得更快；因此，您可以随时启动数百万个goroutine。对于软件开发，不需要框架；Golang社区已经构建了许多工具，这些工具受到Go语言核心的本地支持：'
- en: Go's error-handling is elegant.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go的错误处理很优雅。
- en: Lightweight framework for unit testing.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻量级的单元测试框架。
- en: Solid standard library—HTTP protocol support out of the box.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准库稳固—HTTP协议支持开箱即用。
- en: Common data type and structure supported—maps, array, structs, and so on.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持的常见数据类型和结构—映射、数组、结构等。
- en: '**Efficient**: It involves efficient execution and compilation. Go is a compiled
    language; it compiles into a single binary. It uses static linking to combine
    all dependencies and modules into one single binary file. Also, its faster compilation
    speed allows for rapid feedback. Speedy development saves time and money; thus,
    this is certainly the most significant advantage for someone with a tight budget. Moreover,
    it provides efficient memory utilization with garbage collector.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高效**：它涉及高效的执行和编译。Go是一种编译语言；它编译成单个二进制文件。它使用静态链接将所有依赖项和模块组合成一个单个的二进制文件。此外，它更快的编译速度允许快速反馈。快速的开发节省时间和金钱；因此，这对于预算紧张的人来说无疑是最重要的优势。'
- en: '**Growing community**: The following screenshot shows the rising popularity
    and usage (as observed in the StackOverflow Survey 2017) for the most loved, dreaded,
    and wanted programming languages:'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不断增长的社区**：以下截图显示了（根据StackOverflow Survey 2017观察到的）最受喜爱、最受恐惧和最想要的编程语言的流行度和使用率：'
- en: '![](img/3f31de28-9070-4f2a-be2c-39fd6764156d.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f31de28-9070-4f2a-be2c-39fd6764156d.png)'
- en: In addition, Go is backed by Google and has a large, growing ecosystem and numerous
    contributors to the language on GitHub, and great IDE support (IntelliJ, VSCode,
    Atom, GoGland) and debugging.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Go得到了谷歌的支持，并拥有一个庞大、不断增长的生态系统和众多GitHub上的贡献者，以及出色的IDE支持（IntelliJ、VSCode、Atom、GoGland）和调试功能。
- en: Summary
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: AWS Lambda is the first successful implementation of serverless computing or
    FaaS. It gives users freedom from managing servers, increases development velocity,
    decreases system complexity, and enables small business to go big with zero upfront
    infrastructure investment.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda是无服务器计算或FaaS的第一个成功实现。它使用户摆脱了管理服务器的束缚，提高了开发速度，降低了系统复杂性，并使小型企业能够在零前期基础设施投资的情况下扩大规模。
- en: Go support for AWS Lambda provides significant cost-saving and performance benefits
    for those running their business on Lambda. So If you are looking for a modern,
    fast, safe, and easy language, Go is the one for you.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在Lambda上运行业务的人来说，Go对AWS Lambda的支持可以显著节省成本并提高性能。所以如果你正在寻找一种现代、快速、安全、易用的语言，Go就是你的选择。
- en: In the next chapter, you will get started with AWS Lambda Console and set up
    your Golang development environment.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将开始使用AWS Lambda控制台并设置您的Golang开发环境。
- en: Questions
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the advantages of using the serverless approach?
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用无服务器方法的优势是什么？
- en: What makes Lambda a time-saving approach?
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Lambda是一种节省时间的方法吗？
- en: How does serverless architecture enable microservices?
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无服务器架构如何实现微服务？
- en: What is the maximum time limit for an AWS Lambda function
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS Lambda函数的最长时间限制是多少？
- en: Which of the following are supported event-sources for AWS Lambda?
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些是AWS Lambda支持的事件源？
- en: Amazon Kinesis Data Streams
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon Kinesis数据流
- en: Amazon RDS
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon RDS
- en: AWS CodeCommit
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CodeCommit
- en: AWS CloudFormation
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CloudFormation
- en: Explain what a goroutine is in Go. How can you stop goroutines?
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解释一下在Go中goroutine是什么。你如何停止goroutines？
- en: What's Lambda@Edge in AWS?
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS中的Lambda@Edge是什么？
- en: What's the difference between Function as a Service and Platform as a Service?
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数即服务和平台即服务之间有什么区别？
- en: What's an AWS Lambda cold start?
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS Lambda冷启动是什么？
- en: Can AWS Lambda functions be stateless or stateful?
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS Lambda函数可以是无状态的还是有状态的？
