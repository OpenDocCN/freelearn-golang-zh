- en: Developing a Serverless Function with Lambda
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Lambda开发无服务器函数
- en: In this chapter, we will finally learn how to write our very first Go-based
    Lambda function from scratch, followed by how to configure, deploy, and test a
    Lambda function manually from the AWS Lambda Console. Along the way, you will
    be given a set of tips on how to grant access to your function so that it can
    interact with other AWS services in a secure way.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们最终将学习如何从头开始编写我们的第一个基于Go的Lambda函数，然后学习如何手动配置、部署和测试Lambda函数。在此过程中，您将获得一组关于如何授予函数访问权限以便安全地与其他AWS服务进行交互的提示。
- en: 'We will be covering the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Writing a Lambda function in Go
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用Go编写Lambda函数
- en: Execution role
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行角色
- en: Deployment package
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署包
- en: Event testing
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件测试
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In order to follow along with this chapter, you will need to set up and configure
    your Go and AWS development environment as described in the previous chapter.
    Familiarity with Go is preferred but not required. The code bundle for this chapter
    is hosted on GitHub at [https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go](https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟随本章，您需要按照上一章中描述的设置和配置您的Go和AWS开发环境。熟悉Go是首选但不是必需的。本章的代码包托管在GitHub上，网址为[https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go](https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go)。
- en: Writing a Lambda function in Go
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用Go编写Lambda函数
- en: 'Follow the steps in this section to create your first Lambda function in Go
    from scratch:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 按照本节中的步骤从头开始创建您的第一个Go Lambda函数：
- en: 'To write a Lambda function, we need to install some dependencies. Hence, open
    a new terminal session, and install the Go Lambda package using the following
    command:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写Lambda函数需要安装一些依赖项。因此，打开一个新的终端会话，并使用以下命令安装Go Lambda包：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, open your favorite Go IDE or editor; in my case, I will work with VS
    Code. Create a new project directory in your **GOPATH** and then paste the following
    content into a `main.go` file:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开您喜欢的Go IDE或编辑器；在我的情况下，我将使用VS Code。在**GOPATH**中创建一个新的项目目录，然后将以下内容粘贴到`main.go`文件中：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The previous code uses the `lambda.Start()` method to register an entry-point
    handler that contains the code that will be executed when a Lambda function is
    invoked. Each language supported by Lambda has its own requirements for how a
    function handler can be defined. For Golang, the handler signature must meet the
    following criteria:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码使用`lambda.Start()`方法注册一个入口点处理程序，其中包含当调用Lambda函数时将执行的代码。Lambda支持的每种语言都有其自己的要求，用于定义如何定义函数处理程序。对于Golang，处理程序签名必须满足以下标准：
- en: It must be a function
  id: totrans-16
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它必须是一个函数
- en: It can have between 0 and 2 arguments
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以有0到2个参数
- en: It must return an error
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它必须返回一个错误
- en: 'Next, sign in to the AWS Management Console ([https://console.aws.amazon.com/console/home](https://console.aws.amazon.com/console/home))
    and choose Lambda from the Compute section:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，登录到AWS管理控制台（[https://console.aws.amazon.com/console/home](https://console.aws.amazon.com/console/home)）并从“计算”部分选择Lambda：
- en: '![](img/412343fb-3776-4b96-b9f2-50f5b67e7a32.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/412343fb-3776-4b96-b9f2-50f5b67e7a32.png)'
- en: 'In the AWS Lambda Console, click on the Create function button and follow the
    wizard to create your first Lambda function:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在AWS Lambda控制台中，点击“创建函数”按钮，然后按照向导创建您的第一个Lambda函数：
- en: '![](img/a5cdb37f-7e6a-4c25-b95e-2b9ae9d89638.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a5cdb37f-7e6a-4c25-b95e-2b9ae9d89638.png)'
- en: 'Select the Author from Scratch option, give your function a name, and then
    choose Go 1.x as the Runtime environment from the list of supported languages:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择从头开始的作者选项，为您的函数命名，然后从支持的语言列表中选择Go 1.x作为运行时环境：
- en: '![](img/ab9ba4d1-724a-44e2-90dc-a3f8b7e59aa4.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab9ba4d1-724a-44e2-90dc-a3f8b7e59aa4.png)'
- en: You must assign an IAM role (called an execution role) to your Lambda function.
    The IAM policies attached to that role define what AWS services your function
    code is authorized to interact with.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须为您的Lambda函数分配一个IAM角色（称为执行角色）。附加到该角色的IAM策略定义了您的函数代码被授权与哪些AWS服务进行交互。
- en: Execution role
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行角色
- en: 'Now that we have learned how to write our first Go Lambda function, let''s
    create a new IAM role from Identity and Access Management ([https://console.aws.amazon.com/iam/home](https://console.aws.amazon.com/iam/home))
    to grant the function access to AWS CloudWatch Logs:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何编写我们的第一个Go Lambda函数，让我们从身份和访问管理（[https://console.aws.amazon.com/iam/home](https://console.aws.amazon.com/iam/home)）中创建一个新的IAM角色，以授予函数访问AWS
    CloudWatch日志的权限：
- en: '![](img/fed0ecb8-e57c-4f10-bd5e-2c97d6399375.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fed0ecb8-e57c-4f10-bd5e-2c97d6399375.png)'
- en: 'In the permissions page, you can either choose an existing AWS managed policy
    called CloudWatchFullAccess or (as shown in Step 3) create a least-privilege IAM
    role (the second option is recommended by AWS; a chapter dedicated to this will
    discuss security best practices for Lambda functions in depth):'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在权限页面上，您可以选择一个现有的AWS托管策略，称为CloudWatchFullAccess，或者（如第3步所示）创建一个最小特权的IAM角色（AWS推荐的第二个选项；专门讨论安全最佳实践的章节将深入讨论Lambda函数）：
- en: '![](img/54765997-c910-430a-9ad0-1951e03e8c4e.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/54765997-c910-430a-9ad0-1951e03e8c4e.png)'
- en: 'Go ahead and click on the Create policy button, and create a policy by selecting
    the appropriate service (`CloudWatch`) from the visual editor:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续点击“创建策略”按钮，并通过从可视编辑器中选择适当的服务（`CloudWatch`）来创建一个策略：
- en: '![](img/6eb0c424-cde0-40b7-8aa8-7e519a3478d4.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6eb0c424-cde0-40b7-8aa8-7e519a3478d4.png)'
- en: 'For readers familiar with the JSON format, a JSON policy document can be used
    instead in the JSON tab. The document must have one statement that grants permissions
    to create log groups and log streams, and to upload log events to AWS CloudWatch:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于熟悉JSON格式的读者，可以在JSON选项卡中使用JSON策略文档。该文档必须有一个声明，授予创建日志组和日志流以及将日志事件上传到AWS CloudWatch的权限：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'On the Review policy page, type a Name and a Description for the policy:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“审阅策略”页面上，为策略输入名称和描述：
- en: '![](img/f2322533-cdd1-4dc5-b282-bc2dc39c21a1.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f2322533-cdd1-4dc5-b282-bc2dc39c21a1.png)'
- en: 'Go back to the Create role page and click on Refresh; you should see the policy
    that we created previously:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回“创建角色”页面，点击“刷新”，您应该看到我们之前创建的策略：
- en: '![](img/e08e45ad-56f4-466e-a29b-ee206af94ef5.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e08e45ad-56f4-466e-a29b-ee206af94ef5.png)'
- en: 'On the Review page, type a name for the role and choose Create role:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“审阅”页面上，为角色输入名称并选择“创建角色”：
- en: '![](img/8eeaac41-4450-4192-ba70-bed47810e001.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8eeaac41-4450-4192-ba70-bed47810e001.png)'
- en: 'Now that our role is defined, head back to the Lambda form creation and select
    the IAM role (you might need to refresh the page for the changes to take effect)
    from the Existing role drop-down list. Then, click the Create function button:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们的角色已经定义，返回Lambda表单创建并从现有角色下拉列表中选择IAM角色（可能需要刷新页面以使更改生效），然后点击“创建函数”按钮：
- en: '![](img/2b51eed3-fd9b-4482-901c-9ff3c6f15b75.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b51eed3-fd9b-4482-901c-9ff3c6f15b75.png)'
- en: Optionally, you can deploy a Lambda function using the AWS CLI. A more comprehensive
    discussion of this and its step-by-step process is reserved for [Chapter 6](3b3b7465-2646-4532-8303-9e0b8d06bc64.xhtml),
    *Deploying Your Serverless Application*.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 可以选择使用AWS CLI部署Lambda函数。有关此内容及其逐步过程的更全面讨论将保留在[第6章](3b3b7465-2646-4532-8303-9e0b8d06bc64.xhtml)中，“部署您的无服务器应用程序”中进行。
- en: 'The Lambda console will display a success message in green, indicating that
    your function has been successfully created:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda控制台将显示绿色的成功消息，表示您的函数已成功创建：
- en: '![](img/98a02fa0-b70d-4d9b-96ed-8aec263a7c0e.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/98a02fa0-b70d-4d9b-96ed-8aec263a7c0e.png)'
- en: After we write, package, and create the Lambda function, we have various configuration
    options to set that define how the code should be executed within Lambda. As shown
    in the preceding screenshot, you can trigger the Lambda function by different
    AWS services (called triggers).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写、打包和创建Lambda函数之后，我们有各种配置选项可设置，定义代码在Lambda中的执行方式。如前面的截图所示，您可以通过不同的AWS服务（称为触发器）触发Lambda函数。
- en: Leave the rest of the advanced settings unchanged (VPC, resource usage, versions,
    aliases, and concurrency) as they will be discussed in-depth in further chapters.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 将其余高级设置保持不变（VPC、资源使用、版本、别名和并发），因为它们将在后续章节中进行深入讨论。
- en: 'Because Go is a recently added language, the developers behind it haven''t
    added the capability for an inline editor yet, so you must provide an executable
    binary in a ZIP file format or reference an S3 bucket and object key where you
    have uploaded the package:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Go是最近添加的语言，其开发人员尚未添加内联编辑器的功能，因此您必须以ZIP文件格式提供可执行二进制文件，或者引用您已上传包的S3存储桶和对象键：
- en: '![](img/cf6af336-36cb-4fe1-a38b-e4226554ddb5.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cf6af336-36cb-4fe1-a38b-e4226554ddb5.png)'
- en: Deployment package
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署包
- en: In this section, we will see how to build a deployment package for the function
    and how to deploy it to the AWS Lambda console.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何为函数构建部署包以及如何将其部署到AWS Lambda控制台。
- en: Uploading a ZIP file
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传ZIP文件
- en: 'As mentioned in [Chapter 1](746d14b6-7349-4f9e-b76f-f56706e1d0d5.xhtml), *Go
    Serverless*, Go is a compiled language. Therefore, you must generate an executable
    binary using the following Shell script:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第1章](746d14b6-7349-4f9e-b76f-f56706e1d0d5.xhtml)“Go无服务器”中所述，Go是一种编译语言。因此，您必须使用以下Shell脚本生成可执行二进制文件：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The Lambda runtime environment is based on an **Amazon Linux AMI**; therefore,
    the handler should be compiled for Linux (note the use of the `GOOS` flag).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda运行时环境基于**Amazon Linux AMI**；因此，处理程序应为Linux编译（注意使用`GOOS`标志）。
- en: For Windows users, it's recommended you to use the `build-lambda-zip` tool to
    create a working ZIP file for Lambda.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows用户，建议您使用`build-lambda-zip`工具为Lambda创建一个可用的ZIP文件。
- en: 'Execute the Shell script as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下Shell脚本：
- en: '![](img/9a2cdf06-74fa-4cc7-9a83-8a4f00696fee.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9a2cdf06-74fa-4cc7-9a83-8a4f00696fee.png)'
- en: 'Now our ZIP file has been generated; you can now go back to the Lambda console
    and upload the ZIP file, making sure to update the Handler to main and save the
    results:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的ZIP文件已经生成；您现在可以返回Lambda控制台并上传ZIP文件，确保更新处理程序为main并保存结果：
- en: '![](img/f62c09cb-8c95-48a7-a6d7-246b4dc837e7.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f62c09cb-8c95-48a7-a6d7-246b4dc837e7.png)'
- en: The Handler configuration property must match the name of the executable file.
    If you build (`go build -o NAME`) the binary with a different name, you must update
    the Handler property accordingly.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 处理程序配置属性必须与可执行文件的名称匹配。如果您使用不同名称构建（`go build -o NAME`）二进制文件，则必须相应地更新处理程序属性。
- en: Uploading from Amazon S3
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Amazon S3上传
- en: 'Another way to upload the deployment package to Lambda is by using an AWS S3
    bucket to store the ZIP file. Under Storage, choose S3 to open the Amazon S3 console:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 将部署包上传到Lambda的另一种方法是使用AWS S3存储桶存储ZIP文件。在存储中，选择S3打开Amazon S3控制台：
- en: '![](img/2f930baf-b8a9-4528-b9a1-4a6501f1a198.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2f930baf-b8a9-4528-b9a1-4a6501f1a198.png)'
- en: 'Before you can upload the ZIP to Amazon S3, you must create a new bucket in
    the same AWS region where you created the Lambda function, as described in the
    following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在您可以将ZIP上传到Amazon S3之前，您必须在创建Lambda函数的同一AWS区域中创建一个新的存储桶，如下截图所示：
- en: '![](img/0de5d7c0-9d7f-4043-8294-ebe080a69df8.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0de5d7c0-9d7f-4043-8294-ebe080a69df8.png)'
- en: S3 buckets have a global namespace. Hence, it must be globally unique across
    all existing bucket names in Amazon S3.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: S3存储桶具有全局命名空间。因此，它必须在Amazon S3中所有现有存储桶名称中全局唯一。
- en: 'Now that you''ve created a bucket, drag and drop the ZIP file that you generated
    in the previous section into the destination bucket or use the Upload button:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经创建了一个存储桶，将在上一节中生成的ZIP文件拖放到目标存储桶中，或者使用上传按钮：
- en: '![](img/2227f1b1-ef0d-4640-bb0c-c4723367f6d1.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2227f1b1-ef0d-4640-bb0c-c4723367f6d1.png)'
- en: 'AWS CLI might be used to upload a deployment package to the S3 bucket as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用AWS CLI将部署包上传到S3存储桶，如下所示：
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Ensure that the `s3:PutObject` permission is granted to the IAM user to be able
    to upload an object using the AWS command line.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 确保IAM用户被授予`S3:PutObject`权限，以便使用AWS命令行上传对象。
- en: 'Once uploaded, select the ZIP file and copy the Link value to the clipboard:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 上传后，选择ZIP文件并将链接值复制到剪贴板：
- en: '![](img/ab64bc3c-3b3e-4ef2-b8bd-a2aa51543acf.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab64bc3c-3b3e-4ef2-b8bd-a2aa51543acf.png)'
- en: 'Go back to the Lambda Dashboard and select Upload a file from Amazon S3 from
    the Code entry type drop-down list, then paste the path in the deployment package
    in S3:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 返回Lambda仪表板，从“代码输入类型”下拉列表中选择“从Amazon S3上传文件”，然后粘贴S3中部署包的路径：
- en: '![](img/489b333e-e286-4a15-af88-713128355c7c.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/489b333e-e286-4a15-af88-713128355c7c.png)'
- en: Once saved, you're ready to test the Lambda function in the AWS Lambda Console.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 保存后，您可以在AWS Lambda控制台中测试Lambda函数。
- en: Event testing
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件测试
- en: 'The following procedure will demonstrate how to invoke the Lambda function
    from the Console:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将演示如何从控制台调用Lambda函数：
- en: Now that the function has been deployed, let's invoke it manually using the
    sample event data by clicking on the Test button in the top right of the console.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在函数已部署，让我们通过单击控制台右上角的“测试”按钮，手动使用示例事件数据来调用它。
- en: 'Selecting Configure test event opens a new window that has a drop-down. The
    items in the drop-down are sample JSON event templates which are mocks for source
    events or triggers (recall [Chapter 1](746d14b6-7349-4f9e-b76f-f56706e1d0d5.xhtml),
    *Go Serverless*) that can be consumed by the Lambda in order to test its functionality:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“配置测试事件”会打开一个新窗口，其中有一个下拉菜单。下拉菜单中的项目是样本JSON事件模板，这些模板是Lambda可以消耗的源事件或触发器的模拟，以便测试其功能（回顾[第1章](746d14b6-7349-4f9e-b76f-f56706e1d0d5.xhtml)，*Go
    Serverless*）：
- en: '![](img/d4d4c786-f965-4dba-8a24-6ffa7e04a358.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d4d4c786-f965-4dba-8a24-6ffa7e04a358.png)'
- en: 'Retain the default Hello World option. Type an event name and provide an empty
    JSON object:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保留默认的Hello World选项。输入事件名称并提供一个空的JSON对象：
- en: '![](img/b0cc4403-eea5-4c3d-9343-9ffac4c768db.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b0cc4403-eea5-4c3d-9343-9ffac4c768db.png)'
- en: 'Choose Create. After it''s been saved, you should see EmptyInput in the Test list:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择创建。保存后，您应该在测试列表中看到EmptyInput：
- en: '![](img/117b2716-dc07-4452-a260-186a9edd852d.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/117b2716-dc07-4452-a260-186a9edd852d.png)'
- en: 'Click on the Test button again. AWS Lambda will execute your function and display
    the following output:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次单击“测试”按钮。AWS Lambda将执行您的函数并显示以下输出：
- en: '![](img/4eccea08-95bf-4f06-ac86-adf5aa64dd27.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4eccea08-95bf-4f06-ac86-adf5aa64dd27.png)'
- en: In addition to the results returned by the function, we will be able to see Welcome
    to Serverless world, which is a global overview about the resource use and execution
    duration of the Lambda function, plus the logs written to CloudWatch by the Lambda
    function.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 除了函数返回的结果外，我们还将能够看到“欢迎来到无服务器世界”，这是关于Lambda函数的资源使用和执行持续时间的全局概述，以及Lambda函数写入CloudWatch的日志。
- en: Advanced monitoring with CloudWatch metrics and logging with CloudWatch logs
    and CloudTrail will be discussed in [Chapter 11](aab75412-293a-442c-a64a-260ac1219dd5.xhtml), *Monitoring
    and Troubleshooting*.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 将在[第11章](aab75412-293a-442c-a64a-260ac1219dd5.xhtml)中讨论使用CloudWatch指标进行高级监控以及使用CloudWatch日志和CloudTrail进行日志记录和故障排除。
- en: Congratulations! You have just set up and deployed your first Lambda function. The
    real power of Lambda comes in when you use triggers or source events with your
    Lambda function so that it executes based on events that happen. We will take
    a look at that in the next chapter.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您刚刚设置并部署了您的第一个Lambda函数。当您使用触发器或源事件与Lambda函数一起使用时，Lambda的真正力量就会显现出来，因此它会根据发生的事件执行。我们将在下一章中看看这一点。
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to a write a Lambda function in Go from scratch.
    Then, we covered how to create an execution role for Lambda to generate event
    logs to AWS CloudWatch. We further learned how to test and invoke this function
    manually from the AWS Lambda Console.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何从头开始使用Go编写Lambda函数。然后，我们介绍了如何为Lambda创建执行角色，以便将事件日志生成到AWS CloudWatch。我们还学习了如何从AWS
    Lambda控制台手动测试和调用此函数。
- en: In the next chapter, I will walk you through how to use triggers to invoke Lambda
    functions automatically and how to build an unified RESTful API on top using the
    AWS API Gateway to execute Lambda functions in response to HTTP requests.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我将向您介绍如何使用触发器自动调用Lambda函数，以及如何使用AWS API Gateway构建一个统一的RESTful API来执行Lambda函数以响应HTTP请求。
- en: Questions
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What's the command-line command to create an IAM role for an AWS Lambda function?
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为AWS Lambda函数创建IAM角色的命令行命令是什么？
- en: What's the command-line command to create a new S3 bucket in the Virginia region
    (*us-east-1*) and upload a Lambda deployment package to it?
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弗吉尼亚地区（*us-east-1*）创建一个新的S3存储桶并将Lambda部署包上传到其中的命令行命令是什么？
- en: What are the Lambda package size limits?
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Lambda包大小限制是多少？
- en: 10 MB
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 10 MB
- en: 50 MB
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 50 MB
- en: 250 MB
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 250 MB
- en: AWS Lambda Console supports editing Go source code.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS Lambda控制台支持编辑Go源代码。
- en: 'True'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'True'
- en: 'False'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'False'
- en: What's the underlying AWS Lambda execution environment?
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS Lambda执行环境的基础是什么？
- en: Amazon Linux Image
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon Linux镜像
- en: Microsoft Windows Server
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Windows Server
- en: How are events represented in AWS Lambda?
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS Lambda中如何表示事件？
