["```go\n{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n {\n \"Effect\": \"Allow\",\n     \"Action\": [\n        \"logs:CreateLogGroup\",\n        \"logs:CreateLogStream\",\n        \"logs:DescribeLogGroups\",\n        \"logs:DescribeLogStreams\",\n        \"logs:PutLogEvents\",\n        \"logs:GetLogEvents\",\n        \"logs:FilterLogEvents\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n```", "```go\npackage main\n\nimport \"github.com/aws/aws-lambda-go/lambda\"\n\ntype Response struct {    \n  StatusCode int `json:\"statusCode\"`\n  Body string `json:\"body\"`\n}\n\nfunc handler() (Response, error) {\n  return Response{\n    StatusCode: 200,\n    Body: \"Welcome to Serverless world\",\n  }\n, nil\n}\n\nfunc main() {\n  lambda.Start(handler)\n} \n```", "```go\naws lambda update-function-code --function-name HelloServerless \\\n --zip-file fileb://./deployment.zip \\\n --region us-east-1\n```", "```go\npackage main\n\nimport (\n  \"github.com/aws/aws-lambda-go/events\"\n  \"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler() (events.APIGatewayProxyResponse, error) {\n  return events.APIGatewayProxyResponse{\n    StatusCode: 200,\n    Body: \"Welcome to Serverless world\",\n  }, nil\n}\n\nfunc main() {\n  lambda.Start(handler)\n}\n```", "```go\npackage main\n\nimport (\n  \"encoding/json\"\n\n  \"github.com/aws/aws-lambda-go/events\"\n  \"github.com/aws/aws-lambda-go/lambda\"\n)\n\nvar movies = []struct {\n  ID int `json:\"id\"`\n  Name string `json:\"name\"`\n}{\n    {\n      ID: 1,\n      Name: \"Avengers\",\n    },\n    {\n      ID: 2,\n      Name: \"Ant-Man\",\n    },\n    {\n      ID: 3,\n      Name: \"Thor\",\n    },\n    {\n      ID: 4,\n      Name: \"Hulk\",\n    }, {\n      ID: 5,\n      Name: \"Doctor Strange\",\n    },\n}\n\nfunc findAll() (events.APIGatewayProxyResponse, error) {\n  response, err := json.Marshal(movies)\n  if err != nil {\n    return events.APIGatewayProxyResponse{}, err\n  }\n\n  return events.APIGatewayProxyResponse{\n    StatusCode: 200,\n    Headers: map[string]string{\n      \"Content-Type\": \"application/json\",\n    },\n    Body: string(response),\n  }, nil\n}\n\nfunc main() {\n  lambda.Start(findAll)\n}\n```", "```go\naws lambda create-function --function-name FindAllMovies \\\n --zip-file fileb://./deployment.zip \\\n --runtime go1.x --handler main \\\n --role arn:aws:iam::ACCOUNT_ID:role/FindAllMoviesRole \\\n --region us-east-1\n```", "```go\ncurl -sX GET https://51cxzthvma.execute-api.us-east-1.amazonaws.com/staging/movies | jq '.'\n```", "```go\n...\n\nfunc findOne(req events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {\n  id, err := strconv.Atoi(req.PathParameters[\"id\"])\n  if err != nil {\n    return events.APIGatewayProxyResponse{\n      StatusCode: 500,\n      Body:       \"ID must be a number\",\n    }, nil\n  }\n\n  response, err := json.Marshal(movies[id-1])\n  if err != nil {\n    return events.APIGatewayProxyResponse{\n      StatusCode: 500,\n      Body:       err.Error(),\n    }, nil\n  }\n\n  return events.APIGatewayProxyResponse{\n    StatusCode: 200,\n    Headers: map[string]string{\n      \"Content-Type\": \"application/json\",\n    },\n    Body: string(response),\n  }, nil\n}\n\nfunc main() {\n  lambda.Start(findOne)\n}\n```", "```go\naws lambda create-function --function-name FindOneMovie \\\n --zip-file fileb://./deployment.zip \\\n --runtime go1.x --handler main \\\n --role arn:aws:iam::ACCOUNT_ID:role/FindOneMovieRole \\\n --region us-east-1\n```", "```go\ncurl -sX https://51cxzthvma.execute-api.us-east-1.amazonaws.com/staging/movies/1 | jq '.' \n```", "```go\npackage main\n\nimport (\n  \"encoding/json\"\n\n  \"github.com/aws/aws-lambda-go/events\"\n  \"github.com/aws/aws-lambda-go/lambda\"\n)\n\ntype Movie struct {\n  ID int `json:\"id\"`\n  Name string `json:\"name\"`\n}\n\nvar movies = []Movie{\n  Movie{\n    ID: 1,\n    Name: \"Avengers\",\n  },\n  ...\n}\n\nfunc insert(req events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {\n  var movie Movie\n  err := json.Unmarshal([]byte(req.Body), &movie)\n  if err != nil {\n    return events.APIGatewayProxyResponse{\n      StatusCode: 400,\n      Body: \"Invalid payload\",\n    }, nil\n  }\n\n  movies = append(movies, movie)\n\n  response, err := json.Marshal(movies)\n  if err != nil {\n    return events.APIGatewayProxyResponse{\n      StatusCode: 500,\n      Body: err.Error(),\n    }, nil\n  }\n\n  return events.APIGatewayProxyResponse{\n    StatusCode: 200,\n    Headers: map[string]string{\n      \"Content-Type\": \"application/json\",\n    },\n    Body: string(response),\n  }, nil\n}\n\nfunc main() {\n  lambda.Start(insert)\n}\n```", "```go\naws lambda create-function --function-name InsertMovie \\\n --zip-file fileb://./deployment.zip \\\n --runtime go1.x --handler main \\\n --role arn:aws:iam::ACCOUNT_ID:role/InsertMovieRole \\\n --region us-east-1\n```", "```go\ncurl -sX POST -d '{\"id\":6, \"name\": \"Spiderman:Homecoming\"}' https://51cxzthvma.execute-api.us-east-1.amazonaws.com/staging/movies | jq '.'\n```", "```go\ncurl -sX POST -d '{\"id\":7, \"name\": \"Iron man\"}' https://51cxzthvma.execute-api.us-east-1.amazonaws.com/staging/movies | jq '.'\n```", "```go\ncurl -sX POST -d '{\"id\":8, \"name\": \"Captain America\"}' https://51cxzthvma.execute-api.us-east-1.amazonaws.com/staging/movies | jq '.'\n\n```"]