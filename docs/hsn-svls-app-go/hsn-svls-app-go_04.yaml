- en: Setting up API Endpoints with API Gateway
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用API网关设置API端点
- en: In the previous chapter, we learned how to build our first Lambda function with
    Go. We also learned how to invoke it manually from the console. To leverage the
    power of Lambda, in this chapter, we are going to learn how to trigger this Lambda
    function in response to incoming HTTP requests (event-driven architecture) using
    the AWS API Gateway service. At the end of this chapter, you will be familiar
    with API Gateway advanced topics such as resources, deployment stages, debugging,
    and much more.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何使用Go构建我们的第一个Lambda函数。我们还学习了如何从控制台手动调用它。为了利用Lambda的强大功能，在本章中，我们将学习如何在收到HTTP请求时触发这个Lambda函数（事件驱动架构）使用AWS
    API网关服务。在本章结束时，您将熟悉API网关高级主题，如资源、部署阶段、调试等。
- en: 'We will be covering the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Getting started with API Gateway
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用API网关
- en: Building a RESTful API
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建RESTful API
- en: Technical requirements
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter is a follow-up of the previous one, and hence it's recommended
    to read the previous chapter first to follow this part with ease. In addition,
    basic knowledge of RESTful API design and practices is needed. The code bundle
    for this chapter is hosted on GitHub at [https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go](https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是上一章的后续内容，因此建议先阅读上一章，以便轻松地理解本部分。此外，需要对RESTful API设计和实践有基本的了解。本章的代码包托管在GitHub上，网址为[https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go](https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go)。
- en: Getting started with API Gateway
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用API网关
- en: API Gateway is an AWS serverless API proxy service that allows you to create
    a single and unified entry point for all of your Lambda functions. It proxies
    and routes the incoming HTTP requests to the appropriate Lambda function (mapping).
    From a server-side perspective, it's a facade or a wrapper that sits on top of
    Lambda functions. However, from a client's perspective, it's just a single monolithic
    application.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: API网关是AWS无服务器API代理服务，允许您为所有Lambda函数创建一个单一且统一的入口点。它代理和路由传入的HTTP请求到适当的Lambda函数（映射）。从服务器端的角度来看，它是一个外观或包装器，位于Lambda函数的顶部。但是，从客户端的角度来看，它只是一个单一的单片应用程序。
- en: 'In addition to providing a single interface to the clients, and its scalability,
    API Gateway provides powerful features such as the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 除了为客户端提供单一接口和可伸缩性外，API网关还提供了以下强大功能：
- en: '**Caching**: You can cache endpoint responses, hence reducing the number of
    requests made to the Lambda functions (cost optimization) and enhancing the response
    time.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存**：您可以缓存端点响应，从而减少对Lambda函数的请求次数（成本优化）并增强响应时间。'
- en: '**CORS configuration**: By default, the browsers deny access to resources from
    a different domain. This policy can be overridden by enabling **Cross Origin Resource
    Sharing** (**CORS**) in the API Gateway.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CORS配置**：默认情况下，浏览器拒绝从不同域的资源访问。可以通过在API网关中启用**跨域资源共享**（**CORS**）来覆盖此策略。'
- en: CORS will be discussed in-depth in [Chapter 9](644f4baf-6536-4714-b312-f866c310b48a.xhtml),
    *Building a Frontend with S3*, with a practical example.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: CORS将在[第9章](644f4baf-6536-4714-b312-f866c310b48a.xhtml)中深入讨论，*使用S3构建前端*，并提供一个实际示例。
- en: '**Deployment stages/life cycle**: You can manage and maintain multiple API
    versions and environments (Sandbox, QA, staging, and production).'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署阶段/生命周期**：您可以管理和维护多个API版本和环境（沙盒、QA、暂存和生产）。'
- en: '**Monitoring**: Troubleshooting and debugging incoming requests and outgoing
    responses is simple and is done by enabling CloudWatch integration with API Gateway.
    It will push a stream of log events to AWS CloudWatch Logs and you can expose
    a set of metrics to CloudWatch, including:'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控**：通过启用与API网关的CloudWatch集成，简化故障排除和调试传入请求和传出响应。它将推送一系列日志事件到AWS CloudWatch日志，并且您可以向CloudWatch公开一组指标，包括：'
- en: Client-side errors, including 4XX and 5XX status codes
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端错误，包括4XX和5XX状态代码
- en: Total number of API requests in a given period
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在给定周期内的API请求总数
- en: Endpoint response time (latency)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端点响应时间（延迟）
- en: '**Visual editing**: You can describe your API resources and methods directly
    from the console without any coding or RESTful API knowledge.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可视化编辑**：您可以直接从控制台描述API资源和方法，而无需任何编码或RESTful API知识。'
- en: '**Documentation**: You can generate API documentation for each version of your
    API with the ability to export/import and publish the documentation to a Swagger
    specification.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档**：您可以为API的每个版本生成API文档，并具有导入/导出和发布文档到Swagger规范的能力。'
- en: '**Security and authentication**: You can secure your RESTful API endpoints
    with IAM roles and policies. API Gateway can also act as a firewall against DDoS
    attacks and SQL/scripts injection. Moreover, rate limiting or throttling can be
    enforced at this level.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全和身份验证**：您可以使用IAM角色和策略保护您的RESTful API端点。API网关还可以充当防火墙，防止DDoS攻击和SQL/脚本注入。此外，可以在此级别强制执行速率限制或节流。'
- en: That's enough theory. In the next section, we will go through how to set up
    API Gateway to trigger our Lambda function each time an HTTP request is received.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以上是足够的理论。在下一节中，我们将介绍如何设置API网关以在收到HTTP请求时触发我们的Lambda函数。
- en: In addition to its support for AWS Lambda, API Gateway can be used to invoke
    other AWS Services (EC2, S3, Kinesis, CloudFront, and so on) or external HTTP
    endpoints in response to HTTP requests.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 除了支持AWS Lambda外，API网关还可用于响应HTTP请求调用其他AWS服务（EC2、S3、Kinesis、CloudFront等）或外部HTTP端点。
- en: Setting up an API endpoint
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置API端点
- en: 'The following section describes how to trigger a Lambda function using API
    Gateway:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分描述了如何使用API网关触发Lambda函数：
- en: 'To set up an API endpoint, sign in into the **AWS Management Console** ([https://console.aws.amazon.com/console/home](https://console.aws.amazon.com/console/home)),
    navigate to the AWS Lambda Console, and select the Lambda function HelloServerless that
    we built in the previous chapter:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要设置API端点，请登录到**AWS管理控制台**（[https://console.aws.amazon.com/console/home](https://console.aws.amazon.com/console/home)），转到AWS
    Lambda控制台，并选择我们在上一章节中构建的Lambda函数HelloServerless：
- en: '![](img/ec552854-7f6a-4af7-a783-a47090e60fcf.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec552854-7f6a-4af7-a783-a47090e60fcf.png)'
- en: 'Search for API Gateway from the list of triggers available and click on it:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从可用触发器列表中搜索API网关并单击它：
- en: '![](img/7c108355-b25b-4606-999f-9f0eae4e15fc.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7c108355-b25b-4606-999f-9f0eae4e15fc.png)'
- en: The list of available triggers may change depending on which AWS region you're
    using because AWS Lambda-supported source events are not available in all AWS
    regions.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 可用触发器的列表可能会根据您使用的AWS区域而变化，因为AWS Lambda支持的源事件并不在所有AWS区域都可用。
- en: 'At the bottom of the page, a Configure triggers section will be displayed,
    as shown in the following screenshot:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 页面底部将显示一个“配置触发器”部分，如下面的屏幕截图所示：
- en: '![](img/b890ed7d-ec62-413d-8aba-988cfce91843.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b890ed7d-ec62-413d-8aba-988cfce91843.png)'
- en: 'Create a new API, give it a name, set the deployment stage as `staging`, and
    make the API open to the public:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的API，为其命名，将部署阶段设置为“staging”，并将API公开给公众：
- en: '![](img/c50f7775-2b70-4e2c-9889-a2a85a45bdfd.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c50f7775-2b70-4e2c-9889-a2a85a45bdfd.png)'
- en: 'The form will have to be filled in with the following parameters:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 表格将需要填写以下参数：
- en: '**API name**: A unique identifier of the API.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API名称**：API的唯一标识符。'
- en: '**Deployment stage**: The API stage environment, which helps separate and maintain
    different API environments (dev, staging, production, and so on) and versions/releases
    (major, minor, beta, and so on). Plus, it''s very handy if a Continuous Integration/Continuous
    Deployment pipeline is implemented.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署阶段**：API阶段环境，有助于分隔和维护不同的API环境（开发、staging、生产等）和版本/发布（主要、次要、测试等）。此外，如果实施了持续集成/持续部署流水线，它非常方便。'
- en: '**Security**: It defines if the API endpoint will be public or private:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：它定义了API端点是公开还是私有：'
- en: '**Open**: Publicly accessible and can be invoked by everyone'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开放**：可公开访问，任何人都可以调用'
- en: '**AWS IAM**: Will be invoked by users with granted IAM permissions'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS IAM**：将由被授予IAM权限的用户调用'
- en: '**Open with Access Key**: Requires an AWS access key to be invoked'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用访问密钥打开**：需要AWS访问密钥才能调用'
- en: 'Once the API is defined, the following section will be displayed:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义API后，将显示以下部分：
- en: '![](img/82193949-da9d-43db-a379-08813ace3a85.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/82193949-da9d-43db-a379-08813ace3a85.png)'
- en: 'Click on the Save button at the top of the page to create the API Gateway trigger. Once
    saved, the API Gateway Invoke URL will be generated with the following format:
    `https://API_ID.execute-api.AWS_REGION.amazonaws.com/DEPLOYMENT_STAGE/FUNCTION_NAME`,
    as shown in the following screenshot:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击页面顶部的“保存”按钮以创建API网关触发器。保存后，API网关调用URL将以以下格式生成：`https://API_ID.execute-api.AWS_REGION.amazonaws.com/DEPLOYMENT_STAGE/FUNCTION_NAME`，如下面的屏幕截图所示：
- en: '![](img/c7e5a33e-5bab-4a0d-ac91-0443b7a6cb54.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c7e5a33e-5bab-4a0d-ac91-0443b7a6cb54.png)'
- en: 'Open your favorite browser with the API Invoke URL; you should see a message
    like the one shown in the following screenshot:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用API调用URL在您喜欢的浏览器中打开，您应该会看到如下屏幕截图中所示的消息：
- en: '![](img/8c7c1435-c10c-49a2-8412-df2be96ce26c.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c7c1435-c10c-49a2-8412-df2be96ce26c.png)'
- en: The Internal server error message means that something went wrong on Lambda's
    side. To help us troubleshoot and debug the issue, we will enable the logging
    feature in the API Gateway.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内部服务器错误消息意味着Lambda方面出现了问题。为了帮助我们解决问题并调试问题，我们将在API网关中启用日志记录功能。
- en: Debugging and troubleshooting
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试和故障排除
- en: 'In order to troubleshoot the API Gateway server error, we need to enable logs
    as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决API网关服务器错误，我们需要按照以下步骤启用日志记录：
- en: First, we need to grant the API Gateway access to CloudWatch in order to be
    able to push API Gateway log events to CloudWatch Logs. Therefore, we need to
    create a new IAM role from identity and access management.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要授予API网关访问CloudWatch的权限，以便能够将API网关日志事件推送到CloudWatch日志中。因此，我们需要从身份和访问管理中创建一个新的IAM角色。
- en: Some parts have been skipped to avoid me repeating myself. If you need a step
    by step procedure, make sure that you've followed on from the previous chapter.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免重复，有些部分已被跳过。如果您需要逐步操作，请确保您已经从上一章节开始。
- en: 'The following screenshot will give you a glimpse of how to create a IAM role:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的屏幕截图将让您了解如何创建IAM角色：
- en: '![](img/bd8f0a0c-1dc3-47e3-9afa-06b63bef37f1.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd8f0a0c-1dc3-47e3-9afa-06b63bef37f1.png)'
- en: 'Select API Gateway from the list of AWS services, then, on the permissions
    page, you can do either of the following:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从AWS服务列表中选择API网关，然后在权限页面上，您可以执行以下操作之一：
- en: 'Select an existing policy called AmazonAPIGatewayPushToCloudWatchLogs, as shown
    in the following screenshot:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择一个名为AmazonAPIGatewayPushToCloudWatchLogs的现有策略，如下面的屏幕截图所示：
- en: '![](img/a062fcf9-e705-4f16-ab36-220ba6f9a605.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a062fcf9-e705-4f16-ab36-220ba6f9a605.png)'
- en: 'Create a new Policy document with the following JSON:'
  id: totrans-57
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的策略文档，其中包含以下JSON：
- en: '[PRE0]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, assign a name to the role and copy the Role ARN (**Amazon Resource Name**)
    to the clipboard:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为角色指定一个名称，并将角色ARN（Amazon资源名称）复制到剪贴板上：
- en: '![](img/682c4898-26b9-431a-b1fb-b5ee95adba11.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/682c4898-26b9-431a-b1fb-b5ee95adba11.png)'
- en: 'Then, select API Gateway from the Networking & Content Delivery section. Click
    on Settings and paste the IAM role ARN that we created earlier:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，从“网络和内容传递”部分选择API网关。单击“设置”，粘贴我们之前创建的IAM角色ARN：
- en: '![](img/53c94f8d-7384-4dc9-b0f9-3ced14c6d161.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/53c94f8d-7384-4dc9-b0f9-3ced14c6d161.png)'
- en: 'Save it and select the API created by the Lambda function. Click on Stages in
    the navigation pane:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并选择由Lambda函数创建的API。在导航窗格中单击“阶段”：
- en: '![](img/e2d174ac-a164-491b-8809-4669599eb33b.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e2d174ac-a164-491b-8809-4669599eb33b.png)'
- en: 'Then, click the Logs tab and under CloudWatch Settings, click on Enable CloudWatch
    Logs and select the Log level you want to catch. In this case, we are interested
    in error logs:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击日志选项卡，在CloudWatch设置下，点击启用CloudWatch日志，并选择要捕获的日志级别。在这种情况下，我们对错误日志感兴趣：
- en: '![](img/9ab2557f-c566-4b95-9081-3c6989bd55b7.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9ab2557f-c566-4b95-9081-3c6989bd55b7.png)'
- en: 'Try to invoke the Lambda again with the API URL and jump to the AWS CloudWatch
    Logs Console; you will see that a new Log Group has been created with the format *API-Gateway-Execution-Logs_AP_ID/DEPLOYMENT_STAGE*:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试使用API URL再次调用Lambda，并跳转到AWS CloudWatch日志控制台；您会看到已创建了一个新的日志组，格式为*API-Gateway-Execution-Logs_AP_ID/DEPLOYMENT_STAGE*：
- en: '![](img/041d48b4-8982-4bf3-8151-aedc5c1ceea9.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/041d48b4-8982-4bf3-8151-aedc5c1ceea9.png)'
- en: 'Click on the log group and you will see log streams generated by the API Gateway:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击日志组，您将看到API网关生成的日志流：
- en: '![](img/09c34f90-5688-45da-9238-9c480fbcf6fb.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/09c34f90-5688-45da-9238-9c480fbcf6fb.png)'
- en: 'The preceding log states that the response returned from the Lambda function
    is not in the correct format. The correct format of response should contain the
    following attributes:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前面的日志表明，从Lambda函数返回的响应格式不正确。正确的响应格式应包含以下属性：
- en: '**Body**: It is a required attribute that contains the function''s actual output.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Body**：这是一个必需的属性，包含函数的实际输出。'
- en: '**Status Code***:* This is the function response status code, as described
    in the HTTP/1.1 standard ([https://tools.ietf.org/html/rfc7231#section-6](https://tools.ietf.org/html/rfc7231#section-6)).
    It''s mandatory, otherwise the API Gateway will display a 5XX error, as seen in
    the previous section.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态码**：这是函数响应状态码，如HTTP/1.1标准中所述([https://tools.ietf.org/html/rfc7231#section-6](https://tools.ietf.org/html/rfc7231#section-6))。这是强制性的，否则API网关将显示5XX错误，如前一节所示。'
- en: '**Optional parameters**: It include things like `Headers` and `IsBase64Encoded`.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可选参数**：它包括`Headers`和`IsBase64Encoded`等内容。'
- en: In the upcoming section, we will fix this incorrect response by formatting the
    response returned by the Lambda function to meet the format expected by the API
    Gateway.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将通过格式化Lambda函数返回的响应来修复此错误响应，以满足API网关期望的格式。
- en: Invoking the function with an HTTP request
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用HTTP请求调用函数
- en: 'As seen in the previous section, we need to fix the response returned by the
    Lambda function. Instead of returning a simple string variable, we will return
    a `struct` variable with a `Body` attribute which will contain the actual string
    value, and a `StatusCode` with `200` value to tell API Gateway that the request
    was successful. To do so, update the `main.go` file to match the following signature:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一节所示，我们需要修复Lambda函数返回的响应。我们将返回一个包含实际字符串值的`struct`变量，以及一个`StatusCode`，其值为`200`，告诉API网关请求成功。为此，更新`main.go`文件以匹配以下签名：
- en: '[PRE1]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once updated, build the deployment package with the Shell script provided in
    the previous chapter and upload the package to Lambda using the AWS Lambda Console
    or use the following AWS CLI command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后，使用上一章节提供的Shell脚本构建部署包，并使用AWS Lambda控制台上传包到Lambda，或使用以下AWS CLI命令：
- en: '[PRE2]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Ensure that you grant `lambda:CreateFunction` and `lambda:UpdateFunctionCode`
    permissions to the IAM user to be able to use the AWS command line throughout
    this chapter.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您授予IAM用户`lambda:CreateFunction`和`lambda:UpdateFunctionCode`权限，以便在本章节中使用AWS命令行。
- en: 'Head back to your web browser and invoke the API Gateway URL again:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到您的网络浏览器，并再次调用API网关URL：
- en: '![](img/d26a326f-64ed-4c68-ab2d-4922e7001f60.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d26a326f-64ed-4c68-ab2d-4922e7001f60.png)'
- en: Congratulations! You have just built your first event-driven function with Lambda
    and API Gateway.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您刚刚使用Lambda和API网关构建了您的第一个事件驱动函数。
- en: 'For quick reference, the Lambda Go package offers an easier way to integrate
    Lambda with the API Gateway by using the `APIGatewayProxyResponse` structure as
    follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 供快速参考，Lambda Go包提供了一种更容易地将Lambda与API网关集成的方法，即使用`APIGatewayProxyResponse`结构。
- en: '[PRE3]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now that we know how to invoke our Lambda function in response to HTTP requests,
    let's go further and build a RESTful API with API Gateway.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何在响应HTTP请求时调用Lambda函数，让我们进一步构建一个带有API网关的RESTful API。
- en: Building a RESTful API
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建RESTful API
- en: In this section, we will design, build, and deploy a RESTful API from scratch
    to explore some advanced topics involving Lambda and API Gateway.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将从头开始设计、构建和部署一个RESTful API，以探索涉及Lambda和API网关的一些高级主题。
- en: API architecture
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API架构
- en: 'Before going into further detail about the architecture, we will look at an
    AIP that will help a local movie rental shop in managing their available movies.
    The following diagram shows how the API Gateway and Lambda fit into the API architecture:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在进一步详细介绍架构之前，我们将看一下一个API，它将帮助本地电影租赁店管理其可用电影。以下图表显示了API网关和Lambda如何适应API架构：
- en: '![](img/6db48f44-d52f-4e97-bfd3-7ff4dfe20831.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6db48f44-d52f-4e97-bfd3-7ff4dfe20831.png)'
- en: AWS Lambda empowers microservice development. That being said, each endpoint
    triggers a different Lambda function. These functions are independent of one another
    and can be written in different languages. Hence, this leads to scaling at function
    level, easier unit testing, and loose coupling.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda赋予了微服务开发的能力。也就是说，每个端点触发不同的Lambda函数。这些函数彼此独立，可以用不同的语言编写。因此，这导致了在函数级别的扩展、更容易的单元测试和松散的耦合。
- en: All requests from clients first go through the API Gateway. It then routes the
    incoming request to the right Lambda function accordingly.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 所有来自客户端的请求首先经过API网关。然后将传入的请求相应地路由到正确的Lambda函数。
- en: Note that a single Lambda function can `Handle` multiple HTTP methods (`GET`,
    `POST`, `PUT`, `DELETE`, and so on). In order to leverage the power of microservices,
    we will create multiple Lambda functions for each functionality. However, building
    a single Lambda function to handle multiple endpoints could be a good exercise.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，单个Lambda函数可以处理多个HTTP方法（`GET`，`POST`，`PUT`，`DELETE`等）。为了利用微服务的优势，我们将为每个功能创建多个Lambda函数。但是，构建一个单一的Lambda函数来处理多个端点可能是一个很好的练习。
- en: Endpoints design
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 端点设计
- en: Now that the architecture has been defined, we will go through the implementation
    of the functionalities described in the previous diagram.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在架构已经定义好了，我们将实现前面图表中描述的功能。
- en: The GET method
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GET方法
- en: 'The first feature to implement is listing movies. That''s where the `GET` method
    comes into play. The following steps are to be referred to in order to do this:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现的第一个功能是列出电影。这就是`GET`方法发挥作用的地方。要执行此操作，需要参考以下步骤：
- en: 'Create a Lambda function that registers a `findAll` handler. This handler transforms
    a list of `movies` structure to a `string`, and then returns this string wrapped
    by the `APIGatewayProxyResponse` variable along with a 200 HTTP status code. It
    also handles errors in case of conversion failure. The handler implementation
    is as follows:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个Lambda函数来注册`findAll`处理程序。此处理程序将`movies`结构的列表转换为`string`，然后将此字符串包装在`APIGatewayProxyResponse`变量中，并返回带有200
    HTTP状态代码的字符串。它还处理转换失败的错误。处理程序的实现如下：
- en: '[PRE4]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Instead of hardcoding the HTTP status code, you can use the `net/http` Go package
    and use a built-in status code variables such as `http.StatusOK`, `http.StatusCreated`,
    `http.StatusBadRequest`, `http.StatusInternalServerError`, and so on.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`net/http` Go包而不是硬编码HTTP状态代码，并使用内置的状态代码变量，如`http.StatusOK`，`http.StatusCreated`，`http.StatusBadRequest`，`http.StatusInternalServerError`等。
- en: 'Next, create a new Lambda function using the AWS CLI after building the ZIP
    file:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在构建ZIP文件后，使用AWS CLI创建一个新的Lambda函数：
- en: '[PRE5]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`FindAllMoviesRole` should be created in advance, as described in the previous
    chapter, with permissions to allow streaming Lambda logs to AWS CloudWatch.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`FindAllMoviesRole`应该事先创建，如前一章所述，具有允许流式传输Lambda日志到AWS CloudWatch的权限。'
- en: 'Heading back to the AWS Lambda Console; you should see that the function has
    been created successfully:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回AWS Lambda控制台；您应该看到函数已成功创建：
- en: '![](img/68a10a54-c57b-4215-bc13-5e5963bef6cf.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/68a10a54-c57b-4215-bc13-5e5963bef6cf.png)'
- en: 'Create a sample event with an empty JSON, as the function doesn''t expect any
    argument, and click on the Test button:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有空JSON的示例事件，因为该函数不需要任何参数，并单击“测试”按钮：
- en: '![](img/3ded86f5-21f6-43db-bf03-7788caf6e811.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ded86f5-21f6-43db-bf03-7788caf6e811.png)'
- en: You will notice in the previous screenshot that the function returns the expected
    output in a JSON format.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到在前一个屏幕截图中，该函数以JSON格式返回了预期的输出。
- en: 'Now that the function has been defined, we need to create a new API Gateway
    in order to trigger it:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在函数已经定义好了，我们需要创建一个新的API网关来触发它：
- en: '![](img/4a6419f0-5de2-4331-a49d-fdc40860d891.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4a6419f0-5de2-4331-a49d-fdc40860d891.png)'
- en: 'Next, from the Actions drop-down list, select Create resource and name it movies:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从“操作”下拉列表中选择“创建资源”，并将其命名为movies：
- en: '![](img/4035b98f-73ab-455a-8b9b-452485e533a8.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4035b98f-73ab-455a-8b9b-452485e533a8.png)'
- en: 'Expose a GET method on this `/movies` resource by clicking on Create Method.
    Choose Lambda Function under the Integration type section and select the *FindAllMovies*
    function:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击“创建方法”在`/movies`资源上公开一个GET方法。在“集成类型”部分下选择Lambda函数，并选择*FindAllMovies*函数：
- en: '![](img/fd7952a6-1fe9-4a99-b4dd-fc1fb6204c57.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd7952a6-1fe9-4a99-b4dd-fc1fb6204c57.png)'
- en: 'To deploy the API, select Deploy API from the Actions drop-down list.  You
    will be prompted to create a new deployment stage:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要部署API，请从“操作”下拉列表中选择“部署API”。您将被提示创建一个新的部署阶段：
- en: '![](img/048ca6a2-b121-4e8e-a884-263a07f18a3a.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/048ca6a2-b121-4e8e-a884-263a07f18a3a.png)'
- en: 'Once the deployment stage is created, an invocation URL will be displayed:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建部署阶段后，将显示一个调用URL：
- en: '![](img/0b3c50d4-bbb7-44fd-b5c8-b24f44667c92.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b3c50d4-bbb7-44fd-b5c8-b24f44667c92.png)'
- en: 'Point your browser to the URL given or use a modern REST client like Postman
    or Insomnia. I opted to go with the cURL tool as it is installed by default on
    almost all operating systems:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将浏览器指向给定的URL，或者使用像Postman或Insomnia这样的现代REST客户端。我选择使用cURL工具，因为它默认安装在几乎所有操作系统上：
- en: '[PRE6]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding command will return a list of movies in a JSON format:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将以JSON格式返回电影列表：
- en: '![](img/21ebbf74-2264-4953-8197-bae5bcd7ebbb.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/21ebbf74-2264-4953-8197-bae5bcd7ebbb.png)'
- en: When calling the `GET` endpoint, the request will go through the API Gateway,
    which will trigger the `findAll` handler. This returns a response which is proxied
    by the API Gateway to the client in a JSON format.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用`GET`端点时，请求将通过API网关，触发`findAll`处理程序。这将返回一个以JSON格式代理给客户端的响应。
- en: Now that the `findAll` function has been deployed, we can implement a `findOne`
    function to search for a movie by its ID.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`findAll`函数已经部署，我们可以实现一个`findOne`函数来按其ID搜索电影。
- en: The GET method with parameters
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带参数的GET方法
- en: 'The `findOne` handler expects the `APIGatewayProxyRequest` argument that contains
    the event input. Then, it uses the `PathParameters` method to get the movie ID
    and validate it. If the ID provided is not a valid number, the `Atoi` method will
    return an error and a 500 error code will be returned to the client. Otherwise,
    a movie will be fetched based on the index and returned to the client with a 200
    OK status wrapped in `APIGatewayProxyResponse`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`findOne`处理程序期望包含事件输入的`APIGatewayProxyRequest`参数。然后，它使用`PathParameters`方法获取电影ID并验证它。如果提供的ID不是有效数字，则`Atoi`方法将返回错误，并将500错误代码返回给客户端。否则，将根据索引获取电影，并以包含`APIGatewayProxyResponse`的200
    OK状态返回给客户端：'
- en: '[PRE7]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that in the preceding code, we have used both methods of handling errors.
    The first is the `err.Error()` method, which returns a built-in Go error message
    that's raised when the encoding fails. The second one is a user-defined error,
    which is error-specific and easy to understand and debug from the client's perspective.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在上述代码中，我们使用了处理错误的两种方法。第一种是`err.Error()`方法，当编码失败时返回内置的Go错误消息。第二种是用户定义的错误，它是特定于错误的，易于从客户端的角度理解和调试。
- en: 'Similarly to the `FindAllMovies` function, create a new Lambda function for
    searching for a movie:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于`FindAllMovies`函数，为搜索电影创建一个新的Lambda函数：
- en: '[PRE8]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Go back to API Gateway console, create a new resource, and expose the `GET`
    method, and then link the resource to the `FindOneMovie` function. Note the use
    of the `{id}` placeholder in the path. The value of `id` will be made available
    via the `APIGatewayProxyResponse` object. The following screenshot depicts this:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 返回API Gateway控制台，创建一个新资源，并公开`GET`方法，然后将资源链接到`FindOneMovie`函数。请注意路径中的`{id}`占位符的使用。`id`的值将通过`APIGatewayProxyResponse`对象提供。以下屏幕截图描述了这一点：
- en: '![](img/72a7969a-7868-45fb-9f68-59b39d73e2c5.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/72a7969a-7868-45fb-9f68-59b39d73e2c5.png)'
- en: 'Redeploy the API and use the following cURL command to test the endpoint:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 重新部署API，并使用以下cURL命令测试端点：
- en: '[PRE9]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following JSON will be returned:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 将返回以下JSON：
- en: '![](img/71fb6d67-279e-4739-a3be-0dabdc8aa39c.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/71fb6d67-279e-4739-a3be-0dabdc8aa39c.png)'
- en: When the API URL is invoked with an ID, the movie corresponding to the ID is
    returned if it exists.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用ID调用API URL时，如果存在，将返回与ID对应的电影。
- en: The POST method
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: POST方法
- en: 'Now we know how the GET method works with and without path parameters. The
    next step will be to pass a JSON payload to a Lambda function through the API
    Gateway. The code is self-explanatory. It converts the request input to a movie
    structure, adds it to the list of movies, and returns the new list of movies in
    a JSON format:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何使用路径参数和不使用路径参数来使用GET方法。下一步将是通过API Gateway向Lambda函数传递JSON有效负载。代码是不言自明的。它将请求输入转换为电影结构，将其添加到电影列表中，并以JSON格式返回新的电影列表：
- en: '[PRE10]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Next, create a new Lambda function for `InsertMovie` with the following command*:*
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用以下命令为`InsertMovie`创建一个新的Lambda函数*：*
- en: '[PRE11]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, create a `POST` method on the `/movies` resource and link it to the `InsertMovie`
    function:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`/movies`资源上创建一个`POST`方法，并将其链接到`InsertMovie`函数：
- en: '![](img/60b78a39-0b53-4814-b6e9-2f69bce47766.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/60b78a39-0b53-4814-b6e9-2f69bce47766.png)'
- en: 'To test it out, use the following cURL command with the `POST` verb and the `-d`
    flag, followed by a JSON string (with the `id` and `name` attributes):'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试它，使用以下cURL命令，使用`POST`动词和`-d`标志，后跟JSON字符串（带有`id`和`name`属性）：
- en: '[PRE12]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The preceding command will return the following JSON response:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将返回以下JSON响应：
- en: '![](img/fe9cd668-035f-41ee-ba7d-6f2bead59d27.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fe9cd668-035f-41ee-ba7d-6f2bead59d27.png)'
- en: 'As you can see, the new movie has been inserted successfully. If you test it
    again, it should work as expected:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，新电影已成功插入。如果再次测试，它应该按预期工作：
- en: '[PRE13]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The preceding command will return the following JSON response:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将返回以下JSON响应：
- en: '![](img/c6d4771b-cdbe-43a8-968f-01e87e45bfd0.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c6d4771b-cdbe-43a8-968f-01e87e45bfd0.png)'
- en: 'As you can see, it was successful and the movie was again inserted as expected,
    but what if we wait few minutes and try to insert a third movie? The following
    command will be used to execute it again:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，它成功了，并且电影再次按预期插入，但是如果我们等待几分钟并尝试插入第三部电影会怎样？以下命令将用于再次执行它：
- en: '[PRE14]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once again, a new JSON response will be returned:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，将返回一个新的JSON响应：
- en: '![](img/460bf1f2-44ca-4dc9-b2a3-1b2cbe92fe02.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/460bf1f2-44ca-4dc9-b2a3-1b2cbe92fe02.png)'
- en: You will find that the movies with IDs 6 and 7 have been removed; why did this
    happen?  It's simple. If you remember from [Chapter 1](746d14b6-7349-4f9e-b76f-f56706e1d0d5.xhtml), *Go
    Serverless*, the Lambda functions are stateless. When the `InsertMovie` function
    is invoked for the first time (first insert), AWS Lambda creates a container and
    deploys the function payload to the container. Then, it remains active for a few
    minutes before it is terminated (**warm start**), which explains why the second insert
    passed. In the third insert, the container is already terminated, and hence Lambda
    creates a new container (**cold start**) to handle the insert.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 您会发现ID为6和7的电影已被移除；为什么会这样？很简单。如果您还记得[第1章](746d14b6-7349-4f9e-b76f-f56706e1d0d5.xhtml)中的*Go
    Serverless*，Lambda函数是无状态的。当第一次调用`InsertMovie`函数（第一次插入）时，AWS Lambda会创建一个容器并将函数有效负载部署到容器中。然后，在被终止之前保持活动状态几分钟（**热启动**），这就解释了为什么第二次插入会成功。在第三次插入中，容器已经被终止，因此Lambda会创建一个新的容器（**冷启动**）来处理插入。
- en: 'Therefore, the previous state is lost. The following diagram illustrates the
    cold/warm start issue:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，之前的状态已丢失。以下图表说明了冷/热启动问题：
- en: '![](img/be7e04f8-2874-4469-8b8d-0e397ac9a9ad.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/be7e04f8-2874-4469-8b8d-0e397ac9a9ad.png)'
- en: This explains why Lambda functions should be stateless and why we should not
    make any assumptions that the state will be preserved from one invocation to the
    next. So, how can we manage data persistency when working with serverless applications?
    The answer is by using an external database like DynamoDB, which will be the subject
    of the upcoming chapter.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这解释了为什么Lambda函数应该是无状态的，以及为什么我们不应该假设状态会从一次调用到下一次调用中保留。那么，在处理无服务器应用程序时，我们如何管理数据持久性呢？答案是使用DynamoDB等外部数据库，这将是即将到来的章节的主题。
- en: Summary
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to build a RESTful API from scratch with Lambda
    and API Gateway. We also covered how to debug and troubleshoot incoming API Gateway
    requests by enabling the CloudWatch logs feature, plus how to create an API deployment
    stage and how to create multiple endpoints with different HTTP methods. Finally,
    we learned about the cold/warm container issue and why Lambda functions should
    be stateless.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何使用Lambda和API Gateway从头开始构建RESTful API。我们还介绍了如何通过启用CloudWatch日志功能来调试和解决传入的API
    Gateway请求，以及如何创建API部署阶段以及如何创建具有不同HTTP方法的多个端点。最后，我们了解了冷/热容器问题以及为什么Lambda函数应该是无状态的。
- en: In the upcoming chapter, we will use DynamoDB as a database to manage data persistency
    for our API.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将使用DynamoDB作为数据库，为我们的API管理数据持久性。
