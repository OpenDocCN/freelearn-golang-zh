["```go\nfunc main() {\n  cfg, err := external.LoadDefaultAWSConfig()\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  movies, err := readMovies(\"movies.json\")\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  for _, movie := range movies {\n    fmt.Println(\"Inserting:\", movie.Name)\n    err = insertMovie(cfg, movie)\n    if err != nil {\n      log.Fatal(err)\n    }\n  }\n\n}\n```", "```go\nfunc readMovies(fileName string) ([]Movie, error) {\n  movies := make([]Movie, 0)\n\n  data, err := ioutil.ReadFile(fileName)\n  if err != nil {\n    return movies, err\n  }\n\n  err = json.Unmarshal(data, &movies)\n  if err != nil {\n    return movies, err\n  }\n\n  return movies, nil\n}\n```", "```go\nfunc insertMovie(cfg aws.Config, movie Movie) error {\n  item, err := dynamodbattribute.MarshalMap(movie)\n  if err != nil {\n    return err\n  }\n\n  svc := dynamodb.New(cfg)\n  req := svc.PutItemRequest(&dynamodb.PutItemInput{\n    TableName: aws.String(\"movies\"),\n    Item: item,\n  })\n  _, err = req.Send()\n  if err != nil {\n    return err\n  }\n  return nil\n}\n```", "```go\nAWS_REGION=us-east-1 go run init-db.go\n```", "```go\nfunc findAll() (events.APIGatewayProxyResponse, error) {\n  cfg, err := external.LoadDefaultAWSConfig()\n  if err != nil {\n    return events.APIGatewayProxyResponse{\n      StatusCode: http.StatusInternalServerError,\n      Body: \"Error while retrieving AWS credentials\",\n    }, nil\n  }\n\n  svc := dynamodb.New(cfg)\n  req := svc.ScanRequest(&dynamodb.ScanInput{\n    TableName: aws.String(os.Getenv(\"TABLE_NAME\")),\n  })\n  res, err := req.Send()\n  if err != nil {\n    return events.APIGatewayProxyResponse{\n      StatusCode: http.StatusInternalServerError,\n      Body: \"Error while scanning DynamoDB\",\n    }, nil\n  }\n\n  response, err := json.Marshal(res.Items)\n  if err != nil {\n    return events.APIGatewayProxyResponse{\n      StatusCode: http.StatusInternalServerError,\n      Body: \"Error while decoding to string value\",\n    }, nil\n  }\n\n  return events.APIGatewayProxyResponse{\n    StatusCode: 200,\n    Headers: map[string]string{\n      \"Content-Type\": \"application/json\",\n    },\n    Body: string(response),\n  }, nil\n}\n```", "```go\naws lambda update-function-code --function-name FindAllMovies \\\n --zip-file fileb://./deployment.zip \\\n --region us-east-1\n```", "```go\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"1\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"dynamodb:Scan\",\n      \"Resource\": [\n        \"arn:aws:dynamodb:us-east-1:ACCOUNT_ID:table/movies/index/ID\",\n        \"arn:aws:dynamodb:us-east-1:ACCOUNT_ID:table/movies\"\n      ]\n    }\n  ]\n}\n```", "```go\naws lambda update-function-configuration --function-name FindAllMovies \\\n --environment Variables={TABLE_NAME=movies} \\\n --region us-east-1\n```", "```go\ncurl -sX GET https://51cxzthvma.execute-api.us-east-1.amazonaws.com/staging/movies | jq '.'\n```", "```go\nmovies := make([]Movie, 0)\nfor _, item := range res.Items {\n  movies = append(movies, Movie{\n    ID: *item[\"ID\"].S,\n    Name: *item[\"Name\"].S,\n  })\n}\n\nresponse, err := json.Marshal(movies)\n```", "```go\nfunc findOne(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {\n  id := request.PathParameters[\"id\"]\n\n  cfg, err := external.LoadDefaultAWSConfig()\n  if err != nil {\n    return events.APIGatewayProxyResponse{\n      StatusCode: http.StatusInternalServerError,\n      Body: \"Error while retrieving AWS credentials\",\n    }, nil\n  }\n\n  svc := dynamodb.New(cfg)\n  req := svc.GetItemRequest(&dynamodb.GetItemInput{\n    TableName: aws.String(os.Getenv(\"TABLE_NAME\")),\n    Key: map[string]dynamodb.AttributeValue{\n      \"ID\": dynamodb.AttributeValue{\n        S: aws.String(id),\n      },\n    },\n  })\n  res, err := req.Send()\n  if err != nil {\n    return events.APIGatewayProxyResponse{\n      StatusCode: http.StatusInternalServerError,\n      Body: \"Error while fetching movie from DynamoDB\",\n    }, nil\n  }\n\n  ...\n}\n```", "```go\naws lambda update-function-code --function-name FindOneMovie \\\n --zip-file fileb://./deployment.zip \\\n --region us-east-1\n```", "```go\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"1\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"dynamodb:GetItem\",\n      \"Resource\": \"arn:aws:dynamodb:us-east-1:ACCOUNT_ID:table/movies\"\n    }\n  ]\n}\n```", "```go\naws lambda update-function-configuration --function-name FindOneMovie \\\n --environment Variables={TABLE_NAME=movies} \\\n --region us-east-1\n```", "```go\ncurl -sX GET https://51cxzthvma.execute-api.us-east-1.amazonaws.com/staging/movies/3 | jq '.'\n```", "```go\nfunc insert(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {\n  ...\n\n  cfg, err := external.LoadDefaultAWSConfig()\n  if err != nil {\n    return events.APIGatewayProxyResponse{\n      StatusCode: http.StatusInternalServerError,\n      Body: \"Error while retrieving AWS credentials\",\n    }, nil\n  }\n\n  svc := dynamodb.New(cfg)\n  req := svc.PutItemRequest(&dynamodb.PutItemInput{\n    TableName: aws.String(os.Getenv(\"TABLE_NAME\")),\n    Item: map[string]dynamodb.AttributeValue{\n      \"ID\": dynamodb.AttributeValue{\n        S: aws.String(movie.ID),\n      },\n      \"Name\": dynamodb.AttributeValue{\n        S: aws.String(movie.Name),\n      },\n    },\n  })\n  _, err = req.Send()\n  if err != nil {\n    return events.APIGatewayProxyResponse{\n      StatusCode: http.StatusInternalServerError,\n      Body: \"Error while inserting movie to DynamoDB\",\n    }, nil\n  }\n\n  ...\n}\n```", "```go\naws lambda update-function-code --function-name InsertMovie \\\n --zip-file fileb://./deployment.zip \\\n --region us-east-1\n```", "```go\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"1\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"dynamodb:PutItem\",\n      \"Resource\": \"arn:aws:dynamodb:us-east-1:ACCOUNT_ID:table/movies\"\n    }\n  ]\n}\n```", "```go\naws lambda update-function-configuration --function-name InsertMovie \\\n --environment Variables={TABLE_NAME=movies} \\\n --region us-east-1\n```", "```go\ncurl -sX POST -d '{\"id\":\"17\", \"name\":\"The Punisher\"}' https://51cxzthvma.execute-api.us-east-1.amazonaws.com/staging/movies | jq '.'\n```", "```go\ncurl -sX GET https://51cxzthvma.execute-api.us-east-1.amazonaws.com/staging/movies | jq '.'\n```", "```go\nvar movie Movie\nerr := json.Unmarshal([]byte(request.Body), &movie)\nif err != nil {\n   return events.APIGatewayProxyResponse{\n      StatusCode: 400,\n      Body: \"Invalid payload\",\n   }, nil\n}\n```", "```go\ncfg, err := external.LoadDefaultAWSConfig()\nif err != nil {\n  return events.APIGatewayProxyResponse{\n    StatusCode: http.StatusInternalServerError,\n    Body: \"Error while retrieving AWS credentials\",\n  }, nil\n}\n\nsvc := dynamodb.New(cfg)\nreq := svc.DeleteItemRequest(&dynamodb.DeleteItemInput{\n  TableName: aws.String(os.Getenv(\"TABLE_NAME\")),\n  Key: map[string]dynamodb.AttributeValue{\n    \"ID\": dynamodb.AttributeValue{\n      S: aws.String(movie.ID),\n    },\n  },\n})\n_, err = req.Send()\nif err != nil {\n  return events.APIGatewayProxyResponse{\n    StatusCode: http.StatusInternalServerError,\n    Body: \"Error while deleting movie from DynamoDB\",\n  }, nil\n}\n```", "```go\naws lambda create-function --function-name DeleteMovie \\\n --zip-file fileb://./deployment.zip \\\n --runtime go1.x --handler main \\\n --role arn:aws:iam::ACCOUNT_ID:role/DeleteMovieRole \\\n --environment Variables={TABLE_NAME=movies} \\\n --region us-east-1\n```", "```go\naws apigateway put-method --rest-api-id API_ID \\\n --resource-id RESOURCE_ID \\\n --http-method DELETE \\\n --authorization-type \"NONE\" \\\n --region us-east-1 \n```", "```go\naws apigateway get-rest-apis --query \"items[?name==\\`MoviesAPI\\`].id\" --output text\n```", "```go\naws apigateway get-resources --rest-api-id API_ID --query \"items[?path==\\`/movies\\`].id\" --output text\n```", "```go\naws apigateway put-integration \\\n --rest-api-id API_ID \\\n --resource-id RESOURCE_ID \\\n --http-method DELETE \\\n --type AWS_PROXY \\\n --integration-http-method DELETE \\\n --uri arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:ACCOUNT_ID:function:DeleteMovie/invocations \\\n --region us-east-1\n```", "```go\naws apigateway put-method-response \\\n --rest-api-id API_ID \\\n --resource-id RESOURCE_ID \\\n --http-method DELETE \\\n --status-code 200 \\\n --response-models '{\"application/json\": \"Empty\"}' \\\n --region us-east-1\n```", "```go\naws apigateway create-deployment \\\n --rest-api-id API_ID \\\n --stage-name staging \\\n --region us-east-1\n```", "```go\ncurl -sX DELETE -d '{\"id\":\"1\", \"name\":\"Captain America\"}' https://51cxzthvma.execute-api.us-east-1.amazonaws.com/staging/movies | jq '.'\n```", "```go\ncurl -sX GET https://51cxzthvma.execute-api.us-east-1.amazonaws.com/staging/movies | jq '.'\n```"]