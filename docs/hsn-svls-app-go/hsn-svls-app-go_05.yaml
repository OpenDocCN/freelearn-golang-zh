- en: Managing Data Persistence with DynamoDB
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用DynamoDB管理数据持久性
- en: In the previous chapter, we learned how to build a RESTful API with Lambda and
    API Gateway, and we discovered why Lambda functions should be stateless. In this
    chapter, we will resolve the stateless issue by using AWS DynamoDB for data storage.
    Moreover, we will also see how to integrate it with the Lambda functions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何使用Lambda和API Gateway构建RESTful API，并发现了为什么Lambda函数应该是无状态的。在本章中，我们将使用AWS
    DynamoDB解决无状态问题。此外，我们还将看到如何将其与Lambda函数集成。
- en: 'We will be covering the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Setting up DynamoDB
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置DynamoDB
- en: Working with DynamoDB
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用DynamoDB
- en: Technical requirements
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter is a follow-up of the previous one as it will use the same source
    code. Hence, some snippets won't be explained to avoid repetition. Also, basic
    knowledge of NoSQL concepts is preferred so that you can follow this chapter with
    ease. The code bundle for this chapter is hosted on GitHub at [https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go](https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是上一章的后续，因为它将使用相同的源代码。因此，为避免重复，某些代码片段将不予解释。此外，最好具备NoSQL概念的基本知识，以便您可以轻松地跟随本章。本章的代码包托管在GitHub上，网址为[https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go](https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go)。
- en: Setting up DynamoDB
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置DynamoDB
- en: DynamoDB is an AWS NoSQL database. It's a managed AWS service that allows you
    to store and retrieve data at scale without managing or maintaining a database
    server.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: DynamoDB是AWS的NoSQL数据库。它是一个托管的AWS服务，允许您在不管理或维护数据库服务器的情况下按比例存储和检索数据。
- en: 'You need to understand a few key concepts about DynamoDB before digging into
    its integration with AWS Lambda:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入了解与AWS Lambda的集成之前，您需要了解一些关于DynamoDB的关键概念：
- en: '**Structure and Design**:'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结构和设计**：'
- en: '**Table**: This is a set of items (rows) where each item is a set of attributes
    (columns) and values.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表**：这是一组项目（行），其中每个项目都是一组属性（列）和值。'
- en: '**Partition key**: This is also called a hash key. It''s a unique ID used by
    DynamoDB to determine the partition (physical location) in which the item can
    be found (read operation) or will be stored (write operation). A sort key might
    be used to order/sort items in the same partition.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分区键**：也称为哈希键。这是DynamoDB用来确定可以找到项目的分区（物理位置）（读操作）或将存储项目的分区（写操作）的唯一ID。可以使用排序键来对同一分区中的项目进行排序。'
- en: '**Index**: Similar to relational databases, indexes are used to speed up queries.
    In DynamoDB, two types of indexes can be created:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**索引**：与关系数据库类似，索引用于加速查询。在DynamoDB中，可以创建两种类型的索引：'
- en: '**Global Secondary Index** (**GSI**)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全局二级索引**（**GSI**）'
- en: '**Local Secondary Index** (**LSI**)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地二级索引**（**LSI**）'
- en: '**Operations**:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作**：'
- en: '**Scan**: As the name implies, this operation scans the entire table before
    returning the requested items.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扫描**：顾名思义，此操作在返回所请求的项目之前扫描整个表。'
- en: '**Query**: This operation finds items based on primary key values.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查询**：此操作根据主键值查找项目。'
- en: '**PutItem**: This creates a new item or replaces an old item with a new one.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PutItem**：这将创建一个新项目或用新项目替换旧项目。'
- en: '**GetItem**: This finds an item by its primary key.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GetItem**：通过其主键查找项目。'
- en: '**DeleteItem**: This deletes a single item in a table by its primary key.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DeleteItem**：通过其主键在表中删除单个项目。'
- en: In terms of performance, scan operations are less efficient and more expensive
    (they consume more throughput) as the operation has to iterate through each item
    in the table to get the requested items. Therefore, it's always recommended to
    use query over scan operations.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在性能方面，扫描操作效率较低，成本较高（消耗更多吞吐量），因为该操作必须遍历表中的每个项目以获取所请求的项目。因此，始终建议使用查询而不是扫描操作。
- en: Now that you're familiar with DynamoDB terminology, we can start by creating
    our first DynamoDB table to store the API items.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您熟悉了DynamoDB的术语，我们可以开始创建我们的第一个DynamoDB表来存储API项目。
- en: Creating a table
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建表
- en: 'To begin creating a table, sign in to the AWS Management Console ([https://console.aws.amazon.com/console/home](https://console.aws.amazon.com/console/home))
    and select DynamoDB from the Database section. Click on the **Create table** button
    to create a new DynamoDB table, as shown in the following screenshot:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始创建表，请登录AWS管理控制台（[https://console.aws.amazon.com/console/home](https://console.aws.amazon.com/console/home)）并从**数据库**部分选择DynamoDB。点击**创建表**按钮以创建新的DynamoDB表，如下面的屏幕截图所示：
- en: '![](img/d9602a30-7f26-4d7d-a22e-e2e5a3a1dada.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9602a30-7f26-4d7d-a22e-e2e5a3a1dada.png)'
- en: 'Next, give the table a name such as `movies` in the next example.. Since each
    movie will be identified by a unique ID, it will be the partition key for the
    table. Leave all of the other settings as their default states and hit Create,
    shown as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在下一个示例中为表命名为`movies`。由于每部电影将由唯一ID标识，因此它将是表的分区键。将所有其他设置保留为默认状态，然后点击创建，如下所示：
- en: '![](img/778d260b-e9d9-469a-a2d0-79fae4b4f2a2.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/778d260b-e9d9-469a-a2d0-79fae4b4f2a2.png)'
- en: 'Wait a few seconds while the table is created, shown as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 等待几秒钟，直到表被创建，如下所示：
- en: '![](img/ffd40dce-59bf-4d91-bfba-26dcce344897.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ffd40dce-59bf-4d91-bfba-26dcce344897.png)'
- en: Once the `movies` table is created, a success message will prompt you to confirm
    its creation. Now, we need to load sample data into the table.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`movies`表后，将提示成功消息以确认其创建。现在，我们需要将示例数据加载到表中。
- en: Loading sample data
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载示例数据
- en: 'To populate items in the `movies` table, click on the **Items** tab:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要在`movies`表中填充项目，请点击**项目**选项卡：
- en: '![](img/2b88f35a-8d5b-4991-84e8-3144f45c3fd1.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b88f35a-8d5b-4991-84e8-3144f45c3fd1.png)'
- en: 'Then, click on **Create item** and insert a new movie, as shown in the following
    screenshot (you need to use the plus (+) button to append an extra column to store
    the movie name):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，点击**创建项目**并插入一个新电影，如下面的屏幕截图所示（您需要使用加号（+）按钮添加额外的列来存储电影名称）：
- en: '![](img/40c329da-cd7a-41f7-b4be-670ee9a36e31.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/40c329da-cd7a-41f7-b4be-670ee9a36e31.png)'
- en: 'Click on Save. The table should look something like this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 点击保存。表应该看起来像这样：
- en: '![](img/ebb6530d-ff25-41fa-98f7-4fc7e45d3f40.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ebb6530d-ff25-41fa-98f7-4fc7e45d3f40.png)'
- en: For a real-world application, we won't use the console to populate millions
    of items. To save time, we will use the AWS SDK to write a small application in
    Go to load items to the table.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于真实的应用程序，我们不会使用控制台来填充数百万条目。为了节省时间，我们将使用AWS SDK编写一个小型的Go应用程序来将项目加载到表中。
- en: 'Create a new project in your Go workspace and copy the following content into
    the `init-db.go` file:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go工作区中创建一个新项目，并将以下内容复制到`init-db.go`文件中：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding code reads a JSON file ([https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go/blob/master/ch5/movies.json](https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go/blob/master/ch5/movies.json)),
    which contains a list of movies; encode it into an array of the `Movie` struct
    as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码读取一个JSON文件（[https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go/blob/master/ch5/movies.json](https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go/blob/master/ch5/movies.json)），其中包含一系列电影；将其编码为`Movie`结构的数组，如下所示：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, it iterates through every movie within the movies array. Then, use the
    `PutItem` method to insert it into a DynamoDB table as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它遍历电影数组中的每部电影。然后，使用`PutItem`方法将其插入DynamoDB表中，如下所示：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Be sure to install the AWS Go SDK with the `go get github.com/aws/aws-sdk-go-v2/aws` command
    from your terminal session*.*
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 确保使用终端会话中的`go get github.com/aws/aws-sdk-go-v2/aws`命令安装AWS Go SDK*.*
- en: 'To load the `movies` table with data, enter the following command:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要加载`movies`表中的数据，请输入以下命令：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can use the DynamoDB Console to verify the data that you loaded into the
    `movies` table, as shown in the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用DynamoDB控制台验证加载到`movies`表中的数据，如下截图所示：
- en: '![](img/729f5fbc-9820-4ce3-9161-521ce3eb2bac.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/729f5fbc-9820-4ce3-9161-521ce3eb2bac.png)'
- en: Now that the DynamoDB table is prepared, we need to update each API endpoint
    function's code to use the table instead of the hardcoded movies list.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在DynamoDB表已准备就绪，我们需要更新每个API端点函数的代码，以使用表而不是硬编码的电影列表。
- en: Working with DynamoDB
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用DynamoDB
- en: 'In this section, we will update the existing functions to read and write from/to
    the DynamoDB table. The following diagram describes the target architecture:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将更新现有的函数，从DynamoDB表中读取和写入。以下图表描述了目标架构：
- en: '![](img/ca81f50b-4e81-4c21-9871-6cd97eeabfc6.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca81f50b-4e81-4c21-9871-6cd97eeabfc6.png)'
- en: API Gateway will forward incoming requests to the target Lambda function, which
    will call the corresponding DynamoDB operation on the `movies` table.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: API Gateway将转发传入的请求到目标Lambda函数，该函数将在`movies`表上调用相应的DynamoDB操作。
- en: Scan request
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扫描请求
- en: 'To get started, we need to implement the function responsible for returning
    a list of movies; the following steps describe how to achieve that:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们需要实现负责返回电影列表的函数；以下步骤描述了如何实现这一点：
- en: 'Update the `findAll` handler endpoint to use the `Scan` method to fetch all
    items from the table:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`findAll`处理程序端点以使用`Scan`方法从表中获取所有项目：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Full implementation of this function can be found in the GitHub repository ([https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go/blob/master/ch5/findAll/main.go](https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go/blob/master/ch5/findAll/main.go)).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能的完整实现可以在GitHub存储库中找到（[https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go/blob/master/ch5/findAll/main.go](https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go/blob/master/ch5/findAll/main.go)）。
- en: 'Build the deployment package and update the `FindAllMovies` Lambda function
    code with the following AWS CLI command:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建部署包，并使用以下AWS CLI命令更新`FindAllMovies` Lambda函数代码：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Be sure to update the FindAllMoviesRole in order to grant that Lambda function
    permissions to call the `Scan` operation on the DynamoDB table by adding the following
    IAM policy:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保更新FindAllMoviesRole，以授予Lambda函数调用DynamoDB表上的`Scan`操作的权限，方法是添加以下IAM策略：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once the policy is assigned to the IAM role, it should be part of the attached
    policies, as shown in the next screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦策略分配给IAM角色，它应该成为附加策略的一部分，如下一张截图所示：
- en: '![](img/ec5e0848-c799-4198-9587-0907f2458486.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec5e0848-c799-4198-9587-0907f2458486.png)'
- en: 'Finally, with the Lambda console or using the AWS CLI, add a new environment
    variable to point to the DynamoDB table name that we created earlier:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用Lambda控制台或AWS CLI，添加一个新的环境变量，指向我们之前创建的DynamoDB表名：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following screenshot shows a properly configured FindAllMovies function
    with IAM access to DynamoDB and CloudWatch with a defined `TABLE_NAME` environment
    variable:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了一个正确配置的FindAllMovies函数，具有对DynamoDB和CloudWatch的IAM访问权限，并具有定义的`TABLE_NAME`环境变量：
- en: '![](img/90ddc595-42c2-4356-89a7-4a0441a012e8.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/90ddc595-42c2-4356-89a7-4a0441a012e8.png)'
- en: Properly configured FindAllMovies function
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 正确配置的FindAllMovies函数
- en: 'Save it and invoke the API Gateway URL with the cURL command as follows:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并使用以下cURL命令调用API Gateway URL：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'An array will be returned in a JSON format as follows:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以JSON格式返回一个数组，如下所示：
- en: '![](img/9970ba6a-ebfe-4d8c-96f5-fcb677345e48.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9970ba6a-ebfe-4d8c-96f5-fcb677345e48.png)'
- en: 'The endpoint is working and fetching the movie''s items from the table, but
    the JSON returned is a raw DynamoDB response. We will fix that by returning only
    the `ID` and `Name` properties as follows:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 端点正在工作，并从表中获取电影项目，但返回的JSON是原始的DynamoDB响应。我们将通过仅返回`ID`和`Name`属性来修复这个问题，如下所示：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Further to this, generate the ZIP file and update the Lambda function code,
    and then invoke the API Gateway URL with the cURL command given earlier, shown
    as follows:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，生成ZIP文件并更新Lambda函数代码，然后使用前面给出的cURL命令调用API Gateway URL，如下所示：
- en: '![](img/af479fe5-73a7-486c-8dc9-b5f69ad75fa6.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af479fe5-73a7-486c-8dc9-b5f69ad75fa6.png)'
- en: Much better, right?
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 好多了，对吧？
- en: GetItem request
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GetItem请求
- en: 'The second function to be implemented will be responsible for returning a single
    item from DynamoDB, the following steps illustrate how it should be built:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现的第二个功能将负责从DynamoDB返回单个项目，以下步骤说明了应该如何构建它：
- en: 'Update the `findOne` handler to call the `GetItem` method in DynamoDB. This
    should return a single item with the identifier passed into the API endpoint parameter:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`findOne`处理程序以调用DynamoDB中的`GetItem`方法。这应该返回一个带有传递给API端点参数的标识符的单个项目：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Full implementation of this function can be found in the GitHub repository ([https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go/blob/master/ch5/findOne/main.go](https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go/blob/master/ch5/findAll/main.go)).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的完整实现可以在GitHub存储库中找到（[https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go/blob/master/ch5/findOne/main.go](https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go/blob/master/ch5/findAll/main.go)）。
- en: 'Similar to the `FindAllMovies` function, create a ZIP file and update the existing
    Lambda function code with the following AWS CLI command:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与`FindAllMovies`函数类似，创建一个ZIP文件，并使用以下AWS CLI命令更新现有的Lambda函数代码：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Grant `GetItem` permission on the `movies` table to the `FindOneMovie` Lambda
    function with the following IAM policy:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 授予`FindOneMovie` Lambda函数对`movies`表的`GetItem`权限的IAM策略：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The IAM role should be configured as shown in the following screenshot:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IAM角色应配置如下截图所示：
- en: '![](img/97c1e2d9-b691-4661-a10f-b6603de50f75.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/97c1e2d9-b691-4661-a10f-b6603de50f75.png)'
- en: 'Define a new environment variable with the DynamoDB table name as a value:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用DynamoDB表名定义一个新的环境变量：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Head back to the `FindOneMovie` dashboard and verify that all of the settings
    have been configured, as shown in the following screenshot:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回`FindOneMovie`仪表板，并验证所有设置是否已配置，如下截图所示：
- en: '![](img/b12ebdf3-11f4-4db8-85be-586c46979aea.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b12ebdf3-11f4-4db8-85be-586c46979aea.png)'
- en: 'Invoke the API Gateway by issuing the following cURL command:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过发出以下cURL命令调用API Gateway：
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As expected, the response is a single movie item, with an ID of 3, as requested
    in the cURL command:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如预期的那样，响应是一个具有ID为3的单个电影项目，如cURL命令中请求的那样：
- en: '![](img/9d7a8cf7-359c-48f7-afbe-119c70506adc.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9d7a8cf7-359c-48f7-afbe-119c70506adc.png)'
- en: PutItem request
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PutItem请求
- en: 'So far, we have learned how to list all items and return a single item from
    DynamoDB. The following section describes how we can implement a Lambda function
    to add a new item to a database:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学会了如何列出所有项目并从DynamoDB返回单个项目。以下部分描述了如何实现Lambda函数以将新项目添加到数据库中：
- en: 'Update the `insert` handler to call the `PutItem` method to insert a new movie
    into the table:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`insert`处理程序以调用`PutItem`方法将新电影插入表中：
- en: '[PRE15]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Full implementation of this function can be found in the GitHub repository ([https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go/blob/master/ch5/insert/main.go](https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go/blob/master/ch5/findAll/main.go)).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的完整实现可以在GitHub存储库中找到（[https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go/blob/master/ch5/insert/main.go](https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go/blob/master/ch5/findAll/main.go)）。
- en: 'Create a deployment package and update the `InsertMovie` Lambda function code
    with the following command:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建部署包，并使用以下命令更新`InsertMovie` Lambda函数代码：
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Allow the function to call the `PutItem` operation on the movies table with
    the IAM policy as follows:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许该函数在电影表上调用`PutItem`操作，并使用以下IAM策略：
- en: '[PRE17]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following screenshot shows that the IAM role is updated to handle the `PutItem`
    operation''s permissions:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示IAM角色已更新以处理`PutItem`操作的权限：
- en: '![](img/342056fe-729b-4b4f-9115-b6ac94d5c117.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/342056fe-729b-4b4f-9115-b6ac94d5c117.png)'
- en: 'Create a new environment variable with the DynamoDB table name as follows:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的环境变量，DynamoDB表名如下：
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Make sure that the Lambda function is configured as follows:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保Lambda函数配置如下：
- en: '![](img/6605624f-7263-42fd-a746-d0280410f375.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6605624f-7263-42fd-a746-d0280410f375.png)'
- en: Properly configured InsertMovie function
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 正确配置的InsertMovie函数
- en: 'Insert a new movie by calling the following cURL command on the API Gateway
    URL:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在API Gateway URL上调用以下cURL命令插入新电影：
- en: '[PRE19]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Verify that the movie is inserted in the DynamoDB Console, as shown in the
    next screenshot:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证电影是否已插入DynamoDB控制台，如下截图所示：
- en: '![](img/b7eea63f-4d13-4f9b-bdad-0b0f642b0db7.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b7eea63f-4d13-4f9b-bdad-0b0f642b0db7.png)'
- en: 'Another way to verify that the insert was well-executed is to use the `findAll`
    endpoint with a cURL command:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 验证插入是否成功执行的另一种方法是使用cURL命令使用`findAll`端点：
- en: '[PRE20]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The movie which has an ID of `17` has been created. If the table contained
    a movie item with the same ID, it would have been replaced instead. The following
    is the output:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 具有ID为`17`的电影已创建。如果表中包含具有相同ID的电影项目，则会被替换。以下是输出：
- en: '![](img/d1e275f0-c10e-44ae-a39f-b14a9ea600ae.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d1e275f0-c10e-44ae-a39f-b14a9ea600ae.png)'
- en: DeleteItem request
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DeleteItem请求
- en: 'Finally, in order to delete an item from DynamoDB, the following Lambda function
    should be implemented:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了从DynamoDB中删除项目，应实现以下Lambda函数：
- en: 'Register a new handler to delete a movie. The handler will encode the payload
    in the request body to a `Movie` struct:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册一个新的处理程序来删除电影。处理程序将请求体中的有效负载编码为`Movie`结构：
- en: '[PRE21]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then, call the `DeleteItem` method with the movie ID as a parameter to remove
    it from the table:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，调用`DeleteItem`方法，并将电影ID作为参数从表中删除：
- en: '[PRE22]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Full implementation of this function can be found in the GitHub repository ([https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go/blob/master/ch5/delete/main.go](https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go/blob/master/ch5/findAll/main.go)).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的完整实现可以在GitHub存储库中找到（[https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go/blob/master/ch5/delete/main.go](https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go/blob/master/ch5/findAll/main.go)）。
- en: 'Similar to what we did with the other functions, create a new IAM role called
    `DeleteMovieRole` with permissions to push logs to CloudWatch and to call the `DeleteItem`
    operation on the movies table, as shown in the next screenshot:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与其他函数一样，创建一个名为`DeleteMovieRole`的新IAM角色，该角色具有将日志推送到CloudWatch并在电影表上调用`DeleteItem`操作的权限，如下截图所示：
- en: '![](img/b12c59b9-b5c5-425a-a3d3-7216bbcfb7a4.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b12c59b9-b5c5-425a-a3d3-7216bbcfb7a4.png)'
- en: 'Next, create a new Lambda function after building a deployment package:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在构建部署包后创建一个新的Lambda函数：
- en: '[PRE23]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Head back to the Lambda Console. A `DeleteMovie` function should have been
    created, as shown in the next screenshot:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回Lambda控制台。应该已创建一个`DeleteMovie`函数，如下截图所示：
- en: '![](img/7b7ca496-3ee9-4be8-8099-47156c0478fe.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7b7ca496-3ee9-4be8-8099-47156c0478fe.png)'
- en: Finally, we need to expose a `DELETE` method on the `/movies` endpoint in the
    API Gateway. To do so, we won't use the API Gateway console, but we will use the
    AWS CLI so that you can get familiar with it.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要在API Gateway的`/movies`端点上公开一个`DELETE`方法。为此，我们不会使用API Gateway控制台，而是使用AWS
    CLI，以便您熟悉它。
- en: 'To create a `DELETE` method on `movies` resources, we will use the following
    command:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在`movies`资源上创建一个`DELETE`方法，我们将使用以下命令：
- en: '[PRE24]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'However, we need to supply the API ID as well as the resource ID. Those IDs
    can be found easily in the API Gateway Console, shown as follows:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 但是，我们需要提供API ID以及资源ID。这些ID可以在API Gateway控制台中轻松找到，如下所示：
- en: '![](img/939137cb-caec-46a0-8461-1dd68979dd39.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/939137cb-caec-46a0-8461-1dd68979dd39.png)'
- en: 'For CLI enthusiasts like myself, you can also get this information by running
    the following commands:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像我这样的CLI爱好者，您也可以通过运行以下命令来获取这些信息：
- en: 'REST API ID:'
  id: totrans-143
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST API ID：
- en: '[PRE25]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Resource ID:'
  id: totrans-145
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源ID：
- en: '[PRE26]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now that the IDs have been defined, update the `aws apigateway put-method` command
    with your IDs and execute the command.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在已经定义了ID，更新`aws apigateway put-method`命令，使用你的ID并执行该命令。
- en: 'Next, set the `DeleteMovie` function as the target for the `DELETE` method:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将`DeleteMovie`函数设置为`DELETE`方法的目标：
- en: '[PRE27]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Finally, tell the API Gateway to skip any translation and to pass it without
    any modification the response returned by the Lambda function:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，告诉API Gateway跳过任何翻译，并在Lambda函数返回的响应中不做任何修改：
- en: '[PRE28]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the Resources panel, a `DELETE` method should be defined as follows:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在资源面板中，应该定义一个`DELETE`方法，如下所示：
- en: '![](img/28a1ef22-904e-4f87-aabf-053d9ef08d44.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/28a1ef22-904e-4f87-aabf-053d9ef08d44.png)'
- en: 'Redeploy the API with the following AWS CLI command:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下AWS CLI命令重新部署API：
- en: '[PRE29]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Use the following cURL command to delete a movie:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下cURL命令删除电影：
- en: '[PRE30]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Verify that the movie had been deleted by calling the `findAll` endpoint with
    the following cURL command:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过调用`findAll`端点的以下cURL命令来验证电影是否已被删除：
- en: '[PRE31]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The movie with ID as 1 won''t be part of the list that''s being returned. You
    can verify in the DynamoDB Console that the movie has been successfully deleted,
    shown as follows:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ID为1的电影不会出现在返回的列表中。您可以在DynamoDB控制台中验证电影已成功删除，如下所示：
- en: '![](img/3bea6331-a823-476e-a529-21f264eefb6e.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3bea6331-a823-476e-a529-21f264eefb6e.png)'
- en: Indeed, the movie having ID as 1, no longer exists in the `movies` table.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，ID为1的电影不再存在于`movies`表中。
- en: At this point, we have created a serverless RESTful API with AWS Lambda, API
    Gateway, and DynamoDB.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用AWS Lambda，API Gateway和DynamoDB创建了一个无服务器RESTful API。
- en: Summary
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to build an event-driven API with Lambda and
    API Gateway, and how to store data in DynamoDB. In later chapters, we will go
    further and add a security layer on top of the API Gateway, build a CI/CD pipeline
    to automate the deployment, and much more.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了如何使用Lambda和API Gateway构建事件驱动的API，以及如何在DynamoDB中存储数据。在后面的章节中，我们将进一步添加API
    Gateway顶部的安全层，构建CI/CD管道以自动化部署，等等。
- en: In the next chapter, we will go through some advanced AWS CLI commands and options
    that you can use while building serverless functions in AWS Lambda to save time.
    We will also see how to create and maintain multiple versions and releases of
    Lambda functions.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍一些高级的AWS CLI命令和选项，您可以在构建AWS Lambda中的无服务器函数时使用这些选项来节省时间。我们还将看到如何创建和维护多个版本和发布Lambda函数。
- en: Questions
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Implement an `update` handler to update an existing movie item.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个`update`处理程序来更新现有的电影项目。
- en: Create a new PUT method in API Gateway to trigger the `update` Lambda function.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在API Gateway中创建一个新的PUT方法来触发`update` Lambda函数。
- en: Implement a single Lambda function to handle all type of events (GET, POST,
    DELETE, PUT).
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个单一的Lambda函数来处理所有类型的事件（GET，POST，DELETE，PUT）。
- en: Update the `findOne` handler to return a proper response code for a valid request
    but an empty data (for example, no movie for the ID requested).
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`findOne`处理程序以返回有效请求的正确响应代码，但是空数据（例如，请求的ID没有电影）。
- en: Implement a pagination system on the `findAll` endpoint using a `Range` header
    and using a `Query` string.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`findAll`端点上使用`Range`头和`Query`字符串实现分页系统。
