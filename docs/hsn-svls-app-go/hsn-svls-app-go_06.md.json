["```go\naws lambda list-functions --region us-east-1\n```", "```go\naws lambda list-functions --query Functions[].FunctionName[]\n```", "```go\naws lambda create-function --function-name UpdateMovie \\\n --description \"Update an existing movie\" \\\n --runtime go1.x \\\n --role arn:aws:iam::ACCOUNT_ID:role/UpdateMovieRole \\\n --handler main \\\n --environment Variables={TABLE_NAME=movies} \\\n --zip-file fileb://./deployment.zip \\\n --region us-east-1a\n```", "```go\naws lambda create-function --function-name UpdateMovie \\\n --description \"Update an existing movie\" \\\n --runtime go1.x \\\n --role arn:aws:iam::ACCOUNT_ID:role/UpdateMovieRole \\\n --handler main \\\n --environment Variables={TABLE_NAME=movies} \\\n --code S3Bucket=movies-api-deployment-package,S3Key=deployment.zip \\\n --region us-east-1\n```", "```go\naws lambda update-function-code --function-name UpdateMovie \\\n    --zip-file fileb://./deployment-1.0.0.zip \\\n    --region us-east-1\n```", "```go\naws lambda update-function-code --function-name UpdateMovie \\\n    --s3-bucket movies-api-deployment-packages \\\n    --s3-key deployment-1.0.0.zip \\\n    --region us-east-1\n```", "```go\naws lambda get-function-configuration --function-name UpdateMovie --region us-east-1\n```", "```go\naws lambda invoke --function-name UpdateMovie result.json\n\n```", "```go\n{\n  \"body\": \"{\\\"id\\\":\\\"13\\\", \\\"name\\\":\\\"Deadpool 2\\\"}\"\n}\n```", "```go\naws lambda invoke --function UpdateMovie --payload file://input.json result.json\n```", "```go\naws lambda invoke --function-name FindAllMovies result.json\n```", "```go\naws lambda delete-function --function-name UpdateMovie\n```", "```go\nfunc findAll(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {\n  size, err := strconv.Atoi(request.Headers[\"Count\"])\n  if err != nil {\n    return events.APIGatewayProxyResponse{\n      StatusCode: http.StatusBadRequest,\n      Body: \"Count Header should be a number\",\n    }, nil\n  }\n\n  ...\n\n  svc := dynamodb.New(cfg)\n  req := svc.ScanRequest(&dynamodb.ScanInput{\n    TableName: aws.String(os.Getenv(\"TABLE_NAME\")),\n    Limit: aws.Int64(int64(size)),\n  })\n\n  ...\n}\n```", "```go\naws lambda update-function-code --function-name FindAllMovies \\\n    --zip-file fileb://./deployment.zip\n```", "```go\naws lambda publish-version --function-name FindAllMovies --description 1.1.0\n```", "```go\naws lambda invoke --function-name FindAllMovies --qualifier 1 result.json\n```", "```go\n{\n  \"headers\": {\n    \"Count\": \"4\"\n  }\n}\n```", "```go\naws lambda invoke --function-name FindAllMovies --payload file://input.json\n    --qualifier 2 result.json\n```", "```go\naws lambda create-alias --function-name FindAllMovies \\\n    --name Production --description \"Production environment\" \\\n    --function-version 1\n```", "```go\naws lambda add-permission --function-name \"arn:aws:lambda:us-east-1:ACCOUNT_ID:function:FindAllMovies:Production\" \\\n --source-arn \"arn:aws:execute-api:us-east-1:ACCOUNT_ID:API_ID/*/GET/movies\" \\\n --principal apigateway.amazonaws.com \\\n --statement-id STATEMENT_ID \\\n --action lambda:InvokeFunction\n```", "```go\naws lambda add-permission --function-name \"arn:aws:lambda:us-east-1:ACCOUNT_ID:function:FindAllMovies:Staging\" \\\n --source-arn \"arn:aws:execute-api:us-east-1:ACCOUNT_ID:API_ID/*/GET/movies\" \\\n --principal apigateway.amazonaws.com \\\n --statement-id STATEMENT_ID \\\n --action lambda:InvokeFunction\n```"]