- en: Deploying Your Serverless Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署您的无服务器应用程序
- en: 'In previous chapters, we learned how to build a serverless API from scratch.
    In this chapter, we will try to accomplish the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们学习了如何从头开始构建一个无服务器API。在本章中，我们将尝试完成以下内容：
- en: Build, deploy, and manage our Lambda functions going through some advanced AWS
    CLI commands
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过一些高级AWS CLI命令构建、部署和管理我们的Lambda函数
- en: Publish multiple versions of the API
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布API的多个版本
- en: Learn how to separate multiple deployment environments (sandbox, staging, and
    production) with aliases
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用别名分隔多个部署环境（沙盒、暂存和生产）
- en: Cover the usage of the API Gateway stage variables to change the method endpoint's
    behavior.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 覆盖API Gateway阶段变量的使用，以更改方法端点的行为。
- en: Lambda CLI commands
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lambda CLI命令
- en: In this section, we will go through the various AWS Lambda commands that you
    might use while building your Lambda functions. We will also learn how you use
    them to automate your deployment process.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍各种AWS Lambda命令，您可能在构建Lambda函数时使用。我们还将学习如何使用它们来自动化您的部署过程。
- en: The list-functions command
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出函数命令
- en: 'If you recall, this command was introduced in [Chapter 2](52476096-dfc4-445d-ab4c-df692471bff7.xhtml),
    *Getting Started with AWS Lambda*. As its name implies, it lists all Lambda functions
    in the AWS region you provided. The following command will return all Lambda functions
    in the North Virginia region:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还记得，此命令是在[第2章](52476096-dfc4-445d-ab4c-df692471bff7.xhtml)中引入的，*开始使用AWS Lambda*。顾名思义，它会列出您提供的AWS区域中的所有Lambda函数。以下命令将返回北弗吉尼亚地区的所有Lambda函数：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For each function, the response includes the function''s configuration information
    (`FunctionName`, Resources usage, `Environment` variables, IAM Role, `Runtime`
    environment, and so on), as shown in the following screenshot:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个函数，响应中都包括函数的配置信息（`FunctionName`、资源使用情况、`Environment`变量、IAM角色、`Runtime`环境等），如下截图所示：
- en: '![](img/3f3674b0-2fca-4d32-83e7-5b3fbe287e66.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f3674b0-2fca-4d32-83e7-5b3fbe287e66.png)'
- en: 'To list only some attributes, such as the function name, you can use the `query`
    filter option, as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要仅列出一些属性，例如函数名称，可以使用`query`筛选选项，如下所示：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The create-function command
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建函数命令
- en: If you've read through the preceding chapters, you should be familiar with this
    command as it has been used multiple times to create a new Lambda function from
    scratch.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经阅读了前面的章节，您应该对此命令很熟悉，因为它已经多次用于从头开始创建新的Lambda函数。
- en: 'In addition to the function''s configuration, you can use the command to provide
    the deployment package (ZIP) in two ways:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 除了函数的配置，您还可以使用该命令以两种方式提供部署包（ZIP）：
- en: '**ZIP file**: It provides the path to the ZIP file of the code you are uploading
    with the `--zip-file` option:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ZIP文件**：它使用`--zip-file`选项提供代码的ZIP文件路径：'
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**S3 Bucket object**: It  provides the S3 bucket and object name with the `--code`
    option:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**S3存储桶对象**：它使用`--code`选项提供S3存储桶和对象名称：'
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The as-mentioned commands will return a summary of the function''s settings
    in a JSON format, as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如上述命令将以JSON格式返回函数设置的摘要，如下所示：
- en: '![](img/dff57c7d-d25e-456b-a915-b9c2200697bd.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dff57c7d-d25e-456b-a915-b9c2200697bd.png)'
- en: 'It''s worth mentioning that while creating your Lambda function, you might
    override the compute usage and network settings based on your function''s behavior
    with the following options:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，在创建Lambda函数时，您可以根据函数的行为覆盖计算使用率和网络设置，使用以下选项：
- en: '`--timeout`: The default execution timeout is three seconds. When the three
    seconds are reached, AWS Lambda terminates your function. The maximum timeout
    you can set is five minutes.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--timeout`：默认执行超时时间为三秒。当达到三秒时，AWS Lambda终止您的函数。您可以设置的最大超时时间为五分钟。'
- en: '`--memory-size`: The amount of memory given to your function when executed.
    The default value is 128 MB and the maximum is 3,008 MB (increments of 64 MB).'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--memory-size`：执行函数时分配给函数的内存量。默认值为128 MB，最大值为3,008 MB（以64 MB递增）。'
- en: '`--vpc-config`: This deploys the Lambda function in a private VPC. While it
    might be useful if the function requires communication with internal resources,
    it should ideally be avoided as it impacts the Lambda performance and scaling
    (this will be discussed in upcoming chapters).'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--vpc-config`：这将在私有VPC中部署Lambda函数。虽然如果函数需要与内部资源通信，这可能很有用，但最好避免，因为它会影响Lambda的性能和扩展性（这将在即将到来的章节中讨论）。'
- en: AWS doesn't allow you to set the CPU usage of your function as it's calculated
    automatically based on the memory allocated for your function. CPU usage is proportional
    to the memory.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: AWS不允许您设置函数的CPU使用率，因为它是根据为函数分配的内存自动计算的。 CPU使用率与内存成比例。
- en: The update-function-code command
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新函数代码命令
- en: 'In addition to AWS Management Console, you can update your Lambda function''s
    code with AWS CLI. The command requires the target Lambda function name and the
    new deployment package. Similarly to the previous command, you can provide the
    package as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 除了AWS管理控制台外，您还可以使用AWS CLI更新Lambda函数的代码。该命令需要目标Lambda函数名称和新的部署包。与上一个命令类似，您可以按以下方式提供包：
- en: 'The path to the new `.zip` file:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新`.zip`文件的路径：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The S3 bucket where the `.zip` file is stored:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储`.zip`文件的S3存储桶：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This operation prints a new unique ID (called `RevisionId`) for each change
    in the Lambda function''s code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作会为Lambda函数代码中的每个更改打印一个新的唯一ID（称为`RevisionId`）：
- en: '![](img/3b88a78d-a93b-4d00-9be4-b35adbc7f447.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3b88a78d-a93b-4d00-9be4-b35adbc7f447.png)'
- en: The get-function-configuration command
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取函数配置命令
- en: 'In order to retrieve the configuration information of a Lambda function, issue
    the following command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检索Lambda函数的配置信息，请发出以下命令：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The preceding command will provide the same information in the output that was
    displayed when the `create-function` command was used.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将以输出提供与使用`create-function`命令时显示的相同信息。
- en: To retrieve configuration information for a specific Lambda version or alias
    (following section), you can use the `--qualifier` option.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索特定Lambda版本或别名的配置信息（下一节），您可以使用`--qualifier`选项。
- en: The invoke command
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调用命令
- en: 'So far, we invoked our Lambda functions directly from AWS Lambda Console and
    through HTTP events with API Gateway. In addition to that, Lambda can be invoked
    from the AWS CLI with the `invoke` command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们直接从AWS Lambda控制台和通过API Gateway的HTTP事件调用了我们的Lambda函数。除此之外，Lambda还可以通过AWS
    CLI使用`invoke`命令进行调用：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding command will invoke the `UpdateMovie` function and save the function''s
    output in `result.json` file:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将调用`UpdateMovie`函数，并将函数的输出保存在`result.json`文件中：
- en: '![](img/0bf38ec4-0da7-4488-8e80-638a8f6613c7.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0bf38ec4-0da7-4488-8e80-638a8f6613c7.png)'
- en: The status code is 400, which is normal, as `UpdateFunction` is expecting a
    JSON input. Let's see how to provide a JSON to our function with the `invoke`
    command.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 状态码为400，这是正常的，因为`UpdateFunction`需要JSON输入。让我们看看如何使用`invoke`命令向我们的函数提供JSON。
- en: 'Head back to the DynamoDB `movies` table, and pick up a movie that you want
    to update. In this example, we will update the movie with the ID as 13, shown
    as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到DynamoDB的`movies`表，并选择要更新的电影。在本例中，我们将更新ID为13的电影，如下所示：
- en: '![](img/cf4c4a5a-47d0-4cff-8131-68edd932fb20.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cf4c4a5a-47d0-4cff-8131-68edd932fb20.png)'
- en: 'Create a JSON file with a `body` attribute that contains the new movie item
    attribute, as the Lambda function is expecting the input to be in the API Gateway
    Proxy request format:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个包含新电影项目属性的`body`属性的JSON文件，因为Lambda函数期望输入以API Gateway代理请求格式呈现：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Finally, run the `invoke` function command again with the JSON file as the
    input parameter:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，再次运行`invoke`函数命令，将JSON文件作为输入参数：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you print the `result.json` content, the updated movie should be returned,
    shown as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果打印`result.json`的内容，更新后的电影应该会返回，如下所示：
- en: '![](img/a0e91b21-4b46-4ba5-a805-6b9cf5783fcf.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a0e91b21-4b46-4ba5-a805-6b9cf5783fcf.png)'
- en: 'You can verify that the movie''s name is updated in the DynamoDB table by invoking
    the `FindAllMovies` function:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过调用`FindAllMovies`函数来验证DynamoDB表中电影的名称是否已更新：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `body` attribute should contain the new updated movie, shown as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`body`属性应该包含新更新的电影，如下所示：'
- en: '![](img/4d2551c4-7c08-45ab-833a-d237a6585924.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4d2551c4-7c08-45ab-833a-d237a6585924.png)'
- en: 'Head back to DynamoDB Console; the movie with the ID of 13 should have a new
    name, as shown in the following  screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到DynamoDB控制台；ID为13的电影应该有一个新的名称，如下截图所示：
- en: '![](img/cc7602d9-b2e1-400c-9718-68dd610decc2.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cc7602d9-b2e1-400c-9718-68dd610decc2.png)'
- en: The delete-function command
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除函数命令
- en: 'To delete a Lambda function, you can use the following command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除Lambda函数，您可以使用以下命令：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: By default, the command will delete all function versions and aliases. To delete
    a specific version or alias, you might want to use the `--qualifier` option.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，该命令将删除所有函数版本和别名。要删除特定版本或别名，您可能需要使用`--qualifier`选项。
- en: By now, you should be familiar with all the AWS CLI commands you might use and
    need while building your serverless applications in AWS Lambda. In the upcoming
    section, we will see how to create different versions of your Lambda functions
    and maintain multiple environments with aliases.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您应该熟悉了在构建AWS Lambda中的无服务器应用程序时可能使用和需要的所有AWS CLI命令。在接下来的部分中，我们将看到如何创建Lambda函数的不同版本，并使用别名维护多个环境。
- en: Versions and aliases
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本和别名
- en: When you're building your serverless application, you must separate your deployment
    environments to test new changes without impacting your production. Therefore,
    having multiple versions of your Lambda functions makes sense.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建无服务器应用程序时，您必须将部署环境分开，以便在不影响生产的情况下测试新更改。因此，拥有多个Lambda函数版本是有意义的。
- en: Versioning
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本控制
- en: 'A version represents a state of your function''s code and configuration in
    time. By default, each Lambda function has the `$LATEST` version pointing to the
    latest changes of your function, as shown in the following screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 版本代表了您函数代码和配置在某个时间点的状态。默认情况下，每个Lambda函数都有一个`$LATEST`版本，指向您函数的最新更改，如下截图所示：
- en: '![](img/f0af4671-f79f-4c0b-a52e-53d80a392b58.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f0af4671-f79f-4c0b-a52e-53d80a392b58.png)'
- en: 'In order to create a new version from the `$LATEST` version, click on Actions and
    Publish new version. Let''s call it `1.0.0`, as shown in  the next screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要从`$LATEST`版本创建新版本，请单击“操作”并选择“发布新版本”。让我们称其为`1.0.0`，如下截图所示：
- en: '![](img/3e0d3aa0-b07c-48bc-adc8-f9bf75607245.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3e0d3aa0-b07c-48bc-adc8-f9bf75607245.png)'
- en: 'The new version will be created with an ID=1 (incremental). Note the ARN Lambda
    function at the top of the window in the following screenshot; it has the version
    ID:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本将创建一个ID=1（递增）。请注意以下截图中窗口顶部的ARN Lambda函数；它具有版本ID：
- en: '![](img/f123634e-9126-42a6-bf0b-ce5ffcae414b.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f123634e-9126-42a6-bf0b-ce5ffcae414b.png)'
- en: 'Once the version is created, you cannot update the function code, shown as
    follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 版本创建后，您无法更新函数代码，如下所示：
- en: '![](img/c93eb73c-fb64-48ae-9a55-7d0b047a6b7f.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c93eb73c-fb64-48ae-9a55-7d0b047a6b7f.png)'
- en: 'Moreover, advanced settings, such as IAM roles, network configuration, and
    compute usage, cannot be changed, shown as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，高级设置，如IAM角色、网络配置和计算使用情况，无法更改，如下所示：
- en: '![](img/e9fff6eb-11e2-4438-8632-92fc609387a3.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e9fff6eb-11e2-4438-8632-92fc609387a3.png)'
- en: Versions are called **immutable**, which means they cannot be changed once they're
    published; only the `$LATEST` version is editable.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 版本被称为**不可变**，这意味着一旦发布，它们就无法更改；只有`$LATEST`版本是可编辑的。
- en: Now, we know how to publish a new version from the console. Let's publish a
    new version with the AWS CLI. But first, we need to update the `FindAllMovies`
    function as we cannot publish a new version if no changes were made to `$LATEST`
    since publishing version `1.0.0`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们知道如何从控制台发布新版本。让我们使用AWS CLI发布一个新版本。但首先，我们需要更新`FindAllMovies`函数，因为如果自从发布版本`1.0.0`以来对`$LATEST`没有进行任何更改，我们就无法发布新版本。
- en: 'The new version will have a pagination system. The function will return only
    the number of items requested by the user. The following code will read the `Count`
    header parameter, convert it to a number, and use the `Scan` operation with the `Limit`
    parameter to fetch the movies from DynamoDB:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本将具有分页系统。该函数将仅返回用户请求的项目数量。以下代码将读取`Count`头参数，将其转换为数字，并使用带有`Limit`参数的`Scan`操作从DynamoDB中获取电影：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, we update the `FindAllMovies` Lambda function''s code with the `update-function-code`
    command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用`update-function-code`命令更新`FindAllMovies` Lambda函数的代码：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, publish a new version, `1.1.0`, based on the current configuration and
    code with the following command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，基于当前配置和代码，使用以下命令发布一个新版本`1.1.0`：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Go back to AWS Lambda Console and navigate to your `FindAllMovies`; a new version
    should be created with a new ID=2, as shown in the following screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到AWS Lambda控制台，导航到您的`FindAllMovies`；应该创建一个新版本，ID=2，如下截图所示：
- en: '![](img/93db27df-86fe-4dd5-b7c7-cd37eb140f69.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/93db27df-86fe-4dd5-b7c7-cd37eb140f69.png)'
- en: Now that our versions are created, let's test them out by using the AWS CLI
    `invoke` command.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的版本已经创建，让我们通过使用AWS CLI `invoke`命令来测试它们。
- en: FindAllMovies v1.0.0
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FindAllMovies v1.0.0
- en: 'Invoke the `FindAllMovies` v1.0.0 version with its ID in the qualifier parameter
    with the following command:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令在限定参数中调用`FindAllMovies` v1.0.0版本：
- en: '[PRE15]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`result.json` should have all the movies in the DynamoDB `movies` table, shown
    as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`result.json`应该包含DynamoDB`movies`表中的所有电影，如下所示：'
- en: '![](img/ba6b88b5-5a6e-4bf4-817d-69b80be8635c.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba6b88b5-5a6e-4bf4-817d-69b80be8635c.png)'
- en: The output showing all the movies in the DynamoDB movies table
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示DynamoDB电影表中的所有电影
- en: FindAllMovies v1.1.0
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FindAllMovies v1.1.0
- en: 'Create a new file called `input.json`, and paste in the following content.
    This function''s version expects a Header parameter, called `Count`, with a number
    of movies to return:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`input.json`的新文件，并粘贴以下内容。此函数的版本需要一个名为`Count`的Header参数，用于返回电影的数量：
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Execute the function, but this time, use the `--payload` parameter with the
    path location to the `input.json` file:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 执行该函数，但这次使用`--payload`参数和指向`input.json`文件的路径位置：
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`result.json` should contain only four movies, as expected, shown as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`result.json`应该只包含四部电影，如下所示：'
- en: '![](img/a5be9c81-be0c-4c0e-9daf-3010a0d4959c.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a5be9c81-be0c-4c0e-9daf-3010a0d4959c.png)'
- en: That's how to create multiple versions of your Lambda function. But, what are
    the best practices for Lambda function versioning?
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是如何创建多个版本的Lambda函数。但是，Lambda函数版本控制的最佳实践是什么？
- en: Semantic Versioning
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语义化版本控制
- en: When you publish a new version of your Lambda function, you should give it a
    significant and meaningful version name that allows you to track different changes
    made to your function through its development cycle.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当您发布Lambda函数的新版本时，应该给它一个重要且有意义的版本名称，以便您可以通过其开发周期跟踪对函数所做的不同更改。
- en: When you're building a public serverless API that will be used by millions of
    customers, the way you name your different API versions is critical as it allows
    your customers to know whether the new release introduces breaking changes. It
    also lets them choose the right time to upgrade to the newest version without
    taking much risk of breaking up their pipeline.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当您构建一个将被数百万客户使用的公共无服务器API时，您命名不同API版本的方式至关重要，因为它允许您的客户知道新版本是否引入了破坏性更改。它还让他们选择合适的时间升级到最新版本，而不会冒太多破坏他们流水线的风险。
- en: 'That''s where Semantic Versioning ([https://semver.org](https://semver.org))
    comes into play, it''s a version scheme that uses a sequence of three digits:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是语义化版本控制（[https://semver.org](https://semver.org)）的作用，它是一种使用三个数字序列的版本方案：
- en: '![](img/95b25d49-ebb1-489a-a43f-f77522dcd791.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/95b25d49-ebb1-489a-a43f-f77522dcd791.png)'
- en: 'Each digit is incremented based on the following rules:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 每个数字都根据以下规则递增：
- en: '**Major**: Increment if the Lambda function is not backward-compatible with
    previous releases.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主要**：如果Lambda函数与先前版本不兼容，则递增。'
- en: '**Minor**: Increment if the new functionality or features have been added to
    the function and it''s still backward-compatible.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**次要**：如果新功能或特性已添加到函数中，并且仍然向后兼容，则递增。'
- en: '**Patch**: Increment if bugs and issues have been fixed and the function is
    still backward-compatible.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**补丁**：如果修复了错误和问题，并且函数仍然向后兼容，则递增。'
- en: For example, the `FindAllMovies` function's version `1.1.0` is the first major
    release, with one minor version bringing a new feature (Pagination system).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`FindAllMovies`函数的版本`1.1.0`是第一个主要版本，带有一个次要版本带来了一个新功能（分页系统）。
- en: Aliases
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 别名
- en: The alias is a pointer to a specific version, it allows you to promote a function
    from one environment to another (such as staging to production). Aliases are mutable,
    unlike versions, which are immutable.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 别名是指向特定版本的指针，它允许您将函数从一个环境提升到另一个环境（例如从暂存到生产）。别名是可变的，而版本是不可变的。
- en: 'To illustrate the concept of aliases, we will create two aliases, as illustrated
    in the following diagram: a `Production` alias pointing to `FindAllMovies` Lambda
    function `1.0.0` version, and a `Staging` alias that points to function `1.1.0` version.
    Then, we will configure API Gateway to use these aliases instead of the `$LATEST` version:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明别名的概念，我们将创建两个别名，如下图所示：一个指向`FindAllMovies` Lambda函数`1.0.0`版本的`Production`别名，和一个指向函数`1.1.0`版本的`Staging`别名。然后，我们将配置API
    Gateway使用这些别名，而不是`$LATEST`版本：
- en: '![](img/e87027dd-a651-498d-bbab-2684b4573f3c.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e87027dd-a651-498d-bbab-2684b4573f3c.png)'
- en: 'Head back to the `FindAllMovies` configuration page. If you click on the **Qualifiers** drop-down
    list, you should see a default alias called `Unqualified` pointing to your `$LATEST`
    version, as shown in the following screenshot:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到`FindAllMovies`配置页面。如果单击**Qualifiers**下拉列表，您应该看到一个名为`Unqualified`的默认别名，指向您的`$LATEST`版本，如下截图所示：
- en: '![](img/521e0803-990d-40aa-8c5c-c5ce67395608.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/521e0803-990d-40aa-8c5c-c5ce67395608.png)'
- en: 'To create a new alias, click on Actions and then Create a new alias called
    `Staging`. Select the `5` version as the target, shown as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新别名，单击操作，然后创建一个名为`Staging`的新别名。选择`5`版本作为目标，如下所示：
- en: '![](img/9b245509-65f5-45c0-b87d-a5d7ca17cc02.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9b245509-65f5-45c0-b87d-a5d7ca17cc02.png)'
- en: 'Once created, the new version should be added to the list of Aliases, shown
    as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 创建后，新版本应添加到别名列表中，如下所示：
- en: '![](img/39136427-32c5-4e9a-bfaa-322cb13c6827.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/39136427-32c5-4e9a-bfaa-322cb13c6827.png)'
- en: 'Next, create a new alias for the `Production` environment that points to version
    `1.0.0` using the AWS command line:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用AWS命令行为`Production`环境创建一个指向版本`1.0.0`的新别名：
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Similarly, the new alias should be successfully created:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，新别名应成功创建：
- en: '![](img/87f2947c-f8ef-4520-8c29-99e84af8ea17.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/87f2947c-f8ef-4520-8c29-99e84af8ea17.png)'
- en: Now that our aliases have been created, let's configure the API Gateway to use
    those aliases with **Stage variables**.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了别名，让我们配置API Gateway以使用这些别名和**阶段变量**。
- en: Stage variables
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阶段变量
- en: Stage variables are environment variables that can be used to change the behavior
    at runtime of the API Gateway methods for each deployment stage. The following
    section will illustrate how to use stage variables with API Gateway.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 阶段变量是环境变量，可用于在每个部署阶段运行时更改API Gateway方法的行为。接下来的部分将说明如何在API Gateway中使用阶段变量。
- en: 'On the API Gateway Console, navigate to the `Movies` API, click on the `GET`
    method, and update the target Lambda Function to use a stage variable instead
    of a hardcoded Lambda function name, as shown in the following screenshot:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在API Gateway控制台上，导航到`Movies` API，单击`GET`方法，并更新目标Lambda函数，以使用阶段变量而不是硬编码的Lambda函数名称，如下截图所示：
- en: '![](img/c74cdbfd-622f-4eb3-a166-55242aed9c8b.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c74cdbfd-622f-4eb3-a166-55242aed9c8b.png)'
- en: 'When you save it, a new prompt will ask you to grant the permissions to API
    Gateway to call your Lambda function aliases, as shown in the following screenshot:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当您保存时，将会出现一个新的提示，要求您授予API Gateway调用Lambda函数别名的权限，如下截图所示：
- en: '![](img/c9ea0a69-ead1-478f-a915-0ad36c30bf95.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c9ea0a69-ead1-478f-a915-0ad36c30bf95.png)'
- en: 'Execute the following commands to allow API Gateway to invoke the `Production`
    and `Staging` aliases:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令以允许API Gateway调用`Production`和`Staging`别名：
- en: '**Production alias**:'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Production别名：**'
- en: '[PRE19]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '**Staging alias:**'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Staging别名：**'
- en: '[PRE20]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, create a new stage called `production`, as shown in next screenshot:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建一个名为`production`的新阶段，如下截图所示：
- en: '![](img/311b2b02-9a37-49a5-b79f-b0755d8ebc44.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/311b2b02-9a37-49a5-b79f-b0755d8ebc44.png)'
- en: 'Next, click on the **Stages Variables** tab, and create a new stage variable
    called `lambda` and set `FindAllMovies:Production` as a value, shown as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，单击**Stages Variables**选项卡，并创建一个名为`lambda`的新阶段变量，并将`FindAllMovies:Production`设置为值，如下所示：
- en: '![](img/541715f5-692e-4694-8e41-ce523f6560ec.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/541715f5-692e-4694-8e41-ce523f6560ec.png)'
- en: 'Do the same for the `staging` environment with the `lambda` variable pointing
    to the Lambda function''s `Staging` alias, shown as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`staging`环境，使用指向Lambda函数`Staging`别名的`lambda`变量进行相同操作，如下所示：
- en: '![](img/5d2cc7e7-8ecb-4879-96ab-9e3272681b45.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d2cc7e7-8ecb-4879-96ab-9e3272681b45.png)'
- en: 'To test the endpoint, use the `cURL` command or any REST client you''re familiar
    with. I opt for Postman. A `GET` method on the API Gateway''s `production` stage
    invoked URL should return all the movies in the database, shown as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试端点，请使用`cURL`命令或您熟悉的任何REST客户端。我选择了Postman。在API Gateway的`production`阶段调用的URL上使用`GET`方法应该返回数据库中的所有电影，如下所示：
- en: '![](img/a5b9c15a-4785-453d-89f1-ee518e30279b.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a5b9c15a-4785-453d-89f1-ee518e30279b.png)'
- en: 'Do the same for the staging environment, with a new `Header` key called `Count=4`;
    you should have only four movies items in return, shown as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`staging`环境，执行相同操作，使用名为`Count=4`的新`Header`键；您应该只返回四个电影项目，如下所示：
- en: '![](img/9e739b39-c75a-4cd4-88c8-1b4abba35045.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9e739b39-c75a-4cd4-88c8-1b4abba35045.png)'
- en: That's how you can maintain multiple environments of your Lambda functions.
    You can now easily promote the `1.1.0` version into production by changing the
    `Production` pointer to point to `1.1.0` instead of `1.0.0`, and roll back in
    case of failure to the previous working version without changing the API Gateway
    settings.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您可以维护Lambda函数的多个环境的方法。现在，您可以通过将`Production`指针从`1.0.0`更改为`1.1.0`而轻松将`1.1.0`版本推广到生产环境，并在失败时回滚到以前的工作版本，而无需更改API
    Gateway设置。
- en: Summary
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: AWS CLI can be very useful for creating automation scripts to manage AWS Lambda
    functions.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CLI对于创建自动化脚本来管理AWS Lambda函数非常有用。
- en: Versions are immutable and cannot be changed once they’re published. On the
    other hand, aliases are dynamic and their binding can be changed at any time to
    implement code-promotion or rollback. Adopting Semantic Versioning for the Lambda
    function’s versions can make tracking changes easier.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 版本是不可变的，一旦发布就无法更改。另一方面，别名是动态的，它们的绑定可以随时更改以实现代码推广或回滚。采用Lambda函数版本的语义化版本控制可以更容易地跟踪更改。
- en: In the next chapter, we will learn how to set up a CI/CD pipeline from scratch
    to automate the process of deploying Lambda functions to production. We will also
    cover how aliases and versions can be used in the Continuous Integration workflow.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何从头开始设置CI/CD流水线，以自动化部署Lambda函数到生产环境的过程。我们还将介绍如何在持续集成工作流程中使用别名和版本。
