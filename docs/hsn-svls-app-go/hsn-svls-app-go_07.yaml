- en: Implementing a CI/CD Pipeline
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施CI/CD流水线
- en: 'This chapter will discuss advanced concepts, such as:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论高级概念，如：
- en: How to set up a highly resilient and fault-tolerant CI/CD pipeline to automate
    the deployment of your serverless application
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何建立一个高度弹性和容错的CI/CD流水线，自动化部署您的无服务器应用程序
- en: The importance of having a centralized code repository for your Lambda functions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有一个用于Lambda函数的集中式代码存储库的重要性
- en: How to automatically deploy your code changes to production.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何自动部署代码更改到生产环境。
- en: Technical requirements
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Before starting this chapter, make sure that you create and upload the source
    code of the functions built in previous chapters to a centralized GitHub repository.
    In addition, previous experience with CI/CD concepts is highly recommended. The
    code bundle for this chapter is hosted on GitHub at [https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go](https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始本章之前，请确保您已经创建并上传了之前章节中构建的函数的源代码到一个集中的GitHub存储库。此外，强烈建议具有CI/CD概念的先前经验。本章的代码包托管在GitHub上，网址为[https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go](https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go)。
- en: Continuous Integration and deployment workflow
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成和部署工作流
- en: Continuous Integration, continuous deployment, and continuous delivery are an
    excellent way to accelerate the time-to-market of your software and drive innovation
    from feedback while ensuring you're building high-quality products through each
    iteration. But what do these practices mean? And how can they be applied when
    you're building serverless applications in AWS Lambda?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成、持续部署和持续交付是加速软件上市时间并通过反馈推动创新的绝佳方式，同时确保在每次迭代中构建高质量产品。但这些实践意味着什么？在构建AWS Lambda中的无服务器应用程序时，如何应用这些实践？
- en: Continuous Integration
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成
- en: '**Continuous Integration** (**CI**) is the process of having a centralized
    code repository and making all the changes and features go through a complex pipeline
    before integrating them into the central repository. A classic CI pipeline triggers
    a build whenever a code commit occurs, runs the unit tests and all pre-integration
    tests, builds the artifact, and pushes the result to an artifacts-management repository.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）是指拥有一个集中的代码存储库，并在将所有更改和功能整合到中央存储库之前，通过一个复杂的流水线进行处理的过程。经典的CI流水线在代码提交时触发构建，运行单元测试和所有预整合测试，构建构件，并将结果推送到构件管理存储库。'
- en: Continuous Deployment
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续部署
- en: '**Continuous Deployment** (**CD**) is an extension of Continuous Integration.
    Every change that passes all stages of your Continuous Integration pipeline is
    released automatically to your staging environment.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续部署**（**CD**）是持续集成的延伸。通过持续集成流水线的所有阶段的每个更改都会自动发布到您的暂存环境。'
- en: Continuous Delivery
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续交付
- en: '**Continuous Delivery** (**CD**) is similar to CD but requires human intervention
    or a business decision before deploying the release to production.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续交付**（**CD**）与CD类似，但在将发布部署到生产环境之前需要人工干预或业务决策。'
- en: 'Now that the practices are defined, you can use these concepts to leverage
    the power of automation and build an end-to-end deployment process, as described
    in the following diagram:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这些实践已经定义，您可以使用这些概念来利用自动化的力量，并构建一个端到端的部署流程，如下图所示：
- en: '![](img/ea5ed17b-20e6-4887-a819-1a96ad05f26e.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ea5ed17b-20e6-4887-a819-1a96ad05f26e.png)'
- en: In the upcoming sections, we will go through how to build this pipeline with
    the most-used CI solutions.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将介绍如何使用最常用的CI解决方案构建这个流水线。
- en: To illustrate the concepts, only the `FindAllMovies` function's code will be
    used, but the same steps can be applied over the rest of the Lambda functions.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这些概念，只使用`FindAllMovies`函数的代码，但相同的步骤可以应用于其他Lambda函数。
- en: Automating the deployment of Lambda functions
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化部署Lambda函数
- en: 'In this section, we will see how to build a pipeline to automate the deployment
    process of the Lambda functions built in the previous chapter in the following
    different ways:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何构建一个流水线，以不同的方式自动化部署前一章中构建的Lambda函数的部署过程。
- en: AWS-managed solutions, such as CodePipeline and CodeBuild
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由AWS管理的解决方案，如CodePipeline和CodeBuild
- en: On-premise solutions, such as Jenkins
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地解决方案，如Jenkins
- en: SaaS solutions, such as Circle CI
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SaaS解决方案，如Circle CI
- en: Continuous Deployment with CodePipeline and CodeBuild
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CodePipeline和CodeBuild进行持续部署
- en: AWS CodePipeline is a workflow-management tool that allows you to automate the
    release and deployment process of your software. The user defines a set of steps
    that form a CI workflow that can be executed on AWS-managed services, such as
    CodeBuild and CodeDeploy, or third-party tools, such as Jenkins.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CodePipeline是一个工作流管理工具，允许您自动化软件的发布和部署过程。用户定义一组步骤，形成一个可以在AWS托管服务（如CodeBuild和CodeDeploy）或第三方工具（如Jenkins）上执行的CI工作流。
- en: In this example, AWS CodeBuild will be used to test, build, and deploy your
    Lambda function. Therefore, a build specification file with the name of `buildspec.yml`
    should be created in the code repository.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，AWS CodeBuild将用于测试、构建和部署您的Lambda函数。因此，应在代码存储库中创建一个名为`buildspec.yml`的构建规范文件。
- en: '`buildspec.yml` defines a set of steps that will be executed on the CI server
    as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`buildspec.yml`定义了将在CI服务器上执行的一组步骤，如下所示：'
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The build specification is divided into the following four phases:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 构建规范分为以下四个阶段：
- en: '**Install**:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装**：'
- en: Set up Go workspace
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置Go工作空间
- en: Install Go linter
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Go linter
- en: '**Pre-build**:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预构建：
- en: Install Go dependencies
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Go依赖项
- en: Check whether our code is well formatted and follows Go best practices and common
    conventions
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查我们的代码是否格式良好，并遵循Go的最佳实践和常见约定
- en: Run unit tests with the `go test` command
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`go test`命令运行单元测试
- en: '**Build**:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建**：'
- en: Build a single binary with the `go build` command
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`go build`命令构建单个二进制文件
- en: Create a deployment package, `.zip`, from the generated binary
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从生成的二进制文件创建一个部署包`.zip`
- en: Store the `.zip` file in the S3 bucket
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`.zip`文件存储在S3存储桶中
- en: '**Post-build**:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后构建**：'
- en: Update the Lambda function's code with the new deployment package
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用新的部署包更新Lambda函数的代码
- en: The unit test command will return an empty response as we will write unit tests
    of our Lambda functions in an upcoming chapter.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试命令将返回一个空响应，因为我们将在即将到来的章节中编写我们的Lambda函数的单元测试。
- en: Source provider
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 源提供者
- en: 'Now that our workflow is defined, let''s create a continuous deployment pipeline.
    Open the AWS Management Console ([https://console.aws.amazon.com/console/home](https://console.aws.amazon.com/console/home)),
    navigate to AWS CodePipeline from the **Developer Tools** section, and create
    a new pipeline called MoviesAPI, as shown in the following screenshot, shown as
    follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的工作流已经定义，让我们创建一个持续部署流水线。打开AWS管理控制台（[https://console.aws.amazon.com/console/home](https://console.aws.amazon.com/console/home)），从**开发人员工具**部分导航到AWS
    CodePipeline，并创建一个名为MoviesAPI的新流水线，如下图所示：
- en: '![](img/6db6f695-2630-45c0-9e83-63576d34ac8f.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6db6f695-2630-45c0-9e83-63576d34ac8f.png)'
- en: 'On the Source location page, select GitHub as the Source provider, shown as
    follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在源位置页面上，选择GitHub作为源提供者，如下图所示：
- en: '![](img/7feb1fde-06dc-4999-bca6-e0b6e3e3bb34.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7feb1fde-06dc-4999-bca6-e0b6e3e3bb34.png)'
- en: In addition to GitHub, AWS CodePipeline supports Amazon S3 and AWS CodeCommit
    as code-source providers.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 除了GitHub，AWS CodePipeline还支持Amazon S3和AWS CodeCommit作为代码源提供者。
- en: 'Click on the Connect to GitHub button and authorize CodePipeline to access
    to your GitHub repositories; then, select the Github repository on which your
    code is stored and the target git branch you want to build, shown as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“连接到GitHub”按钮，并授权CodePipeline访问您的GitHub存储库；然后，选择存储代码的GitHub存储库和要构建的目标git分支，如下图所示：
- en: '![](img/e08b129d-2bec-4f09-aecf-54945f743df1.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e08b129d-2bec-4f09-aecf-54945f743df1.png)'
- en: Build provider
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建提供者
- en: 'On the Build stage, choose AWS CodeBuild as the build server. Jenkins and Solano
    CI are also a supported build providers. Note the following screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建阶段，选择AWS CodeBuild作为构建服务器。Jenkins和Solano CI也是支持的构建提供者。请注意以下截图：
- en: '![](img/37e4784e-e34f-49aa-9565-0fd685bd95b1.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/37e4784e-e34f-49aa-9565-0fd685bd95b1.png)'
- en: 'The next step in the creation of the pipeline is to define a new CodeBuild
    project, shown as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建流水线的下一步是定义一个新的CodeBuild项目，如下所示：
- en: '![](img/8cbc481f-cf4f-421f-a11e-6f113046700e.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8cbc481f-cf4f-421f-a11e-6f113046700e.png)'
- en: 'Set the build server to be an Ubuntu instance with Golang as the Runtime environment,
    as shown in the next screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将构建服务器设置为带有Golang的Ubuntu实例作为运行时环境，如下图所示：
- en: '![](img/9ae9b608-e711-4bc6-9d36-c5c052dd42b5.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9ae9b608-e711-4bc6-9d36-c5c052dd42b5.png)'
- en: The build environment can also be based on a Docker image publicly available
    on DockerHub or in a private registry, such as **Elastic Container Registry**
    (**ECR**).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 构建环境也可以基于DockerHub上公开可用的Docker镜像或私有注册表，例如**弹性容器注册表**（**ECR**）。
- en: 'CodeBuild will store the artifacts (the `deployment` package) in an S3 bucket
    and update the Lambda function''s `FindAllMovies` code. Hence, an IAM role with
    the following policy should be attached:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: CodeBuild将在S3存储桶中存储构件（`部署`包），并更新Lambda函数的`FindAllMovies`代码。因此，应该附加一个具有以下策略的IAM角色：
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding code block the `arn:aws:lambda:us-east-1` account ID should
    be replaced with you account ID.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码块中，`arn:aws:lambda:us-east-1`帐户ID应该替换为您的帐户ID。
- en: Deploy provider
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署提供者
- en: 'With our project built, the next step to configure in the pipeline is the deployment
    to an environment. For this chapter, we will select the No Deployment option,
    and let CodeBuild deploy the new code to Lambda using the AWS CLI, as shown in
    the next screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 项目构建完成后，在流水线中配置的下一步是部署到一个环境。在本章中，我们将选择**无部署**选项，并让CodeBuild使用AWS CLI将新代码部署到Lambda，如下图所示：
- en: '![](img/a0b7d842-1fa3-4663-9c84-406a128fd17e.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a0b7d842-1fa3-4663-9c84-406a128fd17e.png)'
- en: This deployment process requires an explanation of Serverless Application Model
    and CloudFormation, which will be explained in further chapters in detail.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这个部署过程需要解释无服务器应用程序模型和CloudFormation，这将在后续章节中详细解释。
- en: 'Review the details; when you''re ready, click on Save, and a new pipeline should
    be created as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 审查详细信息；当您准备好时，点击保存，将创建一个新的流水线，如下所示：
- en: '![](img/c9d03e61-ad1c-4484-8b0e-c7edfa0871ae.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c9d03e61-ad1c-4484-8b0e-c7edfa0871ae.png)'
- en: 'The pipeline will be started, and the Build stage will fail, as shown in the
    following screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 流水线将启动，并且构建阶段将失败，如下图所示：
- en: '![](img/0408b126-c629-4b9f-8fdf-6768e30b5714.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0408b126-c629-4b9f-8fdf-6768e30b5714.png)'
- en: 'If we click on the Details link, it will bring you to the CodeBuild project
    page for that particular build. The phases describing the build specification
    file can be seen here:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击“详细信息”链接，它将带您到该特定构建的CodeBuild项目页面。可以在这里看到描述构建规范文件的阶段：
- en: '![](img/0ccda68d-2537-4456-b2f1-2887fce22148.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0ccda68d-2537-4456-b2f1-2887fce22148.png)'
- en: 'As shown, the Pre-build phase has failed; in the logs section at the bottom,
    we can see it''s due to the `golint` command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如图所示，预构建阶段失败了；在底部的日志部分，我们可以看到这是由于`golint`命令：
- en: '![](img/3652dce2-7f12-4e5a-bc81-1780af212983.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3652dce2-7f12-4e5a-bc81-1780af212983.png)'
- en: 'In Golang, all top-level, exported names (uppercase) should have doc comments.
    Hence, a new comment on top of the Movie struct declaration should be added as
    follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在Golang中，所有顶级的、公开的名称（大写）都应该有文档注释。因此，应该在Movie结构声明的顶部添加一个新的注释，如下所示：
- en: '[PRE2]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Commit the new changes to GitHub, and a new build will trigger the execution
    of the pipeline:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 将新更改提交到GitHub，新的构建将触发流水线的执行：
- en: '![](img/71c96abb-5edc-4974-ad01-e7f4f073733f.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/71c96abb-5edc-4974-ad01-e7f4f073733f.png)'
- en: 'You might be wondering how pushing the code change to the code repository triggered
    a new build. The answer is GitHub webhooks. When you created your CodeBuild project,
    a new Webhook is created automatically in your GitHub repository. Therefore, all
    changes to your code repository go through the CI pipeline, as shown in the next
    screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想知道如何将代码更改推送到代码存储库会触发新的构建。答案是GitHub Webhooks。当您创建CodeBuild项目时，GitHub存储库中会自动创建一个新的Webhook。因此，所有对代码存储库的更改都会通过CI流水线，如下截图所示：
- en: '![](img/447e1a2c-6cc8-497f-bb5e-a5b7f13beac8.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/447e1a2c-6cc8-497f-bb5e-a5b7f13beac8.png)'
- en: 'Once the pipeline is completed, all CodeBuild phases should be passed, as shown
    in the next screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦流水线完成，所有CodeBuild阶段都应该通过，如下截图所示：
- en: '![](img/e4d8cb20-435f-44d6-b3a2-3eacaae3da54.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4d8cb20-435f-44d6-b3a2-3eacaae3da54.png)'
- en: 'Open the S3 Console, then click on the bucket used by the pipeline; a new deployment
    package should be stored with a key name identical to the commit ID:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 打开S3控制台，然后单击流水线使用的存储桶；新的部署包应该以与提交ID相同的键名存储：
- en: '![](img/31f28b91-80da-4e4b-a8f7-69f8b19aebda.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/31f28b91-80da-4e4b-a8f7-69f8b19aebda.png)'
- en: Finally, CodeBuild will update the Lambda function's code with the `update-function-code`
    command.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，CodeBuild将使用`update-function-code`命令更新Lambda函数的代码。
- en: Continuous Pipeline with Jenkins
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Jenkins的连续管道
- en: For many years, Jenkins has been the tool of choice. It's an open source continuous-integration
    server written in Java, built on top of the Hudson project. It's highly extensible
    due to its plugin-driven architecture and rich ecosystem.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，Jenkins一直是首选工具。它是一个用Java编写的开源持续集成服务器，构建在Hudson项目之上。由于其插件驱动的架构和丰富的生态系统，它具有很高的可扩展性。
- en: In the upcoming sections, we will write our first *Pipeline as Code* with Jenkins
    but first we need to set up our Jenkins environment.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将使用Jenkins编写我们的第一个*Pipeline as Code*，但首先我们需要设置我们的Jenkins环境。
- en: Distributed builds
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分布式构建
- en: 'To get started, install Jenkins by following the official instructions from
    this guide: [https://jenkins.io/doc/book/installing/](https://jenkins.io/doc/book/installing/).
    Once Jenkins is up and running, point your browser to `http://instance_ip:8080`.
    This link will bring up the Jenkins dashboard, as shown in the next screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请按照此指南中的官方说明安装Jenkins：[https://jenkins.io/doc/book/installing/](https://jenkins.io/doc/book/installing/)。一旦Jenkins启动并运行，将浏览器指向`http://instance_ip:8080`。此链接将打开Jenkins仪表板，如下截图所示：
- en: '![](img/90272e44-925b-4db2-84fd-8cbe1ce885a8.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/90272e44-925b-4db2-84fd-8cbe1ce885a8.png)'
- en: 'One of the advantages of using Jenkins is its master/slave architecture. It
    allows you to set up a Jenkins cluster with multiple workers (agents) responsible
    for building your application. This architecture has many benefits:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Jenkins的一个优势是其主/从架构。它允许您设置一个Jenkins集群，其中有多个负责构建应用程序的工作节点（代理）。这种架构有许多好处：
- en: Response time, not a lot of jobs waiting in the queue to be built
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应时间，队列中等待构建的作业不多
- en: Increased number of concurrent builds
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并发构建数量增加
- en: Supports multiple platforms
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持多个平台
- en: The following steps describe the configuration process for bringing up a new
    worker for use with the Jenkins build server. The worker is an EC2 instance, with
    `JDK8` and `Golang`, the latest stable version installed (see [Chapter 2](52476096-dfc4-445d-ab4c-df692471bff7.xhtml), *Getting
    Started with AWS Lambda*, for instructions).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤描述了为Jenkins构建服务器启动新工作节点的配置过程。工作节点是一个EC2实例，安装了最新稳定版本的`JDK8`和`Golang`（有关说明，请参见[第2章](52476096-dfc4-445d-ab4c-df692471bff7.xhtml)，*使用AWS
    Lambda入门*）。
- en: 'Once the worker is running, copy its IP address to the clipboard, head back
    to the Jenkins master dashboard, click on Manage Jenkins and then click on Manage
    Nodes. Click on New Node, give the worker a name, and select Permanent Agent,
    as shown in the next screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 工作节点运行后，将其IP地址复制到剪贴板，返回Jenkins主控台，单击“管理Jenkins”，然后单击“管理节点”。单击“新建节点”，给工作节点命名，并选择永久代理，如下截图所示：
- en: '![](img/6eb5aa4c-9635-4f22-933c-d7880e1c857c.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6eb5aa4c-9635-4f22-933c-d7880e1c857c.png)'
- en: 'Then, set the node root directory to the Go workspace and paste the IP address
    of the node and select the SSH key, shown as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将节点根目录设置为Go工作空间，并粘贴节点的IP地址并选择SSH密钥，如下所示：
- en: '![](img/2b292f78-f740-42b5-94dd-d43be27c7f15.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b292f78-f740-42b5-94dd-d43be27c7f15.png)'
- en: 'If everything is configured correctly, the node will be brought online, shown
    as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切配置正确，节点将上线，如下所示：
- en: '![](img/d1f68289-1dcd-4cd1-989b-581ab26cd843.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d1f68289-1dcd-4cd1-989b-581ab26cd843.png)'
- en: Setting up a Jenkins job
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Jenkins作业
- en: Now that our cluster is deployed, we can write our first Jenkins pipeline. This
    pipeline is defined in a text file called `Jenkinsfile`. This definition file
    must be committed to the Lambda function's code repository.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的集群已部署，我们可以编写我们的第一个Jenkins流水线。这个流水线定义在一个名为`Jenkinsfile`的文本文件中。这个定义文件必须提交到Lambda函数的代码存储库中。
- en: The `Pipeline` plugin must be installed on Jenkins to use the *Pipeline as Code* feature.
    This feature offers a number of immediate benefits, such as code review, rollbacks,
    and versioning.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins必须安装`Pipeline`插件才能使用*Pipeline as Code*功能。这个功能提供了许多即时的好处，比如代码审查、回滚和版本控制。
- en: 'Consider the following `Jenkinsfile`, which implements a basic five-stage continuous-delivery
    pipeline for the `FindAllMovies` Lambda function:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下`Jenkinsfile`，它实现了一个基本的五阶段连续交付流水线，用于`FindAllMovies` Lambda函数：
- en: '[PRE3]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The pipeline uses a **domain-specific language** (**DSL**) based on Groovy''s
    syntax and it will be executed on the node we added earlier to the cluster. Each
    time a change is pushed to the GitHub repository, your changes will go through
    multiple stages:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 流水线使用基于Groovy语法的**领域特定语言**（**DSL**）编写，并将在我们之前添加到集群的节点上执行。每次对GitHub存储库进行更改时，您的更改都将经过多个阶段：
- en: Checking out code-form source control
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查来自源代码控制的代码
- en: Running unit and quality tests
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行单元和质量测试
- en: Building the deployment package and storing this artifact to an S3 bucket
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建部署包并将此构件存储到S3存储桶
- en: Updating the `FindAllMovies` function's code
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新`FindAllMovies`函数的代码
- en: Note the usage of the git commit ID as a name for the deployment package to
    give a meaningful and significant name for each release and be able to roll back
    to a specific commit if things go wrong.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意使用git提交ID作为部署包的名称，以便为每个发布提供有意义且重要的名称，并且如果出现问题，可以回滚到特定的提交。
- en: 'Now that our pipeline is defined, we need to create a new job on Jenkins by
    clicking on New Item. Then, enter a name for the job and select Multibranch Pipeline.
    Set the GitHub repository on which your Lambda function''s code is stored and
    the path to the `Jenkinsfile` as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的管道已经定义好，我们需要通过单击“新建”在Jenkins上创建一个新作业。然后，为作业输入名称，并选择多分支管道。设置存储您的Lambda函数代码的GitHub存储库以及`Jenkinsfile`的路径如下：
- en: '![](img/6c2d7eef-3dc1-42ae-9724-7a9060ad836a.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6c2d7eef-3dc1-42ae-9724-7a9060ad836a.png)'
- en: Prior to the build, an IAM instance role with write access to S3 and the update
    operation to Lambda must be configured on the Jenkins workers.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建之前，必须在Jenkins工作程序上配置具有对S3的写访问权限和对Lambda的更新操作的IAM实例角色。
- en: 'Once saved, the pipeline will be executed on the master branch and the job
    should go to green, as shown:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 保存后，管道将在主分支上执行，并且作业应该变为绿色，如下所示：
- en: '![](img/5999f09e-3cd7-425c-a278-4c03911f888c.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5999f09e-3cd7-425c-a278-4c03911f888c.png)'
- en: 'Once the pipeline is completed, you can click on each stage to see execution
    logs. In the following example, we can see the logs of the `Deploy` stage:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 管道完成后，您可以单击每个阶段以查看执行日志。在以下示例中，我们可以看到`部署`阶段的日志：
- en: '![](img/2ec68058-25b9-4726-840c-a30fc6fb7ffc.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ec68058-25b9-4726-840c-a30fc6fb7ffc.png)'
- en: Git Hooks
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git钩子
- en: 'Finally, to make Jenkins trigger the build when you push to the code repository,
    click on **Settings** from your GitHub repository, then on **Integrations & Services** search
    for **Jenkins (GitHub plugin)**, and fill it in with a URL similar  to the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了使Jenkins在您推送到代码存储库时触发构建，请从您的GitHub存储库中单击**设置**，然后在**集成和服务**中搜索**Jenkins（GitHub插件）**，并填写类似以下的URL：
- en: '![](img/22de4b90-b340-41dc-8dbb-50039bfdf719.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22de4b90-b340-41dc-8dbb-50039bfdf719.png)'
- en: 'Now, any time you push code to your GitHub repository, the full Jenkins pipeline
    will be triggered, shown as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每当您将代码推送到GitHub存储库时，完整的Jenkins管道将被触发，如下所示：
- en: '![](img/be76cf6c-6847-458a-addc-59fd7147419e.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/be76cf6c-6847-458a-addc-59fd7147419e.png)'
- en: Another way to make Jenkins create a build if it detects changes is by polling
    the target git repository periodically (cron job). This solution is a bit inefficient,
    but might be useful if your Jenkins instance is in a private network.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种使Jenkins在检测到更改时创建构建的方法是定期轮询目标git存储库（cron作业）。这种解决方案效率有点低，但如果您的Jenkins实例在私有网络中，这可能是有用的。
- en: Continuous Integration with Circle CI
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Circle CI进行持续集成
- en: CircleCI is a "CI/CD as a Service". It's a platform that integrates very well
    with GitHub- and BitBuckets-based projects and has built-in support for Golang
    applications.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: CircleCI是“CI/CD即服务”。这是一个与基于GitHub和BitBucket的项目非常好地集成，并且内置支持Golang应用程序的平台。
- en: In the following section, we will see how to use CircleCI to automate the deployment
    process of our Lambda functions.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将看到如何使用CircleCI自动化部署我们的Lambda函数的过程。
- en: Identity and access management
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 身份和访问管理
- en: 'Sign into Circle CI ([https://circleci.com/vcs-authorize/](https://circleci.com/vcs-authorize/))
    with your GitHub account. Then, select the repository on which your Lambda function''s
    code is stored, then click on the Set Up project button so Circle CI can infer
    settings automatically, as shown in the following screenshot:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您的GitHub帐户登录Circle CI（[https://circleci.com/vcs-authorize/](https://circleci.com/vcs-authorize/)）。然后，选择存储您的Lambda函数代码的存储库，然后单击“设置项目”按钮，以便Circle
    CI可以自动推断设置，如下面的屏幕截图所示：
- en: '![](img/30df529b-2ac3-49b8-adbf-52e0d1a25501.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/30df529b-2ac3-49b8-adbf-52e0d1a25501.png)'
- en: 'Similar to Jenkins and CodeBuild, CircleCI will need access to a few AWS services.
    Therefore, an IAM user is needed. Head back to AWS Management Console, and create
    a new IAM user called **circleci**. Generate the AWS credentials, click on Settings
    from the CircleCI project, and then paste the AWS access and secret keys, as shown
    in the following screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 与Jenkins和CodeBuild类似，CircleCI将需要访问一些AWS服务。因此，需要一个IAM用户。返回AWS管理控制台，并创建一个名为**circleci**的新IAM用户。生成AWS凭据，然后从CircleCI项目的设置中点击“设置”，然后粘贴AWS访问和秘密密钥，如下面的屏幕截图所示：
- en: '![](img/e0d21756-8048-4f19-ad06-380ce93e7305.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e0d21756-8048-4f19-ad06-380ce93e7305.png)'
- en: Be sure to attach IAM policies with permissions to read/write the S3  bucket
    and Lambda functions to the IAM user.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 确保附加了具有对S3读/写权限和Lambda函数的权限的IAM策略到IAM用户。
- en: Configuring the CI Pipeline
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置CI管道
- en: 'Now that our project is set up, we need to define the CI workflow; to do so,
    we need to create a definition file, called the `config.yml` file, inside the `.circleci`
    folder with the following content:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的项目已经设置好，我们需要定义CI工作流程；为此，我们需要在`.circleci`文件夹中创建一个名为`config.yml`的定义文件，其中包含以下内容：
- en: '[PRE4]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The build environment will be a Go official Docker image in DockerHub. From
    this image, a new container will be created and the commands listed in the *steps*
    section will be executed as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 构建环境将是DockerHub中Go官方Docker镜像。从该镜像中，将创建一个新容器，并按照*steps*部分中列出的命令执行：
- en: Check out the code from the GitHub repository.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从GitHub存储库中检出代码。
- en: Install the AWS CLI and the ZIP command.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装AWS CLI和ZIP命令。
- en: Execute automated tests.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行自动化测试。
- en: Build a single binary from the source code and zipp up a deployment package.
    The commit ID corresponding to the build will be used as a name for the zip file
    (note the usage of the `CIRCLE_SHA1` environment variable).
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从源代码构建单个二进制文件并压缩部署包。与构建对应的提交ID将用作zip文件的名称（请注意使用`CIRCLE_SHA1`环境变量）。
- en: Save the artefact in the S3 bucket.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将工件保存在S3存储桶中。
- en: Update the Lambda function's code using the AWS CLI.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用AWS CLI更新Lambda函数的代码。
- en: 'Once the template is defined and committed to the GitHub repository, a new
    build will be triggered as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦模板被定义并提交到GitHub存储库，将触发新的构建，如下所示：
- en: '![](img/f46c72c5-477e-4220-9556-19942ed5767b.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f46c72c5-477e-4220-9556-19942ed5767b.png)'
- en: 'When the pipeline is successfully running, it will look like this:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 当流水线成功运行时，它会是这个样子：
- en: '![](img/e1b70165-60af-4bd9-a945-ec27afc3dbee.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e1b70165-60af-4bd9-a945-ec27afc3dbee.png)'
- en: That’s pretty much it. This chapter merely scratches the surface of what can
    be done with the CI/CD pipeline, but should provide enough of a foundation for
    you to start experimenting and build your end-to-end workflow for your Lambda
    functions.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上就是这样。本章只是初步介绍了CI/CD流水线的功能，但应该为您开始实验和构建Lambda函数的端到端工作流提供了足够的基础。
- en: Summary
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to set up a CI/CD pipeline from scratch to automate
    the deployment process of Lambda functions and how this solution can be implemented
    using different CI tools and services starting with an AWS-managed service to
    a highly extensible build server.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何从头开始设置CI/CD流水线，自动化Lambda函数的部署过程，以及如何使用不同的CI工具和服务来实现这个解决方案，从AWS托管服务到高度可扩展的构建服务器。
- en: In the next chapter, we will build an improved version of this pipeline by writing
    automated unit and integration tests for our serverless API and build a single
    page app with REST backend backed with serverless functions.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过为我们的无服务器API编写自动化单元和集成测试，以及使用无服务器函数构建带有REST后端的单页面应用程序，构建这个流水线的改进版本。
- en: Questions
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Implement a CI/CD pipeline for other Lambda functions with CodeBuild and CodePipeline.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用CodeBuild和CodePipeline为其他Lambda函数实现CI/CD流水线。
- en: Implement a similar workflow using Jenkins Pipeline.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Jenkins Pipeline实现类似的工作流。
- en: Implement the same pipeline with CircleCI.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用CircleCI实现相同的流水线。
- en: Add a new stage to the existing pipeline to publish a new version if the current
    git branch is the master.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有流水线中添加一个新阶段，如果当前的git分支是主分支，则发布一个新版本。
- en: Configure the pipeline to send a notification on a Slack channel every time
    a new Lambda function is deployed or updated.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置流水线，在每次部署或更新新的Lambda函数时，在Slack频道上发送通知。
