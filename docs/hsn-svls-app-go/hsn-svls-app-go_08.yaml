- en: Scaling Up Your Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展您的应用程序
- en: 'This chapter is a short break from the previous technical chapters, where we
    will go in-depth on the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是上一技术章节的一个短暂休息，我们将深入探讨以下内容：
- en: How serverless autoscaling works
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无服务器自动扩展的工作原理
- en: How Lambda can handle traffic demands during peak-service usage with no capacity
    planning or scheduled scaling
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lambda如何在高峰服务使用期间处理流量需求，而无需容量规划或定期扩展
- en: How AWS Lambda uses concurrency to create multiple executions in parallel to
    your function's code
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS Lambda如何使用并发性来并行创建多个执行以执行函数的代码
- en: How it can impact your cost and application performance.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它如何影响您的成本和应用程序性能。
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter is a follow-up of the previous chapter as it will use the serverless
    API built in the previous one; it's recommended to read the previous chapter first
    before tackling this section.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是上一章的后续，因为它将使用上一章中构建的无服务器API；建议在处理本节之前先阅读上一章。
- en: Load testing and scaling
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 负载测试和扩展
- en: 'In this part, we will generate random workloads to see how Lambda acts when
    incoming requests increase. To achieve that, we will use a load-testing tool,
    such as **Apache Bench**. In this chapter, I will be using `hey`, which is a Go-based
    tool, and is very efficient and faster than classic `HTTP` benchmarking tools
    due to Golang''s built-in concurrency. You can download it by installing the following
    `Go` package from your terminal:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分中，我们将生成随机工作负载，以查看Lambda在传入请求增加时的表现。为了实现这一点，我们将使用负载测试工具，比如**Apache Bench**。在本章中，我将使用`hey`，这是一个基于Go的工具，由于Golang内置的并发性，它非常高效和快速，比传统的`HTTP`基准测试工具更快。您可以通过在终端中安装以下`Go`包来下载它：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Be sure that the `$GOPATH` variable is set to be able to execute the `hey` command
    regardless of your current directory, or you can add the `$HOME/go/bin` folder
    to the `$PATH` variable.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`$GOPATH`变量被设置，以便能够在任何当前目录下执行`hey`命令，或者您可以将`$HOME/go/bin`文件夹添加到`$PATH`变量中。
- en: Lambda autoscaling
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lambda自动扩展
- en: 'Now, we are ready to run our first harness or load testing by executing the
    following command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备通过执行以下命令来运行我们的第一个测试或负载测试：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you prefer apache benchmark, the same command can be used by replacing the
    **hey** keyword with **ab.**
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢Apache Benchmark，可以通过将**hey**关键字替换为**ab**来使用相同的命令。
- en: 'The command will open 50 connections and send 1,000 requests against the API
    Gateway endpoint URL for the `FindAllMovies` function. At the end of the test,
    **hey** will display information about the total response time and in-depth details
    about each request, as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将打开50个连接，并对API Gateway端点URL执行1,000个请求，用于`FindAllMovies`函数。在测试结束时，**hey**将显示有关总响应时间的信息以及每个请求的详细信息，如下所示：
- en: '![](img/745a0e79-f00a-40af-a9a0-8bd988ec3b7b.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/745a0e79-f00a-40af-a9a0-8bd988ec3b7b.png)'
- en: Make sure to replace the invocation URL with your own. Also, please note that
    some parts of the screenshot have been cropped to focus only on the useful content.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 确保用您自己的调用URL替换调用URL。另外，请注意，截图的某些部分已被裁剪，以便只关注有用的内容。
- en: In addition to the total response time, **hey** gives an output of a response-time
    histogram that shows the first requests taking more time (around 2 seconds) to
    respond, which can be explained with the **cold start** since Lambda has to download
    the deployment package and initialize a new container. However, the rest of the
    requests were fast (less than 800 milliseconds), due to the **warm start** and
    the usage of existing containers from previous requests.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 除了总响应时间外，**hey**还输出了一个响应时间直方图，显示第一个请求花费更多时间（大约2秒）来响应，这可以解释为Lambda需要下载部署包并初始化新容器的**冷启动**。然而，其余的请求很快（不到800毫秒），这是由于**热启动**和使用先前请求的现有容器。
- en: From the previous benchmark, we can say that Lambda keeps its promise of autoscaling
    when traffic is raised; while that might be a good thing, it has downsides, which
    we will see in the next section.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 从先前的基准测试中，我们可以说Lambda在流量增加时保持了自动扩展的承诺；虽然这可能是一件好事，但它也有缺点，我们将在下一节中看到。
- en: Downstream resources
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下游资源
- en: In our example of the Movies API, a DynamoDB table has been used to resolve
    the stateless issue. This table requires the user to define the read and write
    throughput capacity, in advance, to create the necessary underlying infrastructure
    to handle the defined traffic. While creating the table in [Chapter 5](8ed90f5e-1c5d-4b4f-aca7-82b878ca2712.xhtml), *Managing
    Data Persistence with DynamoDB,* we used the default throughput, which is five
    read-capacity units and five write-capacity units. The five read-capacity units
    work as a charm for APIs that aren't read-heavy. In the previous load test, we
    created 50 concurrent executions, that is, 50 reads in parallel to the `movies`
    table. As a result, the table will be suffering from high read throughput, and
    the `Scan` operation will be slower and DynamoDB might start throttling requests.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的Movies API示例中，DynamoDB表已被用于解决无状态问题。该表要求用户提前定义读取和写入吞吐量容量，以创建必要的基础设施来处理定义的流量。在[第5章](8ed90f5e-1c5d-4b4f-aca7-82b878ca2712.xhtml)中，*使用DynamoDB管理数据持久性*，我们使用了默认的吞吐量，即五个读取容量单位和五个写入容量单位。五个读取容量单位对于不太重读的API来说非常有效。在先前的负载测试中，我们创建了50个并发执行，也就是说，对`movies`表进行了50次并行读取。结果，表将遭受高读取吞吐量，并且`Scan`操作将变慢，DynamoDB可能会开始限制请求。
- en: 'We can verify this by going to the DynamoDB console and clicking on the **Metrics** tab
    from the `movies` table, as shown in the following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过转到DynamoDB控制台，并点击`movies`表的**Metrics**选项卡来验证这一点，如下截图所示：
- en: '![](img/3ee6584d-7f97-4382-8ccb-30bf7198d4c6.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ee6584d-7f97-4382-8ccb-30bf7198d4c6.png)'
- en: Clearly, the read-capacity graph experienced a high peak, which resulted in
    throttling read requests, and the table was overwhelmed by all of these incoming
    requests.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，读取容量图经历了一个高峰期，导致读取请求被限制，并且表格被所有这些传入的请求压倒。
- en: DynamoDB's throttling requests can be fixed by enabling the autoscaling mechanism
    to increase the provisioned read and write capacity to handle a sudden increase
    in traffic, or by reusing the query's results stored in the in-memory cache engine
    (a solution such as AWS ElastiCache with Redis or Memcached engine can be used)
    to avoid overwhelming the table and cutting several milliseconds off your function's
    execution time. However, you can't limit and protect your database resource from
    being overloaded in response to your Lambda function's scaling event.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: DynamoDB的限流请求可以通过启用自动扩展机制来增加预留的读写容量以处理突然增加的流量，或者通过重用存储在内存缓存引擎中的查询结果（可以使用AWS
    ElastiCache与Redis或Memcached引擎等解决方案）来避免过载表并减少函数执行时间。但是，您无法限制和保护数据库资源免受Lambda函数扩展事件的影响。
- en: Private Lambda functions
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 私有Lambda函数
- en: Another issue of concurrency can arise if your Lambda function is running inside
    a private VPC, since it will need to attach an **Elastic Network Interface** (**ENI**)
    to the Lambda container and wait for it to assign itself an IP. AWS Lambda uses
    the ENI to connect securely to internal resources in the VPC.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的Lambda函数在私有VPC中运行，可能会出现并发问题，因为它需要将**弹性网络接口**（ENI）附加到Lambda容器，并等待分配IP地址。AWS
    Lambda使用ENI安全连接到VPC中的内部资源。
- en: In addition to poor performance (attaching ENI takes an average of 4 seconds),
    a VPC-enabled Lambda function forces you to maintain and configure a NAT instance
    for internet access and a number of VPC subnets in multiple availability zones
    capable of supporting the ENI scaling requirements of your function, which might
    cause the VPC to run out of IP addresses.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 除了性能不佳（附加ENI平均需要4秒），启用VPC的Lambda函数还需要您维护和配置一个用于互联网访问的NAT实例和多个可支持函数ENI扩展需求的VPC子网，这可能导致VPC的IP地址用尽。
- en: To sum up, the Lambda function's autoscaling is a double-edged sword; it doesn't
    require capacity planning from your side. However, it might result in bad performance
    and surprising monthly bills. That's where the **concurrent execution** model
    comes into play.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，Lambda函数的自动扩展是一把双刃剑；它不需要您进行容量规划。但是，它可能导致性能不佳和令人惊讶的月度账单。这就是**并发执行**模型发挥作用的地方。
- en: Concurrent execution
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并发执行
- en: AWS Lambda dynamically scales capacity in response to increased traffic. However,
    there's a limited number of an executed function's code at any given time. This
    number is called concurrent execution, and it's defined per AWS region. The default
    limit of concurrency is 1,000 per AWS region. So, what happens if your function
    crosses this defined threshold? Read on to find out.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda会根据流量增加动态扩展容量。但是，每次执行函数的代码数量是有限的。这个数量称为并发执行，它是根据AWS区域定义的。默认并发限制是每个AWS区域1000个。那么，如果您的函数超过了这个定义的阈值会发生什么呢？继续阅读以了解详情。
- en: Lambda throttling
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lambda限流
- en: Lambda applies throttling (rate limiting) to your function if the concurrent
    execution count is exceeding the limit. Hence, the remaining incoming requests
    won't invoke the function.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果并发执行计数超过限制，Lambda会对您的函数应用限流（速率限制）。因此，剩余的传入请求将不会调用该函数。
- en: The invoking client is responsible for retrying the failed requests due to throttling
    by implementing a back-off strategy based on the `HTTP` code returned (`429` =
    too many requests). It's worth mentioning that Lambda functions can be configured
    to store unprocessed events, after a certain number of retries, to a queue called
    the **dead letter queue**.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 调用客户端负责根据返回的`HTTP`代码（`429` =请求过多）实施基于退避策略的重试失败请求。值得一提的是，Lambda函数可以配置为在一定数量的重试后将未处理的事件存储到名为**死信队列**的队列中。
- en: Throttling might be useful in some cases, as the concurrent execution capacity
    is shared across all functions (in our example, the `find`, `update`, `insert`,
    and `delete` functions). You may want to ensure that one function doesn't consume
    all the capacity and avoids starvation of the rest of the Lambda functions. This
    situation can happen frequently if one of your functions is used more than others.
    For example, consider the `FindAllMovies` function. Supposing it's the holiday
    season, a lot of customers will use your application to see a list of movies available
    to rent, which might result in several instances of the invocation of the `FindAllMovies` Lambda
    function.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，限流可能是有用的，因为并发执行容量是所有函数共享的（在我们的示例中，`find`、`update`、`insert`和`delete`函数）。您可能希望确保一个函数不会消耗所有容量，并避免其他Lambda函数的饥饿。如果您的某个函数比其他函数更常用，这种情况可能经常发生。例如，考虑`FindAllMovies`函数。假设现在是假期季，很多客户会使用您的应用程序查看可租用的电影列表，这可能导致多次调用`FindAllMovies`
    Lambda函数。
- en: 'Luckily, AWS has added a new feature that lets you reserve and define, in advance,
    a concurrent execution value per Lambda function. This property allows you to
    specify a number of reserved concurrency for your function so you are sure that
    your function always has enough capacity to handle upcoming events or requests.
    For instance, you could set rate limiting for your functions as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，AWS增加了一个新功能，允许您预先保留和定义每个Lambda函数的并发执行值。这个属性允许您为函数指定一定数量的保留并发，以确保您的函数始终具有足够的容量来处理即将到来的事件或请求。例如，您可以为您的函数设置如下速率限制：
- en: 'The `FindAllMovies` function: 500'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FindAllMovies`函数：500'
- en: 'The `InsertMovie` function : 100'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InsertMovie`函数：100'
- en: 'The `UpdateMovie` function: 50'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UpdateMovie`函数：50'
- en: The remaining will be shared among the others
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 剩下的将分享给其他人
- en: In the upcoming section, we will see how to define a reserved concurrency for
    `FindAllMovies` and how it can impact the performance of the API.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将看到如何为`FindAllMovies`定义保留的并发执行，并且它如何影响API的性能。
- en: 'You can estimate the concurrent execution count with the following formula:
    `events/requests per second * function duration`.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下公式估算并发执行计数：`每秒事件/请求*函数持续时间`。
- en: Concurrency reservation
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并发执行预留
- en: 'Navigate to the AWS Lambda Console ([https://console.aws.amazon.com/lambda/home](https://console.aws.amazon.com/lambda/home))
    and click on the FindAllMovies function. Under the Concurrency section, we can
    see that our function is only limited by the total amount of concurrency available
    in the account, which is **1000**,shown in the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到AWS Lambda控制台（[https://console.aws.amazon.com/lambda/home](https://console.aws.amazon.com/lambda/home)）并单击 FindAllMovies 函数。在并发 部分，我们可以看到我们的函数仅受账户中可用并发总量的限制，该总量为**1000**，如下截图所示：
- en: '![](img/627e3cc6-60f8-43b8-8aab-a245c4a10ba2.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/627e3cc6-60f8-43b8-8aab-a245c4a10ba2.png)'
- en: 'We will change that by defining 10 in the reserved account''s concurrency field.
    This ensures only 10 parallel executions of the function at any given time. This
    value will be deducted from the unreserved account''s concurrency pool, shown
    as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过在保留账户的并发字段中定义10来更改这一点。这样可以确保在任何给定时间内只有10个并行执行函数。这个值将从未保留账户的并发池中扣除，如下所示：
- en: '![](img/efe5e643-809c-4050-a213-e3d8633c152e.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efe5e643-809c-4050-a213-e3d8633c152e.png)'
- en: The maximum reserved concurrency you can set is 900, as AWS Lambda reserves
    100 for other functions so they can still process requests and events.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以设置的最大保留并发数是900，因为AWS Lambda保留了100个用于其他函数，以便它们仍然可以处理请求和事件。
- en: 'Alternatively, AWS CLI can be used with the `put-function-concurrency` command
    to set a concurrency limit:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，可以使用AWS CLI与`put-function-concurrency`命令来设置并发限制：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once again, generate some workloads using the same command given previously:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 再次使用之前给出的相同命令生成一些工作负载：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This time, the result will be different, as 171 of 1,000 requests fail with
    the 502 code error, shown as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，结果将会不同，因为1000个请求中有171个失败，显示为502错误代码，如下所示：
- en: '![](img/f4d76c40-6cb2-4b71-a121-7c4d8f6820a0.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f4d76c40-6cb2-4b71-a121-7c4d8f6820a0.png)'
- en: Beyond 10 concurrent executions, a throttling is applied and part of the request
    is refused with the 502 response code.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 超过10个并发执行时，将应用限流，并拒绝部分请求，返回502响应代码。
- en: 'We can confirm this by heading back to the function console; we should see
    a warning message similar to that shown in the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过返回到函数控制台来确认这一点；我们应该看到类似于以下截图中显示的警告消息：
- en: '![](img/6c89cab8-ef3a-4792-905c-a3c916fb588f.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6c89cab8-ef3a-4792-905c-a3c916fb588f.png)'
- en: 'If you open the metrics related to the `movies` table and jump to the read-capacity
    chart, you can see that our read capacity will still be under control and below
    the defined 5 read-units capacity:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打开与`movies`表相关的指标并跳转到读取容量图表，您会看到我们的读取容量仍然受到控制，并且低于定义的5个读取单位容量：
- en: '![](img/f413ad7d-8d50-4d52-8aa9-51750286955c.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f413ad7d-8d50-4d52-8aa9-51750286955c.png)'
- en: Throttling can be used if you're planning maintenance on a Lambda function and
    you want to stop its invocation temporarily, this can be done by setting the function
    concurrency to 0.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您计划对Lambda函数进行维护并希望暂时停止其调用，可以使用限流。这可以通过将函数并发设置为0来实现。
- en: Throttle is working as expected and you are now protecting your downstream resources
    from too much load from your Lambda function.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 限流按预期工作，现在您正在保护下游资源免受Lambda函数过载的影响。
- en: Summary
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned that Lambda cannot scale infinitely due the execution
    limit set per AWS region. This limit can be raised by contacting the AWS support
    team. We also covered how the concurrency reservation at the function level might
    help you to protect your downstream resources, match the subnet size if you're
    using a VPC-enabled Lambda function, and control your costs during the development
    and testing of your functions.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解到Lambda由于AWS区域设置的执行限制，无法无限扩展。这个限制可以通过联系AWS支持团队来提高。我们还介绍了函数级别的并发预留如何帮助您保护下游资源，如果您正在使用启用了VPC的Lambda函数，则匹配子网大小，并在开发和测试函数期间控制成本。
- en: In the next chapter, we will build a user-friendly UI on top of the serverless
    API with an S3 static-hosted website feature.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将在无服务器API的基础上构建一个用户友好的UI，具有S3静态托管网站功能。
