["```go\nng new frontend\n```", "```go\nng serve\n```", "```go\nnpm install bootstrap@4.0.0-alpha.6\n```", "```go\n\"styles\": [\n   \"styles.css\",\n   \"../node_modules/bootstrap/dist/css/bootstrap.min.css\"\n]\n```", "```go\nng generate component components/navbar\n```", "```go\n<nav class=\"navbar navbar-toggleable-md navbar-light bg-faded\">\n  <button class=\"navbar-toggler navbar-toggler-right\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n    <span class=\"navbar-toggler-icon\"></span>\n  </button>\n  <a class=\"navbar-brand\" href=\"#\">Movies</a>\n\n  <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n    <ul class=\"navbar-nav mr-auto\">\n      <li class=\"nav-item active\">\n        <a class=\"nav-link\" href=\"#\">New <span class=\"sr-only\">(current)</span></a>\n      </li>\n    </ul>\n    <form class=\"form-inline my-2 my-lg-0\">\n      <input class=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search ...\">\n      <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">GO !</button>\n    </form>\n  </div>\n</nav>\n```", "```go\n@Component({\n  selector: 'movies-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n   ...\n}\n```", "```go\n<movies-navbar></movies-navbar> \n```", "```go\nng generate component components/movie-item\n```", "```go\n<div class=\"card\" style=\"width: 20rem;\">\n  <img class=\"card-img-top\" src=\"img/185x287\" alt=\"movie title\">\n  <div class=\"card-block\">\n    <h4 class=\"card-title\">Movie</h4>\n    <p class=\"card-text\">Some quick description</p>\n    <a href=\"#\" class=\"btn btn-primary\">Rent</a>\n  </div>\n</div>\n```", "```go\nng generate component components/list-movies\n```", "```go\n<div class=\"row\">\n  <div class=\"col-sm-3\" *ngFor=\"let movie of movies\">\n    <movie-item></movie-item>\n  </div>\n</div>\n```", "```go\nimport { Component, OnInit } from '@angular/core';\nimport { Movie } from '../../models/movie';\n\n@Component({\n  selector: 'list-movies',\n  templateUrl: './list-movies.component.html',\n  styleUrls: ['./list-movies.component.css']\n})\nexport class ListMoviesComponent implements OnInit {\n\n  public movies: Movie[];\n\n  constructor() {\n    this.movies = [\n      new Movie(\"Avengers\", \"Some description\", \"https://image.tmdb.org/t/p/w370_and_h556_bestv2/cezWGskPY5x7GaglTTRN4Fugfb8.jpg\"),\n      new Movie(\"Thor\", \"Some description\", \"https://image.tmdb.org/t/p/w370_and_h556_bestv2/bIuOWTtyFPjsFDevqvF3QrD1aun.jpg\"),\n      new Movie(\"Spiderman\", \"Some description\"),\n    ]\n  }\n\n  ...\n\n}\n```", "```go\nexport class Movie {\n  private name: string;\n  private cover: string;\n  private description: string;\n\n  constructor(name: string, description: string, cover?: string){\n    this.name = name;\n    this.description = description;\n    this.cover = cover ? cover : \"http://via.placeholder.com/185x287\";\n  }\n\n  public getName(){\n    return this.name;\n  }\n\n  public getCover(){\n    return this.cover;\n  }\n\n  public getDescription(){\n    return this.description;\n  }\n\n  public setName(name: string){\n    this.name = name;\n  }\n\n  public setCover(cover: string){\n    this.cover = cover;\n  }\n\n  public setDescription(description: string){\n    this.description = description;\n  }\n}\n```", "```go\nexport class MovieItemComponent implements OnInit {\n  @Input()\n  public movie: Movie;\n\n  ...\n}\n```", "```go\n<div class=\"card\">\n    <img class=\"card-img-top\" [src]=\"movie.getCover()\" alt=\"{{movie.getName()}}\">\n    <div class=\"card-block\">\n      <h4 class=\"card-title\">{{movie.getName()}}</h4>\n      <p class=\"card-text\">{{movie.getDescription()}}</p>\n      <a href=\"#\" class=\"btn btn-primary\">Rent</a>\n    </div>\n</div>\n```", "```go\n<div class=\"row\">\n  <div class=\"col-sm-3\" *ngFor=\"let movie of movies\">\n    <movie-item [movie]=\"movie\"></movie-item>\n  </div>\n</div>\n```", "```go\nexport const environment = {\n  api: 'https://51cxzthvma.execute-api.us-east-1.amazonaws.com/staging/movies'\n};\n```", "```go\nexport const environment = {\n  api: 'https://51cxzthvma.execute-api.us-east-1.amazonaws.com/production/movies'\n};\n```", "```go\nng generate service services/moviesApi\n```", "```go\nimport { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport { environment } from '../../environments/environment';\n\n@Injectable()\n  export class MoviesApiService {\n\n    constructor(private http:Http) { }\n\n    findAll(){\n      return this.http\n      .get(environment.api)\n      .map(res => {\n        return res.json()\n      })\n    }\n\n}\n```", "```go\n    return events.APIGatewayProxyResponse{\n        StatusCode: 200,\n        Headers: map[string]string{\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\",\n        },\n        Body: string(response),\n      }, nil\n    ```", "```go\nconstructor(private moviesApiService: MoviesApiService) {\n  this.movies = []\n\n  this.moviesApiService.findAll().subscribe(res => {\n    res.forEach(movie => {\n    this.movies.push(new Movie(movie.name, \"Some description\"))\n    })\n  })\n}\n```", "```go\nsvc := dynamodb.New(cfg)\nreq := svc.PutItemRequest(&dynamodb.PutItemInput{\n  TableName: aws.String(os.Getenv(\"TABLE_NAME\")),\n  Item: map[string]dynamodb.AttributeValue{\n    \"ID\": dynamodb.AttributeValue{\n      S: aws.String(uuid.Must(uuid.NewV4()).String()),\n    },\n    \"Name\": dynamodb.AttributeValue{\n      S: aws.String(movie.Name),\n    },\n    \"Cover\": dynamodb.AttributeValue{\n      S: aws.String(movie.Cover),\n    },\n    \"Description\": dynamodb.AttributeValue{\n      S: aws.String(movie.Description),\n    },\n  },\n})\n```", "```go\nnpm install --save @ng-bootstrap/ng-bootstrap@2.0.0\n```", "```go\nimport {NgbModule} from '@ng-bootstrap/ng-bootstrap';\n\n@NgModule({\n  declarations: [AppComponent, ...],\n  imports: [NgbModule.forRoot(), ...],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n```", "```go\nng generate component components/new-movie\n```", "```go\n<div class=\"modal-header\">\n <h4 class=\"modal-title\">New Movie</h4>\n <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"d('Cross click')\">\n <span aria-hidden=\"true\">&times;</span>\n </button>\n</div>\n<div class=\"modal-body\">\n <div *ngIf=\"showMsg\" class=\"alert alert-success\" role=\"alert\">\n <b>Well done !</b> You successfully added a new movie.\n </div>\n <div class=\"form-group\">\n <label for=\"title\">Title</label>\n <input type=\"text\" class=\"form-control\" #title>\n </div>\n <div class=\"form-group\">\n <label for=\"description\">Description</label>\n <textarea class=\"form-control\" #description></textarea>\n </div>\n <div class=\"form-group\">\n <label for=\"cover\">Cover</label>\n <input type=\"text\" class=\"form-control\" #cover>\n </div>\n</div>\n<div class=\"modal-footer\">\n   <button type=\"button\" class=\"btn btn-success\" (click)=\"save(title.value, description.value, cover.value)\">Save</button>\n</div>\n```", "```go\ninsert(movie: Movie){\n  return this.http\n    .post(environment.api, JSON.stringify(movie))\n    .map(res => {\n    return res\n  })\n}\n```", "```go\n<a class=\"nav-link\" href=\"#\" (click)=\"newMovie(content)\">New <span class=\"badge badge-danger\">+</span></a>\n```", "```go\nimport { Component, OnInit, Input } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\n@Component({\n selector: 'movies-navbar',\n templateUrl: './navbar.component.html',\n styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n constructor(private modalService: NgbModal) {}\n\n ngOnInit() {}\n\n newMovie(content){\n this.modalService.open(content);\n }\n\n}\n```", "```go\naws s3 mb s3://serverlessmovies.com\n```", "```go\nng build --prod\n```", "```go\naws s3 website s3://serverlessmovies.com \u200a--\u200aindex-document index.html\n```", "```go\naws s3 cp --recursive dist/ s3://serverlessmovies.com/\n```", "```go\n{\n  \"Id\": \"Policy1529862214606\",\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"Stmt1529862213126\",\n      \"Action\": [\n        \"s3:GetObject\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": \"arn:aws:s3:::serverlessmovies.com/*\",\n      \"Principal\": \"*\"\n    }\n  ]\n}\n```", "```go\nversion: 2\njobs:\n  build:\n    docker:\n      - image: node:10.5.0\n\n    working_directory: ~/serverless-movies\n\n    steps:\n      - checkout\n\n      - restore_cache:\n          key: node-modules-{{checksum \"package.json\"}}\n\n      - run:\n          name: Install dependencies\n          command: npm install && npm install -g @angular/cli\n\n      - save_cache:\n          key: node-modules-{{checksum \"package.json\"}}\n          paths:\n            - node_modules\n\n      - run:\n          name: Build assets\n          command: ng build --prod --aot false\n\n      - run:\n          name: Install AWS CLI\n          command: |\n            apt-get update\n            apt-get install -y awscli\n\n      - run:\n          name: Push static files\n          command: aws s3 cp --recursive dist/ s3://serverlessmovies.com/\n```"]