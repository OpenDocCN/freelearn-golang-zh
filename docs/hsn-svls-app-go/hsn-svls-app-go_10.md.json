["```go\ngo get -u github.com/stretchr/testify\n```", "```go\nfunc findAll() (events.APIGatewayProxyResponse, error) {\n  ...\n\n  svc := dynamodb.New(cfg)\n  req := svc.ScanRequest(&dynamodb.ScanInput{\n    TableName: aws.String(os.Getenv(\"TABLE_NAME\")),\n  })\n  res, err := req.Send()\n  if err != nil {\n    return events.APIGatewayProxyResponse{\n      StatusCode: http.StatusInternalServerError,\n      Body: \"Error while scanning DynamoDB\",\n    }, nil\n  }\n\n  ...\n\n  return events.APIGatewayProxyResponse{\n    StatusCode: 200,\n    Headers: map[string]string{\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n    },\n    Body: string(response),\n  }, nil\n}\n```", "```go\nUnable to locate credentials. You can configure credentials by running \"aws configure\".\n```", "```go\npackage main\n\nimport (\n  \"net/http\"\n  \"testing\"\n\n  \"github.com/aws/aws-lambda-go/events\"\n  \"github.com/stretchr/testify/assert\"\n)\n\nfunc TestFindAll_WithoutIAMRole(t *testing.T) {\n  expected := events.APIGatewayProxyResponse{\n    StatusCode: http.StatusInternalServerError,\n    Body: \"Error while scanning DynamoDB\",\n  }\n  response, err := findAll()\n  assert.IsType(t, nil, err)\n  assert.Equal(t, expected, response)\n}\n```", "```go\nTABLE_NAME=movies go test\n```", "```go\npackage main\n\nimport (\n  \"testing\"\n\n  \"github.com/stretchr/testify/assert\"\n)\n\nfunc TestFindAll_WithIAMRole(t *testing.T) {\n  response, err := findAll()\n  assert.IsType(t, nil, err)\n  assert.NotNil(t, response.Body)\n}\n```", "```go\nfunc insert(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {\n  ...\n  return events.APIGatewayProxyResponse{\n    StatusCode: 200,\n    Headers: map[string]string{\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n    },\n  }, nil\n}\n```", "```go\nfunc TestInsert_InvalidPayLoad(t *testing.T) {\n  input := events.APIGatewayProxyRequest{\n    Body: \"{'name': 'avengers'}\",\n  }\n\n  expected := events.APIGatewayProxyResponse{\n    StatusCode: 400,\n    Body: \"Invalid payload\",\n  }\n  response, _ := insert(input)\n  assert.Equal(t, expected, response)\n}\n```", "```go\nfunc TestInsert_ValidPayload(t *testing.T) {\n  input := events.APIGatewayProxyRequest{\n    Body: \"{\\\"id\\\":\\\"40\\\", \\\"name\\\":\\\"Thor\\\", \\\"description\\\":\\\"Marvel movie\\\", \\\"cover\\\":\\\"poster url\\\"}\",\n  }\n  expected := events.APIGatewayProxyResponse{\n    StatusCode: 200,\n    Headers: map[string]string{\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n    },\n  }\n  response, _ := insert(input)\n  assert.Equal(t, expected, response)\n}\n```", "```go\nTABLE_NAME=movies go test -cover\n```", "```go\nTABLE_NAME=movies go test -cover -coverprofile=coverage.out\ngo tool cover -html=coverage.out -o coverage.html\n```", "```go\nversion: 2\njobs:\n build:\n docker:\n - image: golang:1.8\n\n working_directory: /go/src/github.com/mlabouardy/lambda-circleci\n\n environment:\n S3_BUCKET: movies-api-deployment-packages\n TABLE_NAME: movies\n AWS_REGION: us-east-1\n\n steps:\n - checkout\n\n - run:\n name: Install AWS CLI & Zip\n command: |\n apt-get update\n apt-get install -y zip python-pip python-dev\n pip install awscli\n\n - run:\n name: Test\n command: |\n go get -u github.com/golang/lint/golint\n go get -t ./...\n golint -set_exit_status\n go vet .\n go test .\n\n - run:\n name: Build\n command: |\n GOOS=linux go build -o main main.go\n zip $CIRCLE_SHA1.zip main\n\n - run:\n name: Push\n command: aws s3 cp $CIRCLE_SHA1.zip s3://$S3_BUCKET\n\n - run:\n name: Deploy\n command: |\n aws lambda update-function-code --function-name InsertMovie \\\n --s3-bucket $S3_BUCKET \\\n --s3-key $CIRCLE_SHA1.zip --region us-east-1\n```", "```go\npackage main\n\nimport \"github.com/aws/aws-lambda-go/lambda\"\n\nfunc fib(n int64) int64 {\n  if n > 2 {\n    return fib(n-1) + fib(n-2)\n  }\n  return 1\n}\n\nfunc handler(n int64) (int64, error) {\n  return fib(n), nil\n}\n\nfunc main() {\n  lambda.Start(handler)\n}\n```", "```go\n_LAMBDA_SERVER_PORT=3000 go run main.go\n```", "```go\ngo get -u github.com/djhworld/go-lambda-invoke \n```", "```go\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n\n  \"github.com/djhworld/go-lambda-invoke/golambdainvoke\"\n)\n\nfunc main() {\n  response, err := golambdainvoke.Run(3000, 9)\n  if err != nil {\n    log.Fatal(err)\n  }\n  fmt.Println(string(response))\n}\n```", "```go\ngo run client.go\n```", "```go\npip install aws-sam-cli\n```", "```go\nAWSTemplateFormatVersion : '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\nDescription: List all movies.\nResources:\n FindAllMovies:\n Type: AWS::Serverless::Function\n Properties:\n Handler: main\n Runtime: go1.x\n Events:\n Vote:\n Type: Api\n Properties:\n Path: /movies\n Method: get\n```", "```go\nGOOS=linux go build -o main\n```", "```go\nsam local start-api\n```", "```go\ndocker image ls\n```", "```go\n{\n    \"FindAllMovies\" : {\n        \"TABLE_NAME\" : \"movies\"\n    }\n}\n```", "```go\nsam local start-api --env-vars env.json\n```", "```go\n{\n    \"operation\": \"load\",\n    \"iterations\": 100,\n    \"function\": \"HarnessTestFindAllMovies\",\n    \"event\": {\n      \"operation\": \"unit\",\n      \"function\": \"FindAllMovies\",\n      \"resultsTable\": \"load-test-results\",\n      \"testId\": \"id\",\n      \"event\": {\n        \"options\": {\n          \"host\": \"https://51cxzthvma.execute-api.us-east-1.amazonaws.com\",\n          \"path\": \"/production/movies\",\n          \"method\": \"GET\"\n        }\n      }\n    }\n  }\n```"]