- en: Testing Your Serverless Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试您的无服务器应用程序
- en: This chapter will teach you how to test your serverless application locally
    using the AWS Serverless Application Model. We will also cover Go unit testing
    and performance testing with third-party tools, and how Lambda itself can be used
    to perform test harness.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将教您如何使用AWS无服务器应用程序模型在本地测试您的无服务器应用程序。我们还将介绍使用第三方工具进行Go单元测试和性能测试，以及如何使用Lambda本身执行测试工具。
- en: Technical requirements
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter is a follow-up to [Chapter 7](d0eca778-5a56-4b6c-8e89-80f13509db5f.xhtml),
    *Implementing a CI/CD Pipeline*, and hence it's recommended to read that chapter
    first to follow this one with ease. In addition, experience with test-driven development
    practices is recommended. The code bundle for this chapter is hosted on GitHub
    at [https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go](https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是[第7章](d0eca778-5a56-4b6c-8e89-80f13509db5f.xhtml)的后续内容，*实施CI/CD流水线*，因此建议先阅读该章节，以便轻松地跟随本章。此外，建议具有测试驱动开发实践经验。本章的代码包托管在GitHub上，网址为[https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go](https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go)。
- en: Unit testing
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: 'Unit testing your Lambda function means testing the function handler in total
    isolation (as far as possible) from external resources (such as the following
    events: DynamoDB, S3, Kinesis). These tests allow you to catch bugs before actually
    deploying your new changes to production and maintain the quality, reliability,
    and security of your source code.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对Lambda函数进行单元测试意味着尽可能完全地（尽可能）从外部资源（如以下事件：DynamoDB、S3、Kinesis）中隔离测试函数处理程序。这些测试允许您在实际部署新更改到生产环境之前捕获错误，并维护源代码的质量、可靠性和安全性。
- en: 'Before we write our first unit test, some background about testing in Golang
    might be helpful. To write a new test suite in Go, the filename must end with ` _test.go` and
    contain the functions with a `TestFUNCTIONNAME` prefix.  The `Test` prefix helps
    to identify the test routine. The files that end with the `_test` suffix will
    be excluded while building the deployment package and will be executed only if
    the `go test` command is issued. In addition, Go comes with a built-in `testing`
    package with a lot of helper functions. However, for simplicity, we will use a
    third-party package called `testify` that you can install with the following command:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们编写第一个单元测试之前，了解一些关于Golang中测试的背景可能会有所帮助。要在Go中编写新的测试套件，文件名必须以`_test.go`结尾，并包含以`TestFUNCTIONNAME`前缀的函数。`Test`前缀有助于识别测试例程。以`_test`结尾的文件将在构建部署包时被排除，并且只有在发出`go
    test`命令时才会执行。此外，Go自带了一个内置的`testing`包，其中包含许多辅助函数。但是，为了简单起见，我们将使用一个名为`testify`的第三方包，您可以使用以下命令安装：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here is an example of the Lambda function we built in the previous chapter
    to list all the movies in the DynamoDB table. The following represents the code
    we want to test:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们在上一章中构建的Lambda函数的示例，用于列出DynamoDB表中的所有电影。以下代表我们要测试的代码：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To cover the code fully, we need to test all the edge cases. Examples of tests
    we can perform include:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分覆盖代码，我们需要测试所有边缘情况。我们可以执行的测试示例包括：
- en: Testing the behavior without an IAM role assigned to the function.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试在未分配给函数的IAM角色的情况下的行为。
- en: Testing with an IAM role assigned to the function.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用分配给函数的IAM角色进行测试。
- en: 'In order to simulate the Lambda function running without an IAM role, we can
    remove the credentials file or unset the AWS environment variables if you''re
    using them locally. Then, issue the `aws s3 ls` command to verify the AWS CLI
    cannot locate the AWS credentials. If you see the following message, you should
    be good to go:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟Lambda函数在没有IAM角色的情况下运行，我们可以删除凭据文件或取消设置本地使用的AWS环境变量。然后，发出`aws s3 ls`命令以验证AWS
    CLI无法找到AWS凭据。如果看到以下消息，那么您应该可以继续：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Write your unit test in a file called `main_test.go`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在名为`main_test.go`的文件中编写您的单元测试：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The test function starts with the `Test` keyword, followed by the function
    name and the behavior we want to test. Next, it calls the `findAll` handler and
    compares the actual result with the expected response. Then, you can follow these
    steps:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 测试函数以`Test`关键字开头，后跟函数名称和我们要测试的行为。然后，它调用`findAll`处理程序并将实际结果与预期响应进行比较。然后，您可以按照以下步骤进行：
- en: 'Launch the test with the following command. The command will look for any tests
    in any of the files in the current folder and run them. Make sure to set the `TABLE_NAME`
    environment variable:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令启动测试。该命令将查找当前文件夹中的任何文件中的任何测试并运行它们。确保设置`TABLE_NAME`环境变量：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Great! Our test works because the expected and actual response body are equal
    to the **Error while scanning DynamoDB** value:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们的测试有效，因为预期和实际响应体等于**扫描DynamoDB时出错**的值：
- en: '![](img/b4ba8220-279b-4562-92f4-29cdf384bd74.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b4ba8220-279b-4562-92f4-29cdf384bd74.png)'
- en: 'Write another test function to validate the behavior of the handler if an IAM
    role is assigned to the Lambda function at runtime:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写另一个测试函数，以验证如果在运行时将IAM角色分配给Lambda函数的处理程序行为：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once again, the test should pass as the expected and actual response body is
    not empty:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，测试应该通过，因为预期和实际响应体不为空：
- en: '![](img/e9ea1546-d3a4-4e18-8d47-de990ba34e8c.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e9ea1546-d3a4-4e18-8d47-de990ba34e8c.png)'
- en: 'You have now run a unit test in Go; let''s write another unit test for the
    Lambda function that expects an input parameter. Let''s take the `insert` method
    as an example. The code we want to test is the following (the full code can be
    found in the GitHub repository):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经在Go中运行了一个单元测试；让我们为期望输入参数的Lambda函数编写另一个单元测试。让我们以`insert`方法为例。我们要测试的代码如下（完整代码可以在GitHub存储库中找到）：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This scenario is an invalid payload as an input parameter. The function should
    return a `400` error with an `Invalid payload` message:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况是输入参数的无效有效负载。函数应返回带有`Invalid payload`消息的`400`错误：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Another use case is when given a valid payload; the function should insert
    the movie into the database and return a `200` success code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个用例是在给定有效负载的情况下，函数应将电影插入数据库并返回`200`成功代码：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The two tests should successfully pass. This time, we will run the `go test`
    command in code coverage mode with the `-cover` flag:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 两个测试应该成功通过。这次，我们将以代码覆盖模式运行`go test`命令，使用`-cover`标志：
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We have 78% of the code covered by the unit test:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有78%的代码被单元测试覆盖：
- en: '![](img/13ecb74b-ad68-471c-a8ee-a3c87b2b656b.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/13ecb74b-ad68-471c-a8ee-a3c87b2b656b.png)'
- en: 'If you want in-depth details about which statements are covered by the test
    and which are not, you can generate an HTML coverage report with the following
    commands:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想深入了解测试覆盖了哪些语句，哪些没有，可以使用以下命令生成HTML覆盖报告：
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If you open `coverage.html` in the browser, you can see the statements that
    are not covered by the unit test:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在浏览器中打开`coverage.html`，您可以看到单元测试未覆盖的语句：
- en: '![](img/d234993b-c1bf-4817-9348-fdd985d708ec.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d234993b-c1bf-4817-9348-fdd985d708ec.png)'
- en: You can improve the unit test by taking advantage of Go's interface to mock
    the DynamoDB calls. This allows you to mock out the implementation of DynamoDB
    instead of using the concrete service client directly (for example, [https://aws.amazon.com/blogs/developer/mocking-out-then-aws-sdk-for-go-for-unit-testing/](https://aws.amazon.com/blogs/developer/mocking-out-then-aws-sdk-for-go-for-unit-testing/)).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过利用Go的接口来改进单元测试，以模拟DynamoDB调用。这允许您模拟DynamoDB的实现，而不是直接使用具体的服务客户端（例如，[https://aws.amazon.com/blogs/developer/mocking-out-then-aws-sdk-for-go-for-unit-testing/](https://aws.amazon.com/blogs/developer/mocking-out-then-aws-sdk-for-go-for-unit-testing/)）。
- en: Automated unit tests
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化单元测试
- en: 'Having unit tests is great. Yet, a unit test without automation is not useful,
    so your CI/CD pipeline should have a testing stage to execute the unit test for
    every change committed to the code repository. This mechanism has many benefits,
    such as ensuring your codebase is in a bug-free state and allowing developers
    to detect and fix integration problems continuously, and thus avoid last-minute
    chaos on release dates. The following is an example of the pipeline we built in
    previous chapters to deploy the Lambda function automatically:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有单元测试是很好的。然而，没有自动化的单元测试是没有用的，因此您的CI/CD流水线应该有一个测试阶段，以执行对代码存储库提交的每个更改的单元测试。这种机制有许多好处，例如确保您的代码库处于无错误状态，并允许开发人员持续检测和修复集成问题，从而避免在发布日期上出现最后一分钟的混乱。以下是我们在前几章中构建的自动部署Lambda函数的流水线的示例：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'All changes to the Lambda function''s source code will trigger a new build
    and the unit tests will be re-executed:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对Lambda函数源代码的所有更改都将触发新的构建，并重新执行单元测试：
- en: '![](img/a2bdf032-5bb6-4535-82e6-9df0a6af07ce.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a2bdf032-5bb6-4535-82e6-9df0a6af07ce.png)'
- en: 'If you click on the Test stage, you will see the detailed `go test` command
    results:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果单击“Test”阶段，您将看到详细的`go test`命令结果：
- en: '![](img/80ce3d49-f65b-4387-876c-b1992f325189.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/80ce3d49-f65b-4387-876c-b1992f325189.png)'
- en: Integration testing
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成测试
- en: Unlike unit testing, which tests a unit of the system, integration testing focuses
    on testing the Lambda function as a whole. So, how do we test Lambda functions
    in a local development environment without deploying them to AWS? Read on to find
    out more.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 与单元测试不同，单元测试测试系统的一个单元，集成测试侧重于作为一个整体测试Lambda函数。那么，在不将它们部署到AWS的本地开发环境中如何测试Lambda函数呢？继续阅读以了解更多信息。
- en: RPC communications
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RPC通信
- en: 'If you read the code under the hood of the official Go library for AWS Lambda
    ([https://github.com/aws/aws-lambda-go](https://github.com/aws/aws-lambda-go)),
    you will notice that Go-based Lambda functions are invoked using `net/rpc` over
    **TCP**. Every Go Lambda function starts a server on a port defined by the `_LAMBDA_SERVER_PORT`
    environment variable and waits for incoming requests. To interact with the function,
    two RPC methods are used:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您阅读AWS Lambda的官方Go库（[https://github.com/aws/aws-lambda-go](https://github.com/aws/aws-lambda-go)）的底层代码，您会注意到基于Go的Lambda函数是使用`net/rpc`通过**TCP**调用的。每个Go
    Lambda函数都会在由`_LAMBDA_SERVER_PORT`环境变量定义的端口上启动服务器，并等待传入请求。为了与函数交互，使用了两个RPC方法：
- en: '`Ping`: Used to check whether the function is still alive and running'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Ping`：用于检查函数是否仍然存活和运行'
- en: '`Invoke`: Used to perform a request'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Invoke`：用于执行请求'
- en: With this knowledge in mind, we can simulate a Lambda function's execution,
    and perform integration testing or pre-deploy tests to reduce the waiting time
    when deploying the function to AWS but before checking its new behavior. We can
    also fix the bugs during the early phases of the development life cycle before
    committing the new changes to the code repository.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些知识，我们可以模拟Lambda函数的执行，并执行集成测试或预部署测试，以减少将函数部署到AWS之前的等待时间。我们还可以在开发生命周期的早期阶段修复错误，然后再将新更改提交到代码存储库。
- en: 'The following example is a simple Lambda function that calculates the Fibonacci
    value of a given number. The Fibonacci series is the sum of the two previous numbers.
    The following code is an implementation of the Fibonacci series using recursion:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例是一个简单的Lambda函数，用于计算给定数字的Fibonacci值。斐波那契数列是前两个数字的和。以下代码是使用递归实现的斐波那契数列：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The Lambda function is listening on a port over TCP, so we need to define the
    port by setting the `_LAMBDA_SERVER_PORT` environment variable:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda函数通过TCP监听端口，因此我们需要通过设置`_LAMBDA_SERVER_PORT`环境变量来定义端口：
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To invoke the function, you can either use the `invoke` method from the `net/rpc`
    go package or install a Golang library that abstracts the RPC communication into
    a single method:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要调用函数，可以使用`net/rpc` go包中的`invoke`方法，也可以安装一个将RPC通信抽象为单个方法的Golang库：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, invoke the function by setting the port on which it''s running and the
    number we want to calculate its Fibonacci number:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过设置运行的端口和要计算其斐波那契数的数字来调用函数：
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Invoke the Fibonacci Lambda function with the following command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令调用Fibonacci Lambda函数：
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As a result, `fib(9)=34` is returned as expected:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，`fib(9)=34`如预期返回：
- en: '![](img/72d7a601-bd42-4d7f-a922-c34269b10d76.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/72d7a601-bd42-4d7f-a922-c34269b10d76.png)'
- en: Another approach is building an HTTP server using the `net/http` package to
    simulate the Lambda function running behind an API Gateway, and testing the function
    the same way you test any HTTP server to validate the handler.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是使用`net/http`包构建HTTP服务器，模拟Lambda函数在API Gateway后面运行，并以与测试任何HTTP服务器相同的方式测试函数，以验证处理程序。
- en: In the next section, we will see how to use AWS Serverless Application Model
    to test Lambda functions locally in an easier manner.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到如何使用AWS无服务器应用程序模型以更简单的方式在本地测试Lambda函数。
- en: Serverless Application Model
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器应用程序模型
- en: '**Serverless Application Model** (**SAM**), is a way to define serverless applications
    in AWS. It''s an extension to **CloudFormation** in the way it allows to define
    all resources needed to run your functions in AWS in a template file.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**无服务器应用程序模型**（**SAM**）是一种在AWS中定义无服务器应用程序的方式。它是对**CloudFormation**的扩展，允许在模板文件中定义运行函数所需的所有资源。'
- en: Please see [Chapter 14](f843226f-e1bb-4a49-ae23-303a5b46fc03.xhtml), *Infrastructure
    as Code*, for instructions on how to use SAM to build serverless applications
    from scratch.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[第14章](f843226f-e1bb-4a49-ae23-303a5b46fc03.xhtml)，*基础设施即代码*，了解如何使用SAM从头开始构建无服务器应用程序的说明。
- en: 'In addition, AWS SAM allows you to create a development environment to test,
    debug, and deploy your functions locally. Perform the following steps:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，AWS SAM允许您创建一个开发环境，以便在本地测试、调试和部署函数。执行以下步骤：
- en: 'To get started, install the SAM CLI with the `pip` Python package manager:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始，请使用`pip` Python包管理器安装SAM CLI：
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Make sure to install all the prerequisites and ensure that the Docker engine
    is running. For more details, check out the official documentation at [https://docs.aws.amazon.com/lambda/latest/dg/sam-cli-requirements.html](https://docs.aws.amazon.com/lambda/latest/dg/sam-cli-requirements.html).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 确保安装所有先决条件，并确保Docker引擎正在运行。有关更多详细信息，请查看官方文档[https://docs.aws.amazon.com/lambda/latest/dg/sam-cli-requirements.html](https://docs.aws.amazon.com/lambda/latest/dg/sam-cli-requirements.html)。
- en: Once installed, run `sam --version`. If everything works as expected, it should
    output the SAM version (*v0.4.0* at the time of writing this book).
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装后，运行`sam --version`。如果一切正常，它应该输出SAM版本（在撰写本书时为*v0.4.0*）。
- en: 'Create `template.yml` for the SAM CLI, in which we will define the runtime
    and the required resources to run the function:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为SAM CLI创建`template.yml`，在其中我们将定义运行函数所需的运行时和资源：
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The SAM file describes the runtime environment and the name of the handler containing
    the code your Lambda function will execute when invoked. Plus, the template defines
    the event that will trigger the function; in this case, it's an API Gateway endpoint.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: SAM文件描述了运行时环境和包含代码的处理程序的名称，当调用时，Lambda函数将执行该代码。此外，模板定义了将触发函数的事件；在本例中，它是API Gateway端点。
- en: 'Build the deployment package for Linux:'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Linux构建部署包：
- en: '[PRE19]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Run the function locally using the `sam local` command:'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本地使用`sam local`命令运行函数：
- en: '[PRE20]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'An HTTP server will be running and listening on port `3000`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP服务器将在端口`3000`上运行并侦听：
- en: '![](img/3a87d6d2-f4c5-4724-a0ca-f9773c53b1e1.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a87d6d2-f4c5-4724-a0ca-f9773c53b1e1.png)'
- en: 'If you navigate to `http://localhost:3000/movies`, it should take a few minutes
    before returning a response as it needs to fetch a Docker image:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您导航到`http://localhost:3000/movies`，在返回响应之前可能需要几分钟，因为它需要获取一个Docker镜像：
- en: '![](img/7d01d552-40a9-4efc-88ea-0eb05322e4e0.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7d01d552-40a9-4efc-88ea-0eb05322e4e0.png)'
- en: 'SAM local leverages the power of containers to run your Lambda function''s
    code in a Docker container. In the preceding screenshot, it''s pulling the `lambci/lambda:go1.x`
    Docker image from DockerHub (an image repository). You can confirm that by running
    the following command to list all available images on your machine:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: SAM本地利用容器的强大功能在Docker容器中运行Lambda函数的代码。在前面的屏幕截图中，它正在从DockerHub（一个镜像存储库）拉取`lambci/lambda:go1.x`
    Docker镜像。您可以通过运行以下命令来列出机器上所有可用的镜像来确认：
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here is the output of the preceding command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面命令的输出：
- en: '![](img/5d6f0c47-6cdd-4a0f-a9a0-44a9af77c2dc.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d6f0c47-6cdd-4a0f-a9a0-44a9af77c2dc.png)'
- en: 'Once the image is pulled, a new container will be created based on your `deployment`
    package:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦拉取了镜像，将基于您的`deployment`包创建一个新的容器：
- en: '![](img/f0a93574-b2b8-468d-9eb0-eedc237b867c.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f0a93574-b2b8-468d-9eb0-eedc237b867c.png)'
- en: 'In the browser, an error message will be displayed, as we forgot to set the
    DynamoDB table''s name:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中，将显示错误消息，因为我们忘记设置DynamoDB表的名称：
- en: '![](img/263599b2-995d-4e38-9864-95fc3466c5bb.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/263599b2-995d-4e38-9864-95fc3466c5bb.png)'
- en: 'We can fix that by creating an `env.json` file, as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过创建一个`env.json`文件来解决这个问题，如下所示：
- en: '[PRE22]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Run the `sam` command, this time with the `--env-var` argument:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`--env-var`参数运行`sam`命令：
- en: '[PRE23]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You can also declare environment variables in the same SAM template file with
    the `Environment` property.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在同一SAM模板文件中使用`Environment`属性声明环境变量。
- en: 'This time, you should have all the movies in the DynamoDB `movies` table, and
    the function should work as expected:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，您应该在DynamoDB `movies`表中拥有所有电影，并且函数应该按预期工作：
- en: '![](img/5bf58d20-54a7-442c-b137-d7269c0322d0.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5bf58d20-54a7-442c-b137-d7269c0322d0.png)'
- en: Load testing
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 负载测试
- en: We've already seen how to use benchmark tools, such as Apache Benchmark, and
    how to test harness. In this section, we will look at how to use the Lambda itself
    as a **serverless testing** test platform.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何使用基准测试工具，例如Apache Benchmark，以及如何测试测试工具。在本节中，我们将看看如何使用Lambda本身作为**无服务器测试**测试平台。
- en: 'The idea is simple: we will write a Lambda function that will call the Lambda
    function we want to test, and write its result to a DynamoDB table for reporting.
    Fortunately, no coding is required here, as the Lambda function is already available
    in the Blueprints section:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法很简单：我们将编写一个Lambda函数，该函数将调用我们想要测试的Lambda函数，并将其结果写入DynamoDB表进行报告。幸运的是，这里不需要编码，因为Lambda函数已经在蓝图部分中可用：
- en: '![](img/f89c5a72-804b-45f7-b944-0667cbc6abe0.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f89c5a72-804b-45f7-b944-0667cbc6abe0.png)'
- en: 'Give the function a name and create a new IAM role, as described in the following
    schema:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 为函数命名并创建一个新的IAM角色，如下图所示：
- en: '![](img/444ab0b3-a64e-4ab6-b70f-69490d9a6ab7.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/444ab0b3-a64e-4ab6-b70f-69490d9a6ab7.png)'
- en: 'Click on Create function and the function should be created with permissions granted
    to perform the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“创建函数”，函数应该被创建，并授予执行以下操作的权限：
- en: Push logs to CloudWatch.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将日志推送到CloudWatch。
- en: Invoke other Lambda functions.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用其他Lambda函数。
- en: Write data to the DynamoDB table.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向DynamoDB表写入数据。
- en: 'The following screenshot gives you the glimpse of after the preceding task
    is completed:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了前面任务完成后的情况：
- en: '![](img/5cf896bd-c523-4fb9-a3f0-f80760c8b124.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5cf896bd-c523-4fb9-a3f0-f80760c8b124.png)'
- en: 'Before launching the load test, we need to create a DynamoDB table in which
    the Lambda will record the output of the test. This table must have a hash key
    string of `testId` and a range number of `iteration`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动负载测试之前，我们需要创建一个DynamoDB表，Lambda将在其中记录测试的输出。该表必须具有`testId`的哈希键字符串和`iteration`的范围数字：
- en: '![](img/003994a1-840e-4eda-9522-c116044eb434.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/003994a1-840e-4eda-9522-c116044eb434.png)'
- en: 'Once created, invoke the Lambda function using the following JSON schema. It
    will invoke the given function asynchronously 100 times. Specify a unique `event.testId`
    to differentiate each unit test run:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 创建后，使用以下JSON模式调用Lambda函数。它将异步调用给定函数100次。指定一个唯一的`event.testId`来区分每个单元测试运行：
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The result will be recorded in the DynamoDB table given in the JSON schema:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将记录在JSON模式中给出的DynamoDB表中：
- en: '![](img/1379afc6-c4e7-4fee-81a7-23ff50929bdb.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1379afc6-c4e7-4fee-81a7-23ff50929bdb.png)'
- en: You may want to modify the function's code to save additional information, such
    as running time, resource usage, and response time.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能需要修改函数的代码以保存其他信息，例如运行时间、资源使用情况和响应时间。
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to write unit tests for the Lambda function
    to cover all the edge cases of the function. We also learned how to use AWS SAM
    to set up a local development environment to test and deploy the function locally,
    in order to ensure its behavior is working as expected before deploying it to
    AWS Lambda.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何为Lambda函数编写单元测试，以覆盖函数的所有边缘情况。我们还学习了如何使用AWS SAM设置本地开发环境，以在本地测试和部署函数，以确保其行为在部署到AWS
    Lambda之前正常工作。
- en: In the next chapter, we will cover how to troubleshoot and debug serverless
    applications using AWS-managed services such as CloudWatch and X-Ray.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍如何使用AWS托管的服务（如CloudWatch和X-Ray）来排除故障和调试无服务器应用程序。
- en: Questions
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Write a unit test for the `UpdateMovie` Lambda function.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`UpdateMovie` Lambda函数编写一个单元测试。
- en: Write a unit test for the `DeleteMovie` Lambda function.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`DeleteMovie` Lambda函数编写一个单元测试。
- en: Modify the `Jenkinsfile` provided in previous chapters to include the execution
    of automated unit tests.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改前几章提供的`Jenkinsfile`，以包括自动化单元测试的执行。
- en: Modify the `buildspec.yml` definition file to include the execution of unit
    tests, before pushing the deployment package to S3 using AWS CodeBuild.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`buildspec.yml`定义文件，以在将部署包推送到S3之前，包括执行单元测试的执行。
- en: Write a SAM template file for each Lambda function implemented in previous chapters.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为前几章实现的每个Lambda函数编写一个SAM模板文件。
