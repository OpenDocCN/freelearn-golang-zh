["```go\nsvc := cloudwatch.New(cfg)\nreq := svc.PutMetricDataRequest(&cloudwatch.PutMetricDataInput{\n  Namespace: aws.String(\"InsertMovie\"),\n  MetricData: []cloudwatch.MetricDatum{\n    cloudwatch.MetricDatum{\n      Dimensions: []cloudwatch.Dimension{\n        cloudwatch.Dimension{\n          Name: aws.String(\"Environment\"),\n          Value: aws.String(\"production\"),\n        },\n      },\n      MetricName: aws.String(\"ActionMovies\"),\n      Value: aws.Float64(1.0),\n      Unit: cloudwatch.StandardUnitCount,\n    },\n  },\n})\n```", "```go\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"1\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"logs:CreateLogStream\",\n        \"logs:CreateLogGroup\",\n        \"logs:PutLogEvents\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n```", "```go\npackage main\n\nimport (\n  \"log\"\n\n  \"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc reverse(s string) string {\n  runes := []rune(s)\n  for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n    runes[i], runes[j] = runes[j], runes[i]\n  }\n  return string(runes)\n}\n\nfunc handler(input string) (string, error) {\n  log.Println(\"Before:\", input)\n  output := reverse(input)\n  log.Println(\"After:\", output)\n  return output, nil\n}\n\nfunc main() {\n  lambda.Start(handler)\n}\n```", "```go\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": {\n    \"Effect\": \"Allow\",\n    \"Action\": [\n      \"xray:PutTraceSegments\",\n      \"xray:PutTelemetryRecords\"\n    ],\n    \"Resource\": [\n      \"*\"\n    ]\n  }\n}\n```", "```go\ngo get -u github.com/aws/aws-xray-sdk-go/...\n```", "```go\nxray.Configure(xray.Config{\n  LogLevel: \"info\",\n  ServiceVersion: \"1.2.3\",\n})\n```", "```go\nfunc findAll(ctx context.Context) (events.APIGatewayProxyResponse, error) {\n  xray.Configure(xray.Config{\n    LogLevel: \"info\",\n    ServiceVersion: \"1.2.3\",\n  })\n\n  sess := session.Must(session.NewSession())\n  dynamo := dynamodb.New(sess)\n  xray.AWS(dynamo.Client)\n\n  res, err := dynamo.ScanWithContext(ctx, &dynamodb.ScanInput{\n    TableName: aws.String(os.Getenv(\"TABLE_NAME\")),\n  })\n\n  ...\n}\n```", "```go\nres, err := http.Get(url)\nif err != nil {\n  log.Fatal(err)\n}\ndefer res.Body.Close()\n```", "```go\ndoc, err := goquery.NewDocumentFromReader(res.Body)\nif err != nil {\n  log.Fatal(err)\n}\n\ntitle := doc.Find(\".header .title span a h2\").Text()\ndescription := doc.Find(\".overview p\").Text()\ncover, _ := doc.Find(\".poster .image_content img\").Attr(\"src\")\n\nmovie := Movie{\n  ID: uuid.Must(uuid.NewV4()).String(),\n  Name: title,\n  Description: description,\n  Cover: cover,\n}\n```", "```go\nsess := session.Must(session.NewSession())\ndynamo := dynamodb.New(sess)\nreq, _ := dynamo.PutItemRequest(&dynamodb.PutItemInput{\n  TableName: aws.String(os.Getenv(\"TABLE_NAME\")),\n  Item: map[string]*dynamodb.AttributeValue{\n    \"ID\": &dynamodb.AttributeValue{\n      S: aws.String(movie.ID),\n    },\n    \"Name\": &dynamodb.AttributeValue{\n      S: aws.String(movie.Name),\n    },\n    \"Cover\": &dynamodb.AttributeValue{\n      S: aws.String(movie.Cover),\n    },\n    \"Description\": &dynamodb.AttributeValue{\n      S: aws.String(movie.Description),\n    },\n  },\n})\nerr = req.Send()\nif err != nil {\n  log.Fatal(err)\n}\n```", "```go\nxray.Configure(xray.Config{\n  LogLevel: \"info\",\n  ServiceVersion: \"1.2.3\",\n})\n\n// Get html page\nres, err := ctxhttp.Get(ctx, xray.Client(nil), url)\nif err != nil {\n  log.Fatal(err)\n}\ndefer res.Body.Close()\n```", "```go\nxray.Capture(ctx, \"Parsing\", func(ctx1 context.Context) error {\n  doc, err := goquery.NewDocumentFromReader(res.Body)\n  if err != nil {\n    return err\n  }\n\n  title := doc.Find(\".header .title span a h2\").Text()\n  description := doc.Find(\".overview p\").Text()\n  cover, _ := doc.Find(\".poster .image_content img\").Attr(\"src\")\n\n  movie := Movie{\n    ID: uuid.Must(uuid.NewV4()).String(),\n    Name: title,\n    Description: description,\n    Cover: cover,\n  }\n\n  xray.AddMetadata(ctx1, \"movie.title\", title)\n  xray.AddMetadata(ctx1, \"movie.description\", description)\n  xray.AddMetadata(ctx1, \"movie.cover\", cover)\n\n  return nil\n})\n```", "```go\nsess := session.Must(session.NewSession())\ndynamo := dynamodb.New(sess)\nxray.AWS(dynamo.Client)\n```"]