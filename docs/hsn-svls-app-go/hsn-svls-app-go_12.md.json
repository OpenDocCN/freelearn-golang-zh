["```go\npackage main\n\nimport (\n  \"log\"\n  \"os\"\n\n  \"github.com/aws/aws-sdk-go-v2/aws/external\"\n  \"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider\"\n  \"github.com/aws/aws-sdk-go/aws\"\n)\n\nfunc main() {\n  cfg, err := external.LoadDefaultAWSConfig()\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  cognito := cognitoidentityprovider.New(cfg)\n  req := cognito.SignUpRequest(&cognitoidentityprovider.SignUpInput{\n    ClientId: aws.String(os.Getenv(\"COGNITO_CLIENT_ID\")),\n    Username: aws.String(\"EMAIL\"),\n    Password: aws.String(\"PASSWORD\"),\n  })\n  _, err = req.Send()\n  if err != nil {\n    log.Fatal(err)\n  }\n}\n```", "```go\ncognito := cognitoidentityprovider.New(cfg)\nreq := cognito.ConfirmSignUpRequest(&cognitoidentityprovider.ConfirmSignUpInput{\n  ClientId: aws.String(os.Getenv(\"COGNITO_CLIENT_ID\")),\n  Username: aws.String(\"EMAIL\"),\n  ConfirmationCode: aws.String(\"CONFIRMATION_CODE\"),\n})\n_, err = req.Send()\nif err != nil {\n  log.Fatal(err)\n}\n```", "```go\nnpm install --save amazon-cognito-identity-js\n```", "```go\nimport { Injectable } from '@angular/core';\nimport { CognitoUserPool, CognitoUser, AuthenticationDetails} from 'amazon-cognito-identity-js';\nimport { environment } from '../../environments/environment';\n\n@Injectable()\nexport class CognitoService {\n\n  public static CONFIG = {\n    UserPoolId: environment.userPoolId,\n    ClientId: environment.clientId\n  }\n\n  auth(username, password, callback){\n    let user = new CognitoUser({\n      Username: username,\n      Pool: this.getUserPool()\n    })\n\n    let authDetails = new AuthenticationDetails({\n      Username: username,\n      Password: password\n    })\n\n    user.authenticateUser(authDetails, {\n      onSuccess: res => {\n        callback(null, res.getIdToken().getJwtToken())\n      },\n      onFailure: err => {\n        callback(err, null)\n      }\n    })\n  }\n\n  getUserPool() {\n    return new CognitoUserPool(CognitoService.CONFIG);\n  }\n\n  getCurrentUser() {\n    return this.getUserPool().getCurrentUser();\n  }\n\n}\n```", "```go\nsignin(username, password){\n    this.cognitoService.auth(username, password, (err, token) => {\n      if(err){\n        this.loginError = true\n      }else{\n        this.loginError = false\n        this.storage.set(\"COGNITO_TOKEN\", token)\n        this.loginModal.close()\n      }\n    })\n  }\n```", "```go\n@Injectable()\nexport class MoviesApiService {\n\n  constructor(private http: Http,\n    @Inject(LOCAL_STORAGE) private storage: WebStorageService) {}\n\n    findAll() {\n      return this.http\n          .get(environment.api, {\n              headers: this.getHeaders()\n          })\n          .map(res => {\n              return res.json()\n          })\n    }\n\n    getHeaders() {\n      let headers = new Headers()\n      headers.append('Authorization', this.storage.get(\"COGNITO_TOKEN\"))\n      return headers\n    }\n\n}\n```", "```go\nfunc handler() error {\n  MYSQL_USERNAME := os.Getenv(\"MYSQL_USERNAME\")\n  MYSQL_PASSWORD := os.Getenv(\"MYSQL_PASSWORD\")\n  MYSQL_DATABASE := os.Getenv(\"MYSQL_DATABASE\")\n  MYSQL_PORT := os.Getenv(\"MYSQL_PORT\")\n  MYSQL_HOST := os.Getenv(\"MYSQL_HOST\")\n\n  uri := fmt.Sprintf(\"%s:%s@tcp(%s:%s)/%s\", MYSQL_USERNAME, MYSQL_PASSWORD, MYSQL_HOST, MYSQL_PORT, MYSQL_DATABASE)\n  db, err := sql.Open(\"mysql\", uri)\n  if err != nil {\n    return err\n  }\n  defer db.Close()\n\n  _, err = db.Query(`CREATE TABLE IF NOT EXISTS movies(id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(50) NOT NULL)`)\n  if err != nil {\n    return err\n  }\n\n  for _, movie := range []string{\"Iron Man\", \"Thor\", \"Avengers\", \"Wonder Woman\"} {\n    _, err := db.Query(\"INSERT INTO movies(name) VALUES(?)\", movie)\n    if err != nil {\n      return err\n    }\n  }\n\n  movies, err := db.Query(\"SELECT id, name FROM movies\")\n  if err != nil {\n    return err\n  }\n\n  for movies.Next() {\n    var name string\n    var id int\n    err = movies.Scan(&id, &name)\n    if err != nil {\n      return err\n    }\n\n    log.Printf(\"ID=%d\\tName=%s\\n\", id, name)\n  }\n  return nil\n}\n```", "```go\nvar encryptedMysqlUsername string = os.Getenv(\"MYSQL_USERNAME\")\nvar encryptedMysqlPassword string = os.Getenv(\"MYSQL_PASSWORD\")\nvar mysqlDatabase string = os.Getenv(\"MYSQL_DATABASE\")\nvar mysqlPort string = os.Getenv(\"MYSQL_PORT\")\nvar mysqlHost string = os.Getenv(\"MYSQL_HOST\")\nvar decryptedMysqlUsername, decryptedMysqlPassword string\n\nfunc decrypt(encrypted string) (string, error) {\n  kmsClient := kms.New(session.New())\n  decodedBytes, err := base64.StdEncoding.DecodeString(encrypted)\n  if err != nil {\n    return \"\", err\n  }\n  input := &kms.DecryptInput{\n    CiphertextBlob: decodedBytes,\n  }\n  response, err := kmsClient.Decrypt(input)\n  if err != nil {\n    return \"\", err\n  }\n  return string(response.Plaintext[:]), nil\n}\n\nfunc init() {\n  decryptedMysqlUsername, _ = decrypt(encryptedMysqlUsername)\n  decryptedMysqlPassword, _ = decrypt(encryptedMysqlPassword)\n}\n\nfunc handler() error {\n  uri := fmt.Sprintf(\"%s:%s@tcp(%s:%s)/%s\", decryptedMysqlUsername, decryptedMysqlPassword, mysqlHost, mysqlPort, mysqlDatabase)\n  db, err := sql.Open(\"mysql\", uri)\n  if err != nil {\n    return err\n  }\n  ...\n}\n```"]