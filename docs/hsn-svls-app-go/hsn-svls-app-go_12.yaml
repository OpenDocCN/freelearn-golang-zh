- en: Securing Your Serverless Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护您的无服务器应用程序
- en: 'AWS Lambda is the ultimate pay-as-you-go cloud computing service. Customers
    just need to upload their Lambda function code to the cloud and it will be up
    and running with no underlying infrastructure to secure or patch. However, according
    to AWS''s Shared Responsibility model, you''re still responsible for securing
    your Lambda function''s code. This chapter is dedicated to the best practices
    and recommendations one can follow in AWS Lambda to make applications resilient
    and secure according to the AWS Well-Architected Framework. We will cover the
    following topics in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda是终极的按需付费云计算服务。客户只需将他们的Lambda函数代码上传到云端，它就可以运行，而无需保护或修补底层基础设施。然而，根据AWS的共享责任模型，您仍然负责保护您的Lambda函数代码。本章专门讨论在AWS
    Lambda中可以遵循的最佳实践和建议，以使应用程序根据AWS Well-Architected Framework具有弹性和安全性。本章将涵盖以下主题：
- en: Authentication and user control access
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份验证和用户控制访问
- en: Encrypted environment variables
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加密环境变量
- en: Logging AWS Lambda API calls with CloudTrail
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CloudTrail记录AWS Lambda API调用
- en: Vulnerability scanning for your dependencies
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扫描依赖项的漏洞
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In order to follow this chapter, you can either follow the API Gateway setup
    chapter or prepare a serverless RESTful API based on Lambda and the API Gateway. The
    code bundle for this chapter is hosted on GitHub at [https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go](https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了遵循本章，您可以遵循API Gateway设置章节，或者基于Lambda和API Gateway的无服务器RESTful API。本章的代码包托管在GitHub上，网址为[https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go](https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go)。
- en: Authentication and user control access
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 身份验证和用户控制访问
- en: The serverless application that we have built so far works like a charm, and
    is open to the public. Anyone can invoke Lambda functions if he/she has the API
    Gateway invocation URL. Luckily, AWS offers a managed service called Cognito.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们构建的无服务器应用程序运行良好，并向公众开放。只要有API Gateway调用URL，任何人都可以调用Lambda函数。幸运的是，AWS提供了一个名为Cognito的托管服务。
- en: '**Amazon Cognito** is an authentication provider and management service at
    scale that allows you to add user sign up and sign in easily to your applications.
    The users are stored in a scalable directory called the user pool. In the upcoming
    section, Amazon Cognito will be used to authenticate users before allowing them
    to request the RESTful API.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**Amazon Cognito**是一个规模化的身份验证提供程序和管理服务，允许您轻松地向您的应用程序添加用户注册和登录。用户存储在一个可扩展的目录中，称为用户池。在即将到来的部分中，Amazon
    Cognito将用于在允许他们请求RESTful API之前对用户进行身份验证。'
- en: 'To get started, create a new user pool in Amazon Cognito and give it a name:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请在Amazon Cognito中创建一个新的用户池并为其命名：
- en: '![](img/d64b1112-ed81-4cf4-bd8f-0395d33baa5e.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d64b1112-ed81-4cf4-bd8f-0395d33baa5e.png)'
- en: 'Click on the Review defaults option to create a pool with the default settings:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“审阅默认值”选项以使用默认设置创建池：
- en: '![](img/9a950ec8-a55f-42ae-80fe-bb7c1341db96.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9a950ec8-a55f-42ae-80fe-bb7c1341db96.png)'
- en: 'Click on Attributes from the navigation pane and tick the Allow email addresses
    option under Email address or phone number to allow users to sign in with an email
    address:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 从导航窗格中单击“属性”，并在“电子邮件地址或电话号码”下的“允许电子邮件地址”选项中选中以允许用户使用电子邮件地址登录：
- en: '![](img/61b2d18f-bac9-4141-93d8-4598440cedaf.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/61b2d18f-bac9-4141-93d8-4598440cedaf.png)'
- en: 'Go back to Review and click on Create pool. A success message should be displayed
    at the end of the creation process:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到“审阅”并单击“创建池”。创建过程结束时应显示成功消息：
- en: '![](img/8d7b4995-faf5-43ad-b16b-5adad82721cf.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d7b4995-faf5-43ad-b16b-5adad82721cf.png)'
- en: 'After creating your first user pool, register your serverless API from App
    clients under General settings and select Add an app client. Give the application
    a name and uncheck the Generate client secret option as follows: the authentication
    will be done on the client side. Hence, the client secret should not be passed
    on the URL for security purposes:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 创建第一个用户池后，从“常规设置”下的应用程序客户端中注册您的无服务器API，并选择“添加应用程序客户端”。给应用程序命名，并取消“生成客户端密钥”选项如下：身份验证将在客户端上完成。因此，出于安全目的，客户端密钥不应传递到URL上：
- en: '![](img/c7345bb0-aef1-47ca-b498-00796ba6a459.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c7345bb0-aef1-47ca-b498-00796ba6a459.png)'
- en: 'Choose Create app client to register the application and copy the **App client
    id** to the clipboard:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 选择“创建应用程序客户端”以注册应用程序，并将**应用程序客户端ID**复制到剪贴板：
- en: '![](img/8ae8223e-3303-4afc-abea-a50732e92be3.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8ae8223e-3303-4afc-abea-a50732e92be3.png)'
- en: Now that the user pool has been created, we can configure the API Gateway to
    validate access tokens from a successful user pool authentication before granting
    access to Lambda functions.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在用户池已创建，我们可以配置API Gateway以在授予对Lambda函数的访问之前验证来自成功用户池身份验证的访问令牌。
- en: Securing API access
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护API访问
- en: 'To begin securing API access, go to API Gateway console, choose the RESTful
    API that we built in the previous chapters, and click on Authorizers from the
    navigation bar:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始保护API访问，请转到API Gateway控制台，选择我们在前几章中构建的RESTful API，并从导航栏中单击“授权者”：
- en: '![](img/2bd40386-76ce-436d-9635-01efe30a58a9.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2bd40386-76ce-436d-9635-01efe30a58a9.png)'
- en: 'Click on the Create New Authorizer button and select Cognito. Then, select
    the user pool that we created earlier and set the token source field to `Authorization`.
    This defines the name of the incoming request header containing the API caller''s
    identity token for `Authorization`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“创建新的授权者”按钮，然后选择Cognito。然后，选择我们之前创建的用户池，并将令牌源字段设置为`Authorization`。这定义了包含API调用者身份令牌的传入请求标头的名称为`Authorization`：
- en: '![](img/4019bf3f-c338-4cd7-8755-673abdce6987.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4019bf3f-c338-4cd7-8755-673abdce6987.png)'
- en: 'Once the form has been filled in, click on Create to integrate the Cognito
    User Pool with the API Gateway:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 填写完表单后，单击“创建”以将Cognito用户池与API Gateway集成：
- en: '![](img/dcd77acd-3df6-4ac7-9fab-0ce42b730c35.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dcd77acd-3df6-4ac7-9fab-0ce42b730c35.png)'
- en: 'You can now secure all of the endpoints, for example, in order to secure the
    endpoint responsible for listing all `movies`. Click on the corresponding `GET`
    method under the `/movies` resource:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以保护所有端点，例如，为了保护负责列出所有电影的端点。点击`/movies`资源下的相应`GET`方法：
- en: '![](img/0e5002c8-6700-4773-9105-3e873cca9342.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e5002c8-6700-4773-9105-3e873cca9342.png)'
- en: 'Click on the Method Request box, then on Authorization, and select the user
    pool we created previously:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 点击Method Request框，然后点击Authorization，并选择我们之前创建的用户池：
- en: '![](img/76a3b295-45d7-44dd-ae21-d01da1d28f3c.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/76a3b295-45d7-44dd-ae21-d01da1d28f3c.png)'
- en: 'Leave the OAuth Scopes option as `None`, and repeat the preceding procedure
    for the remaining methods to secure them:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 将OAuth Scopes选项保留为“None”，并为其余方法重复上述过程以保护它们：
- en: '![](img/8a5148dc-b017-4b4e-b5ad-bc63e7b3672c.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8a5148dc-b017-4b4e-b5ad-bc63e7b3672c.png)'
- en: 'Once done, redeploy the API and point your browser to the API Gateway invocation
    URL:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，重新部署API，并将浏览器指向API Gateway调用URL：
- en: '![](img/ec588566-1148-4fab-bd68-c938c9ed5710.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec588566-1148-4fab-bd68-c938c9ed5710.png)'
- en: 'This time, the endpoint is secured and requires authentication. You can confirm
    the behavior by checking the frontend we built previously. If you inspect the
    network requests, the API Gateway request should return a 401 Unauthorised error:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，端点是受保护的，需要进行身份验证。您可以通过检查我们之前构建的前端来确认行为。如果检查网络请求，API Gateway请求应返回401未经授权错误：
- en: '![](img/8dbb072f-7e1b-4e50-b8e5-877f150e006b.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8dbb072f-7e1b-4e50-b8e5-877f150e006b.png)'
- en: 'In order to fix this error, we will need to update the client (web application)
    to do the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了修复此错误，我们需要更新客户端（Web应用程序）执行以下操作：
- en: Sign in to the user pool using the Cognito JavaScript SDK
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Cognito JavaScript SDK登录用户池
- en: Obtain an identity token for the signed-in user from the the user pool
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从用户池中获取已登录用户的身份令牌
- en: Include the identity token in the `Authorization` header for the API Gateway
    requests
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在API Gateway请求的Authorization标头中包含身份令牌
- en: The identity token returned has an expiration date of 1 hour. Once expired,
    you need to use a refresh token to refresh the session.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的身份令牌具有1小时的过期日期。一旦过期，您需要使用刷新令牌来刷新会话。
- en: User management with AWS Cognito
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AWS Cognito进行用户管理
- en: Before making  changes on the client side, we need to create a test user in
    Amazon Cognito. To achieve this, you can either use the AWS Management Console
    or complete this programmatically with theAWS Golang SDK.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端进行更改之前，我们需要在Amazon Cognito中创建一个测试用户。为此，您可以使用AWS管理控制台，也可以使用AWS Golang SDK以编程方式完成。
- en: Setting up a test user via the AWS Management Console
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过AWS管理控制台设置测试用户
- en: 'Click on Users and groups and click on the Create user button:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 点击用户和组，然后点击创建用户按钮：
- en: '![](img/6166182e-436c-4ee7-a251-0701a396d16b.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6166182e-436c-4ee7-a251-0701a396d16b.png)'
- en: 'Set a username and a password. If you want to receive a confirmation email,
    you can untick the Mark email as verified? box:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 设置用户名和密码。如果要收到确认电子邮件，可以取消选中“标记电子邮件为已验证？”框：
- en: '![](img/d936b90b-04b4-46ab-a506-65b1bba95a25.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d936b90b-04b4-46ab-a506-65b1bba95a25.png)'
- en: Setup using Cognito Golang SDK
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Cognito Golang SDK进行设置
- en: 'Create a `main.go` file with the below content. The code uses the `SignUpRequest`
    method from the `cognitoidentityprovider` package to create a new user. As a parameter,
    it takes a struct with the client ID, username, and password:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下。该代码使用`cognitoidentityprovider`包中的`SignUpRequest`方法来创建一个新用户。作为参数，它接受一个包含客户端ID、用户名和密码的结构体：
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Run the preceding command using the `go run main.go` command. You will receive
    an email with a temporary password:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`go run main.go`命令运行上述命令。您将收到一封带有临时密码的电子邮件：
- en: '![](img/b30d2818-cda2-4dd0-8d2c-51b41b1adf88.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b30d2818-cda2-4dd0-8d2c-51b41b1adf88.png)'
- en: 'After signing up, the user must confirm the sign up by entering a code that
    is sent via email. To confirm the sign up process, you must collect the code received
    by the user and use it as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 注册后，用户必须通过输入通过电子邮件发送的代码来确认注册。要确认注册过程，必须收集用户收到的代码并使用如下方式：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now that a user has been created in the Cognito User Pool, we are ready to
    update the client side. Start by creating a sign in form as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Cognito用户池中已创建了一个用户，我们准备更新客户端。首先创建一个登录表单如下：
- en: '![](img/bfb6749b-38ca-4334-84f9-4feacb9576ac.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bfb6749b-38ca-4334-84f9-4feacb9576ac.png)'
- en: 'Next, install the Cognito SDK for Javascript using the Node.js package manager.
    This package contains the Angular module and the providers you might need to interact
    with Cognito:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用Node.js包管理器安装Cognito SDK for Javascript。该软件包包含与Cognito交互所需的Angular模块和提供程序：
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Furthermore, we have to create an Angular service with an `auth` method that
    creates a `CognitoUserPool` object by providing a `UserPoolId` object and a `ClientId`, which authenticate
    a user based on the username and password given in the parameters. If the sign
    in is successful, the `onSuccess` callback is called. If the sign in fails, the `onFailure` callback
    is called:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还需要创建一个带有`auth`方法的Angular服务，该方法通过提供`UserPoolId`对象和`ClientId`创建一个`CognitoUserPool`对象，根据参数中给定的用户名和密码对用户进行身份验证。如果登录成功，将调用`onSuccess`回调。如果登录失败，将调用`onFailure`回调：
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `auth` method will be invoked each time the login button is clicked. If
    the user enters the right credentials, a user session will be established with
    the Amazon Cognito service, and a user identity token will be saved in the local
    storage of the browser. If the right credentials aren''t entered, an error message
    will be displayed to the user:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 每次单击登录按钮时都会调用`auth`方法。如果用户输入了正确的凭据，将会与Amazon Cognito服务建立用户会话，并将用户身份令牌保存在浏览器的本地存储中。如果输入了错误的凭据，将向用户显示错误消息：
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finally, the `MoviesAPI` service should be updated to include the user identity
    token (called the JWT token – [https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-using-tokens-with-identity-providers.html#amazon-cognito-user-pools-using-the-id-token](https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-using-tokens-with-identity-providers.html#amazon-cognito-user-pools-using-the-id-token))
    in the `Authorization` header of each API Gateway request call, as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`MoviesAPI`服务应更新以在每个API Gateway请求调用的`Authorization`头中包含用户身份令牌（称为JWT令牌 - [https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-using-tokens-with-identity-providers.html#amazon-cognito-user-pools-using-the-id-token](https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-using-tokens-with-identity-providers.html#amazon-cognito-user-pools-using-the-id-token)）。
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The preceding code samples have been tested with Angular 5\. In addition, make
    sure that you adopt the code into your own web framework accordingly.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的代码示例已经在Angular 5中进行了测试。此外，请确保根据自己的Web框架采用代码。
- en: 'To test it out, head back to the browser. The sign in form should pop up; fill
    the fields with the user credentials we created earlier. Then, click on the Login button:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试它，请返回浏览器。登录表单应该弹出；使用我们之前创建的用户凭据填写字段。然后，单击“登录”按钮：
- en: '![](img/efb79861-ecf2-42da-ab30-295bd6e804b7.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efb79861-ecf2-42da-ab30-295bd6e804b7.png)'
- en: 'The user identity will be returned and the RESTful API will be called with
    the token that''s included in the request header. The API Gateway will verify
    the token and will invoke the `FindAllMovies` Lambda function, which will return
    movies from the DynamoDB table:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 用户身份将被返回，并且将使用请求头中包含的令牌调用RESTful API。 API网关将验证令牌，并将调用`FindAllMovies` Lambda函数，该函数将从DynamoDB表返回电影：
- en: '![](img/4e06f787-ffe7-4840-a6ec-b98f993d2935.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e06f787-ffe7-4840-a6ec-b98f993d2935.png)'
- en: 'For web developers, Cognito''s `getSession` method can be used to retrieve
    the current user from local storage since the JavaScript SDK is configured to automatically store
    the tokens after authenticating properly, as you can see in the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Web开发人员，Cognito的`getSession`方法可用于从本地存储中检索当前用户，因为JavaScript SDK配置为在正确进行身份验证后自动存储令牌，如下面的屏幕截图所示：
- en: '![](img/fd735a23-f2b8-46d2-a44a-d643408938c3.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd735a23-f2b8-46d2-a44a-d643408938c3.png)'
- en: 'To sum up, so far we have done the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，到目前为止，我们已经完成了以下工作：
- en: Built multiple Lambda functions to manage a store of movies
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建了多个Lambda函数来管理电影存储
- en: Managed Lambda data persistency in a DynamoDB table
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在DynamoDB表中管理Lambda数据持久性
- en: Exposed those Lambda functions through the API Gateway
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过API Gateway公开这些Lambda函数
- en: Built a web client for testing the built stack in S3
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在S3中构建用于测试构建堆栈的Web客户端
- en: Sped up web client assets with the CloudFront distribution
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过CloudFront分发加速Web客户端资产
- en: Set up custom domain names in Route 53
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Route 53中设置自定义域名
- en: Secured the API with AWS Cognito
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AWS Cognito保护API
- en: 'The following schema illustrates the serverless architecture that we have built
    so far:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下模式说明了我们迄今为止构建的无服务器架构：
- en: '![](img/b2e88681-4a54-4ac7-b555-14d0cfb75711.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b2e88681-4a54-4ac7-b555-14d0cfb75711.png)'
- en: Amazon Cognito can be configured with multiple identity providers such as Facebook,
    Twitter, Google, or developer authenticated identities.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Cognito可以配置多个身份提供者，如Facebook、Twitter、Google或开发人员认证的身份。
- en: Encrypted environment variables
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加密环境变量
- en: In previous chapters, we saw how to use environment variables with AWS Lambda
    to dynamically pass data to the function code without changing any code. According
    to the **Twelve Factor App** methodology ([https://12factor.net/](https://12factor.net/))
    , you should always separate your configuration from your code to avoid checking
    sensitive credentials to a repository and to be able to define multiple releases
    of your Lambda functions (staging, production, and sandbox) with the same source
    code. Moreover, environment variables can be used to change the function behavior
    based on different settings **(A/B testing)**.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们看到如何使用AWS Lambda的环境变量动态传递数据到函数代码，而不更改任何代码。根据**Twelve Factor App**方法论（[https://12factor.net/](https://12factor.net/)），您应该始终将配置与代码分开，以避免将敏感凭据检查到存储库，并能够定义Lambda函数的多个发布版本（暂存、生产和沙盒）具有相同的源代码。此外，环境变量可用于根据不同设置更改函数行为**（A/B测试）**。
- en: If you want to share secrets across multiple Lambda functions, you can use AWS's
    **System Manager Parameter Store**.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要在多个Lambda函数之间共享秘密，可以使用AWS的**系统管理器参数存储**。
- en: 'The following example illustrates how environment variables can be used to
    pass MySQL credentials to the function''s code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例说明了如何使用环境变量将MySQL凭据传递给函数的代码：
- en: '[PRE6]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once the function is deployed to AWS Lambda and the environment variables are
    set, you can invoke the function. It will output a list of movies that were inserted
    into the database:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦函数部署到AWS Lambda并设置环境变量，就可以调用该函数。它将输出插入到数据库中的电影列表：
- en: '![](img/f4cceb41-12f3-4215-bcb2-aa454bc017fa.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f4cceb41-12f3-4215-bcb2-aa454bc017fa.png)'
- en: So far, so good. However, the database credentials are in plain text!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切都很好。但是，数据库凭据是明文！
- en: '![](img/d42646b1-597a-4f6c-8e0d-26919861d601.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d42646b1-597a-4f6c-8e0d-26919861d601.png)'
- en: 'Fortunately, AWS Lambda provides encryption at two levels: in transit and at
    rest, using the AWS Key Management Service.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，AWS Lambda在两个级别提供加密：在传输和静态时，使用AWS密钥管理服务。
- en: Data encryption at rest
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据静态加密
- en: AWS Lambda encrypts all environment variables while your function is being deployed
    and decrypts them when the function is invoked (on-the-fly).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda在部署函数时加密所有环境变量，并在调用函数时解密它们（即时）。
- en: 'If you expand the Encryption configuration section, you will notice that by
    default AWS Lambda encrypts, at rest, environment variables using a default Lambda
    service key. This key is created automatically the first time you create a Lambda
    function in a specific region:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果展开“加密配置”部分，您会注意到默认情况下，AWS Lambda使用默认的Lambda服务密钥对环境变量进行加密。此密钥在您在特定区域创建Lambda函数时会自动创建：
- en: '![](img/bc5c3a85-f548-4bfa-9d00-378a07d81c00.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bc5c3a85-f548-4bfa-9d00-378a07d81c00.png)'
- en: 'You can change the key and use your own by navigating to the Identity and Access
    Management Console. Then, click on Encryption keys:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过导航到身份和访问管理控制台来更改密钥并使用自己的密钥。然后，单击“加密密钥”：
- en: '![](img/0ef2e744-13c3-4ff3-bb73-476fbb48bfdc.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0ef2e744-13c3-4ff3-bb73-476fbb48bfdc.png)'
- en: 'Click on the Create key button to create a new customer master key:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“创建密钥”按钮创建新的客户主密钥：
- en: '![](img/563e4e62-d659-444a-9648-a648d6647c4a.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/563e4e62-d659-444a-9648-a648d6647c4a.png)'
- en: 'Select an IAM role and account to manage the key through the **Key Management
    Service** (**KMS**) API. Then, select the IAM role you used while creating your
    Lambda function. This allows the Lambda function to use the **customer master
    key** (**CMK**) and successfully request the `encrypt` and `decrypt` methods:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个IAM角色和帐户来通过**密钥管理服务**（**KMS**）API管理密钥。然后，选择您在创建Lambda函数时使用的IAM角色。这允许Lambda函数使用**客户主密钥**（**CMK**）并成功请求`encrypt`和`decrypt`方法：
- en: '![](img/511f7fad-6191-4a7e-b796-0d12736c6f52.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/511f7fad-6191-4a7e-b796-0d12736c6f52.png)'
- en: 'Once the key is created, head back to the Lambda function configuration page
    and change the key to the one you just created:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 创建密钥后，返回Lambda函数配置页面，并将密钥更改为您刚刚创建的密钥：
- en: '![](img/cd032e44-5ae4-4b8d-afc8-95a89d0c8dc6.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cd032e44-5ae4-4b8d-afc8-95a89d0c8dc6.png)'
- en: Now, AWS Lambda will use your own key to encrypt environment variables at rest
    when stored in Amazon.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当存储在Amazon中时，AWS Lambda将使用您自己的密钥加密环境变量。
- en: Data encryption in transit
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据传输加密
- en: It's recommended you encrypt environment variables (sensitive information) before
    the function is deployed. AWS Lambda provides encryption helpers on the console
    to make this process easy to follow.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 建议在部署函数之前对环境变量（敏感信息）进行加密。AWS Lambda在控制台上提供了加密助手，使此过程易于遵循。
- en: 'In order to encrypt in transit (by using the KMS we used earlier), you will
    need to enable this by checking the Enable helpers for encryption in transit checkbox:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 为了通过在传输中加密（使用之前使用的KMS），您需要通过选中“启用传输加密的帮助程序”复选框来启用此功能：
- en: '![](img/825da2fe-8377-41e5-9e31-c90e9ca4d171.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/825da2fe-8377-41e5-9e31-c90e9ca4d171.png)'
- en: 'Encrypt `MYSQL_USERNAME` and `MYSQL_PASSWORD` by clicking on the appropriate Encrypt buttons:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 通过单击适当的加密按钮对`MYSQL_USERNAME`和`MYSQL_PASSWORD`进行加密：
- en: '![](img/92e642a0-f265-43c3-9dc1-a732bdaf46e3.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/92e642a0-f265-43c3-9dc1-a732bdaf46e3.png)'
- en: 'The credentials will be encrypted and you''ll see them in the console as `CipherText`.
    Next, you need to update the function''s handler to decrypt environment variables
    using the KMS SDK:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 凭据将被加密，并且您将在控制台中看到它们作为`CipherText`。接下来，您需要更新函数的处理程序，使用KMS SDK解密环境变量：
- en: '[PRE7]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the event you used your own KMS key, you will need to grant `kms:Decrypt`
    permissions to the execution role (IAM role) that's attached to the Lambda function.
    Also, make sure you increase the default execution timeout to allow enough time
    for the function's code to be completed.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用自己的KMS密钥，您需要授予附加到Lambda函数的执行角色（IAM角色）`kms:Decrypt`权限。还要确保增加默认执行超时时间，以允许足够的时间完成函数的代码。
- en: Logging AWS Lambda API calls with CloudTrail
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CloudTrail记录AWS Lambda API调用
- en: Capturing all calls made by your Lambda functions is important for auditing,
    security, and compliance. It gives you a global overview of the AWS services they
    interact with. One service that leverages this feature is **CloudTrail**.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获Lambda函数发出的所有调用对于审计、安全和合规性非常重要。它为您提供了与其交互的AWS服务的全局概览。利用此功能的一个服务是**CloudTrail**。
- en: CloudTrail records API calls made by your Lambda functions. It's straightforward
    and easy to use. All you need to do is navigate to CloudTrail from the AWS Management
    Console and filter events by the event source, which should be `lambda.amazonaws.com`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: CloudTrail记录了Lambda函数发出的API调用。这很简单易用。您只需要从AWS管理控制台导航到CloudTrail，并按事件源筛选事件，事件源应为`lambda.amazonaws.com`。
- en: 'There, you should have all of the calls that have been made by each Lambda
    function, as shown in the following screenshot:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在那里，您应该看到每个Lambda函数发出的所有调用，如下面的屏幕截图所示：
- en: '![](img/3076bb70-b308-4002-9d3e-efed9619dd94.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3076bb70-b308-4002-9d3e-efed9619dd94.png)'
- en: 'In addition to exposing event history, you can create a trail in each AWS region
    to record your Lambda function''s events in a single S3 bucket, then implement
    a log analysis pipeline using the **ELK** (**Elasticsearch, Logstash, and Kibana**)
    stack to process your logs as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 除了公开事件历史记录，您还可以在每个AWS区域中创建一个跟踪，将Lambda函数的事件记录在单个S3存储桶中，然后使用**ELK**（Elasticsearch、Logstash和Kibana）堆栈实现日志分析管道，如下所示处理您的日志：
- en: '![](img/34a908ea-63f5-4043-8909-39a441edfa46.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/34a908ea-63f5-4043-8909-39a441edfa46.png)'
- en: 'Finally, you can create interactive and dynamic widgets to construct a dashboard
    in kibana to view your Lambda function events:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以创建交互式和动态小部件，构建Kibana中的仪表板，以查看Lambda函数事件：
- en: '![](img/8d853e00-8238-48c2-b162-2cb92cddfab2.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d853e00-8238-48c2-b162-2cb92cddfab2.png)'
- en: Vulnerability scanning for your dependencies
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为您的依赖项进行漏洞扫描
- en: 'Since most Lambda function code contains multiple third-party Go dependencies
    (remember the `go get` commands), it''s important to carry out audits for all
    of these. Hence, vulnerability scanning your Golang dependencies should be part
    of your CI/CD. You must automate the security analysis using a third-party tool such
    as **S****nyk** ([https://snyk.io/](https://snyk.io/)) to continuously scan for
    known security vulnerabilities in dependencies.  The following  screenshot describe
    a complete end-to-end deployment process that you might choose to implement for
    your Lambda functions:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 由于大多数Lambda函数代码包含多个第三方Go依赖项（记住`go get`命令），因此对所有这些依赖项进行审计非常重要。因此，漏洞扫描您的Golang依赖项应该成为您的CI/CD的一部分。您必须使用第三方工具（如**S****nyk**
    ([https://snyk.io/](https://snyk.io/)）自动化安全分析，以持续扫描依赖项中已知的安全漏洞。以下截图描述了您可能选择为Lambda函数实施的完整端到端部署过程：
- en: '![](img/451dcc6d-173a-4db9-b34d-e12820aee7f2.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/451dcc6d-173a-4db9-b34d-e12820aee7f2.png)'
- en: By making vulnerability scanning part of your workflow, you will be capable
    of finding and fixing known vulnerabilities in packages which could potentially
    cause data loss, service outages, and unauthorised access to sensitive information.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将漏洞扫描纳入工作流程，您将能够发现并修复软件包中已知的漏洞，这些漏洞可能导致数据丢失、服务中断和对敏感信息的未经授权访问。
- en: In addition, application best practices can still apply in serverless architectures,
    software engineering practices such as code review and git branches, and security
    safety checks as input validation or sanitization to avoid SQL injection.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，应用程序最佳实践仍然适用于无服务器架构，如代码审查和git分支等软件工程实践，以及安全性安全检查，如输入验证或净化，以避免SQL注入。
- en: Summary
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned a few best practices and recommendations for building
    a secure serverless application based on Lambda functions. We covered how Amazon
    Cognito can be used as an authentication provider and how it can be integrated
    with API Gateway to secure API endpoints. Then, we looked at Lambda function code
    practices such as encrypting sensitive data using AWS KMS and input validation.
    Moreover, other practices can be useful and life saving, such as applying quotas
    and throttling to prevent a consumer from consuming all of your Lambda function
    capacity and use of one IAM role per function to leverage the principle of least
    privilege*.*
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了一些构建基于Lambda函数的安全无服务器应用程序的最佳实践和建议。我们介绍了Amazon Cognito如何作为身份验证提供程序，并如何与API
    Gateway集成以保护API端点。然后，我们看了Lambda函数代码实践，如使用AWS KMS加密敏感数据和输入验证。此外，其他实践也可能非常有用和救命，例如应用配额和节流以防止消费者消耗所有Lambda函数容量，以及每个函数使用一个IAM角色以利用最小特权原则。
- en: In the next chapter, we will discuss the Lambda pricing model and how to estimate
    pricing based on the expected load.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论Lambda定价模型以及如何根据预期负载估算价格。
- en: Questions
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Integrate a user in a user pool with an identity pool to allow users to log
    in with their Facebook account.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用户池中的用户与身份池集成，以允许用户使用其Facebook帐户登录。
- en: Integrate a user in a user pool with an identity pool to allow users to log
    in with their Twitter account.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用户池中的用户与身份池集成，以允许用户使用其Twitter帐户登录。
- en: Integrate a user in a user pool with an identity pool to allow users to log
    in with their Google account.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用户池中的用户与身份池集成，以允许用户使用其Google帐户登录。
- en: Implement a form to allow users to create an account on a web application so
    that they are able to log in.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个表单，允许用户在Web应用程序上创建帐户，以便他们能够登录。
- en: Implement a forgotten password flow for an unauthenticated user.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为未经身份验证的用户实现忘记密码流程。
