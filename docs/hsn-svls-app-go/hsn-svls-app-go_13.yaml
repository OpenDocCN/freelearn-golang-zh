- en: Designing Cost-Effective Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计成本效益的应用程序
- en: 'In this chapter, we will discuss the pricing model of AWS Lambda and learn
    how to estimate this pricing based on the expected load. We will also cover some
    tips to optimize and reduce your serverless application cost while maintaining
    resiliency and availability. We will cover the following topics in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论AWS Lambda的定价模型，并学习如何根据预期负载估算这个价格。我们还将介绍一些优化和降低无服务器应用成本的技巧，同时保持弹性和可用性。本章将涵盖以下主题：
- en: Lambda pricing model
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lambda定价模型
- en: Optimal memory size
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最佳内存大小
- en: Code optimization
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码优化
- en: Lambda cost and memory tracking
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lambda成本和内存跟踪
- en: Lambda pricing model
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lambda定价模型
- en: AWS Lambda shifted in the way Ops teams provision and manage their organization's infrastructure.
    Customers can now run their code without worrying about the underlying infrastructure
    while paying a low price. The first 1 million requests per month are free, and
    it's $0.20 per 1 million requests thereafter, so you might use Lambda's free tier
    indefinitely. However, intensive use cases and huge workload applications can
    unnecessarily cost you thousands of dollars if you don't pay extra attention to
    your function's resource usage and code optimization.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda改变了运维团队配置和管理组织基础设施的方式。客户现在可以在不担心底层基础设施的情况下运行他们的代码，同时支付低廉的价格。每月的前100万次请求是免费的，之后每100万次请求收费0.20美元，因此您可能会无限期地使用Lambda的免费套餐。然而，如果您不额外关注函数的资源使用和代码优化，密集的使用情况和大量的工作负载应用可能会不必要地花费您数千美元。
- en: 'In order to keep your Lambda costs under control, you must understand how the
    Lambda pricing model works. There are three factors that determine the cost of
    your function:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了控制Lambda成本，您必须了解Lambda定价模型的工作原理。有三个因素决定了函数的成本：
- en: '**Number of executions**: Number of invocations; you pay $0.0000002 per request.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**执行次数**：调用次数；每次请求支付0.0000002美元。'
- en: '**Allocated memory**: The amount of RAM provisioned for your function (ranges
    between 128 MB and 3,008 MB).'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分配的内存**：为函数分配的RAM量（范围在128 MB和3,008 MB之间）。'
- en: '**Execution time**: The duration is calculated from the time your code begins
    executing until it returns a response or otherwise terminates. The time is rounded
    up to the nearest 100 ms (Lambda is billed in 100 ms increments), and the maximum
    timeout you can set is 5 minutes.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**执行时间**：持续时间是从代码开始执行到返回响应或其他终止的时间。时间向最接近的100毫秒取整（Lambda按100毫秒的增量计费），并且您可以设置的最大超时时间为5分钟。'
- en: '**Data transfer**: If your Lambda function initiates external data transfers,
    they will be charged at the EC2 data transfer rate ([https://aws.amazon.com/ec2/pricing](https://aws.amazon.com/ec2/pricing)).'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据传输**：如果您的Lambda函数发起外部数据传输，将按照EC2数据传输速率收费（[https://aws.amazon.com/ec2/pricing](https://aws.amazon.com/ec2/pricing)）。'
- en: Lambda cost calculator
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lambda成本计算器
- en: Now that you're familiar with the pricing model, let's see how you can calculate
    the cost of your Lambda function in advance.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经熟悉了定价模型，让我们看看如何提前计算Lambda函数的成本。
- en: 'In the previous chapters, we allocated 128 MB of memory to the `FindAllMovies`
    function, and we set the execution timeout to be 3 seconds. Let''s suppose the
    function will be executed 10 times per second (25 million times in one month).
    Your charges would be calculated as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们为`FindAllMovies`函数分配了128 MB的内存，并将执行超时设置为3秒。假设函数每秒执行10次（一个月内执行2500万次）。您的费用将如下计算：
- en: '**Monthly compute charges**: The monthly compute price is $0.00001667 per GB/s
    and the free tier provides 400,000 GB/s. Total compute (seconds) = 25 M * (1s)
    = 25,000,000 seconds. Total compute (GB/s) = 25,000,000 * 128 MB/1,024 =3,125,000
    GB/s.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**每月计算费用**：每月计算价格为每GB/s 0.00001667美元，免费套餐提供400,000 GB/s。总计算（秒）=25百万*（1秒）=25,000,000秒。总计算（GB/s）=25,000,000*128
    MB/1,024=3,125,000 GB/s。'
- en: Total compute – Free tier compute = Monthly billable compute GB/s
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 总计算-免费套餐计算=每月应付费计算GB/s
- en: 3,125,000 GB/s – 400,000 free tier GB/s = 2,725,000 GB/s
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 3,125,000 GB/s - 400,000免费套餐GB/s = 2,725,000 GB/s
- en: Monthly compute charges = 2,725,000 GB/s * $0.00001667 = $45.42
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 每月计算费用=2,725,000 GB/s*$0.00001667=$45.42
- en: '**Monthly request charges**: The monthly request price is $0.20 per 1 million
    requests and the free tier provides 1 million requests per month.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**每月请求费用**：每月请求价格为每100万次请求0.20美元，免费套餐提供每月100万次请求。'
- en: Total requests – Free tier requests = Monthly billable requests
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 总请求次数-免费套餐请求=每月应付费请求
- en: 25 M requests – 1 M free tier requests = 24 M monthly billable requests
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 25百万次请求-1百万免费套餐请求=24百万次每月应付费请求
- en: Monthly request charges = 24 M * $0.2/M = $4.8
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 每月请求费用=24百万*$0.2/百万=$4.8
- en: 'Hence, the total monthly charges is the sum of the compute and request charges,
    as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，总月费用是计算和请求费用的总和，如下所示：
- en: Total charges = Compute charges + Request charges = $45.24 + $4.8 = $50.04
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 总费用=计算费用+请求费用=45.24美元+4.8美元=50.04美元
- en: Optimal memory size
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最佳内存大小
- en: 'As we saw in the previous section, the amount of allocated RAM impacts billing.
    Furthermore, it impacts the amount of CPU and network bandwidth your function
    receives. Hence, you need to choose the optimal memory size. In order to find
    the right balance and optimal level of price and performance for your function,
    you must test your Lambda function with different memory settings and analyze
    the actual memory used by your function. Fortunately, AWS Lambda writes a log
    entry in the associated log group. The logs contains, for each request, the amount
    of memory allocated and used by the function. The following is an example of a
    log output:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前一节中看到的，分配的RAM数量会影响计费。此外，它还会影响函数接收的CPU和网络带宽的数量。因此，您需要选择最佳的内存大小。为了找到函数的价格和性能的正确平衡和最佳水平，您必须使用不同的内存设置测试您的Lambda函数，并分析函数实际使用的内存。幸运的是，AWS
    Lambda会在关联的日志组中写入日志条目。日志包含每个请求的函数分配和使用的内存量。以下是日志输出的示例：
- en: '![](img/1b845000-05a4-4f9e-a8c3-3ecd17d8b512.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b845000-05a4-4f9e-a8c3-3ecd17d8b512.png)'
- en: 'By comparing the Memory Size and Max Memory Used fields, you can determine
    whether your function needs more memory or if you over-provisioned your function''s
    memory size. In case your function needs more memory, you can always give it more
    memory from the Basic settings section, as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通过比较内存大小和最大内存使用字段，您可以确定您的函数是否需要更多内存，或者您是否过度配置了函数的内存大小。如果您的函数需要更多内存，您可以随时从“基本设置”部分为其提供更多内存，具体如下：
- en: '![](img/bdbb004a-7775-4eea-ad7a-21666e517aa3.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bdbb004a-7775-4eea-ad7a-21666e517aa3.png)'
- en: 'Click on Save and then invoke the function once again. In the log''s output,
    you will notice that the memory size impacts the execution time:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“保存”，然后再次调用函数。在日志输出中，您会注意到内存大小会影响执行时间：
- en: '![](img/d5662e8d-fb13-47ff-b4c9-0ebdbfdf92d7.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d5662e8d-fb13-47ff-b4c9-0ebdbfdf92d7.png)'
- en: While increasing the function memory settings will provide substantial performance
    gains. The cost will increase linearly as the memory settings increase in Lambda.
    Similarly, decreasing the function memory setting might help reduce costs, but
    this will also increase your execution time, and, in the worst case scenario,
    lead to timeouts or memory exceeded errors.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 增加函数内存设置将提供显著的性能提升。随着 Lambda 中内存设置的增加，成本将线性增加。同样，减少函数内存设置可能有助于降低成本，但这也会增加执行时间，并且在最坏的情况下可能导致超时或内存超限错误。
- en: Provisioning the smallest memory settings to your Lambda function won't always
    provide the lowest total cost. The function will fail and timeout due to insufficient
    memory. Also, it might take longer time to complete. By consequence, you will
    pay more.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 将最小内存设置分配给 Lambda 函数并不总是会提供最低总成本。由于内存不足，函数可能会失败和超时。此外，完成所需的时间可能会更长。因此，您将支付更多费用。
- en: Code optimization
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码优化
- en: In the previous section, we saw how testing your function at scale with different
    memory settings results in more CPU capacity allocated, which could impact your
    Lambda function's performance and cost. However, before optimizing the resource
    usage, you need to optimize your function's code first to help reduce the amount
    of memory and CPU it needs in order to be executed. Contrary to traditional applications,
    AWS Lambda manages and patches the infrastructure for you, which allows developers
    to focus on writing good quality, efficient, and world-class code that executes
    fast.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们看到了如何使用不同的内存设置在规模上测试函数会导致分配更多的 CPU 容量，这可能会影响 Lambda 函数的性能和成本。然而，在优化资源使用之前，您需要先优化函数的代码，以帮助减少需要执行的内存和
    CPU 的数量。与传统应用程序相反，AWS Lambda 会为您管理和修补基础架构，这使开发人员可以专注于编写高质量、高效和世界级的代码，以便快速执行。
- en: Allocating more resources to your function can result in faster executions until
    a certain threshold, where adding more memory will no longer provide better performance.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为函数分配更多资源可能会导致更快的执行，直到达到一定阈值，增加更多内存将不再提供更好的性能。
- en: 'The following are some points you should keep in mind when designing your function
    with AWS Lambda in a cost-effective manner:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 设计 AWS Lambda 函数时，要考虑以下几点，以便以成本效益的方式进行设计：
- en: 'Warm containers can be used for certain requests. Having this knowledge in
    mind, we can improve the Lambda function''s performance by implementing the following:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于某些请求，可以使用热容器。有了这些知识，我们可以通过实施以下操作来改善 Lambda 函数的性能：
- en: Avoid the reinitialization of variables on every invocation by using global
    variables and the singleton pattern.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用全局变量和单例模式，避免在每次调用时重新初始化变量。
- en: Keep alive and reuse databases and HTTP connections that were established during
    a previous invocation. In Go, you can use the `init` function to set up the required
    state and run one-time computations when your function handler is loaded.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持数据库和 HTTP 连接的活动状态并重复使用，这些连接是在先前的调用期间建立的。在 Go 中，您可以使用 `init` 函数来设置所需的状态，并在加载函数处理程序时运行一次性计算。
- en: Design your architecture to be asynchronous; a decoupled component might take
    less compute time to finish its work than a tightly coupled component. Also, avoid
    spending CPU cycles awaiting responses to synchronous requests.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计您的架构为异步；解耦的组件可能需要更少的计算时间来完成其工作，而不是紧密耦合的组件。此外，避免花费 CPU 周期等待同步请求的响应。
- en: Use monitoring and debugging tools like AWS X-Ray to analyze and troubleshoot performance
    bottlenecks, latency spikes, and other issues that impact the performance of your
    Lambda application.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用监控和调试工具，如 AWS X-Ray，分析和排除性能瓶颈、延迟峰值和其他影响 Lambda 应用性能的问题。
- en: Set limits using concurrency reservation to prevent unlimited autoscaling, cold
    starts, and to protect your downstream services. You can also throttle and limit
    the number of executions by placing a **Simple Queue Service** (**SQS**) between
    the Lambda trigger and the function to adjust how frequently your Lambda function
    should be triggered.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用并发预留来设置限制，以防止无限自动缩放、冷启动，并保护下游服务。您还可以通过在 Lambda 触发器和函数之间放置 **简单队列服务**（SQS）来限制执行次数，调整
    Lambda 函数触发的频率。
- en: Lambda cost and memory tracking
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lambda 成本和内存跟踪
- en: 'The key behind designing cost-effective serverless applications in AWS Lambda
    is by monitoring your cost and resource usage. Unfortunately, CloudWatch doesn''t
    provide out of the box metrics about the resource usage or the Lambda function
    cost. Luckily, for each execution, the Lambda function writes an execution log
    to CloudWatch that looks like the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AWS Lambda 中设计成本效益的无服务器应用的关键在于监控成本和资源使用情况。不幸的是，CloudWatch 并未提供有关资源使用或 Lambda
    函数成本的开箱即用指标。幸运的是，对于每次执行，Lambda 函数都会将执行日志写入 CloudWatch，如下所示：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding log shows the memory that's allocated and used for a given request.
    Those values can be extracted with a simple CloudWatch log metric filter. This
    feature enables you to search for specific keywords in your logs.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的日志显示了给定请求分配和使用的内存。这些值可以通过简单的 CloudWatch 日志指标过滤器提取。此功能使您能够在日志中搜索特定关键字。
- en: 'Open the AWS CloudWatch console and select Log Groups from the navigation pane.
    Next, search for the log group associated with your Lambda function. It should
    be named as follows: `/aws/lambda/FUNCTION_NAME`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 打开AWS CloudWatch控制台，并从导航窗格中选择“日志组”。接下来，搜索与您的Lambda函数关联的日志组。它的名称应该是：`/aws/lambda/FUNCTION_NAME`：
- en: '![](img/8b313ac1-baaa-4996-94f5-ea1ac1f5704e.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8b313ac1-baaa-4996-94f5-ea1ac1f5704e.png)'
- en: 'Next, click on the Create Metric Filter button:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，点击“创建度量过滤器”按钮：
- en: '![](img/72633fb3-bd3c-49aa-873c-703c1beeabb4.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/72633fb3-bd3c-49aa-873c-703c1beeabb4.png)'
- en: 'Define a metric filter pattern that parses space-delimited terms. The metric
    filter pattern has to specify the fields with a name, separated by commas, with
    the entire pattern enclosed in square brackets, for example, `[a,b,c]`. Then,
    click on Test Pattern to test the results of your filter pattern against the existing
    data in the logs. The following records will be printed:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个度量过滤器模式，解析以空格分隔的术语。度量过滤器模式必须指定以逗号分隔的名称字段，并用方括号括起整个模式，例如`[a,b,c]`。然后，点击“测试模式”以测试您的过滤器模式对日志中现有数据的结果。将打印以下记录：
- en: '![](img/6688061e-2169-4bd6-bea3-63ae62585a04.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6688061e-2169-4bd6-bea3-63ae62585a04.png)'
- en: 'If you don''t know the number of fields that you have, you can use an ellipsis
    enclosed in square brackets:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不知道自己有多少字段，可以使用方括号括起来的省略号：
- en: '![](img/e7294961-4c0c-4ea7-bffa-a8b4f0677295.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e7294961-4c0c-4ea7-bffa-a8b4f0677295.png)'
- en: 'Column `$13` will be storing the memory allocated to the function and `$18`
    represents the actual memory used. Next, click on Assign Metric to create a metric
    for the memory that''s been allocated:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 列`$13`将存储分配给函数的内存，`$18`表示实际使用的内存。接下来，点击“分配度量”以创建已分配内存的度量：
- en: '![](img/5e0d8104-b632-4f28-bc4f-5e7f8dc59dd7.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e0d8104-b632-4f28-bc4f-5e7f8dc59dd7.png)'
- en: 'Click on the Create Filter button to save it. You should now see the newly
    created filter:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“创建过滤器”按钮保存。您现在应该看到新创建的过滤器：
- en: '![](img/d0585e8c-c28b-4ae7-97e6-aa7019760560.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d0585e8c-c28b-4ae7-97e6-aa7019760560.png)'
- en: 'Apply the same steps to create another filter for the memory usage:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 应用相同的步骤为内存使用创建另一个过滤器：
- en: '![](img/2611714f-cc6d-4e29-906a-2dfe92ab57ed.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2611714f-cc6d-4e29-906a-2dfe92ab57ed.png)'
- en: 'Once the two filters are defined, make sure your Lambda function is running
    and wait a few seconds while the function is populating the new CloudWatch metrics
    with some values:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定义了两个过滤器，请确保您的Lambda函数正在运行，并在函数填充新的CloudWatch指标值时等待几秒钟：
- en: '![](img/f83d8de0-1321-49f5-9792-2b5a75a4041c.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f83d8de0-1321-49f5-9792-2b5a75a4041c.png)'
- en: 'Back in CloudWatch, create a new chart based on the two metrics that we created
    previously:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 回到CloudWatch，在我们之前创建的两个度量标准的基础上创建一个新的图表：
- en: '![](img/ab2a597f-8820-46e2-a0f7-830434ab4c0c.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab2a597f-8820-46e2-a0f7-830434ab4c0c.png)'
- en: You can take this further and create a near real-time CloudWatch alarm if the
    memory used exceeds a certain threshold (for instance, 80% relative to the memory
    that you allocated). Moreover, it's important to keep an eye on the function's
    duration. You can follow the same procedure that was described in this section
    to extract the billed duration from Lambda execution logs and set up an alarm
    based on the extracted value so that you're notified if your function is taking
    a suspiciously long time to complete.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以进一步进行，并创建一个几乎实时的CloudWatch警报，如果内存使用量超过某个阈值（例如，相对于您分配的内存的80%）。此外，重要的是要关注函数的持续时间。您可以按照本节中描述的相同过程从Lambda执行日志中提取计费持续时间，并根据提取的值设置警报，以便在函数完成所需时间可疑地长时收到通知。
- en: Summary
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Getting started with AWS Lambda is easy – you don't have to provision and manage
    any underlying infrastructure and it's very cheap to get something useful up and
    running in a few seconds. Plus, a great advantage of AWS Lambda over EC2 is that
    you don't have to pay for idle resources. This is extremely powerful, but it's
    also one of Lambda's biggest risks. It's very common to forget about cost during
    development, but once you start running heavy workloads and multiple functions
    in production, cost can be significant. Hence, it's very important to keep track
    of Lambda cost and usage before this becomes an issue.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用AWS Lambda非常简单-您不必预配和管理任何基础设施，并且在几秒钟内就可以轻松运行一些有用的东西。此外，AWS Lambda相对于EC2的一个巨大优势是您不必为闲置资源付费。这非常强大，但也是Lambda最大的风险之一。在开发过程中忘记成本是非常常见的，但一旦您开始在生产中运行大量工作负载和多个函数，成本可能会很高。因此，在这成为问题之前，跟踪Lambda成本和使用情况非常重要。
- en: The final chapter will introduce the concept of **Infrastructure as Code** (**IaC**)
    to help you design and deploy your N-tier serverless application in an automated
    way, in order to avoid human errors and repeatable tasks.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一章将介绍**基础设施即代码**（IaC）的概念，以帮助您以自动化的方式设计和部署N层无服务器应用程序，以避免人为错误和可重复的任务。
