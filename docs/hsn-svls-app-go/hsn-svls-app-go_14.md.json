["```go\npackage main\n\nimport \"github.com/aws/aws-lambda-go/lambda\"\n\nfunc handler() (string, error) {\n  return \"First Lambda function with Terraform\", nil\n}\nfunc main() {\n  lambda.Start(handler)\n}\n```", "```go\nGOOS=linux go build -o main main.go\nzip deployment.zip main\n```", "```go\nprovider \"aws\" {\n  region = \"us-east-1\"\n}\n\nresource \"aws_iam_role\" \"role\" {\n  name = \"PushCloudWatchLogsRole\"\n  assume_role_policy = \"${file(\"assume-role-policy.json\")}\"\n}\n\nresource \"aws_iam_policy\" \"policy\" {\n  name = \"PushCloudWatchLogsPolicy\"\n  policy = \"${file(\"policy.json\")}\"\n}\n\nresource \"aws_iam_policy_attachment\" \"profile\" {\n  name = \"cloudwatch-lambda-attachment\"\n  roles = [\"${aws_iam_role.role.name}\"]\n  policy_arn = \"${aws_iam_policy.policy.arn}\"\n}\n\nresource \"aws_lambda_function\" \"demo\" {\n  filename = \"function/deployment.zip\"\n  function_name = \"HelloWorld\"\n  role = \"${aws_iam_role.role.arn}\"\n  handler = \"main\"\n  runtime = \"go1.x\"\n}\n```", "```go\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"lambda.amazonaws.com\"\n      },\n      \"Effect\": \"Allow\",\n      \"Sid\": \"\"\n    }\n  ]\n}\n```", "```go\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"1\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"logs:CreateLogStream\",\n        \"logs:CreateLogGroup\",\n        \"logs:PutLogEvents\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n```", "```go\nterraform apply\n```", "```go\nvariable \"aws_region\" {\n  default = \"us-east-1\"\n  description = \"AWS region\"\n}\n\nvariable \"lambda_function_name\" {\n  default = \"DemoFunction\"\n  description = \"Lambda function's name\"\n}\n```", "```go\nprovider \"aws\" {\n  region = \"${var.aws_region}\"\n}\n\nresource \"aws_lambda_function\" \"demo\" {\n  filename = \"function/deployment.zip\"\n  function_name = \"${var.lambda_function_name}\"\n  role = \"${aws_iam_role.role.arn}\"\n  handler = \"main\"\n  runtime = \"go1.x\"\n}\n```", "```go\nresource \"aws_iam_role\" \"role\" {\n name = \"FindAllMoviesRole\"\n assume_role_policy = \"${file(\"assume-role-policy.json\")}\"\n}\n\nresource \"aws_iam_policy\" \"cloudwatch_policy\" {\n name = \"PushCloudWatchLogsPolicy\"\n policy = \"${file(\"cloudwatch-policy.json\")}\"\n}\n\nresource \"aws_iam_policy\" \"dynamodb_policy\" {\n name = \"ScanDynamoDBPolicy\"\n policy = \"${file(\"dynamodb-policy.json\")}\"\n}\n\nresource \"aws_iam_policy_attachment\" \"cloudwatch-attachment\" {\n name = \"cloudwatch-lambda-attchment\"\n roles = [\"${aws_iam_role.role.name}\"]\n policy_arn = \"${aws_iam_policy.cloudwatch_policy.arn}\"\n}\n\nresource \"aws_iam_policy_attachment\" \"dynamodb-attachment\" {\n name = \"dynamodb-lambda-attchment\"\n roles = [\"${aws_iam_role.role.name}\"]\n policy_arn = \"${aws_iam_policy.dynamodb_policy.arn}\"\n}\n```", "```go\nresource \"aws_lambda_function\" \"findall\" {\n  function_name = \"FindAllMovies\"\n  handler = \"main\"\n  filename = \"function/deployment.zip\"\n  runtime = \"go1.x\"\n  role = \"${aws_iam_role.role.arn}\"\n\n  environment {\n    variables {\n      TABLE_NAME = \"movies\"\n    }\n  }\n}\n```", "```go\nresource \"aws_dynamodb_table\" \"movies\" {\n  name = \"movies\"\n  read_capacity = 5\n  write_capacity = 5\n  hash_key = \"ID\"\n\n  attribute {\n      name = \"ID\"\n      type = \"S\"\n  }\n}\n```", "```go\nresource \"aws_dynamodb_table_item\" \"items\" {\n  table_name = \"${aws_dynamodb_table.movies.name}\"\n  hash_key = \"${aws_dynamodb_table.movies.hash_key}\"\n  item = \"${file(\"movie.json\")}\"\n}\n```", "```go\n{\n  \"ID\": {\"S\": \"1\"},\n  \"Name\": {\"S\": \"Ant-Man and the Wasp\"},\n  \"Description\": {\"S\": \"A Marvel's movie\"},\n  \"Cover\": {\"S\": http://COVER_URL.jpg\"}\n}\n```", "```go\nresource \"aws_api_gateway_rest_api\" \"api\" {\n  name = \"MoviesAPI\"\n}\n\nresource \"aws_api_gateway_resource\" \"proxy\" {\n  rest_api_id = \"${aws_api_gateway_rest_api.api.id}\"\n  parent_id = \"${aws_api_gateway_rest_api.api.root_resource_id}\"\n  path_part = \"movies\"\n}\n\nresource \"aws_api_gateway_method\" \"proxy\" {\n  rest_api_id = \"${aws_api_gateway_rest_api.api.id}\"\n  resource_id = \"${aws_api_gateway_resource.proxy.id}\"\n  http_method = \"GET\"\n  authorization = \"NONE\"\n}\n\nresource \"aws_api_gateway_integration\" \"lambda\" {\n  rest_api_id = \"${aws_api_gateway_rest_api.api.id}\"\n  resource_id = \"${aws_api_gateway_method.proxy.resource_id}\"\n  http_method = \"${aws_api_gateway_method.proxy.http_method}\"\n\n  integration_http_method = \"POST\"\n  type = \"AWS_PROXY\"\n  uri = \"${aws_lambda_function.findall.invoke_arn}\"\n}\n```", "```go\nterraform init\nterraform plan\nterraform apply\n```", "```go\nresource \"aws_api_gateway_deployment\" \"staging\" {\n  depends_on = [\"aws_api_gateway_integration.lambda\"]\n\n  rest_api_id = \"${aws_api_gateway_rest_api.api.id}\"\n  stage_name = \"staging\"\n}\n```", "```go\noutput \"API Invocation URL\" {\n  value = \"${aws_api_gateway_deployment.staging.invoke_url}\"\n}\n```", "```go\nresource \"aws_lambda_permission\" \"apigw\" {\n  statement_id = \"AllowAPIGatewayInvoke\"\n  action = \"lambda:InvokeFunction\"\n  function_name = \"${aws_lambda_function.findall.arn}\"\n  principal = \"apigateway.amazonaws.com\"\n\n  source_arn = \"${aws_api_gateway_deployment.staging.execution_arn}/*/*\"\n}\n```", "```go\nAWSTemplateFormatVersion: \"2010-09-09\"\nDescription: \"Simple Lambda Function\"\nParameters:\n  FunctionName:\n    Description: \"Function name\"\n    Type: \"String\"\n    Default: \"HelloWorld\"\n  BucketName:\n    Description: \"S3 Bucket name\"\n    Type: \"String\"\nResources:\n  ExecutionRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"lambda.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      Policies:\n        - PolicyName: \"PushCloudWatchLogsPolicy\"\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              - Effect: \"Allow\"\n              - Action:\n                - logs:CreateLogGroup\n                - logs:CreateLogStream\n                - logs:PutLogEvents\n              - Resource: \"*\"\n  HelloWorldFunction:\n    Type: \"AWS::Lambda::Function\"\n    Properties:\n      Code:\n        S3Bucket: !Ref BucketName\n        S3Key: deployment.zip\n      FunctionName: !Ref FunctionName\n      Handler: \"main\"\n      Runtime: \"go1.x\"\n      Role: !GetAtt ExecutionRole.Arn\n```", "```go\naws s3 mb s3://hands-on-serverless-go-packt/\nGOOS=linux go build -o main main.go\nzip deployment.zip main\naws s3 cp deployment.zip s3://hands-on-serverless-go-packt/\n```", "```go\nAWSTemplateFormatVersion: \"2010-09-09\"\nDescription: \"Simple Lambda Function\"\nParameters:\n  FunctionName:\n    Description: \"Function name\"\n    Type: \"String\"\n    Default: \"HelloWorld\"\n  BucketName:\n    Description: \"S3 Bucket name\"\n    Type: \"String\"\n  TableName:\n    Description: \"DynamoDB Table Name\"\n    Type: \"String\"\n    Default: \"movies\"\nResources:\n  ExecutionRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - \n            Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"lambda.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      Policies:\n        - \n          PolicyName: \"PushCloudWatchLogsPolicy\"\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              - Effect: Allow\n                Action:\n                - logs:CreateLogGroup\n                - logs:CreateLogStream\n                - logs:PutLogEvents\n                Resource: \"*\"\n        - \n          PolicyName: \"ScanDynamoDBTablePolicy\"\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              - Effect: Allow\n                Action:\n                - dynamodb:Scan\n                Resource: \"*\"\n  HelloWorldFunction:\n    Type: \"AWS::Lambda::Function\"\n    Properties:\n      Code:\n        S3Bucket: !Ref BucketName\n        S3Key: deployment.zip\n      FunctionName: !Ref FunctionName\n      Handler: \"main\"\n      Runtime: \"go1.x\"\n      Role: !GetAtt ExecutionRole.Arn\n      Environment:\n        Variables:\n          TABLE_NAME: !Ref TableName\n  DynamoDBTable:\n    Type: \"AWS::DynamoDB::Table\"\n    Properties:\n      TableName: !Ref TableName\n      AttributeDefinitions:\n        -\n          AttributeName: \"ID\"\n          AttributeType: \"S\"\n      KeySchema:\n        -\n          AttributeName: \"ID\"\n          KeyType: \"HASH\"\n      ProvisionedThroughput:\n        ReadCapacityUnits: 5\n        WriteCapacityUnits: 5\n```", "```go\naws cloudformation create-stack --stack-name=SimpleLambdaFunction \\\n --template-body=file://template.yml \\\n --capabilities CAPABILITY_IAM \\\n --parameters ParameterKey=BucketName,ParameterValue=hands-on-serverless-go-packt \n ParameterKey=FunctionName,ParameterValue=HelloWorld \\\n ParameterKey=TableName,ParameterValue=movies\n```", "```go\nsam init --name api --runtime go1.x\n```", "```go\n// Movie entity\ntype Movie struct {\n  ID string `json:\"id\"`\n  Name string `json:\"name\"`\n  Cover string `json:\"cover\"`\n  Description string `json:\"description\"`\n}\n\nfunc findAll() (events.APIGatewayProxyResponse, error) {\n  ...\n  svc := dynamodb.New(cfg)\n  req := svc.ScanRequest(&dynamodb.ScanInput{\n    TableName: aws.String(os.Getenv(\"TABLE_NAME\")),\n  })\n  res, err := req.Send()\n  if err != nil {\n    return events.APIGatewayProxyResponse{\n      StatusCode: http.StatusInternalServerError,\n      Body: \"Error while scanning DynamoDB\",\n    }, nil\n  }\n\n  movies := make([]Movie, 0)\n  for _, item := range res.Items {\n    movies = append(movies, Movie{\n      ID: *item[\"ID\"].S,\n      Name: *item[\"Name\"].S,\n      Cover: *item[\"Cover\"].S,\n      Description: *item[\"Description\"].S,\n    })\n  }\n  ...\n  return events.APIGatewayProxyResponse{\n    StatusCode: 200,\n    Headers: map[string]string{\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n    },\n    Body: string(response),\n  }, nil\n}\n\nfunc main() {\n  lambda.Start(findAll)\n}\n```", "```go\nAWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::serverless-2016-10-31\nResources:\n  FindAllFunction:\n    Type: AWS::serverless::Function\n    Properties:\n      Handler: main\n      Runtime: go1.x\n      Policies: AmazonDynamoDBFullAccess \n      Environment:\n        Variables: \n          TABLE_NAME: !Ref MoviesTable\n  MoviesTable: \n     Type: AWS::serverless::SimpleTable\n     Properties:\n       PrimaryKey:\n         Name: ID\n         Type: String\n       ProvisionedThroughput:\n         ReadCapacityUnits: 5\n         WriteCapacityUnits: 5\n```", "```go\nsam package --template-file template.yaml --output-template-file serverless.yaml \\\n    --s3-bucket hands-on-serverless-go-packt\n```", "```go\nAWSTemplateFormatVersion: '2010-09-09'\nResources:\n  FindAllFunction:\n    Properties:\n      CodeUri: s3://hands-on-serverless-go-packt/764cf76832f79ca7f29c6397fe7ccd91\n      Environment:\n        Variables:\n          TABLE_NAME:\n            Ref: MoviesTable\n      Handler: main\n      Policies: AmazonDynamoDBFullAccess\n      Runtime: go1.x\n    Type: AWS::serverless::Function\n  MoviesTable:\n    Properties:\n      PrimaryKey:\n        Name: ID\n        Type: String\n      ProvisionedThroughput:\n        ReadCapacityUnits: 5\n        WriteCapacityUnits: 5\n    Type: AWS::serverless::SimpleTable\nTransform: AWS::serverless-2016-10-31\n```", "```go\nsam deploy --template-file serverless.yaml --stack-name APIStack \\\n --capabilities CAPABILITY_IAM\n\n```", "```go\nAWSTemplateFormatVersion: '2010-09-09'\nTransform: 'AWS::serverless-2016-10-31'\nDescription: An AWS serverless Specification template describing your function.\nResources:\n  FindAllMovies:\n    Type: 'AWS::serverless::Function'\n    Properties:\n      Handler: main\n      Runtime: go1.x\n      CodeUri: .\n      Description: ''\n      MemorySize: 128\n      Timeout: 3\n      Role: 'arn:aws:iam::ACCOUNT_ID:role/FindAllMoviesRole'\n      Events:\n        Api1:\n          Type: Api\n          Properties:\n            Path: /MyResource\n            Method: ANY\n        Api2:\n          Type: Api\n          Properties:\n            Path: /movies\n            Method: GET\n      Environment:\n        Variables:\n          TABLE_NAME: movies\n      Tracing: Active\n      ReservedConcurrentExecutions: 10\n```"]