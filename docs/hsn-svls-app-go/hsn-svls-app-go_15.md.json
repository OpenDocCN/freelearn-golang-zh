["```go\naws iam create-role ROLE_NAME --assume-role-policy-document file://assume-role-lambda.json\n```", "```go\n{  \n \"Version\":\"2012-10-17\",\n \"Statement\":[  \n  {  \n  \"Effect\":\"Allow\",\n  \"Principal\":{  \n   \"AWS\":\"*\"\n  },\n  \"Action\":\"sts:AssumeRole\"\n  }\n ]\n} \n```", "```go\naws s3 mb s3://BUCKET_NAME --region us-east-1\n```", "```go\naws s3 cp deployment.zip s3://BUCKET_NAME --region us-east-1\n```", "```go\nfunc update(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {\n  var movie Movie\n  err := json.Unmarshal([]byte(request.Body), &movie)\n  if err != nil {\n    return events.APIGatewayProxyResponse{\n      StatusCode: 400,\n      Body: \"Invalid payload\",\n    }, nil\n  }\n\n  ...\n\n  svc := dynamodb.New(cfg)\n  req := svc.PutItemRequest(&dynamodb.PutItemInput{\n    TableName: aws.String(os.Getenv(\"TABLE_NAME\")),\n    Item: map[string]dynamodb.AttributeValue{\n      \"ID\": dynamodb.AttributeValue{\n        S: aws.String(movie.ID),\n      },\n      \"Name\": dynamodb.AttributeValue{\n        S: aws.String(movie.Name),\n      },\n    },\n  })\n  _, err = req.Send()\n  if err != nil {\n    return events.APIGatewayProxyResponse{\n      StatusCode: http.StatusInternalServerError,\n      Body: \"Error while updating the movie\",\n    }, nil\n  }\n\n  response, err := json.Marshal(movie)\n  ...\n\n  return events.APIGatewayProxyResponse{\n    StatusCode: 200,\n    Body: string(response),\n    Headers: map[string]string{\n      \"Content-Type\": \"application/json\",\n    },\n  }, nil\n}\n\n```", "```go\nfunc handler(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {\n switch request.HTTPMethod {\n case http.MethodGet:\n // get all movies handler\n break\n case http.MethodPost:\n // insert movie handler\n break\n case http.MethodDelete:\n // delete movie handler\n break\n case http.MethodPut:\n // update movie handler\n break\n default:\n return events.APIGatewayProxyResponse{\n StatusCode: http.StatusMethodNotAllowed,\n Body: \"Unsupported HTTP method\",\n }, nil\n }\n}\n```", "```go\ndynamodbClient := dynamodb.New(cfg)\nreq := dynamodbClient.ScanRequest(&dynamodb.ScanInput{\n    TableName: aws.String(os.Getenv(\"TABLE_NAME\")),\n    Limit: aws.Int64(int64(size)),\n})\n```", "```go\nsize, err := strconv.Atoi(request.Headers[\"Size\"])\n```", "```go\nversion: 0.2\nenv:\n  variables:\n    S3_BUCKET: \"movies-api-deployment-packages\"\n    PACKAGE: \"github.com/mlabouardy/lambda-codepipeline\"\n\nphases:\n  install:\n    commands:\n      - mkdir -p \"/go/src/$(dirname ${PACKAGE})\"\n      - ln -s \"${CODEBUILD_SRC_DIR}\" \"/go/src/${PACKAGE}\"\n      - go get -u github.com/golang/lint/golint\n\n  pre_build:\n    commands:\n      - cd \"/go/src/${PACKAGE}\"\n      - go get -t ./...\n      - golint -set_exit_status\n      - go vet .\n      - go test .\n\n  build:\n    commands:\n      - GOOS=linux go build -o main\n      - zip $CODEBUILD_RESOLVED_SOURCE_VERSION.zip main\n      - aws s3 cp $CODEBUILD_RESOLVED_SOURCE_VERSION.zip s3://$S3_BUCKET/\n\n  post_build:\n    commands:\n      - aws lambda update-function-code --function-name FindAllMovies --s3-bucket $S3_BUCKET --s3-key $CODEBUILD_RESOLVED_SOURCE_VERSION.zip\n```", "```go\nversion: 0.2\nenv:\n  variables:\n    S3_BUCKET: \"movies-api-deployment-packages\"\n    PACKAGE: \"github.com/mlabouardy/lambda-codepipeline\"\n\nphases:\n  install:\n    commands:\n      - mkdir -p \"/go/src/$(dirname ${PACKAGE})\"\n      - ln -s \"${CODEBUILD_SRC_DIR}\" \"/go/src/${PACKAGE}\"\n      - go get -u github.com/golang/lint/golint\n\n  pre_build:\n    commands:\n      - cd \"/go/src/${PACKAGE}\"\n      - go get -t ./...\n      - golint -set_exit_status\n      - go vet .\n      - go test .\n\n  build:\n    commands:\n      - GOOS=linux go build -o main\n      - zip $CODEBUILD_RESOLVED_SOURCE_VERSION.zip main\n      - aws s3 cp $CODEBUILD_RESOLVED_SOURCE_VERSION.zip s3://$S3_BUCKET/\n\n  post_build:\n    commands:\n      - aws lambda update-function-code --function-name InsertMovie --s3-bucket $S3_BUCKET --s3-key $CODEBUILD_RESOLVED_SOURCE_VERSION.zip\n```", "```go\nversion: 0.2\nenv:\n  variables:\n    S3_BUCKET: \"movies-api-deployment-packages\"\n    PACKAGE: \"github.com/mlabouardy/lambda-codepipeline\"\n\nphases:\n  install:\n    commands:\n      - mkdir -p \"/go/src/$(dirname ${PACKAGE})\"\n      - ln -s \"${CODEBUILD_SRC_DIR}\" \"/go/src/${PACKAGE}\"\n      - go get -u github.com/golang/lint/golint\n\n  pre_build:\n    commands:\n      - cd \"/go/src/${PACKAGE}\"\n      - go get -t ./...\n      - golint -set_exit_status\n      - go vet .\n      - go test .\n\n  build:\n    commands:\n      - GOOS=linux go build -o main\n      - zip $CODEBUILD_RESOLVED_SOURCE_VERSION.zip main\n      - aws s3 cp $CODEBUILD_RESOLVED_SOURCE_VERSION.zip s3://$S3_BUCKET/\n\n  post_build:\n    commands:\n      - aws lambda update-function-code --function-name UpdateMovie --s3-bucket $S3_BUCKET --s3-key $CODEBUILD_RESOLVED_SOURCE_VERSION.zip\n```", "```go\nversion: 0.2\nenv:\n  variables:\n    S3_BUCKET: \"movies-api-deployment-packages\"\n    PACKAGE: \"github.com/mlabouardy/lambda-codepipeline\"\n\nphases:\n  install:\n    commands:\n      - mkdir -p \"/go/src/$(dirname ${PACKAGE})\"\n      - ln -s \"${CODEBUILD_SRC_DIR}\" \"/go/src/${PACKAGE}\"\n      - go get -u github.com/golang/lint/golint\n\n  pre_build:\n    commands:\n      - cd \"/go/src/${PACKAGE}\"\n      - go get -t ./...\n      - golint -set_exit_status\n      - go vet .\n      - go test .\n\n  build:\n    commands:\n      - GOOS=linux go build -o main\n      - zip $CODEBUILD_RESOLVED_SOURCE_VERSION.zip main\n      - aws s3 cp $CODEBUILD_RESOLVED_SOURCE_VERSION.zip s3://$S3_BUCKET/\n\n  post_build:\n    commands:\n      - aws lambda update-function-code --function-name DeleteMovie --s3-bucket $S3_BUCKET --s3-key $CODEBUILD_RESOLVED_SOURCE_VERSION.zip\n```", "```go\ndef bucket = 'movies-api-deployment-packages'\n\nnode('slave-golang'){\n    stage('Checkout'){\n        checkout scm\n        sh 'go get -u github.com/golang/lint/golint'\n        sh 'go get -t ./...'\n    }\n\n    stage('Test'){\n        parallel {\n            stage('FindAllMovies') {\n                sh 'cd findAll'\n                sh 'golint -set_exit_status'\n                sh 'go vet .'\n                sh 'go test .'\n            }\n            stage('DeleteMovie') {\n                sh 'cd delete'\n                sh 'golint -set_exit_status'\n                sh 'go vet .'\n                sh 'go test .'\n            }\n            stage('UpdateMovie') {\n                sh 'cd update'\n                sh 'golint -set_exit_status'\n                sh 'go vet .'\n                sh 'go test .'\n            }\n            stage('InsertMovie') {\n                sh 'cd insert'\n                sh 'golint -set_exit_status'\n                sh 'go vet .'\n                sh 'go test .'\n            }\n        }\n    }\n\n    stage('Build'){\n        parallel {\n            stage('FindAllMovies') {\n                sh 'cd findAll'\n                sh 'GOOS=linux go build -o main main.go'\n                sh \"zip findAll-${commitID()}.zip main\"\n            }\n            stage('DeleteMovie') {\n                sh 'cd delete'\n                sh 'GOOS=linux go build -o main main.go'\n                sh \"zip delete-${commitID()}.zip main\"\n            }\n            stage('UpdateMovie') {\n                sh 'cd update'\n                sh 'GOOS=linux go build -o main main.go'\n                sh \"zip update-${commitID()}.zip main\"\n            }\n            stage('InsertMovie') {\n                sh 'cd insert'\n                sh 'GOOS=linux go build -o main main.go'\n                sh \"zip insert-${commitID()}.zip main\"\n            }\n        }\n    }\n\n    stage('Push'){\n        parallel {\n            stage('FindAllMovies') {\n                sh 'cd findAll'\n                sh \"aws s3 cp findAll-${commitID()}.zip s3://${bucket}\"\n            }\n            stage('DeleteMovie') {\n                sh 'cd delete'\n                sh \"aws s3 cp delete-${commitID()}.zip s3://${bucket}\"\n            }\n            stage('UpdateMovie') {\n                sh 'cd update'\n                sh \"aws s3 cp update-${commitID()}.zip s3://${bucket}\"\n            }\n            stage('InsertMovie') {\n                sh 'cd insert'\n                sh \"aws s3 cp insert-${commitID()}.zip s3://${bucket}\"\n            }\n        }\n    }\n\n    stage('Deploy'){\n        parallel {\n            stage('FindAllMovies') {\n                sh 'cd findAll'\n                sh \"aws lambda update-function-code --function-name FindAllMovies \\\n                --s3-bucket ${bucket} \\\n                --s3-key findAll-${commitID()}.zip \\\n                --region us-east-1\"\n            }\n            stage('DeleteMovie') {\n                sh 'cd delete'\n                sh \"aws lambda update-function-code --function-name DeleteMovie \\\n                --s3-bucket ${bucket} \\\n                --s3-key delete-${commitID()}.zip \\\n                --region us-east-1\"\n            }\n            stage('UpdateMovie') {\n                sh 'cd update'\n                sh \"aws lambda update-function-code --function-name UpdateMovie \\\n                --s3-bucket ${bucket} \\\n                --s3-key update-${commitID()}.zip \\\n                --region us-east-1\"\n            }\n            stage('InsertMovie') {\n                sh 'cd insert'\n                sh \"aws lambda update-function-code --function-name InsertMovie \\\n                --s3-bucket ${bucket} \\\n                --s3-key insert-${commitID()}.zip \\\n                --region us-east-1\"\n            }\n        }\n    }\n}\n\ndef commitID() {\n    sh 'git rev-parse HEAD > .git/commitID'\n    def commitID = readFile('.git/commitID').trim()\n    sh 'rm .git/commitID'\n    commitID\n}\n```", "```go\nversion: 2\njobs:\n  build_findall:\n    docker:\n      - image: golang:1.8\n\n    working_directory: /go/src/github.com/mlabouardy/lambda-circleci\n\n    build_dir: findAll\n\n    environment:\n        S3_BUCKET: movies-api-deployment-packages\n\n    steps:\n      - checkout\n\n      - run:\n         name: Install AWS CLI & Zip\n         command: |\n          apt-get update\n          apt-get install -y zip python-pip python-dev\n          pip install awscli\n\n      - run:\n          name: Test\n          command: |\n           go get -u github.com/golang/lint/golint\n           go get -t ./...\n           golint -set_exit_status\n           go vet .\n           go test .\n\n      - run:\n         name: Build\n         command: |\n          GOOS=linux go build -o main main.go\n          zip $CIRCLE_SHA1.zip main\n\n      - run:\n          name: Push\n          command: aws s3 cp $CIRCLE_SHA1.zip s3://$S3_BUCKET\n\n      - run:\n          name: Deploy\n          command: |\n            aws lambda update-function-code --function-name FindAllMovies \\\n                --s3-bucket $S3_BUCKET \\\n                --s3-key $CIRCLE_SHA1.zip --region us-east-1\n\n  build_insert:\n    docker:\n      - image: golang:1.8\n\n    working_directory: /go/src/github.com/mlabouardy/lambda-circleci\n\n    build_dir: insert\n\n    environment:\n        S3_BUCKET: movies-api-deployment-packages\n\n    steps:\n      - checkout\n\n      - run:\n         name: Install AWS CLI & Zip\n         command: |\n          apt-get update\n          apt-get install -y zip python-pip python-dev\n          pip install awscli\n\n      - run:\n          name: Test\n          command: |\n           go get -u github.com/golang/lint/golint\n           go get -t ./...\n           golint -set_exit_status\n           go vet .\n           go test .\n\n      - run:\n         name: Build\n         command: |\n          GOOS=linux go build -o main main.go\n          zip $CIRCLE_SHA1.zip main\n\n      - run:\n          name: Push\n          command: aws s3 cp $CIRCLE_SHA1.zip s3://$S3_BUCKET\n\n      - run:\n          name: Deploy\n          command: |\n            aws lambda update-function-code --function-name InsertMovie \\\n                --s3-bucket $S3_BUCKET \\\n                --s3-key $CIRCLE_SHA1.zip --region us-east-1\n\n  build_update:\n    ...\n\n  build_delete:\n    ...\n\nworkflows:\n  version: 2\n  build_api:\n    jobs:\n      - build_findall\n      - build_insert\n      - build_update\n      - build_delete\n```", "```go\nversion: 2\njobs:\n  build:\n    docker:\n      - image: golang:1.8\n\n    working_directory: /go/src/github.com/mlabouardy/lambda-circleci\n\n    environment:\n        S3_BUCKET: movies-api-deployment-packages\n\n    steps:\n      - checkout\n\n      - run:\n         name: Install AWS CLI & Zip\n         ...\n\n      - run:\n          name: Test\n          ...\n\n      - run:\n         name: Build\n         ...\n\n      - run:\n          name: Push\n          ...\n\n      - run:\n          name: Deploy\n          ...\n\n      - run:\n          name: Publish\n          command: |\n            if [ $CIRCLE_BRANCH = 'master' ]; then \n              aws lambda publish-version --function-name FindAllMovies \\\n                --description $GIT_COMMIT_DESC --region us-east-1\n            fi\n          environment:\n            GIT_COMMIT_DESC: git log --format=%B -n 1 $CIRCLE_SHA1\n```", "```go\n- run:\n    name: Deploy\n    command: |\n      aws lambda update-function-code --function-name FindAllMovies \\\n          --s3-bucket $S3_BUCKET \\\n          --s3-key $CIRCLE_SHA1.zip --region us-east-1\n      curl -X POST -d '{\"token\":\"$TOKEN\", \"channel\":\"$CHANNEL\", \"text\":\"FindAllMovies has been updated\"}' \\\n           http://slack.com/api/chat.postMessage\n```", "```go\nfunc filter(category string)(events.APIGatewayProxyResponse, error) {\n    ...\n\n    filter: = expression.Name(\"category\").Equal(expression.Value(category))\n    projection: = expression.NamesList(expression.Name(\"id\"), expression.Name(\"name\"), expression.Name(\"description\"))\n    expr, err: = expression.NewBuilder().WithFilter(filter).WithProjection(projection).Build()\n    if err != nil {\n        return events.APIGatewayProxyResponse {\n            StatusCode: http.StatusInternalServerError,\n            Body: \"Error while building DynamoDB expression\",\n        }, nil\n    }\n\n    svc: = dynamodb.New(cfg)\n    req: = svc.ScanRequest( & dynamodb.ScanInput {\n        TableName: aws.String(os.Getenv(\"TABLE_NAME\")),\n        ExpressionAttributeNames: expr.Names(),\n        ExpressionAttributeValues: expr.Values(),\n        FilterExpression: expr.Filter(),\n        ProjectionExpression: expr.Projection(),\n    })\n\n    ...\n}\n```", "```go\nfunc filter(keyword string) (events.APIGatewayProxyResponse, error) {\n  ...\n\n  filter := expression.Name(\"name\").Contains(keyword)\n  projection := expression.NamesList(expression.Name(\"id\"), expression.Name(\"name\"), expression.Name(\"description\"))\n  expr, err := expression.NewBuilder().WithFilter(filter).WithProjection(projection).Build()\n  if err != nil {\n    return events.APIGatewayProxyResponse{\n      StatusCode: http.StatusInternalServerError,\n      Body: \"Error while building DynamoDB expression\",\n    }, nil\n  }\n\n  svc := dynamodb.New(cfg)\n  req := svc.ScanRequest(&dynamodb.ScanInput{\n    TableName: aws.String(os.Getenv(\"TABLE_NAME\")),\n    ExpressionAttributeNames: expr.Names(),\n    ExpressionAttributeValues: expr.Values(),\n    FilterExpression: expr.Filter(),\n    ProjectionExpression: expr.Projection(),\n  })\n  ... \n}\n```", "```go\ndelete(id: string){\n    return this.http\n      .delete(`${environment.api}/${id}`, {headers: this.getHeaders()})\n      .map(res => {\n        return res\n      })\n}\n```", "```go\nupdate(movie: Movie){\n    return this.http\n      .put(environment.api, JSON.stringify(movie), {headers: this.getHeaders()})\n      .map(res => {\n        return res\n      })\n}\n```", "```go\ndef bucket = 'movies-api-documentation'\ndef api_id = ''\n\nnode('slaves'){\n  stage('Generate'){\n    if (env.BRANCH_NAME == 'master') {\n      sh \"aws apigateway get-export --rest-api-id ${api_id} \\\n        --stage-name production \\\n        --export-type swagger swagger.json\"\n    }\n    else if (env.BRANCH_NAME == 'preprod') {\n      sh \"aws apigateway get-export --rest-api-id ${api_id} \\\n        --stage-name staging \\\n        --export-type swagger swagger.json\"\n    } else {\n      sh \"aws apigateway get-export --rest-api-id ${api_id} \\\n        --stage-name sandbox \\\n        --export-type swagger swagger.json\"\n    }\n  }\n\n  stage('Publish'){\n    sh \"aws s3 cp swagger.json s3://${bucket}\"\n  }\n}\n```", "```go\npackage main\n\nimport (\n  \"testing\"\n\n  \"github.com/stretchr/testify/assert\"\n\n  \"github.com/aws/aws-lambda-go/events\"\n)\n\nfunc TestUpdate_InvalidPayLoad(t *testing.T) {\n  input := events.APIGatewayProxyRequest{\n    Body: \"{'name': 'avengers'}\",\n  }\n  expected := events.APIGatewayProxyResponse{\n    StatusCode: 400,\n    Body: \"Invalid payload\",\n  }\n  response, _ := update(input)\n  assert.Equal(t, expected, response)\n}\n\nfunc TestUpdate_ValidPayload(t *testing.T) {\n  input := events.APIGatewayProxyRequest{\n    Body: \"{\\\"id\\\":\\\"40\\\", \\\"name\\\":\\\"Thor\\\", \\\"description\\\":\\\"Marvel movie\\\", \\\"cover\\\":\\\"poster url\\\"}\",\n  }\n  expected := events.APIGatewayProxyResponse{\n    Body: \"{\\\"id\\\":\\\"40\\\", \\\"name\\\":\\\"Thor\\\", \\\"description\\\":\\\"Marvel movie\\\", \\\"cover\\\":\\\"poster url\\\"}\",\n    StatusCode: 200,\n    Headers: map[string]string{\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n    },\n  }\n  response, _ := update(input)\n  assert.Equal(t, expected, response)\n}\n```", "```go\npackage main\n\nimport (\n  \"testing\"\n\n  \"github.com/stretchr/testify/assert\"\n\n  \"github.com/aws/aws-lambda-go/events\"\n)\n\nfunc TestDelete_InvalidPayLoad(t *testing.T) {\n  input := events.APIGatewayProxyRequest{\n    Body: \"{'name': 'avengers'}\",\n  }\n  expected := events.APIGatewayProxyResponse{\n    StatusCode: 400,\n    Body: \"Invalid payload\",\n  }\n  response, _ := delete(input)\n  assert.Equal(t, expected, response)\n}\n\nfunc TestDelete_ValidPayload(t *testing.T) {\n  input := events.APIGatewayProxyRequest{\n    Body: \"{\\\"id\\\":\\\"40\\\", \\\"name\\\":\\\"Thor\\\", \\\"description\\\":\\\"Marvel movie\\\", \\\"cover\\\":\\\"poster url\\\"}\",\n  }\n  expected := events.APIGatewayProxyResponse{\n    StatusCode: 200,\n    Headers: map[string]string{\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n    },\n  }\n  response, _ := delete(input)\n  assert.Equal(t, expected, response)\n}\n```", "```go\ndef bucket = 'movies-api-deployment-packages'\n\nnode('slave-golang'){\n  stage('Checkout'){\n    checkout scm\n  }\n\n  stage('Test'){\n    sh 'go get -u github.com/golang/lint/golint'\n    sh 'go get -t ./...'\n    sh 'golint -set_exit_status'\n    sh 'go vet .'\n    sh 'go test .'\n  }\n\n  stage('Build'){\n    sh 'GOOS=linux go build -o main main.go'\n    sh \"zip ${commitID()}.zip main\"\n  }\n\n  stage('Push'){\n    sh \"aws s3 cp ${commitID()}.zip s3://${bucket}\"\n  }\n\n  stage('Deploy'){\n    sh \"aws lambda update-function-code --function-name FindAllMovies \\\n      --s3-bucket ${bucket} \\\n      --s3-key ${commitID()}.zip \\\n      --region us-east-1\"\n  }\n}\n\ndef commitID() {\n  sh 'git rev-parse HEAD > .git/commitID'\n  def commitID = readFile('.git/commitID').trim()\n  sh 'rm .git/commitID'\n  commitID\n}\n```", "```go\nversion: 0.2\nenv:\n  variables:\n    S3_BUCKET: \"movies-api-deployment-packages\"\n    PACKAGE: \"github.com/mlabouardy/lambda-codepipeline\"\n\nphases:\n  install:\n    commands:\n      - mkdir -p \"/go/src/$(dirname ${PACKAGE})\"\n      - ln -s \"${CODEBUILD_SRC_DIR}\" \"/go/src/${PACKAGE}\"\n      - go get -u github.com/golang/lint/golint\n\n  pre_build:\n    commands:\n      - cd \"/go/src/${PACKAGE}\"\n      - go get -t ./...\n      - golint -set_exit_status\n      - go vet .\n      - go test .\n\n  build:\n    commands:\n      - GOOS=linux go build -o main\n      - zip $CODEBUILD_RESOLVED_SOURCE_VERSION.zip main\n      - aws s3 cp $CODEBUILD_RESOLVED_SOURCE_VERSION.zip s3://$S3_BUCKET/\n\n  post_build:\n    commands:\n      - aws lambda update-function-code --function-name FindAllMovies --s3-bucket $S3_BUCKET --s3-key $CODEBUILD_RESOLVED_SOURCE_VERSION.zip\n```", "```go\nAWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\n\nParameters:\n  StageName:\n    Type: String\n    Default: staging\n    Description: The API Gateway deployment stage\n\nResources:\n  FindAllMovies:\n    Type: AWS::Serverless::Function\n    Properties:\n      Handler: main\n      Runtime: go1.x\n      Role: !GetAtt FindAllMoviesRole.Arn \n      CodeUri: ./findall/deployment.zip\n      Environment:\n        Variables: \n          TABLE_NAME: !Ref MoviesTable\n      Events:\n        AnyRequest:\n          Type: Api\n          Properties:\n            Path: /movies\n            Method: GET\n            RestApiId:\n              Ref: MoviesAPI\n\n  FindAllMoviesRole:\n   Type: \"AWS::IAM::Role\"\n   Properties:\n     Path: \"/\"\n     ManagedPolicyArns:\n         - \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\n     AssumeRolePolicyDocument:\n       Version: \"2012-10-17\"\n       Statement:\n         -\n           Effect: \"Allow\"\n           Action:\n             - \"sts:AssumeRole\"\n           Principal:\n             Service:\n               - \"lambda.amazonaws.com\"\n     Policies: \n        - \n          PolicyName: \"PushCloudWatchLogsPolicy\"\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              - Effect: Allow\n                Action:\n                - logs:CreateLogGroup\n                - logs:CreateLogStream\n                - logs:PutLogEvents\n                Resource: \"*\"\n        - \n          PolicyName: \"ScanDynamoDBTablePolicy\"\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              - Effect: Allow\n                Action:\n                - dynamodb:Scan\n                Resource: \"*\"\n\n  MoviesTable: \n     Type: AWS::Serverless::SimpleTable\n     Properties:\n       PrimaryKey:\n         Name: ID\n         Type: String\n       ProvisionedThroughput:\n         ReadCapacityUnits: 5\n         WriteCapacityUnits: 5\n\n  MoviesAPI:\n    Type: 'AWS::Serverless::Api'\n    Properties:\n      StageName: !Ref StageName\n      DefinitionBody:\n        swagger: 2.0\n        info:\n          title: !Sub API-${StageName}\n        paths:\n          /movies:\n            x-amazon-apigateway-any-method:\n              produces:\n                - application/json\n              x-amazon-apigateway-integration:\n                uri:\n                  !Sub \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FindAllMovies.Arn}:current/invocations\"\n                passthroughBehavior: when_no_match\n                httpMethod: POST\n                type: aws_proxy\n```", "```go\npackage main\n\nimport (\n  \"os\"\n\n  \"github.com/aws/aws-lambda-go/lambda\"\n  \"github.com/aws/aws-sdk-go-v2/aws\"\n  \"github.com/aws/aws-sdk-go-v2/aws/external\"\n  \"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider\"\n)\n\ntype Account struct {\n  Username string `json:\"username\"`\n  Password string `json:\"password\"`\n}\n\nfunc signUp(account Account) error {\n  cfg, err := external.LoadDefaultAWSConfig()\n  if err != nil {\n    return err\n  }\n\n  cognito := cognitoidentityprovider.New(cfg)\n  req := cognito.SignUpRequest(&cognitoidentityprovider.SignUpInput{\n    ClientId: aws.String(os.Getenv(\"COGNITO_CLIENT_ID\")),\n    Username: aws.String(account.Username),\n    Password: aws.String(account.Password),\n  })\n  _, err = req.Send()\n  if err != nil {\n    return err\n  }\n  return nil\n}\n\nfunc main() {\n  lambda.Start(signUp)\n}\n```", "```go\npackage main\n\nimport (\n  \"os\"\n\n  \"github.com/aws/aws-lambda-go/lambda\"\n  \"github.com/aws/aws-sdk-go-v2/aws\"\n  \"github.com/aws/aws-sdk-go-v2/aws/external\"\n  \"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider\"\n)\n\ntype Account struct {\n  Username string `json:\"username\"`\n}\n\nfunc forgotPassword(account Account) error {\n  cfg, err := external.LoadDefaultAWSConfig()\n  if err != nil {\n    return err\n  }\n\n  cognito := cognitoidentityprovider.New(cfg)\n  req := cognito.ForgotPasswordRequest(&cognitoidentityprovider.ForgotPasswordInput{\n    ClientId: aws.String(os.Getenv(\"COGNITO_CLIENT_ID\")),\n    Username: aws.String(account.Username),\n  })\n  _, err = req.Send()\n  if err != nil {\n    return err\n  }\n\n  return nil\n}\n\nfunc main() {\n  lambda.Start(forgotPassword)\n}\n```", "```go\nresource \"aws_iam_role\" \"role\" {\n  name = \"InsertMovieRole\"\n  assume_role_policy = \"${file(\"assume-role-policy.json\")}\"\n}\n\nresource \"aws_iam_policy\" \"cloudwatch_policy\" {\n  name = \"PushCloudWatchLogsPolicy\"\n  policy = \"${file(\"cloudwatch-policy.json\")}\"\n}\n\nresource \"aws_iam_policy\" \"dynamodb_policy\" {\n  name = \"ScanDynamoDBPolicy\"\n  policy = \"${file(\"dynamodb-policy.json\")}\"\n}\n\nresource \"aws_iam_policy_attachment\" \"cloudwatch-attachment\" {\n  name = \"cloudwatch-lambda-attchment\"\n  roles = [\"${aws_iam_role.role.name}\"]\n  policy_arn = \"${aws_iam_policy.cloudwatch_policy.arn}\"\n}\n\nresource \"aws_iam_policy_attachment\" \"dynamodb-attachment\" {\n  name = \"dynamodb-lambda-attchment\"\n  roles = [\"${aws_iam_role.role.name}\"]\n  policy_arn = \"${aws_iam_policy.dynamodb_policy.arn}\"\n}\n```", "```go\nresource \"aws_lambda_function\" \"insert\" {\n  function_name = \"InsertMovie\"\n  handler = \"main\"\n  filename = \"function/deployment.zip\"\n  runtime = \"go1.x\"\n  role = \"${aws_iam_role.role.arn}\"\n\n  environment {\n    variables {\n      TABLE_NAME = \"movies\"\n    }\n  }\n}\n```", "```go\nresource \"aws_api_gateway_method\" \"proxy\" {\n  rest_api_id = \"${var.rest_api_id}\"\n  resource_id = \"${var.resource_id}\"\n  http_method = \"POST\"\n  authorization = \"NONE\"\n}\n\nresource \"aws_api_gateway_integration\" \"lambda\" {\n  rest_api_id = \"${var.rest_api_id}\"\n  resource_id = \"${var.resource_id}\"\n  http_method = \"${aws_api_gateway_method.proxy.http_method}\"\n\n  integration_http_method = \"POST\"\n  type = \"AWS_PROXY\"\n  uri = \"${aws_lambda_function.insert.invoke_arn}\"\n}\n\nresource \"aws_lambda_permission\" \"apigw\" {\n  statement_id = \"AllowAPIGatewayInvoke\"\n  action = \"lambda:InvokeFunction\"\n  function_name = \"${aws_lambda_function.insert.arn}\"\n  principal = \"apigateway.amazonaws.com\"\n\n  source_arn = \"${var.execution_arn}/*/*\"\n}\n```", "```go\nAPI:\n    Type: 'AWS::ApiGateway::RestApi'\n    Properties:\n        Name: API\n        FailOnWarnings: 'true'\nDemoResource:\n    Type: 'AWS::ApiGateway::Resource'\n    Properties:\n        ParentId:\n            'Fn::GetAtt': [API, RootResourceId]\n        PathPart: demo\n        RestApiId:\n            Ref: API\nDisplayMessageMethod:\n    Type: 'AWS::ApiGateway::Method'\n    Properties:\n        HttpMethod: GET\n        AuthorizationType: NONE\n        ResourceId:\n            Ref: DemoResource\n        RestApiId:\n            Ref: API\n        Integration:\n            Type: AWS\n            Uri: {'Fn::Join': [\"\", \"- \\\"arn:aws:apigateway:\\\"\\n- !Ref \\\"AWS::Region\\\"\\n- \\\":lambda:path/\\\"\\n- \\\"/2015-03-31/functions/\\\"\\n- Fn::GetAtt:\\n - HelloWorldFunction\\n - Arn\\n- \\\"/invocations\\\"\"]}\n            IntegrationHttpMethod: GET\n```", "```go\nResources:\n  FindAllMovies:\n    Type: AWS::Serverless::Function\n    Properties:\n      Handler: main\n      Runtime: go1.x\n      Role: !GetAtt FindAllMoviesRole.Arn \n      CodeUri: ./findall/deployment.zip\n      Environment:\n        Variables: \n          TABLE_NAME: !Ref MoviesTable\n      Events:\n        AnyRequest:\n          Type: Api\n          Properties:\n            Path: /movies\n            Method: GET\n            RestApiId:\n              Ref: MoviesAPI\n\n  InsertMovie:\n    Type: AWS::Serverless::Function\n    Properties:\n      Handler: main\n      Runtime: go1.x\n      Role: !GetAtt InsertMovieRole.Arn \n      CodeUri: ./insert/deployment.zip\n      Environment:\n        Variables: \n          TABLE_NAME: !Ref MoviesTable\n      Events:\n        AnyRequest:\n          Type: Api\n          Properties:\n            Path: /movies\n            Method: POST\n            RestApiId:\n              Ref: MoviesAPI\n\n  DeleteMovie:\n    Type: AWS::Serverless::Function\n    Properties:\n      Handler: main\n      Runtime: go1.x\n      Role: !GetAtt DeleteMovieRole.Arn \n      CodeUri: ./delete/deployment.zip\n      Environment:\n        Variables: \n          TABLE_NAME: !Ref MoviesTable\n      Events:\n        AnyRequest:\n          Type: Api\n          Properties:\n            Path: /movies\n            Method: DELETE\n            RestApiId:\n              Ref: MoviesAPI\n\n  UpdateMovie:\n    Type: AWS::Serverless::Function\n    Properties:\n      Handler: main\n      Runtime: go1.x\n      Role: !GetAtt UpdateMovieRole.Arn \n      CodeUri: ./update/deployment.zip\n      Environment:\n        Variables: \n          TABLE_NAME: !Ref MoviesTable\n      Events:\n        AnyRequest:\n          Type: Api\n          Properties:\n            Path: /movies\n            Method: PUT\n            RestApiId:\n              Ref: MoviesAPI\n```", "```go\naws s3 mb s3://terraform-state-files --region us-east-1\n```", "```go\naws s3api put-bucket-encryption --bucket terraform-state-files \\\n    --server-side-encryption-configuration file://config.json\n```", "```go\n{\n  \"Rules\": [\n    {\n      \"ApplyServerSideEncryptionByDefault\": {\n        \"SSEAlgorithm\": \"AES256\"\n      }\n    }\n  ]\n}\n```", "```go\nterraform {\n  backend \"s3\" {\n    bucket = \"terraform-state-files\"\n    key = \"KEY_NAME\"\n    region = \"us-east-1\"\n  }\n}\n```", "```go\nAWSTemplateFormatVersion: \"2010-09-09\"\nDescription: \"Simple Lambda Function\"\nParameters:\n  BucketName:\n    Description: \"S3 Bucket name\"\n    Type: \"String\"\n  TableName:\n    Description: \"DynamoDB Table Name\"\n    Type: \"String\"\n    Default: \"movies\"\nResources:\n  FindAllMoviesRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - \n            Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"lambda.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      Policies:\n        - \n          PolicyName: \"PushCloudWatchLogsPolicy\"\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              - Effect: Allow\n                Action:\n                - logs:CreateLogGroup\n                - logs:CreateLogStream\n                - logs:PutLogEvents\n                Resource: \"*\"\n        - \n          PolicyName: \"ScanDynamoDBTablePolicy\"\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              - Effect: Allow\n                Action:\n                - dynamodb:Scan\n                Resource: \"*\"\n  FindAllMovies:\n    Type: \"AWS::Lambda::Function\"\n    Properties:\n      Code:\n        S3Bucket: !Ref BucketName\n        S3Key: findall-deployment.zip\n      FunctionName: \"FindAllMovies\"\n      Handler: \"main\"\n      Runtime: \"go1.x\"\n      Role: !GetAtt FindAllMoviesRole.Arn\n      Environment:\n        Variables:\n          TABLE_NAME: !Ref TableName\n\n  InsertMovieRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - \n            Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"lambda.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      Policies:\n        - \n          PolicyName: \"PushCloudWatchLogsPolicy\"\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              - Effect: Allow\n                Action:\n                - logs:CreateLogGroup\n                - logs:CreateLogStream\n                - logs:PutLogEvents\n                Resource: \"*\"\n        - \n          PolicyName: \"PutItemDynamoDBTablePolicy\"\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              - Effect: Allow\n                Action:\n                - dynamodb:PutItem\n                Resource: \"*\"\n  InsertMovie:\n    Type: \"AWS::Lambda::Function\"\n    Properties:\n      Code:\n        S3Bucket: !Ref BucketName\n        S3Key: insert-deployment.zip\n      FunctionName: \"InsertMovie\"\n      Handler: \"main\"\n      Runtime: \"go1.x\"\n      Role: !GetAtt InsertMovieRole.Arn\n      Environment:\n        Variables:\n          TABLE_NAME: !Ref TableName\n\n  UpdateMovieRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - \n            Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"lambda.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      Policies:\n        - \n          PolicyName: \"PushCloudWatchLogsPolicy\"\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              - Effect: Allow\n                Action:\n                - logs:CreateLogGroup\n                - logs:CreateLogStream\n                - logs:PutLogEvents\n                Resource: \"*\"\n        - \n          PolicyName: \"PutItemDynamoDBTablePolicy\"\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              - Effect: Allow\n                Action:\n                - dynamodb:PutItem\n                Resource: \"*\"\n  UpdateMovie:\n    Type: \"AWS::Lambda::Function\"\n    Properties:\n      Code:\n        S3Bucket: !Ref BucketName\n        S3Key: update-deployment.zip\n      FunctionName: \"UpdateMovie\"\n      Handler: \"main\"\n      Runtime: \"go1.x\"\n      Role: !GetAtt UpdateMovieRole.Arn\n      Environment:\n        Variables:\n          TABLE_NAME: !Ref TableName\n\n  DeleteMovieRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - \n            Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"lambda.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      Policies:\n        - \n          PolicyName: \"PushCloudWatchLogsPolicy\"\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              - Effect: Allow\n                Action:\n                - logs:CreateLogGroup\n                - logs:CreateLogStream\n                - logs:PutLogEvents\n                Resource: \"*\"\n        - \n          PolicyName: \"DeleteItemDynamoDBTablePolicy\"\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              - Effect: Allow\n                Action:\n                - dynamodb:DeleteItem\n                Resource: \"*\"\n  DeleteMovie:\n    Type: \"AWS::Lambda::Function\"\n    Properties:\n      Code:\n        S3Bucket: !Ref BucketName\n        S3Key: update-deployment.zip\n      FunctionName: \"DeleteMovie\"\n      Handler: \"main\"\n      Runtime: \"go1.x\"\n      Role: !GetAtt DeleteMovieRole.Arn\n      Environment:\n        Variables:\n          TABLE_NAME: !Ref TableName\n\n  MoviesApi:\n    Type: \"AWS::ApiGateway::RestApi\"\n    Properties:\n      Name: \"MoviesApi\"\n      FailOnWarnings: \"true\"\n  MoviesResource:\n    Type: \"AWS::ApiGateway::Resource\"\n    Properties:\n      ParentId:\n        Fn::GetAtt:\n          - \"MoviesApi\"\n          - \"RootResourceId\"\n      PathPart: \"movies\"\n      RestApiId:\n        Ref: MoviesApi\n  CreateMovieMethod:\n    Type: \"AWS::ApiGateway::Method\"\n    Properties:\n      HttpMethod: \"POST\"\n      AuthorizationType: \"NONE\"\n      ResourceId:\n        Ref: MoviesResource\n      RestApiId:\n        Ref: MoviesApi\n      Integration:\n        Type: \"AWS\"\n        Uri:\n          Fn::Join:\n            - \"\"\n            - - \"arn:aws:apigateway:\"\n              - !Ref \"AWS::Region\"\n              - \":lambda:path/\"\n              - \"/2015-03-31/functions/\"\n              - Fn::GetAtt:\n                - InsertMovie\n                - Arn\n              - \"/invocations\"\n        IntegrationHttpMethod: \"POST\"\n  DeleteMovieMethod:\n    Type: \"AWS::ApiGateway::Method\"\n    Properties:\n      HttpMethod: \"DELETE\"\n      AuthorizationType: \"NONE\"\n      ResourceId:\n        Ref: MoviesResource\n      RestApiId:\n        Ref: MoviesApi\n      Integration:\n        Type: \"AWS\"\n        Uri:\n          Fn::Join:\n            - \"\"\n            - - \"arn:aws:apigateway:\"\n              - !Ref \"AWS::Region\"\n              - \":lambda:path/\"\n              - \"/2015-03-31/functions/\"\n              - Fn::GetAtt:\n                - DeleteMovie\n                - Arn\n              - \"/invocations\"\n        IntegrationHttpMethod: \"DELETE\"\n  UpdateMovieMethod:\n    Type: \"AWS::ApiGateway::Method\"\n    Properties:\n      HttpMethod: \"PUT\"\n      AuthorizationType: \"NONE\"\n      ResourceId:\n        Ref: MoviesResource\n      RestApiId:\n        Ref: MoviesApi\n      Integration:\n        Type: \"AWS\"\n        Uri:\n          Fn::Join:\n            - \"\"\n            - - \"arn:aws:apigateway:\"\n              - !Ref \"AWS::Region\"\n              - \":lambda:path/\"\n              - \"/2015-03-31/functions/\"\n              - Fn::GetAtt:\n                - UpdateMovie\n                - Arn\n              - \"/invocations\"\n        IntegrationHttpMethod: \"PUT\"\n  ListMoviesMethod:\n    Type: \"AWS::ApiGateway::Method\"\n    Properties:\n      HttpMethod: \"GET\"\n      AuthorizationType: \"NONE\"\n      ResourceId:\n        Ref: MoviesResource\n      RestApiId:\n        Ref: MoviesApi\n      Integration:\n        Type: \"AWS\"\n        Uri:\n          Fn::Join:\n            - \"\"\n            - - \"arn:aws:apigateway:\"\n              - !Ref \"AWS::Region\"\n              - \":lambda:path/\"\n              - \"/2015-03-31/functions/\"\n              - Fn::GetAtt:\n                - FindAllMovies\n                - Arn\n              - \"/invocations\"\n        IntegrationHttpMethod: \"GET\"\n\n  DynamoDBTable:\n    Type: \"AWS::DynamoDB::Table\"\n    Properties:\n      TableName: !Ref TableName\n      AttributeDefinitions:\n        -\n          AttributeName: \"ID\"\n          AttributeType: \"S\"\n      KeySchema:\n        -\n          AttributeName: \"ID\"\n          KeyType: \"HASH\"\n      ProvisionedThroughput:\n        ReadCapacityUnits: 5\n        WriteCapacityUnits: 5\n```", "```go\nresource \"aws_iam_role\" \"roles\" {\n  count = \"${length(var.functions)}\"\n  name = \"${element(var.functions, count.index)}Role\"\n  assume_role_policy = \"${file(\"policies/assume-role-policy.json\")}\"\n}\n\nresource \"aws_iam_policy\" \"policies\" {\n  count = \"${length(var.functions)}\"\n  name = \"${element(var.functions, count.index)}Policy\"\n  policy = \"${file(\"policies/${element(var.functions, count.index)}-policy.json\")}\"\n}\n\nresource \"aws_iam_policy_attachment\" \"policy-attachments\" {\n  count = \"${length(var.functions)}\"\n  name = \"${element(var.functions, count.index)}Attachment\"\n  roles = [\"${element(aws_iam_role.roles.*.name, count.index)}\"]\n  policy_arn = \"${element(aws_iam_policy.policies.*.arn, count.index)}\"\n}\n```", "```go\nresource \"aws_lambda_function\" \"functions\" {\n  count = \"${length(var.functions)}\"\n  function_name = \"${element(var.functions, count.index)}\"\n  handler = \"main\"\n  filename = \"functions/${element(var.functions, count.index)}.zip\"\n  runtime = \"go1.x\"\n  role = \"${element(aws_iam_role.roles.*.arn, count.index)}\"\n\n  environment {\n    variables {\n      TABLE_NAME = \"${var.table_name}\"\n    }\n  }\n}\n```", "```go\nresource \"aws_api_gateway_rest_api\" \"api\" {\n  name = \"MoviesAPI\"\n}\n\nresource \"aws_api_gateway_resource\" \"proxy\" {\n  rest_api_id = \"${aws_api_gateway_rest_api.api.id}\"\n  parent_id = \"${aws_api_gateway_rest_api.api.root_resource_id}\"\n  path_part = \"movies\"\n}\n\nresource \"aws_api_gateway_deployment\" \"staging\" {\n  depends_on = [\"aws_api_gateway_integration.integrations\"]\n\n  rest_api_id = \"${aws_api_gateway_rest_api.api.id}\"\n  stage_name = \"staging\"\n}\n\nresource \"aws_api_gateway_method\" \"proxies\" {\n  count = \"${length(var.functions)}\"\n  rest_api_id = \"${aws_api_gateway_rest_api.api.id}\"\n  resource_id = \"${aws_api_gateway_resource.proxy.id}\"\n  http_method = \"${lookup(var.methods, element(var.functions, count.index))}\"\n  authorization = \"NONE\"\n}\n\nresource \"aws_api_gateway_integration\" \"integrations\" {\n  count = \"${length(var.functions)}\"\n  rest_api_id = \"${aws_api_gateway_rest_api.api.id}\"\n  resource_id = \"${element(aws_api_gateway_method.proxies.*.resource_id, count.index)}\"\n  http_method = \"${element(aws_api_gateway_method.proxies.*.http_method, count.index)}\"\n\n  integration_http_method = \"POST\"\n  type = \"AWS_PROXY\"\n  uri = \"${element(aws_lambda_function.functions.*.invoke_arn, count.index)}\"\n}\n\nresource \"aws_lambda_permission\" \"permissions\" {\n  count = \"${length(var.functions)}\"\n  statement_id = \"AllowAPIGatewayInvoke\"\n  action = \"lambda:InvokeFunction\"\n  function_name = \"${element(aws_lambda_function.functions.*.arn, count.index)}\"\n  principal = \"apigateway.amazonaws.com\"\n\n  source_arn = \"${aws_api_gateway_deployment.staging.execution_arn}/*/*\"\n}\n```"]