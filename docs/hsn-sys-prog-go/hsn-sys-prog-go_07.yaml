- en: Handling Streams
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理流
- en: This chapter deals with streams of data, extending input and output interfaces
    beyond the filesystem, and how to implement custom readers and writers to serve
    any purpose.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涉及数据流，将输入和输出接口扩展到文件系统之外，并介绍如何实现自定义读取器和写入器以满足任何目的。
- en: It also focuses on the missing parts of the input and output utilities that
    combine them in several different ways, with the goal being to have full control
    of the incoming and outgoing data.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 它还专注于输入和输出实用程序的缺失部分，以多种不同的方式将它们组合在一起，目标是完全控制传入和传出的数据。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Streams
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流
- en: Custom readers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义读取器
- en: Custom writers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义写入器
- en: Utilities
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实用程序
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires Go to be installed and your favorite editor to be set
    up. For more information, refer to [Chapter 3](602a92d5-25f7-46b8-83d4-10c6af1c6750.xhtml),
    *An Overview of Go*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要安装Go并设置您喜欢的编辑器。有关更多信息，请参阅[第3章](602a92d5-25f7-46b8-83d4-10c6af1c6750.xhtml)，*Go概述*。
- en: Streams
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 流
- en: Writers and readers are not just for files; they are interfaces that abstract
    flows of data in one direction or another. These flows, often referred to as **streams**, are
    an essential part of most applications.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 写入器和读取器不仅仅用于文件；它们是抽象数据流的接口，这些流通常被称为**流**，是大多数应用程序的重要组成部分。
- en: Input and readers
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输入和读取器
- en: Incoming streams of data are considered the `io.Reader` interface if the application
    has no control over the data flow, and will wait for an error to end the process,
    receiving the `io.EOF` value in the best case scenario, which is a special error
    that signals that there is no more content to read, or another error otherwise.
    The other option is that the reader is also capable of terminating the stream.
    In this case, the correct representation is the `io.ReadCloser` interface.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序无法控制数据流，并且将等待错误来结束流程，则传入的数据流被视为`io.Reader`接口，在最佳情况下会收到`io.EOF`值，这是一个特殊的错误，表示没有更多内容可读取，否则会收到其他错误。另一种选择是读取器也能够终止流。在这种情况下，正确的表示是`io.ReadCloser`接口。
- en: Besides `os.File`, there are several implementations of readers spread across
    the standard package.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`os.File`，标准包中还有几个读取器的实现。
- en: The bytes reader
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字节读取器
- en: 'The `bytes` package contains a useful structure that treats a slice of bytes
    as an `io.Reader` interface, and it implements many more I/O interfaces:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`bytes`包含一个有用的结构，它将字节切片视为`io.Reader`接口，并实现了许多更多的I/O接口：'
- en: '`io.Reader`: This can act as a regular reader'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`io.Reader`：这可以作为常规读取器'
- en: '`io.ReaderAt`: This makes it possible to read from a certain position onward'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`io.ReaderAt`：这使得可以从特定位置开始读取'
- en: '`io.WriterTo`: This makes it possible to write the contents with an offset'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`io.WriterTo`：这使得可以在偏移量处写入内容'
- en: '`io.Seeker`: This can move the reader''s cursor freely'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`io.Seeker`：这可以自由移动读取器的光标'
- en: '`io.ByteScanner`: This can execute a read operation for each byte separately'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`io.ByteScanner`：这可以为每个字节执行读取操作'
- en: '`io.RuneScanner`: This can do the same with characters that are made of more
    bytes'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`io.RuneScanner`：这可以对由多个字节组成的字符执行相同的操作'
- en: 'The difference between runes and bytes can be clarified by this example, where
    we have a string made up of one rune, `⌘`, which is represented by three bytes, `e28c98`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 符文和字节之间的区别可以通过以下示例来澄清，其中我们有一个由一个符文组成的字符串`⌘`，它由三个字节`e28c98`表示：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The full example is available at [https://play.golang.org/p/gVZOufSmlq1](https://play.golang.org/p/gVZOufSmlq1).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的示例可在[https://play.golang.org/p/gVZOufSmlq1](https://play.golang.org/p/gVZOufSmlq1)找到。
- en: There is also `bytes.Buffer`, which adds writing capabilities on top of `bytes.Reader`
    and makes it possible to access the underlying slice or get the content as a string.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 还有`bytes.Buffer`，它在`bytes.Reader`的基础上添加了写入功能，并且可以访问底层切片或将内容作为字符串获取。
- en: The `Buffer.String` method converts bytes to string, and this type of casting
    in Go is done by making a copy of the bytes, because strings are immutable. This
    means that eventual changes to the buffer are made after the copy will not propagate
    to the string.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`Buffer.String`方法将字节转换为字符串，在Go中进行此类转换是通过复制字节来完成的，因为字符串是不可变的。这意味着对缓冲区的任何更改都将在复制后进行，不会传播到字符串。'
- en: The strings reader
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串读取器
- en: The `strings` package contains another structure that is very similar to the
    `io.Reader`  interface, called `strings.Reader`. This works exactly like the first
    but the underlying value is a string instead of a slice of bytes.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`strings`包含另一个与`io.Reader`接口非常相似的结构，称为`strings.Reader`。它的工作方式与第一个完全相同，但底层值是字符串而不是字节切片。'
- en: One of the main advantages of using a string instead of the byte reader, when
    dealing with strings that need to be read, is the avoidance of copying the data
    when initializing it. This subtle difference helps with both performance and memory
    usage because it does fewer allocations and requires the **Garbage Collector**
    (**GC**) to clean up the copy.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理需要读取的字符串时，使用字符串而不是字节读取器的主要优势之一是避免在初始化时复制数据。这种微妙的差异有助于提高性能和内存使用，因为它减少了分配并需要**垃圾回收器**（**GC**）清理副本。
- en: Defining a reader
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义读取器
- en: Any Go application can define a custom implementation of the `io.Reader` interface.
    A good general rule when implementing interfaces is to accept interfaces and return
    concrete types, avoiding unnecessary abstraction.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 任何Go应用程序都可以定义`io.Reader`接口的自定义实现。在实现接口时的一个很好的一般规则是接受接口并返回具体类型，避免不必要的抽象。
- en: 'Let''s look at a practical example. We want to implement a custom reader that
    takes the content from another reader and transforms it into uppercase; we could
    call this `AngryReader`, for instance:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个实际的例子。我们想要实现一个自定义读取器，它从另一个读取器中获取内容并将其转换为大写；例如，我们可以称之为`AngryReader`：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is a pretty straightforward example that uses `unicode` and `unicode/utf8` to
    achieve its goal:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常直接的例子，使用`unicode`和`unicode/utf8`来实现其目标：
- en: '`utf8.DecodeRune` is used to obtain the first rune and its width is a portion
    of the slice read'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`utf8.DecodeRune`用于获取第一个符文及其宽度是读取的切片的一部分'
- en: '`unicode.IsLetter` determines whether a rune is a letter'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unicode.IsLetter`确定符文是否为字母'
- en: '`unicode.ToUpper` converts the text into uppercase'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unicode.ToUpper`将文本转换为大写'
- en: '`ut8.EncodeLetter` writes the new letter in the necessary bytes'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ut8.EncodeLetter`将新字母写入必要的字节'
- en: The letter and its uppercase version should be the same width
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字母及其大写版本应该具有相同的宽度
- en: The full example is available at [https://play.golang.org/p/PhdSsbzXcbE](https://play.golang.org/p/PhdSsbzXcbE).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 完整示例可在[https://play.golang.org/p/PhdSsbzXcbE](https://play.golang.org/p/PhdSsbzXcbE)找到。
- en: Output and writers
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输出和写入器
- en: The reasoning that applies to incoming streams also applies to outgoing ones.
    We have the `io.Writer` interface, in which the application can only send data,
    and the `io.WriteCloser` interface, in which it is also able to close the connection.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 适用于传入流的推理也适用于传出流。我们有`io.Writer`接口，应用程序只能发送数据，还有`io.WriteCloser`接口，它还能关闭连接。
- en: The bytes writer
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字节写入器
- en: 'We already saw that the `bytes` package offers `Buffer`, which has both reading
    and writing capabilities. This implements all the methods of the `ByteReader`
    interface, plus more than one `Writer` interface:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到`bytes`包提供了`Buffer`，它具有读取和写入功能。这实现了`ByteReader`接口的所有方法，以及一个以上的`Writer`接口：
- en: '`io.Writer`: This can act as a regular writer'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`io.Writer`：这可以作为常规写入器'
- en: '`io.WriterAt`: This makes it possible to write from a certain position onward'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`io.WriterAt`：这使得可以从某个位置开始写入'
- en: '`io.ByteWriter`: This makes it possible to write single bytes'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: io.ByteWriter：这使得可以写入单个字节
- en: '`bytes.Buffer` is a very flexible structure considering that it works for both,
    `Writer` and `ByteWriter` and works best if reused, thanks to the `Reset` and
    `Truncate` methods. Instead of leaving a used buffer to be recycled by the GC
    and make a new buffer, it is better to reset the existing one, keeping the underlying
    array for the buffer and setting the slice length to `0`.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`bytes.Buffer`是一个非常灵活的结构，因为它既适用于`Writer`和`ByteWriter`，如果重复使用，它的`Reset`和`Truncate`方法效果最佳。与其让GC回收已使用的缓冲区并创建一个新的缓冲区，不如重置现有的缓冲区，保留缓冲区的底层数组，并将切片长度设置为`0`。'
- en: 'In the previous chapter, we saw a good example of buffer usage:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们看到了缓冲区使用的一个很好的例子：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'A buffer is not made for composing string values. For this reason, when the
    `String` method is called, bytes get converted into strings, which are immutable,
    unlike slices. The new string created this way is made with a copy of the current
    slice, and changes to the slice do not touch the string. It''s neither a limit
    nor a feature; it is an attribute that can lead to errors if used incorrectly.
    Here''s an example of the effect of resetting a buffer and using the `String`
    method:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 缓冲区不适用于组合字符串值。因此，当调用`String`方法时，字节会被转换为不可变的字符串，与切片不同。以这种方式创建的新字符串是使用当前切片的副本制作的，对切片的更改不会影响字符串。这既不是限制也不是特性；这是一个属性，如果使用不正确可能会导致错误。以下是重置缓冲区并使用`String`方法的效果示例：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The full example is available at [https://play.golang.org/p/zBjGPMC4sfF](https://play.golang.org/p/zBjGPMC4sfF)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 完整示例可在[https://play.golang.org/p/zBjGPMC4sfF](https://play.golang.org/p/zBjGPMC4sfF)找到
- en: The string writer
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串写入器
- en: A byte buffer executes a copy of the bytes in order to produce a string. This
    is why, in version 1.10, `strings.Builder` made its debut. It shares all the write-related
    methods of a buffer and does not allow access to the underlying slice via the
    `Bytes` method. The only way of obtaining the final string is with the `String`
    method, which uses the `unsafe` package under the hood to convert the slice to
    a string without copying the underlying data.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 字节缓冲区执行字节的复制以生成一个字符串。这就是为什么在1.10版本中，`strings.Builder`首次亮相。它共享缓冲区的所有与写入相关的方法，并且不允许通过`Bytes`方法访问底层切片。获取最终字符串的唯一方法是使用`String`方法，它在底层使用`unsafe`包将切片转换为字符串而不复制底层数据。
- en: 'The main consequence of this is that this struct strongly discourages copying—that''s
    because the underlying slice of the copied slice points to the same array, and
    writing in the copy would influence the other one. The resulting operation would
    panic:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的主要后果是这个结构强烈地不鼓励复制——因为复制的切片的底层数组指向相同的数组，并且在副本中写入会影响另一个。结果的操作会导致恐慌：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Defining a writer
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义一个写入器
- en: 'Any custom implementation of any writer can be defined in the application.
    A very common case is a decorator, which is a writer that wraps another writer
    and alters or extends what the original writer does. As for the reader, it is
    a good habit to have a constructor that accepts another writer and possibly wraps
    it in order to make it compatible with a lot of the standard library structures,
    such as the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 任何写入器的自定义实现都可以在应用程序中定义。一个非常常见的情况是装饰器，它是一个包装另一个写入器并改变或扩展原始写入器功能的写入器。至于读取器，最好有一个接受另一个写入器并可能包装它以使其与许多标准库结构兼容的构造函数，例如以下内容：
- en: '`*os.File`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*os.File`'
- en: '`*bytes.Buffer`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*bytes.Buffer`'
- en: '`*strings.Builder`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*strings.Builder`'
- en: Let's get a real-world use case—we want to produce some texts with scrambled
    letters in each word to test when it starts to become unreadable by a human. We
    will create a configurable writer that will scramble the letters before writing
    it to the destination writer and we will create a binary that accepts a file and
    creates its scrambled version. We will use the `math/rand` package to randomize
    the scrambling.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个真实的用例——我们想要生成一些带有每个单词中混淆字母的文本，以测试何时开始变得无法阅读。我们将创建一个可配置的写入器，在将其写入目标写入器之前混淆字母，并创建一个接受文件并创建其混淆版本的二进制文件。我们将使用`math/rand`包来随机化混淆。
- en: 'Let''s define our struct and its constructor. This will accept another writer,
    a random number generator, and a scrambling `chance`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义我们的结构及其构造函数。这将接受另一个写入器、一个随机数生成器和一个混淆的`chance`：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `Write` method needs to execute the bytes without letters as they are,
    and scramble the sequence of letters. It will iterate the runes, using the `ut8.DecodeRune`
    function we saw earlier, print whatever is not a letter, and stack all the sequences
    of letters it can find:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`Write`方法需要执行字节而不是字母，并打乱字母的顺序。它将迭代符文，使用我们之前看到的`ut8.DecodeRune`函数，打印出任何不是字母的内容，并堆叠它可以找到的所有字母序列：'
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When the sequence is over, it will be handled by the `shambleWrite` method,
    which will effectively execute a shamble and write the shambled runes:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当序列结束时，它将由`shambleWrite`方法处理，该方法将有效地执行一个混乱并写入混乱的符文：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The full example is available at [https://play.golang.org/p/0Xez--6P7nj](https://play.golang.org/p/0Xez--6P7nj).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 完整示例可在[https://play.golang.org/p/0Xez--6P7nj](https://play.golang.org/p/0Xez--6P7nj)中找到。
- en: Built-in utilities
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内置实用程序
- en: There are a number of other functions in the `io` and `io/ioutil` packages that
    help with managing readers, writers, and more. Knowing all the tools available
    will help you to avoid writing unnecessary code, and will guide you in using the
    best tool for the job.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`io`和`io/ioutil`包中有许多其他函数，可以帮助管理读取器、写入器等。了解所有可用的工具将帮助您避免编写不必要的代码，并指导您在使用最佳工具时进行操作。'
- en: Copying from one stream to another
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从一个流复制到另一个流
- en: There are three main functions in the `io` package that make it possible to
    transfer data from a writer to a reader. This is a very common scenario; you could
    be writing the contents from a file opened for reading to another file opened
    for writing, for instance, or draining a buffer and writing its content as standard
    output.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`io`包中有三个主要函数，可以实现从写入器到读取器的数据传输。这是一个非常常见的场景；例如，您可以将从打开的文件中读取的内容写入到另一个打开的文件中，或者将缓冲区中的内容排空并将其内容写入标准输出。'
- en: We already saw how to use the `io.Copy` function on a file to simulate the behavior
    of the `cp` command in [Chapter 4](0b73653d-6073-4708-b015-fe6a43cb9f37.xhtml)*,
    Working with the Filesystem*. This behavior can be extended to any sort of reader
    and writer implementation, from buffers to network connections.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何在文件上使用`io.Copy`函数来模拟[第4章](0b73653d-6073-4708-b015-fe6a43cb9f37.xhtml)*，与文件系统一起工作*中`cp`命令的行为。这种行为可以扩展到任何读取器和写入器的实现，从缓冲区到网络连接。
- en: If the writer is also an `io.WriterTo` interface, the copy calls the `WriteTo`
    method. If not, it executes a series of writes using a buffer of fixed size (32
    KB). If the operation ends with the `io.EOF` value, no error is returned. A common
    case scenario is the `bytes.Buffer` struct, which is capable of writing its content
    to another writer and will behave accordingly. Alternatively, if the destination
    is an `io.ReaderFrom` interface, the `ReadFrom` method is executed.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果写入器也是`io.WriterTo`接口，复制将调用`WriteTo`方法。如果不是，它将使用固定大小的缓冲区（32 KB）进行一系列写入。如果操作以`io.EOF`值结束，则不会返回错误。一个常见的情况是`bytes.Buffer`结构，它能够将其内容写入另一个写入器，并且将相应地行事。或者，如果目标是`io.ReaderFrom`接口，则执行`ReadFrom`方法。
- en: If the interface is a simple `io.Writer` interface, this method uses a temporary
    buffer that will be cleaned afterwards. To avoid wasting computing power on garbage
    collection, and maybe reuse the same buffers, there's another function—the `io.CopyBuffer`
    function. This has an additional argument, and a new buffer gets allocated only
    if this extra argument is `nil`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果接口是一个简单的`io.Writer`接口，这个方法将使用一个临时缓冲区，之后将被清除。为了避免在垃圾回收上浪费计算资源，并且可能重用相同的缓冲区，还有另一个函数——`io.CopyBuffer`函数。这有一个额外的参数，只有在这个额外的参数是`nil`时才会分配一个新的缓冲区。
- en: The last function is `io.CopyN`, which works exactly like `io.Copy` but makes
    it possible to specify a limit to the number of bytes to be written to the extra
    argument. If the reader is also `io.Seeker`, it can be useful to write partial
    content—the seeker first moves the cursor to the correct offset, then a certain
    number of bytes is written.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个函数是`io.CopyN`，它的工作原理与`io.Copy`完全相同，但可以指定要写入到额外参数的字节数限制。如果读取器也是`io.Seeker`，则可以有用地写入部分内容——seeker首先将光标移动到正确的偏移量，然后写入一定数量的字节。
- en: 'Let''s make an example of copying `n` bytes at once:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举一个一次复制`n`个字节的例子：
- en: '[PRE8]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The full example is available at [https://play.golang.org/p/8wCqGXp5mSZ](https://play.golang.org/p/8wCqGXp5mSZ).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 完整示例可在[https://play.golang.org/p/8wCqGXp5mSZ](https://play.golang.org/p/8wCqGXp5mSZ)中找到。
- en: Connected readers and writers
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接的读取器和写入器
- en: The `io.Pipe` function creates a pair of readers and writers that are connected.
    This means that whatever is sent to the writer will be received from the reader.
    Write operations are blocked if there is still data that is hanging from the last
    one; only when the reader has finished consuming what has been sent will the new
    operation be concluded.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`io.Pipe`函数创建一对连接的读取器和写入器。这意味着发送到写入器的任何内容都将从读取器接收到。如果仍有上次操作的挂起数据，写入操作将被阻塞；只有在读取器完成消耗已发送的内容后，新操作才会结束。'
- en: 'This is not an important tool for non-concurrent applications, which are more
    likely to use concurrent tools such as channels, but when the reader and writer
    are executing on different goroutines, this can be an excellent mechanism for
    synchronization, as in the following program:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于非并发应用程序来说并不是一个重要的工具，非并发应用程序更有可能使用通道等并发工具，但是当读取器和写入器在不同的goroutine上执行时，这可以是一个很好的同步机制，就像下面的程序一样：
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The full example is available at [https://play.golang.org/p/0YpRK25wFw_c](https://play.golang.org/p/0YpRK25wFw_c).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 完整示例可在[https://play.golang.org/p/0YpRK25wFw_c](https://play.golang.org/p/0YpRK25wFw_c)中找到。
- en: Extending readers
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展读取器
- en: When it comes to incoming streams, there are a lot of functions available in
    the standard library to improve the capabilities of readers. One of the easiest
    examples is `ioutil.NopCloser`, which takes a reader and returns `io.ReadCloser`,
    which does nothing. This is useful if a function is in charge of releasing a resource,
    but the reader used is not `io.Closer` (like in `bytes.Buffer`).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到传入流时，标准库中有很多函数可用于改进读取器的功能。其中一个最简单的例子是`ioutil.NopCloser`，它接受一个读取器并返回`io.ReadCloser`，什么也不做。如果一个函数负责释放资源，但使用的读取器不是`io.Closer`（比如`bytes.Buffer`），这就很有用。
- en: There are two tools that constrain the number of bytes read. The `ReadAtLeast`
    function defines a minimum number of bytes to read. The result will be `EOF` only
    if there are no bytes to read; otherwise, if a smaller number of bytes is read
    before `EOF`, `ErrUnexpectedEOF` will be returned. If the bytes buffer is shorter
    than the bytes requested, which does not make sense, there will be a `ErrShortBuffer`.
    In the event of a reading error, the function manages to read at least the desired
    number of bytes, and that error is dropped.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个工具可以限制读取的字节数。`ReadAtLeast`函数定义了要读取的最小字节数。只有在没有要读取的字节时才会返回`EOF`；否则，如果在`EOF`之前读取了较少的字节数，将返回`ErrUnexpectedEOF`。如果字节缓冲区比请求的字节数要短，这是没有意义的，将会返回`ErrShortBuffer`。在读取错误的情况下，函数会设法至少读取所需数量的字节，并且会丢弃该错误。
- en: There is then `ReadFull`, which is expected to fill the buffer and will return `ErrUnexpectedEOF` otherwise.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是`ReadFull`，它预期填充缓冲区，否则将返回`ErrUnexpectedEOF`。
- en: 'The other constraining function is `LimitReader`. This function is a decorator
    that gets a reader and returns another reader that will return `EOF` once the
    desired bytes are read. This could be used for a preview of the content of an
    actual reader, as in the following example:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个约束函数是`LimitReader`。这个函数是一个装饰器，它接收一个读取器并返回另一个读取器，一旦读取到所需的字节，就会返回`EOF`。这可以用于预览实际读取器的内容，就像下面的例子一样：
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The full example is available at [https://play.golang.org/p/LllOdWg9uyU](https://play.golang.org/p/LllOdWg9uyU).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的示例可在[https://play.golang.org/p/LllOdWg9uyU](https://play.golang.org/p/LllOdWg9uyU)找到。
- en: More readers can be combined in a sequence with the `MultiReader` function will
    read each part sequentially until it reaches `EOF`, and then jump to the next
    one.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 更多的读取器可以使用`MultiReader`函数组合成一个序列，将依次读取每个部分，直到达到`EOF`，然后跳转到下一个。
- en: One reader and one writer can be connected so that whatever comes from the reader
    is copied to the writer—the opposite of what happens with `io.Pipe`. This is done
    via `io.TeeReader`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一个读取器和一个写入器可以连接起来，以便来自读取器的任何内容都会被复制到写入器，这与`io.Pipe`的相反情况相反。这是通过`io.TeeReader`完成的。
- en: 'Let''s try to use it to create a writer that acts as a search engine in the
    filesystem, printing only the rows with a match to the query requested. We want
    a program that does the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用它来创建一个在文件系统中充当搜索引擎的写入器，只打印出与所请求的查询匹配的行。我们想要一个执行以下操作的程序：
- en: Reads a directory path and a string to search from the arguments
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从参数中读取目录路径和要搜索的字符串
- en: Gets a list of files in the selected path
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取所选路径中的文件列表
- en: Reads each file and passes the lines that contain the selected string to another
    writer
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取每个文件，并将包含所选字符串的行传递给另一个写入器
- en: This other writer will inject color characters to highlight the string and copy
    its content to the standard output
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个写入器将注入颜色字符以突出显示字符串，并将其内容复制到标准输出
- en: 'Let''s start with color injection. In a Unix shell, colored output is obtained
    with the following sequence:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从颜色注入开始。在Unix shell中，可以通过以下序列获得彩色输出：
- en: '`\xbb1`: An escape character'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\xbb1`: 一个转义字符'
- en: '`[`: An opening bracket'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[`: 一个开放的括号'
- en: '`39`: A number'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`39`: 一个数字'
- en: '`m`: The letter *m*'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`m`: 字母*m*'
- en: The number determines both the background and foreground color. For this example,
    we'll use `31` (red) and `39` (default).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 数字确定了背景和前景颜色。对于本例，我们将使用`31`（红色）和`39`（默认）。
- en: 'We are creating a writer that will print the rows with a match and highlight
    the text:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在创建一个写入器，它将打印出匹配的行并突出显示文本：
- en: '[PRE11]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This will be used with `TeeReader` with an open file, so that reading the file
    will write to `queryWriter`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这将与打开文件一起使用`TeeReader`，以便读取文件将写入`queryWriter`：
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As you can see, there is no need to write; reading from the file automatically
    writes to the query writer that is connected to the standard output.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，无需写入；从文件中读取会自动写入连接到标准输出的查询写入器。
- en: Writers and decorators
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写入器和装饰器
- en: There are a plethora of tools to enhance, decorate, and use for readers, but
    the same thing does not apply to writers.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 有大量的工具可用于增强、装饰和使用读取器，但对于写入器却不适用。
- en: There is also the `io.WriteString` function, which prevents unnecessary conversions
    from strings to bytes. First, it checks whether the writer supports string writing,
    attempting a cast to `io.stringWriter`, an unexported interface with just the `WriteString` method,
    then writes the string if successful, or converts it into bytes otherwise.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 还有`io.WriteString`函数，它可以防止将字符串转换为字节。首先，它会检查写入器是否支持字符串写入，尝试将其转换为`io.stringWriter`，这是一个只有`WriteString`方法的未导出接口，然后如果成功，写入字符串，否则将其转换为字节。
- en: 'There is the `io.MultiWriter` function, which creates a writer that replicates
    the information to a series of other writers, which it receives upon creation.
    A practical example is writing some content while showing it on the standard output,
    as in the following example:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 有`io.MultiWriter`函数，它创建一个写入器，将信息复制到一系列其他写入器中，这些写入器在创建时接收。一个实际的例子是在将内容写入标准输出的同时显示它，就像下面的例子一样：
- en: '[PRE13]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The full example is available at [https://play.golang.org/p/ZWDF2vCDfsM](https://play.golang.org/p/ZWDF2vCDfsM).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的示例可在[https://play.golang.org/p/ZWDF2vCDfsM](https://play.golang.org/p/ZWDF2vCDfsM)找到。
- en: There is also a useful variable, `ioutil.Discard`, which is a writer that writes
    to `/dev/null`, a null device. This means that writing to this variable ignores
    the data.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个有用的变量，`ioutil.Discard`，它是一个写入器，写入到`/dev/null`，一个空设备。这意味着写入到这个变量会忽略数据。
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we introduced the concept of streams for describing incoming
    and outgoing flows of data. We saw that the reader interface represents the data
    received, while the writer is the sent data.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了流的概念，用于描述数据的传入和传出流。我们看到读取器接口表示接收到的数据，而写入器则是发送的数据。
- en: We compared the different readers that are available in the standard package.
    We looked at files in the previous chapter, and in this one we added byte and
    string readers to the list. We learned how to implement custom readers with an
    example, and saw that it's always good to design a reader to be built on top of
    another.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们比较了标准包中可用的不同读取器。在上一章中我们看了文件，在这一章中我们将字节和字符串读取器加入到列表中。我们学会了如何使用示例实现自定义读取器，并且看到设计一个读取器建立在另一个读取器之上总是一个好主意。
- en: Then, we focused on writers. We discovered that files are also writers if opened
    correctly and that there are several writers in the standard package, including
    the byte buffer and the string builder. We also implemented a custom writer and
    saw how to handle bytes and runes with the `utf8` package.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们专注于写入器。我们发现如果正确打开，文件也是写入器，并且标准包中有几个写入器，包括字节缓冲区和字符串构建器。我们还实现了一个自定义写入器，并看到如何使用`utf8`包处理字节和符文。
- en: Finally, we explored the remaining functionality in `io` and `ioutil`, analyzing
    the various tools offered for copying data, and connecting readers and writers.
    We also saw which decorators are available for improving or changing readers'
    and writers' capabilities.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们探索了`io`和`ioutil`中剩余的功能，分析了用于复制数据和连接读取器和写入器的各种工具。我们还看到了用于改进或更改读取器和写入器功能的装饰器。
- en: In the next chapter, we will talk about pseudo terminal applications, and we
    will use all that knowledge to build some of them.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论伪终端应用程序，并利用所有这些知识来构建其中一些。
- en: Questions
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What's a stream?
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是流？
- en: What interfaces abstract incoming streams?
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪些接口抽象了传入流？
- en: Which interfaces represent outgoing streams?
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪些接口代表传出流？
- en: When should a bytes reader be used? When should a string reader be used instead?
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 何时应该使用字节读取器？何时应该使用字符串读取器？
- en: What's the difference between a string builder and a bytes buffer?
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字符串构建器和字节缓冲区之间有什么区别？
- en: Why should readers and writers implementations accept an interface as input?
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读者和写入者的实现为什么要接受一个接口作为输入？
- en: How does a pipe differ from `TeeReader`?
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 管道与`TeeReader`有什么不同？
