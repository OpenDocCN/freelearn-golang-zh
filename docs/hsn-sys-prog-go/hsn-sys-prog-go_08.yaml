- en: Building Pseudo-Terminals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建伪终端
- en: This chapter will introduce pseudo-terminal applications. Many programs (such
    as SQL or SSH clients) are built as pseudo-terminal because it enables interactive
    use from inside a terminal. These types of application are very important because
    they allow us to have control of an application in an environment where there
    is no graphical interface available, such as when connecting via **Secure Shell**
    (**SSH**) to a server. This chapter will guide you through the creation of some applications of
    this type.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍伪终端应用程序。许多程序（如SQL或SSH客户端）都是构建为伪终端，因为它能够在终端内进行交互使用。这些类型的应用程序非常重要，因为它们允许我们在没有图形界面的环境中控制应用程序，例如通过**安全外壳**（**SSH**）连接到服务器时。本章将指导您创建一些此类应用程序。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Terminals and pseudo-terminals
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 终端和伪终端
- en: Basic pseudo-terminals
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本伪终端
- en: Advanced pseudo-terminals
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级伪终端
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires Go to be installed and your favorite editor to be set
    up. For more information, you can refer to [Chapter 3](602a92d5-25f7-46b8-83d4-10c6af1c6750.xhtml),
    *An Overview of Go*.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要安装Go并设置您喜欢的编辑器。有关更多信息，您可以参考[第3章]（602a92d5-25f7-46b8-83d4-10c6af1c6750.xhtml），*Go概述*。
- en: Understanding pseudo-terminals
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解伪终端
- en: Pseudo-terminals, or pseudo teletypes, are applications that run under a Terminal
    or teletype and emulate its behavior. It's a very convenient way of creating interactive
    software that is capable of running inside a Terminal without any graphical interface.
    This is because it uses the Terminal itself to emulate one.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 伪终端或伪电传打字机是在终端或电传打字机下运行并模拟其行为的应用程序。这是一种非常方便的方式，可以在没有图形界面的终端内运行交互式软件。这是因为它使用终端本身来模拟一个终端。
- en: Beginning with teletypes
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从电传打字机开始
- en: '**Teletype** (**TTY**) or teleprinter is the name for typewriters with an electromechanical
    system that was controlled through a serial port. It was connected to a computer
    that was capable of sending information to the device to print it. The data was
    made by a sequence of finite symbols such as ASCII characters, with a fixed font. These
    devices acted as user interfaces for early computers, so they were—in a sense—precursors
    to the modern screens.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**电传打字机**（**TTY**）或**电传打印机**是通过串行端口控制的电机式打字机的名称。它连接到能够向设备发送信息以打印的计算机上。数据由一系列有限的符号组成，例如ASCII字符，具有固定的字体。这些设备作为早期计算机的用户界面，因此它们在某种意义上是现代屏幕的前身。'
- en: 'When screens to replaced printers as output devices, their content was organized
    in a similar fashion: a two dimensional matrix of characters. In their early stages
    they were called glass TTY, and the character display was still part of the display
    itself, controlled by its own logic circuits. With the arrival of the first video
    display cards, computers were capable of having an interface that was not hardware-dependent.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当屏幕取代打印机作为输出设备时，它们的内容以类似的方式组织：字符的二维矩阵。在早期阶段，它们被称为玻璃TTY，字符显示仍然是显示本身的一部分，由其自己的逻辑电路控制。随着第一批视频显示卡的到来，计算机能够拥有一个不依赖硬件的界面。
- en: Text-only consoles used as a main interface for operating systems inherit their
    name from TTY and are referred to as consoles. Even if the OS runs a graphical
    environment like on a modern OS, a user can always access a certain number of
    virtual consoles that work as a **Command-Line Interface** (**CLI**), often referred
    to as a shell.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 作为操作系统的主要界面使用的仅文本控制台从TTY继承其名称，并被称为控制台。即使操作系统运行在现代操作系统上的图形环境中，用户仍然可以访问一定数量的虚拟控制台，这些控制台作为**命令行界面**（**CLI**）使用，通常称为shell。
- en: Pseudo teletypes
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 伪电传打字机
- en: 'Many applications are designed to work inside a shell, but some of them are
    mimicking the shell''s behavior. Graphical interfaces have a Terminal emulator
    that is designed for executing shells. These types of applications are called
    **pseudo-teletypes** (**PTY**). In order to be considered a PTY, an application
    needs to be capable of the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 许多应用程序设计为在shell内工作，但其中一些是在模仿shell的行为。图形界面有一个专门用于执行shell的终端模拟器。这些类型的应用程序被称为**伪电传打字机**（**PTY**）。为了被视为PTY，应用程序需要能够执行以下操作：
- en: Accepting input from the user
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接受用户输入
- en: Sending input to the console and receiving the output
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将输入发送到控制台并接收输出
- en: Showing this output to the user
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向用户显示此输出
- en: There are some examples already in the available Linux utilities, **screen** being
    the most notable. It is a pseudo-terminal application that allows the user to
    use multiple shells and control them. It can open and close new shells, and switch
    between all opened shells. It allows the user to name a session, so that, if it's
    killed for any unexpected reason, the user can resume the session.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 已经有一些示例可用的Linux实用程序，其中最显著的是**screen**。这是一个伪终端应用程序，允许用户使用多个shell并对其进行控制。它可以打开和关闭新的shell，并在所有打开的shell之间切换。它允许用户命名一个会话，因此，如果由于任何意外原因而被终止，用户可以恢复会话。
- en: Creating a basic PTY
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建基本PTY
- en: We'll start with a simple version of a pseudo-terminal by creating an input
    manager, then by creating a command selector, and finally by creating the command
    execution.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从创建输入管理器的简单版本的伪终端开始，然后创建命令选择器，最后创建命令执行。
- en: Input management
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输入管理
- en: 'The standard input can be used to receive user commands. We can start by using
    a buffered input to read lines and print them. In order to read a line, there
    is a useful command, `bufio.Scanner`, that already provides a line reader. The
    code will look similar to the following code snippet:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 标准输入可用于接收用户命令。我们可以通过使用缓冲输入来读取行并打印它们。为了读取一行，有一个有用的命令`bufio.Scanner`，它已经提供了一个行读取器。代码将类似于以下代码片段：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Since this code has no exit point, we can start by creating the first command, `exit`,
    that will terminate the shell execution. We can do a small change in the code
    to make this work, as shown in the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此代码没有退出点，我们可以从创建第一个命令“exit”开始，该命令将终止shell执行。我们可以对代码进行一些小改动，使其正常工作，如下所示：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now the application has an exit point other than the `kill` command. For now,
    it does not implement any command, besides the `exit` one, and all it does is
    print back whatever you type.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应用程序有了除“kill”命令之外的退出点。目前，除了“exit”命令之外，它并没有实现任何命令，而只是打印出您输入的任何内容。
- en: Selector
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择器
- en: 'In order to be able to interpret the commands correctly, the message needs
    to be split into arguments. This is the same logic that the operating system applies
    to argument passed to a process. The `strings.Split` function does the trick,
    by specifying a space as a second argument and breaking the string into words,
    as shown in the following code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够正确解释命令，消息需要被分割成参数。这与操作系统应用于传递给进程的参数的逻辑相同。“strings.Split”函数通过指定空格作为第二个参数并将字符串分割成单词来实现这一点，如下面的代码所示：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It''s possible to execute any sort of check on `cmd`, such as the following
    `switch` statement:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 可以对“cmd”执行任何类型的检查，例如以下的“switch”语句：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This allows the user to add a new command by defining a function and adding
    a new `case` to the `switch` statement.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许用户通过定义一个函数并在“switch”语句中添加一个新的“case”来添加新的命令。
- en: Command execution
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令执行
- en: 'Now that everything is set, it only remains to define what the various commands
    will actually do. We can define the type of the function that executes a command
    and how the switch behaves:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切都准备就绪，唯一剩下的就是定义各种命令将实际执行的操作。我们可以定义执行命令的函数类型以及“switch”的行为：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The return value tells the application whether it needs to terminate or not
    and allows us to define our `exit` function easily, without it being a special
    case:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值告诉应用程序是否需要终止，并允许我们轻松定义我们的“exit”函数，而不需要它成为一个特殊情况：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We could implement any type of command now, depending on the scope of our application.
    Let''s create a `shuffle` command, which will print the arguments in a shuffled
    order with the help of the `math`/`rand` package:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以实现任何类型的命令，具体取决于我们应用程序的范围。让我们创建一个“shuffle”命令，它将使用“math”/“rand”包以随机顺序打印参数：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We could interact with the filesystem and files by creating a print command
    that will show in the output of the contents of a file:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过创建一个“print”命令与文件系统和文件进行交互，该命令将在输出中显示文件的内容：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Some refactor
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一些重构
- en: 'The current version of the pseudo-terminal application could be improved with
    a little refactoring. We could start by defining a command as a custom type, with
    a couple of methods that describe its behavior:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 伪终端应用程序的当前版本可以通过一些重构来改进。我们可以通过将命令定义为自定义类型，并添加描述其行为的一些方法来开始：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'All of the information about each command can be self-contained in a structure. We
    can also start defining commands that depend on other commands, such as a help
    command. If we have a slice or a map of commands defined somewhere in the `var
    cmds []cmd` package, the `help` command will be as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 每个命令的所有信息都可以包含在一个结构中。我们还可以开始定义依赖其他命令的命令，比如帮助命令。如果我们在“var cmds []cmd”包中定义了一些命令的切片或映射，那么“help”命令将如下所示：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The part of the main loop that selects the correct command will be slightly
    different; it will need to find the match in the slice and execute it:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 选择正确命令的主循环的部分将略有不同；它需要在切片中找到匹配项并执行它：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now that there is a `help` command that shows the list of available commands,
    we can advocate using it each time the user specifies a command that does not
    exist—as we are currently doing when checking whether the index has changed from
    its default value, `-1`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有一个“help”命令，显示了可用命令的列表，我们可以建议用户在每次指定不存在的命令时使用它——就像我们当前检查索引是否已从其默认值“-1”更改一样。
- en: Improving the PTY
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进PTY
- en: Now that we have seen how to create a basic pseudo-terminal, we will see how
    to improve it with some additional features.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到如何创建一个基本的伪终端，我们将看到如何通过一些附加功能来改进它。
- en: Multiline input
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多行输入
- en: 'The first thing that can be improved is the relationship between arguments
    and spacing, by adding support for quoted strings. This can be done with `bufio.Scanner` with
    a custom split function that behaves like `bufio.ScanWords` apart from the fact
    that it''s aware of quotes. The following code demonstrates this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 可以改进的第一件事是参数和间距之间的关系，通过添加对带引号字符串的支持。这可以通过具有自定义分割函数的“bufio.Scanner”来实现，该函数的行为类似于“bufio.ScanWords”，除了它知道引号的存在。以下代码演示了这一点：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The function has a first block that skips spaces and finds the first non-space
    character; if that character is a quote, it is skipped. Then, it looks for the
    first character that terminates the argument, which is a space for normal arguments,
    and the respective quote for the other arguments:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数有一个跳过空格并找到第一个非空格字符的第一个块；如果该字符是引号，则跳过它。然后，它查找终止参数的第一个字符，对于普通参数是空格，对于其他参数是相应的引号：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If the end of file is reached while in a quoted context, the partial string
    is returned; otherwise, the quote is not skipped and more data is requested:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在引用上下文中达到文件结尾，则返回部分字符串；否则，不跳过引号并请求更多数据：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The full example is available at: [https://play.golang.org/p/CodJjcpzlLx](https://play.golang.org/p/CodJjcpzlLx).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的示例可在以下链接找到：[https://play.golang.org/p/CodJjcpzlLx](https://play.golang.org/p/CodJjcpzlLx)。
- en: 'Now we can use this as our line for parsing the arguments, while using the helper
    structure, `argsScanner`, defined as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用这个作为解析参数的行，同时使用如下定义的辅助结构“argsScanner”：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This custom slice will allow us to receive lines with quotes and new lines
    between quotes by changing how the loop works:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通过更改循环的工作方式，这个自定义切片将允许我们接收带引号和引号之间的新行的行：
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Providing color support to the pseudo-terminal
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为伪终端提供颜色支持
- en: 'The pseudo-terminal can be improved by providing colored output. We have already
    seen that, in Unix, there are escape sequences that can change the background
    and foreground color. Let''s start by defining a custom type:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 伪终端可以通过提供彩色输出来改进。我们已经看到，在Unix中有可以改变背景和前景颜色的转义序列。让我们首先定义一个自定义类型：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This new type can be used to enhance commands with colored output. For instance,
    let''s take the `shuffle` command  and use alternate colors to distinguish between strings,
    now that we support arguments with spaces:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这种新类型可以用于增强具有彩色输出的命令。例如，让我们使用交替颜色来区分字符串，现在我们支持带有空格的参数的`shuffle`命令：
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Suggesting commands
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建议命令
- en: When the specified command does not exist, we can suggest some similar commands.
    In order to do so, we can use the Levenshtein distance formula, which measures
    the similarity between strings by counting deletions, insertions, and substitutions
    needed to go from one string to the other.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当指定的命令不存在时，我们可以建议一些类似的命令。为了这样做，我们可以使用Levenshtein距离公式，通过计算从一个字符串到另一个字符串所需的删除、插入和替换来衡量字符串之间的相似性。
- en: 'In the following code, we will use the `agnivade/levenshtein` package, which
    will be obtained through the `go get` command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，我们将使用`agnivade/levenshtein`包，这将通过`go get`命令获得：
- en: '[PRE18]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then, we define a new function to call when there is no match with existing
    commands:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们定义一个新函数，当现有命令没有匹配时调用：
- en: '[PRE19]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Extensible commands
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可扩展命令
- en: 'The current limitation of our pseudo-terminal is its extensibility. If a new
    command needs to be added, it needs to be added directly into the main package.
    We can think of a way of separating the commands from the main package and allowing
    other users to extend the functionality with their commands:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们伪终端的当前限制是其可扩展性。如果需要添加新命令，需要直接添加到主包中。我们可以考虑一种方法，将命令与主包分离，并允许其他用户使用其命令扩展功能：
- en: 'The first step is creating an exported command. Let''s use an interface to
    define a command, so that the user can implement their own:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是创建一个导出的命令。让我们使用一个接口来定义一个命令，以便用户可以实现自己的命令：
- en: '[PRE20]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now we can specify a list of commands and a function for other packages to
    add other commands:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以指定一系列命令和一个函数，让其他包添加其他命令：
- en: '[PRE21]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We can provide a base implementation of the command, to execute simple functions:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以提供一个命令的基本实现，以执行简单的功能：
- en: '[PRE22]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We can provide a function that matches a command to the name:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以提供一个函数，将命令与名称匹配：
- en: '[PRE23]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can use the logic from the previous example to make this function return
    the suggestion command, which will be defined as follows:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用前面示例中的逻辑，使此函数返回建议的命令，其定义如下：
- en: '[PRE24]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We can already register a couple of commands in the `exit` and `help` packages.
    Only `help` can be defined here, because the list of commands is private:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以在`exit`和`help`包中注册一些命令。只有`help`可以在这里定义，因为命令列表是私有的：
- en: '[PRE25]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This approach will allow a user to use the `commandBase` struct to create a
    simple command, or to embed it or use a custom struct if their command requires
    it (like a command with a state):'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法将允许用户使用`commandBase`结构来创建一个简单的命令，或者嵌入它或使用自定义结构，如果他们的命令需要它（比如带有状态的命令）：
- en: '[PRE26]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The difference between the `MyCmd` struct and the `MyImpl` struct is that one
    can be used as decorator for another command, while the second is a different
    implementation so it can't interact with another command.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`MyCmd`结构和`MyImpl`结构之间的区别在于一个可以用作另一个命令的装饰器，而第二个是不同的实现，因此它不能与另一个命令交互。'
- en: Commands with status
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带状态的命令
- en: Until now, we have created commands that don't have an internal state. But some
    commands can keep an internal state and change its behavior accordingly. The state
    could be limited to the session itself or it could be shared across multiple sessions.
    The more obvious example is the command history in the Terminal, where all commands
    executed are stored and retained between sessions.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经创建了没有内部状态的命令。但是有些命令可以保持内部状态并相应地改变其行为。状态可以限制在会话本身，也可以跨多个会话共享。最明显的例子是终端中的命令历史，其中执行的所有命令都被存储并在会话之间保留。
- en: Volatile status
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 易失状态
- en: The easiest thing to implement is a status that is not persistent and gets lost
    when the application exits. All we need to do is create a custom data structure
    that hosts the status and satisfies the command interface. The methods will belong
    to the pointer to the type, as otherwise they will not be able to modify the data.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 最容易实现的是一个不持久的状态，当应用程序退出时会丢失。我们所需要做的就是创建一个自定义数据结构，托管状态并满足命令接口。方法将属于类型的指针，否则它们将无法修改数据。
- en: 'In the following example, we will create a very basic memory storage that works
    as a stack (first in, last out) with arguments. Let''s start with the push and
    pop functionalities:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们将创建一个非常基本的内存存储，它作为一个堆栈（先进后出）与参数一起工作。让我们从推送和弹出功能开始：
- en: '[PRE27]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The strings stored in the stack represent the state of the command. Now, we
    need to implement the methods of the command interface—we can start with the easiest
    ones:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 堆栈中存储的字符串表示命令的状态。现在，我们需要实现命令接口的方法——我们可以从最简单的开始：
- en: '[PRE28]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now we need to decide how it works internally. There will be two sub-commands:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要决定它在内部是如何工作的。将有两个子命令：
- en: '`push`, followed by one or more arguments, will push to the stack.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`push`，后跟一个或多个参数，将推送到堆栈。'
- en: '`pop` will take the topmost element of the stack and it will not need any argument.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pop`将取出堆栈的顶部元素，不需要任何参数。'
- en: 'Let''s define a helper method, `isValid`, that checks whether the arguments
    are valid:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义一个辅助方法`isValid`，检查参数是否有效：
- en: '[PRE29]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now, we can implement the command execution method that will use the validity
    check. If this is passed, it will execute the selected command or show a help
    message:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以实现命令执行方法，它将使用有效性检查。如果通过了这一点，它将执行所选的命令或显示帮助消息：
- en: '[PRE30]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Persistent status
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持久状态
- en: 'The next step is to persist the status between sessions, and this requires
    some action to be executed when the application starts and another one to be executed
    when the application ends. These new behaviors could be integrated with some changes
    on the command interface:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在会话之间持久化状态，这需要在应用程序启动时执行一些操作，并在应用程序结束时执行另一些操作。这些新行为可以与命令接口的一些更改集成：
- en: '[PRE31]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The `Startup()` method is responsible for the status and loading it when the
    application starts, and the `Shutdown()` method needs to save the current status
    to the disk before `exit`. We can update the `Base` structure with these methods;
    however, this will not do anything, because there''s no status:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`Startup()`方法负责在应用程序启动时加载状态，`Shutdown()`方法需要在`exit`之前将当前状态保存到磁盘。我们可以使用这些方法更新`Base`结构；但是，这不会做任何事情，因为没有状态：'
- en: '[PRE32]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The command list is not exported; it is the unexported variable, `commands`.
    We can add two functions that will interact with such a list, and make sure we
    execute these methods, `Startup` and `Shutdown`, on all available commands:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 命令列表没有被导出；它是未导出的变量`commands`。我们可以添加两个函数，这些函数将与这样一个列表进行交互，并确保我们在所有可用的命令上执行这些方法，`Startup`和`Shutdown`：
- en: '[PRE33]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The final step is using these functions within the main application before
    starting the main loop:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是在主循环开始之前在主应用程序中使用这些函数：
- en: '[PRE34]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Upgrading the Stack command
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 升级Stack命令
- en: 'We want the command we defined before, `Stack`, to be able to save its state
    between sessions. The simplest solution is to save the contents of the stack as
    a text file, with one element per line. We can make this file unique for each
    user, using the OS/user package to place it in the user `home` directory:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望之前定义的`Stack`命令能够在会话之间保存其状态。最简单的解决方案是将堆栈的内容保存为文本文件，每行一个元素。我们可以使用OS/user包将此文件对每个用户设置为唯一，并将其放置在用户的`home`目录中：
- en: '[PRE35]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Let''s start writing; we will create and truncate the file (setting its size
    to `0` using the `TRUNC` flag) and write the following lines:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始写作；我们将创建并截断文件（使用`TRUNC`标志将其大小设置为`0`），并写入以下行：
- en: '[PRE36]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The method used during the shutdown will read the file line by line and will
    add the elements to the stack. We can use `bufio.Scanner`, as we saw in a previous
    chapter, to do this easily:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在关闭期间使用的方法将逐行读取文件，并将元素添加到堆栈中。我们可以使用`bufio.Scanner`，就像我们在之前的章节中看到的那样，轻松地做到这一点：
- en: '[PRE37]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we went through some terminology, in order to understand why
    modern Terminal applications exist and how they evolved.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过一些术语，以便理解为什么现代终端应用程序存在以及它们是如何发展的。
- en: Then, we focused on how to implement a basic pseudo-terminal. The first step
    was to create a loop that handled input management, then it was necessary to create
    a command selector and finally an executor. The selector could choose between
    a series of functions defined in the package, and we created a special command
    to exit the application. With some refactoring, we went from functions to structs
    containing both the name and action.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们专注于如何实现基本的伪终端。第一步是创建一个处理输入管理的循环，然后需要创建一个命令选择器，最后是一个执行器。选择器可以在包中选择一系列定义的函数，并且我们创建了一个特殊的命令来退出应用程序。通过一些重构，我们从函数转变为包含名称和操作的结构体。
- en: We saw how to improve the application in various ways. First, we created a support
    for multiline input (using a custom split function for a scanner) that supported
    quoted strings, with new lines. Then, we created some tools to add colored output
    to our functions and used them in one of the commands previously defined. We also
    used Levenshtein distance to suggest similar commands when the user specifies
    a non-existing one.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了如何以各种方式改进应用程序。首先，我们创建了对多行输入的支持（使用自定义的分割函数来支持带引号的字符串，以及换行符）。然后，我们创建了一些工具来为我们的函数添加有色输出，并在之前定义的某个命令中使用它们。当用户指定一个不存在的命令时，我们还使用Levenshtein距离来建议类似的命令。
- en: Finally, we separated commands from the main application and created a way of
    registering new commands from the outside. We used an interface because this allows
    better extension and customization, together with a basic implementation of the
    interface.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将命令与主应用程序分离，并创建了一种从外部注册新命令的方式。我们使用了接口，因为这允许更好的扩展和定制，以及接口的基本实现。
- en: In the next chapter, we will start talking about process properties and child
    processes.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始讨论进程属性和子进程。
- en: Questions
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is a Terminal, and what is a pseudo-terminal?
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是终端，什么是伪终端？
- en: What should a pseudo-terminal be able to do?
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 伪终端应该能够做什么？
- en: What Go tools did we use in order to emulate a Terminal?
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用了哪些Go工具来模拟终端？
- en: How can my application get instructions from standard input?
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我的应用程序如何从标准输入获取指令？
- en: What is the advantage of using interfaces for commands?
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用接口来实现命令有什么优势？
- en: What's the Levenshtein distance? Why can it be useful in pseudo-terminals?
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Levenshtein距离是什么？为什么在伪终端中有用？
