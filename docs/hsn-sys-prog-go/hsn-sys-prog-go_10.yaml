- en: Handling Processes and Daemons
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理进程和守护进程
- en: This chapter will introduce you to how to handle the properties of the current
    process using the Go standard library, and how to change them. We will also focus
    on how to create child processes and give an overview of the `os/exec` package.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍如何使用Go标准库处理当前进程的属性，以及如何更改它们。我们还将重点介绍如何创建子进程，并概述`os/exec`包。
- en: Finally, we will explain what daemons are, what properties they have, and how
    to create them using the standard library.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将解释守护进程是什么，它们具有什么属性，以及如何使用标准库创建它们。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding processes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解进程
- en: Child processes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子进程
- en: Beginning with daemons
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从守护进程开始
- en: Creating a service
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建服务
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires Go to be installed and your favorite editor to be set
    up. For more information, you can refer to [Chapter 3](602a92d5-25f7-46b8-83d4-10c6af1c6750.xhtml), *An
    Overview of Go*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要安装Go并设置您喜欢的编辑器。有关更多信息，您可以参考[第3章](602a92d5-25f7-46b8-83d4-10c6af1c6750.xhtml)，*Go概述*。
- en: Understanding processes
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解进程
- en: We have already seen the importance of processes in the Unix operating system,
    so now we will look at how to obtain information on the current process and how
    to create and handle child processes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了Unix操作系统中进程的重要性，现在我们将看看如何获取有关当前进程的信息以及如何创建和处理子进程。
- en: Current process
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当前进程
- en: The Go standard library allows us to get information on the current process.
    This is done by using a series of functions that are available in the `os` package.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Go标准库允许我们获取有关当前进程的信息。这是通过使用`os`包中提供的一系列函数来完成的。
- en: Standard input
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准输入
- en: 'The first two things that a program may want to know are its identifier and
    the parent identifier, that is, PID and PPID. This is actually pretty straightforward
    – the `os.Getpid()` and `os.Getppid()` functions both return an integer value
    with both of the identifiers, as shown in the following code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 程序可能想要知道的第一件事是它的标识符和父标识符，即PID和PPID。这实际上非常简单 - `os.Getpid()`和`os.Getppid()`函数都返回一个整数值，其中包含这两个标识符，如下面的代码所示：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The full example is available at [https://play.golang.org/p/ng0m9y4LcD5](https://play.golang.org/p/ng0m9y4LcD5).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 完整示例可在[https://play.golang.org/p/ng0m9y4LcD5](https://play.golang.org/p/ng0m9y4LcD5)找到。
- en: User and group ID
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户和组ID
- en: Another piece of information that can be handy is the current user and the groups
    that the process belongs to. A typical user case could be to compare them with
    a file-specific permission.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的信息是当前用户和进程所属的组。一个典型的用例可能是将它们与特定文件的权限进行比较。
- en: 'The `os` package offers the following functions:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`os`包提供以下功能：'
- en: '`os.Getuid()`: Returns the user ID of the process owner'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`os.Getuid()`: 返回进程所有者的用户ID'
- en: '`os.Getgid()`: Returns the group ID of the process owner'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`os.Getgid()`: 返回进程所有者的组ID'
- en: '`os.Getgroups()`: Returns additional group IDs of the process owner'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`os.Getgroups()`: 返回进程所有者的附加组ID'
- en: 'We can see that these three functions return IDs in their numerical form:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到这三个函数返回它们的数字形式的ID：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The full example is available at [https://play.golang.org/p/EqmonEEc_ZI](https://play.golang.org/p/EqmonEEc_ZI).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 完整示例可在[https://play.golang.org/p/EqmonEEc_ZI](https://play.golang.org/p/EqmonEEc_ZI)找到。
- en: 'In order to get the names of users and groups, there are some helper functions
    in the `os/user` package. These functions (with a pretty self-explanatory name)
    are as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获取用户和组的名称，`os/user`包中有一些辅助函数。这些函数（名称相当自明）如下：
- en: '`func LookupGroupId(gid string) (*Group, error)`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`func LookupGroupId(gid string) (*Group, error)`'
- en: '`func LookupId(uid string) (*User, error)`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`func LookupId(uid string) (*User, error)`'
- en: Even if the user ID is an integer, it takes a string as an argument, and so
    a conversion needs to be done. The easiest way to do that is to use the `strconv` package,
    which offers a series of utilities to convert from strings into the other basic
    data types, and vice versa.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 即使用户ID是一个整数，它需要一个字符串作为参数，因此需要进行转换。最简单的方法是使用`strconv`包，它提供了一系列实用程序，用于将字符串转换为其他基本数据类型，反之亦然。
- en: 'We can see them in action in the following example:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下示例中看到它们的作用：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The full example is available at [https://play.golang.org/p/C6EWF2c50DT](https://play.golang.org/p/C6EWF2c50DT).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 完整示例可在[https://play.golang.org/p/C6EWF2c50DT](https://play.golang.org/p/C6EWF2c50DT)找到。
- en: Working directory
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作目录
- en: Another very useful piece of information that a process can give us access to
    is the working directory so that we can change it. In [Chapter 4](0b73653d-6073-4708-b015-fe6a43cb9f37.xhtml), *Working
    with the Filesystem*, we learned about which tools we can use – `os.Getwd` and `os.Chdir`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 进程可以提供给我们的另一个非常有用的信息是工作目录，以便我们可以更改它。在[第4章](0b73653d-6073-4708-b015-fe6a43cb9f37.xhtml)，*与文件系统一起工作*中，我们了解了可以使用的工具
    - `os.Getwd`和`os.Chdir`。
- en: 'In the following practical example, will look at how to use these functions
    to manipulate the working directory:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下实际示例中，我们将看看如何使用这些函数来操作工作目录：
- en: First, we will obtain the current working directory and use it to get the path
    of the binary.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将获取当前工作目录，并使用它获取二进制文件的路径。
- en: Then, we will join the working directory with another path and use it create
    a directory.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将工作目录与另一个路径连接起来，并使用它创建一个目录。
- en: Finally, we will use the path of the directory we just created to change the
    current working directory.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将使用刚创建的目录的路径来更改当前工作目录。
- en: 'Check out the following code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下代码：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The full example is available at [https://play.golang.org/p/UXAer5nGBtm](https://play.golang.org/p/UXAer5nGBtm).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 完整示例可在[https://play.golang.org/p/UXAer5nGBtm](https://play.golang.org/p/UXAer5nGBtm)找到。
- en: Child processes
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 子进程
- en: 'A Go application can interact with the operating system to create some other
    processes. Another subpackage of `os` offers the functionality to create and run
    new processes. Inside the `os/exec` package, there is the `Cmd` type, which represents
    command execution:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Go应用程序可以与操作系统交互，创建其他进程。`os`的另一个子包提供了创建和运行新进程的功能。在`os/exec`包中，有一个`Cmd`类型，表示命令执行：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The easiest way to create a new command is by using the `exec.Command` function,
    which takes the executable path and a series of arguments. Let''s look at a simple
    example with an `echo` command and some arguments:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新命令的最简单方法是使用`exec.Command`函数，它接受可执行路径和一系列参数。让我们看一个简单的例子，使用`echo`命令和一些参数：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The full example is available at [https://play.golang.org/p/dBIAUteJbxI](https://play.golang.org/p/dBIAUteJbxI).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的示例可在[https://play.golang.org/p/dBIAUteJbxI](https://play.golang.org/p/dBIAUteJbxI)找到。
- en: 'One very important detail is the nature of standard input, output, and error
    – they are all interfaces that we are already familiar with:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常重要的细节是标准输入、输出和错误的性质-它们都是我们已经熟悉的接口：
- en: The input is an `io.Reader`, which could be `bytes.Reader`, `bytes.Buffer`,
    `strings.Reader`, `os.File`, or any other implementation.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入是一个`io.Reader`，可以是`bytes.Reader`、`bytes.Buffer`、`strings.Reader`、`os.File`或任何其他实现。
- en: The output and the error are `io.Writer`, can also be `os.File` or `bytes.Buffer`,
    and can also be `strings.Builder` or any another writer implementation.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出和错误都是`io.Writer`，也可以是`os.File`或`bytes.Buffer`，也可以是`strings.Builder`或任何其他的写入器实现。
- en: 'There are different ways to launch the process, depending on what the parent
    application needs:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 根据父应用程序的需求，有不同的启动进程的方式：
- en: '`Cmd.Run`: Executes the command, and returns an error that is `nil` if the
    child process is executed correctly.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Cmd.Run`：执行命令，并返回一个错误，如果子进程正确执行，则为`nil`。'
- en: '`Cmd.Start `: Executes the command asynchronously and lets the parent continue
    its flow. In order to wait for the child process to finish its execution, there
    is another method, `Cmd.Wait`.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Cmd.Start`：异步执行命令，并让父进程继续其流程。为了等待子进程完成执行，还有另一种方法`Cmd.Wait`。'
- en: '`Cmd.Output`: Executes the command and returns its standard output, and returns
    an error if `Stderr` isn''t defined but the standard error produced the output.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Cmd.Output`：执行命令并返回其标准输出，如果`Stderr`未定义但标准错误产生了输出，则返回错误。'
- en: '`Cmd.CombinedOutput`: Executes the command and returns both a standard error
    and output combined, which is very useful when the entire output of the child
    process-standard output plus standard error needs to be checked or saved.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Cmd.CombinedOutput`：执行命令并返回标准错误和输出的组合，当需要检查或保存子进程的整个输出-标准输出加标准错误时非常有用。'
- en: Accessing child properties
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问子属性
- en: 'Once the command has started its execution, synchronously or not, the underlying `os.Process` gets
    populated and it is possible to see its PID, as we can see in the following example:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令开始执行，同步或异步，底层的`os.Process`就会被填充，可以看到它的PID，就像下面的例子中所示的那样：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Standard input
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准输入
- en: 'Standard input can be used to send some data from the application to the child
    process. A buffer can be used to store the data and let the command read it, as
    shown in the following example:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 标准输入可以用来从应用程序向子进程发送一些数据。可以使用缓冲区来存储数据，并让命令读取它，就像下面的例子中所示的那样：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Beginning with daemons
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从守护进程开始
- en: In Unix, all of the programs that are running in the background are called **daemons**. They
    usually have a name that ends with the letter *d*, like `sshd` or `syslogd`, and
    they provide many functionalities of the OS.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unix中，所有在后台运行的程序都被称为**守护进程**。它们通常以字母*d*结尾，比如`sshd`或`syslogd`，并提供操作系统的许多功能。
- en: Operating system support
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作系统支持
- en: 'In macOS, Unix, and Linux, a process is a daemon if it survives its parent
    life cycle, that is, when the parent process terminates its execution and the
    child process lives on. That''s because the process parent is changed to the `init` process,
    a special daemon with no parent, and PID 1, which starts and terminates with the
    OS. Before going into this further, let''s introduce two very important concepts – *sessions* and *process
    groups*:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS、Unix和Linux中，如果一个进程在其父进程生命周期结束后仍然存在，那么它就是一个守护进程，这是因为父进程终止执行后，子进程的父进程会变成`init`进程，一个没有父进程的特殊守护进程，PID为1，它随着操作系统的启动和终止而启动和终止。在进一步讨论之前，让我们介绍两个非常重要的概念-
    *会话* 和 *进程组*：
- en: A process group is a collection of processes that share signal handling. The
    first process of the group is called the **group leader**. There is a Unix system
    call, `setpgid`, that is capable of changing the group for a process, but it has
    some limits. The process can change its own process group, or change the group
    of one of its child processes before the `exec` system call is executed on it.
    When the process group changes, the session group needs to be changed accordingly,
    the same as for the leader of the destination group.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进程组是一组共享信号处理的进程。该组的第一个进程称为**组长**。有一个Unix系统调用`setpgid`，可以改变进程的组，但有一些限制。进程可以在`exec`系统调用执行之前改变自己的进程组，或者改变其一个子进程的组。当进程组改变时，会话组也需要相应地改变，目标组的领导者也是如此。
- en: A session is a collection of process groups that allow us to impose a series
    of restrictions on process groups and other operations. A session doesn't allow
    process group migration to another session, and it prevents processes from creating
    process groups in different sessions. The `setsid` system call allows us to change
    the process session to a new session if the process isn't a process group leader.
    Also, the first process group ID sets the session ID. If this ID is the same as
    the one of the running process, that process is called the **session leader**.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会话是一组进程组，允许我们对进程组和其他操作施加一系列限制。会话不允许进程组迁移到另一个会话，并且阻止进程在不同会话中创建进程组。`setsid`系统调用允许我们改变进程会话到一个新的会话，如果进程不是进程组领导者。此外，第一个进程组ID设置为会话ID。如果这个ID与正在运行的进程的ID相同，那么该进程被称为**会话领导者**。
- en: 'Now that we''ve explained these two properties, we can look at the standard
    operations that are needed to create a daemon, which are usually the following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经解释了这两个属性，我们可以看看创建守护进程所需的标准操作，通常包括以下操作：
- en: Clean up the environment to remove unnecessary variables.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理环境以删除不必要的变量。
- en: Create a fork so that the main process can terminate the process normally.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个fork，以便主进程可以正常终止进程。
- en: 'Use the `setsid` system call, which accomplishes these three steps:'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`setsid`系统调用，完成以下三个步骤：
- en: Remove the PPID from the forked process so that it gets adopted by the `init` process
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从fork的进程中删除PPID，以便它被`init`进程接管
- en: Create a new session for the fork, which will become the session leader
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为fork创建一个新的会话，这将成为会话领导者
- en: Set the process as the group leader
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将进程设置为组领导者
- en: The fork's current directory is set to the root directory to avoid having other
    directories in use, and all the files opened by the parent are closed (the child
    will open them if needed).
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: fork的当前目录设置为根目录，以避免使用其他目录，并且父进程打开的所有文件都被关闭（如果需要，子进程将打开它们）。
- en: Setting standard input to `/dev/null` and using some log files as standard output
    and error.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将标准输入设置为`/dev/null`，并使用一些日志文件作为标准输出和错误。
- en: Optionally, the fork can be forked again, and can then exit. The first fork
    will be the group leader, and the second one will have the same group, allowing
    us to have another fork that isn't a group leader.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选地，fork可以再次fork，然后退出。第一个fork将成为组领导者，第二个将具有相同的组，允许我们有另一个不是组领导者的fork。
- en: This is valid for Unix-based operating systems, though Windows also has support
    for permanent background processes, which are called **services**. Services can
    start automatically at boot or be started and stopped manually using a visual
    application called **Service Control Manager** (**SCM**). They can also be controlled
    from a command line, using the `sc` command in the regular prompt, and via the `Start-Service` and `Stop-Service` cmdlets
    in PowerShell.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这对基于Unix的操作系统有效，尽管Windows也支持永久后台进程，称为**服务**。服务可以在启动时自动启动，也可以使用名为**服务控制管理器**（**SCM**）的可视应用程序手动启动和停止。它们还可以通过常规提示中的`sc`命令以及PowerShell中的`Start-Service`和`Stop-Service`
    cmdlet来进行控制。
- en: Daemons in action
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 守护进程的操作
- en: Now that we understand what a daemon is and how it works, we can attempt to
    use the Go standard library to create one. Go applications are multithreaded and
    don't allow us to call to the `fork` system call directly.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了守护进程是什么以及它是如何工作的，我们可以尝试使用Go标准库来创建一个。Go应用程序是多线程的，不允许直接调用`fork`系统调用。
- en: We have learned that the `Cmd.Start` method in the `os/exec` package allows
    us to start a process asynchronously. The second step is to use the `release`
    method to close all the resources from the current process.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学会了`os/exec`包中的`Cmd.Start`方法允许我们异步启动一个进程。第二步是使用`release`方法关闭当前进程的所有资源。
- en: 'The following example shows us how to do this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例向我们展示了如何做到这一点：
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s see what the `forkProcess` function does, create another process, and
    start it:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`forkProcess`函数的作用，创建另一个进程，并启动它：
- en: 'First, the process working directory gets set to root, and the output and error
    streams are set to the standard ones:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，进程的工作目录被设置为根目录，并且输出和错误流被设置为标准流：
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, we can release the resources – first, though, we need to find the current
    process. Then, we can call the `os.Process` method, `Release`, to ensure that
    the main process releases its resources:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以释放资源 - 首先，我们需要找到当前进程。然后，我们可以调用`os.Process`方法`Release`，以确保主进程释放其资源：
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `main` function will contain the daemon logic, which in this example is
    very simple – it will just print what is running every few seconds:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`main`函数将包含守护逻辑，在这个例子中非常简单 - 它将每隔几秒打印正在运行的内容。'
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Services
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务
- en: We have already seen how the first process that lives from boot to the shutdown
    of the OS is called `init` or `init.d` since it's a daemon. This process is responsible
    for handling the other daemons, and stores its configuration in the `/etc/init.d` directory.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了从引导到操作系统关闭的第一个进程被称为`init`或`init.d`，因为它是一个守护进程。这个进程负责处理其他守护进程，并将其配置存储在`/etc/init.d`目录中。
- en: Each Linux distribution uses its own version of the daemon control process,
    like `upstart` for Chrome OS or `systemd` in Arch Linux. They all serve the same
    purpose and have similar behavior.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Linux发行版都使用自己的守护进程控制过程版本，例如Chrome OS中的`upstart`或Arch Linux中的`systemd`。它们都有相同的目的并且行为类似。
- en: Each daemon has a control script or application that resides inside `/etc/init.d` and
    should be able to interpret a series of commands as first arguments, such as `status`, `start`, `stop`,
    and `restart`. In most cases, the `init.d` file is a script that executes a switch
    on the argument and behaves accordingly.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 每个守护进程都有一个控制脚本或应用程序，驻留在`/etc/init.d`中，并且应该能够解释一系列命令作为第一个参数，例如`status`，`start`，`stop`和`restart`。在大多数情况下，`init.d`文件是一个脚本，根据参数执行开关并相应地行为。
- en: Creating a service
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个服务
- en: 'Some applications are capable of automatically handling their service file,
    and this is what we will try to achieve, step by step. Let''s start with an `init.d` script:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一些应用程序能够自动处理它们的服务文件，这就是我们将逐步尝试实现的内容。让我们从一个`init.d`脚本开始：
- en: '[PRE12]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This is a sample script that passes the first argument to the daemon. The path
    to the binary will be dependent on where the file is located. This needs to be
    defined at runtime:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个将第一个参数传递给守护程序的示例脚本。二进制文件的路径将取决于文件的位置。这需要在运行时定义：
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `main` function will handle the different commands, as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`main`函数将处理不同的命令，如下所示：'
- en: '[PRE14]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'How can we make sure that our app is running? A very sound strategy is to use
    a`PID` file, which is a text file that contains the current PID of the running
    process. Let''s define a couple of auxiliary functions to achieve this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何确保我们的应用程序正在运行？一个非常可靠的策略是使用`PID`文件，这是一个包含正在运行进程的当前PID的文本文件。让我们定义一些辅助函数来实现这一点：
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `install` and `uninstall` functions will take care of adding or removing
    the service file located at `/etc/init.d/mydaemon` and requires us to launch the
    app with root permissions because of the file''s location:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`install`和`uninstall`函数将负责添加或删除位于`/etc/init.d/mydaemon`的服务文件，并要求我们以root权限启动应用程序，因为文件的位置：'
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Once the file is created, we can install the app as a service with the `mydaemon
    install` command and remove it with `mydaemon uninstall`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 创建文件后，我们可以使用`mydaemon install`命令将应用程序安装为服务，并使用`mydaemon uninstall`命令将其删除。
- en: 'Once the daemon has been installed, we can use `sudo service mydaemon [start|stop|status]` to
    control the daemon. Now, all we need to do is implement these actions:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 守护程序安装完成后，我们可以使用`sudo service mydaemon [start|stop|status]`来控制守护程序。现在，我们只需要实现这些操作：
- en: '`status` will look for the `pid` file, read it, and send a signal to the process
    to check whether it''s running.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`status`将查找`pid`文件，读取它，并向进程发送信号以检查它是否正在运行。'
- en: '`start` will run the application with the `run` command and write the `pid` file.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start`将使用`run`命令运行应用程序，并写入`pid`文件。'
- en: '`stop`  will get the `pid` file, find the process, kill it, and then remove
    the `pid` file.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stop`将获取`pid`文件，找到进程，杀死它，然后删除`pid`文件。'
- en: 'Let''s take a look at how the `status` command is implemented. Note that the `0` signal
    doesn''t exist in Unix, and doesn''t trigger an action from the operating system
    or the app, but the operation will fail if the process isn''t running. This tells
    us whether the process is alive or not:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`status`命令是如何实现的。请注意，在Unix中不存在`0`信号，并且不会触发操作系统或应用程序的操作，但如果进程没有运行，操作将失败。这告诉我们进程是否存活：
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the `start` command, we will create the daemon by following the steps we
    covered in the *Operating system support* *section*:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在`start`命令中，我们将按照*操作系统支持*部分中介绍的步骤创建守护程序：
- en: Use files for standard output and input
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用文件进行标准输出和输入
- en: Set the working directory to root
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将工作目录设置为根目录
- en: Start the command asynchronously
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 异步启动命令
- en: 'In addition to these operations, the `start` command saves the PID value of
    the process in a specific file, which will be used to see whether the process
    is alive:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些操作，`start`命令还将进程的PID值保存在特定文件中，用于查看进程是否存活：
- en: '[PRE18]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Lastly, `stopApp` will terminate the process identified by the PID file, if
    it exists:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`stopApp`将终止由PID文件标识的进程（如果存在）：
- en: '[PRE19]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, all of the parts that are needed for an application''s control are there,
    and all that is missing is the main application part, which should be a loop so
    that the daemon stays alive:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，应用程序控制所需的所有部分都已经准备就绪，唯一缺少的是主应用程序部分，它应该是一个循环，以便守护程序保持活动状态：
- en: '[PRE20]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In this example, all it does is sleep for a fixed amount of time, between the
    loop iterations. This is generally a good idea in a main loop, because an empty `for` loop
    would use a lot of resources for no reason. Let's assume that your application
    is checking for a certain condition in a `for` loop. If that is satisfied, continually
    checking for this will use a lot of resources. Adding an idle sleep of a few milliseconds can
    help reduce idle CPU consumption by 90-95%, so keep it in mind when designing
    your daemons!
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，它只是在循环迭代之间固定时间睡眠。这通常是在主循环中一个好主意，因为一个空的`for`循环会无缘无故地使用大量资源。假设你的应用程序在`for`循环中检查某个条件。如果满足条件，不断检查这个条件会消耗大量资源。添加几毫秒的空闲睡眠可以帮助减少90-95%的空闲CPU消耗，因此在设计守护程序时请记住这一点！
- en: Third-party packages
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三方包
- en: So far, we have seen how to implement daemons from scratch using the `init.d` service.
    Our implementation is very simple and limited. It could be improved, but there
    are already many packages that offer the same functionalities. They offer support
    for different providers such as `init.d` and `systemd`, and some of them also
    work across non-Unix OSes such as Windows.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了如何使用`init.d`服务从头开始实现守护程序。我们的实现非常简单和有限。它可以改进，但已经有许多包提供了相同的功能。它们支持不同的提供者，如`init.d`和`systemd`，其中一些还可以在Windows等非Unix操作系统上工作。
- en: One of the more famous packages (more than 1,000 stars on GitHub) is `kardianos/service`,
    which supports all major platforms – Linux, macOS, and Windows.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个更有名的包（在GitHub上有1000多个星）是`kardianos/service`，它支持所有主要平台 - Linux、macOS和Windows。
- en: 'It defines a main interface that represents a daemon and has two methods –
    one for starting the daemon, and the other for stopping it. Both are non-blocking:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 它定义了一个表示守护程序的主接口，并具有两种方法 - 一种用于启动守护程序，另一种用于停止它。两者都是非阻塞的：
- en: '[PRE21]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The package already offers some use cases, from simple to more convoluted ones,
    in the example ([https://github.com/kardianos/service/tree/master/example](https://github.com/kardianos/service/tree/master/example)) directory.
    The best practice is to start a goroutine with the main activity loop. The `Start` method
    can be used to open and prepare the necessary resources, while `Stop` should be
    used to free them, and for other deferred activities such as buffer flushing.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 该包已经提供了一些用例，从简单到更复杂的用例，在示例（[https://github.com/kardianos/service/tree/master/example](https://github.com/kardianos/service/tree/master/example)）目录中。最佳实践是使用主活动循环启动一个goroutine。`Start`方法可用于打开和准备必要的资源，而`Stop`应该用于释放它们，以及其他延迟活动，如缓冲区刷新。
- en: Some other packages only offer compatibility with Unix systems, such as `takama/daemon`
    ([https://github.com/takama/daemon](https://github.com/takama/daemon)), which
    works in a similar fashion. It also offers some usage examples.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 一些其他包只与Unix系统兼容，比如`takama/daemon`（[https://github.com/takama/daemon](https://github.com/takama/daemon)），它的工作方式类似。它也提供了一些使用示例。
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we reviewed how to get information related to the current process,
    PID and PPID, UID and GID,  and the working directory. Then, we saw how the `os/exec` package
    allows us to create child processes, and how their properties can be read similar
    to the current process.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了如何获取与当前进程相关的信息，如PID和PPID，UID和GID，以及工作目录。然后，我们看到了`os/exec`包如何允许我们创建子进程，以及如何读取它们的属性，类似于当前进程。
- en: Next, we looked at what daemons are and how various operating systems support
    them. We verified how simple it is to execute a process that outlives its parent
    with `os/exec` using `Cmd.Run`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们看了一下守护程序是什么，以及各种操作系统如何支持它们。我们验证了使用`os/exec`的`Cmd.Run`来执行一个超出其父进程生存期的进程是多么简单。
- en: Then, we went through the automated daemon management systems that are available
    with Unix, and created an application capable of running with `service` step by
    step.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过Unix提供的自动化守护程序管理系统，逐步创建了一个能够通过`service`运行的应用程序。
- en: In the next chapter, we are going to improve the control we have over child
    processes by checking out how to use exit codes and how to manage and send signals.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过查看如何使用退出代码以及如何管理和发送信号来提高我们对子进程的控制。
- en: Questions
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What information is available for the current process inside a Go application?
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Go应用程序中有哪些关于当前进程的信息可用？
- en: How do you create a child process?
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何创建一个子进程？
- en: How do you ensure that a child process survives its parent?
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何确保子进程能够生存其父进程？
- en: Can you access child properties? How can you use them?
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你能访问子属性吗？你如何使用它们？
- en: What's a daemon in Linux and how are they handled?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Linux中的守护程序是什么，它们是如何处理的？
