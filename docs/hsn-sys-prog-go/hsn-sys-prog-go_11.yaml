- en: Exit Codes, Signals, and Pipes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 退出代码、信号和管道
- en: This chapter will continue on from the previous one and will demonstrate the
    communication between parent and child processes. In particular, the chapter will
    show you how communication can be managed with the correct usage of exit codes,
    through custom signal handling and by connecting processes with pipes. These forms
    of communication will be used to allow our application to communicate effectively
    with the operating system and other processes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将继续上一章，并演示父子进程之间的通信。特别是，本章将向您展示如何通过正确使用退出代码、自定义信号处理和连接进程与管道来管理通信。这些通信形式将用于使我们的应用程序能够有效地与操作系统和其他进程进行通信。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Returning exit codes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回退出代码
- en: Reading exit codes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取退出代码
- en: Intercepting signals
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拦截信号
- en: Sending signals
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送信号
- en: Using pipes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用管道
- en: Using other stream utilities
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用其他流工具
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires Go to be installed and your favorite editor to be set
    up. For more information, you can refer to [Chapter 3](602a92d5-25f7-46b8-83d4-10c6af1c6750.xhtml),
    *An Overview of Go*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要安装Go并设置您喜欢的编辑器。有关更多信息，您可以参考[第3章](602a92d5-25f7-46b8-83d4-10c6af1c6750.xhtml)，*Go概述*。
- en: Using exit codes
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用退出代码
- en: An exit code, or exit status, is a small integer number that is passed from
    a process to its parent when the process exits. It is the simplest way of notifying
    you of the result of the application execution. In [Chapter 2](1c402360-b565-4d0b-b201-fdd6baaa5c5c.xhtml), *Unix
    OS Components,* we briefly mentioned exit codes. We will now learn how to use
    them inside applications and how to interpret the exit codes of child processes.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 退出代码，或退出状态，是进程在退出时传递给其父进程的一个小整数。这是通知您应用程序执行结果的最简单方式。在[第2章](1c402360-b565-4d0b-b201-fdd6baaa5c5c.xhtml)，*Unix操作系统组件*中，我们简要提到了退出代码。现在我们将学习如何在应用程序中使用它们以及如何解释子进程的退出代码。
- en: Sending exit codes
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发送退出代码
- en: 'Exit codes are the way in which a process notifies its parent about its status
    after terminating. In order to return any exit status from the current process,
    there is one function that does the job in a straightforward way: `os.Exit`.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 退出代码是进程在终止后通知其父进程其状态的方式。为了从当前进程返回任何退出状态，有一个函数可以直接完成工作：`os.Exit`。
- en: 'This function takes one argument, that is, an integer, and represents the exit
    code that will be returned to the parent process. This can be verified using a
    simple program, as shown in the following code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数接受一个参数，即整数，并表示将返回给父进程的退出代码。可以使用一个简单的程序进行验证，如下面的代码所示：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The full example is available at [https://play.golang.org/p/-6GIY7EaVD_V](https://play.golang.org/p/-6GIY7EaVD_V).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 完整示例可在[https://play.golang.org/p/-6GIY7EaVD_V](https://play.golang.org/p/-6GIY7EaVD_V)找到。
- en: The exit code, `0`, is used when the application is executed successfully. Any
    other exit code symbolizes some type of error that may have occurred during the
    execution. When the main function finishes, it returns a `0`; when a panic is
    not recovered, it returns a `2`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序成功执行时，使用退出代码`0`。任何其他退出代码都表示在执行过程中可能发生的某种错误。当主函数完成时，它返回`0`；当恐慌未被恢复时，它返回`2`。
- en: Exit codes in bash
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bash中的退出代码
- en: 'Every time a command gets executed in a shell, the resulting exit code gets
    stored in a variable. The status of the last command executed gets stored in the `$?`
    variable, and it can be printed as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 每次在shell中执行命令时，生成的退出代码都会存储在一个变量中。执行的最后一个命令的状态存储在`$?`变量中，可以如下打印：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It is important to note that the exit code only works when you run a binary
    obtained with `go build` or `go install`. If you use `go run`, it will return
    `1` for any code that is not `0`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，退出代码仅在使用`go build`或`go install`获得的二进制文件运行时才有效。如果使用`go run`，则对于任何不是`0`的代码，它将返回`1`。
- en: The exit value bit size
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 退出值位大小
- en: The exit status is an 8-bit integer; this means that even if the argument for
    the Go function is an integer, then the status that is returned will be the result
    of a modulo operation between the passed value and `256`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 退出状态是一个8位整数；这意味着即使Go函数的参数是整数，返回的状态也将是传递值和`256`之间的模运算的结果。
- en: 'Let''s take a look at the following program:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下程序：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The full example is available at [https://play.golang.org/p/vzwI1kDiGrP](https://play.golang.org/p/vzwI1kDiGrP).[ ](https://play.golang.org/p/vzwI1kDiGrP)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 完整示例可在[https://play.golang.org/p/vzwI1kDiGrP](https://play.golang.org/p/vzwI1kDiGrP)找到。
- en: This will have an exit status of `255` even if the function argument is `-1`
    because `(-1)%256=255`. This happens because the exit code is an 8-bit number
    (`0`, `255`).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 即使函数参数为`-1`，这将具有退出状态`255`，因为`(-1)%256=255`。这是因为退出代码是一个8位数字（`0`、`255`）。
- en: Exit and deferred functions
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 退出和延迟函数
- en: One important caveat about this function's use is that deferred functions are
    not executed.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 关于此函数使用的一个重要注意事项是延迟函数不会被执行。
- en: 'The following example will have no output:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将没有输出：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The full example is available at [https://play.golang.org/p/2zbczc_ckgb](https://play.golang.org/p/2zbczc_ckgb).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 完整示例可在[https://play.golang.org/p/2zbczc_ckgb](https://play.golang.org/p/2zbczc_ckgb)找到。
- en: Panics and exit codes
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 恐慌和退出代码
- en: 'If the application terminates for a panic that is not recovered, then the deferred
    function will be executed, but the exit code will be `2`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序因未恢复的恐慌而终止，则延迟函数将被执行，但退出代码将为`2`：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The full example is available at [https://play.golang.org/p/mjOMb0KsM3e](https://play.golang.org/p/mjOMb0KsM3e).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 完整示例可在[https://play.golang.org/p/mjOMb0KsM3e](https://play.golang.org/p/mjOMb0KsM3e)找到。
- en: Exit codes and goroutines
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 退出代码和goroutines
- en: 'If the `os.Exit` function happens in a goroutine, all the goroutines (including
    the main one) will terminate immediately without executing any deferred call,
    as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`os.Exit`函数发生在goroutine中，所有goroutine（包括主goroutine）将立即终止，而不执行任何延迟调用，如下所示：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The full example is available at [https://play.golang.org/p/JVEB5MTcEoa](https://play.golang.org/p/JVEB5MTcEoa).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的示例可在[https://play.golang.org/p/JVEB5MTcEoa](https://play.golang.org/p/JVEB5MTcEoa)找到。
- en: It is necessary for you to use `os.Exit` carefully because, since all the deferred
    operations will not be executed, this could lead to resource leaks or errors,
    such as not flushing a buffer and not writing all the content to a file.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`os.Exit`时需要小心，因为所有延迟操作都不会被执行，这可能导致资源泄漏或错误，比如不刷新缓冲区和未将所有内容写入文件。
- en: Reading child process exit codes
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取子进程退出码
- en: We explored how to create child processes in the previous chapter. Go makes
    it possible for you to easily check child exit codes, however, it's not straightforward
    because there is a field in the `exec.Cmd` struct that has an `os.ProcessState`
    attribute.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一章中探讨了如何创建子进程。Go使您可以轻松检查子进程的退出码，但这并不简单，因为`exec.Cmd`结构中有一个`os.ProcessState`属性的字段。
- en: 'The `os.ProcessState` attribute has a `Sys` method that returns an interface.
    Its value is a `syscall.WaitStatus` struct in Unix, which makes it possible to
    access the exit code using the `ExitCode` method. This is demonstrated using the
    following code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`os.ProcessState`属性有一个`Sys`方法，返回一个接口。在Unix中，它的值是一个`syscall.WaitStatus`结构，可以使用`ExitCode`方法访问退出码。下面的代码演示了这一点：'
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If the command variable cannot be accessed, then the error returned is `exec.ExitError`
    and this wraps the `os.ProcessState` attribute, as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果无法访问命令变量，则返回的错误是`exec.ExitError`，它包装了`os.ProcessState`属性，如下所示：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We can see that obtaining the exit code is not straightforward and requires
    some typecasting.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到获取退出码并不简单，需要进行一些类型转换。
- en: Handling signals
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理信号
- en: Signals are the other inter-process communication tools that Unix operating
    systems offer. They are integer values that can be sent from one process to another
    process, giving our application the capability of communicating with more processes
    than just the parent. By doing so, the application is capable of interpreting
    the incoming signals and can also send signals to other processes.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 信号是Unix操作系统提供的另一种进程间通信工具。它们是可以从一个进程发送到另一个进程的整数值，使我们的应用程序能够与父进程以外的更多进程通信。通过这样做，应用程序能够解释传入的信号，并且还可以向其他进程发送信号。
- en: Handling incoming signals
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理传入信号
- en: The normal behavior for a Go application is to handle some incoming signals,
    including `SIGHUP`, `SIGINT`, and `SIGABRT`, by terminating the application. We
    can replace this standard behavior with a custom behavior that intercepts all
    or some of the signals and acts accordingly.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Go应用程序的正常行为是处理一些传入信号，包括`SIGHUP`，`SIGINT`和`SIGABRT`，然后终止应用程序。我们可以用自定义行为替换这个标准行为，拦截所有或部分信号并相应地处理。
- en: The signal package
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号包
- en: The custom behavior is accomplished using the `os/signal` package, which exposes
    the necessary functions.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`os/signal`包可以实现自定义行为，该包公开了必要的函数。
- en: For instance, if the application does not need to intercept a signal, the `signal.Ignore`
    function allows you to add a signal to the ignored list. The `signal.Ignored` function
    also permits you to verify whether a certain signal has been ignored.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果应用程序不需要拦截信号，`signal.Ignore`函数允许将信号添加到被忽略的列表中。`signal.Ignored`函数也允许验证某个信号是否被忽略。
- en: 'In order to intercept signals with a channel, you can use the core function,
    that is, `signal.Notify`. This makes it possible to specify a channel and to choose
    which signals should be sent to that channel. The application can then use the
    channel in any goroutine to handle signals with a custom behavior. Note that if
    no signal is specified, then the channel will receive all the signals that are
    sent to the application, as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用通道拦截信号，可以使用核心函数`signal.Notify`。这使得可以指定一个通道，并选择应该发送到该通道的信号。然后应用程序可以在任何goroutine中使用该通道来处理具有自定义行为的信号。请注意，如果未指定信号，则该通道将接收发送到应用程序的所有信号，如下所示：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `signal.Stop` function is used to halt the reception of signals from a certain
    channel, while the `signal.Reset` function stops intercepting one or more signals
    to all channels. In order to reset all the signals, no argument needs to be passed
    to `Reset`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`signal.Stop`函数用于停止从特定通道接收信号，而`signal.Reset`函数停止拦截一个或多个信号到所有通道。为了重置所有信号，`Reset`不需要传递任何参数。'
- en: Graceful shutdowns
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优雅关闭
- en: An application executes a graceful shutdown when it waits for a task to finish
    and clears all of its resources before terminating. Using custom signal handling
    is a very good practice, because it gives us time to release resources that are
    still open. Before shutting down, we can perform any other task that should be
    done before exiting the application; for instance, saving the current status.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序在等待任务完成并清除所有资源后终止时执行优雅关闭。使用自定义信号处理是一个很好的实践，因为它给我们释放仍然打开的资源的时间。在关闭之前，我们可以执行任何其他应该在退出应用程序之前完成的任务；例如，保存当前状态。
- en: Now that we know how exit codes work, we can introduce the `log` package. This
    will be used from now on to print a statement to the standard output instead of `fmt`.
    This makes it possible to execute the `Print` statement and the `Fatal` statement, which
    is the equivalent of printing and executing `os.Exit(1)`. The `log` package also
    allows the user to define log flags to print the date, time, and/or file/line
    with each print.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道退出码是如何工作的，我们可以介绍`log`包。从现在开始，将使用它来将语句打印到标准输出，而不是`fmt`。这使得可以执行`Print`语句和`Fatal`语句，后者相当于打印并执行`os.Exit(1)`。`log`包还允许用户定义日志标志，以打印日期、时间和/或文件/行。
- en: 'We can start with a very basic example, handling all signals as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从一个非常基本的例子开始，处理所有信号如下：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In order to test this application, you can use two different Terminals. First,
    you can launch the application in the first Terminal and use the other Terminal
    to execute the `ps` command to find the PID application, in order to send signals
    to it with the `kill` command.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试这个应用程序，您可以使用两个不同的终端。 首先，您可以在第一个终端中启动应用程序，并使用另一个终端执行`ps`命令来查找应用程序的PID，以便使用`kill`命令向其发送信号。
- en: 'The second method, which uses just one Terminal, launches the application in
    the background. This will show the PID on the screen and will be used in the `kill` command,
    as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法只使用一个终端，在后台启动应用程序。 这将在屏幕上显示PID，并将在`kill`命令中使用，如下所示：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note that if you're using macOS, you'll get an `abort trap` signal name.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您使用的是macOS，您将收到`abort trap`信号名称。
- en: Exit cleanup and resource release
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 退出清理和资源释放
- en: 'A more practical and common example of a clean shutdown is resource cleanup.
    When using exit statements, deferred functions such as `Flush` for a `bufio.Writer` struct
    are not executed. This can lead to information loss, as shown in the following
    example:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 更实际和常见的干净关闭的例子是资源清理。 在使用退出语句时，延迟函数（例如`bufio.Writer`结构的`Flush`）不会被执行。 这可能会导致信息丢失，如下例所示：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If a `TERM` signal is sent to this application before it finishes, the file
    will be created and truncated, but the flush will never be executed—resulting
    in an empty file.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在应用程序完成之前向该应用程序发送了`TERM`信号，则文件将被创建和截断，但刷新将永远不会被执行，导致一个空文件。
- en: 'This could, perhaps, be the intended behavior, but this is rarely the case.
    It is better to do any cleanup in the signal handling part, as shown in the following
    example:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是预期的行为，但这很少发生。 最好在信号处理部分进行任何清理，如下例所示：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this case, we are using a goroutine in combination with the signal channel
    to flush the writer before exiting. This will ensure that whatever is written
    to the buffer gets persisted on the file.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将使用goroutine与信号通道结合，以在退出之前刷新写入器。 这将确保将缓冲区中写入的任何内容持久保存到文件中。
- en: Configuration reload
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置重新加载
- en: Signals can be used for more than just terminating an application. An application
    can react differently to each signal, so that it can be used to accomplish different
    functions, making it possible to control the application flow.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 信号不仅可以用于终止应用程序。 应用程序可以对每个信号做出不同的反应，以便可以用于执行不同的功能，从而可以控制应用程序流程。
- en: The next example will have some settings stored in a text file. The settings
    will be of the `time.Duration` type stored as its  string version. A duration
    is an `int64` value with a string version that is in a human-readable format,
    such as `2m10s`, which also has many useful methods. This is used in different
    functions of the `time` package.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例将在文本文件中存储一些设置。 设置将以其字符串版本存储为`time.Duration`类型。 持续时间是一个`int64`值，其字符串版本以人类可读的格式存储，例如`2m10s`，它还具有许多有用的方法。
    这在`time`包的不同函数中使用。
- en: 'The app will execute a certain operation with a frequency that depends on the
    current settings value. Possible operations with signals include the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序将以取决于当前设置值的频率执行某个操作。 信号的可能操作包括以下内容：
- en: '`SIGHUP (1)`: This loads the interval from the settings file.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SIGHUP (1)`: 这会从设置文件中加载间隔。'
- en: '`SIGTERM (2)`: This saves the current interval values, and exits the application.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SIGTERM (2)`: 这会保存当前的间隔值，并退出应用程序。'
- en: '`SIGQUIT (6)`: This exits without saving.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SIGQUIT (6)`: 这会退出而不保存。'
- en: '`SIGUSR1 (10)`: This increases the interval by doubling it.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SIGUSR1 (10)`: 这会将间隔加倍。'
- en: '`SIGUSR2 (11)`: This decreases the interval by halving it.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SIGUSR2 (11)`: 这会将间隔减半。'
- en: '`SIGALRM (14)`: This saves the current interval value.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SIGALRM (14)`: 这会保存当前的间隔值。'
- en: 'Capturing these signals is done with the `signal.Notify` function, which is
    called for all the different signals. The value received from the channel requires
    a condition statement, a type switch, to allow the application to execute a different
    action according to the value:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`signal.Notify`函数捕获这些信号，该函数用于所有不同的信号。 从通道接收到的值需要一个条件语句，即类型开关，以允许应用程序根据值执行不同的操作：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `handleSignal` function will contain the `switch` statement in the signal:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`handleSignal`函数将包含信号中的`switch`语句：'
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following describes the different behaviors that will be implemented in
    the signal handing function:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下描述了将在信号处理函数中实现的不同行为：
- en: Changing the value will just use the duration pointer to store the new value.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改值只会使用持续指针来存储新值。
- en: Loading will try to scan the content of the file (if present) as a duration
    and change the settings value.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载将尝试扫描文件的内容（如果存在）作为持续时间并更改设置值。
- en: 'Saving will write the duration to the file, and it will use its string format.
    The following code depicts this:'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存将持续时间写入文件，并使用其字符串格式。 以下代码描述了这一点：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We will get the path of the user''s home directory in the `init` function and
    use it to compose the path of the `settings` file, as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`init`函数中获取用户主目录的路径，并将其用于组成`settings`文件的路径，如下所示：
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We can launch the application in a Terminal and use another Terminal to send
    signals, as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在一个终端中启动应用程序，并使用另一个终端发送信号，如下所示：
- en: '| **Terminal 1** | **Terminal 2** |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| **终端1** | **终端2** |'
- en: '|'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '|'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '|'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: In the left column, we can see the output from the application; in the right
    column, we can see the commands we launched to trigger them. In order to get the
    PID of the running application, we are using the `pgrep` command and nesting in
    `kill`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '在左列中，我们可以看到应用程序的输出； 在右列中，我们可以看到我们启动的命令。 为了获取正在运行的应用程序的PID，我们使用`pgrep`命令并嵌套在`kill`中。 '
- en: Sending signals to other processes
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向其他进程发送信号
- en: After seeing the way in which incoming signals are handled, let's take a look
    at how to send signals to other processes programmatically. The `os.Process` structure
    is the only tool we need—its `Signal` method makes it possible to send a signal
    to the project. It's that easy!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了如何处理传入信号的方式之后，让我们看看如何以编程方式向其他进程发送信号。`os.Process`结构是我们唯一需要的工具——其`Signal`方法使得向项目发送信号成为可能。就是这么简单！
- en: 'The less simple part is obtaining the process. There are two use cases, as
    follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 较不简单的部分是获取进程。有两种用例，如下：
- en: The process is a child, and we have the process value already as a result of
    `os.StartProcess` or `exec.Command` structs.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进程是一个子进程，我们已经通过`os.StartProcess`或`exec.Command`结构获得了进程值。
- en: The process is already existing but we do not have it, so we need to search
    for it using its PID.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进程已经存在，但我们没有它，因此需要使用其PID搜索它。
- en: The first use case is simpler, as we already have the process as a variable,
    or as an attribute of an `exec.Cmd` variable, and we can call the method directly.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个用例更简单，因为我们已经将进程作为变量或作为`exec.Cmd`变量的属性，并且可以直接调用该方法。
- en: 'The other use case requires searching for the process by PID using the `os.FindProcess`
    method, as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个用例需要使用`os.FindProcess`方法通过PID搜索进程，如下：
- en: '[PRE19]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Once we have `os.Process`, we can use its `Signal` method to send a specific
    signal to it, as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了`os.Process`，我们可以使用其`Signal`方法向其发送特定信号，如下：
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The type of signal we will send to a process depends on the destination process
    and the behavior we want to suggest, such as an interruption or a termination.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将发送给进程的信号类型取决于目标进程和我们想要建议的行为，例如中断或终止。
- en: Connecting streams
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接流
- en: Streams in Go are an abstraction that makes it possible to see any sort of communication
    or data flow as a series of readers and writers. We have already learned that
    streams are an important element of Go. We'll now learn how to use what we already
    know about input and output to control the streams related to a process—the input,
    output, and error.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go中，流是一种抽象，可以将任何类型的通信或数据流视为一系列读取器和写入器。我们已经学会了流是Go的重要组成部分。现在我们将学习如何使用我们已经了解的有关输入和输出的知识来控制与进程相关的流——输入、输出和错误。
- en: Pipes
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道
- en: Pipes are one of the best ways of connecting input and output in a synchronous
    way, allowing processes to communicate.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 管道是连接输入和输出的同步方式之一，允许进程进行通信。
- en: Anonymous pipes
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 匿名管道
- en: 'Different commands can be chained in a sequence when using a shell, making
    one command output the following command input. For example, consider the following
    command:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用shell时，可以将不同的命令链接成一个序列，使一个命令的输出成为下一个命令的输入。例如，考虑以下命令：
- en: '[PRE21]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Here, we are displaying a file, using the preceding command to filter rows containing
    a certain string and, finally, using the filtered output to count the lines.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在显示一个文件，使用前面的命令来过滤包含特定字符串的行，并最终使用过滤后的输出来计算行数。
- en: This can be done programmatically in Go when the processes are created inside
    the application.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序内创建进程时，可以在Go中以编程方式完成此操作。
- en: The `io.Pipe` function returns a reader/writer couple that is connected; whatever
    gets written to the pipe writer will be read by the pipe reader. The write operation
    is a blocking one, which means that all of the written data has to be read before
    a new write operation can be executed.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`io.Pipe`函数返回一个连接的读取器/写入器对；写入管道写入的任何内容都将被管道读取器读取。写操作是阻塞的，这意味着所有写入的数据都必须在执行新的写操作之前被读取。'
- en: We already saw that `exec.Cmd` allows generic streams for its output and input—this
    allows us to use the values returned by the `io.Pipe` function to connect one
    process to the other.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到`exec.Cmd`允许其输出和输入使用通用流，这使我们可以使用`io.Pipe`函数返回的值将一个进程连接到另一个进程。
- en: 'First, we define the three commands, as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们定义三个命令，如下：
- en: '`cat` with index `0`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cat`索引为`0`'
- en: '`grep` with index `1`'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`grep`索引为`1`'
- en: '`wc` with index `2`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wc`索引为`2`'
- en: 'Then, we can define the two pipes we need, as shown in the following code:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以定义我们需要的两个管道，如下所示：
- en: '[PRE22]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, we link the input and output streams. We connect the `cat` (command `0`)
    output and the `grep` (command `1`) input, and we do the same for the `grep` output
    and the `wc` input:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们连接输入和输出流。我们连接`cat`（命令`0`）的输出和`grep`（命令`1`）的输入，然后对`grep`的输出和`wc`的输入进行相同的操作：
- en: '[PRE23]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We then start our commands, as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们启动我们的命令，如下：
- en: '[PRE24]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We wait until the end of the execution of each command and we close the respective
    pipe writer; otherwise, the next command reader will hang. To make things easier,
    each pipe writer is an element in a slice, and each writer has the same index
    as the command that it is linked to. The last one is `nil` because the last command
    is not linked by a pipe:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们等到每个命令执行结束，然后关闭相应的管道写入器；否则，下一个命令的读取器将挂起。为了简化操作，每个管道写入器都是切片中的一个元素，并且每个写入器的索引与其链接的命令的索引相同。最后一个是`nil`，因为最后一个命令没有通过管道链接：
- en: '[PRE25]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: There are also other tools provided by the `io` package that can help simplify
    some operations.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`io`包还提供了其他工具，可以帮助简化一些操作。'
- en: Standard input and output pipes
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准输入和输出管道
- en: The `io.MultiWriter` function makes it possible to write the same content to
    several readers. This will be extremely useful when the output of a command needs
    to be broadcast to a series of different commands automatically.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`io.MultiWriter`函数使得可以将相同的内容写入多个读取器。当需要自动将命令的输出广播到一系列不同的命令时，这将非常有用。'
- en: Let's say that we want to do what we did before (that is, look for a word in
    a file), but for different words. We can use the `MultiWriter` function to copy
    the output to a series of `grep` commands, each of which will be connected to
    its own `wc` command.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要做之前做过的事情（即在文件中查找单词），但是要查找不同的单词。我们可以使用`MultiWriter`函数将输出复制到一系列`grep`命令，每个命令都将连接到自己的`wc`命令。
- en: 'We will use two auxiliary methods of `exec.Command` in this example:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用`exec.Command`的两个辅助方法：
- en: '`Cmd.StdinPipe`: This returns a `PipeWriter` struct that will be connected
    to the command standard input.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Cmd.StdinPipe`：这返回一个`PipeWriter`结构，将连接到命令的标准输入。'
- en: '`Cmd.StdoutPipe`: This returns a `PipeReader` struct that will be connected
    to the command standard output.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Cmd.StdoutPipe`：这返回一个`PipeReader`结构，将连接到命令的标准输出。'
- en: 'Let''s start by defining a list of search terms: one for the command''s tuples
    (`grep` and `wc`), one for writers connected to the first command, and one for
    the final output of each command chain:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先定义一个搜索项列表：一个用于命令的元组（`grep`和`wc`），一个用于连接到第一个命令的写入器，一个用于每个命令链的最终输出：
- en: '[PRE26]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now let''s define the commands and their connection—each `grep` command will
    be connected on one side to `cat` using the `MultiWriter` function with the piped
    writers, and on the other side to the input of the `wc` command:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们定义命令及其连接——每个`grep`命令将在一侧使用`MultiWriter`函数与`cat`连接，并在另一侧连接到`wc`命令的输入：
- en: '[PRE27]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We can run the main `cat` command and, when it finishes, we can close the first
    set of writing pipes, so that the `grep` command can terminate, as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以运行主要的`cat`命令，当它完成时，我们可以关闭第一组写入管道，这样`grep`命令就可以终止，如下所示：
- en: '[PRE28]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then we can wait for the other command to finish and show the results, as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以等待另一个命令完成并显示结果，如下所示：
- en: '[PRE29]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Note that, when the `StdinPipe` method is used, the resulting writer must be
    closed, but this is not necessary with `StdoutPipe` method.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当使用`StdinPipe`方法时，生成的写入器必须关闭，但使用`StdoutPipe`方法则不需要。
- en: Summary
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we learned how to handle communications between processes
    using three main functionalities: exit codes, signals, and pipes.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用三个主要功能处理进程之间的通信：退出代码、信号和管道。
- en: Exit codes are 8-bit values between `0` and `255` that are returned by a process
    to their parent. An exit code of `0` means that the application execution was
    successful. It's pretty easy to return an exit code in Go, but doing so using
    the `os.Exit` function shortcuts the execution of the deferred functions. When
    a panic occurs, all the deferred functions are executed and the returned code
    is `2`. Getting an exit code from a child process is relatively trickier, because
    it's OS-dependent; however, in Unix systems, it can be accomplished using a series
    of type assertions.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 退出代码是0到255之间的8位值，由进程返回给其父进程。退出代码为`0`表示应用程序执行成功。在Go中很容易返回退出代码，但使用`os.Exit`函数会忽略延迟函数的执行。当发生panic时，所有延迟函数都会执行，返回的代码是`2`。从子进程获取退出代码相对复杂，因为它取决于操作系统；然而，在Unix系统中，可以使用一系列类型断言来实现。
- en: Signals are used to communicate with any process. They are 6-bit values, between
    1 and 64, sent from one process to another using a system call. Receiving signals
    can be done using a channel and the `signal.Notify` function. Sending signals
    is easily done with the `Process.Signal` method.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 信号用于与任何进程进行通信。它们是6位值，介于1和64之间，通过系统调用从一个进程发送到另一个进程。可以使用通道和`signal.Notify`函数来接收信号。使用`Process.Signal`方法很容易发送信号。
- en: Pipes are a tuple of input and output streams that are synchronously connected. They
    are used to connect a process input to another process output. We saw how to connect
    multiple commands in the same way that a Terminal does and we learned how to use
    `io.MultiReader` to broadcast one command output to many commands.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 管道是一组同步连接的输入和输出流。它们用于将一个进程的输入连接到另一个进程的输出。我们看到了如何连接多个命令，就像终端一样，并学习了如何使用`io.MultiReader`将一个命令的输出广播到多个命令。
- en: In the next chapter, we are going to dig into network programming, starting
    from TCP all the way up to HTTP servers.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入研究网络编程，从TCP一直到HTTP服务器。
- en: Questions
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is an exit code? Who makes use of it?
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 退出代码是什么？谁会使用它？
- en: What happens when an application panics? Which exit code is returned?
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当应用程序发生panic时会发生什么？返回哪个退出代码？
- en: What is the default behavior of a Go application when receiving all signals?
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当接收到所有信号时，Go应用程序的默认行为是什么？
- en: How do you intercept signals and decide how the application must behave?
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何拦截信号并决定应用程序的行为？
- en: Can you send signals to other processes? If so, how?
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你能向其他进程发送信号吗？如果可以，怎么做？
- en: What are pipes and why are they important?
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 管道是什么，为什么重要？
