["```go\nname,age,country\n```", "```go\nfunc main() {\n    r := csv.NewReader(strings.NewReader(\"a,b,c\\ne,f,g\\n1,2,3\"))\n    for {\n        r, err := r.Read()\n        if err != nil {\n            log.Fatal(err)\n        }\n        log.Println(r)\n    }\n}\n```", "```go\nfunc main() {\n r := csv.NewReader(strings.NewReader(\"a,b,c\\ne,f,g\\n1,2,3\"))\n records, err := r.ReadAll()\n if err != nil {\n log.Fatal(err)\n }\n for _, r := range records {\n log.Println(r)\n }\n}\n```", "```go\nfunc main() {\n    const million = 1000000\n    type Country struct {\n        Code, Name string\n        Population int\n    }\n    records := []Country{\n        {Code: \"IT\", Name: \"Italy\", Population: 60 * million},\n        {Code: \"ES\", Name: \"Spain\", Population: 46 * million},\n        {Code: \"JP\", Name: \"Japan\", Population: 126 * million},\n        {Code: \"US\", Name: \"United States of America\", Population: 327 * million},\n    }\n    w := csv.NewWriter(os.Stdout)\n    defer w.Flush()\n    for _, r := range records {\n        if err := w.Write([]string{r.Code, r.Name, strconv.Itoa(r.Population)}); err != nil {\n            fmt.Println(\"error:\", err)\n            os.Exit(1)\n        }\n    }\n}\n```", "```go\nfunc main() {\n    const million = 1000000\n    type Country struct {\n        Code, Name string\n        Population int\n    }\n    records := []Country{\n        {Code: \"IT\", Name: \"Italy\", Population: 60 * million},\n        {Code: \"ES\", Name: \"Spain\", Population: 46 * million},\n        {Code: \"JP\", Name: \"Japan\", Population: 126 * million},\n        {Code: \"US\", Name: \"United States of America\", Population: 327 * million},\n    }\n    w := csv.NewWriter(os.Stdout)\n    defer w.Flush()\n    var ss = make([][]string, 0, len(records))\n    for _, r := range records {\n        ss = append(ss, []string{r.Code, r.Name, strconv.Itoa(r.Population)})\n    }\n    if err := w.WriteAll(ss); err != nil {\n        fmt.Println(\"error:\", err)\n        os.Exit(1)\n    }\n}\n```", "```go\nfunc main() {\n    r := csv.NewReader(strings.NewReader(\"a b\\ne f g\\n1\"))\n    r.Comma = ' '\n    r.FieldsPerRecord = -1\n    records, err := r.ReadAll()\n    if err != nil {\n        log.Fatal(err)\n    }\n    for _, r := range records {\n        log.Println(r)\n    }\n}\n```", "```go\n{\n    \"name: \"Randolph\",\n    \"surname\": \"Carter\",\n    \"job\": \"writer\",\n    \"year_of_birth\": 1873\n}\n```", "```go\n{\"name:\"Randolph\",\"surname\":\"Carter\",\"job\":\"writer\",\"year_of_birth\":1873}\n```", "```go\ntype Character struct {\n    Name        string `json:\"name\" tag:\"foo\"`\n    Surname     string `json:\"surname\"`\n    Job         string `json:\"job,omitempty\"`\n    YearOfBirth int    `json:\"year_of_birth,omitempty\"`\n}\n```", "```go\nr := strings.NewReader(`{\n    \"name\":\"Lavinia\",\n    \"surname\":\"Whateley\",\n    \"year_of_birth\":1878\n}`)\nd := json.NewDecoder(r)\nvar c Character\nif err := d.Decode(&c); err != nil {\n    log.Fatalln(err)\n}\nlog.Printf(\"%+v\", c)\n```", "```go\ne := json.NewEncoder(os.Stdout)\ne.SetIndent(\"\", \"\\t\")\nc := Character{\n    Name: \"Charles Dexter\",\n    Surname: \"Ward\",\n    YearOfBirth: 1902,\n}\nif err := e.Encode(c); err != nil {\n    log.Fatalln(err)\n}\n```", "```go\ntype Marshaler interface {\n        MarshalJSON() ([]byte, error)\n}\n\ntype Unmarshaler interface {\n        UnmarshalJSON([]byte) error\n}\n```", "```go\nfunc (c *Character) UnmarshalJSON(b []byte) error {\n    type C Character\n    var v C\n    if err := json.Unmarshal(b, &v); err != nil {\n        return err\n    }\n    *c = Character(v)\n    if c.Job == \"\" {\n        c.Job = \"unknown\"\n    } \n    return nil\n}\n```", "```go\nfunc (c Character) MarshalJSON() ([]byte, error) {\n    type C Character\n    v := C(c)\n    if v.Job == \"\" {\n        v.Job = \"unknown\"\n    }\n    return json.Marshal(v)\n}\n```", "```go\ntype Fooer interface {\n    Foo()\n}\n\ntype A struct{ Field string }\n\nfunc (a *A) Foo() {}\n\ntype B struct{ Field float64 }\n\nfunc (b *B) Foo() {}\n```", "```go\ntype Wrapper struct {\n    Type string\n    Value Fooer\n}\n```", "```go\nfunc (w Wrapper) MarshalJSON() ([]byte, error) {\n    switch w.Value.(type) {\n    case *A:\n        w.Type = \"A\"\n    case *B:\n        w.Type = \"B\"\n    default:\n        return nil, fmt.Errorf(\"invalid type: %T\", w.Value)\n    }\n    type W Wrapper\n    return json.Marshal(W(w))\n}\n```", "```go\nfunc (w *Wrapper) UnmarshalJSON(b []byte) error {\n    var W struct {\n        Type string\n        Value json.RawMessage\n    }\n    if err := json.Unmarshal(b, &W); err != nil {\n        return err\n    }\n    var value interface{}\n    switch W.Type {\n    case \"A\":\n        value = new(A)\n    case \"B\":\n        value = new(B)\n    default:\n        return fmt.Errorf(\"invalid type: %s\", W.Type)\n    }\n    if err := json.Unmarshal(W.Value, &value); err != nil {\n        return err\n    }\n    w.Type, w.Value = W.Type, value.(Fooer)\n    return nil\n}\n```", "```go\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"name\": { \"type\": \"string\" },\n        \"surname\": { \"type\": \"string\" },\n        \"year_of_birth\": { \"type\": \"number\"},\n        \"job\": { \"type\": \"string\" }\n    },\n    \"required\": [\"name\", \"surname\"]\n}\n```", "```go\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n```", "```go\n<outer>\n    <middle>\n        <inner1>content</inner1>\n        <inner2/>\n    </middle>\n</outer>\n```", "```go\n<tag attribute=\"value\" another=\"something\">content</tag>\n<selfclosing a=\"1000\" b=\"-1\"/>\n```", "```go\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<xs:schema >\n  <xs:element name=\"character\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element name=\"name\" type=\"xs:string\" use=\"required\"/>\n        <xs:element name=\"surname\" type=\"xs:string\" use=\"required\"/>\n        <xs:element name=\"year_of_birth\" type=\"xs:integer\"/>\n        <xs:element name=\"job\" type=\"xs:string\"/>\n      </xs:sequence>\n      <xs:attribute name=\"id\" type=\"xs:string\" use=\"required\"/>\n    </xs:complexType>\n </xs:element>\n</xs:schema>\n```", "```go\ntype Character struct {\n    Name        string `xml:\"name\"`\n    Surname     string `xml:\"surname\"`\n    Job         string `xml:\"job,omitempty\"`\n    YearOfBirth int    `xml:\"year_of_birth,omitempty\"`\n}\n```", "```go\nr := strings.NewReader(`<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<character>\n <name>Herbert</name>\n <surname>West</surname>\n <job>Scientist</job>\n</character>\n}`)\nd := xml.NewDecoder(r)\nvar c Character\nif err := d.Decode(&c); err != nil {\n log.Fatalln(err)\n}\nlog.Printf(\"%+v\", c)\n```", "```go\ntype Character struct {\n    XMLName     struct{} `xml:\"character\"`\n    Name        string   `xml:\"name\"`\n    Surname     string   `xml:\"surname\"`\n    Job         string   `xml:\"job,omitempty\"`\n    YearOfBirth int      `xml:\"year_of_birth,omitempty\"`\n}\n```", "```go\ne := xml.NewEncoder(os.Stdout)\ne.Indent(\"\", \"\\t\")\nc := Character{\n    Name:        \"Henry\",\n    Surname:     \"Wentworth Akeley\",\n    Job:         \"farmer\",\n    YearOfBirth: 1871,\n}\nif err := e.Encode(c); err != nil {\n    log.Fatalln(err)\n}\n```", "```go\ntype Character struct {\n    XMLName     struct{} `xml:\"character\"`\n    Name        string   `xml:\"name\"`\n    Surname     string   `xml:\"surname\"`\n    Job         string   `xml:\"details>job,omitempty\"`\n    YearOfBirth int      `xml:\"year_of_birth,attr,omitempty\"`\n    IgnoreMe    string   `xml:\"-\"`\n}\n```", "```go\n<character year_of_birth=\"1871\">\n  <name>Henry</name>\n  <surname>Wentworth Akeley</surname>\n  <details>\n    <job>farmer</job>\n  </details>\n</character>\n```", "```go\ntype Marshaler interface {\n    MarshalXML(e *Encoder, start StartElement) error\n}\n\ntype MarshalerAttr interface {\n    MarshalXMLAttr(name Name) (Attr, error)\n}\n\ntype Unmarshaler interface {\n        UnmarshalXML(d *Decoder, start StartElement) error\n}\n\ntype UnmarshalerAttr interface {\n        UnmarshalXMLAttr(attr Attr) error\n}\n```", "```go\ntype Character struct {\n    XMLName struct{} `xml:\"character\"`\n    ID ID `xml:\"id,attr\"`\n    Name string `xml:\"name\"`\n    Surname string `xml:\"surname\"`\n    Job string `xml:\"job,omitempty\"`\n    YearOfBirth int `xml:\"year_of_birth,omitempty\"`\n}\n\ntype ID string\n\nfunc (i ID) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {\n    return xml.Attr{\n        Name: xml.Name{Local: \"codename\"},\n        Value: strings.ToUpper(string(i)),\n    }, nil\n}\n```", "```go\ne := xml.NewEncoder(os.Stdout)\ne.Indent(\"\", \"\\t\")\nc := Character{\n    ID: \"aa\",\n    Name: \"Abdul\",\n    Surname: \"Alhazred\",\n    Job: \"poet\",\n    YearOfBirth: 700,\n}\nif err := e.Encode(c); err != nil {\n    log.Fatalln(err)\n}\n```", "```go\n# list of characters\ncharacters: \n    - name: \"Henry\"\n      surname: \"Armitage\"\n      year_of_birth: 1855\n      job: \"librarian\"\n    - name: \"Francis\"\n      surname: \"Wayland Thurston\"\n      job: \"anthropologist\"\n```", "```go\ntype Marshaler interface {\n    MarshalYAML() (interface{}, error)\n}\n\ntype Unmarshaler interface {\n    UnmarshalYAML(unmarshal func(interface{}) error) error\n}\n```", "```go\ntype Character struct {\n    Name        string `yaml:\"name\"`\n    Surname     string `yaml:\"surname\"`\n    Job         string `yaml:\"job,omitempty\"`\n    YearOfBirth int    `yaml:\"year_of_birth,omitempty\"`\n}\n```", "```go\nvar chars = []Character{{\n    Name:        \"William\",\n    Surname:     \"Dyer\",\n    Job:         \"professor\",\n    YearOfBirth: 1875,\n}, {\n    Surname: \"Danforth\",\n    Job:     \"student\",\n}}\ne := yaml.NewEncoder(os.Stdout)\nif err := e.Encode(chars); err != nil {\n    log.Fatalln(err)\n}\n```", "```go\nr := strings.NewReader(`- name: John Raymond\n surname: Legrasse\n job: policeman\n- name: \"Francis\"\n surname: Wayland Thurston\n job: anthropologist`)\n// define a new decoder\nd := yaml.NewDecoder(r)\nvar c []Character\n// decode the reader\nif err := d.Decode(&c); err != nil {\n log.Fatalln(err)\n}\nlog.Printf(\"%+v\", c)\n```", "```go\ntype Setter interface {\n    SetBSON(raw Raw) error\n}\n\ntype Getter interface {\n    GetBSON() (interface{}, error)\n}\n```", "```go\nvar char = Character{\n    Name: \"Robert\",\n    Surname: \"Olmstead\",\n}\nb, err := bson.Marshal(char)\nif err != nil {\n    log.Fatalln(err)\n}\nlog.Printf(\"%q\", b)\n```", "```go\nr := []byte(\",\\x00\\x00\\x00\\x02name\\x00\\a\\x00\\x00\" +\n \"\\x00Robert\\x00\\x02surname\\x00\\t\\x00\\x00\\x00\" +\n \"Olmstead\\x00\\x00\")\nvar c Character\nif err := bson.Unmarshal(r, &c); err != nil {\n log.Fatalln(err)\n}\nlog.Printf(\"%+v\", c)\n```", "```go\ntype BinaryMarshaler interface {\n        MarshalBinary() (data []byte, err error)\n}\n\ntype BinaryUnmarshaler interface {\n        UnmarshalBinary(data []byte) error\n}\n```", "```go\nvar char = Character{\n    Name:    \"Albert\",\n    Surname: \"Wilmarth\",\n    Job:     \"assistant professor\",\n}\ns := strings.Builder{}\ne := gob.NewEncoder(&s)\nif err := e.Encode(char); err != nil {\n    log.Fatalln(err)\n}\nlog.Printf(\"%q\", s.String())\n```", "```go\nr := strings.NewReader(\"D\\xff\\x81\\x03\\x01\\x01\\tCharacter\" +\n    \"\\x01\\xff\\x82\\x00\\x01\\x04\\x01\\x04Name\" +\n    \"\\x01\\f\\x00\\x01\\aSurname\\x01\\f\\x00\\x01\\x03\" +\n    \"Job\\x01\\f\\x00\\x01\\vYearOfBirth\\x01\\x04\\x00\" +\n    \"\\x00\\x00*\\xff\\x82\\x01\\x06Albert\\x01\\bWilmarth\" +\n    \"\\x01\\x13assistant professor\\x00\")\nd := gob.NewDecoder(r)\nvar c Character\nif err := d.Decode(&c); err != nil {\n    log.Fatalln(err)\n}\nlog.Printf(\"%+v\", c)\n```", "```go\nfunc runDecode(data []byte, v interface{}) {\n    if err := gob.NewDecoder(bytes.NewReader(data)).Decode(v); err != nil {\n        log.Fatalln(err)\n    }\n    log.Printf(\"%+v\", v)    \n}\n```", "```go\nrunDecode(data, new(struct {\n    YearOfBirth int    `gob:\"year_of_birth,omitempty\"`\n    Surname     string `gob:\"surname\"`\n    Name        string `gob:\"name\"`\n    Job         string `gob:\"job,omitempty\"`\n}))\n```", "```go\n\nrunDecode(data, new(struct {\n    Name string `gob:\"name\"`\n}))\n```", "```go\nrunDecode(data, new(struct {\n    Name        string `gob:\"name\"`\n    Surname     string `gob:\"surname\"`\n    Country     string `gob:\"country\"`\n    Job         string `gob:\"job,omitempty\"`\n    YearOfBirth int    `gob:\"year_of_birth,omitempty\"`\n}))\n```", "```go\nrunDecode(data, new(struct {\n    Name []byte `gob:\"name\"`\n}))\n```", "```go\nfunc Register(value interface{})\nfunc RegisterName(name string, value interface{})\n```", "```go\n\ntype Greeter interface {\n    Greet(w io.Writer)\n}\n\ntype Character struct {\n    Name        string `gob:\"name\"`\n    Surname     string `gob:\"surname\"`\n    Job         string `gob:\"job,omitempty\"`\n    YearOfBirth int    `gob:\"year_of_birth,omitempty\"`\n}\n\nfunc (c Character) Greet(w io.Writer) {\n    fmt.Fprintf(w, \"Hello, my name is %s %s\", c.Name, c.Surname)\n    if c.Job != \"\" {\n        fmt.Fprintf(w, \" and I am a %s\", c.Job)\n    }\n}\n```", "```go\ngob: name not registered for interface: \"main.Character\"\n```", "```go\nfunc main() {\n    gob.Register(Greeter(Character{}))\n    r := strings.NewReader(\"U\\x10\\x00\\x0emain.Character\" +\n        \"\\xff\\x81\\x03\\x01\\x01\\tCharacter\\x01\\xff\\x82\\x00\" +\n        \"\\x01\\x04\\x01\\x04Name\\x01\\f\\x00\\x01\\aSurname\" +\n        \"\\x01\\f\\x00\\x01\\x03Job\\x01\\f\\x00\\x01\\vYearOfBirth\" +\n        \"\\x01\\x04\\x00\\x00\\x00\\x1f\\xff\\x82\\x1c\\x01\\x05John\" +\n        \" \\x01\\aKirowan\\x01\\tprofessor\\x00\")\n    var char Greeter\n    if err := gob.NewDecoder(r).Decode(&char); err != nil {\n        log.Fatalln(err)\n    }\n    char.Greet(os.Stdout)\n}\n```", "```go\nsyntax = \"proto3\";\n```", "```go\nimport \"google/protobuf/any.proto\";\n```", "```go\nmessage SearchRequest {\n  string query = 1;\n  int32 page_number = 2;\n  int32 result_per_page = 3;\n}\n\nservice SearchService {\n  rpc Search (SearchRequest) returns (SearchResponse);\n}\n```", "```go\nmessage Foo {\n  // lock field IDs\n  reserved 2, 15, 9 to 11;\n  // lock field names\n  reserved \"foo\", \"bar\";\n}\n```", "```go\ngo get -u github.com/golang/protobuf/protoc-gen-go\n```", "```go\n//go:generate protoc -I=$SRC_PATH --go_out=$DST_DIR source.proto\n```", "```go\nsyntax = \"proto3\";\n\nmessage Character {\n    string name = 1;\n    string surname = 2;\n    string job = 3;\n    int32 year_of_birth = 4;\n}\n```", "```go\npackage gen\n\n//go:generate protoc --go_out=. char.proto\n```", "```go\n// Code generated by protoc-gen-go. DO NOT EDIT.\n// source: char.proto\n...\ntype Character struct {\n  Name        string `protobuf:\"bytes,1,opt,name=name\"`\n  Surname     string `protobuf:\"bytes,2,opt,name=surname\"`\n  Job         string `protobuf:\"bytes,3,opt,name=job\" json:\"job,omitempty\"`\n  YearOfBirth int32  `protobuf:\"varint,4,opt,name=year_of_birth,json=yearOfBirth\"`\n}\n```", "```go\nvar char = gen.Character{\n    Name:        \"George\",\n    Surname:     \"Gammell Angell\",\n    YearOfBirth: 1834,\n    Job:         \"professor emeritus\",\n}\nb := proto.NewBuffer(nil)\nif err := b.EncodeMessage(&char); err != nil {\n    log.Fatalln(err)\n}\nlog.Printf(\"%q\", b.Bytes())\n```", "```go\nb := proto.NewBuffer([]byte(\n    \"/\\n\\x06George\\x12\\x0eGammell Angell\" +\n    \"\\x1a\\x12professor emeritus \\xaa\\x0e\",\n))\nvar char gen.Character\nif err := b.DecodeMessage(&char); err != nil {\n    log.Fatalln(err)\n}\nlog.Printf(\"%+v\", char)\n```", "```go\nconn, err := grpc.Dial(address, grpc.WithInsecure())\nif err != nil {\n    log.Fatalf(\"did not connect: %v\", err)\n}\ndefer conn.Close()\nc := pb.NewGreeterClient(conn)\n\n// Contact the server and print out its response\nr, err := c.SayHello(ctx, &pb.HelloRequest{Name: name})\n```", "```go\n// server is used to implement helloworld.GreeterServer.\ntype server struct{}\n\n// SayHello implements helloworld.GreeterServer\nfunc (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) {\n    log.Printf(\"Received: %v\", in.Name)\n    return &pb.HelloReply{Message: \"Hello \" + in.Name}, nil\n}\n```", "```go\nfunc main() {\n    lis, err := net.Listen(\"tcp\", port)\n    if err != nil {\n        log.Fatalf(\"failed to listen: %v\", err)\n    }\n    s := grpc.NewServer()\n    pb.RegisterGreeterServer(s, &server{})\n    if err := s.Serve(lis); err != nil {\n        log.Fatalf(\"failed to serve: %v\", err)\n    }\n}\n```"]