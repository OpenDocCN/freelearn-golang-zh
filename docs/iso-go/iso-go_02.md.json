["```go\n$ which go\n/usr/local/go/bin/go\n```", "```go\n$ go help\nGo is a tool for managing Go source code.\n\nUsage:\n\n go command [arguments]\n\nThe commands are:\n\n build      compile packages and dependencies\n clean      remove object files\n doc        show documentation for package or symbol\n env        print Go environment information\n bug        start a bug report\n fix        run go tool fix on packages\n fmt        run gofmt on package sources\n generate   generate Go files by processing source\n get        download and install packages and dependencies\n install    compile and install packages and dependencies\n list       list packages\n run        compile and run Go program\n test       test packages\n tool       run specified go tool\n version    print Go version\n vet        run go tool vet on packages\n\nUse \"go help [command]\" for more information about a command.\n\nAdditional help topics:\n c           calling between Go and C\n buildmode   description of build modes\n filetype    file types\n gopath      GOPATH environment variable\n environment environment variables\n importpath  import path syntax\n packages    description of package lists\n testflag    description of testing flags\n testfunc    description of testing functions\nUse \"go help [topic]\" for more information about that topic.\n```", "```go\n$ go version\ngo version go1.9.1 darwin/amd64\n```", "```go\nexport GOROOT=/usr/local/go\nexport GOPATH=/Users/kamesh/go\nexport GOBIN=${GOPATH}/bin\nexport PATH=${PATH}:/usr/local/bin:${GOROOT}/bin:${GOBIN}\n```", "```go\n$ mkdir go\n$ mkdir go/src\n$ mkdir go/pkg\n$ mkdir go/bin\n```", "```go\n$ cd $GOPATH/src\n$ mkdir hellogopher\n```", "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\n  fmt.Println(\"Hello Gopher!\")\n}\n```", "```go\n$ go run hellogopher.go\nHello Gopher!\n```", "```go\n$ go build\n```", "```go\n$ go install\n```", "```go\n$ hellogopher\nHello Gopher!\n```", "```go\n$ go get -u github.com/gopherjs/gopherjs\n```", "```go\n$ gopherjs version\nGopherJS 1.9-1</strong>\n```", "```go\n$ gopherjs\nGopherJS is a tool for compiling Go source code to JavaScript.\n\nUsage:\n gopherjs [command]\n\nAvailable Commands:\n build compile packages and dependencies\n doc display documentation for the requested, package, method or symbol\n get download and install packages and dependencies\n install compile and install packages and dependencies\n run compile and run Go program\n serve compile on-the-fly and serve\n test test packages\n version print GopherJS compiler version\n\nFlags:\n --color colored output (default true)\n --localmap use local paths for sourcemap\n -m, --minify minify generated code\n -q, --quiet suppress non-fatal warnings\n --tags string a list of build tags to consider satisfied during the build\n -v, --verbose print the names of packages as they are compiled\n -w, --watch watch for changes to the source files\n\nUse \"gopherjs [command] --help\" for more information about a command.\n```", "```go\n$ go get honnef.co/go/js/dom\n```", "```go\n$ go get -u -d -tags=js github.com/gopherjs/jsbuiltin\n```", "```go\n$ go get -u honnef.co/go/js/xhr\n```", "```go\n$ go get -u github.com/gopherjs/websocket\n```", "```go\n$ gopherjs build\n```", "```go\n$ gopherjs build -m\n```", "```go\n$ go get -u github.com/isomorphicgo/isokit\n```", "```go\n$ go get -u github.com/uxtoolkit/cog\n```", "```go\n$ go get -u github.com/EngineerKamesh/igb\n```", "```go\nexport IGWEB_APP_ROOT=${GOPATH}/src/github.com/EngineerKamesh/igb/igweb\n```", "```go\n$ echo $IGWEB_APP_ROOT\n/Users/kamesh/go/src/github.com/EngineerKamesh/igb/igweb\n```", "```go\n$ cd $IGWEB_APP_ROOT/client\n```", "```go\n$ go get ./..\n```", "```go\n$ gopherjs build\n```", "```go\n$ wget http://download.redis.io/releases/redis-4.0.2.tar.gz\n$ tar xzf redis-4.0.2.tar.gz\n$ cd redis-4.0.2\n$ make\n$ sudo make install\n```", "```go\n$ redis-server\n```", "```go\n$ redis-cli\n```", "```go\n127.0.0.1:6379> set foo bar\nOK\n```", "```go\n127.0.0.1:6379> get foo\n\"bar\"\n```", "```go\n$ cd $IGWEB_APP_ROOT\n```", "```go\n$ go run igweb.go\n```", "```go\n$ go get -u github.com/isomorphicgo/kick\n```", "```go\n$ kick --help\n```", "```go\n$ kick --appPath=$IGWEB_APP_ROOT --gopherjsAppPath=$IGWEB_APP_ROOT/client --mainSourceFile=igweb.go\n```", "```go\nprintln(\"IGWEB Client Application - Kamesh just made an update.\")\n```", "```go\nInstant KickStart Applied! (Recompiling and restarting project.)\n```", "```go\n  \u2043 bot\n\n  \u2043 chat\n\n  \u2043 client\n    \u2043 carsdemo\n    \u2043 chat\n    \u2043 common\n    \u2043 gopherjsprimer\n    \u2043 handlers\n    \u2043 localstoragedemo\n    \u2043 tests\n\n  \u2043 common\n    \u2043 datastore\n\n  \u2043 endpoints\n\n  \u2043 handlers\n\n  \u2043 scripts  \n\n  \u2043 shared\n    \u2043 cogs\n    \u2043 forms\n    \u2043 models\n    \u2043 templates\n    \u2043 templatedata\n    \u2043 templatefuncs\n    \u2043 validate\n\n  \u2043 static\n    \u2043 css\n    \u2043 fonts\n    \u2043 images\n    \u2043 js\n    \u2043 templates\n\n  \u2043 submissions\n\n  \u2043 tests\n```", "```go\ntype Datastore interface {\n  CreateGopherTeam(team []*models.Gopher) error\n  GetGopherTeam() []*models.Gopher\n  CreateProduct(product *models.Product) error\n  CreateProductRegistry(products []string) error\n  GetProducts() []*models.Product\n  GetProductDetail(productTitle string) *models.Product\n  GetProductsInShoppingCart(cart *models.ShoppingCart) []*models.Product\n  CreateContactRequest(contactRrequest *models.ContactRequest) error\n  Close()\n}\n```", "```go\nconst (\n  REDIS = iota\n)\n\nfunc NewDatastore(datastoreType int, dbConnectionString string) (Datastore, error) {\n\n  switch datastoreType {\n\n case REDIS:\n return NewRedisDatastore(dbConnectionString)\n\n  default:\n    return nil, errors.New(\"Unrecognized Datastore!\")\n\n  }\n}\n```", "```go\npackage common\n\nimport (\n  \"github.com/EngineerKamesh/igb/igweb/common/datastore\"\n  \"github.com/gorilla/sessions\"\n  \"github.com/isomorphicgo/isokit\"\n)\n\ntype Env struct {\n DB datastore.Datastore\n TemplateSet *isokit.TemplateSet\n}\n```", "```go\n  env := common.Env{}\n```", "```go\n  db, err := datastore.NewDatastore(datastore.REDIS, \"localhost:6379\")\n  ts := isokit.NewTemplateSet()\n\n env.TemplateSet = ts\n env.DB = db\n```", "```go\nfunc registerRoutes(env *common.Env, r *mux.Router) {\n```", "```go\nr.Handle(\"/index\", handlers.IndexHandler(env)).Methods(\"GET\")\n```", "```go\npackage handlers\n\nimport (\n  \"net/http\"\n\n  \"github.com/EngineerKamesh/igb/igweb/common\"\n  \"github.com/EngineerKamesh/igb/igweb/shared/templatedata\"\n  \"github.com/isomorphicgo/isokit\"\n)\n\nfunc IndexHandler(env *common.Env) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    templateData := templatedata.Index{PageTitle: \"IGWEB\"}\n    env.TemplateSet.Render(\"index_page\", &isokit.RenderParams{Writer: w, Data: templateData})\n  })\n}\n```", "```go\npackage common\n\nimport (\n \"github.com/isomorphicgo/isokit\"\n \"honnef.co/go/js/dom\"\n)\n\ntype Env struct {\n TemplateSet *isokit.TemplateSet\n Router *isokit.Router\n Window dom.Window\n Document dom.Document\n PrimaryContent dom.Element\n Location *dom.Location\n}\n```", "```go\n  r := isokit.NewRouter()\n  r.Handle(\"/index\", handlers.IndexHandler(env))\n```", "```go\nfunc IndexHandler(env *common.Env) isokit.Handler {\n  return isokit.HandlerFunc(func(ctx context.Context) {\n    templateData := templatedata.Index{PageTitle: \"IGWEB\"}\n    env.TemplateSet.Render(\"index_content\", &isokit.RenderParams{Data: templateData, Disposition: isokit.PlacementReplaceInnerContents, Element: env.PrimaryContent, PageTitle: templateData.PageTitle})\n  })\n}\n```"]