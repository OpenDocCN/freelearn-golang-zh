["```go\nalert(\"Hello Isomorphic Go!\");\n```", "```go\njs.Global.Call(\"alert\", \"Hello Isomorphic Go!\")\n```", "```go\ndom.GetWindow().Alert(\"Hello Isomorphic Go!\")\n```", "```go\nalert(\"Hello Isomorphic Go!\");\n```", "```go\nwindow.alert(\"Hello Isomorphic Go!\");\n```", "```go\nimport \"github.com/gopherjs/gopherjs/js\"\n```", "```go\njs.Global.Call(\"alert\", \"Hello Isomorphic Go!\")\n```", "```go\nfunc (o *Object) Call(name string, args ...interface{}) *Object\n```", "```go\ndom.GetWindow()\n```", "```go\ndom.GetWindow().Alert(\"Hello Isomorphic Go!\")\n```", "```go\nwindow.alert(\"Hello Isomorphic Go!\")\n```", "```go\nelement = document.getElementById(\"primaryContent\");\n```", "```go\nelement := js.Global.Get(\"document\").Call(\"getElementById\", \"primaryContent\")\n```", "```go\nelement := dom.GetWindow().Document().GetElementByID(\"primaryContent\")\n```", "```go\nelement = document.querySelector(\".welcomeHeading\");\n```", "```go\nelement := js.Global.Get(\"document\").Call(\"querySelector\", \".welcomeHeading\")\n```", "```go\nelement := dom.GetWindow().Document().QuerySelector(\".welcomeHeading\")\n```", "```go\nelement = document.GetElementById(\"primaryContent\");\nelement.style.display = \"none\"\n```", "```go\njs := js.Global\nelement := js.Get(\"document\").Call(\"getElementById\"), \"primaryContent\")\nelement.Get(\"style\").Set(\"display\", \"none\")\n```", "```go\nd := dom.GetWindow().Document()\nelement := d.GetElementByID(\"welcomeMessage\")\nelement.Style().SetProperty(\"display\", \"none\", \"\")\n```", "```go\n<script type=\"text/javascript\" src=\"img/client.js\"></script>\n```", "```go\n$ gopherjs build\n```", "```go\n$ go run igweb.go\n```", "```go\n$ kick --appPath=$IGWEB_APP_ROOT --gopherjsAppPath=$IGWEB_APP_ROOT/client --mainSourceFile=igweb.go\n```", "```go\nr.Handle(\"/front-end-examples-demo\", handlers.FrontEndExamplesHandler(env)).Methods(\"GET\")\nr.Handle(\"/lowercase-text\", handlers.LowercaseTextTransformHandler(env)).Methods(\"POST\")\n```", "```go\npackage handlers\n\nimport (\n  \"net/http\"\n  \"github.com/EngineerKamesh/igb/igweb/common\"\n  \"github.com/isomorphicgo/isokit\"\n)\n\nfunc FrontEndExamplesHandler(env *common.Env) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    env.TemplateSet.Render(\"frontend_examples_page\", &isokit.RenderParams{Writer: w, Data: nil})\n  })\n}\n```", "```go\nfunc initializePage(env *common.Env) {\n\n  l := strings.Split(env.Window.Location().Pathname, \"/\")\n  routeName := l[1]\n\n  if routeName == \"\" {\n    routeName = \"index\"\n  }\n\n  if strings.Contains(routeName, \"-demo\") == false {\n    handlers.InitializePageLayoutControls(env)\n  }\n\n  switch routeName {\n\n  case \"front-end-examples-demo\":\n    gopherjsprimer.InitializePage()\n```", "```go\nfunc InitializePage() {\n\n  d := dom.GetWindow().Document()\n\n  messageInput := d.GetElementByID(\"messageInput\").(*dom.HTMLInputElement)\n\n  alertButtonJS := d.GetElementByID(\"alertMessageJSGlobal\").(*dom.HTMLButtonElement)\n  alertButtonJS.AddEventListener(\"click\", false, func(event dom.Event) {\n DisplayAlertMessageJSGlobal(messageInput.Value)\n })\n\n  alertButtonDOM := d.GetElementByID(\"alertMessageDOM\").(*dom.HTMLButtonElement)\n alertButtonDOM.AddEventListener(\"click\", false, func(event dom.Event) {\n DisplayAlertMessageDOM(messageInput.Value)\n })\n\n  showGopherButton := d.GetElementByID(\"showGopher\").(*dom.HTMLButtonElement)\n showGopherButton.AddEventListener(\"click\", false, func(event dom.Event) {\n ShowIsomorphicGopher()\n })\n\n  hideGopherButton := d.GetElementByID(\"hideGopher\").(*dom.HTMLButtonElement)\n hideGopherButton.AddEventListener(\"click\", false, func(event dom.Event) {\n HideIsomorphicGopher()\n })\n\n  builtinDemoButton := d.GetElementByID(\"builtinDemoButton\").(*dom.HTMLButtonElement)\n builtinDemoButton.AddEventListener(\"click\", false, func(event dom.Event) {\n builtinDemo(event.Target())\n })\n\n  lowercaseTransformButton := d.GetElementByID(\"lowercaseTransformButton\").(*dom.HTMLButtonElement)\n lowercaseTransformButton.AddEventListener(\"click\", false, func(event dom.Event) {\n go lowercaseTextTransformer()\n })\n\n}\n```", "```go\n<div class=\"example\">\n<form class=\"pure-form\">\n  <fieldset class=\"pure-group\">\n  <h2>Example: Display Alert Message</h2>\n  </fieldset>\n  <fieldset class=\"pure-control-group\">\n  <label for=\"messageInput\">Alert Message: </label>\n  <input id=\"messageInput\" type=\"text\" value=\"Hello Gopher!\" />\n  </fieldset>\n  <fieldset class=\"pure-group\">\n <button id=\"alertMessageJSGlobal\" type=\"button\" class=\"pure-button pure-button-primary\">Display Alert Message using js.Global</button>\n <button id=\"alertMessageDOM\" type=\"button\" class=\"pure-button pure-button-primary\">Display Alert Message using dom package</button>\n</fieldset>\n</form>\n</div>\n```", "```go\n  alertButtonJS := d.GetElementByID(\"alertMessageJSGlobal\").(*dom.HTMLButtonElement)\n  alertButtonJS.AddEventListener(\"click\", false, func(event dom.Event) {\n    DisplayAlertMessageJSGlobal(messageInput.Value)\n  })\n\n  alertButtonDOM := d.GetElementByID(\"alertMessageDOM\").(*dom.HTMLButtonElement)\n  alertButtonDOM.AddEventListener(\"click\", false, func(event dom.Event) {\n    DisplayAlertMessageDOM(messageInput.Value)\n  })\n```", "```go\n<div class=\"example\">\n  <form class=\"pure-form\">\n  <fieldset class=\"pure-group\">\n    <h2>Example: Change An Element's CSS Style Property</h2>\n  </fieldset>\n  <fieldset class=\"pure-group\">\n    <div id=\"igRacer\">\n      <img id=\"isomorphicGopher\" border=\"0\" src=\"img/isomorphic_go_logo.png\">\n    </div>\n  </fieldset>\n  <fieldset class=\"pure-group\">\n <button id=\"showGopher\" type=\"button\" class=\"pure-button pure-button-primary\">Show Isomorphic Gopher</button>\n <button id=\"hideGopher\" type=\"button\" class=\"pure-button pure-button-primary\">Hide Isomorphic Gopher</button>\n  </fieldset>\n  </form>\n</div>\n```", "```go\n  showGopherButton := d.GetElementByID(\"showGopher\").(*dom.HTMLButtonElement)\n  showGopherButton.AddEventListener(\"click\", false, func(event dom.Event) {\n    ShowIsomorphicGopher()\n  })\n\n  hideGopherButton := d.GetElementByID(\"hideGopher\").(*dom.HTMLButtonElement)\n  hideGopherButton.AddEventListener(\"click\", false, func(event dom.Event) {\n    HideIsomorphicGopher()\n  })\n```", "```go\npackage gopherjsprimer\n\nimport \"honnef.co/go/js/dom\"\n\nfunc toggleIsomorphicGopher(isVisible bool) {\n\n  d := dom.GetWindow().Document()\n  isomorphicGopherImage := d.GetElementByID(\"isomorphicGopher\").(*dom.HTMLImageElement)\n\n  if isVisible == true {\n    isomorphicGopherImage.Style().SetProperty(\"display\", \"inline\", \"\")\n  } else {\n    isomorphicGopherImage.Style().SetProperty(\"display\", \"none\", \"\")\n  }\n\n}\n\nfunc ShowIsomorphicGopher() {\n  toggleIsomorphicGopher(true)\n}\n\nfunc HideIsomorphicGopher() {\n  toggleIsomorphicGopher(false)\n}\n```", "```go\ntypeof 108 === \"number\"\n```", "```go\ntypeof \"JavaScript\" === \"string\"\n```", "```go\n<div class=\"example\">\n  <h2>Example: JavaScript Builtin Functionality for typeof operation</h2>\n  <p>Note: The message should appear in the web console after clicking the button below.</p>\n <button id=\"builtinDemoButton\" type=\"button\" class=\"pure-button pure-button-primary\">Builtin Demo</button>\n</div>\n```", "```go\n  builtinDemoButton := d.GetElementByID(\"builtinDemoButton\").(*dom.HTMLButtonElement)\n  builtinDemoButton.AddEventListener(\"click\", false, func(event dom.Event) {\n    builtinDemo(event.Target())\n  })\n```", "```go\npackage gopherjsprimer\n\nimport (\n  \"github.com/gopherjs/jsbuiltin\"\n  \"honnef.co/go/js/dom\"\n)\n\nfunc builtinDemo(element dom.Element) {\n\n  if jsbuiltin.TypeOf(element) == \"object\" {\n    println(\"Using the typeof operator, we can see that the element that was clicked, is an object.\")\n  }\n\n}\n```", "```go\n<div class=\"example\">\n  <form class=\"pure-form\">\n  <fieldset class=\"pure-group\">\n    <h2>Example: XHR Post</h2>\n  </fieldset>\n  <fieldset class=\"pure-control-group\">\n    <label for=\"textToLowercase\">Enter Text to Lowercase: </label>\n    <input id=\"textToLowercase\" type=\"text\" placeholder=\"Enter some text here to lowercase.\" value=\"GopherJS\" />\n  </fieldset>\n  <fieldset class=\"pure-group\">\n    <button id=\"lowercaseTransformButton\" type=\"button\" class=\"pure-button pure-button-primary\">Lowercase It!</button>\n  </fieldset>\n  </form>\n</div>\n```", "```go\n  lowercaseTransformButton := d.GetElementByID(\"lowercaseTransformButton\").(*dom.HTMLButtonElement)\n  lowercaseTransformButton.AddEventListener(\"click\", false, func(event dom.Event) {\n    go lowercaseTextTransformer()\n  })\n```", "```go\nfunc lowercaseTextTransformer() {\n  d := dom.GetWindow().Document()\n  textToLowercase := d.GetElementByID(\"textToLowercase\").(*dom.HTMLInputElement)\n\n  textBytes, err := json.Marshal(textToLowercase.Value)\n  if err != nil {\n    println(\"Encountered error while attempting to marshal JSON: \", err)\n    println(err)\n  }\n\n  data, err := xhr.Send(\"POST\", \"/lowercase-text\", textBytes)\n  if err != nil {\n    println(\"Encountered error while attempting to submit POST request via XHR: \", err)\n    println(err)\n  }\n\n  var s string\n  err = json.Unmarshal(data, &s)\n\n  if err != nil {\n    println(\"Encountered error while attempting to umarshal JSON data: \", err)\n  }\n  textToLowercase.Set(\"value\", s)\n}\n```", "```go\npackage handlers\n\nimport (\n  \"encoding/json\"\n  \"fmt\"\n  \"io/ioutil\"\n  \"log\"\n  \"net/http\"\n  \"strings\"\n\n  \"github.com/EngineerKamesh/igb/igweb/common\"\n)\n\nfunc LowercaseTextTransformHandler(env *common.Env) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    var s string\n\n    reqBody, err := ioutil.ReadAll(r.Body)\n    if err != nil {\n      log.Print(\"Encountered error when attempting to read the request body: \", err)\n    }\n\n    reqBodyString := string(reqBody)\n\n    err = json.Unmarshal([]byte(reqBodyString), &s)\n    if err != nil {\n      log.Print(\"Encountered error when attempting to unmarshal JSON: \", err)\n    }\n\n    textBytes, err := json.Marshal(strings.ToLower(s))\n    if err != nil {\n      log.Print(\"Encountered error when attempting ot marshal JSON: \", err)\n    }\n    fmt.Println(\"textBytes string: \", string(textBytes))\n    w.Write(textBytes)\n\n  })\n\n}\n```", "```go\n{{ define \"pagecontent\" }}\n<table class=\"mdl-data-table mdl-js-data-table mdl-shadow--2dp\">\n  <thead>\n    <tr>\n      <th class=\"mdl-data-table__cell--non-numeric\">Model Name</th>\n      <th class=\"mdl-data-table__cell--non-numeric\">Color</th>\n      <th class=\"mdl-data-table__cell--non-numeric\">Manufacturer</th>\n    </tr>\n  </thead>\n <tbody id=\"autoTableBody\">\n </tbody>\n</table>\n{{end}}\n{{template \"layouts/carsdemolayout\" . }}\n```", "```go\n<html>\n  {{ template \"partials/carsdemoheader\" }}\n<body>\n    <div class=\"pageContent\" id=\"primaryContent\">\n      {{ template \"pagecontent\" . }}\n    </div>\n<script src=\"img/client.js\"></script>\n</body>\n</html>\n```", "```go\n<head>\n  <link rel=\"icon\" type=\"image/png\" href=\"/static/images/isomorphic_go_icon.png\">\n  <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\">\n  <link rel=\"stylesheet\" href=\"https://code.getmdl.io/1.3.0/material.indigo-pink.min.css\">\n  <script defer src=\"img/material.min.js\"></script>\n</head>\n```", "```go\ncarsdemo.InitializePage()\n```", "```go\nconst CarItemTemplate = `\n  <td class=\"mdl-data-table__cell--non-numeric\">{{.ModelName}}</td>\n  <td class=\"mdl-data-table__cell--non-numeric\">{{.Color}}</td>\n  <td class=\"mdl-data-table__cell--non-numeric\">{{.Manufacturer}}</td>\n`\n```", "```go\nvar D = dom.GetWindow().Document()\n```", "```go\nfunc InitializePage() {\n  cars()\n}\n```", "```go\nnano := models.Car{ModelName: \"Nano\", Color: \"Yellow\", Manufacturer: \"Tata\"}\nambassador := models.Car{ModelName: \"Ambassador\", Color: \"White\", Manufacturer: \"HM\"}\nomni := models.Car{ModelName: \"Omni\", Color: \"Red\", Manufacturer: \"Maruti Suzuki\"}\ncars := []models.Car{nano, ambassador, omni}\n```", "```go\n  autoTableBody := D.GetElementByID(\"autoTableBody\")\n  for i := 0; i < len(cars); i++ {\n    trElement := D.CreateElement(\"tr\")\n    tpl := template.New(\"template\")\n    tpl.Parse(CarItemTemplate)\n    var buff bytes.Buffer\n    tpl.Execute(&buff, cars[i])\n    trElement.SetInnerHTML(buff.String())\n    autoTableBody.AppendChild(trElement)\n  }\n```", "```go\nimport (\n  \"bytes\"\n  \"encoding/gob\"\n  \"html/template\"\n\n  \"github.com/EngineerKamesh/igb/igweb/shared/models\"\n\n  \"honnef.co/go/js/dom\"\n  \"honnef.co/go/js/xhr\"\n)\n```", "```go\n  var carsDataBuffer bytes.Buffer\n  enc := gob.NewEncoder(&carsDataBuffer)\n  enc.Encode(cars)\n```", "```go\n  xhrResponse, err := xhr.Send(\"POST\", \"/cars-data\", carsDataBuffer.Bytes())\n\n  if err != nil {\n    println(err)\n  }\n\n  println(\"xhrResponse: \", string(xhrResponse))\n```", "```go\nfunc CarsDataHandler(env *common.Env) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\n    var cars []models.Car\n    var carsDataBuffer bytes.Buffer\n\n    dec := gob.NewDecoder(&carsDataBuffer)\n    body, err := ioutil.ReadAll(r.Body)\n    carsDataBuffer = *bytes.NewBuffer(body)\n    err = dec.Decode(&cars)\n\n    w.Header().Set(\"Content-Type\", \"text/plain\")\n\n    if err != nil {\n      log.Println(err)\n      w.Write([]byte(\"Something went wrong, look into it\"))\n\n    } else {\n      fmt.Printf(\"Cars Data: %#v\\n\", cars)\n      w.Write([]byte(\"Thanks, I got the slice of cars you sent me!\"))\n    }\n\n  })\n}\n```", "```go\nCars Data: []models.Car{models.Car{ModelName:\"Nano\", Color:\"Yellow\", Manufacturer:\"Tata\"}, models.Car{ModelName:\"Ambassador\", Color:\"White\", Manufacturer:\"HM\"}, models.Car{ModelName:\"Omni\", Color:\"Red\", Manufacturer:\"Maruti Suzuki\"}}\n```", "```go\nlocalStorage.setItem(\"foo\", \"bar\"); \n```", "```go\nvar x = localStorage.getItem(\"foo\");\n```", "```go\nfor (var i = 0; i < localStorage.length; i++) {\n  console.log(localStorage.key(i)); // prints the key\n  console.log(localStorage.getItem(localStorage.key(i))); // prints the value\n}\n```", "```go\nlocalStorage.clear();\n```", "```go\n<!doctype html>\n<html>\n  {{ template \"partials/localstorageheader_partial\" }}\n  <body>\n    <div class=\"pageContent\" id=\"primaryContent\">\n      {{ template \"pagecontent\" . }}\n    </div>\n\n  <script type=\"text/javascript\" src=\"img/client.js\"></script>\n\n  </body>\n</html>\n```", "```go\n<head>\n  <title>LocalStorage Demo</title> \n  <link rel=\"icon\" type=\"image/png\" href=\"/static/images/isomorphic_go_icon.png\">\n <link rel=\"stylesheet\" href=\"https://unpkg.com/purecss@1.0.0/build/pure-min.css\" integrity=\"sha384-nn4HPE8lTHyVtfCBi5yW9d20FjT8BJwUXyWZT9InLYax14RDjBj46LmSztkmNP9w\" crossorigin=\"anonymous\">\n <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/igweb.css\">\n <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/localstoragedemo.css\">\n</head>\n```", "```go\n{{ define \"pagecontent\" }}\n\n<h1>LocalStorage Demo</h1>\n\n    <div id=\"inputFormContainer\">\n      <form class=\"pure-form\">\n      <fieldset class=\"pure-group\" style=\"min-height: 272px\">\n      <div id=\"storageContents\">\n <dl id=\"itemList\">\n </dl>\n </div>\n      </fieldset>\n\n      <fieldset class=\"pure-control-group\">\n      <label for=\"messageInput\">Key: </label>\n      <input id=\"itemKey\" type=\"text\" value=\"\" />\n      <label for=\"messageInput\">Value: </label>\n      <input id=\"itemValue\" type=\"text\" value=\"\" />\n\n      </fieldset>\n\n      <fieldset class=\"pure-control-group\">\n      </fieldset>\n\n      <fieldset class=\"pure-group\">\n        <button id=\"saveButton\" type=\"button\" class=\"pure-button pure-button-primary\">Save</button>\n <button id=\"clearAllButton\" type=\"button\" class=\"pure-button pure-button-primary\">Clear All</button>\n      </fieldset>\n      </form>\n    </div>\n\n{{end}}\n{{template \"layouts/localstorage_layout\" . }}\n```", "```go\nr.Handle(\"/localstorage-demo\", handlers.LocalStorageDemoHandler(env)).Methods(\"GET\")\n```", "```go\npackage handlers\n\nimport (\n  \"net/http\"\n\n  \"github.com/EngineerKamesh/igb/igweb/common\"\n  \"github.com/isomorphicgo/isokit\"\n)\n\nfunc LocalStorageDemoHandler(env *common.Env) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    env.TemplateSet.Render(\"localstorage_example_page\", &isokit.RenderParams{Writer: w, Data: nil})\n  })\n}\n```", "```go\nlocalstoragedemo.InitializePage()\n```", "```go\npackage localstoragedemo\n\nimport (\n \"github.com/gopherjs/gopherjs/js\"\n \"honnef.co/go/js/dom\"\n)\n```", "```go\nvar localStorage = js.Global.Get(\"localStorage\")\n```", "```go\nvar D = dom.GetWindow().Document().(dom.HTMLDocument)\n```", "```go\nfunc InitializePage() {\n saveButton := D.GetElementByID(\"saveButton\").(*dom.HTMLButtonElement)\n saveButton.AddEventListener(\"click\", false, func(event dom.Event) {\n Save()\n })\n\n clearAllButton := D.GetElementByID(\"clearAllButton\").(*dom.HTMLButtonElement)\n clearAllButton.AddEventListener(\"click\", false, func(event dom.Event) {\n ClearAll()\n })\n\n DisplayStorageContents()\n}\n```", "```go\nfunc Save() {\n\n itemKey := D.GetElementByID(\"itemKey\").(*dom.HTMLInputElement)\n itemValue := D.GetElementByID(\"itemValue\").(*dom.HTMLInputElement)\n\n  if itemKey.Value == \"\" {\n    return\n  }\n\n  SetKeyValuePair(itemKey.Value, itemValue.Value)\n  itemKey.Value = \"\"\n  itemValue.Value = \"\"\n  DisplayStorageContents()\n}\n```", "```go\nfunc SetKeyValuePair(itemKey string, itemValue string) {\n  localStorage.Call(\"setItem\", itemKey, itemValue)\n}\n```", "```go\nfunc DisplayStorageContents() {\n\n  itemList := D.GetElementByID(\"itemList\")\n  itemList.SetInnerHTML(\"\")\n\n  for i := 0; i < localStorage.Length(); i++ {\n\n    itemKey := localStorage.Call(\"key\", i)\n    itemValue := localStorage.Call(\"getItem\", itemKey)\n\n    dtElement := D.CreateElement(\"dt\")\n    dtElement.SetInnerHTML(itemKey.String())\n\n    ddElement := D.CreateElement(\"dd\")\n    ddElement.SetInnerHTML(itemValue.String())\n\n    itemList.AppendChild(dtElement)\n    itemList.AppendChild(ddElement)\n  }\n\n}\n```", "```go\nfunc ClearAll() {\n  localStorage.Call(\"clear\")\n  DisplayStorageContents()\n}\n```"]