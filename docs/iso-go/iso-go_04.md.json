["```go\ntype About struct {\n  PageTitle string\n  Gophers []*models.Gopher\n}\n```", "```go\ntype Gopher struct {\n  Name string\n  Title string\n  Biodata string\n  ImageURI string\n  StartTime time.Time\n}\n```", "```go\n<!doctype html>\n<html>\n  {{ template \"partials/header_partial\" . }}\n\n    <div id=\"primaryContent\" class=\"pageContent\">\n      {{ template \"pagecontent\" . }}\n    </div>\n\n    <div id=\"chatboxContainer\">\n    </div>\n\n  {{ template \"partials/footer_partial\" . }}\n</html>\n```", "```go\n<head>\n  <title>{{.PageTitle}}</title> \n  <link rel=\"icon\" type=\"image/png\" href=\"/static/images/isomorphic_go_icon.png\">\n  <link rel=\"stylesheet\" href=\"/static/css/pure.css\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/cogimports.css\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/alertify.core.css\" />\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/alertify.default.css\" />\n <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/igweb.css\">\n  <script type=\"text/javascript\" src=\"img/alertify.js\" type=\"text/javascript\"></script>\n  <script src=\"img/cogimports.js\" type=\"text/javascript\"></script>\n <script type=\"text/javascript\" src=\"img/client.js\"></script>\n</head>\n<body>\n\n<div id=\"topbar\">{{template \"partials/topbar_partial\"}}</div>\n<div id=\"navbar\">{{template \"partials/navbar_partial\"}}</div>\n```", "```go\n<div id=\"topbar\" >\n  <div id=\"logoContainer\" class=\"neon-text\"><span><a href=\"/index\">igweb</a></span></div>\n  <div id=\"siteControlsContainer\">\n    <div id=\"shoppingCartContainer\" class=\"topcontrol\" title=\"Shopping Cart\"><a href=\"/shopping-cart\"><img src=\"img/cart_icon.png\"></a></div>\n    <div id=\"livechatContainer\" class=\"topcontrol\" title=\"Live Chat\"><img id=\"liveChatIcon\" src=\"img/msg_icon.png\"></div>\n  </div>\n</div>\n```", "```go\n<div id=\"navigationBar\">\n<ul>\n  <li><a href=\"/index\">Home</a></li>\n  <li><a href=\"/products\">Products</a></li>\n  <li><a href=\"/about\">About</a></li>\n  <li><a href=\"/contact\">Contact</a></li>\n</ul>\n</div>\n```", "```go\n<footer>\n<div id=\"copyrightNotice\">\n<p>Copyright &copy; IGWEB. All Rights Reserved</p>\n</div>\n</footer>\n</body>\n```", "```go\n{{ define \"pagecontent\" }}\n{{ template \"about_content\" . }}\n{{ end }}\n{{ template \"layouts/webpage_layout\" . }}\n```", "```go\n<h1>About</h1>\n\n<div id=\"gopherTeamContainer\">\n  {{range .Gophers}}\n\n    <div class=\"gopherContainer\">\n\n      <div class=\"gopherImageContainer\">\n        <img height=\"270\" src=\"img/strong>\">\n      </div>\n\n      <div class=\"gopherDetailsContainer\">\n          <div class=\"gopherName\"><h3><b>{{.Name}}</b></h3></div>\n          <div class=\"gopherTitle\"><span>{{.Title}}</span></div> \n          <div class=\"gopherBiodata\"><p>{{.Biodata}}</p></div>\n          <div class=\"gopherStartTime\">\n            <p class=\"standardStartTime\">{{.Name}} joined the IGWEB team on <span class=\"starttime\">{{.StartTime}}).</p>\n            <p class=\"rubyStartTime\">That's <span class=\"starttime\">{{.StartTime | rubyformat}}</span> in Ruby date format.</p>\n            <div class=\"humanReadableGopherTime\">That's <div id=\"Gopher-{{.Name}}\" data-starttimeunix=\"{{.StartTime | unixformat}}\" data-component=\"cog\" class=\"humanReadableDate starttime\"></div> in Human readable format.</div>\n          </div>\n      </div>\n    </div>\n\n  {{end}}\n</div>\n```", "```go\npackage templatefuncs\n\nimport (\n  \"strconv\"\n  \"time\"\n)\n\nfunc RubyDate(t time.Time) string {\n  layout := time.RubyDate\n  return t.Format(layout)\n}\n\nfunc UnixTime(t time.Time) string {\n  return strconv.FormatInt(t.Unix(), 10)\n}\n```", "```go\n<p class=\"rubyStartTime\">That's <span class=\"starttime\">{{.StartTime | rubyformat}}</span> in Ruby date format.</p>\n```", "```go\nfunc (r *RedisDatastore) GetGopherTeam() []*models.Gopher {\n\n  exists, err := r.Cmd(\"EXISTS\", \"gopher-team\").Int()\n\n  if err != nil {\n    log.Println(\"Encountered error: \", err)\n    return nil\n  } else if exists == 0 {\n    return nil\n  }\n\n  var t []*models.Gopher\n  jsonData, err := r.Cmd(\"GET\", \"gopher-team\").Str()\n\n  if err != nil {\n    log.Print(\"Encountered error when attempting to fetch gopher team data from Redis instance: \", err)\n    return nil\n  }\n\n  if err := json.Unmarshal([]byte(jsonData), &t); err != nil {\n    log.Print(\"Encountered error when attempting to unmarshal JSON gopher team data: \", err)\n    return nil\n  }\n\n  return t\n\n}\n```", "```go\ntype About struct {\n  PageTitle string\n  Gophers []*models.Gopher\n}\n```", "```go\nfunc editHandler(w http.ResponseWriter, r *http.Request) {\n  title := r.URL.Path[len(\"/edit/\"):]\n  p, err := loadPage(title)\n  if err != nil {\n      p = &Page{Title: title}\n  }\n t, _ := template.ParseFiles(\"edit.html\")\n t.Execute(w, p)\n}\n```", "```go\ntype Template struct {\n  *template.Template\n  templateType int8\n}\n```", "```go\nconst (\n  TemplateRegular = iota\n  TemplatePartial\n  TemplateLayout\n)\n```", "```go\ntype TemplateSet struct {\n  members map[string]*Template\n  Funcs template.FuncMap\n  bundle *TemplateBundle\n  TemplateFilesPath string\n}\n```", "```go\ntype TemplateBundle struct {\n  items map[string]string\n}\n```", "```go\nvar WebAppRoot string\nvar WebAppMode string\nvar WebServerPort string\nvar DBConnectionString string\nvar StaticAssetsPath string\n```", "```go\nfunc init() {\n\n  WebAppRoot = os.Getenv(\"IGWEB_APP_ROOT\")\n  WebAppMode = os.Getenv(\"IGWEB_MODE\")\n  WebServerPort = os.Getenv(\"IGWEB_SERVER_PORT\")\n  DBConnectionString = os.Getenv(\"IGWEB_DB_CONNECTION_STRING\")\n\n  // Set the default web server port if it hasn't been set already\n  if WebServerPort == \"\" {\n    WebServerPort = \"8080\"\n  }\n\n  // Set the default database connection string\n  if DBConnectionString == \"\" {\n    DBConnectionString = \"localhost:6379\"\n  }\n\n  StaticAssetsPath = WebAppRoot + \"/static\"\n\n}\n```", "```go\nfunc main() {\n\n  env := common.Env{}\n\n  if WebAppRoot == \"\" {\n    fmt.Println(\"The IGWEB_APP_ROOT environment variable must be set before the web server instance can be started.\")\n    os.Exit(1)\n  }\n\n  initializeTemplateSet(&env, false)\n  initializeDatastore(&env)\n```", "```go\nfunc initializeTemplateSet(env *common.Env, oneTimeStaticAssetsGeneration bool) {\n  isokit.WebAppRoot = WebAppRoot\n  isokit.TemplateFilesPath = WebAppRoot + \"/shared/templates\"\n  isokit.StaticAssetsPath = StaticAssetsPath\n  isokit.StaticTemplateBundleFilePath = StaticAssetsPath + \"/templates/igweb.tmplbundle\"\n\n  ts := isokit.NewTemplateSet()\n  funcMap := template.FuncMap{\"rubyformat\": templatefuncs.RubyDate, \"unixformat\": templatefuncs.UnixTime}\n  ts.Funcs = funcMap\n  ts.GatherTemplates()\n  env.TemplateSet = ts\n}\n```", "```go\n// Register Handlers for Client-Side JavaScript Application\nr.Handle(\"/js/client.js\", isokit.GopherjsScriptHandler(WebAppRoot)).Methods(\"GET\")\nr.Handle(\"/js/client.js.map\", isokit.GopherjsScriptMapHandler(WebAppRoot)).Methods(\"GET\")\n\n// Register handler for the delivery of the template bundle\nr.Handle(\"/template-bundle\", handlers.TemplateBundleHandler(env)).Methods(\"POST\")\n```", "```go\nr.Handle(\"/about\", handlers.AboutHandler(env)).Methods(\"GET\")\n```", "```go\nfunc TemplateBundleHandler(env *common.Env) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    var templateContentItemsBuffer bytes.Buffer\n    enc := gob.NewEncoder(&templateContentItemsBuffer)\n    m := env.TemplateSet.Bundle().Items()\n    err := enc.Encode(&m)\n    if err != nil {\n      log.Print(\"encoding err: \", err)\n    }\n    w.Header().Set(\"Content-Type\", \"application/octet-stream\")\n    w.Write(templateContentItemsBuffer.Bytes())\n  })\n\n}\n```", "```go\nfunc AboutHandler(env *common.Env) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n gophers := env.DB.GetGopherTeam()\n templateData := templatedata.About{PageTitle: \"About\", Gophers: gophers}\n env.TemplateSet.Render(\"about_page\", &isokit.RenderParams{Writer: w, Data: templateData})\n  })\n}\n```", "```go\nfunc main() {\n\n  var D = dom.GetWindow().Document().(dom.HTMLDocument)\n  switch readyState := D.ReadyState(); readyState {\n  case \"loading\":\n    D.AddEventListener(\"DOMContentLoaded\", false, func(dom.Event) {\n      go run()\n    })\n  case \"interactive\", \"complete\":\n    run()\n  default:\n    println(\"Encountered unexpected document ready state value!\")\n  }\n\n}\n```", "```go\n<head>\n  <title>{{.PageTitle}}</title> \n  <link rel=\"icon\" type=\"image/png\" href=\"/static/images/isomorphic_go_icon.png\">\n  <link rel=\"stylesheet\" href=\"/static/css/pure.min.css\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/cogimports.css\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/igweb.css\">\n  <script src=\"img/cogimports.js\" type=\"text/javascript\" async></script>\n <script type=\"text/javascript\" src=\"img/client.js\"></script>\n</head>\n```", "```go\nprintln(\"IGWEB Client Application\")\n```", "```go\ntemplateSetChannel := make(chan *isokit.TemplateSet)\nfuncMap := template.FuncMap{\"rubyformat\": templatefuncs.RubyDate, \"unixformat\": templatefuncs.UnixTime, \"productionmode\": templatefuncs.IsProduction}\ngo isokit.FetchTemplateBundleWithSuppliedFunctionMap(templateSetChannel, funcMap)\nts := <-templateSetChannel\n```", "```go\nenv := common.Env{}\n```", "```go\nenv.TemplateSet = ts\n```", "```go\nenv.Window = dom.GetWindow()\nenv.Document = dom.GetWindow().Document()\n```", "```go\nenv.PrimaryContent = env.Document.GetElementByID(\"primaryContent\")\n```", "```go\nregisterRoutes(&env)\n```", "```go\ninitializePage(&env)\n```", "```go\n r := isokit.NewRouter()\n```", "```go\n r.Handle(\"/about\", handlers.AboutHandler(env))\n```", "```go\nl := strings.Split(env.Window.Location().Pathname, \"/\")\nrouteName := l[1]\n\nif routeName == \"\" {\n  routeName = \"index\"\n}\n```", "```go\ncase \"about\":\n  handlers.InitializeAboutPage(env)\n```", "```go\nfunc AboutHandler(env *common.Env) isokit.Handler {\n  return isokit.HandlerFunc(func(ctx context.Context) {\n    gopherTeamChannel := make(chan []*models.Gopher)\n    go FetchGopherTeam(gopherTeamChannel)\n    gophers := <-gopherTeamChannel\n    templateData := templatedata.About{PageTitle: \"About\", Gophers: gophers}\n    env.TemplateSet.Render(\"about_content\", &isokit.RenderParams{Data: templateData, Disposition: isokit.PlacementReplaceInnerContents, Element: env.PrimaryContent, PageTitle: templateData.PageTitle})\n    InitializeAboutPage(env)\n  })\n}\n```", "```go\nfunc FetchGopherTeam(gopherTeamChannel chan []*models.Gopher) {\n  data, err := xhr.Send(\"GET\", \"/restapi/get-gopher-team\", nil)\n  if err != nil {\n    println(\"Encountered error: \", err)\n  }\n  var gophers []*models.Gopher\n  json.NewDecoder(strings.NewReader(string(data))).Decode(&gophers)\n  gopherTeamChannel <- gophers\n}\n```", "```go\nfunc GetGopherTeamEndpoint(env *common.Env) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    gophers := env.DB.GetGopherTeam()\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    json.NewEncoder(w).Encode(gophers)\n  })\n}\n```"]