["```go\n{{ define \"pagecontent\" }}\n{{template \"products_content\" . }}\n{{end}}\n{{template \"layouts/webpage_layout\" . }}\n```", "```go\n<h1>Products</h1>\n\n<div id=\"productsContainer\">\n  {{if .Products}}\n  {{range .Products}}\n  <div class=\"productCard\">\n    <a href=\"{{.Route}}\">\n    <div class=\"pricebox\"><span>${{.Price}}</span></div>\n    <div class=\"productCardImageContainer\">\n      <img src=\"img/{{.ThumbnailPreviewURI}}\">\n    </div>\n    </a>\n    <div class=\"productContainer\">\n\n    <h3><b>{{.Name}}</b></h3> \n    <p>{{.Description}}</p> \n\n    <div class=\"pure-controls\">\n      <button class=\"addToCartButton pure-button pure-button-primary\" data-sku=\"{{.SKU}}\">Add To Cart</button>\n    </div>\n\n    </div>\n  </div>\n  {{end}}\n  {{else}}\n    <span>If you're not seeing any products listed here, you probably need to load the sample data set into your Redis instance. You can do so by <a target=\"_blank\" href=\"/config/load-sample-data\">clicking this link</a>.</span>\n  {{end}}\n</div>\n```", "```go\n{{ define \"pagecontent\" }}\n{{template \"product_detail_content\" . }}\n{{end}}\n{{template \"layouts/webpage_layout\" . }}\n```", "```go\n<div class=\"productDetailContainer\">\n\n  <div class=\"productDetailImageContainer\">\n    <img src=\"img/{{.Product.ImagePreviewURI}}\">\n  </div>\n\n  <div class=\"productDetailHeading\">\n    <h1>{{.Product.Name}}</h1>\n  </div>\n\n  <div class=\"productDetailPrice\">\n    <span>${{.Product.Price}}</span>\n  </div>\n\n  <div class=\"productSummaryDetail\">\n    {{.Product.SummaryDetail}}\n  </div>\n\n  <div class=\"pure-controls\">\n    <button class=\"addToCartButton pure-button pure-button-primary\" data-sku=\"{{.Product.SKU}}\">Add To Cart</button>\n  </div>\n\n</div>\n```", "```go\npackage models\n\ntype Product struct {\n  SKU string\n  Name string\n  Description string\n  ThumbnailPreviewURI string\n  ImagePreviewURI string\n  Price float64\n  Route string\n  SummaryDetail string\n  Quantity int\n}\n```", "```go\nfunc (r *RedisDatastore) GetProducts() []*models.Product {\n\n  registryKey := \"product-registry\"\n  exists, err := r.Cmd(\"EXISTS\", registryKey).Int()\n\n  if err != nil {\n    log.Println(\"Encountered error: \", err)\n    return nil\n  } else if exists == 0 {\n    return nil\n  }\n\n  var productKeys []string\n  jsonData, err := r.Cmd(\"GET\", registryKey).Str()\n  if err != nil {\n    log.Print(\"Encountered error when attempting to fetch product registry data from Redis instance: \", err)\n    return nil\n  }\n\n  if err := json.Unmarshal([]byte(jsonData), &productKeys); err != nil {\n    log.Print(\"Encountered error when attempting to unmarshal JSON product registry data: \", err)\n    return nil\n  }\n\n  products := make([]*models.Product, 0)\n\n  for i := 0; i < len(productKeys); i++ {\n\n    productTitle := strings.Replace(productKeys[i], \"/product-detail/\", \"\", -1)\n    product := r.GetProductDetail(productTitle)\n    products = append(products, product)\n\n  }\n  return products\n}\n```", "```go\nfunc (r *RedisDatastore) GetProductDetail(productTitle string) *models.Product {\n\n  productKey := \"/product-detail/\" + productTitle\n  exists, err := r.Cmd(\"EXISTS\", productKey).Int()\n\n  if err != nil {\n    log.Println(\"Encountered error: \", err)\n    return nil\n  } else if exists == 0 {\n    return nil\n  }\n\n  var p models.Product\n  jsonData, err := r.Cmd(\"GET\", productKey).Str()\n\n  if err != nil {\n    log.Print(\"Encountered error when attempting to fetch product data from Redis instance: \", err)\n    return nil\n  }\n\n  if err := json.Unmarshal([]byte(jsonData), &p); err != nil {\n    log.Print(\"Encountered error when attempting to unmarshal JSON product data: \", err)\n    return nil\n  }\n\n  return &p\n\n}\n```", "```go\n  r := mux.NewRouter()\n```", "```go\nr.Handle(\"/\", handlers.IndexHandler(env)).Methods(\"GET\")\nr.Handle(\"/index\", handlers.IndexHandler(env)).Methods(\"GET\")\nr.Handle(\"/products\", handlers.ProductsHandler(env)).Methods(\"GET\")\nr.Handle(\"/product-detail/{productTitle}\", handlers.ProductDetailHandler(env)).Methods(\"GET\")\nr.Handle(\"/about\", handlers.AboutHandler(env)).Methods(\"GET\")\nr.Handle(\"/contact\", handlers.ContactHandler(env)).Methods(\"GET\", \"POST\")\n\n```", "```go\npackage handlers\n\nimport (\n  \"net/http\"\n\n  \"github.com/EngineerKamesh/igb/igweb/common\"\n  \"github.com/EngineerKamesh/igb/igweb/shared/templatedata\"\n  \"github.com/isomorphicgo/isokit\"\n)\n\nfunc ProductsHandler(env *common.Env) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    products := env.DB.GetProducts()\n    templateData := &templatedata.Products{PageTitle: \"Products\", Products: products}\n    env.TemplateSet.Render(\"products_page\", &isokit.RenderParams{Writer: w, Data: templateData})\n  })\n}\n```", "```go\npackage handlers\n\nimport (\n  \"net/http\"\n\n  \"github.com/EngineerKamesh/igb/igweb/common\"\n  \"github.com/EngineerKamesh/igb/igweb/shared/templatedata\"\n  \"github.com/gorilla/mux\"\n  \"github.com/isomorphicgo/isokit\"\n)\n\nfunc ProductDetailHandler(env *common.Env) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    vars := mux.Vars(r)\n    productTitle := vars[\"productTitle\"]\n    product := env.DB.GetProductDetail(productTitle)\n    templateData := &templatedata.ProductDetail{PageTitle: product.Name, Product: product}\n    env.TemplateSet.Render(\"product_detail_page\", &isokit.RenderParams{Writer: w, Data: templateData})\n  })\n}\n```", "```go\n  r := isokit.NewRouter()\n  r.Handle(\"/index\", handlers.IndexHandler(env))\n r.Handle(\"/products\", handlers.ProductsHandler(env))\n r.Handle(\"/product-detail/{productTitle}\", handlers.ProductDetailHandler(env))\n  r.Handle(\"/about\", handlers.AboutHandler(env))\n  r.Handle(\"/contact\", handlers.ContactHandler(env))\n  r.Listen()\n  env.Router = r\n```", "```go\nfunc ProductsHandler(env *common.Env) isokit.Handler {\n  return isokit.HandlerFunc(func(ctx context.Context) {\n\n    productsChannel := make(chan []*models.Product)\n    go FetchProducts(productsChannel)\n    products := <-productsChannel\n    templateData := &templatedata.Products{PageTitle: \"Products\", Products: products}\n    env.TemplateSet.Render(\"products_content\", &isokit.RenderParams{Data: templateData, Disposition: isokit.PlacementReplaceInnerContents, Element: env.PrimaryContent, PageTitle: templateData.PageTitle})\n    InitializeProductsPage(env)\n    env.Router.RegisterLinks(\"#primaryContent a\")\n  })\n}\n```", "```go\nfunc FetchProducts(productsChannel chan []*models.Product) {\n\n  data, err := xhr.Send(\"GET\", \"/restapi/get-products\", nil)\n  if err != nil {\n    println(\"Encountered error: \", err)\n    return\n  }\n  var products []*models.Product\n  json.NewDecoder(strings.NewReader(string(data))).Decode(&products)\n\n  productsChannel <- products\n}\n```", "```go\nfunc ProductDetailHandler(env *common.Env) isokit.Handler {\n  return isokit.HandlerFunc(func(ctx context.Context) {\n    routeVars := ctx.Value(isokit.RouteVarsKey(\"Vars\")).(map[string]string)\n    productTitle := routeVars[`product-detail/{productTitle}`]\n    productChannel := make(chan *models.Product)\n    go FetchProductDetail(productChannel, productTitle)\n    product := <-productChannel\n    templateData := &templatedata.ProductDetail{PageTitle: product.Name, Product: product}\n    env.TemplateSet.Render(\"product_detail_content\", &isokit.RenderParams{Data: templateData, Disposition: isokit.PlacementReplaceInnerContents, Element: env.PrimaryContent, PageTitle: templateData.PageTitle})\n    InitializeProductDetailPage(env)\n  })\n}\n```", "```go\nfunc FetchProductDetail(productChannel chan *models.Product, productTitle string) {\n\n  data, err := xhr.Send(\"GET\", \"/restapi/get-product-detail\"+\"/\"+productTitle, nil)\n  if err != nil {\n    println(\"Encountered error: \", err)\n    println(err)\n  }\n  var product *models.Product\n  json.NewDecoder(strings.NewReader(string(data))).Decode(&product)\n\n  productChannel <- product\n}\n```", "```go\nr.Handle(\"/restapi/get-products\", endpoints.GetProductsEndpoint(env)).Methods(\"GET\")\nr.Handle(\"/restapi/get-product-detail/{productTitle}\", endpoints.GetProductDetailEndpoint(env)).Methods(\"GET\")\n```", "```go\npackage endpoints\n\nimport (\n  \"encoding/json\"\n  \"net/http\"\n\n  \"github.com/EngineerKamesh/igb/igweb/common\"\n)\n\nfunc GetProductsEndpoint(env *common.Env) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    products := env.DB.GetProducts()\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    json.NewEncoder(w).Encode(products)\n  })\n}\n```", "```go\npackage endpoints\n\nimport (\n  \"encoding/json\"\n  \"net/http\"\n\n  \"github.com/EngineerKamesh/igb/igweb/common\"\n  \"github.com/gorilla/mux\"\n)\n\nfunc GetProductDetailEndpoint(env *common.Env) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\n    vars := mux.Vars(r)\n    productTitle := vars[\"productTitle\"]\n    products := env.DB.GetProductDetail(productTitle)\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    json.NewEncoder(w).Encode(products)\n  })\n}\n```"]