["```go\ntype Products []*Product\n```", "```go\nfunc (p Products) Len() int { return len(p) }\nfunc (p Products) Less(i, j int) bool { return p[i].Price &lt; p[j].Price }\nfunc (p Products) Swap(i, j int) { p[i], p[j] = p[j], p[i] }\n```", "```go\nfunc (r *RedisDatastore) GetProducts() []*models.Product {\n\n  registryKey := \"product-registry\"\n  exists, err := r.Cmd(\"EXISTS\", registryKey).Int()\n\n  if err != nil {\n    log.Println(\"Encountered error: \", err)\n    return nil\n  } else if exists == 0 {\n    return nil\n  }\n\n  var productKeys []string\n  jsonData, err := r.Cmd(\"GET\", registryKey).Str()\n  if err != nil {\n    log.Print(\"Encountered error when attempting to fetch product registry data from Redis instance: \", err)\n    return nil\n  }\n\n  if err := json.Unmarshal([]byte(jsonData), &productKeys); err != nil {\n    log.Print(\"Encountered error when attempting to unmarshal JSON product registry data: \", err)\n    return nil\n  }\n\n  products := make(models.Products, 0)\n\n  for i := 0; i &lt; len(productKeys); i++ {\n\n    productTitle := strings.Replace(productKeys[i], \"/product-detail/\", \"\", -1)\n    product := r.GetProductDetail(productTitle)\n    products = append(products, product)\n\n  }\n sort.Sort(products)\n  return products\n}\n```", "```go\nfunc ProductsHandler(env *common.Env) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    products := env.DB.GetProducts()\n    templateData := &templatedata.Products{PageTitle: \"Products\", Products: products}\n    env.TemplateSet.Render(\"products_page\", &isokit.RenderParams{Writer: w, Data: templateData})\n  })\n}\n```", "```go\nfunc GetProductsEndpoint(env *common.Env) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    products := env.DB.GetProducts()\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    json.NewEncoder(w).Encode(products)\n  })\n}\n```", "```go\n  r.Handle(\"/products\", handlers.ProductsHandler(env))\n```", "```go\nfunc ProductsHandler(env *common.Env) isokit.Handler {\n  return isokit.HandlerFunc(func(ctx context.Context) {\n\n    productsChannel := make(chan []*models.Product)\n    go FetchProducts(productsChannel)\n    products := &lt;-productsChannel\n    templateData := &templatedata.Products{PageTitle: \"Products\", Products: products}\n    env.TemplateSet.Render(\"products_content\", &isokit.RenderParams{Data: templateData, Disposition: isokit.PlacementReplaceInnerContents, Element: env.PrimaryContent, PageTitle: templateData.PageTitle})\n    InitializeProductsPage(env)\n    env.Router.RegisterLinks(\"#primaryContent a\")\n  })\n}\n```", "```go\nfunc FetchProducts(productsChannel chan []*models.Product) {\n\n  data, err := xhr.Send(\"GET\", \"/restapi/get-products\", nil)\n  if err != nil {\n    println(\"Encountered error: \", err)\n    return\n  }\n  var products []*models.Product\n  json.NewDecoder(strings.NewReader(string(data))).Decode(&products)\n\n  productsChannel &lt;- products\n}\n```", "```go\n  templateData := &templatedata.Products{PageTitle: \"Products\", Products: products}\n    env.TemplateSet.Render(\"products_content\", &isokit.RenderParams{Data: templateData, Disposition: isokit.PlacementReplaceInnerContents, Element: env.PrimaryContent, PageTitle: templateData.PageTitle})\n```", "```go\n    InitializeProductsPage(env)\n    env.Router.RegisterLinks(\"#primaryContent a\")\n```", "```go\nfunc InitializeProductsPage(env *common.Env) {\n\n  buttons := env.Document.GetElementsByClassName(\"addToCartButton\")\n  for _, button := range buttons {\n    button.AddEventListener(\"click\", false, handleAddToCartButtonClickEvent)\n  }\n\n}\n```", "```go\nenv.Router.RegisterLinks(\"#primaryContent a\")\n```", "```go\nfunc ProductDetailHandler(env *common.Env) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    vars := mux.Vars(r)\n    productTitle := vars[\"productTitle\"]\n    product := env.DB.GetProductDetail(productTitle)\n    templateData := &templatedata.ProductDetail{PageTitle: product.Name, Product: product}\n    env.TemplateSet.Render(\"product_detail_page\", &isokit.RenderParams{Writer: w, Data: templateData})\n  })\n}\n```", "```go\nfunc GetProductDetailEndpoint(env *common.Env) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\n    vars := mux.Vars(r)\n    productTitle := vars[\"productTitle\"]\n    product := env.DB.GetProductDetail(productTitle)\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    json.NewEncoder(w).Encode(product)\n  })\n}\n```", "```go\nr.Handle(\"/product-detail/{productTitle}\", handlers.ProductDetailHandler(env))\n```", "```go\nfunc ProductDetailHandler(env *common.Env) isokit.Handler {\n  return isokit.HandlerFunc(func(ctx context.Context) {\n    routeVars := ctx.Value(isokit.RouteVarsKey(\"Vars\")).(map[string]string)\n    productTitle := routeVars[`product-detail/{productTitle}`]\n    productChannel := make(chan *models.Product)\n go FetchProductDetail(productChannel, productTitle)\n    product := &lt;-productChannel\n    templateData := &templatedata.ProductDetail{PageTitle: product.Name, Product: product}\n    env.TemplateSet.Render(\"product_detail_content\", &isokit.RenderParams{Data: templateData, Disposition: isokit.PlacementReplaceInnerContents, Element: env.PrimaryContent, PageTitle: templateData.PageTitle})\n    InitializeProductDetailPage(env)\n  })\n}\n```", "```go\nfunc FetchProductDetail(productChannel chan *models.Product, productTitle string) {\n\n  data, err := xhr.Send(\"GET\", \"/restapi/get-product-detail\"+\"/\"+productTitle, nil)\n  if err != nil {\n    println(\"Encountered error: \", err)\n    println(err)\n  }\n  var product *models.Product\n  json.NewDecoder(strings.NewReader(string(data))).Decode(&product)\n\n  productChannel &lt;- product\n}\n```", "```go\n    templateData := &templatedata.ProductDetail{PageTitle: product.Name, Product: product}\n    env.TemplateSet.Render(\"product_detail_content\", &isokit.RenderParams{Data: templateData, Disposition: isokit.PlacementReplaceInnerContents, Element: env.PrimaryContent, PageTitle: templateData.PageTitle})\n```", "```go\nfunc InitializeProductDetailPage(env *common.Env) {\n\n  buttons := env.Document.GetElementsByClassName(\"addToCartButton\")\n  for _, button := range buttons {\n    button.AddEventListener(\"click\", false, handleAddToCartButtonClickEvent)\n  }\n}\n```", "```go\n{{ define \"pagecontent\" }}\n{{template \"shopping_cart_content\" . }}\n{{end}}\n{{template \"layouts/webpage_layout\" . }}\n```", "```go\n&lt;h1&gt;Shopping Cart&lt;/h1&gt;\n\n{{if .Products }}\n{{range .Products}}\n  &lt;div class=\"productCard\"&gt;\n    &lt;a href=\"{{.Route}}\"&gt;\n    &lt;div class=\"pricebox\"&gt;&lt;span&gt;${{.Price}}&lt;/span&gt;&lt;/div&gt;\n    &lt;div class=\"productCardImageContainer\"&gt;\n      &lt;img src=\"img/{{.ThumbnailPreviewURI}}\"&gt;\n    &lt;/div&gt;\n    &lt;/a&gt;\n    &lt;div class=\"productContainer\"&gt;\n\n    &lt;h3&gt;&lt;b&gt;{{.Name}}&lt;/b&gt;&lt;/h3&gt; \n\n    &lt;p&gt;{{.Description}}&lt;/p&gt; \n\n    &lt;div class=\"productQuantity\"&gt;&lt;span&gt;Quantity: {{.Quantity}}&lt;/span&gt;&lt;/div&gt;\n\n    &lt;div class=\"pure-controls\"&gt;\n      &lt;button class=\"removeFromCartButton pure-button pure-button-primary\" data-sku=\"{{.SKU}}\"&gt;Remove From Cart&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;/div&gt;\n  &lt;/div&gt;\n\n{{end}}\n{{else}}\n&lt;h2&gt;Your shopping cart is empty.&lt;/h2&gt;\n{{end}}\n```", "```go\ntype ShoppingCart struct {\n  PageTitle string\n  Products []*models.Product\n}\n```", "```go\ntype ShoppingCartItem struct {\n  ProductSKU string `json:\"productSKU\"`\n  Quantity int `json:\"quantity\"`\n}\n```", "```go\ntype ShoppingCart struct {\n  Items map[string]*ShoppingCartItem `json:\"items\"`\n}\n```", "```go\nfunc NewShoppingCart() *ShoppingCart {\n  items := make(map[string]*ShoppingCartItem)\n  return &ShoppingCart{Items: items}\n}\n```", "```go\nfunc (s *ShoppingCart) ItemTotal() int {\n  return len(s.Items)\n}\n```", "```go\nfunc (s *ShoppingCart) IsEmpty() bool {\n\n  if len(s.Items) &gt; 0 {\n    return false\n  } else {\n    return true\n  }\n\n}\n```", "```go\nfunc (s *ShoppingCart) AddItem(sku string) {\n\n  if s.Items == nil {\n    s.Items = make(map[string]*ShoppingCartItem)\n  }\n\n  _, ok := s.Items[sku]\n  if ok {\n    s.Items[sku].Quantity += 1\n\n  } else {\n    item := ShoppingCartItem{ProductSKU: sku, Quantity: 1}\n    s.Items[sku] = &item\n  }\n\n}\n```", "```go\nfunc (s *ShoppingCart) RemoveItem(sku string) bool {\n\n  _, ok := s.Items[sku]\n  if ok {\n    delete(s.Items, sku)\n    return true\n  } else {\n    return false\n  }\n\n}\n```", "```go\nfunc (s *ShoppingCart) UpdateItemQuantity(sku string, quantity int) bool {\n\n  _, ok := s.Items[sku]\n  if ok {\n    s.Items[sku].Quantity += 1\n    return true\n  } else {\n\n    return false\n  }\n\n}\n```", "```go\nr.Handle(\"/shopping-cart\", handlers.ShoppingCartHandler(env))\n```", "```go\nr.Handle(\"/restapi/get-cart-items\", endpoints.GetShoppingCartItemsEndpoint(env)).Methods(\"GET\")\n```", "```go\nr.Handle(\"/restapi/add-item-to-cart\", endpoints.AddItemToShoppingCartEndpoint(env)).Methods(\"PUT\")\n```", "```go\nr.Handle(\"/restapi/remove-item-from-cart\", endpoints.RemoveItemFromShoppingCartEndpoint(env)).Methods(\"DELETE\")\n```", "```go\ntype Env struct {\n  DB datastore.Datastore\n  TemplateSet *isokit.TemplateSet\n  Store *sessions.FilesystemStore\n}\n```", "```go\ninitializeSessionstore(&env)\n```", "```go\nfunc initializeSessionstore(env *common.Env) {\n  if _, err := os.Stat(\"/tmp/igweb-sessions\"); os.IsNotExist(err) {\n    os.Mkdir(\"/tmp/igweb-sessions\", 711)\n  }\n  env.Store = sessions.NewFilesystemStore(\"/tmp/igweb-sessions\", []byte(os.Getenv(\"IGWEB_HASH_KEY\")))\n}\n```", "```go\nfunc ShoppingCartHandler(env *common.Env) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n```", "```go\n    var templateData *templatedata.ShoppingCart\n    var cart *models.ShoppingCart\n```", "```go\n    igwSession, _ := env.Store.Get(r, \"igweb-session\")\n```", "```go\nif _, ok := igwSession.Values[\"shoppingCart\"]; ok == true {\n      // Shopping cart exists in session\n      decoder := json.NewDecoder(strings.NewReader(string(igwSession.Values[\"shoppingCart\"].([]byte))))\n      err := decoder.Decode(&cart)\n      if err != nil {\n        log.Print(\"Encountered error when attempting to decode json data from session: \", err)\n      }\n```", "```go\nproducts := env.DB.GetProductsInShoppingCart(cart)\n```", "```go\ntemplateData = &templatedata.ShoppingCart{PageTitle: \"Shopping Cart\", Products: products}\n```", "```go\n    } else {\n      // Shopping cart doesn't exist in session\n      templateData = &templatedata.ShoppingCart{PageTitle: \"Shopping Cart\", Products: nil}\n    }\n```", "```go\n  env.TemplateSet.Render(\"shopping_cart_page\", &isokit.RenderParams{Writer: w, Data: templateData})\n  })\n}\n```", "```go\nfunc (r *RedisDatastore) GetProductsInShoppingCart(cart *models.ShoppingCart) []*models.Product {\n\n  products := r.GetProducts()\n  productsMap := r.GenerateProductsMap(products)\n\n  result := make(models.Products, 0)\n  for _, v := range cart.Items {\n    product := &models.Product{}\n    product = productsMap[v.ProductSKU]\n    product.Quantity = v.Quantity\n    result = append(result, product)\n  }\n  sort.Sort(result)\n  return result\n\n}\n```", "```go\nfunc GetShoppingCartItemsEndpoint(env *common.Env) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\n    var cart *models.ShoppingCart\n    igwSession, _ := env.Store.Get(r, \"igweb-session\")\n\n    if _, ok := igwSession.Values[\"shoppingCart\"]; ok == true {\n      // Shopping cart exists in session\n      decoder := json.NewDecoder(strings.NewReader(string(igwSession.Values[\"shoppingCart\"].([]byte))))\n      err := decoder.Decode(&cart)\n      if err != nil {\n        log.Print(\"Encountered error when attempting to decode json data from session: \", err)\n      }\n\n      products := env.DB.GetProductsInShoppingCart(cart)\n      w.Header().Set(\"Content-Type\", \"application/json\")\n      json.NewEncoder(w).Encode(products)\n\n    } else {\n      // Shopping cart doesn't exist in session\n      cart = nil\n      w.Header().Set(\"Content-Type\", \"application/json\")\n      json.NewEncoder(w).Encode(cart)\n      return\n    }\n\n  })\n}\n```", "```go\nfunc AddItemToShoppingCartEndpoint(env *common.Env) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\n    igwSession, _ := env.Store.Get(r, \"igweb-session\")\n    decoder := json.NewDecoder(r.Body)\n    var m map[string]string\n    err := decoder.Decode(&m)\n    if err != nil {\n      log.Print(\"Encountered error when attempting to decode json data from request body: \", err)\n    }\n    defer r.Body.Close()\n\n    var cart *models.ShoppingCart\n```", "```go\nif _, ok := igwSession.Values[\"shoppingCart\"]; ok == true {\n      // Shopping Cart Exists in Session\n      decoder := json.NewDecoder(strings.NewReader(string(igwSession.Values[\"shoppingCart\"].([]byte))))\n      err := decoder.Decode(&cart)\n      if err != nil {\n        log.Print(\"Encountered error when attempting to decode json data from session: \", err)\n      }\n```", "```go\n} else {\n      // Shopping Cart Doesn't Exist in Session, Create a New One\n      cart = models.NewShoppingCart()\n    }\n```", "```go\ncart.AddItem(m[\"productSKU\"])\n```", "```go\n    b := new(bytes.Buffer)\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    err = json.NewEncoder(b).Encode(cart)\n    if err != nil {\n      log.Print(\"Encountered error when attempting to encode cart struct as json data: \", err)\n    }\n igwSession.Values[\"shoppingCart\"] = b.Bytes()\n igwSession.Save(r, w)\n    w.Write([]byte(\"OK\"))\n  })\n```", "```go\nfunc RemoveItemFromShoppingCartEndpoint(env *common.Env) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\n    igwSession, _ := env.Store.Get(r, \"igweb-session\")\n    decoder := json.NewDecoder(r.Body)\n    var m map[string]string\n    err := decoder.Decode(&m)\n    if err != nil {\n      log.Print(\"Encountered error when attempting to decode json data from request body: \", err)\n    }\n    defer r.Body.Close()\n\n    var cart *models.ShoppingCart\n    if _, ok := igwSession.Values[\"shoppingCart\"]; ok == true {\n      // Shopping Cart Exists in Session\n      decoder := json.NewDecoder(strings.NewReader(string(igwSession.Values[\"shoppingCart\"].([]byte))))\n      err := decoder.Decode(&cart)\n      if err != nil {\n        log.Print(\"Encountered error when attempting to decode json data from session: \", err)\n      }\n    } else {\n      // Shopping Cart Doesn't Exist in Session, Create a New One\n      cart = models.NewShoppingCart()\n    }\n\n    for k, v := range cart.Items {\n      if v.ProductSKU == m[\"productSKU\"] {\n        delete(cart.Items, k)\n      }\n    }\n\n    b := new(bytes.Buffer)\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    err = json.NewEncoder(b).Encode(cart)\n    if err != nil {\n      log.Print(\"Encountered error when attempting to encode cart struct as json data: \", err)\n    }\n    igwSession.Values[\"shoppingCart\"] = b.Bytes()\n    igwSession.Save(r, w)\n\n    w.Write([]byte(\"OK\"))\n\n  })\n}\n```", "```go\nr.Handle(\"/shopping-cart\", handlers.ShoppingCartHandler(env))\n```", "```go\nfunc ShoppingCartHandler(env *common.Env) isokit.Handler {\n  return isokit.HandlerFunc(func(ctx context.Context) {\n    renderShoppingCartItems(env)\n  })\n}\n```", "```go\nfunc renderShoppingCartItems(env *common.Env) {\n\n  productsChannel := make(chan []*models.Product)\n  go fetchProductsInShoppingCart(productsChannel)\n  products := &lt;-productsChannel\n  templateData := &templatedata.ShoppingCart{PageTitle: \"Shopping Cart\", Products: products}\n  env.TemplateSet.Render(\"shopping_cart_content\", &isokit.RenderParams{Data: templateData, Disposition: isokit.PlacementReplaceInnerContents, Element: env.PrimaryContent, PageTitle: templateData.PageTitle})\n  InitializeShoppingCartPage(env)\n  env.Router.RegisterLinks(\"#primaryContent a\")\n}\n```", "```go\nfunc fetchProductsInShoppingCart(productsChannel chan []*models.Product) {\n\n data, err := xhr.Send(\"GET\", \"/restapi/get-cart-items\", nil)\n if err != nil {\n println(\"Encountered error: \", err)\n println(err)\n }\n var products []*models.Product\n json.NewDecoder(strings.NewReader(string(data))).Decode(&products)\n\n productsChannel &lt;- products\n}\n```", "```go\ntemplateData := &templatedata.ShoppingCart{PageTitle: \"Shopping Cart\", Products: products}\n```", "```go\nenv.TemplateSet.Render(\"shopping_cart_content\", &isokit.RenderParams{Data: templateData, Disposition: isokit.PlacementReplaceInnerContents, Element: env.PrimaryContent, PageTitle: templateData.PageTitle})\n```", "```go\nfunc InitializeShoppingCartPage(env *common.Env) {\n\n  buttons := env.Document.GetElementsByClassName(\"removeFromCartButton\")\n  for _, button := range buttons {\n    button.AddEventListener(\"click\", false,\n      func(event dom.Event) {\n        handleRemoveFromCartButtonClickEvent(env, event)\n\n      })\n  }\n\n}\n```", "```go\nfunc handleRemoveFromCartButtonClickEvent(env *common.Env, event dom.Event) {\n  productSKU := event.Target().GetAttribute(\"data-sku\")\n  go removeFromCart(env, productSKU)\n}\n```", "```go\nfunc removeFromCart(env *common.Env, productSKU string) {\n\n  m := make(map[string]string)\n  m[\"productSKU\"] = productSKU\n  jsonData, _ := json.Marshal(m)\n\n  data, err := xhr.Send(\"DELETE\", \"/restapi/remove-item-from-cart\", jsonData)\n  if err != nil {\n    println(\"Encountered error: \", err)\n    notify.Error(\"Failed to remove item from cart!\")\n    return\n  }\n  var products []*models.Product\n  json.NewDecoder(strings.NewReader(string(data))).Decode(&products)\n  renderShoppingCartItems(env)\n  notify.Success(\"Item removed from cart\")\n}\n```", "```go\nfunc handleAddToCartButtonClickEvent(event dom.Event) {\n  productSKU := event.Target().GetAttribute(\"data-sku\")\n  go addToCart(productSKU)\n}\n```", "```go\nfunc addToCart(productSKU string) {\n\n  m := make(map[string]string)\n  m[\"productSKU\"] = productSKU\n  jsonData, _ := json.Marshal(m)\n\n  data, err := xhr.Send(\"PUT\", \"/restapi/add-item-to-cart\", jsonData)\n  if err != nil {\n    println(\"Encountered error: \", err)\n    notify.Error(\"Failed to add item to cart!\")\n    return\n  }\n  var products []*models.Product\n  json.NewDecoder(strings.NewReader(string(data))).Decode(&products)\n  notify.Success(\"Item added to cart\")\n}\n```"]