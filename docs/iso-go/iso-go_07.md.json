["```go\n{{ define \"pagecontent\" }}\n{{template \"contact_content\" . }}\n{{end}}\n{{template \"layouts/webpage_layout\" . }}\n```", "```go\n<h1>Contact</h1>\n\n{{template \"partials/contactform_partial\" .}}\n```", "```go\n<div class=\"formContainer\">\n<form id=\"contactForm\" name=\"contactForm\" action=\"/contact\" method=\"POST\" class=\"pure-form pure-form-aligned\">\n  <fieldset>\n{{if .Form }}\n    <div class=\"pure-control-group\">\n      <label for=\"firstName\">First Name</label>\n      <input id=\"firstName\" type=\"text\" placeholder=\"First Name\" name=\"firstName\" value=\"{{.Form.Fields.firstName}}\">\n      <span id=\"firstNameError\" class=\"formError pure-form-message-inline\">{{.Form.Errors.firstName}}</span>\n    </div>\n\n    <div class=\"pure-control-group\">\n      <label for=\"lastName\">Last Name</label>\n      <input id=\"lastName\" type=\"text\" placeholder=\"Last Name\" name=\"lastName\" value=\"{{.Form.Fields.lastName}}\">\n      <span id=\"lastNameError\" class=\"formError pure-form-message-inline\">{{.Form.Errors.lastName}}</span>\n    </div>\n\n    <div class=\"pure-control-group\">\n      <label for=\"email\">E-mail Address</label>\n      <input id=\"email\" type=\"text\" placeholder=\"E-mail Address\" name=\"email\" value=\"{{.Form.Fields.email}}\">\n      <span id=\"emailError\" class=\"formError pure-form-message-inline\">{{.Form.Errors.email}}</span>\n    </div>\n\n    <fieldset class=\"pure-control-group\">\n      <textarea id=\"messageBody\" class=\"pure-input-1-2\" placeholder=\"Enter your message for us here.\" name=\"messageBody\">{{.Form.Fields.messageBody}}</textarea>\n      <span id=\"messageBodyError\" class=\"formError pure-form-message-inline\">{{.Form.Errors.messageBody}}</span>\n    </fieldset>\n\n    <div class=\"pure-controls\">\n      <input id=\"contactButton\" name=\"contactButton\" class=\"pure-button pure-button-primary\" type=\"submit\" value=\"Contact\" />\n    </div>\n{{end}}\n  </fieldset>\n</form>\n</div>\n```", "```go\nconst EmailRegex = `(?i)^[_a-z0-9-]+(\\.[_a-z0-9-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*(\\.[a-z]{2,3})+$`\n\nfunc EmailSyntax(email string) bool {\n  validationResult := false\n  r, err := regexp.Compile(EmailRegex)\n  if err != nil {\n    log.Fatal(err)\n  }\n  validationResult = r.MatchString(email)\n  return validationResult\n}\n```", "```go\ntype Form interface {\n Validate() bool\n Fields() map[string]string\n Errors() map[string]string\n FormParams() *FormParams\n PrefillFields()\n SetFields(fields map[string]string)\n SetErrors(errors map[string]string)\n SetFormParams(formParams *FormParams)\n SetPrefillFields(prefillFields []string)\n}\n```", "```go\ntype FormParams struct {\n  FormElement *dom.HTMLFormElement\n  ResponseWriter http.ResponseWriter\n  Request *http.Request\n  UseFormFieldsForValidation bool\n  FormFields map[string]string\n}\n```", "```go\nimport (\n  \"github.com/EngineerKamesh/igb/igweb/shared/validate\"\n  \"github.com/isomorphicgo/isokit\"\n)\n```", "```go\ntype ContactForm struct {\n  isokit.BasicForm\n}\n```", "```go\nfunc NewContactForm(formParams *isokit.FormParams) *ContactForm {\n  prefillFields := []string{\"firstName\", \"lastName\", \"email\", \"messageBody\", \"byDateInput\"}\n  fields := make(map[string]string)\n  errors := make(map[string]string)\n  c := &ContactForm{}\n  c.SetPrefillFields(prefillFields)\n  c.SetFields(fields)\n  c.SetErrors(errors)\n  c.SetFormParams(formParams)\n  return c\n}\n```", "```go\nfunc (c *ContactForm) Validate() bool {\n  c.RegenerateErrors()\n  c.PopulateFields()\n\n  // Check if first name was filled out\n  if isokit.FormValue(c.FormParams(), \"firstName\") == \"\" {\n    c.SetError(\"firstName\", \"The first name field is required.\")\n  }\n\n  // Check if last name was filled out\n  if isokit.FormValue(c.FormParams(), \"lastName\") == \"\" {\n    c.SetError(\"lastName\", \"The last name field is required.\")\n  }\n\n  // Check if message body was filled out\n  if isokit.FormValue(c.FormParams(), \"messageBody\") == \"\" {\n    c.SetError(\"messageBody\", \"The message area must be filled.\")\n  }\n\n  // Check if e-mail address was filled out\n  if isokit.FormValue(c.FormParams(), \"email\") == \"\" {\n    c.SetError(\"email\", \"The e-mail address field is required.\")\n  } else if validate.EmailSyntax(isokit.FormValue(c.FormParams(), \"email\")) == false {\n    // Check e-mail address syntax\n    c.SetError(\"email\", \"The e-mail address entered has an improper syntax.\")\n\n  }\n\n  if len(c.Errors()) > 0 {\n    return false\n\n  } else {\n    return true\n  }\n}\n```", "```go\n  r.Handle(\"/contact\", handlers.ContactHandler(env)).Methods(\"GET\", \"POST\")\n  r.Handle(\"/contact-confirmation\", handlers.ContactConfirmationHandler(env)).Methods(\"GET\")\n```", "```go\nfunc ContactHandler(env *common.Env) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n```", "```go\n    formParams := isokit.FormParams{ResponseWriter: w, Request: r}\n```", "```go\n    contactForm := forms.NewContactForm(&formParams)\n```", "```go\n    switch r.Method {\n\n    case \"GET\":\n      DisplayContactForm(env, contactForm)\n    case \"POST\":\n      validationResult := contactForm.Validate()\n      if validationResult == true {\n        submissions.ProcessContactForm(env, contactForm)\n        DisplayConfirmation(env, w, r)\n      } else {\n        DisplayContactForm(env, contactForm)\n      }\n    default:\n      DisplayContactForm(env, contactForm)\n    }\n\n  })\n}\n```", "```go\nfunc DisplayContactForm(env *common.Env, contactForm *forms.ContactForm) {\n  templateData := &templatedata.Contact{PageTitle: \"Contact\", Form: contactForm}\n  env.TemplateSet.Render(\"contact_page\", &isokit.RenderParams{Writer: contactForm.FormParams().ResponseWriter, Data: templateData})\n}\n```", "```go\ntype Contact struct {\n  PageTitle string\n  Form *forms.ContactForm\n}\n```", "```go\nfunc DisplayConfirmation(env *common.Env, w http.ResponseWriter, r *http.Request) {\n  http.Redirect(w, r, \"/contact-confirmation\", 302)\n}\n```", "```go\nfunc ContactConfirmationHandler(env *common.Env) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\n    env.TemplateSet.Render(\"contact_confirmation_page\", &isokit.RenderParams{Writer: w, Data: nil})\n  })\n}\n```", "```go\nfunc ProcessContactForm(env *common.Env, form *forms.ContactForm) {\n\n  log.Println(\"Successfully reached process content form function, indicating that the contact form was filled out properly resulting in a positive validation.\")\n\n  contactRequest := &models.ContactRequest{FirstName: form.GetFieldValue(\"firstName\"), LastName: form.GetFieldValue(\"lastName\"), Email: form.GetFieldValue(\"email\"), Message: form.GetFieldValue(\"messageBody\")}\n\n  env.DB.CreateContactRequest(contactRequest)\n}\n```", "```go\ntype ContactRequest struct {\n  FirstName string\n  LastName string\n  Email string\n  Message string\n}\n```", "```go\nenv.DB.CreateContactRequest(contactRequest)\n```", "```go\nfunc (r *RedisDatastore) CreateContactRequest(contactRequest *models.ContactRequest) error {\n\n  now := time.Now()\n  nowFormatted := now.Format(time.RFC822Z)\n\n  jsonData, err := json.Marshal(contactRequest)\n  if err != nil {\n    return err\n  }\n\n  if r.Cmd(\"SET\", \"contact-request|\"+contactRequest.Email+\"|\"+nowFormatted, string(jsonData)).Err != nil {\n    return errors.New(\"Failed to execute Redis SET command\")\n  }\n\n  return nil\n\n}\n```", "```go\n$ brew install lynx\n```", "```go\n$ sudo apt-get install lynx\n```", "```go\n$ lynx --nocolor localhost:8080/contact\n```", "```go\nfunc ContactHandler(env *common.Env) isokit.Handler {\n  return isokit.HandlerFunc(func(ctx context.Context) {\n    contactForm := forms.NewContactForm(nil)\n    DisplayContactForm(env, contactForm)\n  })\n}\n```", "```go\nfunc DisplayContactForm(env *common.Env, contactForm *forms.ContactForm) {\n  templateData := &templatedata.Contact{PageTitle: \"Contact\", Form: contactForm}\n  env.TemplateSet.Render(\"contact_content\", &isokit.RenderParams{Data: templateData, Disposition: isokit.PlacementReplaceInnerContents, Element: env.PrimaryContent, PageTitle: templateData.PageTitle})\n  InitializeContactPage(env, contactForm)\n}\n```", "```go\nfunc InitializeContactPage(env *common.Env, contactForm *forms.ContactForm) {\n\n  formElement := env.Document.GetElementByID(\"contactForm\").(*dom.HTMLFormElement)\n  contactForm.SetFormParams(&isokit.FormParams{FormElement: formElement})\n  contactButton := env.Document.GetElementByID(\"contactButton\").(*dom.HTMLInputElement)\n  contactButton.AddEventListener(\"click\", false, func(event dom.Event) {\n    handleContactButtonClickEvent(env, event, contactForm)\n  })\n}\n```", "```go\nfunc handleContactButtonClickEvent(env *common.Env, event dom.Event, contactForm *forms.ContactForm) {\n\n  event.PreventDefault()\n  clientSideValidationResult := contactForm.Validate()\n\n  if clientSideValidationResult == true {\n\n    contactFormErrorsChannel := make(chan map[string]string)\n    go ContactFormSubmissionRequest(contactFormErrorsChannel, contactForm)\n```", "```go\nfunc ContactFormSubmissionRequest(contactFormErrorsChannel chan map[string]string, contactForm *forms.ContactForm) {\n\n  jsonData, err := json.Marshal(contactForm.Fields())\n  if err != nil {\n    println(\"Encountered error: \", err)\n    return\n  }\n\n  data, err := xhr.Send(\"POST\", \"/restapi/contact-form\", jsonData)\n  if err != nil {\n    println(\"Encountered error: \", err)\n    return\n  }\n\n  var contactFormErrors map[string]string\n  json.NewDecoder(strings.NewReader(string(data))).Decode(&contactFormErrors)\n\n  contactFormErrorsChannel <- contactFormErrors\n}\n```", "```go\n    go func() {\n\n      serverContactFormErrors := <-contactFormErrorsChannel\n      serverSideValidationResult := len(serverContactFormErrors) == 0\n\n      if serverSideValidationResult == true {\n        env.TemplateSet.Render(\"contact_confirmation_content\", &isokit.RenderParams{Data: nil, Disposition: isokit.PlacementReplaceInnerContents, Element: env.PrimaryContent})\n      } else {\n        contactForm.SetErrors(serverContactFormErrors)\n        contactForm.DisplayErrors()\n      }\n\n    }()\n\n  } else {\n    contactForm.DisplayErrors()\n  }\n}\n```", "```go\nr.Handle(\"/restapi/contact-form\", endpoints.ContactFormEndpoint(env)).Methods(\"POST\")\n```", "```go\nfunc ContactFormEndpoint(env *common.Env) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\n    var fields map[string]string\n\n    reqBody, err := ioutil.ReadAll(r.Body)\n    if err != nil {\n      log.Print(\"Encountered error when attempting to read the request body: \", err)\n    }\n\n    err = json.Unmarshal(reqBody, &fields)\n    if err != nil {\n      log.Print(\"Encountered error when attempting to unmarshal json data: \", err)\n    }\n\n    formParams := isokit.FormParams{ResponseWriter: w, Request: r, UseFormFieldsForValidation: true, FormFields: fields}\n    contactForm := forms.NewContactForm(&formParams)\n    validationResult := contactForm.Validate()\n\n    if validationResult == true {\n      submissions.ProcessContactForm(env, contactForm)\n    }\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    json.NewEncoder(w).Encode(contactForm.Errors())\n  })\n}\n```", "```go\nfunc handleContactButtonClickEvent(env *common.Env, event dom.Event, contactForm *forms.ContactForm) {\n\n  event.PreventDefault()\n  clientSideValidationResult := contactForm.Validate()\n\n  clientSideValidationResult = true\n\n  if clientSideValidationResult == true {\n\n    contactFormErrorsChannel := make(chan map[string]string)\n    go ContactFormSubmissionRequest(contactFormErrorsChannel, contactForm)\n\n    go func() {\n\n      serverContactFormErrors := <-contactFormErrorsChannel\n      serverSideValidationResult := len(serverContactFormErrors) == 0\n\n      if serverSideValidationResult == true {\n        env.TemplateSet.Render(\"contact_confirmation_content\", &isokit.RenderParams{Data: nil, Disposition: isokit.PlacementReplaceInnerContents, Element: env.PrimaryContent})\n      } else {\n        contactForm.SetErrors(serverContactFormErrors)\n        contactForm.DisplayErrors()\n      }\n\n    }()\n\n  } else {\n    contactForm.DisplayErrors()\n  }\n}\n```"]