["```go\n$ go get -u github.com/uxtoolkit/cog\n```", "```go\ntype Cog interface {\n  Render() error\n  Start() error\n}\n```", "```go\ntype UXCog struct {\n  Cog\n  cogType reflect.Type\n  cogPrefixName string\n  cogPackagePath string\n  cogTemplatePath string\n  templateSet *isokit.TemplateSet\n  Props map[string]interface{}\n  element *dom.Element\n  id string\n  hasBeenRendered bool\n  parseTree *reconcile.ParseTree\n  cleanupFunc func()\n}\n```", "```go\nfunc (u *UXCog) ID() string\n\nfunc (u *UXCog) SetID(id string) \n\nfunc (u *UXCog) CogInit(ts *isokit.TemplateSet)\n\nfunc (u *UXCog) SetCogType(cogType reflect.Type)\n\nfunc (u *UXCog) SetProp(key string, value interface{})\n\nfunc (u *UXCog) Render() error\n```", "```go\n  \u2043 widget\n    \u2043 widget.go\n    \u2043 templates\n    \u2043 widget.tmpl\n```", "```go\npackage widget\n```", "```go\nimport (\n  \"errors\"\n  \"reflect\"\n  \"github.com/uxtoolkit/cog\"\n)\n```", "```go\nvar cogType reflect.Type\n```", "```go\nfunc init() {\n  cogType = reflect.TypeOf(Widget{})\n}\n```", "```go\ntype Widget struct {\n  cog.UXCog\n}\n```", "```go\nfunc NewWidget() *Widget {\n  w := &Widget{}\n  w.SetCogType(cogType)\n  return f\n}\n```", "```go\nfunc (w *Widget) Start() error {\n\n  var allRequiredConditionsHaveBeenMet bool = true\n```", "```go\n  if allRequiredConditionsHaveBeenMet == false {\n    return errors.New(\"Failed to meet all requirements, cog failed to start!\")\n  }\n```", "```go\n  w.SetProp(\"foo\", \"bar\")\n```", "```go\n<p>Value of Foo is: {{.foo}}</p>\n```", "```go\n  err := w.Render()\n  if err != nil {\n    return err\n  }\n```", "```go\nreturn nil\n```", "```go\n<div data-component=\"cog\" id=\"widgetContainer\"></div>\n```", "```go\nw := widget.NewWidget()\nw.CogInit(env.TemplateSet)\nw.SetID(\"widgetContainer\")\nw.Start()\nw.SetProp(\"foo\", \"bar2\")\n```", "```go\ninitializeCogs(env.TemplateSet)\n```", "```go\nfunc initializeCogs(ts *isokit.TemplateSet) {\n  timeago.NewTimeAgo().CogInit(ts)\n  liveclock.NewLiveClock().CogInit(ts)\n  datepicker.NewDatePicker().CogInit(ts)\n  carousel.NewCarousel().CogInit(ts)\n  notify.NewNotify().CogInit(ts)\n  isokit.BundleStaticAssets()\n}\n```", "```go\n<h1>About</h1>\n\n<div id=\"gopherTeamContainer\">\n  {{range .Gophers}}\n\n    <div class=\"gopherContainer\">\n\n      <div class=\"gopherImageContainer\">\n        <img height=\"270\" src=\"img/{{.ImageURI}}\">\n      </div>\n\n      <div class=\"gopherDetailsContainer\">\n          <div class=\"gopherName\"><h3><b>{{.Name}}</b></h3></div>\n          <div class=\"gopherTitle\"><span>{{.Title}}</span></div> \n          <div class=\"gopherBiodata\"><p>{{.Biodata}}</p></div>\n          <div class=\"gopherStartTime\">\n            <p class=\"standardStartTime\">{{.Name}} joined the IGWEB team on <span class=\"starttime\">{{.StartTime}}.</p>\n            <p class=\"rubyStartTime\">That's <span class=\"starttime\">{{.StartTime | rubyformat}}</span> in Ruby date format.</p>\n            <div class=\"humanReadableGopherTime\">That's\n <div id=\"Gopher-{{.Name}}\" data-starttimeunix=\"{{.StartTime | unixformat}}\" data-component=\"cog\" class=\"humanReadableDate starttime\"></div>\n in Human readable format.\n </div>\n          </div>\n      </div>\n    </div>\n\n  {{end}}\n</div>\n```", "```go\nfunc UnixTime(t time.Time) string {\n  return strconv.FormatInt(t.Unix(), 10)\n}\n```", "```go\npackage timeago\n```", "```go\nimport (\n  \"errors\"\n  \"reflect\"\n  \"time\"\n\n humanize \"github.com/dustin/go-humanize\"\n  \"github.com/uxtoolkit/cog\"\n)\n```", "```go\nvar cogType reflect.Type\n```", "```go\nfunc init() {\n  cogType = reflect.TypeOf(TimeAgo{})\n}\n```", "```go\ntype TimeAgo struct {\n  cog.UXCog\n  timeInstance time.Time\n}\n```", "```go\nfunc NewTimeAgo() *TimeAgo {\n  t := &TimeAgo{}\n  t.SetCogType(cogType)\n  return t\n}\n```", "```go\nfunc (t *TimeAgo) SetTime(timeInstance time.Time) {\n  t.timeInstance = timeInstance\n}\n```", "```go\nfunc (t *TimeAgo) Start() error {\n\n  if t.timeInstance.IsZero() == true {\n    return errors.New(\"The time instance value has not been set!\")\n  }\n\n  t.SetProp(\"timeAgoValue\", humanize.Time(t.timeInstance))\n\n  err := t.Render()\n  if err != nil {\n    return err\n  }\n\n  return nil\n}\n```", "```go\n<span class=\"timeagoSpan\">{{.timeAgoValue}}</span>\n```", "```go\nfunc InitializeAboutPage(env *common.Env) {\n  humanReadableDivs := env.Document.GetElementsByClassName(\"humanReadableDate\")\n  for _, div := range humanReadableDivs {\n    unixTimestamp, err := strconv.ParseInt(div.GetAttribute(\"data-starttimeunix\"), 10, 64)\n    if err != nil {\n      log.Println(\"Encountered error when attempting to parse int64 from string:\", err)\n    }\n    t := time.Unix(unixTimestamp, 0)\n humanTime := timeago.NewTimeAgo()\n humanTime.CogInit(env.TemplateSet)\n humanTime.SetID(div.ID())\n humanTime.SetTime(t)\n err = humanTime.Start()\n    if err != nil {\n      println(\"Encountered the following error when attempting to start the timeago cog: \", err)\n    }\n  }\n}\n```", "```go\n <div data-component=\"cog\" id=\"myLiveClock\" class=\"liveclockTime\"></div>\n <div data-component=\"cog\" id=\"chennaiLiveClock\" class=\"liveclockTime\"></div>\n <div data-component=\"cog\" id=\"singaporeLiveClock\" class=\"liveclockTime\"></div>\n <div data-component=\"cog\" id=\"hawaiiLiveClock\" class=\"liveclockTime\"></div>\n```", "```go\npackage liveclock\n```", "```go\nimport (\n  \"errors\"\n  \"reflect\"\n  \"time\"\n \"github.com/uxtoolkit/cog\"\n)\n```", "```go\nvar cogType reflect.Type\n```", "```go\nfunc init() {\n  cogType = reflect.TypeOf(LiveClock{})\n}\n```", "```go\ntype LiveClock struct {\n  cog.UXCog\n  ticker *time.Ticker\n}\n```", "```go\nfunc NewLiveClock() *LiveClock {\n  liveClock := &LiveClock{}\n liveClock.SetCogType(cogType)\n  liveClock.SetCleanupFunc(liveClock.Cleanup)\n  return liveClock\n}\n```", "```go\nfunc (lc *LiveClock) Cleanup() {\n  lc.ticker.Stop()\n}\n```", "```go\nfunc (lc *LiveClock) Start() error {\n```", "```go\n  const layout = time.RFC1123\n  var location *time.Location\n```", "```go\n  if lc.Props[\"timezoneName\"] != nil && lc.Props[\"timezoneOffset\"] != nil {\n    location = time.FixedZone(lc.Props[\"timezoneName\"].(string), lc.Props[\"timezoneOffset\"].(int))\n  } else {\n    return errors.New(\"The timezoneName and timezoneOffset props need to be set!\")\n  }\n```", "```go\nlc.ticker = time.NewTicker(time.Millisecond * 1000)\n```", "```go\n  go func() {\n    for t := range lc.ticker.C {\n lc.SetProp(\"currentTime\", t.In(location).Format(layout))\n    }\n  }()\n```", "```go\n  err := lc.Render()\n  if err != nil {\n    return err\n  }\n```", "```go\n return nil\n```", "```go\n<p>{{.timeLabel}}: {{.currentTime}}</p>\n```", "```go\n  // Localtime Live Clock Cog\n  localZonename, localOffset := time.Now().In(time.Local).Zone()\n  lc := liveclock.NewLiveClock()\n  lc.CogInit(env.TemplateSet)\n  lc.SetID(\"myLiveClock\")\n  lc.SetProp(\"timeLabel\", \"Local Time\")\n  lc.SetProp(\"timezoneName\", localZonename)\n  lc.SetProp(\"timezoneOffset\", localOffset)\n  err = lc.Start()\n  if err != nil {\n    println(\"Encountered the following error when attempting to start the local liveclock cog: \", err)\n  }\n```", "```go\n  // Chennai Live Clock Cog\n  chennai := liveclock.NewLiveClock()\n  chennai.CogInit(env.TemplateSet)\n  chennai.SetID(\"chennaiLiveClock\")\n  chennai.SetProp(\"timeLabel\", \"Chennai\")\n  chennai.SetProp(\"timezoneName\", \"IST\")\n  chennai.SetProp(\"timezoneOffset\", int(+5.5*3600))\n  err = chennai.Start()\n  if err != nil {\n    println(\"Encountered the following error when attempting to start the chennai liveclock cog: \", err)\n  }\n\n  // Singapore Live Clock Cog\n  singapore := liveclock.NewLiveClock()\n  singapore.CogInit(env.TemplateSet)\n  singapore.SetID(\"singaporeLiveClock\")\n  singapore.SetProp(\"timeLabel\", \"Singapore\")\n  singapore.SetProp(\"timezoneName\", \"SST\")\n  singapore.SetProp(\"timezoneOffset\", int(+8.0*3600))\n  err = singapore.Start()\n  if err != nil {\n    println(\"Encountered the following error when attempting to start the singapore liveclock cog: \", err)\n  }\n\n  // Hawaii Live Clock Cog\n  hawaii := liveclock.NewLiveClock()\n  hawaii.CogInit(env.TemplateSet)\n  hawaii.SetID(\"hawaiiLiveClock\")\n  hawaii.SetProp(\"timeLabel\", \"Hawaii\")\n  hawaii.SetProp(\"timezoneName\", \"HDT\")\n  hawaii.SetProp(\"timezoneOffset\", int(-10.0*3600))\n  err = hawaii.Start()\n  if err != nil {\n    println(\"Encountered the following error when attempting to start the hawaii liveclock cog: \", err)\n  }\n```", "```go\n    <fieldset class=\"pure-control-group\">\n      <div data-component=\"cog\" id=\"sensitivityDate\"></div>\n    </fieldset>\n```", "```go\npackage datepicker\n```", "```go\nimport (\n  \"errors\"\n  \"reflect\"\n  \"time\"\n\n  \"github.com/gopherjs/gopherjs/js\"\n  \"github.com/uxtoolkit/cog\"\n)\n```", "```go\nvar cogType reflect.Type\nvar JS = js.Global\n```", "```go\ntype DatePickerParams struct {\n  *js.Object\n  Field *js.Object `js:\"field\"`\n  FirstDay int `js:\"firstDay\"`\n  MinDate *js.Object `js:\"minDate\"`\n  MaxDate *js.Object `js:\"maxDate\"`\n  YearRange []int `js:\"yearRange\"`\n}\n```", "```go\ntype DatePicker struct {\n  cog.UXCog\n  picker *js.Object\n}\n```", "```go\nfunc NewDatePicker() *DatePicker {\n  d := &DatePicker{}\n  d.SetCogType(cogType)\n  return d\n}\n```", "```go\nfunc (d *DatePicker) Start() error {\n\n  if d.Props[\"datepickerInputID\"] == nil {\n    return errors.New(\"Warning: The datePickerInputID prop need to be set!\")\n  }\n\n  err := d.Render()\n  if err != nil {\n    return err\n  }\n```", "```go\nparams := &DatePickerParams{Object: js.Global.Get(\"Object\").New()}\n```", "```go\n for propName, propValue := range d.Props {\n```", "```go\n switch propName {\n\n    case \"datepickerInputID\":\n      inputFieldID := propValue.(string)\n      dateInputField := JS.Get(\"document\").Call(\"getElementById\", inputFieldID)\n      params.Field = dateInputField\n\n    case \"datepickerLabel\":\n      // Do nothing\n\n    case \"datepickerMinDate\":\n      datepickerMinDate := propValue.(time.Time)\n      minDateUnix := datepickerMinDate.Unix()\n      params.MinDate = JS.Get(\"Date\").New(minDateUnix * 1000)\n\n    case \"datepickerMaxDate\":\n      datepickerMaxDate := propValue.(time.Time)\n      maxDateUnix := datepickerMaxDate.Unix()\n      params.MaxDate = JS.Get(\"Date\").New(maxDateUnix * 1000)\n\n    case \"datepickerYearRange\":\n      yearRange := propValue.([]int)\n      params.YearRange = yearRange\n\n    default:\n      println(\"Warning: Unknown prop name provided: \", propName)\n    }\n  }\n```", "```go\nd.picker = JS.Get(\"Pikaday\").New(params)\n```", "```go\nreturn nil\n```", "```go\n <label class=\"datepickerLabel\" for=\"datepicker\">{{.datepickerLabel}}</label>\n <input class=\"datepickerInput\" type=\"text\" id=\"{{.datepickerInputID}}\" name=\"{{.datepickerInputID}}\">\n```", "```go\n  byDate := datepicker.NewDatePicker()\n  byDate.CogInit(env.TemplateSet)\n  byDate.SetID(\"sensitivityDate\")\n  byDate.SetProp(\"datepickerLabel\", \"Time Sensitivity Date:\")\n  byDate.SetProp(\"datepickerInputID\", \"byDateInput\")\n  byDate.SetProp(\"datepickerMinDate\", time.Now())\n  byDate.SetProp(\"datepickerMaxDate\", time.Date(2027, 12, 31, 23, 59, 0, 0, time.UTC))\n  err := byDate.Start()\n  if err != nil {\n    println(\"Encountered the following error when attempting to start the datepicker cog: \", err)\n  }\n```", "```go\ncontainer Node | String Default: document.querySelector('.slider').\n```", "```go\nitems Integer Default: 1.\n```", "```go\nslideBy Integer | 'page' Default: 1.\n```", "```go\nautoplay Boolean Default: false.\n```", "```go\nautoplayText Array (Text | Markup) Default: ['start', 'stop'].\n```", "```go\ncontrols Boolean Default: true.\n```", "```go\n<div data-component=\"cog\" id=\"carousel\"></div>\n```", "```go\npackage carousel\n\nimport (\n  \"errors\"\n  \"reflect\"\n\n  \"github.com/gopherjs/gopherjs/js\"\n  \"github.com/uxtoolkit/cog\"\n)\n```", "```go\ntype CarouselParams struct {\n  *js.Object\n  Container string `js:\"container\"`\n  Items int `js:\"items\"`\n  SlideBy string `js:\"slideBy\"`\n  Autoplay bool `js:\"autoplay\"`\n  AutoplayText []string `js:\"autoplayText\"`\n  Controls bool `js:\"controls\"`\n}\n```", "```go\ntype Carousel struct {\n  cog.UXCog\n  carousel *js.Object\n}\n```", "```go\nfunc NewCarousel() *Carousel {\n  c := &Carousel{}\n  c.SetCogType(cogType)\n  return c\n}\n```", "```go\nfunc (c *Carousel) Start() error {\n```", "```go\n  if c.Props[\"contentItems\"] == nil || c.Props[\"carouselContentID\"] == nil {\n    return errors.New(\"The contentItems and carouselContentID props need to be set!\")\n  }\n\n  err := c.Render()\n  if err != nil {\n    return err\n  }\n```", "```go\n params := &CarouselParams{Object: js.Global.Get(\"Object\").New()}\n```", "```go\n  // Set the default parameter values\n  params.Items = 1\n  params.SlideBy = \"page\"\n  params.Autoplay = true\n  params.AutoplayText = []string{PLAYTEXT, STOPTEXT}\n  params.Controls = false\n```", "```go\n for propName, propValue := range c.Props {\n```", "```go\n switch propName {\n\n    case \"carouselContentID\":\n      if propValue != nil {\n        params.Container = \"#\" + c.Props[\"carouselContentID\"].(string)\n      }\n\n    case \"contentItems\":\n      // Do nothing\n\n    case \"items\":\n      if propValue != nil {\n        params.Items = propValue.(int)\n      }\n\n    case \"slideBy\":\n      if propValue != nil {\n        params.SlideBy = c.Props[\"slideBy\"].(string)\n      }\n\n    case \"autoplay\":\n      if propValue != nil {\n        params.Autoplay = c.Props[\"autoplay\"].(bool)\n      }\n\n    case \"autoplayText\":\n      if propValue != nil {\n        params.AutoplayText = c.Props[\"autoplayText\"].([]string)\n      }\n\n    case \"controls\":\n      if propValue != nil {\n        params.Controls = c.Props[\"controls\"].(bool)\n      }\n\n    default:\n      println(\"Warning: Unknown prop name provided: \", propName)\n    }\n  }\n```", "```go\nc.carousel = JS.Get(\"tns\").New(params)\n```", "```go\nreturn nil\n```", "```go\n<div id=\"{{.carouselContentID}}\" class=\"carousel\">\n{{range .contentItems}}\n  <div><img src=\"img/strong>\"></div>\n{{end}}\n</div>\n```", "```go\n  c := carousel.NewCarousel()\n  c.CogInit(env.TemplateSet)\n  c.SetID(\"carousel\")\n  contentItems := []string{\"/static/images/products/watch.jpg\", \"/static/images/products/shirt.jpg\", \"/static/images/products/coffeemug.jpg\"}\n  c.SetProp(\"contentItems\", contentItems)\n  c.SetProp(\"carouselContentID\", \"gophersContent\")\n  err := c.Start()\n  if err != nil {\n    println(\"Encountered the following error when attempting to start the carousel cog: \", err)\n  }\n```", "```go\nvar alreadyStarted bool\n```", "```go\ntype Notify struct {\n  cog.UXCog\n  alertify *js.Object\n  successNotificationEventListener func(*js.Object)\n  errorNotificationEventListener func(*js.Object)\n}\n```", "```go\nfunc NewNotify() *Notify {\n  n := &Notify{}\n  n.SetCogType(cogType)\n  n.SetCleanupFunc(n.Cleanup)\n  return n\n}\n```", "```go\nfunc (n *Notify) Start() error {\n  if alreadyStarted == true {\n    return errors.New(\"The notification cog can be instantiated only once.\")\n  }\n```", "```go\n n.alertify = js.Global.Get(\"alertify\")\n```", "```go\n  n.StartListening()\n  return nil\n```", "```go\nfunc (n *Notify) StartListening() {\n\n  alreadyStarted = true\n  D := dom.GetWindow()\n  n.successNotificationEventListener = D.AddEventListener(\"displaySuccessNotification\", false, func(event dom.Event) {\n    message := event.Underlying().Get(\"detail\").String()\n    n.notifySuccess(message)\n  })\n\n  n.errorNotificationEventListener = D.AddEventListener(\"displayErrorNotification\", false, func(event dom.Event) {\n    message := event.Underlying().Get(\"detail\").String()\n    n.notifyError(message)\n  })\n}\n```", "```go\nfunc (n *Notify) notifySuccess(message string) {\n  n.alertify.Call(\"success\", message)\n}\n```", "```go\nfunc (n *Notify) notifyError(message string) {\n  n.alertify.Call(\"error\", message)\n}\n```", "```go\nfunc (n *Notify) Cleanup() {\n  n.StopListening()\n}\n```", "```go\nfunc (n *Notify) StopListening() {\n  D := dom.GetWindow()\n  if n.successNotificationEventListener != nil {\n    D.RemoveEventListener(\"displaySuccessNotification\", false, n.successNotificationEventListener)\n  }\n\n  if n.errorNotificationEventListener != nil {\n    D.RemoveEventListener(\"displayErrorNotification\", false, n.errorNotificationEventListener)\n  }\n\n}\n```", "```go\nfunc Success(message string) {\n  var eventDetail = js.Global.Get(\"Object\").New()\n  eventDetail.Set(\"detail\", message)\n  customEvent := js.Global.Get(\"window\").Get(\"CustomEvent\").New(\"displaySuccessNotification\", eventDetail)\n  js.Global.Get(\"window\").Call(\"dispatchEvent\", customEvent)\n}\n```", "```go\nfunc Error(message string) {\n  var eventDetail = js.Global.Get(\"Object\").New()\n  eventDetail.Set(\"detail\", message)\n  customEvent := js.Global.Get(\"window\").Get(\"CustomEvent\").New(\"displayErrorNotification\", eventDetail)\n  js.Global.Get(\"window\").Call(\"dispatchEvent\", customEvent)\n}\n```", "```go\nfunc InitializePageLayoutControls(env *common.Env) {\n\n n := notify.NewNotify()\n err := n.Start()\n if err != nil {\n println(\"Error encountered when attempting to start the notify cog: \", err)\n }\n\n  liveChatIcon := env.Document.GetElementByID(\"liveChatIcon\").(*dom.HTMLImageElement)\n  liveChatIcon.AddEventListener(\"click\", false, func(event dom.Event) {\n\n    chatbox := env.Document.GetElementByID(\"chatbox\")\n    if chatbox != nil {\n      return\n    }\n    go chat.StartLiveChat(env)\n  })\n\n}\n```", "```go\nfunc addToCart(productSKU string) {\n\n  m := make(map[string]string)\n  m[\"productSKU\"] = productSKU\n  jsonData, _ := json.Marshal(m)\n\n  data, err := xhr.Send(\"PUT\", \"/restapi/add-item-to-cart\", jsonData)\n  if err != nil {\n    println(\"Encountered error: \", err)\n    notify.Error(\"Failed to add item to cart!\")\n    return\n  }\n  var products []*models.Product\n  json.NewDecoder(strings.NewReader(string(data))).Decode(&products)\n  notify.Success(\"Item added to cart\")\n}\n```", "```go\nfunc removeFromCart(env *common.Env, productSKU string) {\n\n  m := make(map[string]string)\n  m[\"productSKU\"] = productSKU\n  jsonData, _ := json.Marshal(m)\n\n  data, err := xhr.Send(\"DELETE\", \"/restapi/remove-item-from-cart\", jsonData)\n  if err != nil {\n    println(\"Encountered error: \", err)\n    notify.Error(\"Failed to remove item from cart!\")\n    return\n  }\n  var products []*models.Product\n  json.NewDecoder(strings.NewReader(string(data))).Decode(&products)\n  renderShoppingCartItems(env)\n  notify.Success(\"Item removed from cart\")\n}\n```"]