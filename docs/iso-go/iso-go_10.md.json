["```go\n$ redis-server\n```", "```go\n$ go run igweb.go\n```", "```go\n$ go test\n```", "```go\npackage tests\n\nimport (\n  \"io/ioutil\"\n  \"net/http\"\n  \"strings\"\n  \"testing\"\n)\n\nfunc checkRoute(t *testing.T, route string, expectedToken string) {\n\n  testURL := testHost + route\n  response, err := http.Get(testURL)\n  if err != nil {\n    t.Errorf(\"Could not connect to URL: %s. Failed with error: %s\",     \n    testURL, err)\n  } else {\n    defer response.Body.Close()\n    contents, err := ioutil.ReadAll(response.Body)\n    if err != nil {\n      t.Errorf(\"Could not read response body. Failed with error: %s\",   \n      err)\n    }\n    if strings.Contains(string(contents), expectedToken) == false {\n      t.Errorf(\"Could not find expected string token: \\\"%s\\\", in \n      response body for URL: %s\", expectedToken, testURL)\n    }\n  }\n}\n\nfunc TestServerSideRoutes(t *testing.T) {\n\n  routesTokenMap := map[string]string{\"\": \"IGWEB\", \"/\": \"IGWEB\",   \n  \"/index\": \"IGWEB\", \"/products\": \"Add To Cart\", \"/product-  \n  detail/swiss-army-knife\": \"Swiss Army Knife\", \"/about\": \"Molly\",   \n  \"/contact\": \"Enter your message for us here\"}\n\n  for route, expectedString := range routesTokenMap {\n    checkRoute(t, route, expectedString)\n  }\n}\n```", "```go\n$ go test -run TestServerSideRoutes\n```", "```go\n$ go test -run TestServerSideRoutes\nPASS\nok github.com/EngineerKamesh/igb/igweb/tests 0.014s\n```", "```go\npackage tests\n\nimport (\n  \"io/ioutil\"\n  \"net/http\"\n  \"net/url\"\n  \"strconv\"\n  \"strings\"\n  \"testing\"\n)\n\nfunc TestContactFormValidation(t *testing.T) {\n\n  testURL := testHost + \"/contact\"\n  expectedTokenMap := map[string]string{\"firstName\": \"The first name \n  field is required.\", \"/\": \"The last name field is required.\",   \n  \"email\": \"The e-mail address entered has an improper syntax.\",   \n  \"messageBody\": \"The message area must be filled.\"}\n\n  form := url.Values{}\n  form.Add(\"firstName\", \"\")\n  form.Add(\"lastName\", \"\")\n  form.Add(\"email\", \"devnull@g@o\")\n  form.Add(\"messageBody\", \"\")\n\n  req, err := http.NewRequest(\"POST\", testURL,   \n  strings.NewReader(form.Encode()))\n\n  if err != nil {\n    t.Errorf(\"Failed to create new POST request to URL: %s, with error:   \n    %s\", testURL, err)\n  }\n\n  req.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n  req.Header.Add(\"Content-Length\", strconv.Itoa(len(form.Encode())))\n\n  hc := http.Client{}\n  response, err := hc.Do(req)\n\n  if err != nil {\n    t.Errorf(\"Failed to make POST request to URL: %s, with error: %s\", \n    testURL, err)\n  }\n\n  defer response.Body.Close()\n  contents, err := ioutil.ReadAll(response.Body)\n\n  if err != nil {\n    t.Errorf(\"Failed to read response body contents with error: %s\",         \n    err)\n  }\n\n  for k, v := range expectedTokenMap {\n    if strings.Contains(string(contents), v) == false {\n      t.Errorf(\"Could not find expected string token: \\\"%s\\\" for field \n      \\\"%s\\\"\", v, k)\n    }\n  }\n\n}\n```", "```go\n$ go test -run TestContactFormValidation\n```", "```go\n$ go test -run TestContactFormValidation\nPASS\nok github.com/EngineerKamesh/igb/igweb/tests 0.009s\n```", "```go\npackage tests\n\nimport (\n  \"io/ioutil\"\n  \"net/http\"\n  \"net/url\"\n  \"strconv\"\n  \"strings\"\n  \"testing\"\n)\n\nfunc TestContactForm(t *testing.T) {\n\n  testURL := testHost + \"/contact\"\n  expectedTokenString := \"The contact form has been successfully   \n  completed.\"\n\n  form := url.Values{}\n  form.Add(\"firstName\", \"Isomorphic\")\n  form.Add(\"lastName\", \"Gopher\")\n  form.Add(\"email\", \"devnull@test.com\")\n  form.Add(\"messageBody\", \"This is a message sent from the automated   \n  contact form test.\")\n\n  req, err := http.NewRequest(\"POST\", testURL,   \n  strings.NewReader(form.Encode()))\n\n  if err != nil {\n    t.Errorf(\"Failed to create new POST request to URL: %s, with error: \n    %s\", testURL, err)\n  }\n\n  req.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n  req.Header.Add(\"Content-Length\", strconv.Itoa(len(form.Encode())))\n\n  hc := http.Client{}\n  response, err := hc.Do(req)\n\n  if err != nil {\n    t.Errorf(\"Failed to make POST request to URL: %s, with error: %s\", \n    testURL, err)\n  }\n\n  defer response.Body.Close()\n  contents, err := ioutil.ReadAll(response.Body)\n\n  if err != nil {\n    t.Errorf(\"Failed to read response body contents with error: %s\", \n    err)\n  }\n\n  if strings.Contains(string(contents), expectedTokenString) == false {\n    t.Errorf(\"Could not find expected string token: \\\"%s\\\"\", \n    expectedTokenString)\n  }\n}\n```", "```go\n$ go test - run TestContactForm\n```", "```go\n$ go test - run TestContactForm\nPASS\nok github.com/EngineerKamesh/igb/igweb/tests 0.012s\n```", "```go\n$ go test\nPASS\nok github.com/EngineerKamesh/igb/igweb/tests 0.011s\n```", "```go\n$ npm install -g phantomjs\n```", "```go\n$ phantomjs --version\n2.1.1\n```", "```go\n$ npm install -g casperjs\n```", "```go\n$ casperjs --version\n1.1.4\n```", "```go\n \u2043 tests\n    \u2043 go\n    \u2043 js\n    \u2043 screenshots\n```", "```go\n$ chmod +x $IGWEB_APP_ROOT/scripts/build_casper_tests.sh\n```", "```go\n$ $IGWEB_APP_ROOT/scripts/build_casper_tests.sh \n```", "```go\npackage caspertest\n\nimport \"github.com/gopherjs/gopherjs/js\"\n\ntype ViewportParams struct {\n  *js.Object\n  Width int `js:\"width\"`\n  Height int `js:\"height\"`\n}\n```", "```go\npackage main\n\nimport (\n  \"strings\"\n\n  \"github.com/EngineerKamesh/igb/igweb/client/tests/go/caspertest\"\n \"github.com/gopherjs/gopherjs/js\"\n)\n```", "```go\nvar wait = js.MakeFunc(func(this *js.Object, arguments []*js.Object) interface{} {\n  this.Call(\"waitForSelector\", \"#primaryContent\")\n  return nil\n})\n```", "```go\nvar casper = js.Global.Get(\"casper\")\n```", "```go\nfunc main() {\n\n  routesTokenMap := map[string]string{\"/\": \"IGWEB\", \"/index\": \"IGWEB\",   \n  \"/products\": \"Add To Cart\", \"/product-detail/swiss-army-knife\":   \n  \"Swiss Army Knife\", \"/about\": \"Molly\", \"/contact\": \"Contact\",  \n  \"/shopping-cart\": \"Shopping Cart\"}\n```", "```go\nviewportParams := &caspertest.ViewportParams{Object: js.Global.Get(\"Object\").New()}\n  viewportParams.Width = 1440\n  viewportParams.Height = 960\n  casper.Get(\"options\").Set(\"viewportSize\", viewportParams)\n```", "```go\n  casper.Get(\"test\").Call(\"begin\", \"Client-Side Routes Test Suite\", 7, func(test *js.Object) {\n    casper.Call(\"start\", \"http://localhost:8080\", wait)\n  })\n```", "```go\n  for route, expectedString := range routesTokenMap {\n    func(route, expectedString string) {\n```", "```go\n      casper.Call(\"then\", func() {\n        casper.Call(\"click\", \"a[href^='\"+route+\"']\")\n      })\n```", "```go\n      casper.Call(\"then\", func() {\n        casper.Call(\"wait\", 1800, func() {\n          routeName := strings.Replace(route, `/`, \"\", -1)\n          screenshotName := \"route_render_test_\" + routeName + \".png\"\n          casper.Call(\"capture\", \"screenshots/\"+screenshotName)\n          casper.Get(\"test\").Call(\"assertTextExists\", expectedString,  \n          \"Expected text \\\"\"+expectedString+\"\\\", in body of web page, \n          when accessing route: \"+route)\n        })\n      })\n    }(route, expectedString)\n  }\n```", "```go\n  casper.Call(\"run\", func() {\n    casper.Get(\"test\").Call(\"done\")\n  })\n```", "```go\n$ $IGWEB_APP_ROOT/scripts/build_casper_tests.sh\n```", "```go\n$ cd $IGWEB_APP_ROOT/client/tests\n$ casperjs test js/routes_test.js\n```", "```go\ntype FormParams struct {\n  *js.Object\n  FirstName string `js:\"firstName\"`\n  LastName string `js:\"lastName\"`\n  Email string `js:\"email\"`\n  MessageBody string `js:\"messageBody\"`\n}\n```", "```go\nvar wait = js.MakeFunc(func(this *js.Object, arguments []*js.Object) interface{} {\n  this.Call(\"waitForSelector\", \"#primaryContent\")\n  return nil\n})\n```", "```go\nvar fillOutContactFormWithPoorlyFormattedEmailAddress = js.MakeFunc(func(this *js.Object, arguments []*js.Object) interface{} {\n  params := &FormParams{Object: js.Global.Get(\"Object\").New()}\n  params.FirstName = \"Isomorphic\"\n  params.LastName = \"Gopher\"\n  params.Email = \"dev@null@test@test.com\"\n  params.MessageBody = \"Sending a contact form submission using CasperJS and PhantomJS\"\n  this.Call(\"fill\", \"#contactForm\", params, true)\n  return nil\n})\n```", "```go\nvar fillOutContactFormPartially = js.MakeFunc(func(this *js.Object, arguments []*js.Object) interface{} {\n  params := &FormParams{Object: js.Global.Get(\"Object\").New()}\n  params.FirstName = \"Isomorphic\"\n  params.LastName = \"\"\n  params.Email = \"devnull@test.com\"\n  params.MessageBody = \"\"\n  this.Call(\"fill\", \"#contactForm\", params, true)\n  return nil\n})\n```", "```go\nvar fillOutContactFormCompletely = js.MakeFunc(func(this *js.Object, arguments []*js.Object) interface{} {\n  params := &FormParams{Object: js.Global.Get(\"Object\").New()}\n  params.FirstName = \"Isomorphic\"\n  params.LastName = \"Gopher\"\n  params.Email = \"devnull@test.com\"\n  params.MessageBody = \"Sending a contact form submission using CasperJS and PhantomJS\"\n  this.Call(\"fill\", \"#contactForm\", params, true)\n  return nil\n})\n```", "```go\nfunc main() {\n\n  viewportParams := &caspertest.ViewportParams{Object: \n  js.Global.Get(\"Object\").New()}\n  viewportParams.Width = 1440\n  viewportParams.Height = 960\n  casper.Get(\"options\").Set(\"viewportSize\", viewportParams)\n```", "```go\n  casper.Get(\"test\").Call(\"begin\", \"Contact Form Test Suite\", 4, \n  func(test *js.Object) {\n    casper.Call(\"start\", \"http://localhost:8080/contact\", wait)\n  })\n```", "```go\n  casper.Call(\"then\", \n  fillOutContactFormWithPoorlyFormattedEmailAddress)\n  casper.Call(\"wait\", 450, func() {\n    casper.Call(\"capture\", \n    \"screenshots/contactform_test_invalid_email_error_message.png\")\n    casper.Get(\"test\").Call(\"assertSelectorHasText\", \"#emailError\", \n    \"The e-mail address entered has an improper syntax\", \"Display e-\n    mail address syntax error when poorly formatted e-mail entered.\")\n  })\n```", "```go\n  casper.Call(\"then\", fillOutContactFormPartially)\n  casper.Call(\"wait\", 450, func() {\n    casper.Call(\"capture\", \n    \"screenshots/contactform_test_partially_filled_form_errors.png\")\n    casper.Get(\"test\").Call(\"assertSelectorHasText\", \"#lastNameError\", \n    \"The last name field is required.\", \"Display error message when the \n    last name field has not been filled out.\")\n    casper.Get(\"test\").Call(\"assertSelectorHasText\",  \n    \"#messageBodyError\", \"The message area must be filled.\", \"Display \n    error message when the message body text area has not been filled \n    out.\")\n  })\n```", "```go\n  casper.Call(\"then\", fillOutContactFormCompletely)\n  casper.Call(\"wait\", 450, func() {\n    casper.Call(\"capture\", \n    \"screenshots/contactform_confirmation_message.png\")\n    casper.Get(\"test\").Call(\"assertSelectorHasText\", \"#primaryContent \n    h1\", \"Confirmation\", \"Display confirmation message after submitting \n    contact form.\")\n  })\n```", "```go\n  casper.Call(\"run\", func() {\n    casper.Get(\"test\").Call(\"done\")\n  })\n```", "```go\n$ casperjs test js/contactform_test.js\n```", "```go\nfunc main() {\n\n  viewportParams := &caspertest.ViewportParams{Object: \n  js.Global.Get(\"Object\").New()}\n  viewportParams.Width = 1440\n  viewportParams.Height = 960\n  casper.Get(\"options\").Set(\"viewportSize\", viewportParams)\n\n  casper.Get(\"test\").Call(\"begin\", \"Shopping Cart Test Suite\", 3, \n  func(test *js.Object) {\n    casper.Call(\"start\", \"http://localhost:8080/products\", wait)\n  })\n```", "```go\n  for i := 0; i < 3; i++ {\n    casper.Call(\"then\", func() {\n      casper.Call(\"click\", \".addToCartButton:first-child\")\n    })\n  }\n```", "```go\n  casper.Call(\"then\", func() {\n    casper.Call(\"click\", \"a[href^='/shopping-cart']\")\n  })\n```", "```go\n  casper.Call(\"wait\", 207, func() {\n    casper.Get(\"test\").Call(\"assertTextExists\", \"Swiss Army Knife\", \"Display correct product in shopping cart.\")\n  })\n```", "```go\n  casper.Call(\"wait\", 93, func() {\n    casper.Get(\"test\").Call(\"assertTextExists\", \"Quantity: 3\", \"Display \n    correct product quantity in shopping cart.\")\n  })\n```", "```go\n  casper.Call(\"wait\", 450, func() {\n    casper.Call(\"capture\", \"screenshots/shoppingcart_test_add_item.png\")\n  })\n```", "```go\n  casper.Call(\"then\", func() {\n    casper.Call(\"click\", \".removeFromCartButton:first-child\")\n  })\n```", "```go\n  casper.Call(\"wait\", 5004, func() {\n    casper.Call(\"capture\", \"screenshots/shoppingcart_test_empty.png\")\n    casper.Get(\"test\").Call(\"assertTextExists\", \"Your shopping cart is   \n    empty.\", \"Empty the shopping cart.\")\n  })\n```", "```go\n  casper.Call(\"run\", func() {\n    casper.Get(\"test\").Call(\"done\")\n  })\n```", "```go\n$ casperjs test js/shoppingcart_test.js\n```", "```go\nvar waitChat = js.MakeFunc(func(this *js.Object, arguments []*js.Object) interface{} {\n  this.Call(\"waitForSelector\", \"#chatbox\")\n  return nil\n})\n```", "```go\nvar askQuestion = js.MakeFunc(func(this *js.Object, arguments []*js.Object) interface{} {\n  this.Call(\"sendKeys\", \"input#chatboxInputField\", \"What is Isomorphic \n  Go?\")\n  this.Call(\"sendKeys\", \"input#chatboxInputField\", \n  casper.Get(\"page\").Get(\"event\").Get(\"key\").Get(\"Enter\"))\n  return nil\n})\n```", "```go\nfunc main() {\n\n  viewportParams := &caspertest.ViewportParams{Object: \n  js.Global.Get(\"Object\").New()}\n  viewportParams.Width = 1440\n  viewportParams.Height = 960\n  casper.Get(\"options\").Set(\"viewportSize\", viewportParams)\n\n  casper.Get(\"test\").Call(\"begin\", \"Live Chat Test Suite\", 3, func(test \n  *js.Object) {\n    casper.Call(\"start\", \"http://localhost:8080/index\", wait)\n  })\n```", "```go\n  casper.Call(\"then\", func() {\n    casper.Call(\"click\", \"#livechatContainer img\")\n  })\n```", "```go\ncasper.Call(\"then\", waitChat)\n```", "```go\n  casper.Call(\"wait\", 1800, func() {\n    casper.Call(\"capture\", \n    \"screenshots/livechat_test_chatbox_open.png\")\n    casper.Get(\"test\").Call(\"assertSelectorHasText\", \"#chatboxTitle \n    span\", \"Chat with\", \"Display chatbox.\")\n  })\n```", "```go\n  casper.Call(\"then\", askQuestion)\n  casper.Call(\"wait\", 450, func() {\n    casper.Call(\"capture\", \n    \"screenshots/livechat_test_answer_question.png\")\n    casper.Get(\"test\").Call(\"assertSelectorHasText\", \n    \"#chatboxConversationContainer\", \"Isomorphic Go is the methodology \n    to create isomorphic web applications\", \"Display the answer to \n    \\\"What is Isomorphic Go?\\\"\")\n  })\n```", "```go\n  casper.Call(\"then\", func() {\n    casper.Call(\"click\", \"a[href^='/about']\")\n  })\n\n  casper.Call(\"then\", wait)\n```", "```go\n  casper.Call(\"wait\", 450, func() {\n    casper.Call(\"capture\", \n    \"screenshots/livechat_test_conversation_retained.png\")\n    casper.Get(\"test\").Call(\"assertSelectorHasText\", \n    \"#chatboxConversationContainer\", \"Isomorphic Go is the methodology \n    to create isomorphic web applications\", \"Verify that the \n    conversation is retained when navigating to another page in the \n    website.\")\n  })\n```", "```go\n  casper.Call(\"then\", func() {\n    casper.Call(\"click\", \"#chatboxCloseControl\")\n  })\n```", "```go\n  casper.Call(\"run\", func() {\n    casper.Get(\"test\").Call(\"done\")\n  })\n```", "```go\n$ casperjs test js/livechat_test.js\n```", "```go\npackage main\n\nimport (\n  \"time\"\n\n  \"github.com/EngineerKamesh/igb/igweb/client/tests/go/caspertest\"\n  humanize \"github.com/dustin/go-humanize\"\n  \"github.com/gopherjs/gopherjs/js\"\n)\n\nvar wait = js.MakeFunc(func(this *js.Object, arguments []*js.Object) interface{} {\n  this.Call(\"waitForSelector\", \"#primaryContent\")\n  return nil\n})\n\nvar casper = js.Global.Get(\"casper\")\n\nfunc main() {\n\n  viewportParams := &caspertest.ViewportParams{Object: \n  js.Global.Get(\"Object\").New()}\n  viewportParams.Width = 1440\n  viewportParams.Height = 960\n  casper.Get(\"options\").Set(\"viewportSize\", viewportParams)\n\n  casper.Get(\"test\").Call(\"begin\", \"Time Ago Cog Test Suite\", 1, \n  func(test *js.Object) {\n    casper.Call(\"start\", \"http://localhost:8080/about\", wait)\n  })\n\n  // Verify the human time representation of Molly's start date\n  casper.Call(\"then\", func() {\n    mollysStartDate := time.Date(2017, 5, 24, 17, 9, 0, 0, time.UTC)\n    mollysStartDateInHumanTime := humanize.Time(mollysStartDate)\n    casper.Call(\"capture\", \"screenshots/timeago_cog_test.png\")\n    casper.Get(\"test\").Call(\"assertSelectorHasText\", \"#Gopher-Molly \n    .timeagoSpan\", mollysStartDateInHumanTime, \"Verify human time of \n    Molly's start date produced by the Time Ago Cog.\")\n  })\n\n  casper.Call(\"run\", func() {\n    casper.Get(\"test\").Call(\"done\")\n  })\n\n}\n```", "```go\n$ casperjs test js/humantimecog_test.js\n```", "```go\npackage main\n\nimport (\n  \"time\"\n\n  \"github.com/EngineerKamesh/igb/igweb/client/tests/go/caspertest\"\n  \"github.com/gopherjs/gopherjs/js\"\n)\n\nvar wait = js.MakeFunc(func(this *js.Object, arguments []*js.Object) interface{} {\n  this.Call(\"waitForSelector\", \"#myLiveClock div\")\n  return nil\n})\n\nvar casper = js.Global.Get(\"casper\")\n\nfunc main() {\n\n  viewportParams := &caspertest.ViewportParams{Object: \n  js.Global.Get(\"Object\").New()}\n  viewportParams.Width = 1440\n  viewportParams.Height = 960\n  casper.Get(\"options\").Set(\"viewportSize\", viewportParams)\n\n  casper.Get(\"test\").Call(\"begin\", \"Live Clock Cog Test Suite\", 1, \n  func(test *js.Object) {\n    casper.Call(\"start\", \"http://localhost:8080/index\", wait)\n  })\n\n  // Verify that the live clock shows the current time for the local \n  time zone\n  casper.Call(\"then\", func() {\n    casper.Call(\"wait\", 900, func() {\n\n      localZonename, localOffset := time.Now().In(time.Local).Zone()\n      const layout = time.RFC1123\n      var location *time.Location\n      location = time.FixedZone(localZonename, localOffset)\n      casper.Call(\"wait\", 10, func() {\n        t := time.Now()\n        currentTime := t.In(location).Format(layout)\n        casper.Get(\"test\").Call(\"assertSelectorHasText\", \"#myLiveClock \n        div\", currentTime, \"Display live clock for local timezone.\")\n      })\n\n    })\n  })\n\n  casper.Call(\"then\", func() {\n    casper.Call(\"capture\", \"screenshots/liveclock_cog_test.png\")\n  })\n\n  casper.Call(\"run\", func() {\n    casper.Get(\"test\").Call(\"done\")\n  })\n\n}\n```", "```go\n$ casperjs test js/liveclockcog_test.js\n```", "```go\npackage main\n\nimport (\n  \"github.com/EngineerKamesh/igb/igweb/client/tests/go/caspertest\"\n  \"github.com/gopherjs/gopherjs/js\"\n)\n\nvar wait = js.MakeFunc(func(this *js.Object, arguments []*js.Object) interface{} {\n  this.Call(\"waitForSelector\", \"#primaryContent\")\n  return nil\n})\n\nvar casper = js.Global.Get(\"casper\")\n\nfunc main() {\n\n  viewportParams := &caspertest.ViewportParams{Object: \n  js.Global.Get(\"Object\").New()}\n  viewportParams.Width = 1440\n  viewportParams.Height = 960\n  casper.Get(\"options\").Set(\"viewportSize\", viewportParams)\n\n  casper.Get(\"test\").Call(\"begin\", \"Date Picker Cog Test Suite\", 1, \n  func(test *js.Object) {\n    casper.Call(\"start\", \"http://localhost:8080/contact\", wait)\n  })\n\n  // Verify that the date picker is activated upon clicking the date \n  input field\n  casper.Call(\"then\", func() {\n    casper.Call(\"click\", \"#byDateInput\")\n    casper.Call(\"capture\", \"screenshots/datepicker_cog_test.png\")\n    casper.Get(\"test\").Call(\"assertVisible\", \".pika-single\", \"Display \n    Datepicker Cog.\")\n  })\n\n  casper.Call(\"run\", func() {\n    casper.Get(\"test\").Call(\"done\")\n  })\n}\n```", "```go\n$ casperjs test js/datepickercog_test.js\n```", "```go\npackage main\n\nimport (\n  \"github.com/EngineerKamesh/igb/igweb/client/tests/go/caspertest\"\n  \"github.com/gopherjs/gopherjs/js\"\n)\n\nvar wait = js.MakeFunc(func(this *js.Object, arguments []*js.Object) interface{} {\n  this.Call(\"waitForSelector\", \"#carousel\")\n  return nil\n})\n\nvar casper = js.Global.Get(\"casper\")\n\nfunc main() {\n\n  viewportParams := &caspertest.ViewportParams{Object: \n  js.Global.Get(\"Object\").New()}\n  viewportParams.Width = 1440\n  viewportParams.Height = 960\n  casper.Get(\"options\").Set(\"viewportSize\", viewportParams)\n\n  casper.Get(\"test\").Call(\"begin\", \"Carousel Cog Test Suite\", 1, \n  func(test *js.Object) {\n    casper.Call(\"start\", \"http://localhost:8080/index\", wait)\n  })\n\n  // Verify that the carousel cog has been loaded.\n  casper.Call(\"wait\", 1800, func() {\n    casper.Get(\"test\").Call(\"assertResourceExists\", \"watch.jpg\", \n    \"Display carousel cog.\")\n  })\n\n  casper.Call(\"then\", func() {\n    casper.Call(\"capture\", \"screenshots/carousel_cog_test.png\")\n  })\n\n  casper.Call(\"run\", func() {\n    casper.Get(\"test\").Call(\"done\")\n  })\n\n}\n```", "```go\n$ casperjs test js/carouselcog_test.js\n```", "```go\npackage main\n\nimport (\n  \"github.com/EngineerKamesh/igb/igweb/client/tests/go/caspertest\"\n  \"github.com/gopherjs/gopherjs/js\"\n)\n\nvar wait = js.MakeFunc(func(this *js.Object, arguments []*js.Object) interface{} {\n  this.Call(\"waitForSelector\", \"#primaryContent\")\n  return nil\n})\n\nvar casper = js.Global.Get(\"casper\")\n\nfunc main() {\n\n  viewportParams := &caspertest.ViewportParams{Object: \n  js.Global.Get(\"Object\").New()}\n  viewportParams.Width = 1440\n  viewportParams.Height = 960\n  casper.Get(\"options\").Set(\"viewportSize\", viewportParams)\n\n  casper.Get(\"test\").Call(\"begin\", \"Notify Cog Test Suite\", 1, \n  func(test *js.Object) {\n    casper.Call(\"start\", \"http://localhost:8080/products\", wait)\n  })\n\n  // Add an item to the shopping cart\n  casper.Call(\"then\", func() {\n    casper.Call(\"click\", \".addToCartButton:nth-child(1)\")\n  })\n\n  // Verify that the notification has been displayed\n  casper.Call(\"wait\", 450, func() {\n    casper.Get(\"test\").Call(\"assertSelectorHasText\", \"#alertify-logs \n    .alertify-log-success\", \"Item added to cart\", \"Display Notify Cog \n    when item added to shopping cart.\")\n  })\n\n  casper.Call(\"wait\", 450, func() {\n    casper.Call(\"capture\", \"screenshots/notify_cog_test.png\")\n  })\n\n  // Navigate to Shopping Cart page\n  casper.Call(\"then\", func() {\n    casper.Call(\"click\", \"a[href^='/shopping-cart']\")\n\n  })\n\n  // Remove product from shopping cart\n  casper.Call(\"wait\", 450, func() {\n    casper.Call(\"click\", \".removeFromCartButton:first-child\")\n  })\n\n  casper.Call(\"run\", func() {\n    casper.Get(\"test\").Call(\"done\")\n  })\n}\n```", "```go\n$ casperjs test js/notifycog_test.js\n```", "```go\n$ casperjs test js/*.js\n```"]