["```go\n$ export IGWEB_MODE=production\n```", "```go\nfunc IsProduction() bool {\n  if isokit.OperatingEnvironment() == isokit.ServerEnvironment {\n    return os.Getenv(\"IGWEB_MODE\") == \"production\"\n  } else {\n    return false\n  }\n}\n```", "```go\n<head>\n  <meta name=\"viewport\" content=\"initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n  <title>{{.PageTitle}}</title> \n  <link rel=\"icon\" type=\"image/png\" href=\"/static/images/isomorphic_go_icon.png\">\n  <link rel=\"stylesheet\" href=\"/static/css/pure.min.css\">\n {{if productionmode}}\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/cogimports.min.css\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/igweb.min.css\">\n  <script type=\"text/javascript\" src=\"img/client.min.js\" async></script>\n  <script src=\"img/cogimports.min.js\" type=\"text/javascript\" async></script>\n {{else}}\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/cogimports.css\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/igweb.css\">\n  <script src=\"img/cogimports.js\" type=\"text/javascript\" async></script>\n  <script type=\"text/javascript\" src=\"img/client.js\" async></script>\n  {{end}}\n</head>\n```", "```go\n  // Register Handlers for Client-Side JavaScript Application\n  if WebAppMode != \"production\" {\n    r.Handle(\"/js/client.js\", isokit.GopherjsScriptHandler(WebAppRoot)).Methods(\"GET\")\n    r.Handle(\"/js/client.js.map\", isokit.GopherjsScriptMapHandler(WebAppRoot)).Methods(\"GET\")\n  }\n```", "```go\n$ gopherjs build -m --verbose --tags clientonly -o $IGWEB_APP_ROOT/static/js/client.min.js\n```", "```go\n isokit.StaticTemplateBundleFilePath = StaticAssetsPath + \"/templates/igweb.tmplbundle\"\n```", "```go\nfunc initializeCogs(ts *isokit.TemplateSet) {\n  timeago.NewTimeAgo().CogInit(ts)\n  liveclock.NewLiveClock().CogInit(ts)\n  datepicker.NewDatePicker().CogInit(ts)\n  carousel.NewCarousel().CogInit(ts)\n  notify.NewNotify().CogInit(ts)\n  isokit.BundleStaticAssets()\n}\n```", "```go\n  if WebAppMode == \"production\" && oneTimeStaticAssetsGeneration == false {\n    isokit.UseStaticTemplateBundleFile = true\n    isokit.ShouldBundleStaticAssets = false\n  }\n```", "```go\n$ igweb --generate-static-assets\n```", "```go\nfunc generateStaticAssetsAndExit(env *common.Env) {\n  fmt.Print(\"Generating static assets...\")\n  isokit.ShouldMinifyStaticAssets = true\n  isokit.ShouldBundleStaticAssets = true\n  initializeTemplateSet(env, true)\n  initializeCogs(env.TemplateSet)\n  fmt.Println(\"Done\")\n  os.Exit(0)\n}\n```", "```go\n$ sudo adduser igweb\n```", "```go\n$ sudo passwd igweb\n```", "```go\n$ sudo apt-get install build-essential tcl\n```", "```go\n$ sudo redis-server --daemonize yes\n```", "```go\nuser igweb;\nworker_processes 1;\n\nerror_log /var/log/nginx/error.log warn;\npid /var/run/nginx.pid;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    log_format main '$remote_addr - $remote_user [$time_local] \"$request\" '\n                    '$status $body_bytes_sent \"$http_referer\" '\n                    '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    sendfile on;\n    keepalive_timeout 65;\n\n gzip on;\n gzip_min_length 1100;\n gzip_buffers 16 8k;\n gzip_types text/plain application/javascript text/css;\n gzip_vary on;\n gzip_comp_level 9;\n\n    server_tokens off;\n\n    server {\n        listen 80;\n        access_log /var/log/nginx/access.log main;\n        location / {\n proxy_pass http://192.168.1.207:8080/;\n proxy_set_header X-Forwarded-For $remote_addr;\n proxy_http_version 1.1;\n proxy_set_header Upgrade $http_upgrade;\n proxy_set_header Connection \"upgrade\";\n proxy_set_header Host $host;\n        }\n    }\n}\n```", "```go\n$ sudo apt-get install nginx\n```", "```go\n$ sudo systemctl start nginx\n```", "```go\n$ su - igweb\n```", "```go\nmkdir ~/igweb\n```", "```go\n$ export GOOS=linux\n```", "```go\n$ export GOARCH=amd64\n```", "```go\n$ mkdir $IGWEB/builds\n```", "```go\n$ go build -o $IGWEB_APP_ROOT/builds/igweb-linux64\n```", "```go\n$ file builds/igweb-linux64\nbuilds/igweb-linux64: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, not stripped\n```", "```go\n$ cd $IGWEB_APP_ROOT/client\n$ $IGWEB_APP_ROOT/scripts/clear_gopherjs_cache.sh\n$ gopherjs build --verbose -m --tags clientonly -o  $IGWEB_APP_ROOT/static/js/client.min.js\n```", "```go\n$ $IGWEB_APP_ROOT/igweb --generate-static-assets\nGenerating static assets...Done\n```", "```go\n$ go get -u github.com/tdewolff/minify/cmd/minify\n$ go install github.com/tdewolff/minify\n```", "```go\n$ minify --mime=\"text/css\" $IGWEB_APP_ROOT/static/css/igweb.css > $IGWEB_APP_ROOT/static/css/igweb.min.css\n```", "```go\n$ cd $IGWEB_APP_ROOT\n$ tar zcvf /tmp/bundle.tgz builds/igweb-linux64 static\n```", "```go\n$ scp /tmp/bundle.tgz igweb@targetserver:/tmp/.\n```", "```go\n $ cd ~/igweb\n $ mv /tmp/bundle.tgz .\n $ tar zxvf bundle.tgz\n```", "```go\n$ rm bundle.tgz\n```", "```go\n$ mv igweb-linux64 igweb\n```", "```go\n $ export IGWEB_APP_ROOT=/home/igweb/igweb\n $ export IGWEB_MODE=production\n```", "```go\nexport IGWEB_APP_ROOT=/home/igweb/igweb\nexport IGWEB_MODE=production\n```", "```go\n$ cd $IGWEB_APP_ROOT\n$ ./igweb\n```", "```go\n$ nohup ./igweb 2>&1 &\n```", "```go\n$ ps -ef | grep igweb | grep -v grep\n```", "```go\n$ kill PID\n```", "```go\n[Unit]\nDescription=IGWEB\n\n[Service]\nUSER=igweb\nGROUP=igweb\nEnvironment=IGWEB_APP_ROOT=/home/igweb/igweb\nEnvironment=IGWEB_MODE=production\nWorkingDirectory=/home/igweb/igweb\nExecStart=/home/igweb/igweb/igweb\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n```", "```go\n$ systemctl status nginx\n```", "```go\n$ systemctl daemon-reload\n```", "```go\n$ systemctl enable igweb\n```", "```go\n$ systemctl disable igweb\n```", "```go\n$ systemctl start igweb\n```", "```go\n$ systemctl stop igweb\n```", "```go\n$ sudo apt-get install dmsetup && dmsetup mknodes\n```", "```go\n$ sudo apt-get install docker-ce\n```", "```go\n$ docker --version\nDocker version 17.09.0-ce, build afdb6d4\n```", "```go\nFROM golang\n```", "```go\nMAINTAINER Kamesh Balasubramanian kamesh@kamesh.com\n```", "```go\nENV IGWEB_APP_ROOT=/go/src/github.com/EngineerKamesh/igb/igweb\nENV IGWEB_DB_CONNECTION_STRING=\"database:6379\"\nENV IGWEB_MODE=production\nENV GOPATH=/go\n```", "```go\nRUN go get -u github.com/gopherjs/gopherjs\nRUN go get -u honnef.co/go/js/dom\nRUN go get -u -d -tags=js github.com/gopherjs/jsbuiltin\nRUN go get -u honnef.co/go/js/xhr\nRUN go get -u github.com/gopherjs/websocket\nRUN go get -u github.com/tdewolff/minify/cmd/minify\nRUN go get -u github.com/isomorphicgo/isokit \nRUN go get -u github.com/uxtoolkit/cog\nRUN go get -u github.com/EngineerKamesh/igb\n```", "```go\nRUN go install github.com/tdewolff/minify\n```", "```go\nRUN cd $IGWEB_APP_ROOT/client; go get ./..; /go/bin/gopherjs build -m --verbose --tags clientonly -o $IGWEB_APP_ROOT/static/js/client.min.js\n```", "```go\n>RUN go install github.com/EngineerKamesh/igb/igweb\n```", "```go\nRUN /go/bin/igweb --generate-static-assets\n```", "```go\nRUN /go/bin/minify --mime=\"text/css\" $IGWEB_APP_ROOT/static/css/igweb.css > $IGWEB_APP_ROOT/static/css/igweb.min.css\n```", "```go\n# Specify the entrypoint\nENTRYPOINT /go/bin/igweb\n```", "```go\nEXPOSE 8080\n```", "```go\n# Get the required Go packages\nRUN go get -u github.com/gopherjs/gopherjs\nRUN go get -u honnef.co/go/js/dom\nRUN go get -u -d -tags=js github.com/gopherjs/jsbuiltin\nRUN go get -u honnef.co/go/js/xhr\nRUN go get -u github.com/gopherjs/websocket\nRUN go get -u github.com/tdewolff/minify/cmd/minify\nRUN go get -u github.com/isomorphicgo/isokit \nRUN go get -u github.com/uxtoolkit/cog\n# RUN go get -u github.com/EngineerKamesh/igb\n```", "```go\nCOPY . $IGWEB_APP_ROOT/.\n```", "```go\nversion: '2'\n```", "```go\nservices:\n  database:\n    image: \"redis\"\n  webapp:\n    depends_on:\n        - database \n    build: .\n    ports:\n        - \"8080:8080\"\n  reverseproxy:\n    depends_on:\n        - webapp\n    image: \"nginx\"\n    volumes:\n   - ./deployments-config/docker-single setup/nginx.conf:/etc/nginx/nginx.conf\n    ports:\n        - \"80:80\"\n```", "```go\n$ docker-compose build\n```", "```go\ndatabase uses an image, skipping\nBuilding webapp\nStep 1/22 : FROM golang\n ---> 99e596fc807e\nStep 2/22 : MAINTAINER Kamesh Balasubramanian kamesh@kamesh.com\n ---> Running in 107a99d5c4ee\n ---> 6facac83509e\nRemoving intermediate container 107a99d5c4ee\nStep 3/22 : ENV IGWEB_APP_ROOT /go/src/github.com/EngineerKamesh/igb/igweb\n ---> Running in f009d8391fc4\n ---> ec1b1d15c6c3\nRemoving intermediate container f009d8391fc4\nStep 4/22 : ENV IGWEB_DB_CONNECTION_STRING \"database:6379\"\n ---> Running in 2af5e98c71e2\n ---> 6748f0f5bc4d\nRemoving intermediate container 2af5e98c71e2\nStep 5/22 : ENV IGWEB_MODE production\n ---> Running in 1a87b871f761\n ---> 9871fc511e80\nRemoving intermediate container 1a87b871f761\nStep 6/22 : ENV GOPATH /go\n ---> Running in c6c2eff0ded2\n ---> 4dc456357dc9\nRemoving intermediate container c6c2eff0ded2\nStep 7/22 : RUN go get -u github.com/gopherjs/gopherjs\n ---> Running in c8996108bd96\n ---> 6ae68fb84178\nRemoving intermediate container c8996108bd96\nStep 8/22 : RUN go get -u honnef.co/go/js/dom\n ---> Running in a1ad103c4c10\n ---> abd1f7f3b8b7\nRemoving intermediate container a1ad103c4c10\nStep 9/22 : RUN go get -u -d -tags=js github.com/gopherjs/jsbuiltin\n ---> Running in d7dc4ec21ee1\n ---> cd5829fb609f\nRemoving intermediate container d7dc4ec21ee1\nStep 10/22 : RUN go get -u honnef.co/go/js/xhr\n ---> Running in b4e88d0233fb\n ---> 3fe4d470799e\nRemoving intermediate container b4e88d0233fb\nStep 11/22 : RUN go get -u github.com/gopherjs/websocket\n ---> Running in 9cebc021cb34\n ---> 20cd1c09d6cd\nRemoving intermediate container 9cebc021cb34\nStep 12/22 : RUN go get -u github.com/tdewolff/minify/cmd/minify\n ---> Running in 9875889cc267\n ---> 3c60c2de51b0\nRemoving intermediate container 9875889cc267\nStep 13/22 : RUN go get -u github.com/isomorphicgo/isokit\n ---> Running in eb839d91588e\n ---> e952d6e6cbe2\nRemoving intermediate container eb839d91588e\nStep 14/22 : RUN go get -u github.com/uxtoolkit/cog\n ---> Running in 3e6853ff7196\n ---> 3b00f78e5acf\nRemoving intermediate container 3e6853ff7196\nStep 15/22 : RUN go get -u github.com/EngineerKamesh/igb\n ---> Running in f5082861ca8a\n ---> 93506a92526c\nRemoving intermediate container f5082861ca8a\nStep 16/22 : RUN go install github.com/tdewolff/minify\n ---> Running in b0a72d9e9807\n ---> e3e49d9c2898\nRemoving intermediate container b0a72d9e9807\nStep 17/22 : RUN cd $IGWEB_APP_ROOT/client; go get ./..; /go/bin/gopherjs build -m --verbose --tags clientonly -o $IGWEB_APP_ROOT/static/js/client.min.js\n ---> Running in 6f6684209cfd\nStep 18/22 : RUN go install github.com/EngineerKamesh/igb/igweb\n ---> Running in 17ed6a871db7\n ---> 103f12e38c04\nRemoving intermediate container 17ed6a871db7\nStep 19/22 : RUN /go/bin/igweb --generate-static-assets\n ---> Running in d6fb5ff48a08\nGenerating static assets...Done\n ---> cc7434fbb94d\nRemoving intermediate container d6fb5ff48a08\nStep 20/22 : RUN /go/bin/minify --mime=\"text/css\" $IGWEB_APP_ROOT/static/css/igweb.css > $IGWEB_APP_ROOT/static/css/igweb.min.css\n ---> Running in e1920eb49cc2\n ---> adbf78450b9c\nRemoving intermediate container e1920eb49cc2\nStep 21/22 : ENTRYPOINT /go/bin/igweb\n ---> Running in 20246e214462\n ---> a5f1d978060d\nRemoving intermediate container 20246e214462\nStep 22/22 : EXPOSE 8080\n ---> Running in 6e12e970dfe2\n ---> 4c7f474b2704\nRemoving intermediate container 6e12e970dfe2\nSuccessfully built 4c7f474b2704\nreverseproxy uses an image, skipping\n```", "```go\n$ docker-compose up\n```", "```go\n$ docker-compose up -d\n```", "```go\n$ docker-compose down\n```", "```go\n$ docker-compose build\n```", "```go\n[Unit]\nDescription=Dockerized IGWEB\nAfter=docker.service\nRequires=docker.service\n\n[Service]\nType=oneshot\nRemainAfterExit=yes\nWorkingDirectory=/opt/igb/igweb\nExecStart=/usr/bin/docker-compose -f /opt/igb/igweb/docker-compose.yml up -d\nExecStop=/usr/bin/docker-compose -f /opt/igb/igweb/docker-compose.yml down\n\n[Install]\nWantedBy=multi-user.target\n```", "```go\n$ systemctl daemon-reload\n```", "```go\n$ systemctl start igweb-docker\n```", "```go\n$ systemctl stop igweb-docker\n```"]