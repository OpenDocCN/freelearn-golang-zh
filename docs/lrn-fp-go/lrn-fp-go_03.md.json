["```go\nfunc anonymousGreeting() func(string) {\n   return func(name string) {\n      fmt.Printf(\"Hey %s!n\", name)\n   } \n}\n```", "```go\nfunc factorial(x int, next func(int)) {\n   if x == 0 {\n      next(1)\n   } else {\n      factorial(x-1, func(y int) {\n         next(x * y)\n      })\n   }\n}\n```", "```go\nfactorial(4, func(result int) {\n   fmt.Println(\"result\", result)\n})\n```", "```go\nInfo.Println(\"Hello\")\n```", "```go\ndata Either a b = Left a &#124; Right b\n```", "```go\na := 1\nb := a + 1.8\n```", "```go\ntype Car struct {\n   const Make, Model string\n}\n```", "```go\nreturn f(func(x int) int {\n   return r(r)(x)\n})\n```", "```go\nreturn a = [a]\n```", "```go\n[a] -> (a -> [b]) -> [b]\n```", "```go\nf :: String -> [String]\nf a = [a, prevChar a, nextChar a]\n```", "```go\ng :: String -> [String]\ng a = [lower a, upper a]\n```", "```go\n           g   &#124; w\n      &#124; W ---> &#124;\n      &#124;        &#124; W\n      &#124; \n    f &#124;    g   &#124; x\nX --> &#124; X ---> &#124;\n      &#124;        &#124; X\n      &#124; \n      &#124;    g   &#124; y\n      &#124; Y ---> &#124;\n               &#124; Y\n```", "```go\ndata Maybe a = Nothing &#124; Just a\n```", "```go\nf :: a -> Maybe b\n```", "```go\nf :: a -> Maybe b \ng :: b -> Maybe c \nh :: a -> Maybe c \nh = f >=> g \n```", "```go\ninstance Monad Maybe where\n   return x = Just x\n\n   Nothing >>= f = Nothing\n   Just x >>= f = f x\n```", "```go\nfunc runTask(success bool) maybe.Either {\n```", "```go\nfunc (e either) Succeeded() StringOption {\n   if e.err == nil {\n      return SomeString(e.val)\n   }\n   return EmptyString()\n}\n```", "```go\nfmt.Println(\"Has value:\", option.SomeString(\"Hi\"))\nfmt.Println(\"Is empty :\", option.Empty())\n```", "```go\nHas value: Hi\nIs empty : <EMPTY>\n```", "```go\nfunc addTwo(x int) int {\n   return x + 2\n}\n```", "```go\ntype ErrorMessage =\n&#124; YourNameInvalid\n&#124; YourPhoneInvalid\n&#124; NoTicketsMustBeGreaterThan0\n&#124; CreditCardNoInvalid\n&#124; CreditCardExpDateInvalid\n```", "```go\npackage maybe\n\ntype SuccessOrFailure interface {\n   Success() bool\n   Failure() bool\n}\n```", "```go\n func f(x) {// some code;return g(x)}\n```", "```go\nfunc Compose(f StrFunc, g StrFunc) StrFunc {\n   return func(s string) string {\n      return g(f(s))\n   }\n}\n```", "```go\ntype StrFunc func(string) string\n```", "```go\nfunc main() {\n   var recognize = func(name string) string {\n         return fmt.Sprintf(\"Hey %s\", name)\n      }\n   var emphasize = func(statement string) string {\n      return fmt.Sprintf(strings.ToUpper(statement) + \"!\")\n      }\n```", "```go\nvar greetFoG = Compose(recognize, emphasize)\nfmt.Println(greetFoG(\"Gopher\"))\n```", "```go\nHEY GOPHER!\n```", "```go\nvar greetGoF = Compose(emphasize, recognize)\nfmt.Println(greetGoF(\"Gopher\"))\n```", "```go\nHey GOPHER!\n```", "```go\ncars := LoadCars()\nfor _, car := range cars.Filter(ByHasNumber()).\n       Filter(ByForeign()).\n       Map(Upgrade()).\n       Reduce(JsonReducer(cars), Collection{}) {\n       log.Println(car)\n}\n```", "```go\n{\"car\": {\"make\": \"Honda\", \"model\": \" Accord ES2 LX\"}}\n{\"car\": {\"make\": \"Lexus\", \"model\": \" IS250 LS\"}}\n{\"car\": {\"make\": \"Lexus\", \"model\": \" SC 430 LS\"}}\n{\"car\": {\"make\": \"Toyota\", \"model\": \" RAV4 EV\"}}\n```", "```go\nnamespace Generics\n{\n   private static void Main() {\n      if(Compute<int>.IsEqual(2, 2)) {\n            Console.WriteLine(\"2 isEqualTo 2\");\n         }\n      if(!Compute<String>.IsEqual(\"A\", \"B\")) {\n            Console.WriteLine(\"A is_NOT_EqualTo B\");\n         }\n   }\n    public class Compute<T> {\n        public static bool IsEqual(T Val1, T Val2) {\n            return Val1.Equals(Val2);\n        }\n    }\n}\n```", "```go\ncars := Filter(ByMake(\"Toyota\"))\n```", "```go\n// cars: Honda Accord, Honda Accord ES2, Lexus IS250, Honda CR-V, Lexus SC 430,...\nfor _, car := range cars {\n       thisCar := fmt.Sprintf(\"%s %s\", car, map[string]string{\n              \"Honda\": \"LX\",\n              \"Lexus\": \"LS\",\n              \"Toyota\": \"EV\",\n              \"Ford\": \"XL\",\n              \"GM\": \"X\",\n       }[GetMake(car)])\n       // upgrade a car by appending \"LX\" ... to the end of the model name\n       mappedCars = append(mappedCars, thisCar)\n}\n// mappedCars: Honda Accord LX, Honda Accord ES2 LX, Lexus IS250 LS...\n```", "```go\nFilter(ByMake(\"Toyota\")).Map(Upgrade())\n```", "```go\nfunc addTwo() func() int {\n       sum := 0\n return func() int { // anonymous function\n sum += 2\n return sum\n }\n}\n\nfunc main() {\n       twoMore := addTwo()\n       fmt.Println(twoMore())\n       fmt.Println(twoMore())\n}\n```", "```go\n2\n4\n```", "```go\nfunc addTwoDynamic() func() int {\n    return func() int { \n        sum += 2\n return sum\n    }\n}\n```", "```go\ntwoMoreDynamic := addTwoDynamic()\nfmt.Println(twoMoreDynamic())\nfmt.Println(twoMoreDynamic())\n```", "```go\n7\n9\n```", "```go\ntype List interface {\n   Cons(val interface{}) List\n   ForEach(f func(interface{}))\n   Head() interface{}\n   IsNil() bool\n   Reverse() List\n   Size() int\n   Tail() List\n}\nfunc NewList() List\ntype Map interface {\n   Delete(key string) Map\n   ForEach(f func(key string, val interface{}))\n   IsNil() bool\n   Keys() []string\n   Lookup(key string) (interface{}, bool)\n   Set(key string, value interface{}) Map\n   Size() int\n   String() string\n   UnsafeMutableSet(key string, value interface{}) Map\n}\nfunc NewMap() Map\n```", "```go\nvar found bool\ncar_to_look_for := \"Blazer\"\ncars := []string{\"Accord\", \"IS250\", \"Blazer\" }\n\nfor _, car := range cars {\n       if car == car_to_look_for {\n              found = true;\n       }\n}\nfmt.Printf(\"Found? %v\", found)\n```", "```go\nfmt.Printf(\"Found? %v\", cars.contains(\"Blazer\"))\n```", "```go\n\"Honda Accord\"\n\"Honda Accord ES2\"\n\"Lexus IS250\"\n\"Honda CR-V\"\n\"Lexus SC 430\"\n\"Ford F-150\"\n\"Toyota Highlander\"\n\"Toyota RAV4\"\n\"GM Hummer H2\"\n\"GM Hummer H3\"\n```", "```go\n$ tree\n.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 chapter4\n \u251c\u2500\u2500 01_hof\n \u2502 \u251c\u2500\u2500 cars.csv\n \u2502 \u251c\u2500\u2500 cars.go\n \u2502 \u251c\u2500\u2500 generator.go\n \u2502 \u251c\u2500\u2500 more_cars.csv\n \u2502 \u251c\u2500\u2500 restful.go\n \u2502 \u251c\u2500\u2500 types.go\n \u2502 \u2514\u2500\u2500 utils.go\n \u2514\u2500\u2500 main.go\n```", "```go\npackage main\n\nimport (\n       . \"github.com/l3x/learn-fp-in-go/chapter4/01_hof\"\n \"log\"\n \"os\"\n \"github.com/julienschmidt/httprouter\"\n \"net/http\"\n)\n```", "```go\nfunc init() {\n       log.SetFlags(0)\n       log.SetOutput(os.Stdout)\n}\n```", "```go\n$ RUN_HTTP_SERVER=TRUE ./chapter4\n```", "```go\n$ go build && ./chapter4\n```", "```go\nByMake - Honda\n-----------------------\ncar: Honda Accord\ncar: Honda Accord ES2\n. . .\n```", "```go\nfunc main() {\n       if os.Getenv(\"RUN_HTTP_SERVER\") == \"TRUE\" {\n              router := httprouter.New()\n              router.GET(\"/cars\", CarsIndexHandler)\n              router.GET(\"/cars/:id\", CarHandler)\n              log.Println(\"Listening on port 8000\")\n              log.Fatal(http.ListenAndServe(\":8000\", router))\n```", "```go\nIndexedCar struct {\n       Index int `json:\"index\"`\n Car   string` json:\"car\"`\n}\n```", "```go\npackage hof\n\nimport (\n       \"fmt\"\n s \"strings\"\n \"regexp\"\n \"log\"\n \"encoding/json\"\n)\n\nvar CarsDB = initCarsDB()\n\nfunc initCarsDB() []IndexedCar {\n       var indexedCars []IndexedCar\n       for i, car := range LoadCars() {\n              indexedCars = append(indexedCars, IndexedCar{i, car})\n       }\n       lenCars := len(indexedCars)\n       for i, car := range LoadMoreCars() {\n              indexedCars = append(indexedCars, IndexedCar{i + lenCars, car})\n       }\n       return indexedCars\n}\n\nfunc LoadCars() Collection {\n       return CsvToStruct(\"cars.csv\")\n}\n```", "```go\n} else {\n       cars := LoadCars()\n\n       PrintCars(\"ByMake - Honda\", cars.Filter(ByMake(\"Honda\")))\n```", "```go\nByMake - Honda\n-----------------------\ncar: Honda Accord\ncar: Honda Accord ES2\ncar: Honda CR-V\n```", "```go\nfunc (cars Collection) Filter(fn FilterFunc) Collection {\n       filteredCars := make(Collection, 0)\n       for _, car := range cars {\n              if fn(car) {\n                     filteredCars = append(filteredCars, car)\n              }\n       }\n       return filteredCars\n}\n```", "```go\nFilterFunc func(string) bool\n```", "```go\nPrintCars(\"ByMake - Honda\", cars.Filter(ByMake(\"Honda\")))\n```", "```go\nfunc ByMake(make string) FilterFunc {\n       return func(car string) bool {\n return s.Contains(car, make)\n }\n}\n```", "```go\nfunc (cars Collection) Filter(fn FilterFunc) Collection {\n   filteredCars := make(Collection, 0)\n   for _, car := range cars {\n      if fn(car) {\n         filteredCars = append(filteredCars, car)\n      }\n   }\n   return filteredCars\n}\n```", "```go\nPrintCars(\"Numeric\", cars.Filter(ByHasNumber()))\n```", "```go\nNumeric\n-----------------------\ncar: Honda Accord ES2\ncar: Lexus IS250\ncar: Lexus SC 430\ncar: Ford F-150\ncar: Toyota 86\ncar: Toyota RAV4\ncar: GM Hummer H2\ncar: GM Hummer H3\n```", "```go\nfunc ByHasNumber() FilterFunc {\n       return func(car string) bool {\n match, _ := regexp.MatchString(\".+[0-9].*\", car)\n return match\n }\n}\n```", "```go\nPrintCars(\"Foreign, Numeric, Toyota\",\n       cars.Filter(ByForeign()).\n              Filter(ByHasNumber()).\n              Filter(ByMake(\"Toyota\")))\n```", "```go\nForeign, Numeric, Toyota\n-----------------------\ncar: Toyota 86\ncar: Toyota RAV4\n```", "```go\nmoreCars := LoadMoreCars()\n\nPrintCars(\"More Cars, Domestic, Numeric, GM\",\n       cars.AddCars(moreCars).\n              Filter(ByDomestic()).\n              Filter(ByHasNumber()).\n              Filter(ByMake(\"GM\")))\n```", "```go\nMore Cars, Domestic, Numeric, GM\n-----------------------\ncar: GM Hummer H2\ncar: GM Hummer H3\ncar: GM Oldsmobile Delta 88\ncar: GM Oldsmobile 442\n```", "```go\nfunc (cars Collection) AddCars(carsToAdd Collection) Collection {\n       return append(cars, carsToAdd...)\n}\n```", "```go\nPrintCars(\"Numeric, Foreign, Map Upgraded\",\n       cars.Filter(ByHasNumber()).\n              Filter(ByForeign()).\n              Map(Upgrade()))\n```", "```go\nNumeric, Foreign, Map Upgraded\n-----------------------\ncar: Honda Accord ES2 LX\ncar: Lexus IS250 LS\ncar: Lexus SC 430 LS\ncar: Toyota 86 EV\ncar: Toyota RAV4 EV\n```", "```go\nfunc Upgrade() MapFunc {\n       return func(car string) string {\n return fmt.Sprintf(\"%s %s\", car, UpgradeLabel(car))\n }\n}\n```", "```go\nfunc UpgradeLabel(car string) string {\n       return map[string]string{\n \"Honda\": \"LX\",\n \"Lexus\": \"LS\",\n \"Toyota\": \"EV\",\n \"Ford\": \"XL\",\n \"GM\": \"X\",\n }[GetMake(car)]\n}\n```", "```go\nfunc (cars Collection) Map(fn MapFunc) Collection {\n       mappedCars := make(Collection, 0, len(cars))\n       for _, car := range cars {\n              mappedCars = append(mappedCars, fn(car))\n       }\n       return mappedCars\n}\n```", "```go\nPrintCars(\"Filter Honda, Reduce JSON\",\n       cars.Filter(ByMake(\"Honda\")).\n              Reduce(JsonReducer(cars), Collection{}))\n```", "```go\nFilter Honda, Reduce JSON\n-----------------------\ncar: {\"car\": {\"make\": \"Honda\", \"model\": \" Accord\"}}\ncar: {\"car\": {\"make\": \"Honda\", \"model\": \" Accord ES2\"}}\ncar: {\"car\": {\"make\": \"Honda\", \"model\": \" CR-V\"}}\n```", "```go\nfunc (cars Collection) Reduce(fn ReducerFunc, accumulator Collection) Collection {\n       var result = accumulator\n       for _, car := range cars {\n              result = append(fn(car, result))\n       }\n       return result\n}\n```", "```go\nfunc JsonReducer(cars Collection) ReducerFunc  {\n       return func(car string, cars Collection) Collection {\n carJson := fmt.Sprintf(\"{\"car\": {\"make\": \"%s\", \"model\": \"%s\"}}\", GetMake(car), GetModel(car))\n cars = append(cars, carJson)\n return cars\n }\n}\n```", "```go\nPrintCars2(\"Reduce - Lexus\",\n       cars.Filter(ByMake(\"Lexus\")).\n              Reduce2(CarTypeReducer(cars), []CarType{}))\n```", "```go\nReduce - Lexus\n-----------------------\ncar: {Lexus IS250}\ncar: {Lexus SC 430}\n```", "```go\nPrintCars(\"ByModel - Accord up/downgraded\",\n       cars.Filter(ByModel(\"Accord\")).\n              Map(Upgrade()).\n              Map(Downgrade()))\n```", "```go\nByModel - Accord up/downgraded\n-----------------------\ncar: Honda Accord \ncar: Honda Accord ES2\n```", "```go\nPrintCars(\"GenerateCars(1, 3)\",\n       cars.GenerateCars(1, 3))\n```", "```go\npackage hof\n\nimport (\n       \"sync\"\n \"log\"\n)\n\nfunc carGenerator(iterator func(int) int, lower int, upper int) func() (int, bool) {\n       return func() (int, bool) {\n              lower = iterator(lower)\n              return lower, lower > upper\n       }\n}\n\nfunc iterator(i int) int {\n       i += 1\n return i\n}\n```", "```go\n{\n  \"index\": 1,\n  \"car\": \"Honda Accord ES2\"\n}\n```", "```go\nIndexedCar struct {\n       Index int `json:\"index\"`\n Car   string` json:\"car\"`\n}\n```", "```go\nfunc (cars Collection) GenerateCars(start, limit int) Collection {\n       carChannel := make(chan *IndexedCar)\n```", "```go\nvar waitGroup sync.WaitGroup\n```", "```go\nnumCarsToGenerate := start + limit - 1\ngeneratedCars := Collection{}\nwaitGroup.Add(numCarsToGenerate)\n```", "```go\nnext := carGenerator(iterator, start -1, numCarsToGenerate)\n```", "```go\ncarIndex, done := next()\n```", "```go\nfor !done {\n       go func(carIndex int) {\n              thisCar, err := GetThisCar(carIndex)\n              if err != nil {\n                     panic(err)\n              }\n              carChannel <- thisCar\n              generatedCars = append(generatedCars, thisCar.Car)\n              waitGroup.Done()\n       }(carIndex)\n\n       carIndex, done = next()\n}\n```", "```go\npackage main\n\nimport \"fmt\"\n\n// numberIs numberIs a simple function taking an integer and returning boolean\ntype numberIs func(int) bool\n\nfunc lessThanTwo(i int) bool { return i < 2 }\n\n// No curried parameters\nfunc lessThan(x int, y int) (bool) {\n   return x < y\n}\n\nfunc main() {\n   fmt.Println(\"NonCurried - lessThan(1,2):\", lessThan(1, 2))\n   fmt.Println(\"Curried - LessThanTwo(1):\", lessThanTwo(1))\n}\n```", "```go\nfunc (f numberIs) apply(s ...int) (ret []bool) {\n   for _, i := range s {\n      ret = append(ret, f(i))\n   }\n   return ret\n}\n```", "```go\nfunc main() {\n   fmt.Println(\"NonCurried - lessThan(1,2):\", lessThan(1,2))\n   fmt.Println(\"Curried - LessThanTwo(1):\", lessThanTwo(1))\n   // use anonymous function\n isLessThanOne := numberIs(func(i int) bool { return i < 1 }).apply \n isLessThanTwo := numberIs(lessThanTwo).apply // use named function\n s := []int{0, 1, 2}\n   fmt.Println(\"Curried, given:\", s, \"...\")\n   fmt.Println(\"isLessThanOne:\", isLessThanOne(s...))\n   fmt.Println(\"isLessThanTwo:\", isLessThanTwo(s...))\n}\n```", "```go\nNonCurried - lessThan(1,2): true\nCurried - LessThanTwo(1): true\nCurried, given: [0 1 2]...\nisLessThanOne: [true false false]\nisLessThanTwo: [true true false]\n```", "```go\nfunc carGenerator(iterator func(int) int, lower int, upper int) func() (int, bool) {\n       return func() (int, bool) {\n lower = iterator(lower)\n return lower, lower > upper\n }\n}\n```", "```go\nfunc iterator(i int) int {\n       i += 1\n return i\n}\n```", "```go\n        go func() {\n              waitGroup.Wait()\n              println(\"close channel\")\n              close(carChannel)\n       }()\n\n for thisCar := range carChannel {\n              generatedCars = append(generatedCars, thisCar.Car)\n       }\n       return generatedCars\n}\n```", "```go\nPrintCars(\"GenerateCars(1, 3)\",\n       cars.GenerateCars(1, 3))\n```", "```go\nGenerateCars(1, 3)\n-----------------------\ncar: Honda CR-V\ncar: Honda Accord ES2\ncar: Lexus IS250\n```", "```go\nPrintCars(\"GenerateCars(1, 14), Domestic, Numeric, JSON\",\n       cars.GenerateCars(1, 14).\n              Filter(ByDomestic()).\n              Map(Upgrade()).\n              Filter(ByHasNumber()).\n              Reduce(JsonReducer(cars), Collection{}))\n```", "```go\nGenerateCars(1, 14), Domestic, Numeric, JSON\n-----------------------\ncar: {\"car\": {\"make\": \"Ford\", \"model\": \" F-150 XL\"}}\ncar: {\"car\": {\"make\": \"GM\", \"model\": \" Hummer H2 X\"}}\ncar: {\"car\": {\"make\": \"GM\", \"model\": \" Hummer H3 X\"}}\n```"]