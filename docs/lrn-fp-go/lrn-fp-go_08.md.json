["```go\n$ grep \"^com\" /etc/group | sort com.apple.access_disabled:*:396: com.apple.access_ftp:*:395: com.apple.access_screensharing:*:398: com.apple.access_sessionkey:*:397: com.apple.access_ssh:*:399:\n```", "```go\npackage main\n\nimport (\n       \"fmt\"  gc \"github.com/go-goodies/go_currency\" )\n```", "```go\ntype Order struct {\n       OrderNumber int\n       IsAuthenticated bool\n       IsDecrypted bool\n       Credentials string\n       CCardNumber string\n       CCardExpDate string\n       LineItems []LineItem\n}\ntype LineItem struct {\n       Description string\n       Count       int\n       PriceUSD    gc.USD\n}\n```", "```go\nfunc GetOrders() []*Order {\n\n       order1 := &Order{\n              10001,\n              false,\n              false,\n              \"alice,secret\",\n              \"7b/HWvtIB9a16AYk+Yv6WWwer3GFbxpjoR+GO9iHIYY=\",\n              \"0922\",\n              []LineItem{\n              LineItem{\"Apples\", 1, gc.USD{4, 50}},\n              LineItem{\"Oranges\", 4, gc.USD{12, 00}},\n              },\n       }\n```", "```go\n        order2 := &Order{\n              10002,\n              false,\n              false,\n              \"bob,secret\",\n              \"EOc3kF/OmxY+dRCaYRrey8h24QoGzVU0/T2QKVCHb1Q=\",\n              \"0123\",\n              []LineItem{\n                     LineItem{\"Milk\", 2, gc.USD{8, 00}},\n                     LineItem{\"Sugar\", 1, gc.USD{2, 25}},\n                     LineItem{\"Salt\", 3, gc.USD{3, 75}},\n              },\n       }\n       orders := []*Order{order1, order2}\n       return orders\n}\n```", "```go\nfunc main() {\n       orders := GetOrders()\n       for _, order := range orders {\n              fmt.Printf(\"Processed order: %v\\n\", Pipeline(*order))\n       }\n}\n```", "```go\nfunc Pipeline(o Order) Order {\n       o = Authenticate(o)\n       o = Decrypt(o)\n       o = Charge(o)\n       return o\n}\n```", "```go\nOrder 10001 is Authenticated\nOrder 10001 is Decrypted\nOrder 10001 is Charged\nProcessed order: {10001 true alice,secret 7b/HWvtIB9a16AYk+Yv6WWwer3GFbxpjoR+GO9iHIYY= 0922 [{Apples 1 4.50} {Oranges 4 12.00}]}\nOrder 10002 is Authenticated\nOrder 10002 is Decrypted\nOrder 10002 is Charged\nProcessed order: {10002 true bob,secret EOc3kF/OmxY+dRCaYRrey8h24QoGzVU0/T2QKVCHb1Q= 0123 [{Milk 2 8.00} {Sugar 1 2.25} {Salt 3 3.75}]}\n```", "```go\nfunc Authenticate(o Order) Order  {\n       fmt.Printf(\"Order %d is Authenticated\\n\", o.OrderNumber)\n       return o\n}\n\nfunc Decrypt(o Order) Order {\n       fmt.Printf(\"Order %d is Decrypted\\n\", o.OrderNumber)\n       return o\n}\n\nfunc Charge(o Order) Order {\n       fmt.Printf(\"Order %d is Charged\\n\", o.OrderNumber)\n       return o\n}\n```", "```go\nfunc main() {\n       input := make(chan Order)\n       output := make(chan Order)\n\n       go func() {\n              for order := range input {\n                     output <- Pipeline(order)\n              }\n       }()\n\n       orders := GetOrders()\n       for _, order := range orders {\n              fmt.Printf(\"Processed order: %v\\n\", Pipeline(*order))\n       }\n       close(input)\n}\n```", "```go\nfunc main() {\n       orders := GetOrders()\n       numberOfOrders := len(orders)\n       input := make(chan Order, numberOfOrders)\n       output := make(chan Order, numberOfOrders)\n       for i := 0; i < numberOfOrders; i++ {\n              go func() {\n                     for order := range input {\n                            output <- Pipeline(order)\n                     }\n              }()\n       }\n       for _, order := range orders {\n              input <- *order\n       }\n       close(input)\n       for i := 0; i < numberOfOrders; i++ {\n              fmt.Println(\"The result is:\", <-output)\n       }\n}\n```", "```go\nOrder 10001 is Authenticated\nOrder 10001 is Decrypted\nOrder 10001 is Charged\nOrder 10002 is Authenticated\nOrder 10002 is Decrypted\nOrder 10002 is Charged\nThe result is: {10001 true alice,secret 7b/HWvtIB9a16AYk+Yv6WWwer3GFbxpjoR+GO9iHIYY= 0922 [{Apples 1 4.50} {Oranges 4 12.00}]}\nThe result is: {10002 true bob,secret EOc3kF/OmxY+dRCaYRrey8h24QoGzVU0/T2QKVCHb1Q= 0123 [{Milk 2 8.00} {Sugar 1 2.25} {Salt 3 3.75}]}\n```", "```go\nfunc main() {\n       orders := GetOrders()\n       numberOfOrders := len(orders)\n       cpus := runtime.NumCPU()\n       runtime.GOMAXPROCS(cpus)\n       input := make(chan Order, cpus)\n       output := make(chan Order, cpus)\n       for i := 0; i < numberOfOrders; i++ {\n              go func() {\n                     for order := range input {\n                            output <- Pipeline(order)\n                     }\n              }()\n       }\n       for _, order := range orders {\n              input <- *order\n       }\n       close(input)\n       for i := 0; i < numberOfOrders; i++ {\n              fmt.Println(\"The result is:\", <-output)\n       }\n}\n```", "```go\npackage main\n\nimport (\n       \"log\"  \"fmt\"  gc \"github.com/go-goodies/go_currency\"  gu \"github.com/go-goodies/go_utils\"  \"strings\"  \"crypto/aes\"  \"crypto/cipher\"  \"crypto/rand\"  \"encoding/base64\"  \"errors\"  \"io\"  \"bytes\" )\n```", "```go\nfunc main() {\n       pipeline := BuildPipeline(Authenticate{}, Decrypt{}, Charge{})\n```", "```go\ngo func(){\n       orders := GetOrders()\n       for _, order := range orders {\n              fmt.Printf(\"order: %v\\n\", order)\n              pipeline.Send(*order)\n       }\n       log.Println(\"Close Pipeline\")\n       pipeline.Close()\n}()\n```", "```go\n        pipeline.Receive(func(o Order){\n              log.Printf(\"Received: %v\", o)\n       })\n}\n```", "```go\norder: &{10001 true alice,secret 7b/HWvtIB9a16AYk+Yv6WWwer3GFbxpjoR+GO9iHIYY= 0922 [{Apples 1 4.50} {Oranges 4 12.00}]}\norder: &{10002 true bob,secret EOc3kF/OmxY+dRCaYRrey8h24QoGzVU0/T2QKVCHb1Q= 0123 [{Milk 2 8.00} {Sugar 1 2.25} {Salt 3 3.75}]}\nCredit card XXXXXXXXXXXX1111 charged 16.50\nCredit card XXXXXXXXXXXX5100 charged 14.00\n2017/03/08 03:05:36 Close Pipeline\n2017/03/08 03:05:36 Received: {10001 true alice,secret 4111111111111111 0922 [{Apples 1 4.50} {Oranges 4 12.00}]}\n2017/03/08 03:05:36 Received: {10002 true bob,secret 5105105105105100 0123 [{Milk 2 8.00} {Sugar 1 2.25} {Salt 3 3.75}]}\n```", "```go\ntype Filterer interface {\n       Filter(input chan Order) chan Order\n}\n```", "```go\ntype Authenticate struct {}\nfunc (a Authenticate) Filter(input chan Order) chan Order {\n       output := make(chan Order)\n       go func(){\n              for order := range input {\n                     usernamePwd := strings.Split(order.Credentials, \",\")\n                     if usernamePwd[1] == \"secret\" {\n                            order.IsAuthenticated = true\n                            output <- order\n                     } else {\n                            order.IsAuthenticated = false\n                            errMsg := fmt.Sprintf(\"Error: Invalid password for order Id: %d\", order.OrderNumber)\n                            log.Println(\"Error:\", errors.New(errMsg))\n                            output <- order\n                     }\n              }\n              close(output)\n       }()\n       return output\n}\n```", "```go\ntype Decrypt struct {}\nfunc (d Decrypt) Filter(input chan Order) chan Order {\n       output := make(chan Order)\n       go func(){\n              for order := range input {\n                     creditCardNo, err := decrypt(order.CCardNumber)\n                     if err != nil {\n                            order.IsDecrypted = false\n                            log.Println(\"Error:\", err.Error())\n                     } else {\n                            order.IsDecrypted = true\n                            order.CCardNumber = creditCardNo\n                            output <- order\n                     }\n              }\n```", "```go\n               close(output)\n       }()\n       return output\n}\n```", "```go\nfunc ChargeCard(ccardNo string, amount gc.USD) {\n       fmt.Printf(\"Credit card %v%v charged %v\\n\", gu.Dashes(len(ccardNo)-4, \"X\"), ccardNo[len(ccardNo)-4:], amount)\n}\n```", "```go\ntype Charge struct {}\nfunc (c Charge) Filter(input chan Order) chan Order {\n       output := make(chan Order)\n       go func(){\n              for order := range input {\n                     if order.IsAuthenticated && order.IsDecrypted {\n                            total := gc.USD{0, 0}\n                            for _, li := range order.LineItems {\n                                   total, _ = total.Add(li.PriceUSD)\n                            }\n                            ChargeCard(order.CCardNumber, total)\n                            output <- order\n                     } else {\n                            errMsg := fmt.Sprintf(\"Error: Unable to charge order Id: %d\", order.OrderNumber)\n                            log.Println(\"Error:\", errors.New(errMsg))\n                     }\n              }\n              close(output)\n       }()\n       return output\n}\n```", "```go\nvar AESEncryptionKey = \"a very very very very secret key\"  func encrypt(rawString string) (string, error) {\n       rawBytes := []byte(rawString)\n       block, err := aes.NewCipher([]byte(AESEncryptionKey))\n       if err != nil {\n              return \"\", err\n       }\n       if len(rawBytes)%aes.BlockSize != 0 {\n              padding := aes.BlockSize - len(rawBytes)%aes.BlockSize  padText := bytes.Repeat([]byte{byte(0)}, padding)\n              rawBytes = append(rawBytes, padText...)\n       }\n       ciphertext := make([]byte, aes.BlockSize+len(rawBytes))\n       iv := ciphertext[:aes.BlockSize]\n       if _, err := io.ReadFull(rand.Reader, iv); err != nil {\n              return \"\", err\n       }\n       mode := cipher.NewCBCEncrypter(block, iv)\n       mode.CryptBlocks(ciphertext[aes.BlockSize:], rawBytes)\n       return base64.StdEncoding.EncodeToString(ciphertext), nil\n}\nfunc decrypt(encodedValue string) (string, error) {\n       block, err := aes.NewCipher([]byte(AESEncryptionKey))\n       if err != nil {\n              return \"\", err\n       }\n       b, err := base64.StdEncoding.DecodeString(encodedValue)\n       if err != nil {\n              return \"\", err\n       }\n       if len(b) < aes.BlockSize {\n              return \"\", errors.New(\"ciphertext too short\")\n       }\n       iv := b[:aes.BlockSize]\n       b = b[aes.BlockSize:]\n       if len(b)%aes.BlockSize != 0 {\n              return \"\", errors.New(\"ciphertext is not a multiple of the block size\")\n       }\n       mode := cipher.NewCBCDecrypter(block, iv)\n       mode.CryptBlocks(b, b)\n       b = bytes.TrimRight(b, \"\\x00\")\n       return string(b), nil\n}\n```", "```go\nfunc GetOrders() []*Order {\n\n       order1 := &Order{\n              10001,\n              true,\n              \"alice,secret\",\n              \"7b/HWvtIB9a16AYk+Yv6WWwer3GFbxpjoR+GO9iHIYY=XXX\",\n              \"0922\",\n              []LineItem{\n                     LineItem{\"Apples\", 1, gc.USD{4, 50}},\n                     LineItem{\"Oranges\", 4, gc.USD{12, 00}},\n              },\n       }\n```", "```go\n2017/03/08 04:23:03 Error: illegal base64 data at input byte 44\n2017/03/08 04:23:03 Close Pipeline\n2017/03/08 04:23:03 Received: {10002 true bob,secret 5105105105105100 0123 [{Milk 2 8.00} {Sugar 1 2.25} {Salt 3 3.75}]}\norder: &{10001 true alice,secret 7b/HWvtIB9a16AYk+Yv6WWwer3GFbxpjoR+GO9iHIYY=XXX 0922 [{Apples 1 4.50} {Oranges 4 12.00}]}\norder: &{10002 true bob,secret EOc3kF/OmxY+dRCaYRrey8h24QoGzVU0/T2QKVCHb1Q= 0123 [{Milk 2 8.00} {Sugar 1 2.25} {Salt 3 3.75}]}\nCredit card XXXXXXXXXXXX5100 charged 14.00\n```", "```go\nfunc GetOrders() []*Order {\n\n       order1 := &Order{\n              10001,\n              false,\n              \"alice,secretXXX\",\n              \"7b/HWvtIB9a16AYk+Yv6WWwer3GFbxpjoR+GO9iHIYY=\",\n              \"0922\",\n              []LineItem{\n                     LineItem{\"Apples\", 1, gc.USD{4, 50}},\n                     LineItem{\"Oranges\", 4, gc.USD{12, 00}},\n              },\n       }\n```", "```go\norder: &{10001 false alice,secretXXX 7b/HWvtIB9a16AYk+Yv6WWwer3GFbxpjoR+GO9iHIYY= 0922 [{Apples 1 4.50} {Oranges 4 12.00}]}\n2017/03/08 04:49:30 Close Pipeline\norder: &{10002 false bob,secret EOc3kF/OmxY+dRCaYRrey8h24QoGzVU0/T2QKVCHb1Q= 0123 [{Milk 2 8.00} {Sugar 1 2.25} {Salt 3 3.75}]}\n2017/03/08 04:49:30 Error: Error: Invalid password for order Id: 10001\nCredit card XXXXXXXXXXXX5100 charged 14.00\n2017/03/08 04:49:30 Received: {10002 true bob,secret 5105105105105100 0123 [{Milk 2 8.00} {Sugar 1 2.25} {Salt 3 3.75}]}\n```", "```go\nfunc main() {\n       pipeline := BuildPipeline(Authenticate{}, Decrypt{}, Charge{})\n```", "```go\norder: &{10001 false alice,secret 7b/HWvtIB9a16AYk+Yv6WWwer3GFbxpjoR+GO9iHIYY= 0922 [{Apples 1 4.50} {Oranges 4 12.00}]}\n2017/03/08 04:52:46 Close Pipeline\norder: &{10002 false bob,secret EOc3kF/OmxY+dRCaYRrey8h24QoGzVU0/T2QKVCHb1Q= 0123 [{Milk 2 8.00} {Sugar 1 2.25} {Salt 3 3.75}]}\n2017/03/08 04:52:46 Received: {10001 true alice,secret 4111111111111111 0922 [{Apples 1 4.50} {Oranges 4 12.00}]}\nCredit card XXXXXXXXXXXX1111 charged 16.50\n2017/03/08 04:52:46 Received: {10002 true bob,secret 5105105105105100 0123 [{Milk 2 8.00} {Sugar 1 2.25} {Salt 3 3.75}]}\nCredit card XXXXXXXXXXXX5100 charged 14.00\n```", "```go\nfunc main() {\n       pipeline := BuildPipeline(Charge{}, Decrypt{}, Authenticate{})\n```", "```go\norder: &{10001 false alice,secret 7b/HWvtIB9a16AYk+Yv6WWwer3GFbxpjoR+GO9iHIYY= 0922 [{Apples 1 4.50} {Oranges 4 12.00}]}\norder: &{10002 false bob,secret EOc3kF/OmxY+dRCaYRrey8h24QoGzVU0/T2QKVCHb1Q= 0123 [{Milk 2 8.00} {Sugar 1 2.25} {Salt 3 3.75}]}\n2017/03/08 04:58:27 Error: Error: Unable to charge order Id: 10001\n2017/03/08 04:58:27 Error: Error: Unable to charge order Id: 10002\n2017/03/08 04:58:27 Close Pipeline\n```", "```go\nfunc main() {\n       pipeline := BuildPipeline(Decrypt{}, Charge{}, Authenticate{})\n```", "```go\n2017/03/08 05:10:32 Close Pipeline\n2017/03/08 05:10:32 Error: Error: Unable to charge order Id: 10001\n2017/03/08 05:10:32 Error: Error: Unable to charge order Id: 10002\norder: &{10001 false false alice,secret 7b/HWvtIB9a16AYk+Yv6WWwer3GFbxpjoR+GO9iHIYY= 0922 [{Apples 1 4.50} {Oranges 4 12.00}]}\norder: &{10002 false false bob,secret EOc3kF/OmxY+dRCaYRrey8h24QoGzVU0/T2QKVCHb1Q= 0123 [{Milk 2 8.00} {Sugar 1 2.25} {Salt 3 3.75}]}\n```", "```go\npipeline := BuildPipeline(Decrypt{}, Charge{}, Authenticate{})\n```"]