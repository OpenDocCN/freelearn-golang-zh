["```go\nimport \"fmt\" \n\ntype Currency struct { \n  Name    string \n  Country string \n  Number  int \n} \n\nvar CAD = Currency{ \n    Name: \"Canadian Dollar\",  \n    Country: \"Canada\",  \n    Number: 124} \n\nvar FJD = Currency{ \n    Name: \"Fiji Dollar\",  \n    Country: \"Fiji\",  \n    Number: 242} \n\nvar JMD = Currency{ \n    Name: \"Jamaican Dollar\",  \n    Country: \"Jamaica\",  \n    Number: 388} \n\nvar USD = Currency{ \n    Name: \"US Dollar\",  \n    Country: \"USA\",  \n    Number: 840} \n\nfunc main() { \n  num0 := 242 \n  if num0 > 100 || num0 < 900 { \n    fmt.Println(\"Currency: \", num0) \n    printCurr(num0) \n  } else { \n    fmt.Println(\"Currency unknown\") \n  } \n\n  if num1 := 388; num1 > 100 || num1 < 900 { \n    fmt.Println(\"Currency:\", num1) \n    printCurr(num1) \n  } \n} \n\nfunc printCurr(number int) { \n  if CAD.Number == number { \n    fmt.Printf(\"Found: %+v\\n\", CAD) \n  } else if FJD.Number == number { \n    fmt.Printf(\"Found: %+v\\n\", FJD) \n  } else if JMD.Number == number { \n    fmt.Printf(\"Found: %+v\\n\", JMD) \n  } else if USD.Number == number { \n    fmt.Printf(\"Found: %+v\\n\", USD) \n  } else { \n    fmt.Println(\"No currency found with number\", number) \n  } \n} \n\n```", "```go\n          if (num0 > 100 || num0 < 900) { \n            fmt.Println(\"Currency: \", num0) \n            printCurr(num0) \n          } \n\n    ```", "```go\n          if num0 > 100 || num0 < 900 { \n            fmt.Println(\"Currency: \", num0) \n            printCurr(num0) \n          } \n\n    ```", "```go\n          if num0 > 100 || num0 < 900 printCurr(num0) \n\n    ```", "```go\n          if num0 > 100 || num0 < 900 {printCurr(num0)} \n\n    ```", "```go\n          if num0 > 100 || num0 < 900 {printCurr(num0)} \n\n    ```", "```go\n          if num0 > 100 || num0 < 900 { \n            printCurr(num0) \n          }\n    ```", "```go\n          if num0 > 100 || num0 < 900 { \n            fmt.Println(\"Currency: \", num0) \n            printCurr(num0) \n          } else { \n            fmt.Println(\"Currency unknown\") \n          } \n\n    ```", "```go\n          if CAD.Number == number { \n            fmt.Printf(\"Found: %+v\\n\", CAD) \n          } else if FJD.Number == number { \n            fmt.Printf(\"Found: %+v\\n\", FJD) \n          } \n\n    ```", "```go\nfunc printCurr(number int) { \n  if CAD.Number == number { \n    fmt.Printf(\"Found: %+v\\n\", CAD) \n  } else if FJD.Number == number { \n    fmt.Printf(\"Found: %+v\\n\", FJD) \n  } else if JMD.Number == number { \n    fmt.Printf(\"Found: %+v\\n\", JMD) \n  } else if USD.Number == number { \n    fmt.Printf(\"Found: %+v\\n\", USD) \n  } else { \n    fmt.Println(\"No currency found with number\", number) \n  } \n}\n```", "```go\nif num1 := 388; num1 > 100 || num1 < 900 { \n  fmt.Println(\"Currency:\", num1) \n  printCurr(num1) \n}  \n\n```", "```go\nimport \"fmt\" \n\ntype Curr struct { \n  Currency string \n  Name     string \n  Country  string \n  Number   int \n} \n\nvar currencies = []Curr{ \n  Curr{\"DZD\", \"Algerian Dinar\", \"Algeria\", 12}, \n  Curr{\"AUD\", \"Australian Dollar\", \"Australia\", 36}, \n  Curr{\"EUR\", \"Euro\", \"Belgium\", 978}, \n  Curr{\"CLP\", \"Chilean Peso\", \"Chile\", 152}, \n  Curr{\"EUR\", \"Euro\", \"Greece\", 978}, \n  Curr{\"HTG\", \"Gourde\", \"Haiti\", 332}, \n  ... \n} \n\nfunc isDollar(curr Curr) bool { \n  var bool result \n  switch curr { \n  default: \n    result = false \n  case Curr{\"AUD\", \"Australian Dollar\", \"Australia\", 36}: \n    result = true \n  case Curr{\"HKD\", \"Hong Kong Dollar\", \"Hong Koong\", 344}: \n    result = true \n  case Curr{\"USD\", \"US Dollar\", \"United States\", 840}: \n    result = true \n  } \n  return result \n} \nfunc isDollar2(curr Curr) bool { \n  dollars := []Curr{currencies[2], currencies[6], currencies[9]} \n  switch curr { \n  default: \n    return false \n  case dollars[0]: \n    fallthrough \n  case dollars[1]: \n    fallthrough \n  case dollars[2]: \n    return true \n  } \n  return false \n} \n\nfunc isEuro(curr Curr) bool { \n  switch curr { \n  case currencies[2], currencies[4], currencies[10]: \n    return true \n  default: \n    return false \n  } \n} \n\nfunc main() { \n  curr := Curr{\"EUR\", \"Euro\", \"Italy\", 978} \n  if isDollar(curr) { \n    fmt.Printf(\"%+v is Dollar currency\\n\", curr) \n  } else if isEuro(curr) { \n    fmt.Printf(\"%+v is Euro currency\\n\", curr) \n  } else { \n    fmt.Println(\"Currency is not Dollar or Euro\") \n  } \n  dol := Curr{\"HKD\", \"Hong Kong Dollar\", \"Hong Koong\", 344} \n  if isDollar2(dol) { \n    fmt.Println(\"Dollar currency found:\", dol) \n  } \n} \n\n```", "```go\n          func isDollar(curr Curr) bool { \n            var bool result \n            switch curr { \n              default: \n              result = false \n              case Curr{\"AUD\", \"Australian Dollar\", \"Australia\", 36}: \n              result = true \n              case Curr{\"HKD\", \"Hong Kong Dollar\", \"Hong Koong\", 344}: \n              result = true \n              case Curr{\"USD\", \"US Dollar\", \"United States\", 840}: \n              result = true \n            } \n            return result \n          } \n    ```", "```go\n          func isEuro(curr Curr) bool { \n            switch curr { \n              case currencies[2], currencies[4], currencies[10]: \n              return true \n              default: \n              return false \n            } \n          } \n\n    ```", "```go\n          func isEuro(curr Curr) bool { \n            if curr == currencies[2] || curr == currencies[4],  \n            curr == currencies[10]{ \n            return true \n          }else{ \n            return false \n          } \n        } \n\n    ```", "```go\nfunc isDollar2(curr Curr) bool { \n  switch curr { \n  case Curr{\"AUD\", \"Australian Dollar\", \"Australia\", 36}: \n    fallthrough \n  case Curr{\"HKD\", \"Hong Kong Dollar\", \"Hong Kong\", 344}: \n    fallthrough \n  case Curr{\"USD\", \"US Dollar\", \"United States\", 840}: \n    return true \n  default: \n    return false \n  } \n} \n\n```", "```go\nswitch curr {  \ncase Curr{\"AUD\", \"Australian Dollar\", \"Australia\", 36},  \n     Curr{\"HKD\", \"Hong Kong Dollar\", \"Hong Kong\", 344},  \n     Curr{\"USD\", \"US Dollar\", \"United States\", 840}:  \n  return true \ndefault: \n   return false \n}  \n\n```", "```go\nimport ( \n  \"fmt\" \n  \"strings\" \n) \ntype Curr struct { \n  Currency string \n  Name     string \n  Country  string \n  Number   int \n} \n\nvar currencies = []Curr{ \n  Curr{\"DZD\", \"Algerian Dinar\", \"Algeria\", 12}, \n  Curr{\"AUD\", \"Australian Dollar\", \"Australia\", 36}, \n  Curr{\"EUR\", \"Euro\", \"Belgium\", 978}, \n  Curr{\"CLP\", \"Chilean Peso\", \"Chile\", 152}, \n  ... \n} \n\nfunc find(name string) { \n  for i := 0; i < 10; i++ { \n    c := currencies[i] \n    switch { \n    case strings.Contains(c.Currency, name), \n      strings.Contains(c.Name, name), \n      strings.Contains(c.Country, name): \n      fmt.Println(\"Found\", c) \n    } \n  } \n} \n\n```", "```go\nfunc find(name string) { \n  for I := 0; i < 10; i++ { \n    c := currencies[i] \n    if strings.Contains(c.Currency, name) || \n      strings.Contains(c.Name, name) || \n      strings.Contains(c.Country, name){ \n      fmt.Println\"\"Foun\"\", c) \n    } \n  } \n} \n\n```", "```go\nfunc assertEuro(c Curr) bool {  \n  switch name, curr := \"Euro\", \"EUR\"; {  \n  case c.Name == name:  \n    return true  \n  case c.Currency == curr:  \n    return true \n  }  \n  return false  \n} \n\n```", "```go\nfunc find(name string) { \n  for i := 0; i < 10; i++ { \n    c := currencies[i] \n    switch { \n    case strings.Contains(c.Currency, name), \n      strings.Contains(c.Name, name), \n      strings.Contains(c.Country, name): \n      fmt.Println(\"Found\", c) \n    } \n  } \n}  \n\nfunc findNumber(num int) { \n  for _, curr := range currencies { \n    if curr.Number == num { \n      fmt.Println(\"Found\", curr) \n    } \n  } \n}  \n\nfunc findAny(val interface{}) {  \n  switch i := val.(type) {  \n  case int:  \n    findNumber(i)  \n  case string:  \n    find(i)  \n  default:  \n    fmt.Printf(\"Unable to search with type %T\\n\", val)  \n  }  \n} \n\nfunc main() { \nfindAny(\"Peso\") \n  findAny(404) \n  findAny(978) \n  findAny(false) \n} \n\n```", "```go\nswitch i := val.(type) \n\n```", "```go\nfindAny(\"Peso\")  \nfindAny(404)  \nfindAny(978)  \nfindAny(false)  \n\n```", "```go\nfor x < 10 { \n... \n}\n\n```", "```go\nfor {\n...\n}\n```", "```go\nfor x:=0; x < 10; x++ {\n...\n}\n```", "```go\nfor i, val := range values {\n...\n}\n```", "```go\ntype Curr struct {  \n  Currency string  \n  Name     string  \n  Country  string  \n  Number   int  \n}  \nvar currencies = []Curr{  \n  Curr{\"KES\", \"Kenyan Shilling\", \"Kenya\", 404},  \n  Curr{\"AUD\", \"Australian Dollar\", \"Australia\", 36},  \n... \n} \n\nfunc listCurrs(howlong int) {  \n  i := 0  \n  for i < len(currencies) {  \n    fmt.Println(currencies[i])  \n    i++  \n  }  \n} \n\n```", "```go\nfor { \n  // statements here \n} \n\n```", "```go\ntype Curr struct {  \n  Currency string  \n  Name     string  \n  Country  string  \n  Number   int  \n}  \n\nvar currencies = []Curr{  \n  Curr{\"KES\", \"Kenyan Shilling\", \"Kenya\", 404},  \n  Curr{\"AUD\", \"Australian Dollar\", \"Australia\", 36},  \n... \n} \n\nfunc sortByNumber() {  \n  N := len(currencies)  \n  for i := 0; i < N-1; i++ {  \n     currMin := i  \n     for k := i + 1; k < N; k++ {  \n    if currencies[k].Number < currencies[currMin].Number {  \n         currMin = k  \n    }  \n     }  \n     // swap  \n     if currMin != i {  \n        temp := currencies[i]  \n    currencies[i] = currencies[currMin]  \n    currencies[currMin] = temp  \n     } \n  }  \n} \n\n```", "```go\nk:=initialize()\nfor ; k < 10; \n++{\n...\n}\n```", "```go\nfor k:=0; k < 10;{\n...\n}\n```", "```go\nfor ; k < 10;{\n...\n}\n```", "```go\nfor k:=0; ;k++{\n...\n}\n```", "```go\nfor ; ;{ ... }\n```", "```go\nimport ( \n  \"fmt\" \n  \"math/rand\" \n) \n\nvar list1 = []string{ \n\"break\", \"lake\", \"go\",  \n\"right\", \"strong\",  \n\"kite\", \"hello\"}  \n\nvar list2 = []string{ \n\"fix\", \"river\", \"stop\",  \n\"left\", \"weak\", \"flight\",  \n\"bye\"}  \n\nfunc main() {  \n  rand.Seed(31)  \n  for w1, w2:= nextPair();  \n  w1 != \"go\" && w2 != \"stop\";  \n  w1, w2 = nextPair() {  \n\n    fmt.Printf(\"Word Pair -> [%s, %s]\\n\", w1, w2)  \n  }  \n}  \n\nfunc nextPair() (w1, w2 string) {  \n  pos := rand.Intn(len(list1))  \n  return list1[pos], list2[pos]  \n} \n\n```", "```go\nfor i, v := range []V{1,2,3} {\n...\n}\n```", "```go\nfor i, v := range \"Hello\" {\n...\n}\n```", "```go\nfor k, v := range map[K]V {\n...\n}\n```", "```go\nvar ch chan T\nfor c := range ch {\n...\n}\n```", "```go\nimport \"fmt\" \n\nfunc main() { \n  vals := []int{4, 2, 6} \n  for _, v := range vals { \n    v-- \n  } \n  fmt.Println(vals) \n} \n\n```", "```go\nfunc main() { \n  vals := []int{4, 2, 6} \n  for i, v := range vals { \n    vals[i] = v - 1 \n  } \n  fmt.Println(vals) \n} \n\n```", "```go\nfunc printCurrencies() { \n  for i := range currencies { \n    fmt.Printf(\"%d: %v\\n\", i, currencies[i]) \n  } \n} \n\n```", "```go\nfunc main() { \n  for range []int{1,1,1,1} { \n    fmt.Println(\"Looping\") \n  } \n}  \n\n```", "```go\nDoSearch: \n\n```", "```go\nimport ( \n  \"fmt\" \n) \n\nvar words = [][]string{  \n  {\"break\", \"lake\", \"go\", \"right\", \"strong\", \"kite\", \"hello\"},  \n  {\"fix\", \"river\", \"stop\", \"left\", \"weak\", \"flight\", \"bye\"},  \n  {\"fix\", \"lake\", \"slow\", \"middle\", \"sturdy\", \"high\", \"hello\"},  \n}  \n\nfunc search(w string) {  \nDoSearch:  \n  for i := 0; i < len(words); i++ {  \n    for k := 0; k < len(words[i]); k++ {  \n      if words[i][k] == w {  \n        fmt.Println(\"Found\", w)  \n        break DoSearch  \n      }  \n    }  \n  }  \n}  \n\n```", "```go\nfunc search(w string) {  \nDoSearch:  \n  for i := 0; i < len(words); i++ {  \n    for k := 0; k < len(words[i]); k++ {  \n      if words[i][k] == w {  \n        fmt.Println(\"Found\", w)  \n        continue DoSearch  \n      }  \n    }  \n  }  \n} \n\n```", "```go\nimport \"fmt\" \n\nfunc main() {  \n  var a string \nStart:  \n  for {  \n    switch {  \n    case a < \"aaa\":  \n      goto A  \n    case a >= \"aaa\" && a < \"aaabbb\":  \n      goto B  \n    case a == \"aaabbb\":  \n      break Start  \n    }  \n  A:  \n    a += \"a\"  \n    continue Start  \n  B:  \n    a += \"b\"  \n    continue Start  \n  }  \nfmt.Println(a) \n} \n\n```"]