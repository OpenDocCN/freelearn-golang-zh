["```go\nvar val [100]int \nvar days [7]string \nvar truth [256]bool \nvar histogram [5]map[string]int \n\n```", "```go\nvar days [7]string \nvar weekdays [5]string \n\n```", "```go\nvar board [4][2]int\nvar matrix [2][2][2][2] byte\n```", "```go\nvar val [100]int = [100]int{44,72,12,55,64,1,4,90,13,54}\nvar days [7]string = [7]string{\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n  \"Sunday\",\n}\nvar truth = [256]bool{true}\nvar histogram = [5]map[string]int {\n  map[string]int{\"A\":12,\"B\":1, \"D\":15},\n  map[string]int{\"man\":1344,\"women\":844, \"children\":577,...},\n}\n```", "```go\nvar board = [4][2]int{ \n   {33, 23}, \n   {62, 2}, \n   {23, 4}, \n   {51, 88}, \n} \nvar matrix = [2][2][2][2]byte{ \n   {{{4, 4}, {3, 5}}, {{55, 12}, {22, 4}}}, \n   {{{2, 2}, {7, 9}}, {{43, 0}, {88, 7}}}, \n} \n\n```", "```go\nvar weekdays = [...]string{ \n   \"Monday\", \n   \"Tuesday\", \n   \"Wednesday\", \n   \"Thursday\", \n   \"Friday\",    \n}  \n\n```", "```go\nvar msg = [12]rune{0: 'H', 2: 'E', 4: 'L', 6: 'O', 8: '!'} \n\n```", "```go\ntype matrix [2][2][2][2]byte \n\nfunc main() { \n   var mat1 matrix \n   mat1 = initMat() \n   fmt.Println(mat1) \n} \n\nfunc initMat() matrix { \n   return matrix{ \n         {{{4, 4}, {3, 5}}, {{55, 12}, {22, 4}}}, \n         {{{2, 2}, {7, 9}}, {{43, 0}, {88, 7}}}, \n   } \n} \n\n```", "```go\nvar image [256]byte\n```", "```go\np := [5]int{122,6,23,44,6} \np[4] = 82 \nfmt.Println(p[0]) \n\n```", "```go\nfunc main() { \n   seven := [7]string{\"grumpy\", \"sleepy\", \"bashful\"} \n   fmt.Println(len(seven), cap(seven)) \n} \n\n```", "```go\nconst size = 1000 \nvar nums [size]int \n\nfunc init() { \n   rand.Seed(time.Now().UnixNano()) \n   for i := 0; i < size; i++ { \n         nums[i] = rand.Intn(10000) \n   } \n} \n\nfunc max(nums [size]int) int { \n   temp := nums[0] \n   for _, val := range nums { \n         if val > temp { \n               temp = val \n         } \n   } \n   return temp \n} \n\n```", "```go\ntype numbers [1024 * 1024]int \nfunc initialize(nums *numbers) { \n   rand.Seed(time.Now().UnixNano()) \n   for i := 0; i < size; i++ { \n         nums[i] = rand.Intn(10000) \n   } \n} \nfunc max(nums *numbers) int { \n   temp := nums[0] \n   for _, val := range nums { \n         if val > temp { \n               temp = val \n         } \n   } \n   return temp \n} \nfunc main() { \n   var nums *numbers = new(numbers) \n   initialize(nums) \n} \n\n```", "```go\ntype galaxies [14]string \nfunc main() { \n   namedGalaxies = &galaxies{ \n         \"Andromeda\", \n         \"Black Eye\", \n         \"Bode's\", \n          ...   \n   } \n   printGalaxies(namedGalaxies) \n} \n\n```", "```go\nvar ( \n    image []byte      \n    ids []string \n    vector []float64 \n    months []string \n    q1 []string \n    histogram []map[string]int // slice of map (see map later) \n) \n\n```", "```go\nvar ( \n    months []string \n    q1 []string \n) \nfunc print(strs []string){ ... } \nfunc main() { \n   print(months) \n   print(q1) \n} \n\n```", "```go\nvar( \n    board [][]int \n    graph [][][][]int \n) \n\n```", "```go\nvar ( \n    ids []string = []string{\"fe225\", \"ac144\", \"3b12c\"} \n    vector = []float64{12.4, 44, 126, 2, 11.5}  \n    months = []string { \n         \"Jan\", \"Feb\", \"Mar\", \"Apr\", \n         \"May\", \"Jun\", \"Jul\", \"Aug\", \n         \"Sep\", \"Oct\", \"Nov\", \"Dec\", \n    } \n    // slice of map type (maps are covered later) \n    tables = []map[string][]int { \n         { \n               \"age\":{53, 13, 5, 55, 45, 62, 34, 7}, \n               \"pay\":{124, 66, 777, 531, 933, 231}, \n         }, \n    } \n    graph  = [][][][]int{ \n         {{{44}, {3, 5}}, {{55, 12, 3}, {22, 4}}}, \n         {{{22, 12, 9, 19}, {7, 9}}, {{43, 0, 44, 12}, {7}}},     \n    } \n) \n\n```", "```go\nhalfyr := []string{\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\"}\n```", "```go\nvar ( \n    halfyr = []string{ \n         \"Jan\", \"Feb\", \"Mar\", \n         \"Apr\", \"May\", \"Jun\", \n    } \n\n    q1 = halfyr[:3] \n    q2 = halfyr[3:] \n) \n\n```", "```go\nvar ( \n    months [12]string = [12]string{ \n         \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \n         \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", \n    } \n\n    halfyr = months[:6] \n    q1 = halfyr[:3] \n    q2 = halfyr[3:6] \n    q3 = months[6:9] \n    q4 = months[9:] \n) \n\n```", "```go\nvar ( \n    months [12]string = [12]string{ \n         \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \n         \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", \n    } \n    summer1 = months[6:9:9] \n) \n\n```", "```go\nfunc main() { \n   months := make([]string, 6) \n   ... \n} \n\n```", "```go\nfunc main() { \n   months := make([]string, 6, 12)  \n   ... \n} \n\n```", "```go\nfunc main () { \n   h := []float64{12.5, 18.4, 7.0} \n   h[0] = 15 \n   fmt.Println(h[0]) \n   ... \n} \n\n```", "```go\nfunc scale(factor float64, vector []float64) []float64 { \n   for i := range vector { \n         vector[i] *= factor \n   } \n   return vector \n} \n\nfunc contains(val float64, numbers []float64) bool { \n   for _, num := range numbers { \n         if num == val { \n               return true \n         } \n   } \n   return false \n} \n\n```", "```go\nfunc scale(factor float64, vector []float64) { \n   for i := range vector { \n         vector[i] *= factor \n   } \n} \n\n```", "```go\nfunc main() { \n    var vector []float64 \n    fmt.Println(len(vector)) // prints 0, no panic \n    h := make([]float64, 4, 10) \n    fmt.Println(len(h), \",\", cap(h)) \n} \n\n```", "```go\nfunc main() { \n   months := make([]string, 3, 3) \n   months = append(months, \"Jan\", \"Feb\", \"March\",  \n    \"Apr\", \"May\", \"June\") \n   months = append(months, []string{\"Jul\", \"Aug\", \"Sep\"}...) \n   months = append(months, \"Oct\", \"Nov\", \"Dec\") \n   fmt.Println(len(months), cap(months), months) \n} \n\n```", "```go\nfunc clone(v []float64) (result []float64) { \n   result = make([]float64, len(v), cap(v)) \n   copy(result, v) \n   return \n} \n\n```", "```go\nfunc main() { \n   msg := \"Bobsayshelloworld!\" \n   fmt.Println( \n         msg[:3], msg[3:7], msg[7:12],  \n         msg[12:17], msg[len(msg)-1:], \n   ) \n} \n\n```", "```go\nfunc sort(str string) string { \n   bytes := []byte(str) \n   var temp byte \n   for i := range bytes { \n         for j := i + 1; j < len(bytes); j++ { \n               if bytes[j] < bytes[i] { \n                     temp = bytes[i] \n                     bytes[i], bytes[j] = bytes[j], temp \n               } \n         } \n   } \n   return string(bytes) \n} \n\n```", "```go\nvar ( \n    legends map[int]string \n    histogram map[string]int \n    calibration map[float64]bool \n    matrix map[[2][2]int]bool    // map with array key type \n    table map[string][]string    // map of string slices \n\n   // map (with struct key) of map of string \n   log map[struct{name string}]map[string]string \n) \n\n```", "```go\nvar ( \n   histogram map[string]int = map[string]int{ \n         \"Jan\":100, \"Feb\":445, \"Mar\":514, \"Apr\":233, \n         \"May\":321, \"Jun\":644, \"Jul\":113, \"Aug\":734, \n         \"Sep\":553, \"Oct\":344, \"Nov\":831, \"Dec\":312,  \n   } \n\n   table = map[string][]int { \n         \"Men\":[]int{32, 55, 12, 55, 42, 53}, \n         \"Women\":[]int{44, 42, 23, 41, 65, 44}, \n   } \n) \n\n```", "```go\nfunc main() { \n   hist := make(map[int]string) \n   hist[\"Jan\"] = 100 \n   hist[\"Feb\"] = 445 \n   hist[\"Mar\"] = 514 \n... \n} \n\n```", "```go\nhist := make(map[int]string) \nhist[\"Jan\"] = 100 \n\n```", "```go\nval := hist[\"Mar\"] \n\n```", "```go\nfunc save(store map[string]int, key string, value int) { \n   val, ok := store[key] \n   if !ok { \n         store[key] = value \n   }else{ \n         panic(fmt.Sprintf(\"Slot %d taken\", val)) \n   } \n} \n\n```", "```go\nfor key, val := range hist { \n   adjVal := int(float64(val) * 0.100) \n   fmt.Printf(\"%s (%d):\", key, val) \n   for i := 0; i < adjVal; i++ { \n         fmt.Print(\".\") \n   } \n   fmt.Println() \n} \n\n```", "```go\nh := map[int]bool{3:true, 7:false, 9:false}   \nfmt.Println(len(h))   \n\n```", "```go\nh := map[int]bool{3:true, 7:false, 9:false}   \ndelete(h,7)   \nfmt.Println(len(h))   \n\n```", "```go\nfunc main() { \n   hist := make(map[string]int) \n   hist[\"Jun\"] = 644 \n   hist[\"Jul\"] = 113 \n   remove(hit, \"Jun\") \n   len(hist) // returns 1 \n} \nfunc remove(store map[string]int, key string) error { \n   _, ok := store[key] \n   if !ok { \n         return fmt.Errorf(\"Key not found\") \n   } \n   delete(store, key) \n   return nil \n} \n\n```", "```go\nvar( \n   empty struct{} \n   car struct{make, model string} \n   currency struct{name, country string; code int} \n   node struct{ \n         edges []string \n         weight int \n   } \n   person struct{ \n         name string \n         address struct{ \n               street string \n               city, state string \n               postal string \n         } \n   } \n) \n\n```", "```go\nfmt.Pritnln(person.name)\n```", "```go\nfmt.Pritnln(person.address.street)\nfmt.Pritnln(person.address.city)\n```", "```go\nvar( \n   currency = struct{ \n         name, country string \n         code int \n   }{ \n         \"USD\", \"United States\",  \n         840, \n   } \n... \n) \n\n```", "```go\nvar( \n   car = struct{make, model string}{make:\"Ford\", model:\"F150\"} \n   node = struct{ \n         edges []string \n         weight int \n   }{ \n         edges: []string{\"north\", \"south\", \"west\"}, \n   } \n... \n) \n\n```", "```go\ntype person struct { \n   name    string \n   address address \n} \n\ntype address struct { \n   street      string \n   city, state string \n   postal      string \n} \n\nfunc makePerson() person { \n   addr := address{ \n         city: \"Goville\", \n         state: \"Go\", \n         postal: \"12345\", \n   } \n   return person{ \n         name: \"vladimir vivien\", \n         address: addr, \n   } \n} \n\n```", "```go\ntype diameter int \n\ntype name struct { \n   long   string \n   short  string \n   symbol rune \n} \n\ntype planet struct { \n   diameter \n   name \n   desc string \n} \n\nfunc main() { \n   earth := planet{ \n         diameter: 7926, \n         name: name{ \n               long:   \"Earth\", \n               short:  \"E\", \n               symbol: '\\u2641', \n         }, \n         desc: \"Third rock from the Sun\", \n   } \n   ... \n} \n\n```", "```go\nfunc main(){ \n   jupiter := planet{} \n   jupiter.diameter = 88846 \n   jupiter.name.long = \"Jupiter\" \n   jupiter.name.short = \"J\" \n   jupiter.name.symbol = '\\u2643' \n   jupiter.desc = \"A ball of gas\" \n   ... \n} \n\n```", "```go\nfunc main() {\n...\nsaturn := planet{}\nsaturn.diameter = 120536\nsaturn.long = \"Saturn\"\nsaturn.short = \"S\"\nsaturn.symbol = '\\u2644'\nsaturn.desc = \"Slow mover\"\n...\n}\n```", "```go\ntype person struct { \n   name    string \n   title string       \n} \nfunc updateName(p person, name string) { \n   p.name = name \n}  \n\nfunc main() { \n   p := person{} \n   p.name = \"uknown\" \n   ... \n   updateName(p, \"Vladimir Vivien\") \n} \n\n```", "```go\ntype person struct { \n   name    string \n   title string \n} \n\nfunc updateName(p *person, name string) { \n   p.name = name \n} \n\nfunc main() { \n   p := new(person) \n   p.name = \"uknown\" \n   ... \n   updateName(p, \"Vladimir Vivien\") \n} \n\n```", "```go\ntype Person struct { \n   Name    string `json:\"person_name\"` \n   Title   string `json:\"person_title\"` \n   Address `json:\"person_address_obj\"` \n} \n\ntype Address struct { \n   Street string `json:\"person_addr_street\"` \n   City   string `json:\"person_city\"` \n   State  string `json:\"person_state\"` \n   Postal string `json:\"person_postal_code\"` \n} \nfunc main() { \n   p := Person{ \n         Name: \"Vladimir Vivien\", \n         Title : \"Author\", \n         ... \n   } \n   ... \n   b, _ := json.Marshal(p) \n   fmt.Println(string(b)) \n} \n\n```"]