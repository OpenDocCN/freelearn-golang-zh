["```go\n$> go test .\n\n```", "```go\n$> go test ./... \n\n```", "```go\n$>tree go/src/fmt/\n\u251c\u2500\u2500 doc.go\n\u251c\u2500\u2500 export_test.go\n\u251c\u2500\u2500 fmt_test.go\n\u251c\u2500\u2500 format.go\n\u251c\u2500\u2500 norace_test.go\n\u251c\u2500\u2500 print.go\n\u251c\u2500\u2500 race_test.go\n\u251c\u2500\u2500 scan.go\n\u251c\u2500\u2500 scan_test.go\n\u2514\u2500\u2500 stringer_test.go\n\n```", "```go\ntype Vector interface { \n    Add(other Vector) Vector \n    Sub(other Vector) Vector \n    Scale(factor float64) \n    ... \n} \n\nfunc New(elems ...float64) SimpleVector { \n    return SimpleVector(elems) \n} \n\ntype SimpleVector []float64 \n\nfunc (v SimpleVector) Add(other Vector) Vector { \n   v.assertLenMatch(other) \n   otherVec := other.(SimpleVector) \n   result := make([]float64, len(v)) \n   for i, val := range v { \n         result[i] = val + otherVec[i] \n   } \n   return SimpleVector(result) \n} \n\nfunc (v SimpleVector) Sub(other Vector) Vector { \n   v.assertLenMatch(other) \n   otherVec := other.(SimpleVector) \n   result := make([]float64, len(v)) \n   for i, val := range v { \n         result[i] = val - otherVec[i] \n   } \n   return SimpleVector(result) \n} \n\nfunc (v SimpleVector) Scale(scale float64) { \n   for i := range v { \n         v[i] = v[i] * scale \n   } \n} \n... \n\n```", "```go\nimport \"testing\" \n\nfunc TestVectorAdd(t *testing.T) { \n   v1 := New(8.218, -9.341) \n   v2 := New(-1.129, 2.111) \n   v3 := v1.Add(v2) \n   expect := New( \n       v1[0]+v2[0], \n       v1[1]+v2[1], \n   ) \n\n   if !v3.Eq(expect) { \n       t.Logf(\"Addition failed, expecting %s, got %s\",  \n          expect, v3) \n       t.Fail() \n   } \n   t.Log(v1, \"+\", v2, v3) \n} \n\nfunc TestVectorSub(t *testing.T) { \n   v1 := New(7.119, 8.215) \n   v2 := New(-8.223, 0.878) \n   v3 := v1.Sub(v2) \n   expect := New( \n       v1[0]-v2[0], \n       v1[1]-v2[1], \n   ) \n   if !v3.Eq(expect) { \n       t.Log(\"Subtraction failed, expecting %s, got %s\",  \n           expect, v3) \n           t.Fail() \n   } \n   t.Log(v1, \"-\", v2, \"=\", v3) \n} \n\nfunc TestVectorScale(t *testing.T) { \n   v := New(1.671, -1.012, -0.318) \n   v.Scale(7.41) \n   expect := New( \n       7.41*1.671, \n       7.41*-1.012, \n       7.41*-0.318, \n   ) \n   if !v.Eq(expect) { \n       t.Logf(\"Scalar mul failed, expecting %s, got %s\",  \n           expect, v) \n       t.Fail() \n   } \n   t.Log(\"1.671,-1.012, -0.318 Scale\", 7.41, \"=\", v) \n} \n\n```", "```go\nv1 := New(8.218, -9.341) \nv2 := New(-1.129, 2.111) \nv3 := v1.Add(v2) \nexpect := New( \n    v1[0]+v2[0], \n    v1[1]+v2[1], \n) \n\n```", "```go\nif !v3.Eq(expect) { \n    t.Log(\"Addition failed, expecting %s, got %s\", expect, v3) \n    t.Fail() \n} \n\n```", "```go\n$> cd vector\n$> go test .\nok    github.com/vladimirvivien/learning-go/ch12/vector     0.001s\n\n```", "```go\n$> cd $GOPATH/src/github.com/vladimirvivien/learning-go/ch12/\n$> go test ./vector\nok    github.com/vladimirvivien/learning-go/ch12/vector     0.005s\n\n```", "```go\n$> go test -run=VectorAdd -v\n=== RUN   TestVectorAdd\n--- PASS: TestVectorAdd (0.00s)\nPASS\nok    github.com/vladimirvivien/learning-go/ch12/vector     0.025s\n\n```", "```go\n> go test -run=\"VectorA.*$|TestVectorMag\" -v\n=== RUN   TestVectorAdd\n--- PASS: TestVectorAdd (0.00s)\n=== RUN   TestVectorMag\n--- PASS: TestVectorMag (0.00s)\n=== RUN   TestVectorAngle\n--- PASS: TestVectorAngle (0.00s)\nPASS\nok    github.com/vladimirvivien/learning-go/ch12/vector     0.043s\n\n```", "```go\nfunc TestVectorUnit(t *testing.T) { \n   v := New(5.581, -2.136) \n   mag := v.Mag() \n   expect := New((1/mag)*v[0], (1/mag)*v[1]) \n   if !v.Unit().Eq(expect) { \n       t.Logf(\"Vector Unit failed, expecting %s, got %s\",  \n           expect, v.Unit()) \n       t.Fail() \n   } \n   t.Logf(\"Vector = %v; Unit vector = %v\\n\", v, expect) \n}  \n\n```", "```go\n> go test -run=VectorUnit\nPASS\nok    github.com/vladimirvivien/learning-go/ch12/vector     0.005s\n\n```", "```go\n$> go test -run=VectorUnit -v\n=== RUN   TestVectorUnit\n--- PASS: TestVectorUnit (0.00s)\nvec_test.go:100: Vector = [5.581,-2.136]; Unit vector =\n[0.9339352140866403,-0.35744232526233]\nPASS\nok    github.com/vladimirvivien/learning-go/ch12/vector     0.001s\n\n```", "```go\nfunc TestVectorDotProd(t *testing.T) { \n    v1 := New(7.887, 4.138).(SimpleVector) \n    v2 := New(-8.802, 6.776).(SimpleVector) \n    actual := v1.DotProd(v2) \n    expect := v1[0]*v2[0] - v1[1]*v2[1] \n    if actual != expect { \n        t.Logf(\"DotPoduct failed, expecting %d, got %d\",  \n          expect, actual) \n    } \n} \n\n```", "```go\n$> go test -run=VectorDot\nPASS\nok    github.com/vladimirvivien/learning-go/ch12/vector     0.001s\n\n```", "```go\nfunc TestVectorDotProd(t *testing.T) { \n... \n    if actual != expect { \n        t.Logf(\"DotPoduct failed, expecting %d, got %d\",  \n          expect, actual) \n        t.Fail() \n    } \n} \n\n```", "```go\n$> go test -run=VectorDot\n--- FAIL: TestVectorDotProd (0.00s)\nvec_test.go:109: DotPoduct failed, expecting -97.460462, got -41.382286\nFAIL\nexit status 1\nFAIL  github.com/vladimirvivien/learning-go/ch12/vector     0.002s\n\n```", "```go\nfunc TestVectorMag(t *testing.T) { \n    v := New(-0.221, 7.437) \n    expected := math.Sqrt(v[0]*v[0] + v[1]*v[1]) \n    if v.Mag() != expected { \n   t.Errorf(\"Magnitude failed, execpted %d, got %d\",  \n        expected, v.Mag()) \n    } \n} \n\n```", "```go\nfunc TestVectorAngle(t *testing.T) { \n   if os.Getenv(\"RUN_ANGLE\") == \"\" { \n         t.Skipf(\"Env variable RUN_ANGLE not set, skipping:\") \n   } \n   v1 := New(3.183, -7.627) \n   v2 := New(-2.668, 5.319) \n   actual := v1.Angle(v2) \n   expect := math.Acos(v1.DotProd(v2) / (v1.Mag() * v2.Mag())) \n   if actual != expect { \n         t.Logf(\"Vector angle failed, expecting %d, got %d\", \n            expect, actual) \n         t.Fail() \n   } \n   t.Log(\"Angle between\", v1, \"and\", v2, \"=\", actual) \n} \n\n```", "```go\n$> go test -run=Angle -v\n=== RUN   TestVectorAngle\n--- SKIP: TestVectorAngle (0.00s)\n vec_test.go:128: Env variable RUN_ANGLE not set, skipping:\nPASS\nok    github.com/vladimirvivien/learning-go/ch12/vector     0.006s \n\n```", "```go\n> RUN_ANGLE=1 go test -run=Angle -v\n=== RUN   TestVectorAngle\n--- PASS: TestVectorAngle (0.00s)\n vec_test.go:138: Angle between [3.183,-7.627] and [-2.668,5.319] = 3.0720263098372476\nPASS\nok    github.com/vladimirvivien/learning-go/ch12/vector     0.005s\n\n```", "```go\nfunc TestVectorMag(t *testing.T) { \n   cases := []struct{ \n         vec SimpleVector \n         expected float64 \n\n   }{ \n       {New(1.2, 3.4), math.Sqrt(1.2*1.2 + 3.4*3.4)}, \n       {New(-0.21, 7.47), math.Sqrt(-0.21*-0.21 + 7.47*7.47)}, \n       {New(1.43, -5.40), math.Sqrt(1.43*1.43 + -5.40*-5.40)}, \n       {New(-2.07, -9.0), math.Sqrt(-2.07*-2.07 + -9.0*-9.0)}, \n   } \n   for _, c := range cases { \n       mag := c.vec.Mag() \n       if mag != c.expected { \n         t.Errorf(\"Magnitude failed, execpted %d, got %d\",  \n              c.expected, mag) \n       } \n   } \n} \n\n```", "```go\npackage main \n\nimport ( \n   \"encoding/json\" \n   \"fmt\" \n   \"net/http\" \n\n   \"github.com/vladimirvivien/learning-go/ch12/vector\" \n) \nfunc add(resp http.ResponseWriter, req *http.Request) { \n   var params []vector.SimpleVector \n   if err := json.NewDecoder(req.Body).Decode(&params);  \n       err != nil { \n         resp.WriteHeader(http.StatusBadRequest) \n         fmt.Fprintf(resp, \"Unable to parse request: %s\\n\", err) \n         return \n   } \n   if len(params) != 2 { \n         resp.WriteHeader(http.StatusBadRequest) \n         fmt.Fprintf(resp, \"Expected 2 or more vectors\") \n         return \n   } \n   result := params[0].Add(params[1]) \n   if err := json.NewEncoder(resp).Encode(&result); err != nil { \n         resp.WriteHeader(http.StatusInternalServerError) \n         fmt.Fprintf(resp, err.Error()) \n         return \n   } \n} \n... \nfunc main() { \n   mux := http.NewServeMux() \n   mux.HandleFunc(\"/vec/add\", add) \n   mux.HandleFunc(\"/vec/sub\", sub) \n   mux.HandleFunc(\"/vec/dotprod\", dotProd) \n   mux.HandleFunc(\"/vec/mag\", mag) \n   mux.HandleFunc(\"/vec/unit\", unit) \n\n   if err := http.ListenAndServe(\":4040\", mux); err != nil { \n         fmt.Println(err) \n   } \n} \n\n```", "```go\nimport ( \n   \"net/http\" \n   \"net/http/httptest\" \n   \"strconv\" \n   \"strings\" \n   \"testing\" \n\n   \"github.com/vladimirvivien/learning-go/ch12/vector\" \n) \n\nfunc TestVectorAdd(t *testing.T) { \n   reqBody := \"[[1,2],[3,4]]\" \n   req, err := http.NewRequest( \n        \"POST\", \"http://0.0.0.0/\", strings.NewReader(reqBody)) \n   if err != nil { \n         t.Fatal(err) \n   } \n   actual := vector.New(1, 2).Add(vector.New(3, 4)) \n   w := httptest.NewRecorder() \n   add(w, req) \n   if actual.String() != strings.TrimSpace(w.Body.String()) { \n         t.Fatalf(\"Expecting actual %s, got %s\",  \n             actual.String(), w.Body.String(), \n         ) \n   } \n} \n\n```", "```go\ntype vecClient struct { \n    svcAddr string \n    client *http.Client \n} \nfunc (c *vecClient) add( \n   vec0, vec1 vector.SimpleVector) (vector.SimpleVector, error) { \n   uri := c.svcAddr + \"/vec/add\" \n\n   // encode params \n   var body bytes.Buffer \n    params := []vector.SimpleVector{vec0, vec1} \n   if err := json.NewEncoder(&body).Encode(&params); err != nil { \n         return []float64{}, err \n   } \n   req, err := http.NewRequest(\"POST\", uri, &body) \n   if err != nil { \n        return []float64{}, err \n   } \n\n   // send request \n   resp, err := c.client.Do(req) \n   if err != nil { \n       return []float64{}, err \n   } \n   defer resp.Body.Close() \n\n   // handle response \n   var result vector.SimpleVector \n   if err := json.NewDecoder(resp.Body). \n        Decode(&result); err != nil { \n        return []float64{}, err \n    } \n    return result, nil \n} \n\n```", "```go\nimport( \n    \"net/http\" \n    \"net/http/httptest\" \n    ... \n) \nfunc TestClientAdd(t *testing.T) { \n   server := httptest.NewServer(http.HandlerFunc( \n         func(resp http.ResponseWriter, req *http.Request) { \n             // test incoming request path \n             if req.URL.Path != \"/vec/add\" { \n                 t.Errorf(\"unexpected request path %s\",  \n                    req.URL.Path) \n                   return \n               } \n               // test incoming params \n               body, _ := ioutil.ReadAll(req.Body) \n               params := strings.TrimSpace(string(body)) \n               if params != \"[[1,2],[3,4]]\" { \n                     t.Errorf(\"unexpected params '%v'\", params) \n                     return \n               } \n               // send result \n               result := vector.New(1, 2).Add(vector.New(3, 4)) \n               err := json.NewEncoder(resp).Encode(&result) \n               if err != nil { \n                     t.Fatal(err) \n                     return \n               } \n         }, \n   )) \n   defer server.Close() \n   client := newVecClient(server.URL) \n   expected := vector.New(1, 2).Add(vector.New(3, 4)) \n   result, err := client.add(vector.New(1, 2), vector.New(3, 4)) \n   if err != nil { \n         t.Fatal(err) \n   } \n   if !result.Eq(expected) { \n         t.Errorf(\"Expecting %s, got %s\", expected, result) \n   } \n} \n\n```", "```go\n$> go test -cover\nPASS\ncoverage: 87.8% of statements\nok    github.com/vladimirvivien/learning-go/ch12/vector     0.028s\n\n```", "```go\n$> go test -coverprofile=cover.out\n\n```", "```go\n$> go tool cover -func=cover.out\n...\nlearning-go/ch12/vector/vec.go:52:  Eq          100.0%\nlearning-go/ch12/vector/vec.go:57:  Eq2         83.3%\nlearning-go/ch12/vector/vec.go:74:  Add         100.0%\nlearning-go/ch12/vector/vec.go:85:  Sub         100.0%\nlearning-go/ch12/vector/vec.go:96:  Scale       100.0%\n...\n\n```", "```go\n $> go tool cover -html=cover.out\n\n```", "```go\nimport ( \n    \"math/rand\" \n    \"testing\" \n    \"time\" \n) \n... \nfunc BenchmarkVectorAdd(b *testing.B) { \n   r := rand.New(rand.NewSource(time.Now().UnixNano())) \n   for i := 0; i < b.N; i++ { \n         v1 := New(r.Float64(), r.Float64()) \n         v2 := New(r.Float64(), r.Float64()) \n         v1.Add(v2) \n   } \n} \n\n```", "```go\n$> go test -bench=.\nPASS\nBenchmarkVectorAdd-2           2000000           761 ns/op\nBenchmarkVectorSub-2           2000000           788 ns/op\nBenchmarkVectorScale-2         5000000           269 ns/op\nBenchmarkVectorMag-2           5000000           243 ns/op\nBenchmarkVectorUnit-2          3000000           507 ns/op\nBenchmarkVectorDotProd-2       3000000           549 ns/op\nBenchmarkVectorAngle-2         2000000           659 ns/op\nok    github.com/vladimirvivien/learning-go/ch12/vector     14.123s\n\n```", "```go\n$> go test -bench=\"VectorA\"\nPASS\nBenchmarkVectorAdd-2     2000000           764 ns/op\nBenchmarkVectorAngle-2   2000000           665 ns/op\nok    github.com/vladimirvivien/learning-go/ch12/vector     4.396s\n\n```", "```go\n> go test -bench=. -run=NONE -v\nPASS\nBenchmarkVectorAdd-2           2000000           791 ns/op\nBenchmarkVectorSub-2           2000000           777 ns/op\n...\nBenchmarkVectorAngle-2         2000000           653 ns/op\nok    github.com/vladimirvivien/learning-go/ch12/vector     14.069s\n\n```", "```go\n$> go test -run=NONE -bench=\"Add|Sub|Scale\"\nPASS\nBenchmarkVectorAdd-2     2000000           800 ns/op\nBenchmarkVectorSub-2     2000000           798 ns/op\nBenchmarkVectorScale-2   5000000           266 ns/op\nok    github.com/vladimirvivien/learning-go/ch12/vector     6.473s\n\n```", "```go\n> go test -run=Bench -bench=\"Add|Sub|Scale\" -benchtime 5s\nPASS\nBenchmarkVectorAdd-2    10000000           784 ns/op\nBenchmarkVectorSub-2    10000000           810 ns/op\nBenchmarkVectorScale-2  30000000           265 ns/op\nok    github.com/vladimirvivien/learning-go/ch12/vector     25.877s\n\n```", "```go\nconst zero = 1.0e-7  \n... \nfunc (v SimpleVector) Eq(other Vector) bool { \n   ang := v.Angle(other) \n   if math.IsNaN(ang) { \n         return v.Mag() == other.Mag() \n   } \n   return v.Mag() == other.Mag() && ang <= zero \n} \n\n```", "```go\n$> go test -run=Bench -bench=Equal1\nPASS\nBenchmarkVectorEqual1-2  3000000           454 ns/op\nok    github.com/vladimirvivien/learning-go/ch12/vector     1.849s\n\n```", "```go\n$> go test -run=bench -bench=Equal1 -benchmem\nPASS\nBenchmarkVectorEqual1-2  3000000 474 ns/op  48 B/op  2 allocs/op\n\n```", "```go\nfunc (v SimpleVector) Eq2(other Vector) bool { \n   v.assertLenMatch(other) \n   otherVec := other.(SimpleVector) \n   for i, val := range v { \n         if val != otherVec[i] { \n               return false \n         } \n   } \n   return true \n} \n\n```", "```go\n$> go test -run=bench -bench=Equal -benchmem\nPASS\nBenchmarkVectorEqual1-2   3000000   447 ns/op   48 B/op   2 allocs/op\nBenchmarkVectorEqual2-2   5000000   265 ns/op   32 B/op   1 allocs/op\n\n```"]