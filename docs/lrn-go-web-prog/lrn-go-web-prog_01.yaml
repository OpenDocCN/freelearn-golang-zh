- en: Chapter 1. Introducing and Setting Up Go
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。介绍和设置Go
- en: When starting with Go, one of the most common things you'll hear being said
    is that it's a systems language.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用Go时，您最常听到的一句话是它是一种系统语言。
- en: Indeed, one of the earlier descriptions of Go, by the Go team itself, was that
    the language was built to be a modern systems language. It was constructed to
    combine the speed and power of languages, such as C with the syntactical elegance
    and thrift of modern interpreted languages, such as Python. You can see that goal
    realized when you look at just a few snippets of Go code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，Go团队早期对Go的描述之一是，该语言是为了成为一种现代系统语言而构建的。它旨在将诸如C之类的语言的速度和功能与诸如Python之类的现代解释语言的语法优雅和节俭相结合。当您查看Go代码的一些片段时，您可以看到这个目标得以实现。
- en: 'From the Go FAQ on why Go was created:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 从Go FAQ中关于为什么创建Go的原因：
- en: '*"Go was born out of frustration with existing languages and environments for
    systems programming."*'
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"Go是出于对现有语言和系统编程环境的不满而诞生的。"*'
- en: Perhaps the largest part of present-day Systems programming is designing backend
    servers. Obviously, the Web comprises a huge, but not exclusive, percentage of
    that world.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 也许当今系统编程的最大部分是设计后端服务器。显然，网络构成了其中的一个巨大但并非是唯一的部分。
- en: Go hasn't been considered a web language until recently. Unsurprisingly, it
    took a few years of developers dabbling, experimenting, and finally embracing
    the language to start taking it to new avenues.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 直到最近，Go还没有被认为是一种Web语言。毫不奇怪，开发人员花了几年时间涉足、试验，最终拥抱这种语言，开始将其引向新的领域。
- en: 'While Go is web-ready out of the box, it lacks a lot of the critical frameworks
    and tools people so often take for granted with web development now. As the community
    around Go grew, the scaffolding began to manifest in a lot of new and exciting
    ways. Combined with existing ancillary tools, Go is now a wholly viable option
    for end-to-end web development. But back to that primary question: Why Go? To
    be fair, it''s not right for every web project, but any application that can benefit
    from high-performance, secure web-serving out of the box with the added benefits
    of a beautiful concurrency model would make for a good candidate.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Go可以直接用于Web，但它缺少许多人们在Web开发中经常视为理所当然的关键框架和工具。随着围绕Go的社区的增长，支架开始以许多新颖和令人兴奋的方式显现。结合现有的辅助工具，Go现在是端到端Web开发的完全可行选择。但回到最初的问题：为什么选择Go？公平地说，它并不适合每个Web项目，但任何可以从内置高性能、安全的Web服务以及美丽的并发模型的附加优势中受益的应用程序都是一个很好的选择。
- en: In this book, we're going to explore those aspects and others to outline what
    can make Go the right language for your web architecture and applications.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将探讨这些方面和其他方面，以概述Go是您的Web架构和应用程序的正确语言的原因。
- en: We're not going to deal with a lot of the low-level aspects of the Go language.
    For example, we assume you're familiar with variable and constant declaration.
    We assume you understand control structures.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会涉及Go语言的许多低级方面。例如，我们假设您熟悉变量和常量声明。我们假设您了解控制结构。
- en: 'In this chapter we will cover the following topics:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Installing Go
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Go
- en: Structuring a project
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目结构
- en: Importing packages
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入软件包
- en: Introducing the net package
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍net包
- en: Hello, Web
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你好，Web
- en: Installing Go
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Go
- en: The most critical first step is, of course, making sure that Go is available
    and ready to start our first web server.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，最关键的第一步是确保Go可用并准备好启动我们的第一个Web服务器。
- en: Note
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: While one of Go's biggest selling points is its cross-platform support (both
    building and using locally while targeting other operating systems), your life
    will be much easier on a Nix compatible platform.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Go最大的卖点之一是其跨平台支持（在本地构建和使用时针对其他操作系统），但在Nix兼容平台上，您的生活会变得更加轻松。
- en: If you're on Windows, don't fear. Natively, you may run into incompatible packages,
    firewall issues when running using `go run` command and some other quirks, but
    95% of the Go ecosystem will be available to you. You can also, very easily, run
    a virtual machine, and in fact that is a great way to simulate a potential production
    environment.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用Windows，不要害怕。在本地，您可能会遇到不兼容的软件包、使用`go run`命令时的防火墙问题以及其他一些怪癖，但Go生态系统的95%将对您可用。您也可以非常容易地运行虚拟机，事实上，这是模拟潜在生产环境的一个很好的方法。
- en: In-depth installation instructions are available at [https://golang.org/doc/install](https://golang.org/doc/install),
    but we'll talk about a few quirky points here before moving on.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://golang.org/doc/install](https://golang.org/doc/install)上提供了深入的安装说明，但在继续之前我们将在这里讨论一些古怪的地方。
- en: For OS X and Windows, Go is provided as a part of a binary installation package.
    For any Linux platform with a package manager, things can be pretty easy.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于OS X和Windows，Go作为二进制安装包的一部分提供。对于任何具有软件包管理器的Linux平台，事情可能会变得非常简单。
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**To install via common Linux package managers:**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**通过常见的Linux软件包管理器安装：**'
- en: 'Ubuntu: `sudo apt-get golang`'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu：`sudo apt-get golang`
- en: 'CentOS: `sudo yum install golang`'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: CentOS：`sudo yum install golang`
- en: 'On both OS X and Linux, you''ll need to add a couple of lines to your path—the
    `GOPATH` and `PATH`. First, you''ll want to find the location of your Go binary''s
    installation. This varies from distribution to distribution. Once you''ve found
    that, you can configure the `PATH` and `GOPATH`, as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在OS X和Linux上，您需要将几行添加到您的路径中——`GOPATH`和`PATH`。首先，您需要找到Go二进制安装的位置。这因发行版而异。找到后，您可以配置`PATH`和`GOPATH`，如下所示：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: While the path to be used is not defined rigidly, some convention has coalesced
    around starting at a subdirectory directly under your user's home directory, such
    as `$HOME/go` or `~Home/go`. As long as this location is set perpetually and doesn't
    change, you won't run into issues with conflicts or missing packages.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然要使用的路径没有严格定义，但一些惯例已经形成，即从用户的主目录下的子目录开始，例如`$HOME/go`或`~Home/go`。只要这个位置被永久设置并且不改变，您就不会遇到冲突或缺少软件包的问题。
- en: You can test the impact of these changes by running the `go env` command. If
    you see any issues with this, it means that your directories are not correct.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行`go env`命令来测试这些更改的影响。如果您在此方面遇到任何问题，这意味着您的目录不正确。
- en: Note that this may not prevent Go from running—depending on whether the GOBIN
    directory is properly set—but will prevent you from installing packages globally
    across your system.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这可能不会阻止Go运行——这取决于GOBIN目录是否正确设置——但会阻止您在整个系统上全局安装软件包。
- en: To test the installation, you can grab any Go package by a `go get` command
    and create a Go file somewhere. As a quick example, first get a package at random,
    we'll use a package from the Gorilla framework, as we'll use this quite a bit
    throughout this book.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试安装，您可以通过`go get`命令获取任何Go软件包，并在某个地方创建一个Go文件。作为一个快速的例子，首先随机获取一个软件包，我们将使用Gorilla框架的一个软件包，因为我们将在本书中经常使用它。
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If this runs without any issue, Go is finding your `GOPATH` correctly. To make
    sure that Go is able to access your downloaded packages, draw up a very quick
    package that will attempt to utilize Gorilla's mux package and run it to verify
    whether the packages are found.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这一切顺利进行，Go将正确找到您的`GOPATH`。为了确保Go能够访问您下载的软件包，请编写一个非常快速的软件包，该软件包将尝试使用Gorilla的mux软件包并运行它以验证软件包是否被找到。
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Run `go run test.go` in the command line. It won''t do much, but it will deliver
    the good news as shown in the following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行中运行`go run test.go`。它不会做太多事情，但会像下面的截图所示一样传递好消息：
- en: '![Installing Go](img/B04294_01_01.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![安装Go](img/B04294_01_01.jpg)'
- en: Structuring a project
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目结构
- en: When you're first getting started and mostly playing around, there's no real
    problem with setting your application lazily.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当您刚开始并且大多数时间都在玩耍时，将应用程序设置为懒惰运行是没有问题的。
- en: For example, to get started as quickly as possible, you can create a simple
    `hello.go` file anywhere you like and compile without issue.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，为了尽快开始，您可以在任何喜欢的地方创建一个简单的`hello.go`文件，并且无需编译问题。
- en: But when you get into environments that require multiple or distinct packages
    (more on that shortly) or have more explicit cross-platform requirements, it makes
    sense to design your project in a way that will facilitate the use of the go build
    tool.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，当您进入需要多个或不同软件包（稍后会详细介绍）或具有更明确的跨平台要求的环境时，设计项目的方式以便利用go构建工具是有意义的。
- en: The value of setting up your code in this manner lies in the way that the go
    build tool works. If you have local (to your project) packages, the build tool
    will look in the `src` directory first and then your `GOPATH`. When you're building
    for other platforms, go build will utilize the local bin folder to organize the
    binaries.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式设置代码的价值在于go构建工具的工作方式。如果您有本地（针对您的项目）软件包，构建工具将首先查找`src`目录，然后查找您的`GOPATH`。当您为其他平台构建时，go
    build将利用本地bin文件夹来组织二进制文件。
- en: When building packages that are intended for mass use, you may also find that
    either starting your application under your `GOPATH` directory and then symbolically
    linking it to another directory, or doing the opposite, will allow you to develop
    without the need to subsequently go get your own code.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 构建用于大规模使用的软件包时，您可能会发现在`GOPATH`目录下启动应用程序，然后将其符号链接到另一个目录，或者反过来，都可以让您在不需要随后获取自己的代码的情况下进行开发。
- en: Code conventions
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码约定
- en: As with any language, being a part of the Go community means perpetual consideration
    of the way others create their code. Particularly if you're going to work in open
    source repositories, you'll want to generate your code the way that others do,
    in order to reduce the amount of friction when people get or include your code.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何语言一样，成为Go社区的一部分意味着不断考虑他人创建代码的方式。特别是如果您要在开源存储库中工作，您将希望以其他人的方式生成代码，以减少其他人获取或包含您的代码时的摩擦量。
- en: One incredibly helpful piece of tooling that the Go team has included is go
    `fmt`. `fmt` here, of course, means format and that's exactly what this tool does,
    it automatically formats your code according to the designed conventions.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Go团队包含的一个非常有用的工具是`go fmt`。这里的`fmt`当然是格式，这正是这个工具所做的，它会根据设计的约定自动格式化您的代码。
- en: By enforcing style conventions, the Go team has helped to mitigate one of the
    most common and pervasive debates that exist among a lot of other languages.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过强制执行样式约定，Go团队已经帮助减轻了许多其他语言中存在的最常见和普遍的争论之一。
- en: While the language communities tend to drive coding conventions, there are always
    little idiosyncrasies in the way individuals write programs. Let's use one of
    the most common examples around—where to put the opening bracket.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然语言社区倾向于推动编码约定，但个人编写程序的方式总是有一些小怪癖。让我们使用一个最常见的例子——在哪里放开括号。
- en: 'Some programmers like it on the same line as the statement:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有些程序员喜欢将其放在与语句相同的一行上：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'While others prefer it on the subsequent line:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 而其他人则更喜欢将其放在随后的一行上：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: These types of minor differences spark major, near-religious debates. The Gofmt
    tool helps alleviate this by allowing you to yield to Go's directive.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这些微小的差异引发了重大的、近乎宗教性的争论。Gofmt工具通过允许您遵循Go的指令来帮助缓解这一问题。
- en: Now, Go bypasses this obvious source of contention at the compiler, by formatting
    your code similar to the latter example discussed earlier. The compiler will complain
    and all you'll get is a fatal error. But the other style choices have some flexibility,
    which are enforced when you use the tool to format.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Go通过将您的代码格式化为前面讨论过的后一种样式来绕过这个明显的争议源。编译器会抱怨，您将得到一个致命错误。但其他样式选择具有一定的灵活性，这在您使用该工具进行格式化时会得到执行。
- en: 'Here, for example, is a piece of code in Go before `go fmt`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这是一个在`go fmt`之前的Go代码片段：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Arbitrary whitespace can be the bane of a team's existence when it comes to
    sharing and reading code, particularly when every team member is not on the same
    IDE.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 任意的空白可能是团队在共享和阅读代码时的噩梦，特别是当每个团队成员使用的IDE不同的时候。
- en: 'By running `go fmt`, we clean this up, thereby translating our whitespace according
    to Go''s conventions:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行`go fmt`，我们可以清理这些内容，从而根据Go的约定转换我们的空白：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Long story short: always run `go fmt` before shipping or pushing your code.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 长话短说：在发布或推送代码之前，始终运行`go fmt`。
- en: Importing packages
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入包
- en: Beyond the absolute and the most trivial application—one that cannot even produce
    a **Hello World** output—you must have some imported package in a Go application.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 除了绝对和最琐碎的应用程序之外——即连**Hello World**输出都不能产生的应用程序——您必须在Go应用程序中导入一些包。
- en: To say **Hello World**, for example, we'd need some sort of a way to generate
    an output. Unlike in many other languages, even the core language library is accessible
    by a namespaced package. In Go, namespaces are handled by a repository endpoint
    URL, which is [github.com/nkozyra/gotest](http://github.com/nkozyra/gotest), which
    can be opened directly on GitHub (or any other public location) for the review.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，要说**Hello World**，我们需要一种生成输出的方式。与许多其他语言不同，即使核心语言库也可以通过命名空间包访问。在Go中，命名空间由存储库终端点URL处理，即[github.com/nkozyra/gotest](http://github.com/nkozyra/gotest)，可以直接在GitHub（或任何其他公共位置）上进行审查。
- en: Handling private repositories
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理私有存储库
- en: The go get tool easily handles packages hosted at the repositories, such as
    GitHub, Bitbucket, and Google Code (as well as a few others). You can also host
    your own projects, ideally a git project, elsewhere, although it might introduce
    some dependencies and sources for errors, which you'd probably like to avoid.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: go get工具可以轻松处理托管在仓库中的包，例如GitHub、Bitbucket和Google Code（以及其他一些）。您还可以在其他地方托管自己的项目，理想情况下是一个git项目，尽管这可能会引入一些依赖和错误源，您可能希望避免。
- en: But what about the private repos? While go get is a wonderful tool, you'll find
    yourself looking at an error without some additional configuration, SSH agent
    forwarding, and so on.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 但私有存储库呢？虽然go get是一个很好的工具，但如果没有一些额外的配置、SSH代理转发等，您会发现自己面临错误。
- en: You can work around this in a couple of ways, but one very simple method is
    to clone the repository locally, using your version control software directly.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过几种方法解决这个问题，但一个非常简单的方法是直接在本地克隆存储库，使用您的版本控制软件。
- en: Dealing with versioning
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理版本控制
- en: 'You may have paused when you read about the way namespaces are defined and
    imported in a Go application. What happens if you''re using version 1 of the application
    but would like to bring in version 2? In most cases, this has to be explicitly
    defined in the path of the `import`. For example:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当您阅读关于Go应用程序中命名空间的定义和导入方式时，您可能会停顿。如果您正在使用应用程序的版本1，但想引入版本2会发生什么？在大多数情况下，这必须在`import`的路径中明确定义。例如：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'versus:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 与之相对：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As you might imagine, this can be a particularly sticky aspect of the way Go
    handles the remote packages.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所想象的那样，这可能是Go处理远程包的一个特别棘手的方面。
- en: Unlike a lot of other package managers, go get is decentralized—that is, nobody
    maintains a canonical reference library of packages and versions. This can sometimes
    be a sore spot for new developers.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多其他包管理器不同，go get是去中心化的——也就是说，没有人维护包和版本的官方参考库。这有时可能会让新开发人员感到头疼。
- en: For the most part, packages are always imported via the `go get` command, which
    reads the master branch of the remote repository. This means that maintaining
    multiple versions of a package at the same endpoint is, for the most part, impossible.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，包始终通过`go get`命令导入，该命令读取远程存储库的主分支。这意味着在同一终端点维护多个版本的包在大多数情况下是不可能的。
- en: It's the utilization of the URL endpoints as namespaces that allows the decentralization,
    but it's also what provides a lack of internal support for versioning.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 正是利用URL终端点作为命名空间，才实现了去中心化，但也导致了对版本控制的内部支持的缺乏。
- en: Your best bet as a developer is to treat every package as the most up-to-date
    version when you perform a `go get` command. If you need a newer version, you
    can always follow whatever pattern the author has decided on, such as the preceding
    example.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发人员，您最好将每个包视为执行`go get`命令时最新的版本。如果需要更新版本，您可以始终遵循作者决定的任何模式，例如前面的例子。
- en: As a creator of your own packages, make sure that you also adhere to this philosophy.
    Keeping your master branch HEAD as the most up-to-date will make sure your that
    the code fits with the conventions of other Go authors.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 作为您自己包的创建者，请确保您也遵守这一理念。保持您的主分支HEAD最新将确保您的代码符合其他Go作者的约定。
- en: Introducing the net package
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍net包
- en: At the heart of all network communications in Go is the aptly-named net package,
    which contains subpackages not only for the very relevant HTTP operations, but
    also for other TCP/UDP servers, DNS, and IP tools.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go中，所有网络通信的核心是名为net的包，其中包含了非常相关的HTTP操作，以及其他TCP/UDP服务器、DNS和IP工具的子包。
- en: In short, everything you need to create a robust server environment.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，您需要创建一个强大的服务器环境。
- en: Of course, what we care about for the purpose of this book lies primarily in
    the `net/http` package, but we'll look at a few other functions that utilize the
    rest of the package, such as a TCP connection, as well as WebSockets.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们关心的主要是`net/http`包，但我们将看一下其他一些使用该包的函数，比如TCP连接以及WebSockets。
- en: Let's quickly take a look at just performing that Hello World (or Web, in this
    case) example we have been talking about.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下执行我们一直在谈论的Hello World（或Web，在这种情况下）示例。
- en: Hello, Web
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你好，Web
- en: 'The following application serves as a static file at the location `/static`,
    and a dynamic `response` at the location `/dynamic`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下应用程序作为位置`/static`的静态文件服务，并在位置`/dynamic`提供动态`response`：
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Just as `fmt.Println` will produce desired content at the console level, `Fprintln`
    allows you to direct output to any writer. We''ll talk a bit more about the writers
    in [Chapter 2](ch02.html "Chapter 2. Serving and Routing"), *Serving and Routing*,
    but they represent a fundamental, flexible interface that is utilized in many
    Go applications, not just for the Web:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 就像`fmt.Println`会在控制台级别产生所需的内容一样，`Fprintln`允许你将输出定向到任何写入器。我们将在[第2章](ch02.html
    "第2章。服务和路由")中更多地讨论写入器，*服务和路由*，但它们代表了一个在许多Go应用程序中使用的基本灵活接口，不仅仅是用于Web：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Our `serveStatic` method just serves one file, but it''s trivial to allow it
    to serve any file directly and use Go as an old-school web server that serves
    only static content:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`serveStatic`方法只服务一个文件，但可以轻松地允许它直接服务任何文件，并使用Go作为一个老式的Web服务器，只提供静态内容：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Feel free to choose the available port of your choice—higher ports will make
    it easier to bypass the built-in security functionality, particularly in Nix systems.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 请随意选择可用的端口——较高的端口将更容易绕过内置的安全功能，特别是在Nix系统中。
- en: 'If we take the preceding example and visit the respective URLs—in this case
    the root at `/` and a static page at `/static`, we should see the intended output
    as shown:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们采用上述示例并访问相应的URL——在这种情况下是根目录`/`和静态页面`/static`，我们应该看到预期的输出如下所示：
- en: 'At the root, `/` , the output is as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在根目录`/`，输出如下：
- en: '![Hello, Web](img/B04294_01_02.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![Hello, Web](img/B04294_01_02.jpg)'
- en: 'At `/static`, the output is as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在`/static`，输出如下：
- en: '![Hello, Web](img/B04294_01_03.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![Hello, Web](img/B04294_01_03.jpg)'
- en: As you can see, producing a very simple output for the Web is, well, very simple
    in Go. The built-in package allows us to create a basic, yet inordinately fast
    site in Go with just a few lines of code using native packages.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，用Go为Web制作一个非常简单的输出是非常简单的。内置的包允许我们只用几行代码就能在Go中创建一个基本但非常快速的网站。
- en: This may not be very exciting, but before we can run, we must walk. Producing
    the preceding output introduces a few key concepts.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能并不是很令人兴奋，但在我们能够奔跑之前，我们必须先学会走路。生成上述输出引入了一些关键概念。
- en: First, we've seen how `net/http` directs requests using a URI or URL endpoint
    to helper functions, which must implement the `http.ResponseWriter` and `http.Request`
    methods. If they do not implement it, we get a very clear error on that end.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们看到了`net/http`如何使用URI或URL端点将请求定向到必须实现`http.ResponseWriter`和`http.Request`方法的辅助函数。如果它们没有实现，我们会在那一端得到一个非常清晰的错误。
- en: 'The following is an example that attempts to implement it in this manner:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个尝试以这种方式实现的示例：
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following screenshot shows the resulting error you''ll get from Go:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了Go返回的错误：
- en: '![Hello, Web](img/B04294_01_04.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![Hello, Web](img/B04294_01_04.jpg)'
- en: You can see that `serveError` does not include the required parameters and thus
    results in a compilation error.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到`serveError`没有包括所需的参数，因此导致编译错误。
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter serves as an introduction to the most basic concepts of Go and
    producing for the Web in Go, but these points are critical foundational elements
    for being productive in the language and in the community.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 本章作为Go的最基本概念和在Go中为Web制作的介绍，但这些要点是语言和社区中的关键基础元素，对于提高生产力至关重要。
- en: We've looked at coding conventions and package design and organization, and
    we've produced our first program—the all-too-familiar Hello, World application—and
    accessed it via our localhost.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看过编码规范和包的设计和组织，我们也制作了我们的第一个程序——司空见惯的Hello, World应用程序——并通过本地主机访问了它。
- en: Obviously, we're a long way from a real, mature application for the Web, but
    the building blocks are essential to getting there.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们离真正成熟的网络应用还有很长的路要走，但构建基础是到达目标的关键。
- en: In [Chapter 2](ch02.html "Chapter 2. Serving and Routing"), *Serving and Routing*,
    we'll look at how to direct different requests to different application logic
    using the built-in routing functionality in Go's `net/http` package, as well as
    a couple of third party router packages.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章。服务和路由")中，*服务和路由*，我们将看看如何使用Go的内置路由功能以及一些第三方路由器包将不同的请求定向到不同的应用逻辑。
