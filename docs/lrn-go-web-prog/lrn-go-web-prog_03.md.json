["```go\nCREATE TABLE `pages` (\n  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `page_guid` varchar(256) NOT NULL DEFAULT '',\n  `page_title` varchar(256) DEFAULT NULL,\n  `page_content` mediumtext,\n  `page_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `page_guid` (`page_guid`)\n) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;\n```", "```go\nINSERT INTO `pages` (`id`, `page_guid`, `page_title`, `page_content`, `page_date`) VALUES (NULL, 'hello-world', 'Hello, World', 'I\\'m so glad you found this page!  It\\'s been sitting patiently on the Internet for some time, just waiting for a visitor.', CURRENT_TIMESTAMP);\n```", "```go\npackage main\n\nimport (\n  \"database/sql\"\n  \"fmt\"\n  _ \"github.com/go-sql-driver/mysql\"\n  \"log\"\n)\n```", "```go\nconst (\n  DBHost  = \"127.0.0.1\"\n  DBPort  = \":3306\"\n  DBUser  = \"root\"\n  DBPass  = \"password!\"\n  DBDbase = \"cms\"\n)\n```", "```go\nvar database *sql.DB\n```", "```go\ntype Page struct {\n  Title   string\n  Content string\n  Date    string\n}\n```", "```go\nfunc main() {\n  dbConn := fmt.Sprintf(\"%s:%s@tcp(%s)/%s\", DBUser, DBPass, DBHost, DBDbase)\n  db, err := sql.Open(\"mysql\", dbConn)\n  if err != nil {\n    log.Println(\"Couldn't connect!\")\n    log.Println(err.Error)\n  }\n  database = db\n}\n```", "```go\npackage main\n\nimport (\n  \"database/sql\"\n  \"fmt\"\n  _ \"github.com/go-sql-driver/mysql\"\n  \"github.com/gorilla/mux\"\n  \"log\"\n  \"net/http\"\n)\n```", "```go\nconst (\n  DBHost  = \"127.0.0.1\"\n  DBPort  = \":3306\"\n  DBUser  = \"root\"\n  DBPass  = \"password!\"\n  DBDbase = \"cms\"\n  PORT    = \":8080\"\n)\n```", "```go\nvar database *sql.DB\n\ntype Page struct {\n  Title   string\n  Content string\n  Date    string\n}\n\nfunc ServePage(w http.ResponseWriter, r *http.Request) {\n  vars := mux.Vars(r)\n  pageID := vars[\"id\"]\n  thisPage := Page{}\n  fmt.Println(pageID)\n  err := database.QueryRow(\"SELECT page_title,page_content,page_date FROM pages WHERE id=?\", pageID).Scan(&thisPage.Title, &thisPage.Content, &thisPage.Date)\n  if err != nil {\n\n    log.Println(\"Couldn't get page: +pageID\")\n    log.Println(err.Error)\n  }\n  html := `<html><head><title>` + thisPage.Title + `</title></head><body><h1>` + thisPage.Title + `</h1><div>` + thisPage.Content + `</div></body></html>`\n  fmt.Fprintln(w, html)\n}\n```", "```go\nfunc main() {\n  dbConn := fmt.Sprintf(\"%s:%s@/%s\", DBUser, DBPass, DBDbase)\n  fmt.Println(dbConn)\n  db, err := sql.Open(\"mysql\", dbConn)\n  if err != nil {\n    log.Println(\"Couldn't connect to\"+DBDbase)\n    log.Println(err.Error)\n  }\n  database = db\n\n  routes := mux.NewRouter()\n  routes.HandleFunc(\"/page/{id:[0-9]+}\", ServePage)\n  http.Handle(\"/\", routes)\n  http.ListenAndServe(PORT, nil)\n\n}\n```", "```go\nroutes.HandleFunc(\"/page/{id:[0-9a-zA\\\\-]+}\", ServePage)\n```", "```go\nroutes.HandleFunc(\"/page/{guid:[0-9a-zA\\\\-]+}\", ServePage)\n```", "```go\nfunc ServePage(w http.ResponseWriter, r *http.Request) {\n  vars := mux.Vars(r)\n  pageGUID := vars[\"guid\"]\n  thisPage := Page{}\n  fmt.Println(pageGUID)\n  err := database.QueryRow(\"SELECT page_title,page_content,page_date FROM pages WHERE page_guid=?\", pageGUID).Scan(&thisPage.Title, &thisPage.Content, &thisPage.Date)\n```", "```go\n  err := database.QueryRow(\"SELECT page_title,page_content,page_date FROM pages WHERE page_guid=?\", pageGUID).Scan(&thisPage.Title, &thisPage.Content, &thisPage.Date)\n  if err != nil {\n    http.Error(w, http.StatusText(404), http.StatusNotFound)\n    log.Println(\"Couldn't get page!\")\n  }\n```"]