["```go\ntpl, err := template.New(\"mine\").Parse(`<h1>{{.Title}}</h1>`)\n```", "```go\n<!DOCTYPE html>\n<html>\n<head>\n<title>{{.Title}}</title>\n</head>\n<body>\n  <h1>{{.Title}}</h1>\n\n  <div>{{.Date}}</div>\n\n  {{.Content}}\n</body>\n</html>\n```", "```go\n{{.Title}}\n{{range .Blogs}}\n  <li><a href=\"{{.Link}}\">{{.Title}}</a></li>\n{{end}}\n```", "```go\n  html := `<html><head><title>` + thisPage.Title + `</title></head><body><h1>` + thisPage.Title + `</h1><div>` + thisPage.Content + `</div></body></html>\n  fmt.Fprintln(w, html)\n```", "```go\n<html>\n<head>\n<title>{{.Title}}</title>\n</head>\n<body>\n  <h1>{{.Title}}</h1>\n  <p>\n    {{.Content}}\n  </p>\n  <div>{{.Date}}</div>\n</body>\n</html>\n```", "```go\nfunc ServePage(w http.ResponseWriter, r *http.Request) {\n  vars := mux.Vars(r)\n  pageGUID := vars[\"guid\"]\n  thisPage := Page{}\n  fmt.Println(pageGUID)\n  err := database.QueryRow(\"SELECT page_title,page_content,page_date FROM pages WHERE page_guid=?\", pageGUID).Scan(&thisPage.Title, &thisPage.Content, &thisPage.Date)\n  if err != nil {\n    http.Error(w, http.StatusText(404), http.StatusNotFound)\n    log.Println(\"Couldn't get page!\")\n    return\n  }\n  // html := <html>...</html>\n\n  t, _ := template.ParseFiles(\"templates/blog.html\")\n  t.Execute(w, thisPage)\n}\n```", "```go\nINSERT INTO `pages` (`id`, `page_guid`, `page_title`, page_content`, `page_date`)\n```", "```go\n  (2, 'a-new-blog', 'A New Blog', 'I hope you enjoyed the last blog!  Well brace yourself, because my latest blog is even <i>better</i> than the last!', '2015-04-29 02:16:19');\n```", "```go\ntype Page struct {\n  Title   string\n  Content template.HTML\n  Date   string\n}\n```", "```go\nsql: Scan error on column index 1: unsupported driver -> Scan pair: []uint8 -> *template.HTML\n```", "```go\ntype Page struct {\n  Title    string\n  RawContent string\n  Content    template.HTML\n  Date    string\n}\n  err := database.QueryRow(\"SELECT page_title,page_content,page_date FROM pages WHERE page_guid=?\", pageGUID).Scan(&thisPage.Title, &thisPage.RawContent, &thisPage.Date)\n  thisPage.Content = template.HTML(thisPage.RawContent)\n```", "```go\n{{range .Blogs}}\n  <li><a href=\"{{.Link}}\">{{.Title}}</a></li>\n{{end}}\n```", "```go\n  routes := mux.NewRouter()\n  routes.HandleFunc(\"/page/{guid:[0-9a-zA\\\\-]+}\", ServePage)\n  routes.HandleFunc(\"/\", RedirIndex)\n  routes.HandleFunc(\"/home\", ServeIndex)\n  http.Handle(\"/\", routes)\n```", "```go\nfunc RedirIndex(w http.ResponseWriter, r *http.Request) {\n  http.Redirect(w, r, \"/home\", 301)\n}\n```", "```go\nfunc ServeIndex(w http.ResponseWriter, r *http.Request) {\n  var Pages = []Page{}\n  pages, err := database.Query(\"SELECT page_title,page_content,page_date FROM pages ORDER BY ? DESC\", \"page_date\")\n  if err != nil {\n    fmt.Fprintln(w, err.Error)\n  }\n  defer pages.Close()\n  for pages.Next() {\n    thisPage := Page{}\n    pages.Scan(&thisPage.Title, &thisPage.RawContent, &thisPage.Date)\n    thisPage.Content = template.HTML(thisPage.RawContent)\n    Pages = append(Pages, thisPage)\n  }\n  t, _ := template.ParseFiles(\"templates/index.html\")\n  t.Execute(w, Pages)\n}\n```", "```go\n<h1>Homepage</h1>\n\n{{range .}}\n  <div><a href=\"!\">{{.Title}}</a></div>\n  <div>{{.Content}}</div>\n  <div>{{.Date}}</div>\n{{end}}\n```", "```go\ntype Page struct {\n  Title  string\n  Content  template.HTML\n  RawContent  string\n  Date  string\n  GUID   string\n}\n```", "```go\n  var Pages = []Page{}\n  pages, err := database.Query(\"SELECT page_title,page_content,page_date,page_guid FROM pages ORDER BY ? DESC\", \"page_date\")\n  if err != nil {\n    fmt.Fprintln(w, err.Error)\n  }\n  defer pages.Close()\n  for pages.Next() {\n    thisPage := Page{}\n    pages.Scan(&thisPage.Title, &thisPage.Content, &thisPage.Date, &thisPage.GUID)\n    Pages = append(Pages, thisPage)\n  }\n```", "```go\n<h1>Homepage</h1>\n\n{{range .}}\n  <div><a href=\"/page/{{.GUID}}\">{{.Title}}</a></div>\n  <div>{{.Content}}</div>\n  <div>{{.Date}}</div>\n{{end}}\n```", "```go\nINSERT INTO `pages` (`id`, `page_guid`, `page_title`, `page_content`, `page_date`)\n```", "```go\n  (3, 'lorem-ipsum', 'Lorem Ipsum', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas sem tortor, lobortis in posuere sit amet, ornare non eros. Pellentesque vel lorem sed nisl dapibus fringilla. In pretium...', '2015-05-06 04:09:45');\n```", "```go\nfunc (p Page) TruncatedText() string {\n  chars := 0\n  for i, _ := range p.Content {\n    chars++\n    if chars > 150 {\n      return p.Content[:i] + ` ...`\n    }\n  }\n  return p.Content\n}\n```", "```go\n<h1>Homepage</h1>\n\n{{range .}}\n  <div><a href=\"/page/{{.GUID}}\">{{.Title}}</a></div>\n  <div>{{.TruncatedText}}</div>\n  <div>{{.Date}}</div>\n{{end}}\n```"]