- en: Chapter 4. Using Templates
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。使用模板
- en: In [Chapter 2](ch02.html "Chapter 2. Serving and Routing"), *Serving and Routing*,
    we explored how to take URLs and translate them to different pages in our web
    application. In doing so, we built URLs that were dynamic and resulted in dynamic
    responses from our (very simple) `net/http` handlers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章。服务和路由")中，*服务和路由*，我们探讨了如何将URL转换为网络应用程序中的不同页面。这样做的结果是，我们构建了动态的URL，并从我们（非常简单的）`net/http`处理程序中获得了动态响应。
- en: We've presented our data as real HTML, but we specifically hard-coded our HTML
    directly into our Go source. This is not ideal for production-level environments
    for a number of reasons.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将我们的数据呈现为真实的HTML，但我们将我们的HTML直接硬编码到我们的Go源代码中。这对于生产级环境来说并不理想，原因有很多。
- en: Luckily, Go comes equipped with a robust but sometimes tricky template engine
    for both text templates, as well as HTML templates.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Go配备了一个强大但有时棘手的模板引擎，用于文本模板和HTML模板。
- en: Unlike a lot of other template languages that eschew logic as a part of the
    presentation side, Go's template packages enable you to utilize some logic constructs,
    such as loops, variables, and function declarations in a template. This allows
    you to offset some of your logic to the template, which means that it's possible
    to write your application, but you need to allow the template side to provide
    some extensibility to your product without rewriting the source.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多其他模板语言不同，这些语言将逻辑排除在演示方面，Go的模板包使您能够在模板中使用一些逻辑结构，例如循环、变量和函数声明。这使您能够将一些逻辑偏移至模板，这意味着您可以编写应用程序，但需要允许模板方面为产品提供一些可扩展性，而无需重写源代码。
- en: We say some logic constructs because Go templates are sold as logic-less. We
    will discuss more on this topic later.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们说一些逻辑结构，因为Go模板被称为无逻辑。我们将在稍后讨论这个话题。
- en: In this chapter, we'll explore ways to not only present your data but also explore
    some of the more advanced possibilities in this chapter. By the end, we will be
    able to parlay our templates into advancing the separation of presentation and
    source code.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨不仅呈现数据的方式，还将探索本章中的一些更高级的可能性。最后，我们将能够将我们的模板转化为推进演示和源代码分离的方式。
- en: 'We will cover the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Introducing templates, context, and visibility
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍模板、上下文和可见性
- en: HTML templates and text templates
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML模板和文本模板
- en: Displaying variables and security
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示变量和安全性
- en: Using logic and control structures
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用逻辑和控制结构
- en: Introducing templates, context, and visibility
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍模板、上下文和可见性
- en: 'It''s worth noting very early that while we''re talking about taking our HTML
    part out of the source code, it''s possible to use templates inside our Go application.
    Indeed, there''s nothing wrong with declaring a template as shown:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 很值得注意的是，虽然我们正在讨论将HTML部分从源代码中提取出来，但是在Go应用程序中使用模板是可能的。事实上，像这样声明模板是没有问题的：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If we do this, however, we'll need to restart our application every time the
    template needs to change. This doesn't have to be the case if we use file-based
    templates; instead we can make changes to the presentation (and some logic) without
    restarting.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们这样做，每次模板需要更改时，我们都需要重新启动应用程序。如果我们使用基于文件的模板，就不必这样做；相反，我们可以在不重新启动的情况下对演示（和一些逻辑）进行更改。
- en: 'The first thing we need to do to move from in-application HTML strings to file-based
    templates is create a template file. Let''s briefly look at an example template
    that somewhat approximates to what we''ll end up with later in this chapter:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 从应用程序内的HTML字符串转移到基于文件的模板的第一件事是创建一个模板文件。让我们简要地看一下一个示例模板，它在某种程度上接近我们在本章后面将得到的结果：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Very straightforward, right? Variables are clearly expressed by a name within
    double curly brackets. So what's with all of the periods/dots? Not unlike a few
    other similarly-styled templating systems (Mustache, Angular, and so on), the
    dot signifies scope or context.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 非常简单，对吧？变量通过双大括号内的名称清楚地表示。那么所有的句号/点是怎么回事？与其他一些类似风格的模板系统（如Mustache、Angular等）一样，句号表示范围或上下文。
- en: 'The easiest way to demonstrate this is in areas where the variables might otherwise
    overlap. Imagine that we have a page with a title of **Blog Entries** and we then
    list all of our published blog articles. We have a page title but we also have
    individual entry titles. Our template might look something similar to this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最容易演示这一点的地方是变量可能重叠的地方。想象一下，我们有一个标题为**博客条目**的页面，然后我们列出所有已发布的博客文章。我们有一个页面标题，但我们也有单独的条目标题。我们的模板可能看起来类似于这样：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The dot here specifies the specific scope of, in this case, a loop through the
    range template operator syntax. This allows the template parser to correctly utilize
    `{{.Title}}` as a blog's title versus the page's title.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的点指定了特定的范围，这种情况下是通过range模板操作符语法进行循环。这允许模板解析器正确地使用`{{.Title}}`作为博客的标题，而不是页面的标题。
- en: This is all noteworthy because the very first templates we'll be creating will
    utilize general scope variables, which are prefixed with the dot notation.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都值得注意，因为我们将创建的第一个模板将利用通用范围变量，这些变量以点表示。
- en: HTML templates and text templates
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML模板和文本模板
- en: In our first example of displaying the values from our blog from our database
    to the Web, we produced a hardcoded string of HTML and injected our values directly.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们第一个示例中，我们将从数据库中将博客的值显示到网络上，我们生成了一个硬编码的HTML字符串，并直接注入了我们的值。
- en: 'Following are the two lines that we used in [Chapter 3](ch03.html "Chapter 3. Connecting
    to Data"), *Connecting to Data*:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们在[第3章](ch03.html "第3章。连接到数据")中使用的两行：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It shouldn't be hard to realize why this isn't a sustainable system for outputting
    our content to the Web. The best way to do this is to translate this into a template,
    so we can separate our presentation from our application.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这不难理解为什么这不是一个可持续的系统，用于将我们的内容输出到网络上。最好的方法是将其转换为模板，这样我们就可以将演示与应用程序分开。
- en: To do this as succinctly as possible, let's modify the method that called the
    preceding code, `ServePage`, to utilize a template instead of hardcoded HTML.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了尽可能简洁地做到这一点，让我们修改调用前面代码的方法`ServePage`，使用模板而不是硬编码的HTML。
- en: So we'll remove the HTML we placed earlier and instead reference a file that
    will encapsulate what we want to display. From your root directory, create a `templates`
    subdirectory and `blog.html` within it.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们将删除之前放置的HTML，而是引用一个文件，该文件将封装我们想要显示的内容。从你的根目录开始，创建一个`templates`子目录，并在其中创建一个`blog.html`。
- en: 'The following is the very basic HTML we included, feel free to add some flair:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们包含的非常基本的HTML，随意添加一些花样：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Back in our application, inside the `ServePage` handler, we''ll change our
    output code slightly to leave an explicit string and instead parse and execute
    the HTML template we just created:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的应用程序，在`ServePage`处理程序中，我们将稍微改变我们的输出代码，不再留下显式的字符串，而是解析和执行我们刚刚创建的HTML模板：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If, somehow, you failed to create the file or it is otherwise not accessible,
    the application will panic when it attempts to execute. You can also get panicked
    if you're referencing `struct` values that don't exist—we'll need to handle errors
    a bit better.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以某种方式未能创建文件或者文件无法访问，应用程序在尝试执行时将会发生panic。如果你引用了不存在的`struct`值，也会发生panic——我们需要更好地处理错误。
- en: Note
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note: Don''t forget to include `html/template` in your imports.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：不要忘记在你的导入中包含`html/template`。
- en: The benefits of moving away from a static string should be evident, but we now
    have the foundation for a much more extensible presentation layer.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 远离静态字符串的好处是显而易见的，但现在我们已经为一个更具扩展性的呈现层奠定了基础。
- en: 'If we visit `http://localhost:9500/page/hello-world` we''ll see something similar
    to this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们访问`http://localhost:9500/page/hello-world`，我们将看到类似于这样的东西：
- en: '![HTML templates and text templates](img/B04294_04_01.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![HTML模板和文本模板](img/B04294_04_01.jpg)'
- en: Displaying variables and security
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示变量和安全性
- en: 'To demonstrate this, let''s create a new blog entry by adding this SQL command
    to your MySQL command line:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这一点，让我们通过在MySQL命令行中添加这个SQL命令来创建一个新的博客条目：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'VALUES:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 值：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Another thrilling piece of content, for sure. Note, however that we have some
    embedded HTML in this when we attempt to italicize the word better.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个令人兴奋的内容，当然。但是请注意，当我们尝试给单词better加上斜体时，我们在其中嵌入了一些HTML。
- en: 'Debates about how formatting should be stored notwithstanding, this allows
    us to take a look at how Go''s templates handle this by default. If we visit `http://localhost:9500/page/a-new-blog`
    we''ll see something similar to this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 不管如何存储格式的争论，这使我们能够查看Go的模板如何默认处理这个问题。如果我们访问`http://localhost:9500/page/a-new-blog`，我们将看到类似于这样的东西：
- en: '![Displaying variables and security](img/B04294_04_02.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![显示变量和安全性](img/B04294_04_02.jpg)'
- en: As you can see, Go automatically sanitizes our data for output. There are a
    lot of very, very wise reasons to do this, which is why it's the default behavior.
    The biggest one, of course, is to avoid XSS and code-injection attack vectors
    from untrusted sources of input, such as the general users of the site and so
    on.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，Go会自动为我们的输出数据进行消毒。有很多非常非常明智的原因来做这个，这就是为什么这是默认行为的最大原因。当然，最大的原因是为了避免来自不受信任的输入源（例如网站的一般用户等）的XSS和代码注入攻击向量。
- en: 'But ostensibly we are creating this content and should be considered trusted.
    So in order to validate this as trusted HTML, we need to change the type of `template.HTML`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 但表面上，我们正在创建这个内容，应该被视为受信任的。因此，为了将其验证为受信任的HTML，我们需要改变`template.HTML`的类型：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you attempt to simply scan the resulting SQL string value into a `template.HTML`
    you''ll find the following error:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试将生成的SQL字符串值简单地扫描到`template.HTML`中，你会发现以下错误：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The easiest way to work around this is to retain the string value in `RawContent`
    and assign it back to `Content`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的最简单方法是保留`RawContent`中的字符串值，并将其重新分配给`Content`：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If we `go run` this again, we''ll see our HTML as trusted:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次`go run`，我们将看到我们的HTML是受信任的：
- en: '![Displaying variables and security](img/B04294_04_03.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![显示变量和安全性](img/B04294_04_03.jpg)'
- en: Using logic and control structures
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用逻辑和控制结构
- en: 'Earlier in this chapter we looked at how we can use a range in our templates
    just as we would directly in our code. Take a look at the following code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的前面，我们看到了如何在我们的模板中使用范围，就像我们直接在我们的代码中使用一样。看一下下面的代码：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You may recall that we said that Go's templates are without any logic, but this
    depends on how you define logic and whether shared logic lies exclusively in the
    application, the template, or a little of both. It's a minor point, but because
    Go's templates offer a lot of flexibility; it's the one worth thinking about.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还记得我们说过，Go的模板没有任何逻辑，但这取决于你如何定义逻辑，以及共享逻辑是否完全存在于应用程序、模板中，还是两者都有一点。这是一个小问题，但因为Go的模板提供了很大的灵活性，所以这是值得思考的一个问题。
- en: Having a range feature in the preceding template, by itself, opens up a lot
    of possibilities for a new presentation of our blog. We can now show a list of
    blogs or break our blog up into paragraphs and allow each to exist as a separate
    entity. This can be used to allow relationships between comments and paragraphs,
    which have started to pop up as a feature in some publication systems in recent
    years.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的模板中具有一个范围功能，本身就为我们的博客的新呈现打开了很多可能性。现在我们可以显示博客列表，或者将我们的博客分成段落，并允许每个段落作为一个单独的实体存在。这可以用来允许评论和段落之间的关系，这在最近的一些出版系统中已经开始成为一个功能。
- en: 'But for now, let''s use this opportunity to create a list of blogs in a new
    index page. To do this, we''ll need to add a route. Since we have `/page` we could
    go with `/pages`, but since this will be an index, let''s go with `/` and `/home`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在，让我们利用这个机会在一个新的索引页面中创建一个博客列表。为此，我们需要添加一个路由。由于我们有`/page`，我们可以选择`/pages`，但由于这将是一个索引，让我们选择`/`和`/home`：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We'll use `RedirIndex` to automatically redirect to our `/home` endpoint as
    a canonical home page.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`RedirIndex`自动重定向到我们的`/home`端点作为规范的主页。
- en: 'Serving a simple `301` or `Permanently Moved` redirect requires very little
    code in our method, as shown:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的方法中提供简单的`301`或`永久移动`重定向需要非常少的代码，如下所示：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This is enough to take any requests from `/` and bring the user to `/home`
    automatically. Now, let''s look at looping through our blogs on our index page
    in the `ServeIndex` HTTP handler:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这足以接受来自`/`的任何请求，并自动将用户带到`/home`。现在，让我们看看如何在`ServeIndex`HTTP处理程序中循环遍历我们的博客在我们的索引页面上：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And here''s `templates/index.html`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`templates/index.html`：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![Using logic and control structures](img/B04294_04_04.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: 使用逻辑和控制结构
- en: 'We''ve highlighted an issue with our `Page struct` here—we have no way to get
    the reference to the page''s `GUID`. So, we need to modify our `struct` to include
    that as the exportable `Page.GUID` variable:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们突出了`Page struct`的一个问题——我们无法获取页面的`GUID`引用。因此，我们需要修改我们的`struct`以包括可导出的`Page.GUID`变量：
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, we can link our listings on our index page to their respective blog entries
    as shown:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以将我们索引页面上的列表链接到它们各自的博客条目，如下所示：
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And we can update our HTML part with the following code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下代码更新我们的HTML部分：
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: But this is just the start of the power of the templates. What if we had a much
    longer piece of content and wanted to truncate its description?
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 但这只是模板强大功能的开始。如果我们有一个更长的内容，并且想要截断它的描述呢？
- en: We can create a new field within our `Page struct` and truncate that. But that's
    a little clunky; it requires the field to always exist within a `struct`, whether
    populated with data or not. It's much more efficient to expose methods to the
    template itself.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`Page struct`中创建一个新字段并对其进行截断。但这有点笨拙；它要求该字段始终存在于`struct`中，无论是否填充了数据。将方法暴露给模板本身要高效得多。
- en: So let's do that.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们这样做。
- en: 'First, create yet another blog entry, this time with a larger content value.
    Choose whatever you like or select the `INSERT` command as shown:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建另一个博客条目，这次内容值更大。选择任何你喜欢的内容，或者按照所示选择`INSERT`命令：
- en: '[PRE19]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'VALUES:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 值：
- en: '[PRE20]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note: For the sake of brevity, we''ve truncated the full length of our preceding
    Lorem Ipsum text.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：为了简洁起见，我们已经截断了我们之前的Lorem Ipsum文本的完整长度。
- en: Now, we need to represent our truncation as a method for the type `Page`. Let's
    create that method to return a string that represents the shortened text.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要将我们的截断表示为`Page`类型的方法。让我们创建该方法，以返回表示缩短文本的字符串。
- en: 'The cool thing here is that we can essentially share a method between the application
    and the template:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的酷之处在于，我们可以在应用程序和模板之间共享方法：
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This code will loop through the length of content and if the number of characters
    exceeds `150`, it will return the slice up to that number in the index. If it
    doesn't ever exceed that number, `TruncatedText` will return the content as a
    whole.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将循环遍历内容的长度，如果字符数超过`150`，它将返回索引中的切片直到该数字。如果它从未超过该数字，`TruncatedText`将返回整个内容。
- en: 'Calling this in the template is simple, except that you might be expected to
    need a traditional function syntax call, such as `TruncatedText()`. Instead, it''s
    referenced just as any variable within the scope:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在模板中调用这个方法很简单，只是你可能期望需要传统的函数语法调用，比如`TruncatedText()`。相反，它被引用为作用域内的任何变量一样：
- en: '[PRE22]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'By calling .`TruncatedText`, we essentially process the value inline through
    that method. The resulting page reflects our existing blogs and not the truncated
    ones and our new blog entry with truncated text and ellipsis appended:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用.`TruncatedText`，我们本质上通过该方法内联处理值。结果页面反映了我们现有的博客，而不是截断的博客，以及我们新的博客条目，其中包含截断的文本和省略号：
- en: '![Using logic and control structures](img/B04294_04_05.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: 使用逻辑和控制结构
- en: I'm sure you can imagine how being able to reference embedded methods directly
    in your templates can open up a world of presentation possibilities.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信你可以想象在模板中直接引用嵌入方法将打开一系列的演示可能性。
- en: Summary
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We've just scratched the surface of what Go's templates can do and we'll explore
    further topics as we continue, but this chapter has hopefully introduced the core
    concepts necessary to start utilizing templates directly.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是初步了解了Go模板的功能，随着我们的继续探索，我们将进一步探讨更多的主题，但是这一章节已经介绍了开始直接利用模板所需的核心概念。
- en: We've looked at simple variables, as well as implementing methods within the
    application, within the templates themselves. We've also explored how to bypass
    injection protection for trusted content.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经研究了简单的变量，以及在应用程序中实现方法，在模板本身中实现方法。我们还探讨了如何绕过受信任内容的注入保护。
- en: In the next chapter, we'll integrate a backend API for accessing information
    in a RESTful way to read and manipulate our underlying data. This will allow us
    to do some more interesting and dynamic things on our templates with Ajax.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将集成后端API，以RESTful方式访问信息以读取和操作底层数据。这将允许我们在模板上使用Ajax做一些更有趣和动态的事情。
