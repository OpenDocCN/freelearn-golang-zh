["```go\nroutes := mux.NewRouter()\nroutes.HandleFunc(\"/api/pages\", APIPage).\n  Methods(\"GET\").\n  Schemes(\"https\")\nroutes.HandleFunc(\"/api/pages/{guid:[0-9a-zA\\\\-]+}\", APIPage).\n  Methods(\"GET\").\n  Schemes(\"https\")\nroutes.HandleFunc(\"/page/{guid:[0-9a-zA\\\\-]+}\", ServePage)\nhttp.Handle(\"/\", routes)\nhttp.ListenAndServe(PORT, nil)\n```", "```go\nfunc APIPage(w http.ResponseWriter, r *http.Request) {\nvars := mux.Vars(r)\npageGUID := vars[\"guid\"]\nthisPage := Page{}\nfmt.Println(pageGUID)\nerr := database.QueryRow(\"SELECT page_title,page_content,page_date FROM pages WHERE page_guid=?\", pageGUID).Scan(&thisPage.Title, &thisPage.RawContent, &thisPage.Date)\nthisPage.Content = template.HTML(thisPage.RawContent)\nif err != nil {\n  http.Error(w, http.StatusText(404), http.StatusNotFound)\n  log.Println(err)\n  return\n}\nAPIOutput, err := json.Marshal(thisPage)\n    fmt.Println(APIOutput)\nif err != nil {\n  http.Error(w, err.Error(), http.StatusInternalServerError)\n  return\n}\nw.Header().Set(\"Content-Type\", \"application/json\")\nfmt.Fprintln(w, thisPage)\n}\n```", "```go\nopenssl genrsa -out key.pem\nopenssl req -new -key key.pem -out cert.pem\nopenssl req -x509 -days 365 -key key.pem -in cert.pem -out certificate.pem\n\n```", "```go\nhttp.ListenAndServe(PORT, nil)\n```", "```go\n  certificates, err := tls.LoadX509KeyPair(\"cert.pem\", \"key.pem\")\n  tlsConf := tls.Config{Certificates: []tls.Certificate{certificates}}\n  tls.Listen(\"tcp\", PORT, &tlsConf)\n```", "```go\n<div id=\"comments\">\n  <form action=\"/api/comments\" method=\"POST\">\n    <input type=\"hidden\" name=\"guid\" value=\"{{Guid}}\" />\n    <div>\n      <input type=\"text\" name=\"name\" placeholder=\"Your Name\" />\n    </div>\n    <div>\n      <input type=\"email\" name=\"email\" placeholder=\"Your Email\" />\n    </div>\n    <div>\n      <textarea name=\"comments\" placeholder=\"Your Com-ments\"></textarea>\n    </div>\n    <div>\n      <input type=\"submit\" value=\"Add Comments\" />\n    </div>\n  </form>\n</div>\n```", "```go\nCREATE TABLE `comments` (\n`id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n`page_id` int(11) NOT NULL,\n`comment_guid` varchar(256) DEFAULT NULL,\n`comment_name` varchar(64) DEFAULT NULL,\n`comment_email` varchar(128) DEFAULT NULL,\n`comment_text` mediumtext,\n`comment_date` timestamp NULL DEFAULT NULL,\nPRIMARY KEY (`id`),\nKEY `page_id` (`page_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;\n```", "```go\ntype JSONResponse struct {\n  Fields map[string]string\n}\n```", "```go\nfunc APICommentPost(w http.ResponseWriter, r *http.Request) {\n  var commentAdded bool\n  err := r.ParseForm()\n  if err != nil {\n    log.Println(err.Error)\n  }\n  name := r.FormValue(\"name\")\n  email := r.FormValue(\"email\")\n  comments := r.FormValue(\"comments\")\n\n  res, err := database.Exec(\"INSERT INTO comments SET comment_name=?, comment_email=?, comment_text=?\", name, email, comments)\n\n  if err != nil {\n    log.Println(err.Error)\n  }\n\n  id, err := res.LastInsertId()\n  if err != nil {\n    commentAdded = false\n  } else {\n    commentAdded = true\n  }\n  commentAddedBool := strconv.FormatBool(commentAdded)\n  var resp JSONResponse\n  resp.Fields[\"id\"] = string(id)\n  resp.Fields[\"added\"] =  commentAddedBool\n  jsonResp, _ := json.Marshal(resp)\n  w.Header().Set(\"Content-Type\", \"application/json\")\n  fmt.Fprintln(w, jsonResp)\n}\n```", "```go\ntype Comment struct {\n  Id    int\n  Name   string\n  Email  string\n  CommentText string\n}\n\ntype Page struct {\n  Id         int\n  Title      string\n  RawContent string\n  Content    template.HTML\n  Date       string\n  Comments   []Comment\n  Session    Session\n  GUID       string\n}\n```", "```go\nfunc ServePage(w http.ResponseWriter, r *http.Request) {\n  vars := mux.Vars(r)\n  pageGUID := vars[\"guid\"]\n  thisPage := Page{}\n  fmt.Println(pageGUID)\n  err := database.QueryRow(\"SELECT id,page_title,page_content,page_date FROM pages WHERE page_guid=?\", pageGUID).Scan(&thisPage.Id, &thisPage.Title, &thisPage.RawContent, &thisPage.Date)\n  thisPage.Content = template.HTML(thisPage.RawContent)\n  if err != nil {\n    http.Error(w, http.StatusText(404), http.StatusNotFound)\n    log.Println(err)\n    return\n  }\n\n  comments, err := database.Query(\"SELECT id, comment_name as Name, comment_email, comment_text FROM comments WHERE page_id=?\", thisPage.Id)\n  if err != nil {\n    log.Println(err)\n  }\n  for comments.Next() {\n    var comment Comment\n    comments.Scan(&comment.Id, &comment.Name, &comment.Email, &comment.CommentText)\n    thisPage.Comments = append(thisPage.Comments, comment)\n  }\n\n  t, _ := template.ParseFiles(\"templates/blog.html\")\n  t.Execute(w, thisPage)\n}\n```", "```go\n{{range .Comments}}\n  <div class=\"comment\">\n    <div>Comment by {{.Name}} ({{.Email}})</div>\n    {{.CommentText}}\n\n    <div class=\"comment_edit\">\n    <h2>Edit</h2>\n    <form onsubmit=\"return putComment(this);\">\n      <input type=\"hidden\" class=\"edit_id\" value=\"{{.Id}}\" />\n      <input type=\"text\" name=\"name\" class=\"edit_name\" placeholder=\"Your Name\" value=\"{{.Name}}\" />\n     <input type=\"text\" name=\"email\" class=\"edit_email\" placeholder=\"Your Email\" value=\"{{.Email}}\" />\n      <textarea class=\"edit_comments\" name=\"comments\">{{.CommentText}}</textarea>\n      <input type=\"submit\" value=\"Edit\" />\n    </form>\n    </div>\n  </div>\n{{end}}\n```", "```go\n<script>\n    function putComment(el) {\n        var id = $(el).find('.edit_id');\n        var name = $(el).find('.edit_name').val();\n        var email = $(el).find('.edit_email').val();\n        var text = $(el).find('.edit_comments').val();\n        $.ajax({\n            url: '/api/comments/' + id,\n            type: 'PUT',\n            succes: function(res) {\n                alert('Comment Updated!');\n            }\n        });\n        return false;\n    }\n</script>\n```", "```go\n  routes.HandleFunc(\"/api/comments\", APICommentPost).\n    Methods(\"POST\")\n  routes.HandleFunc(\"/api/comments/{id:[\\\\w\\\\d\\\\-]+}\", APICommentPut).\n Methods(\"PUT\")\n\n```", "```go\nfunc APICommentPut(w http.ResponseWriter, r *http.Request) {\n  err := r.ParseForm()\n  if err != nil {\n  log.Println(err.Error)\n  }\n  vars := mux.Vars(r)\n  id := vars[\"id\"]\n  fmt.Println(id)\n  name := r.FormValue(\"name\")\n  email := r.FormValue(\"email\")\n  comments := r.FormValue(\"comments\")\n  res, err := database.Exec(\"UPDATE comments SET comment_name=?, comment_email=?, comment_text=? WHERE comment_id=?\", name, email, comments, id)\n  fmt.Println(res)\n  if err != nil {\n    log.Println(err.Error)\n  }\n\n  var resp JSONResponse\n\n  jsonResp, _ := json.Marshal(resp)\n  w.Header().Set(\"Content-Type\", \"application/json\")\n  fmt.Fprintln(w, jsonResp)\n}\n```"]