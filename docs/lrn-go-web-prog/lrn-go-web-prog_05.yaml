- en: Chapter 5. Frontend Integration with RESTful APIs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。RESTful API与前端集成
- en: In [Chapter 2](ch02.html "Chapter 2. Serving and Routing"), *Serving and Routing*,
    we explored how to route URLs to the different pages in our web application. In
    doing so, we built URLs that were dynamic and resulted in dynamic responses from
    our (very simple) `net/http` handlers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章。服务和路由")*服务和路由*中，我们探讨了如何将URL路由到我们Web应用程序中的不同页面。在这样做时，我们构建了动态的URL，并从我们（非常简单的）`net/http`处理程序中获得了动态响应。
- en: We've just scratched the surface of what Go's templates can do, and we'll also
    explore further topics as we continue, but in this chapter we have tried to introduce
    the core concepts that are necessary to start utilizing the templates directly.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚触及了Go模板的一小部分功能，随着我们的继续，我们还将探索更多主题，但在本章中，我们试图介绍直接开始使用模板所必需的核心概念。
- en: We've looked at simple variables as well as the implementing methods within
    the application using the templates themselves. We've also explored how to bypass
    injection protection for trusted content.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经研究了简单的变量以及在应用程序中使用模板本身实现的方法。我们还探讨了如何绕过对受信任内容的注入保护。
- en: The presentation side of web development is important, but it's also the least
    engrained aspect. Almost any framework will present its own extension of built-in
    Go templating and routing syntaxes. What really takes our application to the next
    level is building and integrating an API for both general data access, as well
    as allowing our presentation layer to be more dynamically driven.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 网站开发的呈现方面很重要，但也是最不根深蒂固的方面。几乎任何框架都会呈现其内置的Go模板和路由语法的扩展。真正将我们的应用程序提升到下一个水平的是构建和集成API，用于通用数据访问，以及允许我们的呈现层更具动态驱动性。
- en: In this chapter, we'll develop a backend API for accessing information in a
    RESTful way and to read and manipulate our underlying data. This will allow us
    to do some more interesting and dynamic things in our templates with Ajax.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开发一个后端API，以RESTful方式访问信息，并读取和操作我们的基础数据。这将允许我们在模板中使用Ajax做一些更有趣和动态的事情。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Setting up the basic API endpoint
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置基本的API端点
- en: RESTful architecture and best practices
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RESTful架构和最佳实践
- en: Creating our first API endpoint
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的第一个API端点
- en: Implementing security
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施安全性
- en: Creating data with POST
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用POST创建数据
- en: Modifying data with PUT
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PUT修改数据
- en: Setting up the basic API endpoint
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置基本的API端点
- en: First, we'll set up a basic API endpoint for both pages and individual blog
    entries.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将为页面和单独的博客条目设置一个基本的API端点。
- en: 'We''ll create a Gorilla endpoint route for a `GET` request that will return
    information about our pages and an additional one that accepts a GUID, which matches
    alphanumeric characters and hyphens:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为`GET`请求创建一个Gorilla端点路由，该请求将返回有关我们页面的信息，还有一个接受GUID的请求，GUID匹配字母数字字符和连字符：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note here that we're capturing the GUID again, this time for our `/api/pages/*`
    endpoint, which will mirror the functionality of the web-side counterpart, returning
    all meta data associated with a single page.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们再次捕获了GUID，这次是为我们的`/api/pages/*`端点，它将反映网页端点的功能，返回与单个页面相关的所有元数据。
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding code represents the simplest GET-based request, which returns
    a single record from our `/pages` endpoint. Let's take a look at REST now, and
    see how we'll structure and implement other verbs and data manipulations from
    the API.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码代表了最简单的基于GET的请求，它从我们的`/pages`端点返回单个记录。现在让我们来看看REST，看看我们将如何构建和实现其他动词和数据操作。
- en: RESTful architecture and best practices
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RESTful架构和最佳实践
- en: In the world of web API design, there has been an array of iterative, and sometimes
    competing, efforts to find a standard system and format to deliver information
    across multiple environments.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web API设计领域，已经有一系列迭代的，有时是竞争的努力，以找到跨多个环境传递信息的标准系统和格式。
- en: In recent years, the web development community at large seems to have—at least
    temporarily—settled on REST as the de facto approach. REST came after a few years
    of SOAP dominance and introduced a simpler method for sharing data.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，网站开发社区似乎已经—至少是暂时地—将REST作为事实上的方法。REST在几年SOAP的主导之后出现，并引入了一种更简单的数据共享方法。
- en: REST APIs aren't bound to a format and are typically cacheable and delivered
    via HTTP or HTTPS.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: REST API不受格式限制，通常可以缓存并通过HTTP或HTTPS传递。
- en: The biggest takeaway to start with is an adherence to HTTP verbs; those initially
    specified for the Web are honored in their original intent. For example, HTTP
    verbs, such as `DELETE` and `PATCH` fell into years of disuse despite being very
    explicit about their purpose. REST has been the primary impetus for the use of
    the right method for the right purpose. Prior to REST, it was not uncommon to
    see `GET` and `POST` requests being used interchangeably to do myriad things that
    were otherwise built into the design of HTTP.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 开始时最重要的是遵守HTTP动词；最初为Web指定的那些动词在其原始意图上受到尊重。例如，HTTP动词，如`DELETE`和`PATCH`，尽管非常明确地说明了它们的目的，但在多年的不使用后，REST已成为使用正确方法的主要推动力。在REST之前，很常见看到`GET`和`POST`请求被互换使用来做各种事情，而这些事情本来是内置在HTTP设计中的。
- en: In REST, we follow a **Create-Read-Update-Delete** (**CRUD**)-like approach
    to retrieve or modify data. `POST` is used majorly to create, `PUT` is used as
    an update (though it can also be used to create), the familiar `GET` is used to
    read and `DELETE` is used to delete, is well, just that.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在REST中，我们遵循**创建-读取-更新-删除**（CRUD）的方法来检索或修改数据。`POST`主要用于创建，`PUT`用于更新（尽管它也可以用于创建），熟悉的`GET`用于读取，`DELETE`用于删除，就是这样。
- en: Perhaps even more important is the fact that a RESTful API should be stateless.
    By that we mean that each request should exist on its own, without the server
    necessarily having any knowledge about prior or potential future requests. This
    means that the idea of a session would technically violate this ethos, as we'd
    be storing some sense of state on the server itself. Some people disagree; we'll
    look at this in detail later on.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 也许更重要的是，一个符合RESTful的API应该是无状态的。我们的意思是每个请求应该独立存在，而服务器不一定需要了解先前或潜在的未来请求。这意味着会话的概念在技术上违反了这一原则，因为我们会在服务器上存储某种状态。有些人持不同意见；我们将在以后详细讨论这个问题。
- en: One final note is on API URL structure, because the method is baked into the
    request itself as part of the header, we don't need to explicitly express that
    in our request.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一点是关于API URL结构，因为方法已经作为请求的一部分嵌入到头部中，所以我们不需要在请求中明确表达它。
- en: In other words, we don't need something, such as `/api/blogs/delete/1`. Instead,
    we can simply make our request with the `DELETE` method to `api/blogs/1`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，我们不需要像`/api/blogs/delete/1`这样的东西。相反，我们可以简单地使用`DELETE`方法向`api/blogs/1`发出请求。
- en: 'There is no rigid format of the URL structure and you may quickly discover
    that some actions lack HTTP-specific verbs that make sense, but in short there
    are a few things we should aim for:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: URL结构没有严格的格式，您可能很快就会发现一些操作缺乏合理的HTTP动词，但简而言之，我们应该追求一些目标：
- en: The resources are expressed cleanly in the URL
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源在URL中清晰表达
- en: We properly utilize HTTP verbs
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正确地利用HTTP动词
- en: We return appropriate responses based on the type of request
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们根据请求的类型返回适当的响应
- en: Our goal in this chapter is to hit the preceding three points with our API.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章的目标是用我们的API实现前面三点。
- en: If there is a fourth point, it would say that we maintain backwards compatibility
    with our APIs. As you examine the URL structure here, you might wonder how versions
    are handled. This tends to vary from organization to organization, but a good
    policy is to keep the most recent URL canonical and deprecate to explicit version
    URLs.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有第四点，它会说我们与我们的API保持向后兼容。当您检查这里的URL结构时，您可能会想知道版本是如何处理的。这往往因组织而异，但一个很好的政策是保持最近的URL规范，并废弃显式版本的URL。
- en: For example, even though our comments will be accessible at `/api/comments`,
    the older versions will be found at `/api/v2.0/comments`, where `2` obviously
    represents our API, as it existed in version `2.0`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，即使我们的评论可以在`/api/comments`中访问，但旧版本将在`/api/v2.0/comments`中找到，其中`2`显然代表我们的API，就像它在版本`2.0`中存在一样。
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Despite being relatively simple and well-defined in nature, REST is an oft-argued
    subject with enough ambiguity to start, most often for the better, a lot of debate.
    Remember that REST is not a standard; for example, the W3C has not and likely
    will not ever weigh in on what REST is and isn't. If you haven't already, you'll
    begin to develop some very strong opinions on what you feel is properly RESTful.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在本质上相对简单且定义明确，REST是一个常常争论的主题，有足够的模糊性，往往会引发很多辩论。请记住，REST不是一个标准；例如，W3C从未并且可能永远不会对REST是什么以及不是什么发表意见。如果您还没有，您将开始对什么是真正符合REST的内容产生一些非常强烈的看法。
- en: Creating our first API endpoint
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的第一个API端点
- en: Given that we want to access data from the client-side as well as from server
    to server, we'll need to start making some of that accessible via an API.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于我们希望从客户端和服务器之间访问数据，我们需要开始通过API公开其中的一些数据。
- en: The most reasonable thing for us to do is a simple read, since we don't yet
    have methods to create data outside of direct SQL queries. We did that at the
    beginning of the chapter with our `APIPage` method, routed through a `/api/pages/{UUID}`
    endpoint.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对我们来说最合理的事情是简单地读取，因为我们还没有方法在直接的SQL查询之外创建数据。我们在本章的开头就用我们的`APIPage`方法做到了这一点，通过`/api/pages/{UUID}`端点路由。
- en: This is great for `GET` requests, where we're not manipulating data, but if
    we need to create or modify data, we'll need to utilize other HTTP verbs and REST
    methods. To do this effectively, it's time to investigate some authentication
    and security in our API.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于`GET`请求非常有用，因为我们不会操纵数据，但是如果我们需要创建或修改数据，我们需要利用其他HTTP动词和REST方法。为了有效地做到这一点，现在是时候在我们的API中调查一些身份验证和安全性了。
- en: Implementing security
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施安全性
- en: When you think about creating data with an API like the one we've just designed,
    what's the first concern that comes to your mind? If it was security, then good
    for you. Accessing data is not always without a security risk, but it's when we
    allow for modification of data that we need to really start thinking about security.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当您考虑使用我们刚刚设计的API创建数据时，您首先会考虑什么问题？如果是安全性，那就太好了。访问数据并不总是没有安全风险，但当我们允许修改数据时，我们需要真正开始考虑安全性。
- en: In our case, read data is totally benign. If someone can access all of our blog
    entries via a `GET` request, who cares? Well, we may have a blog on embargo or
    accidentally exposed sensitive data on some resource.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，读取数据是完全无害的。如果有人可以通过`GET`请求访问我们所有的博客条目，那又有什么关系呢？好吧，我们可能有一篇关于禁运的博客，或者意外地在某些资源上暴露了敏感数据。
- en: Either way, security should always be a concern, even with a small personal
    project like a blogging platform, similar to the one we're building.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，安全性始终应该是一个关注点，即使是像我们正在构建的博客平台这样的小型个人项目。
- en: 'There are two big ways of separating these concerns:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种分离这些问题的方法：
- en: Are the requests to our APIs secure and private?
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的API请求是否安全且私密？
- en: Are we controlling access to data?
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们是否在控制对数据的访问？
- en: Lets tackle Step 2 first. If we want to allow users to create or delete information,
    we need to give them specific access to that.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先解决第2步。如果我们想允许用户创建或删除信息，我们需要为他们提供对此的特定访问权限。
- en: 'There are a few ways to do this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以做到这一点：
- en: We can provide API tokens that will allow short-lived request windows, which
    can be validated by a shared secret. This is the essence of Oauth; it relies on
    a shared secret to validate cryptographically encoded requests. Without the shared
    secret, the request and its token will never match, and an API request can then
    be rejected.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以提供API令牌，允许短暂的请求窗口，这可以通过共享密钥进行验证。这是Oauth的本质；它依赖于共享密钥来验证加密编码的请求。没有共享密钥，请求及其令牌将永远不匹配，然后API请求可以被拒绝。
- en: The `cond` method is a simple API key, which leads us back to point number 1
    in the preceding list.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`cond`方法是一个简单的API密钥，这将我们带回到上述列表中的第1点。'
- en: If we allow cleartext API keys, then we might as well not have security at all.
    If our requests can be sniffed off the wire without much effort, there's little
    point in even requiring an API key.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们允许明文API密钥，那么我们可能根本不需要安全性。如果我们的请求可以轻松地从线路上被嗅探到，那么甚至要求API密钥也没有多大意义。
- en: So this means that no matter which method we choose, our servers should provide
    an API over HTTPS. Luckily, Go provides a very easy way to utilize either HTTP
    or HTTPS via **Transport Layer Security** (**TLS**); TLS is the successor of SSL.
    As a web developer, you must already be familiar with SSL and also be aware of
    its history of security issues, most recently its susceptibility to the POODLE
    vulnerability, which was exposed in 2014.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着无论我们选择哪种方法，我们的服务器都应该通过HTTPS提供API。幸运的是，Go提供了一种非常简单的方式来利用HTTP或HTTPS通过**传输层安全性**（**TLS**）；TLS是SSL的后继者。作为Web开发人员，您必须已经熟悉SSL，并且也意识到其安全问题的历史，最近是其易受POODLE漏洞攻击的问题，该漏洞于2014年曝光。
- en: To allow either method, we need to have a user registration model so that we
    can have new users and they can have some sort of credentials to modify data.
    To invoke a TLS server, we'll need a secure certificate. Since this is a small
    project for experimentation, we won't worry too much about a real certificate
    with a high level of trust. Instead, we'll just generate our own.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了允许任一方法，我们需要有一个用户注册模型，这样我们就可以有新用户，他们可以有某种凭据来修改数据。为了调用TLS服务器，我们需要一个安全证书。由于这是一个用于实验的小项目，我们不会太担心具有高度信任级别的真实证书。相反，我们将自己生成。
- en: Creating a self-signed certificate varies by OS and is beyond the scope of this
    book, so let's just look at the method for OS X.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自签名证书因操作系统而异，超出了本书的范围，因此让我们只看看OS X的方法。
- en: A self-signed certificate doesn't have a lot of security value, obviously, but
    it allows us to test things without needing to spend money or time verifying server
    ownership. You'll obviously need to do those things for any certificate that you
    expect to be taken seriously.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 自签名证书显然没有太多的安全价值，但它允许我们在不需要花费金钱或时间验证服务器所有权的情况下测试事物。对于任何希望被认真对待的证书，您显然需要做这些事情。
- en: 'To create a quick set of certificates in OS X, go to your terminal and enter
    the following three commands:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要在OS X中快速创建一组证书，请转到终端并输入以下三个命令：
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this example, I generated the certificates using an OpenSSL on Ubuntu.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我使用Ubuntu上的OpenSSL生成了证书。
- en: Note
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note: OpenSSL comes preinstalled on OS X and most Linux distributions. If you''re
    on the latter, give the preceding commands a shot before hunting for Linux-specific
    instructions. If you''re on Windows, particularly newer versions such as 8, you
    can do this in a number of ways, but the most accessible way might be through
    the MakeCert tool, provided by Microsoft through MSDN.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：OpenSSL预装在OS X和大多数Linux发行版上。如果您使用后者，请在寻找特定于Linux的说明之前尝试上述命令。如果您使用Windows，特别是较新版本，如8，您可以以多种方式执行此操作，但最可访问的方式可能是通过MSDN提供的MakeCert工具。
- en: Read more about MakeCert at [https://msdn.microsoft.com/en-us/library/bfsktky3%28v=vs.110%29.aspx](https://msdn.microsoft.com/en-us/library/bfsktky3%28v=vs.110%29.aspx).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读有关MakeCert的更多信息[https://msdn.microsoft.com/en-us/library/bfsktky3%28v=vs.110%29.aspx](https://msdn.microsoft.com/en-us/library/bfsktky3%28v=vs.110%29.aspx)。
- en: Once you have the certificate files, place them somewhere in your filesystem
    that is not within your accessible application directory/directories.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您拥有证书文件，请将它们放在文件系统中的某个位置，而不要放在您可以访问的应用程序目录/目录中。
- en: To switch from HTTP to TLS, we can use the references to these certificate files;
    beyond that it's mostly the same in our code. Lets first add the certificates
    to our code.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要从HTTP切换到TLS，我们可以使用对这些证书文件的引用；除此之外，在我们的代码中基本上是相同的。让我们首先将证书添加到我们的代码中。
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note: Once again, you can choose to maintain both HTTP and TLS/HTTPS requests
    within the same server application, but we''ll be switching ours across the board.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：再次，您可以选择在同一服务器应用程序中维护HTTP和TLS/HTTPS请求，但我们将全面切换。
- en: 'Earlier, we started our server by listening through this line:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 早些时候，我们通过监听以下行来启动我们的服务器：
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, we''ll need to expand things a bit. First, let''s load our certificate:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要稍微扩展一下。首先，让我们加载我们的证书：
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note: If you find that your server apparently runs without error but does not
    stay running; there''s probably a problem with your certificate. Try running the
    preceding generation code again and working with the new certificates.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：如果您发现您的服务器似乎没有错误地运行，但无法保持运行；您的证书可能存在问题。尝试再次运行上述生成代码，并使用新证书进行操作。
- en: Creating data with POST
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用POST创建数据
- en: Now that we have a security certificate in place, we can switch to TLS for our
    API calls for both `GET` and other requests. Let's do that now. Note that you
    can retain HTTP for the rest of our endpoints or switch them at this point as
    well.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了一个安全证书，我们可以为我们的API调用切换到TLS，包括`GET`和其他请求。让我们现在这样做。请注意，您可以保留HTTP用于我们其余的端点，或者在这一点上也将它们切换。
- en: Note
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note: It''s largely becoming a common practice to go the HTTPS-only way and
    it''s probably the best way to future-proof your app. This doesn''t solely apply
    to APIs or areas where explicit and sensitive information is otherwise sent in
    cleartext, with privacy on the forefront; major providers and services are stressing
    on the value of HTTPS everywhere.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：现在大多数人普遍采用仅使用HTTPS的方式，这可能是未来保护您的应用程序的最佳方式。这不仅适用于API或者明文发送显式和敏感信息的地方，隐私是首要考虑的；主要提供商和服务都在强调随处使用HTTPS的价值。
- en: 'Lets add a simple section for anonymous comments on our blog:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在我们的博客上添加一个匿名评论的简单部分：
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will allow any user to add anonymous comments to our site on any of our
    blog items, as shown in the following screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许任何用户在我们的网站上对我们的任何博客项目添加匿名评论，如下截图所示：
- en: '![Creating data with POST](img/B04294_05_01.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![使用POST创建数据](img/B04294_05_01.jpg)'
- en: But what about all the security? For now, we just want to create an open comment
    section, one that anyone can post to with their valid, well-stated thoughts as
    well as their spammy prescription deals. We'll worry about locking that down shortly;
    for now we just want to demonstrate a side-by-side API and frontend integration.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 但是安全性呢？目前，我们只想创建一个开放的评论区，任何人都可以在其中发布他们的有效、明晰的想法，以及他们的垃圾药方交易。我们稍后会担心锁定这一点；目前我们只想演示API和前端集成的并行。
- en: 'We''ll obviously need a `comments` table in our database, so make sure you
    create that before implementing any of the API:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们的数据库中需要一个`comments`表，所以在实现任何API之前，请确保创建该表。
- en: '[PRE6]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'With the table in place, let''s take our form and `POST` it to our API endpoint.
    To create a general purpose and a flexible JSON response, you can add a `JSONResponse
    struct` that consists of essentially a hash-map, as shown:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 有了表格，让我们把表单`POST`到API端点。为了创建一个通用和灵活的JSON响应，你可以添加一个`JSONResponse struct`，它基本上是一个哈希映射，如下所示：
- en: '[PRE7]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then we''ll need an API endpoint to create comments, so let''s add that to
    our routes under `main()`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要一个API端点来创建评论，所以让我们在`main()`的路由下添加它：
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'There are a couple of interesting things about the preceding code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 关于前面的代码有一些有趣的事情：
- en: First, note that we're using `commentAdded` as a `string` and not a `bool`.
    We're doing this largely because the json marshaller does not handle booleans
    elegantly and also because casting directly to a string from a boolean is not
    possible. We also utilize `strconv` and its `FormatBool` to handle this translation.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，注意我们使用`commentAdded`作为`string`而不是`bool`。我们这样做主要是因为json marshaller不能优雅地处理布尔值，而且直接从布尔值转换为字符串也是不可能的。我们还利用`strconv`及其`FormatBool`来处理这个转换。
- en: You might also note that for this example, we're POSTing the form directly to
    the API endpoint. While an effective way to demonstrate that data makes it into
    the database, utilizing it in practice might force some RESTful antipatterns,
    such as enabling a redirect URL to return to the calling page.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还注意到，对于这个例子，我们直接将表单`POST`到API端点。虽然这是演示数据进入数据库的有效方式，但在实践中使用它可能会强制一些RESTful反模式，比如启用重定向URL以返回到调用页面。
- en: A better way to approach this is through the client by utilizing an Ajax call
    through a common library or through `XMLHttpRequest` natively.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通过客户端利用一个常见的库或者通过`XMLHttpRequest`本地化来实现Ajax调用是更好的方法。
- en: Note
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note: While internal functions/method names are largely a matter of preference,
    we recommend keeping all methods distinct by resource type and request method.
    The actual convention used here is irrelevant, but as a matter of traversing the
    code, something such as `APICommentPost`, `APICommentGet`, `APICommentPut`, and
    `APICommentDelete` gives you a nice hierarchical way of organizing the methods
    for better readability.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：虽然内部函数/方法的名称在很大程度上是个人偏好的问题，但我们建议通过资源类型和请求方法来保持所有方法的区分。这里使用的实际约定并不重要，但在遍历代码时，诸如`APICommentPost`、`APICommentGet`、`APICommentPut`和`APICommentDelete`这样的命名方式可以更好地组织方法，使其更易读。
- en: 'Given the preceding client-side and server-side code, we can see how this will
    appear to a user hitting our second blog entry:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到前端和后端的代码，我们可以看到这将如何呈现给访问我们第二篇博客文章的用户：
- en: '![Creating data with POST](img/B04294_05_02.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![使用POST创建数据](img/B04294_05_02.jpg)'
- en: As mentioned, actually adding your comments here will send the form directly
    to the API endpoint, where it will silently succeed (hopefully).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，实际在这里添加评论将直接发送表单到API端点，希望它会悄悄成功。
- en: Modifying data with PUT
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PUT修改数据
- en: 'Depending on whom you ask, `PUT` and `POST` can be used interchangeably for
    the creation of records. Some people believe that both can be used for updating
    the records and most believe that both can be used for the creation of records
    given a set of variables. In lieu of getting into a somewhat confusing and often
    political debate, we''ve separated the two as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您询问的人，`PUT`和`POST`可以互换地用于创建记录。有些人认为两者都可以用于更新记录，大多数人认为两者都可以用于创建记录，只要给定一组变量。为了避免陷入一场有些混乱且常常带有政治色彩的辩论，我们将两者分开如下：
- en: 'Creation of new records: `POST`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新记录：`POST`
- en: 'Updating existing records, idempotently: `PUT`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新现有记录，幂等性：`PUT`
- en: Given these guidelines, we'll utilize the `PUT` verb when we wish to make updates
    to resources. We'll allow comments to be edited by anyone as nothing more than
    a proof of concept to use the REST `PUT` verb.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这些准则，当我们希望更新资源时，我们将利用`PUT`动词。我们将允许任何人编辑评论，仅仅作为使用REST `PUT`动词的概念验证。
- en: In [Chapter 6](ch06.html "Chapter 6. Sessions and Cookies"), *Session and Cookies*,
    we'll lock this down a bit more, but we also want to be able to demonstrate the
    editing of content through a RESTful API; so this will represent an incomplete
    stub for what will eventually be more secure and complete.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](ch06.html "第6章。会话和Cookie")*会话和Cookie*中，我们将更加严格地限制这一点，但我们也希望能够通过RESTful
    API演示内容的编辑；因此，这将代表一个将来更安全和完整的不完整存根。
- en: As with the creation of new comments, there is no security restriction in place
    here. Anyone can create a comment and anyone can edit it. It's the wild west of
    blog software, at least at this point.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 与创建新评论一样，在这里没有安全限制。任何人都可以创建评论，任何人都可以编辑它。至少在这一点上，这是博客软件的狂野西部。
- en: 'First, we''ll want to be able to see our submitted comments. To do so, we need
    to make minor modifications to our `Page struct` and the creation of a `Comment
    struct` to match our database structure:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们希望能够看到我们提交的评论。为此，我们需要对我们的`Page struct`进行微小的修改，并创建一个`Comment struct`以匹配我们的数据库结构：
- en: '[PRE9]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Since all the previously posted comments went into the database without any
    real fanfare, there was no record of the actual comments on the blog post page.
    To remedy that, we'll add a simple query of `Comments` and scan them using the
    `.Scan` method into an array of `Comment struct`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 由于之前发布的所有评论都没有任何真正的喧闹，博客文章页面上没有实际评论的记录。为了解决这个问题，我们将添加一个简单的`Comments`查询，并使用`.Scan`方法将它们扫描到一个`Comment
    struct`数组中。
- en: 'First, we''ll add the query to `ServePage`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在`ServePage`中添加查询：
- en: '[PRE10]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now that we have `Comments` packed into our `Page struct`, we can display the
    **Comments** on the page itself:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将`Comments`打包进我们的`Page struct`中，我们可以在页面上显示**Comments**：
- en: '![Modifying data with PUT](img/B04294_05_03.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![使用PUT修改数据](img/B04294_05_03.jpg)'
- en: Since we're allowing anyone to edit, we'll have to create a form for each item,
    which will allow modifications. In general, HTML forms allow either `GET` or `POST`
    requests, so our hand is forced to utilize `XMLHttpRequest` to send this request.
    For the sake of brevity, we'll utilize jQuery and its `ajax()` method.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们允许任何人进行编辑，我们将不得不为每个项目创建一个表单，这将允许修改。一般来说，HTML表单只允许`GET`或`POST`请求，所以我们被迫使用`XMLHttpRequest`来发送这个请求。为了简洁起见，我们将利用jQuery及其`ajax()`方法。
- en: 'First, for our template''s range for comments:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，对于我们模板中的评论范围：
- en: '[PRE11]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And then for our JavaScript to process the form using `PUT`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们的JavaScript将使用`PUT`来处理表单：
- en: '[PRE12]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To handle this call with the `PUT` verb, we''ll need an update route and function.
    Lets add them now:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理这个使用`PUT`动词的调用，我们需要一个更新路由和函数。现在让我们添加它们：
- en: '[PRE13]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This enables a route, so now we just need to add the corresponding function,
    which will look fairly similar to our `POST`/`Create` method:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就可以启用一个路由，现在我们只需要添加相应的函数，它看起来会和我们的`POST`/`Create`方法非常相似：
- en: '[PRE14]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In short, this takes our form and transforms it into an update to the data based
    on the comment's internal ID. As mentioned, it's not entirely different from our
    `POST` route method, and just like that method it doesn't return any data.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，这将把我们的表单转变为基于评论内部ID的数据更新。正如前面提到的，这与我们的`POST`路由方法并没有完全不同，就像那个方法一样，它也不返回任何数据。
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we've gone from exclusively server-generated HTML presentations
    to dynamic presentations that utilize an API. We've examined the basics of REST
    and implemented a RESTful interface for our blogging application.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们从独占服务器生成的HTML演示转变为利用API的动态演示。我们研究了REST的基础知识，并为我们的博客应用程序实现了一个RESTful接口。
- en: While this can use a lot more client-side polish, we have `GET`/`POST`/`PUT`
    requests that are functional and allow us to create, retrieve, and update comments
    for our blog posts.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这可以使用更多客户端的修饰，但我们有`GET`/`POST`/`PUT`请求是功能性的，并允许我们为我们的博客文章创建、检索和更新评论。
- en: In [Chapter 6](ch06.html "Chapter 6. Sessions and Cookies"), *Session and Cookies*,
    we'll examine user authentication, sessions, and cookies, and how we can take
    the building blocks we've laid in this chapter and apply some very important security
    parameters to it. We had an open-ended creation and updates of comments in this
    chapter; we'll restrict that to unique users in the next.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](ch06.html "第6章。会话和Cookie")，“会话和Cookie”中，我们将研究用户认证、会话和Cookie，以及如何将本章中我们所建立的基本组件应用到一些非常重要的安全参数上。在本章中，我们对评论进行了开放式的创建和更新；我们将在下一章中将其限制为唯一用户。
- en: In doing all of this, we'll turn our proof-of-concept comment management into
    something that can be used in production practically.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这一切，我们将把我们的概念验证评论管理转变为可以在生产中实际使用的东西。
