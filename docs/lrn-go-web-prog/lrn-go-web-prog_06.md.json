["```go\ntype Cookie struct {\n  Name       string\n  Value      string\n  Path       string\n  Domain     string\n  Expires    time.Time\n  RawExpires string\n  MaxAge   int\n  Secure   bool\n  HttpOnly bool\n  Raw      string\n  Unparsed []string\n}\n```", "```go\nCREATE TABLE `users` (\n  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `user_name` varchar(32) NOT NULL DEFAULT '',\n  `user_guid` varchar(256) NOT NULL DEFAULT '',\n  `user_email` varchar(128) NOT NULL DEFAULT '',\n  `user_password` varchar(128) NOT NULL DEFAULT '',\n  `user_salt` varchar(128) NOT NULL DEFAULT '',\n  `user_joined_timestamp` timestamp NULL DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;\n```", "```go\ntype Page struct {\n  Id         int\n  Title      string\n  RawContent string\n  Content    template.HTML\n  Date       string\n  Comments   []Comment\n  Session    Session\n}\n\ntype User struct {\n  Id   int\n  Name string\n}\n\ntype Session struct {\n  Id              string\n  Authenticated   bool\n  Unauthenticated bool\n  User            User\n}\n```", "```go\nCREATE TABLE `sessions` (\n  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `session_id` varchar(256) NOT NULL DEFAULT '',\n  `user_id` int(11) DEFAULT NULL,\n  `session_start` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `session_update` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\n  `session_active` tinyint(1) NOT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `session_id` (`session_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;\n```", "```go\n  routes.HandleFunc(\"/register\", RegisterPOST).\n    Methods(\"POST\").\n    Schemes(\"https\")\n  routes.HandleFunc(\"/login\", LoginPOST).\n    Methods(\"POST\").\n    Schemes(\"https\")\n```", "```go\n{{if .Session.Unauthenticated}}<form action=\"/register\" method=\"POST\">\n  <div><input type=\"text\" name=\"user_name\" placeholder=\"User name\" /></div>\n  <div><input type=\"email\" name=\"user_email\" placeholder=\"Your email\" /></div>\n  <div><input type=\"password\" name=\"user_password\" placeholder=\"Password\" /></div>\n  <div><input type=\"password\" name=\"user_password2\" placeholder=\"Password (repeat)\" /></div>\n  <div><input type=\"submit\" value=\"Register\" /></div>\n</form>{{end}}\n```", "```go\nfunc RegisterPOST(w http.ResponseWriter, r *http.Request) {\n  err := r.ParseForm()\n  if err != nil {\n    log.Fatal(err.Error)\n  }\n  name := r.FormValue(\"user_name\")\n  email := r.FormValue(\"user_email\")\n  pass := r.FormValue(\"user_password\")\n  pageGUID := r.FormValue(\"referrer\")\n  // pass2 := r.FormValue(\"user_password2\")\n  gure := regexp.MustCompile(\"[^A-Za-z0-9]+\")\n  guid := gure.ReplaceAllString(name, \"\")\n  password := weakPasswordHash(pass)\n\n  res, err := database.Exec(\"INSERT INTO users SET user_name=?, user_guid=?, user_email=?, user_password=?\", name, guid, email, password)\n  fmt.Println(res)\n  if err != nil {\n    fmt.Fprintln(w, err.Error)\n  } else {\n    http.Redirect(w, r, \"/page/\"+pageGUID, 301)\n  }\n}\n```", "```go\nfunc weakPasswordHash(password string) []byte {\n  hash := sha1.New()\n  io.WriteString(hash, password)\n  return hash.Sum(nil)\n}\n```", "```go\n<form action=\"/login\" method=\"POST\">\n  <div><input type=\"text\" name=\"user_name\" placeholder=\"User name\" /></div>\n  <div><input type=\"password\" name=\"user_password\" placeholder=\"Password\" /></div>\n  <div><input type=\"submit\" value=\"Log in\" /></div>\n</form>\n```", "```go\npackage main\n\nimport (\n  \"fmt\"\n  \"github.com/gorilla/sessions\"\n  \"log\"\n  \"net/http\"\n)\n\nfunc cookieHandler(w http.ResponseWriter, r *http.Request) {\n  var cookieStore = sessions.NewCookieStore([]byte(\"ideally, some random piece of entropy\"))\n  session, _ := cookieStore.Get(r, \"mystore\")\n  if value, exists := session.Values[\"hello\"]; exists {\n    fmt.Fprintln(w, value)\n  } else {\n    session.Values[\"hello\"] = \"(world)\"\n    session.Save(r, w)\n    fmt.Fprintln(w, \"We just set the value!\")\n  }\n}\n\nfunc main() {\n  http.HandleFunc(\"/test\", cookieHandler)\n  log.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n```", "```go\n    session.Save(r, w)\n    fmt.Fprintln(w, \"We just set the value!\")\n```", "```go\nvar database *sql.DB\nvar sessionStore = sessions.NewCookieStore([]byte(\"our-social-network-application\"))\n```", "```go\nfunc getSessionUID(sid string) int {\n  user := User{}\n  err := database.QueryRow(\"SELECT user_id FROM sessions WHERE session_id=?\", sid).Scan(user.Id)\n  if err != nil {\n    fmt.Println(err.Error)\n    return 0\n  }\n  return user.Id\n}\n```", "```go\nfunc updateSession(sid string, uid int) {\n  const timeFmt = \"2006-01-02T15:04:05.999999999\"\n  tstamp := time.Now().Format(timeFmt)\n  _, err := database.Exec(\"INSERT INTO sessions SET session_id=?, user_id=?, session_update=? ON DUPLICATE KEY UPDATE user_id=?, session_update=?\", sid, uid, tstamp, uid, tstamp)\n  if err != nil {\n    fmt.Println(err.Error)\n  }\n}\n```", "```go\nfunc generateSessionId() string {\n  sid := make([]byte, 24)\n  _, err := io.ReadFull(rand.Reader, sid)\n  if err != nil {\n    log.Fatal(\"Could not generate session id\")\n  }\n  return base64.URLEncoding.EncodeToString(sid)\n}\n```", "```go\nfunc validateSession(w http.ResponseWriter, r *http.Request) {\n  session, _ := sessionStore.Get(r, \"app-session\")\n  if sid, valid := session.Values[\"sid\"]; valid {\n    currentUID := getSessionUID(sid.(string))\n    updateSession(sid.(string), currentUID)\n    UserSession.Id = string(currentUID)\n  } else {\n    newSID := generateSessionId()\n    session.Values[\"sid\"] = newSID\n    session.Save(r, w)\n    UserSession.Id = newSID\n    updateSession(newSID, 0)\n  }\n  fmt.Println(session.ID)\n}\n```", "```go\nvar UserSession Session\n```", "```go\nfunc LoginPOST(w http.ResponseWriter, r *http.Request) {\n  validateSession(w, r)\n```", "```go\n  u := User{}\n  name := r.FormValue(\"user_name\")\n  pass := r.FormValue(\"user_password\")\n  password := weakPasswordHash(pass)\n  err := database.QueryRow(\"SELECT user_id, user_name FROM users WHERE user_name=? and user_password=?\", name, password).Scan(&u.Id, &u.Name)\n  if err != nil {\n    fmt.Fprintln(w, err.Error)\n    u.Id = 0\n    u.Name = \"\"\n  } else {\n    updateSession(UserSession.Id, u.Id)\n    fmt.Fprintln(w, u.Name)\n  }\n```", "```go\npackage main\n\nimport (\n  \"fmt\"\n  \"html/template\"\n  \"log\"\n  \"net/http\"\n  \"time\"\n)\n\nvar (\n  templates = template.Must(template.ParseGlob(\"templates/*\"))\n  port      = \":8080\"\n)\n\nfunc startHandler(w http.ResponseWriter, r *http.Request) {\n  err := templates.ExecuteTemplate(w, \"ch6-flash.html\", nil)\n  if err != nil {\n    log.Fatal(\"Template ch6-flash missing\")\n  }\n}\n```", "```go\nfunc middleHandler(w http.ResponseWriter, r *http.Request) {\n  cookieValue := r.PostFormValue(\"message\")\n  cookie := http.Cookie{Name: \"message\", Value: \"message:\" + cookieValue, Expires: time.Now().Add(60 * time.Second), HttpOnly: true}\n  http.SetCookie(w, &cookie)\n  http.Redirect(w, r, \"/finish\", 301)\n}\n```", "```go\nfunc finishHandler(w http.ResponseWriter, r *http.Request) {\n  cookieVal, _ := r.Cookie(\"message\")\n\n  if cookieVal != nil {\n    fmt.Fprintln(w, \"We found: \"+string(cookieVal.Value)+\", but try to refresh!\")\n    cookie := http.Cookie{Name: \"message\", Value: \"\", Expires: time.Now(), HttpOnly: true}\n    http.SetCookie(w, &cookie)\n  } else {\n    fmt.Fprintln(w, \"That cookie was gone in a flash\")\n  }\n\n}\n```", "```go\nfunc main() {\n\n  http.HandleFunc(\"/start\", startHandler)\n  http.HandleFunc(\"/middle\", middleHandler)\n  http.HandleFunc(\"/finish\", finishHandler)\n  log.Fatal(http.ListenAndServe(port, nil))\n\n}\n```", "```go\n<html>\n<head><title>Flash Message</title></head>\n<body>\n<form action=\"/middle\" method=\"POST\">\n  <input type=\"text\" name=\"message\" />\n  <input type=\"submit\" value=\"Send Message\" />\n</form>\n</body>\n</html>\n```"]