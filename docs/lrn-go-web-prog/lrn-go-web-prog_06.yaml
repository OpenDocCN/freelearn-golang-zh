- en: Chapter 6. Sessions and Cookies
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 会话和Cookie
- en: Our application is beginning to get a little more real now; in the previous
    chapter, we added some APIs and client-side interfaces to them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用现在开始变得更加真实；在上一章中，我们为它们添加了一些API和客户端接口。
- en: In our application's current state, we've added `/api/comments`, `/api/comments/[id]`,
    `/api/pages`, and `/api/pages/[id]`, thus making it possible for us to get and
    update our data in JSON format and making the application better suited for Ajax
    and client-side access.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们应用的当前状态下，我们已经添加了`/api/comments`、`/api/comments/[id]`、`/api/pages`和`/api/pages/[id]`，这样我们就可以以JSON格式获取和更新我们的数据，并使应用更适合Ajax和客户端访问。
- en: Though we can now add comments and edit them directly through our API, there
    is absolutely no restriction on who can perform these actions. In this chapter,
    we'll look at the ways to limit access to certain assets, establishing identities,
    and securely authenticating when we have them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们现在可以通过我们的API直接添加评论和编辑评论，但是对谁可以执行这些操作没有任何限制。在本章中，我们将探讨限制对某些资产的访问、建立身份和在拥有它们时进行安全认证的方法。
- en: By the end, we should be able to enable users to register and log in and utilize
    sessions, cookies, and flash messages to keep user state in our application in
    a secure way.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我们应该能够让用户注册和登录，并利用会话、cookie和闪存消息以安全的方式在我们的应用中保持用户状态。
- en: Setting cookies
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置cookie
- en: The most common, fundamental, and simplest way to create persistent memory across
    a user's session is by utilizing cookies.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 创建持久内存跨用户会话的最常见、基本和简单的方式是利用cookie。
- en: Cookies provide a way to share state information across requests, URL endpoints,
    and even domains, and they have been used (and abused) in every possible way.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Cookie提供了一种在请求、URL端点甚至域之间共享状态信息的方式，并且它们已经被以各种可能的方式使用（和滥用）。
- en: Most often, they're used to keep a track of identity. When a user logs into
    a service, successive requests can access some aspects of the previous request
    (without duplicating a lookup or the login module) by utilizing the session information
    stored in a cookie.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 它们通常用于跟踪身份。当用户登录到一个服务时，后续的请求可以通过利用存储在cookie中的会话信息来访问前一个请求的某些方面（而不需要重复查找或登录模块）。
- en: 'If you''re familiar with cookies in any other language''s implementation, the
    basic `struct` will look familiar. Even so, the following relevant attributes
    are fairly lockstep with the way a cookie is presented to the client:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉其他语言中cookie的实现，基本的`struct`会很熟悉。即便如此，以下相关属性与向客户端呈现cookie的方式基本一致：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: That's a lot of attributes for a very basic `struct`, so let's focus on the
    important ones.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个非常基本的`struct`来说，这是很多属性，所以让我们专注于重要的属性。
- en: The `Name` attribute is simply a key for the cookie. The `Value` attribute represents
    its contents and `Expires` is a `Time` value for the moment when the cookie should
    be flushed by a browser or another headless recipient. This is all you need in
    order to set a valid cookie that lasts in Go.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`Name`属性只是cookie的键。`Value`属性代表其内容，`Expires`是一个`Time`值，表示cookie应该被浏览器或其他无头接收者刷新的时间。这就是你在Go中设置一个有效cookie所需要的一切。'
- en: Beyond the basics, you may find setting a `Path`, `Domain`, and `HttpOnly` useful,
    if you want to lock down the accessibility of the cookie.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基础知识，如果你想要限制cookie的可访问性，你可能会发现设置`Path`、`Domain`和`HttpOnly`是有用的。
- en: Capturing user information
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 捕获用户信息
- en: When a user with a valid session and`/`or cookie attempts to access restricted
    data, we need to get that from the user's browser.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个具有有效会话和/或cookie的用户尝试访问受限数据时，我们需要从用户的浏览器中获取它。
- en: A session itself is just that—a single session on the site. It doesn't naturally
    persist indefinitely, so we need to leave a breadcrumb, but we also want to leave
    one that's relatively secure.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一个会话本身就是一个在网站上的单个会话。它并不会自然地无限期持续，所以我们需要留下一个线索，但我们也希望留下一个相对安全的线索。
- en: For example, we would never want to leave critical user information in the cookie,
    such as name, address, email, and so on.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们绝不希望在cookie中留下关键的用户信息，比如姓名、地址、电子邮件等等。
- en: However, any time we have some identifying information, we leave some vector
    for misdeed—in this case we'll likely leave a session identifier that represents
    our session ID. The vector in this case allows someone, who obtains this cookie,
    to log in as one of our users and change information, find billing details, and
    so on.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，每当我们有一些标识信息时，我们都会留下一些不良行为的可能性——在这种情况下，我们可能会留下代表我们会话ID的会话标识符。在这种情况下，这个向量允许获得这个cookie的人以我们其中一个用户的身份登录并更改信息，查找账单详情等等。
- en: These types of physical attack vectors are well outside the scope of this (and
    most) application and to a large degree, it's a concession that if someone loses
    access to their physical machine, they can also have their account compromised.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型的物理攻击向量远远超出了这个（以及大多数）应用的范围，而且在很大程度上，这是一个让步，即如果有人失去了对他们的物理机器的访问权限，他们也可能会遭受账户被破坏的风险。
- en: What we want to do here is ensure that we're not transmitting personal or sensitive
    information over clear text or without a secure connection. We'll cover setting
    up TLS in [Chapter 9](ch09.html "Chapter 9. Security"), *Security*, so here we
    want to focus on limiting the amount of information we store in our cookies.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们想要做的是确保我们不会在明文或没有安全连接的情况下传输个人或敏感信息。我们将在[第9章](ch09.html "第9章 安全") *安全*中介绍如何设置TLS，所以在这里我们想要专注于限制我们在cookie中存储的信息量。
- en: Creating users
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建用户
- en: 'In the previous chapter, we allowed non-authorized requests to create new comments
    by hitting our REST API via a `POST`. Anyone who''s been on the Internet for a
    while knows a few truisms, such as:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们允许非授权的请求通过`POST`命中我们的REST API来创建新的评论。在互联网上待了一段时间的人都知道一些真理，比如：
- en: The comments section is often the most toxic part of any blog or news post
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 评论部分通常是任何博客或新闻帖子中最有毒的部分
- en: Step 1 is true, even when users have to authenticate in non-anonymous ways
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 即使用户必须以非匿名的方式进行身份验证，步骤1也是正确的
- en: Now, let's lock down the comments section to ensure that users have registered
    themselves and are logged in.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们限制评论部分，以确保用户已注册并已登录。
- en: We won't go deep into the authentication's security aspects now, as we'll be
    going deeper with that in [Chapter 9](ch09.html "Chapter 9. Security"), *Security*.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在不会深入探讨身份验证的安全方面，因为我们将在[第9章](ch09.html "第9章. 安全") *安全*中更深入地讨论这个问题。
- en: 'First, let''s add a `users` table in our database:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在我们的数据库中添加一个`users`表：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We could surely go a lot deeper with user information, but this is enough to
    get us started. As mentioned, we won't go too deep into security, so we'll just
    generate a hash for the password now and not worry about the salt.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当然可以深入研究用户信息，但这已经足够让我们开始了。正如前面提到的，我们不会深入研究安全性，所以现在我们只是为密码生成一个哈希值，不用担心盐。
- en: 'Finally, to enable sessions and users in the app, we''ll make some changes
    to our structs:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了在应用程序中启用会话和用户，我们将对我们的structs进行一些更改：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: And here are the two stub handlers for registration and logging in. Again, we're
    not putting our full effort into fleshing these out into something robust, we
    just want to open the door a bit.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用于注册和登录的两个存根处理程序。同样，我们并没有将全部精力投入到将它们完善成健壮的东西，我们只是想打开一点门。
- en: Enabling sessions
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用会话
- en: In addition to storing the users themselves, we'll also want some way of persistent
    memory for accessing our cookie data. In other words, when a user's browser session
    ends and they come back, we'll validate and reconcile their cookie value against
    values in our database.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 除了存储用户本身之外，我们还需要一种持久性内存的方式来访问我们的cookie数据。换句话说，当用户的浏览器会话结束并且他们回来时，我们将验证和调和他们的cookie值与我们数据库中的值。
- en: 'Use this SQL to create the `sessions` table:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此SQL创建`sessions`表：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The most important values are the `user_id`, `session_id`, and the timestamps
    for updating and starting. We can use the latter two to decide if a session is
    actually valid after a certain period. This is a good security practice, just
    because a user has a valid cookie doesn't necessarily mean that they should remain
    authenticated, particularly if you're not using a secure connection.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的值是`user_id`、`session_id`和更新和开始的时间戳。我们可以使用后两者来决定在一定时间后会话是否实际上是有效的。这是一个很好的安全实践，仅仅因为用户有一个有效的cookie并不一定意味着他们应该保持身份验证，特别是如果您没有使用安全连接。
- en: Letting users register
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让用户注册
- en: To be able to allow users to create accounts themselves, we'll need a form for
    both registering and logging in. Now, most systems similar to this do some multi-factor
    authentication to allow a user backup system for retrieval as well as validation
    that the user is real and unique. We'll get there, but for now let's keep it as
    simple as possible.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让用户能够自行创建账户，我们需要一个注册和登录的表单。现在，大多数类似的系统都会进行一些多因素身份验证，以允许用户备份系统进行检索，并验证用户的真实性和唯一性。我们会做到这一点，但现在让我们尽可能简单。
- en: 'We''ll set up the following endpoints to allow a user to `POST` both the register
    and login forms:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将设置以下端点，允许用户`POST`注册和登录表单：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Keep in mind that these are presently set to the HTTPS scheme. If you're not
    using that, remove that part of the `HandleFunc` register.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这些目前设置为HTTPS方案。如果您不使用HTTPS，请删除`HandleFunc`注册的部分。
- en: 'Since we''re only showing these following views to unauthenticated users, we
    can put them on our `blog.html` template and wrap them in `{{if .Session.Unauthenticated}}
    … {{end}}` template snippets. We defined `.Unauthenticated` and `.Authenticated`
    in the application under the `Session` `struct`, as shown in the following example:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们只向未经身份验证的用户显示以下视图，我们可以将它们放在我们的`blog.html`模板中，并将它们包裹在`{{if .Session.Unauthenticated}}
    … {{end}}`模板片段中。我们在应用程序中的`Session` `struct`下定义了`.Unauthenticated`和`.Authenticated`，如下例所示：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And our `/register` endpoint:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 和我们的`/register`端点：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that this fails inelegantly for a number of reasons. If the passwords do
    not match, we don't check and report to the user. If the user already exists,
    we don't tell them the reason for a registration failure. We'll get to that, but
    now our main intent is producing a session.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于多种原因，这种方式并不优雅。如果密码不匹配，我们不会检查并向用户报告。如果用户已经存在，我们也不会告诉他们注册失败的原因。我们会解决这个问题，但现在我们的主要目的是生成一个会话。
- en: 'For reference, here''s our `weakPasswordHash` function, which is only intended
    to generate a hash for testing:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 供参考，这是我们的`weakPasswordHash`函数，它只用于生成测试哈希：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Letting users log in
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让用户登录
- en: 'A user may be already registered; in which case, we''ll also want to provide
    a login mechanism on the same page. This can obviously be subject to better design
    considerations, but we just want to make them both available:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可能已经注册过了；在这种情况下，我们也希望在同一个页面上提供登录机制。这显然可以根据更好的设计考虑来实现，但我们只是想让它们都可用：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: And then we'll need receiving endpoints for each POSTed form. We're not going
    to do a lot of validation here either, but we're not in a position to validate
    a session.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将需要为每个POST表单设置接收端点。我们在这里也不会进行太多的验证，但我们也没有验证会话的位置。
- en: Initiating a server-side session
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动服务器端会话
- en: One of the most common ways of authenticating a user and saving their state
    on the Web is through sessions. You may recall that we mentioned in the last chapter
    that REST is stateless, the primary reason for that is because HTTP itself is
    stateless.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web上验证用户并保存其状态的最常见方式之一是通过会话。您可能还记得我们在上一章中提到过REST是无状态的，这主要是因为HTTP本身是无状态的。
- en: If you think about it, to establish a consistent state with HTTP, you need to
    include a cookie or a URL parameter or something that is not built into the protocol
    itself.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您考虑一下，要建立与HTTP一致的状态，您需要包括一个cookie或URL参数或其他不是协议本身内置的东西。
- en: Sessions are created with unique identifiers that are usually not entirely random
    but unique enough to avoid conflicts for most logical and plausible scenarios.
    This is not absolute, of course, and there are plenty of (historical) examples
    of session token hijacking that are not related to sniffing.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 会话是使用通常不是完全随机但足够唯一以避免大多数逻辑和合理情况下的冲突的唯一标识符创建的。当然，这并不是绝对的，当然，有很多（历史上的）会话令牌劫持的例子与嗅探无关。
- en: Session support as a standalone process does not exist in Go core. Given that
    we have a storage system on the server side, this is somewhat irrelevant. If we
    create a safe process for generation of server keys, we can store them in secure
    cookies.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个独立的过程，会话支持在Go核心中并不存在。鉴于我们在服务器端有一个存储系统，这有点无关紧要。如果我们为生成服务器密钥创建一个安全的过程，我们可以将它们存储在安全的cookie中。
- en: But generating session tokens is not completely trivial. We can do this using
    a set of available cryptographic methods, but with session hijacking as a very
    prevalent way of getting into systems without authorization, that may be a point
    of insecurity in our application.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 但生成会话令牌并不完全是微不足道的。我们可以使用一组可用的加密方法来实现这一点，但是由于会话劫持是一种非常普遍的未经授权进入系统的方式，这可能是我们应用程序中的一个不安全的点。
- en: Since we're already using the Gorilla toolkit, the good news is that we don't
    have to reinvent the wheel, there's a robust session system in place.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经在使用Gorilla工具包，好消息是我们不必重新发明轮子，已经有一个强大的会话系统。
- en: Not only do we have access to a server-side session, but we get a very convenient
    tool for one-time messages within a session. These work somewhat similar to a
    message queue in the manner that once data goes into them, the flash message is
    no longer valid when that data is retrieved.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅可以访问服务器端会话，而且还可以获得一个非常方便的工具，用于会话中的一次性消息。这些工作方式与消息队列有些类似，一旦数据进入其中，当数据被检索时，闪存消息就不再有效。
- en: Creating a store
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建存储
- en: 'To utilize the Gorilla sessions, we first need to invoke a cookie store, which
    will hold all the variables that we want to keep associated with a user. You can
    test this out pretty easily by the following code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Gorilla会话，我们首先需要调用一个cookie存储，它将保存我们想要与用户关联的所有变量。您可以通过以下代码很容易地测试这一点：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The first time you hit your URL and endpoint, you''ll see **We just set the
    value!**, as shown in the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次访问您的URL和端点时，您将看到**我们刚刚设置了值！**，如下面的截图所示：
- en: '![Creating a store](img/B04294_06_04.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![创建存储](img/B04294_06_04.jpg)'
- en: 'In the second request, you should see **(world)**, as shown in the following
    screenshot:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个请求中，您应该看到**(world)**，如下面的截图所示：
- en: '![Creating a store](img/B04294_06_05.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![创建存储](img/B04294_06_05.jpg)'
- en: 'A couple of notes here. First, you must set cookies before sending anything
    else through your `io.Writer` (in this case the `ResponseWriter w`). If you flip
    these lines:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几点需要注意。首先，在通过`io.Writer`（在这种情况下是`ResponseWriter w`）发送任何其他内容之前，您必须设置cookies。如果您交换这些行：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You can see this in action. You'll never get the value set to your cookie store.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到这个过程。您永远不会得到设置为cookie存储的值。
- en: So now, let's apply it to our application. We will want to initiate a session
    store before any requests to `/login` or `/register`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将其应用到我们的应用程序中。我们将在对`/login`或`/register`的任何请求之前初始化一个会话存储。
- en: 'We''ll initialize a global `sessionStore`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将初始化一个全局的`sessionStore`：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Feel free to group these, as well, in a `var ()`. Next, we'll want to create
    four simple functions that will get an active session, update a current one, generate
    a session ID, and evaluate an existing cookie. These will allow us to check if
    a user is logged in by a cookie's session ID and enable persistent logins.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以自由地将这些分组在`var()`中。接下来，我们将创建四个简单的函数，用于获取活动会话，更新当前会话，生成会话ID，并评估现有的cookie。这将允许我们通过cookie的会话ID检查用户是否已登录，并启用持久登录。
- en: 'First, the `getSessionUID` function, which will return a user''s ID if a session
    already exists:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是`getSessionUID`函数，如果会话已经存在，它将返回用户的ID：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, the update function, which will be called with every front-facing request,
    thus enabling a timestamp update or inclusion of a user ID if a new log in is
    attempted:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是更新函数，它将在每个面向前端的请求中调用，从而使时间戳更新或者在尝试新的登录时包含用户ID：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'An important part is the ability to generate a strongly-random byte array (cast
    to string) that will allow unique identifiers. We do that with the following `generateSessionId()`
    function:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要的部分是能够生成一个强大的随机字节数组（转换为字符串），以允许唯一的标识符。我们可以通过以下`generateSessionId()`函数来实现：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: And finally, we have the function that will be called with every request to
    check for a cookie's session or create one if it doesn't exist.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有一个函数，它将在每个请求中被调用，检查cookie的会话是否存在，如果不存在则创建一个。
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This is predicated on having a global `Session struct`, in this case defined
    as:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是建立在有一个全局的`Session struct`的基础上的，在这种情况下定义如下：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This leaves us with just one piece—to call `validateSession()` on our `ServePage()`
    method and `LoginPost()` method and then validate the passwords on the latter
    and update our session on a successful login attempt:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我们只剩下一个部分——在我们的`ServePage()`方法和`LoginPost()`方法上调用`validateSession()`，然后在后者上验证密码并在成功登录尝试时更新我们的会话：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In our previously defined check against the form values, if a valid user is
    found, we''ll update the session directly:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前定义的对表单值的检查中，如果找到一个有效的用户，我们将直接更新会话：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Utilizing flash messages
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用闪存消息
- en: As mentioned earlier in this chapter, Gorilla sessions offer a simple system
    to utilize a single-use and cookie-based data transfer between requests.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章前面提到的，Gorilla会话提供了一种简单的系统，用于在请求之间利用基于单次使用和基于cookie的数据传输。
- en: 'The idea behind a flash message is not all that different than an in-browser/server
    message queue. It''s most frequently utilized in a process such as this:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 闪存消息背后的想法与浏览器/服务器消息队列并没有太大的不同。它最常用于这样的过程：
- en: A form is POSTed
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个表单被提交
- en: The data is processed
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据被处理
- en: A header redirect is initiated
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发起一个头部重定向
- en: The resulting page needs some access to information about the `POST` process
    (success, error)
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成的页面需要一些关于`POST`过程（成功、错误）的信息访问
- en: At the end of this process, the message should be removed so that the message
    is not duplicated erroneously at some other point. Gorilla makes this incredibly
    easy, and we'll look at that shortly, but it makes sense to show a quick example
    of how this can be accomplished in native Go.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程结束时，应该删除消息，以便消息不会在其他地方错误地重复。Gorilla使这变得非常容易，我们很快就会看到，但是展示一下如何在原生Go中实现这一点是有意义的。
- en: 'To start, we''ll create a simple HTTP server that includes a starting point
    handler called `startHandler`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个包含起始点处理程序`startHandler`的简单HTTP服务器：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We''re not doing anything special here, just rendering our form:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里没有做任何特别的事情，只是渲染我们的表单：
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Our `middleHandler` demonstrates creating cookies through a `Cookie struct`,
    as described earlier in this chapter. There''s nothing important to note here
    except the fact that you may want to extend the expiration out a bit, just to
    ensure that there''s no way a cookie could expire (naturally) between requests:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`middleHandler`演示了通过`Cookie struct`创建cookie，正如本章前面所述。这里没有什么重要的要注意，除了您可能希望将到期时间延长一点，以确保在请求之间没有办法使cookie过期（自然地）：
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `finishHandler` function does the magic of a flash message—removes the
    cookie if and only if a value has been found. This ensures that the cookie is
    a one-time retrievable value:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`finishHandler`函数执行闪存消息的魔术——仅在找到值时删除cookie。这确保了cookie是一次性可检索的值：'
- en: '[PRE22]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The following example is our HTML for POSTing our cookie value to the `/middle`
    handler:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例是我们用于将我们的cookie值POST到`/middle`处理程序的HTML：
- en: '[PRE23]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If you do as the page suggests and refresh again, the cookie value would have
    been removed and the page will not render, as you've previously seen.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您按照页面的建议再次刷新，cookie值将被删除，页面将不会呈现，就像您之前看到的那样。
- en: 'To begin the flash message, we hit our `/start` endpoint and enter an intended
    value and then click on the **Send Message** button:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始闪存消息，我们点击我们的`/start`端点，并输入一个预期的值，然后点击**发送消息**按钮：
- en: '![Utilizing flash messages](img/B04294_06_01.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![利用闪存消息](img/B04294_06_01.jpg)'
- en: 'At this point, we''ll be sent to the `/middle` endpoint, which will set the
    cookie value and HTTP redirect to `/finish`:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们将被发送到`/middle`端点，该端点将设置cookie值并将HTTP重定向到`/finish`：
- en: '![Utilizing flash messages](img/B04294_06_02.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![利用闪存消息](img/B04294_06_02.jpg)'
- en: 'And now we can see our value. Since the `/finish` endpoint handler also unsets
    the cookie, we''ll be unable to retrieve that value again. Here''s what happens
    if we do what `/finish` tells us on its first appearance:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到我们的价值。由于`/finish`端点处理程序还取消了cookie，我们将无法再次检索该值。如果我们在第一次出现时按照`/finish`的指示做什么，会发生什么：
- en: '![Utilizing flash messages](img/B04294_06_03.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![利用闪存消息](img/B04294_06_03.jpg)'
- en: That's all for now.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些了。
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Hopefully by this point you have a grasp of how to utilize basic cookies and
    sessions in Go, either through native Go or through the use of a framework, such
    as Gorilla. We've tried to demonstrate the inner workings of the latter so you're
    able to build without additional libraries obfuscating the functionality.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 希望到目前为止，您已经掌握了如何在Go中利用基本的cookie和会话，无论是通过原生Go还是通过使用Gorilla等框架。我们已经尝试演示了后者的内部工作原理，以便您能够在不使用额外库混淆功能的情况下进行构建。
- en: We've implemented sessions into our application to enable persistent state between
    requests. This is the very basis of authentication for the Web. By enabling `users`
    and `sessions` table in our database, we're able to log users in, register a session,
    and associate that session with the proper user on subsequent requests.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将会话实现到我们的应用程序中，以实现请求之间的持久状态。这是Web身份验证的基础。通过在数据库中启用`users`和`sessions`表，我们能够登录用户，注册会话，并在后续请求中将该会话与正确的用户关联起来。
- en: By utilizing flash messages, we made use of a very specific feature that allows
    transfer of information between two endpoints without enabling an additional request
    that may look like an error to the user or generate erroneous output. Our flash
    messages works just once and then expire.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用闪存消息，我们利用了一个非常特定的功能，允许在两个端点之间传输信息，而不需要启用可能看起来像错误或生成错误输出的额外请求。我们的闪存消息只能使用一次，然后过期。
- en: In [Chapter 7](ch07.html "Chapter 7. Microservices and Communication"), *Microservices
    and Communication*, we'll look at connecting disparate systems and applications
    across our existing and new APIs to allow event-based actions to be coordinated
    between those systems. This will facilitate connecting to other services within
    the same environment as well as those outside of our application.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](ch07.html "第7章. 微服务和通信")中，*微服务和通信*，我们将研究如何连接现有和新API之间的不同系统和应用程序，以允许基于事件的操作在这些系统之间协调。这将有助于连接到同一环境中的其他服务，以及应用程序之外的服务。
