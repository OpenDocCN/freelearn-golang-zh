["```go\npackage main\n\nimport (\n  \"log\"\n  \"os\"\n)\nvar (\n  Warn   *log.Logger\n  Error  *log.Logger\n  Notice *log.Logger\n)\nfunc main() {\n  warnFile, err := os.OpenFile(\"warnings.log\", os.O_RDWR|os.O_APPEND, 0660)\n  defer warnFile.Close()\n  if err != nil {\n    log.Fatal(err)\n  }\n  errorFile, err := os.OpenFile(\"error.log\", os.O_RDWR|os.O_APPEND, 0660)\n  defer errorFile.Close()\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  Warn = log.New(warnFile, \"WARNING: \", Log.LstdFlags\n)\n\n  Warn.Println(\"Messages written to a file called 'warnings.log' are likely to be ignored :(\")\n\n  Error = log.New(errorFile, \"ERROR: \", log.Ldate|log.Ltime)\n  Error.SetOutput(errorFile)\n  Error.Println(\"Error messages, on the other hand, tend to catch attention!\")\n}\n```", "```go\n  res, err := database.Exec(\"INSERT INTO users SET user_name=?, user_guid=?, user_email=?, user_password=?\", name, guid, email, passwordEnc)\n\n  if err != nil {\n    fmt.Fprintln(w, err.Error)\n    RegError.Println(\"Could not complete registration:\", err.Error)\n  } else {\n    http.Redirect(w, r, \"/page/\"+pageGUID, 301)\n  }\n```", "```go\npackage main\n\nimport (\n  \"log\"\n  \"os\"\n)\n\nvar (\n  Warn   *log.Logger\n  Error  *log.Logger\n  Notice *log.Logger\n)\n\nfunc main() {\n  warnFile, err := os.OpenFile(\"warnings.log\", os.O_RDWR|os.O_APPEND, 0660)\n  defer warnFile.Close()\n  if err != nil {\n    log.Fatal(err)\n  }\n  Warn = log.New(warnFile, \"WARNING: \", log.Ldate|log.Ltime)\n\n  Warn.Println(\"Messages written to a file called 'warnings.log' are likely to be ignored :(\")\n  log.Println(\"Done!\")\n}\n```", "```go\n  if err != nil {\n    fmt.Fprintln(w, err.Error)\n    RegError.Println(\"Could not complete registration:\", err.Error)\n    panic(\"Error with registration,\")\n  } else {\n    http.Redirect(w, r, \"/page/\"+pageGUID, 301)\n  }\n```", "```go\n  res, err := database.Exec(\"INSERT INTENTIONAL_ERROR INTO users SET user_name=?, user_guid=?, user_email=?, user_password=?\", name, guid, email, passwordEnc)\n```", "```go\npackage example\n\nfunc Square(x int) int {\n  y := x * x\n  return y\n}\n```", "```go\npackage example\n\nimport (\n  \"testing\"\n)\n\nfunc TestSquare(t *testing.T) {\n  if v := Square(4); v != 16 {\n    t.Error(\"expected\", 16, \"got\", v)\n  }\n}\n```", "```go\nfunc Square(x int) int {\n  y := x\n  return y\n}\n```", "```go\npackage main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"time\"\n)\n\nfunc testHandler(w http.ResponseWriter, r *http.Request) {\n  t := time.Now()\n  fmt.Fprintln(w, t.YearDay())\n}\n\nfunc main() {\n  http.HandleFunc(\"/test\", testHandler)\n  http.ListenAndServe(\":8080\", nil)\n}\n```", "```go\npackage main\n\nimport (\n  \"io/ioutil\"\n  \"net/http\"\n  \"net/http/httptest\"\n  \"testing\"\n)\n\nfunc TestHandler(t *testing.T) {\n  res := httptest.NewRecorder()\n  path := \"http://localhost:4000/test\"\n  o, err := http.NewRequest(\"GET\", path, nil)\n  http.DefaultServeMux.ServeHTTP(res, req)\n  response, err := ioutil.ReadAll(res.Body)\n  if string(response) != \"115\" || err != nil {\n    t.Errorf(\"Expected [], got %s\", string(response))\n  }\n}\n```", "```go\npackage main\n\nimport (\n  \"net/http\"\n  \"net/http/httptest\"\n  \"testing\"\n)\n\nfunc TestHelloWorld(t *testing.T) {\n\n  req, err := http.NewRequest(\"GET\", \"/page/hello-world\", nil)\n  if err != nil {\n    t.Fatal(\"Creating 'GET /page/hello-world' request failed!\")\n  }\n  rec := httptest.NewRecorder()\n  Router().ServeHTTP(rec, req)\n}\n```"]