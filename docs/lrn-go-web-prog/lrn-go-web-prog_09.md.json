["```go\n  var wg sync.WaitGroup\n  wg.Add(1)\n  go func() {\n    http.ListenAndServe(PORT, http.HandlerFunc(redirectNonSecure))\n    wg.Done()\n  }()\n  wg.Add(1)\n  go func() {\n    http.ListenAndServeTLS(SECUREPORT, \"cert.pem\", \"key.pem\", routes)\n    wg.Done()\n  }()\n\n  wg.Wait()\n```", "```go\nfunc redirectNonSecure(w http.ResponseWriter, r *http.Request) {\n  log.Println(\"Non-secure request initiated, redirecting.\")\n  redirectURL := \"https://\" + serverName + r.RequestURI\n  http.Redirect(w, r, redirectURL, http.StatusMovedPermanently)\n}\n```", "```go\nStrict-Transport-Security: max-age=31536000; includeSubDomains; preload\n```", "```go\nerr := database.QueryRow(\"SELECT page_title,page_content,page_date FROM pages WHERE page_guid=\"+requestGUID, pageGUID).Scan(&thisPage.Title, &thisPage.Content, &thisPage.Date)\n```", "```go\n  routes.HandleFunc(\"/page/{guid:[0-9a-zA\\\\-]+}\", ServePage)\n  routes.HandleFunc(\"/api/page/{id:[\\\\w\\\\d\\\\-]+}\", APIPage).\n    Methods(\"GET\").\n    Schemes(\"https\")\n```", "```go\n  err := database.QueryRow(\"SELECT page_title,page_content,page_date FROM pages WHERE page_guid=?\", pageGUID).Scan(&thisPage.Title, &thisPage.Content, &thisPage.Date)\n  if err != nil {\n    http.Error(w, http.StatusText(404), http.StatusNotFound)\n    log.Println(\"Couldn't get page!\")\n    return\n  }\n```", "```go\nres, err := db.Exec(\"INSERT INTO table SET field=?, field2=?\", value1, value2)\nrows, err := db.Query(\"SELECT * FROM table WHERE field2=?\",value2)\nstatement, err := db.Prepare(\"SELECT * FROM table WHERE field2=?\",value2)\nrow, err := db.QueryRow(\"SELECT * FROM table WHERE field=?\",value1)\n```", "```go\ntemplate.HTMLEscapeString(string)\ntemplate.JSEscapeString(inputData)\n```", "```go\npackage main\n\nimport (\n  \"fmt\"\n  \"github.com/gorilla/mux\"\n  \"html/template\"\n  \"net/http\"\n)\n\nfunc HTMLHandler(w http.ResponseWriter, r *http.Request) {\n  input := r.URL.Query().Get(\"input\")\n  fmt.Fprintln(w, input)\n}\n\nfunc HTMLHandlerSafe(w http.ResponseWriter, r *http.Request) {\n  input := r.URL.Query().Get(\"input\")\n  input = template.HTMLEscapeString(input)\n  fmt.Fprintln(w, input)\n}\n\nfunc JSHandler(w http.ResponseWriter, r *http.Request) {\n  input := r.URL.Query().Get(\"input\")\n  fmt.Fprintln(w, input)\n}\n\nfunc JSHandlerSafe(w http.ResponseWriter, r *http.Request) {\n  input := r.URL.Query().Get(\"input\")\n  input = template.JSEscapeString(input)\n  fmt.Fprintln(w, input)\n}\n\nfunc main() {\n  router := mux.NewRouter()\n  router.HandleFunc(\"/html\", HTMLHandler)\n  router.HandleFunc(\"/js\", JSHandler)\n  router.HandleFunc(\"/html_safe\", HTMLHandlerSafe)\n  router.HandleFunc(\"/js_safe\", JSHandlerSafe)\n  http.ListenAndServe(\":8080\", router)\n}\n```", "```go\n<h1>Post to our guestbook (and not twitter, we swear!)</h1>\n  <form action=\"https://www.twitter.com/tweet\" method=\"POST\">\n  <input type=\"text\" placeholder=\"Your Name\" />\n  <textarea placeholder=\"Your Message\"></textarea>\n  <input type=\"hidden\" name=\"tweet_message\" value=\"Make sure to check out this awesome, malicious site and post on their guestbook\" />\n  <input type=\"submit\" value=\"Post ONLY to our guestbook\" />\n</form>\n```", "```go\n    Authorize.TemplateTag = csrf.TemplateField(r)\n    t.ExecuteTemplate(w, \"signup_form.tmpl\", Authorize)\n```", "```go\n    http.ListenAndServe(PORT, csrf.Protect([]byte(\"32-byte-long-auth-key\"))(r))\n```", "```go\nvar hashKey = []byte(\"secret hash key\")\nvar blockKey = []byte(\"secret-er block key\")\nvar secureKey = securecookie.New(hashKey, blockKey)\n```"]