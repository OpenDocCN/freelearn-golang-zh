- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: I just love new programming languages. Perhaps it's the inevitable familiarity
    and ennui with regard to existing languages and the frustration with existing
    tools, syntaxes, coding conventions, and performance. Maybe I'm just hunting for
    that one "language to rule them all". Whatever the reason, any time a new or experimental
    language is released, I have to dive right in.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我就是喜欢新的编程语言。也许是因为对现有语言的熟悉和厌倦，对现有工具、语法、编码约定和性能的挫败感。也许我只是在寻找那个“统治它们所有”的语言。无论原因是什么，每当有新的或实验性的语言发布时，我都会迫不及待地去尝试。
- en: 'This has been a golden age for new languages and language design. Think about
    it: the C language was released in the early 1970s—a time when resources were
    so scarce that verbosity, clarity, and syntactical logic were often eschewed for
    thrift. And most of the languages we use today were either originally written
    in this era or were directly influenced by those languages.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个新语言和语言设计的黄金时代。想想看：C语言是在20世纪70年代初发布的——那个时候资源是如此稀缺，以至于冗长、清晰和语法逻辑经常被节俭所取代。今天我们使用的大多数语言要么是在这个时代原创写成的，要么直接受到了这些语言的影响。
- en: Since the late 1980s and early 1990s, there has been a slow flood of powerful
    new languages and paradigms—Perl, Python, Ruby, PHP, and JavaScript—have taken
    an expanding user base by storm and has become one of the most popular languages
    (up there with stalwarts such as C, C++, and Java). Multithreading, memory caching,
    and APIs have allowed multiple processes, dissonant languages, applications, and
    even separate operating systems to work in congress.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 自20世纪80年代末和90年代初以来，强大的新语言和范式——Perl、Python、Ruby、PHP和JavaScript——已经成为了一个不断扩大的用户群体，并成为最受欢迎的语言之一（与C、C++和Java等老牌语言一样）。多线程、内存缓存和API使多个进程、不同的语言、应用程序，甚至是不同的操作系统能够协同工作。
- en: 'And while this is great, there''s a niche that until very recently was largely
    unserved: powerful, compiled, cross-platform languages with concurrency support
    that are geared towards systems programmers.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这很棒，但直到最近，有一个领域一直未得到很好的满足：强大的、编译的、跨平台的语言，支持并发，面向系统程序员。
- en: Very few languages match these parameters. Sure, there have been lower-level
    languages that fulfill some of these characteristics. Erlang and Haskell fit the
    bill in terms of power and language design, but as functional languages they pose
    a learning barrier for systems programmers coming from a C/Java background. Objective-C
    and C# are relatively easy, powerful, and have concurrency support—but they're
    bound enough to a specific OS to make programming for other platforms arduous.
    The languages we just mentioned (Python, JavaScript, and so on)—while extremely
    popular—are largely interpreted languages, forcing performance into a secondary
    role. You can use most of them for systems programming, but in many ways it's
    the proverbial square peg in a round hole. So when Google announced Go in 2009,
    my interest was piqued. When I saw who was behind the project (more on that later),
    I was elated. When I saw the language and its design in action, I was in heaven.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 很少有语言符合这些参数。当然，已经有一些低级语言满足了其中的一些特征。Erlang和Haskell在功能和语言设计方面都符合要求，但作为函数式语言，对于从C/Java背景转向系统程序员来说，它们构成了一个学习障碍。Objective-C和C#相对容易、强大，并且支持并发，但它们与特定操作系统绑定，使得为其他平台编程变得困难。我们刚提到的语言（Python、JavaScript等）虽然非常流行，但它们大多是解释性语言，将性能放在了次要位置。你可以用它们中的大多数来进行系统编程，但在许多方面，这就像是把方形木栓塞进圆孔。因此，当谷歌在2009年宣布推出Go时，我的兴趣被激起了。当我看到是谁在项目背后（稍后会详细介绍），我感到非常高兴。当我看到这种语言及其设计的实际运行时，我感到非常幸福。
- en: For the last few years I've been using Go to replace systems applications I'd
    previously written in C, Java, Perl, and Python. I couldn't be happier with the
    results. Implementing Go has improved these applications in almost every instance.
    The fact that it plays nicely with C is another huge selling point for systems
    programmers looking to dip their toes in Go's pool.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几年里，我一直在使用Go来替换之前用C、Java、Perl和Python编写的系统应用程序。我对结果非常满意。几乎在每一个实例中，使用Go都改进了这些应用程序。它与C的良好兼容性是系统程序员寻求尝试Go的另一个巨大卖点。
- en: With some of the best minds in language design (and programming in general)
    behind it, Go has a bright future.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些最优秀的语言设计（以及编程一般）的大脑支持，Go有着光明的未来。
- en: For years—decades, really—there have been less than a handful of options for
    writing servers and network interfaces. If you were tasked with writing one, you
    probably reached for C, C++, or Java. And while these certainly can handle the
    task, and while they all now support concurrency and parallelism in some way or
    another, they weren't designed for that.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来——实际上是几十年来——编写服务器和网络接口的选择一直不多。如果你被要求编写一个，你可能会选择C、C++或Java。虽然它们当然可以处理这个任务，而且它们现在都以某种方式支持并发和并行，但它们并不是为此而设计的。
- en: Google brought together a team that included some giants of programming—Rob
    Pike and Ken Thompson of Bell Labs fame and Robert Griesemer, who worked on Google's
    JavaScript implementation V8—to design a modern, concurrent language with development
    ease at the forefront.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌汇集了一支团队，其中包括一些编程界的巨头——贝尔实验室的Rob Pike和Ken Thompson以及曾参与谷歌JavaScript实现V8的Robert
    Griesemer——设计了一种现代的、并发的语言，开发便利性是首要考虑的。
- en: 'To do this, the team focused on some sore spots in the alternatives, which
    are as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，团队专注于一些替代方案中的一些痛点，具体如下：
- en: Dynamically typed languages have—in recent years—become incredibly popular.
    Go eschews the explicit, "cumbersome" type systems of Java or C++. Go uses type
    inference, which saves development time, but is still also strongly typed.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态类型的语言在最近几年变得非常流行。Go避开了Java或C++的显式“繁琐”类型系统。Go使用类型推断，这节省了开发时间，但仍然是强类型的。
- en: Concurrency, parallelism, pointers/memory access, and garbage collection are
    unwieldy in the aforementioned languages. Go lets these concepts be as easy or
    as complicated as you want or need them to be.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并发性、并行性、指针/内存访问和垃圾回收在上述语言中都很难处理。Go让这些概念可以像你想要或需要的那样简单或复杂。
- en: As a newer language, Go has a focus on multicore design that was a necessary
    afterthought in languages such as C++.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为一种较新的语言，Go专注于多核设计，这在C++等语言中是必要的事后考虑。
- en: Go's compiler is super-fast; it's so fast that there are implementations of
    it that treat Go code as interpreted.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go的编译器速度超快；它的速度非常快，以至于有一些实现将Go代码视为解释执行。
- en: Although Google designed Go to be a systems language, it's versatile enough
    to be used in a myriad of ways. Certainly, the focus on advanced, cheap concurrency
    makes it ideal for network and systems programming.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽管Google设计Go是一种系统语言，但它足够多才多艺，可以以多种方式使用。当然，对先进、廉价的并发性的关注使其成为网络和系统编程的理想选择。
- en: Go is loose with syntax, but strict with usage. By this we mean that Go will
    let you get a little lazy with some lexer tokens, but you still have to produce
    fundamentally tight code. As Go provides a formatting tool that attempts to clarify
    your code, you can also spend less time on readability concerns as you're coding.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go的语法比较宽松，但使用上比较严格。这意味着Go会让你在一些词法标记上有点懒散，但你仍然必须编写基本紧凑的代码。由于Go提供了一个格式化工具来尝试澄清你的代码，因此在编码时你也可以花更少的时间来关注可读性问题。
- en: What this book covers
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书涵盖的内容
- en: '[Chapter 1](part0014_split_000.html#page "Chapter 1. An Introduction to Concurrency
    in Go"), *An Introduction to Concurrency in Go*, introduces goroutines and channels,
    and will compare the way Go handles concurrency with the approach other languages
    use. We''ll build some basic concurrent applications utilizing these new concepts.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[第1章](part0014_split_000.html#page "第1章 Go中并发的介绍")，“Go中并发的介绍”，介绍了goroutines和通道，并将比较Go处理并发的方式与其他语言的方法。我们将利用这些新概念构建一些基本的并发应用程序。'
- en: '[Chapter 2](part0021_split_000.html#page "Chapter 2. Understanding the Concurrency
    Model"), *Understanding the Concurrency Model*, focuses on resource allocation,
    sharing memory (and when not to), and data. We will look at channels and channels
    of channels as well as explain exactly how Go manages concurrency internally.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[第2章](part0021_split_000.html#page "第2章 理解并发模型")，“理解并发模型”，侧重于资源分配、共享内存（以及何时不共享）和数据。我们将研究通道和通道的通道，并解释Go内部如何管理并发。'
- en: '[Chapter 3](part0032_split_000.html#page "Chapter 3. Developing a Concurrent
    Strategy"), *Developing a Concurrent Strategy*, discusses approach methods for
    designing applications to best use concurrent tools in Go. We''ll look at some
    available third-party packages that can play a role in your strategy.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[第3章](part0032_split_000.html#page "第3章 开发并发策略")，“开发并发策略”，讨论了设计应用程序以最佳方式利用Go中并发工具的方法。我们将看一些可用的第三方包，它们可以在你的策略中发挥作用。'
- en: '[Chapter 4](part0040_split_000.html#page "Chapter 4. Data Integrity in an Application"),
    *Data Integrity in an Application*, looks at ensuring that delegation of goroutines
    and channels maintain the state in single thread and multithread applications.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[第4章](part0040_split_000.html#page "第4章 应用程序中的数据完整性")，“应用程序中的数据完整性”，着眼于确保goroutines和通道的委托在单线程和多线程应用程序中保持状态。'
- en: '[Chapter 5](part0048_split_000.html#page "Chapter 5. Locks, Blocks, and Better
    Channels"), *Locks, Blocks, and Better Channels*, looks at how Go can avoid dead
    locks out of the box, and when and where they can still occur despite Go''s language
    design.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[第5章](part0048_split_000.html#page "第5章 锁、阻塞和更好的通道")，“锁、阻塞和更好的通道”，探讨了Go如何在开箱即用时避免死锁，以及在哪里以及何时尽管Go的语言设计仍然可能发生死锁。'
- en: '[Chapter 6](part0054_split_000.html#page "Chapter 6. C10K – A Non-blocking
    Web Server in Go"), *C10K – A Non-blocking Web Server in Go*, tackles one of the
    Internet''s most famous and esteemed challenges and attempt to solve it with core
    Go packages. We''ll then refine the product and test it against common benchmarking
    tools.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[第6章](part0054_split_000.html#page "第6章 C10K – 一个非阻塞的Go Web服务器")，“C10K – 一个非阻塞的Go
    Web服务器”，解决了互联网上最著名和最受尊敬的挑战之一，并尝试使用核心Go包来解决它。然后我们将完善产品，并使用常见的基准测试工具进行测试。'
- en: '[Chapter 7](part0060_split_000.html#page "Chapter 7. Performance and Scalability"),
    *Performance and Scalability*, focuses on squeezing the most out of your concurrent
    Go code, best utilizing resources and accounting for and mitigating third-party
    software''s impact on your own. We''ll add some additional functionality to our
    web server and talk about other ways in which we can use these packages.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[第7章](part0060_split_000.html#page "第7章 性能和可伸缩性")，“性能和可伸缩性”，侧重于挤出并发Go代码的最大潜力，最大限度地利用资源，并考虑和减轻第三方软件对自身的影响。我们将为我们的Web服务器添加一些额外的功能，并讨论其他可以使用这些包的方式。'
- en: '[Chapter 8](part0066_split_000.html#page "Chapter 8. Concurrent Application
    Architecture"), *Concurrent Application Architecture*, focuses on when and where
    to implement concurrent patterns, when and how to utilize parallelism to take
    advantage of advanced hardware, and how to ensure data consistency.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[第8章](part0066_split_000.html#page "第8章 并发应用程序架构")，“并发应用程序架构”，侧重于何时何地实施并发模式，何时如何利用并行性来充分利用先进的硬件，以及如何确保数据一致性。'
- en: '[Chapter 9](part0078_split_000.html#page "Chapter 9. Logging and Testing Concurrency
    in Go"), *Logging and Testing Concurrency in Go*, focuses on OS-specific methods
    for testing and deploying your application. We''ll also look at Go''s relationship
    with various code repositories.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[第9章](part0078_split_000.html#page "第9章 在Go中记录和测试并发")，“在Go中记录和测试并发”，侧重于测试和部署应用程序的特定于操作系统的方法。我们还将探讨Go与各种代码存储库的关系。'
- en: '[Chapter 10](part0082_split_000.html#page "Chapter 10. Advanced Concurrency
    and Best Practices"), *Advanced Concurrency and Best Practices*, looks at more
    complicated and advanced techniques including duplicating concurrent features
    not available in Go''s core.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[第10章](part0082_split_000.html#page "第10章.高级并发和最佳实践"), *高级并发和最佳实践*，探讨了更复杂和先进的技术，包括复制Go核心中不可用的并发特性。'
- en: What you need for this book
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您需要为本书做好准备
- en: To work along with this book's examples, you'll need a computer running Windows,
    OS X, or quite a few Linux variants that support Go. For this book, our Linux
    examples and notes reference Ubuntu.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本书的示例工作，您需要一台运行Windows、OS X或支持Go的许多Linux变体的计算机。对于本书，我们的Linux示例和说明参考了Ubuntu。
- en: If you do not already have Go 1.3 or newer installed, you will need to get it
    either from the binaries download page on [http://golang.org/](http://golang.org/)
    or through your operating system's package manager.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尚未安装Go 1.3或更新版本，您需要从[http://golang.org/](http://golang.org/)的二进制下载页面或通过操作系统的软件包管理器获取它。
- en: 'To use all of the examples in this book, you''ll also need to have the following
    software installed:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用本书中的所有示例，您还需要安装以下软件：
- en: MySQL ([http://dev.mysql.com/downloads/](http://dev.mysql.com/downloads/))
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL ([http://dev.mysql.com/downloads/](http://dev.mysql.com/downloads/))
- en: Couchbase ([http://www.couchbase.com/download](http://www.couchbase.com/download))
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Couchbase ([http://www.couchbase.com/download](http://www.couchbase.com/download))
- en: Your choice of IDE is a matter of personal preference, as anyone who's worked
    with developers can attest. That said, there are a few that lend themselves better
    to some languages than others and a couple that have good support for Go. This
    author uses Sublime Text, which plays very nice with Go, is lightweight, and allows
    you to build directly from within the IDE itself. Anywhere you see screenshots
    of code, it will be from within Sublime Text.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您选择的集成开发环境是个人偏好的问题，任何与开发人员合作过的人都可以证明这一点。也就是说，有些IDE比其他语言更适合，有些对Go的支持更好。本作者使用Sublime
    Text，它非常适合Go，体积轻巧，并允许您直接在IDE内构建。您在哪里看到代码截图，都将来自Sublime Text内部。
- en: And while there's a good amount of baked-in support for Go code, there's also
    a nice plugin collection for Sublime Text called GoSublime, available at [https://github.com/DisposaBoy/GoSublime](https://github.com/DisposaBoy/GoSublime).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Go代码有很好的内置支持，但Sublime Text还有一个名为GoSublime的不错的插件集，可在[https://github.com/DisposaBoy/GoSublime](https://github.com/DisposaBoy/GoSublime)上获得。
- en: Sublime Text isn't free, but there is a free evaluation version available that
    has no time limit. It's available in Windows, OS X, and Linux variants at [http://www.sublimetext.com/](http://www.sublimetext.com/).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Sublime Text并非免费，但有免费的评估版本可供使用，没有时间限制。它在Windows、OS X和Linux变体上都可用，网址是[http://www.sublimetext.com/](http://www.sublimetext.com/)。
- en: Who this book is for
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书适合的读者是谁
- en: If you are a systems or network programmer with some knowledge of Go and concurrency,
    but would like to know about the implementation of concurrent systems written
    in Go this is the book for you. The goal of this book is to enable you to write
    high-performance, scalable, resource-thrifty systems and network applications
    in Go.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是具有一定Go和并发知识的系统或网络程序员，但想了解用Go编写的并发系统的实现，那么这本书适合您。本书的目标是使您能够在Go中编写高性能、可扩展、资源节约的系统和网络应用。
- en: In this book, we'll write a number of basic and somewhat less - basic network
    and systems applications. It's assumed that you've worked with these types of
    applications before. If you haven't, some extracurricular study may be warranted
    to be able to fully digest this content.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将编写一些基本和稍微不那么基本的网络和系统应用程序。假定您以前曾使用过这些类型的应用程序。如果没有，可能需要进行一些课外学习，以便能够充分消化这些内容。
- en: Conventions
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 惯例
- en: In this book, you will find a number of styles of text that distinguish between
    different kinds of information. Here are some examples of these styles, and an
    explanation of their meaning.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，您将找到一些区分不同信息类型的文本样式。以下是一些这些样式的示例，以及它们的含义解释。
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "The
    `setProxy` function is called after every request, and you can see it as the first
    line in our handler."'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 文本中的代码字，数据库表名，文件夹名，文件名，文件扩展名，路径名，虚拟URL，用户输入和Twitter句柄显示如下："在每个请求之后调用`setProxy`函数，并且您可以将其视为处理程序中的第一行。"
- en: 'A block of code is set as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块设置如下：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望引起您对代码块的特定部分的注意时，相关行或项目将以粗体显示：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Any command-line input or output is written as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 任何命令行输入或输出都以以下方式编写：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, in menus or dialog boxes for example, appear in the text like this:
    "If you upload a file by dragging it to the **Drop files here to upload** box,
    within a few seconds you''ll see that the file is noted as changed in the web
    interface."'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**新术语**和**重要单词**以粗体显示。例如，屏幕上看到的单词，菜单或对话框中的单词等，会在文本中以这种方式出现："如果您通过将文件拖到**拖放文件到此处上传**框中来上传文件，几秒钟后您会看到文件在Web界面中被标记为已更改。"'
- en: Note
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Warnings or important notes appear in a box like this.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 警告或重要说明会以以下方式出现在框中。
- en: Tip
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Tips and tricks appear like this.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 提示和技巧会以这种方式出现。
- en: Reader feedback
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读者反馈
- en: Feedback from our readers is always welcome. Let us know what you think about
    this book—what you liked or may have disliked. Reader feedback is important for
    us to develop titles that you really get the most out of.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们始终欢迎读者的反馈。让我们知道您对本书的看法——您喜欢或不喜欢的地方。读者的反馈对我们开发能让您充分利用的标题非常重要。
- en: To send us general feedback, simply send an e-mail to `<[feedback@packtpub.com](mailto:feedback@packtpub.com)>`,
    and mention the book title via the subject of your message.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要向我们发送一般反馈，只需发送电子邮件至`<[feedback@packtpub.com](mailto:feedback@packtpub.com)>`，并在消息主题中提及书名。
- en: If there is a topic that you have expertise in and you are interested in either
    writing or contributing to a book, see our author guide on [www.packtpub.com/authors](http://www.packtpub.com/authors).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在某个专题上有专业知识，并且有兴趣撰写或为一本书做出贡献，请参阅我们的作者指南[www.packtpub.com/authors](http://www.packtpub.com/authors)。
- en: Customer support
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户支持
- en: Now that you are the proud owner of a Packt book, we have a number of things
    to help you to get the most from your purchase.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您是Packt书籍的自豪所有者，我们有一些事情可以帮助您充分利用您的购买。
- en: Downloading the example code
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载示例代码
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载您购买的所有Packt图书的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便文件直接通过电子邮件发送给您。
- en: Errata
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 勘误
- en: Although we have taken every care to ensure the accuracy of our content, mistakes
    do happen. If you find a mistake in one of our books—maybe a mistake in the text
    or the code—we would be grateful if you would report this to us. By doing so,
    you can save other readers from frustration and help us improve subsequent versions
    of this book. If you find any errata, please report them by visiting [http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata),
    selecting your book, clicking on the **errata** **submission** **form** link,
    and entering the details of your errata. Once your errata are verified, your submission
    will be accepted and the errata will be uploaded on our website, or added to any
    list of existing errata, under the Errata section of that title. Any existing
    errata can be viewed by selecting your title from [http://www.packtpub.com/support](http://www.packtpub.com/support).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们已经非常注意确保内容的准确性，但错误是难免的。如果您在我们的书中发现错误，也许是文本或代码中的错误，我们将不胜感激地接受您的报告。通过这样做，您可以帮助其他读者避免挫折，并帮助我们改进本书的后续版本。如果您发现任何勘误，请访问[http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata)报告，选择您的书，点击**勘误提交表格**链接，并输入您的勘误详情。一旦您的勘误经过验证，您的提交将被接受，并且勘误将被上传到我们的网站上，或者添加到该标题的勘误列表中的任何现有勘误下的勘误部分。您可以通过从[http://www.packtpub.com/support](http://www.packtpub.com/support)选择您的标题来查看任何现有的勘误。
- en: Piracy
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 盗版
- en: Piracy of copyright material on the Internet is an ongoing problem across all
    media. At Packt, we take the protection of our copyright and licenses very seriously.
    If you come across any illegal copies of our works, in any form, on the Internet,
    please provide us with the location address or website name immediately so that
    we can pursue a remedy.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网上的版权盗版是所有媒体的持续问题。在Packt，我们非常重视保护我们的版权和许可。如果您在互联网上发现我们作品的任何非法副本，请立即向我们提供位置地址或网站名称，以便我们采取补救措施。
- en: Please contact us at `<[copyright@packtpub.com](mailto:copyright@packtpub.com)>`
    with a link to the suspected pirated material.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您发现涉嫌盗版的材料，请通过链接与我们联系`<[copyright@packtpub.com](mailto:copyright@packtpub.com)>`。
- en: We appreciate your help in protecting our authors, and our ability to bring
    you valuable content.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们感谢您帮助保护我们的作者，以及我们为您提供有价值内容的能力。
- en: Questions
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You can contact us at `<[questions@packtpub.com](mailto:questions@packtpub.com)>`
    if you are having a problem with any aspect of the book, and we will do our best
    to address it.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在阅读本书的任何方面遇到问题，可以通过`<[questions@packtpub.com](mailto:questions@packtpub.com)>`与我们联系，我们将尽力解决。
