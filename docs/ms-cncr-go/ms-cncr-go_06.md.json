["```go\nCREATE TABLE articles (\n  article_id INT NOT NULL AUTO_INCREMENT,\n  article_title VARCHAR(128) NOT NULL,\n  article_text VARCHAR(128) NOT NULL,\n  PRIMARY KEY (article_id)\n)\n```", "```go\nvar routes []string\n\ntype customRouter struct {\n\n}\n\nfunc (customRouter) ServeHTTP(rw http.ResponseWriter, r \n  *http.Request) {\n\n  fmt.Println(r.URL.Path);\n}\n\nfunc main() {\n\n  var cr customRouter;\n\n  server := &http.Server {\n      Addr: \":9000\",\n      Handler:cr,\n      ReadTimeout: 10 * time.Second,\n      WriteTimeout: 10 * time.Second,\n      MaxHeaderBytes: 1 << 20,\n  }\n\n  server.ListenAndServe()\n}\n```", "```go\nab -n 10500 -c 10000 -g test.csv http://localhost:8080/a.html\n```", "```go\n  path := r.URL.Path;\n\n  staticPatternString := \"static/(.*)\"\n  templatePatternString := \"template/(.*)\"\n  dynamicPatternString := \"dynamic/(.*)\"\n\n  staticPattern := regexp.MustCompile(staticPatternString)\n  templatePattern := regexp.MustCompile(templatePatternString)\n  dynamicDBPattern := regexp.MustCompile(dynamicPatternString)\n\n  if staticPattern.MatchString(path) {\n    page := staticPath + staticPattern.ReplaceAllString(path, \n     \"${1}\") + \".html\"\n\n    http.ServeFile(rw, r, page)\n  }\n```", "```go\nfmt.Println(r.URL.Path)\n```", "```go\ntype WebPage struct {\n  Title string\n  Contents string\n}\n```", "```go\n  } else if templatePattern.MatchString(path) {\n\n    urlVar := templatePattern.ReplaceAllString(path, \"${1}\")\n    page := WebPage{ Title: \"This is our URL: \"+urlVar, Contents: \n      \"Enjoy our content\" }\n    tmp, _ := template.ParseFiles(staticPath+\"template.html\")\n    tmp.Execute(rw,page)\n\n  }\n```", "```go\n<h1>{{.Title}}</h1>\n<p>{{.Contents}}</p>\n```", "```go\nvar customHTML string\nvar customTemplate template.Template\nvar page WebPage\nvar templateSet bool\n\nfunc main() {\n  var cr customRouter;\n  fileName := staticPath + \"template.html\"\n  cH,_ := ioutil.ReadFile(fileName)\n  customHTML = string(cH[:])\n\n  page := WebPage{ Title: \"This is our URL: \", Contents: \"Enjoy \n    our content\" }\n  cT,_ := template.New(\"Hey\").Parse(customHTML)\n  customTemplate = *cT\n```", "```go\ngo get github.com/go-sql-driver/mysql\n\n```", "```go\nfunc getArticle(id int) WebPage {\n  Database,err := sql.Open(\"mysql\", \"test:test@/master\")\n  if err != nil {\n    fmt.Println(\"DB error!!!\")\n  }\n\n  var articleTitle string\n  sqlQ := Database.QueryRow(\"SELECT article_title from articles \n    where article_id=? LIMIT 1\", 1).Scan(&articleTitle)\n  switch {\n    case sqlQ == sql.ErrNoRows:\n      fmt.Printf(\"No rows!\")\n    case sqlQ != nil:\n      fmt.Println(sqlQ)\n    default:\n\n  }\n\n  wp := WebPage{}\n  wp.Title = articleTitle\n  return wp\n\n}\n```", "```go\n  }else if dynamicDBPattern.MatchString(path) {\n    rand.Seed(9)\n    id := rand.Intn(10000)\n    page = getArticle(id)\n    customTemplate.Execute(rw,page)\n  }\n```", "```go\npackage main\n\nimport\n(\n\"net/http\"\n\"html/template\"\n\"time\"\n\"regexp\"\n\"fmt\"\n\"io/ioutil\"\n\"database/sql\"\n\"log\"\n\"runtime\"\n_ \"github.com/go-sql-driver/mysql\"\n)\n```", "```go\nconst staticPath string = \"static/\"\n```", "```go\ntype WebPage struct {\n\n  Title string\n  Contents string\n  Connection *sql.DB\n\n}\n```", "```go\ntype customRouter struct {\n\n}\n\nfunc serveDynamic() {\n\n}\n\nfunc serveRendered() {\n\n}\n\nfunc serveStatic() {\n\n}\n```", "```go\nfunc (customRouter) ServeHTTP(rw http.ResponseWriter, r \n  *http.Request) {\n  path := r.URL.Path;\n\n  staticPatternString := \"static/(.*)\"\n  templatePatternString := \"template/(.*)\"\n  dynamicPatternString := \"dynamic/(.*)\"\n\n  staticPattern := regexp.MustCompile(staticPatternString)\n  templatePattern := regexp.MustCompile(templatePatternString)\n  dynamicDBPattern := regexp.MustCompile(dynamicPatternString)\n\n  if staticPattern.MatchString(path) {\n     serveStatic()\n    page := staticPath + staticPattern.ReplaceAllString(path, \n      \"${1}\") + \".html\"\n    http.ServeFile(rw, r, page)\n  }else if templatePattern.MatchString(path) {\n\n    serveRendered()\n    urlVar := templatePattern.ReplaceAllString(path, \"${1}\")\n\n    page.Title = \"This is our URL: \" + urlVar\n    customTemplate.Execute(rw,page)\n\n  }else if dynamicDBPattern.MatchString(path) {\n\n    serveDynamic()\n    page = getArticle(1)\n    customTemplate.Execute(rw,page)\n  }\n\n}\n```", "```go\nfunc gobble(s []byte) {\n\n}\n```", "```go\nvar customHTML string\nvar customTemplate template.Template\nvar page WebPage\nvar templateSet bool\nvar Database sql.DB\n\nfunc getArticle(id int) WebPage {\n  Database,err := sql.Open(\"mysql\", \"test:test@/master\")\n  if err != nil {\n    fmt.Println(\"DB error!\")\n  }\n\n  var articleTitle string\n  sqlQ := Database.QueryRow(\"SELECT article_title from articles \n    WHERE article_id=? LIMIT 1\", id).Scan(&articleTitle)\n  switch {\n    case sqlQ == sql.ErrNoRows:\n      fmt.Printf(\"No rows!\")\n    case sqlQ != nil:\n      fmt.Println(sqlQ)\n    default:\n\n  }\n\n  wp := WebPage{}\n  wp.Title = articleTitle\n  return wp\n\n}\n```", "```go\nfunc main() {\n\n  runtime.GOMAXPROCS(4)\n\n  var cr customRouter;\n\n  fileName := staticPath + \"template.html\"\n  cH,_ := ioutil.ReadFile(fileName)\n  customHTML = string(cH[:])\n\n  page := WebPage{ Title: \"This is our URL: \", Contents: \"Enjoy \n    our content\" }\n  cT,_ := template.New(\"Hey\").Parse(customHTML)\n  customTemplate = *cT\n\n  gobble(cH)\n  log.Println(page)\n  fmt.Println(customTemplate)\n\n  server := &http.Server {\n      Addr: \":9000\",\n      Handler:cr,\n      ReadTimeout: 10 * time.Second,\n      WriteTimeout: 10 * time.Second,\n      MaxHeaderBytes: 1 << 20,\n  }\n\n  server.ListenAndServe()\n\n}\n```"]