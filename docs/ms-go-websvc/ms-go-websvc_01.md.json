["```go\n    dpkg -i couchbase-server version.deb\n\n    ```", "```go\n    brew install https://github.com/couchbase/homebrew/raw/stable/Library/Formula/libcouchbase.rb\n\n    ```", "```go\n    apt-get install nginx\n\n    ```", "```go\n    brew install nginx\n\n    ```", "```go\n<script src=\"img/angular.min.js\"></script>\n```", "```go\n<script src=\"img/jquery.min.js\"></script>\n```", "```go\ncreate database social_network;\n```", "```go\nCREATE TABLE users (\n  user_id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n  user_nickname VARCHAR(32) NOT NULL,\n  user_first VARCHAR(32) NOT NULL,\n  user_last VARCHAR(32) NOT NULL,\n  user_email VARCHAR(128) NOT NULL,\n  PRIMARY KEY (user_id),\n  UNIQUE INDEX user_nickname (user_nickname)\n)\n```", "```go\nServer := Server {\n  Addr: \":8080\",\n  Handler: urlHandler,\n  ReadTimeout: 1000 * time.MicroSecond,\n  WriteTimeout: 1000 * time.MicroSecond,\n  MaxHeaderBytes: 0,\n  TLSConfig: nil\n}\n```", "```go\nhttp.ListenAndServe(\":8080\", nil)\n```", "```go\npackage main\n\nimport\n(\n  \"net/http\"\n  \"encoding/json\"\n  \"fmt\"\n)\n```", "```go\ntype API struct {\n  Message string \"json:message\"\n}\n```", "```go\nfunc main() {\n\n  http.HandleFunc(\"/api\", func(w http.ResponseWriter, r *http.Request) {\n\n    message := API{\"Hello, world!\"}\n\n    output, err := json.Marshal(message)\n\n    if err != nil {\n      fmt.Println(\"Something went wrong!\")\n    }\n\n    fmt.Fprintf(w, string(output))\n\n  })\n\n  http.ListenAndServe(\":8080\", nil)\n}\n```", "```go\n/api/user  func apiUser\n/api/message  func apiMessage\n/api/status  func apiStatus\n```", "```go\n  http.HandleFunc(\"/api/user/\\d+\", func(w http.ResponseWriter, r *http.Request) {\n\n    // react dynamically to an ID as supplied in the URL\n\n  })\n```", "```go\ngorillaRoute := mux.NewRouter()\ngorillaRoute.HandleFunc(\"/api/{user}\", UserHandler)\n```", "```go\nr := mux.NewRouter()\nr.HandleFunc(\"/products/{user:\\d+}\", ProductHandler)\n```", "```go\npackage main\n\nimport (\n  \"encoding/json\"\n  \"fmt\"\n  \"github.com/gorilla/mux\"\n  \"net/http\"\n)\n\ntype API struct {\n  Message string \"json:message\"\n}\n\nfunc Hello(w http.ResponseWriter, r *http.Request) {\n\n  urlParams := mux.Vars(r)\n  name := urlParams[\"user\"]\n  HelloMessage := \"Hello, \" + name\n\n  message := API{HelloMessage}\n  output, err := json.Marshal(message)\n\n  if err != nil {\n    fmt.Println(\"Something went wrong!\")\n  }\n\n  fmt.Fprintf(w, string(output))\n\n}\n\nfunc main() {\n\n  gorillaRoute := mux.NewRouter()\n  gorillaRoute.HandleFunc(\"/api/{user:[0-9]+}\", Hello)\n  http.Handle(\"/\", gorillaRoute)\n  http.ListenAndServe(\":8080\", nil)\n}\n```", "```go\nfunc Hello(w http.ResponseWriter, r *http.Request) {\n\n  urlParams := r.URL.Query()\n  name := urlParams.Get(\":name\")\n  HelloMessage := \"Hello, \" + name\n  message := API{HelloMessage}\n  output, err := json.Marshal(message)\n\n  if err != nil {\n    fmt.Println(\"Something went wrong!\")\n  }\n\n  fmt.Fprintf(w, string(output))\n\n}\n\nfunc main() {\n\n  mux := routes.New()\n  mux.Get(\"/api/:name\", Hello)\n  http.Handle(\"/\", mux)\n  http.ListenAndServe(\":8080\", nil)\n}\n```", "```go\ngo get github.com/drone/routes\n\n```", "```go\ngo get github.com/go-sql-driver/mysql\n\n```", "```go\npackage main\n\nimport\n(\n  \"database/sql\"\n  _ \"github.com/go-sql-driver/mysql\"\n  \"encoding/json\"\n  \"fmt\"\n  \"github.com/gorilla/mux\"\n  \"net/http\"\n)\n```", "```go\n  routes := mux.NewRouter()\n  routes.HandleFunc(\"/api/user/create\", CreateUser).Methods(\"GET\")\n```", "```go\ntype User struct {\n  ID int \"json:id\"\n  Name  string \"json:username\"\n  Email string \"json:email\"\n  First string \"json:first\"\n  Last  string \"json:last\"\n}\n```", "```go\nfunc CreateUser(w http.ResponseWriter, r *http.Request) {\n\n  NewUser := User{}\n  NewUser.Name = r.FormValue(\"user\")\n  NewUser.Email = r.FormValue(\"email\")\n  NewUser.First = r.FormValue(\"first\")\n  NewUser.Last = r.FormValue(\"last\")\n  output, err := json.Marshal(NewUser)\n  fmt.Println(string(output))\n  if err != nil {\n    fmt.Println(\"Something went wrong!\")\n  }\n\n  sql := \"INSERT INTO users set user_nickname='\" + NewUser.Name + \"', user_first='\" + NewUser.First + \"', user_last='\" + NewUser.Last + \"', user_email='\" + NewUser.Email + \"'\"\n  q, err := database.Exec(sql)\n  if err != nil {\n    fmt.Println(err)\n  }\n  fmt.Println(q)\n}\n```", "```go\nfunc GetUser(w http.ResponseWriter, r *http.Request) {\n\n  urlParams   := mux.Vars(r)\n  id       := urlParams[\"id\"]\n  ReadUser := User{}\n  err := database.QueryRow(\"select * from users where user_id=?\",id).Scan(&ReadUser.ID, &ReadUser.Name, &ReadUser.First, &ReadUser.Last, &ReadUser.Email )\n  switch {\n      case err == sql.ErrNoRows:\n              fmt.Fprintf(w,\"No such user\")\n      case err != nil:\n              log.Fatal(err)\n  fmt.Fprintf(w, \"Error\")\n      default:\n        output, _ := json.Marshal(ReadUser)\n        fmt.Fprintf(w,string(output))\n  }\n}\n```", "```go\ncurl --head http://localhost:8080/api/user/read/1111\nHTTP/1.1 200 OK\nDate: Wed, 18 Jun 2014 14:09:30 GMT\nContent-Length: 12\nContent-Type: text/plain; charset=utf-8\n\n```", "```go\nfunc GetUser(w http.ResponseWriter, r *http.Request) {\n\n  w.Header().Set(\"Pragma\",\"no-cache\")\n```", "```go\ncurl --head http://localhost:8080/api/user/read/1111\nHTTP/1.1 200 OK\nPragma: no-cache\nDate: Wed, 18 Jun 2014 14:15:35 GMT\nContent-Length: 12\nContent-Type: text/plain; charset=utf-8\n\n```"]