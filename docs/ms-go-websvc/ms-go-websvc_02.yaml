- en: Chapter 2. RESTful Services in Go
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。Go中的RESTful服务
- en: When people typically design APIs and web services, they're making them as an
    afterthought or at least as the final step in a large-scale application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当人们通常设计API和Web服务时，他们通常将它们作为事后思考，或者至少作为大型应用程序的最后一步。
- en: There's good logic behind this—the application comes first and catering to developers
    when there's no product on the table doesn't make a lot of sense. So, typically
    when an application or website is created, that's the core product and any additional
    resources for APIs come second to it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这背后有很好的逻辑——应用程序首先出现，当桌子上没有产品时满足开发人员并不太有意义。因此，通常当应用程序或网站创建时，那就是核心产品，任何额外的API资源都是其次的。
- en: As the Web has changed in recent years, this system has changed a little bit.
    Now, it's not entirely uncommon to write the API or web service first and then
    the application. Most often, this happens with highly responsive, single-page
    applications or mobile applications where the structure and data are more important
    than the presentation layer.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Web近年来的变化，这个系统也有了一些变化。现在，写API或Web服务然后再写应用程序并不是完全不常见。这通常发生在高度响应的单页应用程序或移动应用程序中，其中结构和数据比演示层更重要。
- en: Our overarching project—a social network—will demonstrate the nature of a data-and-architecture-first
    application. We'll have a functional social network that can be traversed and
    manipulated exclusively at API endpoints. However, later in this book, we will
    have some fun with a presentation layer.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的总体项目——一个社交网络——将展示数据和架构优先的应用程序的性质。我们将拥有一个功能齐全的社交网络，可以在API端点上进行遍历和操作。然而，在本书的后面，我们将在演示层上玩一些有趣的东西。
- en: While the concept behind this could be viewed as entirely demonstrative, the
    reality is that this method is behind a lot of emerging services and applications
    today. It's extremely common for a new site or service to launch with an API,
    and sometimes with nothing but an API.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这背后的概念可能被视为完全示范性的，但现实是，这种方法是当今许多新兴服务和应用程序的基础。一个新站点或服务通常会使用API进行启动，有时甚至只有API。
- en: 'In this chapter, we will examine the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Strategies for designing an API for our application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计我们的应用程序的API策略
- en: The basics of REST
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST的基础知识
- en: Other web service architectures and methods
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他Web服务架构和方法
- en: Encoding data and choosing data formats
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编码数据和选择数据格式
- en: REST actions and what they do
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST动作及其作用
- en: Creating endpoints with Gorilla's mux
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Gorilla的mux创建端点
- en: Approaches to versioning your application
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序版本控制的方法
- en: Designing our application
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计我们的应用程序
- en: When we set out to build our larger social network application, we have a general
    idea about our datasets and relationships. When we extend these to a web service,
    we have to translate not just data types to API endpoints, but relationships and
    actions as well.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们着手构建更大的社交网络应用程序时，我们对我们的数据集和关系有一个大致的想法。当我们将这些扩展到Web服务时，我们不仅要将数据类型转换为API端点，还要转换关系和操作。
- en: For example, if we wish to find a user, we'll assume that the data is kept in
    a database called `users` and we'd expect to be able to retrieve that data using
    the `/api/users` endpoint. This is fair enough. But, what if we wish to get a
    specific user? What if we wish to see if two users are connected? What if we wish
    to edit a user's comment on another user's photo?, and so on.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们希望找到一个用户，我们会假设数据保存在一个名为`users`的数据库中，并且我们希望能够使用`/api/users`端点检索数据。这是合理的。但是，如果我们希望获取特定用户呢？如果我们希望查看两个用户是否连接？如果我们希望编辑一个用户在另一个用户的照片上的评论？等等。
- en: These are the things that we should consider, not just in our application but
    also in the web services that we build around it (or in this case, the other way
    around, as our web services comes first).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们应该考虑的事情，不仅在我们的应用程序中，也在我们围绕它构建的Web服务中（或者在这种情况下，反过来，因为我们的Web服务首先出现）。
- en: At this point, we have a relatively simplistic dataset for our application,
    so let's flush it out in such a way that we can create, retrieve, update, and
    delete users as well as create, retrieve, update, and delete relationships between
    the users. We can think of this as *friending* or *following* someone on traditional
    social networks.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的应用程序有一个相对简单的数据集，所以让我们以这样的方式来完善它，以便我们可以创建、检索、更新和删除用户，以及创建、检索、更新和删除用户之间的关系。我们可以把这看作是在传统社交网络上“加为好友”或“关注”某人。
- en: 'First, let''s do a little maintenance on our `users` table. Presently, we have
    a unique index on just the `user_nickname` variable, but let''s create an index
    for `user_email`. This is a pretty common and logical security point, considering
    that, theoretically, one person is bound to any one given e-mail address. Type
    the following into your MySQL console:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们对我们的`users`表进行一些维护。目前，我们只在`user_nickname`变量上有一个唯一索引，但让我们为`user_email`创建一个索引。考虑到理论上一个人只能绑定一个特定的电子邮件地址，这是一个相当常见和合乎逻辑的安全点。将以下内容输入到您的MySQL控制台中：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We can now only have one user per e-mail address. This makes sense, right?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们每个电子邮件地址只能有一个用户。这是有道理的，对吧？
- en: 'Next, let''s go ahead and create the basis for user relationships. These will
    encompass not just the friending/following concept but also the ability to block.
    So, let''s create a table for these relationships. Again, type the following code
    into your console:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们继续创建用户关系的基础。这些将不仅包括加为好友/关注的概念，还包括屏蔽的能力。因此，让我们为这些关系创建一个表。再次，将以下代码输入到您的控制台中：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What we've done here is created a table for all of our relationships that include
    keys on the various users as well as the timestamp field to tell us when the relationships
    were created.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里做的是为包括各种用户的关系创建了一个表，以及时间戳字段告诉我们关系是何时创建的。
- en: So, where are we? Well, right now, we have the capability to create, retrieve,
    update, and delete both user information as well relationships between the users.
    Our next step would be to conceptualize some API endpoints that will allow consumers
    of our web service to do this.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们现在在哪里？嗯，现在，我们有能力创建、检索、更新和删除用户信息以及用户之间的关系。我们的下一步将是构想一些API端点，让我们的网络服务的消费者能够做到这一点。
- en: In the previous chapter, we created our first endpoints, `/api/user/create`
    and /`api/user/read`. However, if we want to be able to fully control the data
    we just discussed, we'll need more than that.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们创建了我们的第一个端点，`/api/user/create`和`/api/user/read`。然而，如果我们想要完全控制刚才讨论的数据，我们需要更多。
- en: Before that though, let's talk a little bit about the most important concepts
    that relate to web services, particularly those utilizing REST.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在那之前，让我们谈谈与网络服务相关的最重要的概念，特别是那些利用REST的概念。
- en: Looking at REST
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 看看REST
- en: So, what is REST exactly, and where did it come from? To start with, REST stands
    for **Representational state transfer**. This is important because the representation
    of data (and its metadata) is the critical part of data transfer.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，REST到底是什么，它从哪里来？首先，REST代表**表述性状态转移**。这很重要，因为数据（及其元数据）的表述是数据传输的关键部分。
- en: The **state** aspect of the acronym is slightly misleading because statelessness
    is actually a core component of the architecture.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 缩写中的**状态**方面有点误导，因为无状态实际上是架构的核心组件。
- en: In short, REST presents a simple, stateless mechanism for presenting data over
    HTTP (and some other protocols) that is uniform and includes a control mechanism
    such as caching directives.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，REST提供了一种简单的、无状态的机制，用于通过HTTP（以及其他一些协议）呈现数据，这种机制是统一的，并包括缓存指令等控制机制。
- en: The architecture initially arose as part of Roy Fielding's dissertation at UC
    Irvine. Since then, it has become codified and standardized by **World Wide Web
    Consortium** (**W3C**).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这种架构最初是作为罗伊·菲尔丁在加州大学尔湾分校的论文的一部分而产生的。从那时起，它已经被**万维网联盟**（**W3C**）进行了编码和标准化。
- en: A RESTful application or API will require several important components, and
    we'll outline these now.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一个RESTful应用程序或API将需要几个重要的组件，我们现在将概述这些组件。
- en: Making a representation in an API
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在API中进行表述
- en: The most important component of the API is the data we'll pass along as part
    of our web service. Usually, it's formatted text in the format of JSON, RSS/XML,
    or even binary data.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: API最重要的组成部分是我们将作为网络服务一部分传递的数据。通常，它是JSON、RSS/XML格式的格式化文本，甚至是二进制数据。
- en: For the purpose of designing a web service, it's a good practice to make sure
    that your format matches your data. For example, if you've created a web service
    for passing image data, it's tempting to jam that sort of data into a text format.
    It's not unusual to see binary data translated into Base64 encoding and sent via
    JSON.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设计一个网络服务，确保您的格式与您的数据匹配是一个好习惯。例如，如果您创建了一个用于传递图像数据的网络服务，很容易将这种数据塞进文本格式中。将二进制数据转换为Base64编码并通过JSON发送并不罕见。
- en: However, an important consideration with APIs is thrift, in terms of data size.
    If we take our earlier example and encode our image data in Base64, we end up
    with an API payload that will be nearly 40 percent larger. By doing this, we will
    increase latency in our service and introduce a potential annoyance. There is
    no reason to do this if we can reliably transfer the data as it exists.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，API的一个重要考虑因素是数据大小的节俭。如果我们以前的例子并将我们的图像数据编码为Base64，我们最终得到的API有效负载将增加近40%。通过这样做，我们将增加服务的延迟并引入潜在的烦恼。如果我们可以可靠地传输数据，那就没有理由这样做。
- en: The representation in the model should also serve an important role—to satisfy
    all requirements for the client to update, remove, or retrieve such a particular
    resource.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 模型中的表述也应该起到重要的作用——满足客户端更新、删除或检索特定资源的所有要求。
- en: Self-description
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自我描述
- en: When we say self-description, we can also describe this as self-contained to
    encompass two core components of REST—that a response should include everything
    necessary for the client per request and that it should include (either explicitly
    or implicitly) the information on how to handle the information.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们说自我描述时，我们也可以将其描述为自包含，以包括REST的两个核心组件——响应应该包括客户端每个请求所需的一切，并且应该包括（明确或隐含地）有关如何处理信息的信息。
- en: The second part refers to cache rules, which we very briefly touched on in [Chapter
    1](ch01.html "Chapter 1. Our First API in Go"), *Our First API in Go*.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 第二部分涉及缓存规则，我们在[第1章](ch01.html "第1章。我们在Go中的第一个API")中简要提到了*我们在Go中的第一个API*。
- en: It may go without saying but providing valuable caching information about a
    resource contained by an API request is important. It eliminates redundant or
    unnecessary requests down the road.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 提供有关API请求中包含的资源的有价值的缓存信息是重要的。这可以消除以后的冗余或不必要的请求。
- en: This also brings in the concept of the stateless nature of REST. By this we
    mean that each request exists on its own. As mentioned earlier, any single request
    should include everything necessary to satisfy that request.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这也引入了REST的无状态性概念。我们的意思是每个请求都是独立存在的。正如前面提到的，任何单个请求都应该包括满足该请求所需的一切。
- en: More than anything, this means dropping the idea of a normal web architecture
    where you can set cookies or session variables. This is inherently not RESTful.
    For one, it's unlikely that our clients would support cookies or continuous sessions.
    But more importantly, it reduces the comprehensive and explicit nature of responses
    expected from any given API endpoint.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，这意味着放弃普通的Web架构的想法，其中您可以设置cookie或会话变量。这本质上不是RESTful。首先，我们的客户端不太可能支持cookie或持续会话。但更重要的是，它减少了对任何给定API端点所期望的响应的全面和明确的性质。
- en: Tip
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Automated processes and scripts can, of course, handle sessions and they could
    handle them as the initial proposal of REST. This is more a matter of demonstration
    than a reason why REST rejects a persistent state as part of its ethos.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化流程和脚本当然可以处理会话，并且它们可以像REST的初始提案一样处理它们。这更多是一种演示而不是REST拒绝将持久状态作为其精神的一部分的原因。
- en: The importance of a URI
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: URI的重要性
- en: 'For reasons that we''ll touch on later in this chapter, the URI or URL is one
    of the most critical factors in a good API design. There are several reasons for
    this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 出于我们稍后将在本章讨论的原因，URI或URL是良好API设计中最关键的因素之一。有几个原因：
- en: The URI should be informative. We should have information on not just the data
    endpoints but also on what data we might expect to see in return. Some of this
    is idiomatic to programmers. For example, `/api/users` would imply that we're
    looking for a set of users, whereas `/api/users/12345` would indicate that we're
    expecting to get information about a specific user.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URI应该是有信息的。我们不仅应该了解数据端点的信息，还应该知道我们可能期望看到的返回数据。其中一些是程序员的习惯用法。例如，“/api/users”会暗示我们正在寻找一组用户，而“/api/users/12345”则表示我们期望获取有关特定用户的信息。
- en: The URI should not break in the future. Soon, we'll talk about versioning, but
    this is just one place where the expectation of a stable resource endpoint is
    incredibly important. If the consumers of your service find missing or broken
    links in their applications over time without warning, this would result in a
    very poor user experience.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URI不应该在将来中断。很快，我们将讨论版本控制，但这只是一个地方，稳定的资源端点的期望非常重要。如果您的服务的消费者在时间上发现其应用程序中缺少或损坏的链接而没有警告，这将导致非常糟糕的用户体验。
- en: No matter how much foresight you have in developing your API or web service,
    things will change. With this in mind, we should react to changes by utilizing
    HTTP status codes to indicate new locations or errors with present URIs rather
    than allowing them to simply break.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无论您在开发API或Web服务时有多少远见，事情都会发生变化。考虑到这一点，我们应该通过利用HTTP状态代码来对现有URI指示新位置或错误，而不是允许它们简单地中断。
- en: HATEOAS
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HATEOAS
- en: '**HATEOAS** stands for **Hypermedia as the Engine of Application State**, and
    it''s a primary constraint of URIs in a REST architecture. The core principles
    behind it require that APIs should not reference fixed resource names or the actual
    hierarchies themselves, but they should rather focus on describing the media requested
    and/or define the application state.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**HATEOAS**代表**超媒体作为应用程序状态的引擎**，是REST架构中URI的主要约束。其背后的核心原则要求API不应引用固定的资源名称或实际的层次结构本身，而应该专注于描述所请求的媒体和/或定义应用程序状态。'
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can read more about REST and its requirements as defined by its original
    author by visiting Roy Fielding's blog at [http://roy.gbiv.com/untangled/](http://roy.gbiv.com/untangled/).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过访问Roy Fielding的博客[http://roy.gbiv.com/untangled/](http://roy.gbiv.com/untangled/)，阅读有关REST及其原始作者定义的要求的更多信息。
- en: Other API architectures
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他API架构
- en: Beyond REST, we'll look at and implement a few other common architectures for
    APIs and web services in this book.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 除了REST，我们还将在本书中查看并实施一些其他常见的API和Web服务架构。
- en: For the most part, we'll focus on REST APIs but we will also go into SOAP protocols
    and APIs for XML ingestion as well as newer asynchronous and web socket based
    services that allow persistence.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，我们将专注于REST API，但我们还将涉及SOAP协议和用于XML摄入的API，以及允许持久性的较新的异步和基于Web套接字的服务。
- en: RPC
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 远程过程调用
- en: '**Remote procedure calls,** or **RPC,** is a communication method that has
    existed for a long time and makes up the bones of what later became REST. While
    there is some merit for using RPC still—in particular JSON-RPC—we''re not going
    to put much effort into accommodating it in this book.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**远程过程调用**，或**RPC**，是一种长期存在的通信方法，构成了后来成为REST的基础。虽然仍然有一些使用RPC的价值，特别是JSON-RPC，但我们不会在本书中花太多精力来适应它。'
- en: If you're unfamiliar with RPC in general, its core difference as compared to
    REST is that there is a single endpoint and the requests themselves define the
    behaviors of the web service.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对RPC不熟悉，与REST相比，其核心区别在于只有一个端点，请求本身定义了Web服务的行为。
- en: Note
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To read more about JSON-RPC, go to [http://json-rpc.org/](http://json-rpc.org/).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关JSON-RPC的更多信息，请访问[http://json-rpc.org/](http://json-rpc.org/)。
- en: Choosing formats
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择格式
- en: The matter of formats used to be a much trickier subject than it is today. Where
    we once had myriad formats that were specific to individual languages and developers,
    the API world has caused this breadth of formats to shrink a bit.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的格式问题曾经是一个比今天更棘手的问题。我们曾经有许多特定于个人语言和开发人员的格式，但API世界已经导致这些格式的广度收缩了一些。
- en: The rise of Node and JavaScript as a lingua franca among data transmission formats
    has allowed most APIs to think of JSON first. JSON is a relatively tight format
    that has support in almost every major language now, and Go is no exception.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Node和JavaScript作为数据传输格式的通用语言的崛起使大多数API首先考虑JSON。 JSON是一个相对紧凑的格式，现在几乎每种主要语言都有支持，Go也不例外。
- en: JSON
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JSON
- en: 'The following is a quick and simple example of how simply Go can send and receive
    JSON data using the core packages:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个简单快速的示例，说明Go如何使用核心包发送和接收JSON数据：
- en: '[PRE2]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: One thing to note here are the JSON representations of our variables in the
    `User` struct. Anytime you see data within the grave accent ([PRE3]
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的是`User`结构中变量的JSON表示。每当您在重音符号（[PRE3]
- en: type User struct {
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 类型用户结构{
- en: Name string `xml:"name"`
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Name string `xml：“name”`
- en: Email string `xml:"email"`
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 电子邮件字符串`xml：“email”`
- en: ID int `xml:"id"`
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: ID int `xml：“id”`
- en: '}'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: ourUser := User{}
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: ourUser：= User{}
- en: ourUser.Name = "Bill Smith"
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: ourUser.Name =“Bill Smith”
- en: ourUser.Email = "bill.smith@example.com"
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: ourUser.Email =“bill.smith@example.com”
- en: ourUser.ID = 100
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: ourUser.ID = 100
- en: output,_ := xml.Marshal(&ourUser)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: output，_：= xml.Marshal（&ourUser）
- en: fmt.Fprintln(w, string(output))
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Fprintln（w，string（output））
- en: '[PRE5]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: package main
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 主要
- en: import
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 进口
- en: (
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: '"fmt"'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: “ fmt”
- en: '"net/http"'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: “net/http”
- en: '"launchpad.net/goyaml"'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: “launchpad.net/goyaml”
- en: )
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: type User struct {
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 类型用户结构{
- en: Name string
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Name string`}`
- en: Email string
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 电子邮件字符串
- en: ID int
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: ID int
- en: '}'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: func userRouter(w http.ResponseWriter, r *http.Request) {
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: func userRouter(w http.ResponseWriter, r *http.Request) {
- en: ourUser := User{}
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: ourUser := User{}
- en: ourUser.Name = "Bill Smith"
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: ourUser.Name = "Bill Smith"
- en: ourUser.Email = "bill.smith@example.com"
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: ourUser.Email = "bill.smith@example.com"
- en: ourUser.ID = 100
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: ourUser.ID = 100
- en: output,_ := goyaml.Marshal(&ourUser)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: output,_ := goyaml.Marshal(&ourUser)
- en: fmt.Fprintln(w, string(output))
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Fprintln(w, string(output))
- en: '}'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: func main() {
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: func main() {
- en: fmt.Println("Starting YAML server")
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println("Starting YAML server")
- en: http.HandleFunc("/user", userRouter)
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: http.HandleFunc("/user", userRouter)
- en: http.ListenAndServe(":8080",nil)
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: http.ListenAndServe(":8080",nil)
- en: '}'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE6]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: routes := mux.NewRouter()
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: routes := mux.NewRouter()
- en: routes.HandleFunc("/api/users", UserCreate).Methods("POST")
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 路由.HandleFunc("/api/users", UserCreate).Methods("POST")
- en: routes.HandleFunc("/api/users", UsersRetrieve).Methods("GET")
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: routes.HandleFunc("/api/users", UsersRetrieve).Methods("GET")
- en: '[PRE7]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: package main
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: package main
- en: import (
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: import (
- en: '"database/sql"'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '"database/sql"'
- en: '"encoding/json"'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '"encoding/json"'
- en: '"fmt"'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '"fmt"'
- en: _ "github.com/go-sql-driver/mysql"
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: _ "github.com/go-sql-driver/mysql"
- en: '"github.com/gorilla/mux"'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '"github.com/gorilla/mux"'
- en: '"net/http"'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '"net/http"'
- en: '"log"'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '"log"'
- en: )
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: var database *sql.DB
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: var database *sql.DB
- en: '[PRE8]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: type Users struct {
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: type Users struct {
- en: Users []User `json:"users"`
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Users []User `json:"users"`
- en: '}'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE9]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: type User struct {
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: type User struct {
- en: ID int "json:id"
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: ID int "json:id"
- en: Name  string "json:username"
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Name  string "json:username"
- en: Email string "json:email"
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Email string "json:email"
- en: First string "json:first"
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: First string "json:first"
- en: Last  string "json:last"
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Last  string "json:last"
- en: '}'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: func UserCreate(w http.ResponseWriter, r *http.Request) {
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: func UserCreate(w http.ResponseWriter, r *http.Request) {
- en: NewUser := User{}
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: NewUser := User{}
- en: NewUser.Name = r.FormValue("user")
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: NewUser.Name = r.FormValue("user")
- en: NewUser.Email = r.FormValue("email")
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: NewUser.Email = r.FormValue("email")
- en: NewUser.First = r.FormValue("first")
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: NewUser.First = r.FormValue("first")
- en: NewUser.Last = r.FormValue("last")
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: NewUser.Last = r.FormValue("last")
- en: output, err := json.Marshal(NewUser)
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: output, err := json.Marshal(NewUser)
- en: fmt.Println(string(output))
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(string(output))
- en: if err != nil {
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: if err != nil {
- en: fmt.Println("Something went wrong!")
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println("Something went wrong!")
- en: '}'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: sql := "INSERT INTO users set user_nickname='" + NewUser.Name + "', user_first='"
    + NewUser.First + "', user_last='" + NewUser.Last + "', user_email='" + NewUser.Email
    + "'"
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: sql := "INSERT INTO users set user_nickname='" + NewUser.Name + "', user_first='"
    + NewUser.First + "', user_last='" + NewUser.Last + "', user_email='" + NewUser.Email
    + "'"
- en: q, err := database.Exec(sql)
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: q, err := database.Exec(sql)
- en: if err != nil {
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: if err != nil {
- en: fmt.Println(err)
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(err)
- en: '}'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: fmt.Println(q)
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Println(q)
- en: '}'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE10]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: func UsersRetrieve(w http.ResponseWriter, r *http.Request) {
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: func UsersRetrieve(w http.ResponseWriter, r *http.Request) {
- en: w.Header().Set("Pragma","no-cache")
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: w.Header().Set("Pragma","no-cache")
- en: rows,_ := database.Query("select * from users LIMIT 10")
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: rows,_ := database.Query("select * from users LIMIT 10")
- en: "Response \t:= Users{}"
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: "Response \t:= Users{}"
- en: for rows.Next() {
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: for rows.Next() {
- en: user := User{}
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: user := User{}
- en: rows.Scan(&user.ID, &user.Name, &user.First, &user.Last, &user.Email )
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: rows.Scan(&user.ID, &user.Name, &user.First, &user.Last, &user.Email )
- en: Response.Users = append(Response.Users, user)
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Response.Users = append(Response.Users, user)
- en: '}'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: output,_ := json.Marshal(Response)
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: output,_ := json.Marshal(Response)
- en: fmt.Fprintln(w,string(output))
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Fprintln(w,string(output))
- en: '}'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE11]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: func main() {
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: func main() {
- en: db, err := sql.Open("mysql", "root@/social_network")
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: db, err := sql.Open("mysql", "root@/social_network")
- en: if err != nil {
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: if err != nil {
- en: '}'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: database = db
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: database = db
- en: routes := mux.NewRouter()
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: routes := mux.NewRouter()
- en: routes.HandleFunc("/api/users", UserCreate).Methods("POST")
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: routes.HandleFunc("/api/users", UserCreate).Methods("POST")
- en: routes.HandleFunc("/api/users", UsersRetrieve).Methods("GET")
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: routes.HandleFunc("/api/users", UsersRetrieve).Methods("GET")
- en: http.Handle("/", routes)
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: http.Handle("/", routes)
- en: http.ListenAndServe(":8080", nil)
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: http.ListenAndServe(":8080", nil)
- en: '}'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE12]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '{ "payload": [ "item","item 2"], "next": "http://yourdomain.com/api/users?page=2"
    }'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '{ "payload": [ "item","item 2"], "next": "http://yourdomain.com/api/users?page=2"
    }'
- en: '[PRE13]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: func UsersRetrieve(w http.ResponseWriter, r *http.Request) {
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: func UsersRetrieve(w http.ResponseWriter, r *http.Request) {
- en: log.Println("starting retrieval")
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: log.Println("starting retrieval")
- en: start := 0
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: start := 0
- en: limit := 10
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: limit := 10
- en: next := start + limit
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: next := start + limit
- en: w.Header().Set("Pragma","no-cache")
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: w.Header().Set("Pragma","no-cache")
- en: w.Header().Set("Link","<http://localhost:8080/api/users?start="+string(next)+";
    rel=\"next\"")
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: w.Header().Set("Link","<http://localhost:8080/api/users?start="+string(next)+";
    rel=\"next\"")
- en: rows,_ := database.Query("select * from users LIMIT 10")
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: rows,_ := database.Query("select * from users LIMIT 10")
- en: Response := Users{}
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: Response := Users{}
- en: for rows.Next() {
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: for rows.Next() {
- en: user := User{}
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: user := User{}
- en: rows.Scan(&user.ID, &user.Name, &user.First, &user.Last, &user.Email )
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: rows.Scan(&user.ID, &user.Name, &user.First, &user.Last, &user.Email )
- en: Response.Users = append(Response.Users, user)
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: Response.Users = append(Response.Users, user)
- en: '}'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: output,_ := json.Marshal(Response)
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: output,_ := json.Marshal(Response)
- en: fmt.Fprintln(w,string(output))
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: fmt.Fprintln(w,string(output))
- en: '}'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: This tells the client where to go for further pagination. As we modify this
    code further, we'll include forward and backward pagination and respond to user
    parameters.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉客户端去哪里进行进一步的分页。当我们进一步修改这段代码时，我们将包括向前和向后的分页，并响应用户参数。
- en: Summary
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Summary
- en: At this point, you should be well-versed not only with the basic ideas of creating
    an API web service in REST and a few other protocols, but also in the guiding
    principles of the formats and protocols.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您不仅应该熟悉在REST和其他一些协议中创建API Web服务的基本思想，还应该熟悉格式和协议的指导原则。
- en: We dabbled in a few things in this chapter that we'll explore in more depth
    over the next few chapters, particularly MVC with the various template implementations
    in the Go language itself.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中尝试了一些东西，我们将在接下来的几章中更深入地探讨，特别是在Go语言本身的各种模板实现中的MVC。
- en: In the next chapter, we'll build the rest of our initial endpoints and explore
    more advanced routing and URL muxing.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将构建我们初始端点的其余部分，并探索更高级的路由和URL muxing。
