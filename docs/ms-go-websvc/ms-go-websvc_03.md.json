["```go\n// Find a handler on a handler map given a path string\n// Most-specific (longest) pattern wins\nfunc (mux *ServeMux) match(path string) (h Handler, pattern string) {\n  var n = 0\n    for k, v := range mux.m {\n      if !pathMatch(k, path) {\n        continue\n      }\n      if h == nil || len(k) > n {\n        n = len(k)\n        h = v.h\n        pattern = v.pattern\n      }\n    }\n    return\n}\n```", "```go\nfunc pathMatch(pattern, path string) bool {\n  if len(pattern) == 0 {\n   // should not happen\n    return false\n  }\n\n  n := len(pattern)\n  if pattern[n-1] != '/' {\n   return pattern == path\n  }\n  return len(path) >= n && path[0:n] == pattern\n}\n```", "```go\n  package httpex\n\nimport\n(\n  \"net/http\"\n  \"sync\"\n  \"sync/atomic\"\n  \"net/url\"\n  \"path\"\n  \"regexp\"\n)\n\ntype ServeMux struct {\n  mu    sync.RWMutex\n  m     map[string]muxEntry\n  hosts bool // whether any patterns contain hostnames\n}\n```", "```go\n// Does path match pattern?\nfunc pathMatch(pattern, path string) bool {\n  if len(pattern) == 0 {\n    // should not happen\n    return false\n  }\n  n := len(pattern)\n  if pattern[n-1] != '/' {\n match,_ := regexp.MatchString(pattern,path)\n return match\n  }\n fullMatch,_ := regexp.MatchString(pattern,string(path[0:n]))\n  return len(path) >= n && fullMatch\n}\n```", "```go\npackage main\n\nimport\n(\n  \"fmt\"\n  \"net/http\"\n  \"regexp\"\n)\n```", "```go\nfunc main() {\n\n    http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\n      path := r.URL.Path\n      message := \"You have triggered nothing\"\n\n      testMatch,_ := regexp.MatchString(\"/testing[0-9]{3}\",path); \n\n      if (testMatch == true) {\n        // helper functions\n        message = \"You hit the test!\"\n      }\n\n      fmt.Fprintln(w,message)\n    })\n```", "```go\n    http.ListenAndServe(\":8080\", nil)\n}\n```", "```go\n/api/users/3\n/api/users/nkozyra\n```", "```go\nmux := mux.NewRouter()\nmux.HandleFunc(\"/api/users/[\\w+\\d+]\", UserRetrieve)\n```", "```go\nmux.HandleFunc(\"/api/users/{key}\", UserRetrieve)\n```", "```go\nvariables := mux.Vars(r)\nkey := variables[\"key\"]\n```", "```go\nr.HandleFunc(\"/api/users/{key:[A-Za-z0-9\\-]}\",UserRetrieve\n```", "```go\nfunc UserRetrieve(w http.ResponseWriter, r *http.Request) {\n  urlParams := mux.Vars(r)\n  key := vars[\"key\"]\n}\n```", "```go\npackage main\n\nimport (\n  \"github.com/gorilla/rpc\"\n  \"github.com/gorilla/rpc/json\"\n  \"net/http\"\n  \"fmt\"\n  \"strconv\"\n  \"unicode/utf8\"\n)\n\ntype RPCAPIArguments struct {\n  Message string\n}\n\ntype RPCAPIResponse struct {\n  Message string\n}\n\ntype StringService struct{}\n\nfunc (h *StringService) Length(r *http.Request, arguments *RPCAPIArguments, reply *RPCAPIResponse) error {\n  reply.Message = \"Your string is \" + fmt.Sprintf(\"Your string is %d chars long\", utf8.RuneCountInString(arguments.Message)) + \" characters long\"\n  return nil\n}\n\nfunc main() {\n  fmt.Println(\"Starting service\")\n  s := rpc.NewServer()\n  s.RegisterCodec(json.NewCodec(), \"application/json\")\n  s.RegisterService(new(StringService), \"\")\n  http.Handle(\"/rpc\", s)\n  http.ListenAndServe(\":10000\", nil)\n}\n```", "```go\ncurl http://localhost:8080/api/users --data \"name=nkozyra&email=nkozyra@gmail.com&first=nathan&last=nathan\"\n\n```", "```go\n  type CreateResponse struct {\n    Error string \"json:error\"\n  }\n```", "```go\n  func UserCreate(w http.ResponseWriter, r *http.Request) {\n\n    NewUser := User{}\n    NewUser.Name = r.FormValue(\"user\")\n    NewUser.Email = r.FormValue(\"email\")\n    NewUser.First = r.FormValue(\"first\")\n    NewUser.Last = r.FormValue(\"last\")\n    output, err := json.Marshal(NewUser)\n    fmt.Println(string(output))\n    if err != nil {\n      fmt.Println(\"Something went wrong!\")\n    }\n\n    Response := CreateResponse{}\n    sql := \"INSERT INTO users SET user_nickname='\" + NewUser.Name + \"', user_first='\" + NewUser.First + \"', user_last='\" + NewUser.Last + \"', user_email='\" + NewUser.Email + \"'\"\n    q, err := database.Exec(sql)\n    if err != nil {\n      Response.Error = err.Error()\n    }\n    fmt.Println(q)\n    createOutput,_ := json.Marshal(Response)\n    fmt.Fprintln(w,string(createOutput))\n  }\n```", "```go\n> curl http://localhost:8080/api/users \u2013data \"name=nkozyra&email=nkozyra@gmail.com&first=nathan&last=nathan\"\n{\"Error\": \"Error 1062: Duplicate entry '' for key 'user nickname'\"}\n\n```", "```go\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>API Interface</title>\n    <script src=\"img/jquery.min.js\"></script>\n    <link href=\"http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <script src=\"img/bootstrap.min.js\"></xscript>\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <script src=\"img/script.js\"></script>\n  </head>\n  <body>\n\n  <div class=\"container\">\n      <div class=\"row\">\n  <div class=\"col-12-lg\">\n        <h1>API Interface</h1>\n    <div class=\"alert alert-warning\" id=\"api-messages\" role=\"alert\"></div>\n\n    <ul class=\"nav nav-tabs\" role=\"tablist\">\n      <li class=\"active\"><a href=\"#create\" role=\"tab\" data-toggle=\"tab\">Create User</a></li>\n    </ul>\n\n    <div class=\"tab-content\">\n      <div class=\"tab-pane active\" id=\"create\">\n\n      <div class=\"form-group\">\n      <label for=\"createEmail\">Email</label>\n      <input type=\"text\" class=\"form-control\" id=\"createEmail\" placeholder=\"Enter email\">\n      </div>\n      <div class=\"form-group\">\n      <label for=\"createUsername\">Username</label>\n      <input type=\"text\" class=\"form-control\" id=\"createUsername\" placeholder=\"Enter username\">\n      </div>\n      <div class=\"form-group\">\n            <label for=\"createFirst\">First Name</label>\n      <input type=\"text\" class=\"form-control\" id=\"createFirst\" placeholder=\"First Name\">\n      </div>\n      <div class=\"form-group\">\n      <label for=\"createLast\">Last Name</label>\n      <input type=\"text\" class=\"form-control\" id=\"createLast\" placeholder=\"Last Name\">\n      </div>\n\n      <button type=\"submit\" onclick=\"userCreate();\" class=\"btn btn-success\">Create</button>\n\n      </div>\n\n    </div>\n  </div>\n  </div>\n\n  </div>\n\n  <script>\n\n  function userCreate() {\n    action = \"http://localhost:8080/api/users\";\n    postData = {};\n    postData.email  = $('#createEmail').val();\n    postData.user  = $('#createUsername').val();\n    postData.first  = $('#createFirst').val();\n    postData.last = $('#createLast').val();\n\n    $.post(action,postData,function(data) {\n      if (data.error) {\n        $('.alert').html(data.error);\n        $('.alert').alert();\n      }\n    },'jsonp');\n  }\n\n  $(document).ready(function() {\n    $('.alert').alert('close');\n\n  });\n  </script>\n  </body>\n</html>\n```", "```go\nw.Header().Set(\"Access-Control-Allow-Origin\",\"http://localhost:9000\")\n```", "```go\n  func dbErrorParse(err string) (string, int64) {\n    Parts := strings.Split(err, \":\")\n    errorMessage := Parts[1]\n    Code := strings.Split(Parts[0],\"Error \")\n    errorCode,_ := strconv.ParseInt(Code[1],10,32)\n    return errorMessage, errorCode\n  }\n```", "```go\n  type CreateResponse struct {\n    Error string \"json:error\"\n    ErrorCode int \"json:code\"\n  }\n```", "```go\n    if err != nil {\n      errorMessage, errorCode := dbErrorParse( err.Error() )\n      fmt.Println(errorMessage)\n      error, httpCode, msg := ErrorMessages(errorCode)\n      Response.Error = msg\n      Response.ErrorCode = error\n      fmt.Println(httpCode)\n    }\n```", "```go\ntype ErrMsg struct {\n    ErrCode int\n    StatusCode int\n    Msg string\n}\nfunc ErrorMessages(err int64) (ErrMsg) {\n    var em ErrMsg{}\n    errorMessage := \"\"\n    statusCode := 200;\n    errorCode := 0\n    switch (err) {\n      case 1062:\n        errorMessage = \"Duplicate entry\"\n        errorCode = 10\n        statusCode = 409\n    }\n\n    em.ErrCode = errorCode\n    em.StatusCode = statusCode\n    em.Msg = errorMsg\n\n    return em\n\n  }\n```", "```go\n      http.Error(w, \"Conflict\", httpCode)\n```", "```go\n    if err != nil {\n      errorMessage, errorCode := dbErrorParse( err.Error() )\n      fmt.Println(errorMessage)\n            error, httpCode, msg := ErrorMessages(errorCode)\n      Response.Error = msg\n      Response.ErrorCode = error\n      http.Error(w, \"Conflict\", httpCode)\n    }\n```", "```go\nALTER TABLE `users`\n  ADD COLUMN `user_image` MEDIUMBLOB NOT NULL AFTER `user_email`;\n```", "```go\n<div class=\"form-group\">\n<label for=\"createLast\">Image</label>\n<input type=\"file\" class=\"form-control\" name=\"image\" id=\"createImage\" placeholder=\"Image\">\n</div>\n```", "```go\n    f, _, err := r.FormFile(\"image1\")\n    if err != nil { \n      fmt.Println(err.Error())\n    }\n```", "```go\n    fileData,_ := ioutil.ReadAll(f)\n```", "```go\n    fileString := base64.StdEncoding.EncodeToString(fileData)\n```", "```go\nsql := \"INSERT INTO users set user_image='\" + fileString + \"',  user_nickname='\"\n```"]