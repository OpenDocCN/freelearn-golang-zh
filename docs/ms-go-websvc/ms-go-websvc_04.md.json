["```go\nif version == 1 {\n  import \"v1\"\n} else if version == 2 {\n  import \"v2\"\n}\n```", "```go\nsocialnetwork.go\n/{GOPATH}/github.com/nkozyra/gowebservice/v1.go\n/{GOPATH}/github.com/nkozyra/gowebservice/v2.go\n\n```", "```go\nimport \"github.com/nkozyra/gowebservice/v1\"\nimport \"github.com/nkozyra/gowebservice/v2\"\n\n```", "```go\npackage main\n\nimport\n(\n  \"nathankozyra.com/api/v1\"\n  \"nathankozyra.com/api/v2\"\n)\n\nfunc main() {\n\n  v := 1\n\n  if v == 1 {\n    v1.API()\n    // do stuff with API v1\n  } else {\n    v2.API()\n    // do stuff with API v2\n  }\n\n}\n```", "```go\npackage v2\n\nimport\n(\n  \"nathankozyra.com/api/api\"\n)\n\ntype API struct {\n\n}\n\nfunc main() {\n  api.Version = 1\n  api.StartServer()\n}\n```", "```go\npackage api\n\nimport (\n  \"database/sql\"\n  \"encoding/json\"\n  \"fmt\"\n  _ \"github.com/go-sql-driver/mysql\"\n  \"github.com/gorilla/mux\"\n  \"net/http\"\n  \"log\"\n)\n\nvar Database *sql.DB\n\ntype Users struct {\n  Users []User `json:\"users\"`\n}\n\ntype User struct {\n  ID int \"json:id\"\n  Name  string \"json:username\"\n  Email string \"json:email\"\n  First string \"json:first\"\n  Last  string \"json:last\"\n}\n\nfunc StartServer() {\n\n  db, err := sql.Open(\"mysql\", \"root@/social_network\")\n  if err != nil {\n  }\n  Database = db\n  routes := mux.NewRouter()\n\n  http.Handle(\"/\", routes)\n  http.ListenAndServe(\":8080\", nil)\n}\n```", "```go\n  Routes.HandleFunc(\"/api.{format:json|xml|txt}/user\", UsersRetrieve).Methods(\"GET\")\n```", "```go\nvar Format string\n```", "```go\nfunc GetFormat(r *http.Request) {\n\n  Format = r.URL.Query()[\"format\"][0]\n\n}\n```", "```go\nfunc SetFormat( data interface{} )  []byte {\n\n  var apiOutput []byte\n  if Format == \"json\" {\n    output,_ := json.Marshal(data)\n    apiOutput = output\n  }else if Format == \"xml\" {\n    output,_ := xml.Marshal(data)\n    apiOutput = output\n  }\n  return apiOutput\n}\n```", "```go\nfunc UsersRetrieve(w http.ResponseWriter, r *http.Request) {\n  log.Println(\"Starting retrieval\")\n  GetFormat(r)\n  start := 0\n  limit := 10\n\n  next := start + limit\n\n  w.Header().Set(\"Pragma\",\"no-cache\")\n  w.Header().Set(\"Link\",\"<http://localhost:8080/api/users?start=\"+string(next)+\"; rel=\\\"next\\\"\")\n\n  rows,_ := Database.Query(\"SELECT * FROM users LIMIT 10\")\n  Response:= Users{}\n\n  for rows.Next() {\n\n    user := User{}\n    rows.Scan(&user.ID, &user.Name, &user.First, &user.Last, &user.Email )\n\n    Response.Users = append(Response.Users, user)\n  }\n    output := SetFormat(Response)\n  fmt.Fprintln(w,string(output))\n}\n```", "```go\npackage main\n\nimport (\n\n    \"fmt\"\n    \"net/http\"\n    \"code.google.com/p/go.net/websocket\"\n    \"strconv\"\n)\n\nvar addr = \":12345\"\n\nfunc EchoLengthServer(ws *websocket.Conn) {\n\n    var msg string\n\n    for {\n      websocket.Message.Receive(ws, &msg)\n      fmt.Println(\"Got message\",msg)\n      length := len(msg)\n      if err := websocket.Message.Send(ws, strconv.FormatInt(int64(length), 10) )  ; err != nil {\n          fmt.Println(\"Can't send message length\")\n          break\n        }\n    }\n```", "```go\n}\n\nfunc websocketListen() {\n\n    http.Handle(\"/length\", websocket.Handler(EchoLengthServer))\n    err := http.ListenAndServe(addr, nil)\n    if err != nil {\n        panic(\"ListenAndServe: \" + err.Error())\n    }\n\n}\n```", "```go\nfunc main() {\n\n    http.HandleFunc(\"/websocket\", func(w http.ResponseWriter, r *http.Request) {\n        http.ServeFile(w, r, \"websocket.html\")\n    })\n    websocketListen()\n\n}\n```", "```go\n<html>\n<head>\n  <script src=\"img/jquery.min.js\"></script>\n</head>\n\n<body>\n\n<script>\n  var socket;\n\n  function update(msg) {\n\n    $('#messageArea').html(msg)\n\n  }\n```", "```go\n  function connectWS(){\n\n    var host = \"ws://localhost:12345/length\";\n\n    socket = new WebSocket(host);\n    socket.onopen = function() {\n      update(\"Websocket connected\")\n    }\n\n    socket.onmessage = function(message){\n\n      update('Websocket counted '+message.data+' characters in your message');\n    }\n\n    socket.onclose = function() {\n      update('Websocket closed');\n    }\n\n  }\n\n  function send() {\n\n    socket.send($('#message').val());\n\n  }\n\n  function closeSocket() {\n\n    socket.close();\n  }\n\n  connectWS();\n</script>\n\n<div>\n  <h2>Your message</h2>\n  <textarea style=\"width:50%;height:300px;font-size:20px;\" id=\"message\"></textarea>\n  <div><input type=\"submit\" value=\"Send\" onclick=\"send()\" /> <input type=\"button\" onclick=\"closeSocket();\" value=\"Close\" /></div>\n</div>\n\n<div id=\"messageArea\"></div>\n</body>\n</html>\n```", "```go\nfunc ErrorMessages(err int64) (int, int, string) {\n  errorMessage := \"\"\n  statusCode := 200;\n  errorCode := 0\n  switch (err) {\n    case 1062:\n      errorMessage = http.StatusText(409)\n      errorCode = 10\n      statusCode = http.StatusConflict\n  }\n\n  return errorCode, statusCode, errorMessage\n\n}\n```", "```go\n    default:\n      errorMessage = http.StatusText(err)\n      errorCode = 0\n      statusCode = err\n```", "```go\n  Routes.HandleFunc(\"/api/users/{id:[0-9]+}\", UsersUpdate).Methods(\"PUT\")\n```", "```go\nfunc UsersUpdate(w http.ResponseWriter, r *http.Request) {\n  Response := UpdateResponse{}\n  params := mux.Vars(r)\n  uid := params[\"id\"]\n  email := r.FormValue(\"email\")\n\n  var userCount int\n  err := Database.QueryRow(\"SELECT COUNT(user_id) FROM users WHERE user_id=?\", uid).Scan(&userCount)\n  if userCount == 0 {\n\n      error, httpCode, msg := ErrorMessages(404)\n      log.Println(error)\n      log.Println(w, msg, httpCode)\n      Response.Error = msg\n      Response.ErrorCode = httpCode\n      http.Error(w, msg, httpCode)\n\n  }else if err != nil {\n    log.Println(error)\n  } else {\n\n    _,uperr := Database.Exec(\"UPDATE users SET user_email=?WHERE user_id=?\",email,uid)\n    if uperr != nil {\n      _, errorCode := dbErrorParse( uperr.Error() )\n      _, httpCode, msg := ErrorMessages(errorCode)\n\n      Response.Error = msg\n      Response.ErrorCode = httpCode\n      http.Error(w, msg, httpCode)\n    } else {\n      Response.Error = \"success\"\n      Response.ErrorCode = 0\n      output := SetFormat(Response)\n      fmt.Fprintln(w,string(output))\n    }\n  }\n}\n```"]