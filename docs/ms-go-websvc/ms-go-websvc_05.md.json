["```go\nfunc Init() {\n  Routes = mux.NewRouter()\n  Routes.HandleFunc(\"/api/users\", UserCreate).Methods(\"POST\")\n  Routes.HandleFunc(\"/api/users\", UsersRetrieve).Methods(\"GET\")\t\n  Routes.HandleFunc(\"/api/users/{id:[0-9]+}\",UsersUpdate).Methods(\"PUT\")\n  Routes.HandleFunc(\"/api/users\", UsersInfo).Methods(\"OPTIONS\")\n}\n```", "```go\nfunc UsersInfo(w http.ResponseWriter, r *http.Request) {\n  w.Header().Set(\"Allow\",\"DELETE,GET,HEAD,OPTIONS,POST,PUT\")\n}\n```", "```go\npackage specification\ntype MethodPOST struct {\n  POST EndPoint\n}\ntype MethodGET struct {\n  GET EndPoint\n}\ntype MethodPUT struct {\n  PUT EndPoint\n}\ntype MethodOPTIONS struct {\n  OPTIONS EndPoint\n}\ntype EndPoint struct {\n  Description string `json:\"description\"`\n  Parameters []Param `json:\"parameters\"`\n}\ntype Param struct {\n  Name string \"json:name\"\n  ParameterDetails Detail `json:\"details\"`\n}\ntype Detail struct {\n  Type string \"json:type\"\n  Description string `json:\"description\"`\n  Required bool \"json:required\"\n}\n\nvar UserOPTIONS = MethodOPTIONS{ OPTIONS: EndPoint{ Description: \"This page\" } }\nvar UserPostParameters = []Param{ {Name: \"Email\", ParameterDetails: Detail{Type:\"string\", Description: \"A new user's email address\", Required: false} } }\n\nvar UserPOST = MethodPOST{ POST: EndPoint{ Description: \"Create a user\", Parameters: UserPostParameters } }\nvar UserGET = MethodGET{ GET: EndPoint{ Description: \"Access a user\" }}\n```", "```go\ntype DocMethod interface {\n}\n```", "```go\nfunc UsersInfo(w http.ResponseWriter, r *http.Request) {\n  w.Header().Set(\"Allow\",\"DELETE,GET,HEAD,OPTIONS,POST,PUT\")\n\n  UserDocumentation := []DocMethod{}\n  UserDocumentation = append(UserDocumentation, Documentation.UserPOST)\n  UserDocumentation = append(UserDocumentation, Documentation.UserOPTIONS)\n  output := SetFormat(UserDocumentation)\n  fmt.Fprintln(w,string(output))\n}\n```", "```go\n---\napi:\n  name: Social Network\n  methods:\n    - GET\n    - POST\n    - PUT\n    - OPTIONS\n    - DELETE\n```", "```go\ntype GenericData struct {\n  Name string\n  Options GenericDataBlock\n}\n\ntype GenericDataBlock struct {\n  Server string\n  Address string\n}\n\nfunc main() {\n  Data := GenericData{ Name: \"Section\", Options: GenericDataBlock{Server: \"server01\", Address: \"127.0.0.1\"}}\n\n}\n```", "```go\n{{range $index, $value := Options}}\n  $index = $value\n{{end}}\n```", "```go\npackage main\n\nimport\n(\n  \"fmt\"\n  \"net/http\"\n  \"log\"\n  \"sync\"\n)\n\nconst (\n  serverName = \"localhost\"\n  SSLport = \":443\"\n  HTTPport = \":8080\"\n  SSLprotocol = \"https://\"\n  HTTPprotocol = \"http://\"\n)\n\nfunc secureRequest(w http.ResponseWriter, r *http.Request) {\n  fmt.Fprintln(w,\"You have arrived at port 443, but you are not yet secure.\")\n}\n```", "```go\nfunc redirectNonSecure(w http.ResponseWriter, r *http.Request) {\n  log.Println(\"Non-secure request initiated, redirecting.\")\n  redirectURL := SSLprotocol + serverName + r.RequestURI\n  http.Redirect(w, r, redirectURL, http.StatusOK)\n}\n```", "```go\nfunc main() {\n  wg := sync.WaitGroup{}\n  log.Println(\"Starting redirection server, try to access @ http:\")\n\n  wg.Add(1)\n  go func() {\n    http.ListenAndServe(HTTPport,http.HandlerFunc(redirectNonSecure))\n    wg.Done()\n  }()\n  wg.Add(1)\n  go func() {\n    http.ListenAndServe(SSLport,http.HandlerFunc(secureRequest))\n    wg.Done()\n  }()\n  wg.Wait()\n}\n```", "```go\nhttp.ListenAndServe(HTTPport,http.HandlerFunc(redirectNonSecure))\nhttp.ListenAndServe(SSLport,http.HandlerFunc(secureRequest))\n\n```", "```go\ngo run generate_cert.go --host localhost --ca true\n\n```", "```go\nhttp.ListenAndServeTLS(SSLport, \"cert.pem\", \"key.pem\", http.HandlerFunc(secureRequest))\n```", "```go\nfmt.Fprintln(w,\"You have arrived at port 443, and now you are marginally more secure.\")\n```", "```go\nALTER TABLE `users`\n  ADD COLUMN `user_password` VARCHAR(1024) NOT NULL AFTER `user_nickname`,\n  ADD COLUMN `user_salt` VARCHAR(128) NOT NULL AFTER `user_password`,\n  ADD INDEX `user_password_user_salt` (`user_password`, `user_salt`);\n```", "```go\npackage password\n\nimport\n(\n  \"encoding/base64\"\n  \"math/rand\"\n  \"crypto/sha256\"\n  \"time\"\n)\n\nconst randomLength = 16\n\nfunc GenerateSalt(length int) string {\n  var salt []byte\n  var asciiPad int64\n\n  if length == 0 {\n    length = randomLength\n  }\n\n  asciiPad = 32\n\n  for i:= 0; i < length; i++ {\n    salt = append(salt, byte(rand.Int63n(94) + asciiPad) )\n  }\n\n  return string(salt)\n}\n```", "```go\nfunc GenerateHash(salt string, password string) string {\n  var hash string\n  fullString := salt + password\n  sha := sha256.New()\n  sha.Write([]byte(fullString))\n  hash = base64.URLEncoding.EncodeToString(sha.Sum(nil))\n\n  return hash\n}\n```", "```go\nfunc ReturnPassword(password string) (string, string) {\n  rand.Seed(time.Now().UTC().UnixNano())\n\n  salt := GenerateSalt(0)\n\n  hash := GenerateHash(salt,password)\n\n  return salt, hash\n}\n```", "```go\n  function userCreate() {\n    action = \"https://localhost/api/users\";\n    postData = {};\n    postData.email = $('#createEmail').val();\n    postData.user = $('#createUsername').val();\n    postData.first = $('#createFirst').val();\n    postData.last= $('#createLast').val();\n    postData.password = $('#createPassword').val();\n```", "```go\nvar formData = new FormData($('form')[0]);\n$.ajax({\n\n    url: action,  //Server script to process data\n    dataType: 'json',\n    type: 'POST',\n    statusCode: {\n      409: function() {\n        $('#api-messages').html('Email address or nickname already exists!');\n        $('#api-messages').removeClass('alert-success').addClass('alert-warning');\n        $('#api-messages').show();\n        },\n      200: function() {\n        $('#api-messages').html('User created successfully!');\n        $('#api-messages').removeClass('alert-warning').addClass('alert-success');\n        $('#api-messages').show();\n        }\n      },\n```", "```go\nEndpoint\n/api/oauth/authorize\n/api/oauth/token\n/api/oauth/revoke\n```", "```go\nCREATE TABLE `api_credentials` (\n  `user_id` INT(10) UNSIGNED NOT NULL,\n  `consumer_key` VARCHAR(128) NOT NULL,\n  `consumer_secret` VARCHAR(128) NOT NULL,\n  `callback_url` VARCHAR(256) NOT NULL\n  CONSTRAINT `FK__users` FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`) ON UPDATE NO ACTION ON DELETE NO ACTION\n)\n```", "```go\n  fmt.Println(Password.GenerateSalt(22))\n  fmt.Println(Password.GenerateSalt(41))\n```", "```go\n  import(\n  Pseudoauth \"github.com/nkozyra/gowebservice/pseudoauth\" \n  )\n```", "```go\nfunc CheckCredentials(w http.ResponseWriter, r *http.Request)  {\n  var Credentials string\n  Response := CreateResponse{}\n  consumerKey := r.FormValue(\"consumer_key\")\n  fmt.Println(consumerKey)\n  timestamp := r.FormValue(\"timestamp\")\n  signature := r.FormValue(\"signature\")\n  nonce := r.FormValue(\"nonce\")\n  err := Database.QueryRow(\"SELECT consumer_secret from api_credentials where consumer_key=?\", consumerKey).Scan(&Credentials)\n    if err != nil {\n    error, httpCode, msg := ErrorMessages(404)\n    log.Println(error)\t\n    log.Println(w, msg, httpCode)\n    Response.Error = msg\n    Response.ErrorCode = httpCode\n    http.Error(w, msg, httpCode)\n    return\n  }\n```", "```go\n  token,err := Pseudoauth.ValidateSignature(consumerKey,Credentials,timestamp,nonce,signature,0)\n  if err != nil {\n    error, httpCode, msg := ErrorMessages(401)\n    log.Println(error)\t\n    log.Println(w, msg, httpCode)\n    Response.Error = msg\n    Response.ErrorCode = httpCode\n    http.Error(w, msg, httpCode)\n    return\n  }\n```", "```go\n  AccessRequest := OauthAccessResponse{}\n  AccessRequest.AccessToken = token.AccessToken\n  output := SetFormat(AccessRequest)\n  fmt.Fprintln(w,string(output))\n}\n```", "```go\npackage pseudoauth\nimport\n(\n  \"crypto/hmac\"\n  \"crypto/sha1\"\n  \"errors\"\n  \"fmt\"\n  \"math/rand\"\n  \"strings\"\n  \"time\"\n)\n```", "```go\ntype Token struct {\n  Valid bool\n  Created int64\n  Expires int64\n  ForUser int\n  AccessToken string\n}\n```", "```go\nvar nonces map[string] Token\nfunc init() {\n  nonces = make(map[string] Token)\n}\n\nfunc ValidateSignature(consumer_key string, consumer_secret string, timestamp string,  nonce string, signature string, for_user int) (Token, error) {\n  var hashKey []byte\n  t := Token{}\n  t.Created = time.Now().UTC().Unix()\n  t.Expires = t.Created + 600\n  t.ForUser = for_user\n\n  qualifiedMessage := []string{consumer_key, consumer_secret, timestamp, nonce}\n  fullyQualified := strings.Join(qualifiedMessage,\" \")\n\n  fmt.Println(fullyQualified)\n  mac := hmac.New(sha1.New, hashKey)\n  mac.Write([]byte(fullyQualified))\n  generatedSignature := mac.Sum(nil)\n\n  //nonceExists := nonces[nonce]\n\n  if hmac.Equal([]byte(signature),generatedSignature) == true {\n\n    t.Valid = true\n    t.AccessToken = GenerateToken()\n    nonces[nonce] = t\n    return t, nil\n  } else {\n    err := errors.New(\"Unauthorized\")\n    t.Valid = false\n    t.AccessToken = \"\"\n    nonces[nonce] = t\n    return t, err\n  }\n\n}\n```", "```go\nfunc GenerateToken() string {\n  var token []byte\n  rand.Seed(time.Now().UTC().UnixNano())\n  for i:= 0; i < 32; i++ {\n    token = append(token, byte(rand.Int63n(74) + 48) )\n  }\n  return string(token)\n}\n```", "```go\nCREATE TABLE `api_tokens` (\n  `api_token_id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n  `application_user_id` INT(10) UNSIGNED NOT NULL,\n  `user_id` INT(10) UNSIGNED NOT NULL,\n  `api_token_key` VARCHAR(50) NOT NULL,\n  PRIMARY KEY (`api_token_id`)\n)\n```", "```go\nCREATE TABLE `sessions` (\n  `session_id` VARCHAR(128) NOT NULL,\n  `user_id` INT(10) NOT NULL,\n  UNIQUE INDEX `session_id` (`session_id`)\n)\n```", "```go\n  Routes.HandleFunc(\"/authorize\", ApplicationAuthorize).Methods(\"POST\")\n  Routes.HandleFunc(\"/authorize\", ApplicationAuthenticate).Methods(\"GET\")\n```", "```go\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>{{.Title}}</title>\n  </head>\n  <body>\n  {{if .Authenticate}}\n      <h1>{{.Title}}</h1>\n      <form action=\"{{.Action}}\" method=\"POST\">\n      <input type=\"hidden\" name=\"consumer_key\" value=\"{.ConsumerKey}\" />\n      Log in here\n      <div><input name=\"username\" type=\"text\" /></div>\n      <div><input name=\"password\" type=\"password\" /></div>\n      Allow {{.Application}} to access your data?\n      <div><input name=\"authorize\" value=\"1\" type=\"radio\"> Yes</div>\n      <div><input name=\"authorize\" value=\"0\" type=\"radio\"> No</div>\n      <input type=\"submit\" value=\"Login\" />\n  {{end}}\n  </form>\n  </body>\n</html>\n```", "```go\ntype Page struct {\n  Title string\n  Authorize bool\n  Authenticate bool\n  Application string\n  Action string\n  ConsumerKey string\n}\n```", "```go\nfunc ApplicationAuthenticate(w http.ResponseWriter, r *http.Request) {\n  Authorize := Page{}\n  Authorize.Authenticate = true\n  Authorize.Title = \"Login\"\n  Authorize.Application = \"\"\n  Authorize.Action = \"/authorize\"\n\n  tpl := template.Must(template.New(\"main\").ParseFiles(\"authorize.html\"))\n  tpl.ExecuteTemplate(w, \"authorize.html\", Authorize)\n}\n```", "```go\nfunc ApplicationAuthorize(w http.ResponseWriter, r *http.Request) {\n\n  username := r.FormValue(\"username\")\n  password := r.FormValue(\"password\")\n  allow := r.FormValue(\"authorize\")\n\n  var dbPassword string\n  var dbSalt string\n  var dbUID string\n\n  uerr := Database.QueryRow(\"SELECT user_password, user_salt, user_id from users where user_nickname=?\", username).Scan(&dbPassword, &dbSalt, &dbUID)\n  if uerr != nil {\n\n  }\n```", "```go\n  consumerKey := r.FormValue(\"consumer_key\")\n  fmt.Println(consumerKey)\n\n  var CallbackURL string\n  var appUID string\n  err := Database.QueryRow(\"SELECT user_id,callback_url from api_credentials where consumer_key=?\", consumerKey).Scan(&appUID, &CallbackURL)\n  if err != nil {\n\n    fmt.Println(err.Error())\n    return\n  }\n\n  expectedPassword := Password.GenerateHash(dbSalt, password)\n  if dbPassword == expectedPassword && allow == \"1\" {\n\n    requestToken := Pseudoauth.GenerateToken()\n\n    authorizeSQL := \"INSERT INTO api_tokens set application_user_id=\" + appUID + \", user_id=\" + dbUID + \", api_token_key='\" + requestToken + \"' ON DUPLICATE KEY UPDATE user_id=user_id\"\n\n    q, connectErr := Database.Exec(authorizeSQL)\n    if connectErr != nil {\n\n    } else {\n      fmt.Println(q)\n    }\n    redirectURL := CallbackURL + \"?request_token=\" + requestToken\n    fmt.Println(redirectURL)\n    http.Redirect(w, r, redirectURL, http.StatusAccepted)\n```", "```go\n  } else {\n\n    fmt.Println(dbPassword, expectedPassword)\n    http.Redirect(w, r, \"/authorize\", http.StatusUnauthorized)\n  }\n\n}\n```"]