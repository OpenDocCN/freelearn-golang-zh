["```go\ngo get code.google.com/p/goauth2/oauth\n\n```", "```go\npackage main\n\nimport (\n  \"code.google.com/p/goauth2/oauth\"\n  \"fmt\"\n)\n```", "```go\nvar (\n  clientID     = \"[Your client ID here]\"\n  clientSecret = \"[Your client secret here]\"\n  scope        = \"\"\n  redirectURL  = \"http://www.mastergoco.com/codepass\"\n  authURL      = \"https://www.facebook.com/dialog/oauth\"\n  tokenURL     = \"https://graph.facebook.com/oauth/access_token\"\n  requestURL   = \"https://graph.facebook.com/me\"\n  code         = \"\"\n)\n```", "```go\nfunc main() {\n\n  oauthConnection := &oauth.Config{\n    ClientId:     clientID,\n    ClientSecret: clientSecret,\n    RedirectURL:  redirectURL,\n    Scope:        scope,\n    AuthURL:      authURL,\n    TokenURL:     tokenURL,\n  }\n\n  url := oauthConnection.AuthCodeURL(\"\")\n  fmt.Println(url)\n\n}\n```", "```go\ntype OauthService struct {\n  clientID string\n  clientSecret string\n  scope string\n  redirectURL string\n  authURL string\n  tokenURL string\n  requestURL string\n  code string\n}\n```", "```go\n  OauthServices := map[string] OauthService{}\n\n  OauthServices[\"facebook\"] = OauthService {\n    clientID:  \"***\",\n    clientSecret: \"***\",\n    scope: \"\",\n    redirectURL: \"http://www.mastergoco.com/connect/facebook\",\n    authURL: \"https://www.facebook.com/dialog/oauth\",\n    tokenURL: \"https://graph.facebook.com/oauth/access_token\",\n    requestURL: \"https://graph.facebook.com/me\",\n    code: \"\",\n  }\n  OauthServices[\"google\"] = OauthService {\n    clientID:  \"***.apps.googleusercontent.com\",\n    clientSecret: \"***\",\n    scope: \"https://www.googleapis.com/auth/plus.login\",\n    redirectURL: \"http://www.mastergoco.com/connect/google\",\n    authURL: \"https://accounts.google.com/o/oauth2/auth\",\n    tokenURL: \"https://accounts.google.com/o/oauth2/token\",\n    requestURL: \"https://graph.facebook.com/me\",\n    code: \"\",\n  }\n```", "```go\nfunc Init() {\n  Routes = mux.NewRouter()\n  Routes.HandleFunc(\"/interface\", APIInterface).Methods(\"GET\", \"POST\", \"PUT\", \"UPDATE\")\n  Routes.HandleFunc(\"/api/users\", UserCreate).Methods(\"POST\")\n  Routes.HandleFunc(\"/api/users\", UsersRetrieve).Methods(\"GET\")\n  Routes.HandleFunc(\"/api/users/{id:[0-9]+}\", UsersUpdate).Methods(\"PUT\")\n  Routes.HandleFunc(\"/api/users\", UsersInfo).Methods(\"OPTIONS\")\n  Routes.HandleFunc(\"/authorize\", ApplicationAuthorize).Methods(\"POST\")\n  Routes.HandleFunc(\"/authorize\", ApplicationAuthenticate).Methods(\"GET\")\n  Routes.HandleFunc(\"/authorize/{service:[a-z]+}\", ServiceAuthorize).Methods(\"GET\")\n  Routes.HandleFunc(\"/connect/{service:[a-z]+}\", ServiceConnect).Methods(\"GET\")\n  Routes.HandleFunc(\"/oauth/token\", CheckCredentials).Methods(\"POST\")\n}\n```", "```go\nfunc ServiceAuthorize(w http.ResponseWriter, r *http.Request) {\n\n  params := mux.Vars(r)\n  service := params[\"service\"]\n  redURL := OauthServices.GetAccessTokenURL(service, \"\")\n  http.Redirect(w, r, redURL, http.StatusFound)\n\n}\n```", "```go\nOauthServices[\"google\"] = OauthService {\n  clientID:  \"***.apps.googleusercontent.com\",\n  clientSecret: \"***\",\n  scope: \"https://www.googleapis.com/auth/plus.login\",\n  redirectURL: \"http://www.mastergoco.com/connect/google\",\n  authURL: \"https://accounts.google.com/o/oauth2/auth\",\n  tokenURL: \"https://accounts.google.com/o/oauth2/token\",\n  requestURL: \"https://accounts.google.com\",\n  code: \"\",\n}\n```", "```go\nCREATE TABLE IF NOT EXISTS `sessions` (\n  `session_id` varchar(128) NOT NULL,\n  `user_id` int(10) NOT NULL,\n  `session_start_time` int(11) NOT NULL,\n  `session_update_time` int(11) NOT NULL,\n  UNIQUE KEY `session_id` (`session_id`)\n)\n```", "```go\ngo get github.com/gorilla/sessions\n```", "```go\nimport (\n  ...\n  \"github.com/gorilla/mux\"\n  \"github.com/gorilla/sessions\"\n\n```", "```go\nfunc ServiceAuthorize(w http.ResponseWriter, r *http.Request) {\n\n  params := mux.Vars(r)\n  service := params[\"service\"]\n\n  loggedIn := CheckLogin()\n if loggedIn == false {\n redirect = url.QueryEscape(\"/authorize/\" + service)\n http.Redirect(w, r, \"/authorize?redirect=\"+redirect, http.StatusUnauthorized)\n return\n }\n\n  redURL := OauthServices.GetAccessTokenURL(service, \"\")\n  http.Redirect(w, r, redURL, http.StatusFound)\n\n}\n```", "```go\nfunc CheckLogin(w http.ResponseWriter, r *http.Request) bool {\n  cookieSession, err := r.Cookie(\"sessionid\")\n  if err != nil {\n    fmt.Println(\"no such cookie\")\n    Session.Create()\n    fmt.Println(Session.ID)\n    currTime := time.Now()\n    Session.Expire = currTime.Local()\n    Session.Expire.Add(time.Hour)\n\n    return false\n  } else {\n    fmt.Println(\"found cookki\")\n    tmpSession := UserSession{UID: 0}\n    loggedIn := Database.QueryRow(\"select user_id from sessions where session_id=?\", cookieSession).Scan(&tmpSession.UID)\n    if loggedIn != nil {\n      return false\n    } else {\n      if tmpSession.UID == 0 {\n        return false\n      } else {\n\n        return true\n      }\n    }\n  }\n}\n```", "```go\nvar Database *sql.DB\nvar Routes *mux.Router\nvar Format string\ntype UserSession struct {\n ID              string\n GorillaSesssion *sessions.Session\n UID             int\n Expire          time.Time\n}\n\nvar Session UserSession\n\nfunc (us *UserSession) Create() {\n us.ID = Password.GenerateSessionID(32)\n}\n```", "```go\n<input type=\"hidden\" name=\"auth_type\" value=\"{{.PageType}}\" />\n```", "```go\n  if len(r.URL.Query()[\"consumer_key\"]) > 0 {\n    Authorize.ConsumerKey = r.URL.Query()[\"consumer_key\"][0]\n  } else {\n    Authorize.ConsumerKey = \"\"\n  }\n  if len(r.URL.Query()[\"redirect\"]) > 0 {\n    Authorize.Redirect = r.URL.Query()[\"redirect\"][0]\n  } else {\n    Authorize.Redirect = \"\"\n  }\n\nif Authorize.ConsumerKey == \"\" && Authorize.Redirect != \"\" {\n  Authorize.PageType = \"user\"\n} else {\n  Authorize.PageType = \"consumer\"\n}\n```", "```go\ntype Page struct {\n  Title        string\n  Authorize    bool\n  Authenticate bool\n  Application  string\n  Action       string\n  ConsumerKey  string\n  Redirect     string\n  PageType     string\n}\n```", "```go\n  if dbPassword == expectedPassword && allow == \"1\" && authType == \"client\" {\n\n    requestToken := Pseudoauth.GenerateToken()\n\n    authorizeSQL := \"INSERT INTO api_tokens set application_user_id=\" + appUID + \", user_id=\" + dbUID + \", api_token_key='\" + requestToken + \"' ON DUPLICATE KEY UPDATE user_id=user_id\"\n\n    q, connectErr := Database.Exec(authorizeSQL)\n    if connectErr != nil {\n\n        } else {\n      fmt.Println(q)\n    }\n    redirectURL := CallbackURL + \"?request_token=\" + requestToken\n    fmt.Println(redirectURL)\n    http.Redirect(w, r, redirectURL, http.StatusAccepted)\n\n  }else if dbPassword == expectedPassword && authType == \"user\" {\n    UserSession, _ = store.Get(r, \"service-session\")\n        UserSession.AddFlash(dbUID)\n    http.Redirect(w, r, redirect, http.StatusAccepted)\n  }\n```", "```go\nCREATE TABLE `users_status` (\n  `users_status_id` INT NOT NULL AUTO_INCREMENT,\n  `user_id` INT(10) UNSIGNED NOT NULL,\n  `user_status_timestamp` INT(11) NOT NULL,\n  `user_status_text` TEXT NOT NULL,\n  PRIMARY KEY (`users_status_id`),\n  CONSTRAINT `status_users` FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`) ON UPDATE NO ACTION ON DELETE NO ACTION\n)\n```", "```go\nfunc Init() {\n  Routes = mux.NewRouter()\n  Routes.HandleFunc(\"/interface\", APIInterface).Methods(\"GET\", \"POST\", \"PUT\", \"UPDATE\")\n  Routes.HandleFunc(\"/api/users\", UserCreate).Methods(\"POST\")\n  Routes.HandleFunc(\"/api/users\", UsersRetrieve).Methods(\"GET\")\n  Routes.HandleFunc(\"/api/users/{id:[0-9]+}\", UsersUpdate).Methods(\"PUT\")\n  Routes.HandleFunc(\"/api/users\", UsersInfo).Methods(\"OPTIONS\")\n Routes.HandleFunc(\"/api/statuses\",StatusCreate).Methods(\"POST\")\n Routes.HandleFunc(\"/api/statuses\",StatusRetrieve).Methods(\"GET\")\n Routes.HandleFunc(\"/api/statuses/{id:[0-9]+}\",StatusUpdate).Methods(\"PUT\")\n Routes.HandleFunc(\"/api/statuses/{id:[0-9]+}\",StatusDelete).Methods(\"DELETE\")\n  Routes.HandleFunc(\"/authorize\", ApplicationAuthorize).Methods(\"POST\")\n  Routes.HandleFunc(\"/authorize\", ApplicationAuthenticate).Methods(\"GET\")\n  Routes.HandleFunc(\"/authorize/{service:[a-z]+}\", ServiceAuthorize).Methods(\"GET\")\n  Routes.HandleFunc(\"/connect/{service:[a-z]+}\", ServiceConnect).Methods(\"GET\")\n  Routes.HandleFunc(\"/oauth/token\", CheckCredentials).Methods(\"POST\")\n}\n```", "```go\nfunc StatusDelete(w http.ResponseWriter, r *http.Request) {\n  fmt.Fprintln(w, \"Nothing to see here\")\n}\n\nfunc StatusUpdate(w http.ResponseWriter, r *http.Request) {\n  fmt.Fprintln(w, \"Coming soon to an API near you!\")\n}\n```", "```go\nfunc StatusCreate(w http.ResponseWriter, r *http.Request) {\n\n  Response := CreateResponse{}\n  UserID := r.FormValue(\"user\")\n  Status := r.FormValue(\"status\")\n  Token := r.FormValue(\"token\")\n  ConsumerKey := r.FormValue(\"consumer_key\")\n\n  vUID := ValidateUserRequest(ConsumerKey,Token)\n```", "```go\n  if vUID != UserID {\n    Response.Error = \"Invalid user\"\n    http.Error(w, Response.Error, 401)\n  } else  {\n    _,inErr := Database.Exec(\"INSERT INTO users_status set user_status_text=?, user_id=?\", Status, UserID)\n    if inErr != nil {\n      fmt.Println(inErr.Error())\n      Response.Error = \"Error creating status\"\n      http.Error(w, Response.Error, 500)\n      fmt.Fprintln(w, Response)\n    } else {\n      Response.Error = \"Status created\"\n      fmt.Fprintln(w, Response)\n    }\n  }\n\n}\n```", "```go\nvar PermittedDomains []string\n```", "```go\nfunc Init(allowedDomains []string) {\n for _, domain := range allowedDomains {\n PermittedDomains = append(PermittedDomains,domain)\n }\n\nRoutes = mux.NewRouter()\nRoutes.HandleFunc(\"/interface\", APIInterface).Methods(\"GET\", \"POST\", \"PUT\", \"UPDATE\")\n```", "```go\nfunc API() {\n  api.Init([]string{\"http://www.example.com\"})\n```", "```go\nfunc UserCreate(w http.ResponseWriter, r *http.Request) {\n\n...\n for _,domain := range PermittedDomains {\n fmt.Println (\"allowing\",domain)\n w.Header().Set(\"Access-Control-Allow-Origin\", domain)\n  }\n```", "```go\npackage main\n\nimport\n(\n  \"net/http\"\n  \"fmt\"\n)\n\nconst (\n  URL = \"https://localhost/api/users\"\n)\n\nfunc main() {\n\n  _, err := http.Get(URL)\n  if err != nil {\n\n    fmt.Println(err.Error())\n  }\n\n}\ntype Client struct {\n        // Transport specifies the mechanism by which individual\n        // HTTP requests are made.\n        // If nil, DefaultTransport is used.\n        Transport RoundTripper\n```", "```go\npackage main\n\nimport\n(\n  \"crypto/tls\"\n  \"net/http\"\n  \"fmt\"\n)\n\nconst (\n  URL = \"https://localhost/api/users\"\n)\n\nfunc main() {\n\n  customTransport := &http.Transport{ TLSClientConfig: &tls.Config{InsecureSkipVerify: true} }\n  customClient := &http.Client{ Transport: customTransport }\n  response, err := customClient.Get(URL)\n  if err != nil {\n    fmt.Println(err.Error())\n  } else {\n    fmt.Println(response)\n  }\n\n}\n```", "```go\n  &{200 OK 200 HTTP/1.1 1 1 map[Link:[<http://localhost:8080/api/users?start= ; rel=\"next\"] Pragma:[no\n  -cache] Date:[Tue, 16 Sep 2014 01:51:50 GMT] Content-Length:[256] Content-Type:[text/plain; charset=\n  utf-8] Cache-Control:[no-cache]] 0xc084006800 256 [] false map[] 0xc084021dd0}\n\n```"]