["```go\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n        \"net/http\"\n)\n\nfunc ProxyMe(w http.ResponseWriter, r *http.Request) {\n\n        fmt.Fprintln(w, \"hello world\")\n}\n\nfunc main() {\n        http.HandleFunc(\"/hello\", ProxyMe)\n        log.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n```", "```go\nProxyRequests Off\nProxyPreserveHost On\n\n<VirtualHost *:80>\n\n        ServerAdmin webmaster@localhost\n        DocumentRoot /var/www/html\n\n        ProxyPass /  http://localhost:8080/\n        ProxyPassReverse /  http://localhost:8080/\n\n        ErrorLog ${APACHE_LOG_DIR}/error.log\n        CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n</VirtualHost>\n```", "```go\nserver {\n        listen 80 default_server;\n        listen [::]:80 default_server ipv6only=on;\n        root /usr/share/nginx/html;\n        index index.html index.htm;\n\n        # Make site accessible from http://localhost/\n        server_name localhost;\n\n        location / {\n                proxy_set_header X-Real-IP $remote_addr;\n                proxy_set_header X-Forwarded-For $remote_addr;\n                proxy_set_header Host $host;\n                proxy_pass http://127.0.0.1:8080;\n                #       try_files $uri $uri/ =404;\n\n        }\n```", "```go\nfunc CheckSession(w http.ResponseWriter, r *http.Request) bool {\n\n}\n```", "```go\nvar Session UserSession\n```", "```go\nvar Session Sessions.UserSession\n```", "```go\npackage SessionManager\n\nimport\n(\n  \"log\"\n  \"time\"\n  \"github.com/gorilla/sessions\"\n  Password \"github.com/nkozyra/api/password\"\n)\n\nvar Session UserSession\n\ntype UserSession struct {\n  ID              string\n  GorillaSesssion *sessions.Session\n  UID             int\n  Expire          time.Time\n}\n\nfunc (us *UserSession) Create() {\n  us.ID = Password.GenerateSessionID(32)\n}\n\ntype SessionManager struct {\n\n}\n\nfunc GetSession() {\n\n  log.Println(\"Getting session\")\n}\n\nfunc SetSession() {\n\n  log.Println(\"Setting session\")\n}\n```", "```go\nfunc CheckSession(w http.ResponseWriter, r *http.Request) bool {\n  cookieSession, err := r.Cookie(\"sessionid\")\n  if err != nil {\n    fmt.Println(\"Creating Cookie in Memcache\")\n    Session.Create()\n    Session.Expire = time.Now().Local()\n    Session.Expire.Add(time.Hour)\n    Session.SetSession()\n  } else {\n    fmt.Println(\"Found cookie, checking against Memcache\")\n    ValidSession,err := Session.GetSession(cookieSession.Value)\n    fmt.Println(ValidSession)\n    if err != nil {\n      return false\n    } else {\n      return true\n    }\n\n  }\n  return true\n}\n```", "```go\npackage SessionManager\n\nimport\n(\n  \"encoding/json\"\n  \"errors\"\n  \"time\"\n  \"github.com/bradfitz/gomemcache/memcache\"\n  \"github.com/gorilla/sessions\"\t\n  Password \"github.com/nkozyra/api/password\"\t\n\n)\n\nvar Session UserSession\n\ntype UserSession struct {\n  ID              string `json:\"id\"`\n  GorillaSesssion *sessions.Session `json:\"session\"`\n  SessionStore  *memcache.Client `json:\"store\"`\n  UID             int `json:\"uid\"`\n  Expire          time.Time `json:\"expire\"`\n}\n\nfunc (us *UserSession) Create() {\n  us.SessionStore = memcache.New(\"127.0.0.1:11211\")\n  us.ID = Password.GenerateSessionID(32)\n}\n\nfunc (us *UserSession) GetSession(key string) (UserSession, error) {\n  session,err := us.SessionStore.Get(us.ID)\n  if err != nil {\n    return UserSession{},errors.New(\"No such session\")\n  } else {\n    var tempSession = UserSession{}\n    err := json.Unmarshal(session.Value,tempSession)\n    if err != nil {\n\n    }\n    return tempSession,nil\n  }\n}\n```", "```go\nfunc (us *UserSession) SetSession() bool {\n  jsonValue,_ := json.Marshal(us)\n  us.SessionStore.Set(&memcache.Item{Key: us.ID, Value: []byte(jsonValue)})\n  _,err := us.SessionStore.Get(us.ID)\n  if err != nil {\n      return false\n  }\n    Session.Expire = time.Now().Local()\n    Session.Expire.Add(time.Hour)\n    return true\n}\n```", "```go\npackage SessionManager\n\nimport\n(\n  \"encoding/json\"\n  \"errors\"\n\n  \"log\"\n  \"time\"\n  mgo \"gopkg.in/mgo.v2\"\n  _ \"gopkg.in/mgo.v2/bson\"\n  \"github.com/gorilla/sessions\"\n  Password \"github.com/nkozyra/api/password\"\n\n)\n\nvar Session UserSession\n\ntype UserSession struct {\n  ID              string `bson:\"_id\"`\n  GorillaSesssion *sessions.Session `bson:\"session\"`\n  SessionStore  *mgo.Collection `bson:\"store\"`\n  UID             int `bson:\"uid\"`\n  Value         []byte `bson:\"Valid\"`\n  Expire          time.Time `bson:\"expire\"`\n}\n```", "```go\nfunc (us *UserSession) Create() {\n s, err := mgo.Dial(\"127.0.0.1:27017/sessions\")\n  defer s.Close()\n  if err != nil {\n    log.Println(\"Can't connect to MongoDB\")\n } else {\n us.SessionStore = s.DB(\"sessions\").C(\"sessions\")\n  }\n  us.ID = Password.GenerateSessionID(32)\n}\n```", "```go\nfunc (us *UserSession) GetSession(key string) (UserSession, error) {\n  var session UserSession\n  err := us.SessionStore.Find(us.ID).One(session)\n  if err != nil {\n    return UserSession{},errors.New(\"No such session\")\n  } \n    var tempSession = UserSession{}\n    err := json.Unmarshal(session.Value,tempSession)\n    if err != nil {\n\n    }\n    return tempSession,nil\n\n}\n```", "```go\nfunc (us *UserSession) SetSession() bool {\n  jsonValue,_ := json.Marshal(us)\n err := us.SessionStore.Insert(UserSession{ID: us.ID, Value: []byte(jsonValue)})\n  if err != nil {\n      return false\n  } else {\n    return true\n  }\n}\n```", "```go\n  authenticated := CheckToken(r.FormValue(\"access_token\"))\n\n  loggedIn := CheckLogin(w,r)\n  if loggedIn == false {\n    authenticated = false\n    authenticatedByPassword := MiddlewareAuth(w,r)\n    if authenticatedByPassword == true {\n        authenticated = true\n    }\n  } else {\n    authenticated = true\n  }\n\n  if authenticated == false {\n    Response := CreateResponse{}\n    _, httpCode, msg := ErrorMessages(401)\n    Response.Error = msg\n    Response.ErrorCode = httpCode\n    http.Error(w, msg, httpCode)\n   return \n  }\n```", "```go\nfunc MiddlewareAuth(w http.ResponseWriter, r *http.Request) (bool, int) {\n\n  username := r.FormValue(\"username\")\n  password := r.FormValue(\"password\")\n\n  var dbPassword string\n  var dbSalt string\n  var dbUID string\n\n  uerr := Database.QueryRow(\"SELECT user_password, user_salt, user_id from users where user_nickname=?\", username).Scan(&dbPassword, &dbSalt, &dbUID)\n  if uerr != nil {\n\n  }\n\n  expectedPassword := Password.GenerateHash(dbSalt, password)\n\n  if (dbPassword == expectedPassword) {\n    return true, dbUID\n  } else {\n    return false, 0\n  }\n}\n```", "```go\nfor _, domain := range allowedDomains {\n  PermittedDomains = append(PermittedDomains, domain)\n}\nRoutes = mux.NewRouter()\nRoutes.HandleFunc(\"/interface\", APIInterface).Methods(\"GET\", \"POST\", \"PUT\", \"UPDATE\")\nRoutes.HandleFunc(\"/api/users\", UserCreate).Methods(\"POST\")\nRoutes.HandleFunc(\"/api/users\", UsersRetrieve).Methods(\"GET\")\nRoutes.HandleFunc(\"/api/users/{id:[0-9]+}\", UsersUpdate).Methods(\"PUT\")\nRoutes.HandleFunc(\"/api/users\", UsersInfo).Methods(\"OPTIONS\")\nRoutes.HandleFunc(\"/api/statuses\", StatusCreate).Methods(\"POST\")\nRoutes.HandleFunc(\"/api/statuses\", StatusRetrieve).Methods(\"GET\")\nRoutes.HandleFunc(\"/api/statuses/{id:[0-9]+}\", StatusUpdate).Methods(\"PUT\")\nRoutes.HandleFunc(\"/api/statuses/{id:[0-9]+}\", StatusDelete).Methods(\"DELETE\")\nRoutes.HandleFunc(\"/api/connections\", ConnectionsCreate).Methods(\"POST\")\nRoutes.HandleFunc(\"/api/connections\", ConnectionsDelete).Methods(\"DELETE\")\nRoutes.HandleFunc(\"/api/connections\", ConnectionsRetrieve).Methods(\"GET\")\n\n```", "```go\nCREATE TABLE IF NOT EXISTS `users_relationships` (\n  `users_relationship_id` int(13) NOT NULL,\n  `from_user_id` int(10) NOT NULL,\n  `to_user_id` int(10) NOT NULL,\n  `users_relationship_type` varchar(10) NOT NULL,\n  `users_relationship_timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  `users_relationship_accepted` tinyint(1) NOT NULL DEFAULT '0',\n  PRIMARY KEY (`users_relationship_id`),\n  KEY `from_user_id` (`from_user_id`),\n  KEY `to_user_id` (`to_user_id`),\n  KEY `from_user_id_to_user_id` (`from_user_id`,`to_user_id`),\n  KEY `from_user_id_to_user_id_users_relationship_type` (`from_user_id`,`to_user_id`,`users_relationship_type`)\n)\n```", "```go\nfunc ConnectionsCreate(w http.ResponseWriter, r *http.Request) {\n  log.Println(\"Starting retrieval\")\n  var uid int\n  Response := CreateResponse{}\n  authenticated := false\n  accessToken := r.FormValue(\"access_token\")\n  if accessToken == \"\" || CheckToken(accessToken) == false {\n    authenticated = false\n  } else {\n    authenticated = true\n  }\n\n  loggedIn := CheckLogin(w,r)\n  if loggedIn == false {\n    authenticated = false\n    authenticatedByPassword,uid := MiddlewareAuth(w,r)\n    if authenticatedByPassword == true {\n        fmt.Println(uid)\n        authenticated = true\n    }\n  } else {\n    uid = Session.UID\n    authenticated = true\n  }\n\n  if authenticated == false {\n\n    _, httpCode, msg := ErrorMessages(401)\n    Response.Error = msg\n    Response.ErrorCode = httpCode\n    http.Error(w, msg, httpCode)\n    return\n  }\n```", "```go\n  toUID := r.FormValue(\"recipient\")\n  var count int\n  Database.QueryRow(\"select count(*) as ucount from users where user_id=?\",toUID).Scan(&count)\n\n  if count < 1 {\n    fmt.Println(\"No such user exists\")\n    _, httpCode, msg := ErrorMessages(410)\n    Response.Error = msg\n    Response.ErrorCode = httpCode\n    http.Error(w, msg, httpCode)\n    return\n```", "```go\n  } else {\n    var connectionCount int\n    Database.QueryRow(\"select count(*) as ccount from users_relationships where from_user_id=? and to_user_id=?\",uid, toUID).Scan(&connectionCount)\n    if connectionCount > 0 {\n      fmt.Println(\"Relationship already exists\")\n      _, httpCode, msg := ErrorMessages(410)\n            Response.Error = msg\n      Response.ErrorCode = httpCode\n      http.Error(w, msg, httpCode)\n      return\n```", "```go\n    } else {\n      fmt.Println(\"Creating relationship\")\n      rightNow := time.Now().Unix()\n      Response.Error = \"success\"\n      Response.ErrorCode = 0\n      _,err := Database.Exec(\"insert into users_relationships set from_user_id=?, to_user_id=?, users_relationship_type=?, users_relationship_timestamp=?\",uid, toUID, \"friend\", rightNow)\n      if err != nil {\n        fmt.Println(err.Error())\n      } else {\n        output := SetFormat(Response)\n        fmt.Fprintln(w, string(output))\n      }\n    }\n  }\n}\n```"]