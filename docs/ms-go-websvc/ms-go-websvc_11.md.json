["```go\ndbl, err := os.OpenFile(\"errors.log\", os.O_CREATE | os.RDWR | os.O_APPEND, 0666)\n  if err != nil {\n    log.Println(\"Error opening/creating database log file\")\n  }\ndefer dbl.Close()\n\nlog.SetOutput(dbl)\n```", "```go\npackage main\n\nimport (\n  \"log\"\n  \"os\"\n)\n\nvar (\n  Database       *log.Logger\n  Authentication *log.Logger\n  Errors         *log.Logger\n)\n\nfunc LogPrepare() {\n  dblog, err := os.OpenFile(\"database.log\", os.O_CREATE|os.O_APPEND|os.O_WRONLY, 0666)\n  if err != nil {\n    log.Println(err)\n  }\n  authlog, err := os.OpenFile(\"auth.log\", os.O_CREATE|os.O_APPEND|os.O_WRONLY, 0666)\n  if err != nil {\n    log.Println(err)\n  }\n  errlog, err := os.OpenFile(\"errors.log\", os.O_CREATE|os.O_APPEND|os.O_WRONLY, 0666)\n  if err != nil {\n    log.Println(err)\n  }\n\n  Database = log.New(dblog, \"DB:\", log.Ldate|log.Ltime)\n  Authentication = log.New(authlog, \"AUTH:\", log.Ldate|log.Ltime)\n  Errors = log.New(errlog, \"ERROR:\", log.Ldate|log.Ltime|log.Lshortfile)\n}\n```", "```go\nfunc main() {\n  LogPrepare()\n\n  Database.Println(\"Logging a database item\")\n  Authentication.Println(\"Logging an auth attempt item\")\n  Errors.Println(\"Logging an error\")\n\n}\n```", "```go\n  d, _ := db.Prepare(\"SELECT fields FROM table where column=?\")\n  Database.Println(d)\n```", "```go\npackage bruteforcedetect\n\nimport\n(\n)\n\nvar MaxAttempts = 3\n```", "```go\ntype Requester struct {\n  IP string\n  LoginAttempts int\n  FailedAttempts int\n  FailedInvalidUserAttempts int\n}\n```", "```go\nfunc Init() {\n\n}\n\nfunc (r Requester) Check() {\n\n}\n```", "```go\npackage main\n\nimport (\n\u2026\n    \"github.com/nkozyra/api/bruteforce\"\n)\n\nvar Database *sql.DB\nvar Routes *mux.Router\nvar Format string\nvar Logins map[string] bruteforce.Requester\n```", "```go\nfunc StartServer() {\n\n  LoginAttempts = make(map[string] bruteforce.Requester)\nOauthServices.InitServices()\n```", "```go\nip,_,_ := net.SplitHostPort(r.RemoteAddr)\n```", "```go\nfunc CheckLogin(w http.ResponseWriter, r *http.Request) bool {\n  if val, ok := Logins[r.RemoteAddr]; ok {\n    fmt.Println(\"Previous login exists\",val)\n  } else {\n    Logins[r.RemoteAddr] = bruteforce.Requester{IP: r.RemoteAddr, LoginAttempts:0, FailedAttempts: 0, FailedValidUserAttempts: 0, }\n  }\n\n  Logins[r.RemoteAddr].LoginAttempts += 1\n```", "```go\nfunc UserLogin(w http.ResponseWriter, r *http.Request) {\n\n  w.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n  fmt.Println(\"Attempting User Login\")\n\n  Response := UpdateResponse{}\n CheckLogin(w,r)\n```", "```go\n  if (dbPassword == expectedPassword) {\n    // ...\n  } else {\n    fmt.Println(\"Incorrect password!\")\n    _, httpCode, msg := ErrorMessages(401)\n    Response.Error = msg\n    Response.ErrorCode = httpCode\n    Logins[r.RemoteAddr].FailedAttempts = Logins[r.RemoteAddr].FailedAttempts + 1\n    http.Error(w, msg, httpCode)\n  }\n```", "```go\nfunc UserLogin(w http.ResponseWriter, r *http.Request) {\n\n  w.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n  fmt.Println(\"Attempting User Login\")\n\nif Logins[r.RemoteAddr].Check() == false {\n  return\n}\n```", "```go\n  Response := UpdateResponse{}\n  CheckLogin(w,r)\n  if Logins[r.RemoteAddr].Check() == false {\n    _, httpCode, msg := ErrorMessages(403)\n    Response.Error = msg\n    Response.ErrorCode = httpCode\n    http.Error(w, msg, httpCode)\n    return\n  }\n```", "```go\nfunc (r Requester) Check() bool {\n  return r.FailedAttempts <= MaxAttempts\n}\n```", "```go\n  var dbPassword string\n  var dbSalt string\n  var dbUID int\n  var dbUserCount int\n  uexerr := Database.QueryRow(\"SELECT count(*) from users where user_email=?\",email).Scan(&dbUserCount)\n  if uexerr != nil {\n\n  }\n  if dbUserCount > 0 {\n    Logins[r.RemoteAddr].FailedInvalidUserAttempts = Logins[r.RemoteAddr].FailedInvalidUserAttempts + 1\n  }\n```", "```go\nfunc CheckLogin(w http.ResponseWriter, r *http.Request) {\n  bauth := strings.SplitN(r.Header[\"Authorization\"][0], \" \", 2)\n  if bauth[0] == \"Basic\" {\n    authdata, err := base64.StdEncoding.DecodeString(bauth[1])\n    if err != nil {\n      http.Error(w, \"Could not parse basic auth\", http.StatusUnauthorized)\n      return\n    }\n      authparts := strings.SplitN(string(authdata),\":\",2)\n      username := authparts[0]\n      password := authparts[1]\n    }else {\n      // No basic auth header\n    }\n```", "```go\n  sql := \"INSERT INTO users set user_nickname='\" + NewUser.Name + \"', user_first='\" + NewUser.First + \"', user_last='\" + NewUser.Last + \"', user_email='\" + NewUser.Email + \"'\"\n  q, err := database.Exec(sql)\n```", "```go\nurl -X POST -H \"Authorization: Basic dGVzdDp0ZXN0\" -H \"Cache-Control: no-cache\" -H \"Postman-Token: c2b24964-c12d-c183-dd7f-5c1365f5ae81\" -H \"Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW\" -F \"status=Having a great day! <iframe src='somebadsite/somebadscript'></iframe>\" https://localhost/api/statuses\n```", "```go\nfunc StatusCreate(w http.ResponseWriter, r *http.Request) {\n\n  Response := CreateResponse{}\n  UserID := r.FormValue(\"user\")\n  Status := r.FormValue(\"status\")\n  Token := r.FormValue(\"token\")\n  ConsumerKey := r.FormValue(\"consumer_key\")\n\n  Status = template.HTMLEscapeString(Status)\n```", "```go\n  Status = template.JSEscapeString(Status)\n  Status = template.HTMLEscapeString(Status)\n```", "```go\nfunc StatusRetrieve(w http.ResponseWriter, r *http.Request) {\n  var Response StatusResponse\n  w.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n  loggedIn := CheckLogin(w, r)\n  if loggedIn {\n\n  } else {\n    statuses,_ := Database.Query(\"select * from user_status where user_id=? order by user_status_timestamp desc\",Session.UID)\n    for statuses.Next() {\n\n      status := Status{}\n      statuses.Scan(&status.ID, &status.UID, &status.Time, &status.Text)\n      status.Text = template.JSEscapeString(status.Text)\n      status.Text = template.HTMLEscapeString(status.Text)\n      Response.Statuses = append(Response.Statuses, status)\n  }\n```", "```go\nvar (\n  Database       *log.Logger\n  Authentication *log.Logger\n  Errors         *log.Logger\n  Questionable *log.Logger\n)\n```", "```go\n  questlog, err := os.OpenFile(\"injections.log\", os.O_CREATE|os.O_APPEND|os.O_WRONLY, 0666)\n  if err != nil {\n    log.Println(err)\n  }\n  Questionable = log.New(questlog, \"XSS:\", log.Ldate|log.Ltime)\n\n```", "```go\n  isinject, _ := regexp.MatchString(\"<(script|iframe).*\",Status)\n  if isinject  {\n\n  }\n```"]