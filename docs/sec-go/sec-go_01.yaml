- en: Introduction to Security with Go
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Go进行安全介绍
- en: Security and privacy, as practical matters, have continued to gain interest,
    especially in the technology industry. The cybersecurity market is booming and
    continuing to grow. The industry moves fast with innovations and research coming
    out constantly. Not only has the interest and speed of security picked up, but
    the scale of applications along with the risk have also grown by orders of magnitude.
    The industry needs a programming language that is simple to learn, cross-platform,
    and efficient on a large scale. Go is the perfect fit, having an extremely powerful
    standard library, short learning curve, and blazing speed.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 安全和隐私作为实际问题，一直在不断引起兴趣，特别是在技术行业。网络安全市场正在蓬勃发展并持续增长。该行业随着创新和研究的不断涌现而发展迅速。安全的兴趣和速度不仅加快了，而且应用程序的规模和风险也成倍增长。该行业需要一种简单易学、跨平台、高效的编程语言。Go是完美的选择，它拥有非常强大的标准库、学习曲线短、运行速度快。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Go's history, language design, criticisms, community, and learning tips
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go的历史、语言设计、批评、社区和学习技巧
- en: Why use Go for security
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么使用Go进行安全
- en: Setting up a development environment and writing your first program
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置开发环境并编写你的第一个程序
- en: Running the example programs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行示例程序
- en: About Go
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于Go
- en: Go is an open source programming language that was created by Google and distributed
    under a BSD-style license. A BSD license allows anyone to use Go free of charge,
    as long as the copyright notice is retained and the Google name is not used for
    endorsement or promotion. Go is heavily influenced by C, but has simpler syntax,
    and better memory safety and garbage collection. Sometimes, Go is described as
    a modern-day C++. I think that is too much of a simplification, but Go is definitely
    a simple but modern language.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Go是由谷歌创建并在BSD风格许可下分发的开源编程语言。BSD许可允许任何人免费使用Go，只要保留版权声明并且不使用谷歌名称进行认可或推广。Go受到C的重大影响，但语法更简单，内存安全性和垃圾收集更好。有时，Go被描述为现代的C++。我认为这太过于简化，但Go绝对是一种简单而现代的语言。
- en: Go language design
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go语言设计
- en: The original goal of Go was to create a new language that is simple, reliable,
    and efficient. As mentioned, Go is heavily influenced by C programming language.
    The language itself is very simple, with only 25 keywords. It was built to integrate
    well with IDEs, but not to be dependent on them. In my experience, anyone who
    has tried Go has found it very user-friendly with a short learning curve.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Go的最初目标是创建一种简单、可靠和高效的新语言。正如前面提到的，Go受到C编程语言的重大影响。这种语言本身非常简单，只有25个关键字。它被设计成与集成开发环境很好地结合，但并不依赖于它们。根据我的经验，任何尝试过Go的人都会发现它非常用户友好，学习曲线很短。
- en: One of the main goals of Go was to deal with some of the negative aspects of
    C++ and Java code, while retaining the performance. The language needed to be
    simple and consistent to manage very large development teams.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Go的主要目标之一是解决C++和Java代码的一些负面问题，同时保持性能。这种语言需要简单而一致，以管理非常庞大的开发团队。
- en: Variables are statically typed, and applications are compiled quickly to statically
    linked binaries. Having a single statically linked binary makes it very easy to
    create lightweight containers. The final applications run fast as well, running
    close to C++ and Java performance and much faster than interpreted languages such
    as Python. There are pointers, but there is no pointer arithmetic allowed. Go
    does not tout itself as an object-oriented programming language, and it does not
    formally have *classes* in the traditional sense; however, it does contain a number
    of mechanisms that closely resemble an object-oriented programming language. This
    is discussed in more depth in the following chapter. Interfaces are used heavily,
    and composition is the equivalent of inheritance.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 变量是静态类型的，应用程序可以快速编译成静态链接的二进制文件。拥有单个静态链接的二进制文件使得创建轻量级容器非常容易。最终的应用程序也运行得很快，接近C++和Java的性能，比Python等解释性语言快得多。虽然有指针，但不允许指针算术。Go并不是自诩为面向对象的编程语言，也没有传统意义上的*类*；然而，它包含了许多与面向对象编程语言非常相似的机制。这将在下一章中更深入地讨论。接口被广泛使用，组合是继承的等价物。
- en: Go has many interesting features. One feature that stands out is the built-in
    concurrency. Just put the word "go" before any function call, and it will spawn
    a lightweight thread to execute the function. Another feature that is quite important
    is the dependency management, which is very efficient. The dependency management
    is part of the reason Go compiles incredibly fast. It does not re-include the
    same header files multiple times, the way C++ does. Go also has built-in memory
    safety, and a garbage collector handles clean-up of unused memory. The standard
    library in Go is pretty impressive too. It is modern and contains networking,
    HTTP, TLS, XML, JSON, database, image manipulation, and cryptography packages.
    Go also supports Unicode, allowing all kinds of characters to be used in source
    code.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Go有许多有趣的特性。其中一个突出的特点是内置的并发性。只需在任何函数调用之前加上“go”这个词，它就会生成一个轻量级线程来执行该函数。另一个相当重要的特性是依赖管理，这是非常高效的。依赖管理是Go编译速度非常快的原因之一。它不会多次重新包含相同的头文件，就像C++那样。Go还具有内置的内存安全性，垃圾收集器处理未使用的内存清理。Go的标准库也非常令人印象深刻。它是现代的，包含网络、HTTP、TLS、XML、JSON、数据库、图像处理和加密包。Go还支持Unicode，允许在源代码中使用各种字符。
- en: The Go toolchain is central to the ecosystem. It provides tools to download
    and install remote dependencies, run unit tests and benchmarks, generate code,
    and format code according to the Go formatting standards. It also includes the
    compiler, linker, and assembler, which compile very quickly and also allow for
    easy cross-compiling by simply changing the `GOOS` and `GOARCH` environment variables.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Go工具链是生态系统的核心。它提供了工具来下载和安装远程依赖项，运行单元测试和基准测试，生成代码，并根据Go格式标准格式化代码。它还包括编译器、链接器和汇编器，这些工具编译非常快，也允许通过简单地更改`GOOS`和`GOARCH`环境变量来轻松进行交叉编译。
- en: Some features were excluded from the Go language. Generics, inheritance, assertions,
    exceptions, pointer arithmetic, and implicit type conversions were all left out
    of Go. Many features were omitted intentionally, namely generics, assertions,
    and pointer arithmetic. The authors left out some features because they wanted
    to maintain performance, keep the language specification as simple as possible,
    or they could not agree on the best way to implement, or because a feature was
    too controversial. Inheritance was also left out intentionally in favor of using
    interfaces and composition instead. Some other features, such as generics, were
    left out because there was too much debate concerning their proper implementation,
    but they may show up in Go 2.0\. The authors recognized that it is much easier
    to add a feature to a language than to take one away.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一些功能被排除在Go语言之外。泛型、继承、断言、异常、指针算术和隐式类型转换都被排除在Go之外。许多功能是有意省略的，特别是泛型、断言和指针算术。作者们故意省略了一些功能，因为他们希望保持性能，尽可能简化语言规范，或者他们无法就最佳实现方式达成一致，或者因为某个功能太有争议。继承也是有意被省略的，而是使用接口和组合。其他一些功能，比如泛型，也是因为关于它们的正确实现存在太多争论而被省略，但它们可能会出现在Go
    2.0中。作者们认识到，向语言中添加功能要比删除功能容易得多。
- en: The History of Go
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go的历史
- en: Go is a relatively young language, with its inception in 2007 and open sourcing
    in 2009\. It started at Google as a *20% project* with Robert Griesemer, Rob Pike,
    and Ken Thompson. A 20% project means that the project's developers spent 20%
    of their time working on it as an experimental side project. Go 1.0 was officially
    released in March 2012\. It was planned from the beginning to be an open source
    language. Until Go 1.5, the compiler, linker, and assembler were written in C.
    After version 1.5, everything was written in Go.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Go是一种相对年轻的语言，起源于2007年，2009年开源。它起源于Google的*20%项目*，由Robert Griesemer、Rob Pike和Ken
    Thompson共同开发。20%项目意味着项目的开发人员将20%的时间用于作为实验性的副业项目。Go 1.0于2012年3月正式发布。从一开始就计划将其作为一种开源语言。直到Go
    1.5版本，编译器、链接器和汇编器都是用C语言编写的。在1.5版本之后，一切都是用Go语言编写的。
- en: Google initially launched Go for Linux and macOS, and the community drove the
    effort for other platforms, namely Windows, FreeBSD, OpenBSD, NetBSD, and Solaris.
    It has even been ported to IBM z Systems mainframes. Bill O'Farrell of IBM gave
    a talk at GopherCon 2016 in Denver titled *Porting Go to the IBM z Architecture* ([https://www.youtube.com/watch?v=z0f4Wgi94eo](https://www.youtube.com/watch?v=z0f4Wgi94eo)).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Google最初为Linux和macOS推出了Go，社区推动了其他平台的努力，即Windows、FreeBSD、OpenBSD、NetBSD和Solaris。甚至已经移植到IBM
    z系统主机上。IBM的Bill O'Farrell在2016年丹佛的GopherCon上做了一个名为*将Go移植到IBM z架构*的演讲（[https://www.youtube.com/watch?v=z0f4Wgi94eo](https://www.youtube.com/watch?v=z0f4Wgi94eo)）。
- en: Google is known to use Python, Java, and C++. It is understandable why they
    chose those languages too. They each fill certain roles and have their own strengths
    and weaknesses. Go was an attempt to create a new language that fits the needs
    of Google. They needed software that could perform extremely well under heavy
    loads, support concurrency, and that was easy to read and write, and compile quickly.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌以Python、Java和C++而闻名。他们选择这些语言也是可以理解的。它们各自扮演着特定的角色，有各自的优势和劣势。Go是为了创建一个符合谷歌需求的新语言。他们需要能够在重负载下表现出色，支持并发，并且易于阅读、编写和快速编译的软件。
- en: The triggering event for starting the Go project was dealing with a massive
    C++ code base that took hours to build because of the way C++ handles dependencies
    and re-includes headers ([https://www.youtube.com/watch?v=bj9T2c2Xk_s](https://www.youtube.com/watch?v=bj9T2c2Xk_s)
    (37:15)). This is why one of Go's main goals was to compile quickly. Go helped
    turn hours of compile time to seconds because it handles dependencies much more
    efficiently than C++.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 启动Go项目的触发事件是处理一个庞大的C++代码库，因为C++处理依赖关系和重新包含头文件的方式，构建需要花费数小时的时间（[https://www.youtube.com/watch?v=bj9T2c2Xk_s](https://www.youtube.com/watch?v=bj9T2c2Xk_s)
    (37:15)）。这就是为什么Go的主要目标之一是快速编译。Go帮助将数小时的编译时间缩短到几秒，因为它比C++更有效地处理依赖关系。
- en: Discussions for Go 2.0 have begun, but they are still in the conceptual stages.
    There is no timeline for a release, and there is no rush to release a new major
    version.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Go 2.0的讨论已经开始，但仍处于概念阶段。目前没有发布时间表，也没有着急发布新的主要版本。
- en: Adoption and community
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 采用和社区
- en: 'Go is still a young language, but it has seen growing adoption rates and has
    continued to increase in popularity. Go was the TIOBE Language of the year in
    2009 and 2016:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Go仍然是一种年轻的语言，但它的采用率不断增长，也在人气上持续增长。Go分别在2009年和2016年成为TIOBE年度语言：
- en: '![](img/3d9b13c6-b329-4bdc-8ebe-4e563bf87d0d.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3d9b13c6-b329-4bdc-8ebe-4e563bf87d0d.png)'
- en: 'Source: https://www.tiobe.com/tiobe-index/go/'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：https://www.tiobe.com/tiobe-index/go/
- en: One of the expectations expressed by the Go team was the anticipation that Go
    would draw a lot of C/C++ and Java developers, but they were surprised when a
    large number of the users came from scripting languages such as Python and Ruby.
    Others, like myself, found Go to be a natural complement to Python, a great language.
    However, which language do you go to when you need something much more powerful?
    Some large companies have demonstrated that Go is stable for large-scale production
    use, including Google, Dropbox, Netflix, Uber, and SoundCloud.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Go团队表达的期望之一是，他们预期Go会吸引大量的C/C++和Java开发人员，但当大量用户来自Python和Ruby等脚本语言时，他们感到惊讶。其他人，比如我自己，发现Go是Python的一个自然补充，是一种很棒的语言。然而，当你需要更强大的东西时，你会选择哪种语言呢？一些大公司已经证明了Go在大规模生产中是稳定的，包括Google、Dropbox、Netflix、Uber和SoundCloud。
- en: The first Go conference, named GopherCon, was held in 2014\. Since then, GopherCon
    has been held every year. Read more about GopherCon at [https://gophercon.com](https://gophercon.com).
    I had the privilege of speaking at the 2016 GopherCon about packet capturing and
    had a great experience ([https://www.youtube.com/watch?v=APDnbmTKjgM](https://www.youtube.com/watch?v=APDnbmTKjgM)).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个Go大会名为GopherCon，于2014年举行。从那时起，GopherCon每年都会举行。在[https://gophercon.com](https://gophercon.com)上了解更多关于GopherCon的信息。我有幸在2016年的GopherCon上发表了关于数据包捕获的演讲，并有了很棒的经历（[https://www.youtube.com/watch?v=APDnbmTKjgM](https://www.youtube.com/watch?v=APDnbmTKjgM)）。
- en: Common criticisms about Go
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于Go的常见批评
- en: There are a few criticisms that show up repeatedly in the community. Probably
    the most notorious and most-discussed criticism is the lack of generics. This
    leads to repeated code to handle different data types. Interfaces can be used
    to some extent to alleviate this problem. We might see generics in a future release,
    as the authors have shown openness to generics, but they did not rush through
    an important design decision.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 社区中经常出现一些批评。可能最臭名昭著且最受讨论的批评是缺乏泛型。这导致重复的代码来处理不同的数据类型。接口在一定程度上可以缓解这个问题。我们可能会在未来的版本中看到泛型，因为作者已经表现出对泛型的开放态度，但他们并没有匆忙做出重要的设计决定。
- en: The next criticism often heard is the lack of exceptions. The developer must
    explicitly handle or ignore each error. Personally, I found this to be a refreshing
    change. It's not really that much more work, and you have full control over the
    code flow. Sometimes with exceptions you are not positive where it will get caught
    as it bubbles up. With Go, you can easily follow the error-handling code.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来经常听到的批评是缺乏异常处理。开发人员必须显式处理或忽略每个错误。就我个人而言，我发现这是一种令人耳目一新的改变。这并不是真的多做工作，而且你可以完全控制代码流程。有时候，使用异常处理时，你并不确定它会在哪里被捕获，因为它会一直冒泡上来。而使用Go，你可以轻松地跟踪错误处理代码。
- en: Go has a garbage collector that handles memory cleanup. The garbage collector
    has been upgraded over time and continues to improve. The garbage collector does
    have a minor performance impact, but saves the developer a lot of thinking and
    worrying. Go was originally described as a systems programming language, and the
    lack of control over the memory was restrictive for very low-level applications.
    Since then, they have pivoted away from calling Go a systems programming language.
    If you need low-level control over memory, then you will have to write portions
    of code in C.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Go有一个处理内存清理的垃圾收集器。垃圾收集器随着时间的推移得到了升级和改进。垃圾收集器确实会对性能产生一些影响，但它节省了开发人员大量的思考和担忧。最初，Go被描述为一种系统编程语言，对内存的控制能力对于非常低级的应用程序来说是有限制的。自那时起，他们已经转变了对Go的称呼，不再称其为系统编程语言。如果你需要对内存进行低级别的控制，那么你将不得不用C语言编写部分代码。
- en: The Go toolchain
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go工具链
- en: 'The `go` executable is the main application of the Go toolchain. You can pass
    a command to `go`, and it will take the appropriate action. The toolchain has
    tools to run, compile, format source code, download dependencies, and more. Let''s
    look at the full list, which is obtained as an output from the `go help` command
    or just `go` by itself:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`go`可执行文件是Go工具链的主要应用程序。你可以向`go`传递一个命令，它将采取适当的操作。工具链有工具来运行、编译、格式化源代码，下载依赖项等。让我们看看完整的列表，这是通过`go
    help`命令或`go`本身获得的输出：'
- en: '`build`: This compiles packages and dependencies'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build`: 这个命令编译包和依赖项'
- en: '`clean`: This removes object files'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clean`: 这个命令移除对象文件'
- en: '`doc`: This shows documentation for a package or symbol'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`doc`: 这个命令显示包或符号的文档'
- en: '`env`: This prints Go environment information'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`env`: 这个命令打印Go环境信息'
- en: '`generate`: This is the code generator'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generate`: 这是代码生成器'
- en: '`fix`: This upgrades Go code when a new version is released'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fix`: 这个命令在新版本发布时升级Go代码'
- en: '`fmt`: This runs `gofmt` on package sources'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fmt`: 这个命令在包源代码上运行`gofmt`'
- en: '`get`: This downloads and installs packages and dependencies'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get`: 这个命令下载并安装包和依赖项'
- en: '`help`: This provides more help on a specific topic'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`help`: 这个命令提供特定主题的更多帮助'
- en: '`install`: This compiles and installs packages and dependencies'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`install`: 这个命令编译并安装包和依赖项'
- en: '`list`: This lists packages'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list`: 这个命令列出包'
- en: '`run`: This compiles and runs Go programs'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`run`: 这个命令编译并运行Go程序'
- en: '`test`: This runs unit tests and benchmarks'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test`: 这个命令运行单元测试和基准测试'
- en: '`vet`: This examines source code for bugs'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vet`: 这个命令用于检查源代码中的错误'
- en: '`version`: This shows the Go version'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`version`: 这个命令显示Go版本'
- en: More information about these commands is available at [https://golang.org/cmd/](https://golang.org/cmd/).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有关这些命令的更多信息，请访问[https://golang.org/cmd/](https://golang.org/cmd/)。
- en: Go mascot
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go吉祥物
- en: Everyone knows that the best swords have names, and the best programming languages
    have mascots. Go's mascot is the **gopher**. The gopher has no name. It has a
    jelly bean shaped body, microscopic limbs, gigantic eyes, and two teeth. It was
    designed by Renee French, and its copyright comes under the *Creative Commons
    Attribution 3.0* license. This means that you can play with the images, but you
    must give credit to their creator, Renee French, wherever they are used.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人都知道最好的剑有名字，最好的编程语言有吉祥物。Go的吉祥物是**gopher**。这只gopher没有名字。它有一个豆子形状的身体，微小的四肢，巨大的眼睛和两颗牙齿。它是由Renee
    French设计的，其版权属于*知识共享署名3.0*许可。这意味着你可以使用这些图片，但必须在使用的地方给予其创作者Renee French的信用。
- en: 'Renee French gave a talk at GopherCon 2016 in Denver, entitled *The Go Gopher:
    A Character Study*, explaining how the gopher came to be, the various mediums
    and forms it has taken, and the tips on drawing it in various situations ([https://www.youtube.com/watch?v=4rw_B4yY69k](https://www.youtube.com/watch?v=4rw_B4yY69k)).'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 'Renee French在2016年的丹佛GopherCon上做了一个名为*The Go Gopher: A Character Study*的演讲，解释了gopher的由来，它所采取的各种媒介和形式，以及在各种情况下画它的技巧([https://www.youtube.com/watch?v=4rw_B4yY69k](https://www.youtube.com/watch?v=4rw_B4yY69k))。'
- en: You can generate a custom gopher avatar at [https://gopherize.me/](https://gopherize.me/) and
    read more about the Go gopher at [https://blog.golang.org/gopher](https://blog.golang.org/gopher).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://gopherize.me/](https://gopherize.me/)生成一个定制的gopher头像，并在[https://blog.golang.org/gopher](https://blog.golang.org/gopher)上了解更多关于Go
    gopher的信息。
- en: '![](img/13098b0b-f4f5-4d83-b780-4a505d29a41b.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/13098b0b-f4f5-4d83-b780-4a505d29a41b.jpg)'
- en: Learning Go
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习Go
- en: If you have never used Go before, have no fear. It has a gentle learning curve
    and is simple enough to learn in just a day or two. The best place to start is
    [https://tour.golang.org/](https://tour.golang.org/). This is a basic tour of
    the Go programming language. If you have already gone through the tour, then you
    should already have the foundation to make it through this book just fine. If
    you are working through this book and have not taken the tour, you may come across
    a concept you are not familiar with that is not explained here. The tour is a
    good place to learn and practice.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前没有使用过Go，不要害怕。它有一个温和的学习曲线，只需一两天就可以学会。开始的最佳地点是[https://tour.golang.org/](https://tour.golang.org/)。这是Go编程语言的基本教程。如果你已经完成了这个教程，那么你应该已经有了足够的基础来顺利阅读本书。如果你正在阅读本书，但还没有参加过这个教程，你可能会遇到一些你不熟悉的概念，这里没有解释。这个教程是一个学习和练习的好地方。
- en: Since there are only 25 reserved keywords in the language specification, it
    is short enough to be understood by "mortals". You can read more about the specs
    at [https://golang.org/ref/spec](https://golang.org/ref/spec).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 由于语言规范中只有25个保留关键字，它足够简短，可以被“凡人”理解。你可以在[https://golang.org/ref/spec](https://golang.org/ref/spec)上阅读更多关于规范的信息。
- en: 'You must be already be familiar with most of these keywords. These are: `if`,
    `else`, `goto`, `for`, `import`, `return`, `var`, `continue`, `break`, `range`,
    `type`, `func`, `interface`, `package`, `const`, `map`, `struct`, `select`, `case`,
    `switch`, `go`, `defer`, `chan`, `fallthrough`, and `default`.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须已经熟悉了大部分这些关键词。它们包括：`if`，`else`，`goto`，`for`，`import`，`return`，`var`，`continue`，`break`，`range`，`type`，`func`，`interface`，`package`，`const`，`map`，`struct`，`select`，`case`，`switch`，`go`，`defer`，`chan`，`fallthrough`和`default`。
- en: The tour will help you learn the keywords, syntaxes, and basics of the data
    structures. The playground in the tour lets you practice writing and running code
    in the browser.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程将帮助你学习关键词、语法和数据结构的基础知识。教程中的游乐场让你可以在浏览器中练习编写和运行代码。
- en: Why use Go?
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么使用Go？
- en: There are several aspects that appeal to me about Go. Concurrency, speed, and
    simplicity are the most important things to me. The language is very simple and
    easy to learn. There are no `try`, `catch`, and exception flows. Though several
    people cite the tedious error handling as a criticism, I find it refreshing to
    have a simple language that does not hide a lot of magic behind the scenes and
    does exactly what it says. The `go fmt` tool standardizes formatting, making it
    easy to read code from others, and eliminates the burden of defining your own
    standard.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Go，有几个方面吸引了我。并发性，速度和简单性对我来说是最重要的。这种语言非常简单，易于学习。它没有`try`，`catch`和异常流程。尽管有些人批评繁琐的错误处理，但我发现拥有一种简单的语言是令人耳目一新的，它不会在幕后隐藏很多魔法，而是确切地做它所说的。`go
    fmt`工具标准化了格式，使得阅读他人的代码变得容易，并消除了定义自己的标准的负担。
- en: Go provides a feeling of scalability and reliability and is actually an enjoyable
    experience. Before Go, the primary option for fast, compiled code was C++, and
    it was no simple task to manage the header files and build processes for different
    platforms. C++ has become a very complicated language over the years and is not
    nearly as approachable as Go for most people.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Go提供了一种可扩展性和可靠性的感觉，实际上是一种令人愉快的体验。在Go之前，快速编译代码的主要选择是C++，对于不同的平台管理头文件和构建过程并不是一件简单的任务。多年来，C++已经变得非常复杂，对大多数人来说并不像Go那样易于接近。
- en: Why use Go for security?
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么在安全领域使用Go？
- en: I think we all understand that there is no such thing as the best programming
    language, but there are different tools for different jobs. Go excels in performance
    and concurrency. Some of its other benefits include the ability to compile down
    to a single executable and cross-compile easily. It also has a modern standard
    library well-suited for networked applications.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为我们都明白没有最好的编程语言这回事，但不同的工作有不同的工具。Go在性能和并发性方面表现出色。它的其他一些优点包括能够编译成单个可执行文件并且容易进行跨平台编译。它还有一个现代化的标准库，非常适合网络应用。
- en: 'The ease of cross-compiling makes for some interesting use cases in the security
    field. Here are a couple of use cases for cross-compiling in security:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 跨编译的便利性在安全领域产生了一些有趣的用例。以下是安全领域中跨编译的一些用例：
- en: Penetration testers can use a Raspberry Pi to compile custom Go reverse shells
    for Windows, macOS, and Linux, and attempt to deploy them.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渗透测试人员可以使用树莓派为Windows、macOS和Linux编译自定义的Go反向外壳，并尝试部署它们。
- en: Network defenders can have one central database to store all honeypot information
    provided from honeypot servers, and then cross-compile the honeypot servers. This
    would allow them to easily deploy a consistent application across all platforms,
    including Windows, mac, and Linux.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络防御者可以有一个中央数据库，用来存储所有蜜罐服务器提供的蜜罐信息，然后交叉编译蜜罐服务器。这将使他们能够轻松地在所有平台上部署一致的应用程序，包括Windows、mac和Linux。
- en: Network defenders could deploy incredibly lightweight honeypots throughout their
    network in the form of a Docker container with a single statically linked binary.
    Containers would be quick to create and destroy, using minimal bandwidth and server
    resources.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络防御者可以在网络中部署非常轻量级的蜜罐，形式为一个Docker容器，其中包含一个单一的静态链接二进制文件。容器可以快速创建和销毁，使用最小的带宽和服务器资源。
- en: When you ask yourself whether Go is a good language choice, it may help to compare
    Go with some of the other top language choices.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在思考Go是否是一个好的语言选择时，将Go与其他顶级语言进行比较可能会有所帮助。
- en: Why not use Python?
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么不使用Python？
- en: Python is a popular language in the security field. This is most likely because
    of its ubiquity, short learning curve, and plethora of libraries. There are already
    several useful tools for security written in Python, namely Scapy for packet capturing,
    Scrapy for web scraping, Immunity for debugging, Beautiful Soup for parsing HTML,
    and Volatility for memory forensics. Many vendors and service providers also provide
    API examples in Python.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Python是安全领域中流行的语言。这很可能是因为它的普及性、学习曲线短和大量的库。已经有一些有用的安全工具用Python编写，比如用于数据包捕获的Scapy，用于网页抓取的Scrapy，用于调试的Immunity，用于解析HTML的Beautiful
    Soup，以及用于内存取证的Volatility。许多供应商和服务提供商也提供了Python的API示例。
- en: Python is easy to learn, and there are plenty of resources. Go is also easy
    to write and has a gentle learning curve. The learning curve and the ease of programming
    is not a major differentiating factor between Go and Python in my opinion. This
    biggest distinction, and where Python falls short, is performance. Python cannot
    compete with Go in terms of performance. Part of it is the interpreted nature
    of Python, but a larger factor is the **global interpreter lock** or **GIL**.
    The GIL prevents the interpreter from using more than one CPU worth of processing
    power, even with multiple threads executing. There are some ways to get around
    this, such as using multiprocessing, but this has its own drawbacks and limitations,
    as it actually forks a new process. Other options are using Jython (Python on
    Java) or IronPython (Python on .NET), and these have no GIL.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Python易于学习，并且有大量资源。Go也易于编写，并且学习曲线平缓。在我看来，学习曲线和编程的简易性并不是Go和Python之间的主要区别因素。最大的区别，以及Python的不足之处，是性能。Python在性能方面无法与Go竞争。部分原因是Python的解释性质，但更大的因素是**全局解释器锁**（**GIL**）。GIL阻止解释器使用超过一个CPU的处理能力，即使有多个线程在执行。有一些方法可以绕过这个问题，比如使用多进程，但这也有自己的缺点和限制，因为它实际上是在派生一个新的进程。其他选项是使用Jython（Python在Java上）或IronPython（Python在.NET上），这些都没有GIL。
- en: Why not use Java?
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么不使用Java？
- en: One of Java's greatest strengths is the ability to **write once, run anywhere**
    (**WORA**). This is incredibly valuable if you have to do anything involving GUI,
    graphics, or audio. Go certainly does not beat Java in its ability to create GUIs,
    but it is cross-platform and supports cross-compiling.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Java最大的优势之一是**一次编写，到处运行**（**WORA**）的能力。如果涉及到GUI、图形或音频等任何事情，这是非常有价值的。Go在创建GUI方面肯定不如Java，但它是跨平台的，并支持交叉编译。
- en: Java is mature and widely adopted with lots of resources available. There are
    more options with Java libraries than Go packages. Java is the more verbose of
    the two languages. The Java ecosystem is more complex with several options for
    build tools and package managers. Go is much simpler and more standardized. These
    differences could simply be attributed to the age difference between the languages,
    but it may still affect your language choice.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Java是成熟且被广泛采用的，有大量可用的资源。与Go包相比，Java库的选择更多。Java是这两种语言中更冗长的一种。Java生态系统更加复杂，有几种构建工具和包管理器可供选择。Go更简单，更标准化。这些差异可能仅仅是由于这两种语言之间的年龄差异，但它可能仍会影响你的语言选择。
- en: In certain situations, the **Java virtual machine** (**JVM**) can be too resource
    intensive in terms of memory or startup time. If you need to pipe together several
    command-line Java applications, the startup time for the JVM just to run a series
    of short-lived programs can be a significant performance hit. In terms of memory,
    if you need to run several instances of the same application, then the memory
    required to run each JVM can add up. The JVM can also be restricting since it
    creates a sandbox and limits your access to the host machine. Go compiles down
    to native machine code and thus has no need for a virtual machine layer.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，**Java虚拟机**（**JVM**）在内存或启动时间方面可能过于资源密集。如果需要将几个命令行Java应用程序串联在一起，为了运行一系列短暂的程序而启动JVM可能会对性能造成显著影响。在内存方面，如果需要运行同一应用程序的多个实例，那么运行每个JVM所需的内存可能会累积起来。JVM也可能会限制，因为它创建了一个沙盒并限制了对主机机器的访问。Go编译成本机代码，因此不需要虚拟机层。
- en: Go is well-documented and the community continues to grow and provide more resources.
    It is an easy language to learn, especially for experienced programmers. Concurrency
    is a bit simpler and built into the language, as opposed to a library package.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Go有很好的文档，并且社区不断增长并提供更多资源。对于有经验的程序员来说，这是一门容易学习的语言。并发性相对简单，并内置于语言中，而不是作为一个库包。
- en: Why not use C++?
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么不使用C++？
- en: C++ does offer a little more control since the developer is in charge of memory
    management and there is no garbage collector. For this same reason, C++ will have
    slightly better performance. In some cases, Go can actually outperform C++.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: C++确实提供了更多的控制，因为开发人员负责内存管理，没有垃圾收集器。出于同样的原因，C++的性能会稍微更好。在某些情况下，Go实际上可以胜过C++。
- en: C++ is very mature and has a large set of third-party libraries. Libraries are
    not always cross-platform and can have complex makefiles. Cross-compiling is much
    simpler in Go and can be done with the Go toolchain.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: C++非常成熟，并拥有大量的第三方库。库并非总是跨平台的，可能具有复杂的makefile。在Go中，交叉编译要简单得多，并且可以使用Go工具链完成。
- en: Go compiles with more efficiency because it has better dependency management.
    C++ can re-include the same header file multiple times and cause compilation times
    to balloon. The package system is more consistent and standardized in Go. Threads
    and concurrency are native to Go and require platform-specific libraries in C++.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Go的编译效率更高，因为它具有更好的依赖管理。C++可以多次重新包含相同的头文件，导致编译时间膨胀。Go中的包系统更一致和标准化。线程和并发在Go中是本地的，而在C++中需要特定于平台的库。
- en: The maturity of C++ has also led to the language growing and becoming more complicated
    over time. Go is a refreshing change with a simple-yet-modern language. C++ is
    not as friendly to beginners as Go.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: C++的成熟也导致了语言随着时间的推移变得更加复杂。Go是一种简单而现代的语言，带来了一种清新的变化。对初学者来说，C++不像Go那样友好。
- en: Development environment
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发环境
- en: All of the examples in this book will run across major platforms, Windows, macOS,
    and Linux. Having said that, the examples were primarily written and developed
    on Ubuntu Linux, and this is the recommended platform for the following examples.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的所有示例都可以在主要平台Windows、macOS和Linux上运行。话虽如此，这些示例主要是在Ubuntu Linux上编写和开发的，这是以下示例的推荐平台。
- en: Ubuntu Linux is available for free at [https://www.ubuntu.com/download/desktop](https://www.ubuntu.com/download/desktop).
    The download page may ask for a donation, but you can choose to download for free.
    Ubuntu is not required, but the book will be easier to follow if you have the
    same environment. Other Linux distributions should work equally well, but I strongly
    recommend that you use a Debian-based distribution. Most of the Go code examples
    in this book will work on Windows, Linux, and Mac without any modification. Certain
    examples may be Linux- and Mac-specific, such as file permissions, which are not
    treated similarly in Windows. Any example that is specific to a platform is mentioned.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu Linux可以在[https://www.ubuntu.com/download/desktop](https://www.ubuntu.com/download/desktop)免费下载。下载页面可能会要求捐赠，但您可以选择免费下载。虽然不是必须使用Ubuntu，但如果您使用相同的环境，阅读本书会更容易。其他Linux发行版同样适用，但我强烈建议您使用基于Debian的发行版。本书中的大多数Go代码示例都可以在Windows、Linux和Mac上运行，无需任何修改。某些示例可能是特定于Linux和Mac的，例如文件权限，在Windows中处理方式不同。任何特定于平台的示例都会有所提及。
- en: You can install Ubuntu for free inside a virtual machine or as your primary
    operating system. As long as your system has enough CPU, RAM, and disk space,
    I recommend that you use a virtual machine with Oracle VirtualBox, which is available
    at [https://www.virtualbox.org/](https://www.virtualbox.org/). VMWare Player is
    an alternative to VirtualBox and is available at [https://www.vmware.com/products/player/playerpro-evaluation.html](https://www.vmware.com/products/player/playerpro-evaluation.html).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在虚拟机内免费安装Ubuntu，也可以将其作为主要操作系统。只要您的系统具有足够的CPU、RAM和磁盘空间，我建议您使用Oracle VirtualBox提供的虚拟机，该虚拟机可在[https://www.virtualbox.org/](https://www.virtualbox.org/)上获得。VMWare
    Player是VirtualBox的替代品，可在[https://www.vmware.com/products/player/playerpro-evaluation.html](https://www.vmware.com/products/player/playerpro-evaluation.html)上获得。
- en: 'Download and install VirtualBox, and then, download the Ubuntu desktop ISO
    file. Create a virtual machine, have it boot the Ubuntu ISO, and choose the Install
    option. Once you have installed Ubuntu and logged in as your user, you can install
    the Go programming language. Ubuntu makes this incredibly easy by providing a
    package. Just open a Terminal window and run the following command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 下载并安装VirtualBox，然后下载Ubuntu桌面ISO文件。创建一个虚拟机，让它引导Ubuntu ISO，并选择安装选项。安装完Ubuntu并以您的用户身份登录后，您可以安装Go编程语言。Ubuntu通过提供一个软件包使这变得非常容易。只需打开一个终端窗口，运行以下命令：
- en: '[PRE0]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Using `sudo` elevates your privileges in order to install and may ask you for
    your password. If everything was successful, you will now have access to the `go`
    executable, which contains the whole toolchain. You can run `go help` or `go`
    by itself for usage instructions.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`sudo`提升您的权限以进行安装，并可能要求您输入密码。如果一切顺利，您现在将可以访问包含整个工具链的`go`可执行文件。您可以运行`go help`或仅运行`go`以获取使用说明。
- en: 'If you are not using Ubuntu or want to install the latest version, you can
    download the latest version from [https://golang.org/dl](https://golang.org/dl/).
    The Windows and Mac installer will take care of updating your `PATH` environment
    variable, but in Linux you will have to move the extracted contents to a desired
    location, such as `/opt/go`, and then update your `PATH` environment variable
    manually to include the location. Consider this example:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有使用Ubuntu或想要安装最新版本，您可以从[https://golang.org/dl](https://golang.org/dl/)下载最新版本。Windows和Mac安装程序将负责更新您的`PATH`环境变量，但在Linux中，您将不得不将提取的内容移动到所需的位置，例如`/opt/go`，然后手动更新您的`PATH`环境变量以包括该位置。考虑以下示例：
- en: '[PRE1]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now restart your Terminal for the changes to take effect. If you are using a
    shell other than Bash, you will need to update the proper RC file for your shell.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在重新启动终端以使更改生效。如果您使用的是Bash之外的shell，您需要更新适合您的shell的正确RC文件。
- en: Installing Go on other platforms
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在其他平台上安装Go
- en: If you are not using Ubuntu, you can still install Go easily. The Go website
    provides multiple installation formats on the Downloads page at [https://golang.org/dl/](https://golang.org/dl/).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有使用Ubuntu，您仍然可以轻松安装Go。Go网站在[https://golang.org/dl/](https://golang.org/dl/)的下载页面提供了多种安装格式。
- en: Other Linux distributions
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他Linux发行版
- en: The first option is to use the package manager for the Linux distribution to
    install Go. Most major distributions have a package for Go. Names vary, so a web
    search may be necessary to get the exact package name. If there is no package
    available, you can simply download the precompiled Linux tarball and extract it.
    A good place to extract the contents is `/opt/go`. Then, add `/opt/go/bin` to
    your `PATH` environment variable the same way as described in the previous section.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个选项是使用Linux发行版的软件包管理器安装Go。大多数主要发行版都有Go的软件包。名称各不相同，因此可能需要进行网络搜索以获取确切的软件包名称。如果没有可用的软件包，您可以简单地下载预编译的Linux
    tarball并解压缩。将内容解压到`/opt/go`是一个不错的选择。然后，以与上一节中描述的方式相同，将`/opt/go/bin`添加到您的`PATH`环境变量中。
- en: Windows
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows
- en: An official Windows installer is available, which makes installation as simple
    as running the installer. You may need to modify the environment variables and
    update your `%PATH%` variable. In Windows 10, this can be found by navigating
    to Control Panel | System | Advanced System Settings | Environment Variables.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 官方的Windows安装程序可用，安装过程就像运行安装程序一样简单。您可能需要修改环境变量并更新您的`%PATH%`变量。在Windows 10中，可以通过导航到控制面板
    | 系统 | 高级系统设置 | 环境变量找到。
- en: Mac
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mac
- en: An official installer is also available for Mac. After running the installer,
    Go will be available in your `PATH` variable.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Mac也有官方的安装程序可用。运行安装程序后，Go将在您的`PATH`变量中可用。
- en: Setting up Go
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Go
- en: 'At this point, your environment should have Go installed and you should be
    able to run `go` executable from your Terminal window. The go program is how you
    access the Go toolchain. You can test it by running this command:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您的环境应该已经安装了Go，并且您应该能够从终端窗口运行`go`可执行文件。go程序是您访问Go工具链的方式。您可以通过运行以下命令来测试它：
- en: '[PRE2]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now we are ready to write a first Hello World program to ensure that our environment
    is fully functional. Before we start coding, though, we need to create a proper
    workspace.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备编写第一个Hello World程序，以确保我们的环境完全正常。不过，在开始编码之前，我们需要创建一个适当的工作区。
- en: Creating your workspace
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的工作区
- en: Go has a standard folder structure for a workspace. It is important to conform
    to certain standards for the Go toolchain to work properly. You can create a workspace
    directory anywhere you want and name it anything you like. For the lab environment,
    we will simply use the `Home` directory as the Go workspace. This means that source
    files will reside in `~/src`, packages will be built in `~/pkg`, and executables
    will be installed to `~/bin`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Go有一个工作区的标准文件夹结构。遵守特定的标准对于Go工具链正常工作非常重要。您可以在任何地方创建工作区目录，并且可以随意命名。在实验环境中，我们将简单地使用`Home`目录作为Go工作区。这意味着源文件将驻留在`~/src`，包将构建在`~/pkg`，可执行文件将安装到`~/bin`。
- en: Setting up environment variables
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置环境变量
- en: 'In order for most of the Go toolchain to work, the `GOPATH` environment variable
    must be set. The `GOPATH` specifies what directory you treat as your workspace.
    The `GOPATH` environment variable must be set before you can build packages. For
    more help and information, call the `go help` command in the Terminal by running
    this command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让大部分Go工具链正常工作，必须设置`GOPATH`环境变量。`GOPATH`指定了你将其视为工作区的目录。在构建包之前，必须设置`GOPATH`环境变量。要获取更多帮助和信息，请在终端中运行以下命令调用`go
    help`命令：
- en: '[PRE3]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We need to tell Go to treat our `home` directory as the workspace. This is
    done by setting the `GOPATH` environment variable. You can set `GOPATH` in three
    ways:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要告诉Go将我们的`home`目录视为工作区。这是通过设置`GOPATH`环境变量来完成的。您可以通过以下三种方式设置`GOPATH`：
- en: 'The first way is to set it manually each time you run the `go` command. Consider
    this example:'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一种方法是每次运行`go`命令时手动设置它。考虑以下示例：
- en: '[PRE4]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can also set the `GOPATH` variable so that it stays set until you close
    your Terminal and the environment variable is lost:'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您还可以设置`GOPATH`变量，以便在关闭终端时保持设置，环境变量丢失：
- en: '[PRE5]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The third option is to set the `GOPATH` environment variable permanently as
    follows:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个选项是永久设置`GOPATH`环境变量如下：
- en: Add it to your shell startup script, `.bashrc`. This will set the variable every
    time you start the Terminal.
  id: totrans-116
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其添加到您的shell启动脚本`.bashrc`中。这将在每次启动终端时设置变量。
- en: 'Run this to ensure that `GOPATH` is set whenever you open future Terminal/shell
    sessions:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行此命令以确保在打开未来的终端/ shell会话时设置`GOPATH`：
- en: '[PRE6]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Restart your Terminal for the changes to take effect. If you are using Zsh or
    an alternative shell, you will need to update the respective RC file.
  id: totrans-119
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动终端以使更改生效。如果您使用Zsh或其他替代shell，则需要更新相应的RC文件。
- en: Note that Go version 1.8 and greater do not require the `GOPATH` environment
    variable to be explicitly set. If no `GOPATH` is set, it will use `$HOME/go` as
    a default workspace.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Go版本1.8及更高版本不需要显式设置`GOPATH`环境变量。如果未设置`GOPATH`，它将使用`$HOME/go`作为默认工作区。
- en: Editors
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑器
- en: We're about to write our first program in our new `hello` directory. You will
    first need to choose which editor to use. Fortunately, working with Go does not
    require any special IDE or editor. The Go toolchain integrates easily into many
    editors and IDEs. Your options range from using a simple text editor, such as
    Notepad, to full-fledged IDEs dedicated to Go.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的新`hello`目录中编写我们的第一个程序。您首先需要选择要使用的编辑器。幸运的是，使用Go不需要任何特殊的IDE或编辑器。Go工具链可以轻松集成到许多编辑器和IDE中。您可以选择使用简单的文本编辑器，如记事本，也可以选择专门用于Go的完整的IDE。
- en: I recommend that you start with a simple text editor, such as nano or gedit,
    since these are included with Ubuntu, easy to use, and support syntax highlighting
    for Go out of the box. Feel free to choose another editor or IDE though.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议您从一个简单的文本编辑器开始，比如nano或gedit，因为这些都包含在Ubuntu中，易于使用，并且支持Go的语法高亮。当然，您也可以选择其他编辑器或IDE。
- en: Plugins exist for many text editors and IDEs to add Go support. For example,
    Visual Studio Code, Emacs, Sublime Text, JetBrains IntelliJ, Vim, Atom, NetBeans,
    and Eclipse all have Go plugins. There are a couple of Go-specific IDEs, namely
    JetBrains GoLand and LiteIDE, both of which are cross-platform.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 许多文本编辑器和IDE都有Go支持的插件。例如，Visual Studio Code、Emacs、Sublime Text、JetBrains IntelliJ、Vim、Atom、NetBeans和Eclipse都有Go插件。还有一些专门针对Go的IDE，即JetBrains
    GoLand和LiteIDE，两者都是跨平台的。
- en: Start with the `nano` or `gedit` command and explore other editors and IDEs
    after you are comfortable with Go. This book will not compare the editors or cover
    how to configure them.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在您熟悉Go之后，可以从`nano`或`gedit`命令开始，然后探索其他编辑器和IDE。本书不会比较编辑器或介绍如何配置它们。
- en: Creating your first package
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的第一个包
- en: 'Within the `~/src` directory, any directory you create is a package. The name
    of your directory becomes the name of the package or application. We need to first
    make sure that the `src` directory exists. Tilde (`~`) is a shortcut for your
    home directory similar to the `$HOME` variable. Refer to the following code block:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在`~/src`目录中，您创建的任何目录都是一个包。您的目录名称成为包或应用程序的名称。我们首先需要确保`src`目录存在。波浪号（`~`）类似于`$HOME`变量，是您的主目录的快捷方式。请参考以下代码块：
- en: '[PRE7]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s create a new package named `hello` for our first application:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为我们的第一个应用程序创建一个名为`hello`的新包：
- en: '[PRE8]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: A package is simply a directory. You can have one or more source files inside
    a package. Any subdirectories are treated as separate packages. A package can
    be an application with a `main()` function (`package main`), or it can be a library
    that can only be imported to other packages. This package doesn't have any files
    yet, but we'll write the first file in a moment. Don't worry too much about package
    structure for now. You can read more about package paths at [https://golang.org/doc/code.html#PackagePaths](https://golang.org/doc/code.html#PackagePaths).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 包只是一个目录。您可以在包中有一个或多个源文件。任何子目录都被视为单独的包。包可以是一个带有`main()`函数（`package main`）的应用程序，也可以是一个只能被其他包导入的库。这个包还没有任何文件，但我们马上就会写第一个文件。现在不要太担心包的结构。您可以在[https://golang.org/doc/code.html#PackagePaths](https://golang.org/doc/code.html#PackagePaths)上阅读有关包路径的更多信息。
- en: Writing your first program
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写你的第一个程序
- en: 'The simplest package you can have is a single file inside a directory. Create
    a new file, `~/src/hello/hello.go`, and put the following code inside:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在一个目录中拥有的最简单的包是一个目录中的单个文件。创建一个新文件`~/src/hello/hello.go`，并将以下代码放入其中：
- en: '[PRE9]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Running the executable file
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行可执行文件
- en: 'The simplest way to execute a program is with the `go run` command. The following
    command will run the file without leaving behind an executable file:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 执行程序的最简单方法是使用`go run`命令。以下命令将在不留下可执行文件的情况下运行该文件：
- en: '[PRE10]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Building the executable file
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建可执行文件
- en: 'To compile and build an executable file, use the `go build` command. When running
    `go build` you must pass a path to a package. The package path you provide is
    relative to `$GOPATH/src`. Since our package is in `~/src/hello`, we would run
    the command as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要编译和构建可执行文件，请使用`go build`命令。运行`go build`时，必须传递一个包的路径。您提供的包路径是相对于`$GOPATH/src`的。由于我们的包在`~/src/hello`中，我们将运行以下命令：
- en: '[PRE11]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can actually call `go build` from anywhere as long as we have a `$GOPATH`
    set. The executable binary that is created will be output in the current working
    directory. You can then run it with this command:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 只要我们设置了`$GOPATH`，就可以从任何地方调用`go build`。创建的可执行二进制文件将输出到当前工作目录中。然后可以使用以下命令运行它：
- en: '[PRE12]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Installing the executable file
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装可执行文件
- en: The `go build` tool is good for generating an executable file in your current
    working directory, but there is a way to build and install your applications so
    that the executables are all collected in the same location.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`go build`工具适用于在当前工作目录中生成可执行文件，但有一种方法可以构建和安装您的应用程序，以便将可执行文件收集在同一位置。'
- en: When you run `go install` it puts the output file in a default location of `$GOPATH/bin`.
    In our case, we set `$GOPATH` equal to our `$HOME`. So the default `bin` directory
    would be `$HOME/bin`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行`go install`时，它会将输出文件放在`$GOPATH/bin`的默认位置。在我们的情况下，我们将`$GOPATH`设置为我们的`$HOME`。因此，默认的`bin`目录将是`$HOME/bin`。
- en: 'You can override the location by setting the `GOBIN` environment variable if
    you want it to install somewhere else. To install our `hello` program, we will
    run the following command:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要将其安装到其他位置，可以通过设置`GOBIN`环境变量来覆盖位置。要安装我们的`hello`程序，我们将运行以下命令：
- en: '[PRE13]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This will build and create an executable file, `~/bin/hello`. The `bin` directory
    will get created automatically if it does not already exist. If you run the `install`
    command multiple times, it will rebuild and overwrite the executable in the `bin`
    directory. Then the application can be run with this:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这将构建并创建一个可执行文件，`~/bin/hello`。如果`bin`目录尚不存在，它将自动创建。如果多次运行`install`命令，它将重新构建并覆盖`bin`目录中的可执行文件。然后可以使用以下命令运行应用程序：
- en: '[PRE14]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can add `~/bin` to your `PATH` environment variable for convenience. Doing
    so will allow you to run the applications from any working directory. To add the
    `bin` directory to your `PATH`, run this in the Terminal:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，您可以将`~/bin`添加到您的`PATH`环境变量中。这样做将允许您从任何工作目录运行应用程序。要将`bin`目录添加到您的`PATH`中，请在终端中运行以下命令：
- en: '[PRE15]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Be sure to restart your Terminal after that to refresh the environment variables.
    After that you can run the `hello` application by simply typing the following
    into the Terminal:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在此之后重新启动您的终端以刷新环境变量。之后，您可以通过在终端中简单地输入以下内容来运行`hello`应用程序：
- en: '[PRE16]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Installing the application is completely optional. You don't have to install
    programs to run or build them. You can always build and run from your current
    working directory when developing, but it can be convenient to install finished
    applications that get used.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 安装应用程序是完全可选的。您不必安装程序来运行或构建它们。在开发时，您可以始终从当前工作目录构建和运行，但安装经常使用的已完成应用程序可能会更方便。
- en: Formatting with go fmt
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用go fmt进行格式化
- en: The `go fmt` command is used to format source code files to meet Go formatting
    standards.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`go fmt`命令用于格式化源代码文件以符合Go格式标准。'
- en: This will make sure that indentation is accurate and there are no excessive
    blank spaces, among other things. You can format a single Go source code file
    or a whole package at once. It is good practice to follow Go coding standards
    and run `go fmt` on your files so that you will have no doubt that your code follows
    the guidelines. Read more on formatting at [https://golang.org/doc/effective_go.html#formatting](https://golang.org/doc/effective_go.html#formatting).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这将确保缩进准确，没有过多的空格等。您可以一次格式化单个Go源代码文件或整个包。遵循Go编码标准并在文件上运行`go fmt`是一个好习惯，这样您就不会怀疑您的代码是否遵循了指南。在[https://golang.org/doc/effective_go.html#formatting](https://golang.org/doc/effective_go.html#formatting)上阅读更多关于格式化的内容。
- en: Running Go examples
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行Go示例
- en: The examples provided in this book are all self-contained. Every example is
    a full program and can be run. Most examples are short and demonstrate one specific
    topic. While the examples can be used as standalone programs, some of them may
    have limited use. They are intended to be references and used like a cookbook
    for building your own projects. Because each example is a self-contained main
    package, you can use the `go build` command to get an executable and `go run`
    to run the file. Here are some more details about the various options for building
    and running programs.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 本书提供的示例都是独立的。每个示例都是一个完整的程序，可以运行。大多数示例都很简短，演示了一个特定的主题。虽然这些示例可以作为独立的程序使用，但其中一些可能有限的用途。它们旨在作为参考，并像烹饪书一样用于构建自己的项目。因为每个示例都是一个独立的主包，您可以使用`go
    build`命令获得可执行文件，并使用`go run`运行文件。以下是有关构建和运行程序的各种选项的更多详细信息。
- en: Building a single Go file
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建单个Go文件
- en: 'If you build a file, it will generate an executable named after the Go file.
    Run the following command:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果构建一个文件，它将生成一个以Go文件命名的可执行文件。运行以下命令：
- en: '[PRE17]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This will give you an executable named example that could be executed like
    this:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为您生成一个名为example的可执行文件，可以像这样执行：
- en: '[PRE18]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Running a single Go file
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行单个Go文件
- en: 'You don''t have to build a file and get an executable if you only want to run
    it. The `go run` option allows you to run the `.go` file without leaving an executable
    behind. You can still pass in arguments as if it was a regular executable, like
    this:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只想运行文件而不生成可执行文件，您不必构建文件。`go run`选项允许您运行`.go`文件，而不会留下可执行文件。您仍然可以传递参数，就像它是一个常规可执行文件一样，如下所示：
- en: '[PRE19]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Building multiple Go files
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建多个Go文件
- en: 'If a program is split into multiple files, you can pass all of them to the
    `build` command. For example, if you have a `main.go` file and an `utility.go`
    file containing extra functions, you could build them by running the following
    command:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个程序分成多个文件，您可以将它们全部传递给`build`命令。例如，如果您有一个`main.go`文件和一个包含额外函数的`utility.go`文件，您可以通过运行以下命令构建它们：
- en: '[PRE20]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If you tried to build `main.go` by itself, it would not be able to find the
    references to the functions in `utility.go`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尝试单独构建`main.go`，它将无法找到`utility.go`中函数的引用。
- en: Building a folder (package)
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建文件夹（包）
- en: If a package contains multiple Go files that need to be built, it is tedious
    to pass each file to the `build` command. If you run `go build` with no arguments
    inside a folder, it will attempt to build all the `.go` files in the directory.
    If one of those files contains a `package main` statement at the top, it will
    generate an executable named after the directory name. If you write a program,
    it is possible to write a package that contains no main file and is used only
    as a library to be included in other projects.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个包包含多个需要构建的Go文件，逐个传递每个文件给`build`命令是很麻烦的。如果在文件夹中不带参数运行`go build`，它将尝试构建目录中的所有`.go`文件。如果其中一个文件在顶部包含`package
    main`语句，它将生成一个以目录名称命名的可执行文件。如果您编写一个程序，可以编写一个不包含主文件，仅用作库以包含在其他项目中的包。
- en: Installing a program for use
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装程序以供使用
- en: Installing a program is similar to building one but, instead of running `go
    build`, you run `go install`. You can run it inside a directory, pass it an absolute
    directory path, and pass it a directory path relative to the `$GOPATH` environment
    variable or on a file directly. Once a program has been installed, it goes into
    your `$GOBIN`, which you should have already set. You should have already added
    `$GOBIN` to your `$PATH` as well so that you can run the installed programs directly
    from your command line no matter what directory you are currently in. Installing
    is totally optional, but it is convenient for certain programs, especially for
    the ones you want to save or use frequently.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 安装程序类似于构建程序，但是，您运行的是`go install`而不是`go build`。您可以在目录中运行它，传递一个绝对目录路径，并传递一个相对于`$GOPATH`环境变量或直接在文件上的目录路径。一旦程序被安装，它将进入您的`$GOBIN`，您应该已经设置好了。您还应该将`$GOBIN`添加到您的`$PATH`中，这样无论您当前在哪个目录，都可以直接从命令行运行已安装的程序。安装是完全可选的，但对于某些程序来说很方便，特别是您想要保存或经常使用的程序。
- en: Summary
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: After reading this chapter, you should have a general understanding of the Go
    programming language and some of its key features. You should also have a version
    of Go installed on your machine with your environment variables set up. If you
    need more instructions on installing and testing your environment, refer to the
    Go documentation at [https://golang.org/doc/install](https://golang.org/doc/install).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本章后，您应该对Go编程语言及其一些关键特性有一个基本的了解。您还应该在您的机器上安装了Go的版本，并设置了环境变量。如果您需要更多关于安装和测试您的环境的说明，请参阅Go文档[https://golang.org/doc/install](https://golang.org/doc/install)。
- en: In the next chapter, we will look closer at the Go programming language, learning
    about the design, data types, keywords, features, control structures, and where
    to get help and find documentation. If you are already familiar with Go, it should
    be a good review to reinforce your foundational knowledge. If you are new to Go,
    it will serve as a primer to prepare you for the rest of the book.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更仔细地了解Go编程语言，学习设计、数据类型、关键字、特性、控制结构，以及如何获取帮助和查找文档。如果你已经熟悉Go，这将是一个很好的复习，以加强你的基础知识。如果你是Go的新手，它将作为一个入门指南，为你准备本书的其余部分。
