- en: Brute Force
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暴力破解
- en: Brute force attacks, also called exhaustive key attacks, are when you try every
    possible combination for an input until you eventually get the right combination.
    The most common example is brute forcing passwords. You can try every combination
    of characters, letters, and symbols, or you could use a dictionary list as a base
    for passwords. You can find dictionaries and prebuilt word lists based on common
    passwords online or you can create your own.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 暴力破解攻击，也称为穷举密钥攻击，是指您尝试对输入的每种可能组合，直到最终获得正确的组合。最常见的例子是暴力破解密码。您可以尝试每种字符、字母和符号的组合，或者您可以使用字典列表作为密码的基础。您可以在线找到基于常见密码的字典和预构建的单词列表，或者您可以创建自己的列表。
- en: There are different types of brute force password attacks. There are online
    attacks such as trying to log in to a website or database repeatedly. Online attacks
    are much slower due to network latency and bandwidth limitations. Services may
    also rate limit or lockout accounts after too many failed attempts. On the other
    hand, there are also offline attacks. An example of an offline attack is when
    you have a database dump full of hashed passwords on your local hard disk and
    you can brute force it with no limitation, except the physical hardware. Serious
    password crackers build computers with several powerful graphics cards tuned for
    cracking, which cost tens of thousands of dollars.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同类型的暴力破解密码攻击。有在线攻击，例如反复尝试登录网站或数据库。由于网络延迟和带宽限制，在线攻击速度较慢。服务也可能在太多失败尝试后对帐户进行速率限制或锁定。另一方面，还有离线攻击。离线攻击的一个例子是当您在本地硬盘上有一个充满哈希密码的数据库转储，并且您可以无限制地进行暴力破解，除了物理硬件。严肃的密码破解者会构建配备了几张强大图形卡的计算机，用于破解，这样的计算机成本高达数万美元。
- en: One thing to note about online brute force attacks is that they are very easy
    to detect, cause a lot of traffic, can put a heavy load on servers and even bring
    them down completely, and are illegal unless you have permission. Permission can
    be misleading when it comes to online services. For example, just because you
    have an account on a service such as Facebook does not mean you have permission
    to brute force attack your own account. Facebook still owns the servers and you
    do not have permission to attack their site even if it is only against your account.
    Even if you are running your own service such as an SSH service on an Amazon server,
    you still do not have the permission to do a brute force attack. You must request
    and get special permission for penetration testing to or from an Amazon resource.
    You can use your own virtual machines for testing locally.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 关于在线暴力破解攻击的一点需要注意的是，它们很容易被检测到，会产生大量流量，可能会给服务器带来沉重负载，甚至完全使其崩溃，并且未经许可是非法的。在线服务方面的许可可能会让人产生误解。例如，仅因为您在Facebook等服务上拥有帐户，并不意味着您有权对自己的帐户进行暴力破解攻击。Facebook仍然拥有服务器，即使只针对您的帐户，您也没有权限攻击他们的网站。即使您在Amazon服务器上运行自己的服务，例如SSH服务，您仍然没有权限进行暴力破解攻击。您必须请求并获得对Amazon资源进行渗透测试的特殊许可。您可以使用自己的虚拟机进行本地测试。
- en: 'The webcomic *xkcd* has a comic that perfectly relates to the topic of brute
    forcing passwords:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 网络漫画*xkcd*有一部漫画与暴力破解密码的主题完美相关：
- en: '![](img/17987bbd-217b-435f-b4eb-bb536d16c4de.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17987bbd-217b-435f-b4eb-bb536d16c4de.png)'
- en: 'Source: https://xkcd.com/936/'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：https://xkcd.com/936/
- en: 'Most, if not all of these attacks, can be protected using one or more of the
    following techniques:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数，如果不是所有这些攻击，都可以使用以下一种或多种技术进行保护：
- en: Strong passwords (ideally passphrases or keys)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强密码（最好是口令或密钥）
- en: Implementing rate limiting/temporary lockouts on failed attempts
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施失败尝试的速率限制/临时锁定
- en: Using a CAPTCHA
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CAPTCHA
- en: Adding two-factor authentication
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加双因素认证
- en: Salting passwords
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加盐密码
- en: Limiting access to the server
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制对服务器的访问
- en: 'This chapter will cover several brute force examples including the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖几个暴力破解的例子，包括以下内容：
- en: HTTP basic authentication
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP基本认证
- en: HTML login forms
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML登录表单
- en: SSH password authentication
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSH密码认证
- en: Databases
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库
- en: Brute forcing HTTP basic authentication
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暴力破解HTTP基本认证
- en: 'HTTP basic authentication is when you provide a username and password with
    your HTTP request. You can pass it as part of the URL in modern browsers. Consider
    this example:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP基本认证是指您在HTTP请求中提供用户名和密码。您可以在现代浏览器中将其作为URL的一部分传递。考虑以下示例：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When adding basic authentication programmatically, the credentials are provided
    as an HTTP header named `Authorization`, which contains a value of `username:password`
    base64 encoded and prefixed with `Basic`, separated by a space. Consider the following
    example:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程时添加基本认证时，凭据以名为`Authorization`的HTTP标头提供，其中包含以base64编码并以`Basic`为前缀，用空格分隔的`username:password`值。考虑以下示例：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Web servers typically respond with a `401 Access Denied` code when the authentication
    fails, and they should respond with a `2xx` success code such as `200 OK`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Web服务器在认证失败时通常会响应`401 Access Denied`代码，并且应该以`200 OK`等`2xx`成功代码进行响应。
- en: This example will take a URL and a `username` value and attempt to log in using
    the passwords generated.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例将获取一个URL和一个`username`值，并尝试使用生成的密码进行登录。
- en: To reduce the effectiveness of attacks like these, implement a rate-limiting
    feature or account lockout feature after a number of failed log in attempts.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减少此类攻击的效果，可以在一定数量的登录尝试失败后实施速率限制功能或帐户锁定功能。
- en: 'If you need to build your own password list from scratch, try starting with
    the most common passwords documented in Wikipedia at [https://en.wikipedia.org/wiki/List_of_the_most_common_passwords](https://en.wikipedia.org/wiki/List_of_the_most_common_passwords).
    Here is a short example you can save as `passwords.txt`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要从头开始构建自己的密码列表，请尝试从维基百科中记录的最常见密码开始[https://en.wikipedia.org/wiki/List_of_the_most_common_passwords](https://en.wikipedia.org/wiki/List_of_the_most_common_passwords)。以下是一个可以保存为`passwords.txt`的简短示例：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Save the list in the preceding code block as a text file with one password
    on each line. The name is not important since you provide the password list filename
    as a command-line argument:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 将前面代码块中的列表保存为一个文本文件，每行一个密码。名称不重要，因为你会将密码列表文件名作为命令行参数提供：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Brute forcing the HTML login form
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暴力破解HTML登录表单
- en: Just about every website with a user system provides a login form on a web page.
    We can write a program that will submit the login form repeatedly. This example
    assumes that there is no CAPTCHA, rate limit, or other deterring mechanisms on
    the web application. Remember not to perform this attack against any production
    site or any site you do not own or have permission. If you want to test it, I
    recommend that you set up a local web server and test only locally.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎每个具有用户系统的网站都在网页上提供登录表单。我们可以编写一个程序来重复提交登录表单。这个例子假设在Web应用程序上没有CAPTCHA、速率限制或其他阻止机制。请记住不要对任何生产站点或您不拥有或没有权限的站点执行此攻击。如果您想测试它，我建议您设置一个本地Web服务器并仅在本地测试。
- en: Every web form can be created with different names for the `username` and `password`
    fields, so the names of those fields will need to be provided on each run and
    must be specific to the URL being targeted.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 每个网络表单都可以使用不同的名称创建`用户名`和`密码`字段，因此这些字段的名称需要在每次运行时提供，并且必须特定于目标URL。
- en: View the source or inspect the target form to get the `name` attribute from
    the input elements as well as the target `action` attribute from the `form` element.
    If no action URL is provided in the `form` element, then it defaults to the current
    URL. One other important piece of information is the method used on the form.
    Login forms should be `POST`, but it is possible that they are coded poorly and
    use a `GET` method. Some login forms use JavaScript to submit the form and may
    completely bypass the standard form method. Sites that use logic like this will
    require more reverse engineering to determine what the final post destination
    really is and how the data is formatted. You can use an HTML proxy or use the
    network inspector in the browser to view the XHR requests.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 查看源代码或检查目标表单，以获取输入元素的`name`属性以及`form`元素的目标`action`属性。如果`form`元素中没有提供操作URL，则默认为当前URL。另一个重要的信息是表单上使用的方法。登录表单应该是`POST`，但有可能编码不好，使用了`GET`方法。有些登录表单使用JavaScript提交表单，可能完全绕过标准的表单方法。使用这种逻辑的站点需要更多的逆向工程来确定最终的提交目的地和数据格式。您可以使用HTML代理或在浏览器中使用网络检查器查看XHR请求。
- en: Later chapters will talk about web crawling and querying within the `DOM` interface
    to find specific elements based on name or CSS selectors, but this chapter will
    not discuss trying to auto-detect the form field and identify the proper input
    elements. This step must be done manually here, but, once it is identified, the
    brute force attack can run on its own.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 后面的章节将讨论Web爬取和在`DOM`接口中查询特定元素的方法，但本章不会讨论尝试自动检测表单字段并识别正确的输入元素。这一步必须在这里手动完成，但一旦识别出来，暴力攻击就可以自行运行。
- en: To protect against attacks like these, implement a CAPTCHA system or a rate-limiting
    feature.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止这样的攻击，实施一个CAPTCHA系统或速率限制功能。
- en: Note that every web application can have their own way of authenticating. This
    is not a one-size-fits-all solution. It provides an example of a basic `HTTP POST`
    form login, but will need to be modified slightly for different applications.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，每个Web应用程序都可以有自己的身份验证方式。这不是一刀切的解决方案。它提供了一个基本的`HTTP POST`表单登录示例，但需要针对不同的应用程序进行轻微修改。
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Brute forcing SSH
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暴力破解SSH
- en: Secure Shell or SSH supports a few authentication mechanisms. If a server only
    supports public key authentication, a brute force attempt is near futile. This
    example will only look at password authentication with SSH.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 安全外壳或SSH支持几种身份验证机制。如果服务器只支持公钥身份验证，那么暴力破解几乎是徒劳的。这个例子只会讨论SSH的密码身份验证。
- en: To protect against attacks like these, implement rate-limiting or a tool such
    as fail2ban that locks out accounts for a short duration when a number of failed
    login attempts are detected. Also disable the root remote login. Some people like
    to put SSH on a non-standard port, but end up putting it on high number non-restricted
    ports such as `2222`, which is not a good idea. If you use a high number non privileged
    port such as `2222`, another low privilege user could hijack the port and start
    running their own service in its place if it ever went down. Put your SSH daemon
    on a port lower than `1024` if you want to change it from the default.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止这样的攻击，实施速率限制或使用类似fail2ban的工具，在检测到一定数量的登录失败尝试时，锁定帐户一段时间。还要禁用root远程登录。有些人喜欢将SSH放在非标准端口上，但最终放在高端口号的非受限端口上，比如`2222`，这不是一个好主意。如果您使用高端口号的非特权端口，另一个低特权用户可能会劫持该端口，并在其位置上启动自己的服务。如果要更改端口，将SSH守护程序放在低于`1024`的端口上。
- en: This attack is obviously noisy in the logs, easy to detect, and blocked by things
    such as fail2ban. If you are doing a penetration test though, checking whether
    rate limiting or account locking is present can serve as a quick way. If no rate
    limiting or temporary account lockout is configured, brute force and DDoS are
    potential risks.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这种攻击显然在日志中很吵闹，容易被检测到，并且被fail2ban等工具阻止。但如果您正在进行渗透测试，检查速率限制或帐户锁定是否存在可以作为一种快速方法。如果没有配置速率限制或临时帐户锁定，暴力破解和DDoS是潜在的风险。
- en: 'Running this program requires an SSH package from [golang.org](http://www.golang.org).
    You can get it using this command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此程序需要从[golang.org](http://www.golang.org)获取一个SSH包。您可以使用以下命令获取它：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After installing the `ssh` package required, you can run the following example:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 安装所需的`ssh`包后，可以运行以下示例：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Brute forcing database login
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暴力破解数据库登录
- en: Database logins can be automated and brute forced just like the other methods.
    In the previous brute force examples, the majority of the code is the same. The
    major difference between the applications is the function that actually tests
    the authentication. Instead of repeating all that code again, these snippets will
    simply demonstrate how to log in to the various databases. Modify the previous
    brute force scripts to test for one of these instead of the SSH or HTTP method.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库登录可以像其他方法一样自动化和暴力破解。在以前的暴力破解示例中，大部分代码都是相同的。这些应用程序之间的主要区别在于实际测试身份验证的函数。而不是再次重复所有的代码，这些片段将简单地演示如何登录到各种数据库。修改以前的暴力破解脚本，以测试其中一个而不是SSH或HTTP方法。
- en: To protect against this, limit access to a database to only the machines that
    need it and disable root remote login.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止这种情况发生，限制对数据库的访问只允许需要它的机器，并禁用根远程登录。
- en: 'Go does not provide any database drivers in the standard library, only the
    interfaces. Therefore, all of these database examples require a third-party package
    from GitHub, as well as a running instance of the database to connect to. This
    book does not cover how to install and configure these database services. Each
    of these packages can be installed using the `go get` command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Go标准库中没有提供任何数据库驱动程序，只有接口。因此，所有这些数据库示例都需要来自GitHub的第三方包，以及一个正在运行的数据库实例进行连接。本书不涵盖如何安装和配置这些数据库服务。可以使用`go
    get`命令安装这些包中的每一个：
- en: 'MySQL: [https://github.com/go-sql-driver/mysql](https://github.com/go-sql-driver/mysql)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'MySQL: [https://github.com/go-sql-driver/mysql](https://github.com/go-sql-driver/mysql)'
- en: 'MongoDB: [https://github.com/go-mgo/mgo](https://github.com/go-mgo/mgo)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'MongoDB: [https://github.com/go-mgo/mgo](https://github.com/go-mgo/mgo)'
- en: 'PostgreSQL: [https://github.com/lib/pq](https://github.com/lib/pq)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'PostgreSQL: [https://github.com/lib/pq](https://github.com/lib/pq)'
- en: 'This example combines all three database libraries and provides one tool that
    can brute force MySQL, MongoDB, or PostgreSQL. The database type is specified
    as one of the command-line arguments, along with the username, host, password
    file, and database name. MongoDB and MySQL do not require a database name such
    as PostgreSQL, so it is optional when not using the  `postgres` option. A special
    variable called `loginFunc` is created to store the login function associated
    with the specified database type. This is the first time we''ve used a variable
    to hold a function. The login function is then used to perform the brute force
    attack:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子结合了所有三个数据库库，并提供了一个工具，可以暴力破解MySQL、MongoDB或PostgreSQL。数据库类型被指定为命令行参数之一，以及用户名、主机、密码文件和数据库名称。MongoDB和MySQL不需要像PostgreSQL那样的数据库名称，所以在不使用`postgres`选项时是可选的。创建了一个名为`loginFunc`的特殊变量，用于存储与指定数据库类型关联的登录函数。这是我们第一次使用变量来保存一个函数。然后使用登录函数执行暴力破解攻击：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Summary
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Having read this chapter, you will now understand how a basic brute force attack
    works against different applications. You should be able to adapt the examples
    given here to attack different protocols based on your needs.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本章后，您现在将了解基本的暴力破解攻击如何针对不同的应用程序工作。您应该能够根据自己的需求调整这里给出的示例来攻击不同的协议。
- en: Remember, these examples can be dangerous and potentially cause a denial of
    service, and it is not recommended that you run them against production services
    unless it is for the purpose of testing your brute force safeguards. Only perform
    these tests against services that you control, have permission to test, and understand
    the repercussions. You should never use these examples or these types of attacks
    against services you don't own, or you could break laws and land yourself in serious
    legal trouble.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这些例子可能是危险的，可能会导致拒绝服务，并且不建议您对生产服务运行它们，除非是为了测试您的暴力破解防护措施。只对您控制的服务执行这些测试，获得测试权限并了解后果。您不应该对您不拥有的服务使用这些例子或这些类型的攻击，否则您可能会触犯法律并陷入严重的法律问题。
- en: There are fine legal lines that can be hard to distinguish for tests. For example,
    if you are renting a hardware appliance, you technically do not own it, and need
    permission to test it even if it is located in your data center. Similarly, if
    you are renting hosting services from a provider such as Amazon, you must get
    their permission before performing penetration tests or you might suffer consequences
    for violating terms of service.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于测试来说，有一些细微的法律界限可能很难区分。例如，如果您租用硬件设备，您在技术上并不拥有它，并且需要获得许可才能对其进行测试，即使它位于您的数据中心。同样，如果您从亚马逊等提供商那里租用托管服务，您必须在执行渗透测试之前获得他们的许可，否则您可能会因违反服务条款而遭受后果。
- en: In the next chapter, we will look at web applications with Go and how to harden
    them and increase security using best practices such as HTTPS, using secure cookies
    and secure HTTP headers, escaping HTML output, and adding logging. It also explores
    how to consume a web application as a client by making requests, using a client
    SSL certificate, and using proxies.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将研究使用Go的Web应用程序以及如何通过使用最佳实践来增强它们的安全性，如HTTPS、使用安全的cookie和安全的HTTP头部、转义HTML输出和添加日志。它还探讨了如何作为客户端消耗Web应用程序，通过发出请求、使用客户端SSL证书和使用代理。
