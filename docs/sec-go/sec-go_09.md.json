["```go\nGET /archive HTTP/1.1\nHost: www.devdungeon.com  \n```", "```go\npackage main\n\nimport (\n   \"fmt\"\n   \"log\"\n   \"net/http\"\n   \"os\"\n)\n\nfunc printUsage() {\n   fmt.Println(os.Args[0] + ` - Serve a directory via HTTP\n\nURL should include protocol IP or hostname and port separated by colon.\n\nUsage:\n  ` + os.Args[0] + ` <listenUrl> <directory>\n\nExample:\n  ` + os.Args[0] + ` localhost:8080 .\n  ` + os.Args[0] + ` 0.0.0.0:9999 /home/nanodano\n`)\n}\n\nfunc checkArgs() (string, string) {\n   if len(os.Args) != 3 {\n      printUsage()\n      os.Exit(1)\n   }\n   return os.Args[1], os.Args[2]\n}\n\nfunc main() {\n   listenUrl, directoryPath := checkArgs()\n   err := http.ListenAndServe(listenUrl,      \n     http.FileServer(http.Dir(directoryPath)))\n   if err != nil {\n      log.Fatal(\"Error running server. \", err)\n   }\n}\n```", "```go\npackage main\n\nimport (\n   \"fmt\"\n   \"net/http\"\n   \"log\"\n)\n\nfunc indexHandler(writer http.ResponseWriter, request *http.Request) {\n   // Write the contents of the response body to the writer interface\n   // Request object contains information about and from the client\n   fmt.Fprintf(writer, \"You requested: \" + request.URL.Path)\n}\n\nfunc main() {\n   http.HandleFunc(\"/\", indexHandler)\n   err := http.ListenAndServe(\"localhost:8080\", nil)\n   if err != nil {\n      log.Fatal(\"Error creating server. \", err)\n   }\n}\n```", "```go\npackage main\n\nimport (\n   \"fmt\"\n   \"net/http\"\n   \"log\"\n)\n\nfunc indexHandler(writer http.ResponseWriter, request *http.Request) {\n   fmt.Fprintf(writer, \"You requested: \"+request.URL.Path)\n}\n\nfunc main() {\n   http.HandleFunc(\"/\", indexHandler)\n   err := http.ListenAndServeTLS( \n      \"localhost:8181\", \n      \"cert.pem\", \n      \"privateKey.pem\", \n      nil, \n   )\n   if err != nil {\n      log.Fatal(\"Error creating server. \", err)\n   }\n}\n```", "```go\npackage main\n\nimport (\n   \"fmt\"\n   \"net/http\"\n   \"log\"\n   \"time\"\n)\n\nfunc indexHandler(writer http.ResponseWriter, request *http.Request) {\n   secureSessionCookie := http.Cookie {\n      Name: \"SessionID\",\n      Value: \"<secure32ByteToken>\",\n      Domain: \"yourdomain.com\",\n      Path: \"/\",\n      Expires: time.Now().Add(60 * time.Minute),\n      HttpOnly: true, // Prevents JavaScript from accessing\n      Secure: true, // Requires HTTPS\n   }   \n   // Write cookie header to response\n   http.SetCookie(writer, &secureSessionCookie)   \n   fmt.Fprintln(writer, \"Cookie has been set.\")\n}\n\nfunc main() {\n   http.HandleFunc(\"/\", indexHandler)\n   err := http.ListenAndServe(\"localhost:8080\", nil)\n   if err != nil {\n      log.Fatal(\"Error creating server. \", err)\n   }\n}\n```", "```go\npackage main\n\nimport (\n   \"fmt\"\n   \"html\"\n)\n\nfunc main() {\n   rawString := `<script>alert(\"Test\");</script>`\n   safeString := html.EscapeString(rawString)\n\n   fmt.Println(\"Unescaped: \" + rawString)\n   fmt.Println(\"Escaped: \" + safeString)\n}\n```", "```go\ngo get github.com/urfave/negroni \n```", "```go\npackage main\n\nimport (\n   \"fmt\"\n   \"log\"\n   \"net/http\"\n\n   \"github.com/urfave/negroni\"\n)\n\n// Custom middleware handler logs user agent\nfunc customMiddlewareHandler(rw http.ResponseWriter, \n   r *http.Request, \n   next http.HandlerFunc, \n) {\n   log.Println(\"Incoming request: \" + r.URL.Path)\n   log.Println(\"User agent: \" + r.UserAgent())\n\n   next(rw, r) // Pass on to next middleware handler\n}\n\n// Return response to client\nfunc indexHandler(writer http.ResponseWriter, request *http.Request) {\n   fmt.Fprintf(writer, \"You requested: \" + request.URL.Path)\n}\n\nfunc main() {\n   multiplexer := http.NewServeMux()\n   multiplexer.HandleFunc(\"/\", indexHandler)\n\n   negroniHandler := negroni.New()\n   negroniHandler.Use(negroni.HandlerFunc(customMiddlewareHandler))\n   negroniHandler.UseHandler(multiplexer)\n\n   http.ListenAndServe(\"localhost:3000\", negroniHandler)\n}\n```", "```go\npackage main\n\nimport (\n   \"fmt\"\n   \"net/http\"\n\n   \"github.com/urfave/negroni\"\n)\n\n// Return response to client\nfunc indexHandler(writer http.ResponseWriter, request *http.Request) {\n   fmt.Fprintf(writer, \"You requested: \" + request.URL.Path)\n}\n\nfunc main() {\n   multiplexer := http.NewServeMux()\n   multiplexer.HandleFunc(\"/\", indexHandler)\n\n   negroniHandler := negroni.New()\n   negroniHandler.Use(negroni.NewLogger()) // Negroni's default logger\n   negroniHandler.UseHandler(multiplexer)\n\n   http.ListenAndServe(\"localhost:3000\", negroniHandler)\n}\n```", "```go\npackage main\n\nimport (\n   \"fmt\"\n   \"net/http\"\n\n   \"github.com/urfave/negroni\"\n)\n\n// Custom middleware handler logs user agent\nfunc addSecureHeaders(rw http.ResponseWriter, r *http.Request, \n   next http.HandlerFunc) {\n   rw.Header().Add(\"Content-Security-Policy\", \"default-src 'self'\")\n   rw.Header().Add(\"X-Frame-Options\", \"SAMEORIGIN\")\n   rw.Header().Add(\"X-XSS-Protection\", \"1; mode=block\")\n   rw.Header().Add(\"Strict-Transport-Security\", \n      \"max-age=10000, includeSubdomains; preload\")\n   rw.Header().Add(\"X-Content-Type-Options\", \"nosniff\")\n\n   next(rw, r) // Pass on to next middleware handler\n}\n\n// Return response to client\nfunc indexHandler(writer http.ResponseWriter, request *http.Request) {\n   fmt.Fprintf(writer, \"You requested: \" + request.URL.Path)\n}\n\nfunc main() {\n   multiplexer := http.NewServeMux()\n   multiplexer.HandleFunc(\"/\", indexHandler)\n\n   negroniHandler := negroni.New()\n\n   // Set up as many middleware functions as you need, in order\n   negroniHandler.Use(negroni.HandlerFunc(addSecureHeaders))\n   negroniHandler.Use(negroni.NewLogger())\n   negroniHandler.UseHandler(multiplexer)\n\n   http.ListenAndServe(\"localhost:3000\", negroniHandler)\n}\n```", "```go\nnegroniHandler.Use(negroni.NewStatic(http.Dir(\"/path/to/static/files\")))  \n```", "```go\nhttp://localhost/displayFile?filename=/etc/passwd  \n```", "```go\nfile = os.Open(request.GET['filename'])\nreturn file.ReadAll()\n```", "```go\nos.Open('/path/to/mydir/' + GET['filename']).\n```", "```go\nhttp://localhost/displayFile?filename=../../../etc/passwd   \n```", "```go\npackage main\n\nimport (\n   \"fmt\"\n   \"io/ioutil\"\n   \"log\"\n   \"net/http\"\n)\n\nfunc main() {\n   // Make basic HTTP GET request\n   response, err := http.Get(\"http://www.example.com\")\n   if err != nil {\n      log.Fatal(\"Error fetching URL. \", err)\n   }\n\n   // Read body from response\n   body, err := ioutil.ReadAll(response.Body)\n   response.Body.Close()\n   if err != nil {\n      log.Fatal(\"Error reading response. \", err)\n   }\n\n   fmt.Printf(\"%s\\n\", body)\n}\n```", "```go\npackage main\n\nimport (\n   \"crypto/tls\"\n   \"log\"\n   \"net/http\"\n)\n\nfunc main() {\n   // Load cert\n   cert, err := tls.LoadX509KeyPair(\"cert.pem\", \"privKey.pem\")\n   if err != nil {\n      log.Fatal(err)\n   }\n\n   // Configure TLS client\n   tlsConfig := &tls.Config{\n      Certificates: []tls.Certificate{cert},\n   }\n   tlsConfig.BuildNameToCertificate()\n   transport := &http.Transport{ \n      TLSClientConfig: tlsConfig, \n   }\n   client := &http.Client{Transport: transport}\n\n   // Use client to make request.\n   // Ignoring response, just verifying connection accepted.\n   _, err = client.Get(\"https://example.com\")\n   if err != nil {\n      log.Println(\"Error making request. \", err)\n   }\n}\n```", "```go\nos.Setenv(\"HTTP_PROXY\", \"proxyIp:proxyPort\")  \n```", "```go\npackage main\n\nimport (\n   \"io/ioutil\"\n   \"log\"\n   \"net/http\"\n   \"net/url\"\n   \"time\"\n)\n\nfunc main() {\n   proxyUrlString := \"http://<proxyIp>:<proxyPort>\"\n   proxyUrl, err := url.Parse(proxyUrlString)\n   if err != nil {\n      log.Fatal(\"Error parsing URL. \", err)\n   }\n\n   // Set up a custom HTTP transport for client\n   customTransport := &http.Transport{ \n      Proxy: http.ProxyURL(proxyUrl), \n   }\n   httpClient := &http.Client{ \n      Transport: customTransport, \n      Timeout:   time.Second * 5, \n   }\n\n   // Make request\n   response, err := httpClient.Get(\"http://www.example.com\")\n   if err != nil {\n      log.Fatal(\"Error making GET request. \", err)\n   }\n   defer response.Body.Close()\n\n   // Read and print response from server\n   body, err := ioutil.ReadAll(response.Body)\n   if err != nil {\n      log.Fatal(\"Error reading body of response. \", err)\n   }\n   log.Println(string(body))\n}\n```", "```go\npackage main\n\nimport (\n   \"io/ioutil\"\n   \"log\"\n   \"net/http\"\n   \"net/url\"\n   \"time\"\n)\n\n// The Tor proxy server must already be running and listening\nfunc main() {\n   targetUrl := \"https://check.torproject.org\"\n   torProxy := \"socks5://localhost:9050\" // 9150 w/ Tor Browser\n\n   // Parse Tor proxy URL string to a URL type\n   torProxyUrl, err := url.Parse(torProxy)\n   if err != nil {\n      log.Fatal(\"Error parsing Tor proxy URL:\", torProxy, \". \", err)\n   }\n\n   // Set up a custom HTTP transport for the client   \n   torTransport := &http.Transport{Proxy: http.ProxyURL(torProxyUrl)}\n   client := &http.Client{\n      Transport: torTransport,\n      Timeout: time.Second * 5\n   }\n\n   // Make request\n   response, err := client.Get(targetUrl)\n   if err != nil {\n      log.Fatal(\"Error making GET request. \", err)\n   }\n   defer response.Body.Close()\n\n   // Read response\n   body, err := ioutil.ReadAll(response.Body)\n   if err != nil {\n      log.Fatal(\"Error reading body of response. \", err)\n   }\n   log.Println(string(body))\n}\n```"]