- en: Social Engineering
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 社会工程
- en: Social engineering is when an attacker manipulates or tricks a victim into performing
    an action or providing private information. This is often done by impersonating
    a trusted person, creating a sense of urgency, or creating a false pretext to
    push the victim to act. The action may be as simple as divulging information,
    or more complex like downloading and executing malware.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 社会工程是指攻击者操纵或欺骗受害者执行某项行动或提供私人信息。这通常是通过冒充信任的人、制造紧急感或制造虚假前提来推动受害者采取行动。行动可能只是泄露信息，也可能更复杂，比如下载和执行恶意软件。
- en: We cover honeypots in this chapter, even though they are sometimes intended
    to trick bots and not humans. The goal is to intentionally deceive, which is the
    core of social engineering. We provide basic honeypot examples including TCP and
    HTTP honeypots.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了蜜罐，尽管有时它们旨在欺骗机器人而不是人类。目标是故意欺骗，这是社会工程的核心。我们提供了基本的蜜罐示例，包括TCP和HTTP蜜罐。
- en: There are many other types of social engineering that are not covered in this
    book. This includes physical or in-person situations, such as tailgating and pretending
    to be a maintenance worker, as well as other digital and remote methods such as
    phone calls, SMS messages, and social media messaging.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书未涵盖许多其他类型的社会工程。这包括物理或面对面的情况，例如尾随和假装是维护工作人员，以及其他数字和远程方法，例如电话呼叫、短信和社交媒体消息。
- en: Social engineering can be a grey area legally. For example, even if a company
    gives you the full scope to social engineer their employees, it does not give
    you permission for phishing an employee's personal email credentials. Be conscious
    of both the legal and ethical boundaries.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 社会工程在法律上可能是一个灰色地带。例如，即使公司允许您对其员工进行社会工程，也不代表您有权钓取员工的个人电子邮件凭据。要意识到法律和道德的边界。
- en: 'In this chapter, we will specifically cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将具体涵盖以下主题：
- en: Gathering intel on an individual using Reddit's JSON REST API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Reddit的JSON REST API收集个人情报
- en: Sending phishing emails with SMTP
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SMTP发送钓鱼邮件
- en: Generating QR codes and base64 encoding images
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成QR码和对图像进行base64编码
- en: Honeypots
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蜜罐
- en: Gathering intel via JSON REST API
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过JSON REST API收集情报
- en: REST with JSON are becoming the de facto interface for web APIs. Every API is
    different, so the primary objective of this example is to show how to process
    JSON data from a REST endpoint.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: REST与JSON正成为Web API的事实标准接口。每个API都不同，因此此示例的主要目标是展示如何从REST端点处理JSON数据。
- en: This example will take Reddit username as an argument, and print the recent
    posts and comments by that user to get an idea of what topics they discuss. Reddit
    was chosen for this example because no authentication is required for certain
    endpoints, making it easy to test. Other services that provide REST APIs that
    you could query for intel gathering are Twitter and LinkedIn.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例将以Reddit用户名作为参数，并打印该用户的最新帖子和评论，以了解他们讨论的话题。选择Reddit作为示例的原因是因为对于某些端点不需要进行身份验证，这样可以方便进行测试。其他提供REST
    API的服务，例如Twitter和LinkedIn，也可以用于情报收集。
- en: Remember, the emphasis of this example is to provide an example of parsing JSON
    from a REST endpoint. Since every API is different, this example should serve
    as a reference when writing your own programs to interact with JSON APIs. A data
    structure must be defined to match the response from the JSON endpoint. In this
    example, the data structure created matches the Reddit response.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，此示例的重点是提供从REST端点解析JSON的示例。由于每个API都不同，此示例应该作为参考，以便在编写自己的程序与JSON API交互时使用。必须定义一个数据结构以匹配JSON端点的响应。在此示例中，创建的数据结构与Reddit的响应匹配。
- en: When working with JSON in Go, you first need to define the data structures,
    and then use the `Marshal` and `Unmarshal` functions to encode and decode between
    the raw string and structured data formats. The following example creates a data
    structure that matches the structure of the JSON returned by Reddit. The `Unmarshal`
    function is then used to convert the string into a Go data object. You don't have
    to create a variable for every piece of data in the JSON. You can omit the fields
    you don't need.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go中使用JSON时，首先需要定义数据结构，然后使用`Marshal`和`Unmarshal`函数在原始字符串和结构化数据格式之间进行编码和解码。以下示例创建了一个与Reddit返回的JSON结构匹配的数据结构。然后使用`Unmarshal`函数将字符串转换为Go数据对象。您不必为JSON中的每个数据创建一个变量。您可以省略不需要的字段。
- en: The data in the JSON response is nested into many levels, so we will make use
    of anonymous structs. This prevents us from having to create a separate named
    type for every single level of nesting. This example creates one named struct
    with all of the nested levels stored as embedded anonymous structs.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: JSON响应中的数据是嵌套的，因此我们将利用匿名结构。这样可以避免为每个嵌套级别创建单独的命名类型。此示例创建了一个命名结构，其中所有嵌套级别都存储为嵌入的匿名结构。
- en: The variable names in the Go data structs do not match the variable names provided
    in the JSON response, so the JSON variable name is provided right after the data
    type is defined in the structs. This allows the variables to be properly mapped
    from the JSON data to the Go struct. This is often necessary due to the case-sensitive
    nature of the variable names in a Go data structure.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Go数据结构中的变量名与JSON响应中提供的变量名不匹配，因此在定义结构时，JSON变量名直接提供在数据类型之后。这样可以使变量正确地从JSON数据映射到Go结构。这通常是必要的，因为Go数据结构中的变量名是区分大小写的。
- en: Note that every web service has its own terms of service, which may limit or
    restrict the way you access their site. Some sites have rules against scraping
    and others have rate limits. While it may not be a criminal offense, the service
    may block your account or IP address for violating terms of service. Be sure to
    read the terms of service for every website or API you interact with.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，每个网络服务都有自己的服务条款，这可能会限制或限制您访问其网站的方式。一些网站有规定禁止抓取数据，其他网站有访问限制。虽然这可能不构成刑事犯罪，但服务可能会因违反服务条款而封锁您的账户或IP地址。请务必阅读您与之互动的每个网站或API的服务条款。
- en: 'The code for this example is as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的代码如下：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Sending phishing emails with SMTP
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SMTP发送网络钓鱼电子邮件
- en: Phishing is the process in which an attacker tries to obtain sensitive information
    via a fake email or some other form of communication designed to look like a legitimate
    email from a trusted source.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 网络钓鱼是攻击者试图通过伪装成可信任来源的合法电子邮件或其他形式的通信来获取敏感信息的过程。
- en: Phishing is often done via email, but can also be done over the phone, on social
    media, or via text messages. We are focusing on the email method. Phishing can
    be done on a large scale, where a generic email is sent out to a large number
    of recipients hoping someone will take the bait. The *Nigerian prince* email scam
    was a popular phishing campaign. Other emails offering incentives are popular
    and work relatively well, such as offering an iPhone giveaway or a gift card if
    they participate and follow the link you provided and logging in with their credentials.
    Phishing emails also often mimic legitimate senders using real signatures and
    company logos. A sense of urgency is often created to convince the victim to act
    quickly without following standard procedures.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 网络钓鱼通常通过电子邮件进行，但也可以通过电话、社交媒体或短信进行。我们专注于电子邮件方法。网络钓鱼可以大规模进行，向大量收件人发送通用电子邮件，希望有人会上当。*尼日利亚王子*电子邮件诈骗是一种流行的网络钓鱼活动。其他提供激励的电子邮件也很受欢迎，并且相对有效，例如提供iPhone赠品或礼品卡，如果他们参与并按照您提供的链接登录其凭据。网络钓鱼电子邮件还经常模仿使用真实签名和公司标志的合法发件人。通常会制造紧急感，以说服受害者迅速采取行动，而不遵循标准程序。
- en: You can gather emails using the program from [Chapter 10](1b5ddb7b-00f9-47df-947c-e4d0ebeb94e5.xhtml),
    *Web Scraping*, that extracts emails from web pages. Combine the email extraction
    capability with the web crawler example provided, and you have a powerful tool
    for scraping emails off a domain.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用[第10章](1b5ddb7b-00f9-47df-947c-e4d0ebeb94e5.xhtml)中提取网页中的电子邮件的程序*网络抓取*来收集电子邮件。将电子邮件提取功能与提供的网络爬虫示例结合起来，您就可以强大地从域中抓取电子邮件。
- en: '**Spear phishing** is a term for targeted phishing that focuses on a small
    number of targets, maybe even just one specific target. Spear phishing requires
    more research and targeting, tailoring an email specific to the person, creating
    a believable pretext, perhaps impersonating someone they do know. Spear phishing
    takes more work, but it increases the likelihood of fooling a user, and reduces
    your chances of getting caught by spam filters.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**鱼叉式网络钓鱼**是针对少数目标的有针对性的网络钓鱼的术语，甚至可能只针对一个特定目标。鱼叉式网络钓鱼需要更多的研究和定位，定制特定于个人的电子邮件，创建一个可信的前提，也许是冒充他们认识的人。鱼叉式网络钓鱼需要更多的工作，但它增加了愚弄用户的可能性，并减少了被垃圾邮件过滤器抓住的机会。'
- en: When attempting a spear phishing campaign, you should first gather as much information
    about your target before crafting the email. Earlier in this chapter, we talked
    about using JSON REST APIs to gather data on a target. You can also use the word
    count program and the headings grabber program from [Chapter 10](1b5ddb7b-00f9-47df-947c-e4d0ebeb94e5.xhtml),
    *Web Scraping*, if your target individual or organization has a website. Gathering
    the most common words and headings of a website can be a fast way of learning
    what industry the target belongs to or what products and services they may offer.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试鱼叉式网络钓鱼活动时，您应该在撰写电子邮件之前首先收集有关目标的尽可能多的信息。在本章的早些时候，我们谈到了使用JSON REST API来收集有关目标的数据。如果您的目标个人或组织有网站，您还可以使用[第10章](1b5ddb7b-00f9-47df-947c-e4d0ebeb94e5.xhtml)中的字数统计程序和标题抓取程序，*网络抓取*。收集网站的最常见单词和标题可能是快速了解目标所属行业或可能提供的产品和服务的方法。
- en: The Go standard library comes with an SMTP package for sending emails. Go also
    has a `net/mail` package for parsing emails ([https://golang.org/pkg/net/mail/](https://golang.org/pkg/net/mail/)).
    The `mail` package is relatively small and is not covered in this book, but it
    allows you to parse the full text of an email into a message type that lets you
    extract the body and headers individually. This example is focused on how to send
    an email with the SMTP package.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Go标准库附带了用于发送电子邮件的SMTP包。Go还有一个`net/mail`包，用于解析电子邮件（[https://golang.org/pkg/net/mail/](https://golang.org/pkg/net/mail/)）。`mail`包相对较小，本书未涵盖，但它允许您将电子邮件的完整文本解析为消息类型，从而让您单独提取正文和标题。此示例侧重于如何使用SMTP包发送电子邮件。
- en: The configuration variables are all defined at the top of the source code. Be
    sure to set proper SMTP host, port, sender, and password. Common SMTP ports are
    `25` for unencrypted access, and ports `465` and `587` are often used for encrypted
    access. The settings will all depend on the configuration of your SMTP server.
    This example will not run correctly without first setting the proper server and
    credentials. If you have a Gmail account, you can reuse most of the prepopulated
    values and just replace the sender and password.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 配置变量都在源代码的顶部定义。请确保设置正确的SMTP主机、端口、发件人和密码。常见的SMTP端口是`25`用于未加密访问，端口`465`和`587`通常用于加密访问。所有设置都将取决于您的SMTP服务器的配置。如果没有首先设置正确的服务器和凭据，此示例将无法正确运行。如果您有Gmail帐户，您可以重用大部分预填充的值，只需替换发件人和密码。
- en: If you are sending the mail using Gmail and using the two-factor authentication,
    you will need to create an application specific password at [https://security.google.com/settings/security/apppasswords](https://security.google.com/settings/security/apppasswords).
    If you are not using two-factor authentication, then enable less secure applications
    at [https://myaccount.google.com/lesssecureapps](https://myaccount.google.com/lesssecureapps).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用Gmail发送邮件并使用双因素身份验证，则需要在[https://security.google.com/settings/security/apppasswords](https://security.google.com/settings/security/apppasswords)上创建一个应用程序专用密码。如果您不使用双因素身份验证，则可以在[https://myaccount.google.com/lesssecureapps](https://myaccount.google.com/lesssecureapps)上启用不安全的应用程序。
- en: This program creates and sends two example emails, one text and one HTML. It
    is also possible to send a combined text and HTML email, where the email client
    chooses which version to render. This can be done using the `Content-Type` header
    to `multipart/alternative` and setting a boundary to distinguish where the text
    email ends and the HTML email starts. Sending a combined text and HTML email is
    not covered here, but is worth mentioning. You can learn more about the `multipart`
    content type, *RFC 1341*, at [https://www.w3.org/Protocols/rfc1341/7_2_Multipart.html](https://www.w3.org/Protocols/rfc1341/7_2_Multipart.html).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序创建并发送了两封示例电子邮件，一封是文本，一封是HTML。还可以发送组合的文本和HTML电子邮件，其中电子邮件客户端选择渲染哪个版本。这可以通过将`Content-Type`标头设置为`multipart/alternative`并设置一个边界来区分文本电子邮件的结束和HTML电子邮件的开始来实现。这里没有涵盖发送组合的文本和HTML电子邮件，但值得一提。您可以在[https://www.w3.org/Protocols/rfc1341/7_2_Multipart.html](https://www.w3.org/Protocols/rfc1341/7_2_Multipart.html)上了解有关`multipart`内容类型的更多信息，*RFC
    1341*。
- en: 'Go also provides a `template` package that allows you to create a template
    file with variable placeholders, and then populate the placeholders with data
    from a struct. The templates are useful if you want to separate the template files
    from the source code, allowing you to modify the templates without recompiling
    the application. The following example does not use a template, but you can read
    more about templates at [https://golang.org/pkg/text/template/](https://golang.org/pkg/text/template/):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Go还提供了一个“template”软件包，允许您创建一个带有变量占位符的模板文件，然后使用来自结构体的数据填充占位符。如果您想要将模板文件与源代码分开，以便在不重新编译应用程序的情况下修改模板，模板将非常有用。以下示例不使用模板，但您可以在[https://golang.org/pkg/text/template/](https://golang.org/pkg/text/template/)上阅读更多关于模板的信息：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Generating QR codes
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成QR码
- en: A **Quick Response** (**QR**) code is a two-dimensional barcode. It stores more
    information than a traditional one-dimensional line barcode. They were originally
    developed in the Japanese automotive industry, but have been adopted by other
    industries. QR codes were approved as an international standard by ISO in 2000\.
    The latest specification can be found at [https://www.iso.org/standard/62021.html](https://www.iso.org/standard/62021.html).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**快速响应**（**QR**）码是一种二维条形码。它存储的信息比传统的一维线条形码更多。它们最初是在日本汽车工业中开发的，但已被其他行业采用。QR码于2000年被ISO批准为国际标准。最新规范可在[https://www.iso.org/standard/62021.html](https://www.iso.org/standard/62021.html)上找到。'
- en: QR codes can be found on some billboards, posters, handouts, and other advertising
    material. QR codes are also used frequently in transactions. You might see QR
    codes on train tickets or when sending and receiving cryptocurrency such as Bitcoin.
    Some authentication services such as two-factor authentication utilize QR codes
    for convenience.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: QR码可以在一些广告牌、海报、传单和其他广告材料上找到。QR码也经常用于交易中。您可能会在火车票上看到QR码，或者在发送和接收比特币等加密货币时看到QR码。一些身份验证服务，如双因素身份验证，利用QR码的便利性。
- en: QR codes are good for social engineering because a human can't tell just by
    looking at a QR code if it is malicious or not. Often times the QR code contains
    a URL that is loaded immediately, leaving the user open to risk. If you create
    a believable pretext, you may convince a user to trust the QR code.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: QR码对社会工程学很有用，因为人类无法仅通过查看QR码来判断它是否恶意。往往QR码包含一个立即加载的URL，使用户面临风险。如果您创建一个可信的借口，您可能会说服用户相信QR码。
- en: 'The package used in this example is called `go-qrcode` and is available at
    [https://github.com/skip2/go-qrcode](https://github.com/skip2/go-qrcode). This
    is a third-party library available on GitHub and not supported by Google or the
    Go team. The `go-qrcode` package utilizes the standard library image packages:
    `image`, `image/color`, and `image/png`.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例中使用的软件包称为“go-qrcode”，可在[https://github.com/skip2/go-qrcode](https://github.com/skip2/go-qrcode)上找到。这是一个在GitHub上可用的第三方库，不受Google或Go团队支持。`go-qrcode`软件包利用了标准库图像软件包：`image`，`image/color`和`image/png`。
- en: 'Install the `go-qrcode` package with the following command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令安装`go-qrcode`软件包：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The ellipsis (`...`) in `go get` is a wildcard. It will also install all subpackages.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`go get`中的省略号（`...`）是通配符。它还将安装所有子软件包。'
- en: According to the package author, the maximum capacity of the QR code varies
    based on the content encoded and the error recovery level. The maximum capacity
    is 2,953 bytes, 4,296 alphanumeric characters, 7,089 numeric digits, or a combination.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 根据软件包作者的说法，QR码的最大容量取决于编码的内容和错误恢复级别。最大容量为2953字节，4296个字母数字字符，7089个数字，或者是它们的组合。
- en: There are two main points being demonstrated in this program. First is how to
    generate the QR code in the form of raw PNG bytes, and then the data to be embedded
    within an HTML page is base64 encoded. The full HTML `img` tag is generated, given
    as an output to standard output, and can be copied and pasted directly into an
    HTML page. The second part demonstrates how to simply generate the QR code and
    have it written directly to a file.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序演示了两个主要点。首先是如何生成原始PNG字节形式的QR码，然后将要嵌入HTML页面的数据进行base64编码。完整的HTML“img”标签被生成，并作为标准输出输出，可以直接复制粘贴到HTML页面中。第二部分演示了如何简单地生成QR码并直接写入文件。
- en: 'This example generates a QR code in the format of a PNG image. Let''s provide
    the text you want to encode and the output filename as command-line arguments,
    and the program will output the image with your data encoded as a QR image:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子生成了一个PNG格式的二维码图片。让我们提供你想要编码的文本和输出文件名作为命令行参数，程序将输出将你的数据编码为QR图像的图片：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Base64 encoding data
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Base64编码数据
- en: In the previous example, the QR code was base64 encoded. Since this is a common
    task, it is worth covering how to encode as well as decode. Any time binary data
    needs to be stored or transmitted as a string, base64 encoding is useful.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，QR码是base64编码的。由于这是一个常见的任务，值得介绍如何进行编码和解码。任何时候需要将二进制数据存储或传输为字符串时，base64编码都是有用的。
- en: 'This example demonstrates a very simple use case of encoding and decoding a
    byte slice. The two important functions for base64 encoding and decoding are `EncodeToString()`
    and `DecodeString()`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子演示了编码和解码字节切片的一个非常简单的用例。进行base64编码和解码的两个重要函数是`EncodeToString()`和`DecodeString()`：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Honeypots
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 蜜罐
- en: Honeypots are fake services you set to catch attackers. You intentionally put
    a service up with the intention of luring attackers, tricking them into thinking
    the service is real and contains some kind of sensitive information. Often, the
    honeypot is disguised to look like an old, outdated, and vulnerable server. Logging
    or alerts can be attached to the honeypot to quickly identify a potential attacker.
    Having a honeypot on your internal network may alert you of an attacker before
    any systems are compromised.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 蜜罐是你设置的用来捕捉攻击者的假服务。你故意设置一个服务，目的是引诱攻击者，让他们误以为这个服务是真实的，并包含某种敏感信息。通常，蜜罐被伪装成一个旧的、过时的、容易受攻击的服务器。日志记录或警报可以附加到蜜罐上，以快速识别潜在的攻击者。在你的内部网络上设置一个蜜罐可能会在任何系统被入侵之前警告你有攻击者的存在。
- en: When attackers compromise a machine, they often use the compromised machine
    to continue enumerating, attacking, and pivoting. If a honeypot on your network
    detects strange behavior coming from another machine on your network, such as
    port scans or login attempts, the machine behaving strangely might be compromised.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当攻击者攻击一台机器时，他们经常使用被攻击的机器来继续枚举、攻击和转移。如果你网络上的一个蜜罐检测到来自你网络上另一台机器的奇怪行为，比如端口扫描或登录尝试，那么表现奇怪的机器可能已经被攻击。
- en: There are many different kinds of honeypots. It could be anything from a simple
    TCP listener that logs any connection, a fake HTML page with a login form field,
    or a full blown web application that looks like a real employee portal. If the
    attacker thinks they have found a critical application, they are more likely to
    spend time trying to gain access. If you lay out attractive honeypots, you might
    get the attacker to spend the majority of their time working on a useless honeypot.
    If detailed logging is kept, you can learn about what methods the attacker is
    using, what tools they have, and perhaps even their location.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 蜜罐有许多不同种类。它可以是从简单的TCP监听器，记录任何连接，到一个带有登录表单字段的假HTML页面，或者看起来像一个真实员工门户的完整的网络应用程序。如果攻击者认为他们已经找到了一个关键的应用程序，他们更有可能花时间试图获取访问权限。如果你设置有吸引力的蜜罐，你可能会让攻击者花费大部分时间在一个无用的蜜罐上。如果保留了详细的日志记录，你可以了解攻击者正在使用什么方法，他们有什么工具，甚至可能是他们的位置。
- en: 'There are a few other types of honeypots worth mentioning, but not demonstrated
    in this book:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他类型的蜜罐值得一提，但在这本书中没有进行演示：
- en: '**SMTP honeypot**: This simulates an open email relay that spammers abuse to
    catch spammers trying to use your mailer.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SMTP蜜罐**：这模拟了一个开放的电子邮件中继，垃圾邮件发送者滥用它来捕捉试图使用你的邮件发送程序的垃圾邮件发送者。'
- en: '**Web crawler honeypot**: These are the hidden web pages that are not intended
    to be reached by a person, but links to it are hidden in the public places of
    your website, such as HTML comments, to catch spiders, crawlers, and scrapers.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络爬虫蜜罐**：这些是不打算被人访问的隐藏网页，但是链接到它的链接被隐藏在你网站的公共位置，比如HTML注释中，用来捕捉蜘蛛、爬虫和网页抓取器。'
- en: '**Database honeypot**: This is a fake or real database with verbose logging
    to detect attackers, that may also contain fake data to see what information attackers
    are interested in.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库蜜罐**：这是一个带有详细日志记录以检测攻击者的假或真实数据库，可能还包含假数据以查看攻击者感兴趣的信息。'
- en: '**Honeynet**: This is an entire network full of honeypots, made to look like
    a real network to the extent of automating or faking client traffic to the honeypot
    services to simulate real users.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**蜜罐网络**：这是一个充满蜜罐的整个网络，旨在看起来像一个真实的网络，甚至可以自动化或伪造客户端流量到蜜罐服务，以模拟真实用户。'
- en: 'Attackers may be able to spot obvious honeypot services and avoid them. I recommend
    that you go with one of two extremes: making the honeypot mimic a real service
    as closely as possible, or making the service a total black box that does not
    give away any information to the attacker.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可能能够发现明显的蜜罐服务并避开它们。我建议你选择两个极端之一：尽可能使蜜罐模仿一个真实的服务，或者使服务成为一个不向攻击者透露任何信息的完全黑匣子。
- en: We cover very basic examples in this section, to help you understand the concept
    of honeypots and give you a template to create your own more customized honeypots.
    First, a basic TCP socket honeypot is demonstrated. This will listen on a port
    and log any connections and data it receives. To accompany this example, a TCP
    testing tool is provided. It behaves like a primitive version of Netcat, allowing
    you to send a single message to a server via standard input. This can be used
    to test the TCP honeypot or to extend and use for other applications. The last
    example is an HTTP honeypot. It provides a login form that logs attempts to authenticate,
    but always returns an error.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这一部分涵盖了非常基本的例子，以帮助你理解蜜罐的概念，并为你提供一个创建自己更加定制化蜜罐的模板。首先，演示了一个基本的TCP套接字蜜罐。这将监听一个端口，并记录任何连接和接收到的数据。为了配合这个例子，提供了一个TCP测试工具。它的行为类似于Netcat的原始版本，允许你通过标准输入向服务器发送单个消息。这可以用来测试TCP蜜罐，或者扩展和用于其他应用程序。最后一个例子是一个HTTP蜜罐。它提供了一个登录表单，记录了尝试进行身份验证，但总是返回错误。
- en: Make sure that you understand the risks of honeypots on your network. If you
    leave a honeypot running without keeping the underlying operating system updated,
    you are potentially adding a real risk to your network.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你了解在你的网络上使用蜜罐的风险。如果你让一个蜜罐持续运行而不保持底层操作系统的更新，你可能会给你的网络增加真正的风险。
- en: TCP honeypot
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TCP蜜罐
- en: The simplest honeypot we will start with is a TCP honeypot. This will log any
    TCP connection received and any data received from the client.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一个TCP蜜罐开始。它将记录任何接收到的TCP连接和来自客户端的任何数据。
- en: It will respond with an authentication failure message. Since it logs any data
    received from the client, it will log any username and passwords they attempt
    to authenticate with. You can learn about their attack methods by inspecting what
    authentication methods they are attempting, since it acts like a black box and
    does not give any clues as to what authentication mechanism it might use. You
    can use the logs to see if they are treating it like an SMTP server, which may
    indicate a spammer, or maybe they are trying to authenticate with a database indicating
    they are looking for information. Studying the actions of an attacker can be very
    insightful and even enlighten to with the vulnerabilities you did not already
    know about. An attacker may use a service fingerprinting tool on the honeypot,
    and you might be able to identify patterns in their attack methods and find ways
    to block them. If an attacker tries to log in using real user credentials, that
    user is likely compromised.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 它将以身份验证失败的消息进行响应。由于它记录了来自客户端的任何数据，它将记录他们尝试进行身份验证的任何用户名和密码。你可以通过检查他们尝试的身份验证方法来了解他们的攻击方法，因为它就像一个黑匣子，不会给出任何关于它可能使用的身份验证机制的线索。你可以使用日志来查看他们是否将其视为SMTP服务器，这可能表明他们是垃圾邮件发送者，或者他们可能正在尝试与数据库进行身份验证，表明他们正在寻找信息。研究攻击者的行为可能非常有见地，甚至可以揭示你之前不知道的漏洞。攻击者可能会在蜜罐上使用服务指纹识别工具，你可能能够识别他们攻击方法中的模式，并找到阻止他们的方法。如果攻击者尝试使用真实的用户凭据登录，那么该用户很可能已经受到了威胁。
- en: 'This example will log high-level requests such as HTTP requests as well as
    low level connections such as a TCP port scanner. TCP connect scans will be logged,
    but TCP `SYN` only (stealth) scans will not be detected:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例将记录高级请求，比如HTTP请求，以及低级连接，比如TCP端口扫描。TCP连接扫描将被记录，但TCP `SYN`（隐形）扫描将不会被检测到：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The TCP testing tool
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TCP测试工具
- en: In order to test our TCP honeypot, we need to send it some TCP traffic. We can
    use any existing network tool, including a web browser or a FTP client to hit
    the honeypot. A great tool for this is also Netcat, the TCP/IP Swiss army knife.
    Instead of using Netcat though, let's create our own simple clone. It will simply
    read and write data over TCP. The input and output will be through standard input
    and standard output respectively, allowing you to use the keyboard and Terminal
    or pipe data in or out of files and other applications.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试我们的TCP蜜罐，我们需要向它发送一些TCP流量。我们可以使用任何现有的网络工具，包括Web浏览器或FTP客户端来攻击蜜罐。一个很好的工具也是Netcat，TCP/IP瑞士军刀。不过，我们可以创建自己的简单克隆。它将简单地通过TCP读取和写入数据。输入和输出将分别通过标准输入和标准输出进行，允许你使用键盘和终端，或者通过文件和其他应用程序进行数据的输入或输出。
- en: 'This tool can be used as a general purpose network testing tool, and if you
    have any intrusion detection system or other monitoring you want to test, it may
    be useful. This program will take data from standard input and send it over the
    TCP connection, then read any data the server sends back and print it to standard
    output. When running this example, you must pass the host and port as a single
    string with a colon separator, like this: `localhost:9001`. Here is the code for
    the simple TCP testing tool:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工具可以作为一个通用的网络测试工具使用，如果你有任何入侵检测系统或其他监控需要测试，它可能会有用。这个程序将从标准输入中获取数据并通过TCP连接发送它，然后读取服务器发送回来的任何数据并将其打印到标准输出。在运行这个示例时，你必须将主机和端口作为一个带有冒号分隔符的字符串传递，就像这样：`localhost:9001`。这是一个简单的TCP测试工具的代码：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: HTTP POST form login honeypot
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP POST表单登录蜜罐
- en: When you deploy this on the network, unless you are doing intentional testing,
    any form submission is a red flag. This means that someone is making an attempt
    to log in to your fake server. Since there is no legitimate purpose for it, only
    an attacker would have any reason to attempt to gain access. There will be no
    real authentication or authorization, just a facade to make the attacker think
    they are attempting to log in. The Go HTTP package does support HTTP 2 by default
    in Go 1.6+. Read more about the `net/http` package at [https://golang.org/pkg/net/http/](https://golang.org/pkg/net/http/).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在网络上部署这个工具时，除非你是在进行有意的测试，任何表单提交都是一个红旗。这意味着有人试图登录到你的假服务器。由于没有合法的目的，只有攻击者才会有任何理由试图获取访问权限。这里不会有真正的身份验证或授权，只是一个幌子，让攻击者认为他们正在尝试登录。Go
    HTTP包在Go 1.6+中默认支持HTTP 2。在[https://golang.org/pkg/net/http/](https://golang.org/pkg/net/http/)上阅读更多关于`net/http`包的信息。
- en: 'The following program will act as a web server with a login page, that just
    logs form submissions to standard output. You can run this server and then try
    to log in via the browser, and the log in attempt will be printed to Terminal,
    which runs the server:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序将充当一个带有登录页面的Web服务器，只是将表单提交记录到标准输出。你可以运行这个服务器，然后尝试通过浏览器登录，登录尝试将被打印到终端上：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: HTTP form field honeypots
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP表单字段蜜罐
- en: In the previous example, we talked about creating a fake login form to detect
    someone attempting to log in. What if we want to identify whether it is a bot
    or not? The ability to detect a bot trying to log in can also be useful on a production
    site to block bots. One method of identifying automated bots is to use honeypot
    form fields. Honeypot form fields are input fields on an HTML form, which are
    hidden from the user and expected to be blank when the form is submitted by a
    human. A bot will still find the honeypot fields in the form and try to fill them
    out.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个例子中，我们谈到了创建一个虚假的登录表单来检测有人尝试登录。如果我们想要确定是否是机器人呢？检测机器人尝试登录的能力也可以在生产网站上阻止机器人时派上用场。识别自动化机器人的一种方法是使用蜜罐表单字段。蜜罐表单字段是HTML表单上的输入字段，对用户隐藏，并且在表单被人类提交时预期为空白。机器人仍然会在表单中找到蜜罐字段并尝试填写它们。
- en: The goal is to trick bots into thinking that the form fields are real while
    keeping it hidden from users. Some bots will use regular expressions to look for
    keywords such as `user` or `email` and fill out only those fields; so honeypot
    fields often use names such as `email_address` or `user_name` to appear like a
    normal field. If the server receives data in those fields, it can assume that
    the form was submitted by a bot.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是欺骗机器人，让它们认为表单字段是真实的，同时对用户隐藏。一些机器人会使用正则表达式来寻找关键词，比如`user`或`email`，并只填写这些字段；因此蜜罐字段通常使用名称，比如`email_address`或`user_name`，看起来像一个正常的字段。如果服务器在这些字段接收到数据，它可以假设表单是由机器人提交的。
- en: If we took the login form in the previous example and added a hidden form field
    named `email`, a bot might try to fill it out while a human would not see it.
    Form fields could be hidden using CSS or the `hidden` attribute on the `input`
    element. I recommend that you use CSS located in a separate style sheet to hide
    honeypot form fields, because a bot can easily determine if the form field had
    the `hidden` attribute, but would have a harder time detecting if the input was
    hidden using a style sheet.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在上一个例子中的登录表单中添加一个名为`email`的隐藏表单字段，机器人可能会尝试填写它，而人类则看不到它。表单字段可以使用CSS或`input`元素上的`hidden`属性来隐藏。我建议您使用位于单独样式表中的CSS来隐藏蜜罐表单字段，因为机器人可以轻松确定表单字段是否具有`hidden`属性，但要更难检测到输入是否使用样式表隐藏。
- en: Sandboxing
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 沙盒
- en: One related technique that is not demonstrated in this chapter, but is worth
    mentioning, is sandboxing. Sandboxing serves a different purpose from a honeypot,
    but they both make an effort to create an environment that looks legitimate, but
    is actually tightly controlled and monitored. An example of sandboxing is the
    creation of a virtual machine with no network connectivity, which logs all file
    changes and attempted network connections to see if anything suspicious happens.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一个相关的技术，本章没有演示，但值得一提的是沙盒。沙盒的目的与蜜罐不同，但它们都努力创建一个看起来合法的环境，实际上是严格受控和监视的。沙盒的一个例子是创建一个没有网络连接的虚拟机，记录所有文件更改和尝试的网络连接，以查看是否发生了可疑事件。
- en: Sometimes, a sandbox environment can be detected by looking at the number of
    CPUs and the RAM. If the malicious application detects a system with a small amount
    of resources, say 1 CPU and 1 GB RAM, then it is likely not to be a modern desktop
    machine and may be a sandbox. Malicious software writers have learned to fingerprint
    sandbox environments and program the application to bypass any malicious actions
    if it suspects that it is being run within a sandbox.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，沙盒环境可以通过查看CPU数量和内存来检测。如果恶意应用程序检测到资源较少的系统，比如1个CPU和1GB内存，那么它可能不是现代桌面机器，可能是一个沙盒。恶意软件作者已经学会了对沙盒环境进行指纹识别，并编程应用程序，以绕过任何恶意操作，如果它怀疑自己在沙盒中运行。
- en: Summary
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: After reading this chapter, you should now understand the general concept of
    social engineering and be able to provide a few examples. You should understand
    how to interact with the REST APIs using JSON, generate QR codes and base64 encode
    data, and send emails using SMTP. You should also be able to explain the concept
    of a honeypot and understand how to implement your own honeypot or extend these
    examples for your own needs.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本章后，您现在应该了解社会工程的一般概念，并能够提供一些例子。您应该了解如何使用JSON与REST API交互，生成QR码和base64编码数据，以及使用SMTP发送电子邮件。您还应该能够解释蜜罐的概念，并了解如何实现自己的蜜罐或扩展这些例子以满足自己的需求。
- en: What other types of honeypots can you think of? What are the common services
    that get brute forced or attacked frequently? How can you customize or expand
    upon the social engineering examples? Can you think of any other services that
    you can query for information gathering?
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你还能想到哪些其他类型的蜜罐？哪些常见服务经常受到暴力破解或攻击？你如何定制或扩展社会工程的例子？你能想到其他可以用于信息收集的服务吗？
- en: In the next chapter, we'll cover post exploitation topics, such as deploying
    a bind shell, reverse bind shell, or web shells; cross compiling; finding writable
    files; and modifying file timestamps, permission, and ownership.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将涵盖后期利用的主题，比如部署绑定shell、反向绑定shell或Web shell；交叉编译；查找可写文件；以及修改文件时间戳、权限和所有权。
