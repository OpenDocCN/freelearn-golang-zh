- en: 'Chapter 1: Getting Started with Gin'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章：Gin 入门
- en: This chapter will give you a foundational understanding of what the Gin framework
    is, how it works, and its features. We'll also supply guidelines for setting up
    the Go runtime and development environment. Moreover, we'll discuss the advantages
    of using Gin as a web framework for building distributed applications. We will
    finish this chapter by learning to write our first Gin-based web application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将为您提供一个关于 Gin 框架的基础理解，包括它是如何工作的以及其特性。我们还将提供设置 Go 运行时和开发环境的指南。此外，我们将讨论使用 Gin
    作为构建分布式应用程序的 Web 框架的优势。我们将通过学习编写第一个基于 Gin 的 Web 应用程序来结束本章。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is Gin?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 Gin？
- en: Go runtime and **integrated development environment** (**IDE**)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 运行时和 **集成开发环境**（**IDE**）
- en: Go modules and dependency management
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go模块和依赖管理
- en: Writing a Gin web application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写 Gin Web 应用程序
- en: By the end of this chapter, you will be able to build a basic HTTP server with
    the Gin web framework.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将能够使用 Gin Web 框架构建一个基本的 HTTP 服务器。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow along with this chapter, you will need the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟随本章内容，您需要以下内容：
- en: Some programming experience. The code in this chapter is pretty simple, but
    it helps to know something about Go.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些编程经验。本章中的代码相当简单，但了解一些 Go 知识会有所帮助。
- en: A tool to edit your code with. Any text editor you have will work fine. Most
    text editors have good support for Go. The most popular are **Visual Studio Code
    (VSCode)** (free), GoLand (paid), and Vim (free).
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于编辑代码的工具。您拥有的任何文本编辑器都可以正常工作。大多数文本编辑器都具有良好的 Go 支持。最受欢迎的是 **Visual Studio Code
    (VSCode)**（免费）、GoLand（付费）和 Vim（免费）。
- en: A command terminal. Go works well using any Terminal on Linux and Mac, and on
    PowerShell or CMD in Windows.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行终端。Go 在 Linux 和 Mac 上的任何终端以及 Windows 上的 PowerShell 或 CMD 中都能很好地工作。
- en: The code bundle for this chapter is hosted on GitHub at [https://github.com/PacktPublishing/Building-Distributed-Applications-in-Gin/tree/main/chapter01](https://github.com/PacktPublishing/Building-Distributed-Applications-in-Gin/tree/main/chapter01).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码包托管在 GitHub 上，网址为 [https://github.com/PacktPublishing/Building-Distributed-Applications-in-Gin/tree/main/chapter01](https://github.com/PacktPublishing/Building-Distributed-Applications-in-Gin/tree/main/chapter01)。
- en: What is Gin?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Gin？
- en: Before deep diving into the Gin web framework, we need to understand why Go
    is a top choice when it comes to building scalable and distributed applications.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨 Gin 网络框架之前，我们需要了解为什么 Go 是构建可扩展和分布式应用程序时的首选。
- en: 'Go (also referred to as Golang) is an open source programming language, developed
    by Robert Griesemer, Rob Pike, and Ken Thompson within Google in 2007\. It is
    a compiled, statically typed language designed to enable users to easily write
    reliable, scalable, and highly efficient applications. The key features of Go
    are as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Go（也称为 Golang）是一种开源编程语言，由罗伯特·格里泽默、罗布·派克和肯·汤普森于 2007 年在谷歌开发。它是一种编译型、静态类型语言，旨在使用户能够轻松编写可靠、可扩展和高度高效的应用程序。Go
    的关键特性如下：
- en: '**Simple and consistent**: Go has a rich set of library packages with powerful
    standard libraries for testing, error management, and concurrency.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单且一致**：Go 拥有一套丰富的库包，包括强大的标准库，用于测试、错误管理和并发。'
- en: '`go` keyword before a function.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数前的 `go` 关键字。
- en: '**Efficient**: Go provides efficient execution and compilation. Go is also
    statically linked, which means that the compiler invokes a linker in the last
    step that resolves all library references. This means we would get one binary
    executable after compiling a Go program with no external dependencies. Moreover,
    it offers efficient memory utilization with a built-in garbage collector (Go exhibits
    many similarities with low-level programming languages such as C or C++).'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高效**：Go 提供高效的执行和编译。Go 还进行静态链接，这意味着编译器在最后一步调用链接器，解决所有库引用。这意味着在编译 Go 程序后，我们将得到一个没有外部依赖的二进制可执行文件。此外，它还提供了内置的垃圾回收器，以实现高效的内存利用（Go
    与底层编程语言（如 C 或 C++）有许多相似之处）。'
- en: '**Community and support**: Go is backed by Google and has an ever growing ecosystem
    and numerous contributors to the language on GitHub. Moreover, many online resources
    (tutorials, videos, and books) are available for getting started with Go.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**社区和支持**：Go 由谷歌支持，并拥有不断增长的生态系统和众多在 GitHub 上对语言做出贡献的贡献者。此外，还有许多在线资源（教程、视频和书籍）可供入门学习
    Go。'
- en: 'Go has become hugely popular among enterprises and the open source community.
    Based on the StackOverflow Developer Survey 2020 ([https://insights.stackoverflow.com/survey/2020](https://insights.stackoverflow.com/survey/2020)),
    Go is in the top 5 of the most loved programming languages:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Most loved programming languages according to the StackOverflow
    Survey 2020'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.1 – Most loved programming languages according to the StackOverflow
    Survey 2020
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'Golang is known to be the number one choice when it comes to building large-scale,
    complex tools and cloud-based applications. The following image highlights the
    main open source projects that have been developed using Go:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '**Docker**: A solution that''s used to create, deploy, and run applications
    using containers.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kubernetes**: A container orchestration platform for managing containers
    across a fleet of nodes/machines.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Etcd**: A reliable distributed key-value store used to store data for a distributed
    system or application.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**InfluxDB**: A scalable time-series database designed to handle high write
    and query loads.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CoreOS**: A lightweight operating system designed to deploy container-based
    applications.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Terraform**: An infrastructure-as-code tool for building, changing, and versioning
    cloud infrastructure.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CockroachDB**: A cloud-native SQL database for data-intensive applications.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Consul**: A distributed store with service discovery, service mesh, and health
    check monitoring capabilities:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Open source tools powered by Go'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_02.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.2 – Open source tools powered by Go
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, Go is a solid language for distributed systems and infrastructure
    tools. Docker, Kubernetes, Prometheus, and others are built using Go.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Go is also known for building web applications of all shapes and sizes. This
    is partly due to the fantastic work that has been put into making the standard
    library clean, consistent, and easy to use. Perhaps one of the most important
    packages for any budding Go web developer is the `net/http` package. This package
    allows you to build HTTP servers in Go with its powerful compositional constructs.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'To build a web application, you''ll need to build an HTTP server. The client
    (for example, a browser) makes an HTTP request with some information; the server
    then processes that request and returns a response. The response can be in JSON,
    XML, or HTML format:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – HTTP client-server communication'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_03.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.3 – HTTP client-server communication
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: This pattern of request-response is one of the key focal points in building
    web applications in Go.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'While the `net/http` package allows you to craft a web application easily,
    the routing mechanism is not so powerful, especially for complex applications.
    That''s where a web framework comes into play. The top Golang web frameworks are
    listed in the following table:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17115_table_1.1.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
- en: Gin is possibly the most used and largest running Go web framework. The framework
    has already harvested 48,210 stars and 5,100 forks in GitHub, which shows that
    the framework is very popular. This modular framework can be extended easily with
    minimal fuss. It is great to use because many components can be reused with a
    direct `net/http` package.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Another strong but conservative framework is Gorilla/Mux. It has one of the
    biggest online communities with many resources on the internet to teach you how
    to build end-to-end web applications.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'According to the official documentation [https://gin-gonic.com/docs/](https://gin-gonic.com/docs/),
    Gin is described as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '"Gin is an HTTP web framework written in Go (Golang). It features a Martini-like
    API with much better performance -- up to 40 times faster. If you need smashing
    performance, get yourself some Gin".'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'Gin is a minimalistic web framework suitable for building web applications,
    microservices, and RESTful APIs. It reduces boilerplate code by creating reusable
    and extensible pieces of code: you can write a piece of middleware that can be
    plugged into one or more request handlers. Moreover, it comes with the following
    key features:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '**Well documented**: The documentation for Gin is broad and comprehensive.
    Most tasks that you will need to do relating to the router can be found easily
    in the docs.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Simplicity**: Gin is a pretty minimalistic framework. Only the most essential
    features and libraries are included, with little to no boilerplate to bootstrap
    applications, making Gin a great framework for developing highly available REST
    APIs.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extensible**: The Gin community has created numerous pieces of well-tested
    middleware that make developing for Gin a charm. Features include compression
    with GZip, authentication with an authorization middleware, and logging with external
    solutions such as Sentry.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance**: Gin runs 40x faster than Martini and runs comparatively well
    compared to other Golang frameworks. The following is the results of a benchmark
    I ran against multiple Go libraries:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 1.4 – Golang web framework benchmarks'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_04.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.4 – Golang web framework benchmarks
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: This benchmark was performed on a macOS High Sierra, 2.7 GHz Intel Core i7,
    16 GB DDR3 computer, with Go 1.15.6 as the runtime environment.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: That being said, before you can write your first line of Go code, you'll need
    to set up the environment. Let's start by installing Go.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Go environment
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the time of writing this book, the latest version of Go is Go 1.15.6\. To
    install Go, you can either download or use the official binary distributions,
    or you can install Go from the source code ([https://github.com/golang/go](https://github.com/golang/go)).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: The official binary distributions are available for FreeBSD (release 8 and above),
    Linux (2.6.23 and above), macOS (Snow Leopard and above), and Windows (XP and
    above). Both the 32-bit (386) and 64-bit (amd64) x86 processor architectures are
    supported. For FreeBSD and Linux, the ARM processor architecture is also supported.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Go, download the distribution package from the [https://golang.org/dl/](https://golang.org/dl/)
    web page, as shown here, and choose the file that''s appropriate for your platform:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.5 – Golang available packages'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_05.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.5 – Golang available packages
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Once you have the distribution package, install Go according to your platform
    of choice. We will cover this in the following sections.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Linux/FreeBSD
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install Go on Linux or FreeBSD, you must download `go.-.tar.gz`. The latest
    Go for Linux on a 64-bit architecture is `go1.15.6.linux-amd64.tar.gz`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Download the archive and extract it into the `/usr/local` folder. Then, run
    the following command as root or through sudo:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add `/usr/local/go/bin` to the `PATH` environment variable. You can do this
    by adding the following line to `$HOME/.profile or /etc/profile` (for a system-wide
    installation):'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Verify that you''ve installed Go by opening a command prompt and typing the
    following command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This command should display the installed version of Go:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6 – Installed version of Go'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_06.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.6 – Installed version of Go
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on to see how to set up a Go environment on Windows.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install Go on Windows, you can either use the MSI installer or the ZIP archive.
    Installing from MSI is easier. The latest Go for Windows on a 64-bit architecture
    is `go1.15.6.windows-amd64.msi`. You will then need to execute one of the following
    commands based on your system:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Open the MSI file you downloaded and follow the prompts to install Go. By default,
    the installer will place Go at `C:\Go` and set up `C:\Go\bin` in your `PATH` environment
    variable. You can change the location as needed:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.7 – Golang installation wizard'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_07.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.7 – Golang installation wizard
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: After installing Go, you will need to close and reopen any open command prompts
    so that changes to the environment that have been made by the installer are reflected
    in the command prompt.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Using the ZIP archive is easy as well. Extract the files into a directory (for
    example, `C:\Go`) and add the `bin` subdirectory to your `PATH` variable.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: 'Once installed, click on the `cmd`. After, press the *Enter* key. In the command
    prompt window that appears, type the `go version` command, as shown here:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.8 – Installed version of Go'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_08.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.8 – Installed version of Go
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: You'll see **go version go1.15.6 windows/amd64**, as shown in the preceding
    screenshot. With that, you're all set up!
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: MacOS
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For MacOS, you can download the appropriate PKG file; that is, `go1.15.6.darwin-amd64.pkg`
    (at the time of writing this book). Once downloaded, run through the installation
    wizard. The package will install the distribution to `/usr/local/go` and place
    the `/usr/local/go/bin` directory in your `PATH` environment variable:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.9 – Installing Go on MacOS'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_09.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.9 – Installing Go on MacOS
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll need to restart your terminal, or run this command in your Terminal:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Alternatively, you can use Homebrew to install Go. This can be as simple as
    doing the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The Terminal window will give you feedback regarding the installation process
    of Go. It may take a few minutes before the installation is complete. Verify that
    you've installed Go by opening a command prompt and typing the `go version` command.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'In the future, to update Go, you can run the following commands to update Homebrew
    and then update Go. You don''t have to do this now as you''ve just installed the
    latest version:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now that you''ve installed Go, you need to set it up properly. Go development
    tools are designed to work with code maintained in public repositories, and the
    model is the same, regardless of whether you''re developing an open source program
    or something else. Go code is developed in a workspace. A workspace is made up
    of three directories, namely the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '`bin`: This will contain all you Go executable binaries.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src`: This will store your source files, which are organized in packages,
    with one subdirectory in the `src` directory representing one package.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pkg`: This will store your package objects.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The default directory for the Go workspace is the home directory with a `go`
    subdirectory or `$HOME/go`. Issue the following command to create the directory
    structure for your Go workspace:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `-p` option tells `mkdir` to create all the parents in the directory, even
    if they don''t currently exist. Using `{bin, src, pkg}` creates a set of arguments
    for `mkdir` and tells it to create the `bin`, `src`, and `pkg` directories. This
    will ensure the following directory structure is now in place:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, you need to set the `GOPATH` environment variable, as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can verify your `$PATH` has been updated by using the `echo` command and
    inspecting the output:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You should see your `$GOPATH/bin` in your home directory. If you were logged
    in as `USER`, you will see `/Users/USER/go/bin` in the path:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: With the Go workspace and `GOPATH` created, we can go ahead and set up the development
    environment.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Integrated development environment
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Throughout this book, I will be using an **IDE** to write RESTful API and services.
    Using an IDE can boost your productivity since it provides rich features such
    as autocompletion, highlighting code, a powerful built-in debugger, and custom
    extensions. There are many IDEs available. In this book, I will be using **VSCode**.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: 'To install VSCode, download the appropriate package based on your system from
    [https://code.visualstudio.com/download](https://code.visualstudio.com/download):'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.10 – VS Code – available packages'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_10.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.10 – VS Code – available packages
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: 'Mac users can also use `Brew` to install VSCode with the following command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '`brew install --cask visual-studio-code`'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'Once downloaded, run the setup wizard and follow the instructions. Once the
    installation is complete, launch VSCode. You will be presented with the following
    start screen:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.11 – VSCode user interface'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_11.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.11 – VSCode user interface
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: 'VSCode supports all the popular programming languages and Git integration by
    default. You can also install extensions to extend the functionality of VSCode.
    The VS Code marketplace contains a huge list of free community plugins and extensions.
    To enable support for Golang, you need to install an extension called **Go** by
    navigating to the **Extensions** tab from the left sidebar:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.12 – Golang extension for VSCode'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_12.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.12 – Golang extension for VSCode
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Install** button and then restart VSCode for the changes to take
    effect.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Installing Go tools
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we will install the following Go tools, which are a set of packages that
    help improve your development workflow and overall experience while writing code:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17115_table_1.2.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
- en: Important Note
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: A complete list of the available Go tools can be found at [https://pkg.go.dev/golang.org/x/tools](https://pkg.go.dev/golang.org/x/tools).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the tools, click on `goinstall update/tools`:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.13 – Available Go tools on VSCode'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_13.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.13 – Available Go tools on VSCode
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: 'Check all the dependencies and click on **OK**. It will take some time to download
    all the dependencies:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.14 – Go tools installation'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_14.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.14 – Go tools installation
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: With Go installed and configured on your computer, you are now ready to install
    the Gin framework.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Gin
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Gin is a third-party package. To install Gin in Go projects, we need to use
    the `go get` command. The command takes the URL of the package to be installed
    as an argument. Issue the following command to install the `gin` package from
    GitHub:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: If you're running Go 1.16 and above, you need to disable Go modules via the
    `GO111MODULE=off` option.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: 'When checking out the `gin` package, the `go get` command creates a Gin directory
    in the `$GOPATH/src` path. The directory will contain the source code of the Gin
    framework:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.15 – Gin package source code'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_15.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.15 – Gin package source code
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by creating the `hello-world` project directory under `$GOHOME/src/hello-world`
    or any directory that seems appropriate:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Open the folder with VSCode and create a `main.go` file inside the project
    folder that contains the following content:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The first line, `package main`, indicates that this is the main module in this
    project. The `import` section is for importing the `gin` package. This package
    provides us with the `router` variable, which is declared right below `import`
    and the API context to be used while we send the response in our `main` function.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we create an HTTP `GET` method on the root (`/`) resource and define
    a function to be called when HTTP requests hit the root endpoint. The function
    sends a JSON response with a status code of 200 (OK) with a body of `"message":
    "test successful"`.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we must deploy the router on port `8080` using the `router.Run()`
    method. The following diagram summarizes how an HTTP request is processed in Gin:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.16 – Parsing incoming HTTP requests with Gin'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_16.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.16 – Parsing incoming HTTP requests with Gin
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the app, execute the following command from the terminal session:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'All the files and commands executed henceforth will be within this directory.
    If you followed the setup process, you should see the following output in your
    Terminal:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.17 – Gin server logs'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_17.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.17 – Gin server logs
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: 'Point your favorite browser to `http://localhost:8080`. You should see a `"hello
    world"` message:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.18 – Hello world example'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_18.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.18 – Hello world example
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: Awesome – you have successfully started an HTTP server in Go with the Gin framework.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: 'Back to the terminal, Gin will trace the HTTP requests:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.19 – Tracing incoming HTTP requests'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_19.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.19 – Tracing incoming HTTP requests
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use a `cURL` command to issue an HTTP request:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Alternatively, you can use an advanced REST client such as Postman. You can
    download the right version based on your platform from the following URL: [https://www.getpostman.com/apps](https://www.getpostman.com/apps).'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: 'Once it has downloaded, run the wizard and open Postman. Set the fields as
    follows:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: 'HTTP method: `GET`'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'URL: `http://localhost:8080`'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Headers: Set `Content-Type` to `application/json`'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The request should be configured like so:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.20 – GET request with the Postman client'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_20.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.20 – GET request with the Postman client
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s worth mentioning that by default, the HTTP server is listening on port
    `8080`. However, if the port is being used by another application, you can define
    a different port by adding an argument to the `Run` method:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This command will run the server on port `5000`, as shown in the following
    screenshot:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.21 – Running the Gin server on port 5000'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_21.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.21 – Running the Gin server on port 5000
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: Note that the `port` parameter needs to be passed as a string, prepended by
    colon punctuation.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: You should now be familiar with the basics of building and running a simple
    web application. In the next few sections, we will cover how to enhance those
    functionalities with third-party packages. But before we do that, let's cover
    how to manage Go dependencies.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: Dependency management in Golang
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For now, the code is stored locally. However, it''s recommended to store the
    source code in a remote repository for versioning. That''s where a solution such
    as GitHub comes into play. Sign up for a free account at [https://github.com](https://github.com).
    Then, create a new GitHub repository called `hello-world`:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.22 – New GitHub repository'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_22.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.22 – New GitHub repository
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, initialize the repository with the following commands:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Commit the `main.go` file to the remote repository by executing the following
    commands:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Your repository should now look like this:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.23 – Versioning main.go in Git'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_23.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.23 – Versioning main.go in Git
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: We can stop here. However, if you're working within a team, you will need some
    way to ensure all team members are using the same Go version and packages. That's
    where Go modules come into the picture. Go modules were introduced in 2018 to
    make dependency management a lot easier.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: Starting with Go 1.16, Go modules are the default way to manage external dependencies.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: 'In the project folder, run the following command to create a new module:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This command will create a `go.mod` file that contains the following content.
    The file defines projects requirements and locks dependencies to their correct
    versions (similar to `package.json` and `package-lock.json` in Node.js):'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To add the Gin package, we can issue the `go get` command. Now, our `go.mod`
    file will look like this:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'A new file called `go.sum` will be generated upon adding the Gin framework
    (the output was cropped for brevity). You may assume it''s a lock file. But in
    fact, `go.mod` already provides enough information for 100% reproducible builds.
    The other file is just for validation purposes: it contains the expected cryptographic
    checksums of the content of specific module versions. You can think of it as an
    additional security layer to ensure that the modules your project depends on do
    not change unexpectedly, whether for malicious or accidental reasons:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You can list your dependencies with the following command:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The output is as follows:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Important Note
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: To remove unused dependencies, you can use the `go mod tidy` command.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, add the `go.mod` and `go.sum` files to the remote repository using
    the following commands:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The updated repository will look as follows:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.24 – Managing dependencies with Go modules'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_24.jpg)'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.24 – Managing dependencies with Go modules
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s worth mentioning that the downloaded modules are stored locally in your
    `$GOPATH/pkg/mod` directory. However, sometimes, it''s useful to store the modules
    or third-party packages that your project depends on and place them in a folder,
    so that they can be checked into version control. Fortunately, Go modules support
    vendoring:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This command will create a `vendor` directory in your project folder that contains
    all your third-party dependencies. You can now commit this folder to your remote
    Git repository to ensure the stability of your future builds, without having to
    rely on external services:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.25 – Vendoring dependencies'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_25.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.25 – Vendoring dependencies
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes, you may wonder why a specific package is a dependency. You can answer
    this by analyzing or visualizing the project dependencies. To do so, we can use
    the `go mod graph` command to display the list of modules in the `go.mod` file:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This command will generate a new file called `unver.txt` containing the following
    content (the output has been cropped for brevity):'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Then, create a `graph.dot` file containing the following content:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This content will generate a graph structure using the DOT language. We can
    use DOT to describe graphs (directed or not). That being said, we will inject
    the output of `unvert.txt` into the `graph.dot` file with the following commands:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This results in a module dependency graph:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.26 – Module dependency graph'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_26.jpg)'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.26 – Module dependency graph
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now render the results with Graphviz. This tool can be installed with
    the following commands, based on your operation system:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '**Linux**: You can download the official package based on your package manager.
    For Ubuntu/Debian, use the following command:'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '**MacOS**: You can use the Homebrew utility for MacOS:'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '**Windows**: You can use the Chocolatey ([https://chocolatey.org/install](https://chocolatey.org/install))
    package manager for Windows:'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Once Graphviz has been installed, execute the following command to convert
    the `graph.dot` file into `.svg` format:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'A `graph.svg` file will be generated. Open the file with the following command:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This results in the following directed graph:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.27 – Visually analyzing module dependencies'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_27_v2.jpg)'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.27 – Visually analyzing module dependencies
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: This graph perfectly shows the dependencies among the modules/packages of the
    *hello-world* project.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: Another way of generating a dependencies graph is by using the `modgv` utility
    ([https://github.com/lucasepe/modgv](https://github.com/lucasepe/modgv)). This
    tool converts `go mod graph` output into GraphViz's DOT language with a single
    command.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: Now that the source code has been versioned in GitHub, we can go further and
    explore how to write a custom function handler for Gin routes.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: Writing a custom HTTP handler
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can create a handler function that takes `*gin.Context` as an argument
    and serves a JSON response with a status code of 200\. Then, you can register
    the handler using the `router.Get()` function:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Important note
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: Separating the handler function from the router will be useful in the advanced
    chapters of this book, when unit testing is tackled.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: 'The biggest strength of the Gin framework is its ability to extract segments
    from the request URL. Consider the following example:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This URL has a dynamic segment:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: 'Username: Mark, John, Jessica, and so on'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can implement dynamic segments with the following `:variable` pattern:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The last thing we must do is get the data from the variable. The `gin` package
    comes with the `c.Params.ByName()` function, which takes the name of the parameter
    and returns the value:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Rerun the app with the `go run` command. Hit the `http://localhost:8080/mohamed`
    link on your browser; the user will be returned:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.28 – Example of the path parameter'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_28.jpg)'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.28 – Example of the path parameter
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we know that every time we hit the `GET /user` route, we get a response
    of "hello user." If we hit any other route, it should respond with a 404 error
    message:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.29 – Error handling in Gin'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_29.jpg)'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.29 – Error handling in Gin
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: 'Gin can also handle HTTP requests and responses in XML format. To do so, define
    a user struct with `firstName` and `lastName` as attributes. Then, use the `c.XML()`
    method to render XML:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Now, rerun the application. If you navigate to [http://localhost:8080](http://localhost:8080),
    the server will return an XML response, as follows:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.30 – XML response'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_30.jpg)'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.30 – XML response
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! At this point, you have a Go programming workspace set up on
    your local machine, as well as Gin configured. Now, you can begin a coding project!
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we gave you an introduction to the Go programming language.
    We learned how to set up the runtime and development environments. We also understood
    the GOPATH environment variable, which is a workspace definition in Go, and we
    now know that all packages and projects reside on that path.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: Later, we explored the different Go web frameworks and learned why Gin is the
    most popular for building distributed web applications. Finally, we learned how
    to write our first hello world project with Gin from scratch.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will get our hands dirty and start building a distributed
    RESTful API with the Gin framework.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why is Golang popular?
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which are the best Golang frameworks for web development?
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What's a Go module?
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What's the default port of an HTTP server written in the Gin framework?
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What methods are used to render JSON and XML responses?
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Hands-On Serverless Applications with Go*, Mohamed Labouardy, by Packt Publishing'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Hands-On RESTful Web Services with Go - Second Edition*, Naren Yellavula,
    by Packt Publishing'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
