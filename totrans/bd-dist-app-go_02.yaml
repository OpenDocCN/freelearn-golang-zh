- en: 'Chapter 1: Getting Started with Gin'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章：Gin 入门
- en: This chapter will give you a foundational understanding of what the Gin framework
    is, how it works, and its features. We'll also supply guidelines for setting up
    the Go runtime and development environment. Moreover, we'll discuss the advantages
    of using Gin as a web framework for building distributed applications. We will
    finish this chapter by learning to write our first Gin-based web application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将为您提供一个关于 Gin 框架的基础理解，包括它是如何工作的以及其特性。我们还将提供设置 Go 运行时和开发环境的指南。此外，我们将讨论使用 Gin
    作为构建分布式应用程序的 Web 框架的优势。我们将通过学习编写第一个基于 Gin 的 Web 应用程序来结束本章。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is Gin?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 Gin？
- en: Go runtime and **integrated development environment** (**IDE**)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 运行时和 **集成开发环境**（**IDE**）
- en: Go modules and dependency management
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go模块和依赖管理
- en: Writing a Gin web application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写 Gin Web 应用程序
- en: By the end of this chapter, you will be able to build a basic HTTP server with
    the Gin web framework.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将能够使用 Gin Web 框架构建一个基本的 HTTP 服务器。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow along with this chapter, you will need the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟随本章内容，您需要以下内容：
- en: Some programming experience. The code in this chapter is pretty simple, but
    it helps to know something about Go.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些编程经验。本章中的代码相当简单，但了解一些 Go 知识会有所帮助。
- en: A tool to edit your code with. Any text editor you have will work fine. Most
    text editors have good support for Go. The most popular are **Visual Studio Code
    (VSCode)** (free), GoLand (paid), and Vim (free).
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于编辑代码的工具。您拥有的任何文本编辑器都可以正常工作。大多数文本编辑器都具有良好的 Go 支持。最受欢迎的是 **Visual Studio Code
    (VSCode)**（免费）、GoLand（付费）和 Vim（免费）。
- en: A command terminal. Go works well using any Terminal on Linux and Mac, and on
    PowerShell or CMD in Windows.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行终端。Go 在 Linux 和 Mac 上的任何终端以及 Windows 上的 PowerShell 或 CMD 中都能很好地工作。
- en: The code bundle for this chapter is hosted on GitHub at [https://github.com/PacktPublishing/Building-Distributed-Applications-in-Gin/tree/main/chapter01](https://github.com/PacktPublishing/Building-Distributed-Applications-in-Gin/tree/main/chapter01).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码包托管在 GitHub 上，网址为 [https://github.com/PacktPublishing/Building-Distributed-Applications-in-Gin/tree/main/chapter01](https://github.com/PacktPublishing/Building-Distributed-Applications-in-Gin/tree/main/chapter01)。
- en: What is Gin?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Gin？
- en: Before deep diving into the Gin web framework, we need to understand why Go
    is a top choice when it comes to building scalable and distributed applications.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨 Gin 网络框架之前，我们需要了解为什么 Go 是构建可扩展和分布式应用程序时的首选。
- en: 'Go (also referred to as Golang) is an open source programming language, developed
    by Robert Griesemer, Rob Pike, and Ken Thompson within Google in 2007\. It is
    a compiled, statically typed language designed to enable users to easily write
    reliable, scalable, and highly efficient applications. The key features of Go
    are as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Go（也称为 Golang）是一种开源编程语言，由罗伯特·格里泽默、罗布·派克和肯·汤普森于 2007 年在谷歌开发。它是一种编译型、静态类型语言，旨在使用户能够轻松编写可靠、可扩展和高度高效的应用程序。Go
    的关键特性如下：
- en: '**Simple and consistent**: Go has a rich set of library packages with powerful
    standard libraries for testing, error management, and concurrency.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单且一致**：Go 拥有一套丰富的库包，包括强大的标准库，用于测试、错误管理和并发。'
- en: '`go` keyword before a function.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数前的 `go` 关键字。
- en: '**Efficient**: Go provides efficient execution and compilation. Go is also
    statically linked, which means that the compiler invokes a linker in the last
    step that resolves all library references. This means we would get one binary
    executable after compiling a Go program with no external dependencies. Moreover,
    it offers efficient memory utilization with a built-in garbage collector (Go exhibits
    many similarities with low-level programming languages such as C or C++).'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高效**：Go 提供高效的执行和编译。Go 还进行静态链接，这意味着编译器在最后一步调用链接器，解决所有库引用。这意味着在编译 Go 程序后，我们将得到一个没有外部依赖的二进制可执行文件。此外，它还提供了内置的垃圾回收器，以实现高效的内存利用（Go
    与底层编程语言（如 C 或 C++）有许多相似之处）。'
- en: '**Community and support**: Go is backed by Google and has an ever growing ecosystem
    and numerous contributors to the language on GitHub. Moreover, many online resources
    (tutorials, videos, and books) are available for getting started with Go.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**社区和支持**：Go 由谷歌支持，并拥有不断增长的生态系统和众多在 GitHub 上对语言做出贡献的贡献者。此外，还有许多在线资源（教程、视频和书籍）可供入门学习
    Go。'
- en: 'Go has become hugely popular among enterprises and the open source community.
    Based on the StackOverflow Developer Survey 2020 ([https://insights.stackoverflow.com/survey/2020](https://insights.stackoverflow.com/survey/2020)),
    Go is in the top 5 of the most loved programming languages:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Go 在企业和开源社区中变得非常受欢迎。根据 2020 年 StackOverflow 开发者调查（[https://insights.stackoverflow.com/survey/2020](https://insights.stackoverflow.com/survey/2020)），Go
    是最受欢迎的编程语言前五名之一：
- en: '![Figure 1.1 – Most loved programming languages according to the StackOverflow
    Survey 2020'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.1 – 根据 2020 年 StackOverflow 调查最受欢迎的编程语言'
- en: '](img/B17115_01_01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B17115_01_01.jpg)'
- en: Figure 1.1 – Most loved programming languages according to the StackOverflow
    Survey 2020
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.1 – 根据 2020 年 StackOverflow 调查最受欢迎的编程语言'
- en: 'Golang is known to be the number one choice when it comes to building large-scale,
    complex tools and cloud-based applications. The following image highlights the
    main open source projects that have been developed using Go:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Golang 被认为是构建大规模、复杂工具和基于云的应用程序的首选。以下图片突出了使用 Go 开发的开源项目：
- en: '**Docker**: A solution that''s used to create, deploy, and run applications
    using containers.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker**：一种用于使用容器创建、部署和运行应用程序的解决方案。'
- en: '**Kubernetes**: A container orchestration platform for managing containers
    across a fleet of nodes/machines.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes**：一个容器编排平台，用于管理跨节点/机器的容器。'
- en: '**Etcd**: A reliable distributed key-value store used to store data for a distributed
    system or application.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Etcd**：一个可靠的分布式键值存储，用于存储分布式系统或应用程序的数据。'
- en: '**InfluxDB**: A scalable time-series database designed to handle high write
    and query loads.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**InfluxDB**：一个可扩展的时间序列数据库，旨在处理高写入和查询负载。'
- en: '**CoreOS**: A lightweight operating system designed to deploy container-based
    applications.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CoreOS**：一种轻量级操作系统，旨在部署基于容器的应用程序。'
- en: '**Terraform**: An infrastructure-as-code tool for building, changing, and versioning
    cloud infrastructure.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Terraform**：一种基础设施即代码工具，用于构建、更改和版本控制云基础设施。'
- en: '**CockroachDB**: A cloud-native SQL database for data-intensive applications.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CockroachDB**：一个用于数据密集型应用程序的云原生 SQL 数据库。'
- en: '**Consul**: A distributed store with service discovery, service mesh, and health
    check monitoring capabilities:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Consul**：一个具有服务发现、服务网格和健康检查监控能力的分布式存储：'
- en: '![Figure 1.2 – Open source tools powered by Go'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.2 – 由 Go 驱动的开源工具'
- en: '](img/B17115_01_02.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B17115_01_02.jpg)'
- en: Figure 1.2 – Open source tools powered by Go
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – 由 Go 驱动的开源工具
- en: As we can see, Go is a solid language for distributed systems and infrastructure
    tools. Docker, Kubernetes, Prometheus, and others are built using Go.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，Go 是一种适合分布式系统和基础设施工具的稳健语言。Docker、Kubernetes、Prometheus 等都是使用 Go 构建的。
- en: Go is also known for building web applications of all shapes and sizes. This
    is partly due to the fantastic work that has been put into making the standard
    library clean, consistent, and easy to use. Perhaps one of the most important
    packages for any budding Go web developer is the `net/http` package. This package
    allows you to build HTTP servers in Go with its powerful compositional constructs.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Go 还因其构建各种规模和形状的 Web 应用程序而闻名。这部分得益于对标准库的出色工作，使其清洁、一致且易于使用。对于任何有抱负的 Go Web 开发者来说，最重要的包之一可能是
    `net/http` 包。此包允许您使用其强大的组合结构在 Go 中构建 HTTP 服务器。
- en: 'To build a web application, you''ll need to build an HTTP server. The client
    (for example, a browser) makes an HTTP request with some information; the server
    then processes that request and returns a response. The response can be in JSON,
    XML, or HTML format:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建 Web 应用程序，您需要构建一个 HTTP 服务器。客户端（例如，浏览器）会携带一些信息发出 HTTP 请求；然后服务器处理该请求并返回响应。响应可以是
    JSON、XML 或 HTML 格式：
- en: '![Figure 1.3 – HTTP client-server communication'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.3 – HTTP 客户端-服务器通信'
- en: '](img/B17115_01_03.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B17115_01_03.jpg)'
- en: Figure 1.3 – HTTP client-server communication
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – HTTP 客户端-服务器通信
- en: This pattern of request-response is one of the key focal points in building
    web applications in Go.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这种请求-响应模式是构建 Go 中 Web 应用程序的关键焦点之一。
- en: 'While the `net/http` package allows you to craft a web application easily,
    the routing mechanism is not so powerful, especially for complex applications.
    That''s where a web framework comes into play. The top Golang web frameworks are
    listed in the following table:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `net/http` 包允许您轻松构建 Web 应用程序，但其路由机制并不那么强大，特别是对于复杂的应用程序。这就是 Web 框架发挥作用的地方。以下表格列出了顶级
    Golang Web 框架：
- en: '![](img/B17115_table_1.1.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B17115_table_1.1.jpg)'
- en: Gin is possibly the most used and largest running Go web framework. The framework
    has already harvested 48,210 stars and 5,100 forks in GitHub, which shows that
    the framework is very popular. This modular framework can be extended easily with
    minimal fuss. It is great to use because many components can be reused with a
    direct `net/http` package.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Gin 可能是使用最广泛且运行最大的 Go 网络框架。该框架已经在 GitHub 上获得了 48,210 个星标和 5,100 个分支，这表明该框架非常受欢迎。这个模块化框架可以轻松扩展，几乎无需麻烦。它非常适合使用，因为许多组件可以直接通过
    `net/http` 包重用。
- en: Important note
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Another strong but conservative framework is Gorilla/Mux. It has one of the
    biggest online communities with many resources on the internet to teach you how
    to build end-to-end web applications.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个强大但保守的框架是 Gorilla/Mux。它拥有最大的在线社区之一，互联网上有许多资源教你如何构建端到端网络应用程序。
- en: 'According to the official documentation [https://gin-gonic.com/docs/](https://gin-gonic.com/docs/),
    Gin is described as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 根据官方文档 [https://gin-gonic.com/docs/](https://gin-gonic.com/docs/)，Gin 被描述如下：
- en: '"Gin is an HTTP web framework written in Go (Golang). It features a Martini-like
    API with much better performance -- up to 40 times faster. If you need smashing
    performance, get yourself some Gin".'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '"Gin 是一个用 Go (Golang) 编写的 HTTP 网络框架。它具有类似 Martini 的 API，但性能更好——快 40 倍。如果你需要惊人的性能，就试试
    Gin 吧。"'
- en: 'Gin is a minimalistic web framework suitable for building web applications,
    microservices, and RESTful APIs. It reduces boilerplate code by creating reusable
    and extensible pieces of code: you can write a piece of middleware that can be
    plugged into one or more request handlers. Moreover, it comes with the following
    key features:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Gin 是一个简约的 Web 框架，适合构建 Web 应用程序、微服务和 RESTful API。它通过创建可重用和可扩展的代码片段来减少样板代码：你可以编写一个中间件，可以插入一个或多个请求处理器。此外，它还具备以下关键特性：
- en: '**Well documented**: The documentation for Gin is broad and comprehensive.
    Most tasks that you will need to do relating to the router can be found easily
    in the docs.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档完善**：Gin 的文档广泛且全面。大多数与路由相关的工作都可以在文档中轻松找到。'
- en: '**Simplicity**: Gin is a pretty minimalistic framework. Only the most essential
    features and libraries are included, with little to no boilerplate to bootstrap
    applications, making Gin a great framework for developing highly available REST
    APIs.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简洁性**：Gin 是一个非常简约的框架。只包含最基本的功能和库，几乎没有样板代码来启动应用程序，这使得 Gin 成为开发高度可用的 REST API
    的优秀框架。'
- en: '**Extensible**: The Gin community has created numerous pieces of well-tested
    middleware that make developing for Gin a charm. Features include compression
    with GZip, authentication with an authorization middleware, and logging with external
    solutions such as Sentry.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：Gin 社区已经创建了众多经过良好测试的中间件，使得为 Gin 开发变得非常愉快。功能包括使用 GZip 进行压缩、使用授权中间件进行身份验证以及使用外部解决方案（如
    Sentry）进行日志记录。'
- en: '**Performance**: Gin runs 40x faster than Martini and runs comparatively well
    compared to other Golang frameworks. The following is the results of a benchmark
    I ran against multiple Go libraries:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能**：Gin 比 Martini 快 40 倍，与其他 Golang 框架相比表现良好。以下是我对多个 Go 库进行的基准测试结果：'
- en: '![Figure 1.4 – Golang web framework benchmarks'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.4 – Golang 网络框架基准测试]'
- en: '](img/B17115_01_04.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 B17115_01_04.jpg](img/B17115_01_04.jpg)'
- en: Figure 1.4 – Golang web framework benchmarks
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – Golang 网络框架基准测试
- en: Important note
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: This benchmark was performed on a macOS High Sierra, 2.7 GHz Intel Core i7,
    16 GB DDR3 computer, with Go 1.15.6 as the runtime environment.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个基准测试是在 macOS High Sierra、2.7 GHz Intel Core i7、16 GB DDR3 计算机上进行的，运行环境为 Go
    1.15.6。
- en: That being said, before you can write your first line of Go code, you'll need
    to set up the environment. Let's start by installing Go.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，在你能够编写第一行 Go 代码之前，你需要设置环境。让我们从安装 Go 开始。
- en: Setting up the Go environment
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Go 环境
- en: At the time of writing this book, the latest version of Go is Go 1.15.6\. To
    install Go, you can either download or use the official binary distributions,
    or you can install Go from the source code ([https://github.com/golang/go](https://github.com/golang/go)).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，Go 的最新版本是 Go 1.15.6。要安装 Go，你可以下载或使用官方的二进制发行版，或者你可以从源代码安装 Go ([https://github.com/golang/go](https://github.com/golang/go))。
- en: Important note
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The official binary distributions are available for FreeBSD (release 8 and above),
    Linux (2.6.23 and above), macOS (Snow Leopard and above), and Windows (XP and
    above). Both the 32-bit (386) and 64-bit (amd64) x86 processor architectures are
    supported. For FreeBSD and Linux, the ARM processor architecture is also supported.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 官方的二进制发行版适用于FreeBSD（版本8及以上）、Linux（2.6.23及以上）、macOS（Snow Leopard及以上）和Windows（XP及以上）。支持32位（386）和64位（amd64）x86处理器架构。对于FreeBSD和Linux，也支持ARM处理器架构。
- en: 'To install Go, download the distribution package from the [https://golang.org/dl/](https://golang.org/dl/)
    web page, as shown here, and choose the file that''s appropriate for your platform:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Go，请从[https://golang.org/dl/](https://golang.org/dl/)网页下载分发包，如下所示，并选择适合您平台的文件：
- en: '![Figure 1.5 – Golang available packages'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.5 – Golang可用包'
- en: '](img/B17115_01_05.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17115_01_05.jpg)'
- en: Figure 1.5 – Golang available packages
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.5 – Golang可用包
- en: Once you have the distribution package, install Go according to your platform
    of choice. We will cover this in the following sections.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您有了分发包，请根据您选择的平台安装Go。我们将在以下章节中介绍这一点。
- en: Linux/FreeBSD
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux/FreeBSD
- en: 'To install Go on Linux or FreeBSD, you must download `go.-.tar.gz`. The latest
    Go for Linux on a 64-bit architecture is `go1.15.6.linux-amd64.tar.gz`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Linux或FreeBSD上安装Go，您必须下载`go.-.tar.gz`。64位架构上的最新Linux Go是`go1.15.6.linux-amd64.tar.gz`：
- en: '[PRE0]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Download the archive and extract it into the `/usr/local` folder. Then, run
    the following command as root or through sudo:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 下载存档并将其提取到`/usr/local`文件夹中。然后，以root用户或通过sudo运行以下命令：
- en: '[PRE1]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add `/usr/local/go/bin` to the `PATH` environment variable. You can do this
    by adding the following line to `$HOME/.profile or /etc/profile` (for a system-wide
    installation):'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 将`/usr/local/go/bin`添加到`PATH`环境变量中。您可以通过将以下行添加到`$HOME/.profile`或`/etc/profile`（对于系统级安装）来实现：
- en: '[PRE2]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Verify that you''ve installed Go by opening a command prompt and typing the
    following command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通过打开命令提示符并输入以下命令来验证您已安装Go：
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This command should display the installed version of Go:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令应显示已安装的Go版本：
- en: '![Figure 1.6 – Installed version of Go'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.6 – 已安装的Go版本'
- en: '](img/B17115_01_06.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17115_01_06.jpg)'
- en: Figure 1.6 – Installed version of Go
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6 – 已安装的Go版本
- en: Let's move on to see how to set up a Go environment on Windows.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续看看如何在Windows上设置Go环境。
- en: Windows
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows
- en: 'To install Go on Windows, you can either use the MSI installer or the ZIP archive.
    Installing from MSI is easier. The latest Go for Windows on a 64-bit architecture
    is `go1.15.6.windows-amd64.msi`. You will then need to execute one of the following
    commands based on your system:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Windows上安装Go，您可以使用MSI安装程序或ZIP存档。使用MSI安装更简单。64位架构上的最新Windows Go是`go1.15.6.windows-amd64.msi`。然后您需要根据您的系统执行以下命令之一：
- en: '[PRE4]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Open the MSI file you downloaded and follow the prompts to install Go. By default,
    the installer will place Go at `C:\Go` and set up `C:\Go\bin` in your `PATH` environment
    variable. You can change the location as needed:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您下载的MSI文件，按照提示安装Go。默认情况下，安装程序会将Go放置在`C:\Go`，并将`C:\Go\bin`设置到您的`PATH`环境变量中。您可以根据需要更改位置：
- en: '![Figure 1.7 – Golang installation wizard'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.7 – Golang安装向导'
- en: '](img/B17115_01_07.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17115_01_07.jpg)'
- en: Figure 1.7 – Golang installation wizard
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7 – Golang安装向导
- en: After installing Go, you will need to close and reopen any open command prompts
    so that changes to the environment that have been made by the installer are reflected
    in the command prompt.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Go后，您需要关闭并重新打开任何打开的命令提示符，以便安装程序所做的环境更改反映在命令提示符中。
- en: Important note
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Using the ZIP archive is easy as well. Extract the files into a directory (for
    example, `C:\Go`) and add the `bin` subdirectory to your `PATH` variable.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ZIP存档同样简单。将文件提取到目录中（例如，`C:\Go`）并将`bin`子目录添加到您的`PATH`变量中。
- en: 'Once installed, click on the `cmd`. After, press the *Enter* key. In the command
    prompt window that appears, type the `go version` command, as shown here:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，点击`cmd`。然后按*Enter*键。在出现的命令提示符窗口中，输入`go version`命令，如下所示：
- en: '![Figure 1.8 – Installed version of Go'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.8 – 已安装的Go版本'
- en: '](img/B17115_01_08.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17115_01_08.jpg)'
- en: Figure 1.8 – Installed version of Go
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.8 – 已安装的Go版本
- en: You'll see **go version go1.15.6 windows/amd64**, as shown in the preceding
    screenshot. With that, you're all set up!
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到**go version go1.15.6 windows/amd64**，如前述截图所示。这样，您就设置好了！
- en: MacOS
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MacOS
- en: 'For MacOS, you can download the appropriate PKG file; that is, `go1.15.6.darwin-amd64.pkg`
    (at the time of writing this book). Once downloaded, run through the installation
    wizard. The package will install the distribution to `/usr/local/go` and place
    the `/usr/local/go/bin` directory in your `PATH` environment variable:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 MacOS，您可以下载适当的 PKG 文件；即 `go1.15.6.darwin-amd64.pkg`（在撰写本书时）。下载完成后，运行安装向导。该包将安装分发到
    `/usr/local/go`，并将 `/usr/local/go/bin` 目录放置在您的 `PATH` 环境变量中：
- en: '![Figure 1.9 – Installing Go on MacOS'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.9 – 在 MacOS 上安装 Go'
- en: '](img/B17115_01_09.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17115_01_09.jpg)'
- en: Figure 1.9 – Installing Go on MacOS
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.9 – 在 MacOS 上安装 Go
- en: 'You''ll need to restart your terminal, or run this command in your Terminal:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要重新启动您的终端，或者在您的终端中运行此命令：
- en: '[PRE5]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Alternatively, you can use Homebrew to install Go. This can be as simple as
    doing the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用 Homebrew 安装 Go。这可以像以下这样做：
- en: '[PRE6]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The Terminal window will give you feedback regarding the installation process
    of Go. It may take a few minutes before the installation is complete. Verify that
    you've installed Go by opening a command prompt and typing the `go version` command.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 终端窗口将提供有关 Go 安装过程的反馈。安装完成可能需要几分钟。通过在命令提示符中打开并输入 `go version` 命令来验证您已安装 Go。
- en: Important note
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'In the future, to update Go, you can run the following commands to update Homebrew
    and then update Go. You don''t have to do this now as you''ve just installed the
    latest version:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来，要更新 Go，您可以运行以下命令来更新 Homebrew，然后更新 Go。您现在不需要这样做，因为您刚刚安装了最新版本：
- en: '[PRE7]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now that you''ve installed Go, you need to set it up properly. Go development
    tools are designed to work with code maintained in public repositories, and the
    model is the same, regardless of whether you''re developing an open source program
    or something else. Go code is developed in a workspace. A workspace is made up
    of three directories, namely the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已安装 Go，您需要正确设置它。Go 开发工具旨在与维护在公共仓库中的代码一起工作，并且模型是相同的，无论您是在开发开源程序还是其他内容。Go 代码在开发空间中开发。开发空间由三个目录组成，具体如下：
- en: '`bin`: This will contain all you Go executable binaries.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bin`：这将包含您所有的 Go 可执行二进制文件。'
- en: '`src`: This will store your source files, which are organized in packages,
    with one subdirectory in the `src` directory representing one package.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`：这将存储您的源文件，这些文件按包组织，`src` 目录中的一个子目录代表一个包。'
- en: '`pkg`: This will store your package objects.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pkg`：这将存储您的包对象。'
- en: 'The default directory for the Go workspace is the home directory with a `go`
    subdirectory or `$HOME/go`. Issue the following command to create the directory
    structure for your Go workspace:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Go 开发空间的默认目录是带有 `go` 子目录的家目录或 `$HOME/go`。使用以下命令创建您的 Go 开发空间的目录结构：
- en: '[PRE8]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `-p` option tells `mkdir` to create all the parents in the directory, even
    if they don''t currently exist. Using `{bin, src, pkg}` creates a set of arguments
    for `mkdir` and tells it to create the `bin`, `src`, and `pkg` directories. This
    will ensure the following directory structure is now in place:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`-p` 选项告诉 `mkdir` 在目录中创建所有父目录，即使它们目前不存在。使用 `{bin, src, pkg}` 为 `mkdir` 创建一组参数，并告诉它创建
    `bin`、`src` 和 `pkg` 目录。这将确保以下目录结构现在已就绪：'
- en: '[PRE9]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, you need to set the `GOPATH` environment variable, as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要设置 `GOPATH` 环境变量，如下所示：
- en: '[PRE10]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can verify your `$PATH` has been updated by using the `echo` command and
    inspecting the output:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用 `echo` 命令并检查输出，来验证您的 `$PATH` 是否已更新：
- en: '[PRE11]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You should see your `$GOPATH/bin` in your home directory. If you were logged
    in as `USER`, you will see `/Users/USER/go/bin` in the path:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在您的家目录中看到 `$GOPATH/bin`。如果您以 `USER` 身份登录，您将在路径中看到 `/Users/USER/go/bin`：
- en: '[PRE12]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: With the Go workspace and `GOPATH` created, we can go ahead and set up the development
    environment.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 Go 开发空间和 `GOPATH` 后，我们可以继续设置开发环境。
- en: Integrated development environment
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成开发环境
- en: Throughout this book, I will be using an **IDE** to write RESTful API and services.
    Using an IDE can boost your productivity since it provides rich features such
    as autocompletion, highlighting code, a powerful built-in debugger, and custom
    extensions. There are many IDEs available. In this book, I will be using **VSCode**.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我将使用 **IDE** 来编写 RESTful API 和服务。使用 IDE 可以提高您的生产力，因为它提供了丰富的功能，如自动完成、代码高亮、强大的内置调试器和自定义扩展。有许多
    IDE 可用。在本书中，我将使用 **VSCode**。
- en: 'To install VSCode, download the appropriate package based on your system from
    [https://code.visualstudio.com/download](https://code.visualstudio.com/download):'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 VSCode，从 [https://code.visualstudio.com/download](https://code.visualstudio.com/download)
    下载适合您系统的相应包：
- en: '![Figure 1.10 – VS Code – available packages'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.10 – VS Code – 可用包'
- en: '](img/B17115_01_10.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17115_01_10.jpg)'
- en: Figure 1.10 – VS Code – available packages
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.10 – VS Code – 可用包
- en: Note
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Mac users can also use `Brew` to install VSCode with the following command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Mac 用户也可以使用 `Brew` 通过以下命令安装 VSCode：
- en: '`brew install --cask visual-studio-code`'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`brew install --cask visual-studio-code`'
- en: 'Once downloaded, run the setup wizard and follow the instructions. Once the
    installation is complete, launch VSCode. You will be presented with the following
    start screen:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成后，运行设置向导并按照说明操作。安装完成后，启动 VSCode。您将看到以下启动屏幕：
- en: '![Figure 1.11 – VSCode user interface'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.11 – VSCode 用户界面'
- en: '](img/B17115_01_11.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17115_01_11.jpg)'
- en: Figure 1.11 – VSCode user interface
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.11 – VSCode 用户界面
- en: 'VSCode supports all the popular programming languages and Git integration by
    default. You can also install extensions to extend the functionality of VSCode.
    The VS Code marketplace contains a huge list of free community plugins and extensions.
    To enable support for Golang, you need to install an extension called **Go** by
    navigating to the **Extensions** tab from the left sidebar:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: VSCode 默认支持所有流行的编程语言和 Git 集成。您还可以安装扩展来扩展 VSCode 的功能。VS Code 市场包含大量免费社区插件和扩展。要启用对
    Golang 的支持，您需要通过从左侧侧边栏的 **扩展** 选项卡导航来安装名为 **Go** 的扩展：
- en: '![Figure 1.12 – Golang extension for VSCode'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.12 – VSCode 的 Golang 扩展'
- en: '](img/B17115_01_12.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17115_01_12.jpg)'
- en: Figure 1.12 – Golang extension for VSCode
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.12 – VSCode 的 Golang 扩展
- en: Click on the **Install** button and then restart VSCode for the changes to take
    effect.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **安装** 按钮，然后重新启动 VSCode 以使更改生效。
- en: Installing Go tools
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Go 工具
- en: 'Next, we will install the following Go tools, which are a set of packages that
    help improve your development workflow and overall experience while writing code:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将安装以下 Go 工具，这是一组帮助改进您编码过程中的开发工作流程和整体体验的包：
- en: '![](img/B17115_table_1.2.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17115_table_1.2.jpg)'
- en: Important Note
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: A complete list of the available Go tools can be found at [https://pkg.go.dev/golang.org/x/tools](https://pkg.go.dev/golang.org/x/tools).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的 Go 工具的完整列表可以在 [https://pkg.go.dev/golang.org/x/tools](https://pkg.go.dev/golang.org/x/tools)
    找到。
- en: 'To install the tools, click on `goinstall update/tools`:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装这些工具，请点击 `goinstall update/tools`：
- en: '![Figure 1.13 – Available Go tools on VSCode'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.13 – VSCode 上可用的 Go 工具'
- en: '](img/B17115_01_13.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17115_01_13.jpg)'
- en: Figure 1.13 – Available Go tools on VSCode
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.13 – VSCode 上可用的 Go 工具
- en: 'Check all the dependencies and click on **OK**. It will take some time to download
    all the dependencies:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 检查所有依赖项并点击 **确定**。下载所有依赖项可能需要一些时间：
- en: '![Figure 1.14 – Go tools installation'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.14 – Go 工具安装'
- en: '](img/B17115_01_14.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17115_01_14.jpg)'
- en: Figure 1.14 – Go tools installation
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.14 – Go 工具安装
- en: With Go installed and configured on your computer, you are now ready to install
    the Gin framework.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的计算机上安装并配置好 Go 后，现在您可以安装 Gin 框架了。
- en: Installing and configuring Gin
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置 Gin
- en: 'Gin is a third-party package. To install Gin in Go projects, we need to use
    the `go get` command. The command takes the URL of the package to be installed
    as an argument. Issue the following command to install the `gin` package from
    GitHub:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Gin 是一个第三方包。要在 Go 项目中安装 Gin，我们需要使用 `go get` 命令。该命令将安装包的 URL 作为参数。运行以下命令从 GitHub
    安装 `gin` 包：
- en: '[PRE13]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you're running Go 1.16 and above, you need to disable Go modules via the
    `GO111MODULE=off` option.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在运行 Go 1.16 及以上版本，您需要通过 `GO111MODULE=off` 选项禁用 Go 模块。
- en: 'When checking out the `gin` package, the `go get` command creates a Gin directory
    in the `$GOPATH/src` path. The directory will contain the source code of the Gin
    framework:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当检出 `gin` 包时，`go get` 命令会在 `$GOPATH/src` 路径下创建一个 Gin 目录。该目录将包含 Gin 框架的源代码：
- en: '![Figure 1.15 – Gin package source code'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.15 – Gin 包源代码'
- en: '](img/B17115_01_15.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17115_01_15.jpg)'
- en: Figure 1.15 – Gin package source code
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.15 – Gin 包源代码
- en: 'Begin by creating the `hello-world` project directory under `$GOHOME/src/hello-world`
    or any directory that seems appropriate:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `$GOHOME/src/hello-world` 或任何合适的目录下创建 `hello-world` 项目目录：
- en: '[PRE14]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Open the folder with VSCode and create a `main.go` file inside the project
    folder that contains the following content:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 VSCode 打开文件夹，并在项目文件夹内创建一个名为 `main.go` 的文件，其内容如下：
- en: '[PRE15]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The first line, `package main`, indicates that this is the main module in this
    project. The `import` section is for importing the `gin` package. This package
    provides us with the `router` variable, which is declared right below `import`
    and the API context to be used while we send the response in our `main` function.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行，`package main`，表示这是本项目的主模块。`import` 部分用于导入 `gin` 包。此包为我们提供了 `router` 变量，该变量声明在
    `import` 下方，以及我们在 `main` 函数中发送响应时使用的 API 上下文。
- en: 'Next, we create an HTTP `GET` method on the root (`/`) resource and define
    a function to be called when HTTP requests hit the root endpoint. The function
    sends a JSON response with a status code of 200 (OK) with a body of `"message":
    "test successful"`.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，我们在根 (`/`) 资源上创建一个 HTTP `GET` 方法，并定义一个当 HTTP 请求击中根端点时要调用的函数。该函数发送一个状态码为
    200（OK）的 JSON 响应，正文为 `"message": "test successful"`。'
- en: 'Finally, we must deploy the router on port `8080` using the `router.Run()`
    method. The following diagram summarizes how an HTTP request is processed in Gin:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们必须使用 `router.Run()` 方法在端口 `8080` 上部署路由器。以下图表总结了 Gin 中 HTTP 请求的处理方式：
- en: '![Figure 1.16 – Parsing incoming HTTP requests with Gin'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.16 – 使用 Gin 解析传入的 HTTP 请求'
- en: '](img/B17115_01_16.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17115_01_16.jpg)'
- en: Figure 1.16 – Parsing incoming HTTP requests with Gin
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.16 – 使用 Gin 解析传入的 HTTP 请求
- en: 'To run the app, execute the following command from the terminal session:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行应用程序，请在终端会话中执行以下命令：
- en: '[PRE16]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'All the files and commands executed henceforth will be within this directory.
    If you followed the setup process, you should see the following output in your
    Terminal:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 从此以后，所有文件和执行的命令都将在此目录下。如果您遵循了设置过程，您应该在您的终端中看到以下输出：
- en: '![Figure 1.17 – Gin server logs'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.17 – Gin 服务器日志'
- en: '](img/B17115_01_17.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17115_01_17.jpg)'
- en: Figure 1.17 – Gin server logs
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.17 – Gin 服务器日志
- en: 'Point your favorite browser to `http://localhost:8080`. You should see a `"hello
    world"` message:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 将您喜欢的浏览器指向 `http://localhost:8080`。您应该看到一个 `"hello world"` 消息：
- en: '![Figure 1.18 – Hello world example'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.18 – Hello world 示例'
- en: '](img/B17115_01_18.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17115_01_18.jpg)'
- en: Figure 1.18 – Hello world example
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.18 – Hello world 示例
- en: Awesome – you have successfully started an HTTP server in Go with the Gin framework.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了 – 你已经成功使用 Gin 框架在 Go 中启动了一个 HTTP 服务器。
- en: 'Back to the terminal, Gin will trace the HTTP requests:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 返回终端，Gin 将跟踪 HTTP 请求：
- en: '![Figure 1.19 – Tracing incoming HTTP requests'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.19 – 跟踪传入的 HTTP 请求'
- en: '](img/B17115_01_19.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17115_01_19.jpg)'
- en: Figure 1.19 – Tracing incoming HTTP requests
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.19 – 跟踪传入的 HTTP 请求
- en: 'You can use a `cURL` command to issue an HTTP request:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `cURL` 命令发送 HTTP 请求：
- en: '[PRE17]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Alternatively, you can use an advanced REST client such as Postman. You can
    download the right version based on your platform from the following URL: [https://www.getpostman.com/apps](https://www.getpostman.com/apps).'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用高级 REST 客户端，如 Postman。您可以从以下网址根据您的平台下载正确的版本：[https://www.getpostman.com/apps](https://www.getpostman.com/apps)。
- en: 'Once it has downloaded, run the wizard and open Postman. Set the fields as
    follows:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦下载完成，运行向导并打开 Postman。设置字段如下：
- en: 'HTTP method: `GET`'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'HTTP 方法: `GET`'
- en: 'URL: `http://localhost:8080`'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'URL: `http://localhost:8080`'
- en: 'Headers: Set `Content-Type` to `application/json`'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 头部：将 `Content-Type` 设置为 `application/json`
- en: 'The request should be configured like so:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 请求应配置如下：
- en: '![Figure 1.20 – GET request with the Postman client'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.20 – 使用 Postman 客户端发起 GET 请求'
- en: '](img/B17115_01_20.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17115_01_20.jpg)'
- en: Figure 1.20 – GET request with the Postman client
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.20 – 使用 Postman 客户端发起 GET 请求
- en: 'It''s worth mentioning that by default, the HTTP server is listening on port
    `8080`. However, if the port is being used by another application, you can define
    a different port by adding an argument to the `Run` method:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，默认情况下，HTTP 服务器正在监听端口 `8080`。但是，如果端口已被其他应用程序使用，您可以通过向 `Run` 方法添加参数来定义不同的端口：
- en: '[PRE18]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This command will run the server on port `5000`, as shown in the following
    screenshot:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将在端口 `5000` 上运行服务器，如下面的截图所示：
- en: '![Figure 1.21 – Running the Gin server on port 5000'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.21 – 在端口 5000 上运行 Gin 服务器'
- en: '](img/B17115_01_21.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17115_01_21.jpg)'
- en: Figure 1.21 – Running the Gin server on port 5000
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.21 – 在端口 5000 上运行 Gin 服务器
- en: Note that the `port` parameter needs to be passed as a string, prepended by
    colon punctuation.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`port` 参数需要以冒号标点符号开头作为字符串传递。
- en: You should now be familiar with the basics of building and running a simple
    web application. In the next few sections, we will cover how to enhance those
    functionalities with third-party packages. But before we do that, let's cover
    how to manage Go dependencies.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该熟悉构建和运行简单 Web 应用程序的基础知识。在接下来的几节中，我们将介绍如何使用第三方包增强这些功能。但在我们这样做之前，让我们先了解如何管理
    Go 依赖项。
- en: Dependency management in Golang
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Golang 的依赖项管理
- en: 'For now, the code is stored locally. However, it''s recommended to store the
    source code in a remote repository for versioning. That''s where a solution such
    as GitHub comes into play. Sign up for a free account at [https://github.com](https://github.com).
    Then, create a new GitHub repository called `hello-world`:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，代码是本地存储的。然而，建议将源代码存储在远程仓库中以进行版本控制。这就是 GitHub 等解决方案发挥作用的地方。在 [https://github.com](https://github.com)
    上注册一个免费账户。然后，创建一个名为 `hello-world` 的新 GitHub 仓库：
- en: '![Figure 1.22 – New GitHub repository'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.22 – 新的 GitHub 仓库'
- en: '](img/B17115_01_22.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17115_01_22.jpg)'
- en: Figure 1.22 – New GitHub repository
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.22 – 新的 GitHub 仓库
- en: 'Next, initialize the repository with the following commands:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用以下命令初始化仓库：
- en: '[PRE19]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Commit the `main.go` file to the remote repository by executing the following
    commands:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下命令将 `main.go` 文件提交到远程仓库：
- en: '[PRE20]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Your repository should now look like this:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 你的仓库现在应该看起来像这样：
- en: '![Figure 1.23 – Versioning main.go in Git'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.23 – 在 Git 中版本控制 main.go'
- en: '](img/B17115_01_23.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17115_01_23.jpg)'
- en: Figure 1.23 – Versioning main.go in Git
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.23 – 在 Git 中版本控制 main.go
- en: We can stop here. However, if you're working within a team, you will need some
    way to ensure all team members are using the same Go version and packages. That's
    where Go modules come into the picture. Go modules were introduced in 2018 to
    make dependency management a lot easier.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在这里停止。但是，如果你在一个团队中工作，你需要确保所有团队成员都使用相同的 Go 版本和包。这就是 Go 模块出现的地方。Go 模块于 2018
    年引入，以使依赖项管理变得更加容易。
- en: Note
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Starting with Go 1.16, Go modules are the default way to manage external dependencies.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Go 1.16 开始，Go 模块是管理外部依赖项的默认方式。
- en: 'In the project folder, run the following command to create a new module:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目文件夹中，运行以下命令以创建一个新的模块：
- en: '[PRE21]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This command will create a `go.mod` file that contains the following content.
    The file defines projects requirements and locks dependencies to their correct
    versions (similar to `package.json` and `package-lock.json` in Node.js):'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将创建一个包含以下内容的 `go.mod` 文件。该文件定义了项目需求并锁定依赖项到它们的正确版本（类似于 Node.js 中的 `package.json`
    和 `package-lock.json`）：
- en: '[PRE22]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To add the Gin package, we can issue the `go get` command. Now, our `go.mod`
    file will look like this:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加 Gin 包，我们可以发出 `go get` 命令。现在，我们的 `go.mod` 文件将如下所示：
- en: '[PRE23]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'A new file called `go.sum` will be generated upon adding the Gin framework
    (the output was cropped for brevity). You may assume it''s a lock file. But in
    fact, `go.mod` already provides enough information for 100% reproducible builds.
    The other file is just for validation purposes: it contains the expected cryptographic
    checksums of the content of specific module versions. You can think of it as an
    additional security layer to ensure that the modules your project depends on do
    not change unexpectedly, whether for malicious or accidental reasons:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加 Gin 框架（输出因简洁而被裁剪）后，将生成一个名为 `go.sum` 的新文件。你可以假设它是一个锁文件。但实际上，`go.mod` 已经提供了足够的信息来实现
    100% 可重复构建。另一个文件只是为了验证目的：它包含特定模块版本内容的预期加密校验和。你可以将其视为一个额外的安全层，以确保你的项目所依赖的模块不会意外更改，无论是出于恶意还是意外的原因：
- en: '[PRE24]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You can list your dependencies with the following command:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令列出你的依赖项：
- en: '[PRE25]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The output is as follows:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE26]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Important Note
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: To remove unused dependencies, you can use the `go mod tidy` command.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除未使用的依赖项，可以使用 `go mod tidy` 命令。
- en: 'Finally, add the `go.mod` and `go.sum` files to the remote repository using
    the following commands:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用以下命令将 `go.mod` 和 `go.sum` 文件添加到远程仓库：
- en: '[PRE27]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The updated repository will look as follows:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后的仓库将如下所示：
- en: '![Figure 1.24 – Managing dependencies with Go modules'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.24 – 使用 Go 模块管理依赖项'
- en: '](img/B17115_01_24.jpg)'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17115_01_24.jpg)'
- en: Figure 1.24 – Managing dependencies with Go modules
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.24 – 使用 Go 模块管理依赖项
- en: 'It''s worth mentioning that the downloaded modules are stored locally in your
    `$GOPATH/pkg/mod` directory. However, sometimes, it''s useful to store the modules
    or third-party packages that your project depends on and place them in a folder,
    so that they can be checked into version control. Fortunately, Go modules support
    vendoring:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，下载的模块存储在您的 `$GOPATH/pkg/mod` 目录中。然而，有时将项目所依赖的模块或第三方包存储在本地并放置在一个文件夹中是有用的，这样它们就可以被纳入版本控制。幸运的是，Go
    模块支持 vendoring：
- en: '[PRE28]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This command will create a `vendor` directory in your project folder that contains
    all your third-party dependencies. You can now commit this folder to your remote
    Git repository to ensure the stability of your future builds, without having to
    rely on external services:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将在您的项目文件夹中创建一个包含所有第三方依赖的 `vendor` 目录。现在，您可以提交此文件夹到您的远程 Git 仓库，以确保未来构建的稳定性，而无需依赖外部服务：
- en: '![Figure 1.25 – Vendoring dependencies'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.25 – 供应商依赖](img/B17115_01_25.jpg)'
- en: '](img/B17115_01_25.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B17115_01_25.jpg](img/B17115_01_25.jpg)'
- en: Figure 1.25 – Vendoring dependencies
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.25 – 供应商依赖
- en: 'Sometimes, you may wonder why a specific package is a dependency. You can answer
    this by analyzing or visualizing the project dependencies. To do so, we can use
    the `go mod graph` command to display the list of modules in the `go.mod` file:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您可能会想知道为什么某个特定包是依赖项。您可以通过分析或可视化项目依赖来回答这个问题。为此，我们可以使用 `go mod graph` 命令来显示
    `go.mod` 文件中的模块列表：
- en: '[PRE29]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This command will generate a new file called `unver.txt` containing the following
    content (the output has been cropped for brevity):'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将生成一个名为 `unver.txt` 的新文件，其中包含以下内容（输出已被裁剪以节省空间）：
- en: '[PRE30]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Then, create a `graph.dot` file containing the following content:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建一个包含以下内容的 `graph.dot` 文件：
- en: '[PRE31]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This content will generate a graph structure using the DOT language. We can
    use DOT to describe graphs (directed or not). That being said, we will inject
    the output of `unvert.txt` into the `graph.dot` file with the following commands:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 此内容将使用 DOT 语言生成一个图结构。我们可以使用 DOT 来描述图（有向或无向）。换句话说，我们将使用以下命令将 `unvert.txt` 的输出注入到
    `graph.dot` 文件中：
- en: '[PRE32]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This results in a module dependency graph:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个模块依赖图：
- en: '![Figure 1.26 – Module dependency graph'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.26 – 模块依赖图](img/B17115_01_26.jpg)'
- en: '](img/B17115_01_26.jpg)'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B17115_01_26.jpg](img/B17115_01_26.jpg)'
- en: Figure 1.26 – Module dependency graph
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.26 – 模块依赖图
- en: 'We can now render the results with Graphviz. This tool can be installed with
    the following commands, based on your operation system:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用 Graphviz 渲染结果。此工具可以根据您的操作系统使用以下命令安装：
- en: '**Linux**: You can download the official package based on your package manager.
    For Ubuntu/Debian, use the following command:'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linux**：您可以根据您的包管理器下载官方包。对于 Ubuntu/Debian，使用以下命令：'
- en: '[PRE33]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '**MacOS**: You can use the Homebrew utility for MacOS:'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MacOS**：您可以使用 MacOS 的 Homebrew 工具：'
- en: '[PRE34]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '**Windows**: You can use the Chocolatey ([https://chocolatey.org/install](https://chocolatey.org/install))
    package manager for Windows:'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows**：您可以使用 Windows 的 Chocolatey ([https://chocolatey.org/install](https://chocolatey.org/install))
    软件包管理器：'
- en: '[PRE35]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Once Graphviz has been installed, execute the following command to convert
    the `graph.dot` file into `.svg` format:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了 Graphviz，执行以下命令将 `graph.dot` 文件转换为 `.svg` 格式：
- en: '[PRE36]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'A `graph.svg` file will be generated. Open the file with the following command:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 将生成一个 `graph.svg` 文件。使用以下命令打开文件：
- en: '[PRE37]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This results in the following directed graph:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下有向图：
- en: '![Figure 1.27 – Visually analyzing module dependencies'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.27 – 可视化分析模块依赖](img/B17115_01_27_v2.jpg)'
- en: '](img/B17115_01_27_v2.jpg)'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B17115_01_27_v2.jpg](img/B17115_01_27_v2.jpg)'
- en: Figure 1.27 – Visually analyzing module dependencies
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.27 – 可视化分析模块依赖
- en: This graph perfectly shows the dependencies among the modules/packages of the
    *hello-world* project.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 此图完美地展示了 *hello-world* 项目模块/包之间的依赖关系。
- en: Note
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Another way of generating a dependencies graph is by using the `modgv` utility
    ([https://github.com/lucasepe/modgv](https://github.com/lucasepe/modgv)). This
    tool converts `go mod graph` output into GraphViz's DOT language with a single
    command.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 生成依赖关系图的另一种方法是使用 `modgv` 工具 ([https://github.com/lucasepe/modgv](https://github.com/lucasepe/modgv))。此工具使用单个命令将
    `go mod graph` 输出转换为 GraphViz 的 DOT 语言。
- en: Now that the source code has been versioned in GitHub, we can go further and
    explore how to write a custom function handler for Gin routes.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 现在源代码已在 GitHub 中进行版本控制，我们可以进一步探索如何为 Gin 路由编写自定义函数处理器。
- en: Writing a custom HTTP handler
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写自定义 HTTP 处理器
- en: 'You can create a handler function that takes `*gin.Context` as an argument
    and serves a JSON response with a status code of 200\. Then, you can register
    the handler using the `router.Get()` function:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以创建一个接受 `*gin.Context` 作为参数的处理函数，并返回状态码为 200 的 JSON 响应。然后，你可以使用 `router.Get()`
    函数注册处理函数：
- en: '[PRE38]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Important note
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Separating the handler function from the router will be useful in the advanced
    chapters of this book, when unit testing is tackled.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的高级章节中，当处理单元测试时，将处理函数与路由器分离将非常有用。
- en: 'The biggest strength of the Gin framework is its ability to extract segments
    from the request URL. Consider the following example:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: Gin 框架最大的优势是它能够从请求 URL 中提取段。考虑以下示例：
- en: '[PRE39]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This URL has a dynamic segment:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 此 URL 有一个动态段：
- en: 'Username: Mark, John, Jessica, and so on'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户名：Mark，John，Jessica 等等
- en: 'You can implement dynamic segments with the following `:variable` pattern:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下 `:variable` 模式实现动态段：
- en: '[PRE40]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The last thing we must do is get the data from the variable. The `gin` package
    comes with the `c.Params.ByName()` function, which takes the name of the parameter
    and returns the value:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须做的最后一件事是从变量中获取数据。`gin` 包自带了 `c.Params.ByName()` 函数，它接受参数名称并返回值：
- en: '[PRE41]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Rerun the app with the `go run` command. Hit the `http://localhost:8080/mohamed`
    link on your browser; the user will be returned:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `go run` 命令重新运行应用程序。在浏览器中点击 `http://localhost:8080/mohamed` 链接；用户将被返回：
- en: '![Figure 1.28 – Example of the path parameter'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.28 – 路径参数示例'
- en: '](img/B17115_01_28.jpg)'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17115_01_28.jpg)'
- en: Figure 1.28 – Example of the path parameter
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.28 – 路径参数示例
- en: 'Now, we know that every time we hit the `GET /user` route, we get a response
    of "hello user." If we hit any other route, it should respond with a 404 error
    message:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们知道每次我们点击 `GET /user` 路由时，我们都会得到 "hello user" 的响应。如果我们点击任何其他路由，它应该返回一个 404
    错误消息：
- en: '![Figure 1.29 – Error handling in Gin'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.29 – Gin 中的错误处理'
- en: '](img/B17115_01_29.jpg)'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17115_01_29.jpg)'
- en: Figure 1.29 – Error handling in Gin
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.29 – Gin 中的错误处理
- en: 'Gin can also handle HTTP requests and responses in XML format. To do so, define
    a user struct with `firstName` and `lastName` as attributes. Then, use the `c.XML()`
    method to render XML:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: Gin 还可以处理 XML 格式的 HTTP 请求和响应。为此，定义一个包含 `firstName` 和 `lastName` 作为属性的 user struct。然后，使用
    `c.XML()` 方法来渲染 XML：
- en: '[PRE42]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Now, rerun the application. If you navigate to [http://localhost:8080](http://localhost:8080),
    the server will return an XML response, as follows:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，重新运行应用程序。如果你导航到 [http://localhost:8080](http://localhost:8080)，服务器将返回以下 XML
    响应：
- en: '![Figure 1.30 – XML response'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.30 – XML 响应'
- en: '](img/B17115_01_30.jpg)'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17115_01_30.jpg)'
- en: Figure 1.30 – XML response
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.30 – XML 响应
- en: Congratulations! At this point, you have a Go programming workspace set up on
    your local machine, as well as Gin configured. Now, you can begin a coding project!
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！到这一点，你已经在本地机器上设置了 Go 编程工作区，并且已经配置了 Gin。现在，你可以开始一个编码项目了！
- en: Summary
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we gave you an introduction to the Go programming language.
    We learned how to set up the runtime and development environments. We also understood
    the GOPATH environment variable, which is a workspace definition in Go, and we
    now know that all packages and projects reside on that path.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们为您介绍了 Go 编程语言。我们学习了如何设置运行时和开发环境。我们还了解了 GOPATH 环境变量，它是 Go 中的工作空间定义，现在我们知道所有包和项目都位于该路径上。
- en: Later, we explored the different Go web frameworks and learned why Gin is the
    most popular for building distributed web applications. Finally, we learned how
    to write our first hello world project with Gin from scratch.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们探讨了不同的 Go Web 框架，并了解了为什么 Gin 是构建分布式 Web 应用程序中最受欢迎的。最后，我们学习了如何从头开始使用 Gin
    编写我们的第一个 hello world 项目。
- en: In the next chapter, we will get our hands dirty and start building a distributed
    RESTful API with the Gin framework.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将动手实践，开始使用 Gin 框架构建分布式 RESTful API。
- en: Questions
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Why is Golang popular?
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么 Golang 流行？
- en: Which are the best Golang frameworks for web development?
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最好的 Golang Web 开发框架有哪些？
- en: What's a Go module?
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 Go 模块？
- en: What's the default port of an HTTP server written in the Gin framework?
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Gin 框架编写的 HTTP 服务器默认端口是什么？
- en: What methods are used to render JSON and XML responses?
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用什么方法来渲染 JSON 和 XML 响应？
- en: Further reading
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*Hands-On Serverless Applications with Go*, Mohamed Labouardy, by Packt Publishing'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《*用 Go 实践无服务器应用程序*》，作者 Mohamed Labouardy，由 Packt Publishing 出版
- en: '*Hands-On RESTful Web Services with Go - Second Edition*, Naren Yellavula,
    by Packt Publishing'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《*用 Go 实践 RESTful Web 服务（第二版）*》，作者 Naren Yellavula，由 Packt Publishing 出版
