- en: 'Chapter 1: Getting Started with Gin'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will give you a foundational understanding of what the Gin framework
    is, how it works, and its features. We'll also supply guidelines for setting up
    the Go runtime and development environment. Moreover, we'll discuss the advantages
    of using Gin as a web framework for building distributed applications. We will
    finish this chapter by learning to write our first Gin-based web application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Gin?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go runtime and **integrated development environment** (**IDE**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go modules and dependency management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a Gin web application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be able to build a basic HTTP server with
    the Gin web framework.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow along with this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Some programming experience. The code in this chapter is pretty simple, but
    it helps to know something about Go.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A tool to edit your code with. Any text editor you have will work fine. Most
    text editors have good support for Go. The most popular are **Visual Studio Code
    (VSCode)** (free), GoLand (paid), and Vim (free).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A command terminal. Go works well using any Terminal on Linux and Mac, and on
    PowerShell or CMD in Windows.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for this chapter is hosted on GitHub at [https://github.com/PacktPublishing/Building-Distributed-Applications-in-Gin/tree/main/chapter01](https://github.com/PacktPublishing/Building-Distributed-Applications-in-Gin/tree/main/chapter01).
  prefs: []
  type: TYPE_NORMAL
- en: What is Gin?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before deep diving into the Gin web framework, we need to understand why Go
    is a top choice when it comes to building scalable and distributed applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go (also referred to as Golang) is an open source programming language, developed
    by Robert Griesemer, Rob Pike, and Ken Thompson within Google in 2007\. It is
    a compiled, statically typed language designed to enable users to easily write
    reliable, scalable, and highly efficient applications. The key features of Go
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Simple and consistent**: Go has a rich set of library packages with powerful
    standard libraries for testing, error management, and concurrency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`go` keyword before a function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Efficient**: Go provides efficient execution and compilation. Go is also
    statically linked, which means that the compiler invokes a linker in the last
    step that resolves all library references. This means we would get one binary
    executable after compiling a Go program with no external dependencies. Moreover,
    it offers efficient memory utilization with a built-in garbage collector (Go exhibits
    many similarities with low-level programming languages such as C or C++).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Community and support**: Go is backed by Google and has an ever growing ecosystem
    and numerous contributors to the language on GitHub. Moreover, many online resources
    (tutorials, videos, and books) are available for getting started with Go.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Go has become hugely popular among enterprises and the open source community.
    Based on the StackOverflow Developer Survey 2020 ([https://insights.stackoverflow.com/survey/2020](https://insights.stackoverflow.com/survey/2020)),
    Go is in the top 5 of the most loved programming languages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Most loved programming languages according to the StackOverflow
    Survey 2020'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.1 – Most loved programming languages according to the StackOverflow
    Survey 2020
  prefs: []
  type: TYPE_NORMAL
- en: 'Golang is known to be the number one choice when it comes to building large-scale,
    complex tools and cloud-based applications. The following image highlights the
    main open source projects that have been developed using Go:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Docker**: A solution that''s used to create, deploy, and run applications
    using containers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kubernetes**: A container orchestration platform for managing containers
    across a fleet of nodes/machines.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Etcd**: A reliable distributed key-value store used to store data for a distributed
    system or application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**InfluxDB**: A scalable time-series database designed to handle high write
    and query loads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CoreOS**: A lightweight operating system designed to deploy container-based
    applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Terraform**: An infrastructure-as-code tool for building, changing, and versioning
    cloud infrastructure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CockroachDB**: A cloud-native SQL database for data-intensive applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Consul**: A distributed store with service discovery, service mesh, and health
    check monitoring capabilities:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Open source tools powered by Go'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.2 – Open source tools powered by Go
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, Go is a solid language for distributed systems and infrastructure
    tools. Docker, Kubernetes, Prometheus, and others are built using Go.
  prefs: []
  type: TYPE_NORMAL
- en: Go is also known for building web applications of all shapes and sizes. This
    is partly due to the fantastic work that has been put into making the standard
    library clean, consistent, and easy to use. Perhaps one of the most important
    packages for any budding Go web developer is the `net/http` package. This package
    allows you to build HTTP servers in Go with its powerful compositional constructs.
  prefs: []
  type: TYPE_NORMAL
- en: 'To build a web application, you''ll need to build an HTTP server. The client
    (for example, a browser) makes an HTTP request with some information; the server
    then processes that request and returns a response. The response can be in JSON,
    XML, or HTML format:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – HTTP client-server communication'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.3 – HTTP client-server communication
  prefs: []
  type: TYPE_NORMAL
- en: This pattern of request-response is one of the key focal points in building
    web applications in Go.
  prefs: []
  type: TYPE_NORMAL
- en: 'While the `net/http` package allows you to craft a web application easily,
    the routing mechanism is not so powerful, especially for complex applications.
    That''s where a web framework comes into play. The top Golang web frameworks are
    listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17115_table_1.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Gin is possibly the most used and largest running Go web framework. The framework
    has already harvested 48,210 stars and 5,100 forks in GitHub, which shows that
    the framework is very popular. This modular framework can be extended easily with
    minimal fuss. It is great to use because many components can be reused with a
    direct `net/http` package.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Another strong but conservative framework is Gorilla/Mux. It has one of the
    biggest online communities with many resources on the internet to teach you how
    to build end-to-end web applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'According to the official documentation [https://gin-gonic.com/docs/](https://gin-gonic.com/docs/),
    Gin is described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Gin is an HTTP web framework written in Go (Golang). It features a Martini-like
    API with much better performance -- up to 40 times faster. If you need smashing
    performance, get yourself some Gin".'
  prefs: []
  type: TYPE_NORMAL
- en: 'Gin is a minimalistic web framework suitable for building web applications,
    microservices, and RESTful APIs. It reduces boilerplate code by creating reusable
    and extensible pieces of code: you can write a piece of middleware that can be
    plugged into one or more request handlers. Moreover, it comes with the following
    key features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Well documented**: The documentation for Gin is broad and comprehensive.
    Most tasks that you will need to do relating to the router can be found easily
    in the docs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Simplicity**: Gin is a pretty minimalistic framework. Only the most essential
    features and libraries are included, with little to no boilerplate to bootstrap
    applications, making Gin a great framework for developing highly available REST
    APIs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extensible**: The Gin community has created numerous pieces of well-tested
    middleware that make developing for Gin a charm. Features include compression
    with GZip, authentication with an authorization middleware, and logging with external
    solutions such as Sentry.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance**: Gin runs 40x faster than Martini and runs comparatively well
    compared to other Golang frameworks. The following is the results of a benchmark
    I ran against multiple Go libraries:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 1.4 – Golang web framework benchmarks'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.4 – Golang web framework benchmarks
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: This benchmark was performed on a macOS High Sierra, 2.7 GHz Intel Core i7,
    16 GB DDR3 computer, with Go 1.15.6 as the runtime environment.
  prefs: []
  type: TYPE_NORMAL
- en: That being said, before you can write your first line of Go code, you'll need
    to set up the environment. Let's start by installing Go.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Go environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the time of writing this book, the latest version of Go is Go 1.15.6\. To
    install Go, you can either download or use the official binary distributions,
    or you can install Go from the source code ([https://github.com/golang/go](https://github.com/golang/go)).
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The official binary distributions are available for FreeBSD (release 8 and above),
    Linux (2.6.23 and above), macOS (Snow Leopard and above), and Windows (XP and
    above). Both the 32-bit (386) and 64-bit (amd64) x86 processor architectures are
    supported. For FreeBSD and Linux, the ARM processor architecture is also supported.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Go, download the distribution package from the [https://golang.org/dl/](https://golang.org/dl/)
    web page, as shown here, and choose the file that''s appropriate for your platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.5 – Golang available packages'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.5 – Golang available packages
  prefs: []
  type: TYPE_NORMAL
- en: Once you have the distribution package, install Go according to your platform
    of choice. We will cover this in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Linux/FreeBSD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install Go on Linux or FreeBSD, you must download `go.-.tar.gz`. The latest
    Go for Linux on a 64-bit architecture is `go1.15.6.linux-amd64.tar.gz`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Download the archive and extract it into the `/usr/local` folder. Then, run
    the following command as root or through sudo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Add `/usr/local/go/bin` to the `PATH` environment variable. You can do this
    by adding the following line to `$HOME/.profile or /etc/profile` (for a system-wide
    installation):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that you''ve installed Go by opening a command prompt and typing the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This command should display the installed version of Go:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6 – Installed version of Go'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.6 – Installed version of Go
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on to see how to set up a Go environment on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install Go on Windows, you can either use the MSI installer or the ZIP archive.
    Installing from MSI is easier. The latest Go for Windows on a 64-bit architecture
    is `go1.15.6.windows-amd64.msi`. You will then need to execute one of the following
    commands based on your system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the MSI file you downloaded and follow the prompts to install Go. By default,
    the installer will place Go at `C:\Go` and set up `C:\Go\bin` in your `PATH` environment
    variable. You can change the location as needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.7 – Golang installation wizard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.7 – Golang installation wizard
  prefs: []
  type: TYPE_NORMAL
- en: After installing Go, you will need to close and reopen any open command prompts
    so that changes to the environment that have been made by the installer are reflected
    in the command prompt.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Using the ZIP archive is easy as well. Extract the files into a directory (for
    example, `C:\Go`) and add the `bin` subdirectory to your `PATH` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once installed, click on the `cmd`. After, press the *Enter* key. In the command
    prompt window that appears, type the `go version` command, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.8 – Installed version of Go'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.8 – Installed version of Go
  prefs: []
  type: TYPE_NORMAL
- en: You'll see **go version go1.15.6 windows/amd64**, as shown in the preceding
    screenshot. With that, you're all set up!
  prefs: []
  type: TYPE_NORMAL
- en: MacOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For MacOS, you can download the appropriate PKG file; that is, `go1.15.6.darwin-amd64.pkg`
    (at the time of writing this book). Once downloaded, run through the installation
    wizard. The package will install the distribution to `/usr/local/go` and place
    the `/usr/local/go/bin` directory in your `PATH` environment variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.9 – Installing Go on MacOS'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.9 – Installing Go on MacOS
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll need to restart your terminal, or run this command in your Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can use Homebrew to install Go. This can be as simple as
    doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The Terminal window will give you feedback regarding the installation process
    of Go. It may take a few minutes before the installation is complete. Verify that
    you've installed Go by opening a command prompt and typing the `go version` command.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'In the future, to update Go, you can run the following commands to update Homebrew
    and then update Go. You don''t have to do this now as you''ve just installed the
    latest version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you''ve installed Go, you need to set it up properly. Go development
    tools are designed to work with code maintained in public repositories, and the
    model is the same, regardless of whether you''re developing an open source program
    or something else. Go code is developed in a workspace. A workspace is made up
    of three directories, namely the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bin`: This will contain all you Go executable binaries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src`: This will store your source files, which are organized in packages,
    with one subdirectory in the `src` directory representing one package.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pkg`: This will store your package objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The default directory for the Go workspace is the home directory with a `go`
    subdirectory or `$HOME/go`. Issue the following command to create the directory
    structure for your Go workspace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `-p` option tells `mkdir` to create all the parents in the directory, even
    if they don''t currently exist. Using `{bin, src, pkg}` creates a set of arguments
    for `mkdir` and tells it to create the `bin`, `src`, and `pkg` directories. This
    will ensure the following directory structure is now in place:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you need to set the `GOPATH` environment variable, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can verify your `$PATH` has been updated by using the `echo` command and
    inspecting the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see your `$GOPATH/bin` in your home directory. If you were logged
    in as `USER`, you will see `/Users/USER/go/bin` in the path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: With the Go workspace and `GOPATH` created, we can go ahead and set up the development
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: Integrated development environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Throughout this book, I will be using an **IDE** to write RESTful API and services.
    Using an IDE can boost your productivity since it provides rich features such
    as autocompletion, highlighting code, a powerful built-in debugger, and custom
    extensions. There are many IDEs available. In this book, I will be using **VSCode**.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install VSCode, download the appropriate package based on your system from
    [https://code.visualstudio.com/download](https://code.visualstudio.com/download):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.10 – VS Code – available packages'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.10 – VS Code – available packages
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Mac users can also use `Brew` to install VSCode with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`brew install --cask visual-studio-code`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once downloaded, run the setup wizard and follow the instructions. Once the
    installation is complete, launch VSCode. You will be presented with the following
    start screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.11 – VSCode user interface'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.11 – VSCode user interface
  prefs: []
  type: TYPE_NORMAL
- en: 'VSCode supports all the popular programming languages and Git integration by
    default. You can also install extensions to extend the functionality of VSCode.
    The VS Code marketplace contains a huge list of free community plugins and extensions.
    To enable support for Golang, you need to install an extension called **Go** by
    navigating to the **Extensions** tab from the left sidebar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.12 – Golang extension for VSCode'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.12 – Golang extension for VSCode
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Install** button and then restart VSCode for the changes to take
    effect.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Go tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we will install the following Go tools, which are a set of packages that
    help improve your development workflow and overall experience while writing code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17115_table_1.2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: A complete list of the available Go tools can be found at [https://pkg.go.dev/golang.org/x/tools](https://pkg.go.dev/golang.org/x/tools).
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the tools, click on `goinstall update/tools`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.13 – Available Go tools on VSCode'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.13 – Available Go tools on VSCode
  prefs: []
  type: TYPE_NORMAL
- en: 'Check all the dependencies and click on **OK**. It will take some time to download
    all the dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.14 – Go tools installation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.14 – Go tools installation
  prefs: []
  type: TYPE_NORMAL
- en: With Go installed and configured on your computer, you are now ready to install
    the Gin framework.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Gin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Gin is a third-party package. To install Gin in Go projects, we need to use
    the `go get` command. The command takes the URL of the package to be installed
    as an argument. Issue the following command to install the `gin` package from
    GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you're running Go 1.16 and above, you need to disable Go modules via the
    `GO111MODULE=off` option.
  prefs: []
  type: TYPE_NORMAL
- en: 'When checking out the `gin` package, the `go get` command creates a Gin directory
    in the `$GOPATH/src` path. The directory will contain the source code of the Gin
    framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.15 – Gin package source code'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.15 – Gin package source code
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by creating the `hello-world` project directory under `$GOHOME/src/hello-world`
    or any directory that seems appropriate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the folder with VSCode and create a `main.go` file inside the project
    folder that contains the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The first line, `package main`, indicates that this is the main module in this
    project. The `import` section is for importing the `gin` package. This package
    provides us with the `router` variable, which is declared right below `import`
    and the API context to be used while we send the response in our `main` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we create an HTTP `GET` method on the root (`/`) resource and define
    a function to be called when HTTP requests hit the root endpoint. The function
    sends a JSON response with a status code of 200 (OK) with a body of `"message":
    "test successful"`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we must deploy the router on port `8080` using the `router.Run()`
    method. The following diagram summarizes how an HTTP request is processed in Gin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.16 – Parsing incoming HTTP requests with Gin'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_16.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.16 – Parsing incoming HTTP requests with Gin
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the app, execute the following command from the terminal session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'All the files and commands executed henceforth will be within this directory.
    If you followed the setup process, you should see the following output in your
    Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.17 – Gin server logs'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_17.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.17 – Gin server logs
  prefs: []
  type: TYPE_NORMAL
- en: 'Point your favorite browser to `http://localhost:8080`. You should see a `"hello
    world"` message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.18 – Hello world example'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.18 – Hello world example
  prefs: []
  type: TYPE_NORMAL
- en: Awesome – you have successfully started an HTTP server in Go with the Gin framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back to the terminal, Gin will trace the HTTP requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.19 – Tracing incoming HTTP requests'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_19.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.19 – Tracing incoming HTTP requests
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use a `cURL` command to issue an HTTP request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can use an advanced REST client such as Postman. You can
    download the right version based on your platform from the following URL: [https://www.getpostman.com/apps](https://www.getpostman.com/apps).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once it has downloaded, run the wizard and open Postman. Set the fields as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'HTTP method: `GET`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'URL: `http://localhost:8080`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Headers: Set `Content-Type` to `application/json`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The request should be configured like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.20 – GET request with the Postman client'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_20.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.20 – GET request with the Postman client
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s worth mentioning that by default, the HTTP server is listening on port
    `8080`. However, if the port is being used by another application, you can define
    a different port by adding an argument to the `Run` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will run the server on port `5000`, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.21 – Running the Gin server on port 5000'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_21.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.21 – Running the Gin server on port 5000
  prefs: []
  type: TYPE_NORMAL
- en: Note that the `port` parameter needs to be passed as a string, prepended by
    colon punctuation.
  prefs: []
  type: TYPE_NORMAL
- en: You should now be familiar with the basics of building and running a simple
    web application. In the next few sections, we will cover how to enhance those
    functionalities with third-party packages. But before we do that, let's cover
    how to manage Go dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Dependency management in Golang
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For now, the code is stored locally. However, it''s recommended to store the
    source code in a remote repository for versioning. That''s where a solution such
    as GitHub comes into play. Sign up for a free account at [https://github.com](https://github.com).
    Then, create a new GitHub repository called `hello-world`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.22 – New GitHub repository'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_22.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.22 – New GitHub repository
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, initialize the repository with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Commit the `main.go` file to the remote repository by executing the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Your repository should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.23 – Versioning main.go in Git'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_23.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.23 – Versioning main.go in Git
  prefs: []
  type: TYPE_NORMAL
- en: We can stop here. However, if you're working within a team, you will need some
    way to ensure all team members are using the same Go version and packages. That's
    where Go modules come into the picture. Go modules were introduced in 2018 to
    make dependency management a lot easier.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Starting with Go 1.16, Go modules are the default way to manage external dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the project folder, run the following command to create a new module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will create a `go.mod` file that contains the following content.
    The file defines projects requirements and locks dependencies to their correct
    versions (similar to `package.json` and `package-lock.json` in Node.js):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To add the Gin package, we can issue the `go get` command. Now, our `go.mod`
    file will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'A new file called `go.sum` will be generated upon adding the Gin framework
    (the output was cropped for brevity). You may assume it''s a lock file. But in
    fact, `go.mod` already provides enough information for 100% reproducible builds.
    The other file is just for validation purposes: it contains the expected cryptographic
    checksums of the content of specific module versions. You can think of it as an
    additional security layer to ensure that the modules your project depends on do
    not change unexpectedly, whether for malicious or accidental reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'You can list your dependencies with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: To remove unused dependencies, you can use the `go mod tidy` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, add the `go.mod` and `go.sum` files to the remote repository using
    the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The updated repository will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.24 – Managing dependencies with Go modules'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_24.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.24 – Managing dependencies with Go modules
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s worth mentioning that the downloaded modules are stored locally in your
    `$GOPATH/pkg/mod` directory. However, sometimes, it''s useful to store the modules
    or third-party packages that your project depends on and place them in a folder,
    so that they can be checked into version control. Fortunately, Go modules support
    vendoring:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will create a `vendor` directory in your project folder that contains
    all your third-party dependencies. You can now commit this folder to your remote
    Git repository to ensure the stability of your future builds, without having to
    rely on external services:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.25 – Vendoring dependencies'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_25.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.25 – Vendoring dependencies
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes, you may wonder why a specific package is a dependency. You can answer
    this by analyzing or visualizing the project dependencies. To do so, we can use
    the `go mod graph` command to display the list of modules in the `go.mod` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will generate a new file called `unver.txt` containing the following
    content (the output has been cropped for brevity):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create a `graph.dot` file containing the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'This content will generate a graph structure using the DOT language. We can
    use DOT to describe graphs (directed or not). That being said, we will inject
    the output of `unvert.txt` into the `graph.dot` file with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in a module dependency graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.26 – Module dependency graph'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_26.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.26 – Module dependency graph
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now render the results with Graphviz. This tool can be installed with
    the following commands, based on your operation system:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Linux**: You can download the official package based on your package manager.
    For Ubuntu/Debian, use the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**MacOS**: You can use the Homebrew utility for MacOS:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Windows**: You can use the Chocolatey ([https://chocolatey.org/install](https://chocolatey.org/install))
    package manager for Windows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once Graphviz has been installed, execute the following command to convert
    the `graph.dot` file into `.svg` format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'A `graph.svg` file will be generated. Open the file with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following directed graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.27 – Visually analyzing module dependencies'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_27_v2.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.27 – Visually analyzing module dependencies
  prefs: []
  type: TYPE_NORMAL
- en: This graph perfectly shows the dependencies among the modules/packages of the
    *hello-world* project.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Another way of generating a dependencies graph is by using the `modgv` utility
    ([https://github.com/lucasepe/modgv](https://github.com/lucasepe/modgv)). This
    tool converts `go mod graph` output into GraphViz's DOT language with a single
    command.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the source code has been versioned in GitHub, we can go further and
    explore how to write a custom function handler for Gin routes.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a custom HTTP handler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can create a handler function that takes `*gin.Context` as an argument
    and serves a JSON response with a status code of 200\. Then, you can register
    the handler using the `router.Get()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Separating the handler function from the router will be useful in the advanced
    chapters of this book, when unit testing is tackled.
  prefs: []
  type: TYPE_NORMAL
- en: 'The biggest strength of the Gin framework is its ability to extract segments
    from the request URL. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'This URL has a dynamic segment:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Username: Mark, John, Jessica, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can implement dynamic segments with the following `:variable` pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The last thing we must do is get the data from the variable. The `gin` package
    comes with the `c.Params.ByName()` function, which takes the name of the parameter
    and returns the value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Rerun the app with the `go run` command. Hit the `http://localhost:8080/mohamed`
    link on your browser; the user will be returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.28 – Example of the path parameter'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_28.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.28 – Example of the path parameter
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we know that every time we hit the `GET /user` route, we get a response
    of "hello user." If we hit any other route, it should respond with a 404 error
    message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.29 – Error handling in Gin'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_29.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.29 – Error handling in Gin
  prefs: []
  type: TYPE_NORMAL
- en: 'Gin can also handle HTTP requests and responses in XML format. To do so, define
    a user struct with `firstName` and `lastName` as attributes. Then, use the `c.XML()`
    method to render XML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, rerun the application. If you navigate to [http://localhost:8080](http://localhost:8080),
    the server will return an XML response, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.30 – XML response'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_01_30.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.30 – XML response
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! At this point, you have a Go programming workspace set up on
    your local machine, as well as Gin configured. Now, you can begin a coding project!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we gave you an introduction to the Go programming language.
    We learned how to set up the runtime and development environments. We also understood
    the GOPATH environment variable, which is a workspace definition in Go, and we
    now know that all packages and projects reside on that path.
  prefs: []
  type: TYPE_NORMAL
- en: Later, we explored the different Go web frameworks and learned why Gin is the
    most popular for building distributed web applications. Finally, we learned how
    to write our first hello world project with Gin from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will get our hands dirty and start building a distributed
    RESTful API with the Gin framework.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why is Golang popular?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which are the best Golang frameworks for web development?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What's a Go module?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What's the default port of an HTTP server written in the Gin framework?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What methods are used to render JSON and XML responses?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Hands-On Serverless Applications with Go*, Mohamed Labouardy, by Packt Publishing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Hands-On RESTful Web Services with Go - Second Edition*, Naren Yellavula,
    by Packt Publishing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
