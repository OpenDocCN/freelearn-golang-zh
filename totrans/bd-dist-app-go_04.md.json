["```go\ngit clone https://github.com/mlabouardy/recipes-api.git \ncd recipes-api \ntouch README.md \ngit checkout -b preprod \ngit push origin preprod \ngit checkout –b develop \ngit push origin develop\n```", "```go\ngo mod init\n```", "```go\npackage main\nimport \"github.com/gin-gonic/gin\"\nfunc main() {\n   router := gin.Default()\n   router.Run()\n}\n```", "```go\ngit add .\ngit commit –m \"boilerplate\"\ngit push origin develop\n```", "```go\ntype Recipe struct {\n   Name         string    `json:\"name\"`\n   Tags         []string  `json:\"tags\"`\n   Ingredients  []string  `json:\"ingredients\"`\n   Instructions []string  `json:\"instructions\"`\n   PublishedAt  time.Time `json:\"publishedAt\"`\n}\n```", "```go\ngit checkout -b feature/datamodel\ngit add main.go\ngit commit -m \"recipe data model\"\ngit push origin feature/datamodel\n```", "```go\npackage main\nimport (\n   \"time\"\n   \"github.com/gin-gonic/gin\"\n)\ntype Recipe struct {\n  ID           string    `json:\"id\"`\n  Name         string    `json:\"name\"`\n  Tags         []string  `json:\"tags\"`\n  Ingredients  []string  `json:\"ingredients\"`\n  Instructions []string  `json:\"instructions\"`\n  PublishedAt  time.Time `json:\"publishedAt\"`\n}\nfunc NewRecipeHandler(c *gin.Context) {\n}\nfunc main() {\n   router := gin.Default()\n   router.POST(\"/recipes\", NewRecipeHandler)\n   router.Run()\n}\n```", "```go\nvar recipes []Recipe\nfunc init() {\n   recipes = make([]Recipe, 0)\n}\n```", "```go\nfunc NewRecipeHandler(c *gin.Context) {\n   var recipe Recipe\n   if err := c.ShouldBindJSON(&recipe); err != nil {\n       c.JSON(http.StatusBadRequest, gin.H{\n          \"error\": err.Error()})\n       return\n   }\n   recipe.ID = xid.New().String()\n   recipe.PublishedAt = time.Now()\n   recipes = append(recipes, recipe)\n   c.JSON(http.StatusOK, recipe)\n}\n```", "```go\ngo get github.com/rs/xid\n```", "```go\ngo run main.go\n```", "```go\ncurl --location --request POST 'http://localhost:8080/recipes' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n   \"name\": \"Homemade Pizza\",\n   \"tags\" : [\"italian\", \"pizza\", \"dinner\"],\n   \"ingredients\": [\n       \"1 1/2 cups (355 ml) warm water (105°F-115°F)\",\n       \"1 package (2 1/4 teaspoons) of active dry yeast\",\n       \"3 3/4 cups (490 g) bread flour\",\n       \"feta cheese, firm mozzarella cheese, grated\"\n   ],\n   \"instructions\": [\n       \"Step 1.\",\n       \"Step 2.\",\n       \"Step 3.\"\n   ]\n}' | jq -r\n```", "```go\ngit checkout -b feature/new_recipe\ngit add .\ngit commit -m \"new recipe endpoint\"\ngit push origin feature/new_recipe\n```", "```go\nfunc ListRecipesHandler(c *gin.Context) {\n   c.JSON(http.StatusOK, recipes)\n}\nfunc main() {\n   router := gin.Default()\n   router.POST(\"/recipes\", NewRecipeHandler)\n   router.GET(\"/recipes\", ListRecipesHandler)\n   router.Run()\n}\n```", "```go\ncurl -s --location --request GET 'http://localhost:8080/recipes' \\\n--header 'Content-Type: application/json'\n```", "```go\nfunc init() {\n   recipes = make([]Recipe, 0)\n   file, _ := ioutil.ReadFile(\"recipes.json\")\n   _ = json.Unmarshal([]byte(file), &recipes)\n}\n```", "```go\ncurl -s -X GET 'http://localhost:8080/recipes' | jq length\n```", "```go\ngit checkout -b feature/fetch_all_recipes\ngit add .\ngit commit -m \"list recipes endpoint\"\ngit push origin feature/fetch_all_recipes\n```", "```go\nrouter.PUT(\"/recipes/:id\", UpdateRecipeHandler)\n```", "```go\nfunc UpdateRecipeHandler(c *gin.Context) {\n   id := c.Param(\"id\")\n   var recipe Recipe\n   if err := c.ShouldBindJSON(&recipe); err != nil {\n       c.JSON(http.StatusBadRequest, gin.H{\n          \"error\": err.Error()})\n       return\n   }\n   index := -1\n   for i := 0; i < len(recipes); i++ {\n       if recipes[i].ID == id {\n           index = i\n       }\n   }\n   if index == -1 {\n       c.JSON(http.StatusNotFound, gin.H{\n          \"error\": \"Recipe not found\"})\n       return\n   }\n   recipes[index] = recipe\n   c.JSON(http.StatusOK, recipe)\n}\n```", "```go\n{\n   \"name\": \"Homemade Pizza\",\n   \"tags\" : [\"italian\", \"pizza\", \"dinner\"],\n   \"ingredients\": [\n       \"pizza dough\",\n       \"tomato sauce\",\n       \"olive oil\",\n       \"7 ounces fresh mozzarella cheese, cut into \n        1/2-inch cubes\",\n       \"5 - 6 large fresh basil leaves\"\n   ],\n   \"instructions\": []\n}\n```", "```go\ngit checkout -b feature/update_recipe\ngit add .\ngit commit -m \"update recipe endpoint\"\ngit push origin feature/update_recipe\n```", "```go\nrouter.DELETE(\"/recipes/:id\", DeleteRecipeHandler)\n```", "```go\nfunc DeleteRecipeHandler(c *gin.Context) {\n   id := c.Param(\"id\")\n   index := -1\n   for i := 0; i < len(recipes); i++ {\n       if recipes[i].ID == id {\n           index = i\n       }\n   }\n   if index == -1 {\n       c.JSON(http.StatusNotFound, gin.H{\n          \"error\": \"Recipe not found\"})\n       return\n   }\n   recipes = append(recipes[:index], recipes[index+1:]...)\n   c.JSON(http.StatusOK, gin.H{\n      \"message\": \"Recipe has been deleted\"))\n}\n```", "```go\ncurl -v -sX DELETE http://localhost:8080/recipes/c0283p3d0cvuglq85log | jq -r\n```", "```go\ngit checkout -b feature/delete_recipe\ngit add .\ngit commit -m \"delete recipe endpoint\"\ngit push origin feature/delete_recipe\n```", "```go\nrouter.GET(\"/recipes/search\", SearchRecipesHandler)\n```", "```go\nfunc SearchRecipesHandler(c *gin.Context) {\n   tag := c.Query(\"tag\")\n   listOfRecipes := make([]Recipe, 0)\n   for i := 0; i < len(recipes); i++ {\n       found := false\n       for _, t := range recipes[i].Tags {\n           if strings.EqualFold(t, tag) {\n               found = true\n           }\n       }\n       if found {\n           listOfRecipes = append(listOfRecipes, \n              recipes[i])\n       }\n   }\n   c.JSON(http.StatusOK, listOfRecipes)\n}\n```", "```go\ngit checkout -b feature/search_recipe\ngit add .\ngit commit -m \"search recipe by tag\"\ngit push origin feature/search_recipe\n```", "```go\ngo-swagger version\n```", "```go\n// Recipes API\n//\n// This is a sample recipes API. You can find out more about the API at https://github.com/PacktPublishing/Building-Distributed-Applications-in-Gin.\n//\n//  Schemes: http\n//  Host: localhost:8080\n//  BasePath: /\n//  Version: 1.0.0\n//  Contact: Mohamed Labouardy \n// <mohamed@labouardy.com> https://labouardy.com\n//\n//  Consumes:\n//  - application/json\n//\n//  Produces:\n//  - application/json\n// swagger:meta\npackage main\n```", "```go\nswagger generate spec –o ./swagger.json\n```", "```go\n{\n\"consumes\": [\n   \"application/json\"\n],\n\"produces\": [\n   \"application/json\"\n],\n\"schemes\": [\n   \"http\"\n],\n\"swagger\": \"2.0\",\n\"info\": {\n   \"description\": \"This is a sample recipes API. You can \n    find out more about the API at https://github.com/PacktPublishing/Building-Distributed-Applications-in-Gin.\",\n   \"title\": \"Recipes API\",\n   \"contact\": {\n     \"name\": \"Mohamed Labouardy\",\n     \"url\": \"https://labouardy.com\",\n     \"email\": \"mohamed@labouardy.com\"\n   },\n   \"version\": \"1.0.0\"\n},\n\"host\": \"localhost:8080\",\n\"basePath\": \"/\",\n\"paths\": {}\n} \n```", "```go\nswagger serve ./swagger.json\n```", "```go\nswagger serve -F swagger ./swagger.json\n```", "```go\n// swagger:operation GET /recipes recipes listRecipes\n// Returns list of recipes\n// ---\n// produces:\n// - application/json\n// responses:\n//     '200':\n//         description: Successful operation\nfunc ListRecipesHandler(c *gin.Context) {\n   c.JSON(http.StatusOK, recipes)\n}\n```", "```go\n// swagger:operation PUT /recipes/{id} recipes updateRecipe\n// Update an existing recipe\n// ---\n// parameters:\n// - name: id\n//   in: path\n//   description: ID of the recipe\n//   required: true\n//   type: string\n// produces:\n// - application/json\n// responses:\n//     '200':\n//         description: Successful operation\n//     '400':\n//         description: Invalid input\n//     '404':\n//         description: Invalid recipe ID\nfunc UpdateRecipeHandler(c *gin.Context) {}\n```", "```go\ngit checkout -b feature/openapi\ngit add .\ngit commit -m \"added openapi specs\"\ngit push origin feature/openapi\n```"]