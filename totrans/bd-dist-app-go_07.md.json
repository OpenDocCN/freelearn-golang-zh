["```go\n    <html>\n    <head>\n       <title>Recipes Platform</title>\n    </head>\n    <body>\n       <h2>Hello world</h2>\n    </body>\n    </html>\n    ```", "```go\n    package main\n    import \"github.com/gin-gonic/gin\"\n    func IndexHandler(c *gin.Context) {\n       c.File(\"index.html\")\n    }\n    func main() {\n       router := gin.Default()\n       router.GET(\"/\", IndexHandler)\n       router.Run()\n    }\n    ```", "```go\n    localhost and serves on port 8080 by default, as illustrated in the following screenshot:![Figure 5.1 – Server logs\n    ](img/Figure_5.1_B17115.jpg)Figure 5.1 – Server logs\n    ```", "```go\n    <html>\n    <head>\n       <title>Recipes Platform</title>\n       <link rel=\"stylesheet\" href=\"assets/css/app.css\">\n    </head>\n    <body>\n       <div class=\"recipes\">\n           <div class=\"recipe\">\n               <h2>Pizza</h2>\n               <img src=\"img/pizza.jpg\" />\n           </div>\n           <div class=\"recipe\">\n               <h2>Burger</h2>\n               <img src=\"img/burger.jpg\" />\n           </div>\n       </div>\n    </body>\n    </html>\n    ```", "```go\n    .\n    ├── css\n    │   └── app.css\n    └── images\n        ├── burger.jpg\n        └── pizza.jpg\n    .recipes {\n       width: 100%;\n    }\n    .recipe {\n       width: 50%;\n       float: left;\n    }\n    .recipe img {\n       height: 320px;\n    }\n    ```", "```go\n    router.Static(\"/assets\", \"./assets\")\n    ```", "```go\n    type Recipe struct {\n       Name    string `json:\"name\"`\n       Picture string `json:\"picture\"`\n    }\n    ```", "```go\n    func IndexHandler(c *gin.Context) {\n       recipes := make([]Recipe, 0)\n       recipes = append(recipes, Recipe{\n           Name:    \"Burger\",\n           Picture: \"/assets/images/burger.jpg\",\n       })\n       recipes = append(recipes, Recipe{\n           Name:    \"Pizza\",\n           Picture: \"/assets/images/pizza.jpg\",\n       })\n      recipes = append(recipes, Recipe{\n           Name:    \"Tacos\",\n           Picture: \"/assets/images/tacos.jpg\",\n       })\n       c.HTML(http.StatusOK, \"index.tmpl\", gin.H{\n           \"recipes\": recipes,\n       })\n    }\n    ```", "```go\n    <html>\n    <head>\n       <title>Recipes</title>\n       <link rel=\"stylesheet\" href=\"assets/css/app.css\">\n    </head>\n    <body>\n       <div class=\"recipes\">\n           {{range .recipes}}\n           <div class=\"recipe\">\n               <h2>{{ .Name }}</h2>\n               <img src=\"img/{{ .Picture }}\" />\n           </div>\n           {{end}}\n       </div>\n    </body>\n    </html>\n    ```", "```go\n    router.LoadHTMLGlob(\"templates/*\")\n    ```", "```go\n    [\n       {\n           \"name\": \"Crock Pot Roast\",\n           \"ingredients\": [\n               {\n                   \"quantity\": \"1\",\n                   \"name\": \"beef roast\",\n                   \"type\": \"Meat\"\n               },\n               {\n                   \"quantity\": \"1 package\",\n                   \"name\": \"brown gravy mix\",\n                   \"type\": \"Baking\"\n               },\n               {\n                   \"quantity\": \"1 package\",\n                   \"name\": \"dried Italian salad \n                            dressing mix\",\n                   \"type\": \"Condiments\"\n               },\n               {\n                   \"quantity\": \"1 package\",\n                   \"name\": \"dry ranch dressing mix\",\n                   \"type\": \"Condiments\"\n               },\n               {\n                   \"quantity\": \"1/2 cup\",\n                   \"name\": \"water\",\n                   \"type\": \"Drinks\"\n               }\n           ],\n           \"steps\": [\n               \"Place beef roast in crock pot.\",\n               \"Mix the dried mixes together in a bowl \n                    and sprinkle over the roast.\",\n               \"Pour the water around the roast.\",\n               \"Cook on low for 7-9 hours.\"\n           ],\n           \"imageURL\": \"/assets/images/\n                        crock-pot-roast.jpg\"\n       }\n    ]\n    ```", "```go\n    type Recipe struct {\n       Name        string       `json:\"name\"`\n       Ingredients []Ingredient `json:\"ingredients\"`\n       Steps       []string     `json:\"steps\"`\n       Picture     string       `json:\"imageURL\"`\n    }\n    type Ingredient struct {\n       Quantity string `json:\"quantity\"`\n       Name     string `json:\"name\"`\n       Type     string `json:\"type\"`\n    }\n    var recipes []Recipe\n    ```", "```go\n    func init() {\n       recipes = make([]Recipe, 0)\n       file, _ := ioutil.ReadFile(\"recipes.json\")\n       _ = json.Unmarshal([]byte(file), &recipes)\n    }\n    ```", "```go\n    func IndexHandler(c *gin.Context) {\n       c.HTML(http.StatusOK, \"index.tmpl\", gin.H{\n           \"recipes\": recipes,\n       })\n    }\n    ```", "```go\n    <html>\n    <head>\n       <title>Recipes</title>\n       <link rel=\"stylesheet\" href=\"assets/css/app.css\">\n       <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    </head>\n    <body class=\"container\">\n       <div class=\"row\">\n           {{range .recipes}}\n           <div class=\"col-md-3\">\n               <div class=\"card\" style=\"width: 18rem;\">\n                   <img src=\"img/{{ .Picture }}\" class=\"\n                       card-img-top\" alt=\"...\">\n                   <div class=\"card-body\">\n                       <h5 class=\"card-title\">{{ \n                           .Name }}</h5>\n                       {{range $ingredient := \n                           .Ingredients}}\n                       <span class=\"badge bg-danger \n                           ingredient\">\n                           {{$ingredient.Name}}\n                       </span>\n                       {{end}}\n                       <ul class=\"steps\">\n                           {{range $step := .Steps}}\n                           <li>{{$step}}</li>\n                           {{end}}\n                       </ul>\n                   </div>\n               </div>\n           </div>\n           {{end}}\n       </div>\n    </body>\n    <script src=\"img/bootstrap.bundle.min.js\"></script>\n    </html>\n    ```", "```go\n    [\n       {\n           \"id\": \"603fa0f0b39c47f0e40659c2\",\n           \"name\": \"Crock Pot Roast\",\n           \"ingredients\": [...],\n           \"steps\": [...],\n           \"imageURL\": \"/assets/images/\n                        crock-pot-roast.jpg\"\n       }\n    ]\n    ```", "```go\n    type Recipe struct {\n       ID          string       `json:\"id\"`\n       Name        string       `json:\"name\"`\n       Ingredients []Ingredient `json:\"ingredients\"`\n       Steps       []string     `json:\"steps\"`\n       Picture     string       `json:\"imageURL\"`\n    }\n    ```", "```go\n    <section class=\"container\">\n           <div class=\"row\">\n               {{range .recipes}}\n               <div class=\"col-md-3\">\n                   <div class=\"card\" style=\"width: \n                    18rem;\">\n                       <img src=\"img/{{ .Picture }}\" \n                       class=\"card-img-top\" alt=\"...\">\n                       <div class=\"card-body\">\n                           <h5 class=\"card-title\">{{ \n                               .Name }}</h5>\n                           {{range $ingredient := \n                               .Ingredients}}\n                           <span class=\"badge bg-danger \n                               ingredient\">\n                               {{$ingredient.Name}}\n                           </span>\n                           {{end}}\n                           <ul class=\"steps\">\n                               {{range $step := .Steps}}\n                               <li>{{$step}}</li>\n                               {{end}}\n                           </ul>\n                           <a href=\"/recipes/{{ .ID }}\" \n                               class=\"btn btn-primary btn-\n                               sm\">See recipe</a>\n                       </div>\n                   </div>\n               </div>\n               {{end}}\n           </div>\n    </section>\n    ```", "```go\n    router.GET(\"/recipes/:id\", RecipeHandler)\n    ```", "```go\n    <html>\n    <head>\n       <title>Recipe not found</title>\n       <link rel=\"stylesheet\" href=\"/assets/css/app.css\">\n       <link href=\"https://cdn.jsdelivr.net/npm/ \t    bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css\"  \t    rel=\"stylesheet\">\n    </head>\n    <body>\n       <section class=\"container not-found\">\n           <h4>Recipe not found /h4>\n           <img src=\"img/404.jpg\" width=\"60%\">\n       </section>\n    </body>\n    <script src=\"img/bootstrap.bundle.min.js\"></script>\n    </html>\n    ```", "```go\n    <nav class=\"container-fluid navbar navbar-expand-lg navbar-light bg-light\">\n       <a class=\"navbar-brand\" href=\"#\">\n           <div class=\"logo\">\n               <img src=\"img/logo.svg\">\n               <span>Recipes</span>\n           </div>\n       </a>\n       <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\"\n           aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n           <span class=\"navbar-toggler-icon\"></span>\n       </button>\n       <div class=\"collapse navbar-collapse\" \n          id=\"navbarSupportedContent\">\n           <ul class=\"navbar-nav mr-auto\">\n               <li class=\"nav-item active\">\n                   <a class=\"nav-link\" href=\"/\">Home</a>\n               </li>\n           </ul>\n       </div>\n    </nav>\n    ```", "```go\n    <html>\n    <head>\n       <title>{{ .recipe.Name }} - Recipes</title>\n       ...\n    </head>\n    <body>\n       {{template \"navbar.tmpl\"}}\n       <section class=\"container recipe\">\n           <div class=\"row\">\n               <div class=\"col-md-3\">\n                   <img src=\"img/{{ .recipe.Picture }}\" \n                    class=\"card-img-top\">\n               </div>\n               <div class=\"col-md-9\">\n                   <h4>{{ .recipe.Name }}</h4>\n                   <ul class=\"list-group list-steps\">\n                       <li class=\"list-group-item \n                         active\">Steps</li>\n                       {{range $step := .recipe.Steps }}\n                       <li class=\"list-group-\n                           item\">{{$step}}</li>\n                       {{end}}\n                   </ul>\n               </div>\n           </div>\n       </section>\n    </body>\n    ...\n    </html>\n    ```", "```go\ngo build -o app main.go\n```", "```go\n./app\n```", "```go\n    mv app $HOME\n    cd $HOME\n    ```", "```go\n    go get github.com/jessevdk/go-assets-builder\n    ```", "```go\n    assets.go source file. The resulting code will look like this:\n\n    ```", "```go\n\n    ```", "```go\n    func loadTemplate() (*template.Template, error) {\n       t := template.New(\"\")\n       for name, file := range Assets.Files {\n           if file.IsDir() || !strings.HasSuffix(name, \n                   \".tmpl\") {\n               continue\n           }\n           h, err := ioutil.ReadAll(file)\n           if err != nil {\n               return nil, err\n           }\n           t, err = t.New(name).Parse(string(h))\n           if err != nil {\n               return nil, err\n           }\n       }\n       return t, nil\n    }\n    ```", "```go\n     func main() {\n       t, err := loadTemplate()\n       if err != nil {\n           panic(err)\n       }\n       router := gin.Default()\n       router.SetHTMLTemplate(t)\n       router.GET(\"/\", IndexHandler)\n       router.GET(\"/recipes/:id\", RecipeHandler)\n       router.GET(\"/assets/*filepath\", StaticHandler)\n       router.Run()\n     }\n    ```", "```go\n    func StaticHandler(c *gin.Context) {\n       filepath := c.Param(\"filepath\")\n       data := Assets.Files[\"/assets\"+filepath].Data\n       c.Writer.Write(data)\n    }\n    ```", "```go\n    router.GET(\"/assets/*filepath\", StaticHandler)\n    ```", "```go\n    func init() {\n       recipes = make([]Recipe, 0)\n       json.Unmarshal(Assets.Files[\"/recipes.json\"].Data, \n          &recipes)\n    }\n    ```", "```go\n    {{template \"/templates/navbar.tmpl\"}}\n    ```", "```go\n    go build -o app\n    mv app $HOME\n    cd $HOME\n    ./app\n    ```", "```go\n    //go:embed assets/* templates/* 404.html recipes.json\n    var f embed.FS\n    ```", "```go\n    func init() {\n       recipes = make([]Recipe, 0)\n       data, _ := f.ReadFile(\"recipes.json\")\n       json.Unmarshal(data, &recipes)\n    }\n    ```", "```go\n    func main() {\n       templ := template.Must(template.New(\"\").ParseFS(f, \"templates/*.tmpl\"))\n       fsys, err := fs.Sub(f, \"assets\")\n       if err != nil {\n           panic(err)\n       }\n       router := gin.Default()\n       router.SetHTMLTemplate(templ)\n       router.StaticFS(\"/assets\", http.FS(fsys))\n       router.GET(\"/\", IndexHandler)\n       router.GET(\"/recipes/:id\", RecipeHandler)\n       router.Run()\n    }\n    ```", "```go\n    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash\n    ```", "```go\n    nvm install 14.16.0 \n    ```", "```go\n    npm install -g create-react-app\n    ```", "```go\n    create-react-app recipes-web\n    ```", "```go\n    3000, as illustrated in the following screenshot:![Figure 5.17 – Local development server\n    ](img/Figure_5.17_B17115.jpg)Figure 5.17 – Local development server\n    ```", "```go\n    import React from 'react';\n    import './App.css';\n    import Recipe from './Recipe';\n    class App extends React.Component {\n     constructor(props) {\n       super(props)\n       this.state = {\n         recipes: [\n           {\n             \"name\": \"Oregano Marinated Chicken\",\n             \"tags\": [\n               \"main\",\n               \"chicken\"\n             ],\n             \"ingredients\": [],\n             \"instructions\": []\n           },\n           {\n             \"name\": \"Green pea soup with cheddar \n                      scallion panini\",\n             \"tags\": [\n               \"soup\",\n               \"main\",\n               \"panini\"\n             ],\n             \"ingredients\": [],\n             \"instructions\": []\n           }\n         ]\n       }\n     }\n     render() {\n       return (<div>\n         {this.state.recipes.map((recipe, index) => (\n           <Recipe recipe={recipe} />\n         ))}\n       </div>);\n     }\n    ```", "```go\n    import React from 'react';\n    import './Recipe.css';\n    class Recipe extends React.Component {\n       render() {\n           return (\n               <div class=\"recipe\">\n                   <h4>{this.props.recipe.name}</h4>\n                   <ul>\n                       {this.props.recipe.ingredients &&\n                        this.props.recipe.ingredients.map(\n                        (ingredient, index) => {\n                           return <li>{ingredient}</li>\n                       })}\n                   </ul>\n               </div>\n           )\n       }\n    }\n    export default Recipe;\n    ```", "```go\n    getRecipes() {\n       fetch('http://localhost:8080/recipes')\n         .then(response => response.json())\n         .then(data => this.setState({ recipes: data }));\n    }\n    ```", "```go\n    constructor(props) {\n       super(props)\n       this.state = {\n         recipes: []\n       }\n       this.getRecipes();\n    }\n    ```", "```go\n    go get github.com/gin-contrib/cors\n    ```", "```go\n    router.Use(cors.Default())\n    ```", "```go\n    router.Use(cors.New(cors.Config{\n       AllowOrigins:     []string{\"http://localhost\n                          :3000\"},\n       AllowMethods:     []string{\"GET\", \"OPTIONS\"},\n       AllowHeaders:     []string{\"Origin\"},\n       ExposeHeaders:    []string{\"Content-Length\"},\n       AllowCredentials: true,\n       MaxAge: 12 * time.Hour,\n    }))\n    ```", "```go\n    npm install @auth0/auth0-react\n    ```", "```go\n    import { Auth0Provider } from \"@auth0/auth0-react\";\n    ReactDOM.render(\n     <Auth0Provider\n       domain=\"AUTH0_DOMAIN\"\n       clientId=\"AUTH_CLIENT_ID\"\n       redirectUri={window.location.origin}\n     >\n       <App />\n     </Auth0Provider>,\n     document.getElementById(\"root\")\n    );\n    ```", "```go\n    import React from 'react';\n    import { useAuth0 } from \"@auth0/auth0-react\";\n    import Profile from './Profile';\n    const Navbar = () => {\n       const { isAuthenticated, loginWithRedirect, logout,\n               user } = useAuth0();\n       return (\n           <nav class=\"navbar navbar-expand-lg navbar-\n               light bg-light\">\n               <a class=\"navbar-brand\" \n                   href=\"#\">Recipes</a>\n               <button class=\"navbar-toggler\" \n               type=\"button\" data-toggle=\"collapse\" data-\n               target=\"#navbarTogglerDemo02\" aria-\n               controls=\"navbarTogglerDemo02\" aria-\n               expanded=\"false\" aria-label=\"Toggle \n               navigation\">\n                   <span class=\"navbar-toggler-\n                                icon\"></span>\n               </button>\n               <div class=\"collapse navbar-collapse\" \n                           id=\"navbarTogglerDemo02\">\n                   <ul class=\"navbar-nav ml-auto\">\n                       <li class=\"nav-item\">\n                           {isAuthenticated ? (<Profile \n                               />) : (\n                               <a class=\"nav-link active\" \n                                         onClick={() => \n                                     loginWithRedirect()}> \n                                    Login</a>\n                           )}\n                       </li>\n                   </ul>\n               </div>\n           </nav >\n       )\n    }\n    export default Navbar;\n    ```", "```go\n    npm install bootstrap\n    ```", "```go\n    import 'bootstrap/dist/css/bootstrap.min.css';\n    import 'bootstrap/dist/js/bootstrap.min.js';\n    ```", "```go\n    render() {\n       return (<div>\n         <Navbar />\n         {this.state.recipes.map((recipe, index) => (\n           <Recipe recipe={recipe} />\n         ))}\n       </div>);\n    }\n    ```"]