- en: 'Chapter 5: Serving Static HTML in Gin'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to build a **static web application** that
    consumes Gin-based **API** responses. Along the way, you will learn how to serve
    web assets (JavaScript, **Cascading Style Sheets** (**CSS**), and images) and
    render **HTML** templates with Gin. Finally, you will cover how to build a self-contained
    web application with Go and resolve **cross-origin resource sharing** (**CORS**)
    policy errors with a Gin middleware.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will focus on the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Serving static files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering HTML templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a self-contained web application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a **Single-Page Application** (**SPA**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be able to build a SPA with React to consume
    your RESTful API endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow the instructions in this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A complete understanding of the previous chapter—this chapter is a follow-up
    of the previous one and it will use the same source code. Hence, some snippets
    won't be explained, to avoid repetition.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Previous experience with a frontend development, and ideally knowledge of a
    web framework such as Angular, React, or Vue.js.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for this chapter is hosted on GitHub at [https://github.com/PacktPublishing/Building-Distributed-Applications-in-Gin/tree/main/chapter05](https://github.com/PacktPublishing/Building-Distributed-Applications-in-Gin/tree/main/chapter05).
  prefs: []
  type: TYPE_NORMAL
- en: Serving static files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, you have seen how to render API responses in `index.html`
    file and then move on to serving static files, such as JavaScript, CSS files,
    and images from a filesystem, and eventually render HTML templates.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start serving static files, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new project folder and open it with the `index.html` file to display
    a `Hello world` message with an `<h2>` tag, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, with the `go get` command, install `github.com/gin-gonic/gin`, write
    a `main.go` file, and define a router with the `gin.Default()` method. Then, define
    a route for the `index` page and register an `IndexHandler` handler on it. The
    route handler will serve the `index.html` file using the `c.File` method. The
    complete `main.go` file looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using your favorite browser, head to [http://localhost:8080](http://localhost:8080),
    and you should see a **Hello world** message, as follows:![Figure 5.2 – Serving
    index.html
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.2_B17115.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.2 – Serving index.html
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, update the `index.html` file to display some recipes using the following
    code. It references static assets for page styling (`app.css`) and recipes'' images
    (`burger.jpg` and `pizza.jpg`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The static files are stored under an `assets` folder in the project root repository.
    Create an `assets` folder with the following structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To be able to load those assets from `index.html`, the server should serve
    them as well. That''s where the `router.Static` method comes into play. Add the
    following instruction to serve the `assets` folder under the `/assets` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Rerun the application—the images and CSS file should now be accessible from
    http://localhost:8080/assets/PATH, as illustrated in the following screenshot:![Figure
    5.3 – Serving assets
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.3_B17115.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.3 – Serving assets
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Head back to your browser and refresh the page—it should now display the following
    results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.4 – Serving CSS and images with Gin'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.4_B17115.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.4 – Serving CSS and images with Gin
  prefs: []
  type: TYPE_NORMAL
- en: The page is pretty basic, as you can tell! You now can serve static assets with
    Gin.
  prefs: []
  type: TYPE_NORMAL
- en: So far, you have seen how to serve HTML and static files from a Gin application.
    In the following section, we will cover how to create HTML templates and render
    dynamic content.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering HTML templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will add the functionality to display a list of recipes
    dynamically by generating an `index.html` file from the server side. The Gin framework
    uses the Go standard `text/template` and `html/template` packages in the background
    to generate text and HTML outputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `Recipe` struct. The structure will hold just two fields: a name and
    picture. This can be represented as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, update the `IndexHandler` handler to create a `recipes` slice. Then,
    call the `c.HTML` method to render the `index.tmpl` file by passing the `recipes`
    slice. To keep things simple, the list of recipes is kept in memory, which is
    why we will initialize the `recipes` slice with two hardcoded recipes, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `.tmpl` extension is not required; however, it's recommended to be consistent
    within a project for clarity.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a `templates` folder in the root of the project folder, and write an
    `index.tmpl` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `range` keyword is used to iterate over all recipes in the `recipes` slice.
    For each recipe in the range of recipes, display its picture and name. Within
    a range, each recipe becomes `{{.}}` and the recipe properties therefore become
    `{{.Name}}` or `{{.Picture}}`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, tell Gin to load templates from the `templates` directory. The templates
    will be loaded once from disk at server startup; therefore, the application will
    serve the HTML pages faster. The code is illustrated in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Rerun the application, and head once again to `localhost:8080`. A list of recipes
    will be displayed, as illustrated in the following screenshot:![Figure 5.5 – Iterating
    over items with range
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.5_B17115.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `Recipe` struct to mirror the `recipe` fields, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `init()` method, read the JSON file and encode its content to the `recipes`
    slice using the `json.Unmarshal` method, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, update the `IndexHandler` handler to pass the `recipes` slice to the
    `index.tmpl` template in a variable named `recipes`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, customize the template file to display the recipe ingredients and
    steps using the `range` keyword. The recipe attributes are accessed using a *dot*
    with the field name (`{{ .FieldName }}`), as illustrated in the following code
    snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For further explanation about advanced template actions and operators, refer
    to the Go official documentation at [https://golang.org/pkg/text/template/](https://golang.org/pkg/text/template/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Rerun the application, and refresh the page on your browser. This time, an
    aesthetically pleasing **user interface** (**UI**) will be displayed, as illustrated
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Rendering data with Go templates'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_05_06_v2.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.6 – Rendering data with Go templates
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, your application looks much nicer. All you did was add some
    CSS with the Bootstrap framework (To know more about the framework, refer [https://getbootstrap.com/](https://getbootstrap.com/));
    so, from a functionality point of view, nothing has changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you go back to the terminal, you will notice that the images and other assets
    were served from the HTTP server, as we can see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 – Serving images'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.7_B17115.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.7 – Serving images
  prefs: []
  type: TYPE_NORMAL
- en: Great! The assets are served from the Gin server, and you can now build a dynamic
    web page.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the view templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For now, the application we have built displays a list of recipes. You can take
    this further and create a recipe page where users can see the full recipe. To
    do so, you need to create a unique identifier for each recipe; that way, you can
    have a unique URL to access each recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add an `id` attribute to the recipe''s items in the `recipes.json` file as
    follows, or you can download the `recipes.json` file from the `chapter05` folder
    located in the book''s GitHub repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the `ID` field to the `Recipe` struct, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To be able to navigate to the recipe page, add a button to each recipe item
    in the `index.tmpl` file. When clicking on the button, the user will be redirected
    to the target recipe page. The `{{ .ID }}` expression will be evaluated and replaced
    by the recipe ID. The code is illustrated in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With that being said, serve the recipe page at `/recipes/:id`. Take note of
    the `:id` part in this route. The two *dots* at the beginning indicate that this
    is a dynamic route. The route will store the recipe `id` attribute in the route
    parameter named `ID`, which we can access in the `RecipeHandler` handler. Here''s
    the code you need:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following code snippet contains the route-handler code, and is self-explanatory.
    It loops through the `recipes` slice, looking for a recipe that matches the ID
    given in the request parameter. If a match is found, then the `recipe.tmpl` file
    will be rendered with the data of the recipe. If not, the user will be redirected
    to a `404.html` error page will simply display a 404 illustration with a `Recipe
    not found` message. This can be done using the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To test out the new changes, rerun the server, and head back to the browser
    and refresh the page. A list of recipes will be returned, but this time we have
    a **See recipe** button, as illustrated in the following screenshot:![Figure 5.8
    – Home page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17115_05_08_v2.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.8 – Home page
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **See recipe** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You''ll be redirected to the **Recipe** page, where you can see a complete
    recipe''s ingredients and instructions, as illustrated in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.9 – Recipes page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.9_B17115.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.9 – Recipe page
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also share your favorite recipes by sharing their URLs with your friends.
    If a particular recipe doesn''t exist anymore or you''ve shared a wrong ID for
    a recipe, then a 404 page will be displayed, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.10 – 404 error page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.10_B17115.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.10 – 404 error page
  prefs: []
  type: TYPE_NORMAL
- en: You might have noticed that you used a navigation bar to be able to switch easily
    between the home page (where a list of recipes is being displayed) and the recipe
    page. The same code is being used in two different template files. To avoid duplicating
    code, you can create **reusable templates**.
  prefs: []
  type: TYPE_NORMAL
- en: Creating reusable templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **navbar** is a common functionality that will be reused across multiple
    pages of our application. In order to create a reusable template, proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `navbar.tmpl` file in the `templates` folder and place the navbar
    code in it, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, remove the navbar lines of code from the `index.tmpl` and `recipe.tmpl`
    files and import the `navbar` template from the `navbar.tmpl` file with the following
    instructions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Your reusable template is created.
  prefs: []
  type: TYPE_NORMAL
- en: 'The line containing `{{template "navbar.tmpl"}}` is used to dynamically load
    the navbar. As with the navbar, you can create reusable templates from common
    pieces of your application such as header, footer, forms, and so on. The directory
    structure of your project at this stage should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.11 – Project structure'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.11_B17115.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.11 – Project structure
  prefs: []
  type: TYPE_NORMAL
- en: So far, you have seen how to run the application locally by compiling the source
    code. But what if you wanted to build a binary of our web application so that
    we can deploy it remotely or share it with others? Let's have a look at how to
    do this.
  prefs: []
  type: TYPE_NORMAL
- en: Building a self-contained web application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Luckily, Go is a compiled language, which means that you can create an executable
    or binary with the needed dependencies, all with a single command, as illustrated
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can build an executable for different architectures or platforms (Windows,
    macOS, Linux, and so on) with `GOOS` and `GOARCH` environment variables.
  prefs: []
  type: TYPE_NORMAL
- en: The command creates an executable called `app` in your current directory. By
    default, Go uses the name of the application directory for naming the executable.
    However, you can specify a different name or location for the executable with
    a `-o` flag.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now execute the binary with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The server will start on port `8080` as usual, and you can access the web application
    from `localhost:8080`, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.12 – Running an executable'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.12_B17115.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.12 – Running an executable
  prefs: []
  type: TYPE_NORMAL
- en: The application is working as expected because the HTML templates and assets
    are located in the same folder where the executable is being executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'What if you run the binary from a different directory? In that case, you would
    need to follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the executable to your home directory with the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Rerun the application—it should crash immediately due to the `templates` folder
    not being found. You will see something that looks like this:![Figure 5.13 – Application
    stack traces
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.13_B17115.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.13 – Application stack traces
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can copy the `templates` and `assets` folders to the home directory. However,
    it's often cumbersome to remember to update all the file references when upgrading
    or moving a binary to a new location. A better solution is to embed all static
    files in a single binary.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`go-assets-builder` is a tool that converts any text or binary file into Go
    source code, making it the perfect choice for embedding assets into Go applications.
    Install the `go-assets-builder` package with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, invoke the `go-assets-builder` command to generate Go code from the static
    files, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: var Assets = assets.NewFileSystem(map[string][]string{
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"/": []string{"assets", "templates", "404.html",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"recipes.json"}, "/assets/css":'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[]string{"app.css"}, "/assets/images":'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[]string{"stuffed-cornsquash.jpg", "curry-chicken-'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'salad.jpg"}, "/templates": []string{"navbar.tmpl",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"index.tmpl", "recipe.tmpl"}},'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: map[string]*assets.File{
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"/": &assets.File{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Path:     "/",
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'FileMode: 0x800001ed,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Mtime:    time.Unix(1615118299,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 1615118299722824447),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Data:     nil,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '},  "/templates/navbar.tmpl": &assets.File{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Path:     "/templates/navbar.tmpl",
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'FileMode: 0x1a4,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Mtime:    time.Unix(1614862865,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 1614862865957528581),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Data:     []byte(_Assets9a0a5c784c66e5609ac
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d084702e97a6a733e0d56),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}, "/recipes.json": &assets.File{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Path:     "/recipes.json",
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'FileMode: 0x1a4,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: "Mtime:    time.Unix(1614782782,  \t \t \t \t                           1614782782296236029),"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Data:     []byte(_Assets142ce9f9ba8b43eeb97b8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 3c79ea872ed40e6cba1),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}, "")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, update `main.go` to load the HTML files. The templates are accessible
    via the `Assets.Files` map structure. Make sure to import the `html/template`
    library. The code is illustrated in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, update the HTTP router to call the `loadTemplate` method when the server
    is asked to serve `index.tmpl`, `recipe.tmpl`, or `navbar.tmpl` templates, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For assets files (CSS and images), define a custom HTTP handler to serve the
    right asset based on the `filepath` parameter, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, define a route for the `assets` folder with a `filepath` parameter, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `recipes.json` file as well, to load it from the `Assets.Files`
    map instead of the disk, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure to update the `navbar` reference in `index.tmpl` and `recipe.tmpl`
    as well, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, fix the `templates` path in both `RecipeHandler` and `IndexHandler`
    handlers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, build the application with the new changes. Issue the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This time, the application will be functional, and all assets will be loaded
    from the binary. You can see the result here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.14 – Embedding web application assets'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_05_14_v2.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.14 – Embedding web application assets
  prefs: []
  type: TYPE_NORMAL
- en: You can now share the binary with your friends and deploy it easily on a remote
    server.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 8*](B17115_08_Final_JM_ePub.xhtml#_idTextAnchor131)*, Deploying
    the Application on AWS*, we will explore how to deploy your distributed web application
    on the cloud with Docker and Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Bundling static files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we are using Go 1.16, which comes with new features and enhancements
    such as embedded files being supported without the need for an external package
    such as `go-assets-builder`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can use `gvm install go1.16` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go 1.16 introduced a `//go:embed` directive that allows you to include contents
    of files and directories within a Go application. You can do so by implementing
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `main.go`, define an `embed.FS` variable to hold a group of files. Then,
    define a comment just above the variable declaration, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `init()` function to read the `recipes.json` file from the `FS`
    variable, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, use the `http.FS` file to create an HTTP filesystem to serve `assets`
    files, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Rebuild the binary with the `go build` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Make sure to remove the `/templates` prefixes from the HTTP handlers and template
    files before building the binary.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The final result is a single web server binary ready for distribution!
  prefs: []
  type: TYPE_NORMAL
- en: Building a SPA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While you can build complete web applications with Gin by rendering HTML templates
    and serving the static files, as the application grows it becomes hard to maintain
    it. That's why you can adopt a popular frontend JavaScript framework such as Angular,
    React, or Vue.js to build your SPA. In this section we will go with React, but
    you can get the same results with other JavaScript frameworks as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'The application we''ll build will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Display the list of all recipes on the home page (for all users).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let users sign in with their username and password.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let users create new recipes (logged-in users only).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First of all, we will need to make sure that Node.js is installed on your system.
    You can install the **long-term support** (**LTS**) version (14.16.0) from the
    official page at [https://nodejs.org/en/download/](https://nodejs.org/en/download/),
    or you can use the **Node Version Manager** (**NVM**) to install Node.js easily,
    based on your **operating system** (**OS**).
  prefs: []
  type: TYPE_NORMAL
- en: 'To install NVM, proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This could take anywhere from a few seconds to a few minutes, but once your
    installation has completed, issue the following command to install the LTS version
    of Node.js:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With Node.js installed, we're ready to build our web application with React.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with React
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, you will set up your React environment. To do so, apply the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your terminal and navigate to your workspace. Then, install `create react
    app` with the following command. The **command-line interface** (**CLI**) simplifies
    the setup process of a React environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create a React project with the CRA CLI. The project name is `recipes-web`,
    as we can see here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is the command output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.15 – Setup of new React project'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_5.15_B17115.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.15 – Setup of a new React project
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After running the preceding command, the project structure will look like this.
    The project is created with all of the proper behind-the-scenes configurations
    automatically hooked up:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.16 – React project structure'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_5.16_B17115.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.16 – React project structure
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Make sure to create a GitHub repository for your web application and push all
    the changes to the remote repository.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Navigate to the `recipes-web` folder and enter the following commands to launch
    the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Head to your browser and navigate to `Localhost:3000.` `Apart` `from;` you
    will see something similar to the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.18 – React “Hello World” application'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.18_B17115.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.18 – React "Hello World" application
  prefs: []
  type: TYPE_NORMAL
- en: Right now, your application doesn't do a whole lot. It doesn't look like much,
    either. Let's build the recipe listing, using React components.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring React components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the basic foundations when building a SPA is the usage of components.
    Throughout this section, we'll explore how to build a **Recipes** dashboard based
    on React components.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing you''re going to do is create an `App` component to list the
    `recipes` array by referencing a `Recipe` element. To do so, proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `App.js` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The component constructor defines a `recipes` array in the `state` object. The
    array stores a list of hardcoded recipes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, create a `Recipe` component to display the recipe properties (name, steps,
    ingredients, and so on). In the `src` directory, create a new file named `Recipe.js`
    and add the following content to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a style sheet called `Recipe.css` and add the appropriate style rules
    to improve the look and feel of the UI elements. Then, import the style sheet
    in `Recipe.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you''ve done this, save all of your changes and preview it in your browser,
    and you''ll see something that looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.19 – Rendering App component'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.19_B17115.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.19 – Rendering the App component
  prefs: []
  type: TYPE_NORMAL
- en: Great! You have successfully built a SPA to list recipes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right now, the list of recipes is static. You will fix that by calling the
    `Recipes` API, built in the previous chapter. To do so, proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: First, look here at the architecture you're going to build:![Figure 5.20 – Application
    architecture
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.20_B17115.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, call the method on the `App` component constructor with the following
    instruction:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure the API is being served on port `8080`, as follows:![Figure 5.21 –
    Recipes API logs
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.21_B17115.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.21 – Recipes API logs
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Head back to your browser, and you should see a blank page. If you open the
    browser debugging console, you''ll see that the call to the API has been blocked
    by a CORS policy, as illustrated in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.22 – CORS errors'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17115_05_22_v2.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.22 – CORS errors
  prefs: []
  type: TYPE_NORMAL
- en: Because the `Recipes` API and web application are running in different ports,
    you need to set some headers on the API to allow the **Cross-Origin Resource Sharing
    (CORS)**.
  prefs: []
  type: TYPE_NORMAL
- en: Resolving cross-origin requests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, the API uses a same-origin policy to limit the ability for the API
    to interact with resources outside of the source domain. We can bypass the same-origin
    policy with CORS.
  prefs: []
  type: TYPE_NORMAL
- en: 'To resolve the CORS issues, proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the Gin official CORS middleware with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, update the `main.go` file of the `Recipes` API project to allow all origins
    by defining the `cors.Default()` method as a middleware, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The middleware will be executed before handling the incoming HTTP request.
    The `cors.Default()` method will allow all HTTP methods and origins, but you can
    restrict the requests to trusted origins. Define the origins and allow incoming
    HTTP methods with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Rerun the API server and head back to your browser, and refresh the web application
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This time, the HTTP request should be successful, and you should see a list
    of recipes, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.23 – List of recipes'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.23_B17115.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.23 – List of recipes
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can take the project further and add an authentication layer with
    Auth0, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For a step-by-step guide on how to enable authentication with Auth0, check the
    previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the **Auth0 dashboard** ([https://manage.auth0.com/dashboard](https://manage.auth0.com/dashboard)),
    and create an application of type **Single Page Web Applications**, as illustrated
    in the following screenshot:![Figure 5.24 – SPA on Auth0
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.24_B17115.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.24 – SPA on Auth0
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, click on `Localhost:3000.` `Apart` `from,` as illustrated in the following
    screenshot. The URL will be used by Auth0 to redirect users after they have authenticated:![Figure
    5.25 – Configuring allowed callback URLs
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.25_B17115.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.25 – Configuring allowed callback URLs
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Set the `localhost:3000` to authorize the application to make requests to the
    Auth0 API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, to integrate Auth0 into your web application, install the Auth0 React
    **software development kit** (**SDK**). Run the following command within your
    project folder to install the SDK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, wrap the root component of the application with `Auth0Provider`. Update
    the `index.js` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The Auth0 component takes the following properties:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`a.` `domain`: The Auth0 domain. The value is available under the `b.` `clientId`:
    The Auth0 client ID. The value is also available under the `c.` `redirectUri`:
    The `ReactDOM.render` method looks for the root element defined in `index.html`
    (located inside the `public` folder) and loads the Auth0 component on it.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then, create a `Navbar` component with a login button. When the user clicks
    on the login button, the `loginWithRedirect` method from the `useAuth0()` hook
    will be called. The method will redirect the user to the Auth0 login page, where
    they can authenticate. Upon successful authentication, Auth0 will redirect the
    user back to the application based on the redirection URL defined earlier. The
    code is illustrated in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To prevent any rendering errors, the `isAuthenticated` property is used to check
    if Auth0 has authenticated the user before displaying the logged-in username and
    picture using the `Profile` component.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the code, we''re using existing UI elements provided by the Bootstrap framework.
    The framework can be installed with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once installed, reference the framework with an `import` statement on top of
    `index.js`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the `Navbar` component to `App.js`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Preview your application after this change, and it should look like this:![Figure
    5.26 – Rendering list of recipes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.26_B17115.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.26 – Rendering list of recipes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, click on **Login**. You''ll be redirected to the Auth0 login page, where
    you can sign up for a new account or sign in with an existing account, as illustrated
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.27 – Auth0 universal login page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.27_B17115.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.27 – Auth0 universal login page
  prefs: []
  type: TYPE_NORMAL
- en: 'Your authentication has been successful! You''ll be redirected to the home
    page, where you can browse through the list of recipes returned by the `Recipes`
    API, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.28 – Page listing recipes for a logged-in user'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.28_B17115.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.28 – Page listing recipes for a logged-in user
  prefs: []
  type: TYPE_NORMAL
- en: The application also displays the logged-in username and profile picture. The
    information is available through the `user` property exposed by the `useAuth0()`
    hook. You have now successfully created a SPA.
  prefs: []
  type: TYPE_NORMAL
- en: Your web application is pretty simple in what it does, but by building it from
    scratch, we covered almost every little interesting detail React brings to the
    table. You can take this further and implement a new recipe form for logged-in
    users to post new recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to serve HTML templates with the Gin framework
    and how to create reusable templates and serve static assets. We covered how to
    implement a SPA with the React framework to consume a Gin RESTful API and how
    to resolve CORS issues with Gin.
  prefs: []
  type: TYPE_NORMAL
- en: We have also explored how Auth0 allows you to quickly add authentication to
    your React application. Finally, we learned how to build a self-contained web
    application by embedding the application assets during build time.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore tips and best practices to architect a
    scalable, distributed web application with Gin.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How would you create reusable templates for the header and footer?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How would you create a `NewRecipe` component with React?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How would you build a self-contained binary for Windows, Mac, and Linux?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Full-Stack React Projects - Second Edition*`,` by Shama Hoque, Packt Publishing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Full-Stack React, TypeScript, and Node*, by David Choi, Packt Publishing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
