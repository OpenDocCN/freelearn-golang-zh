["```go\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<feed\n   xmlns=\"http://www.w3.org/2005/Atom\"\n   xmlns:media=\"http://search.yahoo.com/mrss/\">\n   <title>recipes</title>\n   <entry>\n       <author>\n           <name>/u/nolynskitchen</name>\n           <uri>https://www.reddit.com/user/nolynskitchen\n           </uri>\n       </author>\n       <category term=\"recipes\" label=\"r/recipes\"/>\n       <id>t3_m4uvlm</id>\n       <media:thumbnail url=\"https://b.thumbs.\n          redditmedia.com\n          /vDz3xCmo10TFkokqy9y1chopeIXdOqtGA33joNBtTDA.jpg\" \n        />\n       <link href=\"https://www.reddit.com/r/recipes\n                  /comments/m4uvlm/best_butter_cookies/\" />\n       <updated>2021-03-14T12:57:05+00:00</updated>\n       <title>Best Butter Cookies!</title>\n   </entry>\n</feed>\n```", "```go\n    type Feed struct {\n       Entries []Entry `xml:\"entry\"`\n    }\n    type Entry struct {\n       Link struct {\n           Href string `xml:\"href,attr\"`\n       } `xml:\"link\"`\n       Thumbnail struct {\n           URL string `xml:\"url,attr\"`\n       } `xml:\"thumbnail\"`\n       Title string `xml:\"title\"`\n    } \n    ```", "```go\n    func GetFeedEntries(url string) ([]Entry, error) {\n       client := &http.Client{}\n       req, err := http.NewRequest(\"GET\", url, nil)\n       if err != nil {\n           return nil, err\n       }\n       req.Header.Add(\"User-Agent\", \"Mozilla/5.0 (\n          Windows NT 10.0; Win64; x64) AppleWebKit/537.36 \n          (KHTML, like Gecko) Chrome/70.0.3538.110 \n          Safari/537.36\")\n       resp, err := client.Do(req)\n       if err != nil {\n           return nil, err\n       }\n       defer resp.Body.Close()\n       byteValue, _ := ioutil.ReadAll(resp.Body)\n       var feed Feed\n       xml.Unmarshal(byteValue, &feed)\n       return feed.Entries, nil\n    }\n    ```", "```go\n    req.Header.Add(\"User-Agent\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\") \n    ```", "```go\n    func main() {\n       router := gin.Default()\n       router.POST(\"/parse\", ParserHandler)\n       router.Run(\":5000\")\n    }\n    ```", "```go\n    func ParserHandler(c *gin.Context) {\n       var request Request\n       if err := c.ShouldBindJSON(&request); err != nil {\n           c.JSON(http.StatusBadRequest, gin.H{\n              \"error\": err.Error()})\n           return\n       }\n       entries, err := GetFeedEntries(request.URL)\n       if err != nil {\n           c.JSON(http.StatusInternalServerError, \n              gin.H{\"error\": \"Error while parsing \n                     the rss feed\"})\n           return\n       }\n       c.JSON(http.StatusOK, entries)\n    } \n    ```", "```go\n    type Request struct {\n      URL string `json:\"url\"`\n    }\n    ```", "```go\n    var client *mongo.Client\n    var ctx context.Context\n    func init() {\n       ctx = context.Background()\n       client, _ = mongo.Connect(ctx, \n          options.Client().ApplyURI(os.Getenv(\"MONGO_URI\")))\n    }\n    ```", "```go\n    func ParserHandler(c *gin.Context) {\n       ...\n       collection := client.Database(os.Getenv(\n          \"MONGO_DATABASE\")).Collection(\"recipes\")\n       for _, entry := range entries[2:] {\n           collection.InsertOne(ctx, bson.M{\n               \"title\":     entry.Title,\n               \"thumbnail\": entry.Thumbnail.URL,\n               \"url\":       entry.Link.Href,\n           })\n       }\n       ...\n    }\n    ```", "```go\n    MONGO_URI=\"mongodb://admin:password@localhost:27017/test?authSource=admin&readPreference=primary&appname=MongoDB%20Compass&ssl=false\" MONGO_DATABASE=demo go run main.go \n    ```", "```go\n    8080 and the server on port 5672.\n    ```", "```go\n    docker logs -f CONTAINER_ID \n    ```", "```go\n    go get github.com/streadway/amqp\n    ```", "```go\n    var channelAmqp *amqp.Channel\n    func init() {\n       amqpConnection, err := amqp.Dial(os.Getenv(\n          \"RABBITMQ_URI\"))\n       if err != nil {\n           log.Fatal(err)\n       }\n       channelAmqp, _ = amqpConnection.Channel()\n    }\n    ```", "```go\n    func ParserHandler(c *gin.Context) {\n       var request Request\n       if err := c.ShouldBindJSON(&request); err != nil {\n           c.JSON(http.StatusBadRequest, gin.H{\n              \"error\": err.Error()})\n           return\n       }\n       data, _ := json.Marshal(request)\n       err := channelAmqp.Publish(\n           \"\",\n           os.Getenv(\"RABBITMQ_QUEUE\"),\n           false,\n           false,\n           amqp.Publishing{\n               ContentType: \"application/json\",\n               Body:        []byte(data),\n           })\n       if err != nil {\n           fmt.Println(err)\n           c.JSON(http.StatusInternalServerError, \n              gin.H{\"error\": \"Error while publishing \n              to RabbitMQ\"})\n           return\n       }\n       c.JSON(http.StatusOK, map[string]string{\n          \"message\": \"success\"})\n    }\n    func main() {\n      router := gin.Default()\n      router.POST(\"/parse\", ParserHandler)\n      router.Run(\":5000\")\n    }\n    ```", "```go\n    RABBITMQ_URI=\"amqp://user:password@localhost:5672/\" RABBITMQ_QUEUE=rss_urls go run main.go\n    ```", "```go\n    func main() {\n       amqpConnection, err := amqp.Dial(os.Getenv(\n           \"RABBITMQ_URI\"))\n       if err != nil {\n           log.Fatal(err)\n       }\n       defer amqpConnection.Close()\n       channelAmqp, _ := amqpConnection.Channel()\n       defer channelAmqp.Close()\n       forever := make(chan bool)\n       msgs, err := channelAmqp.Consume(\n           os.Getenv(\"RABBITMQ_QUEUE\"),\n           \"\",\n           true,\n           false,\n           false,\n           false,\n           nil,\n       )\n       go func() {\n           for d := range msgs {\n               log.Printf(\"Received a message: %s\", d.Body)\n           }\n       }()\n       log.Printf(\" [*] Waiting for messages. \n                  To exit press CTRL+C\")\n       <-forever\n    }\n    ```", "```go\n    RABBITMQ_URI=\"amqp://user:password@localhost:5672/\" RABBITMQ_QUEUE=rss_urls go run main.go\n    ```", "```go\ngo func() {\n       for d := range msgs {\n           log.Printf(\"Received a message: %s\", d.Body)\n           var request Request\n           json.Unmarshal(d.Body, &request)\n           log.Println(\"RSS URL:\", request.URL)\n           entries, _ := GetFeedEntries(request.URL)\n           collection := mongoClient.Database(os.Getenv(\n              \"MONGO_DATABASE\")).Collection(\"recipes\")\n           for _, entry := range entries[2:] {\n               collection.InsertOne(ctx, bson.M{\n                   \"title\":     entry.Title,\n                   \"thumbnail\": entry.Thumbnail.URL,\n                   \"url\":       entry.Link.Href,\n               })\n           }\n       }\n}()\n```", "```go\nRABBITMQ_URI=\"amqp://user:password@localhost:5672/\" RABBITMQ_QUEUE=rss_urls MONGO_URI=\"mongodb://admin:password@localhost:27017/test?authSource=admin&readPreference=primary&appname=MongoDB%20Compass&ssl=false\" MONGO_DATABASE=demo go run main.go \n```", "```go\nrouter.GET(\"/dashboard\", IndexHandler)\n```", "```go\ntype Recipe struct {\n   Title     string `json:\"title\" bson:\"title\"`\n   Thumbnail string `json:\"thumbnail\" bson:\"thumbnail\"`\n   URL       string `json:\"url\" bson:\"url\"`\n} \n```", "```go\nfunc IndexHandler(c *gin.Context) {\n   cur, err := collection.Find(ctx, bson.M{})\n   if err != nil {\n       c.JSON(http.StatusInternalServerError, \n           gin.H{\"error\": err.Error()})\n       return\n   }\n   defer cur.Close(ctx)\n   recipes := make([]Recipe, 0)\n   for cur.Next(ctx) {\n       var recipe Recipe\n       cur.Decode(&recipe)\n       recipes = append(recipes, recipe)\n   }\n   c.HTML(http.StatusOK, \"index.tmpl\", gin.H{\n       \"recipes\": recipes,\n   })\n} \n```", "```go\n<section class=\"container\">\n       <div class=\"row\">\n           <ul class=\"list-group\">\n               {{range .recipes}}\n               <li class=\"list-group-item\">\n                   <div style=\"width: 100%;\">\n                       <img src=\"img/{{ .Thumbnail }}\" \n                          class=\"card-img-top thumbnail\">\n                       <span class=\"title\">{{ .Title \n                       }}</span>\n                       <a href=\"{{ .URL }}\" target=\"_blank\"\n                          class=\"btn btn-warning \n                          btn-sm see_recipe\">See recipe</a>\n                   </div>\n               </li>\n               {{end}}\n           </ul>\n       </div>\n</section> \n```", "```go\nFROM golang:1.16\nWORKDIR /go/src/github.com/worker\nCOPY main.go go.mod go.sum ./\nRUN go mod download\nRUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .\nFROM alpine:latest \nRUN apk --no-cache add ca-certificates\nWORKDIR /root/\nCOPY --from=0 /go/src/github.com/worker/app .\nCMD [\"./app\"]\n```", "```go\ndocker build -t worker . \n```", "```go\ndocker image ls\n```", "```go\ndocker run -d -e MONGO_URI=\"mongodb://admin:password@mongodb:27017/test?authSource=admin&readPreference=primary&appname=MongoDB%20Compass&ssl=false\" -e MONGO_DATABASE=demo2 -e RABBITMQ_URI=\"amqp://user:password@rabbitmq:5672/\" -e RABBITMQ_QUEUE=rss_urls --link rabbitmq --link mongodb --name worker worker \n```", "```go\n    version: \"3.9\"\n    services:\n     worker:\n       image: worker\n       environment:\n         - MONGO_URI=\"mongodb://admin:password\n               @mongodb:27017/test?authSource=admin\n               &readPreference=primary&ssl=false\"\n         - MONGO_DATABASE=demo2\n         - RABBITMQ_URI=amqp://user:password@rabbitmq:5672\n         - RABBITMQ_QUEUE=rss_urls\n       networks:\n         - app_network\n       external_links:\n         - mongodb\n         - rabbitmq\n    networks:\n     app_network:\n       external: true\n    ```", "```go\n    docker network create app_network\n    ```", "```go\n    docker run -d --name rabbitmq -e RABBITMQ_DEFAULT_USER=user -e RABBITMQ_DEFAULT_PASS=password -p 8080:15672 -p 5672:5672 --network app_network rabbitmq:3-management\n    ```", "```go\n    docker-compose up -d\n    ```", "```go\n    docker-compose up -d --scale worker=5\n    ```", "```go\n    https://www.reddit.com/r/recipes/.rss\n    https://www.reddit.com/r/food/.rss\n    https://www.reddit.com/r/Cooking/.rss\n    https://www.reddit.com/r/IndianFood/.rss\n    https://www.reddit.com/r/Baking/.rss\n    https://www.reddit.com/r/vegan/.rss\n    https://www.reddit.com/r/fastfood/.rss\n    https://www.reddit.com/r/vegetarian/.rss\n    https://www.reddit.com/r/cookingforbeginners/.rss\n    https://www.reddit.com/r/MealPrepSunday/.rss\n    https://www.reddit.com/r/EatCheapAndHealthy/.rss\n    https://www.reddit.com/r/Cheap_Meals/.rss\n    https://www.reddit.com/r/slowcooking/.rss\n    https://www.reddit.com/r/AskCulinary/.rss\n    https://www.reddit.com/r/fromscratch/.rss\n    ```", "```go\n    #!/bin/bash\n    while IFS= read -r thread\n    do\n       printf \"\\n$thread\\n\"\n       curl -X POST http://localhost:5000/parse -d \n         '{\"url\":\"$thread\"}' http://localhost:5000/parse\n    done < \"threads\" \n    ```", "```go\n    chmod +x bulk.sh\n    ./bulk.sh \n    ```", "```go\n    FROM golang:1.16\n    WORKDIR /go/src/github.com/api\n    COPY . .\n    RUN go mod download\n    RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .\n    FROM alpine:latest \n    RUN apk --no-cache add ca-certificates\n    WORKDIR /root/\n    COPY --from=0 /go/src/github.com/api/app .\n    CMD [\"./app\"]\n    ```", "```go\n    version: \"3.9\"\n    services:\n     api:\n       image: recipes-api\n       environment:\n         - MONGO_URI=mongodb://admin:password\n              @mongodb:27017/test?authSource=admin\n              &readPreference=primary&ssl=false\n         - MONGO_DATABASE=demo\n         - REDIS_URI=redis:6379\n       networks:\n         - api_network\n       external_links:\n         - mongodb\n         - redis\n     redis:\n       image: redis\n       networks:\n         - api_network\n     mongodb:\n       image: mongo:4.4.3\n       networks:\n         - api_network\n       environment:\n         - MONGO_INITDB_ROOT_USERNAME=admin\n         - MONGO_INITDB_ROOT_PASSWORD=password\n    networks:\n       api_network:\n    ```", "```go\n    nginx:\n       image: nginx\n       ports:\n         - 80:80\n       volumes:\n         - $PWD/nginx.conf:/etc/nginx/nginx.conf\n       depends_on:\n         - api\n       networks:\n         - api_network \n    ```", "```go\n    events {\n       worker_connections 1024;\n    }\n    http {\n     server_tokens off;\n     server {\n       listen 80;\n       root  /var/www;\n       location /api/ {\n         proxy_set_header X-Forwarded-For $remote_addr;\n         proxy_set_header Host            $http_host;\n         proxy_pass http://api:8080/;\n       }\n     }\n    } \n    ```", "```go\n    docker-compose ps\n    ```", "```go\n    docker-compose logs –f nginx \n    ```", "```go\n    /docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration\n    /docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/\n    /docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh\n    10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf\n    10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf\n    /docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh\n    /docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh\n    /docker-entrypoint.sh: Configuration complete; ready for start up\n    172.21.0.1 - - [21/Mar/2021:18:11:02 +0000] \"GET /api/recipes HTTP/1.1\" 200 2 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.192 Safari/537.36\"\n    ```", "```go\n    api:\n       image: recipes-api\n       environment:\n         - MONGO_URI=mongodb://admin:password\n              @mongodb:27017/test?authSource=admin\n              &readPreference=primary&ssl=false\n         - MONGO_DATABASE=demo\n         - REDIS_URI=redis:6379\n       networks:\n         - api_network\n       external_links:\n         - mongodb\n         - redis\n       scale: 5\n    ```", "```go\n    FROM node:14.15.1\n    COPY package-lock.json .\n    COPY package.json .\n    RUN npm install\n    CMD npm start\n    ```", "```go\n    dashboard:\n       image: dashboard\n       networks:\n         - api_network\n    ```", "```go\n    events {\n       worker_connections 1024;\n    }\n    http {\n     server_tokens off;\n     server {\n       listen 80;\n       root  /var/www;\n       location / {\n         proxy_set_header X-Forwarded-For $remote_addr;\n         proxy_set_header Host            $http_host;\n         proxy_pass http://dashboard:3000/;\n       }\n       location /api/ {\n         proxy_set_header X-Forwarded-For $remote_addr;\n         proxy_set_header Host            $http_host;\n         proxy_pass http://api:8080/;\n       }\n     }\n    }\n    ```", "```go\ndocker-compose down\n```", "```go\nlocation /reddit/ {\n     proxy_set_header X-Forwarded-For $remote_addr;\n     proxy_set_header Host            $http_host;\n     proxy_pass http://reddit-trending:3000/;\n}\n```", "```go\nFROM node:14.15.1\nCOPY . .\nCOPY package-lock.json .\nCOPY package.json .\nRUN npm install\nCMD npm start\n```", "```go\n  reddit-trending:\n    image: web\n    networks:\n      - api_network \n```", "```go\nlocation /assets/css/app.css {\n     proxy_set_header X-Forwarded-For $remote_addr;\n     proxy_set_header Host            $http_host;\n     proxy_pass http://reddit-trending:3000/assets\n       /css/app.css;\n}\n```", "```go\nmap $sent_http_content_type $expires {\n   default                    off;\n   text/html                  epoch;\n   text/css                   max;\n   application/javascript     max;\n   ~image/                    max;\n}\n```", "```go\nhttp {\n server {\n   listen 80;\n   expires $expires;\n   ...\n }\n}\n```", "```go\ndocker-compose up –d\n```", "```go\nfunc IllustrationHandler(c *gin.Context) {\n   c.File(\"illustration.png\")\n}\nfunc main() {\n   router := gin.Default()\n   router.GET(\"/illustration\", IllustrationHandler)\n   router.Run(\":3000\")\n}\n```", "```go\nfunc IllustrationHandler(c *gin.Context) {\n   c.Header(\"Etag\", \"illustration\")\n   c.Header(\"Cache-Control\", \"max-age=2592000\")\n   if match := c.GetHeader(\"If-None-Match\"); match != \"\" {\n       if strings.Contains(match, \"illustration\") {\n           c.Writer.WriteHeader(http.StatusNotModified)\n           return\n       }\n   }\n   c.File(\"illustration.png\")\n}\n```"]