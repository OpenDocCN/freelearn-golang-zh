["```go\npackage main\nimport (\n   \"net/http\"\n   \"github.com/gin-gonic/gin\"\n)\nfunc IndexHandler(c *gin.Context) {\n   c.JSON(http.StatusOK, gin.H{\n       \"message\": \"hello world\",\n   })\n}\nfunc SetupServer() *gin.Engine {\n   r := gin.Default()\n   r.GET(\"/\", IndexHandler)\n   return r\n}\nfunc main() {\n   SetupServer().Run()\n}\n```", "```go\ncurl localhost:8080\n{\"message\":\"hello world\"}\n```", "```go\n    package main\n    func TestIndexHandler(t *testing.T) {\n       mockUserResp := `{\"message\":\"hello world\"}`\n       ts := httptest.NewServer(SetupServer())\n       defer ts.Close()\n       resp, err := http.Get(fmt.Sprintf(\"%s/\", ts.URL))\n       if err != nil {\n           t.Fatalf(\"Expected no error, got %v\", err)\n       }\n       defer resp.Body.Close()\n       if resp.StatusCode != http.StatusOK {\n           t.Fatalf(\"Expected status code 200, got %v\", \n                    resp.StatusCode)\n       }\n       responseData, _ := ioutil.ReadAll(resp.Body)\n       if string(responseData) != mockUserResp {\n           t.Fatalf(\"Expected hello world message, got %v\", \n                     responseData)\n       }\n    }\n    ```", "```go\n    go test\n    ```", "```go\n    Go get github.com/stretchr/testify\n    ```", "```go\n    func TestIndexHandler(t *testing.T) {\n       mockUserResp := `{\"message\":\"hello world\"}`\n       ts := httptest.NewServer(SetupServer())\n       defer ts.Close()\n       resp, err := http.Get(fmt.Sprintf(\"%s/\", ts.URL))\n       defer resp.Body.Close()\n       assert.Nil(t, err)\n       assert.Equal(t, http.StatusOK, resp.StatusCode)\n       responseData, _ := ioutil.ReadAll(resp.Body)\n       assert.Equal(t, mockUserResp, string(responseData))\n    }\n    ```", "```go\nfunc main() {\n   router := gin.Default()\n   router.POST(\"/recipes\", NewRecipeHandler)\n   router.GET(\"/recipes\", ListRecipesHandler)\n   router.PUT(\"/recipes/:id\", UpdateRecipeHandler)\n   router.DELETE(\"/recipes/:id\", DeleteRecipeHandler)\n   router.GET(\"/recipes/:id\", GetRecipeHandler)\n   router.Run()\n}\n```", "```go\nfunc SetupRouter() *gin.Engine {\n   router := gin.Default()\n   return router\n}\nfunc TestListRecipesHandler(t *testing.T) {\n   r := SetupRouter()\n   r.GET(\"/recipes\", ListRecipesHandler)\n   req, _ := http.NewRequest(\"GET\", \"/recipes\", nil)\n   w := httptest.NewRecorder()\n   r.ServeHTTP(w, req)\n   var recipes []Recipe\n   json.Unmarshal([]byte(w.Body.String()), &recipes)\n   assert.Equal(t, http.StatusOK, w.Code)\n   assert.Equal(t, 492, len(recipes))\n}\n```", "```go\nGIN_MODE=release go test -v\n```", "```go\nfunc TestNewRecipeHandler(t *testing.T) {\n   r := SetupRouter()\n   r.POST(\"/recipes\", NewRecipeHandler)\n   recipe := Recipe{\n       Name: \"New York Pizza\",\n   }\n   jsonValue, _ := json.Marshal(recipe)\n   req, _ := http.NewRequest(\"POST\", \"/recipes\", \n                              bytes.NewBuffer(jsonValue))\n   w := httptest.NewRecorder()\n   r.ServeHTTP(w, req)\n   assert.Equal(t, http.StatusOK, w.Code)\n}\n```", "```go\nGIN_MODE=release go test -v -coverprofile=coverage.out ./...\n```", "```go\nmode: set\n/Users/mlabouardy/github/Building-Distributed-Applications-in-Gin/chapter7/api-without-db/main.go:51.41,53.2 1 1\n/Users/mlabouardy/github/Building-Distributed-Applications-in-Gin/chapter7/api-without-db/main.go:65.39,67.50 2 1\n/Users/mlabouardy/github/Building-Distributed-Applications-in-Gin/chapter7/api-without-db/main.go:72.2,77.31 4 1\n/Users/mlabouardy/github/Building-Distributed-Applications-in-Gin/chapter7/api-without-db/main.go:67.50,70.3 2 0\n/Users/mlabouardy/github/Building-Distributed-Applications-in-Gin/chapter7/api-without-db/main.go:98.42,101.50 3 0\n/Users/mlabouardy/github/Building-Distributed-Applications-in-Gin/chapter7/api-without-db/main.go:106.2,107.36 2 0\n```", "```go\ngo tool cover -html=coverage.out\n```", "```go\n    func TestUpdateRecipeHandler(t *testing.T) {\n       r := SetupRouter()\n       r.PUT(\"/recipes/:id\", UpdateRecipeHandler)\n       recipe := Recipe{\n           ID:   \"c0283p3d0cvuglq85lpg\",\n           Name: \"Gnocchi\",\n           Ingredients: []string{\n               \"5 large Idaho potatoes\",\n               \"2 egges\",\n               \"3/4 cup grated Parmesan\",\n               \"3 1/2 cup all-purpose flour\",\n           },\n       }\n       jsonValue, _ := json.Marshal(recipe)\n       reqFound, _ := http.NewRequest(\"PUT\", \n          \"/recipes/\"+recipe.ID, bytes.NewBuffer(jsonValue))\n       w := httptest.NewRecorder()\n       r.ServeHTTP(w, reqFound)\n       assert.Equal(t, http.StatusOK, w.Code)\n       reqNotFound, _ := http.NewRequest(\"PUT\", \"/recipes/1\", \n          bytes.NewBuffer(jsonValue))\n       w = httptest.NewRecorder()\n       r.ServeHTTP(w, reqNotFound)\n       assert.Equal(t, http.StatusNotFound, w.Code)\n    }\n    ```", "```go\n    version: \"3.9\"\n    services:\n     redis:\n       image: redis\n       ports:\n         - 6379:6379\n     mongodb:\n       image: mongo:4.4.3\n       ports:\n         - 27017:27017\n       environment:\n         - MONGO_INITDB_ROOT_USERNAME=admin\n         - MONGO_INITDB_ROOT_PASSWORD=password\n    ```", "```go\n    func TestListRecipesHandler(t *testing.T) {\n       ts := httptest.NewServer(SetupRouter())\n       defer ts.Close()\n       resp, err := http.Get(fmt.Sprintf(\"%s/recipes\", \t \t                                     ts.URL))\n       defer resp.Body.Close()\n       assert.Nil(t, err)\n       assert.Equal(t, http.StatusOK, resp.StatusCode)\n       data, _ := ioutil.ReadAll(resp.Body)\n       var recipes []models.Recipe\n       json.Unmarshal(data, &recipes)\n       assert.Equal(t, len(recipes), 10)\n    }\n    ```", "```go\n    MONGO_URI=\"mongodb://admin:password@localhost:27017/test?authSource=admin&readPreference=primary&ssl=false\" MONGO_DATABASE=demo REDIS_URI=localhost:6379 go test\n    ```", "```go\ncurl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.7.0\n```", "```go\ngosec ./...\n```", "```go\ngosec -exclude=G104 ./...\n```", "```go\n    npm install -g snyk\n    ```", "```go\n    snyk auth\n    ```", "```go\n    snyk test\n    ```", "```go\n    go.mod file will be upgraded to the latest available version, as illustrated in the following screenshot:\n    ```", "```go\n    pm.test(\"More than 10 recipes\", function () {\n       var jsonData = pm.response.json();\n       pm.expect(jsonData.length).to.least(10)\n    });\n    ```", "```go\n    pm.test(\"Gnocchi recipe\", function () {\n       var jsonData = pm.response.json();\n       var found = false;\n       jsonData.forEach(recipe => {\n           if (recipe.name == 'Gnocchi') {\n               found = true;\n           }\n       })\n       pm.expect(found).to.true\n    });\n    ```", "```go\n    pm.test(\"Status code is 200\", function () {\n       pm.response.to.have.status(200);\n    });\n    ```", "```go\n    pm.test(\"Recipe ID is not null\", function(){\n       var id = pm.response.json().id;\n       pm.expect(id).to.be.a(\"string\");\n       pm.expect(id.length).to.eq(24);\n    })\n    ```", "```go\n    {\n       \"info\": {},\n       \"item\": [\n           {\n               \"name\": \"New Recipe\",\n               \"event\": [\n                   {\n                       \"listen\": \"test\",\n                       \"script\": {\n                           \"exec\": [\n                               \"pm.test(\\\"Recipe ID is not \n                                   null\\\", function(){\",\n                               \"var id = pm.response\n                                     .json().id;\",\n                               \"pm.expect(id).\n                                       to.be.a(\\\"string\\\");\",\n                               \"pm.expect(id.length)\n                                       .to.eq(24);\",\n                               \"})\"\n                           ],\n                           \"type\": \"text/javascript\"\n                       }\n                   }\n               ],\n               \"request\": {\n                   \"method\": \"POST\",\n                   \"header\": [],\n                   \"body\": {\n                       \"mode\": \"raw\",\n                       \"raw\": \"{\\n    \\\"name\\\": \\\"New York \n                                Pizza\\\"\\n}\",\n                       \"options\": {\n                           \"raw\": {\n                               \"language\": \"json\"\n                           }\n                       }\n                   },\n                   \"url\": {\n                       \"raw\": \"{{url}}/recipes\",\n                       \"host\": [\n                           \"{{url}}\"\n                       ],\n                       \"path\": [\n                           \"recipes\"\n                       ]\n                   }\n               },\n               \"response\": []\n           }\n       ],\n       \"auth\": {}\n    }\n    ```", "```go\n    npm install -g newman\n    ```", "```go\n    newman run postman.json\n    ```", "```go\n    newman run postman.json --env-var \"url=http://localhost:8080\"\n    ```"]