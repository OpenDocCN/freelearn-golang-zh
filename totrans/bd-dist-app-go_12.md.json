["```go\nversion: 2.1\nexecutors:\n environment:\n   docker:\n     - image: golang:1.15.6\n   working_directory: \njobs:\n test:\n   executor: environment\n   steps:\n     - checkout\nworkflows:\n ci_cd:\n   jobs:\n     - test\n```", "```go\njobs:\n test:\n   executor: environment\n   steps:\n     - checkout\n     - restore_cache:\n         keys:\n           - go-mod-v4-{{ checksum \"go.sum\" }}\n     - run:\n         name: Install Dependencies\n         command: go mod download\n     - save_cache:\n         key: go-mod-v4-{{ checksum \"go.sum\" }}\n         paths:\n           - \"/go/pkg/mod\"\n     - run:\n         name: Code linting\n         command: >\n           go get -u golang.org/x/lint/golint\n           golint ./...\n     - run:\n         name: Unit tests\n         command: go test -v ./...\n```", "```go\n    git add .\n    git commit –m \"added test stage\"\n    git push origin develop\n    ```", "```go\n    workflows:\n     ci_cd:\n       jobs:\n         - test\n         - build\n    ```", "```go\n    build:\n        executor: environment\n       steps:\n         - checkout\n         - setup_remote_docker:\n            version: 19.03.13\n         - run:\n             name: Build image\n             command: >\n               TAG=0.1.$CIRCLE_BUILD_NUM\n               docker build -t USER/recipes-api:$TAG .\n         - run:\n             name: Push image\n             command: >\n               docker tag USER/recipes-api:$TAG \n                   ID.dkr.ecr.REGION.amazonaws.com/USER/\n                   recipes-api:$TAG\n               docker tag USER/recipes-api:$TAG \n                   ID.dkr.ecr.REGION.amazonaws.com/USER/\n                   recipes-api:develop\n               docker push ID.dkr.ecr.REGION.amazonaws.com/\n                   USER/recipes-api:$TAG\n               docker push ID.dkr.ecr.REGION.amazonaws.com/\n                   USER/recipes-api:develop\n    ```", "```go\n    git add .\n    git commit –m \"added build stage\"\n    git push origin develop\n    ```", "```go\n    {\n        \"Version\": \"2008-10-17\",\n        \"Statement\": [\n            {\n                \"Sid\": \"AllowPush\",\n                \"Effect\": \"Allow\",\n                \"Principal\": {\n                    \"AWS\": [\n                        \"arn:aws:iam::ID:circleci/\n                                      push-pull-user-1\"\n                    ]\n                },\n                \"Action\": [\n                    \"ecr:PutImage\",\n                    \"ecr:InitiateLayerUpload\",\n                    \"ecr:UploadLayerPart\",\n                    \"ecr:CompleteLayerUpload\"\n                ]\n            }\n        ]\n    }\n    ```", "```go\n        -run:\n            name: Push image\n            command: |\n                TAG=0.1.$CIRCLE_BUILD_NUM\n               docker tag USER/recipes-api:$TAG \n                   ID.dkr.ecr.REGION.amazonaws.com/USER/\n                   recipes-api:$TAG\n               docker tag USER/recipes-api:$TAG ID.dkr.ecr. \n                   REGION.amazonaws.com/USER/\n                   recipes-api:develop\n               aws ecr get-login-password --region REGION | \n                   docker login --username AWS --password-\n                   stdin ID.dkr.ecr.REGION.amazonaws.com\n               docker push ID.dkr.ecr.REGION.amazonaws.com\n                   /USER/recipes-api:$TAG\n        docker push ID.dkr.ecr.REGION.amazonaws.com\n                   /USER/recipes-api:develop\n    ```", "```go\n    USER, ID, and REGION values in the configuration file, you can pass their values as environment variables from the CircleCI project settings.A new pipeline will be triggered. This time, the `build` job should be successful, and you should see something similar to the following:![Figure 9.17 – Building and storing a Docker image with CircleCI\n    ](img/Figure_9.17_B17115.jpg)Figure 9.17 – Building and storing a Docker image with CircleCINow, click on the `develop` tag that points to the latest built image in the develop branch.With the test and build stages being automated, you can go even further and automate the deployment process as well. \n    ```", "```go\n    workflows:\n     ci_cd:\n       jobs:\n         - test\n         - build\n         - deploy\n    ```", "```go\n    version: \"3\" \n    services:\n      api:\n        image: ID.dkr.ecr.REGION.amazonaws.com/USER/\n               recipes-api:develop\n        environment:\n          - MONGO_URI=mongodb://admin:password@mongodb\n                :27017/test?authSource=admin\n                 &readPreference=primary&ssl=false\n          - MONGO_DATABASE=demo\n          - REDIS_URI=redis:6379\n        external_links:\n          - mongodb\n          - redis\n      redis:\n        image: redis\n      mongodb:\n        image: mongo:4.4.3\n        environment:\n          - MONGO_INITDB_ROOT_USERNAME=admin\n          - MONGO_INITDB_ROOT_PASSWORD=password\n    ```", "```go\n    deploy:\n       executor: environment\n       steps:\n         - checkout\n         - run:\n             name: Deploy with Docker Compose\n             command: |\n               ssh -oStrictHostKeyChecking=no ec2-user@IP \n                   docker-compose pull && docker-compose up –d\n    ```", "```go\n    git add .\n    git commit –m \"added deploy stage\"\n    git push origin develop\n    ```", "```go\nversion: 2.1\norbs:\n aws-ecs: circleci/aws-ecs@0.0.11\nworkflows:\nci_cd:\n   jobs:\n    - test\n    - build\n    - aws-ecs/deploy-service-update:\n       aws-region: AWS_DEFAULT_REGION\n       family: 'demo'\n       cluster-name: 'sandbox'\n       container-image-name-updates: \n           'container=api,tag=0.1.${CIRCLE_BUILD_NUM}'\n```", "```go\nversion: 2.1\norbs:\n   aws-eks: circleci/aws-eks@0.2.0\n   kubernetes: circleci/kubernetes@0.3.0\njobs:\n deploy:\n   executor: aws-eks/python3\n   steps:\n     - checkout\n     - aws-eks/update-kubeconfig-with-authenticator:\n         cluster-name: sandbox\n         install-kubectl: true\n         aws-region: AWS_REGION\n     - kubernetes/create-or-update-resource:\n         resource-file-path: \"deployment/\n         api.deployment.yaml\"\n         get-rollout-status: true\n         resource-name: deployment/api\n     - kubernetes/create-or-update-resource:\n         resource-file-path: \"deployment/api.service.yaml\"\n\nworkflows:\n ci_cd:\n  jobs:\n    - test\n    - build\n    - deploy\n```", "```go\n    router.GET(\"/version\", VersionHandler)\n    ```", "```go\n    func VersionHandler(c *gin.Context) {\n       c.JSON(http.StatusOK, gin.H{\"version\": os.Getenv(\n           \"API_VERSION\")})\n    }\n    ```", "```go\n    FROM golang:1.16\n    WORKDIR /go/src/github.com/api\n    COPY . .\n    RUN go mod download\n    RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .\n    FROM alpine:latest \n    ARG API_VERSION\n    ENV API_VERSION=$API_VERSION\n    RUN apk --no-cache add ca-certificates\n    WORKDIR /root/\n    COPY --from=0 /go/src/github.com/api/app .\n    CMD [\"./app\"]\n    ```", "```go\n    run:\n       name: Build image\n        command: |\n          TAG=0.1.$CIRCLE_BUILD_NUM\n          docker build -t mlabouardy/\n              recipes-api:$TAG --build-arg API_VERSION=${TAG} .\n    ```", "```go\n    deploy job will run and deploy the application on EC2:![Figure 9.22 – Deploying Docker Stack\n    ](img/Figure_9.22_B17115.jpg)Figure 9.22 – Deploying Docker Stack\n    ```", "```go\nworkflows:\n ci_cd:\n   jobs:\n     - test\n     - build:\n       requires:\n           - test\n     - deploy:\n       requires:\n           - test\n           - build\n```", "```go\n    run:\n       name: Push image\n       command: |\n         TAG=0.1.$CIRCLE_BUILD_NUM\n         aws ecr get-login-password --region REGION | docker \n             login --username AWS --password-stdin \n             ID.dkr.ecr.REGION.amazonaws.com\n         docker tag USER/recipes-api:$TAG \n         ID.dkr.ecr.REGION.amazonaws.com/USER/recipes-api:$TAG\n         docker push ID.dkr.ecr.REGION.amazonaws.com/\n             USER/recipes-api:$TAG\n         if [ \"${CIRCLE_BRANCH}\" == \"master\" ] || [ \n             \"${CIRCLE_BRANCH}\" == \"preprod\" ] || [ \n             \"${CIRCLE_BRANCH}\" == \"develop\" ];\n        then\n            docker tag USER/recipes-api:$TAG \n                ID.dkr.ecr.REGION.amazonaws.com/USER/\n                recipes-api:${CIRCLE_BRANCH}\n                 docker push ID.dkr.ecr.REGION.amazonaws.com/\n                     USER/recipes-api:${CIRCLE_BRANCH}\n          fi\n    ```", "```go\n    run:\n       name: Deploy with Docker Compose\n       command: |\n         if [ \"${CIRCLE_BRANCH}\" == \"master\" ]\n         then\n            ssh -oStrictHostKeyChecking=no ec2-user@IP_PROD \n                \"docker-compose pull && docker-compose up -d\"\n        elif [ \"${CIRCLE_BRANCH}\" == \"preprod\" ]\n         then\n            ssh -oStrictHostKeyChecking=no             ec2-user@IP_STAGING \n                \"docker-compose pull && docker-compose up -d\"\n         else\n            ssh -oStrictHostKeyChecking=no             ec2-user@IP_SANDBOX \n                \"docker-compose pull && docker-compose up -d\"\n         fi\n    ```", "```go\n    workflows:\n     ci_cd:\n       jobs:\n         - test\n         - build:\n             requires:\n               - test\n         - deploy:\n             requires:\n               - test\n               - build\n             filters:\n               branches:\n                 only:\n                   - develop\n                   - preprod\n                   - master\n    ```", "```go\n    git add .\n    git commit –m \"continuous deployment\"\n    git push origin develop\n    ```", "```go\n    workflows:\n     ci_cd:\n       jobs:\n         - test\n         - build:\n             requires:\n               - test\n         - deploy:\n             requires:\n               - test\n               - build\n             filters:\n               branches:\n                 only:\n                   - develop\n                   - preprod\n         - pause_workflow:\n             requires:\n               - test\n               - build\n             type: approval\n             filters:\n               branches:\n                 only:\n                   - master\n         - release:\n             requires:\n               - pause_workflow\n             filters:\n               branches:\n                 only:\n                   - master\n    ```", "```go\n    - slack/notify:\n             channel: \"#ci\"\n             event: always\n             custom: |\n               {\n                 \"blocks\": [\n                   {\n                     \"type\": \"section\",\n                     \"text\": {\n                       \"type\": \"mrkdwn\",\n                       \"text\": \"*Build has started*! \n                                 :crossed_fingers:\"\n                     }\n                   },\n                   {\n                     \"type\": \"divider\"\n                   },\n                   {\n                     \"type\": \"section\",\n                     \"fields\": [\n                       {\n                         \"type\": \"mrkdwn\",\n                         \"text\": \"*Project*:\\\n                             n$CIRCLE_PROJECT_REPONAME\"\n                       },\n                       {\n                         \"type\": \"mrkdwn\",\n                         \"text\": \"*When*:\\n$(date +'%m/%d/%Y \n                                   %T')\"\n                       },\n                       {\n                         \"type\": \"mrkdwn\",\n                         \"text\": \"*Branch*:\\n$CIRCLE_BRANCH\"\n                       },\n                       {\n                         \"type\": \"mrkdwn\",\n                         \"text\": \"*Author*:                              \\n$CIRCLE_USERNAME\"\n                       }\n                     ],\n                     \"accessory\": {\n                       \"type\": \"image\",\n                       \"image_url\": \"https://media.giphy.com/\n                        media/3orieTfp1MeFLiBQR2/giphy.gif\",\n                       \"alt_text\": \"CircleCI logo\"\n                     }\n                   },\n                   {\n                     \"type\": \"actions\",\n                     \"elements\": [\n                       {\n                         \"type\": \"button\",\n                         \"text\": {\n                           \"type\": \"plain_text\",\n                           \"text\": \"View Workflow\"\n                         },\n                         \"url\": \"https://circleci.com/\n                            workflow-run/${                                     CIRCLE_WORKFLOW_ID}\"\n                       }\n                     ]\n                   }\n                 ]\n               }\n    ```", "```go\n- slack/notify:\n     channel: \"#ci\"\n     event: fail\n     custom: |\n       {\n         \"blocks\": [\n           {\n             \"type\": \"section\",\n             \"text\": {\n                \"type\": \"mrkdwn\",\n                \"text\": \"*Tests failed, run for your \n                         life*! :fearful:\"\n              }\n          ]\n       }\n```", "```go\n- run:\n     name: Unit tests\n     command: |\n       go test -v ./...\n       exit 1\n```"]