- en: 'Chapter 9: Implementing a CI/CD Pipeline'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章：实现CI/CD管道
- en: This chapter will show you how to build a CI/CD workflow to automate the deployment
    of a Gin service. We will also discuss the importance of embracing a GitFlow approach
    while building a Gin-based API.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向您展示如何构建一个CI/CD工作流程来自动化Gin服务的部署。我们还将讨论在构建基于Gin的API时采用GitFlow方法的重要性。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Exploring CI/CD practices
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索CI/CD实践
- en: Building a continuous integration workflow
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建持续集成工作流程
- en: Maintaining multiple runtime environments
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护多个运行时环境
- en: Implementing continuous delivery
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现持续交付
- en: By the end of this chapter, you will be able to automate the test, build, and
    deploy process of a Gin web application.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将能够自动化Gin网络应用的测试、构建和部署过程。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow the content in this chapter, you will need the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟随本章的内容，您需要以下条件：
- en: A complete understanding of the previous chapter. This chapter is a follow-up
    of the previous one as it will be using the same source code. Hence, some snippets
    won't be explained to avoid repetition.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对上一章内容的完整理解。本章是上一章的后续，因为它将使用相同的源代码。因此，为了避免重复，一些代码片段将不会进行解释。
- en: Previous experience with CI/CD practices is highly recommended so that you can
    follow this chapter with ease.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推荐您有CI/CD实践的前期经验，这样您就可以轻松地跟随本章内容。
- en: The code bundle for this chapter is hosted on GitHub at [https://github.com/PacktPublishing/Building-Distributed-Applications-in-Gin/tree/main/chapter09](https://github.com/PacktPublishing/Building-Distributed-Applications-in-Gin/tree/main/chapter09).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码包托管在GitHub上，网址为[https://github.com/PacktPublishing/Building-Distributed-Applications-in-Gin/tree/main/chapter09](https://github.com/PacktPublishing/Building-Distributed-Applications-in-Gin/tree/main/chapter09)。
- en: Exploring CI/CD practices
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索CI/CD实践
- en: In the previous chapters, you learned how to design, build, and deploy a Gin
    web application on AWS. Currently, deploying new changes can be a time-consuming
    process. When deploying to an EC2 instance, Kubernetes, or **Platform as a Service**
    (**PaaS**), there are manual steps involved that help the new changes be pushed
    out of the door.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，您学习了如何在AWS上设计、构建和部署Gin网络应用。目前，部署新更改可能是一个耗时的过程。当部署到EC2实例、Kubernetes或**平台即服务**（**PaaS**）时，涉及一些手动步骤，这些步骤有助于将新更改推出去。
- en: Luckily, many of these deployment steps can be automated, thus saving development
    time, removing possibilities for human errors, and reducing release cycle times.
    That's why in this section, you will learn how to embrace **continuous integration**
    (**CI**), **continuous deployment** (**CD**) and **continuous delivery** to accelerate
    the **time to market** (**TTM**) of your application, as well as to ensure high-quality
    features shipment through each iteration. But first, what do these practices mean?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，许多这些部署步骤可以自动化，从而节省开发时间，消除人为错误的可能性，并减少发布周期时间。这就是为什么在本节中，您将学习如何采用**持续集成**（**CI**）、**持续部署**（**CD**）和**持续交付**来加速您应用程序的**上市时间**（**TTM**），以及确保每个迭代都发送高质量的功能。但首先，这些实践意味着什么？
- en: Continuous integration
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续集成
- en: '**Continuous integration** (**CI**) is the process of having a centralized
    code repository (for example, GitHub, Bitbucket, GitLab, and so on) and making
    all the changes and features go through a pipeline before integrating them into
    the remote repository. A classic pipeline triggers a build whenever a code commit
    (or push event) occurs, runs pre-integrations tests, builds the artifact (for
    example, Docker image, JAR, an npm package, and so on), and pushes the results
    into a private registry for versioning:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）是一个拥有集中式代码仓库（例如，GitHub、Bitbucket、GitLab等）的过程，并且所有更改和功能在集成到远程仓库之前都需要通过一个管道。一个经典的管道会在代码提交（或推送事件）发生时触发构建，运行预集成测试，构建工件（例如，Docker镜像、JAR、npm包等），并将结果推送到私有注册库进行版本控制：'
- en: '![Figure 9.1 – CI/CD practices'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.1 – CI/CD实践'
- en: '](img/Figure_9.1_B17115.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.1 – CI/CD实践](img/Figure_9.1_B17115.jpg)'
- en: Figure 9.1 – CI/CD practices
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 – CI/CD实践
- en: 'As shown in the preceding diagram, the CI workflow consists of the following
    stages: **Checkout**, **Test**, **Build**, and **Push**.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，CI工作流程包括以下阶段：**检出**、**测试**、**构建**和**推送**。
- en: Continuous deployment
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续部署
- en: '**Continuous deployment** (**CD**), on the other hand, is an extension of the
    CI workflow. Every change that passes through all the stages of the CI pipeline
    is released automatically placed onto a staging or preprod environment, where
    the QA team can run validation and acceptance tests.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续部署**（**CD**）另一方面，是CI工作流的扩展。每个通过CI管道所有阶段的更改都会自动发布到预生产或预生产环境，QA团队可以在那里运行验证和验收测试。'
- en: Continuous delivery
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续交付
- en: '**Continuous delivery** is similar to CD but requires human intervention or
    business validation before you can deploy the new release to a production environment.
    This human involvement could include manual deployment, which is typically performed
    by a QA engineer, or something as simple as clicking a button. This differs from
    CD, where every successful build is released to the staging environment.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续交付**与CD类似，但在将新版本部署到生产环境之前需要人工干预或业务验证。这种人工参与可能包括手动部署，通常由QA工程师执行，或者简单地点击一个按钮。这与CD不同，CD中每个成功的构建都会发布到预生产环境。'
- en: Embracing these three practices can help in improving the code's quality and
    testability, and also helps reduce the risk of shipping broken releases to production.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 采用这三个实践可以帮助提高代码的质量和可测试性，并有助于降低将损坏的发布版本发送到生产的风险。
- en: 'Now that you understand what these three components are, by the end of this
    chapter, you will be able to build an end-to-end deployment process for our Gin
    web application, similar to the one shown in the following diagram:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了这三个组件，到本章结束时，你将能够为我们的Gin Web应用程序构建一个端到端的部署流程，类似于以下图中所示：
- en: '![Figure 9.2 – CI/CD pipeline'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 9.2 – CI/CD pipeline'
- en: '](img/Figure_9.2_B17115.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 9.2 – CI/CD pipeline](img/Figure_9.2_B17115.jpg)'
- en: Figure 9.2 – CI/CD pipeline
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 9.2 – CI/CD pipeline
- en: 'The preceding pipeline is divided into the following stages:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的管道分为以下阶段：
- en: '**Checkout**: Pulls the latest changes from the project''s GitHub repository.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检出**：从项目的GitHub仓库中拉取最新更改。'
- en: '**Test**: Runs unit and quality tests within a Docker container.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**：在Docker容器内运行单元和质量测试。'
- en: '**Build**: Compiles and builds a Docker image from a Dockerfile.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建**：从Dockerfile编译和构建Docker镜像。'
- en: '**Push**: Tags the image and stores it in a private registry.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**推送**：标记镜像并将其存储在私有注册表中。'
- en: '**Deploy**: Deploys and promotes the changes to an AWS environment (EC2, EKS,
    or ECS).'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署**：将更改部署并提升到AWS环境（EC2、EKS或ECS）。'
- en: Note
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: We're using CircleCI as a CI server, but the same workflow can be implemented
    with other CI solutions such as Jenkins, Travis CI, GitHub Actions, and so on.
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们使用CircleCI作为CI服务器，但可以使用其他CI解决方案（如Jenkins、Travis CI、GitHub Actions等）实现相同的流程。
- en: Building a CI workflow
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建CI工作流
- en: 'The application we built for this book is versioned in a GitHub repository.
    This repository uses the GitFlow model as a branching strategy, where three main
    branches are used. Each branch represents a runtime environment for the application:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为这本书构建的应用程序在GitHub仓库中进行版本控制。此仓库使用GitFlow模型作为分支策略，其中使用了三个主要分支。每个分支代表应用程序的一个运行环境：
- en: '**Master branch**: This branch corresponds to the code running in the production
    environment.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主分支**：此分支对应于在生产环境中运行的代码。'
- en: '**Preprod branch**: The staging environment – a mirror of the production environment.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预生产分支**：预生产环境，是生产环境的镜像。'
- en: '**Develop branch**: The sandbox or development environment.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发分支**：沙盒或开发环境。'
- en: To promote the application from one environment to another, you can create **feature
    branches**. You can also create **hotfix branches** for major bugs or issues.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要将应用程序从一个环境提升到另一个环境，你可以创建**功能分支**。你也可以为重大错误或问题创建**热修复分支**。
- en: Note
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'To learn more about GitFlow workflows and best practices, check out the official
    documentation: [https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow](https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow).'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于GitFlow工作流和最佳实践的信息，请查看官方文档：[https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow](https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow)。
- en: 'The following figure shows what your Project''s GitHub repository would look
    like:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个图显示了你的项目GitHub仓库的外观：
- en: '![Figure 9.3 – Project''s GitHub repository'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 9.3 – 项目GitHub仓库](img/Figure_9.3_B17115.jpg)'
- en: '](img/Figure_9.3_B17115.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 9.3 – Project''s GitHub repository](img/Figure_9.3_B17115.jpg)'
- en: Figure 9.3 – Project's GitHub repository
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 9.3 – 项目GitHub仓库
- en: 'You will be using **CircleCI** to automate the CI/CD workflow. If you don''t
    have a CircleCI account already, sign up for free using your GitHub account at
    https://circleci.com. The principles of CI/CD remain the same, regardless of the
    CI server:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您将使用 **CircleCI**来自动化 CI/CD 工作流程。如果您还没有 CircleCI 账户，请使用您的 GitHub 账户免费注册，网址为
    https://circleci.com。无论 CI 服务器是什么，CI/CD 的原则都是相同的：
- en: '![Figure 9.4 – CircleCI landing page'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.4 – CircleCI 登录页面'
- en: '](img/Figure_9.4_B17115.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.4_B17115.jpg)'
- en: Figure 9.4 – CircleCI landing page
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.4 – CircleCI 登录页面
- en: Once you've signed up, you need to configure CircleCI to run the application
    tests and build the Docker image. To do so, you need to describe all the steps
    in a template file and save it within the code's GitHub repository. This approach
    is called **Pipeline as Code**.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦注册，您需要配置 CircleCI 以运行应用程序测试和构建 Docker 镜像。为此，您需要在模板文件中描述所有步骤，并将其保存在代码的 GitHub
    仓库中。这种方法被称为 **代码即管道**。
- en: Pipeline as Code
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码即管道
- en: When a CircleCI build is triggered, it looks for a `.circleci/config.yml` file.
    This file contains the instructions to be executed on the CI server.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当 CircleCI 构建被触发时，它会寻找一个 `.circleci/config.yml` 文件。此文件包含要在 CI 服务器上执行的指令。
- en: 'Start by creating a `.circleci` folder and a `.config.yml` file with the following
    content:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建一个 `.circleci` 文件夹和一个包含以下内容的 `.config.yml` 文件：
- en: '[PRE0]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding code snippet will run the workflow inside an environment powered
    by a Golang v1.15.6 Docker image. Most of the CI/CD steps will be performed with
    Docker, which makes running builds locally a breeze and keeps our options open
    if we want to migrate to a different CI server in the future (versus vendor lock-in).
    The first job to be run is the test stage, which consists of the following steps:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段将在由 Golang v1.15.6 Docker 镜像提供的环境中运行工作流程。大多数 CI/CD 步骤都将使用 Docker 执行，这使得在本地运行构建变得轻而易举，并且如果将来想要迁移到不同的
    CI 服务器，我们仍然有选择余地（与供应商锁定相反）。首先运行的工作是测试阶段，它包括以下步骤：
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `test` job will fetch the latest changes from this project''s GitHub repository
    using the `checkout` instruction. Then, it will download the project dependencies
    and cache them for future usage (to reduce the workflow duration), after which,
    it will run a series of tests:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`test` 作业将使用 `checkout` 指令从该项目的 GitHub 仓库获取最新更改。然后，它将下载项目依赖项并将它们缓存以供将来使用（以减少工作流程持续时间），之后，它将运行一系列测试：'
- en: '**Code linting**: This checks if the code respects standard coding conventions.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码检查**：这会检查代码是否遵守标准编码约定。'
- en: '**Unit tests**: This executes the unit tests we wrote in previous chapters.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试**：这会执行我们在前几章中编写的单元测试。'
- en: 'With the CircleCI config ready, let''s create a project on CircleCI for the
    Gin application. To do so, follow these steps:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CircleCI 配置就绪后，让我们在 CircleCI 上为 Gin 应用程序创建一个项目。为此，请按照以下步骤操作：
- en: Jump to the CircleCI console and click on **Set up Project**, next to the project's
    repository:![Figure 9.5 – Setting up a CircleCI project
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 跳转到 CircleCI 控制台，点击项目仓库旁边的 **设置项目**：![图 9.5 – 设置 CircleCI 项目
- en: '](img/Figure_9.5_B17115.jpg)'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.5_B17115.jpg)'
- en: Figure 9.5 – Setting up a CircleCI project
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.5 – 设置 CircleCI 项目
- en: Click on the **Use Existing Config** button, since we already have a CircleCI
    configuration, and click on **Start Building**:![Figure 9.6 – CircleCI configuration
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **使用现有配置** 按钮，因为我们已经有了 CircleCI 配置，然后点击 **开始构建**：![图 9.6 – CircleCI 配置
- en: '](img/Figure_9.6_B17115.jpg)'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.6_B17115.jpg)'
- en: Figure 9.6 – CircleCI configuration
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.6 – CircleCI 配置
- en: A new pipeline will start; however, it will fail due to no `config.yml` file
    existing in the code repository. This error is shown in the following screenshot:![Figure
    9.7 – Pipeline failed
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将启动一个新的管道；然而，由于代码仓库中不存在 `config.yml` 文件，它将失败。以下截图显示了此错误：![图 9.7 – 管道失败
- en: '](img/Figure_9.7_B17115.jpg)'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.7_B17115.jpg)'
- en: Figure 9.7 – Pipeline failed
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.7 – 管道失败
- en: 'Push the CircleCI configuration to the GitHub repository on the develop branch
    by running the following commands:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令将 CircleCI 配置推送到 develop 分支上的 GitHub 仓库：
- en: '[PRE2]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'A new pipeline will be triggered automatically. The output will be something
    similar to the following:'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将自动触发一个新的管道。输出将类似于以下内容：
- en: '![Figure 9.8 – Pipeline has been triggered automatically'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 9.8 – 管道已自动触发'
- en: '](img/Figure_9.8_B17115.jpg)'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.8_B17115.jpg)'
- en: Figure 9.8 – Pipeline has been triggered automatically
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.8 – 管道已自动触发
- en: Click on the `config.yml` file. All the tests will pass, and you will be able
    to build your Docker image:![Figure 9.9 – Running automated tests
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `config.yml` 文件。所有测试都将通过，您将能够构建您的 Docker 镜像：![图 9.9 – 运行自动化测试
- en: '](img/Figure_9.9_B17115.jpg)'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.9_B17115.jpg)'
- en: Figure 9.9 – Running automated tests
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.9 – 运行自动化测试
- en: 'It''s worth mentioning that the pipeline was triggered automatically because
    upon setting up the CircleCI project, a webhook was created automatically in the
    project''s GitHub repository. This way, for each push event, a notification is
    sent to CircleCI servers to trigger the corresponding CircleCI pipeline:'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 值得注意的是，该管道是自动触发的，因为在设置 CircleCI 项目时，项目 GitHub 仓库中自动创建了一个 webhook。这样，对于每次推送事件，都会向
    CircleCI 服务器发送通知以触发相应的 CircleCI 管道：
- en: '![Figure 9.10 – GitHub Webhook'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 9.10 – GitHub Webhook'
- en: '](img/Figure_9.10_B17115.jpg)'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.10_B17115.jpg)'
- en: Figure 9.10 – GitHub Webhook
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.10 – GitHub Webhook
- en: Let's move on to the next step of integrating the application by building a
    Docker image.
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们继续到集成应用程序的下一步，即构建 Docker 镜像。
- en: 'Add a `build` job to the CI/CD workflow:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `build` 作业添加到 CI/CD 工作流程中：
- en: '[PRE3]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `build` job is responsible for building a Docker image based on our `Dockerfile`,
    which is stored within the code repository. Then, it tags the built image and
    stores it in a remote Docker registry for versioning:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`build` 作业负责根据我们存储在代码仓库中的 `Dockerfile` 构建一个 Docker 镜像。然后，它对构建的镜像进行标记并将其存储在远程
    Docker 仓库中进行版本控制：'
- en: '[PRE4]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: If you're interested in the Dockerfile, you can find it in this book's GitHub
    repository at [https://github.com/PacktPublishing/Building-Distributed-Applications-in-Gin/blob/main/chapter10/Dockerfile](https://github.com/PacktPublishing/Building-Distributed-Applications-in-Gin/blob/main/chapter10/Dockerfile).
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您对 Dockerfile 感兴趣，可以在本书的 GitHub 仓库中找到它：[https://github.com/PacktPublishing/Building-Distributed-Applications-in-Gin/blob/main/chapter10/Dockerfile](https://github.com/PacktPublishing/Building-Distributed-Applications-in-Gin/blob/main/chapter10/Dockerfile)。
- en: 'To tag the image, we will be using semantic versioning ([https://semver.org](https://semver.org)).
    The version''s format is three digits, separated by a dot:'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了标记镜像，我们将使用语义版本控制（[https://semver.org](https://semver.org)）。版本的格式是三个数字，由点分隔：
- en: '![Figure 9.11 – Semantic versioning'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 9.11 – 语义版本控制'
- en: '](img/Figure_9.11_B17115.jpg)'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.11_B17115.jpg)'
- en: Figure 9.11 – Semantic versioning
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.11 – 语义版本控制
- en: The major version is increased when new changes break the API (backward-incompatible
    changes). The minor version is incremented when new features are released, while
    the patch version is incremented with bug fixes.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当新更改破坏 API（向后不兼容的更改）时，主版本号会增加。当发布新功能时，次要版本号会增加，而补丁版本号会增加以修复错误。
- en: In the CircleCI configuration, you're using the `$CIRCLE_BUILD_NUM` environment
    variable to create a unique version for each Docker image that's built via the
    development cycle of our Gin application. Another alternative is using the `CIRCLE_SHA1`
    variable, which is the SHA1 hash of the Git commit that triggered the CI build.
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 CircleCI 配置中，您使用 `$CIRCLE_BUILD_NUM` 环境变量为通过我们 Gin 应用程序的开发周期构建的每个 Docker 镜像创建一个唯一的版本。另一种选择是使用
    `CIRCLE_SHA1` 变量，它是触发 CI 构建的 Git 提交的 SHA1 哈希。
- en: Once the image has been tagged, store it in a private registry. In the previous
    example, you were using an **Elastic Container Registry** (**ECR**) as a private
    repository, but another solution such as DockerHub can be used as well.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦镜像被标记，就将其存储在私有仓库中。在先前的示例中，您使用 **弹性容器注册库**（**ECR**）作为私有仓库，但也可以使用其他解决方案，如 DockerHub。
- en: 'Push the changes to the develop branch with the following command:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令将更改推送到 develop 分支：
- en: '[PRE5]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'A new pipeline will be triggered. Once the `test` job has completed, the `build`
    job will be executed, as shown in the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 将会触发一个新的管道。一旦 `test` 作业完成，`build` 作业将被执行，如下面的截图所示：
- en: '![Figure 9.12 – Running a "build" job'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.12 – 运行 "build" 作业'
- en: '](img/Figure_9.12_B17115.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.12_B17115.jpg)'
- en: Figure 9.12 – Running a "build" job
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.12 – 运行 "build" 作业
- en: 'The following are the `build` job''s steps. The test should fail at the **Push
    image** step because CircleCI wasn''t able to push the image to ECR due to a lack
    of AWS permissions:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为 `build` 作业的步骤。测试应该在 **推送镜像** 步骤失败，因为 CircleCI 由于缺少 AWS 权限而无法将镜像推送到 ECR：
- en: '![Figure 9.13 – Push image step'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.13 – 推送镜像步骤'
- en: '](img/Figure_9.13_B17115.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.13_B17115.jpg)'
- en: Figure 9.13 – Push image step
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.13 – 推送镜像步骤
- en: 'Let us now see how you can configure your CI and CD workflows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何配置您的 CI 和 CD 工作流程：
- en: To allow CircleCI to interact with your ECR repository, create a dedicated IAM
    user with proper IAM policies.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了允许CircleCI与您的ECR仓库交互，创建一个具有适当IAM策略的专用IAM用户。
- en: Jump to the AWS Management Console ([https://console.aws.amazon.com/](https://console.aws.amazon.com/))
    and navigate to the **Identity and Access Management** (**IAM**) console. Then,
    create a new IAM user for CircleCI. Check the **Programmatic access** box, as
    shown in the following screenshot:![Figure 9.14 – CircleCI IAM user
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 跳转到AWS管理控制台([https://console.aws.amazon.com/](https://console.aws.amazon.com/))，导航到**身份与访问管理**（**IAM**）控制台。然后，为CircleCI创建一个新的IAM用户。勾选**程序访问**复选框，如图9.14所示：![图9.14
    – CircleCI IAM用户
- en: '](img/Figure_9.14_B17115.jpg)'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.14_B17115.jpg)'
- en: Figure 9.14 – CircleCI IAM user
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.14 – CircleCI IAM用户
- en: 'Attach the following IAM policy to the IAM user. This statement allows CircleCI
    to push a Docker image to the ECR repository. Make sure that you substitute `ID`
    as needed:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下IAM策略附加到IAM用户。此声明允许CircleCI将Docker镜像推送到ECR仓库。确保根据需要替换`ID`：
- en: '[PRE6]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Once the IAM user has been created, create an access key from the **Security
    credentials** tab. Then, head back to the CircleCI dashboard and jump to **Project
    Settings**:![Figure 9.15 – CircleCI environment variables
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IAM用户创建完成后，从**安全凭证**选项卡创建一个访问密钥。然后，返回CircleCI仪表板并跳转到**项目设置**：![图9.15 – CircleCI环境变量
- en: '](img/Figure_9.15_B17115.jpg)'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.15_B17115.jpg)'
- en: Figure 9.15 – CircleCI environment variables
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.15 – CircleCI环境变量
- en: 'Under the **Environment Variables** section, click on the **Add Environment
    Variable** button and add the following variables:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**环境变量**部分，点击**添加环境变量**按钮并添加以下变量：
- en: '**AWS_ACCESS_KEY_ID**: Specifies an AWS access key associated with the CircleCI
    IAM user.'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**AWS_ACCESS_KEY_ID**：指定与CircleCI IAM用户关联的AWS访问密钥。'
- en: '**AWS_SECRET_ACCESS_KEY**: Specifies an AWS secret access key associated with
    the CircleCI IAM user.'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**AWS_SECRET_ACCESS_KEY**：指定与CircleCI IAM用户关联的AWS秘密访问密钥。'
- en: '**AWS_DEFAULT_REGION**: Specifies the AWS region where the ECR repository is
    located:'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**AWS_DEFAULT_REGION**：指定ECR仓库所在的AWS区域：'
- en: '![Figure 9.16 – AWS credentials as environment variables'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图9.16 – 将AWS凭证作为环境变量'
- en: '](img/Figure_9.16_B17115.jpg)'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.16_B17115.jpg)'
- en: Figure 9.16 – AWS credentials as environment variables
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.16 – 将AWS凭证作为环境变量
- en: 'Once the environment variables have been set up, update the CircleCI configuration
    by adding an instruction to authenticate with ECR, before executing the `docker
    push` commands. The new changes will look as follows:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 环境变量设置完成后，通过添加一个用于在执行`docker push`命令之前进行ECR身份验证的指令来更新CircleCI配置。新的更改将如下所示：
- en: '[PRE7]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Substitute the `USER`, `ID`, and `REGION` variables appropriately with your
    own values and, once again, push the changes to the remote repository, under the
    develop branch:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`USER`、`ID`和`REGION`变量适当地替换为您自己的值，并将更改再次推送到远程仓库的develop分支下：
- en: '[PRE8]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Similar to the previous jobs, add a `deploy` job to the current workflow:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与之前的职位类似，将一个`deploy`任务添加到当前的工作流程中：
- en: '[PRE9]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `deploy` job will simply use the `docker-compose.yml` file we covered in
    the previous chapter to deploy the application stack on an EC2 instance. The file
    will look as follows (the full YAML file has been cropped for brevity):'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`deploy`任务将简单地使用我们在上一章中介绍的`docker-compose.yml`文件，在EC2实例上部署应用程序堆栈。文件将如下所示（为了简洁，已裁剪完整的YAML文件）：'
- en: '[PRE10]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To deploy the new changes to the EC2 instance where the containers are running,
    you will have to SSH to the remote server and issue two `docker-compose` commands
    – `pull` and `up`:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将新更改部署到运行容器的EC2实例，您将需要SSH到远程服务器并执行两个`docker-compose`命令 – `pull`和`up`：
- en: '[PRE11]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Make sure that you substitute the `IP` variable with the IP or the DNS name
    of the EC2 instance where the sandbox environment is running.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保将`IP`变量替换为运行沙盒环境的EC2实例的IP地址或DNS名称。
- en: To SSH to the EC2 instance, add the SSH key pair you used to deploy the EC2
    instance in AWS to your CircleCI project settings. Under **SSH Keys**, click on
    **Add SSH Key** and paste the content of the SSH key pair:![Figure 9.20 – Adding
    an SSH key pair
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要SSH到EC2实例，将用于在AWS中部署EC2实例的SSH密钥对添加到CircleCI项目设置中。在**SSH密钥**下，点击**添加SSH密钥**并粘贴SSH密钥对的内容：![图9.20
    – 添加SSH密钥对
- en: '](img/Figure_9.20_B17115.jpg)'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.20_B17115.jpg)'
- en: Figure 9.20 – Adding an SSH key pair
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.20 – 添加SSH密钥对
- en: 'Commit and push the new CircleCI config to GitHub with the following commands:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令提交并推送新的CircleCI配置到GitHub：
- en: '[PRE12]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'A new pipeline will be triggered, and the test, build, and deploy jobs will
    be executed sequentially. At the end of the **deploy** job, the newly built image
    will be deployed to the sandbox environment:'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将会触发一个新的管道，测试、构建和部署作业将依次执行。在**部署**作业结束时，新构建的镜像将被部署到沙盒环境中：
- en: '![Figure 9.21 – Continuous deployment'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.21 – 持续部署'
- en: '](img/Figure_9.21_B17115.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.21_B17115.jpg)'
- en: Figure 9.21 – Continuous deployment
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.21 – 持续部署
- en: 'If you''re running **Elastic Container Service** (**ECS**), you can force ECS
    to pull the new image with the following CircleCI config:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在运行**弹性容器服务**（**ECS**），您可以使用以下CircleCI配置来强制ECS拉取新镜像：
- en: '[PRE13]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure that you assign ECS permissions to the CircleCI IAM user to perform
    the task update successfully.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您为CircleCI IAM用户分配ECS权限，以成功执行任务更新。
- en: The major change is that we're using CircleCI orbs instead of Docker images
    as a runtime environment. By using orbs, we can use pre-built commands, which
    reduces the lines of code in our config file. The deploy job will deploy the updated
    image to a sandbox ECS cluster.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 主要变化是我们正在使用CircleCI orbs而不是Docker镜像作为运行环境。通过使用orbs，我们可以使用预构建的命令，这减少了我们配置文件中的代码行数。部署作业将部署更新的镜像到沙盒ECS集群。
- en: 'If you''re running Kubernetes, you can use the following CircleCI specification
    file to update the image:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在运行Kubernetes，您可以使用以下CircleCI规范文件来更新镜像：
- en: '[PRE14]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'With your CI and CD workflows configured, you can test them out by building
    a new feature for the Gin RESTful API. You can do so by implementing the following
    steps:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置了CI和CD工作流程后，您可以通过为Gin RESTful API构建新功能来测试它们。您可以按照以下步骤操作：
- en: 'Update the `main.go` file and expose a new endpoint on the `/version` resource
    using the Gin router. The endpoint will display the running API version:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`main.go`文件，并使用Gin路由器在`/version`资源上公开一个新的端点。该端点将显示运行的API版本：
- en: '[PRE15]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The HTTP handler is self-explanatory; it returns the value of the `API_VERSION`
    environment variable:'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: HTTP处理器是自解释的；它返回`API_VERSION`环境变量的值：
- en: '[PRE16]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To inject the environment variable dynamically, you can use the Docker arguments
    feature, which allows you to pass values at build time. Update our `Dockerfile`
    and declare `API_VERSION` as a build argument and environment variable:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要动态注入环境变量，您可以使用Docker参数功能，这允许您在构建时传递值。更新我们的`Dockerfile`并声明`API_VERSION`为构建参数和环境变量：
- en: '[PRE17]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, update the `Build image` step by injecting the `$TAG` variable as a value
    for the `API_VERSION` build argument:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过注入`$TAG`变量作为`API_VERSION`构建参数的值来更新`构建镜像`步骤：
- en: '[PRE18]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Push the new changes to the develop branch with the following code:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码将新更改推送到develop分支：
- en: '[PRE19]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To test out the new changes, navigate to the instance IP address and point
    your browser to the `/api/version` resource path:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试新更改，导航到实例IP地址，并将您的浏览器指向`/api/version`资源路径：
- en: '![Figure 9.23 – API running version'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.23 – API运行版本'
- en: '](img/Figure_9.23_B17115.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.23_B17115.jpg)'
- en: Figure 9.23 – API running version
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.23 – API运行版本
- en: This will return the version of the running Docker image of the Gin RESTful
    API.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回Gin RESTful API运行的Docker镜像版本。
- en: 'It''s worth mentioning that the current CirlceCI config doesn''t guarantee
    the jobs will always run in the same order (test -> build -> deploy). To maintain
    the CI/CD order, use the `requires` keyword, as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，当前的CircleCI配置不能保证作业总是按相同的顺序运行（测试 -> 构建 -> 部署）。为了保持CI/CD顺序，使用`requires`关键字，如下所示：
- en: '[PRE20]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This way, you can ensure the deploy job is only executed if both the test and
    build jobs are successful:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，您可以确保只有当测试和构建作业都成功时，部署作业才会执行：
- en: '![Figure 9.24 – CI/CD workflow'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.24 – CI/CD工作流程'
- en: '](img/Figure_9.24_B17115.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.24_B17115.jpg)'
- en: Figure 9.24 – CI/CD workflow
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.24 – CI/CD工作流程'
- en: Awesome! Now, we have a complete CI/CD pipeline for our Gin application.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在，我们为我们的Gin应用程序拥有了一个完整的CI/CD管道。
- en: Maintaining multiple runtime environments
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 维护多个运行环境
- en: In a real-world scenario, you'll need multiple environments to avoid pushing
    broken features or major bugs to a sandbox or staging environment (or worse, a
    production environment) before validating them.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际场景中，您需要多个环境来避免在验证之前将损坏的功能或重大错误推送到沙盒或预发布环境（或者更糟，生产环境）。
- en: 'You can create an EC2 instance to host the staging environment by running a
    new EC2 instance based on the sandbox environment we created in previous chapters:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行基于我们在前几章中创建的沙盒环境的新EC2实例来创建一个EC2实例以托管预发布环境：
- en: Select the **sandbox** instance and click on **Actions** from the action bar.
    Then, click on **Launch more like this** from the **Image and template** drop-down
    list:![Figure 9.25 – Replicating the sandbox environment
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **沙盒** 实例，从操作栏中点击 **操作**。然后，从 **镜像和模板** 下拉列表中点击 **启动更多类似项**：![图 9.25 – 复制沙盒环境
- en: '](img/Figure_9.25_B17115.jpg)'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.25_B17115.jpg)'
- en: Figure 9.25 – Replicating the sandbox environment
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.25 – 复制沙盒环境
- en: This option will automatically populate the Amazon EC2 launch wizard with configuration
    details from the selected instance.
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此选项将自动将所选实例的配置详细信息填充到 Amazon EC2 启动向导中。
- en: Update the `Name` tag value to `staging` and click on **Launch** to provision
    the instance:![Figure 9.26 – Staging environment running in an EC2 instance
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Name` 标签的值更新为 `staging` 并点击 **启动** 以配置实例：![图 9.26 – 在 EC2 实例中运行的预发布环境
- en: '](img/Figure_9.26_B17115.jpg)'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.26_B17115.jpg)'
- en: Figure 9.26 – Staging environment running in an EC2 instance
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.26 – 在 EC2 实例中运行的预发布环境
- en: 'Once the instance is up and running, update CircleCI so that it tags the Docker
    image based on the branch name where the pipeline is running. In addition to the
    `dynamic` tag we created via the `CIRCLE_BUILD_NUM` environment variable, push
    a `fixed` tag (develop, preprod, or master) if the current branch is either develop,
    preprod, or master:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦实例启动并运行，更新 CircleCI 以根据管道运行的分支名称标记 Docker 镜像。除了通过 `CIRCLE_BUILD_NUM` 环境变量创建的
    `dynamic` 标签外，如果当前分支是 develop、preprod 或 master，还应推送一个 `fixed` 标签（develop、preprod
    或 master）：
- en: '[PRE21]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, update the `deploy` job so that you can SSH it to the right EC2 instance
    IP address based on the current Git branch name:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，更新 `deploy` 作业，以便可以根据当前的 Git 分支名称 SSH 到正确的 EC2 实例 IP 地址：
- en: '[PRE22]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The IP addresses (`IP_PROD`, `IP_STAGING`, and `IP_SANDBOX`) should be defined
    as environment variables in the CircleCI project's settings.
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: IP 地址（`IP_PROD`、`IP_STAGING` 和 `IP_SANDBOX`）应在 CircleCI 项目的设置中定义为环境变量。
- en: 'Finally, update the workflow so that it deploys the changes, but only if the
    current Git branch is a `develop`, `preprod`, or `master` branch:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，更新工作流程，以便仅在当前 Git 分支是 `develop`、`preprod` 或 `master` 分支时部署更改：
- en: '[PRE23]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Commit and store the changes in GitHub using the following commands:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令在 GitHub 上提交并存储更改：
- en: '[PRE24]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'A new pipeline will be triggered automatically on the develop branch, where
    the changes will be deployed to a sandbox environment:'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 开发分支上会自动触发一个新的管道，更改将部署到沙盒环境：
- en: '![Figure 9.27 – Deploying to a sandbox environment'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.27 – 部署到沙盒环境'
- en: '](img/Figure_9.27_B17115.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.27_B17115.jpg)'
- en: Figure 9.27 – Deploying to a sandbox environment
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.27 – 部署到沙盒环境
- en: Once the new changes have been validated in the sandbox environment, you should
    be ready to promote the code to the staging environment.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦新更改已在沙盒环境中得到验证，您应该准备好将代码提升到预发布环境。
- en: 'To deploy to the staging environment, follow these steps:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署到预发布环境，请按照以下步骤操作：
- en: Create a **pull request** (**PR**) to merge the develop branch into the preprod
    branch, as follows:![Figure 9.28 – Creating a pull request
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 **拉取请求**（**PR**）以将开发分支合并到预生产分支，如下所示：![图 9.28 – 创建拉取请求
- en: '](img/Figure_9.28_B17115.jpg)'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.28_B17115.jpg)'
- en: Figure 9.28 – Creating a pull request
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.28 – 创建拉取请求
- en: 'Notice that the PR is ready to be merged because all the checks have passed:'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，PR 已准备好合并，因为所有检查都已通过：
- en: '![Figure 9.29 – Successful Git checks'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 9.29 – 成功的 Git 检查'
- en: '](img/Figure_9.29_B17115.jpg)'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.29_B17115.jpg)'
- en: Figure 9.29 – Successful Git checks
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.29 – 成功的 Git 检查
- en: Click on the **Merge pull request** button. A new pipeline will be triggered
    on the preprod branch and three jobs – **test**, **build**, and **deploy** – will
    be executed one by one:![Figure 9.30 – Deploying to a staging environment
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **合并拉取请求** 按钮。预生产分支将触发一个新的管道，并依次执行三个作业 – **测试**、**构建** 和 **部署**：![图 9.30
    – 部署到预发布环境
- en: '](img/Figure_9.30_B17115.jpg)'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.30_B17115.jpg)'
- en: Figure 9.30 – Deploying to a staging environment
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.30 – 部署到预发布环境
- en: At the end of the **build** stage, a new image from the preprod branch, as well
    as its CircleCI build number, will be stored in the ECR repository, as follows:![Figure
    9.31 – Preprod Docker image
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **构建** 阶段的末尾，预生产分支的新镜像以及其 CircleCI 构建号将被存储在 ECR 存储库中，如下所示：![图 9.31 – 预生产 Docker
    镜像
- en: '](img/Figure_9.31_B17115.jpg)'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.31_B17115.jpg)'
- en: Figure 9.31 – Preprod Docker image
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.31 – 预生产 Docker 镜像
- en: 'Now, deploy the image to the staging environment using the `docker-compose
    up` command. Hit the IP address of the staging environment; you should see the
    version of the running Docker image:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用`docker-compose up`命令将镜像部署到预发布环境。点击预发布环境的IP地址；你应该看到正在运行的Docker镜像的版本：
- en: '![Figure 9.32 – Docker image version.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.32 – Docker镜像版本。'
- en: '](img/Figure_9.32_B17115.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.32_B17115.jpg)'
- en: Figure 9.32 – Docker image version.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.32 – Docker镜像版本。
- en: Great! You now have a staging environment where you can validate your API functionalities
    before promoting them to production.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！你现在有一个预发布环境，可以在将API功能提升到生产之前对其进行验证。
- en: So far, you have learned how to achieve continuous deployment via a push event.
    However, in a production environment, you might want to add extra validation before
    shipping a new release to production. That's where **continuous delivery practices**
    come into play.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经学会了如何通过推送事件实现持续部署。然而，在生产环境中，你可能希望在将新版本发布到生产之前添加额外的验证。这就是**持续交付实践**发挥作用的地方。
- en: Implementing continuous delivery
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施持续交付
- en: To deploy the Gin application to production, you need to spin up a dedicated
    EC2 instance or EKS cluster. You must ask for manual validation before deploying
    to production.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 要将Gin应用程序部署到生产环境，你需要启动一个专门的EC2实例或EKS集群。在部署到生产环境之前，你必须进行手动验证。
- en: 'With CircleCI, you can use the `pause_workflow` job to interact with the user
    and ask for approval before resuming the pipeline. To do so, follow these steps:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CircleCI，你可以使用`pause_workflow`作业与用户交互，在恢复管道之前请求批准。要这样做，请按照以下步骤操作：
- en: 'Add the `pause_workflow` job before the `deploy` job and define a `release`
    job, as follows:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`deploy`作业之前添加`pause_workflow`作业，并定义一个`release`作业，如下所示：
- en: '[PRE25]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Push the changes to the develop branch. A new pipeline will be triggered and
    the changes will be deployed to your sandbox environment. Next, create a pull
    request and merge the develop and preprod branches. Now, raise a pull request
    to merge the preprod branch and the master branch:![Figure 9.33 – Pull request
    to merge into the master branch
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将更改推送到develop分支。将触发一个新的管道，并将更改部署到你的沙盒环境。接下来，创建一个拉取请求并合并develop和preprod分支。现在，提出一个拉取请求以合并preprod分支和主分支：![图9.33
    – 向主分支合并拉取请求
- en: '](img/Figure_9.33_B17115.jpg)'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.33_B17115.jpg)'
- en: Figure 9.33 – Pull request to merge into the master branch
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.33 – 向主分支合并拉取请求
- en: Once the PR has been merged, a new pipeline will be triggered on the master
    branch and both the test and build jobs will be executed:![Figure 9.34 – Running
    a CI/CD workflow on the master branch
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦PR被合并，主分支上将被触发一个新的管道，并且将执行测试和构建作业：![图9.34 – 在主分支上运行CI/CD工作流程
- en: '](img/Figure_9.34_B17115.jpg)'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.34_B17115.jpg)'
- en: Figure 9.34 – Running a CI/CD workflow on the master branch
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.34 – 在主分支上运行CI/CD工作流程
- en: When the `pause_workflow` job is reached, the pipeline will be paused, as follows:![Figure
    9.35 – Asking the user for approval
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当达到`pause_workflow`作业时，管道将被暂停，如下所示：![图9.35 – 请求用户批准
- en: '](img/Figure_9.35_B17115.jpg)'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.35_B17115.jpg)'
- en: Figure 9.35 – Asking the user for approval
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.35 – 请求用户批准
- en: If you click on the **pause_workflow** box, a confirmation dialog will pop up,
    where you can allow the workflow to continue running:![Figure 9.36 – Approving
    the deployment
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你点击**pause_workflow**框，将弹出一个确认对话框，你可以允许工作流程继续运行：![图9.36 – 批准部署
- en: '](img/Figure_9.36_B17115.jpg)'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.36_B17115.jpg)'
- en: Figure 9.36 – Approving the deployment
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.36 – 批准部署
- en: 'Once approved, the pipeline will resume, and the deploy stage will be executed.
    At the end of the CI/CD pipeline, the application will be deployed into a production
    environment:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦批准，管道将恢复，部署阶段将被执行。在CI/CD管道的末尾，应用程序将被部署到生产环境：
- en: '![Figure 9.37 – Deploying an application to production'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.37 – 将应用程序部署到生产环境'
- en: '](img/Figure_9.37_B17115.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.37_B17115.jpg)'
- en: Figure 9.37 – Deploying an application to production
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.37 – 将应用程序部署到生产环境
- en: Awesome! With that, you have achieved continuous delivery!
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！有了这个，你已经实现了持续交付！
- en: Before wrapping up, you can improve the workflow by adding a **Slack** notification
    to raise awareness within the development team when a new build is being triggered
    on CircleCI.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在结束之前，你可以通过在CircleCI上触发新构建时向开发团队发送**Slack**通知来改进工作流程，提高意识。
- en: Improving the feedback loop with Slack
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过Slack改进反馈循环
- en: You can use the **Slack RESTful API** to post a notification on a Slack channel
    or use the CircleCI Slack orb with pre-built Slack commands to improve the feedback
    loop.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 **Slack RESTful API** 在 Slack 频道中发布通知，或者使用预构建 Slack 命令的 CircleCI Slack
    orb 来改进反馈循环。
- en: 'To do so, follow these steps:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 要这样做，请按照以下步骤操作：
- en: 'Add the following code block to the `test` job:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码块添加到 `test` 作业中：
- en: '[PRE26]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Then, create a new Slack application on your Slack workspace by navigating to
    [https://api.slack.com/apps](https://api.slack.com/apps) and clicking on **Build
    app** from the page's header:![Figure 9.38 – New Slack application
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过导航到 [https://api.slack.com/apps](https://api.slack.com/apps) 并从页面标题点击 **Build
    app** 来在你的 Slack 工作空间中创建一个新的 Slack 应用程序：![图 9.38 – 新 Slack 应用程序
- en: '](img/Figure_9.38_B17115.jpg)'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.38_B17115.jpg)'
- en: Figure 9.38 – New Slack application
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.38 – 新 Slack 应用程序
- en: Give the application a meaningful name and click on the **Create App** button.
    On the **OAuth & Permissions** page, add the following permissions under **Bot
    Token Scopes**:![Figure 9.39 – Slack bot permissions
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给应用程序一个有意义的名称，然后点击 **创建 App** 按钮。在 **OAuth & Permissions** 页面上，在 **Bot Token
    Scopes** 下添加以下权限：![图 9.39 – Slack 机器人权限
- en: '](img/Figure_9.39_B17115.jpg)'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.39_B17115.jpg)'
- en: Figure 9.39 – Slack bot permissions
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.39 – Slack 机器人权限
- en: From the left navigation menu, click on **OAuth & Permissions** and copy the
    OAuth token:![Figure 9.40 – Bot user OAuth token
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧导航菜单中，点击 **OAuth & Permissions** 并复制 OAuth token：![图 9.40 – 机器人用户 OAuth token
- en: '](img/Figure_9.40_B17115.jpg)'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.40_B17115.jpg)'
- en: Figure 9.40 – Bot user OAuth token
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.40 – 机器人用户 OAuth token
- en: 'Go back to the CircleCI project settings and add the following environment
    variables:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 CircleCI 项目设置，并添加以下环境变量：
- en: '**SLACK_ACCESS_TOKEN**: The OAuth Token we generated previously.'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**SLACK_ACCESS_TOKEN**：我们之前生成的 OAuth Token。'
- en: '**SLACK_DEFAULT_CHANNEL**: The Slack channel where you want to post CircleCI
    build notifications.'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**SLACK_DEFAULT_CHANNEL**：你想要发布 CircleCI 构建通知的 Slack 频道。'
- en: 'You should see the following:'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到以下内容：
- en: '![Figure 9.41 – Slack environment variables'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 9.41 – Slack 环境变量'
- en: '](img/Figure_9.41_B17115.jpg)'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.41_B17115.jpg)'
- en: Figure 9.41 – Slack environment variables
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.41 – Slack 环境变量
- en: 'Push the new CircleCI config updates to GitHub. At this point, a new pipeline
    will be executed:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的 CircleCI 配置更新推送到 GitHub。此时，将执行一个新的管道：
- en: '![Figure 9.42 – Slack notification when the pipeline starts'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.42 – 管道开始时的 Slack 通知'
- en: '](img/Figure_9.42_B17115.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.42_B17115.jpg)'
- en: Figure 9.42 – Slack notification when the pipeline starts
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.42 – 管道开始时的 Slack 通知
- en: 'A Slack notification will be sent on the configured Slack channel containing
    the name of the project and the name of the Git branch:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 将发送 Slack 通知到配置的 Slack 频道，包含项目名称和 Git 分支名称：
- en: '![Figure 9.43 – Sending a Slack notification'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.43 – 发送 Slack 通知'
- en: '](img/Figure_9.43_B17115.jpg)'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.43_B17115.jpg)'
- en: Figure 9.43 – Sending a Slack notification
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.43 – 发送 Slack 通知
- en: 'You can take this even further and send a notification based on the pipeline''s
    status. For instance, add the following code if you want to be alerted when the
    pipeline fails (the full JSON has been cropped for brevity):'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以更进一步，根据管道的状态发送通知。例如，如果你想当管道失败时收到警报（为了简洁，已裁剪完整的 JSON），请添加以下代码：
- en: '[PRE27]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You can simulate a pipeline failure by throwing an error with a code error
    different than `0`:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过抛出一个不同于 `0` 的代码错误的错误来模拟管道失败：
- en: '[PRE28]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, push the changes to the develop branch. When the pipeline reaches the
    `Unit tests` step, an error will be thrown, and the pipeline will fail:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将更改推送到 develop 分支。当管道到达 `单元测试` 步骤时，将抛出错误，并且管道将失败：
- en: '![Figure 9.44 – Throwing an error programmatically'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.44 – 以编程方式抛出错误'
- en: '](img/Figure_9.44_B17115.jpg)'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.44_B17115.jpg)'
- en: Figure 9.44 – Throwing an error programmatically
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.44 – 以编程方式抛出错误
- en: 'On the Slack channel, you should receive a notification similar to the one
    shown in the following screenshot:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Slack 频道中，你应该会收到类似于以下截图所示的通知：
- en: '![Figure 9.45 – Sending a notification when the pipeline fails'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.45 – 当管道失败时发送通知'
- en: '](img/Figure_9.45_B17115.jpg)'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.45_B17115.jpg)'
- en: Figure 9.45 – Sending a notification when the pipeline fails
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.45 – 当管道失败时发送通知
- en: That's pretty much it. This chapter has merely scratched the surface of what
    can be done with the CI/CD pipeline. However, it should provide enough of a foundation
    for you to start experimenting and building your own end-to-end workflows for
    your Gin applications.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 大致就是这样。本章仅仅触及了 CI/CD 流水线可以做到的事情的表面。然而，它应该为你提供了足够的基石，以便开始实验并构建你自己的 Gin 应用程序的端到端工作流程。
- en: Summary
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to set up a CI/CD pipeline from scratch to
    automate the deployment process of a Gin application with CircleCI. Additionally,
    using CircleCI orbs improves productivity by simplifying how we write our Pipeline
    as Code configuration.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何从头开始设置 CI/CD 流水线，以使用 CircleCI 自动化 Gin 应用的部署过程。此外，使用 CircleCI orbs
    通过简化我们编写 Pipeline as Code 配置的方式提高了生产力。
- en: You also explored how to run automated tests with Docker and how to achieve
    continuous deployment with GitFlow and multiple AWS environments. Along the way,
    you set up Slack notifications so that you're alerted about a build failure or
    success.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 你还探索了如何使用 Docker 运行自动化测试，以及如何通过 GitFlow 和多个 AWS 环境实现持续部署。在这个过程中，你设置了 Slack 通知，以便在构建失败或成功时得到提醒。
- en: The final chapter in this book will cover how to troubleshoot and debug Gin
    applications running in production.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 本书最后一章将涵盖如何排查和调试在生产中运行的 Gin 应用程序。
- en: Questions
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Build a CI/CD pipeline to automate the deployment process for the React web
    application we built in [*Chapter 5*](B17115_05_Final_JM_ePub.xhtml#_idTextAnchor088),
    *Serving Static HTML in Gin*.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为我们在[*第 5 章*](B17115_05_Final_JM_ePub.xhtml#_idTextAnchor088)，“使用 Gin 提供静态 HTML”中构建的
    React 网络应用程序构建 CI/CD 流水线以自动化部署过程。
- en: Add a Slack notification for when a successful production deployment is made.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在成功完成生产部署时添加 Slack 通知。
- en: Further reading
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*Hands-On Serverless Applications with Go* by Mohamed Labouardy, Packt publishing'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mohamed Labouardy 著，Packt 出版的《*使用 Go 进行实战型无服务器应用程序开发*》
- en: '*Implementing DevOps with AWS* by Salle Ingle, Packt publishing'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Salle Ingle 著，Packt 出版的《*在 AWS 上实现 DevOps*》
