["```go\ngo get github.com/prometheus/client_golang\n```", "```go\nrouter.GET(\"/prometheus\", gin.WrapH(promhttp.Handler()))\n```", "```go\n\"github.com/prometheus/client_golang/prometheus/promhttp\" \n```", "```go\n    var totalRequests = prometheus.NewCounterVec(\n       prometheus.CounterOpts{\n           Name: \"http_requests_total\",\n           Help: \"Number of incoming requests\",\n       },\n       []string{\"path\"},\n    )\n    ```", "```go\n    func PrometheusMiddleware() gin.HandlerFunc {\n       return func(c *gin.Context) {\n           totalRequests.WithLabelValues(\n              c.Request.URL.Path).Inc()\n           c.Next()\n       }\n    }\n    ```", "```go\n    prometheus.Register(totalRequests)\n    ```", "```go\n    router.Use(PrometheusMiddleware())\n    ```", "```go\nvar totalHTTPMethods = prometheus.NewCounterVec(\n   prometheus.CounterOpts{\n       Name: \"http_methods_total\",\n       Help: \"Number of requests per HTTP method\",\n   },\n   []string{\"method\"},\n)\nfunc PrometheusMiddleware() gin.HandlerFunc {\n   return func(c *gin.Context) {\n       totalRequests.WithLabelValues(\n          c.Request.URL.Path).Inc()\n       totalHTTPMethods.WithLabelValues(\n          c.Request.Method).Inc()\n       c.Next()\n   }\n}\n```", "```go\nvar httpDuration = promauto.NewHistogramVec(\n   prometheus.HistogramOpts{\n       Name: \"http_response_time_seconds\",\n       Help: \"Duration of HTTP requests\",\n   },\n   []string{\"path\"},\n)\nfunc PrometheusMiddleware() gin.HandlerFunc {\n   return func(c *gin.Context) {\n       timer := prometheus.NewTimer(httpDuration.\n          WithLabelValues(c.Request.URL.Path))\n       totalRequests.WithLabelValues(\n          c.Request.URL.Path).Inc()\n       totalHTTPMethods.WithLabelValues(\n          c.Request.Method).Inc()\n       c.Next()\n       timer.ObserveDuration()\n   }\n}\n```", "```go\n    version: \"3\"\n    services:\n     api:\n       build: .\n       environment:\n         - MONGO_URI=mongodb://admin:password@\n                     mongodb:27017/test?authSource=admin\n                     &readPreference=primary&ssl=false\n         - MONGO_DATABASE=demo\n         - REDIS_URI=redis:6379\n         - API_VERSION=1.0.0\n       ports:\n         - 8080:8080\n       external_links:\n         - mongodb\n         - redis\n       restart: always\n     redis:\n       image: redis\n       restart: always\n     mongodb:\n       image: mongo:4.4.3\n       environment:\n         - MONGO_INITDB_ROOT_USERNAME=admin\n         - MONGO_INITDB_ROOT_PASSWORD=password\n       restart: always\n     prometheus:\n       image: prom/prometheus:v2.27.0\n       volumes:\n         - ./prometheus.yml:/etc/prometheus/prometheus.yml\n       ports:\n         - 9090:9090\n       restart: always\n    ```", "```go\n    global:\n     scrape_interval:     15s\n     evaluation_interval: 15s\n    scrape_configs:\n     - job_name: prometheus\n       static_configs:\n         - targets: ['localhost:9090']\n     - job_name: recipes-api\n       metrics_path: /prometheus\n       static_configs:\n         - targets:\n           - api:8080 \n    ```", "```go\n    docker-compose up -d\n    ```", "```go\n    grafana:\n       image: grafana/grafana:7.5.6\n       ports:\n         - 3000:3000\n       restart: always\n    ```", "```go\n    docker-compose up –d\n    ```", "```go\ntelegraf:\n   image: telegraf:latest\n   volumes:\n     - ./telegraf.conf:/etc/telegraf/telegraf.conf\n     - /var/run/docker.sock:/var/run/docker.sock \n```", "```go\n[[inputs.cpu]]\n percpu = false\n totalcpu = true\n fieldpass = [ \"usage*\" ]\n[[inputs.disk]]\n fielddrop = [ \"inodes*\" ]\n mount_points=[\"/\"]\n[[inputs.net]]\n interfaces = [ \"eth0\" ]\n fielddrop = [ \"icmp*\", \"ip*\", \"tcp*\", \"udp*\" ]\n[[inputs.mem]]\n[[inputs.swap]]\n[[inputs.system]]\n[[inputs.docker]]\n endpoint = \"unix:///var/run/docker.sock\"\n container_names = []\n[[outputs.prometheus_client]]\nlisten = \"telegraf:9100\"\n```", "```go\nglobal:\n scrape_interval:     15s\n evaluation_interval: 15s\nscrape_configs:\n - job_name: prometheus\n   static_configs:\n     - targets: ['localhost:9090']\n - job_name: recipes-api\n   metrics_path: /prometheus\n   static_configs:\n     - targets:\n       - api:8080\n - job_name: telegraf\n   scrape_interval: 15s\n   static_configs:\n     - targets: ['telegraf:9100'] \n```", "```go\ndocker-compose up -d\n```", "```go\nab -n 1500 http://localhost:8080/recipes\n```", "```go\n    logstash:\n       image: docker.elastic.co/logstash/logstash:7.12.1\n       command: logstash -f /etc/logstash/logstash.conf\n       volumes:\n         - ./logstash.conf:/etc/logstash/logstash.conf\n       ports:\n         - \"5000:5000\"\n         - \"12201:12201\"\n         - \"12201:12201/udp\"\n    ```", "```go\n    input {\n         gelf {\n              type => docker\n             port => 12201\n           }          \n    }\n    output {\n       elasticsearch {\n          hosts => \"elasticsearch:9200\"\n          index => \"containers-%{+YYYY.MM.dd}\"\n       }\n    }\n    ```", "```go\n    elasticsearch:\n       image: docker.elastic.co/elasticsearch\n          /elasticsearch:7.12.1\n       ports:\n         - 9200:9200\n       environment:\n         - discovery.type=single-node\n    ```", "```go\n    kibana:\n       image: docker.elastic.co/kibana/kibana:7.12.1\n       ports:\n         - 5601:5601\n       environment:\n         - ELASTICSEARCH_HOSTS=http://elasticsearch:9200\n    ```", "```go\n    api:\n       build: .\n       environment:\n         - MONGO_URI=mongodb://admin:password\n              @mongodb:27017/test?authSource=admin\n              &readPreference=primary&ssl=false\n         - MONGO_DATABASE=demo\n         - REDIS_URI=redis:6379\n         - API_VERSION=1.0.0\n       ports:\n         - 8080:8080\n       restart: always\n       logging:\n         driver: gelf\n         options:\n           gelf-address: \"udp://127.0.0.1:12201\"\n           tag: \"recipes-api\"\n    ```", "```go\n[GIN] 2021/05/13 - 18:45:44 | 200 |   37.429912ms |   172.26.0.1 | GET   \"/recipes\" \n```", "```go\n%{DATE:date} - %{TIME:time} \\| %{NUMBER:status} \\| %{SPACE} %{NUMBER:requestDuration}%{GREEDYDATA:unit} \\| %{SPACE} %{IP:clientIp} \\| %{WORD:httpMethod} %{SPACE} %{QUOTEDSTRING:url}\n```", "```go\ninput {\n   gelf {\n       type => docker\n       port => 12201\n   }      \n}\nfilter {\n   grok {\n       match => {\"message\" => \"%{DATE:date} - %{TIME:time} \n                 \\| %{NUMBER:status} \\| %{SPACE}    \n                %{NUMBER:requestDuration}%{GREEDYDATA:unit} \n                \\| %{SPACE} %{IP:clientIp} \n                \\| %{WORD:httpMethod} %{SPACE} \n                %{QUOTEDSTRING:url}\"}\n   }\n}\noutput {\n   elasticsearch {\n       hosts => \"elasticsearch:9200\"\n       index => \"containers-%{+YYYY.MM.dd}\"\n   }\n} \n```", "```go\nrouter.Use(gin.LoggerWithFormatter(func(\n                    param gin.LogFormatterParams) string {\n       return fmt.Sprintf(\"[%s] %s %s %d %s\\n\",\n           param.TimeStamp.Format(\"2006-01-02T15:04:05\"),\n           param.Method,\n           param.Path,\n           param.StatusCode,\n           param.Latency,\n       )\n}))\n```", "```go\nGIN_MODE=release go run main.go\n```", "```go\ngin.DisableConsoleColor()\nf, _ := os.Create(\"debug.log\")\ngin.DefaultWriter = io.MultiWriter(f)\n```", "```go\nfilebeat:\n   image: docker.elastic.co/beats/filebeat:7.12.1\n   volumes:\n     - ./filebeat.yml:/usr/share/filebeat/filebeat.yml\n     - ./debug.log:/var/log/api/debug.log\n```", "```go\nfilebeat.inputs:\n- type: log\n  paths:\n   - /var/log/api/debug.log\noutput.elasticsearch:\n  hosts: 'http://elasticsearch:9200'\n```"]