- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section contains answers to the questions from all chapters.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B17115_01_Final_JM_ePub.xhtml#_idTextAnchor015) – Getting started
    with Gin'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Golang** is currently one of the fastest growing programming languages in
    the software development industry. It is a lightweight, open-source language suited
    for today''s microservices architectures.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Multiple web frameworks exist, the most popular are **Gin**, **Martini**, and
    **Gorilla**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Go module is a way to group together a set of packages and give it a version
    number to mark its existence at a specific point in time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The default port of an HTTP server backed by Gin framework is `8080`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use the `c.JSON()` or `c.XML()` methods to return literal JSON or XML
    structs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B17115_02_Final_JM_ePub.xhtml#_idTextAnchor037) – Setting up
    API Endpoints'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**GitFlow** is a branching strategy that developers can follow when using version
    control. To apply the GitFlow model, you need a central Git repository with two
    main branches:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Master**: It stores the official release history.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Develop**: It serves as an integration branch for features.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A model is a normal structs with basic Go types. To declare a struct in Go,
    use the following format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To bind a request body into a type, we use Gin model binding. Gin supports
    binding of JSON, XML and YAML. Gin provides two sets of methods for binding:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Should Bind: `ShouldBindJSON()`, `ShouldBindXML()`, `ShouldBindYAML()`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Must Bind: Binds the struct pointer using the specified binding engine. It
    will abort the request with HTTP 400 if any error occurs.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'First, define a route with an ID as a path parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `GetRecipeHandler` function parses the ID parameter and `go` loop through
    the recipes list. If the ID matches a recipe of the list, it will be returned,
    otherwise a `404 error` will be thrown as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To define a parameter, we use the swagger:parameters annotation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Generate the specification with `swagger` generate command and load the results
    on **Swagger UI**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can now issue a POST request by filling the recipe fields directly from
    the Swagger UI.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B17115_03_Final_JM_ePub.xhtml#_idTextAnchor054) – Managing Data
    Persistence with MongoDB'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can delete recipes using `collection.DeleteOne()` or `collection.DeleteMany()`.
    Here you pass `bson.D({})` as the filter argument, which will match all documents
    in the collection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the `DeleteRecipeHandler` as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure to register the handler on `DELETE /recipes/{id}` resource as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To find a recipe, you will need a filter document, as well as a pointer to value
    into which the result can be decoded. To find a single recipe, use `collection.FindOne()`.
    This method returns a single result which can be decoded into a Recipe struct.
    You'll use the same filter variable you used in the update query to match a recipe
    where ID is `600dcc85a65917cbd1f201b0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Register a handler on the `main.go` file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, declare the `GetOneRecipeHandler` in `handler.go` with the following
    content:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'JSON documents in MongoDB are stored in a binary representation called **BSON**
    (**Binary-encoded JSON**). This format includes additional types such as:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Double
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. String
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Object
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Array
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: e. Binary data
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: f. Undefined
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: g. Object ID
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: h. Boolean
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: i. Date
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: j. Null
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This makes it much easier for applications to reliably process, sort, and compare
    data.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Least Recently Used** (**LRU**) algorithm uses the recent past to approximate
    the near future. It simply deletes the keys that has not been used for the longest
    period of time.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B17115_04_Final_JM_ePub.xhtml#_idTextAnchor073) – Building API
    Authentication'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to create a user or sign them up, we need to define a HTTP handler
    with `SignUpHandle`r as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To ensure the username field is unique in all your users' entries, you can create
    a unique index for the username field.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Define a `ProfileHandler` with the following body:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following Swagger annotation in top of `SignOutHandler` signature:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[*Chapter 5*](B17115_05_Final_JM_ePub.xhtml#_idTextAnchor088) – Serving Static
    HTML in Gin'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a `header.tmpl` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, reference the file in the `recipe.tmpl` with the following code block:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Follow the same approach to create a reusable template for the footer part.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The full-source code of the `NewRecipe.js` component is available on the GitHub
    repository under the folder for [*Chapter 5*](B17115_05_Final_JM_ePub.xhtml#_idTextAnchor088),
    *Serving static HTML in Gin*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Cross-compiling works by setting required environment variables that specify
    the target operating system and architecture. We use the variable `GOOS` for the
    target operating system, and `GOARCH` for the target architecture. To build an
    executable, the command would take this form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For instance, to build the binary for Windows, you can use the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[*Chapter 7*](B17115_07_Final_JM_ePub.xhtml#_idTextAnchor117) – Testing Gin
    HTTP Routes'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Define a `TestUpdateRecipeHandler` in `main_test.go` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define `TestFindRecipeHandler` in `main_test.go` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define `TestFindRecipeHandler` in `main_test.go` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[*Chapter 8*](B17115_08_Final_JM_ePub.xhtml#_idTextAnchor131) – Deploying the
    Application on AWS'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a Docker volume with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then mount the volume while running the Docker container:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To deploy RabbitMQ, you can use the docker-compose.yml to deploy an additional
    service based on the RabbitMQ official image as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the user''s credentials in the form of a Kubernetes secret:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'apiVersion: apps/v1'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'kind: Deployment'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'metadata:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'annotations:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'kompose.cmd: kompose convert'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'kompose.version: 1.22.0 (955b78124)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'creationTimestamp: null'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'labels:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'io.kompose.service: mongodb'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'name: mongodb'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'spec:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'replicas: 1'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'selector:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'matchLabels:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'io.kompose.service: mongodb'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'strategy: {}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'template:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'metadata:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'annotations:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'kompose.cmd: kompose convert'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'kompose.version: 1.22.0 (955b78124)'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'creationTimestamp: null'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'labels:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'io.kompose.service: mongodb'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'spec:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'containers:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '- env:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '- name: MONGO_INITDB_ROOT_PASSWORD'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'valueFrom:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'secretKeyRef:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'name: mongodb-password'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'key: password'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '- name: MONGO_INITDB_ROOT_USERNAME'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'value: admin'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'image: mongo:4.4.3'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'name: mongodb'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'ports:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '- containerPort: 27017'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'resources: {}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'restartPolicy: Always'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'status: {}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To scale the API pods with `kubectl`, issue the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[*Chapter 9*](B17115_09_Final_JM_ePub.xhtml#_idTextAnchor146) – Implementing
    a CI/CD Pipeline'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The pipeline will have the following stages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Checkout the source code from the GitHub repository.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Install the NPM packages with `npm install` command.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Generate the assets with `npm run build` command.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Install the AWS CLI and push the new assets to an S3 bucket.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'e. The `config.yml` is given here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Before running the pipeline, you will need to give access `S3:PutObject` permission
    to the **CircleCI IAM** user.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can configure the Slack ORB to send a notification on a successful pipeline
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
