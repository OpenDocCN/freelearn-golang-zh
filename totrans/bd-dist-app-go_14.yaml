- en: Assessments
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估
- en: This section contains answers to the questions from all chapters.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包含所有章节的问题答案。
- en: '[*Chapter 1*](B17115_01_Final_JM_ePub.xhtml#_idTextAnchor015) – Getting started
    with Gin'
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第1章*](B17115_01_Final_JM_ePub.xhtml#_idTextAnchor015) – 开始使用Gin'
- en: '**Golang** is currently one of the fastest growing programming languages in
    the software development industry. It is a lightweight, open-source language suited
    for today''s microservices architectures.'
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Golang** 目前是软件开发行业中增长最快的编程语言之一。它是一种轻量级、开源的语言，适合今天的微服务架构。'
- en: Multiple web frameworks exist, the most popular are **Gin**, **Martini**, and
    **Gorilla**.
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 存在多个Web框架，其中最受欢迎的是 **Gin**，**Martini** 和 **Gorilla**。
- en: A Go module is a way to group together a set of packages and give it a version
    number to mark its existence at a specific point in time.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Go模块是将一组包组合在一起并为其指定一个版本号以标记其在特定时间点存在的方式。
- en: The default port of an HTTP server backed by Gin framework is `8080`.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由Gin框架支持的HTTP服务器的默认端口是 `8080`。
- en: You can use the `c.JSON()` or `c.XML()` methods to return literal JSON or XML
    structs.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用 `c.JSON()` 或 `c.XML()` 方法返回字面量JSON或XML结构体。
- en: '[*Chapter 2*](B17115_02_Final_JM_ePub.xhtml#_idTextAnchor037) – Setting up
    API Endpoints'
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第2章*](B17115_02_Final_JM_ePub.xhtml#_idTextAnchor037) – 设置API端点'
- en: '**GitFlow** is a branching strategy that developers can follow when using version
    control. To apply the GitFlow model, you need a central Git repository with two
    main branches:'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**GitFlow** 是开发者在使用版本控制时可以遵循的分支策略。要应用GitFlow模型，您需要一个中央Git仓库和两个主要分支：'
- en: '**Master**: It stores the official release history.'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**主分支**：它存储官方发布历史。'
- en: '**Develop**: It serves as an integration branch for features.'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**开发**：它作为功能集成的分支。'
- en: 'A model is a normal structs with basic Go types. To declare a struct in Go,
    use the following format:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模型是具有基本Go类型的普通结构体。要在Go中声明结构体，请使用以下格式：
- en: '[PRE0]'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To bind a request body into a type, we use Gin model binding. Gin supports
    binding of JSON, XML and YAML. Gin provides two sets of methods for binding:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将请求体绑定到类型，我们使用Gin模型绑定。Gin支持绑定JSON、XML和YAML。Gin提供了两套绑定方法：
- en: 'Should Bind: `ShouldBindJSON()`, `ShouldBindXML()`, `ShouldBindYAML()`'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应该绑定：`ShouldBindJSON()`，`ShouldBindXML()`，`ShouldBindYAML()`
- en: 'Must Bind: Binds the struct pointer using the specified binding engine. It
    will abort the request with HTTP 400 if any error occurs.'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 必须绑定：使用指定的绑定引擎绑定结构体指针。如果发生任何错误，它将终止请求并返回HTTP 400。
- en: 'First, define a route with an ID as a path parameter:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，定义一个带有ID作为路径参数的路由：
- en: '[PRE1]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `GetRecipeHandler` function parses the ID parameter and `go` loop through
    the recipes list. If the ID matches a recipe of the list, it will be returned,
    otherwise a `404 error` will be thrown as follows:'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`GetRecipeHandler` 函数解析ID参数，并使用 `go` 循环遍历配方列表。如果ID与列表中的配方匹配，则将其返回，否则将抛出 `404错误`，如下所示：'
- en: '[PRE2]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To define a parameter, we use the swagger:parameters annotation:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要定义一个参数，我们使用swagger:parameters注解：
- en: '[PRE3]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Generate the specification with `swagger` generate command and load the results
    on **Swagger UI**.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 `swagger` generate 命令生成规范并在 **Swagger UI** 上加载结果。
- en: You can now issue a POST request by filling the recipe fields directly from
    the Swagger UI.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您现在可以直接从Swagger UI填写配方字段来发出POST请求。
- en: '[*Chapter 3*](B17115_03_Final_JM_ePub.xhtml#_idTextAnchor054) – Managing Data
    Persistence with MongoDB'
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第3章*](B17115_03_Final_JM_ePub.xhtml#_idTextAnchor054) – 使用MongoDB管理数据持久性'
- en: You can delete recipes using `collection.DeleteOne()` or `collection.DeleteMany()`.
    Here you pass `bson.D({})` as the filter argument, which will match all documents
    in the collection.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用 `collection.DeleteOne()` 或 `collection.DeleteMany()` 删除配方。在这里，您将 `bson.D({})`
    作为过滤器参数传递，这将匹配集合中的所有文档。
- en: 'Update the `DeleteRecipeHandler` as follows:'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 按照以下方式更新 `DeleteRecipeHandler`：
- en: '[PRE4]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Make sure to register the handler on `DELETE /recipes/{id}` resource as follows:'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保按照以下方式在 `DELETE /recipes/{id}` 资源上注册处理器：
- en: '[PRE5]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To find a recipe, you will need a filter document, as well as a pointer to value
    into which the result can be decoded. To find a single recipe, use `collection.FindOne()`.
    This method returns a single result which can be decoded into a Recipe struct.
    You'll use the same filter variable you used in the update query to match a recipe
    where ID is `600dcc85a65917cbd1f201b0`.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查找配方，您需要一个过滤器文档以及一个指向可以解码结果的值的指针。要查找单个配方，请使用 `collection.FindOne()`。此方法返回单个结果，可以解码到Recipe结构体。您将使用与更新查询中相同的过滤器变量来匹配ID为
    `600dcc85a65917cbd1f201b0` 的配方。
- en: 'Register a handler on the `main.go` file:'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `main.go` 文件上注册处理器：
- en: '[PRE6]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, declare the `GetOneRecipeHandler` in `handler.go` with the following
    content:'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，在 `handler.go` 中声明 `GetOneRecipeHandler`，内容如下：
- en: '[PRE7]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'JSON documents in MongoDB are stored in a binary representation called **BSON**
    (**Binary-encoded JSON**). This format includes additional types such as:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MongoDB 中的 JSON 文档以称为 **BSON**（**二进制编码的 JSON**）的二进制表示形式存储。此格式包括如下的附加类型：
- en: a. Double
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. 双精度
- en: b. String
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. 字符串
- en: c. Object
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. 对象
- en: d. Array
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d. 数组
- en: e. Binary data
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: e. 二进制数据
- en: f. Undefined
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: f. 未定义
- en: g. Object ID
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: g. 对象 ID
- en: h. Boolean
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: h. 布尔
- en: i. Date
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: i. 日期
- en: j. Null
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: j. 空值
- en: This makes it much easier for applications to reliably process, sort, and compare
    data.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这使得应用程序能够更可靠地处理、排序和比较数据。
- en: '**Least Recently Used** (**LRU**) algorithm uses the recent past to approximate
    the near future. It simply deletes the keys that has not been used for the longest
    period of time.'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最近最少使用**（**LRU**）算法使用最近过去来近似近未来。它简单地删除了最长时间未被使用的键。'
- en: '[*Chapter 4*](B17115_04_Final_JM_ePub.xhtml#_idTextAnchor073) – Building API
    Authentication'
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第4章*](B17115_04_Final_JM_ePub.xhtml#_idTextAnchor073) – 构建 API 身份验证'
- en: 'In order to create a user or sign them up, we need to define a HTTP handler
    with `SignUpHandle`r as follows:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了创建用户或注册他们，我们需要定义一个带有 `SignUpHandle`r 的 HTTP 处理器，如下所示：
- en: '[PRE8]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To ensure the username field is unique in all your users' entries, you can create
    a unique index for the username field.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了确保用户名字段在所有用户的条目中都是唯一的，你可以为用户名字段创建一个唯一索引。
- en: 'Define a `ProfileHandler` with the following body:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个具有以下主体的 `ProfileHandler`：
- en: '[PRE9]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add the following Swagger annotation in top of `SignOutHandler` signature:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `SignOutHandler` 签名上方添加以下 Swagger 注解：
- en: '[PRE10]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[*Chapter 5*](B17115_05_Final_JM_ePub.xhtml#_idTextAnchor088) – Serving Static
    HTML in Gin'
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第5章*](B17115_05_Final_JM_ePub.xhtml#_idTextAnchor088) – 在 Gin 中提供静态 HTML'
- en: 'Create a `header.tmpl` file with the following content:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含以下内容的 `header.tmpl` 文件：
- en: '[PRE11]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, reference the file in the `recipe.tmpl` with the following code block:'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，使用以下代码块在 `recipe.tmpl` 中引用该文件：
- en: '[PRE12]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Follow the same approach to create a reusable template for the footer part.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 按照相同的方法创建一个可重复使用的模板用于页脚部分。
- en: The full-source code of the `NewRecipe.js` component is available on the GitHub
    repository under the folder for [*Chapter 5*](B17115_05_Final_JM_ePub.xhtml#_idTextAnchor088),
    *Serving static HTML in Gin*.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`NewRecipe.js` 组件的完整源代码可在 GitHub 仓库中找到，位于 [*第5章*](B17115_05_Final_JM_ePub.xhtml#_idTextAnchor088)
    的 *在 Gin 中提供静态 HTML* 文件夹下。'
- en: 'Cross-compiling works by setting required environment variables that specify
    the target operating system and architecture. We use the variable `GOOS` for the
    target operating system, and `GOARCH` for the target architecture. To build an
    executable, the command would take this form:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过设置指定目标操作系统和架构的必要环境变量来实现交叉编译。我们使用变量 `GOOS` 来指定目标操作系统，使用 `GOARCH` 来指定目标架构。要构建可执行文件，命令将采取以下形式：
- en: '[PRE13]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'For instance, to build the binary for Windows, you can use the following command:'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，为了构建 Windows 的二进制文件，你可以使用以下命令：
- en: '[PRE14]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[*Chapter 7*](B17115_07_Final_JM_ePub.xhtml#_idTextAnchor117) – Testing Gin
    HTTP Routes'
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第7章*](B17115_07_Final_JM_ePub.xhtml#_idTextAnchor117) – 测试 Gin HTTP 路由'
- en: 'Define a `TestUpdateRecipeHandler` in `main_test.go` as follows:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main_test.go` 中定义 `TestUpdateRecipeHandler` 如下：
- en: '[PRE15]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Define `TestFindRecipeHandler` in `main_test.go` as follows:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main_test.go` 中定义 `TestFindRecipeHandler` 如下：
- en: '[PRE16]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Define `TestFindRecipeHandler` in `main_test.go` as follows:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main_test.go` 中定义 `TestFindRecipeHandler` 如下：
- en: '[PRE17]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[*Chapter 8*](B17115_08_Final_JM_ePub.xhtml#_idTextAnchor131) – Deploying the
    Application on AWS'
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第8章*](B17115_08_Final_JM_ePub.xhtml#_idTextAnchor131) – 在 AWS 上部署应用程序'
- en: 'Create a Docker volume with the following command:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建一个 Docker 卷：
- en: '[PRE18]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then mount the volume while running the Docker container:'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，在运行 Docker 容器时挂载该卷：
- en: '[PRE19]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To deploy RabbitMQ, you can use the docker-compose.yml to deploy an additional
    service based on the RabbitMQ official image as follows:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要部署 RabbitMQ，可以使用 docker-compose.yml 部署基于 RabbitMQ 官方镜像的附加服务，如下所示：
- en: '[PRE20]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create the user''s credentials in the form of a Kubernetes secret:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以 Kubernetes 机密的形式创建用户的凭证：
- en: '[PRE21]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'apiVersion: apps/v1'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'apiVersion: apps/v1'
- en: 'kind: Deployment'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'kind: Deployment'
- en: 'metadata:'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'metadata:'
- en: 'annotations:'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'annotations:'
- en: 'kompose.cmd: kompose convert'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'kompose.cmd: kompose convert'
- en: 'kompose.version: 1.22.0 (955b78124)'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'kompose.version: 1.22.0 (955b78124)'
- en: 'creationTimestamp: null'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'creationTimestamp: null'
- en: 'labels:'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'labels:'
- en: 'io.kompose.service: mongodb'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'io.kompose.service: mongodb'
- en: 'name: mongodb'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'name: mongodb'
- en: 'spec:'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'spec:'
- en: 'replicas: 1'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'replicas: 1'
- en: 'selector:'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'selector:'
- en: 'matchLabels:'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'matchLabels:'
- en: 'io.kompose.service: mongodb'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'io.kompose.service: mongodb'
- en: 'strategy: {}'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'strategy: {}'
- en: 'template:'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'template:'
- en: 'metadata:'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'metadata:'
- en: 'annotations:'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'annotations:'
- en: 'kompose.cmd: kompose convert'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'kompose.cmd: kompose convert'
- en: 'kompose.version: 1.22.0 (955b78124)'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'kompose.version: 1.22.0 (955b78124)'
- en: 'creationTimestamp: null'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'creationTimestamp: null'
- en: 'labels:'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 标签：
- en: 'io.kompose.service: mongodb'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'io.kompose.service: mongodb'
- en: 'spec:'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 规范：
- en: 'containers:'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 容器：
- en: '- env:'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 环境变量：'
- en: '- name: MONGO_INITDB_ROOT_PASSWORD'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 名称：MONGO_INITDB_ROOT_PASSWORD'
- en: 'valueFrom:'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 值来源：
- en: 'secretKeyRef:'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 密钥引用：
- en: 'name: mongodb-password'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 名称：mongodb-password
- en: 'key: password'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 键：password
- en: '- name: MONGO_INITDB_ROOT_USERNAME'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 名称：MONGO_INITDB_ROOT_USERNAME'
- en: 'value: admin'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 值：admin
- en: 'image: mongo:4.4.3'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 镜像：mongo:4.4.3
- en: 'name: mongodb'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 名称：mongodb
- en: 'ports:'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 端口配置：
- en: '- containerPort: 27017'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 容器端口：27017'
- en: 'resources: {}'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 资源：{}
- en: 'restartPolicy: Always'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重启策略：Always
- en: 'status: {}'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 状态：{}
- en: '[PRE22]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To scale the API pods with `kubectl`, issue the following command:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `kubectl` 缩放 API pods，请执行以下命令：
- en: '[PRE23]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[*Chapter 9*](B17115_09_Final_JM_ePub.xhtml#_idTextAnchor146) – Implementing
    a CI/CD Pipeline'
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第9章*](B17115_09_Final_JM_ePub.xhtml#_idTextAnchor146) – 实施CI/CD管道'
- en: 'The pipeline will have the following stages:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 管道将包含以下阶段：
- en: a. Checkout the source code from the GitHub repository.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. 从GitHub仓库检出源代码。
- en: b. Install the NPM packages with `npm install` command.
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. 使用 `npm install` 命令安装NPM包。
- en: c. Generate the assets with `npm run build` command.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. 使用 `npm run build` 命令生成资源。
- en: d. Install the AWS CLI and push the new assets to an S3 bucket.
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d. 安装AWS CLI并将新资源推送到S3存储桶。
- en: 'e. The `config.yml` is given here:'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: e. `config.yml` 配置如下：
- en: '[PRE24]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Before running the pipeline, you will need to give access `S3:PutObject` permission
    to the **CircleCI IAM** user.
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在运行管道之前，您需要给 **CircleCI IAM** 用户授予 `S3:PutObject` 访问权限。
- en: 'You can configure the Slack ORB to send a notification on a successful pipeline
    as follows:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以配置 Slack ORB，以便在管道成功时发送通知，如下所示：
- en: '[PRE25]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
