["```go\ncobra-cli add upload\n```", "```go\n  audiofile-cli go run main.go upload\nupload called\n```", "```go\npackage cmd\nimport (\n    \"github.com/spf13/cobra\"\n)\n// uploadCmd represents the upload command\nvar uploadCmd = &cobra.Command{\n    Use:   \"upload [audio|video] [-f|--filename]\n      <filename>\",\n    Short: \"upload an audio or video file\",\n    Long: `This command allows you to upload either an\n      audio or video file for metadata extraction.\n    To pass in a filename, use the -f or --filename flag\n     followed by the path of the file.\n    Examples:\n    ./audiofile-cli upload audio -f audio/beatdoctor.mp3\n    ./audiofile-cli upload video --filename video/\n      musicvideo.mp4`,\n}\nfunc init() {\n    rootCmd.AddCommand(uploadCmd)\n}\n```", "```go\n  cobra-cli add audio\naudio created at /Users/marian/go/src/github.com/\n  marianina8/audiofile-cli\n  cobra-cli add video\nvideo created at /Users/marian/go/src/github.com/\n  marianina8/audiofile-cli\n```", "```go\nfunc init() {\n    audioCmd.Flags().StringP(\"filename\", \"f\", \"\", \"audio\n      file\")\n    uploadCmd.AddCommand(audioCmd)\n}\n```", "```go\n    RunE: func(cmd *cobra.Command, args []string) error {\n        filename, err := cmd.Flags().GetString(\"filename\")\n        if err != nil {\n            fmt.Printf(\"error retrieving filename: %s\\n\",\n            err.Error())\n            return err\n        }\n        if filename == \"\" {\n            return errors.New(\"missing filename\")\n        }\n        fmt.Println(\"uploading audio file, \", filename)\n        return nil\n    },\n```", "```go\ncobra-cli add upload\n```", "```go\n  go run main.go upload\nThis command allows you to upload either an audio or video\n  file for metadata extraction.\n    To pass in a filename, use the -f or --filename flag\n  followed by the path of the file.\n     Examples:\n     ./audiofile-cli upload audio -f audio/beatdoctor.mp3\n     ./audiofile-cli upload video --filename video/musicvideo.mp4\nUsage:\n  audiofile-cli upload [command]\nAvailable Commands:\n  audio       sets audio as the upload type\n  video       sets video as the upload type\n```", "```go\ncobra-cli add upload audio [-f|--filename]\n  audio/beatdoctor.mp3\n```", "```go\n  go run main.go upload audio -f audio/beatdoctor.mp3\nuploading audio file,audio/beatdoctor.mp3\n```", "```go\nfunc init() {\n    uploadCmd.AddCommand(audioCmd)\n}\n```", "```go\nvar (\n    Filename = \"\"\n)\nfunc init() {\n    uploadCmd.PersistentFlags().StringVarP(&Filename,\n      \"filename\", \"f\", \"\", \"file to upload\")\n    rootCmd.AddCommand(uploadCmd)\n}\n```", "```go\n  go run main.go upload audio -f audio/beatdoctor.mp3\nuploading audio file,  audio/beatdoctor.mp3\n```", "```go\nfunc init() {\n    uploadCmd.PersistentFlags().StringVarP(&Filename,\n      \"filename\", \"f\", \"\", \"file to upload\")\n    uploadCmd.MarkPersistentFlagRequired(\"filename\")\n    rootCmd.AddCommand(uploadCmd)\n}\n```", "```go\n  go run main.go upload audio\nError: required flag(s) \"filename\" not set\nUsage:\n  audiofile-cli upload audio [flags]\nFlags:\n  -h, --help   help for audio\nGlobal Flags:\n  -f, --filename string   file to upload\nexit status 1\n```", "```go\n  go run main.go uload audio\nCobra will automatically respond with some intelligent\n  suggestions:\nError: unknown command \"uload\" for \"audiofile-cli\"\nDid you mean this?\n     upload\nRun 'audiofile-cli --help' for usage.\nexit status 1\n```", "```go\nenvironments:\n  test:\n    url: 89.45.23.123\n    port: 1234\n  prod:\n    url: 123.23.45.89\n    port: 5678\nloglevel: 1\nkeys:\n  assemblyai: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```", "```go\nviper.SetConfigName(\"config) // config filename, omit\n  extension\nviper.AddConfigPath(\".\")      // optional locations for\n  searching for config files\nerr = viper.ReadInConfig()    // using the previous\n  settings above, attempt to find and read in the\n    configuration\nif err != nil { // Handle errors\n    panic(fmt.Errorf(\"err: %w \\n\", err))\n}\nfmt.Println(\"prod environment url:\",\n  viper.Get(\"environments.prod.url\"))\n```", "```go\nviper.SetEnvPrefix(\"AUDIOFILE\")\nviper.BindEnv(\"TEST_URL\")\nos.Setenv(\"AUDIOFILE_TEST_URL\", \"89.45.23.123\") //sets the\n  environment variable\nfmt.Println(\"test environment url from environment\n  variable:\", viper.Get(\"TEST_URL\"))\n```", "```go\nviper.SetDefault(\"host\", \"localhost\")\nviper.SetDefault(\"port\", 1234)\nviper.BindEnv(\"host\", \"AUDIOFILE_HOST\")\nviper.BindEnv(\"port\", \"AUDIOFILE_PORT\")\n```", "```go\nport := viper.GetInt(\"port\")\n```", "```go\npflag.CommandLine.AddGoFlagSet(flag.CommandLine)\npflag.Int(\"port\", 1234, \"port\")\npflag.String(\"url\", \"12.34.567.123\", \"url\")\nplag.Parse()\nviper.BindPFlags(pflag.CommandLine)\n```", "```go\ntype FlagValue interface {\n    HasChanged() bool\n    Name() string\n    ValueString() string\n    ValueType() string\n}\n```", "```go\ntype FlagValueSet interface {\n    VisitAll(fn func(FlagValue))\n}\n```", "```go\ntype customFlagSet struct {\n    flags []customFlag\n}\nfunc (set customFlagSet) VisitAll(fn func(FlagValue)) {\n    for i, flag := range set.flags {\nfmt.Printf(\"%d: %v\\n\", i, flag)\n        fn(flag)\n    }\n}\n```", "```go\nvar config = []byte(`\n    environments:\n    test:\n      url: 89.45.23.123\n      port: 1234\n    prod:\n      url: 123.23.45.89\n      port: 5678\n  loglevel: 1\n  keys:\n    assemblyai: ad915a59802309238234892390482304\n`)\nviper.SetConfigType(\"yaml\")\nviper.ReadConfig(bytes.NewBuffer(config))\nviper.Get(\"environments.test.url\") // 89.45.23.123\n```", "```go\nviper.OnConfigChange(func(event fsnotify.Event) {\n    fmt.Println(\"Config modified:\", event)\n})\nviper.WatchConfig()\n```", "```go\nvar remoteConfig = viper.New()\nremoteConfig.AddRemoteProvider(\"consul\",\n  \"http://127.0.0.1:2380\", \"/config/audiofile-cli.json\")\nremoteConfig.SetConfigType(\"json\")\nerr := remoteConfig.ReadRemoteConfig()\nif err != nil {\n    return err\n}\nremoteConfig.Unmarshal(&remote_conf)\n```", "```go\ngo func(){\n    for {\n        time.Sleep(time.Second * 1)\n        _:= remoteConfig.WatchRemoteConfig()\n        remoteConfig.Unmarshal(&remote_conf)\n    }\n}()\n```", "```go\ncobra-cli add add\ncobra-cli add subtract\ncobra-cli add multiply\ncobra-cli add divide\n```", "```go\n// addCmd represents the add command\nvar addCmd = &cobra.Command{\n    Use: \"add number\",\n    Short: \"Add value\",\n    Run: func(cmd *cobra.Command, args []string) {\n        if len(args) > 1 {\n            fmt.Println(\"only accepts a single argument\")\n            return\n        }\n        if len(args) == 0 {\n            fmt.Println(\"command requires input value\")\n            return\n        }\n        floatVal, err := strconv.ParseFloat(args[0], 64)\n        if err != nil {\n            fmt.Printf(\"unable to parse input[%s]: %v\",\n              args[0], err)\n            return\n        }\n        value = storage.GetValue()\n        value += floatVal\n        storage.SetValue(value)\n        fmt.Printf(\"%f\\n\", value)\n    },\n}\n```", "```go\nif len(args) > 1 {\n    fmt.Println(\"only accepts a single argument\")\n    return\n}\nif len(args) == 0 {\n    fmt.Println(\"command requires input value\")\n    return\n}\n```", "```go\nfloatVal, err := strconv.ParseFloat(args[0], 64)\nif err != nil {\n    fmt.Printf(\"unable to parse input[%s]: %v\", args[0],\n      err)\n    return\n}\n```", "```go\nvalue = storage.GetValue()\nvalue += floatVal\nstorage.SetValue(value)\n```", "```go\nfmt.Printf(\"%f\\n\", value)\n```", "```go\nvalue -= floatVal\n```", "```go\nvalue *= floatVal\n```", "```go\nvalue /= floatVal\n```", "```go\n// clearCmd represents the clear command\nvar clearCmd = &cobra.Command{\n    Use: \"clear\",\n    Short: \"Clear result\",\n    Run: func(cmd *cobra.Command, args []string) {\n        if len(args) > 0 {\n            fmt.Println(\"command does not accept args\")\n            return\n        }\n        storage.SetValue(0)\n        fmt.Println(0.0)\n    },\n}\n```", "```go\nfunc SetValue(floatVal float64) error {\n    f, err := os.OpenFile(viper.GetString(\"filename\"),\n       os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0755)\n    if err != nil {\n        return err\n    }\n    defer f.Close()\n    _, err = f.WriteString(fmt.Sprintf(\"%f\", floatVal))\n    if err != nil {\n        return err\n    }\n    return nil\n}\n```", "```go\nfunc GetValue() float64 {\n    dat, err := os.ReadFile(viper.GetString(\"filename\"))\n    if err != nil {\n        fmt.Println(\"unable to read from storage\")\n        return 0\n    }\n    floatVal, err := strconv.ParseFloat(string(dat), 64)\n    if err != nil {\n        return 0\n    }\n    return floatVal\n}\n```", "```go\nfunc main() {\n    viper.AddConfigPath(\".\")\n    viper.SetConfigName(\"config\")\n    viper.SetConfigType(\"json\")\n    err := viper.ReadInConfig()\n    if err != nil {\n        fmt.Println(\"error reading in config: \", err)\n    }\n    cmd.Execute()\n}\n```", "```go\n{\n   \"filename\": \"storage/result\"\n}\n```", "```go\n% ./calculator clear\n0\n% ./calculator add 123456789\n123456789.000000\n% ./calculator add 987654321\n1111111110.000000\n% ./calculator add 1\n1111111111.000000\n% ./calculator multiply 8\n8888888888.000000\n% ./calculator divide 222222222\n40.000000\n% ./calculator subtract 40\n0.000000\n```"]