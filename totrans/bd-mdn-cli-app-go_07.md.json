["```go\nfunc environment() {\n    dir, err := os.Getwd()\n    if err != nil {\n        fmt.Println(\"error getting working directory:\", err)\n    }\n    fmt.Println(\"retrieved working directory: \", dir)\n    fmt.Println(\"setting WORKING_DIR to\", dir)\n    err = os.Setenv(\"WORKING_DIR\", dir)\n    if err != nil {\n        fmt.Println(\"error setting working directory:\", err)\n    }\n    fmt.Println(os.ExpandEnv(\"WORKING_DIR=${WORKING_DIR}\"))\n    fmt.Println(\"unsetting WORKING_DIR\")\n    err = os.Unsetenv(\"WORKING_DIR\")\n    if err != nil {\n        fmt.Println(\"error unsetting working directory:\", err)\n    }\n    fmt.Println(os.ExpandEnv(\"WORKING_DIR=${WORKING_DIR}\"))\n    fmt.Printf(\"There are %d environment variables:\\n\", len(os.\n        Environ()))\n    for _, envar := range os.Environ() {\n        fmt.Println(\"\\t\", envar)\n    }\n}\n```", "```go\nretrieved working directory:  /Users/mmontagnino/Code/src/github.com/marianina8/Chapter-7\nsetting WORKING_DIR to /Users/mmontagnino/Code/src/github.com/marianina8/Chapter-7\nWORKING_DIR=/Users/mmontagnino/Code/src/github.com/marianina8/Chapter-7\nThere are 44 environment variables.\nkey=WORKING_DIR, value=/Users/mmontagnino/Code/src/github.com/marianina8/Chapter-7\nunsetting WORKING_DIR\nWORKING_DIR=\n```", "```go\nfunc createFiles() error {\n    filename1 := \"file1\"\n    filename2 := \"file2\"\n    filename3 := \"file3\"\n    f1, err := os.Create(filename1)\n    if err != nil {\n        return fmt.Errorf(\"error creating %s: %v\\n\", filename1, \n          err)\n    }\n    defer f1.Close()\n    f1.WriteString(\"abc\")\n    f2, err := os.Create(filename2)\n    if err != nil {\n        return fmt.Errorf(\"error creating %s: %v\\n\", filename2, \n          err)\n    }\n    defer f2.Close()\n    f2.WriteString(\"123\")\n    f3, err := os.Create(filename3)\n    if err != nil {\n        return fmt.Errorf(\"error creating %s: %v\", filename3, \n          err)\n    }\n    defer f3.Close()\n    f3.WriteString(\"xyz\")\n    return nil\n}\n```", "```go\noriginalWorkingDir, err := os.Getwd()\nif err != nil {\n    fmt.Println(\"getting working directory: \", err)\n}\nfmt.Println(\"working directory: \", originalWorkingDir)\nexamplesDir, err := createExamplesDir()\nif err != nil {\n    fmt.Println(\"creating examples directory: \", err)\n}\nerr = os.Chdir(examplesDir)\nif err != nil {\n    fmt.Println(\"changing directory error:\", err)\n}\nfmt.Println(\"changed working directory: \", examplesDir)\nworkingDir, err := os.Getwd()\nif err != nil {\n    fmt.Println(\"getting working directory: \", err)\n}\nfmt.Println(\"working directory: \", workingDir)\ncreateFiles()\nerr = printFiles(workingDir)\nif err != nil {\n    fmt.Printf(\"Error printing files in %s\\n\", workingDir)\n}\nerr = os.Chdir(originalWorkingDir)\nif err != nil {\n    fmt.Println(\"changing directory error: \", err)\n}\nfmt.Println(\"working directory: \", workingDir)\nsymlink := filepath.Join(originalWorkingDir, \"examplesLink\")\nerr = os.Symlink(examplesDir, symlink)\nif err != nil {\n    fmt.Println(\"error creating symlink: \", err)\n}\nfmt.Printf(\"created symlink, %s, to %s\\n\", symlink, examplesDir)\nerr = printFiles(symlink)\nif err != nil {\n    fmt.Printf(\"Error printing files in %s\\n\", workingDir)\n}\nfile := filepath.Join(examplesDir, \"file1\")\nlinkedFile := filepath.Join(symlink, \"file1\")\nerr = sameFileCheck(file, linkedFile)\nif err != nil {\n    fmt.Println(\"unable to do same file check: \", err)\n}\n// cleanup\nerr = os.Remove(symlink)\nif err != nil {\n    fmt.Println(\"removing symlink error: \", err)\n}\nerr = os.RemoveAll(examplesDir)\nif err != nil {\n    fmt.Println(\"removing directory error: \", err)\n}\n```", "```go\nfunc createExamplesDir() (string, error) {\n    homeDir, err := os.UserHomeDir()\n    if err != nil {\n        return \"\", fmt.Errorf(\"getting user's home directory: \n          %v\\n\", err)\n    }\n    fmt.Println(\"home directory: \", homeDir)\n    examplesDir := filepath.Join(homeDir, \"examples\")\n    err = os.Mkdir(examplesDir, os.FileMode(int(0777)))\n    if err != nil {\n        return \"\", fmt.Errorf(\"making directory error: %v\\n\", \n          err)\n    }\n    fmt.Println(\"created: \", examplesDir)\n    return examplesDir, nil\n}\n```", "```go\nfunc printFiles(dir string) error {\n    files, err := os.ReadDir(dir)\n    if err != nil {\n        return fmt.Errorf(\"read directory error: %s\\n\", err)\n    }\n    fmt.Printf(\"files in %s:\\n\", dir)\n    for i, file := range files {\n        fmt.Printf(\" %v %v\\n\", i, file.Name())\n    }\n    return nil\n}\n```", "```go\nfunc sameFileCheck(f1, f2 string) error {\n    fileInfo0, err := os.Lstat(f1)\n    if err != nil {\n        return fmt.Errorf(\"getting fileinfo: %v\", err)\n    }\n    fileInfo0Linked, err := os.Lstat(f2)\n    if err != nil {\n        return fmt.Errorf(\"getting fileinfo: %v\", err)\n    }\n    isSameFile := os.SameFile(fileInfo0, fileInfo0Linked)\n    if isSameFile {\n        fmt.Printf(\"%s and %s are the same file.\\n\", fileInfo0.\n            Name(), fileInfo0Linked.Name())\n    } else {\n    fmt.Printf(\"%s and %s are NOT the same file.\\n\", fileInfo0.\n        Name(), fileInfo0Linked.Name())\n    }\n    return nil\n}\n```", "```go\nfunc process() {\n    fmt.Println(\"Caller group id:\", os.Getegid())\n    fmt.Println(\"Caller user id:\", os.Geteuid())\n    fmt.Println(\"Process id of caller\", os.Getpid())\n    cmd := exec.Command(filepath.Join(os.Getenv(\"GOPATH\"), \n           \"bin\", \"sleep\"))\n    fmt.Println(\"running sleep for 1 second...\")\n    if err := cmd.Start(); err != nil {\n        panic(err)\n    }\n    fmt.Println(\"Process id of sleep\", cmd.Process.Pid)\n    this, err := os.FindProcess(cmd.Process.Pid)\n    if err != nil {\n        fmt.Println(\"unable to find process with id: \", cmd.\n            Process.Pid)\n    }\n    processState, err := this.Wait()\n    if err != nil {\n        panic(err)\n    }\n    if processState.Exited() && processState.Success() {\n        fmt.Println(\"Sleep process ran successfully with exit \n            code: \", processState.ExitCode())\n    } else {\n        fmt.Println(\"Sleep process failed with exit code: \", \n            processState.ExitCode())\n    }\n    fmt.Println(processState.String())\n}\n```", "```go\nfunc timer() {\n    start := time.Now()\n    fmt.Println(\"start time: \", start)\n    time.Sleep(1 * time.Second)\n    elapsed := time.Until(start)\n    fmt.Println(\"elapsed time: \", elapsed)\n}\n```", "```go\nstart time:  2022-09-24 23:47:38.964133 -0700 PDT m=+0.000657043\nelapsed time:  -1.002107875s\n```", "```go\nfunc walking() {\n    workingDir, err := os.Getwd()\n    if err != nil {\n        panic(err)\n    }\n    dir1 := filepath.Join(workingDir, \"dir1\")\n    filepath.WalkDir(dir1, func(path string, d fs.DirEntry, err \n      error) error {\n        if !d.IsDir() {\n            contents, err := os.ReadFile(path)\n            if err != nil {\n                return err\n            }\n            fmt.Printf(\"%s -> %s\\n\", d.Name(), \n                string(contents))\n        }\n        return nil\n    })\n}\n```", "```go\nfunc checkRuntime() {\n    fmt.Println(\"Operating System:\", runtime.GOOS)\n    fmt.Println(\"Architecture:\", runtime.GOARCH)\n    fmt.Println(\"Go Root:\", runtime.GOROOT())\n    fmt.Println(\"Compiler:\", runtime.Compiler)\n    fmt.Println(\"No. of CPU:\", runtime.NumCPU())\n    fmt.Println(\"No. of Goroutines:\", runtime.NumGoroutine())\n    fmt.Println(\"Version:\", runtime.Version())\n    debug.PrintStack()\n}\n```", "```go\nOperating System: darwin\nArchitecture: amd64\nGo Root: /usr/local/go\nCompiler: gc\nNo. of CPU: 10\nNo. of Goroutines: 1\nVersion: go1.19\ngoroutine 1 [running]:\nruntime/debug.Stack()\n        /usr/local/go/src/runtime/debug/stack.go:24 +0x65\nruntime/debug.PrintStack()\n        /usr/local/go/src/runtime/debug/stack.go:16 +0x19\nmain.checkRuntime()\n        /Users/mmontagnino/Code/src/github.com/marianina8/Chapter-7/checkRuntime.go:17 +0x372\nmain.main()\n        /Users/mmontagnino/Code/src/github.com/marianina8/Chapter-7/main.go:9 +0x34\n```", "```go\nfunc (f FlatFile) Delete(id string) error {\n    dirname, err := os.UserHomeDir()\n    if err != nil {\n        return err\n    }\n    audioIDFilePath := filepath.Join(dirname, \"audiofile\", id)\n    err = os.RemoveAll(audioIDFilePath)\n    if err != nil {\n        return err\n    }\n    return nil\n}\n```", "```go\n./bin/audiofile upload --filename audio/beatdoctor.mp3\n```", "```go\nUploading audio/beatdoctor.mp3 ...\nAudiofile ID:  a5d9ab11-6f5f-4da0-9307-a3b609b0a6ba\n```", "```go\n./bin/audiofile list\n```", "```go\n    {\n        \"Id\": \"a5d9ab11-6f5f-4da0-9307-a3b609b0a6ba\",\n        \"Path\": \"/Users/mmontagnino/audiofile/a5d9ab11-6f5f-4da0-9307-a3b609b0a6ba/beatdoctor.mp3\",\n        \"Metadata\": {\n            \"tags\": {\n                \"title\": \"Shot In The Dark\",\n                \"album\": \"Best Bytes Volume 4\",\n                \"artist\": \"Beat Doctor\",\n                \"album_artist\": \"Toucan Music (Various Artists)\",\n                \"composer\": \"\",\n                \"genre\": \"Electro House\",\n                \"year\": 0,\n                \"lyrics\": \"\",\n                \"comment\": \"URL: http://freemusicarchive.org/music/Beat_Doctor/Best_Bytes_Volume_4/09_beat_doctor_shot_in_the_dark\\r\\nComments: http://freemusicarchive.org/\\r\\nCurator: Toucan Music\\r\\nCopyright: Attribution-NonCommercial 3.0 International: http://creativecommons.org/licenses/by-nc/3.0/\"\n            },\n            \"transcript\": \"\"\n        },\n        \"Status\": \"Complete\",\n        \"Error\": null\n    },\n```", "```go\n./bin/audiofile delete --id a5d9ab11-6f5f-4da0-9307-a3b609b0a6ba\nsuccess\n```", "```go\n./bin/audiofile get --id a5d9ab11-6f5f-4da0-9307-a3b609b0a6ba\nError: unexpected response: 500 Internal Server Error\nUsage:\n  audiofile get [flags]\nFlags:\n  -h, --help        help for get\n      --id string   audiofile id\nunexpected response: 500 Internal Server Error%\n```", "```go\naudio, err := m.Storage.GetByID(id)\nif err != nil {\n    if strings.Contains(err.Error(), \"not found\") ||     strings.Contains(err.Error(), \"no such file or directory\") {\n        io.WriteString(res, \"id not found\")\n        res.WriteHeader(200)\n        return\n    }\n    res.WriteHeader(500)\n    return\n}\n```", "```go\n./bin/audiofile get --id a5d9ab11-6f5f-4da0-9307-a3b609b0a6ba\nid not found\n```", "```go\nfunc (f FlatFile) Search(searchFor string) ([]*models.Audio, error) {\n    dirname, err := os.UserHomeDir()\n    if err != nil {\n        return nil, err\n    }\n    audioFilePath := filepath.Join(dirname, \"audiofile\")\n    matchingAudio := []*models.Audio{}\n    err = filepath.WalkDir(audioFilePath, func(path string, \n          d fs.DirEntry, err error) error {\n        if d.Name() == \"metadata.json\" {\n            contents, err := os.ReadFile(path)\n            if err != nil {\n                return err\n            }\n            if strings.Contains(strings.\n               ToLower(string(contents)), strings.\n               ToLower(searchFor)) {\n                data := models.Audio{}\n                err = json.Unmarshal(contents, &data)\n                if err != nil {\n                    return err\n                }\n                matchingAudio = append(matchingAudio, &data)\n            }\n        }\n        return nil\n    })\n    return matchingAudio, err\n}\n```", "```go\n./bin/audiofile search --value \"Beat Doctor\"\n```", "```go\nfunc darwinPlay(audiofilePath string) {\n    cmd := exec.Command(\"afplay\", audiofilePath)\n    if err := cmd.Start(); err != nil {\n       panic(err)\n    }\n    fmt.Println(\"enjoy the music!\")\n    err := cmd.Wait()\n    if err != nil {\n       panic(err)\n    }\n}\n```", "```go\nfunc windowsPlay(audiofilePath string) {\n    cmd := exec.Command(\"cmd\", \"/C\", \"start\", audiofilePath)\n    if err := cmd.Start(); err != nil {\n        return err\n    }\n    fmt.Println(\"enjoy the music!\")\n    err := cmd.Wait()\n    if err != nil {\n        return err\n    }\n}\n```", "```go\nfunc linuxPlay(audiofilePath string) {\n    cmd := exec.Command(\"aplay\", audiofilePath)\n    if err := cmd.Start(); err != nil {\n        panic(err)\n    }\n    fmt.Println(\"enjoy the music!\")\n    err := cmd.Wait()\n    if err != nil {\n        panic(err)\n    }\n}\n```", "```go\nvar playCmd = &cobra.Command{\n    Use: \"play\",\n    Short: \"Play audio file by id\",\n    RunE: func(cmd *cobra.Command, args []string) error {\n        b, err := getAudioByID(cmd)\n        if err != nil {\n            return err\n        }\n        audio := models.Audio{}\n        err = json.Unmarshal(b, &audio)\n        if err != nil {\n            return err\n        }\n        switch runtime.GOOS {\n        case \"darwin\":\n            darwinPlay(audio.Path)\n            return nil\n        case \"windows\":\n            windowsPlay(audio.Path)\n            return nil\n        case \"linux\":\n            linuxPlay(audio.Path)\n            return nil\n        default:\n            fmt.Println(`Your operating system isn't supported \n                for playing music yet.\n                Feel free to implement your additional use \n                case!`)\n        }\n        return nil\n    },\n}\n```", "```go\n./bin/audiofile play --id bf22c5c4-9761-4b47-aab0-47e93d1114c8\nenjoy the music!\n```", "```go\n//go:build\n```", "```go\n//go:build [tags]\n```", "```go\n//go:build darwin\n```", "```go\ngo build –tags darwin\n```", "```go\nfunc buildChecks() {\n    ctx := build.Context{}\n    p1, err := ctx.Import(\".\", \".\", build.AllowBinary)\n    if err != nil {\n        fmt.Println(\"err: \", err)\n    }\n    fmt.Println(\"Dir:\", p1.Dir)\n    fmt.Println(\"Package name: \", p1.Name)\n    fmt.Println(\"AllTags: \", p1.AllTags)\n    fmt.Println(\"GoFiles: \", p1.GoFiles)\n    fmt.Println(\"Imports: \", p1.Imports)\n    fmt.Println(\"isCommand: \", p1.IsCommand())\n    fmt.Println(\"IsLocalImport: \", build.IsLocalImport(\".\"))\n    fmt.Println(ctx)\n}\n```", "```go\nfunc (ctxt *Context) Import(path string, srcDir string, mode ImportMode) (*Package, error)\n```", "```go\nDir: .\nPackage name:  main\nAllTags:  [buildChecks]\nGoFiles:  [checkRuntime.go environment.go file.go main.go process.go timer.go walking.go]\nImports:  [fmt io/fs os os/exec path/filepath runtime runtime/debug strings time]\nisCommand/main package:  true\nIsLocalImport:  true\n```", "```go\n//go:build darwin\n//go:build linux\n//go:build windows\n```", "```go\nvar playCmd = &cobra.Command{\n    Use: \"play\",\n    Short: \"Play audio file by id\",\n    Long: `Play audio file by id`,\n    RunE: func(cmd *cobra.Command, args []string) error {\n        b, err := getAudioByID(cmd)\n        if err != nil {\n            return err\n        }\n        audio := models.Audio{}\n        err = json.Unmarshal(b, &audio)\n        if err != nil {\n            return err\n        }\n        return play(audio.Path)\n    },\n}\n```", "```go\n//go:build darwin\npackage cmd\nimport (\n    \"fmt\"\n    \"os/exec\"\n)\nfunc play(audiofilePath string) error {\n    cmd := exec.Command(\"afplay\", audiofilePath)\n    if err := cmd.Start(); err != nil {\n        return err\n    }\n    fmt.Println(\"enjoy the music!\")\n    err := cmd.Wait()\n    if err != nil {\n        return err\n    }\n    return nil\n}\n```", "```go\nbuild-darwin:\n    go build -tags darwin -o bin/audiofile main.go\n    chmod +x bin/audiofile\n```"]