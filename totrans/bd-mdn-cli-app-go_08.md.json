["```go\nmmontagnino@Marians-MacBook-Pro marianina8 % tty\n/dev/ttys014\n```", "```go\nmmontagnino@Marians-MacBook-Pro marianina8 % tty -s && echo \"this is a tty\"\nthis is a tty\n```", "```go\nfunc IsaTTY() {\n  fileInfo, _ := os.Stdout.Stat()\n  if (fileInfo.Mode() & os.ModeCharDevice) != 0 {\n    fmt.Println(\"Is a TTY\")\n  } else {\n    fmt.Println(\"Is not a TTY\")\n  }\n}\n```", "```go\nfileInfo, _ := os.Stdout.Stat()\n```", "```go\npackage utils\nimport (\n  \"fmt\"\n  \"os\"\n  isatty \"github.com/mattn/go-isatty\"\n)\nfunc IsaTTY() {\n  if isatty.IsTerminal(os.Stdout.Fd()) ||  isatty.\n     IsCygwinTerminal(os.Stdout.Fd()) {\n    fmt.Println(\"Is a TTY\")\n  } else {\n    fmt.Println(\"Is not a TTY\")\n  }\n}\n```", "```go\nfunc AskForID() (string, error) {\n  id := \"\"\n  prompt := &survey.Input{\n    Message: \"What is the id of the audiofile?\",\n  }\n  survey.AskOne(prompt, &id)\n  if id == \"\" {\n    return \"\", fmt.Errorf(\"missing required argument: id\")\n  }\n  return id, nil\n}\nfunc AskForFilename() (string, error) {\n  file := \"\"\n  prompt := &survey.Input{\n    Message: \"What is the filename of the audio to upload\n      for metadata extraction?\",\n    Suggest: func(toComplete string) []string {\n      files, _ := filepath.Glob(toComplete + \"*\")\n      return files\n    },\n  }\n  survey.AskOne(prompt, &file)\n  if file == \"\" {\n    return \"\", fmt.Errorf(\"missing required argument:\n      file\")\n  }\n  return file, nil\n}\n```", "```go\nid, _ := cmd.Flags().GetString(\"id\")\nif id == \"\" {\n  id, err = utils.AskForID()\n  if err != nil {\n    return nil, err\n  }\n}\n```", "```go\nmmontagnino@Marians-MBP audiofile % ./bin/audiofile get\n? What is the id of the audiofile?\n```", "```go\nmmontagnino@Marians-MBP audiofile % ./bin/audiofile upload\n? What is the filename of the audio to upload for metadata extraction? [tab for suggestions]\n```", "```go\nmmontagnino@Marians-MBP audiofile % ./bin/audiofile upload\n? What is the filename of the audio to upload for metadata extraction? audio/beatdoctor.mp3 [Use arrows to move, enter to select, type to continue]\n audio/algorithms.mp3\n> audio/beatdoctor.mp3\n audio/nightowl.mp3\n```", "```go\nfunc Confirm(confirmationText string) bool {\n  confirmed := false\n  prompt := &survey.Confirm{\n    Message: confirmationText,\n  }\n  survey.AskOne(prompt, &confirmed)\n  return confirmed\n}\n```", "```go\nfmt.Printf(\"Sending request: %s %s %s...\\n\",\n           http.MethodGet, path, payload)\nresp, err := client.Do(req)\nif err != nil {\n  return nil, err\n}\n```", "```go\nmmontagnino@Marians-MacBook-Pro audiofile % ./bin/audiofile upolad\nError: unknown command \"upolad\" for \"audiofile\"\nDid you mean this?\n        upload\nRun 'audiofile --help' for usage.\n```", "```go\nmmontagnino@Marians-MacBook-Pro audiofile % ./bin/audiofile bug --help\nBug opens the default browser to start a bug report which will include useful system information.\nUsage:\n  audiofile bug [flags]\nExamples:\naudiofile bug\n```", "```go\nmmontagnino@Marians-MacBook-Pro audiofile % ./bin/audiofile search\n?  What value are you searching for?\nError: missing required argument (value)\nUsage:\n  audiofile search [flags]\nFlags:\n  -h, --help           help for search\n      --json           return json format\n      --plain          return plain format\n      --value string   string to search for in metadata\n```", "```go\n{\n  \"api\": {\n    \"port\": 8000\n  }\n}\n```", "```go\n{\n  \"cli\": {\n    \"hostname\": \"localhost\",\n    \"port\": 8000\n  }\n}\n```", "```go\npath := fmt.Sprintf(\"http://%s:%d/request?%s\",\n    viper.Get(\"cli.hostname\"), viper.GetInt(\"cli.port\"),\n    params)\n```", "```go\nfunc Configure() {\n  viper.AddConfigPath(\"./configs\")\n  viper.SetConfigName(\"cli\")\n  viper.SetConfigType(\"json\")\n  viper.ReadInConfig()\n  viper.SetDefault(\"cli.hostname\", \"localhost\")\n  viper.SetDefault(\"cli.port\", 8000)\n}\n```", "```go\n{\n  \"cli\": {\n    \"colormode\": {\n      \"foreground\": \"white\",\n      \"background\": \"black\",\n    }\n  }\n}\n```", "```go\n{\n  \"api\": {\n    \"local_storage\": \"/Users/mmontagnino/audiofile\"\n  }\n}\n```", "```go\nfunc Pager(data string) error {\n  lessCmd := exec.Command(\"less\", \"-r\")\n  lessCmd.Stdin = strings.NewReader(data)\n  lessCmd.Stdout = os.Stdout\n  lessCmd.Stderr = os.Stderr\n  err := lessCmd.Run()\n  if err != nil {\n    return err\n  }\n  return nil\n}\n```", "```go\nfunc Pager(data string) error {\n    moreCmd := exec.Command(\"cmd\", \"/C\", \"more\")\n    moreCmd.Stdin = strings.NewReader(data)\n    moreCmd.Stdout = os.Stdout\n    moreCmd.Stderr = os.Stderr\n    err := moreCmd.Run()\n    if err != nil {\n        return err\n    }\n    return nil\n}\n```", "```go\nvar header = []string{\n  \"ID\",\n  \"Path\",\n  \"Status\",\n  \"Title\",\n  \"Album\",\n  \"Album Artist\",\n  \"Composer\",\n  \"Genre\",\n  \"Artist\",\n  \"Lyrics\",\n  \"Year\",\n  \"Comment\",\n}\n```", "```go\nfunc row(audio Audio) []string {\n  return []string{\n    audio.Id,\n    audio.Path,\n    audio.Status,\n    audio.Metadata.Tags.Title,\n    audio.Metadata.Tags.Album,\n    audio.Metadata.Tags.AlbumArtist,\n    audio.Metadata.Tags.Composer,\n    audio.Metadata.Tags.Genre,\n    audio.Metadata.Tags.Artist,\n    audio.Metadata.Tags.Lyrics,\n    strconv.Itoa(audio.Metadata.Tags.Year),\n    strings.Replace(audio.Metadata.Tags.Comment, \"\\r\\n\",\n        \"\", -1),\n  }\n}\n```", "```go\nfunc (list *AudioList) Table() (string, error) {\n  data := pterm.TableData{header}\n  for _, audio := range *list {\n    data = append(\n      data,\n      row(audio),\n    )\n  }\n  return pterm.DefaultTable.WithHasHeader()\n     .WithData(data).Srender()\n}\nfunc (audio *Audio) Table() (string, error) {\n  data := pterm.TableData{header, row(*audio)}\n  return pterm.DefaultTable.WithHasHeader().WithData(data).\n    Srender()\n}\n```", "```go\nif jsonFormat {\n    if IsaTTY() {\n        err = Pager(string(b))\n        if err != nil {\n            return b, fmt.Errorf(\"\\n paging: %v\\n \", err)\n        }\n    } else {\n        return b, fmt.Errorf(\"not a tty\")\n    }\n}\n```", "```go\nformatedBytes, err := utils.Print(b, jsonFormat)\nif err != nil {\n    fmt.Fprintf(cmd.OutOrStdout(), string(formatedBytes))\n}\n```", "```go\nconst (\n  checkMark = \"\\U00002705\"\n)\n```", "```go\nfmt.Println(checkMark, \" Successfully uploaded!\")\nfmt.Println(checkMark, \" Audiofile ID: \", string(body))\n```", "```go\n Successfully uploaded!\n Audiofile ID: b91a5155-76e9-4a70-90ea-d659c66d39e2\n```", "```go\n?  What value are you searching for?\n```", "```go\n Error message!\n```", "```go\nvar IdColor = color.New(color.FgGreen).SprintFunc()\nfunc row(audio Audio) []string {\n  return []string{\n    IdColor(audio.Id),\n    ...\n  }\n}\n```", "```go\nvar (\n  missingRequiredArumentError =\n    func(missingArg string) error {\n    return fmt.Errorf(errorColor(fmt.Sprintf(\"missing\n      required argument (%s)\", missingArg)))\n  }\n)\n```", "```go\npackage utils\nimport \"github.com/fatih/color\"\nvar errorColor = color.New(color.BgRed,\n  color.FgWhite).SprintFunc()\n```", "```go\nfunc play(audiofilePath string) error {\n    cmd := exec.Command(\"afplay\", audiofilePath)\n    if err := cmd.Start(); err != nil {\n        return err\n    }\n    spinnerInfo := &pterm.SpinnerPrinter{}\n    if utils.IsaTTY() {\n        spinnerInfo, _ = pterm.DefaultSpinner.Start(\"Enjoy the \n          music...\")\n    }\n    err := cmd.Wait()\n    if err != nil {\n        return err\n    }\n    if utils.IsaTTY() {\n        spinnerInfo.Stop()\n    }\n    return nil\n}\n```", "```go\n▀ Enjoy the music... (3m54s)\n```", "```go\np, _ := pterm.DefaultProgressbar.WithTotal(4).WithTitle(\"Initiating upload...\").Start()\n```", "```go\npterm.Success.Println(\"Created multipart writer\")\np.Increment()\np.UpdateTitle(\"Sending request...\")\n```", "```go\nProcess response... [4/4] ███████████             65% | 5s\n```", "```go\naws s3 ls s3://mybucket --summarize\n```", "```go\naws s3 ls s3://<target-bucket>\naws s3 cp <local-file> <s3-target-location>/<local-file>\n```", "```go\ngh codespace list --json\ngh issue list –json\n```"]