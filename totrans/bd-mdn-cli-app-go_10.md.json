["```go\nquestions := []*survey.Question{\n    {\n        Name: \"email\",\n        Prompt: &survey.Input{\n          Message: \"What is your email address?\"\n   },\n        Validate: survey.Required,\n        Transform: survey.Title,\n    },\n    {\n        Name: \"rating\",\n        Prompt: &survey.Select{\n            Message: \"How would you rate your experience with \n                     the CLI?\",\n            Options: []string{\"Hated it\", \"Disliked\", \"Decent\", \n                             \"Great\", \"Loved it\"},\n       },\n    },\n    {\n        Name: \"issues\",\n            Prompt: &survey.MultiSelect{\n            Message: \"Have you encountered any of these \n                     issues?\",\n            Options: []string{\"audio player issues\", \"upload \n                             issues\", \"search issues\", \"other \n                             technical issues\"},\n        },\n    },\n    {\n        Name: \"suggestions\",\n        Prompt: &survey.Multiline{\n            Message: \"Please provide any other feedback or \n                     suggestions you may have.\",\n        },\n    },\n}\n```", "```go\nresults := struct {\n    Email string\n    Rating string\n    Issues []string\n    Suggestions string\n}{}\n```", "```go\nerr := survey.Ask(questions, &results)\nif err != nil {\n    fmt.Println(err.Error())\n    return\n}\n```", "```go\nmmontagnino@Marians-MacBook-Pro Chapter-10 % go run main.go\n? What is your email? mmontagnino@gmail.com\n? How would you rate your experience with the CLI? Great\n? Have you encountered any of these issues? audio player issues, search issues\n? Please provide any other feedback or suggestions you may have. [Enter 2 empty lines to finish]I want this customer survey embedded into the CLI and email myself the results!\n```", "```go\nterminalLayer, err := tcell.New()\nif err != nil {\n   return err\n}\ndefer terminalLayer.Close()\n```", "```go\nterminalLayer, err := tcell.New(tcell.ColorMode(terminalapi.ColorMode256))\nif err != nil {\n   return err\n}\ndefer terminalLayer.Close()\n```", "```go\nterminalLayer, err := tcell.New(tcell.ColorMode(terminalapi.ColorMode256), tcell.ClearStyle(cell.ColorYellow, cell.ColorNavy))\nif err != nil {\n   return err\n}\ndefer terminalLayer.Close()\n```", "```go\nif terminalLayer, err := tcell.New()\nif err != nil {\n   return err\n}\ndefer terminalLayer.Close()\ncontainerLayer, err := container.New(terminalLayer)\nif err != nil {\n   return err\n}\nctx, cancel := context.WithTimeout(context.Background(), 1*time.Second)\ndefer cancel()\nif err := termdash.Run(ctx, terminalLayer, containerLayer); err != nil {\n   return err\n}\n```", "```go\ntermdash.Run(ctx, terminalLayer, containerLayer, termdash.RedrawInterval(5*time.Second))\n```", "```go\ntermController, err := termdash.NewController(terminalLayer, containerLayer)\nif err != nil {\n    return err\n}\ndefer termController.Close()\nif err := termController.Redraw(); err != nil {\n    return fmt.Errorf(\"error redrawing dashboard: %v\", err)\n}\n```", "```go\nerrHandler := func(err error) {\n   fmt.Printf(\"runtime error: %v\", err)\n}\n```", "```go\ntermdash.Run(ctx, terminalLayer, containerLayer, termdash.ErrorHandler(errHandler))\n```", "```go\ntermdash.NewController(terminalLayer, containerLayer, termdash.ErrorHandler(errHandler))\n```", "```go\nkeyboardSubscriber := func(k *terminalapi.Keyboard) {\n    switch k.Key {\n      case 'q':\n      case 'Q':\n          cancel()\n    }\n}\nif err := termdash.Run(ctx, terminalLayer, containerLayer, termdash.KeyboardSubscriber(keyboardSubscriber)); err != nil {\nreturn fmt.Errorf(\"error running termdash with keyboard subscriber: %v\", err)\n}\n```", "```go\nmouseClick := func(m *terminalapi.Mouse) {\n    switch m.Button {\n        case mouse.ButtonRight:\n        // when the left mouse button is clicked - cancel\n        cancel()\n        case mouse.ButtonLeft:\n        // when the left mouse button is clicked\n        case mouse.ButtonMiddle:\n        // when the middle mouse button is clicked\n    }\n}\nif err := termdash.Run(ctx, terminalLayer, containerLayer, termdash.MouseSubscriber(mouseClick)); err != nil {\n    return fmt.Errorf(\"error running termdash with mouse subscriber: %v\", err)\n}\n```", "```go\n    terminalLayer, err := tcell.New(tcell.ColorMode(terminalapi.ColorMode256),\n        tcell.ClearStyle(cell.ColorYellow, cell.ColorNavy))\n    if err != nil {\n        return fmt.Errorf(\"tcell.New => %v\", err)\n    }\n    defer terminalLayer.Close()\nleftContainer := container.Left(\ncontainer.Border(linestyle.Light),\n)\nrightContainer :=\ncontainer.Right(\ncontainer.SplitHorizontal(\ncontainer.Top(\ncontainer.Border(linestyle.Light),\n),\ncontainer.Bottom(\ncontainer.SplitVertical(\n     container.Left(\n     container.Border(linestyle.Light),\n     ),\n     container.Right(\n     container.Border(linestyle.Light),\n     ),\n     ),\n      ),\n    )\n)\ncontainerLayer, err := container.New(\nterminalLayer,\ncontainer.SplitVertical(\nleftContainer,\nrightContainer,\ncontainer.SplitPercent(60),\n),\n)\n```", "```go\n    t, err := tcell.New()\n    if err != nil {\n        return fmt.Errorf(\"error creating tcell: %v\", err)\n    }\n    rollingText, err := text.New(text.RollContent())\n    if err != nil {\n        return fmt.Errorf(\"error creating rolling text: %v\", \n          err)\n    }\n    err = rollingText.Write(\"...\")\n    if err != nil {\n        return fmt.Errorf(\"error writing text: %v\", err)\n    }\n    builder := grid.New()\n    builder.Add(\n        grid.ColWidthPerc(60,\n            grid.Widget(rollingText,\n                container.Border(linestyle.Light),\n            ),\n        ),\n    )\n    builder.Add(\n        grid.RowHeightPerc(50,\n            grid.Widget(rollingText,\n                container.Border(linestyle.Light),\n            ),\n        ),\n    )\n    builder.Add(\n        grid.ColWidthPerc(20,\n            grid.Widget(rollingText,\n                container.Border(linestyle.Light),\n            ),\n        ),\n    )\n    builder.Add(\n        grid.ColWidthPerc(20,\n            grid.Widget(rollingText,\n                container.Border(linestyle.Light),\n            ),\n        ),\n    )\n    gridOpts, err := builder.Build()\n    if err != nil {\n        return fmt.Errorf(\"error creating builder: %v\", err)\n    }\n    c, err := container.New(t, gridOpts...)\n```", "```go\n    t, err := tcell.New()\n    if err != nil {\n        return fmt.Errorf(\"error creating tcell: %v\", err)\n    }\n    defer t.Close()\n    b1, err := button.New(\"button1\", func() error {\n        return nil\n    })\n    if err != nil {\n        return fmt.Errorf(\"error creating button: %v\", err)\n    }\n    b2, err := button.New(\"button2\", func() error {\n        return nil\n    })\n    if err != nil {\n        return fmt.Errorf(\"error creating button: %v\", err)\n    }\n    c, err := container.New(\n        t,\n        container.PlaceWidget(b1),\n        container.ID(\"123\"),\n    )\n    if err != nil {\n        return fmt.Errorf(\"error creating container: %v\", err)\n    }\n    update := func(k *terminalapi.Keyboard) {\n        if k.Key == 'u' || k.Key == 'U' {\n            c.Update(\n                \"123\",\n                container.SplitVertical(\n                    container.Left(\n                        container.PlaceWidget(b1),\n                    ),\n                    container.Right(\n                        container.PlaceWidget(b2),\n                    ),\n                ),\n            )\n        }\n    }\n    ctx, cancel := context.WithTimeout(context.Background(), \n      5*time.Second)\n    defer cancel()\n    if err := termdash.Run(ctx, t, c, termdash.\n       KeyboardSubscriber(update)); err != nil {\n        return fmt.Errorf(\"error running termdash: %v\", err)\n    }\n```", "```go\nb, err := button.New(\"click me\", func() error {\n    return nil\n})\nif err != nil {\n    return err\n}\nleftContainer :=\ncontainer.Left(\n     container.Border(linestyle.Light),\n           container.PlaceWidget(b),\n           container.AlignHorizontal(align.HorizontalLeft),\n     )\nrightContainer :=\n         container.Right(\n             container.SplitHorizontal(\n                 container.Top(\n                    container.Border(linestyle.Light),\n                    container.PlaceWidget(b),\n                    container.AlignVertical(align.VerticalTop),\n                 ),\n                 container.Bottom(\n                   container.SplitVertical(\n                        container.Left(\n                          container.Border(linestyle.Light),\n                               container.PlaceWidget(b),\n                               container.PaddingTop(3),\n                               container.PaddingBottom(3),\n                               container.PaddingRight(3),\n                               container.PaddingLeft(3),\n                         ),\n                         container.Right(\n                           container.Border(linestyle.Light),\n                             container.PlaceWidget(b),\n                             container.MarginTop(3),\n                             container.MarginBottom(3),\n                             container.MarginRight(3),\n                             container.MarginLeft(3),\n                        ),\n                    ),\n                ),\n           ),\n                )\ncontainerLayer, err := container.New(\n        terminalLayer,\n        container.SplitVertical(\n            leftContainer,\n            rightContainer,\n            container.SplitPercent(60),\n        ),\n    )\n```", "```go\n    barChart, err := barchart.New()\n    if err != nil {\n        return err\n    }\n    values := []int{20, 40, 60, 80, 100}\n    max := 100\n    if err := barChart.Values(values, max); err != nil {\n        return err\n    }\n```", "```go\n    greenDonut, err := donut.New(\n        donut.CellOpts(cell.FgColor(cell.ColorGreen)),\n        donut.Label(\"Green\", cell.FgColor(cell.ColorGreen)),\n    )\n    if err != nil {\n        return err\n    }\n    greenDonut.Percent(75)\n```", "```go\n    progressGauge, err := gauge.New(\n        gauge.Height(1),\n        gauge.Border(linestyle.Light),\n        gauge.BorderTitle(\"Percentage progress\"),\n    )\n    if err != nil {\n        return err\n    }\n    progressGauge.Percent(75)\n```", "```go\ncobra-cli add player\nPlayer created at /Users/mmontagnino/Code/src/github.com/marianina8/audiofile\n```", "```go\nt, err := tcell.New(tcell.ColorMode(terminalapi.ColorMode256))\n```", "```go\nquitter := func(k *terminalapi.Keyboard) {\n    if k.Key == 'q' || k.Key == 'Q' {\n        ...\n    }\n}\n```", "```go\nif err := termdash.Run(ctx, t, c, termdash.KeyboardSubscriber(quitter), termdash.RedrawInterval(100*time.Millisecond)); err != nil {\n    panic(err)\n}\n```", "```go\nc, err := container.New(\n    t,\n    container.SplitVertical(\n        container.Left(), // music library\n        container.Right(\n            container.SplitHorizontal(\n                container.Top(\n                    container.SplitHorizontal(\n                        container.Top(\n                            container.SplitHorizontal(\n                                container.Top(), // text input\n                                container.Bottom(), // error \n                                                    msgs\n                                container.SplitPercent(60),\n                            ),\n                        ),\n                        container.Bottom(), // rolling song \n                                            title\n                        container.SplitPercent(30),\n                    ),\n                ),\n                container.Bottom(\n                    container.SplitHorizontal(\n                        container.Top(), // metadata\n                        container.Bottom(\n                            container.SplitVertical(\n                                container.Left(), // play \n                                                  button\n                                container.Right(), // stop \n                                                   button\n                            )\n                        ),\n                        container.SplitPercent(80),\n                    ),\n                ),\n                container.SplitPercent(30),\n            ),\n        ),\n    ),\n)\n```", "```go\nfunc newLibraryContent(audioList *models.AudioList) (*text.Text, error) {\n    libraryContent, err := text.New(text.RollContent(), text.\n      WrapAtWords())\n    if err != nil {\n        panic(err)\n    }\n    for i, audiofile := range *audioList {\n        libraryContent.Write(fmt.Sprintf(\"[id=%d] %s by %s\\n\", \n          i, audiofile.Metadata.Tags.Title, audiofile.Metadata.\n          Tags.Artist))\n    }\n    return libraryContent, nil\n}\n```", "```go\nlibraryContent, err := newLibraryContent(audioList)\n```", "```go\nfunc newTextInput(audioList *models.AudioList, updatedID chan<- int, updateText, errorText chan<- string) *textinput.TextInput {\n    input, _ := textinput.New(\n        textinput.Label(\"Enter id of song: \", cell.\n          FgColor(cell.ColorNumber(33))),\n        textinput.MaxWidthCells(20),\n        textinput.OnSubmit(func(text string) error {\n            // set the id\n            // set any error text\n        return nil\n    }),\n    textinput.ClearOnSubmit(),\n    )\n    return input\n}\n```", "```go\nfunc newPlayButton(audioList *models.AudioList, playID <-chan int) (*button.Button, error) {\n    playButton, err := button.New(\"Play\", func() error {\n        stopTheMusic()\n        }\n        go func() {\n        if audiofileID <= len(*audioList)-1 && audiofileID >= 0 {\n        pID, _ = play((*audioList)[audiofileID].Path, false, \n                     true)\n        }}()\n        return nil\n    },\n    button.FillColor(cell.ColorNumber(220)),\n    button.GlobalKey('p'),\n    )\n    if err != nil {\n        return playButton, fmt.Errorf(\"%v\", err)\n    }\n    return playButton, nil\n}\n```", "```go\nplayButton, err := newPlayButton(audioList, playID)\n```", "```go\ncontainer.PlaceWidget(widget)\n```", "```go\n./bin/audiofile player\n```"]