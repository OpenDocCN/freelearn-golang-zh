["```go\nfunc main() {\n    var helloFlag bool\n    flag.BoolVar(&helloFlag, \"hello\", false, \"Print 'Hello,\n      World!'\")\n    flag.Parse()\n    if helloFlag {\n        fmt.Println(\"Hello, World!\")\n    }\n}\n```", "```go\nFROM golang:1.19\n```", "```go\nCOPY . .\n```", "```go\nRUN go build main.go\n```", "```go\nCMD [\"./main\", \"--hello\"]\n```", "```go\ndocker build [options] path| url | -\n```", "```go\n[+] Building 2.4s (8/8) FINISHED\n=> [internal] load build definition from Dockerfile          0.0s\n=> => transferring dockerfile: 238B                          0.0s\n=> [internal] load .dockerignore                             0.0s\n=> => transferring context: 2B                               0.0s\n=> [internal] load metadata for docker.io/library/golang:1.19 1.2s\n=> [internal] load build context                             0.0s\n=> => transferring context: 2.25kB                           0.0s\n=> CACHED [1/4] FROM docker.io/library/golang:1.19@sha256:bb9811fad43a7d6fd217324 0.0s\n=> [2/4] COPY . .                                            0.0s\n=> [3/4] RUN go build main.go                                1.0s\n=> exporting to image                                        0.1s\n=> => exporting layers                                       0.0s\n=> => writing image sha256:91f97dc0109218173ccae884981f700c83848aaf524266de20f950   0.0s\n=> => naming to docker.io/library/hello-world:latest         0.0s\n```", "```go\n% docker images\nREPOSITORY         TAG        IMAGE ID        CREATED        SIZE\nhello-world    latest    91f97dc01092    18 minutes ago  846MB\n```", "```go\n% docker run --rm hello-world:latest\nHello, World!\n```", "```go\n//go:build int && pro\n```", "```go\nfunc ConfigureTest() {\n    getClient = &http.Client{\n        Timeout: 15 * time.Second,\n    }\n    viper.SetDefault(\"cli.hostname\", \"localhost\")\n    viper.SetDefault(\"cli.port\", 8000)\n    utils.InitCLILogger()\n}\n```", "```go\nConfigureTest()\nfmt.Println(\"*** Testing upload ***\")\nb := bytes.NewBufferString(\"\")\nrootCmd.SetOut(b)\nrootCmd.SetArgs([]string{\"upload\", \"--filename\",\n  \"../audio/algorithms.mp3\"})\nerr := rootCmd.Execute()\nif err != nil {\n    fmt.Println(\"err: \", err)\n}\nuploadResponse, err := ioutil.ReadAll(b)\nif err != nil {\n    t.Fatal(err)\n}\nid := string(uploadResponse)\nif id == \"\" {\n    t.Fatalf(\"expected id returned\")\n}\n```", "```go\nfmt.Println(\"*** Testing get ***\")\nrootCmd.SetArgs([]string{\"get\", \"--id\", id, \"--json\"})\nerr = rootCmd.Execute()\nif err != nil {\n    fmt.Println(\"err: \", err)\n}\ngetResponse, err := ioutil.ReadAll(b)\nif err != nil {\n    t.Fatal(err)\n}\nvar audio models.Audio\njson.Unmarshal(getResponse, &audio)\nif audio.Id != id {\n    t.Fatalf(\"expected matching audiofile returned\")\n}\n```", "```go\ngo test ./cmd -tags \"int pro\"\n```", "```go\nFROM golang:1.19\n# Set the working directory\nWORKDIR /audiofile\n# Copy the source code\nCOPY . .\n# Download the dependencies\nRUN go mod download\n# Expose port 8000\nEXPOSE 8000\n# Build the audiofile application with the pro tag so all\n# features are available\nRUN go build -tags \"pro\" -o audiofile main.go\nRUN chmod +x audiofile\n# Start the audiofile API\nCMD [\"./audiofile\", \"api\"]\n```", "```go\n% docker build -f api.Dockerfile -t audiofile:api .\n```", "```go\n% docker images\nREPOSITORY        TAG        IMAGE ID        CREATED        SIZE\naudiofile      api         12afba7f3fb7        9 minutes ago  1.75GB\n```", "```go\n% docker run -p 8000:8000 --rm audiofile:api\nStarting API at http://localhost:8000\nPress Ctrl-C to stop.\n```", "```go\n% go test ./cmd -tags \"int pro\"\nok      github.com/marianina8/audiofile/cmd     0.909s\n```", "```go\nFROM golang:1.19\n# Set the working directory\nWORKDIR /audiofile\n# Copy the source code\nCOPY . .\n# Download the dependencies\nRUN go mod download\n# Execute `go test -v ./cmd -tags int pro` when the\n# container is running\nCMD [\"go\", \"test\", \"-v\", \"./cmd\", \"-tags\", \"int pro\"]\n```", "```go\n% docker build -f cli.Dockerfile -t audiofile:cli .\n```", "```go\n% docker run --rm --network host audiofile:cli\n```", "```go\nversion: '3'\nservices:\n  cli:\n    build:\n      context: .\n      dockerfile: cli.Dockerfile\n    image: audiofile:cli\n    network_mode: host\n    depends_on:\n      - api\n  api:\n    build:\n      context: .\n      dockerfile: api.Dockerfile\n    image: audiofile:api\n    ports:\n    - \"8000:8000\"\n```", "```go\n% docker-compose up\n[+] Running 3/2\n Network audiofile_default  Created                        0.1s\n Container audiofile-api-1  Created                        0.0s\n Container audiofile-cli-1  Created                        0.0s\nAttaching to audiofile-api-1, audiofile-cli-1\naudiofile-api-1  | Starting API at http://localhost:8000\naudiofile-api-1  | Press Ctrl-C to stop.\naudiofile-cli-1  | === RUN   TestWorkflow\naudiofile-cli-1  | --- PASS: TestWorkflow (1.14s)\n…\naudiofile-cli-1  | ok   github.com/marianina8/audiofile/cmd     1.163s\n```", "```go\nFROM golang:1.19\n# Set the working directory\nWORKDIR /audiofile\n# Copy the source code\nCOPY . .\n# Download the dependencies\nRUN go mod download\n# Expose port 8000\nEXPOSE 8000\n# Build the audiofile application with the pro tag so all\n# features are available\nRUN go build -tags \"pro\" -o audiofile main.go\n# Start the audiofile API\nENTRYPOINT [\"./audiofile\"]\n```", "```go\n% docker build -f dist.Dockerfile -t audiofile:dist .\n```", "```go\n% docker run --rm --network host -ti audiofile:dist help\nA command line interface allows you to interact with the Audiofile service.\nBasic commands include: get, list, and upload.\nUsage:\n  audiofile [command]\nAvailable Commands:\n...\nUse \"audiofile [command] --help\" for more information about a command.\n```", "```go\n% docker run --rm --network host -ti audiofile:dist upload –filename audio/algorithms.mp3\n```", "```go\ndocker run -p 8000:8000 --rm -v $HOME/audiofile:/root/audiofile  audiofile:api\n```", "```go\n    volumes:\n      - \"${HOME}/audiofile:/root/audiofile\"\n```", "```go\n# Stage 1\nFROM golang:1.19 AS build\nWORKDIR /audiofile\nCOPY . .\nRUN go mod download\nRUN go build -tags \"pro\" -o audiofile main.go\n# Stage 2\nFROM alpine:latest\nCOPY --from=build /audiofile/audiofile .\nEXPOSE 8000\nENTRYPOINT [\"./audiofile\"]\n```", "```go\nFROM golang:1.19 AS build\n```", "```go\nCOPY --from=build /audiofile/audiofile .\n```", "```go\nREPOSITORY TAG            IMAGE ID        CREATED        SIZE\naudiofile    dist            1361cbc7be3e    2 minutes ago    1.78GB\naudiofile     dist-multistage    ab5640f99ef2    5 minutes ago    24MB\n```", "```go\ndocker login --username=your_username\ndocker tag your_image your_username/your_repository:your_tag\ndocker push your_username/your_repository:your_tag\n```", "```go\n    % docker login --username=marianmontagnino\n\n    Password:\n\n    Login Succeeded\n\n    Logging in with your password grants your terminal complete access to your account.\n\n    For better security, log in with a limited-privilege personal access token. Learn more at https://docs.docker.com/go/access-tokens/\n    ```", "```go\n     % docker tag audiofile:dist  marianmontagnino/audiofile:latest\n    ```", "```go\n    % docker push marianmontagnino/audiofile:latest\n\n    The push refers to repository [docker.io/marianmontagnino/audiofile]\n\n    c0f557e70e4f: Pushed\n\n    98f8be277d74: Pushed\n\n    6c199763ccbe: Pushed\n\n    8f2f7ffa843f: Pushed\n\n    10bb928a2e24: Pushed\n\n    f1ce3f3654c3: Mounted from library/golang\n\n    3685241d2bbb: Mounted from library/golang\n\n    dddbac67c6fa: Mounted from library/golang\n\n    85f9ebffaf4d: Mounted from library/golang\n\n    72235aad06ad: Mounted from library/golang\n\n    5d37ad02a8e2: Mounted from library/golang\n\n    ea8ab45f064e: Mounted from library/golang\n\n    latest: digest: sha256:b7b3f58da01d360fc1a3f2e2bd617a44d3f7be d6b6625464c9d787b8a71ead2e size: 2851\n    ```", "```go\n% docker run --rm --network host -ti marianmontagnino/audiofile:latest help\n```"]