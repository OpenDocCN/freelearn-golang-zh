["```go\n09 func main() { \n10  port := 8080 \n11 \n12  http.HandleFunc(\"/helloworld\", helloWorldHandler) \n13 \n14  log.Printf(\"Server starting on port %v\\n\", 8080) \n15  log.Fatal(http.ListenAndServe(fmt.Sprintf(\":%v\", port), nil)) \n16 } \n17 \n18 func helloWorldHandler(w http.ResponseWriter, r *http.Request) { \n19   fmt.Fprint(w, \"Hello World\\n\") \n20 } \n\n```", "```go\nfunc HandleFunc(pattern string, handler func(ResponseWriter, *Request)) \n\n```", "```go\nfunc ListenAndServe(addr string, handler Handler) error \n\n```", "```go\n$ go run ./basic_http_example.go  \n\n```", "```go\n2016/07/30 01:08:21 Server starting on port 8080  \n\n```", "```go\n2016/07/19 03:51:11 listen tcp :8080: bind: address already in use exit status 1  \n\n```", "```go\n$ ps -aux | grep 'go run'  \n\n```", "```go\nHello World \n\n```", "```go\nfunc Marshal(v interface{}) ([]byte, error) \n\n```", "```go\n10 type helloWorldResponse struct { \n11    Message string \n12 } \n\n```", "```go\n23 func helloWorldHandler(w http.ResponseWriter, r *http.Request) { \n24   response := helloWorldResponse{Message: \"HelloWorld\"} \n25   data, err := json.Marshal(response) \n26   if err != nil { \n27     panic(\"Ooops\") \n28   } \n29  \n30   fmt.Fprint(w, string(data)) \n31 } \n\n```", "```go\n{\"Message\":\"Hello World\"} \n\n```", "```go\n10 type helloWorldResponse struct { \n11   Message string `json:\"message\"` \n12 } \n\n```", "```go\n{\"message\":\"Hello World\"} \n\n```", "```go\ntype helloWorldResponse struct {\n// change the output field to be \"message\" \n   Message   string `json:\"message\"` \n   // do not output this field \n   Author  string `json:\"-\"` \n   // do not output the field if the value is empty \n   Date    string `json:\",omitempty\"` \n   // convert output to a string and rename \"id\" \n   Id    int    `json:\"id, string\"` \n} \n\n```", "```go\nfunc MarshalIndent(v interface{}, prefix, indent string) ([]byte, error) \n\n```", "```go\n// Returns the map of headers which will be sent by the \n// WriteHeader method. \nHeader() \n\n// Writes the data to the connection. If WriteHeader has not \n// already been called then Write will call \n// WriteHeader(http.StatusOK). \nWrite([]byte) (int, error) \n\n// Sends an HTTP response header with the status code. \nWriteHeader(int) \n\n```", "```go\nWrite(p []byte) (n int, err error) \n\n```", "```go\nfunc NewEncoder(w io.Writer) *Encoder \n\n```", "```go\nfunc helloWorldHandler(w http.ResponseWriter, r *http.Request) { \n    response := HelloWorldResponse{Message: \"HelloWorld\"} \n    encoder := json.NewEncoder(w) \n    encoder.Encode(&response) \n}                \n\n```", "```go\n$go test -v -run=\"none\" -bench=. -benchtime=\"5s\" -benchmem  BenchmarkHelloHandlerVariable-8  20000000  511 ns/op  248 B/op  5 allocs/op BenchmarkHelloHandlerEncoder-8  20000000  328 ns/op   24 B/op  2 allocs/op BenchmarkHelloHandlerEncoderReference-8  20000000  304 ns/op  8 B/op  1 allocs/op PASS ok  github.com/building-microservices-with-go/chapter1/reading_writing_json_2  24.109s \n\n```", "```go\nfunc Unmarshal(data []byte, v interface{}) error \n\n```", "```go\n14 type helloWorldRequest struct { \n15   Name string `json:\"name\"` \n16 } \n\n```", "```go\ntype Requests struct { \n... \n  // Method specifies the HTTP method (GET, POST, PUT, etc.). \n  Method string \n\n// Header contains the request header fields received by the server. The type Header is a link to map[string] []string.  \nHeader Header \n\n// Body is the request's body. \nBody io.ReadCloser \n... \n} \n\n```", "```go\n30 body, err := ioutil.ReadAll(r.Body) \n31 if err != nil { \n32     http.Error(w, \"Bad request\", http.StatusBadRequest) \n33     return   \n34 } \n\n```", "```go\n28 func helloWorldHandler(w http.ResponseWriter, r *http.Request) { \n29  \n30   body, err := ioutil.ReadAll(r.Body) \n31   if err != nil { \n32     http.Error(w, \"Bad request\", http.StatusBadRequest) \n33             return \n34   } \n35  \n36   var request helloWorldRequest \n37   err = json.Unmarshal(body, &request) \n38   if err != nil { \n39     http.Error(w, \"Bad request\", http.StatusBadRequest) \n40             return \n41   } \n42  \n43  response := helloWorldResponse{Message: \"Hello \" + request.Name} \n44  \n45   encoder := json.NewEncoder(w) \n46   encoder.Encode(response) \n47 } \n\n```", "```go\n$ curl localhost:8080/helloworld -d '{\"name\":\"Nic\"}'  \n\n```", "```go\n{\"message\":\"Hello Nic\"} \n\n```", "```go\n$ curl localhost:8080/helloworld  \n\n```", "```go\nfunc Error(w ResponseWriter, error string, code int) \n\n```", "```go\n27 func helloWorldHandler(w http.ResponseWriter, r *http.Request) { \n28 \n29   var request HelloWorldRequest \n30   decoder := json.NewDecoder(r.Body) \n31  \n32   err := decoder.Decode(&request) \n33   if err != nil { \n34     http.Error(w, \"Bad request\", http.StatusBadRequest) \n35             return \n36   } \n37  \n38   response := HelloWorldResponse{Message: \"Hello \" + request.Name} \n39  \n40   encoder := json.NewEncoder(w) \n41   encoder.Encode(response) \n42 } \n\n```", "```go\nfunc HandlerFunc(pattern string, handler func(ResponseWriter, *Request)) \nfunc Handle(pattern string, handler Handler) \n\n```", "```go\ntype Handler interface { \n  ServeHTTP(ResponseWriter, *Request) \n} \n\n```", "```go\nhttp.Handle(\"/images/\", newFooHandler())\nhttp.Handle(\"/images/persian/\", newBarHandler())\nhttp.Handle(\"/images\", newBuzzHandler())\n/images                  => Buzz\n/images/                 => Foo\n/images/cat              => Foo\n/images/cat.jpg          => Foo\n/images/persian/cat.jpg  => Bar\n\n```", "```go\nfunc FileServer(root FileSystem) Handler \n\n```", "```go\nhttp.Handle(\"/images\", http.FileServer(http.Dir(\"./images\")))\n\n```", "```go\nfunc NotFoundHandler() Handler \n\n```", "```go\nfunc RedirectHandler(url string, code int) Handler \n\n```", "```go\nfunc StripPrefix(prefix string, h Handler) Handler \n\n```", "```go\nfunc TimeoutHandler(h Handler, dt time.Duration, msg string) Handler \n\n```", "```go\n21 cathandler := http.FileServer(http.Dir(\"./images\")) \n22 http.Handle(\"/cat/\", http.StripPrefix(\"/cat/\", cathandler)) \n\n```", "```go\n31 type validationHandler struct { \n32   next http.Handler \n33 } \n34  \n35 func newValidationHandler(next http.Handler) http.Handler { \n36   return validationHandler{next: next} \n37 } \n\n```", "```go\n37 func (h validationHandler) ServeHTTP(rw http.ResponseWriter, r  \n*http.Request) {\n38   var request helloWorldRequest\n39   decoder := json.NewDecoder(r.Body)\n40\n41   err := decoder.Decode(&request)\n42   if err != nil {\n43     http.Error(rw, \"Bad request\", http.StatusBadRequest)\n44     return\n45   }\n46\n47   h.next.ServeHTTP(rw, r)\n48 } \n\n```", "```go\n53 type helloWorldHandler struct{} \n54  \n55 func newHelloWorldHandler() http.Handler { \n56   return helloWorldHandler{} \n57 } \n58  \n59 func (h helloWorldHandler) ServeHTTP(rw http.ResponseWriter, r *http.Request) { \n60   response := helloWorldResponse{Message: \"Hello \" + name} \n61  \n62   encoder := json.NewEncoder(rw) \n63   encoder.Encode(response) \n64 } \n\n```", "```go\nfunc Background() Context \n\n```", "```go\nfunc WithCancel(parent Context) (ctx Context, cancel CancelFunc) \n\n```", "```go\nfunc WithDeadline(parent Context, deadline time.Time) (Context, CancelFunc) \n\n```", "```go\nfunc WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc) \n\n```", "```go\nfunc WithValue(parent Context, key interface{}, val interface{}) Context \n\n```", "```go\nfunc (r *Request) Context() context.Context\n\n```", "```go\n70 func fetchGoogle(t *testing.T) {\n71   r, _ := http.NewRequest(\"GET\", \"https://google.com\", nil)\n72\n73   timeoutRequest, cancelFunc := context.WithTimeout(r.Context(), 1*time.Millisecond)\n74   defer cancelFunc()\n75\n76   r = r.WithContext(timeoutRequest)\n77\n78   _, err := http.DefaultClient.Do(r)\n79   if err != nil {\n80     fmt.Println(\"Error:\", err)\n81   }\n82 }\n\n```", "```go\nfunc (r *Request) WithContext(ctx context.Context) *Request\n\n```", "```go\nError: Get https://google.com: context deadline exceeded\n\n```", "```go\n41 func (h validationHandler) ServeHTTP(rw http.ResponseWriter, r *http.Request) {\n42   var request helloWorldRequest\n43   decoder := json.NewDecoder(r.Body)\n44\n45   err := decoder.Decode(&request)\n46   if err != nil {\n47     http.Error(rw, \"Bad request\", http.StatusBadRequest)\n48     return\n49   }\n50\n51   c := context.WithValue(r.Context(), validationContextKey(\"name\"), request.Name)\n52   r = r.WithContext(c)\n53\n54   h.next.ServeHTTP(rw, r)\n55 }\n\n```", "```go\n13 type validationContextKey string\n\n```", "```go\n64 func (h helloWorldHandler) ServeHTTP(rw http.ResponseWriter, r *http.Request) {\n65   name := r.Context().Value(validationContextKey(\"name\")).(string)\n66   response := helloWorldResponse{Message: \"Hello \" + name}\n67\n68   encoder := json.NewEncoder(rw)\n69   encoder.Encode(response)\n70 }\n\n```", "```go\n34 type HelloWorldHandler struct{} \n35  \n36 func (h *HelloWorldHandler) HelloWorld(args *contract.HelloWorldRequest, reply *contract.HelloWorldResponse) error { \n37   reply.Message = \"\"Hello \"\" + args.Name \n38   return nil \n39 } \n\n```", "```go\nfunc Register(rcvr interface{}) error \n\n```", "```go\nfunc RegisterName(name string, rcvr interface{}) error \n\n```", "```go\n19 func StartServer() { \n20   helloWorld := &HelloWorldHandler{} \n21   rpc.Register(helloWorld) \n22  \n23   l, err := net.Listen(\"(\"tcp\",\", fmt.Sprintf(\":%(\":%v\",\", port)) \n24   if err != nil { \n25     log.Fatal(fmt.Sprintf(\"(\"Unable to listen on given port: %s\",\", err)) \n26   } \n27  \n28   for { \n29     conn, _ := l.Accept() \n30     go rpc.ServeConn(conn) \n31   } \n32 } \n\n```", "```go\nfunc Listen(net, laddr string) (Listener, error) \n\n```", "```go\ntype Listener interface { \n  // Accept waits for and returns the next connection to the listener. \n  Accept() (Conn, error) \n\n  // Close closes the listener. \n  // Any blocked Accept operations will be unblocked and return errors. \n  Close() error \n\n  // Addr returns the listener's network address. \n  Addr() Addr \n} \n\n```", "```go\nfunc ServeConn(conn io.ReadWriteCloser) \n\n```", "```go\n13 func CreateClient() *rpc.Client {\n14   client, err := rpc.Dial(\"tcp\", fmt.Sprintf(\"localhost:%v\", port))\n15   if err != nil {\n16     log.Fatal(\"dialing:\", err)\n17   }\n18\n19   return client\n20 }\n\n```", "```go\nfunc Dial(network, address string) (*Client, error)\n\n```", "```go\n22 func PerformRequest(client *rpc.Client) \ncontract.HelloWorldResponse {\n23   args := &contract.HelloWorldRequest{Name: \"World\"}\n24   var reply contract.HelloWorldResponse\n25\n26   err := client.Call(\"HelloWorldHandler.HelloWorld\", args, &reply)\n27   if err != nil {\n28     log.Fatal(\"error:\", err)\n29   }\n30\n31   return reply\n32 }\n\n```", "```go\nfunc (client *Client) Call(serviceMethod string, args interface{}, reply interface{}) error\n\n```", "```go\nconst ( \n  // Defaults used by HandleHTTP \n  DefaultRPCPath   = \"/_\"/_goRPC_\"_\" \n  DefaultDebugPath = \"/\"/debug/rpc\"\" \n) \n\n```", "```go\n22 func StartServer() { \n23   helloWorld := &HelloWorldHandler{} \n24   rpc.Register(helloWorld) \n25   rpc.HandleHTTP() \n26  \n27   l, err := net.Listen(\"(\"tcp\",\", fmt.Sprintf(\":%(\":%v\",\", port)) \n28   if err != nil { \n29       log.Fatal(fmt.Sprintf(\"(\"Unable to listen on given port: %s\",\", err)) \n30   } \n31  \n32   log.Printf(\"(\"Server starting on port %v\\n\",\", port) \n33  \n34   http.Serve(l, nil) \n35 } \n\n```", "```go\n33 func StartServer() { \n34  helloWorld := new(HelloWorldHandler) \n35  rpc.Register(helloWorld) \n36 \n37  l, err := net.Listen(\"(\"tcp\",\", fmt.Sprintf(\":%(\":%v\",\", port)) \n38  if err != nil { \n39    log.Fatal(fmt.Sprintf(\"(\"Unable to listen on given port: %s\",\", err)) \n40  } \n41 \n42 http.Serve(l, http.HandlerFunc(httpHandler)) \n43 } \n\n```", "```go\n45 func httpHandler(w http.ResponseWriter, r *http.Request) { \n46   serverCodec := jsonrpc.NewServerCodec(&HttpConn{in: r.Body, out: w}) \n47   err := rpc.ServeRequest(serverCodec) \n48   if err != nil { \n49     log.Printf(\"(\"Error while serving JSON request: %v\",\", err) \n50   http.Error(w, \"\"Error while serving JSON request, details have been logged.\",.\", 500) \n51   return \n52   } \n53 } \n\n```", "```go\ntype ClientCodec interface { \n  // WriteRequest must be safe for concurrent use by multiple goroutines. \n  WriteRequest(*Request, interface{}) error \n  ReadResponseHeader(*Response) error \n  ReadResponseBody(interface{}) error \n\n  Close() error \n} \n\n```", "```go\n17 type HttpConn struct { \n18   in  io.Reader \n19   out io.Writer \n20 } \n21 \n22 func (c *HttpConn) Read(p []byte) (n int, err error)  { return c.in.Read(p) } \n23 func (c *HttpConn) Write(d []byte) (n int, err error) { return c.out.Write(d) } \n24 func (c *HttpConn) Close() error                      { return nil } \n\n```"]