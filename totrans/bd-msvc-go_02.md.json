["```go\nURI = scheme \"://\" authority \"/\" path [ \"?\" query] [\"#\" fragment\"] \nURI = http://myserver.com/mypath?query=1#document \n\n```", "```go\nGET /cats   -> All cats in the collection \nGET /cats/1 -> Single document for a cat 1 \n\n```", "```go\nGET /cats/1           -> Single document for cat 1 \nGET /cats/1/kittens   -> All kittens belonging to cat 1 \nGET /cats/1/kittens/1 -> Kitten 1 for cat 1 \n\n```", "```go\nPOST /cats/1/feed           -> Feed cat 1 \nPOST /cats/1/feed?food=fish ->Feed cat 1 a fish \n\n```", "```go\nPUT /cats/2 \n\n```", "```go\nDELETE /cats/1234\n\n```", "```go\nGET /deleteCat/1234 \nDELETE /deleteCat/1234 \nPOST /cats/1234/delete\n\n```", "```go\nGET /v1/cats HTTP/1.1 \n\n```", "```go\nHTTP/1.1 200 OK \nContent-Type: application/json \nContent-Length: xxxx \n\n{\"name\": \"Fat Freddie's Cat\", \"weight\": 15} \n\n```", "```go\nPOST /v1/cats HTTP/1.1 \nContent-Type: application/json \nContent-Length: xxxx \n\n{\"name\": \"Felix\", \"weight\": 5} \n\n```", "```go\nHTTP/1.1 201 Created \nContent-Type: application/json \nContent-Length: 0 \nLocation: /v1/cats/12343 \n\n```", "```go\nPUT /v1/cats HTTP/1.1 \nContent-Type: application/json \nContent-Length: xxxx \n\n{\"name\": \"Thomas\", \"weight\": 7 } \n\n```", "```go\nHTTP/1.1 201 Created \nContent-Type: application/json \nContent-Length: 0 \n\n```", "```go\nPATCH /v1/cats/12343 HTTP/1.1 \nContent-Type: application/json \nContent-Length: xxxx \n\n{\"weight\": 9} \n\n```", "```go\nHTTP/1.1 204 No Body \nContent-Type: application/json \nContent-Length: 0 \n\n```", "```go\nDELETE /v1/cats/12343 HTTP/1.1 \nContent-Type: application/json \nContent-Length: 0 \n\n```", "```go\nHTTP/1.1 204 No Body \nContent-Type: application/json \nContent-Length: 0 \n\n```", "```go\nHEAD /v1/cats/12343 HTTP/1.1 \nContent-Type: application/json \nContent-Length: 0 \n\n```", "```go\nHTTP/1.1 200 OK \nContent-Type: application/json \nLast-Modified: Wed, 25 Feb 2004 22:37:23 GMT \nContent-Length: 45 \n\n```", "```go\nOPTIONS /v1/cats/12343 HTTP/1.1 \nContent-Length: 0 \n\n```", "```go\nHTTP/1.1 200 OK \nContent-Length: 0 \nAllow: GET, PUT, DELETE\n\n```", "```go\nPOST /sendStatusUpdateEmail?$group=admin \n{ \n  \"\"message\": \"\": \"All services are now operational\\nPlease accept our \n              apologies for any inconvenience caused.\\n \n              The Kitten API team\"\" \n} \n\n```", "```go\nPOST /kittens \nRESPONSE HTTP 200 OK \n{ \n  \"\"status\":\": 401, \n  \"\"statusMessage\": \"\": \"Bad Request\"\" \n} \n\n```", "```go\nPOST /kittens \nRESPONSE HTTP 201 CREATED \n{ \n  \"\"status\":\": 201, \n  \"\"statusMessage\": \"\": \"Created\",\", \n  \"\"kitten\":\": { \n    \"\"id\": \"\": \"1234334dffdf23\",\", \n    \"\"name\": \"\": \"Fat Freddy'sFreddy's Cat\"\" \n  } \n} \n\n```", "```go\nPOST /kittens \nRESPONSE HTTP 200 OK \n{ \n  \"\"status\":\": 400, \n  \"\"statusMessage\": \"\": \"Bad Request\"\" \n} \n\n```", "```go\nPOST /kittens \nRESPONSE HTTP 200 OK \n{ \n  \"\"id\": \"\": \"123434jhjh3433\",\", \n  \"\"name\": \"\": \"Fat Freddy'sFreddy's Cat\"\" \n} \n\n```", "```go\nPOST /kittens \nRESPONSE HTTP 400 BAD REQUEST \n{ \n  \"\"errorMessage\": \"\": \"Name should be between 1 and 256 characters in \n  length and only contain [A-Z] - ['-.]\"'-.]\" \n} \n\n```", "```go\nPOST /kittens \nRESPONSE HTTP 201 CREATED \n{ \n  \"\"id\": \"\": \"123hjhjh2322\",\", \n  \"\"name\": \"\": \"Fat Freddy'sFreddy's cat\"\" \n} \n\n```", "```go\n201 Created \nLocation: https://api.kittens.com/v1/kittens/123dfdf111 \n\n```", "```go\nAuthorization:  \n        OAuth oauth_consumer_key=\"=\"xvz1evFS4wEEPTGEFPHBog\",\",  \n              oauth_nonce=\"=\"kYjzVBB8Y0ZFabxSWbWovY3uYSQ2pTgmZeNu2VS4cg\",\",  \n              oauth_signature=\"=\"tnnArxj06cWHq44gCs1OSKk%2FjLY%3D\",\",  \n              oauth_signature_method=\"=\"HMAC-SHA1\",\",  \n              oauth_timestamp=\"=\"1318622958\",\",  \n              oauth_token=\"=\"370773112-GmHxMAgYyLbNEtIKZeRNFsMKPR9EyMZeS9weJAEb\",\",  \n              oauth_version=\"=\"1.0\"\" \n\n```", "```go\nfunc NewWriter(w io.Writer) *Writer \n\n```", "```go\n68 type GzipResponseWriter struct { \n69   gw *gzip.Writer \n70   http.ResponseWriter \n71} \n\n```", "```go\n73 func (w GzipResponseWriter) Write(b []byte) (int, error) { \n74   if _, ok := w.Header()[\"()[\"Content-Type\"];\"]; !ok { \n75     // If content type is not set, infer it from the uncompressed body. \n76   w.Header().Set(\"(\"Content-Type\",\", http.DetectContentType(b)) \n77   } \n78   return w.gw.Write(b) \n79 } \n\n```", "```go\n40 type GZipHandler struct { \n41  next http.Handler \n42 } \n43 \n44 func (h *GZipHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) { \n45  encodings := r.Header.Get(\"(\"Accept-Encoding\")\") \n46 \n47  if strings.Contains(encodings, \"\"gzip\")\") { \n48      h.serveGzipped(w, r) \n49  } else if strings.Contains(encodings, \"\"deflate\")\") { \n50      panic(\"(\"Deflate not implemented\")\") \n51  } else { \n52      h.servePlain(w, r) \n53  } \n54 } \n55 \n56 func (h *GZipHandler) serveGzipped(w http.ResponseWriter, r *http.Request) { \n57  gzw := gzip.NewWriter(w) \n58  defer gzw.Close() \n59 \n60  w.Header().Set(\"(\"Content-Encoding\", \"\", \"gzip\")\") \n61  h.next.ServeHTTP(GzipResponseWriter{gzw, w}, r) \n62 } \n\n63 func (h *GZipHandler) servePlain(w http.ResponseWriter, r *http.Request) 64 { \n65  h.next.ServeHTTP(w, r) \n66 } \n\n```", "```go\n        X-Request-ID: f058ebd6-02f7-4d3f-942e-904344e8cde \n\n```", "```go\n{ \n  \"\"error\":\": { \n    \"\"code\": \"\": \"BadArgument\",\", \n    \"\"message\": \"\": \"Previous passwords may not be reused\",\", \n    \"\"target\": \"\": \"password\",\", \n    \"\"innererror\":\": a { \n      \"\"code\": \"\": \"PasswordError\",\", \n  \"\"innererror\":\": { \n    \"\"code\": \"\": \"PasswordDoesNotMeetPolicy\",\", \n    \"\"minLength\": \"\": \"6\",\", \n    \"\"maxLength\": \"\": \"64\",\", \n    \"\"characterTypes\": [\"\": [\"lowerCase\",\"\",\"upperCase\",\"\",\"number\",\"\",\"symbol\"],\"], \n    \"\"minDistinctCharacterTypes\": \"\": \"2\",\", \n    \"\"innererror\":\": { \n      \"\"code\": \"\": \"PasswordReuseNotAllowed\"\" \n    } \n      } \n    } \n  } \n} \n\n```", "```go\nfunction success(data) { \n  alert(data.message); \n} \n\n```", "```go\nsuccess({\"({\"message\":\"\":\"Hello World\"})\"}) \n\n```", "```go\nContent-Type: application/javascript \n\n```", "```go\n18 type helloWorldResponse struct { \n19  Message string `json:\":\"message\"`\"` \n20 } \n\n```", "```go\n23 func helloWorldHandler(w http.ResponseWriter, r *http.Request) { \n24  response := helloWorldResponse{Message: \"\"HelloWorld\"}\"} \n25  data, err := json.Marshal(response) \n26  if err != nil { \n27    panic(\"(\"Ooops\")\") \n28 } \n29 \n30  callback := r.URL.Query().Get(\"(\"callback\")\") \n31  if callback != \"\"\"\" { \n32    r.Headers().Add(\"(\"Content-Type\", \"\", \"application/javascript\")\") \n33    fmt.Fprintf(w, \"%\"%s(%s)\",)\", callback, string(data)) \n34  } else { \n35    fmt.Fprint(w, string(data)) \n36  } \n37 } \n\n```", "```go\nGET /helloworld?callback=hello \n\n```", "```go\nhello({\"message\":\"Hello World\"})  \n\n```", "```go\nAccess-Control-Allow-Origin: origin.com \n\n```", "```go\n25 if r.Method == \"\"OPTIONS\"\" { \n26  w.Header().Add(\"(\"Access-Control-Allow-Origin\", \"*\")\", \"*\") \n27  w.Header().Add(\"(\"Access-Control-Allow-Methods\", \"\", \"GET\")\") \n28  w.WriteHeader(http.StatusNoContent) \n29  return \n30 }  \n\n```", "```go\nAccess-Control-Allow-Methods: GET \n\n```", "```go\ntype HelloWorldRequest struct {\n  Name string\n}\n\n```", "```go\nstruct User { \n  1: string name, \n  2: i32 id, \n  3: string email \n} \n\nstruct Error { \n  1: i32 code, \n  2: string detail \n} \n\nservice Users { \n  Error createUser(1: User user) \n} \n\n```", "```go\nservice Users { \n  rpc CreateUser (User) returns (Error) {} \n} \n\nmessage User { \n  required string name = 1; \n  required int32 id = 2; \n  optional string email = 3; \n} \n\nmessage Error { \n  optional code int32 = 1 \n  optional detail string = 2 \n} \n\n```", "```go\n{\n  \"jsonrpc\": \"2.0\", \n  \"method\": \"\": \"Users.v1.CreateUser\",\n  \"params\": {\n    \"name\": \"Nic Jackson\", \n    \"id\": 12335432434\n  }, \n  \"id\": 1\n} \n\n```", "```go\n{\n  \"jsonrpc\": \"2.0\", \n  \"result\": {...}, \n  \"id\":\": 1\n} \n\n```", "```go\n{\n \"jsonrpc\": \"2.0\", \n \"method\": \"\": \"Users.v1.GetUserLog\",\n \"params\": {\n   \"name\": \"Nic Jackson\", \n   \"id\": 12335432434,\n   \"filter\": { \n     \"page_start\":\": 1,  //optional \n     \"page_size\"\" : 10,  //optional \n     \"sort\": \"name DESC\" //optional \n   },\n \"id\": 1\n}\n\n```", "```go\nhttps://myserver.com/v1/helloworld \n\n```", "```go\nhttps://myserver.com/helloworld?api-version=1 \n\n```", "```go\nGET https://myserver.com/helloworld\napi-version: 2\n\n```", "```go\nGET /v1/users \n\n```", "```go\nUsers.v1.Users \nGET /v1/users/123434 \n\n```", "```go\nUsers.v1.User \n\n```", "```go\nGET /v1/users/12343/permissions/1232 \n\n```", "```go\nPermissions.v1.Permission \n\n```", "```go\nDELETE /v1/users/123123 \n\n```", "```go\nUsers.v1.DeleteUser \n\n```", "```go\n{\"date\": \"2016-07-14T16:00Z\"} \n\n```", "```go\n{\"date\": {\"kind\": \"U\", \"value\": 1471186826}} \n\n```", "```go\nP[n]Y[n]M[n]DT[n]H[n]M[n]S \n\n```", "```go\n/pets: \n  get: \n    description: Returns all pets from the system that the user has access to \n    produces: \n      - application/json \n    responses: \n      '200''200': \n        description: A list of pets. \n  schema: \n    type: array \n    items: \n      $ref: ''#/definitions/Pet'Pet' \n\ndefinitions: \n  Pet: \n    type: object \n    properties: \n      name: \n  type: string \n    description: name of the pet \n\n```", "```go\nFORMAT: 1A \n\n# Data Structures \n\n## Pet (object) \n+ name: Jason (string) - Name of the pet. \n\n# Pets [/pets] \n\nReturns all pets from the system that the user has access to'to' \n\n## Retrieve all pets [GET] \n+ Response 200 (application/json) \n+ Attributes (array[Pet]) \n\n```", "```go\n#%RAML 1.0 \ntitle: Pets API \nmediaType: [ application/json] \ntypes: \n  Pet: \n    type: object \n    properties: \n      name: \n        type: string \n        description: name of the pet \n/pets: \n  description: Returns all pets from the system that the user has access to \n  get: \n    responses: \n      200: \n        body: Pet[] \n\n```", "```go\n// The greeting service definition. \nservice Users { \n  // Create user creates a user in the system with the given User details, \n  // it returns an Error message which will be nil on a successful operation \n  rpc CreateUser (User) returns (Error) {} \n} \n\n// Person describes a user entity \nmessage User { \n  // name is a required field and represents the name of \n  required string name = 1; \n  // id is the unique identifier for the user in the sytem \n  required int32 id = 2; \n  // email is the users email address and is an optional field  \n  optional string email = 3; \n} \n\nmessage Error { \n  optional code int32 = 1 \n  optional detail string = 2 \n} \n\n```"]