["```go\n$ docker run --rm hello-world  \n\n```", "```go\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\nc04b14da8d14: Pull complete \nDigest: sha256:0256e8a36e2070f7bf2d0b0763dbabdd67798512411de4cdcf9431a1feb60fd9\nStatus: Downloaded newer image for hello-world:latest\n\n```", "```go\nHello from Docker!\nThis message shows that your installation appears to be working correctly.  \n\n```", "```go\n$ docker run -it --rm alpine:latest sh  \n\n```", "```go\nbin      etc      lib      media    proc     run      srv      tmp      var\ndev      home     linuxrc  mnt      root     sbin     sys      usr\n\n```", "```go\n$ docker ps  \n\n```", "```go\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n43a1bea0009e        alpine:latest       \"sh\"                6 minutes ago       Up 6 minutes                            tiny_galileo\n\n```", "```go\n$ touch mytestfile.txt  \n\n```", "```go\nbin             lib             mytestfile.txt  sbin            usr\ndev             linuxrc         proc            srv             var\netc             media           root            sys\nhome            mnt             run             tmp  \n\n```", "```go\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES  \n\n```", "```go\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES\n518c8ae7fc94        alpine:latest       \"sh\"                5 seconds ago       Exited (0) 2 seconds ago                       pensive_perlman  \n\n```", "```go\n$ docker start -it [container_id] sh  \n\n```", "```go\n$ docker rm -v $(docker ps -a -q)  \n\n```", "```go\n$ docker run -it -v $(pwd):/host alpine:latest /bin/sh  \n\n```", "```go\n$ docker run -it --rm -v $(pwd):/src -p 8080:8080 -w /src golang:alpine /bin/sh  \n\n```", "```go\n2016/09/02 05:53:13 Server starting on port 8080  \n\n```", "```go\n$ curl -XPOST localhost:8080/helloworld -d '{\"name\":\"Nic\"}'  \n\n```", "```go\n{\"message\":\"Hello Nic\"}  \n\n```", "```go\n$ docker run -it --rm -v $(pwd):/src -w /src -p 8080:8080 golang:alpine go run reading_writing_json_8.go  \n\n```", "```go\n{\"message\":\"Hello Nic\"}  \n\n```", "```go\n$ docker rm -v server  \n\n```", "```go\n$ docker network ls  \n\n```", "```go\nNETWORK ID          NAME                DRIVER              SCOPE\n8e8c0cc84f66        bridge              bridge              local \n0c2ecf158a3e        host                host                local \n951b3fde8001        none                null                local       \n\n```", "```go\n$ docker network create testnetwork  \n\n```", "```go\n$ docker run -it --rm -v $(pwd):/src -w /src --name server --network=testnetwork golang:alpine go run main.go  \n\n```", "```go\n$ docker run --rm appropriate/curl:latest curl -i -XPOST server:8080/helloworld -d '{\"name\":\"Nic\"}'  \n\n```", "```go\ncurl: (6) Couldn't resolve host 'server'\n\n```", "```go\n$ docker run --rm --network=testnetwork appropriate/curl:latest curl -i -XPOST server:8080/helloworld -d '{\"name\":\"Nic\"}'  \n\n```", "```go\n$ CGO_ENABLED=0 GOOS=linux GOARCH=386 go build -a -installsuffix cgo -ldflags '-s' -o server  \n\n```", "```go\n1 FROM scratch\n2 MAINTAINER jackson.nic@gmail.com\n3\n4 EXPOSE 8080\n5\n6 COPY ./server ./\n7 \n8 ENTRYPOINT ./server  \n\n```", "```go\n$ docker run --rm helloworld --config=/configfile.json  \n\n```", "```go\n$ ./server --config=configfile.json  \n\n```", "```go\nRUN apt-get update\nRUN apt-get install -y wget\nRUN apt-get install -y curl\nRUN apt-get install -y nginx  \n\n```", "```go\nRUN apt-get update && \\\n apt-get install -y wget curl nginx\n\n```", "```go\n$ docker build -t testserver .  \n\n```", "```go\n$ docker run --rm -p 8080:8080 testserver\n$ curl -XPOST localhost:8080/helloworld -d '{\"name\":\"Nic\"}'\n\n```", "```go\n$ curl -L https://github.com/docker/compose/releases/download/1.8.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose  && chmod +x /usr/local/bin/docker-compose  \n\n```", "```go\n1 version: '2' \n2 services: \n3   testserver: \n4     image: testserver \n5   curl: \n6     image: appropriate/curl \n7     entrypoint: sh -c  \"sleep 3 && curl -XPOST testserver:8080/helloworld -d '{\\\"name\\\":\\\"Nic\\\"}'\" \n\n```", "```go\nsh -c  \"sleep 3 && curl -XPOST testserver:8080/helloworld -d '{\\\"name\\\":\\\"Nic\\\"}'\"\n\n```", "```go\n$ docker-compose up  \n\n```", "```go\n{\"message\":\"Hello Nic\"}  \n\n```", "```go\n$ docker-compose rm -v  \n\n```", "```go\n$ docker-compose -f ./docker-compose.yml up  \n\n```", "```go\n$ docker-compose -p testproject up  \n\n```"]