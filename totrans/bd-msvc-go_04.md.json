["```go\nFeature: As a user when I call the search endpoint, I would like to receive a list of kittens\n\n```", "```go\nScenario: Invalid query\n Given I have no search criteria \n When I call the search endpoint \n Then I should receive a bad request message \n\n```", "```go\n  10 func main() { \n  11   err := http.ListenAndServe(\":2323\", &handlers.SearchHandler{}) \n  12   if err != nil { \n  13     log.Fatal(err) \n  14   } \n  15 } \n\n```", "```go\nfunc TestXxx(*testing.T) \n\n```", "```go\n   9 func TestSearchHandlerReturnsBadRequestWhenNoSearchCriteriaIsSent(t *testing.T) { \n  10   handler := SearchHandler{} \n  11   request := httptest.NewRequest(\"GET\", \"/search\", nil) \n  12   response := httptest.NewRecorder() \n  13 \n  14   handler.ServeHTTP(response, request) \n  15 \n  16   if response.Code != http.StatusBadRequest { \n  17     t.Errorf(\"Expected BadRequest got %v\", response.Code) \n  18   } \n  19 } \n\n```", "```go\nfunc NewRequest(method, target string, body io.Reader) *http.Request \n\n```", "```go\ntype ResponseRecorder struct { \n         Code      int           // the HTTP response code from WriteHeader \n         HeaderMap http.Header   // the HTTP response headers \n         Body      *bytes.Buffer // if non-nil, the bytes.Buffer to append written data to \n         Flushed   bool \n         // contains filtered or unexported fields \n } \n\n```", "```go\nfunc (c *T) Errorf(format string, args ...interface{}) \n\n```", "```go\n=== RUN   TestSearchHandlerReturnsBadRequestWhenNoSearchCriteriaIsSent\n--- FAIL: TestSearchHandlerReturnsBadRequestWhenNoSearchCriteriaIsSent (0.00s)\n search_test.go:17: Expected BadRequest got 200\n FAIL\n exit status 1\n FAIL    github.com/nicholasjackson/building-microservices-in-\n go/chapter5/handlers    0.016s\n\n```", "```go\n 18   decoder := json.NewDecoder(r.Body) \n 19   defer r.Body.Close() \n 20 \n 21   request := new(searchRequest) \n 22   err := decoder.Decode(request) \n 23   if err != nil { \n 24     http.Error(rw, \"Bad Request\", http.StatusBadRequest) \n 25     return \n 26   } \n\n```", "```go\n=== RUN   TestSearchHandlerReturnsBadRequestWhenNoSearchCriteriaIsSent\n--- PASS: TestSearchHandlerReturnsBadRequestWhenNoSearchCriteriaIsSent (0.00s)\nPASS\nok      github.com/nicholasjackson/building-microservices-in-go/chapter5/handlers    1.022s\n\n```", "```go\n  23 func TestSearchHandlerReturnsBadRequestWhenBlankSearchCriteriaIsSent(t *testing.T) { \n  24   handler := SearchHandler{} \n  25   data, _ := json.Marshal(searchRequest{}) \n  26   request := httptest.NewRequest(\"POST\", \"/search\", bytes.NewReader(data)) \n  27   response := httptest.NewRecorder() \n  28 \n  29   handler.ServeHTTP(response, request) \n  30 \n  31   if response.Code != http.StatusBadRequest { \n  32     t.Errorf(\"Expected BadRequest got %v\", response.Code) \n  33   } \n  34 } \n\n```", "```go\n  21 func TestSearchHandlerReturnsBadRequestWhenBlankSearchCriteriaIsSent(t *testing.T) { \n  22   r, rw, handler := setupTest(&searchRequest{}) \n  23 \n  24   handler.ServeHTTP(rw, r) \n  25 \n  26   if rw.Code != http.StatusBadRequest { \n  27     t.Errorf(\"Expected BadRequest got %v\", rw.Code) \n  28   } \n  29 } \n\n```", "```go\n23 if err != nil || len(request.Query) < 1 { \n24     http.Error(rw, \"Bad Request\", http.StatusBadRequest) \n25     return \n26   } \n\n```", "```go\nSearch(string) []Kitten \n\n```", "```go\n type Store interface { \n     Search(name string) []Kitten \n } \n\n```", "```go\n Search { \n     Store data.Store \n } \n\n```", "```go\n5 // MockStore is a mock implementation of a datastore for testing purposes \n6 type MockStore struct { \n7   mock.Mock \n8 } \n9 \n10 //Search returns the object which was passed to the mock on setup \n11 func (m *MockStore) Search(name string) []Kitten { \n12   args := m.Mock.Called(name) \n13 \n14   return args.Get(0).([]Kitten) \n15 } \n\n```", "```go\n args := m.Mock.Called(name) \n\n```", "```go\nfunc (c *Call) On(methodName string, arguments ...interface{}) *Call \n\n```", "```go\ngo test -cover ./...  \n\n```", "```go\n$go test -cover ./...\n? github.com/building-microservices-with-go/chapter4 [no test files]\nok github.com/building-microservices-with-go/chapter4/data 0.017s coverage: 20.0% of statements\nok github.com/building-microservices-with-go/chapter4/features 0.018s coverage: 0.0% of statements [no tests to run]\nok github.com/building-microservices-with-go/chapter4/handlers 0.018s coverage: 100.0% of statements\n\n```", "```go\nc := s.DB(\"kittenserver\").C(\"kittens\") \n\n```", "```go\nScenario: User passes no search criteria    \n  Given I have no search criteria \n  When I call the search endpoint \n  Then I should receive a bad request message \n\n```", "```go\nScenario: User passes valid search criteria    \n  Given I have valid search criteria \n  When I call the search endpoint \n  Then I should receive a list of kittens \n\n```", "```go\nFeature: As a user when I call the search endpoint, I would like to receive a list of kittens\n\nScenario: Invalid query                       \n# features/search.feature:4\n Given I have no search criteria\n When I call the search endpoint\n Then I should receive a bad request message\n\nScenario: Valid query                     \n# features/search.feature:9\n Given I have valid search criteria\n When I call the search endpoint\n Then I should receive a list of kittens\n\n2 scenarios (2 undefined)\n6 steps (6 undefined)\n321.121µs\n\n```", "```go\nfunc iHaveNoSearchCriteria() error { \n    return godog.ErrPending \n} \n\nfunc iCallTheSearchEndpoint() error { \n    return godog.ErrPending \n} \n\nfunc iShouldReceiveABadRequestMessage() error { \n    return godog.ErrPending \n} \n\nfunc iHaveAValidSearchCriteria() error { \n    return godog.ErrPending \n} \n\nfunc iShouldReceiveAListOfKittens() error { \n    return godog.ErrPending \n} \n\nfunc FeatureContext(s *godog.Suite) { \n    s.Step(`^I have no search criteria$`, iHaveNoSearchCriteria) \n    s.Step(`^I call the search endpoint$`, iCallTheSearchEndpoint) \n    s.Step(`^I should receive a bad request message$`, iShouldReceiveABadRequestMessage) \n    s.Step(`^I have a valid search criteria$`, iHaveAValidSearchCriteria) \n    s.Step(`^I should receive a list of kittens$`, iShouldReceiveAListOfKittens) \n} \n\n```", "```go\nFeature: As a user when I call the search endpoint, I would like to receive a list of kittens\n\n Scenario: Invalid query                       # search.feature:4\n Given I have no search criteria             # search_test.go:6 -> github.com/nicholasjackson/building-microservices-in-go/chapter5/features.iHaveNoSearchCriteria\n TODO: write pending definition\n When I call the search endpoint\n Then I should receive a bad request message\n\n Scenario: Valid query                     # search.feature:9\n Given I have a valid search criteria    # search_test.go:18 -> github.com/nicholasjackson/building-microservices-in-go/chapter5/features.iHaveAValidSearchCriteria\n TODO: write pending definition\n When I call the search endpoint\n Then I should receive a list of kittens\n\n 2 scenarios (2 pending)\n 6 steps (2 pending, 4 skipped)\n 548.978µs  \n\n```", "```go\n23 func iCallTheSearchEndpoint() error { \n24   var request []byte \n25 \n26   response, err = http.Post(\"http://localhost:2323\", \"application/json\", bytes.NewReader(request)) \n27   return err \n28 } \n29 \n30 func iShouldReceiveABadRequestMessage() error { \n31   if response.StatusCode != http.StatusBadRequest { \n32     return fmt.Errorf(\"Should have recieved a bad response\") \n33   } \n34 \n35   return nil \n36 } \n\n```", "```go\n59 func FeatureContext(s *godog.Suite) { \n60   s.Step(`^I have no search criteria$`, iHaveNoSearchCriteria) \n61   s.Step(`^I call the search endpoint$`, iCallTheSearchEndpoint) \n62   s.Step(`^I should receive a bad request message$`, iShouldReceiveABadRequestMessage) \n63   s.Step(`^I have a valid search criteria$`, iHaveAValidSearchCriteria) \n64   s.Step(`^I should receive a list of kittens$`, iShouldReceiveAListOfKittens) \n65 \n66   s.BeforeScenario(func(interface{}) { \n67     startServer() \n68     fmt.Printf(\"Server running with pid: %v\", server.Process.Pid) \n69   }) \n70 \n71   s.AfterScenario(func(interface{}, error) { \n72     server.Process.Kill() \n73   }) \n74 } \n75 \n76 var server *exec.Cmd \n77 \n78 func startServer() { \n79   server = exec.Command(\"go\", \"run\", \"../main.go\") \n80   go server.Run() \n81   time.Sleep(3 * time.Second) \n82 } \n\n```", "```go\nFeature: As a user when I call the search endpoint, I would like to receive a list of kittens\n Server running with pid: 91535\n Scenario: Invalid query                       # search.feature:4\n Given I have no search criteria             # search_test.go:17 -> github.com/building-microservices-with-go/chapter4/features.iHaveNoSearchCriteria\n When I call the search endpoint             # search_test.go:25 -> github.com/building-microservices-with-go/chapter4/features.iCallTheSearchEndpoint\n Then I should receive a bad request message # search_test.go:32 -> github.com/building-microservices-with-go/chapter4/features.iShouldReceiveABadRequestMessage\n Server running with pid: 91615\n Scenario: Valid query                     # search.feature:9\n Given I have a valid search criteria    # search_test.go:40 -> github.com/building-microservices-with-go/chapter4/features.iHaveAValidSearchCriteria\n Do not have a valid criteria\n When I call the search endpoint\n Then I should receive a list of kittens\n\n --- Failed scenarios:\n\n search.feature:10\n\n 2 scenarios (1 passed, 1 failed)\n 6 steps (3 passed, 1 failed, 2 skipped)\n 6.010954682s\n make: *** [cucumber] Error 1  \n\n```", "```go\nversion: '2' \nservices: \n  mongodb: \n    image: mongo \n    ports: \n      - 27017:27017 \n\n```", "```go\nDelleteAllKittens \nInsertKittens \n\n```", "```go\n10 // NewMongoStore creates an instance of MongoStore with the given connection string \n11 func NewMongoStore(connection string) (*MongoStore, error) { \n12   session, err := mgo.Dial(connection) \n13   if err != nil { \n14     return nil, err \n15   } \n16 \n17   return &MongoStore{session: session}, nil \n18 } \n\n```", "```go\n 98 func waitForDB() { \n 99   var err error \n100 \n101   for i := 0; i < 10; i++ { \n102     store, err = data.NewMongoStore(\"localhost\") \n103     if err == nil { \n104       break \n105     } \n106     time.Sleep(1 * time.Second) \n107   } \n108 } \n\n```", "```go\ncucumber: \n    docker-compose up -d \n    cd features && godog ./ \n    docker-compose stop \n\n```", "```go\n$make cucumber\ndocker-compose up -d\nchapter4_mongodb_1 is up-to-date\ncd features && godog ./\nFeature: As a user when I call the search endpoint, I would like to receive a list of kittens\nServer running with pid: 88200\n  Scenario: Invalid query # search.feature:4\n    Given I have no search criteria # search_test.go:21 -> github.com/building-microservices-with-go/chapter4/features.iHaveNoSearchCriteria\n    When I call the search endpoint # search_test.go:29 -> github.com/building-microservices-with-go/chapter4/features.iCallTheSearchEndpoint\n    Then I should receive a bad request message # search_test.go:40 -> github.com/building-microservices-with-go/chapter4/features.iShouldReceiveABadRequestMessage\nServer running with pid: 88468\n  Scenario: Valid query # search.feature:9\n    Given I have a valid search criteria # search_test.go:48 -> github.com/building-microservices-with-go/chapter4/features.iHaveAValidSearchCriteria\n    When I call the search endpoint # search_test.go:29 -> github.com/building-microservices-with-go/chapter4/features.iCallTheSearchEndpoint\n    Then I should receive a list of kittens # search_test.go:54 -> github.com/building-microservices-with-go/chapter4/features.iShouldReceiveAListOfKittens\n\n2 scenarios (2 passed)\n6 steps (6 passed)\n7.028664s\ndocker-compose stop\nStopping chapter4_mongodb_1 ... done\n\n```", "```go\n  11 func BenchmarkSearchHandler(b *testing.B) { \n  12   mockStore = &data.MockStore{} \n  13   mockStore.On(\"Search\", \"Fat Freddy's Cat\").Return([]data.Kitten{ \n  14     data.Kitten{ \n  15       Name: \"Fat Freddy's Cat\", \n  16     }, \n  17   }) \n  18 \n  19   search := Search{DataStore: mockStore} \n  20 \n  21   for i := 0; i < b.N; i++ { \n  22     r := httptest.NewRequest(\"POST\", \"/search\", \n         bytes.NewReader([]byte(`{\"query\":\"Fat Freddy's Cat\"}`))) \n  23     rr := httptest.NewRecorder() \n  24     search.ServeHTTP(rr, r) \n  25   } \n  26 } \n\n```", "```go\nfor n := 0; n < b.N; n++ \n\n```", "```go\ngo test -bench=. -benchmem\nBenchmarkSearchHandler-8          50000         43183 ns/op       49142 B/op          68 allocs/op\nPASS\nok      github.com/building-microservices-with-go/chapter4/handlers    2.495s  \n\n```", "```go\ngo test -bench=. -cpuprofile=cpu.prof -blockprofile=block.prof -memprofile=mem.prof  \n\n```", "```go\nimport _ \"net/http/pprof\" \n\ngo func() { \n     log.Println(http.ListenAndServe(\"localhost:6060\", nil)) \n }() \n\n```", "```go\n19 var cpuprofile = flag.String(\"cpuprofile\", \"\", \"write cpu profile to \n   file\") \n20 var memprofile = flag.String(\"memprofile\", \"\", \"write memory profile  \n   to file\") \n21 var store *data.MongoStore \n22 \n23 func main() { \n24   flag.Parse() \n25 \n26   if *cpuprofile != \"\" { \n27     fmt.Println(\"Running with CPU profile\") \n28     f, err := os.Create(*cpuprofile) \n29     if err != nil { \n30       log.Fatal(err) \n31     } \n32     pprof.StartCPUProfile(f) \n33   } \n34 \n35   sigs := make(chan os.Signal, 1) \n36   signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM) \n37 \n38   go func() { \n39     <-sigs \n40     fmt.Println(\"Finished\") \n41     if *memprofile != \"\" { \n42       f, err := os.Create(*memprofile) \n43       if err != nil { \n44         log.Fatal(err) \n45       } \n46       runtime.GC() \n47       pprof.Lookup(\"heap\").WriteTo(f, 0) \n48       defer f.Close() \n49     } \n50     if *cpuprofile != \"\" { \n51       pprof.StopCPUProfile() \n52     } \n53 \n54     os.Exit(0) \n55   }() \n\n```", "```go\nfunc StartCPUProfile(w io.Writer) error \n\n```", "```go\npprof.Lookup(\"heap\").WriteTo(f, 0) \nfunc Lookup(name string) *Profile \n\n```", "```go\ngoroutine    - stack traces of all current goroutines \nheap         - a sampling of all heap allocations \nthreadcreate - stack traces that led to the creation of new OS threads \nblock        - stack traces that led to blocking on synchronization primitives \n\nfuc (p *Profile) WriteTo(w io.Writer, debug int) error \n\n```", "```go\ngo tool pprof ./kittenserver ./cpu.prof  \n\n```", "```go\nEntering interactive mode (type \"help\" for commands) \n (pprof) top \n 24460ms of 42630ms total (57.38%) \n Dropped 456 nodes (cum <= 213.15ms) \n Showing top 10 nodes out of 163 (cum >= 790ms) \n       flat  flat%   sum%        cum   cum% \n    16110ms 37.79% 37.79%    16790ms 39.39%  syscall.Syscall \n     2670ms  6.26% 44.05%     2670ms  6.26%  runtime._ExternalCode \n     1440ms  3.38% 47.43%     1560ms  3.66%  syscall.Syscall6 \n      900ms  2.11% 49.54%      900ms  2.11%  runtime.epollctl \n      830ms  1.95% 51.49%     2370ms  5.56%  runtime.mallocgc \n      610ms  1.43% 52.92%     1470ms  3.45%  runtime.pcvalue \n      510ms  1.20% 54.12%      510ms  1.20%  runtime.heapBitsSetType \n      470ms  1.10% 55.22%     2810ms  6.59%  runtime.gentraceback \n      470ms  1.10% 56.32%      470ms  1.10%  runtime.memmove \n      450ms  1.06% 57.38%      790ms  1.85%  runtime.deferreturn \n (pprof) \n\n```", "```go\nbrew install graphviz  \n\n```", "```go\napt-get install graphviz  \n\n```", "```go\nEntering interactive mode (type \"help\" for commands)\n(pprof) list Search\nTotal: 42.63s\nROUTINE ======================== github.com//building-microservices-with-go/chapter4/data.(*MongoStore).Search in github.com/building-microservices-with-go/chapter4/data/mongostore.go\n 40ms      7.92s (flat, cum) 18.58% of Total\n .         .    16:\n .         .    17:    return &MongoStore{session: session}, nil\n .         .    18:}\n .         .    19:\n .         .    20:// Search returns Kittens from the MongoDB \n                      instance which have the name name\n 40ms       40ms     21:func (m *MongoStore) Search(name string) \n                        []Kitten {\n .     270ms    22:    s := m.session.Clone()\n .      10ms    23:    defer s.Close()\n .         .    24:\n .      20ms    25:    var results []Kitten\n .      70ms    26:    c := s.DB(\"kittenserver\").C(\"kittens\")\n .     7.30s    27:    err := c.Find(Kitten{Name: \n                              name}).All(&results)\n .         .    28:    if err != nil {\n .         .    29:        return nil\n .         .    30:    }\n .         .    31:\n .     210ms    32:    return results\n .         .    33:}\n .         .    34:\n .         .    35:// DeleteAllKittens deletes all the kittens \n                      from the datastore\n .         .    36:func (m *MongoStore) DeleteAllKittens() {\n .         .    37:    s := m.session.Clone() \n\n```"]