["```go\n  1 syntax = \"proto3\"; \n  2 \n  3 package bmigo.micro; \n  4 \n  5 message RequestEnvelope { \n  6     string service_method = 1; \n  7     fixed64 seq = 2; \n  8 } \n  9 \n 10 message ResponseEnvelope { \n 11     string service_method = 1; \n 12     fixed64 seq = 2; \n 13     string error = 3; \n 14 } \n 15 \n 16 message Request { \n 17     string name = 1; \n 18 } \n 19 \n 20 message Response { \n 21     string msg = 1; \n 22 } \n 23 \n 24 service Kittens { \n 25     rpc Hello(Request) returns (Response) {} \n 26 } \n\n```", "```go\n 32 type Request struct { \n 33   Name string `protobuf:\"bytes,1,opt,name=name\" \n      json:\"name,omitempty\"` \n 34 } \n 35 \n 36 func (m *Request) Reset()                    { *m = Request{} } \n 37 func (m *Request) String() string            { return \n    proto.CompactTextString(m) } \n 38 func (*Request) ProtoMessage()               {} \n 39 func (*Request) Descriptor() ([]byte, []int) { return \n    fileDescriptor0, []int{0} } \n\n```", "```go\n 20 func main() { \n 21   cmd.Init() \n 22 \n 23   server.Init( \n 24     server.Name(\"bmigo.micro.Kittens\"), \n 25     server.Version(\"1.0.0\"), \n 26     server.Address(\":8091\"), \n 27   ) \n 28 \n 29   // Register Handlers \n 30   server.Handle( \n 31     server.NewHandler( \n 32       new(Kittens), \n 33     ), \n 34   ) \n 35 \n 36   // Run server \n 37   if err := server.Run(); err != nil { \n 38     log.Fatal(err) \n 39   } \n 40 } \n\n```", "```go\n 12 type Kittens struct{} \n 13 \n 14 func (s *Kittens) Hello(ctx context.Context, req *kittens.Request, \n    rsp *kittens.Response) error { \n 15   rsp.Msg = server.DefaultId + \": Hello \" + req.Name \n 16 \n 17   return nil \n 18 } \n\n```", "```go\n 82 def main() \n 83 \n 84   puts \"Connecting to Kittenserver\" \n 85 \n 86   request = Bmigo::Micro::Request.new(name: 'Nic') \n 87   body = send_request('kittenserver_kittenserver_1', '8091', \n      'Kittens.Hello', request).body \n 88   envelope, message = read_response(body, Bmigo::Micro::Response) \n 89 \n 90   puts envelope.inspect \n 91   puts message.inspect \n 92 end \n\n```", "```go\ngo get github.com/koding/kite  \n\n```", "```go\n 13 func main() { \n 14 \n 15   k := kite.New(\"math\", \"1.0.0\") \n 16   c := config.MustGet() \n 17   k.Config = c \n 18   k.Config.KontrolURL = \"http://kontrol:6000/kite\" \n 19 \n 20   k.RegisterForever(&url.URL{Scheme: \"http\", Host: \"127.0.0.1:8091\", Path: \"/kite\"}) \n 21 \n 22   // Add our handler method with the name \"square\" \n 23   k.HandleFunc(\"Hello\", func(r *kite.Request) (interface{}, error) { \n 24     name, _ := r.Args.One().String() \n 25 \n 26     return fmt.Sprintf(\"Hello %v\", name), nil \n 27   }).DisableAuthentication() \n 28 \n 29   // Attach to a server with port8091 and run it \n 30   k.Config.Port = 8091 \n 31   k.Run() \n 32 \n 33 } \n\n```", "```go\nk.Config.KontrolURL = \"http://kontrol:6000/kite \n\n```", "```go\nHandleFunc(route string, function func(*kite.Request) (interface{}, error)) \n\n```", "```go\nDial() \nDialForever() \n\n```", "```go\n$ go get google.golang.org/grpc\n$ go get -u github.com/golang/protobuf/{proto,protoc-gen-go}  \n\n```", "```go\n 13 service Kittens { \n 14     rpc Hello(Request) returns (Response) {} \n 15 } \n\n```", "```go\nprotoc -I /proto /proto/kittens.proto --go_out=plugins=grpc:/proto  \n\n```", "```go\n 15 type kittenServer struct{} \n 16 \n 17 func (k *kittenServer) Hello(ctx context.Context, request \n    *proto.Request) (*proto.Response, error) { \n 18   response := &proto.Response{}\n 19   response.Msg = fmt.Sprintf(\"Hello %v\", request.Name) \n 20 \n 21   return response, nil \n 22 } \n\n```", "```go\ntype KittensServer interface { \n    Hello(context.Context, *Request) (*Response, error) \n} \n\n```", "```go\n 24 func main() { \n 25   lis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", 9000)) \n 26   if err != nil { \n 27     log.Fatalf(\"failed to listen: %v\", err) \n 28   } \n 29   grpcServer := grpc.NewServer() \n 30   proto.RegisterKittensServer(grpcServer, &kittenServer{}) \n 31   grpcServer.Serve(lis) \n 32 } \n\n```", "```go\n 12 func main() { \n 13   conn, err := grpc.Dial(\"127.0.0.1:9000\", grpc.WithInsecure()) \n 14   if err != nil { \n 15     log.Fatal(\"Unable to create connection to server: \", err) \n 16   } \n 17 \n 18   client := proto.NewKittensClient(conn) \n 19   response, err := client.Hello(context.Background(), \n      &proto.Request{Name: \"Nic\"}) \n 20 \n 21   if err != nil { \n 22     log.Fatal(\"Error calling service: \", err) \n 23   } \n 24 \n 25   fmt.Println(response.Msg) \n 26 } \n\n```", "```go\nfunc Dial(target string, opts ...DialOption) (*ClientConn, error) \n\n```", "```go\n  6 require 'kittens_services_pb' \n  7 \n  8 service = \n     Bmigo::Grpc::Kittens::Stub.new('kittenserver_kittenserver_1:9000', \n     :this_channel_is_insecure) \n  9 \n 10 request = Bmigo::Grpc::Request.new \n 11 request.name = 'Nic' \n 12 \n 13 response = service.hello(request) \n 14 \n 15 puts response.msg \n\n```"]