["```go\nprovider \"aws\" { \n    access_key = \"XXXXXXXXXXX\" \n    secret_key = \"XXXXXXXXXXX\" \n    region = \"us-west-1\" \n} \n\n```", "```go\nprovider \"aws\" { } \n\n```", "```go\nterraform { \n  backend \"s3\" { \n    bucket = \"nicjackson-terraform-state\" \n    key    = \"chapter11-main.tfstate\" \n    region = \"eu-west-1\" \n  } \n} \n\n```", "```go\nmodule \"vpc\" { \n  source = \"./vpc\" \n\n  namespace = \"bog-chapter11\" \n} \n\nmodule \"s3\" { \n  source = \"./s3\" \n\n  application_name = \"chapter11\" \n} \n\nmodule \"nats\" { \n  source = \"./nats\" \n\n  application_name        = \"nats\" \n  application_description = \"Nats.io server\" \n  application_environment = \"dev\" \n\n  deployment_bucket    = \"${module.s3.deployment_bucket}\" \n  deployment_bucket_id = \"${module.s3.deployment_bucket_id}\" \n\n  application_version = \"1.1\" \n  docker_image        = \"nats\" \n  docker_tag          = \"latest\" \n\n  elb_scheme   = \"internal\" \n  health_check = \"/varz\" \n\n  vpc_id  = \"${module.vpc.id}\" \n  subnets = [\"${module.vpc.subnets}\"] \n} \n\n```", "```go\nmodule \"vpc\" { \n  source = \"./vpc\" \n\n  namespace = \"bog-chapter11\" \n} \n\n```", "```go\nvariable \"namespace\" { \n  description = \"The namespace for our module, will be prefixed to all resources.\"  \n} \n\nvariable \"vpc_cidr_block\" { \n  description = \"The top-level CIDR block for the VPC.\" \n  default     = \"10.1.0.0/16\" \n} \n\nvariable \"cidr_blocks\" { \n  description = \"The CIDR blocks to create the workstations in.\" \n  default     = [\"10.1.1.0/24\", \"10.1.2.0/24\"] \n} \n\n```", "```go\nvariable \"[name]\" { \n  [config] \n} \n\n```", "```go\nnamespace = \"chapter10-bog\" \n\n```", "```go\nexport TF_VAR_namespace=chapter10-bog \n\n```", "```go\nterraform plan -var namespace=chapter10-bog \n\n```", "```go\n# Create a VPC to launch our instances into \nresource \"aws_vpc\" \"default\" { \n  cidr_block           = \"${var.vpc_cidr_block}\" \n  enable_dns_hostnames = true \n\n  tags { \n    \"Name\" = \"${var.namespace}\" \n  } \n} \n\n```", "```go\nresource \"[resource_type]\" \"[resource_id]\" { \n    [config] \n} \n\n```", "```go\ncidr_block = \"${var.vpc_cidr_block}\" \n\n```", "```go\n# Create an internet gateway to give our subnet access to the outside world \nresource \"aws_internet_gateway\" \"default\" { \n  vpc_id = \"${aws_vpc.default.id}\" \n\n  tags { \n    \"Name\" = \"${var.namespace}\" \n  } \n} \n\n```", "```go\n [resource].[name].[attribute] \n\n```", "```go\n# Grant the VPC Internet access on its main route table \nresource \"aws_route\" \"internet_access\" { \n  route_table_id         = \"${aws_vpc.default.main_route_table_id}\" \n  destination_cidr_block = \"0.0.0.0/0\" \n  gateway_id             = \"${aws_internet_gateway.default.id}\" \n} \n\n```", "```go\n# Grab the list of availability zones \ndata \"aws_availability_zones\" \"available\" {} \n\n```", "```go\ndata [resource] \"[name]\" \n\n```", "```go\n# Create a subnet to launch our instances into \nresource \"aws_subnet\" \"default\" { \n  count                   = \"${length(var.cidr_blocks)}\" \n  vpc_id                  = \"${aws_vpc.default.id}\" \n  availability_zone       = \"${data.aws_availability_zones.available.names[count.index]}\" \n  cidr_block              = \"${var.cidr_blocks[count.index]}\" \n  map_public_ip_on_launch = true \n\n  tags { \n    \"Name\" = \"${var.namespace}\" \n  } \n} \n\n```", "```go\n# cidr_blocks = [\"10.1.1.0/24\", 10.1.2.0/24\"] \n${length(var.cidr_blocks)} \n\n```", "```go\ncidrBlocks := []string {\"10.1.1.0/24\", \"10.1.2.0/24\"} \nelements := len(cidrBlocks) \n\n```", "```go\nresource \"aws_instance\" \"web\" { \n  count = \"${var.env == \"production\" ? 1 : 0}\" \n} \n\n```", "```go\nCONDITION ? TRUEVAL : FALSEVAL \n\n```", "```go\navailability_zone = \"${data.aws_availability_zones.available.names[count.index]}\" \n\n```", "```go\nresource \"aws_instance\" \"web\" { \n# ... \n    vpc_id = \"${aws_vpc.default.id}\" \n} \n\n```", "```go\npackage a \n\nvar notExported = \"Some Value\" \n\n```", "```go\npackage b \n\nfunc doSomething() { \n    // invalid reference \n    if a.notExported == \"Some Value { \n        //... \n    } \n} \n\n```", "```go\noutput \"id\" { \n  value = \"${aws_vpc.default.id}\" \n} \n\noutput \"subnets\" { \n  value = [\"${aws_subnet.default.*.id}\"] \n} \n\noutput \"subnet_names\" { \n  value = [\"${aws_subnet.default.*.arn}\"] \n} \n\n```", "```go\noutput \"[name]\" { \n    value = \"...\" \n} \n\n```", "```go\nmodule \"nats\" { \n  source = \"./nats\" \n\n  application_name        = \"nats\" \n  application_description = \"Nats.io server\" \n  application_environment = \"dev\" \n\n  deployment_bucket    = \"${module.s3.deployment_bucket}\" \n  deployment_bucket_id = \"${module.s3.deployment_bucket_id}\" \n\n  application_version = \"1.1\" \n  docker_image        = \"nats\" \n  docker_tag          = \"latest\" \n\n  elb_scheme   = \"internal\" \n  health_check = \"/varz\" \n\n  vpc_id  = \"${module.vpc.id}\" \n  subnets = [\"${module.vpc.subnets}\"] \n} \n\n```", "```go\nvpc_id  = \"${module.vpc.id}\" \n\n```", "```go\nmodule.[module name].[output variable] \n\n```", "```go\n$ export AWS_SECRET_ID=[your aws secret id] \n$ export AWS_SECRET_ACCESS_KEY=[your aws access key] \n$ export AWS_DEFAULT_REGION=[aws region to create resource] \n\n```", "```go\n$ terraform init  \n\n```", "```go\n$ terraform plan -out=main.terraform  \n\n```", "```go\n$ terraform apply main.terraform  \n\n```", "```go\ndefaults: &defaults \n  docker: \n    # CircleCI Go images available at: https://hub.docker.com/r/circleci/golang/ \n    - image: circleci/golang:1.8 \n\n  working_directory: /go/src/github.com/building-microservices-with-go/chapter11-services-search \n\n  environment: \n    TEST_RESULTS: /tmp/test-results \n\nversion: 2 \njobs: \n  build: \n    <<: *defaults \n\n    steps: \n      - checkout \n\n      - run:  \n          name: Install dependencies \n          command: | \n            go get github.com/Masterminds/glide \n            glide up \n\n      - run: \n          name: Build application for Linux  \n          command: make build_linux \n\n      - persist_to_workspace: \n          root: /go/src/github.com/building-microservices-with-go/ \n          paths: \n            - chapter11-services-search \n\n# ... \n\nworkflows: \n  version: 2 \n  build_test_and_deploy: \n    jobs: \n      - build \n      - unit_test: \n          requires: \n            - build \n      - benchmark: \n          requires: \n            - build \n      - staticcheck: \n          requires: \n            - build \n      - integration_test: \n          requires: \n            - build \n            - unit_test \n            - benchmark \n            - staticcheck \n      - deploy: \n          requires: \n            - integration_test \n\n```", "```go\nstart_stack: \n    docker-compose up -d \n\ncircleintegration: \n    docker build -t circletemp -f ./IntegrationDockerfile .     \n    docker-compose up -d \n    docker run -network chapter11servicessearch_default -w /go/src/github.com/building-microservices-with-go/chapter11-services-search/features -e \"MYSQL_CONNECTION=root:password@tcp(mysql:3306)/kittens\" circletemp godog ./ \n    docker-compose stop \n    docker-compose rm -f \n\nintegration: start_stack \n    cd features && MYSQL_CONNECTION=\"root:password@tcp(${DOCKER_IP}:3306)/kittens\" godog ./ \n    docker-compose stop \n    docker-compose rm -f \n\nunit: \n    go test -v -race $(shell go list ./... | grep -v /vendor/) \n\nstaticcheck: \n    staticcheck $(shell go list ./... | grep -v /vendor/) \n\nsafesql: \n    safesql github.com/building-microservices-with-go/chapter11-services-search \n\nbenchmark: \n    go test -bench=. github.com/building-microservices-with-go/chapter11-services-search/handlers \n\nbuild_linux: \n    CGO_ENABLED=0 GOOS=linux go build -o ./search . \n\nbuild_docker: \n    docker build -t buildingmicroserviceswithgo/search . \n\nrun: start_stack \n    go run main.go \n    docker-compose stop \n\ntest: unit benchmark integration \n\n```", "```go\nunit_test: \n    <<: *defaults \n\n    steps: \n      - attach_workspace: \n          at: /go/src/github.com/building-microservices-with-go \n\n      - run: mkdir -p $TEST_RESULTS \n\n      - run:  \n          name: Install dependencies \n          command:  go get github.com/jstemmer/go-junit-report \n\n      - run:  \n          name: Run unit tests \n          command: | \n            trap \"go-junit-report <${TEST_RESULTS}/go-test.out > ${TEST_RESULTS}/go-test-report.xml\" EXIT \n            make unit | tee ${TEST_RESULTS}/go-test.out \n\n      - store_test_results: \n          path: /tmp/test-results \n\n```", "```go\nfunc DoSomething() (*Object, error) \n\n```", "```go\nobj, _ := DoSomething() \n\n```", "```go\nstaticcheck: \n    <<: *defaults \n\n    steps: \n      - attach_workspace: \n          at: /go/src/github.com/building-microservices-with-go \n\n      - run: \n          name: Install dependencies \n          command: | \n            go get honnef.co/go/tools/cmd/staticcheck \n            go get github.com/stripe/safesql \n\n      - run: \n          name: Static language checks \n          command: make staticcheck \n\n      - run: \n          name: Safe SQL checks \n          command: make safesql \n\n        - run: \n          name: Check for unhandled errors \n          command: make errcheck \n\n```", "```go\ncircleintegration: \n    docker build -t circletemp -f ./IntegrationDockerfile .     \n    docker-compose up -d \n    docker run -network chapter11servicessearch_default -w /go/src/github.com/building-microservices-with-go/chapter11-services-search/features -e \"MYSQL_CONNECTION=root:password@tcp(mysql:3306)/kittens\" circletemp godog ./ \n    docker-compose stop \n    docker-compose rm -f \n\n```", "```go\nFROM golang:1.8 \n\nCOPY . /go/src/github.com/building-microservices-with-go/chapter11-services-search \nRUN go get github.com/DATA-DOG/godog/cmd/godog \n\n```", "```go\nterraform { \n  backend \"s3\" { \n    bucket = \"nicjackson-terraform-state\" \n    key    = \"chapter11-main.tfstate\" \n    region = \"eu-west-1\" \n  } \n} \n\n```", "```go\ndata \"terraform_remote_state\" \"main\" { \n  backend = \"s3\" \n\n  config { \n    bucket = \"nicjackson-terraform-state\" \n    key    = \"chapter11-main.tfstate\" \n    region = \"eu-west-1\" \n  } \n} \n\n```", "```go\n- run: \n          name: Smoke test \n          command: | \n            cd terraform \n            curl $(terraform output search_alb)/health \n\n```", "```go\n# Create a new Datadog timeboard \nresource \"datadog_timeboard\" \"search\" { \n  title       = \"Search service Timeboard (created via Terraform)\" \n  description = \"created using the Datadog provider in Terraform\" \n  read_only   = true \n\n  graph { \n    title = \"Authentication\" \n    viz   = \"timeseries\" \n\n    request { \n      q    = \"sum:chapter11.auth.jwt.badrequest{*}\" \n      type = \"bars\" \n\n      style { \n        palette = \"warm\" \n      } \n    } \n\n    request { \n      q    = \"sum:chapter11.auth.jwt.success{*}\" \n      type = \"bars\" \n    } \n  } \n\n  graph { \n    title = \"Health Check\" \n    viz   = \"timeseries\" \n\n    request { \n      q    = \"sum:chapter11.auth.health.success{*}\" \n      type = \"bars\" \n    } \n  } \n} \n\n```"]