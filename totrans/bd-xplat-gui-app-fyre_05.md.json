["```go\n    package main\n    ```", "```go\n    import \"fyne.io/fyne/app\"\n    ```", "```go\n    func main() {\n        a := app.New()\n        ...\n    }\n    ```", "```go\n        w := a.NewWindow(\"Hello\")\n    ```", "```go\n        w.ShowAndRun()\n    ```", "```go\n    Chapter03/window$ go run main.go\n    ```", "```go\n$ go get fyne.io/fyne/cmd/fyne_demo\n$ ~/go/bin/fyne_demo\n```", "```go\nfunc main() {\n    a := app.New()\n    w := a.NewWindow(\"Hello\")\n    w.SetContent(canvas.NewText(\"This works!\", \n        color.Black))\n    w.ShowAndRun()\n}\n```", "```go\n    func makeSign() fyne.CanvasObject {\n        ...\n    }\n    ```", "```go\n        bg := canvas.NewCircle(color.NRGBA{255, 0, 0, 255})\n    ```", "```go\n        bg.StrokeColor = color.White\n        bg.StrokeWidth = 5\n    ```", "```go\n        bar := canvas.NewRectangle(color.White)\n    ```", "```go\n        c := container.New(bg, bar)\n    ```", "```go\n        bg.Resize(fyne.NewSize(100, 100))\n        bg.Move(fyne.NewPos(10, 10))\n    ```", "```go\n        bar.Resize(fyne.NewSize(80, 20))\n        bar.Move(fyne.NewPos(20, 50))\n    ```", "```go\n        return c\n    ```", "```go\n    w.SetContent(makeSign())\n    w.SetPadded(false)\n    w.Resize(fyne.NewSize(120, 120))\n```", "```go\nChapter03/canvas$ FYNE_THEME=dark go run main.go\n```", "```go\nw.SetContent(canvas.NewText(\"Text\", color.Black))\n```", "```go\nw.SetContent(widget.NewIcon(theme.ContentCopyIcon()))\n```", "```go\nimg := canvas.NewImageFromURI(storage.NewFileURI(path))\n```", "```go\nImage.ScaleMode = canvas.ImageScalePixels\n```", "```go\n    func generate(x, y, w, h int) color.Color {\n        ...\n    }\n    ```", "```go\n        if (x/20)%2 == (y/20)%2 {\n            return color.White\n        }\n    ```", "```go\n        return color.Black\n    ```", "```go\n    w.SetContent(canvas.NewRasterWithPixels(generate))\n    ```", "```go\n    Chapter03/raster$ go run main.go\n    ```", "```go\ncanvas.NewHorizontalGradient(color.White, color.Black)\ncanvas.NewVerticalGradient(color.White, color.Black)\n```", "```go\ncanvas.NewLinearGradient(color.White, color.Black, 270)\n```", "```go\ncanvas.NewRadialGradient(color.White, color.Black)\n```", "```go\nanim := fyne.NewAnimation(time.Duration, func(float32))\n```", "```go\nstart := fyne.NewPos(10, 10)\nend := fyne.NewPos(90, 10)\nanim := canvas.NewPositionAnimation(start, end,\n    time.Second, callback)\n```", "```go\ntext := canvas.NewText(\"Hi\", color.Black)\ncallback := func(p fyne.Position) {\n    text.Move(p)\n    canvas.Refresh(text)\n}\n```", "```go\nanim.Start()\n```", "```go\nanim.RepeatCount = fyne.AnimationRepeatForever\n```", "```go\nanim.Start()\n```", "```go\n    func setupGame() *fyne.Container {\n         var segments []fyne.CanvasObject\n         ...\n         return container.NewWithoutLayout(segments...)\n    }\n    ```", "```go\n        for i := 0; i < 10; i++ {\n             r := canvas.NewRectangle(&color.RGBA{G: 0x66, \n                 A: 0xff})\n             r.Resize(fyne.NewSize(10, 10))\n             r.Move(fyne.NewPos(90, float32(50+i*10)))\n             segments = append(segments, r)\n        }\n    ```", "```go\n    func main() {\n        a := app.New()\n        w := a.NewWindow(\"Snake\")\n        w.SetContent(setupGame())\n        w.Resize(fyne.NewSize(200, 200))\n        w.SetFixedSize(true)\n        w.ShowAndRun()\n    }\n    ```", "```go\n    Chapter03/example$ go run main.go\n    ```", "```go\n    type snakePart struct {\n        x, y float32\n    }\n    var (\n        snakeParts []snakePart\n        game       *fyne.Container\n    )\n    ```", "```go\n            seg := snakePart{9, float32(5 + i)}\n            snakeParts = append(snakeParts, seg)\n    ```", "```go\n    func refreshGame() {\n        for i, seg := range snakeParts {\n            rect := game.Objects[i]\n            rect.Move(fyne.NewPos(seg.x*10, seg.y*10))\n        }\n        game.Refresh()\n    }\n    ```", "```go\n    func runGame() {\n        for {\n            time.Sleep(time.Millisecond * 250)\n            for i := len(snakeParts) - 1; i >= 1; i-- {\n                snakeParts[i] = snakeParts[i-1]\n            }\n            snakeParts[0].y--\n            refreshGame()\n        }\n    }\n    ```", "```go\n        game = setupGame()\n        w.SetContent(game)\n        go runGame()\n        w.ShowAndRun()\n    ```", "```go\n    Chapter03/example$ go run main.go\n    ```", "```go\n    type moveType int\n    const (\n        moveUp moveType = iota\n        moveDown\n        moveLeft\n        moveRight\n    )\n    var move = moveUp\n    ```", "```go\n    func keyTyped(e *fyne.KeyEvent) {\n        switch e.Name {\n        case fyne.KeyUp:\n            move = moveUp\n        case fyne.KeyDown:\n            move = moveDown\n        case fyne.KeyLeft:\n            move = moveLeft\n        case fyne.KeyRight:\n            move = moveRight\n        }\n    }\n    ```", "```go\n    w.Canvas().SetOnTypedKey(keyTyped)\n    ```", "```go\n            switch move {\n            case moveUp:\n                snakeParts[0].y--\n            case moveDown:\n                snakeParts[0].y++\n            case moveLeft:\n                snakeParts[0].x--\n            case moveRight:\n                snakeParts[0].x++\n            }\n            refreshGame()\n    ```", "```go\n    Chapter03/example$ go run main.go\n    ```", "```go\n    var head *canvas.Rectangle\n    ```", "```go\n        head = canvas.NewRectangle(&color.RGBA{G: 0x66, A: \n            0xff})\n        head.Resize(fyne.NewSize(10, 10))\n        head.Move(fyne.NewPos(snakeParts[0].x*10,\n            snakeParts[0].y*10))\n        segments = append(segments, head)\n    ```", "```go\n        nextPart := snakePart{snakeParts[0].x, \n            snakeParts[0].y - 1}\n    ```", "```go\n        oldPos := fyne.NewPos(snakeParts[0].x*10,\n            snakeParts[0].y*10)\n        newPos := fyne.NewPos(nextPart.x*10, next\n            Part.y*10)\n        canvas.NewPositionAnimation(oldPos, newPos,\n            time.Millisecond*250, func(p fyne.Position) {\n            head.Move(p)\n            canvas.Refresh(head)\n        }).Start()\n    ```", "```go\n        end := len(snakeParts) - 1\n        canvas.NewPositionAnimation(\n            fyne.NewPos(snakeParts[end].x*10,\n                snakeParts[end].y*10),\n            fyne.NewPos(snakeParts[end-1].x*10,\n                snakeParts[end-1].y*10),\n            time.Millisecond*250,\n            func(p fyne.Position) {\n                tail := game.Objects[end]\n                tail.Move(p)\n                canvas.Refresh(tail)\n            }).Start()\n    ```", "```go\n        snakeParts[0] = nextPart\n        refreshGame()\n    ```", "```go\n        switch move {\n        case moveUp:\n            nextPart = snakePart{nextPart.x, \n                nextPart.y - 1}\n        case moveDown:\n            nextPart = snakePart{nextPart.x, \n                nextPart.y + 1}\n        case moveLeft:\n            nextPart = snakePart{nextPart.x - 1, \n                nextPart.y}\n        case moveRight:\n            nextPart = snakePart{nextPart.x + 1, \n                nextPart.y}\n        }\n    ```", "```go\n    Chapter03/example$ go run main.go\n    ```"]