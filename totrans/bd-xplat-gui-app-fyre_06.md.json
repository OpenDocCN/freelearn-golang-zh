["```go\nsquare := canvas.NewRectangle(color.Black)\ncircle := canvas.NewCircle(color.Transparent)\ncircle.StrokeColor = &color.Gray{128}\ncircle.StrokeWidth = 5\nbox := container.NewWithoutLayout()(square, circle)\nsquare.Move(fyne.NewPos(10, 10))\nsquare.Resize(fyne.NewSize(90, 90))\ncircle.Move(fyne.NewPos(70, 70))\ncircle.Resize(fyne.NewSize(120, 120))\nbox.Resize(fyne.NewSize(200, 200))\n```", "```go\ncontainer.New(layout, items)\n```", "```go\nimport \"fyne.io/fyne/layout\"\n```", "```go\nmyContainer := container.New(layout.NewMaxLayout(), …)\n```", "```go\nmyContainer := container.New(layout.NewCenterLayout(), …)\n```", "```go\nmyContainer := container.New(layout.NewPaddedLayout(), …) \n```", "```go\nmyContainer := container.New(layout.NewHBoxLayout(), …)\nmyContainer := container.New(layout.NewVBoxLayout(), …)\n```", "```go\nmyContainer := container.New(layout.NewFormLayout(), …) \n```", "```go\nmyContainer := container.New(layout.NewGridLayoutWithColumns(2), …)\nmyContainer := container.New(layout.NewGridLayoutWithRows(2), …)\n```", "```go\nmyContainer := container.New(layout.NewAdaptiveGridLayout(3), …)\n```", "```go\nmyContainer := container.New(layout.NewGridWrapLayout(fyne.      \t    NewSize(120, 120), …)\n```", "```go\nmyContainer := container.New(layout.NewBorderLayout(header,      \t    nil, files, nil), header, files, content)\n```", "```go\ntop := container.New(layout.NewHBoxLayout(), ...)\nleft := container.New(layout.NewVBoxLayout(), ...)\ncontent := container.New(layout.NewGridWrapLayout(fyne.     \t    NewSize(40, 40)), ...)\ncombined := container.New(layout.NewBorderLayout(top, nil,     \t    left, nil), top, left, content)\n```", "```go\n// Layout defines how CanvasObjects may be laid out in a      // specified Size.\ntype Layout interface {\n    // Layout will manipulate the listed CanvasObjects Size     \t    // and Position to fit within the specified size.\n    Layout([]CanvasObject, Size)\n    // MinSize calculates the smallest size that will fit the   \t    // listed\n    // CanvasObjects using this Layout algorithm.\n    MinSize(objects []CanvasObject) Size\n}\n```", "```go\n    type diagonal struct{}\n    func (d *diagonal) MinSize(items []fyne.CanvasObject) fyne.Size {\n        total := fyne.NewSize(0, 0)\n        for _, obj := range items {\n            if !obj.Visible() {\n                continue\n            }\n\n            total = total.Add(obj.MinSize())\n        }\n        return total\n    }\n    ```", "```go\n    func (d *diagonal) Layout(items []fyne.CanvasObject, size fyne.Size) {\n         topLeft := fyne.NewPos(0, 0)\n         for _, obj := range items {\n             if !obj.Visible() {\n                 continue\n             }\n             size := obj.MinSize()\n             obj.Move(topLeft)\n             obj.Resize(size)\n             topLeft = topLeft.Add(fyne.NewPos(size.Width,\n                 size.Height))\n         }\n    }\n    ```", "```go\n    item1 := canvas.NewRectangle(color.Black)\n    item1.SetMinSize(fyne.NewSize(35, 35))\n    item2 := canvas.NewRectangle(&color.Gray{128})\n    item2.SetMinSize(fyne.NewSize(35, 35))\n    item3 := canvas.NewRectangle(color.Black)\n    item3.SetMinSize(fyne.NewSize(35, 35))\n    myContainer := container.New(&diagonal{}, item1, item2,      \t    item3)\n    ```", "```go\nfunc (d *diagonal) Layout(items []fyne.CanvasObject, size fyne.Size) {\n    topLeft := fyne.NewPos(0, 0)\n    visibleCount := 0\n    for _, obj := range items {\n        if !obj.Visible() {\n            continue\n        }\n        visibleCount++\n     }\n     min := d.MinSize(items)\n     extraX := (size.Width - min.Width)/visibleCount\n     extraY := (size.Height - min.Height)/visibleCount\n     for _, obj := range items {\n         if !obj.Visible() {\n             continue\n         }\n         size := obj.MinSize()\n         size = size.Add(fyne.NewSize(extraX, extraY))\n         obj.Move(topLeft)\n         obj.Resize(size)\n         topLeft = topLeft.Add(fyne.NewPos(size.Width, \n            size.Height))\n     }\n}\n```", "```go\nitem1 := canvas.NewRectangle(color.Black)\nitem2 := canvas.NewRectangle(&color.Gray{128})\nitem3 := canvas.NewRectangle(color.Black)\nmyContainer := canvas.New(&diagonal{}, item1, item2, item3)\nmyContainer.Resize(fyne.NewSize(120, 120))\n```", "```go\nuriString := \"file:///home/user/file.txt\"\nmyUri := storage.NewURI(uriString)\n```", "```go\n// OpenFileFromURI loads a file read stream from a resource \t// identifier.\nfunc OpenFileFromURI(uri fyne.URI) (fyne.URIReadCloser, error) {\n     return fyne.CurrentApp().Driver().FileReaderForURI(uri)\n}\n// SaveFileToURI loads a file write stream to a resource      // identifier.\nfunc SaveFileToURI(uri fyne.URI) (fyne.URIWriteCloser, error) {\n     return fyne.CurrentApp().Driver().FileWriterForURI(uri)\n}\n```", "```go\n    uri := storage.NewURI(\"file:///home/user/file.txt\")\n    read, err := storage.OpenFileFromURI(uri)\n    if err != nil {\n        log.Println(\"Unable to open file \\\"\"+uri.               \t            String()+\"\\\"\", err)\n        return\n    }\n    defer read.Close()\n    data, err := ioutil.ReadAll(read)\n    if err != nil {\n        log.Println(\"Unable to read text\", err)\n        return\n    }\n    log.Println(\"Loaded data:\", string(data))\n```", "```go\ndialog.ShowFileOpen(func(reader fyne.URIReadCloser, err error) {\n    if err != nil { // there was an error - tell user\n        dialog.ShowError(err, win)\n        return\n    }\n    if reader == nil { // user cancelled\n        return\n    }\n    // we have a URIReadCloser - handle reading the file\n    // (remember to call Close())\n    fileOpened(reader)\n}, win)\n```", "```go\ndialog.ShowFolderOpen(func(dir fyne.ListableURI, err error) {\n    if err != nil { // there was an error - tell user\n        dialog.ShowError(err, win)\n        return\n    }\n    if dir == nil { // user cancelled\n        return\n    }\n    log.Println(\"Listing dir\", dir.Name())\n    for _, item := range dir.List() {\n        log.Println(\"Item name\", item.Name())\n    }\n}, win)\n```", "```go\n    func makeImageItem() fyne.CanvasObject {\n         label := canvas.NewText(\"label\", color.Gray{128})\n         label.Alignment = fyne.TextAlignCenter\n         img := canvas.NewRectangle(color.Black)\n         return container.NewBorder(nil, label, nil, nil,\n             img)\n    }\n    ```", "```go\n    func makeImageGrid() fyne.CanvasObject {\n         items := []fyne.CanvasObject{}\n         for range []int{1, 2, 3} {\n             img := makeImageItem()\n             items = append(items, img)\n         }\n         cellSize := fyne.NewSize(160, 120)\n         return container.NewGridWrap(cellSize, items...)\n    }\n    ```", "```go\n    func makeStatus() fyne.CanvasObject {\n         return canvas.NewText(\"status\", color.Gray{128})\n    }\n    ```", "```go\n    func makeUI() fyne.CanvasObject {\n         \tstatus := makeStatus()\n         content := makeImageGrid()\n         return container.NewBorder(nil, status, nil, nil,\n             content)\n    }\n    ```", "```go\n    func main() {\n         a := app.New()\n         w := a.NewWindow(\"Image Browser\")\n         w.SetContent(makeUI())\n         w.Resize(fyne.NewSize(480, 360))\n         w.ShowAndRun()\n    }\n    ```", "```go\n    Chapter04/example$ go run main.go\n    ```", "```go\n    func startDirectory() fyne.ListableURI {\n         flag.Parse()\n         if len(flag.Args()) < 1 {\n             cwd, _ := os.Getwd()\n             list, _ := storage.ListerForURI(\n                 storage.NewFileURI(cwd))\n             return list\n         }\n        \tdir, err := filepath.Abs(flag.Arg(0))\n         if errr != nil {\n             log.Println(\"Could not find directory\", dir\n             cwd, _ := os.Getwd\n             list, _ := storage.ListerForURI(\n                 storage.NewFileURI(cwd))\n             return list\n         }\n         list, _ := storage.ListerForURI(storage.NewURI(dir))￼   \n         return list\n    }\n    ```", "```go\n    func isImage(file fyne.URI) bool {\n         ext := strings.ToLower(file.Extension())\n         return ext == \".png\" || ext == \".jpg\" ||\n             ext == \".jpeg\" || ext == \".gif\"\n    }\n    func filterImages(files []fyne.URI) []fyne.URI {\n         images := []fyne.URI{}\n         for _, file := range files {\n             if isImage(file) {\n                 images = append(images, file)\n             }\n         }\n         return images\n    }\n    ```", "```go\n    func makeImageGrid(images []fyne.URI) fyne.CanvasObject {\n         items := []fyne.CanvasObject{}\n         for range images {\n             img := makeImageItem()\n             items = append(items, img)\n         }\n         cellSize := fyne.NewSize(160, 120)\n         return container.NewGridWrap(cellSize, items...)\n    }\n    func makeStatus(dir fyne.ListableURI, images []fyne.URI) fyne.CanvasObject {\n         status := fmt.Sprintf(\"Directory %s, %d items\",\n             dir.Name(), len(images))\n         return canvas.NewText(status, color.Gray{128})\n    }\n    func makeUI(dir fyne.ListableURI) fyne.CanvasObject {\n         list, err := dir.List()\n         if err != nil { \n             log.Println(\"Error listing directory\", err)\n         }\n         images := filterImages(list)\n         status := makeStatus(dir, images)\n         content := makeImageGrid(images)\n         return container.NewBorder(\n             (nil, status, nil, nil, content)\n    }\n    ```", "```go\n    func loadImage(u fyne.URI) fyne.CanvasObject {\n         read, err := storage.OpenFileFromURI(u)\n         if err != nil {\n              log.Println(\"Error opening image\", err)\n              return canvas.NewRectangle(color.Black)\n         }\n         res, err :=\n            storage.LoadResourceFromURI(read.URI())\n         if err != nil {\n            log.Println(\"Error reading image\", err)\n            return canvas.NewRectangle(color.Black)\n         }\n         img := canvas.NewImageFromResource(res)\n         img.FillMode = canvas.ImageFillContain\n         return img\n    }\n    ```", "```go\n    func makeImageItem(u fyne.URI) fyne.CanvasObject {\n    ```", "```go\n    img := loadImage(u)\n    ```", "```go\n    type bgImageLoad struct {\n        uri fyne.URI\n        img *canvas.Image\n    }\n    var loads = make(chan bgImageLoad, 1024)\n    ```", "```go\n    func loadImage(u fyne.URI) fyne.CanvasObject {\n         img := canvas.NewImageFromResource(nil)\n         img.FillMode = canvas.ImageFillContain\n         loads <- bgImageLoad{u, img}\n         return img\n    }\n    ```", "```go\n    func doLoadImage(u fyne.URI, img *canvas.Image) {\n         read, err := storage.OpenFileFromURI(u)\n         if err != nil {\n             log.Println(\"Error opening image\", err)\n             return\n         }\n         defer read.Close()\n         raw, _, err := image.Decode(read)\n         if err != nil {\n             log.Println(\"Error decoding image\", err)\n             return\n         }\n         img.Image = scaleImage(raw)\n         img.Refresh()\n    }\n    func doLoadImages() {\n         for load := range loads {\n             doLoadImage(load.uri, load.img)\n         }\n    }\n    ```", "```go\n    func main() {\n    ...\n         go doLoadImages()\n         w.ShowAndRun()\n    }\n    ```", "```go\n    func scaleImage(img image.Image) image.Image {\n         return resize.Thumbnail(320, 240, img,\n            resize.Lanczos3)\n    }\n    ```", "```go\ntype itemLayout struct {\n     bg, text, gradient fyne.CanvasObject\n}\nfunc (i *itemLayout) MinSize(_ []fyne.CanvasObject) fyne.Size {\n     return fyne.NewSize(160, 120)\n}\nfunc (i *itemLayout) Layout(objs []fyne.CanvasObject, size fyne.Size) {\n     textHeight := float32(22)\n     for _, o := range objs {\n         if o == i.text {\n             o.Move(fyne.NewPos(0, size.Height-textHeight))\n             o.Resize(fyne.NewSize(size.Width, textHeight))\n         } else if o == i.bg {\n             o.Move(fyne.NewPos(0, size.Height-textHeight))\n             o.Resize(fyne.NewSize(size.Width, textHeight))\n         } else if o == i.gradient {\n             o.Move(fyne.NewPos(0, size.Height-                \t                 (textHeight*1.5)))\n             o.Resize(fyne.NewSize(size.Width, textHeight/2))\n         } else {\n             o.Move(fyne.NewPos(0, 0))\n             o.Resize(size)\n         }\n     }\n}\n```", "```go\nfunc makeImageItem(u fyne.URI) fyne.CanvasObject {\n     label := canvas.NewText(u.Name(), color.Gray{128})\n     label.Alignment = fyne.TextAlignCenter\n     bgColor := &color.NRGBA{R: 255, G: 255, B: 255, A: 224}\n     bg := canvas.NewRectangle(bgColor)\n     fade := canvas.NewLinearGradient(color.Transparent,         \t         bgColor, 0)\n     return container.New(\n         &itemLayout{text: label, bg: bg, gradient: fade},\n         loadImage(u), bg, fade, label)\n}\n```", "```go\ncontent := container.NewScroll(makeImageGrid(images))\n```", "```go\nw.SetMainMenu(fyne.NewMainMenu(fyne.NewMenu(\"File\",\n    fyne.NewMenuItem(\"Open Directory...\", func() {\n        chooseDirectory(w)\n    }))))\n```", "```go\nfunc chooseDirectory(w fyne.Window) {\n     dialog.ShowFolderOpen(func(dir fyne.ListableURI, err      \t     error) {\n         if err != nil {\n             dialog.ShowError(err, w)\n             return\n         }\n         w.SetContent(makeUI(dir)) // this re-loads our         \t                                   // application\n     }, w)\n}\n```", "```go\n$ go run -tags no_native_menus main.go Images/Desktop\n```"]