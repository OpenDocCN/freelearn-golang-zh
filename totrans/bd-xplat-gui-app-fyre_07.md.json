["```go\n// Widget defines the standard behaviors of any widget.\n// This extends the CanvasObject - a widget behaves in \n// the same basic way but will encapsulate many child\n// objects to create the rendered widget.\ntype Widget interface {\n        CanvasObject\n        CreateRenderer() WidgetRenderer\n}\n```", "```go\n// SetText allows the button label to be changed\nfunc (b *Button) SetText(text string) {\n    b.Text = text\n    b.Refresh()\n}\n```", "```go\nfunc updateMyButton(b *widget.Button) {\n    b.SetText(\"sometext\")\n    b.SetIcon(someResource)\n}\n```", "```go\nfunc updateMyButton(b *widget.Button) {\n    b.Text = \"sometext\"\n    b.Icon = someResource\n    b.Refresh()\n}\n```", "```go\n// WidgetRenderer defines the behavior of a widget’s\n// implementation. This is returned from a widget’s main\n// object through the CreateRenderer() function.\ntype WidgetRenderer interface {\n    Layout(Size)\n    MinSize() Size\n    Refresh()\n    Objects() []CanvasObject\n    Destroy()\n}\n```", "```go\nacc := widget.NewAccordion(\n    widget.NewAccordionItem(\"A\", widget.NewLabel(\"Hidden\")),\n    widget.NewAccordionItem(\"B\", widget.NewLabel(\"Shown         \t        item\")),\n    widget.NewAccordionItem(\"C\", widget.NewLabel(\"End\")),\n)\nacc.Items[1].Open = true\n```", "```go\nwidget.NewButtonWithIcon(\"Cancel\", theme.CancelIcon(), func() {})\n```", "```go\nwidget.NewCard(\"Card Title\", \"Subtitle\",\n    widget.NewLabel(\"Content\"))\n&widget.Card(Title: \"Card Title\",\n    Subtitle: \"Subtitle\",\n    Image: canvas.NewImageFromResource(theme.FyneIcon()))\n```", "```go\nwidget.NewCheck(\"Check\", func(bool) {})\n```", "```go\ncheck.SetChecked(true)\n```", "```go\nwidget.NewEntry()\nwidget.NewPasswordEntry()\nwidget.NewMultilineEntry()\n```", "```go\nfile := storage.NewFileURI(\"images/myimage.png\")\nwidget.NewFileIcon(file)\n```", "```go\nform := widget.NewForm(\n    widget.NewFormItem(\"Username\", widget.NewEntry()),\n    widget.NewFormItem(\"Password\", widget.NewPasswordEntry()),\n)\nform.OnCancel = func() {\n    fmt.Println(\"Cancelled\")\n}\nform.OnSubmit = func() {\n    fmt.Println(\"Form submitted\")\n}\n```", "```go\nhref, _ := url.Parse(\"https://fyne.io\")\nwidget.NewHyperlink(\"fyne.io\", href)\n```", "```go\nwidget.NewIcon(theme.ContentPasteIcon())\n```", "```go\nwidget.NewLabel(\"Text label\")\n```", "```go\nmenu := fyne.NewMenu(\"\", fyne.NewMenuItem(\"An item\", func() {}))\npos := fyne.NewPosition(20, 20)\nwidget.ShowPopUpMenuAtPosition(menu, myWindow.Canvas(), pos)\n```", "```go\nbar1 := widget.NewProgressBar()\nbar2 := widget.NewProgressBarInfinite()\n```", "```go\nwidget.NewRadioGroup([]string{\"Item 1\", \"Item 2\"}, func(s string) {\n    fmt.Println(\"Selected\", s)\n})\n```", "```go\nwidget.NewSelect([]string{\"Item 1\", \"Item 2\"}, func(s string) {\n    fmt.Println(\"Selected\", s)\n})\n```", "```go\nwidget.NewSelectEntry([]string{\"Item 1\", \"Item 2\"})\n```", "```go\nwidget.NewSlider(0, 100)\n```", "```go\ngrid := widget.NewTextGridFromString(\n    \"TextGrid\\n  Content  \")\ngrid.SetStyleRange(0, 4, 0, 7,\n    &widget.CustomTextGridStyle{BGColor:\n        &color.NRGBA{R: 64, G: 64, B: 192, A: 128}})\ngrid.Rows[1].Style = &widget.CustomTextGridStyle{BGColor:\n        &color.NRGBA{R: 64, G: 192, B: 64, A: 128}}\ngrid.ShowLineNumbers = true\ngrid.ShowWhitespace = true\n```", "```go\nwidget.NewToolbar(\n     widget.NewToolbarAction(theme.MailComposeIcon(),\n         func() {}),\n     widget.NewToolbarSeparator(),\n     widget.NewToolbarSpacer(),\n     widget.NewToolbarAction(theme.ContentCutIcon(),\n         func() {}),\n     widget.NewToolbarAction(theme.ContentCopyIcon(),\n         func() {}),\n     widget.NewToolbarAction(theme.ContentPasteIcon(),\n         func() {}),\n)\n```", "```go\nwidget.NewList(\n    func() int { return 3 },\n    func() fyne.CanvasObject {\n        icon := widget.NewIcon(theme.FileIcon())\n        label := widget.NewLabel(\"List item x\")\n        return container.NewHBox(icon, label)\n    },\n    func(index ListItemID, template fyne.CanvasObject) {\n        cont := template.(*fyne.Container)\n        label := cont.Objects[1].(*widget.Label)\n        label.SetText(fmt.Sprintf(\"List item %v\", index))\n    })\n```", "```go\nwidget.NewTable(\n    func() (int, int) { return 3, 3 },\n    func() fyne.CanvasObject {\n        return widget.NewLabel(\"Cell 0, 0\")\n    },\n    func(id TableCellID, template fyne.CanvasObject) {\n        label := template.(*widget.Label)\n        label.SetText(fmt.Sprintf(\"Cell %d, %d\", id.Row+1,      \t            id.Col+1))\n    })\n```", "```go\n     func(uid TreeNodeID) []string { \n         switch uid {\n         case \"\":\n             return []string{\"cars\", \"trains\"}\n         case \"cars\":\n             return []string{\"ford\", \"tesla\"}\n         case \"trains\":\n             return []string{\"rocket\", \"tgv\"}\n         }\n     return \"\"\n     },\n     func(uid TreeNodeID) bool {\n         return uid == \"\" || uid == \"cars\" || uid == \"trains\"\n     },\n     func(_ bool) fyne.CanvasObject {\n         return widget.NewLabel(\"Template\")\n     },\n     func(uid TreeNodeID, _ bool, template fyne.CanvasObject) {\n         label := template.(*widget.Label)\n         label.SetText(strings.Title(uid))\n     })\n```", "```go\ncontainer.NewAppTabs(\n     container.NewTabItemWithIcon(\"Tab1\", theme.HomeIcon(),      \t         tab1Screen),\n     container.NewTabItemWithIcon(\"Tab2\", theme.MailSendIcon(),  \t         tab2Screen))\n```", "```go\nright := container.NewVSplit(\n    widget.NewLabel(\"Top\"), widget.NewLabel(\"Bottom\"))\ncontainer.NewHSplit(widget.NewLabel(\"Line1/nLine2\"), right)\n```", "```go\ndialog.ShowColorPicker(\"Pick a Color\", \"\",\n    func(value color.Color) {\n       fmt.Println(\"Chose:\", value)\n    },\n    win)\n```", "```go\ndialog.ShowConfirm(\"Please Confirm\", \"Are you sure..?\",\n     func(value bool) {\n         fmt.Println(\"Chose:\", value)\n     }, win)\n```", "```go\ndialog.ShowFileOpen(func(read fyne.URIReadCloser, err error) {\n     fmt.Println(\"User chose:\", read.URI().String(), err) \n}, win) {\n```", "```go\ndialog.ShowForm( \"Form Input\", \"Enter\", \"Cancel\",\n     []*widget.FormItem{\n         widget.NewFormItem(\"Enter a string...\", widget.          \t             NewEntry())},\n     func(bool) {}, win)\n```", "```go\ndialog.ShowInformation(\"Some Information\",\n    \"This is a thing to know\", win)\nerr := errors.New(\"a dummy error message\")\ndialog.ShowError(err, win)\n```", "```go\ncontent := widget.NewTextGrid()\ncontent.SetText(\"Custom content\")\ncontent.SetStyleRange(0, 7, 0, 14,\n    widget.TextGridStyleWhitespace)\ndialog.ShowCustom(\"Custom Dialog\", \"Cancel\", content, win)\n```", "```go\nfyne.CurrentApp().Settings().SetTheme(theme.DarkTheme())\n```", "```go\nfyne.CurrentApp().Settings().SetTheme(theme.LightTheme())\n```", "```go\n    func makeUI() fyne.CanvasObject {\n        todos := widget.NewList(func() int {\n                return 5\n            },\n            func() fyne.CanvasObject {\n                return widget.NewCheck(\"TODO Item x\",          \t                func(bool) {})\n            },\n            func(int, fyne.CanvasObject) {})\n        ...\n    }\n    ```", "```go\n        details := widget.NewForm(\n            widget.NewFormItem(\"Title\", widget.NewEntry()),\n            widget.NewFormItem(\"Description\",\n                widget.NewMultiLineEntry()),\n            widget.NewFormItem(\"Category\",\n                widget.NewSelect([]string{\"Home\"},\n                    func(string) {})),\n            widget.NewFormItem(\"Priority\", \n                widget.NewRadioGroup([]string{\"Low\", \"Mid\",    \t                \"High\"}, \n                    func(string){})),\n            widget.NewFormItem(\"Due\", widget.NewEntry()),\n            widget.NewFormItem(\"Completion\",\n                widget.NewSlider(0, 100)),\n        )\n    ```", "```go\n        toolbar := widget.NewToolbar(\n            widget.NewToolbarAction(theme.ContentAddIcon(),\n                func() {}),\n        )\n    ```", "```go\n    return container.NewBorder(\n        toolbar, nil, todos, nil, details)\n    ```", "```go\n    func main() {\n        a := app.New()\n        w := a.NewWindow(\"TODO List\")\n        w.SetContent(makeUI())\n        w.ShowAndRun()\n    }\n    ```", "```go\n    Chapter05$ go run .\n    ```", "```go\n    type task struct {\n        title, description string\n        done               bool\n        category           string\n        priority           int\n        due                *time.Time\n        completion         float64\n    }\n    ```", "```go\n    type taskList struct {\n        tasks []*task\n    }\n    ```", "```go\n    func (l *taskList) remaining() []*task {\n        var items []*task\n        for _, task := range l.tasks {\n            if !task.done {\n                items = append(items, task)\n            }\n        }\n        return items\n    }\n    func (l *taskList) done() []*task {\n        var items []*task\n        for _, task := range l.tasks {\n            if task.done {\n                items = append(items, task)\n            }\n        }\n        return items\n    }\n    ```", "```go\n    const (\n        lowPriority  = 0\n        midPriority  = 1\n        highPriority = 2\n    ) \n    ```", "```go\n    func TestTaskList_Remaining(t *testing.T) {\n        item := &task{title: \"Remain\"}\n        list := &taskList{tasks: []*task{item}}\n        remain := list.remaining()\n        assert.Equal(t, 1, len(remain))\n        done := list.done()\n        assert.Equal(t, 0, len(done))\n    }\n    func TestTaskList_Done(t *testing.T) {\n        item := &task{title: \"Done\", done: true}\n        list := &taskList{tasks: []*task{item}}\n        remain := list.remaining()\n        assert.Equal(t, 0, len(remain))\n        done := list.done()\n        assert.Equal(t, 1, len(done))\n    }\n    ```", "```go\n    func dummyData() *taskList {\n         return &taskList{\n             tasks: []*task{\n                 {title: \"Nearly done\",\n                     description: `You can tick my checkbox\n    and I will be marked as\n    done and disappear`},\n                 {title: \"Functions\",\n                     description: `Tap the plus icon above to\n    add a new task, or tap the minus\n    icon to remove this one`},\n             }}\n    }\n    ```", "```go\n    type taskApp struct {\n        data    *taskList\n        visible []*task\n        tasks *widget.List\n        // more will be added here\n    }\n    ```", "```go\n        a.tasks = widget.NewList(func() int {\n            return len(a.visible)\n        },\n        func() fyne.CanvasObject {\n            return widget.NewCheck(\"TODO item x\", func(bool) {})\n        },\n        func(i int, c fyne.CanvasObject) {\n            check := c.(*widget.Check)\n            check.Text = a.visible[i].title\n            check.Refresh()\n        })\n    ```", "```go\n        data := dummyData()\n        tasks:= taskApp{data: data, visible: data.             \t        remaining()}\n        w.SetContent(tasks.makeUI())\n    ```", "```go\n    type taskApp struct {\n        data    *taskList\n        visible []*task\n        current *task\n        tasks                   *widget.List\n        title, description, due *widget.Entry\n        category                *widget.Select\n        priority                *widget.Radio\n        completion              *widget.Slider\n    }\n    ```", "```go\n        a.title = widget.NewEntry()\n        a.description = widget.NewMultiLineEntry()\n        a.category = widget.NewSelect([]string{\"Home\"},\n            func(string) {})\n        a.priority = widget.NewRadio(\n            []string{\"Low\", \"Mid\", \"High\"}, func(string) {})\n        a.due = widget.NewEntry()\n        a.completion = widget.NewSlider(0, 100)\n        details := widget.NewForm(\n            widget.NewFormItem(\"Title\", a.title),\n            widget.NewFormItem(\"Description\", a.description),\n            widget.NewFormItem(\"Category\", a.category),\n            widget.NewFormItem(\"Priority\", a.priority),\n            widget.NewFormItem(\"Due\", a.due),\n            widget.NewFormItem(\"Completion\", a.completion),\n        )\n    ```", "```go\n    func (a *taskApp) setTask(t *task) {\n        a.current = t\n        a.title.SetText(t.title)\n        a.description.SetText(t.description)\n        a.category.SetSelected(t.category)\n        if t.priority == midPriority {\n            a.priority.SetSelected(\"Mid\")\n        } else if t.priority == highPriority {\n            a.priority.SetSelected(\"High\")\n        } else {\n            a.priority.SetSelected(\"Low\")\n        }\n        a.due.SetText(formatDate(t.due))\n        a.completion.Value = t.completion\n        a.completion.Refresh()\n    }\n    ```", "```go\n    const dateFormat = \"02 Jan 06 15:04\"\n    func formatDate(date *time.Time) string {\n        if date == nil {\n            return \"\"\n        }\n        return date.Format(dateFormat)\n    }\n    ```", "```go\n        w.SetContent(ui.makeUI())\n        if len(data.remaining()) > 0 {\n            ui.setTask(data.remaining()[0])\n        }\n    ```", "```go\n        a.tasks.OnSelected = func(id int) {\n            a.setTask(a.visible[id])\n        }\n    ```", "```go\n        a.title.OnChanged = func(text string) {\n            if a.current == nil {\n                return\n            }\n            a.current.title = text\n            a.tasks.Refresh() // refresh list of titles\n        }\n    ```", "```go\n        a.priority = widget.NewRadio([]string{\"Low\", \"Mid\", \"High\"}, func(pri string) {\n            if a.current == nil {\n                return\n            }\n            if pri == \"Mid\" {\n                a.current.priority = midPriority\n            } else if pri == \"High\" {\n                a.current.priority = highPriority\n            } else {\n                a.current.priority = lowPriority\n            }\n        })\n    ```", "```go\n    func dateValidator(text string) error {\n        _, err := time.Parse(dateFormat, text)\n        return err\n    }\n    ```", "```go\n        a.due.Validator = dateValidator\n        a.due.OnChanged = func(str string) {\n            if a.current == nil {\n                return\n            }\n            if str == \"\" {\n                a.current.due = nil\n            } else {\n                date, err := time.Parse(dateFormat, str)\n                if err != nil {\n                    a.current.due = &date\n                }\n            }\n        }\n    ```", "```go\n                check.OnChanged = func(done bool) {\n                    a.visible[i].done = done\n                    a.refreshData()\n                }\n    ```", "```go\n    func (a *taskApp) refreshData() {\n        // hide done\n        a.visible = a.data.remaining()\n        a.tasks.Refresh()\n    }\n    ```", "```go\n        a.tasks = widget.NewList(\n            func() int {\n                return len(a.visible)\n            },\n            func() fyne.CanvasObject {\n                return container.NewHBox(widget.NewCheck(\"\",\n                    func(bool) {}),\n                    widget.NewLabel(\"TODO Item x\"))\n            },\n            func(i int, c fyne.CanvasObject) {\n                task := a.visible[i]\n                box := c.(*fyne.Container)\n                check := box.Objects[0].(*widget.Check)\n                check.Checked = task.done\n                check.OnChanged = func(done bool) {\n                    task.done = done\n                    a.refreshData()\n                }\n                label := box.Objects[1].(*widget.Label)\n                label.SetText(task.title)\n            })\n    ```", "```go\n    func (l *taskList) add(t *task) {\n        l.tasks = append([]*task{t}, l.tasks...)\n    }\n    ```", "```go\n    func TestTaskList_Add(t *testing.T) {\n        list := &taskList{}\n        list.add(&task{title: \"First\"})\n        assert.Equal(t, 1, len(list.tasks))\n        list.add(&task{title: \"Next\"})\n        assert.Equal(t, 2, len(list.tasks))\n        assert.Equal(t, \"Next\", list.tasks[0].title)\n    }\n    ```", "```go\n    widget.NewToolbarAction(theme.ContentAddIcon(),\n         func() {\n             task := &task{title: \"New task\"}\n             a.data.add(task)\n             a.refreshData()\n         }),\n    ```"]