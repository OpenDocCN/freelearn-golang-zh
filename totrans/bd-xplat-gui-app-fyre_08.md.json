["```go\nf := 0.5\ndata := binding.BindFloat(&f)\n```", "```go\ntype DataItem interface {\n    AddListener(DataListener)\n    RemoveListener(DataListener)\n}\n```", "```go\ntype DataListener interface {\n    DataChanged()\n}\n```", "```go\nfunc NewDataListener(fn func()) DataListener\n```", "```go\nfunc main() {\n     val := binding.NewString()\n     callback := binding.NewDataListener(func() {\n         str, _ := val.Get()\n         fmt.Println(\"String changed to:\", str)\n     })\n     val.AddListener(callback)\n}\n```", "```go\nChapter06$ go run listen.go \nString changed to:\n```", "```go\n    func makeUI() fyne.CanvasObject {\n        f := binding.NewFloat()\n        ...\n    }\n    ```", "```go\n        prog := widget.NewProgressBarWithData(f)\n    ```", "```go\n        slide := widget.NewSliderWithData(0, 1, f)\n        slide.Step = 0.01\n    ```", "```go\n        btn := widget.NewButton(\"Set to 0.5\", func() {\n            _ = f.Set(0.5)\n        })\n    ```", "```go\n        return container.NewVBox(prog, slide, btn)\n    ```", "```go\n    func main() {\n        a := app.New()\n        w := a.NewWindow(\"Widget Binding\")\n        w.SetContent(makeUI())\n        w.ShowAndRun()\n    }\n    ```", "```go\n    Chapter06$ go run widget.go\n    ```", "```go\nstrBind := binding.FloatToString(f)\nlabel := widget.NewLabelWithData(strBind)\n```", "```go\nstrBind := binding.FloatToStringWithFormat(f,\n    \"Value is: %0.2f\")\nlabel := widget.NewLabelWithData(strBind)\n```", "```go\nval := \"5\"\nstrBind := binding.BindString(&val)\nintBind := binding.StringToInt(strBind)\n```", "```go\nval := \"5%\" \nstrBind := binding.BindString(&val) \nintBind := binding.StringToIntWithFormat(strBind, \"%d%%\")\n```", "```go\ntype DataList interface {\n    DataItem\n    GetItem(int) DataItem\n    Length() int\n}\n```", "```go\nstrings := binding.NewStringList()\nfmt.Println(\"String list length:\", strings.Length())\nstrings.Append(\"astring\")\nfmt.Println(\"String list length:\", strings.Length())\nval, _ := strings.GetValue(0)\nfmt.Println(\"String at 0:\", val)\n```", "```go\nString list length: 0\nString list length: 1\nString at 0: astring\n```", "```go\nsrc := []string{\"one\"}\nstrings := binding.BindStringList(&src) \nfmt.Println(\"String list length:\", strings.Length()) \nstrings.Append(\"astring\") \nfmt.Println(\"String list length:\", strings.Length()) \nval, _ := strings.GetValue(0)\nfmt.Println(\"String at 0:\", val)\n```", "```go\nString list length: 1\nString list length: 2\nString at 0: one\n```", "```go\nl := widget.NewListWithData(strings,\n     func() fyne.CanvasObject {\n         return widget.NewLabel(\"placeholder\")\n     },\n     func(item binding.DataItem, obj fyne.CanvasObject) {\n         text := obj.(*widget.Label)\n         text.Bind(item.(binding.String))\n     })\n```", "```go\ntype DataMap interface {\n     DataItem\n     GetItem(string) (DataItem, error)\n     Keys() []string\n}\n```", "```go\nvalues := binding.NewUntypedMap()\nfmt.Println(\"Map size:\", len(values.Keys())) \n\"_ = values.SetValue(\"akey\", 5)\nfmt.Println(\"Map size:\", len(values.Keys())) \nval, _ := values.GetValue(\"akey\")\nfmt.Println(\"Value at akey:\", val)\n```", "```go\nMap size: 0\nMap size: 1 \nValue at akey: 5\n```", "```go\nsrc := map[string]interface{}{\"akey\": \"before\"}\nvalues := binding.BindUntypedMap(&src)\nfmt.Println(\"Map size:\", len(values.Keys()))\n_ = values.SetValue(\"newkey\", 5)\nfmt.Println(\"Map size:\", len(values.Keys()))\nval, _ := values.GetValue(\"akey\")\nfmt.Println(\"Value at akey:\", val) \n```", "```go\nMap size: 1\nMap size: 2\nValue at akey: before\n```", "```go\ntype person struct {\n     Name string\n     Age int\n}\nsrc := person{Name: \"John Doe\", Age: 21}\nvalues := binding.BindStruct(&src)\nfmt.Println(\"Map size:\", len(values.Keys()))\nname, _ := values.GetValue(\"Name\")\nfmt.Println(\"Value for Name:\", name)\nage, _ := values.GetValue(\"Age\")\nfmt.Println(\"Value for Age:\", age)\n```", "```go\nMap size: 2 \nValue for name: John Doe \nValue for age: 21\n```", "```go\nfunc main() {\n    a := app.NewWithID(\"com.example.preferences\")\n    key := \"demokey\"\n    a.Preferences().SetString(key, \"somevalue\")\n    val := a.Preferences().String(key)\n    fmt.Println(\"Value is:\", val)\n}\n```", "```go\nValue is: somevalue\n```", "```go\n    key := \"anotherkey\"\n    val := a.Preferences().String(key)\n    fmt.Println(\"Value is:\", val)\n    val = a.Preferences().StringWithFallback(key, \"missing\")\n    fmt.Println(\"Value is:\", val)\n```", "```go\nValue is: \nValue is: missing\n```", "```go\n    fmt.Println(\"Removing\")\n    a.Preferences().RemoveValue(key)\n    val = a.Preferences().String(key)\n    fmt.Println(\"Value is:\", val)\n```", "```go\nChapter06$ go run preferences.go\nValue is: \nValue is: missing\nValue is: somevalue\nRemoving\nValue is:\n```", "```go\ndata := binding.BindPreferenceString(\"demokey\",                  \t    a.Preferences())\nval, _ = data.Get()\nfmt.Println(\"Bound value:\", val)\n```", "```go\nChapter06$ go run preferences.go\nBound value: somevalue\n```", "```go\nbinding.IntToString(binding.BindPreferenceInt(\"mykey\", p))\n```", "```go\n    func makeUI() fyne.CanvasObject {\n        label := canvas.NewText(\"0ml\", theme.PrimaryColor())\n        label.TextSize = 42\n        label.Alignment = fyne.TextAlignCenter\n    ```", "```go\n        date := widget.NewLabel(\"Mon 9 Nov 2020\")\n        date.Alignment = fyne.TextAlignCenter\n    ```", "```go\n        amount := widget.NewEntry()\n        amount.SetText(\"250\")\n        input := container.NewBorder(nil, nil,\n            nil, widget.NewLabel(\"ml\"), amount)\n        add := widget.NewButton(\"Add\", func() {})\n    ```", "```go\n    func historyLabel() fyne.CanvasObject {\n        num := widget.NewLabel(\"0ml\")\n        num.Alignment = fyne.TextAlignTrailing\n        return num\n    } \n    ```", "```go\n        history := container.NewGridWithColumns(2,\n            widget.NewLabel(\"Monday\"), historyLabel(),\n            widget.NewLabel(\"Tuesday\"), historyLabel(),\n            widget.NewLabel(\"Wednesday\"), historyLabel(),\n            widget.NewLabel(\"Thursday\"), historyLabel(),\n            widget.NewLabel(\"Friday\"), historyLabel(),\n            widget.NewLabel(\"Saturday\"), historyLabel(),\n            widget.NewLabel(\"Sunday\"), historyLabel(),\n        )\n    ```", "```go\n        return container.NewVBox(label, date,\n            container.NewGridWithColumns(2, input, add),\n            widget.NewCard(\"History\", \"Totals this week\",\n                history))\n    }\n    ```", "```go\n    func main() {\n        a := app.New()\n        w := a.NewWindow(\"Water Tracker\")\n        w.SetContent(makeUI())\n        w.ShowAndRun()\n    }\n    ```", "```go\n    Chapter06/example$ go run main.go\n    ```", "```go\n        total := binding.NewInt()\n    ```", "```go\n        func() {\n             inc, err := strconv.Atoi(amount.Text)\n             if err != nil {\n                 log.Println(\"Failed to parse integer:\" +\n                     amount.Text)\n                 return\n             }\n             current, _ = total.Get()\n             _ = total.Set(current + inc)\n        }\n    ```", "```go\n        totalStr := binding.IntToStringWithFormat(total,  \t        \"%dml\")\n    ```", "```go\n        totalStr.AddListener(binding.NewDataListener(\n             func() { \n                 label.Text, _ = totalStr.Get() \n                 label.Refresh() \n             }))\n    ```", "```go\n    Chapter06/example$ go run main.go\n    ```", "```go\n    func dateKey(t time.Time) string {\n        return t.Format(\"2006-01-02\") // YYYY-MM-DD\n    }\n    ```", "```go\n    a := app.NewWithID(\"com.example.watertracker\")\n    pref := a.Preferences()\n    w.SetContent(makeUI(pref)\n    ```", "```go\n    func makeUI(p fyne.Preferences) fyne.CanvasObject {\n    total := binding.BindPreferenceInt(\n        dateKey(time.Now()), p)\n    ```", "```go\n    date := widget.NewLabel(time.Now().Format(\n        \"Mon Jan 2 2006\"))\n    ```", "```go\n    func dateForMonday() time.Time {\n        day := time.Now().Weekday()\n        if day == time.Sunday {\n            return time.Now().Add(-1 * time.Hour * 24 * 6)\n        }\n        daysSinceMonday := time.Duration(day - 1)\n        dayLength := time.Hour * 24\n        return time.Now().Add(-1 * dayLength *\n            daysSinceMonday) // Monday is day 1\n    }\n    ```", "```go\n    func historyLabel(date time.Time, p fyne.Preferences) fyne.CanvasObject {\n        data := binding.BindPreferenceInt(dateKey(date), p)\n        str := binding.IntToStringWithFormat(data, \"%dml\")\n        num := widget.NewLabelWithData(str)\n        num.Alignment = fyne.TextAlignTrailing\n        return num\n    }\n    ```", "```go\n    weekStart := dateForMonday()\n    dayLength := time.Hour * 24\n    history := container.NewGridWithColumns(2,\n        widget.NewLabel(\"Monday\"),\n            historyLabel(weekStart, p),\n        widget.NewLabel(\"Tuesday\"),\n            historyLabel(weekStart.Add(dayLength), p),\n        widget.NewLabel(\"Wednesday\"),\n            historyLabel(weekStart.Add(dayLength*2), p),\n        widget.NewLabel(\"Thursday\"),\n            historyLabel(weekStart.Add(dayLength*3), p),\n        widget.NewLabel(\"Friday\"),\n            historyLabel(weekStart.Add(dayLength*4), p),\n        widget.NewLabel(\"Saturday\"),\n            historyLabel(weekStart.Add(dayLength*5), p),\n        widget.NewLabel(\"Sunday\"),\n            historyLabel(weekStart.Add(dayLength*6), p),\n    )\n    ```", "```go\n    Chapter06/example$ go run main.go\n    ```"]