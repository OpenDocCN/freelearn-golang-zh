["```go\n    type submitEntry struct {\n        widget.Entry\n    }\n    ```", "```go\n    func newSubmitEntry() *submitEntry {\n        e := &submitEntry{}\n        e.ExtendBaseWidget(e)\n        return e\n    }\n    ```", "```go\n    func (s *submitEntry) TypedKey(k *fyne.KeyEvent) {\n        if k.Name == fyne.KeyReturn {\n            log.Println(\"Submit data\", s.Text)\n            s.SetText(\"\")\n            return\n        }\n        s.Entry.TypedKey(k)\n    }\n    ```", "```go\n    func main() {\n        a := app.New()\n        w := a.NewWindow(\"Submit Entry\")\n        w.SetContent(newSubmitEntry())\n        w.ShowAndRun()\n    }\n    ```", "```go\n    Chapter07$ go run submitentry.go\n    ```", "```go\n    type tapIcon struct {\n        widget.Icon\n        tap func()\n    }\n    ```", "```go\n    func newTapIcon(res fyne.Resource, fn func()) *tapIcon {\n         i := &tapIcon{tap: fn}\n         i.Resource = res\n         i.ExtendBaseWidget(i)\n         return i\n    }\n    ```", "```go\n    func (t *tapIcon) Tapped(_ *fyne.PointEvent) {\n         if t.tap == nil {\n             return\n         }\n         t.tap()\n    }\n    ```", "```go\n    func makeUI() fyne.CanvasObject {\n        return container.NewHBox(\n            newTapIcon(theme.HomeIcon(), func() {\n                log.Println(\"Go home\")\n            }),\n            newTapIcon(theme.NavigateBackIcon(), func() {\n                log.Println(\"Go back\")\n            }),\n            newTapIcon(theme.NavigateNextIcon(), func() {\n                log.Println(\"Go forward\")\n            }),\n        )\n    }\n    ```", "```go\n    func main() {\n        a := app.New()\n        w := a.NewWindow(\"Navigate\")\n        w.SetContent(makeUI())\n        w.ShowAndRun()\n    }\n    ```", "```go\n    Chapter07$ go run tapicon.go\n    ```", "```go\n    type CheckState int\n    const (\n        CheckOff CheckState = iota\n        CheckOn\n        CheckIndeterminate\n    )\n    ```", "```go\n    type ThreeStateCheck struct {\n        widget.BaseWidget\n        State CheckState\n    }\n    ```", "```go\n    func NewThreeStateCheck() *ThreeStateCheck {\n        c := &ThreeStateCheck{}\n        c.ExtendBaseWidget(c)\n        return c\n    }\n    ```", "```go\n    func (c *ThreeStateCheck) Tapped(_ *fyne.PointEvent) {\n        if c.State == CheckIndeterminate {\n            c.State = CheckOff\n        } else {\n            c.State++\n        }\n        c.Refresh()\n    }\n    ```", "```go\n    type threeStateRender struct {\n        check *ThreeStateCheck\n        img   *canvas.Image\n    }\n    ```", "```go\n    func (t *threeStateRender) MinSize() fyne.Size {\n        return fyne.NewSize(theme.IconInlineSize(),\n           theme.IconInlineSize())\n    }\n    func (t *threeStateRender) Layout(_ fyne.Size) {\n        t.img.Resize(t.MinSize())\n    }\n    ```", "```go\n    func (t *threeStateRender) Destroy() {\n    }\n    func (t *threeStateRender) Objects() []fyne.CanvasObject {\n        return []fyne.CanvasObject{t.img}\n    }\n    func (t *threeStateRender) Refresh() {\n        t.updateImage()\n    }\n    ```", "```go\n    func (t *threeStateRender) updateImage() {\n        switch t.check.State {\n        case CheckOn:\n             t.img.Resource = theme.CheckButtonCheckedIcon()\n        case CheckIndeterminate:\n             res, _ := fyne.LoadResourceFromPath(\n                 \"indeterminate_check_box-24px.svg\")\n             t.img.Resource = theme.NewThemedResource(res)\n        default:\n             t.img.Resource = theme.CheckButtonIcon()\n        }\n        t.img.Refresh()\n    }\n    ```", "```go\n    func (c *ThreeStateCheck) CreateRenderer()\n        fyne.WidgetRenderer {\n            r := &threeStateRender{check: c, img: \n                &canvas.Image{}}\n            r.updateImage()\n            return r\n    }\n    ```", "```go\n    func main() {\n        a := app.New()\n        w := a.NewWindow(\"Three State\")\n        w.SetContent(NewThreeStateCheck())\n        w.ShowAndRun()\n    }\n    ```", "```go\n    Chapter07$ go run threestate.go \n    ```", "```go\ntype Theme interface {\n     Color(ThemeColorName, ThemeVariant) color.Color\n     Font(TextStyle) Resource\n     Icon(ThemeIconName) Resource\n     Size(ThemeSizeName) float32\n}\n```", "```go\n    type myTheme struct {\n    }\n    ```", "```go\n    func (t *myTheme) Font(fyne.TextStyle) fyne.Resource {\n        return theme.DefaultTextMonospaceFont()\n    }\n    ```", "```go\n    func (t *myTheme) Color(n fyne.ThemeColorName, v fyne.ThemeVariant) color.Color {\n         if n == theme.ColorNameForeground {\n             return &color.NRGBA{0xff, 0xc1, 0x07, 0xff}\n         }\n         return theme.DefaultTheme().Color(n, v)\n    }\n    ```", "```go\n    func (t *myTheme) Size(n fyne.ThemeSizeName) int {\n        return theme.DefaultTheme().Size(n)\n    }\n    ```", "```go\n    func (t *myTheme) Icon(n fyne.ThemeIconName)\n        fyne.Resource {\n        return theme.DefaultTheme().Icon(n)\n    }\n    ```", "```go\n    func makeUI() fyne.CanvasObject {\n        return container.NewVBox(\n            widget.NewLabel(\"Hello there\"),\n            widget.NewEntry(),\n            widget.NewButton(\"Tap me\", func() {}),\n        )\n    }\n    ```", "```go\n    func main() {\n        a := app.New()\n        a.Settings().SetTheme(&myTheme{})\n        w := a.NewWindow(\"Theme\")\n        w.SetContent(makeUI())\n        w.ShowAndRun()\n    }\n    ```", "```go\n    Chapter07$ FYNE_THEME=dark go run theme.go\n    ```", "```go\n    type message struct {\n        widget.BaseWidget\n        text, from string\n    }\n    ```", "```go\n    const (\n        myName        = \"Me\"\n        messageIndent = 20\n    )\n    ```", "```go\n    func newMessage(text, name string) *message {\n        m := &message{text: text, from: name}\n        m.ExtendBaseWidget(m)\n        return m\n    }\n    ```", "```go\n    type messageRender struct {\n        msg *message\n        bg  *canvas.Rectangle\n        txt *widget.Label\n    }\n    ```", "```go\n    func (r *messageRender) messageMinSize(s fyne.Size)\n        fyne.Size {\n        fitSize := s.Subtract(fyne.NewSize(messageIndent,\n            0))\n        r.txt.Resize(fitSize.Max(r.txt.MinSize()))\n        return r.txt.MinSize()\n    }\n    ```", "```go\n    func (r *messageRender) MinSize() fyne.Size {  \n        itemSize := r.messageMinSize(r.msg.Size())  \n        return itemSize.Add(fyne.NewSize(messageIndent, 0)) \n    }\n    ```", "```go\n    func (r *messageRender) Layout(s fyne.Size) {\n        itemSize := r.messageMinSize(s)\n        itemSize = itemSize.Max(fyne.NewSize(\n            s.Width-messageIndent, s.Height))\n        bgPos := fyne.NewPos(0, 0)\n        if r.msg.from == myName {\n            r.txt.Alignment = fyne.TextAlignTrailing\n            r.bg.FillColor = theme.PrimaryColorNamed(\n                theme.ColorBlue)\n            bgPos = fyne.NewPos(s.Width-itemSize.Width, 0)\n        } else {\n            r.txt.Alignment = fyne.TextAlignLeading\n            r.bg.FillColor = theme.PrimaryColorNamed(\n                theme.ColorGreen)\n        }\n        r.txt.Move(bgPos)\n        r.bg.Resize(itemSize)\n        r.bg.Move(bgPos)\n    }\n    ```", "```go\n    func (r *messageRender) BackgroundColor() color.Color {\n        return color.Transparent\n    }\n    func (r *messageRender) Destroy() {\n    }\n    func (r *messageRender) Objects() []fyne.CanvasObject {\n        return []fyne.CanvasObject{r.bg, r.txt}\n    }\n    func (r *messageRender) Refresh() { \n    }\n    ```", "```go\n    func (m *message) CreateRenderer() fyne.WidgetRenderer {\n        text := widget.NewLabel(m.text)\n        text.Wrapping = fyne.TextWrapWord\n        return &messageRender{msg: m,\n            bg: &canvas.Rectangle{}, txt: text}\n    }\n    ```", "```go\n    func loadMessages() *fyne.Container {\n        return container.NewVBox(\n            newMessage(\"Hi there, how are you doing?\",         \t            \"Jim\"),\n            newMessage(\"Yeah good thanks, you?\", myName),\n            newMessage(\"Not bad thanks. Weekend!\", \"Jim\"),\n            newMessage(\"Want to visit the cinema?\", \"Jim\"),\n            newMessage(\"Great idea, what's showing?\",          \t            myName),\n        )\n    }\n    ```", "```go\n    func main() {\n        a := app.New()\n        w := a.NewWindow(\"Messages\")\n        w.SetContent(loadMessages())\n        w.Resize(fyne.NewSize(160, 280))\n        w.ShowAndRun()\n    }\n    ```", "```go\n    Chapter07/example$ go run .\n    ```", "```go\n    func makeUI() fyne.CanvasObject {\n        list := loadMessages()\n        …\n    }\n    ```", "```go\n        msg := widget.NewEntry()\n        send := widget.NewButtonWithIcon(\"\",\n            theme.MailSendIcon(), func() {\n            list.Add(newMessage(msg.Text, myName))\n            msg.SetText(\"\")\n        })\n        input := container.NewBorder(nil, nil, nil, send,\n            msg)\n    ```", "```go\n        return container.NewBorder(nil, input, nil, nil, \n            container.NewVScroll(list))\n    ```", "```go\n        w.SetContent(makeUI())\n    ```", "```go\n    Chapter07/example$ go run .\n    ```", "```go\n    type myTheme struct {\n    }\n    ```", "```go\n    func (m *myTheme) Color(n fyne.ThemeColorName,\n         v fyne.ThemeVariant) color.Color {\n         switch n {\n         case theme.ColorNameBackground:\n             if v == theme.VariantLight {\n                 return &color.NRGBA{0xcf, 0xd8, 0xdc, 0xff}\n             }\n             return &color.NRGBA{0x45, 0x5A, 0x64, 0xff}\n         }\n         return theme.DefaultTheme().Color(n, v)\n    }\n    ```", "```go\n        case theme.ColorNameFocus:\n             return &color.NRGBA{0xff, 0xc1, 0x07, 0xff}\n    ```", "```go\n    func (m *myTheme) Size(n fyne.ThemeSizeName) int {\n         return theme.DefaultTheme().Size(n)\n    }\n    func (m *myTheme) Font(n fyne.TextStyle) fyne.Resource {\n         return theme.DefaultTheme().Font(n)\n    }\n    func (m *myTheme) Icon(n fyne.ThemeIconName) fyne.Resource { \n         return theme.DefaultTheme().Icon(n)\n    }\n    ```", "```go\n        a.Settings().SetTheme(&myTheme{})\n    ```", "```go\n    Chapter07/example$ go run .\n    ```"]