["```go\nproject/\n    main.go\n    ui.go\n    ui_test.go\n```", "```go\nfunc (t *myType) makeUI() fyne.CanvasObject { … }\n```", "```go\nproject/\n    editor.go\n    editor_test.go\n    files.go\n    files_test.go\n    main.go\n    status.go\n    status_test.go\n    ui.go\n    ui_test.go\n```", "```go\nproject/\n    internal/\n        app/\n            editor.go\n            editor_test.go\n            files.go\n            files_test.go\n            status.go\n            status_test.go\n            ui.go\n            ui_test.go\n        pkg/\n            storage/\n                storage.go\n                storage_test.go\n            cache/\n                cache.go\n                cache_test.go\n    main.go\n```", "```go\n$ go get projectURL \n```", "```go\nproject/\n    cmd/\n        mylib_gui/\n            main.go\n        mylib_config/\n            main.go\n    lib.go\n```", "```go\nimport \"projectURL\"\n```", "```go\n$ go get projectURL/cmd/mylib_gui\n```", "```go\n    type greeter struct {\n        greeting       *widget.Label\n        name           *widget.Entry\n        updateGreeting *widget.Button\n    }\n    ```", "```go\n    func (g *greeter) makeUI() fyne.CanvasObject {\n        g.greeting = widget.NewLabel(\"Hello World!\")\n        g.name = widget.NewEntry()\n        g.name.PlaceHolder = \"Enter name\"\n        g.updateGreeting = widget.NewButton(\"Welcome\", \n            g.setGreeting)\n        return container.NewVBox(g.greeting, g.name, g.up\n            dateGreeting)\n    }\n    ```", "```go\n    func (g *greeter) setGreeting() { \n        text := fmt.Sprintf(\"Hello %s!\", g.name.Text) \n        g.greeting.SetText(text) \n    } \n    ```", "```go\n    func main() {\n         a := app.New()\n         w := a.NewWindow(\"Hello!\")\n         g := &greeter{}\n         w.SetContent(g.makeUI())\n         w.ShowAndRun()\n    }\n    ```", "```go\n$ go run ui.go\n```", "```go\n    func TestGreeter_UpdateGreeting(t *testing.T) {\n        ...\n    }\n    ```", "```go\n        g := &greeter{}\n        g.makeUI()\n        assert.Equal(t, \"Hello World!\", g.greeting.Text)\n        assert.Equal(t, \"\", g.name.Text)\n    ```", "```go\n        test.Type(g.name, \"Joe\")\n        test.Tap(g.updateGreeting)\n        assert.Equal(t, \"Hello Joe!\", g.greeting.Text)\n    ```", "```go\n$ go test .\n```", "```go\n    func TestGreeter_Render(t *testing.T) {\n        g := &greeter{}\n        w := test.NewWindow(g.makeUI())\n    }\n    ```", "```go\n        test.AssertImageMatches(t, \"default.png\", \n            w.Canvas().Capture())\n    ```", "```go\n        test.Type(g.name, \"Joe\")\n        test.Tap(g.updateGreeting)\n        test.AssertImageMatches(t, \"typed_joe.png\",\n            w.Canvas().Capture())\n    ```", "```go\npackage main\nimport (\n    \"log\"\n    \"os/exec\"\n)\nfunc say(text string) {\n    cmd := exec.Command(\"say\", text)\n    err := cmd.Run()\n    if err != nil {\n        log.Println(\"Error saying text\", err)\n    }\n}\n```", "```go\n// +build !darwin\npackage main\nimport (\n    \"log\"\n    \"runtime\"\n)\nfunc say(_ string) {\n    log.Println(\"Say support is not available for\", \n        runtime.GOOS)\n}\n```", "```go\npackage main\nfunc main() {\n    say(\"Hello world!\")\n}\n```", "```go\nChapter08/say> go run .\n2020/10/01 16:46:32 Say support is not available for linux\nChapter08/say>\n```"]