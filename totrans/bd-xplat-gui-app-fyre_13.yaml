- en: '*Chapter 10*: Distribution – App Stores and Beyond'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final challenge in cross-platform development is how to deliver your app
    to distribute your completed project. Whether you want to distribute using platform-specific
    app stores, package managers, or through a simple download site, there is a little
    more work to do. This chapter explores the steps required to deliver applications
    to system app stores, mobile marketplaces, and download sites.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Building your application for release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distributing apps to desktop app stores
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading apps to Google Play and iOS App Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you should have the knowledge to distribute your
    apps to any platform.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has the same requirements as [*Chapter 3*](B16820_03_Final_JM_ePub.xhtml#_idTextAnchor066),
    *Window, Canvas, and Drawing*, that is, to have the **Fyne** toolkit installed
    and a **Go** and **C** compiler working. For more information, please refer to
    that chapter.
  prefs: []
  type: TYPE_NORMAL
- en: For deployment to **Android** devices, you will need to install the **Android
    SDK** and **NDK** (see [*Appendix B*](B16820_12_Final_JM_ePub.xhtml#_idTextAnchor256),
    *Installation of Mobile Build Tools*). To build for **iOS** devices, you will
    also need to install **Xcode** on your **Macintosh** computer (an Apple Mac is
    required for licensing reasons).
  prefs: []
  type: TYPE_NORMAL
- en: The full source code for this chapter can be found at [https://github.com/PacktPublishing/Building-Cross-Platform-GUI-Applications-with-Fyne/tree/master/Chapter10](https://github.com/PacktPublishing/Building-Cross-Platform-GUI-Applications-with-Fyne/tree/master/Chapter10).
  prefs: []
  type: TYPE_NORMAL
- en: Building your application for release
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in [*Chapter 9*](B16820_09_Final_JM_ePub.xhtml#_idTextAnchor219),
    *Bundling Resources and Preparing for Release*, the `fyne package` command bundles
    our application binary and metadata into a format that can be installed on `fyne
    release`.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will learn how to use the `release` command to prepare an
    application for sharing.
  prefs: []
  type: TYPE_NORMAL
- en: Running the release command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just like the `fyne` `package` command that we saw in [*Chapter 9*](B16820_09_Final_JM_ePub.xhtml#_idTextAnchor219),
    *Bundling Resources and Preparing for Release*, this new `release` command is
    responsible for packaging up our application with its metadata. The `release`
    command, however, applies changes to the application in preparation for distribution.
    The specific changes will differ depending on the OS, but usually include the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Turning off any debug output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instructing applications to use *production* identities for web services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packaging applications into distribution-specific archives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying the certification required for app stores
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we work through this chapter, we will look at options that are specific to
    each platform, but in this section, we can explore how to adapt applications for
    release builds for any OS.
  prefs: []
  type: TYPE_NORMAL
- en: Let's imagine that we have a function in our app called `connectToServer()`
    that will initiate a web connection to one of our company's services. Throughout
    the development process, it has been connecting to a development server, but for
    our distributed app we want to use the **production** (sometimes called *live*)
    server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps demonstrate how we can use this type of build to adapt
    the code appropriately for release:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To build this demo, we create a new `main.go` file that defines two different
    possible server authentication keys, `serverKeyDevelopment` and `serverKeyProduction`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we add a simple function that opens a dialog window showing the authentication
    key that will be used:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, this function takes the current `fyne.App` as one parameter,
    so that we can query the build type using the `BuildType()` function. The second
    is the current `fyne.Window` parameter, which we use so that we can show the dialog
    for this example. Such a function would normally return a server connection, but
    this is just a simple demo.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Just like previous examples, we also need to create a basic `main` function
    that will run the example. In this case, we open a new window that says simply
    `connectToServer` method that will demonstrate the build type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we simply run the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see that it creates a window, shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 10.1 – Running in development mode'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_10.1_B16820.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 10.1 – Running in development mode
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, let''s build the application for release. As we are packaging the app
    metadata at this point, we will need an icon file. An example, `Icon.png`, is
    included in the book repository, but you can add any you like, placing it alongside
    `main.go`. We can then prepare the release version using the `fyne` tool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running the packaged application by double-clicking the application, you should
    see this different output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.2 – Running in release mode'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.2_B16820.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.2 – Running in release mode
  prefs: []
  type: TYPE_NORMAL
- en: The preceding example is a simple introduction to the `release` command and
    how it can adjust application behavior. As we use it throughout this chapter,
    you will see additional parameters required by various systems for certification
    and other features. We could have added information here about the version and
    build number (using `-appVersion` and `-appBuild`), but for most desktop releases
    this is optional. We will start adding it to the commands later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: With the application now bundled in this section, we could distribute the application
    to *beta testers* or small communities who are happy to manage their own software
    installation by downloading from the web.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing your app on the web
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With an application now set up to use the production values where appropriate,
    we can start a plan for distribution. In many cases, the files created by `fyne
    release` will be in a different format to `fyne package` (because this command
    focuses on app store and marketplace distribution). To apply the release parameters
    to the previous package format, you can use `fyne package –release` instead.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to share your applications without using the platform's official
    distribution, then this can be done by uploading the result of the `release` command
    to a website or file sharing platform. In most cases, this is a simple case of
    copying the file or uploading it to wherever you want to share it. However, with
    some systems (mainly macOS), the application is a bundle, or directory, and this
    may not be downloadable from a website link. In these situations, it is a good
    idea to compress or archive the set of files into a single file that can be downloaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'On your mac (where macOS apps are normally created) you can open the app folder
    in **Finder** and right-click the package, and then select the **Compress <filename>**
    option from the context menu, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.3 – Compressing a macOS app bundle for sharing on the web'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.3_B16820.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.3 – Compressing a macOS app bundle for sharing on the web
  prefs: []
  type: TYPE_NORMAL
- en: The resulting `.zip` file created can be shared more easily from a website,
    and people downloading it can just double-click the file to expand your application,
    which can then be run as normal.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we saw how to package an application for release and how to
    share the resulting file so that others can install our software. However, for
    most applications, it will be more beneficial to distribute through the provided
    store or marketplace. We'll step through this process for the most common OSes
    in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Distributing apps to desktop app stores
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most desktop OSes now have a central location for discovering and installing
    applications. Apple created the **Mac App Store**, Windows has the **Microsoft
    Store**, and each Linux distribution has its preferred package manager. Having
    an application listed in (and hosted by) a platform marketplace significantly
    increases the number of users you can expect and also reduces the associated hosting
    costs. When paired with carefully prepared metadata (as described in [*Chapter
    9*](B16820_09_Final_JM_ePub.xhtml#_idTextAnchor219), *Bundling Resources and Preparing
    for Release*), a marketplace can easily become your largest distribution channel.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we step through the process for the macOS and Windows stores.
    We will return to Linux and BSD distribution later in the chapter as they are
    less mainstream and far more complicated.
  prefs: []
  type: TYPE_NORMAL
- en: Mac App Store
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Mac App Store is the desktop version of Apple's famous iOS App Store. It
    provides many thousands of applications available to buy and download, or gift
    to others. There is also curated content, which includes listings of the most
    popular apps in various categories, as well as staff picks and recommended software.
    Unfortunately, the Mac App Store cannot be browsed online as it requires the App
    Store software, which is pre-installed on compatible Mac computers.
  prefs: []
  type: TYPE_NORMAL
- en: To distribute an app on the App Store, you will need to have the development
    tools installed (see [*Appendix B*](B16820_12_Final_JM_ePub.xhtml#_idTextAnchor256),
    *Installation of Mobile Build Tools*), but you will also need to sign up to the
    **Apple Developer Program**. If you are not already a member, you can sign up
    at [developer.apple.com/programs/enroll/](http://developer.apple.com/programs/enroll/).
    The development resources are free to access, but there is an annual subscription
    charge for access to the code signing tools, which are required to complete the
    release process we are about to explore.
  prefs: []
  type: TYPE_NORMAL
- en: Packaging a macOS release
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To package a release for upload to the Mac App Store is like the release process
    we explored earlier in this chapter, but we must also provide certification details
    that apply **code signing** to our application.
  prefs: []
  type: TYPE_NORMAL
- en: Code signing is a complicated process to set up, so for the purpose of this
    description, it is assumed that you already have a distribution certificate installed.
    For further instructions on downloading your certificate, please see Apple's documentation
    at [developer.apple.com/support/certificates/](http://developer.apple.com/support/certificates/).
    You need to note the name of the certificate (use `build` command later. You will
    also need to note which provisioning profile you are using to build. As with certificates,
    this should already be downloaded and installed on your computer, but you need
    to note the name (you can find more details on the Apple Developer portal at [developer.apple.com/account/resources/certificates/](http://developer.apple.com/account/resources/certificates/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have identified the certificate name and provisioning profile, you
    can use the details in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The resulting app package is ready to be uploaded to the **App Store Connect**
    website for validation.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading to the Mac App Store
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: App Store applications are managed through the App Store Connect website (at
    [appstoreconnect.apple.com/](http://appstoreconnect.apple.com/)). Log in using
    your Apple Developer account and create a new application (if you have not already
    done so). This is where you add the metadata that will be displayed in the store
    – be sure to check the information carefully as some data cannot be changed after
    release.
  prefs: []
  type: TYPE_NORMAL
- en: Well-chosen descriptions and screenshots will help your application to be more
    easily discovered. Within this app definition, you need to start preparing a new
    release, with an appropriate version number and supporting information. You will
    probably notice that you are not yet able to select a build – to enable this,
    we first need to upload the compiled package.
  prefs: []
  type: TYPE_NORMAL
- en: 'Apple has recently created a new app named **Transporter** that is currently
    the easiest way to upload a new build. You can follow these steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Transporter app and log in with your **Apple ID**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once logged in, you will be asked to choose the application to upload – select
    the application package created by the `release` command in the previous section
    and proceed to the upload.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once complete, the build will appear on the App Store Connect website (you may
    need to refresh the page). If you prefer command-line tools for managing the upload
    progress, you can use **xcrun altool**, which provides the same capability. Whichever
    way you upload the package, you need to select the resulting build in the app
    details on the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have chosen this new build, you can click on the **Submit for Review**
    button to start the review process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We'll now move to the next section to learn about the review process.
  prefs: []
  type: TYPE_NORMAL
- en: Mac App Store review process
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As soon as an app is submitted for review, it goes through an automated set
    of code checks. This process verifies that the application does not contain obvious
    errors in metadata or code signing, and performs a code analysis to ensure you
    are not using APIs that are private to Apple or otherwise restricted. Assuming
    that these automated checks pass, then the application will be sent for final
    acceptance by a member of the App Store review team.
  prefs: []
  type: TYPE_NORMAL
- en: 'The review team checks your application for quality, reliability, compliance
    with the **Human Interface Guidelines** (**HIG**: [developer.apple.com/app-store/review/](http://developer.apple.com/app-store/review/)),
    and that it meets other criteria for inclusion on the store. This process typically
    takes a day or two, but can be longer for the first release of a new application.
    Once the process is complete, your software will be available to purchase or download
    on the App Store. In your first week of distribution, it may even be included
    in the **New and Noteworthy** section.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have understood the Mac App Store process, let's look at the Microsoft
    Store process.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Store
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Microsoft Store** is the official location for finding and installing
    software, apps, and games for all the current **Windows**, **Windows Phone**,
    and **Xbox** devices. It provides hosting and search facilities as well as handling
    payments for paid software and supports discounts and vouchers as well. You can
    browse the contents of the Microsoft Store online (at [www.microsoft.com/store/apps](http://www.microsoft.com/store/apps))
    or by using the Store apps on each of the systems it supports.
  prefs: []
  type: TYPE_NORMAL
- en: To submit an application to the Microsoft Store, you will require a Microsoft
    account (which you may already have if you've signed in to Windows, Xbox, or **Office
    365**). You will also have to start an annual subscription to access the relevant
    portions of the partner portal. You can log in and sign up at [partner.microsoft.com/en-US/dashboard/apps/signup](http://partner.microsoft.com/en-US/dashboard/apps/signup).
  prefs: []
  type: TYPE_NORMAL
- en: Packaging a Windows release
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Preparing a release package for the Microsoft Store is very similar to the
    packaging we have done before, but as a release asset, it will require version
    numbers applied. As with the macOS App Store, we will need to sign the software.
    If you have not already done so, be sure to download your certificate, noting
    its name. Windows apps use a combined version number, such as `1.2.3.4`, but the
    `fyne` tool splits this into two parts. To package the app for a specific version,
    pass the last number as `-appBuild` and the rest of the version as `-appVersion`,
    shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The output of this command will be a `.appx` file. This file is the package
    type required for uploading to the store and should not be shared in other ways.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading to Microsoft Store
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The completed package should be uploaded to the partner portal within the **Packages**
    page. When preparing for upload, make sure that all of your application metadata
    has been added to the correct locations so that people will find your software
    easily. Once the package is uploaded, it will be checked for various errors that
    could stop it from being released. Should you encounter any warnings, you will
    need to remove the uploaded build from the portal, fix the issue, and upload a
    new package for retesting.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Store review process
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once your package is uploaded and has passed the initial validation, it will
    be added to a queue to be reviewed. The Microsoft staff will review your application
    for correctness and suitability, and validate that it is of suitably high quality
    for inclusion in the store. Assuming that these checks all pass, they will publish
    it for distribution across the devices that you specified during the submission
    process.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn about Linux and BSD distributions.
  prefs: []
  type: TYPE_NORMAL
- en: Linux and BSD distributions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Linux and BSD distributions have a reputation for handling package distribution
    well; a desktop system will likely have a graphical package management application
    that provides easily searchable indexes containing thousands of packages. Despite
    there being hundreds of different Linux and BSD distributions, they are all based
    on similar binary files and file structures.
  prefs: []
  type: TYPE_NORMAL
- en: Packaging for Linux/Unix
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The basis of packaging Fyne apps for Linux and BSD systems is the `.tar.gz`
    file created in the *Building for release* section at the beginning of this chapter.
    The contents of that file will be adapted during packaging for a target distribution.
    By adding platform-specific metadata and running the file's package command, you
    can create packages for your preferred distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Review process for Linux packages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once packages have been created for a system, the application developer can
    submit it to the package list. For each system, the method of requesting addition
    is different, but can normally be found in the project documentation. However,
    as Linux and BSD are open source systems, you may find that an existing package
    maintainer may be happy to do that for you.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we saw how Linux and BSD packaging can be accomplished using
    the available tools. This, combined with the *Mac App Store* and *Microsoft Store*
    sections, cover how to distribute your apps on most of the major desktop OSes.
    Next, we will see how to adapt this approach for uploading mobile applications
    to the appropriate distribution channels.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading apps to Google Play and the iOS App Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing releases for mobile platforms can be slightly more complicated as the
    apps cannot be directly tested on the devices that we use to build them. However,
    the Fyne release process is designed to encompass all platforms, so in this section,
    we will see how the same tools can be used for releasing to mobile device stores.
  prefs: []
  type: TYPE_NORMAL
- en: iOS App Store
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Packaging applications for iOS is very similar to the macOS distribution process
    described earlier in this chapter. You will need to have **Xcode** installed and
    a distribution certificate and provisioning profile prepared and downloaded from
    the Apple Developer portal, at [developer.apple.com/account/resources/certificates/](http://developer.apple.com/account/resources/certificates/).
  prefs: []
  type: TYPE_NORMAL
- en: Packaging an iOS release
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For an iOS `release` package command, we run the following command on our Mac
    system, remembering to add the `-os ios` parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The file resulting from the preceding command will be a `.ipa` file, which is
    the format required for uploading an iOS app to the App Store. Once you have this
    file, it can be uploaded using the same process described in the *Mac App Store*
    section earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: iOS App Store reviewing process
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The review process for iOS apps is very similar to the Mac App Store. Submission
    of a build will start an automated check process that usually takes just minutes.
    After this, a manual review will be performed that can last for days, but even
    for reviews of complex apps in busy periods, the review will normally be completed
    within a week.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at the Google Play Store process.
  prefs: []
  type: TYPE_NORMAL
- en: Google Play Store
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Packaging an Android app for the Google Play Store requires that we apply versioning
    information and our certification to the package file. Once again, the `fyne release`
    command will handle this, but we need to gather the relevant information. Version
    information can be passed the same as for previous builds, but the certification
    is different for Android.
  prefs: []
  type: TYPE_NORMAL
- en: Packaging an Android release
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Certification information for Android apps is stored in a `.keystore` file.
    If you have distributed an Android app before, you will probably already have
    one. If this is your first time, you will need to set up your developer credentials,
    including a private key and certificate. More information is available in the
    official documentation at [developer.android.com/studio/publish/app-signing](http://developer.android.com/studio/publish/app-signing).
    Be sure to keep your **keystore** safe as it will be required to release future
    versions of your app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have located the keystore that contains this information, you are
    ready to start the release process. Using the same version information as other
    builds, we will run the `fyne release` command with an additional `-keyStore`
    parameter that is followed by the path to the file. The full command will look
    something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Be sure to have the password and optional key alias at hand as the command will
    ask for additional information to complete the signing process. The result of
    this will be a `.apk` file much like from previous development packaging, but
    with signing details ready for upload. You might consider renaming the file to
    mark it as a release so there is no confusion later when you start with the development
    again.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading to Play Console
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To upload your application for inclusion in the Google Play Store, you will
    need to log in to the **Play Console** (there will be a small charge if you have
    not already signed up) at [play.google.com/console/](http://play.google.com/console/).
    Once logged in, you can start the process of creating a new application. Here
    you will upload the metadata, icons, and other marketing materials, as with the
    Apple iOS App Store explored earlier.
  prefs: []
  type: TYPE_NORMAL
- en: In the `release` command so that the file matches the metadata online. Once
    you have filled in the information, locate the `.apk` file (or tap on the **Upload**
    button to choose it). Once the upload has completed, it will go through some automated
    checks to confirm compatibility. If anything is wrong at this stage, you can go
    back to your project to make the changes, re-build the file in release mode, and
    upload a replacement file.
  prefs: []
  type: TYPE_NORMAL
- en: Play store reviewing process
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once your app has been submitted to the Google Play Console, you can track its
    progress through the review process. There are some manual aspects to the checks
    that will be performed, which can lead to wait times of around a day or two. **Google**
    notes that in some cases, additional checks may need to be performed that can
    take up to 7 days or longer. This can often be the case with new user accounts
    or apps when they are first being published. Once approved, your app will be visible
    in the Play Store on all supported Android devices.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter, we looked at how to package and distribute graphical
    applications using the Fyne tool. Unlike the distribution of command-line or system
    utilities, the process of delivering a GUI application requires additional metadata
    and packaging to integrate well with each OS. We saw how the basic release process
    can create an application package ready for distribution beyond our development
    and test team members.
  prefs: []
  type: TYPE_NORMAL
- en: Packaging for different platforms can be complicated, so we walked through the
    steps required to build native-looking graphical packages for macOS, Windows,
    and Linux, as well as mobile packaging for iOS and Android. Each package has its
    own metadata format and package structure, but this was generated automatically
    using the `fyne` `release` tool.
  prefs: []
  type: TYPE_NORMAL
- en: We also saw how to build release packages for distribution on official stores,
    and how these packages can be submitted to the app store or marketplace that will
    be preinstalled on the user's device. The Windows, macOS, iOS and Android stores
    provide an opportunity for applications to earn revenue following release, and
    the Linux software listings will help to increase the visibility of our software
    package.
  prefs: []
  type: TYPE_NORMAL
- en: Having learned the various aspects of developing graphical apps using Fyne,
    we have made it all the way to a complete and published application. Hopefully,
    this guide has been helpful and has enabled you to create the app that you had
    been aiming to build and to get it working across all your devices over a range
    of OSes.
  prefs: []
  type: TYPE_NORMAL
- en: If you would like to distribute your application to the community, please consider
    sharing it on the Fyne app listing by going to [developer.fyne.io/submit](http://developer.fyne.io/submit).
  prefs: []
  type: TYPE_NORMAL
