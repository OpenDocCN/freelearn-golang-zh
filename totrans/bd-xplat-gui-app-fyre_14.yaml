- en: '*Appendix A*: Developer Tool Installation'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In preparation for running the code examples in this book, you will need to
    have both the **Go** compiler and a **C** compiler installed (to support **CGo**).
    If you don't have either of these set up, this appendix will guide you through
    the installation.
  prefs: []
  type: TYPE_NORMAL
- en: Installing on Apple macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many developer tools (including **Git**) are installed as part of the **Xcode**
    package. If you haven't already installed Xcode for other development work, you
    can download it for free from the **Mac App Store** at [apps.apple.com/app/xcode/id497799835](http://apps.apple.com/app/xcode/id497799835).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once installed, you should also set up the command-line tools. To do this,
    go to the Xcode menu | `xcode-select`. If the tools are already installed, this
    will execute normally. If not, you''ll be prompted to run the installation, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1 – The installation dialog window when developer tools are not
    installed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.1_B16820.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.1 – The installation dialog window when developer tools are not installed
  prefs: []
  type: TYPE_NORMAL
- en: In addition to these tools, you'll need to install Go. You can get the download
    package from [golang.org/dl](http://golang.org/dl). From there, tap on the featured
    download link for Apple macOS, and then run the installer package that downloads.
    You may need to close any open **Terminal** windows to update your environment
    variables.
  prefs: []
  type: TYPE_NORMAL
- en: Installing on Microsoft Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Configuring a development environment for Windows can be complicated as there
    aren't many tools installed by default. Due to this, there are many options for
    setting up, including using external tools and packages (such as **MSYS2**, **MinGW**,
    and **Windows Subsystem for Linux**). However, exploring these is outside the
    scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps show you how to get up and running using MSYS2, which provides
    a dedicated command-line application that will be set up for Fyne development.
    Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: You will need to download the installer from [www.msys2.org](http://www.msys2.org).
    You should choose either the 32-bit (`i686`) or 64-bit (`x86_64`) version, depending
    on your computer architecture.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once downloaded, run the installer, which will download the basic packages on
    your computer, including the package manager (`pacman`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the installation is complete, you'll be given the opportunity to launch
    the **MSYS Command Prompt** – **please do not accept this**, as this is not the
    version of the app we want to run.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once completed, open the directory you chose to install the application into
    and run the `mingw64.exe` application instead. This is the command line that comes
    pre-configured with knowledge of Windows compilation. We can now use the package
    manager to install Go and Git, as well as the C compiler toolchain and `pkg-config`
    (which is used by CGo to find packages):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding command will offer to install many packages, which is want we
    want. Just tap the *Return* or *Enter* key to install these dependencies:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.2 – Running the installed Mingw64 terminal to install extra packages'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.2_B16820.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.2 – Running the installed Mingw64 terminal to install extra packages
  prefs: []
  type: TYPE_NORMAL
- en: Note that the preceding terminal prompt denotes **MINGW64**. If you see **MSYS2**
    or another prompt, then you have opened the wrong terminal application.
  prefs: []
  type: TYPE_NORMAL
- en: Once these packages have been installed, you will have a full development environment.
    The default Go home path will be `C:/Users/<username>/go`, though you should consider
    adding `C:/Users/<username>/go/bin` to your `%PATH%` environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: Installing on Linux
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the prerequisite software on Linux should only require installing
    the correct packages for your distribution. The `git` package will provide the
    source control tools, and the Go language should be in the `go` or `golang` package.
    Additionally, the CGo requirement means that the `gcc` package will need to be
    present as well. Installing these packages will provide the necessary commands
    to run the examples in this book. You may need to add `~/go/bin` to your `PATH`
    environment variable to be able to run tools that Go installs later.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are various different package managers for Linux, and each have slightly
    different naming conventions for packages, as well as different commands. The
    following commands are examples of how to install the required packages for each
    of the most popular distributions. Some platforms require additional library headers
    or dependencies to be installed, which are included where required:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Arch Linux**: **sudo pacman -S go gcc xorg-server-devel**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fedora**: **sudo dnf install golang gcc libXcursor-devel libXrandr-devel
    mesa-libGL-devel libXi-devel libXinerama-devel libXxf86vm-devel**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Solus**: **sudo eopkg it -c system.devel golang mesalib-devel libxrandr-devel
    libxcursor-devel libxi-devel libxinerama-devel**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ubuntu / Debian**: **sudo apt-get install golang gcc libgl1-mesa-dev xorg-dev**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Void Linux**: **sudo xbps-install -S go base-devel xorg-server-devel libXrandr-devel
    libXcursor-devel libXinerama-devel**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After using the aforementioned commands, you will have a full Fyne development
    environment ready on your computer.
  prefs: []
  type: TYPE_NORMAL
