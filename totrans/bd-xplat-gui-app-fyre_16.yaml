- en: '*Appendix C*: Cross-Compiling'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When building applications that need access to native APIs and graphics hardware,
    we can use **CGo**. Although not much harder to build for regular development,
    this does make cross compiling much more complicated. For every target platform
    you want to build for, there must be a **C compiler** that knows how to create
    native binary files. This appendix outlines the steps required to set up cross
    compilation targets for each combination referenced earlier in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Please note that cross compiling is not required for day-to-day development.
    For most development, you won't require the cross-compiler setup. The Go compiler
    and standard tools discussed in [*Appendix A*](B16820_11_Final_JM_ePub.xhtml#_idTextAnchor253)*:*
    *Developer Tool Installation*, are all that you require to develop for standard
    computers. This appendix is all about installing additional tools for creating
    compiled applications for a different operating system or architecture than your
    current computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover two possible approaches for compiling in this appendix:'
  prefs: []
  type: TYPE_NORMAL
- en: Manually installing the cross-compiler toolchain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `fyne-cross` to handle the compilation automatically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will start with the manual process since it is useful to understand the compiling
    complexity before seeing how the process can be automated.
  prefs: []
  type: TYPE_NORMAL
- en: Manually installing compilers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing compilers and toolchains is complex, but this appendix will attempt
    to guide you through the main steps. This approach is sometimes preferred by developers
    who want to manage every single detail of their computer. It may also be easier
    if your computer has previously been used for **C** development and creating native
    apps for multiple platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing to build for a different target varies, depending on the system you
    want to compile for. We'll start by looking at **macOS**, before exploring **Windows**
    and **Linux** afterward. It is not necessary to follow these steps to build mobile
    apps since we installed these tools in [*Appendix B*](B16820_12_Final_JM_ePub.xhtml#_idTextAnchor256)*:*
    *Installing Mobile Build Tools*.
  prefs: []
  type: TYPE_NORMAL
- en: Cross compiling for macOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When cross compiling for macOS, it's necessary to install the **Software Development
    Kit** (**SDK**) from **Apple**, as well as a suitable compiler. The instructions
    for **Windows** (using **MSYS2**, as described in [*Appendix A*](B16820_11_Final_JM_ePub.xhtml#_idTextAnchor253),
    *Developer Tool Installation*) and Linux are almost identical; the main thing
    we need to do is install the macOS SDK.
  prefs: []
  type: TYPE_NORMAL
- en: One thing you need to be aware of is that Apple have removed support for building
    32-bit binaries. If you wish to support older devices that are not 64-bit, you
    will need to install older Xcode (9.4.1 or lower) and Go (1.13 or lower) versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest way to install the macOS SDK is by using the `osxcross` project.
    The following steps show you how to download and install the SDK and necessary
    tools for building a Fyne app for macOS, without using a Macintosh computer. Here,
    we''re using Linux, but the process is the same for Windows developers using the
    MSYS2 command-line tools:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll be using the `clang` compiler in place of `gcc` since it''s more portable
    by design. For this process to work, you''ll need to install `clang`, `cmake`,
    and `libxml2-dev` using your package manager:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On Linux, use `apt-get install clang cmake libxml2-dev` (or the appropriate
    `pacman` or `dnf` commands, depending on your distribution)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: On Windows, use `pacman -S mingw-w64-x86_64-clang mingw-w64- x86_64-cmake mingw-w64-x86_64-libxml2`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we need to download the macOS SDK, which is bundled with Xcode. If you
    don't already have an Apple developer account, you'll need to sign up and agree
    to their terms and conditions. Using this account, log into the download site
    at [developer.apple.com/download/more/?name=Xcode%2010.2](http://developer.apple.com/download/more/?name=Xcode%2010.2)
    and download `XCode.dmg` (**10.2** is recommended for **osxcross** targeting 64-bit
    distributions, though you can download 9.4 if you want to support 32-bit computers
    as well).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we must install the `git` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once downloaded, move into the new directory. Using the package tool in this
    repository, we must extract the macOS SDK from the downloaded `Xcode.dmg` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, we must build the **osxcross** compiler extension by executing the
    provided build script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once we''ve done this, a new directory named `target/bin/` will appear, which
    you should add to your `PATH` environment variable. The compiler can now be used
    in `CC=o64-clang` environment variable; for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: More details about this process and how to adapt it for other platforms are
    available on the **osxcross** project website at [github.com/tpoechtrager/osxcross](http://github.com/tpoechtrager/osxcross).
  prefs: []
  type: TYPE_NORMAL
- en: Cross compiling for Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Building for Windows from another platform requires that we install the `mingw`
    toolchain (this is similar to what we installed on Windows to support CGo). This
    should be available in your package manager with a name similar to `mingw-w64-clang`
    or `w64- mingw`, but if not, you can install it directly using the instructions
    at [github.com/tpoechtrager/wclang](http://github.com/tpoechtrager/wclang).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Windows tools on macOS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To install packages on macOS, it''s recommended that you use the `brew.sh`.
    Once Homebrew is set up, the compiler package can be installed using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Once installed, the compiler can be used by setting `CC=x86_64-w64-mingw64-gcc`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the next section, we'll learn how to install Windows tools on Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Windows tools on Linux
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Installing on Linux should just require finding the correct package in your
    distribution''s listing. For example, for **Debian** or **Ubuntu**, you would
    execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Once installed, the compiler can be used with CGo by setting `CC=x86_64-w64-mingw64-gcc`,
    as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Lastly, we will look at how to compile for Linux computers using a manual toolchain
    installation.
  prefs: []
  type: TYPE_NORMAL
- en: Cross compiling for Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To cross compile for Linux, we need a `musl-cross` (`musl` has many other advantages,
    all of which you can read more about at [www.etalabs.net/compare_libcs.html](http://www.etalabs.net/compare_libcs.html)).
    On Windows, the `linux-gcc` package is more than suitable. Let's work through
    the steps for each of these.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a Linux compiler on macOS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To install the dependencies so that we can cross compile for Linux, we'll use
    the Homebrew package manager again â€“ see the *Installing Windows tools on macOS*
    section or the `brew.sh` website for installation instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Homebrew, we can install the appropriate packages by opening a `HOMEBREW_BUILD_FROM_SOURCE`
    variable works around an issue with `musl-cross`, depending on potentially old
    versions of libraries):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the installation is complete (this may take some time as it''s building
    a complete compiler toolchain from source), you should be able to build for Linux.
    To do so, you''ll need to set the `CC=x86_64-linux-musl-gcc` environment variable,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The process is similar for Windows, as we'll see in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a Linux compiler on Windows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using MSYS2, just as we did in the *Cross compiling for macOS* section, we
    can install the `gcc` package to provide cross compilation for Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the installation has completed, we can tell our Go compiler to use `gcc`
    by setting the `CC=gcc` Environment variable. Compilation should now succeed if
    you follow the instructions in your current example, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: At this point, you may see additional errors due to missing headers. To fix
    this, you'll need to search for, and install, the required libraries. This typically
    occurs because the compiler does not have built-in knowledge of how Linux desktop
    graphics work.
  prefs: []
  type: TYPE_NORMAL
- en: 'If, for example, your error states that `X11` headers couldn''t be found, then
    you would use `pacman -Ss x11` to search for the right package to install. In
    this instance, the desired package is `mingw-w64-libxcb` (a Windows version of
    the `X11` libraries), which can be installed like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: If you can't find an appropriate package, you could try the Windows subsystem
    for Linux. More information is available at [docs.microsoft.com/en-us/windows/wsl](http://docs.microsoft.com/en-us/windows/wsl)
    (this brings a full Linux distribution to your Windows desktop).
  prefs: []
  type: TYPE_NORMAL
- en: Using fyne-cross
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To make it easier to manage the various development environments and toolchains
    required for cross-compiling a project, we can use the `fyne-cross` command. This
    cross-compiling utility uses **Docker** containers to download and run the development
    tools of different operating systems, right from your favorite desktop computer.
  prefs: []
  type: TYPE_NORMAL
- en: Installing fyne-cross
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you can install `fyne-cross`, you will need a recent version of `docker`
    package readily available. More information about working with Docker is available
    in [*Chapter 9*](B16820_09_Final_JM_ePub.xhtml#_idTextAnchor219), *Bundling Resources
    and Preparing for Release*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once Docker has been installed, you can use the standard Go tools to install
    `fyne-cross`. The following command will be sufficient:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `fyne-cross` binary will be installed in `$GOPATH/bin`. If the commands
    provided in the following sections do not work, check that the binary is in your
    global `$PATH` environment.
  prefs: []
  type: TYPE_NORMAL
- en: Using fyne-cross
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once installed, the `fyne-cross` command can be used to build apps for any
    target operating system and architecture. It has one required parameter: the target
    system. To build a Windows executable from a Linux computer, simply call the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'There are many options available (see `fyne-cross help` for more information).
    The most common two arguments are `-arch`, which allows you to specify a different
    architecture, and `-release`, which invokes the Fyne release pipeline to build
    apps that are ready to upload to marketplaces (you can find out more in [*Chapter
    10*](B16820_10_Final_JM_ePub.xhtml#_idTextAnchor239), *Distribution â€“ App Stores
    and Beyond*. To create an application that will work on smaller Linux computers,
    such as **Raspberry Pi**, we can invoke the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To build an Android app for release, you can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The preceding steps should enable you to build and distribute applications for
    any platform with minimal investment in hardware.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that if you're running `fyne-cross` to build apps for iOS, you must
    run it on a macOS host computer. This is a requirement of Apple's licensing.
  prefs: []
  type: TYPE_NORMAL
