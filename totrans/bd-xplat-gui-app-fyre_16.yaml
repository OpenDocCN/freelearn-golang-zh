- en: '*Appendix C*: Cross-Compiling'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*附录C*: 交叉编译'
- en: When building applications that need access to native APIs and graphics hardware,
    we can use **CGo**. Although not much harder to build for regular development,
    this does make cross compiling much more complicated. For every target platform
    you want to build for, there must be a **C compiler** that knows how to create
    native binary files. This appendix outlines the steps required to set up cross
    compilation targets for each combination referenced earlier in this book.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当构建需要访问本地API和图形硬件的应用程序时，我们可以使用**CGo**。尽管对于常规开发来说并不困难，但这确实使得交叉编译变得更加复杂。对于你想要为每个目标平台构建的，都必须有一个**C编译器**知道如何创建本地二进制文件。本附录概述了设置本附录中先前提到的每个组合所需的交叉编译目标步骤。
- en: Important note
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Please note that cross compiling is not required for day-to-day development.
    For most development, you won't require the cross-compiler setup. The Go compiler
    and standard tools discussed in [*Appendix A*](B16820_11_Final_JM_ePub.xhtml#_idTextAnchor253)*:*
    *Developer Tool Installation*, are all that you require to develop for standard
    computers. This appendix is all about installing additional tools for creating
    compiled applications for a different operating system or architecture than your
    current computer.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，交叉编译对于日常开发不是必需的。对于大多数开发，你不需要交叉编译器的设置。Go编译器和[*附录A*](B16820_11_Final_JM_ePub.xhtml#_idTextAnchor253)*:*
    *开发者工具安装*中讨论的标准工具，就足够你在标准计算机上进行开发了。本附录是关于安装创建针对不同操作系统或架构的编译应用程序的附加工具。
- en: 'We will cover two possible approaches for compiling in this appendix:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，我们将介绍两种可能的编译方法：
- en: Manually installing the cross-compiler toolchain
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动安装交叉编译工具链
- en: Using `fyne-cross` to handle the compilation automatically
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`fyne-cross`自动处理编译
- en: We will start with the manual process since it is useful to understand the compiling
    complexity before seeing how the process can be automated.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从手动过程开始，因为在看到自动化过程之前了解编译的复杂性是有用的。
- en: Manually installing compilers
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动安装编译器
- en: Installing compilers and toolchains is complex, but this appendix will attempt
    to guide you through the main steps. This approach is sometimes preferred by developers
    who want to manage every single detail of their computer. It may also be easier
    if your computer has previously been used for **C** development and creating native
    apps for multiple platforms.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 安装编译器和工具链是复杂的，但本附录将尝试引导你通过主要步骤。这种方法有时被希望管理他们计算机每个细节的开发者所青睐。如果你的计算机之前曾用于**C**开发并创建多个平台的本地应用程序，这也可能更容易。
- en: Preparing to build for a different target varies, depending on the system you
    want to compile for. We'll start by looking at **macOS**, before exploring **Windows**
    and **Linux** afterward. It is not necessary to follow these steps to build mobile
    apps since we installed these tools in [*Appendix B*](B16820_12_Final_JM_ePub.xhtml#_idTextAnchor256)*:*
    *Installing Mobile Build Tools*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 准备为不同的目标编译有所不同，这取决于你想要编译的系统。我们将首先查看**macOS**，然后探索**Windows**和**Linux**。由于我们在[*附录B*](B16820_12_Final_JM_ePub.xhtml#_idTextAnchor256)*:*
    *安装移动构建工具*中安装了这些工具，因此不需要遵循这些步骤来构建移动应用程序。
- en: Cross compiling for macOS
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为macOS进行交叉编译
- en: When cross compiling for macOS, it's necessary to install the **Software Development
    Kit** (**SDK**) from **Apple**, as well as a suitable compiler. The instructions
    for **Windows** (using **MSYS2**, as described in [*Appendix A*](B16820_11_Final_JM_ePub.xhtml#_idTextAnchor253),
    *Developer Tool Installation*) and Linux are almost identical; the main thing
    we need to do is install the macOS SDK.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当为macOS进行交叉编译时，有必要安装来自**苹果**的**软件开发工具包**（**SDK**）以及一个合适的编译器。Windows的说明（使用**MSYS2**，如[*附录A*](B16820_11_Final_JM_ePub.xhtml#_idTextAnchor253)，*开发者工具安装*中所述）和Linux几乎相同；我们主要需要做的是安装macOS
    SDK。
- en: One thing you need to be aware of is that Apple have removed support for building
    32-bit binaries. If you wish to support older devices that are not 64-bit, you
    will need to install older Xcode (9.4.1 or lower) and Go (1.13 or lower) versions.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要注意的一件事是，苹果公司已经移除了对构建32位二进制文件的支持。如果你希望支持不是64位的旧设备，你需要安装较旧的Xcode（9.4.1或更低版本）和Go（1.13或更低版本）。
- en: 'The easiest way to install the macOS SDK is by using the `osxcross` project.
    The following steps show you how to download and install the SDK and necessary
    tools for building a Fyne app for macOS, without using a Macintosh computer. Here,
    we''re using Linux, but the process is the same for Windows developers using the
    MSYS2 command-line tools:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 macOS SDK 最简单的方法是使用 `osxcross` 项目。以下步骤显示了如何下载和安装 SDK 以及构建 macOS Fyne 应用所需的所有必要工具，而无需使用
    Macintosh 计算机。这里我们使用 Linux，但对于使用 MSYS2 命令行工具的 Windows 开发者来说，过程是相同的：
- en: 'We''ll be using the `clang` compiler in place of `gcc` since it''s more portable
    by design. For this process to work, you''ll need to install `clang`, `cmake`,
    and `libxml2-dev` using your package manager:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用 `clang` 编译器代替 `gcc`，因为它的设计更便携。为了使此过程正常工作，您需要使用您的包管理器安装 `clang`、`cmake`
    和 `libxml2-dev`：
- en: On Linux, use `apt-get install clang cmake libxml2-dev` (or the appropriate
    `pacman` or `dnf` commands, depending on your distribution)
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Linux 上，使用 `apt-get install clang cmake libxml2-dev`（或根据您的发行版使用适当的 `pacman`
    或 `dnf` 命令）
- en: On Windows, use `pacman -S mingw-w64-x86_64-clang mingw-w64- x86_64-cmake mingw-w64-x86_64-libxml2`
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 上，使用 `pacman -S mingw-w64-x86_64-clang mingw-w64- x86_64-cmake mingw-w64-x86_64-libxml2`
- en: Next, we need to download the macOS SDK, which is bundled with Xcode. If you
    don't already have an Apple developer account, you'll need to sign up and agree
    to their terms and conditions. Using this account, log into the download site
    at [developer.apple.com/download/more/?name=Xcode%2010.2](http://developer.apple.com/download/more/?name=Xcode%2010.2)
    and download `XCode.dmg` (**10.2** is recommended for **osxcross** targeting 64-bit
    distributions, though you can download 9.4 if you want to support 32-bit computers
    as well).
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要下载 macOS SDK，它包含在 Xcode 中。如果您还没有 Apple 开发者账户，您需要注册并同意他们的条款和条件。使用此账户，登录到
    [developer.apple.com/download/more/?name=Xcode%2010.2](http://developer.apple.com/download/more/?name=Xcode%2010.2)
    下载 `XCode.dmg`（**10.2** 推荐用于针对 64 位分布的 **osxcross**，尽管如果您想支持 32 位计算机，也可以下载 9.4）。
- en: 'Then, we must install the `git` command:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们必须安装 `git` 命令：
- en: '[PRE0]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once downloaded, move into the new directory. Using the package tool in this
    repository, we must extract the macOS SDK from the downloaded `Xcode.dmg` file:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，进入新目录。使用此存储库中的包工具，我们必须从下载的 `Xcode.dmg` 文件中提取 macOS SDK：
- en: '[PRE1]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Lastly, we must build the **osxcross** compiler extension by executing the
    provided build script:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们必须通过执行提供的构建脚本来构建 **osxcross** 编译器扩展：
- en: '[PRE2]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once we''ve done this, a new directory named `target/bin/` will appear, which
    you should add to your `PATH` environment variable. The compiler can now be used
    in `CC=o64-clang` environment variable; for example:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成此操作后，将出现一个名为 `target/bin/` 的新目录，您应该将其添加到您的 `PATH` 环境变量中。现在可以在 `CC=o64-clang`
    环境变量中使用编译器；例如：
- en: '[PRE3]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: More details about this process and how to adapt it for other platforms are
    available on the **osxcross** project website at [github.com/tpoechtrager/osxcross](http://github.com/tpoechtrager/osxcross).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 关于此过程以及如何将其适应其他平台的更多详细信息，可在 **osxcross** 项目网站上找到，网址为 [github.com/tpoechtrager/osxcross](http://github.com/tpoechtrager/osxcross)。
- en: Cross compiling for Windows
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为 Windows 进行交叉编译
- en: Building for Windows from another platform requires that we install the `mingw`
    toolchain (this is similar to what we installed on Windows to support CGo). This
    should be available in your package manager with a name similar to `mingw-w64-clang`
    or `w64- mingw`, but if not, you can install it directly using the instructions
    at [github.com/tpoechtrager/wclang](http://github.com/tpoechtrager/wclang).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 从其他平台为 Windows 构建需要我们安装 `mingw` 工具链（这与我们在 Windows 上安装的类似，以支持 CGo）。这应该在您的包管理器中可用，名称类似于
    `mingw-w64-clang` 或 `w64- mingw`，如果没有，您可以直接使用 [github.com/tpoechtrager/wclang](http://github.com/tpoechtrager/wclang)
    上的说明进行安装。
- en: Installing Windows tools on macOS
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 Windows 工具
- en: 'To install packages on macOS, it''s recommended that you use the `brew.sh`.
    Once Homebrew is set up, the compiler package can be installed using the following
    command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 上安装软件包时，建议您使用 `brew.sh`。一旦 Homebrew 设置完成，可以使用以下命令安装编译器软件包：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once installed, the compiler can be used by setting `CC=x86_64-w64-mingw64-gcc`,
    as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，可以通过设置 `CC=x86_64-w64-mingw64-gcc` 来使用编译器，如下所示：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the next section, we'll learn how to install Windows tools on Linux.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何在 Linux 上安装 Windows 工具。
- en: Installing Windows tools on Linux
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Linux 上安装 Windows 工具
- en: 'Installing on Linux should just require finding the correct package in your
    distribution''s listing. For example, for **Debian** or **Ubuntu**, you would
    execute the following command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上安装只需在发行版的列表中找到正确的包即可。例如，对于 **Debian** 或 **Ubuntu**，你会执行以下命令：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once installed, the compiler can be used with CGo by setting `CC=x86_64-w64-mingw64-gcc`,
    as shown in the following command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，可以通过设置 `CC=x86_64-w64-mingw64-gcc` 来使用 CGo，如下面的命令所示：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Lastly, we will look at how to compile for Linux computers using a manual toolchain
    installation.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将探讨如何使用手动工具链安装来为 Linux 计算机编译。
- en: Cross compiling for Linux
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为 Linux 进行交叉编译
- en: To cross compile for Linux, we need a `musl-cross` (`musl` has many other advantages,
    all of which you can read more about at [www.etalabs.net/compare_libcs.html](http://www.etalabs.net/compare_libcs.html)).
    On Windows, the `linux-gcc` package is more than suitable. Let's work through
    the steps for each of these.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 Linux 进行交叉编译，我们需要 `musl-cross`（`musl` 有许多其他优点，你可以在 [www.etalabs.net/compare_libcs.html](http://www.etalabs.net/compare_libcs.html)
    上了解更多）。在 Windows 上，`linux-gcc` 包是绰绰有余的。让我们逐一完成这些步骤。
- en: Installing a Linux compiler on macOS
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 Linux 编译器
- en: To install the dependencies so that we can cross compile for Linux, we'll use
    the Homebrew package manager again – see the *Installing Windows tools on macOS*
    section or the `brew.sh` website for installation instructions.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装依赖项以便我们可以为 Linux 进行交叉编译，我们将再次使用 Homebrew 软件包管理器 – 请参阅 *在 macOS 上安装 Windows
    工具* 部分，或访问 `brew.sh` 网站以获取安装说明。
- en: 'Using Homebrew, we can install the appropriate packages by opening a `HOMEBREW_BUILD_FROM_SOURCE`
    variable works around an issue with `musl-cross`, depending on potentially old
    versions of libraries):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Homebrew，我们可以通过打开 `HOMEBREW_BUILD_FROM_SOURCE` 变量来解决 `musl-cross` 的问题，这取决于可能过时的库版本）：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once the installation is complete (this may take some time as it''s building
    a complete compiler toolchain from source), you should be able to build for Linux.
    To do so, you''ll need to set the `CC=x86_64-linux-musl-gcc` environment variable,
    as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后（这可能需要一些时间，因为它需要从源代码构建完整的编译器工具链），你应该能够为 Linux 构建程序。为此，你需要设置 `CC=x86_64-linux-musl-gcc`
    环境变量，如下所示：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The process is similar for Windows, as we'll see in the next section.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程对于 Windows 也是类似的，我们将在下一节中看到。
- en: Installing a Linux compiler on Windows
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 Linux 编译器
- en: 'Using MSYS2, just as we did in the *Cross compiling for macOS* section, we
    can install the `gcc` package to provide cross compilation for Linux:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 MSYS2，就像我们在 *为 macOS 交叉编译* 部分中所做的那样，我们可以安装 `gcc` 包以提供 Linux 的交叉编译：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Once the installation has completed, we can tell our Go compiler to use `gcc`
    by setting the `CC=gcc` Environment variable. Compilation should now succeed if
    you follow the instructions in your current example, as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以通过设置 `CC=gcc` 环境变量来告诉我们的 Go 编译器使用 `gcc`。如果你按照当前示例中的说明操作，编译现在应该会成功，如下所示：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: At this point, you may see additional errors due to missing headers. To fix
    this, you'll need to search for, and install, the required libraries. This typically
    occurs because the compiler does not have built-in knowledge of how Linux desktop
    graphics work.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你可能会看到由于缺少头文件而引起的额外错误。为了解决这个问题，你需要搜索并安装所需的库。这通常是因为编译器没有内置的关于 Linux 桌面图形工作方式的了解。
- en: 'If, for example, your error states that `X11` headers couldn''t be found, then
    you would use `pacman -Ss x11` to search for the right package to install. In
    this instance, the desired package is `mingw-w64-libxcb` (a Windows version of
    the `X11` libraries), which can be installed like so:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你的错误信息表明找不到 `X11` 头文件，那么你可以使用 `pacman -Ss x11` 来搜索安装正确包。在这种情况下，所需的包是 `mingw-w64-libxcb`（`X11`
    库的 Windows 版本），可以按照以下方式安装：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If you can't find an appropriate package, you could try the Windows subsystem
    for Linux. More information is available at [docs.microsoft.com/en-us/windows/wsl](http://docs.microsoft.com/en-us/windows/wsl)
    (this brings a full Linux distribution to your Windows desktop).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你找不到合适的包，你可以尝试使用 Windows 子系统 for Linux。更多信息可在 [docs.microsoft.com/en-us/windows/wsl](http://docs.microsoft.com/en-us/windows/wsl)
    找到（这将在你的 Windows 桌面上带来完整的 Linux 发行版）。
- en: Using fyne-cross
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 fyne-cross
- en: To make it easier to manage the various development environments and toolchains
    required for cross-compiling a project, we can use the `fyne-cross` command. This
    cross-compiling utility uses **Docker** containers to download and run the development
    tools of different operating systems, right from your favorite desktop computer.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更方便地管理用于交叉编译项目的各种开发环境和工具链，我们可以使用 `fyne-cross` 命令。这个交叉编译工具使用 **Docker** 容器下载和运行不同操作系统的开发工具，直接从您最喜欢的桌面计算机上操作。
- en: Installing fyne-cross
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 fyne-cross
- en: Before you can install `fyne-cross`, you will need a recent version of `docker`
    package readily available. More information about working with Docker is available
    in [*Chapter 9*](B16820_09_Final_JM_ePub.xhtml#_idTextAnchor219), *Bundling Resources
    and Preparing for Release*.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在您安装 `fyne-cross` 之前，您需要准备一个最新的 `docker` 软件包。有关使用 Docker 的更多信息，请参阅[*第 9 章*](B16820_09_Final_JM_ePub.xhtml#_idTextAnchor219)，*资源打包和发布准备*。
- en: 'Once Docker has been installed, you can use the standard Go tools to install
    `fyne-cross`. The following command will be sufficient:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了 Docker，您就可以使用标准的 Go 工具安装 `fyne-cross`。以下命令就足够了：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `fyne-cross` binary will be installed in `$GOPATH/bin`. If the commands
    provided in the following sections do not work, check that the binary is in your
    global `$PATH` environment.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`fyne-cross` 二进制文件将被安装在 `$GOPATH/bin`。如果以下章节中提供的命令不起作用，请检查二进制文件是否在您的全局 `$PATH`
    环境中。'
- en: Using fyne-cross
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 fyne-cross
- en: 'Once installed, the `fyne-cross` command can be used to build apps for any
    target operating system and architecture. It has one required parameter: the target
    system. To build a Windows executable from a Linux computer, simply call the following
    command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，`fyne-cross` 命令可以用来为任何目标操作系统和架构构建应用程序。它有一个必需的参数：目标系统。要从 Linux 计算机上构建 Windows
    可执行文件，只需调用以下命令：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'There are many options available (see `fyne-cross help` for more information).
    The most common two arguments are `-arch`, which allows you to specify a different
    architecture, and `-release`, which invokes the Fyne release pipeline to build
    apps that are ready to upload to marketplaces (you can find out more in [*Chapter
    10*](B16820_10_Final_JM_ePub.xhtml#_idTextAnchor239), *Distribution – App Stores
    and Beyond*. To create an application that will work on smaller Linux computers,
    such as **Raspberry Pi**, we can invoke the following command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多可用的选项（更多信息请参阅 `fyne-cross help`）。最常用的两个参数是 `-arch`，允许您指定不同的架构，以及 `-release`，它调用
    Fyne 发布管道来构建准备上传到市场的应用程序（您可以在[*第 10 章*](B16820_10_Final_JM_ePub.xhtml#_idTextAnchor239)，*分发
    – 应用商店及其他*中了解更多。为了创建适用于较小 Linux 计算机上的应用程序，例如 **Raspberry Pi**，我们可以使用以下命令：
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To build an Android app for release, you can use the following command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建用于发布的 Android 应用程序，您可以使用以下命令：
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The preceding steps should enable you to build and distribute applications for
    any platform with minimal investment in hardware.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 上述步骤应能帮助您以最小的硬件投资构建和分发适用于任何平台的应用程序。
- en: Please note that if you're running `fyne-cross` to build apps for iOS, you must
    run it on a macOS host computer. This is a requirement of Apple's licensing.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您正在运行 `fyne-cross` 来构建 iOS 应用程序，您必须在 macOS 主机计算机上运行它。这是苹果许可协议的要求。
