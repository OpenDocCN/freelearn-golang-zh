- en: '*Chapter 2*: Building a Traffic Lights Control System'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we set up TinyGo and our IDE, and we now know how to
    build and flash our programs to the Arduino UNO. We are now going to utilize this
    knowledge to go one step further.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to build a traffic lights control system. We are
    going to split the project into small steps, where we build and test each component.
    At the end, we are going to put everything together. We will be using multiple
    LEDs, a breadboard, GPIO ports, and a button to interrupt the normal flow to switch
    pedestrian lights to green. By the end of the chapter, you will know how to control
    external LEDs, read the state of a button, use GPIO ports, how to distinguish
    resistors, and how to utilize Goroutines in TinyGo.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Lighting an external LED
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lighting a single LED when a button is pressed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building traffic lights
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building traffic lights with pedestrian lights
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To build the traffic lights control system, we are going to need some components.
    We will need the following to build the complete project:'
  prefs: []
  type: TYPE_NORMAL
- en: An Arduino UNO
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Breadboard
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Five LEDs
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Multiple jumper cables
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Multiple 220 Ohm resistors
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One push button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One 10K Ohm resistor
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can find all code examples from this chapter in the following GitHub repository:
    [https://github.com/PacktPublishing/Creative-DIY-Microcontroller-Projects-with-TinyGo-and-WebAssembly/tree/master/Chapter02](https://github.com/PacktPublishing/Creative-DIY-Microcontroller-Projects-with-TinyGo-and-WebAssembly/tree/master/Chapter02)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Code in Action video for the chapter can be found here: [https://bit.ly/2RpvF2a](https://bit.ly/2RpvF2a)'
  prefs: []
  type: TYPE_NORMAL
- en: Lighting an external LED
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start to build a more complex circuit, let's begin with lighting up
    an external LED. As soon as this is working, we are going to extend the circuit
    step by step. We begin with a single red LED. Lighting up an external LED is a
    bit different compared to lighting up an onboard LED. We are going to need something
    on which we can place the LED, and we will need some wires as well as a basic
    understanding of resistors, which will help us to prevent the LED from taking
    damage. That is why we are going to look at each component one by one.
  prefs: []
  type: TYPE_NORMAL
- en: Using breadboards
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Breadboards** are used for prototyping, as they do not require you to directly
    solder components. We are going to build all our projects using breadboards.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A breadboard typically consists of two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: The power bus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Horizontal rows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each side of a breadboard has a power bus. The power bus provides a + (positive)
    lane and a - (ground) lane. The positive lane is colored *red* and the ground
    lane is colored *blue*. The individual slots are connected inside the power bus.
  prefs: []
  type: TYPE_NORMAL
- en: 'The slots of a single horizontal row are also connected. A signal in one slot
    is also available in the next slot. Different horizontal rows are not connected,
    unless we put a cable in there to create a connection. Here''s what a breadboard
    looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – A breadboard – image taken from Fritzing'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.1_B16555.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.1 – A breadboard – image taken from Fritzing
  prefs: []
  type: TYPE_NORMAL
- en: Understanding LED basics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Arduino UNO has an operating voltage of 5V, which is too high for most LEDs.
    So, we need to reduce the voltage to something our LEDs can handle. For that reason,
    we will be using 220 Ohm resistors to draw current from the line in order to protect
    the LED from damage. If you do not have 220 Ohm resistors, you can also use 470
    Ohm as well; anything between 220 and 1K (1K = 1,000) Ohm will be fine.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to really make sure that the resistor matches the needs of the
    LED, you can also calculate the resistor value as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*R = (V**s* *– V**led**) / I**led*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Where:'
  prefs: []
  type: TYPE_NORMAL
- en: R is the resistor value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vs is the source voltage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vled is the voltage drop across the LED.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Iled is the current through the LED.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: LEDs have *anode* (+) and *cathode* (-) leads. The anode lead is longer.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Different colors need to be driven with different voltages. When using the same
    resistors and voltages for the different LED colors, you will notice that some
    colors will be brighter compared to others.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using GPIO ports
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**GPIO** stands for **General Purpose Input Output**. That means we can use
    these pins for input as well as output for digital signals. We can either set
    a GPIO pin to *High* or *Low*, or read a *High* or *Low* value from the port.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We should never draw more than a maximum of 40.0 mA (milliampere) from a single
    GPIO port. Otherwise, we could permanently damage the hardware.
  prefs: []
  type: TYPE_NORMAL
- en: Building the circuit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now let''s build our first circuit on the breadboard:'
  prefs: []
  type: TYPE_NORMAL
- en: Put a red LED in the *G* column of the horizontal rows. Put the cathode in *G12*
    and the anode in *G13*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect *F12* with the ground lane on the power bus.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect *F13* and *E13* using a 220 Ohm resistor. (Anything between 220 and
    1,000 Ohms is okay.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect *Pin 13* from the GPIO ports to *A13*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the GND port to the ground lane on the power bus.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The descriptions on your breadboard might differ from the ones I am using. If
    that is the case, you'll need to build the circuit by checking the next figure.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The circuit should now look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Image of the circuit – image taken from Fritzing'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.2_B16555.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.2 – Image of the circuit – image taken from Fritzing
  prefs: []
  type: TYPE_NORMAL
- en: Writing the code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We start off by creating a new folder named `Chapter02` in our project workspace.
    This folder will be used for all parts of this chapter. Inside the `Chapter02`
    folder, we create a `blinky-external` folder and create a new `main.go` file inside.
  prefs: []
  type: TYPE_NORMAL
- en: 'The structure should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 - Project structure for writing the code'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.3_B16555.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.3 - Project structure for writing the code
  prefs: []
  type: TYPE_NORMAL
- en: 'We import the `machine` and `time` packages and put the following code into
    the `main` function:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Declare and initialize a variable named `outputConfig` with a new `PinConfig`
    in output mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare and initialize a variable named `greenLED` with a value of `machine.D13`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure the LED with the `outputConfig` instance we created earlier, by passing
    it as a parameter into the `Configure` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We then loop endlessly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set `redLED` to `Low` (off):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Sleep for half a second. Without sleeping, the LED would be turned on and off
    at an extremely high rate, so we sleep after each change in a state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the `redLED` to `High` (on):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Sleep for half a second:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now flash the program using the `tinygo flash` command using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When the flash progress completes and the Arduino restarts, the red LED should
    blink at intervals of 500 ms.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations, you have just built your first circuit and written your first
    program to control external hardware! As we now know how to connect and control
    external LEDs on a breadboard, we can continue to build a more advanced circuit.
    Let's do just that in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Lighting an LED when a button is pressed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Until now, we have only used code to directly control hardware components.
    Let''s now try to read the state of a button in order to control an LED. We will
    need the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: At least 6 jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One LED (the color does not matter)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 220 Ohm resistor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 4-pinned-button (push down button)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 10K Ohm resistor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now let's go on to build the circuit.
  prefs: []
  type: TYPE_NORMAL
- en: Building the circuit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following circuit extends the one we previously built. So, if you still
    have the previous circuit assembled, you just have to add the button part. The
    next circuit consists of two component groups. The first group is used to control
    an LED, and the second group is used to read the button state.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the LED component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We start off with the LED circuit:'
  prefs: []
  type: TYPE_NORMAL
- en: Place an LED with the cathode in G12 and the anode in G13\.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use a 220 Ohm resistor to connect *F13* with *D13*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect port *D13* from the GPIO ports with *A13* using a jumper wire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect *F12* with the ground lane of the power bus using a jumper wire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding the button component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now we are going to add a button:'
  prefs: []
  type: TYPE_NORMAL
- en: Use a jumper wire to connect `A31` with the positive lane of the power bus.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use a 10K Ohm resistor to connect the ground lane of the power bus with `B29`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect `D29` with port `D2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place the push button with one pin in `E29`, one in `E31`, one in `F29`, and
    the last pin in `F31`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our circuit should now look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – The circuit – image taken from Fritzing'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.4_B16555.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.4 – The circuit – image taken from Fritzing
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Before we start to write the code for this circuit, we need to learn how these
    buttons work.
  prefs: []
  type: TYPE_NORMAL
- en: As the button will not work if you place it incorrectly onto the breadboard,
    let's have a look at the button again.
  prefs: []
  type: TYPE_NORMAL
- en: The 4 pins on the button are grouped into two pins each. So, two pins are connected
    to each other. Looking at the back of the button, we should be able to see that
    two opposing pins are connected to each other. So, the button won't work as expected
    when you place it rotated by 90°.
  prefs: []
  type: TYPE_NORMAL
- en: Programming the logic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before diving into the code, we will create a new folder named `light-button`
    inside the `Chapter02` folder and create a `main.go` file in it, with an empty
    `main` function, using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – The folder structure for the logic'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.5_B16555.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.5 – The folder structure for the logic
  prefs: []
  type: TYPE_NORMAL
- en: Let's now look at the `main` function and the pull-up resistor.
  prefs: []
  type: TYPE_NORMAL
- en: The main function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We want to light the LED when the button is pressed. To achieve this, we need
    to read from a pin and check for its state using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Initialize the `outPutConfig` variable with `PinConfig` in `PinOutput` mode.
    This config is going to be used to control the LED pin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize the `inputConfig` variable with `PinConfig` in `PinInput` mode.
    This config is being used for the pin that reads the button state and therefore
    needs to be an input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize the `led` variable with a value of `machine.D13`, which is the pin
    we have connected to `led`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure `led` as output by passing `outputConfig` as the parameter, which
    is the pin that is connected to the button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize the `buttonInput` variable with a value of `machine.D2`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure `buttonInput` as an input by passing `inputConfig` as the parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As we do not want the program to be terminated after checking the button state
    a single time, we use an endless loop to repeat and check forever:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the current state of the button. It will be true if the button is pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the button is pressed, we light up the LED:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We are calling `continue` here, so we do not execute the `led.Low()` call:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the button is not pressed, we turn the LED off:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Do not forget to import the `machine` package, otherwise the code will not compile.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now flash the program using the `tinygo flash` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: After successfully flashing, the LED should light up when you press the button.
  prefs: []
  type: TYPE_NORMAL
- en: The pull-up resistor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You may have wondered why we need a 10K Ohm resistor in the button circuit.
    The 10K Ohm resistor is used to prevent the signal/pin from floating. Floating
    pins are bad, as an input pin in a floating state is indeterminate. When trying
    to read a value from a pin, we expect to get a digital value – 1 or 0, or true
    or false. Floating means that the value can change rapidly between 1 and 0, which
    happens without pull-up or pull-down resistors. Here''s some further reading on
    floating pins: [https://www.mouser.com/blog/dont-leave-your-pins-floating](https://www.mouser.com/blog/dont-leave-your-pins-floating).'
  prefs: []
  type: TYPE_NORMAL
- en: As an alternative to the 10K Ohm external resistor, an internal resistor can
    be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Configuring an input pin to use an internal resistor is done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: We have now learned how to control an LED using an input signal, which was given
    by a button. The next step is to build the traffic lights flow to control three
    LEDs.
  prefs: []
  type: TYPE_NORMAL
- en: Building traffic lights
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We know how to light up a single LED, and we also know how to light up an LED
    using a button input. The next step is to build a circuit using three LEDs and
    to write the code to light them up in the correct order.
  prefs: []
  type: TYPE_NORMAL
- en: Building the circuit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To build the circuit, we need the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: Three LEDs (preferably red, yellow, and green)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Three 220 Ohm resistors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Seven jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We start by first setting up the components using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect *GND* from the Arduino to any ground port on the power bus.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place the first (red) LED with the cathode in *G12* and the anode in *G13*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place the second (yellow) LED with the cathode in *G15* and the anode in *G16*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place the third (green) LED with the cathode in *G18* and the anode in *G19*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect *F13* with *D13* using a 220 Ohm resistor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect *F16* with *D16* using a 220 Ohm resistor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect *F19* with *D19* using a 220 Ohm resistor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect *F13* to *Ground* on the power bus using a jumper wire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect *F16* to *Ground* on the power bus using a jumper wire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect *F19* to *Ground* on the power bus using a jumper wire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect port *D13* to *A12* using a jumper wire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect port *D16* to *A12* using a jumper wire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect port *D19* to *A12* using a jumper wire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your circuit should now look similar to the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – The traffic lights circuit – image taken from Fritzing'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.6_B16555.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.6 – The traffic lights circuit – image taken from Fritzing
  prefs: []
  type: TYPE_NORMAL
- en: We have now successfully set up the circuit. Now we can continue to write some
    code to control the LEDs.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a folder structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We start off by creating a new folder named `traffic-lights-simple` inside
    the `Chapter02``main.go` file inside the new folder and start off with an empty
    `main` function. Your project structure should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 - Folder structure for the circuit'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.7_B16555.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.7 - Folder structure for the circuit
  prefs: []
  type: TYPE_NORMAL
- en: Writing the logic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have successfully set up our project structure to continue. We are going
    to implement the following flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '*RED -> RED-YELLOW -> GREEN -> YELLOW -> RED*'
  prefs: []
  type: TYPE_NORMAL
- en: This is a typical flow for traffic lights with three bulbs.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to configure three pins as output, and afterward, we want to endlessly
    loop and light up the LEDs in this flow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `main` function, we write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Initialize a new variable named `outputConfig` as `PinConfig` using the `PinOutPut`
    mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize a new variable named `redLED` with the value `machine.D13` and configure
    it as output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize a new variable named `yellowLED` with the value `machine.D12` and
    configure it as output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize a new variable named `greenLED` with the value `machine.D11` and
    configure it as output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We have now initialized our variables to act as output pins. The next step
    is to light up the LEDs in the correct order. We basically have four phases, which
    just need to repeat in order to simulate a real traffic light. Let''s go through
    these one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to handle the phases in an endless loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For *RED-Phase*, turn on the red LED and wait for a second:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For *RED-YELLOW-Phase*, turn on the yellow LED and wait for a second:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For *GREEN-PHASE*, turn off the yellow and red LEDs and turn on the green LED
    and wait for a second:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For *YELLOW-Phase*, turn off the green LED and turn on the yellow LED, then
    wait for a second and turn off yellow again, so we can start cleanly with *RED-Phase*
    again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The complete content of the function is available at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Programming-Microcontrollers-and-WebAssembly-with-TinyGo/blob/master/Chapter02/traffic-lights-simple/main.go](https://github.com/PacktPublishing/Programming-Microcontrollers-and-WebAssembly-with-TinyGo/blob/master/Chapter02/traffic-lights-simple/main.go)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Don't forget to import the `time` and `machine` packages.
  prefs: []
  type: TYPE_NORMAL
- en: We have now assembled and programmed a complete traffic lights flow. The next
    step is to combine everything we have built to complete our project.
  prefs: []
  type: TYPE_NORMAL
- en: Building traffic lights with pedestrian lights
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now combine everything we have learned and done in this chapter to create
    an even more realistic traffic lights system. We will do so by assembling a circuit
    that contains the three-bulb traffic lights from the previous step and adding
    pedestrian lights with two bulbs that are controlled by a button.
  prefs: []
  type: TYPE_NORMAL
- en: Assembling the circuit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For our final project in this chapter, we need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Five LEDs: preferably two red, one yellow, and two green'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Five 220 Ohm resistors, one for each LED
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 10K Ohm resistor as a pull-up resistor for our push button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 4-pin push button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 14 jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We start by setting up the three-bulb traffic lights using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Place the first LED (red) with the cathode on *G12* and the anode on *G13*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place the second LED (yellow) with the cathode on *G15* and the anode on *G16*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place the third LED (green) with the cathode on *G18* and the anode on *G19*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use a 220 Ohm resistor to connect *F13* with *D13*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use a 220 Ohm resistor to connect *F16* with *D16*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use a 220 Ohm resistor to connect *F19* with *D19*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect pin *D13* with *A13* using a jumper wire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect pin *D12* with *A16* using a jumper wire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect pin *D11* with *A10* using a jumper wire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect *F12* with Ground on the power bus using a jumper wire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect *F15* with Ground on the power bus using a jumper wire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect *F18* with Ground on the power bus using a jumper wire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now assemble the pedestrian lights using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Place the fourth LED (red) with the cathode on *G22* and the anode on *G23*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place the fifth LED (green) with the cathode on *G25* and the anode on *G26*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use a 220 Ohm resistor to connect *F23* with *D23*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use a 220 Ohm resistor to connect *F26* with *D26*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect pin *D5* with *A23* using a jumper wire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect pin *D4* with *A26* using a jumper wire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect *F22* with Ground on the power bus using a jumper wire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect *F24* with Ground on the power bus using a jumper wire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we only need to assemble the button and connect the power bus:'
  prefs: []
  type: TYPE_NORMAL
- en: Place a push button with the left pins in *E29* and *F29* and the right pins
    on *E31* and *F31*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use a 10K Ohm resistor to connect the Ground from the power bus with *B29*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect pin *D2* with *C29* using a jumper wire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect *A31* with the positive lane on the power bus using a jumper wire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the positive lane on the power bus with the 5V port on the Arduino UNO
    using a jumper wire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the ground lane on the power bus with a ground port on the Arduino UNO
    using a jumper wire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you''ve finished assembling, your circuit should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.8 – Circuit for the traffic lights with pedestrian lights controlled
    by'
  prefs: []
  type: TYPE_NORMAL
- en: a button – image taken from Fritzing
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.8_B16555.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.8 – Circuit for the traffic lights with pedestrian lights controlled
    by a button – image taken from Fritzing
  prefs: []
  type: TYPE_NORMAL
- en: Great, we have now completely assembled our final project for this chapter.
    We can now write some code to bring this project to life.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the project structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We start off by creating a new folder named `traffic-lights-pedestrian` inside
    the `Chapter02` folder. Inside the new folder, we create a new `main.go` file
    with an empty `main` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our project structure should now look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.9 - Project structure for the project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.9_B16555.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.9 - Project structure for the project
  prefs: []
  type: TYPE_NORMAL
- en: Writing the logic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to split the program into three parts:'
  prefs: []
  type: TYPE_NORMAL
- en: Initialization logic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Main logic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`trafficLights` logic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initializing the logic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We need to initialize a `stopTraffic` variable and configure the pins for the
    LEDs as output pins using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We start off by declaring a `bool` variable named `stopTraffic` at the package
    level. This variable is going to be used as a communication channel between our
    two logic parts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The first thing we do in the `main` method is set the value of `stopTraffic`
    to `false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We declare and initialize a new variable named `outputConfig` with `PinConfig`
    in `PinOutput` mode. We are going to pass this config to all LED pins:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We initialize some new variables: `greenLED` with the value `machine.D11`,
    `yellowLED` with the value `machine.D12`, and `redLED` with the value `machine.D13`.
    Then, we configure each LED variable as output pins:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We initialize some new variables: `pedestrianGreen` with the value `machine.D4`
    and `pedestrianRed` with the value `machine.D5`. Then, we configure each LED variable
    as output pins:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We declare and initialize a new variable named `inputConfig` with `PinConfig`
    in `PinInput` mode. Then, we declare and initialize a new variable named `buttonInput`
    with the value `machine.D2` and configure `buttonInput` as the input pin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That's it for the initialization. We have set up all pins and a Boolean variable
    at the package level.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The pin constants, such as `machine.D13`, are of the `machine.Pin` type.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the trafficLights logic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will now write the complete logic to control all the LEDs in our circuit.
    This is going to be the first time that we have to move some parts of the code
    into other functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do that, we start by writing a new function named `trafficLights` that *takes
    all five LED pins as parameters* and has *no return value*. Inside the function,
    we start off with an empty, endless loop. Our function should now look like the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'All the logic will be placed inside the `for` loop. The actual logic in the
    loop consists of two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: Handling signals from the button to stop the traffic and control the pedestrian
    lights
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling the normal traffic lights flow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We start off with handling the signals from the button. To do that, we check
    `for` `stopTraffic` in the `if`, and also have an empty `else` branch. It looks
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: So, when `stopTraffic` is `true`, we want to set our traffic lights phase to
    be *red*. Also, we want to set the pedestrian lights phase to *green* for 3 seconds
    and then back to *red* and set `stopTraffic` to `false` afterward, as we handled
    the signal one time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s implement this logic using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Set traffic lights phase to red:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the pedestrian lights phase to green for 3 seconds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the pedestrian lights phase to *red*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set `stopTraffic` to `false`, as we have handled the signal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `else` block, we just reset the pedestrian lights state to red:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Okay, that is the part that reacts to `stopTraffic` signals. Underneath that
    `if-else` block, we are going to implement the actual logic to control the traffic
    lights flow, which is the same as done earlier. So, we start with the *red* phase,
    transit to the *red-yellow* phase, then to *green*, then to *yellow*, and then
    reset *yellow* to be able to start clean again, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: That is all that we have to do in the `trafficLights` function.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the main logic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now we only need to run the `trafficLights` function and handle the button
    input at the same time. This is where **goroutines** come in. As microcontrollers
    only have one processor core, which works with a single thread, we cannot have
    real parallel execution of tasks. As we use goroutines on an Arduino UNO, we will
    need some additional build parameters. We are going to learn about these parameters
    later, when we flash the program. In our case, we want to have a listener on the
    button, while still being able to step through the traffic lights process. The
    logic consists of three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Initialize the pedestrian lights with the `red` phase.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `trafficLights` function in a goroutine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Handle the button input.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the first part, we only have to set the `pedestrianRED` LED to `High` and
    the `pedestrianGreen` LED to `Low`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we just call `trafficLights` and pass all necessary parameters using a
    goroutine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'For the last step, we need an endless loop that checks for `buttonInput` and
    to set `stopTraffic` to `true` if the button is pressed. We also need it to sleep
    for 50 milliseconds afterward:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is necessary to add a sleep time to the loop that handles the button input
    because the scheduler needs time to run the goroutine. The goroutine is being
    handled in the time that the main function is sleeping. Also, other blocking functions,
    such as reading from a channel, can be used to give the scheduler time to work
    on other tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we now have completed our logic, it is time to flash the program onto the
    controller. As we are using goroutines in this project, we need to pass additional
    parameters to the `tinygo flash` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: As the ATmega328p has very limited resources, the scheduler is deactivated by
    default on boards that use this microcontroller. The Arduino UNO is such a board.
    When using other microcontrollers, we would normally not need to override the
    default scheduler by setting this parameter.
  prefs: []
  type: TYPE_NORMAL
- en: We have now successfully flashed our program to the Arduino Uno. The traffic
    lights should start looping all phases and the pedestrian lights should remain
    in the *red* phase. When clicking the button, the traffic lights should end their
    loop and then the pedestrian lights should switch to the *green* phase, while
    the traffic lights remain on the *red* phase for 3 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Due to the very limited memory on the Arduino Uno, working with goroutines might
    only work in projects that are not very complex, such as this one.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have learned how to build a fully functional traffic lights system with pedestrian
    lights controlled by a button. We achieved this by building each part of the project
    separately and assembling it all together at the end.
  prefs: []
  type: TYPE_NORMAL
- en: We learned how to use breadboards, how the color codes on resistors work, why
    we use resistors when controlling LEDs, and how external LEDs are assembled. Also,
    we learned how to use push buttons, how to prevent floating signals using pullup
    resistors, and how to utilize goroutines in TinyGo.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn how to read input from a 4x4 keypad
    and how to control a servo motor. We are going to utilize this knowledge to build
    a safety lock that opens when the correct passcode is entered.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why do we place a resistor between an LED anode and the GPIO port?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we stop a signal from floating?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why do we sleep after checking a button's state?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How would you modify the code to achieve the following behavior?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. When the button is pressed, turn off the red and green LEDs of the traffic
    lights and let the yellow LED blink.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'b. When the button is pressed again: go back to the normal phase rotation.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Resistor Color Conversion Calculator: [https://www.digikey.com/en/resources/conversion-calculators/conversion-calculator-resistor-color-code](https://www.digikey.com/en/resources/conversion-calculators/conversion-calculator-resistor-color-code)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Goroutines in TinyGo: [https://aykevl.nl/2019/02/tinygo-goroutines](https://aykevl.nl/2019/02/tinygo-goroutines)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
