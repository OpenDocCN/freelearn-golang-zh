["```go\n    print(\"starting \")\n    print(\"program\\n\")\n    ```", "```go\n    for {\n      println(\"Hello World\")\n      time.Sleep(1 * time.Second)\n    }\n    ```", "```go\n    print just writes the text to the serial port and does not insert a character for a newline.`println` adds a character for a newline.\n    ```", "```go\n    tar.gz here: https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html\n    ```", "```go\n    brew install Putty\n    ```", "```go\n    type Driver struct {\n    ```", "```go\n       inputEnabled bool\n    ```", "```go\n       lastColumn int\n       lastRow int\n    ```", "```go\n       columns [4]machine.Pin\n    ```", "```go\n       rows [4]machine.Pin\n    ```", "```go\n       mapping [4][4]string\n    }\n    ```", "```go\nfunc (keypad *Driver)Configure(r4, r3, r2, r1, c4, c3, c2 ,c1 machine.Pin) {}\n```", "```go\n    inputConfig := machine.PinConfig{Mode: machine.\n                   PinInputPullup}\n    outputConfig := machine.PinConfig{Mode: machine.\n                    PinOutput}\n    c4.Configure(inputConfig)\n    c3.Configure(inputConfig)\n    c2.Configure(inputConfig)\n    c1.Configure(inputConfig)\n    ```", "```go\n    keypad.columns = [4]machine.Pin{c4, c3, c2, c1}\n    ```", "```go\n    outputConfig := machine.PinConfig{Mode: machine.\n                    PinOutput}\n    r4.Configure(outputConfig)\n    r3.Configure(outputConfig)\n    r2.Configure(outputConfig)\n    r1.Configure(outputConfig)\n    ```", "```go\n    keypad.rows = [4]machine.Pin{r4, r3, r2, r1}\n    ```", "```go\n    keypad.mapping = [4][4]string{\n        {\"1\", \"2\", \"3\", \"A\"},\n        {\"4\", \"5\", \"6\", \"B\"},\n        {\"7\", \"8\", \"9\", \"C\"},\n        {\"*\", \"0\", \"#\", \"D\"},\n    }\n    ```", "```go\n    keypad.inputEnabled = true\n    keypad.lastColumn = -1\n    keypad.lastRow = -1\n    ```", "```go\nfunc (keypad *Driver) GetIndices() (int, int){}\n```", "```go\n    for rowIndex := range keypad.rows {\n    ```", "```go\n    rowPin := keypad.rows[rowIndex]\n    rowPin.Low()\n    ```", "```go\n    for columnIndex := range keypad.columns {\n    ```", "```go\n    columnPin := keypad.columns[columnIndex]\n    ```", "```go\n    if !columnPin.Get() && keypad.inputEnabled {\n      keypad.inputEnabled = false\n      keypad.lastColumn = columnIndex\n      keypad.lastRow = rowIndex\n      return keypad.lastRow, keypad.lastColumn\n    }\n    ```", "```go\n    if columnPin.Get() &&\n        columnIndex == keypad.lastColumn &&\n        rowIndex == keypad.lastRow &&\n        !keypad.inputEnabled {\n        keypad.inputEnabled = true\n    }}\n    ```", "```go\n    rowPin.High()\n    }\n    ```", "```go\n    return -1, -1\n    }\n    ```", "```go\nfunc (keypad *Driver) GetKey() string {}\n```", "```go\n    row, column := keypad.GetIndices()\n        if row == -1 && column == -1 {\n              return \"\"\n    }\n    return keypad.mapping[row][column]\n```", "```go\n    keypadDevice := keypad.Driver{}\n    keypadDevice.Configure(machine.D3, machine.D4, machine.\n        D5, machine.D6, machine.D7, machine.D8, machine.D9, \n        machine.D10)\n    ```", "```go\n    for {\n      key := keypadDevice.GetKey()\n      if key != \"\" {\n        println(\"Button: \", key)\n      }\n    }\n    ```", "```go\ntinygo flash –target=arduino Chapter03/controlling-keypad/main.go\n```", "```go\n    const centerDutyCycle = 1500 * time.Microsecond\n    const centerRemainingPeriod = 18500 * time.Microsecond\n    const leftDutyCycle = 2000 * time.Microsecond\n    const leftRemainingPeriod = 18000 * time.Microsecond\n    const rightDutyCycle = 1000 * time.Microsecond\n    const rightRemainingPeriod = 19000 * time.Microsecond\n    ```", "```go\n    type Driver struct {\n        pin machine.Pin\n    }\n    ```", "```go\n    func (servo *Driver) Configure(pin machine.Pin) {}\n    ```", "```go\n        servo.pin = pin\n        servo.pin.Configure(machine.PinConfig{Mode: machine.\n        PinOutput})\n    ```", "```go\n    for position := 0; position <= 4; position++ {\n    ```", "```go\n        servo.pwm.Pin.High()\n        time.Sleep(rightDutyCycle)\n        servo.pwm.Pin.Low()\n        time.Sleep(rightRemainingPeriod)\n    }\n    ```", "```go\nfunc main() {\n    servo := servo.Driver{}\n    servo.Configure(machine.D11)\n    servo.Right()\n}\n```", "```go\ntinygo flash –target=arduino Chapter03/controlling-servo/main.go\n```", "```go\n    const period = 20e6\n    type Device struct {\n        pwm machine.PWM\n        pin machine.Pin\n        channel uint8\n    }\n    ```", "```go\n    func NewDevice(timer machine.PWM, pin machine.Pin) *Device {\n        return &Device{\n            pwm: timer,\n            pin: pin,\n        }\n    }\n    ```", "```go\n    func (d *Device) Configure() error {\n        err := d.pwm.Configure(machine.PWMConfig{\n            Period: period,\n        })\n        if err != nil {\n            return err\n        }\n        d.channel, err = d.pwm.Channel(machine.Pin(d.pin))\n            if err != nil {\n                return err}\n        return nil\n    }\n    ```", "```go\n    func (d *Device) Right() {\n        d.setDutyCycle(1000)\n    }\n    func (d *Device) Center() {\n        d.setDutyCycle(1500)\n    }\n    func (d *Device) Left() {\n        d.setDutyCycle(2000)\n    }\n    ```", "```go\n    func (d *Device) setDutyCycle(cycle uint64) {\n        value := uint64(d.pwm.Top()) * cycle / (period / \n        1000)\n        d.pwm.Set(d.channel, uint32(value))\n    }\n    ```", "```go\nservo := servopwm.NewDevice(machine.Timer1, machine.D9)\nerr := servo.Configure()\nif err != nil {\n    for {\n        println(\"could not configure servo:\", err.Error())\n        time.Sleep(time.Second)\n}\n}\nfor {\n    servo.Left()\n    time.Sleep(time.Second)\n    servo.Center()\n    time.Sleep(time.Second)\n    servo.Right()\n    time.Sleep(time.Second)\n}\n```", "```go\n    \"https://github.com/PacktPublishing/Creative-DIY-Microcontroller-Projects-with-TinyGo-and-WebAssembly/tree/master/Chapter03/keypad\"\n    \"https://github.com/PacktPublishing/Creative-DIY-Microcontroller-Projects-with-TinyGo-and-WebAssembly/tree/master/Chapter03/servo\"\n    ```", "```go\n    keypadDriver := keypad.Driver{}\n    keypadDriver.Configure(machine.D2, machine.D3, machine.\n        D4, machine.D5, machine.D6, machine.D7, machine.D8, \n        machine.D9)\n    ```", "```go\n    servoDriver := servo.Driver{}\n    servoDriver.Configure(machine.D11)\n    ```", "```go\n    outPutConfig := machine.PinConfig{Mode: machine.\n                    PinOutput}\n    ```", "```go\n    led1 := machine.D12\n    led1.Configure(outPutConfig)\n    led2 := machine.D13\n    led2.Configure(outPutConfig)\n    ```", "```go\n    const passcode = \"133742\"\n    ```", "```go\n    enteredPasscode := \"\"\n    ```", "```go\n    for {\n        key := keypadDriver.GetKey()\n    ```", "```go\n        if key != \"\" {\n            println(\"Button: \", key)\n            enteredPasscode += key\n    ```", "```go\n            led2.High()\n            time.Sleep (time.Second / 5)\n            led2.Low()\n    }\n    ```", "```go\n        if len(enteredPasscode) == len(passcode) {\n    ```", "```go\n        if enteredPasscode == passcode {\n            println(\"Success\") \n            enteredPasscode = \"\"\n            servoDriver.Right()\n    ```", "```go\n            led1.High()\n            time.Sleep(time.Second * 3)\n            led1.Low()\n    } else {\n    ```", "```go\n            println(\"Fail\")\n            println(\"Entered Password: \", enteredPasscode)\n            enteredPasscode = \"\"\n    ```", "```go\n            led2.High()\n            time.Sleep(time.Duration(time.Second * 3))\n            led2.Low()\n    }\n    }\n    ```", "```go\n    time.Sleep(50 * time.Millisecond)\n    }\n    ```", "```go\ntinygo flash –target=arduino Chapter03/safety-lock-keypad/main.go\n```"]