["```go\n    import \"machine\"\n    ```", "```go\n    machine.InitADC()\n    ```", "```go\n    soilSensor := machine.ADC{Pin: machine.ADC5}\n    ```", "```go\n    soilSensor.Configure()\n    ```", "```go\n    machine.D2.Configure(machine.PinConfig{Mode: machine.PinOutput})\n    machine.D2.High()\n    ```", "```go\n    for {\n        value := soilSensor.Get()\n        println(value)\n        time.Sleep(500 * time.Millisecond)\n    }\n    ```", "```go\ntinygo flash –target=arduino Chapter04/soil-moisture-sensor-thresholds/main.go\n```", "```go\nResolution of the ADC / System Voltage = ADC Value / Analog Voltage measured\n```", "```go\n1023 / 5V = ADC Value / Analog Voltage Measured\n```", "```go\n1023 / 5V = ADC Value / 3.33V\n```", "```go\n1023 / 5V * 3.33V = ADC Value \nThat resolves to: ADC Value = 681\n```", "```go\nADC Value = 43584\n```", "```go\n    type SoilSensor interface {\n        Get() MoistureLevel\n        Configure()\n        On()\n        Off()\n    }\n    ```", "```go\n    type soilSensor struct {\n    ```", "```go\n     waterThreshold         uint16\n     completelyDryThreshold uint16\n     category               uint16\n     pin                    machine.Pin\n     adc                    machine.ADC\n     voltage                machine.Pin\n    }\n    ```", "```go\n    type MoistureLevel uint8\n    const (\n        CompletelyDry MoistureLevel = iota\n        VeryDry\n        Dry\n        Wet\n        VeryWet\n        Water\n    )\n    ```", "```go\n    func NewSoilSensor(waterThreshold, dryThreshold, dataPin, voltagePin machine.Pin) SoilSensor {\n    ```", "```go\n    category := (dryThreshold - waterThreshold) / 6\n    ```", "```go\n    return &soilSensor{\n        waterThreshold: waterThreshold,\n        completelyDryThreshold: dryThreshold,\n        category: category,\n        pin: dataPin,\n        voltage: voltagePin,\n    }\n    }\n    ```", "```go\n    func (sensor *soilSensor) Get() MoistureLevel {\n    ```", "```go\n    value := sensor.adc.Get()\n    ```", "```go\n    switch {\n    case value >= sensor.completelyDryThreshold:\n        return CompletelyDry\n    ```", "```go\n    case value >= sensor.completelyDryThreshold-sensor.category:\n       return VeryDry\n    ```", "```go\n    case value >= sensor.completelyDryThreshold-sensor.category*2:\n       return Dry\n    ```", "```go\n    case value <= sensor.completelyDryThreshold-sensor.category*3:\n      return Wet\n    ```", "```go\n    case value >= sensor.completelyDryThreshold-sensor.category*Ł4:\n      return VeryWet\n    ```", "```go\n    default:\n        return Water\n      }\n    }\n    ```", "```go\n    func (sensor *soilSensor) Configure() {\n    ```", "```go\n        sensor.adc = machine.ADC{Pin: sensor.pin}\n        sensor.adc.Configure(machine.ADCConfig{}\n    ```", "```go\n        sensor.voltage.Configure(machine.PinConfig{Mode: \n        machine.PinOutput})\n        sensor.voltage.Low()\n    }\n    ```", "```go\n    func (sensor *soilSensor) On() {\n        sensor.voltage.High()\n    }\n    ```", "```go\n    func (sensor *soilSensor) Off() {\n        sensor.voltage.Low()\n    }\n    ```", "```go\n    import (\n        \"machine\"\n        \"time\"\n        \"github.com/PacktPublishing/Creative-DIY-Microcontroller-Projects-with-TinyGo-and-WebAssembly/\n        Chapter04/soil-moisture-sensor\"\n    )\n    ```", "```go\n    machine.InitADC()\n    ```", "```go\n    soilSensor := soil.NewSoilSensor(18000, 34800, machine.\n                  ADC5, machine.D2)\n    ```", "```go\n    soilSensor.Configure()\n    ```", "```go\n    for {\n        soilSensor.On()\n        time.Sleep(75 * time.Millisecond)\n    ```", "```go\n        switch soilSensor.Get() {\n        case soil.CompletelyDry:\n            println(\"completely dry\")\n        case soil.VeryDry:\n            println(\"very dry\")\n        case soil.Dry:\n            println(\"dry\")\n        case soil.Wet:\n            println(\"wet\")\n        case soil.VeryWet:\n            println(\"very wet\")\n        case soil.Water:\n            println(\"pure water\")\n    }\n    ```", "```go\n        soilSensor.Off()\n        time.Sleep(time.Second)\n      }\n    }\n    ```", "```go\ntinygo flash –target=arduino Chapter04/soil-moisture-sensor-example/main.go\n```", "```go\n    import \"machine\"\n    ```", "```go\n    type WaterLevel interface {\n        IsEmpty() bool\n        Configure()\n        On()\n        Off()\n    }\n    ```", "```go\n    type waterLevel struct {\n        dryThreshold uint16\n        pin machine.Pin\n        adc machine.ADC\n        voltage machine.Pin\n    }\n    ```", "```go\n    func NewWaterLevel(dryThreshold uint16, dataPin, voltagePin machine.Pin) WaterLevel {\n        return &waterLevel{\n            dryThreshold: dryThreshold,\n            pin: dataPin,\n            voltage: voltagePin,\n    }\n    }\n    ```", "```go\n    func (sensor *waterLevel) IsEmpty() bool {\n        return sensor.adc.Get() <= sensor.dryThreshold\n    }\n    ```", "```go\n    func (sensor *waterLevel) Configure() {\n        sensor.adc = machine.ADC{Pin: sensor.pin}\n        sensor.adc.Configure(machine.ADCConfig{})\n        sensor.voltage.Configure(machine.PinConfig{\n            Mode: machine.PinOutput,\n    })\n        sensor.voltage.Low()\n    }\n    ```", "```go\n    func (sensor *waterLevel) On() {\n        sensor.voltage.High()\n    }\n    ```", "```go\n    func (sensor *waterLevel) Off() {\n        sensor.voltage.Low()\n    }\n    ```", "```go\n    machine.InitADC()\n    ```", "```go\n    waterLevelSensor := waterlevel.NewWaterLevel(7000, \n                        machine.ADC4, machine.D3)\n    ```", "```go\n    waterLevelSensor.Configure()\n    ```", "```go\n    for {\n        waterLevelSensor.On()\n        time.Sleep(100 * time.Millisecond)\n        println(\"tank is empty\", waterLevelSensor.IsEmpty())\n        waterLevelSensor.Off()\n        time.Sleep(time.Second)\n    }\n    ```", "```go\ntinygo flash –target=arduino Chapter04/water-level-sensor-example/main.go \n```", "```go\n    type Buzzer interface {\n        Configure()\n        Beep(highDuration time.Duration, amount uint8)\n    }\n    ```", "```go\n    type buzzer struct {\n        pin machine.Pin\n    }\n    ```", "```go\n    func NewBuzzer(pin machine.Pin) Buzzer {\n        return buzzer{pin: pin}\n    }\n    ```", "```go\n    func (buzzer buzzer) Configure() {\n        buzzer.pin.Configure(machine.PinConfig{\n            Mode: machine.PinOutput,\n        })\n    }\n    ```", "```go\n    func (buzzer buzzer) Beep(highDuration time.Duration, amount uint8) {\n    ```", "```go\n    for i := amount; i > 0; i-- {\n        buzzer.pin.High()\n        time.Sleep(highDuration)\n        buzzer.pin.Low()\n        time.Sleep(highDuration)\n      }\n    }\n    ```", "```go\n    buzzer := buzzer.NewBuzzer(machine.D4)\n    buzzer.Configure()\n    ```", "```go\n    for {\n        buzzer.Beep(time.Millisecond*100, 3)\n        time.Sleep(3 * time.Second)\n    }\n    ```", "```go\ntinygo flash –target=arduino Chapter4/buzzer-example/main.go\n```", "```go\n    type Pump interface {\n        Configure()\n        Pump(duration time.Duration, iterations uint8)\n    }\n    ```", "```go\n    type pump struct {\n        pin machine.Pin\n    }\n    ```", "```go\n    func NewPump(pin machine.Pin) Pump {\n        return &pump{\n            pin: pin,\n        }\n    }\n    ```", "```go\n    func (pump *pump) Configure() {\n        pump.pin.Configure(machine.PinConfig{\n        Mode: machine.PinOutput,\n        })\n    }\n    ```", "```go\n    func (pump *pump) Pump(duration time.Duration, iterations uint8) {\n        for i := iterations; i > 0; i-- {\n            pump.pin.High()\n            time.Sleep(duration)\n            pump.pin.Low()\n            time.Sleep(duration)\n        }\n    }\n    ```", "```go\n    pump := pump.NewPump(machine.D5)\n    pump.Configure()\n    ```", "```go\n    for {\n        pump.Pump(350*time.Millisecond, 3)\n        time.Sleep(30 * time.Second)\n    }\n    ```", "```go\ntinygo flash –target=arduino Chapter04/pump-example/main.go\n```", "```go\n    machine.InitADC()\n    ```", "```go\n    soilSensor := soil.NewSoilSensor(18000, 34800, machine.\n                  ADC5, machine.D2)\n    soilSensor.Configure()\n    ```", "```go\n    waterLevelSensor := waterlevel.NewWaterLevel(7000,\n                        machine.ADC4, machine.D3)\n    waterLevelSensor.Configure()\n    ```", "```go\n    pump := pump.NewPump(machine.D5)\n    pump.Configure()\n    ```", "```go\n    buzzer := buzzer.NewBuzzer(machine.D4)\n    buzzer.Configure()\n    ```", "```go\n    for {\n        waterLevelSensor.On()\n        time.Sleep(100 * time.Millisecond)\n    ```", "```go\n        if waterLevelSensor.IsEmpty() {\n            waterLevelSensor.Off()\n            buzzer.Beep(150*time.Millisecond, 3)\n            time.Sleep(time.Hour)\n            continue\n    }\n    ```", "```go\n    waterLevelSensor.Off()\n    ```", "```go\n    soilSensor.On()\n    time.Sleep(100 * time.Millisecond)\n    ```", "```go\n    switch soilSensor.Get() {\n    ```", "```go\n    case soil.VeryDry, soil.CompletelyDry:\n        pump.Pump(350*time.Millisecond, 3)\n    ```", "```go\n    default:\n        soilSensor.Off()\n        time.Sleep(time.Hour)\n    }\n    }\n    ```", "```go\ntinygo flash –target=arduino Chapter04/plant-watering-system/main.go\n```"]