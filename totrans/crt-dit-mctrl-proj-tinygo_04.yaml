- en: '*Chapter 4*: Building a Plant Watering System'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第4章*：构建植物浇水系统'
- en: In the previous chapters, we learned how to write to the serial port and how
    to monitor the serial port on our computers. Furthermore, we learned how to write
    drivers for components, which have not yet been implemented by the TinyGo community,
    and we used this knowledge to write a driver for a 4x4 keypad and a servo motor
    in [*Chapter 3*](B16555_03_Final_VK_ePub.xhtml#_idTextAnchor058), *Building a
    Safety Lock Using a Keypad*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们学习了如何向串行端口写入数据以及如何在我们的计算机上监控串行端口。此外，我们还学习了如何编写尚未由TinyGo社区实现的组件的驱动程序，并使用这些知识编写了4x4键盘和伺服电机的驱动程序，在[*第3章*](B16555_03_Final_VK_ePub.xhtml#_idTextAnchor058)，*使用键盘构建安全锁*。
- en: We are now going to build on top of this knowledge in this chapter by introducing
    a new type of pin and we are going to build an automated plant watering system
    using some new devices. We will be able to pump water from a container into a
    plant's soil, measure the soil's moisture, check the water level of a container,
    and let a buzzer beep when the water level in the container is below a certain
    threshold. This will be achieved by splitting the project up into single steps
    and putting it all together at the end of the chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将在这个章节的基础上，通过引入一种新的引脚类型，并使用一些新设备构建一个自动植物浇水系统。我们将能够将水从容器中泵入植物的土壤中，测量土壤的湿度，检查容器的水位，并在容器中的水位低于某个阈值时让蜂鸣器发出声音。这将通过将项目分解成单个步骤并在章节末尾将其全部组合起来来实现。
- en: After working through this chapter, we will know how to read input from analog
    pins, how to measure thresholds in sensor data, how to let a buzzer beep, and
    how to control a pump using relays.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成本章内容后，我们将了解如何从模拟引脚读取输入，如何测量传感器数据中的阈值，如何让蜂鸣器发出声音，以及如何使用继电器控制水泵。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主要主题：
- en: Reading soil moisture sensor data
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取土壤湿度传感器数据
- en: Reading water level sensor data
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取水位传感器数据
- en: Controlling a buzzer
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制蜂鸣器
- en: Controlling a pump
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制水泵
- en: Watering your plants
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浇灌您的植物
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'We are going to need the following components for this project:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要以下组件来完成这个项目：
- en: An Arduino UNO
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Arduino UNO
- en: Capacitive Soil Moisture Sensor v1.2
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电容式土壤湿度传感器v1.2
- en: K-0135 Water Level Sensor
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: K-0135 水位传感器
- en: Passive buzzer with 2 pins
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有2个引脚的无源蜂鸣器
- en: Micro submersible water pump DC 3V-5V
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直流3V-5V微型潜水泵
- en: Breadboard power supply module
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面包板电源模块
- en: Jumper wires
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳线
- en: One breadboard
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个面包板
- en: One 100 Ohm resistor
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个100欧姆电阻
- en: These components can usually be found in online stores and also in local electronic
    supply stores. Most components used in this book are also part of so-called **Arduino
    Starter Kits**.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些组件通常可以在在线商店和当地电子产品商店找到。本书中使用的多数组件也是所谓的**Arduino入门套件**的一部分。
- en: 'You can find the code for this chapter on GitHub: [https://github.com/PacktPublishing/Creative-DIY-Microcontroller-Projects-with-TinyGo-and-WebAssembly/tree/master/Chapter04](https://github.com/PacktPublishing/Creative-DIY-Microcontroller-Projects-with-TinyGo-and-WebAssembly/tree/master/Chapter04)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到本章的代码：[https://github.com/PacktPublishing/Creative-DIY-Microcontroller-Projects-with-TinyGo-and-WebAssembly/tree/master/Chapter04](https://github.com/PacktPublishing/Creative-DIY-Microcontroller-Projects-with-TinyGo-and-WebAssembly/tree/master/Chapter04)
- en: 'The Code in Action video for the chapter can be found here: [https://bit.ly/3tlhRnx](https://bit.ly/3tlhRnx)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的“代码在行动”视频可以在这里找到：[https://bit.ly/3tlhRnx](https://bit.ly/3tlhRnx)
- en: Reading soil moisture sensor data
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取土壤湿度传感器数据
- en: When automatically watering plants, we need to know when we have to add water
    to the soil. An easy way to detect that the soil is too dry is to use a soil moisture
    sensor. We are going to use a capacitive soil moisture sensor in this project,
    which provides the readings as an analog signal.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在自动浇水植物时，我们需要知道何时需要向土壤中加水。检测土壤过于干燥的一个简单方法就是使用土壤湿度传感器。在本项目中，我们将使用电容式土壤湿度传感器，它提供模拟信号作为读数。
- en: 'The sensor has the following technical specifications:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 该传感器的以下技术规格如下：
- en: A 3.3 V to 5.0 V supply range
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3.3 V至5.0 V的供电范围
- en: A 3.3 V operating range
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3.3 V的工作范围
- en: An analog output in the range of 1.5 V to 3.3 V
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1.5 V至3.3 V范围内的模拟输出
- en: An operating current of 5 mA
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作电流为5 mA
- en: Sensors from other manufacturers might differ slightly in these specs. Datasheets
    are usually provided by the vendor you buy the hardware from. We'll now start
    off by assembling the circuit.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 来自其他制造商的传感器在这些规格上可能略有不同。数据表通常由您购买硬件的供应商提供。我们现在将开始组装电路。
- en: Assembling the circuit
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组装电路
- en: 'We only need some cables, the sensor itself, and a breadboard to begin with.
    Depending on the manufacturer of the sensor, the labels on the port of your sensor
    might differ. The one I use has the following labels:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最初只需要一些电缆、传感器本身和一个面包板。根据传感器的制造商不同，传感器端口上的标签可能不同。我使用的是以下标签：
- en: AOUT (short for **Analog out**)
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AOUT（代表**模拟输出**）
- en: VCC (+) (short for **Voltage Common Collector**)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VCC (+)（代表**电压公共收集器**）
- en: GND (-) (stands for **Ground**)
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GND (-)（代表**地**）
- en: 'Now assemble the circuit as per the following list:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在按照以下列表组装电路：
- en: Connect the *GND* port to *GND* on the power bus using a jumper wire.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将 *GND* 端口连接到电源总线上的 *GND*。
- en: Connect port *D2* to *A1* on the breadboard using a jumper wire.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将端口 *D2* 连接到面包板上的 *A1*。
- en: Connect port *A5* to *A2* on the breadboard using a jumper wire.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将端口 *A5* 连接到面包板上的 *A2*。
- en: Connect *E1* on the breadboard to *AOUT* on the sensor.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将面包板上的 *E1* 连接到传感器上的 *AOUT*。
- en: Connect *E2* to *VCC* on the sensor.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将 *E2* 连接到传感器上的 *VCC*。
- en: Connect *GND* from the power bus with *GND* on the sensor.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将电源总线上的 *GND* 连接到传感器上的 *GND*。
- en: 'Your circuit should now look similar to the following figure:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你的电路现在应该看起来类似于以下图示：
- en: '![Figure 4.1 – Soil Sensor Circuit  image taken from Fritzing'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.1 – 土壤传感器电路  图片来自 Fritzing'
- en: '](img/Figure_4.1_B16555.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.1_B16555.jpg)'
- en: Figure 4.1 – Soil sensor circuit – image taken from Fritzing
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1 – 土壤传感器电路 – 图片来自 Fritzing
- en: Figure 4.1 – Soil Sensor Circuit image taken from Fritzing
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1 – 土壤传感器电路图片来自 Fritzing
- en: Great! We have successfully assembled the circuit. We are going to use this
    circuit to create a small sample project to read values from the sensor.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！我们已经成功组装了电路。我们将使用这个电路来创建一个小型示例项目，以读取传感器的值。
- en: Finding thresholds
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 寻找阈值
- en: 'Our next task is to find out the values that indicate the following states:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来的任务是找出表示以下状态的值：
- en: Dry
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 干燥
- en: In water
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在水中
- en: To check the dryness, we need to create a new folder for this project.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查干燥度，我们需要为这个项目创建一个新的文件夹。
- en: 'Start off by creating a new folder named `Chapter04`. Inside this folder, create
    a new folder named `soil-moisture-sensor-thresholds` and inside this folder, create
    a new `main.go` file and insert an empty `main()` function. The folder structure
    should now look like the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个名为 `Chapter04` 的新文件夹。在该文件夹内，创建一个名为 `soil-moisture-sensor-thresholds`
    的新文件夹，并在该文件夹内创建一个 `main.go` 文件，并插入一个空的 `main()` 函数。文件夹结构现在应该如下所示：
- en: '![Figure 4.2 – Folder structure for Soil moisture sensor threshold'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.2 – 土壤湿度传感器阈值文件夹结构'
- en: '](img/Figure_4.2_B16555.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.2_B16555.jpg)'
- en: Figure 4.2 – Folder structure for Soil moisture sensor threshold
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2 – 土壤湿度传感器阈值文件夹结构
- en: 'Now follow these steps:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在按照以下步骤操作：
- en: 'Import the `machine` package as follows:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式导入 `machine` 包：
- en: '[PRE0]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Initialize the registers needed for ADC:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化用于 ADC 的寄存器：
- en: '[PRE1]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a new variable named `soilSensor` of the type `machine.ADC` with `Pin
    machine.ADC5`:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `soilSensor` 的新变量，类型为 `machine.ADC`，使用 `Pin machine.ADC5`：
- en: '[PRE2]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Configure the pin so it is able to read analog values:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置引脚以便能够读取模拟值：
- en: '[PRE3]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Configure the machine D2 pin as output and set it to `high`. We do not store
    this inside a new variable, as we will never change the state of the pin again.
    We only use it to provide currency:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将机器 D2 引脚配置为输出并将其设置为 `high`。我们不会将其存储在新变量中，因为我们永远不会再次更改引脚的状态。我们只使用它来提供电流：
- en: '[PRE4]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Read the sensor value two times a second in an endless loop and print it to
    the serial port:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以每秒两次的速度读取传感器值，并在无限循环中将其打印到串行端口：
- en: '[PRE5]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Great, we have successfully written our first program that reads sensor data
    from an analog pin. Now we need to ascertain threshold values. To do so, first
    flash the program onto your Arduino using the following command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了，我们已经成功编写了第一个从模拟引脚读取传感器数据的程序。现在我们需要确定阈值值。为此，首先使用以下命令将程序闪存到你的 Arduino 上：
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now open up PuTTY and select the microcontroller profile to see the sensor
    readings. This should look like the following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开 PuTTY 并选择微控制器配置文件以查看传感器读取值。这应该看起来像以下截图：
- en: '![Figure 4.3 – Soil moisture sensor output in PuTTY'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.3 – PuTTY 中的土壤湿度传感器输出'
- en: '](img/Figure_4.3_B16555.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.3_B16555.jpg)'
- en: Figure 4.3 – Soil moisture sensor output in PuTTY
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3 – PuTTY 中的土壤湿度传感器输出
- en: The value is pretty stable at **37888**. You might notice some small changes
    in the value between the readings. Just take the highest value you see in that
    case.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 该值相当稳定，为**37888**。你可能会注意到在两次读取之间值会有一些小的变化。在这种情况下，只需取你看到的最高值即可。
- en: We are now going to declare **37888** as the threshold for dry values. So, everything
    equal or above this value can be considered completely dry. The values that you
    receive from your sensor might differ a bit, so you can just do the same; have
    a look at the values, and take the lowest one as your threshold.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将 **37888** 声明为干燥值的阈值。因此，所有等于或高于此值的值都可以被认为是完全干燥的。从你的传感器接收到的值可能略有不同，所以你可以做同样的事情；查看这些值，并取最低的一个作为你的阈值。
- en: Note
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Take care that your sensor is completely dry and clean. Otherwise, you might
    get in trouble with your dry value.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保你的传感器完全干燥且清洁。否则，你可能会因为干燥值而遇到麻烦。
- en: Excellent! We just managed to find out the value for completely dry soil. Now
    we need to find a value for being completely wet (in water).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们刚刚找到了完全干燥土壤的值。现在我们需要找到一个完全湿润（在水中）的值。
- en: 'Now take a glass of water and put the sensor in there, while watching the sensor
    readings in PuTTY. **Be really careful that you only put the sensor so deep in
    the water that it reaches the white line on it!** Do not let the water touch the
    electronics above! Check the following figure for this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在拿一杯水，把传感器放进去，同时观察 PuTTY 中的传感器读数。**一定要非常小心，只把传感器放入水中，直到它触及传感器上的白色线！**不要让水接触到上面的电子元件！查看以下图示：
- en: '![Figure 4.4 – Capacitive Soil Moisture Sensor in a glass of water'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.4 – 水杯中的电容式土壤湿度传感器'
- en: '](img/Figure_4.4_B16555.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 4.4 – B16555](img/Figure_4.4_B16555.jpg)'
- en: Figure 4.4 – Capacitive Soil Moisture Sensor in a glass of water
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – 水杯中的电容式土壤湿度传感器
- en: 'Let''s have a look at the sensor readings in PuTTY – you can find them in the
    following figure:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 PuTTY 中的传感器读数 – 你可以在以下图中找到它们：
- en: '![Figure 4.5 – Soil sensor readings from inside a glass of water in PuTTY'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.5 – PuTTY 中水杯内部土壤传感器的读数'
- en: '](img/Figure_4.5_B16555.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 4.5 – B16555](img/Figure_4.5_B16555.jpg)'
- en: Figure 4.5 – Soil sensor readings from inside a glass of water in PuTTY
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5 – PuTTY 中水杯内部土壤传感器的读数
- en: This time we take the highest value we can find in PuTTY as our threshold, which
    in my case is **17856**. We have used GPIO pins in all previous chapters, but
    we have not yet used the **Analog Digital Converter**, so let's understand how
    the **Analog Digital Converter** (**ADC**) works on Arduino before we continue
    to write a library for the sensor.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们以 PuTTY 中能找到的最高值作为阈值，在我的情况下是 **17856**。我们已经在所有前面的章节中使用了 GPIO 引脚，但我们还没有使用
    **模拟数字转换器**，所以在我们继续编写传感器库之前，让我们先了解 Arduino 上的 **模拟数字转换器**（**ADC**）是如何工作的。
- en: Understanding ADC in TinyGo
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 TinyGo 中的 ADC
- en: The Arduino UNO ADC has 10-bit precision. The value returned by the `Get()`
    function is of the type `uint16`. So, internally, the `Get()` function tells the
    ADC to scale the 10-bit value to a 16-bit value.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino UNO 的 ADC 有 10 位精度。`Get()` 函数返回的值是 `uint16` 类型。因此，在内部，`Get()` 函数告诉 ADC
    将 10 位值扩展到 16 位。
- en: 'In general, we can use the following equation to get an ADC result:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们可以使用以下方程式来获取 ADC 结果：
- en: '[PRE7]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As we know that the Arduino UNO has 10-bit precision and the voltage is about
    `5V`, we can insert this into the equation to get the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们知道 Arduino UNO 有 10 位精度，电压约为 `5V`，我们可以将这个值代入方程式中，得到以下结果：
- en: '[PRE8]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s say the analog voltage measured is `3.33V`. This will result in the
    following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 假设测量的模拟电压是 `3.33V`。这将导致以下结果：
- en: '[PRE9]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now we do some math equation magic and get this:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们进行一些数学方程式的魔法，得到以下结果：
- en: '[PRE10]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This result will now scale to 16 bits, which equals a bit shift left by 6 bits.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这个结果现在将扩展到 16 位，相当于向左移动 6 位。
- en: 'The result we would get from TinyGo would be like the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 从 TinyGo 获得的结果将如下所示：
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Since we have now discovered how ADC works, we can now continue to write a small
    library that will help us use the sensor later on.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经发现了 ADC 的工作原理，我们现在可以继续编写一个小型库，这将帮助我们稍后使用传感器。
- en: Writing a library for the sensor
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写传感器的库
- en: As having reusable code is a nice thing, we will now go on to write a small
    library, to reuse it in the last part of this chapter, *Watering your plants*.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 由于拥有可重用的代码是一件好事，我们现在将继续编写一个小型库，以便在本书的最后一部分，*浇灌你的植物*中重用它。
- en: 'To do so, we need to create a new folder named `soil-moisture-sensor` inside
    the `Chapter04` folder. In our newly created folder, we create a new empty `driver.go`
    file and name the package `soil`. The structure should now look like the following:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们需要在 `Chapter04` 文件夹内创建一个名为 `soil-moisture-sensor` 的新文件夹。在我们的新文件夹中，我们创建一个新的空
    `driver.go` 文件，并将包命名为 `soil`。现在的结构应该如下所示：
- en: '![Figure 4.6 – Folder structure for soil moisture sensor library'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.6 – 土壤湿度传感器库的文件夹结构'
- en: '](img/Figure_4.6_B16555.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.6_B16555.jpg)'
- en: Figure 4.6 – Folder structure for soil moisture sensor library
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6 – 土壤湿度传感器库的文件夹结构
- en: We want to have an interface that provides a function to get the current `MoistureLevel`,
    instance which will be an enum-like type. Also, we want to provide functionality
    to turn the sensor on and off, so it does not draw current all the time.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望有一个接口，它提供了一个获取当前 `MoistureLevel` 的函数，实例将是一个类似于枚举的类型。此外，我们希望提供功能来打开和关闭传感器，这样它就不会一直消耗电流。
- en: 'To achieve that, perform the following steps:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，执行以下步骤：
- en: 'Define a new interface named `SoilSensor` with `Get()`, `Configure()`, `On()`,
    and `Off()` functions:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个新的名为 `SoilSensor` 的接口，具有 `Get()`、`Configure()`、`On()` 和 `Off()` 函数：
- en: '[PRE12]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Define a new struct named `soilSensor`. This struct is going to contain the
    pin that is being used to turn the sensor on and off and the pin that is being
    used to read the sensor value. Also, we want to be able to configure thresholds
    that are used to identify whether the sensor is completely dry or is in water:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个新的名为 `soilSensor` 的结构体。这个结构体将包含用于打开和关闭传感器的引脚以及用于读取传感器值的引脚。此外，我们希望能够配置用于识别传感器是否完全干燥或处于水中的阈值：
- en: '[PRE13]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add members that save the thresholds for `completelyDry` and `water`:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加保存 `completelyDry` 和 `water` 阈值的成员：
- en: '[PRE14]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Define an enum-like type so we can easily check for these values when using
    the library. We chose six `MoistureLevel`categories here, to have a clear distinction
    between the different states of the soil:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个类似于枚举的类型，以便我们可以在使用库时轻松检查这些值。我们在这里选择了六个 `MoistureLevel` 类别，以便在土壤的不同状态之间有清晰的区分：
- en: '[PRE15]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Define a constructor function that takes `waterThreshold`, `dryThreshold`,
    `dataPin`, and `voltagePin` and returns `SoilSensor`:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个构造函数，它接受 `waterThreshold`、`dryThreshold`、`dataPin` 和 `voltagePin` 并返回 `SoilSensor`：
- en: '[PRE16]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Use the thresholds and create `category`, which will later be used to calculate
    the `category` value. As we want to have six categories, we divide the values
    by six, which have been read from where the sensor lies:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用阈值创建 `category`，稍后用于计算 `category` 值。因为我们希望有六个类别，所以我们把从传感器所在位置读取的值除以六：
- en: '[PRE17]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Set all values and return a pointer to a new instance of `soilSensor`:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置所有值并返回一个指向新 `soilSensor` 实例的指针：
- en: '[PRE18]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Define a new `func` named `Get`, which is in a function receiver to a pointer
    to `soilSensor` and returns `MoistureLevel`:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个新的名为 `Get` 的 `func`，它是一个指向 `soilSensor` 的指针接收器，并返回 `MoistureLevel`：
- en: '[PRE19]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Read the value from `sensor` and save it the new variable value of type `float32`:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `sensor` 读取值并将其保存到新的 `float32` 类型的变量 `value` 中：
- en: '[PRE20]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Check whether the value is greater than or equal to `completelyDryThreshold`:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查值是否大于或等于 `completelyDryThreshold`：
- en: '[PRE21]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Check whether `value` falls into the second category:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 `value` 是否属于第二类别：
- en: '[PRE22]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Check whether `value` falls into the third category:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 `value` 是否属于第三类别：
- en: '[PRE23]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Check whether `value` falls into the fourth category:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 `value` 是否属于第四类别：
- en: '[PRE24]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Check whether `value` falls into the fifth category:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 `value` 是否属于第五类别：
- en: '[PRE25]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The only remaining possible state is `Water`, so we use the default case here:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 剩下的唯一可能状态是 `Water`，所以我们在这里使用默认情况：
- en: '[PRE26]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Define a function named `Configure` that has a function receiver for a pointer
    of `soilSensor`. We use a pointer receiver as we set values on the `soilSensor`
    instance, which we would otherwise lose outside of this function scope:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为 `Configure` 的函数，它有一个指向 `soilSensor` 的指针接收器。我们使用指针接收器，因为我们会在 `soilSensor`
    实例上设置值，否则我们将在函数作用域之外丢失这些值：
- en: '[PRE27]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Configure `dataPin` for ADC usage:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 ADC 使用配置 `dataPin`：
- en: '[PRE28]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Configure the `voltage` pin as output and set it to `Low`:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `voltage` 引脚配置为输出并将其设置为 `Low`：
- en: '[PRE29]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Add a function to turn on the voltage:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个函数来打开电压：
- en: '[PRE30]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Add a function to turn off the voltage:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个函数来关闭电压：
- en: '[PRE31]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This is the complete logic we need for our library. Let's test our code in the
    next section.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们需要为我们的库提供的完整逻辑。让我们在下一节测试我们的代码。
- en: Testing the library
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试库
- en: 'Next, we will write an example to test the new library. To do so, we need to
    create a new folder named `soil-moisture-sensor-example` inside the `Chapter04`
    folder and create a `main.go` file with an empty `main()` function inside. Your
    project structure should now look like the following:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将编写一个示例来测试新的库。为此，我们需要在 `Chapter04` 文件夹内创建一个名为 `soil-moisture-sensor-example`
    的新文件夹，并在其中创建一个包含空 `main()` 函数的 `main.go` 文件。现在，您的项目结构应该如下所示：
- en: '![Figure 4.7 – Testing the soil moisture sensor library'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.7 – 测试土壤湿度传感器库'
- en: '](img/Figure_4.7_B16555.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.7](img/Figure_4.7_B16555.jpg)'
- en: Figure 4.7 – Testing the soil moisture sensor library
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.7 – 测试土壤湿度传感器库
- en: 'To test our new library, follow these steps:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试我们的新库，请按照以下步骤操作：
- en: 'Import the `machine`, `time`, and `soil-moisture-sensor` packages as shown
    in the following code. Note that the path to your library will be a bit different,
    depending on where it lies on your filesystem:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下代码导入 `machine`、`time` 和 `soil-moisture-sensor` 包。请注意，你的库路径将根据它在文件系统中的位置而略有不同：
- en: '[PRE32]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Inside the `main` function, initialize the ADC interface:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main` 函数内部，初始化ADC接口：
- en: '[PRE33]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Create a new instance of `SoilSensor`. The values in this example differ slightly
    from the ones measured in the last example. These values tend to trigger the `Water`
    and `CompletelyDry` states earlier:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `SoilSensor` 的新实例。在这个例子中，这些值与上一个例子中测量的值略有不同。这些值倾向于更早地触发 `Water` 和 `CompletelyDry`
    状态：
- en: '[PRE34]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now we call the `Configure` function, which initializes our pins:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们调用 `Configure` 函数，该函数初始化我们的引脚：
- en: '[PRE35]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Start an endless loop and turn on the sensor, and wait a brief moment to let
    the readings stabilize a bit:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始一个无限循环，打开传感器，并稍等片刻，让读数稳定一下：
- en: '[PRE36]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Then switch over the result from the `Get()` function and print a string depending
    on the case:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将 `Get()` 函数的结果切换过来，并根据情况打印一个字符串：
- en: '[PRE37]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Turn the sensor off again and wait a second until the next reading starts:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次关闭传感器，等待一秒钟，直到下一次读取开始：
- en: '[PRE38]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'As we now have the complete code to test our library, let''s flash it onto
    our Arduino and let''s check the output in PuTTY. Use the following command to
    flash it:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了测试库的完整代码，让我们将其烧录到我们的Arduino上，并在PuTTY中检查输出。使用以下命令进行烧录：
- en: '[PRE39]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The best thing to do now is to actually put the sensor in very dry soil while
    having an eye on the readings. Then add some water, to check whether you will
    see the `Wet`, `Very Wet`, and maybe the `Water` states. Before we continue with
    the next section, we should definitely check it. If the readings seem odd, try
    to adjust the thresholds, which are handled in the library in the `NewSoilSensor`
    function.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在最好的做法是将传感器放入非常干燥的土壤中，同时关注读数。然后加一些水，检查你是否会看到 `Wet`、`Very Wet` 和可能还有 `Water`
    状态。在我们继续下一节之前，我们绝对应该检查它。如果读数看起来很奇怪，尝试调整阈值，这些阈值在库中的 `NewSoilSensor` 函数中处理。
- en: Note
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Keep in mind that you could harm plants by pouring too much water into the soil.
    Also, it is not necessary to stick the sensor all the way down into the soil until
    it reaches the white line. I suggest leaving some air between the white line and
    the soil so you have some buffer between the electronics and the soil. When I
    did my testing, I achieved good results when having about 1 cm of air as a buffer.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，如果你往土壤中倒太多水，可能会伤害植物。此外，没有必要将传感器完全插入土壤直到达到白色线。我建议在白色线和土壤之间留一些空气，这样你就有一些缓冲区在电子元件和土壤之间。在我进行测试时，当有大约1厘米的空气作为缓冲时，我得到了良好的结果。
- en: We have now learned how to calibrate the Capacitive Soil Moisture sensor, used
    the ADC interface for the first time, and written a new library. Using this library,
    we are able to tell the humidity state of the soil. In the next section, we are
    going to learn how to use a water level sensor.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经学会了如何校准电容式土壤湿度传感器，第一次使用ADC接口，并编写了一个新的库。使用这个库，我们能够判断土壤的湿度状态。在下一节中，我们将学习如何使用水位传感器。
- en: Reading water level sensor data
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取水位传感器数据
- en: 'As we plan to have a water tank later in the chapter, it will be beneficial
    to have a water level sensor, so we can tell when the tank is empty. We''ll start
    off by adding the sensor to our existing circuit. Follow these steps to do so:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在本章后面计划有一个水罐，所以有一个水位传感器将很有用，这样我们就可以知道水罐是否已空。我们将首先将传感器添加到现有的电路中。按照以下步骤进行操作：
- en: Connect pin *A4* from the Arduino with *F22* on the breadboard using a jumper
    cable.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线电缆将Arduino的 *A4* 引脚与面包板上的 *F22* 连接。
- en: Connect pin *D3* from the Arduino with *F21* on the breadboard using a jumper
    cable.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线电缆将Arduino的 *D3* 引脚与面包板上的 *F21* 连接。
- en: Connect *J22* on the breadboard with the *S* (Signal) port on the sensor using
    a jumper cable.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将面包板上的 *J22* 连接到传感器的 *S*（信号）端口，使用跳线电缆。
- en: Connect *J21* on the breadboard with the *+* (*VCC*) port on the sensor using
    a jumper cable.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将面包板上的 *J21* 连接到传感器的 *+*（*VCC*）端口，使用跳线电缆。
- en: Connect *- GND* from the sensor with *GND* on the power bus.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将传感器的 *- GND* 连接到电源总线上的 *GND*。
- en: 'The result should now look like the following figure:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 结果现在应该看起来像以下图所示：
- en: '![Figure 4.8 – Water level sensor – image is taken from Fritzing'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.8 – 水位传感器 – 图片来自 Fritzing'
- en: '](img/Figure_4.8_B16555.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_4.8_B16555.jpg]'
- en: Figure 4.8 – Water level sensor – image is taken from Fritzing
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 4.8 – 水位传感器 – 图片来自 Fritzing
- en: After assembling this, we can continue to also create a small library for this
    sensor.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 组装好这个之后，我们还可以继续为这个传感器创建一个小型库。
- en: Writing a water level sensor library
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写水位传感器库
- en: 'There are many different types of water level sensors. The cheap ones that
    are often part of Arduino Starter Kits often suffer from corrosion. To prevent
    that, we are going to also add the possibility to turn it on and off. But first,
    we are going to have a look at the technical data:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 水位传感器有很多不同的类型。那些经常作为 Arduino 入门套件一部分的廉价传感器往往容易生锈。为了防止这种情况，我们将添加开启和关闭的可能性。但在那之前，我们将先看看技术数据：
- en: '**Operating voltage**: 5 V'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作电压**：5 V'
- en: '**Operating current**: Less than 20 mA'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作电流**：小于20 mA'
- en: '**Working temperature**: 10° to 30°'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作温度**：10°至30°'
- en: So, having this sensor draws less than 20 mA current. We can again use a *GPIO*
    pin to power it.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，拥有这个传感器时，电流消耗小于20 mA。我们可以再次使用一个 *GPIO* 引脚来供电。
- en: 'We start by creating a new folder named `water-level-sensor` inside the `Chapter04`
    folder. Inside the new folder, create a new file named `driver.go` and name the
    package `waterlevel`. The folder structure should now look like the following:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在 `Chapter04` 文件夹内创建一个名为 `water-level-sensor` 的新文件夹。在新文件夹内，创建一个名为 `driver.go`
    的新文件，并将包命名为 `waterlevel`。文件夹结构现在应该如下所示：
- en: '![Figure 4.9 – Folder structure for water level sensor library'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.9 – 水位传感器库的文件夹结构'
- en: '](img/Figure_4.9_B16555.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_4.9_B16555.jpg]'
- en: Figure 4.9 – Folder structure for water level sensor library
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 4.9 – 水位传感器库的文件夹结构
- en: 'As the project structure is now set up, we can go on to implement the actual
    library. Just follow these steps:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 由于项目结构现在已经设置好，我们可以继续实现实际的库。只需按照以下步骤操作：
- en: 'Import the `machine` package:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 `machine` 包：
- en: '[PRE40]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Define a new interface named `WaterLevel` with the following functions. The
    functions are going to be explained when we implement them:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为 `WaterLevel` 的新接口，包含以下函数。函数将在我们实现它们时进行解释：
- en: '[PRE41]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Define a struct named `waterLevel` with the following members:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为 `waterLevel` 的结构体，包含以下成员：
- en: '[PRE42]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Define a new constructor-like function that takes `dryThreshold`, `dataPin`,
    and `voltagePin`:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个新的类似于构造函数的函数，它接受 `dryThreshold`、`dataPin` 和 `voltagePin`：
- en: '[PRE43]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Add the `IsEmpty` check. We''ll just check whether the sensor reading is lower
    than our threshold:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `IsEmpty` 检查。我们将检查传感器读数是否低于我们的阈值：
- en: '[PRE44]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Configure the sensor pin for ADC usage and configure the voltage pin as output:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置传感器引脚用于 ADC 使用，并将电压引脚配置为输出：
- en: '[PRE45]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Turn the power on:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开电源：
- en: '[PRE46]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Turn the power off:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭电源：
- en: '[PRE47]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: We have now written the library for the water level sensor.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经编写了水位传感器的库。
- en: Testing the library
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试库
- en: 'Now let''s write a small example program to test our library. To do so, we
    start by creating a new folder named `water-level-sensor-example` inside the `Chapter04`
    folder. Inside the new folder, create a new `main.go` file with an empty `main`
    function inside. The folder structure should now look like the following:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们编写一个小型示例程序来测试我们的库。为此，我们首先在 `Chapter04` 文件夹内创建一个名为 `water-level-sensor-example`
    的新文件夹。在新文件夹内，创建一个名为 `main.go` 的新文件，并在其中创建一个空的 `main` 函数。文件夹结构现在应该如下所示：
- en: '![Figure 4.10 – Folder structure for testing the library'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.10 – 测试库的文件夹结构'
- en: '](img/Figure_4.10_B16555.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_4.10_B16555.jpg]'
- en: Figure 4.10 – Folder structure for testing the library
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 4.10 – 测试库的文件夹结构
- en: 'As the project structure is now set up, we can go on to write the test code.
    To do so, follow these steps:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 由于项目结构现在已经设置好，我们可以继续编写测试代码。为此，请按照以下步骤操作：
- en: 'Initialize the ADC interface:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化 ADC 接口：
- en: '[PRE48]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Create a new instance of `WaterLevelSensor`:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `WaterLevelSensor` 的新实例：
- en: '[PRE49]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Configure the pins:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置引脚：
- en: '[PRE50]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'We turn the sensor on and then wait a brief moment to let the readings of the
    sensor stabilize before we access it. Then, print the result of `IsEmpty()` every
    second:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们打开传感器，然后等待一小段时间，让传感器的读数稳定下来，然后再访问它。然后，每秒打印 `IsEmpty()` 的结果：
- en: '[PRE51]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: When the water level sensor does not touch any water, the returned value should
    be `0`. We chose `7000` as `dryThreshold` in this case, so the tip of the sensor
    can be inside the water and still be able to tell us it's empty. That will be
    useful later on, in the case when we also need to pump water. This is for when
    the pump should not run when there is not enough water to pump. We should play
    around with this threshold value a bit. Do so by flashing the program to your
    Arduino, check the water presence with the sensor, and when it realizes that there
    is water, change the threshold value and flash again.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 当水位传感器未接触任何水时，返回值应为 `0`。在这种情况下，我们选择了 `7000` 作为 `dryThreshold`，这样传感器的尖端可以在水中，同时仍然能够告诉我们它是空的。这将在我们还需要抽水的情况下很有用。这是当水泵没有足够的水可抽时不应运行的情况。我们应该对这个阈值值进行一些调整。通过将程序烧录到
    Arduino 上，使用传感器检查水的存在，当它意识到有水时，更改阈值值并再次烧录。
- en: 'Flash the program by using the following command:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令烧录程序：
- en: '[PRE52]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: So we now have written a library that checks whether any kind of water tank
    is empty. In the next section, we are going to use a buzzer to have an audio signal
    when the water tank is empty.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们现在已经编写了一个库，该库可以检查任何类型的水箱是否为空。在下一节中，我们将使用蜂鸣器在水箱为空时发出音频信号。
- en: Controlling a buzzer
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制蜂鸣器
- en: 'We are going to write a very simple buzzer library. We only want the buzzer
    to make any sound, regardless of the pitch. We start off by adding the buzzer
    to the circuit. To do so, follow these steps:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要编写一个非常简单的蜂鸣器库。我们只想让蜂鸣器发出声音，而不考虑音调。我们首先将蜂鸣器添加到电路中。为此，请按照以下步骤操作：
- en: Connect *D4* from the Arduino to *A31* on the breadboard using a jumper wire.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将 Arduino 的 *D4* 引脚连接到面包板上的 *A31*。
- en: Use a *100* Ohm resistor to connect *E31* with *G31* on the breadboard.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用一个 *100* 欧姆电阻将 *E31* 连接到面包板上的 *G31*。
- en: Connect the *VCC* pin from the buzzer with *J31*.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将蜂鸣器的 *VCC* 引脚连接到 *J31*。
- en: Connect the *GND* pin to *GND* on the power bus.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 *GND* 引脚连接到电源总线上的 *GND*。
- en: 'The circuit should now look like the following figure:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 电路现在应如下所示：
- en: '![Figure 4.11 – Buzzer – image taken from Fritzing'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.11 – 蜂鸣器 – 图片来自 Fritzing'
- en: '](img/Figure_4.11_B16555.jpg)'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.11_B16555.jpg)'
- en: Figure 4.11 – Buzzer – image taken from Fritzing
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.11 – 蜂鸣器 – 图片来自 Fritzing
- en: As we have now added the buzzer to the circuit, we can now start to write our
    library.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经将蜂鸣器添加到电路中，我们现在可以开始编写我们的库。
- en: Writing a buzzer library
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写蜂鸣器库
- en: 'The buzzer library will have two functions: `Configure()`, which sets up the
    pin, and the `Beep()` function, which will make the sound.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 蜂鸣器库将有两个函数：`Configure()`，用于设置引脚，以及 `Beep()` 函数，用于发出声音。
- en: 'We start off by creating a new folder named `buzzer` inside the `Chapter04`
    folder. Inside the new folder, create a file named `driver.go` and name the package
    `buzzer`. The project structure should now look like the following:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在 `Chapter04` 文件夹内创建一个名为 `buzzer` 的新文件夹。在新文件夹内，创建一个名为 `driver.go` 的文件，并将包命名为
    `buzzer`。项目结构现在应如下所示：
- en: '![FIgure 4.12 – Project structure for buzzer library'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.12 – 蜂鸣器库的项目结构'
- en: '](img/Figure_4.12_B16555.jpg)'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.12_B16555.jpg)'
- en: FIgure 4.12 – Project structure for buzzer library
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.12 – 蜂鸣器库的项目结构
- en: 'Now follow these steps to implement the driver:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 现在按照以下步骤实现驱动程序：
- en: 'Define an interface named `Buzzer` that has a `Configure` function and a `Beep`
    function:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为 `Buzzer` 的接口，它具有 `Configure` 函数和 `Beep` 函数：
- en: '[PRE53]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Create a `struct` named `buzzer` that holds `machine.Pin`:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `buzzer` 的 `struct`，它包含 `machine.Pin`：
- en: '[PRE54]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Add a function named `NewBuzzer` that returns `Buzzer`:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `NewBuzzer` 的函数，它返回 `Buzzer`：
- en: '[PRE55]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Add a function named `Configure` that configures `pin` as output:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `Configure` 的函数，用于将 `pin` 配置为输出：
- en: '[PRE56]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Define a function named `Beep`, which takes `time.Duration` and `amount` of
    the `uint8` type as parameters:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为 `Beep` 的函数，它接受 `time.Duration` 和 `amount` 的 `uint8` 类型的参数：
- en: '[PRE57]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Loop the amount of times and let the buzzer beep and sleep in between:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 循环指定次数，让蜂鸣器发出蜂鸣声并在其间休眠：
- en: '[PRE58]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: That is all for the buzzer library.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 蜂鸣器库的所有内容到此为止。
- en: Now we are going to test the library with a small example project.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用一个小型示例项目来测试这个库。
- en: 'To do so, we first create a new folder named `buzzer-example` inside the `Chapter04`
    folder. Inside the new folder, create a new `main.go` file with an empty `main()`
    function in it. The project structure should now look like the following:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，我们首先在 `Chapter04` 文件夹内创建一个名为 `buzzer-example` 的新文件夹。在新文件夹内，创建一个新的 `main.go`
    文件，并在其中包含一个空的 `main()` 函数。项目结构现在应如下所示：
- en: '![Figure 4.13 – Testing the buzzer'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.13 – 测试蜂鸣器'
- en: '](img/Figure_4.13_B16555.jpg)'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_4.13_B16555.jpg](img/Figure_4.13_B16555.jpg)'
- en: Figure 4.13 – Testing the buzzer
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.13 – 测试蜂鸣器
- en: 'Now put the following inside the `main` function:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将以下内容放入 `main` 函数中：
- en: 'Get a new instance of `buzzer` and configure it:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取一个新的 `buzzer` 实例并配置它：
- en: '[PRE59]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Loop forever, beep three times for `100` milliseconds, and then sleep for `3`
    seconds:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无限循环，蜂鸣器响三次，每次 100 毫秒，然后休眠 3 秒：
- en: '[PRE60]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'That''s all the code we need to test the buzzer. To try this example, flash
    it by using the following command:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们测试蜂鸣器所需的全部代码。要尝试此示例，请使用以下命令进行烧录：
- en: '[PRE61]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: When the program runs, you should be able to hear the buzzer. If it does not
    start to make a sound after a brief amount of time, check all the cables and pins
    again.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序运行时，你应该能够听到蜂鸣器响。如果在一段时间后它没有开始发声，请再次检查所有电缆和引脚。
- en: We have now successfully written a very simple buzzer library and tested it
    using an example project. In the next section, we are going to control a pump.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经成功编写了一个非常简单的蜂鸣器库，并使用一个示例项目进行了测试。在下一节中，我们将控制一个泵。
- en: Controlling a pump
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制一个泵
- en: As pumps tend to draw more current than simple sensors, we are not going to
    power the pump directly through a *GPIO* port. Drawing too much current could
    permanently damage the Arduino. So, we will use an external power supply and a
    relay to power the pump. Before we start assembling the circuit, let's have a
    brief look at how relays work.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 由于泵比简单的传感器消耗的电流更多，我们不会直接通过 *GPIO* 端口为泵供电。过大的电流可能会永久损坏 Arduino。因此，我们将使用外部电源和一个继电器来为泵供电。在我们开始组装电路之前，让我们简要了解一下继电器的工作原理。
- en: Working with relays
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用继电器进行工作
- en: 'A relay that is used for microcontroller projects typically comes mounted on
    a board, which typically has six ports. It has three input ports: *VCC*, *GND*,
    and *Signal*. It also has three output ports: *normally open*, *common*, and *normally
    closed*.'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 用于微控制器项目的继电器通常安装在板上，板上通常有六个端口。它有三个输入端口：*VCC*、*GND* 和 *信号*。它也有三个输出端口：*常开*、*公共*
    和 *常闭*。
- en: When a *high signal* is given, the current flows between *normally open* and
    *common*.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 当提供一个 *高信号* 时，电流在 *常开* 和 *公共* 之间流动。
- en: When a *low signal* is given, the current flows between *normally closed* and
    *common*.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 当提供一个 *低信号* 时，电流在 *常闭* 和 *公共* 之间流动。
- en: 'As we now know how to use a relay, we can continue to add the new components
    to our circuit. To do so, follow these steps:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经知道如何使用继电器，我们可以继续将新组件添加到电路中。为此，请按照以下步骤操作：
- en: Connect the *GND* pin from the relay to *GND* on the power bus using a jumper
    wire.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将继电器的 *GND* 引脚连接到电源总线上的 *GND*。
- en: Connect the *VCC* pin from the relay to *VCC* on the power bus using a jumper
    wire.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将继电器的 *VCC* 引脚连接到电源总线上的 *VCC*。
- en: Connect the *Signal* (in) pin from the relay to *D5* on the Arduino using a
    jumper wire.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将继电器的 *信号*（输入）引脚连接到 Arduino 的 *D5*。
- en: Connect the *VCC* pin of the pump to the *normally open* port on the relay.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将泵的 *VCC* 引脚连接到继电器的 *常开* 端口。
- en: Connect the *GND* pin of the pump to *GND* on the power bus.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将泵的 *GND* 引脚连接到电源总线上的 *GND*。
- en: Connect the *common* pin of the relay with the *VCC* lane on the power bus.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将继电器的 *公共* 引脚与电源总线的 *VCC* 通道连接。
- en: Connect *VIN* from the Arduino to *VCC* on the power bus using a jumper wire.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将 Arduino 的 *VIN* 连接到电源总线上的 *VCC*。
- en: 'Your circuit should now look similar to the one in the following figure:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 您的电路现在应该看起来与以下图中的类似：
- en: '![Figure 4.14 – Full circuit including a pump – image taken from Fritzing'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.14 – Full circuit including a pump – image taken from Fritzing](img/Figure_4.14_B16555.jpg)'
- en: '](img/Figure_4.14_B16555.jpg)'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_4.14_B16555.jpg](img/Figure_4.14_B16555.jpg)'
- en: Figure 4.14 – Full circuit including a pump – image taken from Fritzing
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.14 – 包含泵的完整电路 – 图来自 Fritzing
- en: With this circuit, we will be able to power the Arduino using an external power
    supply. As we might want to water plants that are not anywhere near a USB port,
    we have connected the *VIN* pin on the Arduino with the *VCC* lane on the power
    bus, which is powered by our external power supply. We will now go on and write
    a library that is able to control the pump.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个电路，我们将能够使用外部电源为 Arduino 供电。由于我们可能需要给远离 USB 端口的地方的植物浇水，我们已经将 Arduino 的 *VIN*
    引脚与电源总线的 *VCC* 通道连接，该通道由我们的外部电源供电。现在我们将继续编写一个能够控制泵的库。
- en: Writing a pump library
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写一个泵库
- en: 'The pump library is basically going to have two functions: `Configure`, which
    sets up the pin, and the `Pump` function, which pumps for a given duration and
    a given number of iterations.'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 泵库基本上将有两个功能：`Configure`，用于设置引脚，以及 `Pump` 功能，用于在给定的时间和迭代次数内泵水。
- en: 'We start by creating a new folder named `pump` inside the `Chapter04` folder.
    Inside the new folder, create a `driver.go` file and name the package `pump`.
    The project structure should now look like the following:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: '![FIgure 4.15 – Project structure for pump library'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.15_B16555.jpg)'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: FIgure 4.15 – Project structure for pump library
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, as we have set up the project structure, we can go on to write the code
    to control the pump. To do so, follow these steps:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the interface named `Pump`, which has the `Configure` or `Pump` functions:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Define a new `struct` named `pump` that holds `machine.Pin`:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Define a function named `NewPump` that takes `machine.Pin` and returns a new
    pointer to `pump`:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Then define a function named `Configure` and set `pin` as the output pin:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Next, define a function named `Pump` and loop it `iterations` times, to set
    `pin` to `high`, sleep for `duration`, and set it back to `low` again:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'This was everything we need for our `pump` library. We could now go on and
    create a small example project to test the library. To do so, we''ll create a
    new folder named `pump-example` inside the `Chapter04` folder and create a `main.go`
    file with an empty `main` function inside. The project structure should now look
    like the following:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.16 – Testing the pump'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.16_B16555.jpg)'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.16 – Testing the pump
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `main` function, we add the following:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new instance of `pump` by calling the `NewPump` function and hand
    in `machine.D5` as `pin`:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Loop forever and `pump 3` times for `350` milliseconds and `sleep` for `30`
    seconds afterward, as follows:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: This is the complete example code to try out our pump.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: Due to the laws of physics being the way they are, I would recommend that a
    possible receiving container should always be placed above the upper water level
    of the source container since the water will continue to flow even though the
    pump stopped pumping.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: 'Now put your pump in a glass of water or some other water tank and try it out
    by flashing the program using the following command:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Use this example to find out good pump duration and iteration times that don't
    pump too much water. Keep in mind that we want to water plants, so this is going
    to help us find good values.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: This was the last component we needed. We have learned how to use a relay to
    power and control a pump and we wrote a new library. We are now going to put everything
    together in the next section.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: Watering your plants
  id: totrans-336
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are now going to utilize every component we created in the past sections.
    Putting everything together, we will be building a completely automated plant
    watering system.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: 'To start off, we need to create a new folder named `plant-watering-system`
    inside the `Chapter04` folder. Inside the new folder, create a new `main.go` file
    with an empty `main()` function inside. The final project structure should now
    look like the following:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.17 – Project structure for plant watering system'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.17_B16555.jpg)'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.17 – Project structure for plant watering system
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.17 – 植物灌溉系统项目结构
- en: 'Now, inside the `main` function, follow these steps:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`main`函数中，按照以下步骤操作：
- en: 'Initialize the `ADC` interface:'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化`ADC`接口：
- en: '[PRE70]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Initialize a new `soilSensor`:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个新的`soilSensor`：
- en: '[PRE71]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Initialize a new `waterLevelSensor`:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个新的`waterLevelSensor`：
- en: '[PRE72]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Initialize a new `pump`:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个新的`pump`：
- en: '[PRE73]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Initialize a new `buzzer`:'
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个新的`buzzer`：
- en: '[PRE74]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Turn `waterLevelSensor` on and sleep for a brief amount so the readings can
    stabilize:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`waterLevelSensor`并短暂睡眠，以便读数稳定：
- en: '[PRE75]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Check whether the water container is empty, turn the sensor off, beep 3 times,
    and then sleep for an hour, before continuing the `for` loop:'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在继续`for`循环之前，检查水容器是否为空，关闭传感器，蜂鸣三次，然后睡眠一小时：
- en: '[PRE76]'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'If the water container is not empty, turn off `waterLevelSensor`:'
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果水容器不为空，关闭`waterLevelSensor`：
- en: '[PRE77]'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Turn on `soilSensor` and sleep for a brief amount of time to let the readings
    stabilize:'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`soilSensor`并短暂睡眠，以便让读数稳定：
- en: '[PRE78]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Then switch over the result of `soilSensor.Get()`:'
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后切换`soilSensor.Get()`的结果：
- en: '[PRE79]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'If the soil is `VeryDry` or `CompletelyDry`, turn off the soil sensor and pump
    water:'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果土壤是`非常干燥`或`完全干燥`，关闭土壤传感器并浇水：
- en: '[PRE80]'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'In all other cases, turn off `soilSensor` and sleep for an hour:'
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在所有其他情况下，关闭`soilSensor`并睡眠一小时：
- en: '[PRE81]'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'This is everything we need for this final project. You can try out the program
    by flashing it onto your Arduino using the following command:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们这个最终项目所需的一切。您可以通过以下命令将程序烧录到您的Arduino上以尝试程序：
- en: '[PRE82]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Important note
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 重要注意事项
- en: Keep in mind that every plant has other needs in terms of water. So, we will
    need to tweak the values for the amount of water pumped to fit the needs of the
    plant being watered.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，每种植物对水的需求都不同。因此，我们需要调整泵水量以适应被灌溉的植物的需求。
- en: We have now successfully built a complete automated plant watering system and
    flashed it onto the Arduino.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经成功构建了一个完整的自动植物灌溉系统，并将其烧录到Arduino上。
- en: Summary
  id: totrans-372
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to read sensor values using the ADC interface.
    We also learned how the ADC interface translates voltage to digital values, and
    then we utilized this knowledge to write the `soil moisture sensor` library.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用ADC接口读取传感器值。我们还学习了ADC接口如何将电压转换为数字值，然后我们利用这些知识编写了`土壤湿度传感器`库。
- en: We then wrote the `water level sensor` library by utilizing the knowledge we
    gathered in the first project of this chapter. Then we learned how to use a **buzzer**
    and wrote a very simple library that enables us to let a buzzer create warning
    sounds. After that, we learned how relays work and utilized this knowledge to
    control a **pump** using a library we wrote. At the end of this chapter, we put
    all the libraries in a single project and only had to add a small amount of control
    logic to build the automatic plant watering system.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后利用在第一章的第一个项目中收集到的知识编写了`水位传感器`库。然后我们学习了如何使用**蜂鸣器**，并编写了一个非常简单的库，使我们能够让蜂鸣器发出警告声音。之后，我们学习了继电器的工作原理，并利用这些知识通过我们编写的库来控制**水泵**。在本章的最后，我们将所有库合并到一个项目中，并且只需要添加少量控制逻辑来构建自动植物灌溉系统。
- en: In the next chapter, we are going to learn how to use supersonic sensors and
    how to control seven-segment displays.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用超声波传感器以及如何控制七段显示器。
- en: Questions
  id: totrans-376
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Why are the water level sensor and soil moisture sensor not permanently powered?
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么水位传感器和土壤湿度传感器不永久供电？
- en: When is the circuit between *normally open* and *GND* closed in a relay?
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在继电器中，电路在*常开*和*GND*之间何时闭合？
- en: References
  id: totrans-379
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'The Capacitive Soil Moisture Sensor fritzing part was part of a collection
    from the following repository: [https://github.com/OgreTransporter/fritzing-parts-extra](https://github.com/OgreTransporter/fritzing-parts-extra)'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 电容式土壤湿度传感器的fritzing部分来自以下存储库的集合：[https://github.com/OgreTransporter/fritzing-parts-extra](https://github.com/OgreTransporter/fritzing-parts-extra)
