["```go\n    \"tinygo.org/x/drivers/hd44780i2c\"\n    ```", "```go\n    machine.I2C0.Configure(machine.I2CConfig{\n        Frequency: machine.TWI_FREQ_400KHZ,\n    })\n    ```", "```go\n    lcd := hd44780i2c.New(machine.I2C0, 0x27)\n    ```", "```go\n    lcd.Configure(hd44780i2c.Config{\n        Width: 16, \n        Height: 2, \n    })\n    ```", "```go\n    lcd.Print([]byte(\" Hello World \\n LCD 16x02\"))\n    ```", "```go\n    tinygo flash --target=arduino-nano33 Chapter6/hd44780-text-display/main.go\n    ```", "```go\ntime.Sleep(5 * time.Second)\nlcd.Print([]byte(\"We just print more text, to see what \n    happens, when we overflow the 16x2 character limit\"))\n```", "```go\n    time.Sleep(5 * time.Second)\n    animation(lcd)\n    ```", "```go\n    func animation(lcd hd44780i2c.Device) {\n    ```", "```go\n    text := []byte(\" Hello World \\n Sent by \\n Arduino \n        Nano \\n 33 IoT \\n powered by \\n TinyGo\")\n    ```", "```go\n    lcd.ClearDisplay()\n    ```", "```go\n    for {\n        for i := range text {\n            lcd.Print([]byte(string(text[i])))\n            time.Sleep(150 * time.Millisecond)\n        }\n    ```", "```go\n    time.Sleep(2 * time.Second)\n    lcd.ClearDisplay()\n    }\n    }\n    ```", "```go\n    const carriageReturn = 0x0D\n    ```", "```go\n    var (\n        uart = machine.UART0\n    )\n    ```", "```go\n    machine.I2C0.Configure(machine.I2CConfig{\n        Frequency: machine.TWI_FREQ_400KHZ,\n    })\n    lcd := hd44780i2c.New(machine.I2C0, 0x27) // some \n                            // modules have address 0x3F\n    err := lcd.Configure(hd44780i2c.Config{\n            Width: 16, // required\n            Height: 2, // required\n            CursorOn: false,\n            CursorBlink: false,\n    })\n    if err != nil {\n        println(\"failed to configure display\")\n    }\n    ```", "```go\n    lcd.Print([]byte(\" Type to print \"))\n    ```", "```go\n    hadInput := false\n    ```", "```go\n    for {\n        if uart.Buffered() == 0 {\n            continue\n        }\n    ```", "```go\n    if !hadInput {\n        hadInput = true\n        lcd.ClearDisplay()\n    }\n    ```", "```go\n    data, err := uart.ReadByte()\n    if err != nil {\n        println(err.Error())\n    }\n    ```", "```go\n    if data == carriageReturn {\n        lcd.Print([]byte(\"\\n\"))\n        uart.Write([]byte(\"\\r\\n\"))\n        continue\n    }\n    ```", "```go\n    lcd.Print([]byte{data})\n    uart.WriteByte(data)\n    }\n    }\n    ```", "```go\ntinygo  flash –target=arduino-nano33 Chapter06/hd44780-user-input/main.go\n```", "```go\n    const (\n        carriageReturn = 0x0D\n        homeCommand = \"#home\"\n        clearCommand = \"#clear\"\n    )\n    ```", "```go\n    var (\n        uart = machine.UART0\n    )\n    ```", "```go\n    machine.I2C0.Configure(machine.I2CConfig{\n        Frequency: machine.TWI_FREQ_400KHZ,\n    })\n    lcd := hd44780i2c.New(machine.I2C0, 0x27) \n    err := lcd.Configure(hd44780i2c.Config{\n          Width: 16,\n          Height: 2,\n          CursorOn: false,\n          CursorBlink: false,\n    })\n    if err != nil {\n    println(\"failed to configure display\")\n    }\n    ```", "```go\n    homeScreen(lcd)\n    ```", "```go\n    var commandBuffer string\n    ```", "```go\n    var commandIndex uint8\n    ```", "```go\n    commandStart := false\n    ```", "```go\n    hadInput := false\n    ```", "```go\n    for {\n        if uart.Buffered() == 0 {\n            continue\n    }\n    ```", "```go\n    if !hadInput {\n        hadInput = true\n        clearDisplay(lcd)\n    }\n    ```", "```go\n    data, err := uart.ReadByte()\n    if err != nil {\n        println(err.Error())\n    }\n    ```", "```go\n    if string(data) == \"#\" {\n        commandStart = true\n        uart.Write([]byte(\"\\ncommand started\\n\"))\n    }\n    ```", "```go\n    if commandStart {\n        commandBuffer += string(data)\n        commandIndex++\n    }\n    ```", "```go\n    switch commandBuffer {\n    ```", "```go\n    case homeCommand:\n        uart.WriteByte(data)\n        homeScreen(lcd)\n        commandStart = false\n        commandIndex = 0\n        commandBuffer = \"\"\n        continue\n    ```", "```go\n    case clearCommand:\n        uart.WriteByte(data)\n        clearDisplay(lcd)\n        commandStart = false\n        commandIndex = 0\n        commandBuffer = \"\"\n        continue\n    }\n    ```", "```go\n    if commandIndex > 5 {\n        commandStart = false\n        commandIndex = 0\n        commandBuffer = \"\"\n        uart.Write([]byte(\"\\nresetting command state\\n\"))\n    }\n    ```", "```go\n    if data == carriageReturn {\n        lcd.Print([]byte(\"\\n\"))\n        uart.Write([]byte(\"\\r\\n\"))\n        continue\n    }\n    ```", "```go\n    lcd.Print([]byte{data})\n    uart.WriteByte(data)\n    }\n    ```", "```go\n    func homeScreen(lcd hd44780i2c.Device) {\n        println(\"\\nexecuting command homescreen\\n\")\n        clearDisplay(lcd)\n        lcd.Print([]byte(\" TinyGo UART \\n CLI \"))\n    }\n    ```", "```go\n    func clearDisplay(lcd hd44780i2c.Device) {\n        println(\"\\nexecuting command cleardisplay\\n\")\n        lcd.ClearDisplay()\n    }\n    ```", "```go\ntinygo flash –target=arduino-nano33 Chapter06/hd44780-cli\n```", "```go\n\"tinygo.org/x/drivers/st7735\"\n\"tinygo.org/x/tinydraw\"\n\"tinygo.org/x/tinyfont\"\n\"tinygo.org/x/tinyfont/freemono\"\n```", "```go\n    var (\n        white = color.RGBA{255, 255, 255, 255}\n        red = color.RGBA{255, 0, 0, 255}\n        blue = color.RGBA{0, 0, 255, 255}\n        green = color.RGBA{0, 255, 0, 255}\n        black = color.RGBA{0, 0, 0, 255}\n    )\n    ```", "```go\n    machine.SPI0.Configure(machine.SPIConfig{\n        Frequency: 12000000,\n    })\n    ```", "```go\n    resetPin := machine.D6\n    dcPin := machine.D5\n    csPin := machine.D7\n    backLightPin := machine.D2\n    ```", "```go\n    display := st7735.New(machine.SPI0, resetPin, dcPin, \n        csPin, backLightPin)\n    ```", "```go\n    display.Configure(st7735.Config{})\n    ```", "```go\n    width, height := display.Size()\n    ```", "```go\n    display.FillRectangle(0, 0, width/2, height/2, white)\n    display.FillRectangle(width/2, 0, width/2, \n        height/2, red)\n    display.FillRectangle(0, height/2, width/2, \n        height/2, green)\n    display.FillRectangle(width/2, height/2, \n        width/2, height/2, blue)\n    ```", "```go\n    tinygo flash –target=arduino-nano33 Chapter6/st7735/main.go\n    ```", "```go\n    time.Sleep(3 * time.Second)\n    ```", "```go\n    i := 0\n    ```", "```go\n    for {\n        display.FillScreen(black)\n    ```", "```go\n    tinydraw.FilledRectangle(&display, 0, 0, 128, 32, \n        white)\n    ```", "```go\n    tinyfont.WriteLineRotated(&display, \n        &freemono.Bold9pt7b, 110, 145, \"TinyDraw\", red, \n        tinyfont.ROTATION_180)\n    ```", "```go\n    tinydraw.FilledCircle(&display, 64, 96, 32, green)\n    tinydraw.FilledCircle(&display, 64, 96, 24, blue)\n    tinydraw.FilledCircle(&display, 64, 96, 16, red)\n    ```", "```go\n    tinyfont.WriteLineRotated(&display, \n        &freemono.Bold9pt7b, 110, 40, \"TinyFont\", green, \n        tinyfont.ROTATION_180)\n    ```", "```go\n    counterText := fmt.Sprintf(\"Count: %v\", i)\n    tinyfont.WriteLineRotated(&display, &freemono.Bold9pt7b, 123, 2, counterText, black, tinyfont.ROTATION_180)\n    ```", "```go\n    time.Sleep(2 * time.Second)\n    i++\n    }\n    ```", "```go\n    var buttonPressed bool\n    ```", "```go\n    const enemySize = 8\n    const bulletSize = 4\n    const width = 128\n    const height = 160\n    ```", "```go\n    var highscore int = 0\n    var currentScore int = 0\n    ```", "```go\n    var (\n        white = color.RGBA{255, 255, 255, 255}\n        red = color.RGBA{255, 0, 0, 255}\n        blue = color.RGBA{0, 0, 255, 255}\n        green = color.RGBA{0, 255, 0, 255}\n        black = color.RGBA{0, 0, 0, 255}\n    )\n    ```", "```go\n    buttonPin := machine.D9\n    buttonPin.Configure(machine.PinConfig{Mode: \n              machine.PinInput})\n    ```", "```go\n    updateHighscore(0)\n    ```", "```go\n    machine.SPI0.Configure(machine.SPIConfig{\n        Frequency: 12000000,\n    })\n    resetPin := machine.D6\n    dcPin := machine.D5\n    csPin := machine.D7\n    backLightPin := machine.D2\n    display := st7735.New(machine.SPI0, resetPin, dcPin,\n               csPin, backLightPin)\n    display.Configure(st7735.Config{})\n    ```", "```go\n    go checkButton(buttonPin)\n    ```", "```go\n    for {\n        display.FillScreen(black)\n        updateGame(display)\n    }\n    ```", "```go\n    func checkButton(buttonPin machine.Pin) {\n        for {\n            if buttonPin.Get() {\n                buttonPressed = true\n            }\n            time.Sleep(20 * time.Millisecond)\n        }\n    }\n    ```", "```go\n    func updateHighscore(score int) {\n        if score <= highscore && score != 0 {\n            return\n        }\n        highscore = score\n        println(fmt.Sprintf(\" TinyInvader Highscore: %d\", \n            highscore))\n    }\n    ```", "```go\n    func updateGame(display st7735.Device) {\n    ```", "```go\n    var enemyPosX, enemyPosY int16\n    ```", "```go\n    enemyPosY = height - enemySize\n    ```", "```go\n    var bulletPosY int16\n    ```", "```go\n    shotFired := false\n    ```", "```go\n    canFire := true\n    ```", "```go\n    currentScore = 0\n    ```", "```go\n    for {\n        if buttonPressed {\n            buttonPressed = false  \n            if canFire {\n                shotFired = true\n                canFire = false\n            }\n    }\n    ```", "```go\n    if shotFired {\n    ```", "```go\n    bulletPosY = updateBullet(display, bulletPosY)\n    ```", "```go\n    if bulletPosY > height {\n        shotFired = false\n        canFire = true\n        bulletPosY = 0\n    }\n    ```", "```go\n    if enemyPosX >= 54 && enemyPosX <= 64 {\n    ```", "```go\n    if enemyPosY >= bulletPosY && enemyPosY <= bulletPosY+bulletSize {\n    ```", "```go\n    currentScore++\n    ```", "```go\n    display.FillRectangle(enemyPosX-1, enemyPosY,\n        enemySize, enemySize, black)\n    ```", "```go\n    enemyPosY = height - enemySize\n    enemyPosX = 0\n    ```", "```go\n    updateHighscore(currentScore)\n        }\n      }\n    }\n    ```", "```go\n    enemyPosX, enemyPosY = updateEnemy(display, enemyPosX, enemyPosY)\n    ```", "```go\n    if enemyPosY < enemySize {\n        return\n    }\n    ```", "```go\n    display.FillRectangle(0, 4, width, 1, green)\n    ```", "```go\n    display.FillRectangle(58, 0, 6, 6, green)\n    ```", "```go\n    time.Sleep(12 * time.Millisecond)\n      }\n    }\n    ```", "```go\n    func updateBullet(display st7735.Device, posY int16)\n        int16 {\n        display.FillRectangle(58, posY-2, bulletSize, 2, \n            black)\n        display.FillRectangle(58, posY, bulletSize, \n            bulletSize, green)\n        return posY + 2\n    }\n    ```", "```go\n    func updateEnemy(display st7735.Device, posX, posY \n            int16) (int16, int16) {\n        var clearX, clearY, clearWidth int16\n    ```", "```go\n    clearX = posX - 1\n    clearY = posY\n    clearWidth = 1\n    ```", "```go\n    if posX == 0 {\n        clearY = posY + enemySize\n        clearX = width – enemySize\n        clearWidth = enemySize\n    }\n    ```", "```go\n    display.FillRectangle(clearX, clearY, clearWidth, enemySize, black)\n    display.FillRectangle(posX, posY, enemySize, enemySize, red)\n    ```", "```go\n    posX++\n    ```", "```go\n    if posX > width-enemySize {\n        posX = 0\n        posY -= enemySize\n    }\n    ```", "```go\n    return posX, posY\n    }\n    ```", "```go\ntinygo flash –target=arduino-nano33 Chapter06/tinygame/main.go\n```"]