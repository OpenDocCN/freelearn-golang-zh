["```go\n    var (\n        white = color.RGBA{255, 255, 255, 255}\n        black = color.RGBA{0, 0, 0, 255}\n    )\n    ```", "```go\n    type Service interface {\n        CheckSensorConnectivity()\n        ReadData() (temperature, pressure, humidity int32,\n            err error)\n        DisplayData(temperature, pressure, humidity int32)\n        GetFormattedReadings(temperature, pressure,\n            humidity int32) (temp, press, hum string)\n        SavePressureReading(pressure float64)\n        CheckAlert(alertThreshold float64, timeSpan int8)\n            (bool, float64)\n    }\n    ```", "```go\n    type service struct {\n        sensor *bme280.Device\n        display *st7735.Device\n        readings [6]float64\n        readingsIndex int8\n        firstReadingSaved bool\n    }\n    ```", "```go\n    func New(sensor *bme280.Device, \n        display *st7735.Device) Service {\n             return &service{\n             sensor: sensor,\n             display: display,\n             readingsIndex: int8(0),\n             readings: [6]float64{},\n             firstReadingSaved: false,\n            }\n        }\n    ```", "```go\n    func (service *service) ReadData() (temp, press, hum\n         int32, err error) {temp, err =\n             service.sensor.ReadTemperature()\n                if err != nil {\n                    return\n    }\n    press, err = service.sensor.ReadPressure()\n                if err != nil {\n                    return\n    }\n    hum, err = service.sensor.ReadHumidity()\n                if err != nil {\n                    return\n    }\n    return\n    }\n    ```", "```go\n    func (service *service) CheckSensorConnectivity() {\n        for {\n            connected := service.sensor.Connected()\n            if !connected {\n                println(\"could not detect BME280\")\n                time.Sleep(time.Second)\n    }\n           println(\"BME280 detected\")\n           break\n      }\n    }\n    ```", "```go\n    func (service *service) DisplayData(\n        temperature, pressure, humidity int32) {\n    ```", "```go\n    service.display.FillScreen(black)\n    ```", "```go\n    tinyfont.WriteLineRotated(service.display,\n        &freemono.Bold9pt7b, 110, 3, \"Tiny Weather\",\n            white, tinyfont.ROTATION_90)\n    ```", "```go\n    temp, press, hum :=\n        service.GetFormattedReadings(temperature,\n            pressure, humidity)\n    ```", "```go\n    tempString := \"Temp:\" + temp + \"C\"\n    tinyfont.WriteLineRotated(service.display,\n        &freemono.Bold9pt7b, 65, 3, tempString,\n        white,tinyfont.ROTATION_90)\n    pressString := \"P:\" + press + \"hPa\"\n    tinyfont.WriteLineRotated(service.display,\n        &freemono.Bold9pt7b, 45, 3, pressString, white,\n        tinyfont.ROTATION_90)\n    humString := \"Hum:\" + hum + \"%\"\n    tinyfont.WriteLineRotated(service.display,\n        &freemono.Bold9pt7b, 25, 3, humString, white,\n        tinyfont.ROTATION_90)\n    }\n    ```", "```go\n    func (service *service)\n        GetFormattedReadings(\n        temperature, pressure, humidity int32) (temp,\n            press, hum string) {\n    temp = strconv.FormatFloat(\n        float64(temperature/1000), 'f', 2, 64)\n    press = strconv.FormatFloat(\n        float64(pressure/100000), 'f', 2, 64)\n    hum = strconv.FormatFloat(\n        float64(humidity/100), 'f', 2, 64)\n    return\n    }\n    ```", "```go\n    func (service *service) SavePressureReading(\n        pressure float64) {\n    ```", "```go\n    if !service.firstReadingSaved {\n        for i := 0; i < len(service.readings); i++ {\n            service.readings[i] = pressure\n    }\n    ```", "```go\n    service.firstReadingSaved = true\n    service.readingsIndex = 0\n    return\n    }\n    ```", "```go\n    service.readingsIndex++\n    service.readingsIndex = service.readingsIndex %\n        int8(len(service.readings))\n    service.readings[service.readingsIndex] = pressure\n    }\n    ```", "```go\n    func (service *service) CheckAlert(alertThreshold\n        float64, timeSpan int8) (bool, float64) {\n            currentReading :=\n                   service.readings[service.readingsIndex]\n    ```", "```go\n    currentReading := service.readings[currentIndex]\n    comparisonIndex := currentIndex - timeSpan\n    if comparisonIndex < 0 {\n        comparisonIndex = 5 + comparisonIndex\n    }\n    ```", "```go\n    comparisonReading := service.readings[comparisonIndex]\n    diff := comparisonReading - currentReading\n    return diff >= alertThreshold, diff\n    }\n    ```", "```go\n    time.Sleep(5 * time.Second)\n    ```", "```go\n    machine.SPI0.Configure(machine.SPIConfig{\n        Frequency: 12000000,\n    })\n    resetPin := machine.D6\n    dcPin := machine.D5\n    csPin := machine.D7\n    backLightPin := machine.D2\n    display := st7735.New(\n        machine.SPI0, resetPin, dcPin, csPin,\n            backLightPin)\n    display.Configure(st7735.Config{\n        Rotation: st7735.ROTATION_180,\n    })\n    ```", "```go\n    machine.I2C0.Configure(machine.I2CConfig{})\n    sensor := bme280.New(machine.I2C0)\n    sensor.Configure()\n    ```", "```go\n    weatherStation := weatherstation.New(\n        &sensor, &display)\n    weatherStation.CheckSensorConnectivity()\n    ```", "```go\n    for {\n    temperature, pressure, humidity, err :=\n        weatherStation.ReadData()\n    if err != nil {\n        println(\"could not read sensor data:\", err)\n        time.Sleep(1 * time.Second)\n        continue\n    }\n    weatherStation.DisplayData(\n        temperature, pressure, humidity)\n    time.Sleep(2 * time.Second)\n    }\n    ```", "```go\ntinygo flash --target=arduino-nano33 ch7/weather-station-example/main.go\n```", "```go\n    type Client interface {\n        Configure() error\n        CheckHardware()\n        ConnectWifi()\n    }\n    ```", "```go\n    type client struct {\n        ssid string\n        password string\n        spi machine.SPI\n        wifi *wifinina.Device\n    }\n    ```", "```go\n    func New(ssid, password string) Client {\n        return &client{\n            spi: machine.NINA_SPI,\n            ssid: ssid,\n            password: password,\n        }\n    }\n    ```", "```go\n    func (client *client) Configure() error {\n    ```", "```go\n    err := client.spi.Configure(machine.SPIConfig{\n        Frequency: 8 * 1e6,\n        SDO: machine.NINA_SDO,\n        SDI: machine.NINA_SDI,\n        SCK: machine.NINA_SCK,\n    })\n        if err != nil {return err\n    }\n    ```", "```go\n    client.wifi = &wifinina.Device{\n        SPI: client.spi,\n        CS: machine.NINA_CS,\n        ACK: machine.NINA_ACK,\n        GPIO0: machine.NINA_GPIO0,\n        RESET: machine.NINA_RESETN,\n    }\n    client.wifi.Configure()\n    ```", "```go\n    time.Sleep(5 * time.Second)\n    return nil\n    }\n    ```", "```go\n    func (client *client) CheckHardware() {\n    ```", "```go\n    firmwareVersion, err := client.wifi.GetFwVersion()\n    if err != nil {\n        return err\n    }\n    println(\"firmware version: \", firmwareVersion)\n    ```", "```go\n    result, err := client.wifi.ScanNetworks()\n    if err != nil {\n        return err\n    }\n    for i := 0; i < int(result); i++ {\n        ssid := client.wifi.GetNetworkSSID(i)\n        println(\"ssid:\", ssid, \"id:\", i)\n      }\n    }\n    ```", "```go\n    func (client *client) ConnectWifi() {\n        println(\"trying to connect to network: \",\n            client.ssid)\n    client.connect()\n    for {\n    ```", "```go\n    time.Sleep(1 * time.Second)\n    ```", "```go\n    status, err := client.wifi.GetConnectionStatus()\n    if err != nil {\n        println(\"error:\",err.Error())\n    }\n    println(\"status:\",status.String())\n    ```", "```go\n    if status == wifinina.StatusConnected {\n        break\n    }\n    ```", "```go\n    if status == wifinina.StatusConnectFailed || \n        status == wifinina.StatusDisconnected {\n            client.connect()\n      }\n    }\n    ```", "```go\n    ip, _, _, err := client.wifi.GetIP()\n    if err != nil {\n        println(\"could not get ip address:\", err.Error())\n    }\n    println(\"connected to wifi. got ip:\", ip.String())\n    }\n    ```", "```go\n    func (client *client) connect() error {\n        if client.password == \"\" {\n            return client.wifi.SetNetwork(client.ssid)\n    }\n    return client.wifi.SetPassphrase(\n        client.ssid, client.password)\n    }\n    ```", "```go\n    type Client struct {\n        mqttBroker string\n        mqttClientID string\n        MqttClient mqtt.Client\n    }\n    ```", "```go\n    func New(mqttBroker, clientID string) *Client {\n        return &client{\n            mqttBroker: mqttBroker,\n            MqttClientID: clientID,\n        }\n    }\n    ```", "```go\n    func (client *client) ConnectBroker() error {\n    ```", "```go\n    opts := mqtt.NewClientOptions().\n            AddBroker(client.mqttBroker).\n    ```", "```go\n    SetClientID(client.mqttClientID + randomString(4))\n    ```", "```go\n    client.mqttClient = mqtt.NewClient(opts)\n    token := client.MqttClient.Connect()\n    ```", "```go\n    if token.Wait() && token.Error() != nil {\n        return token.Error()\n    }\n    return nil\n    }\n    ```", "```go\n    func (client *client) PublishMessage(\n        topic string, message []byte, qos uint8, retain\n            bool) error {\n        token := client.MqttClient.Publish(\n            topic, qos, retain, message)\n        if token.WaitTimeout(time.Second) && \n            token.Error() != nil {\n                return token.Error()\n        }\n        return nil\n    }\n    ```", "```go\n    func (client *Client) Subscribe(\n        topic string, qos byte, callback mqtt.MessageHandler)\n            error {\n        token := \n        client.MqttClient.Subscribe( topic, qos, callback)\n        if token.WaitTimeout(time.Second) \n            && token.Error() != nil {\n                return token.Error()\n    }\n    return nil\n    }\n    ```", "```go\n    func randomInt(min, max int) int {\n        return min + rand.Intn(max-min)\n    }\n    func randomString(len int) string {\n        bytes := make([]byte, len)\n        for i := 0; i < len; i++ {\n            bytes[i] = byte(randomInt(65, 90))\n        }\n        return string(bytes)\n    }\n    ```", "```go\nuser mosquitto\nlistener 9001 127.0.0.1\nprotocol websockets\nallow_anonymous true\n```", "```go\ndocker run -it --name mosquitto \\\n--restart=always \\\n-p 1883:1883 \\\n-p 9001:9001 \\\n-v ~/go/src/ github.com/PacktPublishing/Creative-DIY-Microcontroller-Projects-with-TinyGo-and-WebAssembly /Chapter07/mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro \\\neclipse-mosquitto\n```", "```go\ngithub.com/Nerzal/drivers/wifinina\ngithub.com/Nerzal/drivers/net/mqtt\n```", "```go\nwifiDevice := wifinina.NewSPI(\n   client.spi,\n   machine.NINA_CS,\n   machine.NINA_ACK,\n   machine.NINA_GPIO0,\n   machine.NINA_RESETN,\n)\nclient.wifi = wifiDevice\n```", "```go\n    const ssid = \"changeMe\"\n    const password = \"changeMe\"\n    ```", "```go\n    var (\n        temperature float64\n        pressure float64\n        humidity float64\n    )\n    ```", "```go\n    func printError(message string, err error) {\n        for {\n            println(message, err.Error())\n            time.Sleep(time.Second)\n        }\n    }\n    ```", "```go\n    time.Sleep(5 * time.Second)\n    ```", "```go\n    machine.I2C0.Configure(machine.I2CConfig{})\n    sensor := bme280.New(machine.I2C0)\n    sensor.Configure()\n    weatherStation := weatherstation.New(&sensor, nil)\n    weatherStation.CheckSensorConnectivity()\n    ```", "```go\n    wifiClient := wifi.New(ssid, password)\n    ```", "```go\n    println(\"configuring nina wifi chip\")\n    err := wifiClient.Configure()\n    if err != nil {\n        printError(\"could not configure wifi client\", err)\n    }\n    ```", "```go\n    println(\"checking firmware\")\n    err = wifiClient.CheckHardware()\n    if err != nil {\n        printError(\"could not check hardware\", err)\n    }\n    ```", "```go\n    wifiClient.ConnectWifi()\n    ```", "```go\n    mqttClient := mqttclient.New(\"tcp://192.0.2.22:1883\")\n    ```", "```go\n    println(\"connecting to mqtt broker\")\n    err = mqttClient.ConnectBroker()\n    if err != nil {\n        printError(\"could not configure mqtt\", err)\n    }\n    println(\"connected to mqtt broker\")\n    ```", "```go\n    go publishSensorData(\n        mqttClient, wifiClient, weatherStation)\n    ```", "```go\n    go publishAlert(\n        mqttClient, wifiClient, weatherStation)\n    ```", "```go\n    for {\n        temperature, pressure, humidity, err \n            = weatherStation.ReadData()\n            if err != nil {\n            printError(\"could not read sensor data:\", err)\n    }\n    time.Sleep(time.Minute)\n    }\n    ```", "```go\n    func publishSensorData(mqttClient mqttclient.Client,\n        wifiClient wifi.Client, weatherStation\n        weatherstation.Service) {\n        for {\n            time.Sleep(time.Minute)\n            println(\"publishing sensor data\")\n            tempString, pressString,\n            humidityString:=weatherStation.\n            GetFormattedReadings(temperature, pressure,\n            humidity)\n    ```", "```go\n    message := []byte(fmt.Sprintf(\"sensor\n        readings#%s#%s#%s\", tempString, pressString,\n            humidityString))\n    ```", "```go\n    err := mqttClient.PublishMessage(\"weather/data\", \n    message, 0, true)\n    if err != nil {\n        switch err.(type) {\n        println(err.Error())\n        case wifinina.Error:\n            wifiClient.ConnectWifi()\n            mqttClient.ConnectBroker()\n        default:\n            println(err.Error())\n        }\n    }\n    }\n    }\n    ```", "```go\n    func publishAlert(mqttClient mqttclient.Client,\n        wifiClient wifi.Client, weatherStation\n        weatherstation.Service) {\n            for {\n                time.Sleep(time.Hour)\n    ```", "```go\n    weatherStation.SavePressureReading(pressure)\n    ```", "```go\n    alert, diff := weatherStation.CheckAlert(2, 1)\n    ```", "```go\n    if alert {\n        err := mqttClient.PublishMessage(\"weather/alert\",\n            []byte(fmt.Sprintf(\"%s#%v#%s\", \"possible storm\n            incoming\", diff, \"1 hour\")), 0, true)\n        if err != nil {\n            switch err.(type) {\n            case wifinina.Error:\n                println(err.Error())\n                wifiClient.ConnectWifi()\n                mqttClient.ConnectBroker()\n            default:\n                println(err.Error())\n            }\n        }\n    }\n    ```", "```go\n    alert, diff = weatherStation.CheckAlert(6, 3)\n    ```", "```go\n    if !alert {\n        continue\n    }\n    ```", "```go\n    err := mqttClient.PublishMessage(\"weather/alert\",\n        []byte(fmt.Sprintf(\"%s#%v#%s\", \"possible storm\n        incoming\", diff, \"3 hours\")), 0, true)\n    if err != nil {\n        println(err.Error())\n        switch err.(type) {\n            case wifinina.Error:\n                wifiClient.ConnectWifi()\n                mqttClient.ConnectBroker()\n          }\n        }\n      }\n    }\n    ```", "```go\ntinygo flash --target=arduino-nano33 ch7/weather-station-mqtt/main.go\n```", "```go\n    const dir = \"Chapter07/html\"\n    ```", "```go\n    fs := http.FileServer(http.Dir(dir))\n    ```", "```go\n    err := http.ListenAndServe(\":8080\",\n           http.HandlerFunc(func(resp http.ResponseWriter, \n           req *http.Request) {\n    ```", "```go\n    resp.Header().Add(\"Cache-Control\", \"no-cache\")\n    ```", "```go\n    if strings.HasSuffix(req.URL.Path, \".wasm\") {\n        resp.Header(). Set(\"content-type\",\n            \"application/wasm\")\n    }\n    ```", "```go\n    fs.ServeHTTP(resp, req)\n    }))\n    if err != nil {\n        println(\"failed to server http requests:\",\n            err.Error())\n    }\n    ```", "```go\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>TinyGo Weather Station</title>\n        <meta name=\"viewport\" content=\"width=device-width,\n        initial-scale=1\" />\n    ```", "```go\n    <script src=\"img/mqttws31.min.js\" type=\"text/javascript\"></script>\n    ```", "```go\n    <script src=\"img/wasm_exec.js\"\n        type=\"text/javascript\"></script>\n    <script src=\"img/wasm.js\" type=\"text/javascript\"></script>\n    </head>\n    ```", "```go\n    <body>\n        <h1>TinyGo Weather Station</h1>\n        <p>Alerts:</p>\n    ```", "```go\n    <table>\n        <thead>\n            <tr>\n                <th>TimeStamp</th>\n                <th>Message</th>\n                <th>Pressure Difference</th>\n                <th>Time span</th>\n            </tr>\n        </thead>\n        <tbody id=\"tbody-alerts\"></tbody>\n    </table>\n    ```", "```go\n    <p>Events:</p>\n    <table>\n        <thead>\n            <tr>\n                <th>TimeStamp</th>\n                <th>Message</th>\n                <th>Temperature</th>\n                <th>Pressure</th>\n                <th>Humidity</th>\n            </tr>\n        </thead>\n        <tbody id=\"tbody-data\"></tbody>\n    </table>\n    </body>\n    </html>\n    ```", "```go\n    type sensorEvent struct {\n        TimeStamp string\n        Message string\n        Temperature float32\n        Pressure float32\n        Humidity float32\n    }\n    ```", "```go\n    type alertEvent struct {\n        TimeStamp string\n        Message string\n        Diff string\n        TimeSpan string\n    }\n    ```", "```go\n    var sensorEvents = make(chan sensorEvent)\n    ```", "```go\n    var alertEvents = make(chan alertEvent)\n    ```", "```go\n    js.Global().Set(\"sensorDataHandler\",\n        js.FuncOf(sensorDataHandler))\n    ```", "```go\n    js.Global().Set(\"alertHandler\",\n        js.FuncOf(alertHandler))\n    ```", "```go\n    go handleSensorEvents()\n    ```", "```go\n    go handleAlertEvents()\n    ```", "```go\n    wait := make(chan struct{}, 0)\n    <-wait\n    ```", "```go\n    func alertHandler(this js.Value, args []js.Value)\n        interface{} {\n    ```", "```go\n    message := args[0].String()\n    splittedStrings := strings.Split(message, \"#\")\n    ```", "```go\n    alertEvents <- alertEvent{\n        TimeStamp: time.Now().Format(time.RFC1123),\n        Message: splittedStrings[0],\n        Diff: splittedStrings[1],\n        TimeSpan: splittedStrings[2],\n    }\n    ```", "```go\n    return nil\n    }\n    ```", "```go\n    func sensorDataHandler(this js.Value, args []js.Value)\n        interface{} {\n    message := args[0].String()\n    splittedStrings := strings.Split(message, \"#\")\n    sensorEvents <- sensorEvent{\n        TimeStamp: time.Now().Format(time.RFC1123),\n        Message: splittedStrings[0],\n        Temperature: splittedStrings[1],\n        Pressure: splittedStrings[2],\n        Humidity: splittedStrings[3],\n    }\n    return nil\n    }\n    ```", "```go\n    func handleAlertEvents() {\n    for {\n        event := <-alertEvents\n    ```", "```go\n        tableBody := dom.GetElementByID(\"tbody-alerts\")\n    ```", "```go\n        tr := dom.CreateElement(\"tr\")\n    ```", "```go\n        dom.AddTd(tr, event.TimeStamp)\n        dom.AddTd(tr, event.Message)\n    ```", "```go\n        dom.AddTdf(tr, \"%s hPa\", event.Diff)\n        dom.AddTdf(tr, \"%s\", event.TimeSpan)\n    ```", "```go\n        dom.AppendChild(tableBody, tr)\n        println(\"successfully added sensor event to\n           table\")\n    }\n    }\n    ```", "```go\n    func handleSensorEvents() {\n    for {\n        event := <-sensorEvents\n        tableBody := dom.GetElementByID(\"tbody-data\")\n        tr := dom.CreateElement(\"tr\")\n        dom.AddTd(tr, event.TimeStamp)\n        dom.AddTd(tr, event.Message)\n        dom.AddTdf(tr, \"%s°C\", event.Temperature)\n        dom.AddTdf(tr, \"%s hPa\", event.Pressure)\n        dom.AddTdf(tr, \"%s\", event.Humidity)\n        dom.AppendChild(tableBody, tr)\n        println(\"successfully added sensor event to\n        table\")\n    }\n    }\n    ```", "```go\n    func GetDocument() js.Value {\n        return js.Global().Get(\"document\")\n    }\n    ```", "```go\n    func CreateElement(tag string) js.Value {\n        document := GetDocument()\n        return document.Call(\"createElement\", tag)\n    }\n    ```", "```go\n    func GetElementByID(id string) js.Value {\n        document := GetDocument()\n        return document.Call(\"getElementById\", id)\n    }\n    ```", "```go\n    func AppendChild(parent js.Value, child js.Value) {\n        parent.Call(\"appendChild\", child)\n    }\n    ```", "```go\n    func SetInnerHTML(object js.Value, value interface{}) {\n        object.Set(\"innerHTML\", value)\n    }\n    ```", "```go\n    func AddTd(tr js.Value, value interface{}) {\n        td := CreateElement(\"td\")\n        SetInnerHTML(td, value)\n        AppendChild(tr, td)\n    }\n    ```", "```go\n    func AddTdf(tr js.Value, formatString string, value\n        interface{}) {\n        td := CreateElement(\"td\")\n        SetInnerHTML(td, fmt.Sprintf(formatString, value))\n        AppendChild(tr, td)\n    }\n    ```", "```go\n    const WASM_URL = 'wasm.wasm';\n    var wasm;\n    var mqtt;\n    ```", "```go\n    const host = \"192.2.0.23\";\n    const port = 9001;\n    ```", "```go\n    function onConnect() {\n        mqtt.subscribe(\"weather/data\");\n        mqtt.subscribe(\"weather/alert\");\n    }\n    ```", "```go\n    function onConnectionLost(responseObject) {\n        if (responseObject.errorCode !== 0) {\n            console.log(\"onConnectionLost:\" +\n            responseObject.errorMessage);\n    }\n    }\n    ```", "```go\n    function onMessageArrived(message) {\n        console.log(\"onMessageArrived:\" +\n        message.payloadString);\n    var payload = message.payloadString;\n    if (payload.indexOf(\"possible storm incoming\") !== -1)\n    {\n        alertHandler(payload);\n    } else {\n        sensorDataHandler(payload);\n    }\n    }\n    ```", "```go\n    function MQTTconnect() {\n        var cname = \"weather-consumer\";\n        mqtt = new Paho.MQTT.Client(host, port, cname);\n        var options = {\n            timeout: 3,\n            onSuccess: onConnect,\n    };\n        mqtt.onConnectionLost = onConnectionLost;\n        mqtt.onMessageArrived = onMessageArrived;\n        mqtt.connect(options);\n    }\n    ```", "```go\n    function init() {\n    ```", "```go\n    const go = new Go();\n    ```", "```go\n    if ('instantiateStreaming' in WebAssembly) {\n    WebAssembly.instantiateStreaming(fetch(WASM_URL),\n        go.importObject).then(function(obj) {\n            wasm = obj.instance;\n            go.run(wasm);\n    })\n    }\n    ```", "```go\n    else {\n        fetch(WASM_URL).then(resp =>\n        resp.arrayBuffer()\n        ).then(bytes =>\n            WebAssembly.instantiate(bytes,\n            go.importObject).then(function(obj) {\n            wasm = obj.instance;\n            go.run(wasm);\n    })\n    )\n    ```", "```go\n    MQTTconnect()\n    }\n    ```", "```go\n    init();\n    ```", "```go\nwasm-app: \nrm -rf Chapter07/html\nmkdir Chapter07/html\ntinygo build -o Chapter07/html/wasm.wasm -target wasm -no-debug     ch7/weather-app/wasm.go\ncp Chapter07/weather-app/wasm_exec.js ch7/html/\ncp Chapter07/weather-app/wasm.js ch7/html/\ncp Chapter07/weather-app/index.html ch7/html/\ngo run Chapter07/wasm-server/main.go\n```", "```go\nmake wasm-app\n```"]