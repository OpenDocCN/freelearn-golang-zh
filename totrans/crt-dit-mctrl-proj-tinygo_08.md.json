["```go\n    'use strict';\n    var mqtt;\n    const host = \"192.2.0.23\";\n    const port = 9001;\n    const cname = \"home-automation-dashboard\";\n    ```", "```go\n    function onConnect() {\n        console.log(\"Successfully connected to mqtt broker\");\n    }\n    ```", "```go\n    function onConnectionLost(err) {\n        if (err.errorCode !== 0) {\n            console.log(\"onConnectionLost:\" + \n                err.errorMessage);\n        }\n        MQTTconnect();\n    }\n    ```", "```go\n    function onMessageArrived(message) {\n        console.log(\n            \"onMessageArrived:\" + message.payloadString);\n        handleMessage(message.payloadString);\n    }\n    ```", "```go\n    function publish(topic, message) {\n        mqtt.send(topic, message, 1, false);\n    }\n    ```", "```go\n    function MQTTconnect() {\n        console.log(\"mqtt client: connecting to \" + host + \n            \":\" + port);\n        mqtt = new Paho.MQTT.Client(host, port, cname);\n        var options = {\n            timeout: 3,\n            onSuccess: onConnect,\n        };\n        mqtt.onConnectionLost = onConnectionLost;\n        mqtt.onMessageArrived = onMessageArrived;\n        mqtt.connect(options);\n    }\n    ```", "```go\n'use strict';\nconst WASM_URL = 'wasm.wasm';\nvar wasm;\nfunction init() {\n    const go = new Go();\n    if ('instantiateStreaming' in WebAssembly) {\n        WebAssembly.instantiateStreaming(fetch(WASM_URL), \n                go.importObject).then(function (obj) {\n            wasm = obj.instance;\n            go.run(wasm);\n        })\n    } else {\n        fetch(WASM_URL).then(resp =>\n            resp.arrayBuffer()\n        ).then(bytes =>\n            WebAssembly.instantiate(bytes, \n                    go.importObject).then(function (obj) {\n                wasm = obj.instance;\n                go.run(wasm);\n            })\n        )\n    }\n}\ninit();\n```", "```go\ncp /usr/local/tinygo/targets/wasm_exec.js /path/to/Chapter08/light-control\n```", "```go\n/path/to/your/tinygo/installation/target/wasm_exec.js\n```", "```go\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title>TinyGo Home Automation</title>\n    <meta name=\"viewport\" content=\"width=device-width,\n        initial-scale=1\" />\n    <script src=\"img/wasm_exec.js\" \n        type=\"text/javascript\"></script>\n    <script src=\"img/wasm.js\" type=\"text/javascript\"></script>\n    <script src=\"img/mqtt.js\" type=\"text/javascript\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/paho-\n        mqtt/1.0.1/mqttws31.min.js\" \n        type=\"text/javascript\"></script>\n</head>\n<body id=\"body-component\"></body>\n</html>\n```", "```go\ntype UserInfo struct {\n    LoggedIn bool\n    UserName string\n    LoggedInAt time.Time\n}\n```", "```go\n    const user = \"tinygo\"\n    const password = \"secure1234\"\n    ```", "```go\n    var doc = tinydom.GetDocument()\n    ```", "```go\n    type Service struct {\n        channel chan string\n    }\n    ```", "```go\n    func NewService(channel chan string) *Service {\n        return &Service{channel: channel}\n    }\n    ```", "```go\n    func (service *Service) RenderLogin() {\n        tinydom.GetWindow().PushState(nil, \"login\", \"/login\")\n    ```", "```go\n    div := doc.CreateElement(\"div\").\n           SetId(\"login-component\")\n    ```", "```go\n    h1 := doc.CreateElement(\"h1\").\n          SetInnerHTML(\"Login\")\n    ```", "```go\n    loginForm := form.New()\n    userNameLabel := label.\n          New().\n          SetFor(\"userName\").\n          SetInnerHTML(\"UserName:\")\n    userName := input.\n          New(input.TextInput).\n          SetId(\"userName\")\n    ```", "```go\n    passwordLabel := label.\n          New().\n          SetFor(\"password\").\n          SetInnerHTML(\"Password:\")\n    password := input.\n          New(input.PasswordInput).\n          SetId(\"password\")\n    ```", "```go\n    login := input.New(input.ButtonInput).\n          SetValue(\"login\").\n    AddEventListener(\"click\", \n              js.FuncOf(service.onClick)).\n    AddEventListener(\"keypress\", \n              js.FuncOf(service.onKeyPress))\n    ```", "```go\n    loginForm.AppendChildrenBr(\n          userNameLabel,\n          userName,\n          passwordLabel,\n          password,\n          login,\n    )\n    ```", "```go\n    div.AppendChildren(h1, loginForm.Element)\n    body := doc.GetElementById(\"body-component\")\n    body.AppendChild(div)\n    }\n    ```", "```go\n    func (service *Service) onClick(this js.Value, args \n            []js.Value) interface{} {\n        service.login()\n        return nil\n    }\n    ```", "```go\n    func (service *Service) onKeyPress(this js.Value, args \n            []js.Value) interface{} {\n        if len(args) != 1 {\n            println(\"bad number of arguments in keyPress \n                event\")\n            return nil\n        }\n        event := tinydom.Event{Value: args[0]}\n        if event.Key() == \"Enter\" {\n            service.login()\n        }\n        return nil\n    }\n    ```", "```go\n    func (service *Service) login() {\n        userElem := input.FromElement(\n            doc.GetElementById(\"userName\"))\n        userName := userElem.Value()\n        if userName != user {\n            tinydom.GetWindow().Alert(\"Invalid username or \n                password\")\n            return\n        }\n        passwordElem := input.FromElement(\n            doc.GetElementById(\"password\"))\n        passwordInput := passwordElem.Value()\n        if passwordInput != password {\n            tinydom.GetWindow().Alert(\"Invalid username or \n                password\")\n            return\n        }\n        go func() {\n            service.channel <- userName\n        }()\n    }\n    ```", "```go\n    var doc = tinydom.GetDocument()\n    ```", "```go\n    type Service struct {\n        user login.UserInfo\n        logoutChannel chan struct{\n    }\n    ```", "```go\n    func New(logout chan struct{}) *Service {\n        return &Service{\n            logoutChannel: logout,\n        }\n    }\n    ```", "```go\n    func (service *Service) ConnectMQTT() {\n        println(\"connecting to mqtt\")\n        js.Global().\n            Get(\"MQTTconnect\").\n            Invoke()\n    }\n    ```", "```go\n    func (service *Service) logout(this js.Value, args \n            []js.Value) interface{} {\n        service.logoutChannel <- struct{}{}\n        return nil\n    }\n    ```", "```go\n    func (service *Service) bedroomOn(this js.Value, args \n        []js.Value) interface{} {\n    ```", "```go\n    if time.Now().After(service.user.LoggedInAt.Add(5 * \n            time.Minute)) {\n        println(\"timeOut: perform logout\")\n        service.logout(js.ValueOf(nil), nil\n        )return nil\n    }\n    ```", "```go\n    println(\"turning lights on\")\n    // room # module # action\n    js.Global().Get(\"publish\").Invoke(\"home/bedroom/lights\", \n        \"on\")\n    service.user.LoggedInAt = time.Now()\n    return nil\n    ```", "```go\n    func (service *Service) bedroomOff(this js.Value, args \n        []js.Value) interface{} {\n        if time.Now().After(service.user.LoggedInAt.Add(5 *\n                time.Minute)) {\n            println(\"timeOut: perform logout\")\n            service.logout(js.ValueOf(nil), nil)\n            return nil\n        }\n        println(\"turning lights off\")\n        js.Global().Get(\"publish\").Invoke(\"home/bedroom\n            /lights\",\"off\")\n        service.user.LoggedInAt = time.Now()\n        return nil\n    }\n    ```", "```go\n    func (service *Service) RenderDashboard(user \n            login.UserInfo) {\n        service.user = user\n    ```", "```go\n    tinydom.GetWindow().\n        PushState(nil, \"dashboard\", \"/dashboard\")\n    ```", "```go\n    body := doc.GetElementById(\"body-component\")\n    div := doc.CreateElement(\"div\").\n            SetId(\"dashboard-component\")\n    ```", "```go\n    h1 := doc.CreateElement(\"h1\").\n            SetInnerHTML(\"Dashboard\")\n    h2 := doc.CreateElement(\"h2\").\n            SetInnerHTML(fmt.Sprintf(\"Hello %s\", \n                service.user.UserName))\n    ```", "```go\n    tableElement := table.New().\n        SetHeader(\"Component\", \"Actions\")\n    tbody := doc.CreateElement(\"tbody\")\n    tr := doc.CreateElement(\"tr\")\n    componentNameElement := doc.CreateElement(\"td\").\n        SetInnerHTML(\"Bedroom Lights\")\n    componentControlElement := doc.CreateElement(\"td\")\n    onButton := input.New(input.ButtonInput).\n        SetValue(\"On\").\n        AddEventListener(\"click\", \n            js.FuncOf(service.bedroomOn))\n    offButton := input.New(input.ButtonInput).\n        SetValue(\"Off\").\n        AddEventListener(\"click\", \n            js.FuncOf(service.bedroomOff))\n    componentControlElement.AppendChildren(onButton, \n        offButton)\n    tr.AppendChildren(componentNameElement, \n        componentControlElement)\n    tbody.AppendChildren(tr)\n    tableElement.SetBody(tbody)\n    ```", "```go\n    logout := input.New(input.ButtonInput).\n        SetValue(\"logout\").\n        AddEventListener(\"click\", js.FuncOf(service.logout),\n    )\n    ```", "```go\n    div.AppendChildren(\n        h1,\n        h2,\n        tableElement.Element,\n        tinydom.GetDocument().CreateElement(\"br\"),\n        logout,\n    )\n    body.AppendChild(div)\n    }\n    ```", "```go\ngo get github.com/Nerzal/tinydom\n```", "```go\n    var window = tinydom.GetWindow()\n    var loginService *login.Service\n    var loginState login.UserInfo\n    var dashboardService dashboard.Service\n    ```", "```go\n    func main() {\n        loginState = login.UserInfo{}\n        loginChannel := make(chan string, 1)\n        loginService = login.NewService(loginChannel)\n        loginService.RenderLogin()\n        go onLogin(loginChannel)\n        logoutChannel := make(chan  struct{}, 1)\n        go onLogout(logoutChannel)\n        dashboardService = dashboard.New(logoutChannel)\n        wait := make(chan struct{}, 0)\n        <-wait\n    }\n    ```", "```go\n    func onLogin(channel chan string) {\n        for {\n            userName := <-channel\n            println(userName, \"logged in!\")\n            loginState.UserName = username\n            loginState.LoggedIn = true\n            loginState.LoggedInAt = time.Now()\n            removeLoginComponent()\n            dashboardService.ConnectMQTT()\n            dashboardService.RenderDashboard(loginState)\n        }\n    }\n    ```", "```go\n    func removeLoginComponent() {\n        doc := tinydom.GetDocument()\n        doc.GetElementById(\"body-component\").\n            RemoveChild(doc.GetElementById(\n                \"login-component\"))\n    }\n    ```", "```go\n    func removeDashboardComponent() {\n        doc := tinydom.GetDocument()\n        doc.GetElementById(\"body-component\").\n            RemoveChild(doc.GetElementById(\n                \"dashboard-component\"))\n    }\n    ```", "```go\n    func onLogout(channel chan struct{}) {\n        for {\n            <-channel\n            println(\"handling logout event\")\n            removeDashboardComponent()\n            loginState = login.UserInfo{}\n            loginService.RenderLogin()\n        }\n    }\n    ```", "```go\nconst dir = \"Chapter08/html\"\nvar fs = http.FileServer(http.Dir(dir))\nfunc main() {\n    log.Print(\"Serving \" + dir + \" on http://localhost:8080\")\n    http.ListenAndServe(\":8080\", \n        http.HandlerFunc(handleRequest))\n}\nfunc handleRequest(\n        resp http.ResponseWriter, req *http.Request) {\n    resp.Header().Add(\"Cache-Control\", \"no-cache\")\n    if strings.HasSuffix(req.URL.Path, \".wasm\") {\n        resp.Header().Set(\"content-type\", \"application/wasm\")\n    }\n    requestURI := req.URL.RequestURI()\n    if strings.Contains(requestURI, \"dashboard\") ||\n        strings.Contains(requestURI, \"login\") {\n        http.Redirect(resp, req, \"http://localhost:8080\", \n            http.StatusMovedPermanently)\n        return\n}\nfs.ServeHTTP(resp, req)\n}\n```", "```go\nlight-control:\nrm -rf Chapter08/html\nmkdir Chapter08/html\ntinygo build -o Chapter08/html/wasm.wasm -target wasm -no-debug Chapter08/light-control/wasm.go\ncp Chapter08/light-control/wasm_exec.js Chapter08/html/\ncp Chapter08/light-control/wasm.js Chapter08/html/\ncp Chapter08/light-control/mqtt.js Chapter08/html/\ncp Chapter08/light-control/index.html Chapter08/html/\ngo run Chapter08/wasm-server/main.go\n```", "```go\nmake light-control\n```", "```go\nlocalhost:8080\n```", "```go\ndocker start mosquitto\n```", "```go\n    const ssid = \"\"\n    const password = \"\"\n    const bedroomLight = machine.D4\n    ```", "```go\n    time.Sleep(5 * time.Second)\n    bedroomLight.Configure(machine.PinConfig{Mode: \n        machine.PinOutput})\n    ```", "```go\n    wifiClient := wifi.New(ssid, password)\n    println(\"configuring nina wifi chip\")\n    err := wifiClient.Configure()\n    if err != nil {\n        printError(\"could not configure wifi client\", err)\n    }\n    println(\"checking firmware\")\n    wifiClient.CheckHardware()\n    wifiClient.ConnectWifi()\n    ```", "```go\n    mqttClient := mqttclient.New(\"tcp://192.168.2.102:1883\", \n        \"lightControl\")\n    println(\"connecting to mqtt broker\")\n    err = mqttClient.ConnectBroker()\n    if err != nil {\n        printError(\"could not configure mqtt\", err)\n    }\n    println(\"connected to mqtt broker\")\n    ```", "```go\n    err = mqttClient.Subscribe(\n          \"home/bedroom/lights\", \n          0, \n          HandleActionMessage,\n    )\n    if err != nil {\n    printError(\"could not subscribe to topic\", err)\n    }\n    ```", "```go\n    println(\"subscribed to topic, waiting for messages\")\n    select {}\n    ```", "```go\n    func HandleActionMessage(client mqtt.Client, message \n            mqtt.Message) {\n        println(\"handling incoming message\")\n        payload := string(message.Payload())\n        controlBedroom(client, payload)\n        message.Ack()\n    }\n    ```", "```go\n    func controlBedroom(module, action string) {\n        switch action {\n        case \"on\":\n            controlBedroomlights(client, true)\n        case \"off\":\n            controlBedroomlights(client, false)\n        default:\n            println(\"unknown action:\", action)\n        }\n    }\n    ```", "```go\n    func controlBedroomlights(action bool) {\n        if action {\n            bedroomLight.High()\n        } else {\n            bedroomLight.Low()\n        }\n    }\n    ```", "```go\n    func printError(message string, err error) {\n        for {\n            println(message, err.Error())\n            time.Sleep(time.Second)\n        }\n    }\n    ```", "```go\ntinygo flash --target arduino-nano33 Chapter08/light-control-client/main.go\n```", "```go\n    function onConnect() {\n        console.log(\"Successfully connected to mqtt broker\");\n        mqtt.subscribe(\"home/status\")\n        handleOnConnect()\n    }\n    ```", "```go\n    type Service struct {\n        user login.UserInfo\n        bedroomLights bool\n        logoutChannel chan bool\n    }\n    ```", "```go\n    func New(logout chan bool) Service {\n        js.Global().\n        Set(\"handleMessage\", js.FuncOf(handleMessage))\n        js.Global().\n        Set(\"handleOnConnect\", js.FuncOf(handleOnConnect))\n        return Service{\n            logoutChannel: logout,\n        }\n    }\n    ```", "```go\n    tableElement := table.New().\n        SetHeader(\n            \"Component\",\n            \"Actions\",\n            \"Status\",\n        )\n    ```", "```go\n    componentControlElement := doc.CreateElement(\"td\")\n    statusElement := doc.CreateElement(\"td\").\n                    SetId(\"bedroom-light-status\").\n                    SetInnerHTML(\"off\")\n    ```", "```go\n    tr.AppendChildren(\n        componentNameElement, \n        componentControlElement, \n        statusElement,\n    )\n    ```", "```go\n    func requestStatus() {\n        js.Global().\n        Get(\"publish\").\n        Invoke(\"home/status-request\", \"\")\n    }\n    ```", "```go\n    func handleOnConnect(this js.Value, args []js.Value) \n            interface{} {\n        requestStatus()\n        return nil\n    }\n    ```", "```go\n    func handleMessage(this js.Value, args []js.Value) \n    interface{} {\n        message := args[0].String()\n        println(\"status message arrived:\", message)\n        messageParts := strings.Split(message, \"#\")\n        room := messageParts[0]\n        component := messageParts[1]\n        switch room {\n            case \"bedroom\":\n                switch component {\n                    case \"lights\":\n                        doc.GetElementById(\"bedroom-light-\n                            status\").\n                        SetInnerHTML(messageParts[2])default:\n                            println(\"unknown component:\", \n                                component)}\n            default:\n                println(\"unknown room:\", room)}\n        return nil\n    }\n    ```", "```go\n    var bedroomLightStatus = false\n    ```", "```go\n    err = mqttClient.Subscribe(\"home/status-request\", 0, \n        HandleStatusRequestMessage)\n    if err != nil {\n        printError(\"could not subsribe to topic\", err)\n    }\n    ```", "```go\n    func HandleStatusRequestMessage(client mqtt.Client, \n           message mqtt.Message) {\n        reportStatus(client)\n        message.Ack()\n    }\n    ```", "```go\n    func reportStatus(client mqtt.Client) {\n        status := \"off\"\n        if bedroomLightStatus {\n            status = \"on\"\n        }\n        token := client.Publish(\n                   \"home/status\", \n                   0, \n                   false, \n                   fmt.Sprintf(\"bedroom#lights#%s\", status),\n        )\n        if token.Wait() && token.Error() != nil {\n            println(token.Error())\n        }\n    }\n    ```", "```go\n    controlBedroom(\n        client,\n        splittedString[1],\n        splittedString[2],\n    )\n    ```", "```go\n    func controlBedroom(client mqtt.Client, module, action \n        string) {\n    ```", "```go\n    controlBedroomlights(client, true)\n    ```", "```go\n    func controlBedroomlights(client mqtt.Client, action \n            bool) {\n        if action {\n            bedroomLight.High()\n            bedroomLightStatus = true\n        } else {\n            bedroomLight.Low()\n            bedroomLightStatus = false\n        }\n        reportStatus(client)\n    }\n    }\n    ```"]