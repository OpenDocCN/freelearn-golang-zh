- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B16555_01_Final_VK_ePub.xhtml#_idTextAnchor014)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `tinygo info` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `tinygo flash` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Arduino UNO has a clock speed of 16 MHz. Blinking at 16 MHz is extremely
    fast and we wouldn't be able to see it. That is why we set the LED to go on and
    off for a number of milliseconds.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can find the solution in the code repository: [https://github.com/PacktPublishing/Creative-DIY-Microcontroller-Projects-with-TinyGo-and-WebAssembly/blob/master/Chapter01/blink-sos](https://github.com/PacktPublishing/Creative-DIY-Microcontroller-Projects-with-TinyGo-and-WebAssembly/blob/master/Chapter01/blink-sos)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B16555_02_Final_VK_ePub.xhtml#_idTextAnchor041)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We do this in order to prevent the LED from being damaged. Most LEDs in Arduino
    Starter Kits or similar kits work with voltages below 5V. Driving them with 5V
    could permanently damage them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Either by using an external pull-up (or pull-down) resistor or by using a built-in
    resistor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It needs to sleep in order to give the scheduler time to run the goroutine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can find a solution for this question in the GitHub repository in the `Chapter02`
    folder under `traffic-lights-blink`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B16555_03_Final_VK_ePub.xhtml#_idTextAnchor058)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The key 3 is in row 0 column 2, so the coordinates are 0,2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can find the solution at the following link: [https://github.com/PacktPublishing/Creative-DIY-Microcontroller-Projects-with-TinyGo-and-WebAssembly/blob/master/Chapter03/safety-lock-keypad-check-key/main.go](https://github.com/PacktPublishing/Creative-DIY-Microcontroller-Projects-with-TinyGo-and-WebAssembly/blob/master/Chapter03/safety-lock-keypad-check-key/main.go)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B16555_04_Final_VK_ePub.xhtml#_idTextAnchor082)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Turning these sensors off saves energy and extends the lifetime of the water
    level sensors as it slows down corrosion.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The circuit is closed when the signal is high in the Signal (In) port.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B16555_05_Final_VK_ePub.xhtml#_idTextAnchor101)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The 5V pin is deactivated by default. It requires soldering to activate it.
    Alternatively, the VIN pin could be used when the Arduino is powered through the
    USB port.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pulseLength` holds the time from sending out the pulse until returning it.
    So the pulse traveled the distance twice. That is why we have to divide `pulseLength`
    by `2`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the solution here: [https://github.com/PacktPublishing/Creative-DIY-Microcontroller-Projects-with-TinyGo-and-WebAssembly/blob/master/Chapter05/touchless-handwash-timer-120seconds/main.go](https://github.com/PacktPublishing/Creative-DIY-Microcontroller-Projects-with-TinyGo-and-WebAssembly/blob/master/Chapter05/touchless-handwash-timer-120seconds/main.go)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B16555_06_Final_VK_ePub.xhtml#_idTextAnchor118)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An I2C message contains the address of the device the message is dedicated to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The CS pin is being used to signal that a message is dedicated to a specific
    device as the CS pin is directly connected to the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B16555_07_Final_VK_ePub.xhtml#_idTextAnchor135)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To ensure that a message gets delivered, we need to use QOS level 1 or level
    2 as level 0 is a fire-and-forget approach.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, none, one, or many clients can subscribe to a topic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B16555_08_Final_VK_ePub.xhtml#_idTextAnchor150)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Validating credentials inside the Wasm code is not secure because the Wasm binary
    is being delivered to the client. The Wasm binary can then be decompiled and the
    credentials can be extracted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can always use any kind of authorization service. In general, the credentials
    should not be validated inside the client logic, but on any other service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
