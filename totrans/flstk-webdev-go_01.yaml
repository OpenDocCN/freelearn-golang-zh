- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building the Database and Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will design the database that our sample application will
    use. We will walk through the design of the database and look at some of the tools
    that we are going to use to help us on our database design journey. We will be
    using the **Postgres** database and will look at how to run it locally using **Docker**.
    What is Docker? In simple terms, Docker is a tool that allows developers to run
    a variety of applications such as the database, the HTTP server, system tools,
    and so on – locally or in the cloud. Docker removes the need to install all the
    different dependencies required to use a particular application such as a database,
    and it makes it easier to manage and maintain applications than installing on
    bare metal in both local and cloud environments. This is possible using Docker
    because it packages everything into a single file similar to how a compressed
    file contains different files internally.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will learn how to design a database that supports the features that we want
    to build, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an exercise
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a workout plan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging in to the system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will also explore tools that will help in automatic code generation based
    on SQL queries, which reduces the amount of database-related code that needs to
    be written to a large extent. Readers will learn to use the tool to also auto-generate
    all the relevant CRUD operations without writing a single line of Go code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’ll be covering the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Postgres
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing sqlc
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using sqlc
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating CRUD with sqlc
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the makefile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, we will be using version 1.16 of the Go programming language,
    but you are free to use later versions of Go, as the code will work without any
    changes. To make it easy, all the relevant files explained in this chapter can
    be checked out at [https://github.com/PacktPublishing/Full-Stack-Web-Development-with-Go/tree/main/Chapter01](https://github.com/PacktPublishing/Full-Stack-Web-Development-with-Go/tree/main/Chapter01).
    To work on the sample code in this chapter, make sure you change the directory
    to `Chapter 1` – `Full-Stack-Web-Development-with-Go/chapter1`. If you are using
    Windows as a development machine, use WSL2 to perform all the different operations
    explained in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this book, we will be using Docker to do things such as running databases
    and executing database tools, among others. You can install either Docker Desktop
    or Docker Engine. To understand more about the difference between Docker Desktop
    and Engine, visit the following link: [https://docs.docker.com/desktop/linux/install/#differences-between-docker-desktop-for-linux-and-docker-engine](https://docs.docker.com/desktop/linux/install/#differences-between-docker-desktop-for-linux-and-docker-engine).
    The authors use Docker Engine in Linux and Docker Desktop for Mac.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are installing Docker Desktop on your local machine, the following are
    the links for the different operating systems:'
  prefs: []
  type: TYPE_NORMAL
- en: Windows – [https://docs.docker.com/desktop/windows/install/](https://docs.docker.com/desktop/windows/install/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux – [https://docs.docker.com/desktop/linux/install/](https://docs.docker.com/desktop/linux/install/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: macOS – [https://docs.docker.com/desktop/mac/install/](https://docs.docker.com/desktop/mac/install/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you want to install Docker binaries, you can follow the following guide:
    [https://docs.docker.com/engine/install/binaries/](https://docs.docker.com/engine/install/binaries/).'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Postgres
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The database we chose for the sample application is Postgres; we chose Postgres
    over other databases because of the wide variety of open source tools available
    for building, configuring, and maintaining Postgres. Postgres has been open source
    from version 1 since 1989 and it is used by big tech startups worldwide. The project
    has a lot of community support in terms of tools and utilities, which makes it
    easier to manage and maintain. The database is suitable for small all the way
    to big replicated data stores.
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest way to run it locally is to run it as a Docker container. First,
    use the following command to run Postgres:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The command will run `postgres` on port `5432`; if by any chance you have other
    applications or other Postgres instances listening to this port, the command will
    fail. If you need to run Postgres on a different port, change the `-p` parameter
    (for example, `-p 5555:5432`) to a different port number.
  prefs: []
  type: TYPE_NORMAL
- en: 'If successful, you will see the container ID printed out. The ID will differ
    from what is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Check whether Postgres is up and running by using `docker ps`. The next thing
    to do is use the `psql-client` tool to connect to Postgres to test it out. A list
    of the different Postgres client tools available on different platforms can be
    found here: [https://wiki.postgresql.org/wiki/PostgreSQL_Clients](https://wiki.postgresql.org/wiki/PostgreSQL_Clients).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the standard `postgres psql` tool using Docker. Open another terminal
    and use the following Docker command to run `psql`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'What we are doing is executing the `psql` command inside the running Postgres
    container. You will see output such as the following, indicating that it has successfully
    connected to the Postgres database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'On a successful connection, you will see the following output. Note that the
    warning message mentions server major version 14 – this is to indicate that the
    server version is newer than the current `psql` version as per the documentation
    ([https://www.postgresql.org/docs/12/app-psql.xhtml](https://www.postgresql.org/docs/12/app-psql.xhtml)).
    The `psql` client will work without any problem with the Postgres server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Exit `psql` to go back to the command prompt by typing `exit`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is some guidance on common errors when trying to connect to the
    database:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Error Message** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `psql: error: could not connect to server: FATAL: password authentication
    failed for` `user “postgres”` | The password specified when running Postgres does
    not match with the password passed in using `psql`. Check the password. |'
  prefs: []
  type: TYPE_TB
- en: '| psql: error: could not connect to server: could not connect to server: Host
    is unreachable | The IP address that you use to connect to Postgres is wrong.
    |'
  prefs: []
  type: TYPE_TB
- en: With this, you have completed the local setup of Postgres and are now ready
    to start looking into designing the database.
  prefs: []
  type: TYPE_NORMAL
- en: Designing the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will look at how to design the database to allow us to
    store information for the fitness tracking application. The following screenshot
    shows a mockup of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Screenshot of the sample application](img/Figure_1.01_B18295.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – Screenshot of the sample application
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking at these functionalities, we will look at designing a database structure
    that will look like the following entity relationship diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: Entity relationship diagram
  prefs: []
  type: TYPE_NORMAL
- en: An entity relationship diagram shows the relationships of entity sets stored
    in a database.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Entity relationship diagram of our fitness application](img/Figure_1.02_B18295.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – Entity relationship diagram of our fitness application
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s drill further into each table to understand the data that they contain:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Table Name** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Users | This table contains user information for login purposes. Passwords
    will be stored as a hash, not plaintext. |'
  prefs: []
  type: TYPE_TB
- en: '| Images | This table contains images of exercises that users want to do. This
    table will store all the exercise images that the user uploads. |'
  prefs: []
  type: TYPE_TB
- en: '| Exercises | This table contains the name of the exercise that the user wants
    to do. Users will define what kind of exercise they want to do. |'
  prefs: []
  type: TYPE_TB
- en: '| Sets | This table contains the number of sets of each exercise that the user
    wants to do. |'
  prefs: []
  type: TYPE_TB
- en: '| Workouts | This table contains the workouts that the user wants to do. Users
    define a workout as a combination of exercises with the number of sets that they
    want to do. |'
  prefs: []
  type: TYPE_TB
- en: The trade-off we are making to store images in the database is to simplify the
    design; in reality, this might not be suitable for bigger images and production.
    Now that we have defined the database structure and understand what kind of data
    it will store, we need to look at how to implement it. One of the major criteria
    that we want to focus on is to completely separate writing SQL from the code;
    this way, we have a clear separation between the two, which will allow higher
    maintainability.
  prefs: []
  type: TYPE_NORMAL
- en: Installing sqlc
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have defined the database structure so now it’s time to talk a bit more about
    the tool that we are going to be using called sqlc. **sqlc** is an open source
    tool that generates type-safe code from SQL; this allows developers to focus on
    writing SQL and leave the Go code to sqlc. This reduces the development time,
    as sqlc takes care of the mundane coding of queries and types.
  prefs: []
  type: TYPE_NORMAL
- en: The tool is available at [https://github.com/kyleconroy/sqlc](https://github.com/kyleconroy/sqlc).
    The tool helps developers focus on writing the SQL code that is needed for the
    application and it will generate all the relevant code needed for the application.
    This way, developers will be using pure Go code for database operations. The separation
    is clean and easily trackable.
  prefs: []
  type: TYPE_NORMAL
- en: The following diagram shows the flow that developers normally adopt when using
    the tool at a high level.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – Flow to use sqlc to generate Go code](img/Figure_1.03_B18295.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – Flow to use sqlc to generate Go code
  prefs: []
  type: TYPE_NORMAL
- en: All SQL code will be written in `.sql` files, which will be read and converted
    by the sqlc tool into the different Go code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download and install SQL binary by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure your path includes the `GOPATH/bin` directory – for example, in our
    case, our path looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If you don’t have `GOPATH` as part of the `PATH` environment variable, then
    you can use the following command to run sqlc:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Use `"sqlc [command] --help"` for more information about a command.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, the latest version of sqlc is v1.13.0.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have installed the tool and understand the development workflow
    that we will be following when using the tool, we will look at how to use the
    tool for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Using sqlc
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, let’s take a look at the different commands provided by sqlc and how
    they work.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Commands** | **Explanation** |'
  prefs: []
  type: TYPE_TB
- en: '| `compile` | This command helps check SQL syntax and reports any typing errors.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `completion` | This command is to generate an auto-completion script for
    your environment. The following are the supported environments: Bash, Fish, PowerShell,
    and zsh. |'
  prefs: []
  type: TYPE_TB
- en: '| `generate` | A command to generate the `.go` files based on the provided
    SQL statements. This will be the command that we will be using a lot for the application.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `init` | This command is the first command that is used to initialize your
    application to start using this tool. |'
  prefs: []
  type: TYPE_TB
- en: 'The following will show how to get started with using sqlc to set up a project.
    Create a directory inside `chapter1` – for example, `dbtest` – and change the
    directory to the new directory (`dbtest`). Next, we will run sqlc with the `init`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This will automatically generate a file called `sqlc.yaml`, which contains
    a blank configuration as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `sqlc.yaml` contains configuration information that sqlc will use to generate
    all the relevant `.go` code for our SQL statements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at the structure of the `.yaml` file to understand the different
    properties. The following shows an example of a completed structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The following table explains the different fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Tag Name** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `Name` | Any string to be used as the package name. |'
  prefs: []
  type: TYPE_TB
- en: '| `Path` | Specifies the name of the directory that will host the generated
    `.``go` code. |'
  prefs: []
  type: TYPE_TB
- en: '| `Queries` | Specifies the directory name containing the SQL queries that
    sqlc will use to generate the `.``go` code. |'
  prefs: []
  type: TYPE_TB
- en: '| `Schema` | A directory containing SQL files that will be used to generate
    all the relevant `.``go` files. |'
  prefs: []
  type: TYPE_TB
- en: '| `Engine` | Specifies the database engine that will be used: sqlc supports
    either MySQL or Postgres. |'
  prefs: []
  type: TYPE_TB
- en: '| `emit_db_tags` | Setting this to `true` will generate the `struct` with `db`
    tags – for example:`type ExerciseTable` `struct {[PRE11]db:"exercise_id"``ExerciseName`
    ``string `db:"exercise_name"[PRE12]'
  prefs: []
  type: TYPE_NORMAL
- en: docker run --name test-postgres -e POSTGRES_PASSWORD=mysecretpassword -v $(pwd):/usr/share/chapter1
    -p 5432:5432 postgres
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: docker exec -it test-postgres psql -h localhost -p 5432 -U postgres -d postgres
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: \i /usr/share/chapter1/db/schema.sql
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: postgres=# \i /usr/share/chapter1/db/schema.sql
  prefs: []
  type: TYPE_NORMAL
- en: CREATE SCHEMA
  prefs: []
  type: TYPE_NORMAL
- en: CREATE TABLE
  prefs: []
  type: TYPE_NORMAL
- en: CREATE TABLE
  prefs: []
  type: TYPE_NORMAL
- en: CREATE TABLE
  prefs: []
  type: TYPE_NORMAL
- en: CREATE TABLE
  prefs: []
  type: TYPE_NORMAL
- en: CREATE TABLE
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: \dt gowebapp.*
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: postgres=# \dt gowebapp.*
  prefs: []
  type: TYPE_NORMAL
- en: List of relations
  prefs: []
  type: TYPE_NORMAL
- en: Schema  |   Name    | Type  |  Owner
  prefs: []
  type: TYPE_NORMAL
- en: '----------+-----------+-------+----------'
  prefs: []
  type: TYPE_NORMAL
- en: gowebapp | exercises | table | postgres
  prefs: []
  type: TYPE_NORMAL
- en: gowebapp | images    | table | postgres
  prefs: []
  type: TYPE_NORMAL
- en: gowebapp | sets      | table | postgres
  prefs: []
  type: TYPE_NORMAL
- en: gowebapp | users     | table | postgres
  prefs: []
  type: TYPE_NORMAL
- en: gowebapp | workouts  | table | postgres
  prefs: []
  type: TYPE_NORMAL
- en: (5 rows)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '---'
  prefs: []
  type: TYPE_NORMAL
- en: 'version: ''1'''
  prefs: []
  type: TYPE_NORMAL
- en: 'packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: chapter1'
  prefs: []
  type: TYPE_NORMAL
- en: 'path: gen'
  prefs: []
  type: TYPE_NORMAL
- en: 'schema: db/'
  prefs: []
  type: TYPE_NORMAL
- en: 'queries: queries/'
  prefs: []
  type: TYPE_NORMAL
- en: 'engine: postgresql'
  prefs: []
  type: TYPE_NORMAL
- en: 'emit_db_tags: true'
  prefs: []
  type: TYPE_NORMAL
- en: 'emit_interface: false'
  prefs: []
  type: TYPE_NORMAL
- en: 'emit_exact_table_names: false'
  prefs: []
  type: TYPE_NORMAL
- en: 'emit_empty_slices: false'
  prefs: []
  type: TYPE_NORMAL
- en: 'emit_exported_queries: false'
  prefs: []
  type: TYPE_NORMAL
- en: 'emit_json_tags: true'
  prefs: []
  type: TYPE_NORMAL
- en: 'json_tags_case_style: camel'
  prefs: []
  type: TYPE_NORMAL
- en: 'output_files_suffix: _gen'
  prefs: []
  type: TYPE_NORMAL
- en: 'emit_prepared_queries: false'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: ├── db
  prefs: []
  type: TYPE_NORMAL
- en: │   └── schema.sql
  prefs: []
  type: TYPE_NORMAL
- en: ├── go.mod
  prefs: []
  type: TYPE_NORMAL
- en: ├── queries
  prefs: []
  type: TYPE_NORMAL
- en: │   └── query.sql
  prefs: []
  type: TYPE_NORMAL
- en: └── sqlc.yaml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: sqlc generate
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: sqlc generate -f sqlc.yaml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: ./gen/
  prefs: []
  type: TYPE_NORMAL
- en: ├── db.go
  prefs: []
  type: TYPE_NORMAL
- en: ├── models.go
  prefs: []
  type: TYPE_NORMAL
- en: └── query.sql_gen.go
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: CREATE SCHEMA IF NOT EXISTS gowebapp;
  prefs: []
  type: TYPE_NORMAL
- en: CREATE TABLE gowebapp.users (
  prefs: []
  type: TYPE_NORMAL
- en: User_ID        BIGSERIAL PRIMARY KEY,
  prefs: []
  type: TYPE_NORMAL
- en: User_Name      text NOT NULL,
  prefs: []
  type: TYPE_NORMAL
- en: '....'
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '....'
  prefs: []
  type: TYPE_NORMAL
- en: CREATE TABLE gowebapp.sets (
  prefs: []
  type: TYPE_NORMAL
- en: Set_ID      BIGSERIAL PRIMARY KEY,
  prefs: []
  type: TYPE_NORMAL
- en: Exercise_ID BIGINT NOT NULL,
  prefs: []
  type: TYPE_NORMAL
- en: Weight      INT NOT NULL DEFAULT 0
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '-- name: ListUsers :many'
  prefs: []
  type: TYPE_NORMAL
- en: -- get all users ordered by the username
  prefs: []
  type: TYPE_NORMAL
- en: SELECT *
  prefs: []
  type: TYPE_NORMAL
- en: FROM gowebapp.users
  prefs: []
  type: TYPE_NORMAL
- en: ORDER BY user_name;
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '-- name: DeleteUserImage :exec'
  prefs: []
  type: TYPE_NORMAL
- en: -- delete a particular user's image
  prefs: []
  type: TYPE_NORMAL
- en: DELETE
  prefs: []
  type: TYPE_NORMAL
- en: FROM gowebapp.images i
  prefs: []
  type: TYPE_NORMAL
- en: WHERE i.user_id = $1;
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '-- name: UpsertExercise :one'
  prefs: []
  type: TYPE_NORMAL
- en: -- insert or update exercise of a particular id
  prefs: []
  type: TYPE_NORMAL
- en: INSERT INTO gowebapp.exercises (Exercise_Name)
  prefs: []
  type: TYPE_NORMAL
- en: VALUES ($1) ON CONFLICT (Exercise_ID) DO
  prefs: []
  type: TYPE_NORMAL
- en: UPDATE
  prefs: []
  type: TYPE_NORMAL
- en: SET Exercise_Name = EXCLUDED.Exercise_Name
  prefs: []
  type: TYPE_NORMAL
- en: RETURNING Exercise_ID;
  prefs: []
  type: TYPE_NORMAL
- en: '-- name: CreateUserImage :one'
  prefs: []
  type: TYPE_NORMAL
- en: -- insert a new image
  prefs: []
  type: TYPE_NORMAL
- en: INSERT INTO gowebapp.images (User_ID, Content_Type,
  prefs: []
  type: TYPE_NORMAL
- en: Image_Data)
  prefs: []
  type: TYPE_NORMAL
- en: values ($1,
  prefs: []
  type: TYPE_NORMAL
- en: $2,
  prefs: []
  type: TYPE_NORMAL
- en: $3) RETURNING *;
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: func New(db DBTX) *Queries {
  prefs: []
  type: TYPE_NORMAL
- en: 'return &Queries{db: db}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: func (q *Queries) WithTx(tx *sql.Tx) *Queries {
  prefs: []
  type: TYPE_NORMAL
- en: return &Queries{
  prefs: []
  type: TYPE_NORMAL
- en: 'db: tx,'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: type GowebappExercise struct {
  prefs: []
  type: TYPE_NORMAL
- en: ExerciseID   int64  `db:"exercise_id"
  prefs: []
  type: TYPE_NORMAL
- en: json:"exerciseID"`
  prefs: []
  type: TYPE_NORMAL
- en: ExerciseName string `db:"exercise_name"
  prefs: []
  type: TYPE_NORMAL
- en: json:"exerciseName"`
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: type GowebappWorkout struct {
  prefs: []
  type: TYPE_NORMAL
- en: WorkoutID int64     `db:"workout_id"
  prefs: []
  type: TYPE_NORMAL
- en: json:"workoutID"`
  prefs: []
  type: TYPE_NORMAL
- en: UserID    int64     `db:"user_id" json:"userID"`
  prefs: []
  type: TYPE_NORMAL
- en: SetID     int64     `db:"set_id" json:"setID"`
  prefs: []
  type: TYPE_NORMAL
- en: StartDate time.Time `db:"start_date"
  prefs: []
  type: TYPE_NORMAL
- en: json:"startDate"`
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'const deleteUsers = `-- name: DeleteUsers :exec'
  prefs: []
  type: TYPE_NORMAL
- en: DELETE FROM gowebapp.users
  prefs: []
  type: TYPE_NORMAL
- en: WHERE user_id = $1
  prefs: []
  type: TYPE_NORMAL
- en: '`'
  prefs: []
  type: TYPE_NORMAL
- en: func (q *Queries) DeleteUsers(ctx context.Context,
  prefs: []
  type: TYPE_NORMAL
- en: userID int64) error {
  prefs: []
  type: TYPE_NORMAL
- en: _, err := q.db.ExecContext(ctx, deleteUsers, userID)
  prefs: []
  type: TYPE_NORMAL
- en: return err
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: 'const getUsers = `-- name: GetUsers :one'
  prefs: []
  type: TYPE_NORMAL
- en: SELECT user_id, user_name, pass_word_hash, name, config, created_at, is_enabled
    FROM gowebapp.users
  prefs: []
  type: TYPE_NORMAL
- en: WHERE user_id = $1 LIMIT 1
  prefs: []
  type: TYPE_NORMAL
- en: '`'
  prefs: []
  type: TYPE_NORMAL
- en: func (q *Queries) GetUsers(ctx context.Context, userID int64) (GowebappUser,
    error) {
  prefs: []
  type: TYPE_NORMAL
- en: row := q.db.QueryRowContext(ctx, getUsers, userID)
  prefs: []
  type: TYPE_NORMAL
- en: var i GowebappUser
  prefs: []
  type: TYPE_NORMAL
- en: err := row.Scan(
  prefs: []
  type: TYPE_NORMAL
- en: '&i.UserID,'
  prefs: []
  type: TYPE_NORMAL
- en: '&i.UserName,'
  prefs: []
  type: TYPE_NORMAL
- en: '&i.PassWordHash,'
  prefs: []
  type: TYPE_NORMAL
- en: '&i.Name,'
  prefs: []
  type: TYPE_NORMAL
- en: '&i.Config,'
  prefs: []
  type: TYPE_NORMAL
- en: '&i.CreatedAt,'
  prefs: []
  type: TYPE_NORMAL
- en: '&i.IsEnabled,'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: return i, err
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: package main
  prefs: []
  type: TYPE_NORMAL
- en: import (
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: func main() {
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: // Open the database
  prefs: []
  type: TYPE_NORMAL
- en: db, err := sql.Open("postgres", dbURI)
  prefs: []
  type: TYPE_NORMAL
- en: if err != nil {
  prefs: []
  type: TYPE_NORMAL
- en: panic(err)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // Connectivity check
  prefs: []
  type: TYPE_NORMAL
- en: if err := db.Ping(); err != nil {
  prefs: []
  type: TYPE_NORMAL
- en: log.Fatalln("Error from database ping:", err)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // Create the store
  prefs: []
  type: TYPE_NORMAL
- en: st := chapter1.New(db)
  prefs: []
  type: TYPE_NORMAL
- en: st.CreateUsers(context.Background(),
  prefs: []
  type: TYPE_NORMAL
- en: chapter1.CreateUsersParams{
  prefs: []
  type: TYPE_NORMAL
- en: UserName:     "testuser",
  prefs: []
  type: TYPE_NORMAL
- en: 'PassWordHash: "hash",'
  prefs: []
  type: TYPE_NORMAL
- en: Name:         "test",
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: go build -o chapter1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 2022/05/15 16:10:49 Done!
  prefs: []
  type: TYPE_NORMAL
- en: 'Name : test, ID : 1'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: ..
  prefs: []
  type: TYPE_NORMAL
- en: '.PHONY : postgresup postgresdown psql createdb teardown_recreate generate'
  prefs: []
  type: TYPE_NORMAL
- en: 'postgresup:'
  prefs: []
  type: TYPE_NORMAL
- en: docker run --name test-postgres -v $(PWD):/usr/share/chapter1 -e POSTGRES_PASSWORD=$(DB_PWD)
    -p 5432:5432 -d $(DB_NAME)
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: task to create database without typing it manually
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'createdb:'
  prefs: []
  type: TYPE_NORMAL
- en: docker exec -it test-postgres psql $(PSQLURL) -c "\i /usr/share/chapter1/db/schema.sql"
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: make postgresup
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: make postgresdown
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: make generate
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have covered the different stages that we need to go through
    to set up the database for our fitness application. We have also written a makefile
    to save us time by automating different database-related tasks that will be needed
    for the development process.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at logging for our sample application. Logging
    is a simple, yet crucial component. Applications use logging to provide visibility
    into the running state of an application.
  prefs: []
  type: TYPE_NORMAL
