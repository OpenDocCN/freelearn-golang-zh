- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Building the Database and Model
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建数据库和模型
- en: In this chapter, we will design the database that our sample application will
    use. We will walk through the design of the database and look at some of the tools
    that we are going to use to help us on our database design journey. We will be
    using the **Postgres** database and will look at how to run it locally using **Docker**.
    What is Docker? In simple terms, Docker is a tool that allows developers to run
    a variety of applications such as the database, the HTTP server, system tools,
    and so on – locally or in the cloud. Docker removes the need to install all the
    different dependencies required to use a particular application such as a database,
    and it makes it easier to manage and maintain applications than installing on
    bare metal in both local and cloud environments. This is possible using Docker
    because it packages everything into a single file similar to how a compressed
    file contains different files internally.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将设计我们的示例应用程序将使用的数据库。我们将逐步介绍数据库的设计，并查看我们将使用的一些工具，这些工具将帮助我们进行数据库设计之旅。我们将使用
    **Postgres** 数据库，并查看如何使用 **Docker** 在本地运行它。什么是 Docker？简单来说，Docker 是一个允许开发者本地或云端运行各种应用程序的工具，如数据库、HTTP
    服务器、系统工具等。Docker 消除了安装特定应用程序（如数据库）所需的所有不同依赖项的需求，并且它使得在本地和云端环境中管理维护应用程序比在裸机上安装更为容易。这是可能的，因为
    Docker 将所有内容打包到一个单独的文件中，就像压缩文件内部包含不同的文件一样。
- en: 'We will learn how to design a database that supports the features that we want
    to build, such as the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习如何设计一个支持我们想要构建的功能的数据库，例如以下内容：
- en: Creating an exercise
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建练习
- en: Creating a workout plan
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建锻炼计划
- en: Logging in to the system
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录系统
- en: We will also explore tools that will help in automatic code generation based
    on SQL queries, which reduces the amount of database-related code that needs to
    be written to a large extent. Readers will learn to use the tool to also auto-generate
    all the relevant CRUD operations without writing a single line of Go code.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将探索一些工具，这些工具将帮助我们基于 SQL 查询进行自动代码生成，这在很大程度上减少了需要编写的数据库相关代码的数量。读者将学习如何使用该工具自动生成所有相关的
    CRUD 操作，而无需编写任何 Go 代码。
- en: 'In this chapter, we’ll be covering the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Installing Docker
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Docker
- en: Setting up Postgres
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Postgres
- en: Designing the database
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计数据库
- en: Installing sqlc
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 sqlc
- en: Using sqlc
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 sqlc
- en: Setting up the database
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置数据库
- en: Generating CRUD with sqlc
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 sqlc 生成 CRUD
- en: Building the makefile
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 makefile
- en: Technical requirements
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this book, we will be using version 1.16 of the Go programming language,
    but you are free to use later versions of Go, as the code will work without any
    changes. To make it easy, all the relevant files explained in this chapter can
    be checked out at [https://github.com/PacktPublishing/Full-Stack-Web-Development-with-Go/tree/main/Chapter01](https://github.com/PacktPublishing/Full-Stack-Web-Development-with-Go/tree/main/Chapter01).
    To work on the sample code in this chapter, make sure you change the directory
    to `Chapter 1` – `Full-Stack-Web-Development-with-Go/chapter1`. If you are using
    Windows as a development machine, use WSL2 to perform all the different operations
    explained in this chapter.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将使用 Go 编程语言的 1.16 版本，但你也可以自由地使用 Go 的后续版本，因为代码无需任何修改即可运行。为了方便，本章中解释的所有相关文件都可以在
    [https://github.com/PacktPublishing/Full-Stack-Web-Development-with-Go/tree/main/Chapter01](https://github.com/PacktPublishing/Full-Stack-Web-Development-with-Go/tree/main/Chapter01)
    上检出。要在此章节中工作样本代码，请确保将目录更改为 `Chapter 1` – `Full-Stack-Web-Development-with-Go/chapter1`。如果你使用
    Windows 作为开发机器，请使用 WSL2 来执行本章中解释的所有不同操作。
- en: Installing Docker
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Docker
- en: 'In this book, we will be using Docker to do things such as running databases
    and executing database tools, among others. You can install either Docker Desktop
    or Docker Engine. To understand more about the difference between Docker Desktop
    and Engine, visit the following link: [https://docs.docker.com/desktop/linux/install/#differences-between-docker-desktop-for-linux-and-docker-engine](https://docs.docker.com/desktop/linux/install/#differences-between-docker-desktop-for-linux-and-docker-engine).
    The authors use Docker Engine in Linux and Docker Desktop for Mac.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将使用 Docker 来执行诸如运行数据库和执行数据库工具等任务。你可以安装 Docker Desktop 或 Docker Engine。要了解
    Docker Desktop 和 Engine 之间的区别，请访问以下链接：[https://docs.docker.com/desktop/linux/install/#differences-between-docker-desktop-for-linux-and-docker-engine](https://docs.docker.com/desktop/linux/install/#differences-between-docker-desktop-for-linux-and-docker-engine)。作者在
    Linux 上使用 Docker Engine，在 Mac 上使用 Docker Desktop。
- en: 'If you are installing Docker Desktop on your local machine, the following are
    the links for the different operating systems:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在本地机器上安装Docker Desktop，以下链接是不同操作系统的链接：
- en: Windows – [https://docs.docker.com/desktop/windows/install/](https://docs.docker.com/desktop/windows/install/)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows – [https://docs.docker.com/desktop/windows/install/](https://docs.docker.com/desktop/windows/install/)
- en: Linux – [https://docs.docker.com/desktop/linux/install/](https://docs.docker.com/desktop/linux/install/)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux – [https://docs.docker.com/desktop/linux/install/](https://docs.docker.com/desktop/linux/install/)
- en: macOS – [https://docs.docker.com/desktop/mac/install/](https://docs.docker.com/desktop/mac/install/)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS – [https://docs.docker.com/desktop/mac/install/](https://docs.docker.com/desktop/mac/install/)
- en: 'If you want to install Docker binaries, you can follow the following guide:
    [https://docs.docker.com/engine/install/binaries/](https://docs.docker.com/engine/install/binaries/).'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要安装Docker二进制文件，你可以按照以下指南进行：[https://docs.docker.com/engine/install/binaries/](https://docs.docker.com/engine/install/binaries/)。
- en: Setting up Postgres
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Postgres
- en: The database we chose for the sample application is Postgres; we chose Postgres
    over other databases because of the wide variety of open source tools available
    for building, configuring, and maintaining Postgres. Postgres has been open source
    from version 1 since 1989 and it is used by big tech startups worldwide. The project
    has a lot of community support in terms of tools and utilities, which makes it
    easier to manage and maintain. The database is suitable for small all the way
    to big replicated data stores.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为示例应用程序选择的数据库是Postgres；我们选择Postgres而不是其他数据库，是因为有大量开源工具可用于构建、配置和维护Postgres。自1989年版本1以来，Postgres就是开源的，并且被全球的大型科技初创公司所使用。该项目在工具和实用程序方面拥有大量的社区支持，这使得管理和维护变得更加容易。该数据库适用于从小型到大型复制的数据库存储。
- en: 'The easiest way to run it locally is to run it as a Docker container. First,
    use the following command to run Postgres:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地运行它的最简单方法是将其作为Docker容器运行。首先，使用以下命令来运行Postgres：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The command will run `postgres` on port `5432`; if by any chance you have other
    applications or other Postgres instances listening to this port, the command will
    fail. If you need to run Postgres on a different port, change the `-p` parameter
    (for example, `-p 5555:5432`) to a different port number.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 命令将在端口`5432`上运行`postgres`；如果不幸有其他应用程序或其他Postgres实例监听此端口，则命令将失败。如果你需要在不同的端口上运行Postgres，请将`-p`参数（例如，`-p
    5555:5432`）更改为不同的端口号。
- en: 'If successful, you will see the container ID printed out. The ID will differ
    from what is shown here:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功，你将看到打印出的容器ID。ID将与此处显示的不同：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Check whether Postgres is up and running by using `docker ps`. The next thing
    to do is use the `psql-client` tool to connect to Postgres to test it out. A list
    of the different Postgres client tools available on different platforms can be
    found here: [https://wiki.postgresql.org/wiki/PostgreSQL_Clients](https://wiki.postgresql.org/wiki/PostgreSQL_Clients).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`docker ps`检查Postgres是否正在运行。接下来要做的事情是使用`psql-client`工具连接到Postgres以测试它。不同平台上可用的不同Postgres客户端工具的列表可以在此找到：[https://wiki.postgresql.org/wiki/PostgreSQL_Clients](https://wiki.postgresql.org/wiki/PostgreSQL_Clients)。
- en: 'We will use the standard `postgres psql` tool using Docker. Open another terminal
    and use the following Docker command to run `psql`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Docker的标准`postgres psql`工具。打开另一个终端，并使用以下Docker命令来运行`psql`：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'What we are doing is executing the `psql` command inside the running Postgres
    container. You will see output such as the following, indicating that it has successfully
    connected to the Postgres database:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所做的是在运行的Postgres容器内执行`psql`命令。你将看到如下输出，表明它已成功连接到Postgres数据库：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'On a successful connection, you will see the following output. Note that the
    warning message mentions server major version 14 – this is to indicate that the
    server version is newer than the current `psql` version as per the documentation
    ([https://www.postgresql.org/docs/12/app-psql.xhtml](https://www.postgresql.org/docs/12/app-psql.xhtml)).
    The `psql` client will work without any problem with the Postgres server:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功连接后，你将看到以下输出。请注意，警告信息提到了服务器主版本14 – 这是为了表明服务器版本比根据文档（[https://www.postgresql.org/docs/12/app-psql.xhtml](https://www.postgresql.org/docs/12/app-psql.xhtml)）中所述的当前`psql`版本更新。`psql`客户端将与Postgres服务器无任何问题地工作：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Exit `psql` to go back to the command prompt by typing `exit`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通过输入`exit`退出`psql`，回到命令提示符。
- en: 'The following is some guidance on common errors when trying to connect to the
    database:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在尝试连接到数据库时遇到的一些常见错误的指导：
- en: '| **Error Message** | **Description** |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| **错误信息** | **描述** |'
- en: '| `psql: error: could not connect to server: FATAL: password authentication
    failed for` `user “postgres”` | The password specified when running Postgres does
    not match with the password passed in using `psql`. Check the password. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `psql: 错误：无法连接到服务器：FATAL: 密码认证失败 for` `user “postgres”` | 运行Postgres时指定的密码与使用`psql`传入的密码不匹配。检查密码。|'
- en: '| psql: error: could not connect to server: could not connect to server: Host
    is unreachable | The IP address that you use to connect to Postgres is wrong.
    |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| psql: 错误：无法连接到服务器：无法连接到服务器：主机不可达 | 你用于连接Postgres的IP地址是错误的。|'
- en: With this, you have completed the local setup of Postgres and are now ready
    to start looking into designing the database.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，你已经完成了Postgres的本地设置，现在可以开始设计数据库了。
- en: Designing the database
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计数据库
- en: 'In this section, we will look at how to design the database to allow us to
    store information for the fitness tracking application. The following screenshot
    shows a mockup of the application:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何设计数据库，以便我们能够存储健身跟踪应用程序的信息。以下截图显示了应用程序的模拟：
- en: '![Figure 1.1 – Screenshot of the sample application](img/Figure_1.01_B18295.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1 – 样本应用的截图](img/Figure_1.01_B18295.jpg)'
- en: Figure 1.1 – Screenshot of the sample application
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 – 样本应用的截图
- en: 'Looking at these functionalities, we will look at designing a database structure
    that will look like the following entity relationship diagram:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看这些功能后，我们将探讨设计一个如下实体关系图所示的数据库结构：
- en: Entity relationship diagram
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 实体关系图
- en: An entity relationship diagram shows the relationships of entity sets stored
    in a database.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 实体关系图显示了存储在数据库中的实体集之间的关系。
- en: '![Figure 1.2 – Entity relationship diagram of our fitness application](img/Figure_1.02_B18295.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图1.2 – 我们健身应用的实体关系图](img/Figure_1.02_B18295.jpg)'
- en: Figure 1.2 – Entity relationship diagram of our fitness application
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 – 我们健身应用的实体关系图
- en: 'Let’s drill further into each table to understand the data that they contain:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进一步深入到每个表中，以了解它们包含的数据：
- en: '| **Table Name** | **Description** |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| **表名** | **描述** |'
- en: '| Users | This table contains user information for login purposes. Passwords
    will be stored as a hash, not plaintext. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 用户 | 此表包含用于登录的用户信息。密码将以哈希形式存储，而不是明文。|'
- en: '| Images | This table contains images of exercises that users want to do. This
    table will store all the exercise images that the user uploads. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 图片 | 此表包含用户想要做的练习的图片。此表将存储用户上传的所有练习图片。|'
- en: '| Exercises | This table contains the name of the exercise that the user wants
    to do. Users will define what kind of exercise they want to do. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 练习 | 此表包含用户想要做的练习的名称。用户将定义他们想要做的练习类型。|'
- en: '| Sets | This table contains the number of sets of each exercise that the user
    wants to do. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 组数 | 此表包含用户想要做的每个练习的组数。|'
- en: '| Workouts | This table contains the workouts that the user wants to do. Users
    define a workout as a combination of exercises with the number of sets that they
    want to do. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 训练 | 此表包含用户想要做的训练。用户将训练定义为一系列他们想要做的练习的组合，包括他们想要做的组数。|'
- en: The trade-off we are making to store images in the database is to simplify the
    design; in reality, this might not be suitable for bigger images and production.
    Now that we have defined the database structure and understand what kind of data
    it will store, we need to look at how to implement it. One of the major criteria
    that we want to focus on is to completely separate writing SQL from the code;
    this way, we have a clear separation between the two, which will allow higher
    maintainability.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为了在数据库中存储图片所做的权衡是简化设计；在现实中，这可能不适合更大的图片和生产环境。现在我们已经定义了数据库结构并了解了它将存储的数据类型，我们需要看看如何实现它。我们想要关注的主要标准之一是完全将编写SQL与代码分开；这样，我们就有了一个清晰的分离，这将允许更高的可维护性。
- en: Installing sqlc
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装sqlc
- en: We have defined the database structure so now it’s time to talk a bit more about
    the tool that we are going to be using called sqlc. **sqlc** is an open source
    tool that generates type-safe code from SQL; this allows developers to focus on
    writing SQL and leave the Go code to sqlc. This reduces the development time,
    as sqlc takes care of the mundane coding of queries and types.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经定义了数据库结构，现在让我们更多地谈谈我们将要使用的工具，称为sqlc。**sqlc**是一个开源工具，它从SQL生成类型安全的代码；这允许开发者专注于编写SQL，将Go代码留给sqlc。这减少了开发时间，因为sqlc负责查询和类型的日常编码。
- en: The tool is available at [https://github.com/kyleconroy/sqlc](https://github.com/kyleconroy/sqlc).
    The tool helps developers focus on writing the SQL code that is needed for the
    application and it will generate all the relevant code needed for the application.
    This way, developers will be using pure Go code for database operations. The separation
    is clean and easily trackable.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 工具可在 [https://github.com/kyleconroy/sqlc](https://github.com/kyleconroy/sqlc)
    获取。该工具帮助开发者专注于编写应用程序所需的 SQL 代码，并将生成应用程序所需的所有相关代码。这样，开发者将使用纯 Go 代码进行数据库操作。这种分离是清晰且易于追踪的。
- en: The following diagram shows the flow that developers normally adopt when using
    the tool at a high level.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了开发者在使用此工具时通常采用的高级流程。
- en: '![Figure 1.3 – Flow to use sqlc to generate Go code](img/Figure_1.03_B18295.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3 – 使用 sqlc 生成 Go 代码的流程](img/Figure_1.03_B18295.jpg)'
- en: Figure 1.3 – Flow to use sqlc to generate Go code
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – 使用 sqlc 生成 Go 代码的流程
- en: All SQL code will be written in `.sql` files, which will be read and converted
    by the sqlc tool into the different Go code.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 SQL 代码都将写入 `.sql` 文件中，这些文件将由 sqlc 工具读取并转换为不同的 Go 代码。
- en: 'Download and install SQL binary by using the following command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令下载并安装 SQL 二进制文件：
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Make sure your path includes the `GOPATH/bin` directory – for example, in our
    case, our path looks like the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的路径包括 `GOPATH/bin` 目录 – 例如，在我们的案例中，我们的路径看起来如下：
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you don’t have `GOPATH` as part of the `PATH` environment variable, then
    you can use the following command to run sqlc:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有将 `GOPATH` 作为 `PATH` 环境变量的一部分，那么你可以使用以下命令来运行 sqlc：
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Use `"sqlc [command] --help"` for more information about a command.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `"sqlc [command] --help"` 获取有关命令的更多信息。
- en: At the time of writing, the latest version of sqlc is v1.13.0.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写本文时，sqlc 的最新版本是 v1.13.0。
- en: Now that we have installed the tool and understand the development workflow
    that we will be following when using the tool, we will look at how to use the
    tool for our application.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了工具并了解了我们将使用此工具时遵循的开发工作流程，我们将看看如何为我们的应用程序使用此工具。
- en: Using sqlc
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 sqlc
- en: First, let’s take a look at the different commands provided by sqlc and how
    they work.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看 sqlc 提供的不同命令以及它们是如何工作的。
- en: '| **Commands** | **Explanation** |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | **说明** |'
- en: '| `compile` | This command helps check SQL syntax and reports any typing errors.
    |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `compile` | 此命令有助于检查 SQL 语法并报告任何类型错误。|'
- en: '| `completion` | This command is to generate an auto-completion script for
    your environment. The following are the supported environments: Bash, Fish, PowerShell,
    and zsh. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `completion` | 此命令用于为你的环境生成自动完成脚本。以下支持的环境：Bash、Fish、PowerShell 和 zsh。|'
- en: '| `generate` | A command to generate the `.go` files based on the provided
    SQL statements. This will be the command that we will be using a lot for the application.
    |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `generate` | 一个基于提供的 SQL 语句生成 `.go` 文件的命令。这将是我们在应用程序中大量使用的命令。|'
- en: '| `init` | This command is the first command that is used to initialize your
    application to start using this tool. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `init` | 此命令是第一个用于初始化你的应用程序以开始使用此工具的命令。|'
- en: 'The following will show how to get started with using sqlc to set up a project.
    Create a directory inside `chapter1` – for example, `dbtest` – and change the
    directory to the new directory (`dbtest`). Next, we will run sqlc with the `init`
    command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下将展示如何开始使用 sqlc 来设置项目。在 `chapter1` 目录内创建一个目录 – 例如，`dbtest` – 然后将目录更改为新目录（`dbtest`）。接下来，我们将使用
    `init` 命令运行 sqlc：
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This will automatically generate a file called `sqlc.yaml`, which contains
    a blank configuration as shown here:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这将自动生成一个名为 `sqlc.yaml` 的文件，其中包含如所示的一个空白配置：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `sqlc.yaml` contains configuration information that sqlc will use to generate
    all the relevant `.go` code for our SQL statements.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`sqlc.yaml` 包含 sqlc 将使用它来为我们的 SQL 语句生成所有相关 `.go` 代码的配置信息。'
- en: 'Let’s take a look at the structure of the `.yaml` file to understand the different
    properties. The following shows an example of a completed structure:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 `.yaml` 文件的结构，以了解不同的属性。以下是一个完成结构的示例：
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following table explains the different fields:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格解释了不同的字段：
- en: '| **Tag Name** | **Description** |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| **标签名称** | **描述** |'
- en: '| `Name` | Any string to be used as the package name. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `Name` | 任何用作包名的字符串。|'
- en: '| `Path` | Specifies the name of the directory that will host the generated
    `.``go` code. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `Path` | 指定将托管生成的 `.go` 代码的目录名称。|'
- en: '| `Queries` | Specifies the directory name containing the SQL queries that
    sqlc will use to generate the `.``go` code. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
- en: '| `Schema` | A directory containing SQL files that will be used to generate
    all the relevant `.``go` files. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
- en: '| `Engine` | Specifies the database engine that will be used: sqlc supports
    either MySQL or Postgres. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
- en: '| `emit_db_tags` | Setting this to `true` will generate the `struct` with `db`
    tags – for example:`type ExerciseTable` `struct {[PRE11]db:"exercise_id"``ExerciseName`
    ``string `db:"exercise_name"[PRE12]'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: docker run --name test-postgres -e POSTGRES_PASSWORD=mysecretpassword -v $(pwd):/usr/share/chapter1
    -p 5432:5432 postgres
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: docker exec -it test-postgres psql -h localhost -p 5432 -U postgres -d postgres
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: \i /usr/share/chapter1/db/schema.sql
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: postgres=# \i /usr/share/chapter1/db/schema.sql
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: CREATE SCHEMA
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: CREATE TABLE
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: CREATE TABLE
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: CREATE TABLE
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: CREATE TABLE
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: CREATE TABLE
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: \dt gowebapp.*
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: postgres=# \dt gowebapp.*
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: List of relations
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Schema  |   Name    | Type  |  Owner
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '----------+-----------+-------+----------'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: gowebapp | exercises | table | postgres
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: gowebapp | images    | table | postgres
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: gowebapp | sets      | table | postgres
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: gowebapp | users     | table | postgres
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: gowebapp | workouts  | table | postgres
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: (5 rows)
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '---'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: 'version: ''1'''
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: 'packages:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '- name: chapter1'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: 'path: gen'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: 'schema: db/'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'queries: queries/'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: 'engine: postgresql'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'emit_db_tags: true'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'emit_interface: false'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'emit_exact_table_names: false'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: 'emit_empty_slices: false'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: 'emit_exported_queries: false'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: 'emit_json_tags: true'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: 'json_tags_case_style: camel'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: 'output_files_suffix: _gen'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: 'emit_prepared_queries: false'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: .
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: ├── db
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: │   └── schema.sql
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: ├── go.mod
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: ├── queries
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: │   └── query.sql
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: └── sqlc.yaml
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: sqlc generate
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: sqlc generate -f sqlc.yaml
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: ./gen/
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: ├── db.go
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: ├── models.go
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: └── query.sql_gen.go
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: CREATE SCHEMA IF NOT EXISTS gowebapp;
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: CREATE TABLE gowebapp.users (
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: User_ID        BIGSERIAL PRIMARY KEY,
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: User_Name      text NOT NULL,
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '....'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '....'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: CREATE TABLE gowebapp.sets (
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Set_ID      BIGSERIAL PRIMARY KEY,
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Exercise_ID BIGINT NOT NULL,
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: Weight      INT NOT NULL DEFAULT 0
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '-- name: ListUsers :many'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: -- get all users ordered by the username
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: SELECT *
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: FROM gowebapp.users
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: ORDER BY user_name;
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '-- name: DeleteUserImage :exec'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: -- delete a particular user's image
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: DELETE
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: FROM gowebapp.images i
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: WHERE i.user_id = $1;
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '-- name: UpsertExercise :one'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: -- insert or update exercise of a particular id
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: INSERT INTO gowebapp.exercises (Exercise_Name)
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: VALUES ($1) ON CONFLICT (Exercise_ID) DO
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: UPDATE
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: SET Exercise_Name = EXCLUDED.Exercise_Name
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: RETURNING Exercise_ID;
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '-- name: CreateUserImage :one'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: -- insert a new image
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: INSERT INTO gowebapp.images (User_ID, Content_Type,
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Image_Data)
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: values ($1,
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: $2,
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: $3) RETURNING *;
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: func New(db DBTX) *Queries {
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: 'return &Queries{db: db}'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: func (q *Queries) WithTx(tx *sql.Tx) *Queries {
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: return &Queries{
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'db: tx,'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: type GowebappExercise struct {
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: ExerciseID   int64  `db:"exercise_id"
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: json:"exerciseID"`
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: ExerciseName string `db:"exercise_name"
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: json:"exerciseName"`
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: type GowebappWorkout struct {
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: WorkoutID int64     `db:"workout_id"
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: WorkoutID int64     `db:"workout_id"
- en: json:"workoutID"`
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: json:"workoutID"`
- en: UserID    int64     `db:"user_id" json:"userID"`
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: UserID    int64     `db:"user_id" json:"userID"`
- en: SetID     int64     `db:"set_id" json:"setID"`
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: SetID     int64     `db:"set_id" json:"setID"`
- en: StartDate time.Time `db:"start_date"
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: StartDate time.Time `db:"start_date"
- en: json:"startDate"`
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: json:"startDate"`
- en: '}'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE27]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'const deleteUsers = `-- name: DeleteUsers :exec'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 'const deleteUsers = `-- name: DeleteUsers :exec'
- en: DELETE FROM gowebapp.users
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: DELETE FROM gowebapp.users
- en: WHERE user_id = $1
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: WHERE user_id = $1
- en: '`'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`'
- en: func (q *Queries) DeleteUsers(ctx context.Context,
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: func (q *Queries) DeleteUsers(ctx context.Context,
- en: userID int64) error {
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: userID int64) error {
- en: _, err := q.db.ExecContext(ctx, deleteUsers, userID)
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: _, err := q.db.ExecContext(ctx, deleteUsers, userID)
- en: return err
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: return err
- en: '}'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '...'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: 'const getUsers = `-- name: GetUsers :one'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 'const getUsers = `-- name: GetUsers :one'
- en: SELECT user_id, user_name, pass_word_hash, name, config, created_at, is_enabled
    FROM gowebapp.users
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT user_id, user_name, pass_word_hash, name, config, created_at, is_enabled
    FROM gowebapp.users
- en: WHERE user_id = $1 LIMIT 1
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: WHERE user_id = $1 LIMIT 1
- en: '`'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`'
- en: func (q *Queries) GetUsers(ctx context.Context, userID int64) (GowebappUser,
    error) {
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: func (q *Queries) GetUsers(ctx context.Context, userID int64) (GowebappUser,
    error) {
- en: row := q.db.QueryRowContext(ctx, getUsers, userID)
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: row := q.db.QueryRowContext(ctx, getUsers, userID)
- en: var i GowebappUser
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: var i GowebappUser
- en: err := row.Scan(
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: err := row.Scan(
- en: '&i.UserID,'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '&i.UserID,'
- en: '&i.UserName,'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '&i.UserName,'
- en: '&i.PassWordHash,'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '&i.PassWordHash,'
- en: '&i.Name,'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '&i.Name,'
- en: '&i.Config,'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '&i.Config,'
- en: '&i.CreatedAt,'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '&i.CreatedAt,'
- en: '&i.IsEnabled,'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '&i.IsEnabled,'
- en: )
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: return i, err
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: return i, err
- en: '}'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '...'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '[PRE28]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: package main
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 包 main
- en: import (
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: import (
- en: '...'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: )
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: func main() {
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: func main() {
- en: '...'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: // Open the database
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: // 打开数据库
- en: db, err := sql.Open("postgres", dbURI)
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: db, err := sql.Open("postgres", dbURI)
- en: if err != nil {
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: if err != nil {
- en: panic(err)
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: panic(err)
- en: '}'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Connectivity check
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: // 连通性检查
- en: if err := db.Ping(); err != nil {
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 db.Ping() 出现错误 {
- en: log.Fatalln("Error from database ping:", err)
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: log.Fatalln("数据库ping错误:", err)
- en: '}'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Create the store
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建存储
- en: st := chapter1.New(db)
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: st := chapter1.New(db)
- en: st.CreateUsers(context.Background(),
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: st.CreateUsers(context.Background(),
- en: chapter1.CreateUsersParams{
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: chapter1.CreateUsersParams{
- en: UserName:     "testuser",
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 用户名:     "testuser",
- en: 'PassWordHash: "hash",'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 'PassWordHash: "hash",'
- en: Name:         "test",
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 名称:         "test",
- en: '})'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: '}'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE29]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: go build -o chapter1
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: go build -o chapter1
- en: '[PRE30]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 2022/05/15 16:10:49 Done!
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 2022/05/15 16:10:49 完成！
- en: 'Name : test, ID : 1'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '名称 : test, ID : 1'
- en: '[PRE31]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: ..
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: ..
- en: '.PHONY : postgresup postgresdown psql createdb teardown_recreate generate'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '.PHONY : postgresup postgresdown psql createdb teardown_recreate generate'
- en: 'postgresup:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 'postgresup:'
- en: docker run --name test-postgres -v $(PWD):/usr/share/chapter1 -e POSTGRES_PASSWORD=$(DB_PWD)
    -p 5432:5432 -d $(DB_NAME)
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: docker run --name test-postgres -v $(PWD):/usr/share/chapter1 -e POSTGRES_PASSWORD=$(DB_PWD)
    -p 5432:5432 -d $(DB_NAME)
- en: '...'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: task to create database without typing it manually
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动创建数据库的任务
- en: 'createdb:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 'createdb:'
- en: docker exec -it test-postgres psql $(PSQLURL) -c "\i /usr/share/chapter1/db/schema.sql"
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: docker exec -it test-postgres psql $(PSQLURL) -c "\i /usr/share/chapter1/db/schema.sql"
- en: '...'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '[PRE32]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: make postgresup
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: make postgresup
- en: '[PRE33]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: make postgresdown
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: make postgresdown
- en: '[PRE34]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: make generate
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: make generate
- en: '```'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Summary
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have covered the different stages that we need to go through
    to set up the database for our fitness application. We have also written a makefile
    to save us time by automating different database-related tasks that will be needed
    for the development process.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了我们需要经历的各个阶段来为我们的健身应用程序设置数据库。我们还编写了一个makefile，通过自动化开发过程中所需的不同数据库相关任务来节省我们的时间。
- en: In the next chapter, we will look at logging for our sample application. Logging
    is a simple, yet crucial component. Applications use logging to provide visibility
    into the running state of an application.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨我们示例应用程序的日志记录。日志记录是一个简单但至关重要的组件。应用程序使用日志来提供对应用程序运行状态的可见性。
