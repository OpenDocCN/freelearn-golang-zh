["```go\nfunc (l *Logger) Fatal(v ...interface{})\nfunc (l *Logger) Fatalf(format string, v ...interface{})\nfunc (l *Logger) Fatalln(v ...interface{})\nfunc (l *Logger) Panic(v ...interface{})\nfunc (l *Logger) Prefix() string\nfunc (l *Logger) Print(v ...interface{})\nfunc (l *Logger) Printf(format string, v ...interface{})\nfunc (l *Logger) Println(v ...interface{})\nfunc (l *Logger) SetFlags(flag int)\nfunc (l *Logger) SetOutput(w io.Writer)\nfunc (l *Logger) SetPrefix(prefix string)\n```", "```go\ngo run .\n```", "```go\n2021/10/15 10:12:38 Just a log text\nmain.go:38: This is number 1\n10:12:38 {\n        «name»: «Cake»,\n        «batters»: {\n                «batter»: [\n                        {\n                                «id»: «001»,\n                                «type»: «Good Food»\n                        }\n                ]\n        },\n        «topping»: [\n                {\n                        «id»: «002»,\n                        «type»: «Syrup»\n                }\n        ]\n}\n```", "```go\n2021/10/15 10:12:38 Just a log text\n```", "```go\nfunc main() {\n  ...\n  // set log format to - dd/mm/yy hh:mm:ss\n  ol.SetFlags(log.LstdFlags)\n  ol.Println(«Just a log text»)\n  ...\n}\n```", "```go\nfunc main() {\n  golog.SetLevel(«error»)\n  golog.Println(«This is a raw message, no levels, no\n                 colors.»)\n  golog.Info(«This is an info message, with colors (if the\n              output is terminal)»)\n  golog.Warn(«This is a warning message»)\n  golog.Error(«This is an error message»)\n  golog.Debug(«This is a debug message»)\n  golog.Fatal(`Fatal will exit no matter what,\n              but it will also print the log message if\n              logger›s Level is >=FatalLevel`)\n}\n```", "```go\n[ERRO] 2021/11/26 21:11 This is an error message [INFO] 2021/11/26 21:11 This is an info message, with colors (if the output is terminal)\n```", "```go\nfunc configureLogger() {\n  // open infolog.txt  append if exist (os.O_APPEND) or\n  // create if not (os.O_CREATE) and read write\n  // (os.O_WRONLY)\n  infof, err := os.OpenFile(logFile,\n                  os.O_APPEND|os.O_CREATE|os.O_WRONLY,\n                  0666)\n  ...\n  golog.SetLevelOutput(«info», infof)\n   // open infoerr.txt  append if exist (os.O_APPEND) or\n      create if not (os.O_CREATE) and read write\n   // (os.O_WRONLY)\n   // errf, err := os.OpenFile(«infoerr.txt»,\n                 os.O_APPEND|os.O_CREATE|os.O_WRONLY,\n                 0666)\n    ...\n  golog.SetLevelOutput(«error», errf)\n}\n```", "```go\n2021/10/15 23:37:31 Initializing logging server at port 8010\n```", "```go\nmake build\n```", "```go\n\"{\\n  \\\"timestamp\\\": 1634301479,\\n  \\\"level\\\": \\\"info\\\",\\n  \\\"message\\\": \\\"Starting the application...\\\"\\n}\\n\"\n\"{\\n  \\\"timestamp\\\": 1634301479,\\n  \\\"level\\\": \\\"info\\\",\\n  \\\"message\\\": \\\"Database connection fine\\\"\\n}\\n\"\n\"{\\n  \\\"timestamp\\\": 1634301479,\\n  \\\"level\\\": \\\"info\\\",\\n  \\\"message\\\": \\\"Success - user creation\\\"\\n}\\n\"\n\"{\\n  \\\"timestamp\\\": 1634301479,\\n  \\\"level\\\": \\\"info\\\",\\n  \\\"message\\\": \\\"Success - exercise creation\\\"\\n}\\n\"\n\"{\\n  \\\"timestamp\\\": 1634301479,\\n  \\\"level\\\": \\\"info\\\",\\n  \\\"message\\\": \\\"Application complete\\\"\\n}\\n\"\n\"{\\n  \\\"timestamp\\\": 1634301479,\\n  \\\"level\\\": \\\"info\\\",\\n  \\\"message\\\": \\\"Application complete\\\"\\n}\\nut\\\"\\n}\\n\"\n```", "```go\nimport (\n  ...\n  «github.com/gorilla/mux»\n  ...\n)\nfunc runServer(addr string) {\n  router = mux.NewRouter()\n  initializeRoutes()\n  ...\n  log.Fatal(http.ListenAndServe(addr, router))\n}\n```", "```go\nfunc initializeRoutes() {\n  router.HandleFunc(«/log», loghandler).Methods(http.    MethodPost)\n}\n```", "```go\nfunc loghandler(w http.ResponseWriter, r *http.Request) {\n  body, err := ioutil.ReadAll(r.Body)\n  ...\n  w.WriteHeader(http.StatusCreated)\n}\n```", "```go\nmake build\n```", "```go\n./sampledb -local=true\n```", "```go\nfunc main() {\n  l := flag.Bool(«local», false, «true - send to stdout, false                      - send to logging server»)\n  flag.Parse()\n  logger.SetLoggingOutput(*l)\n  logger.Logger.Debugf(«Application logging to stdout =\n                        %v», *l)\n  ...\n```", "```go\n...\nfunc configureLocal() {\n  file, err := os.OpenFile(«logs.txt»,\n                 os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0666)\n  ...\n  Logger.SetOutput(os.Stdout)\n  Logger.SetLevel(«debug»)\n  Logger.SetLevelOutput(«info», file)\n}\n...\n```", "```go\n//configureRemote for remote logger configuration\nfunc configureRemote() {\n  r := remote{}\n  Logger.SetLevelFormat(«info», «json»)\n  Logger.SetLevelOutput(«info», r)\n```", "```go\nfunc (r remote) Write(data []byte) (n int, err error) {\n  go func() {\n     req, err := http.NewRequest(\"POST\",\n        «http://localhost:8010/log»,\n        bytes.NewBuffer(data),\n     )\n     ...\n        resp, _ := client.Do(req)\n        defer resp.Body.Close()\n     }\n  }()\n  return len(data), nil\n}\n```"]