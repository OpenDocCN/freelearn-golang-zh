["```go\ndocker run --name jaeger \\\n  -p 5775:5775/udp \\\n  -p 6831:6831/udp \\\n  -p 6832:6832/udp \\\n  -p 5778:5778 \\\n  -p 16686:16686 \\\n  -p 14268:14268 \\\n  -p 14250:14250 \\\n  -p 9411:9411 \\\n  jaegertracing/all-in-one:latest\n```", "```go\n{\"level\":\"info\",\"ts\":1637930923.8576558,\"caller\":\"flags/service.go:117\",\"msg\":\"Mounting metrics handler on admin server\",\"route\":\"/metrics\"}\n{\"level\":\"info\",\"ts\":1637930923.857689,\"caller\":\"flags/service.go:123\",\"msg\":\"Mounting expvar handler on admin server\",\"route\":\"/debug/vars\"}\n{\"level\":\"info\",\"ts\":1637930923.8579082,\"caller\":\"flags/admin.go:104\",\"msg\":\"Mounting health check on admin server\",\"route\":\"/\"}\n{\"level\":\"info\",\"ts\":1637930923.8579528,\"caller\":\"flags/admin.go:115\",\"msg\":\"Starting admin HTTP server\",\"http-addr\":\":14269\"}\n…\n…\n{\"level\":\"info\",\"ts\":1637930923.8850179,\"caller\":\"app/server.go:258\",\"msg\":\"Starting HTTP server\",\"port\":16686,\"addr\":\":16686\"}\n{\"level\":\"info\",\"ts\":1637930923.8850145,\"caller\":\"healthcheck/handler.go:129\",\"msg\":\"Health Check state change\",\"status\":\"ready\"}\n{\"level\":\"info\",\"ts\":1637930923.8850334,\"caller\":\"app/server.go:277\",\"msg\":\"Starting GRPC server\",\"port\":16685,\"addr\":\":16685\"}\n{\"level\":\"info\",\"ts\":1637930924.8854718,\"caller\":\"channelz/logging.go:50\",\"msg\":\"[core]Subchannel Connectivity change to IDLE\",\"system\":\"grpc\",\"grpc_log\":true}\n{\"level\":\"info\",\"ts\":1637930924.8855824,\"caller\":\"grpclog/component.go:71\",\"msg\":\"[core]pickfirstBalancer: UpdateSubConnState: 0xc00003af30, {IDLE connection error: desc = \\\"transport: Error while dialing dial tcp :16685: connect: connection refused\\\"}\",\"system\":\"grpc\",\"grpc_log\":true}\n{\"level\":\"info\",\"ts\":1637930924.885613,\"caller\":\"channelz/logging.go:50\",\"msg\":\"[core]Channel Connectivity change to IDLE\",\"system\":\"grpc\",\"grpc_log\":true}\n```", "```go\n  package trace\n  import (\n           «context»\n           «go.opentelemetry.io/otel\"\n           «go.opentelemetry.io/otel/exporters/jaeger\"\n           «go.opentelemetry.io/otel/sdk/resource\"\n           «go.opentelemetry.io/otel/sdk/trace\"\n           sc \"go.opentelemetry.io/otel/semconv/v1.4.0\"\n  )\n  type ShutdownTracing func(ctx context.Context) error\n  func InitTracing(service string) (ShutdownTracing, error)\n  {\n    // Create the Jaeger exporter.\n    exp, err := jaeger.New(jaeger.WithCollectorEndpoint())\n    if err != nil {\n     return func(ctx context.Context) error { return nil },\n       err\n    }\n    // Create the TracerProvider.\n    tp := trace.NewTracerProvider(\n            trace.WithBatcher(exp),\n            trace.WithResource(resource.NewWithAttributes(\n                    sc.SchemaURL,\n                    sc.ServiceNameKey.String(service),\n            )),\n    )\n    otel.SetTracerProvider(tp)\n    return tp.Shutdown, nil\n  }\n```", "```go\n  package main\n  import (\n           t \"chapter.3/trace/trace\"\n           \"context\"\n           \"fmt\"\n           \"go.opentelemetry.io/otel\"\n           \"go.opentelemetry.io/otel/attribute\"\n           \"go.opentelemetry.io/otel/trace\"\n           \"log\"\n           \"sync\"\n           \"time\"\n  )\n  const serviceName = \"tracing\"\n  func main() {\n    sTracing, err := t.InitTracing(serviceName)\n    if err != nil {\n      log.Fatalf(\"Failed to setup tracing: %v\\n\", err)\n    }\n    defer func() {\n      if err := sTracing(context.Background()); err != nil\n      {\n        log.Printf(\"Failed to shutdown tracing: %v\\n\", err)\n      }\n    }()\n    ctx, span := otel.Tracer(serviceName)\n                 .Start(context.Background(), \"outside\")\n    defer span.End()\n    var wg sync.WaitGroup\n    wg.Add(1)\n    go func() {\n      _, s := otel.Tracer(serviceName).Start(ctx, \"inside\")\n      ...\n      wg.Done()\n    }()\n      wg.Add(1)\n      go func() {\n        _, ss := otel.Tracer(serviceName).Start(ctx,\n                                                \"inside\")\n       ...\n        wg.Done()\n      }()\n      wg.Wait()\n      fmt.Println(\"\\nDone!\")\n  }\n```", "```go\ntype Span interface {\n  End(options ...SpanEndOption)\n  AddEvent(name string, options ...EventOption)\n  IsRecording() bool\n  RecordError(err error, options ...EventOption)\n  SpanContext() SpanContext\n  SetStatus(code codes.Code, description string)\n  SetName(name string)\n  SetAttributes(kv ...attribute.KeyValue)\n  TracerProvider() TracerProvider\n}\n```", "```go\ngo func() {\n  _, s := otel.Tracer(serviceName).Start(ctx, \"inside\")\n  defer s.End()\n  time.Sleep(1 * time.Second)\n  s.SetAttributes(attribute.String(\"sleep\", \"done\"))\n  s.SetAttributes(attribute.String(\"go func\", \"1\"))\n  wg.Done()\n}()\n...\n...\ngo func() {\n  _, ss := otel.Tracer(serviceName).Start(ctx, \"inside\")\n  defer ss.End()\n  time.Sleep(2 * time.Second)\n  ss.SetAttributes(attribute.String(\"sleep\", \"done\"))\n  ss.SetAttributes(attribute.String(\"go func\", \"2\"))\n  wg.Done()\n}()\n```", "```go\ngo run main.go\n```", "```go\nconst serviceName = \"tracing\"\n```", "```go\ngo func() {\n  ...\n  s.SetAttributes(attribute.String(\"sleep\", \"done\"))\n  s.SetAttributes(attribute.String(\"go func\", \"1\"))\n  ...\n}()\n...\ngo func() {\n  ...\n  ss.SetAttributes(attribute.String(\"sleep\", \"done\"))\n  ss.SetAttributes(attribute.String(\"go func\", \"2\"))\n  ...\n}()\n```", "```go\ndocker run --name prom \\\n-v $PWD/config.yml:/etc/prometheus/prometheus.yml \\\n-p 9090:9090 prom/prometheus:latest\n```", "```go\n docker run --name prom \\\n -v $PWD/config.yml:/etc/prometheus/prometheus.yml\\\n -p 9090:9090  --add-host=host.docker.internal:host-gateway prom/prometheus:latest\n```", "```go\nscrape_configs:\n - job_name: 'prometheus'\n   scrape_interval: 5s\n   static_configs:\n     - targets:\n         - host.docker.internal:2112\n```", "```go\n….\nts=2021-11-30T11:13:56.688Z caller=main.go:451 level=info fd_limits=\"(soft=1048576, hard=1048576)\"\n...\nts=2021-11-30T11:13:56.694Z caller=main.go:996 level=info msg=\"Loading configuration file\" filename=/etc/prometheus/prometheus.yml\nts=2021-11-30T11:13:56.694Z caller=main.go:1033 level=info msg=\"Completed loading of configuration file\" filename=/etc/prometheus/prometheus.yml totalDuration=282.112µs db_storage=537ns remote_storage=909ns web_handler=167ns query_engine=888ns scrape=126.942µs scrape_sd=14.003µs notify=608ns notify_sd=1.207µs rules=862ns\nts=2021-11-30T11:13:56.694Z caller=main.go:811 level=info msg=\"Server is ready to receive web requests.\"\n```", "```go\ngo run main.go\n```", "```go\n2021/11/30 22:42:08 Starting up server on port 8000\n2021/11/30 22:42:12 Reporting metric metric.random\n2021/11/30 22:42:22 Reporting metric metric.random\n2021/11/30 22:42:32 Reporting metric metric.random\n2021/11/30 22:42:47 Reporting metric metric.random\n2021/11/30 22:42:57 Reporting metric metric.random\n```", "```go\nscrape_configs:\n - job_name: 'prometheus'\n   scrape_interval: 5s\n   static_configs:\n     - targets:\n     - localhost:2112\n```", "```go\npackage metric\n...\ntype ShutdownMetrics func(ctx context.Context) error\n// InitMetrics use Prometheus exporter\nfunc InitMetrics(service string) (ShutdownMetrics, error) {\n    config := prometheus.Config{}\n    c := controller.New(\n        processor.NewFactory(\n            selector.NewWithExactDistribution(),\n            aggregation.CumulativeTemporalitySelector(),\n            processor.WithMemory(true),\n        ),\n        controller.WithResource(resource.NewWithAttributes(\n            semconv.SchemaURL,\n            semconv.ServiceNameKey.String(service),\n        )),\n    )\n    exporter, err := prometheus.New(config, c)\n    if err != nil {\n      return func(ctx context.Context) error { return nil},\n        err\n    }\n    global.SetMeterProvider(exporter.MeterProvider())\n    srv := &http.Server{Addr: \":2112\", Handler: exporter}\n    go func() {\n        _ = srv.ListenAndServe()\n    }()\n    return srv.Shutdown, nil\n```", "```go\npackage main\n...\nconst serviceName = \"samplemetrics\"\nfunc main() {\n    ...\n    //setup handler for rqeuest\n    r.HandleFunc(\"/\", func(rw http.ResponseWriter, r\n      *http.Request) {\n        log.Println(\"Reporting metric metric.totalrequest\")\n        ctx := r.Context()\n        //add request metric counter\n        ctr.Add(ctx, 1)\n        ...\n    }).Methods(\"GET\")\n    ...\n}\n```", "```go\nversion: '3.3'\nservices:\n jaeger:\n   image: jaegertracing/all-in-one:latest\n   ports:\n     - \"6831:6831/udp\"\n     - \"16686:16686\"\n     - \"14268:14268\"\n prometheus:\n   image: prom/prometheus:latest\n   volumes:\n     -./prom/opentelem/config.yml:/etc/prometheus/\n      prometheus.yml\n   command:\n     - '--config.file=/etc/prometheus/prometheus.yml'\n     - '--web.console.libraries=/usr/share/prometheus/\n       console_libraries'\n     - '--web.console.templates=/usr/share/prometheus/\n       consoles›\n   ports:\n     - 9090:9090\n   network_mode: \"host\"\n```", "```go\ndocker-compose -f docker-compose.yml  up\n```", "```go\nprometheus_1  | ts=2021-12-04T07:45:02.443Z caller=main.go:406 level=info msg=\"No time or size retention was set so using the default time retention\" duration=15d\nprometheus_1  | ts=2021-12-04T07:45:02.443Z caller=main.go:444 level=info msg=\"Starting Prometheus\" version=\"(version=2.31.1, branch=HEAD, revision=411021ada9ab41095923b8d2df9365b632fd40c3)\"\nprometheus_1  | ts=2021-12-04T07:45:02.443Z caller=main.go:449 level=info build_context=\"(go=go1.17.3, user=root@9419c9c2d4e0, date=20211105-20:35:02)\"\nprometheus_1  | ts=2021-12-04T07:45:02.443Z caller=main.go:450 level=info host_details=\"(Linux 5.3.0-22-generic #24+system76~1573659475~19.10~26b2022-Ubuntu SMP Wed Nov 13 20:0 x86_64 pop-os (none))\"\nprometheus_1  | ts=2021-12-04T07:45:02.444Z caller=main.go:451 level=info fd_limits=\"(soft=1048576, hard=1048576)\"\nprometheus_1  | ts=2021-12-04T07:45:02.444Z caller=main.go:452 level=info vm_limits=\"(soft=unlimited, hard=unlimited)\"\njaeger_1      | 2021/12/04 07:45:02 maxprocs: Leaving GOMAXPROCS=12: CPU quota undefined\nprometheus_1  | ts=2021-12-04T07:45:02.445Z caller=web.go:542 level=info component=web msg=\"Start listening for connections\" address=0.0.0.0:9090\n....\n....\n....\njaeger_1      | {\"level\":\"info\",\"ts\":1638603902.657881,\"caller\":\"healthcheck/handler.go:129\",\"msg\":\"Health Check state change\",\"status\":\"ready\"}\njaeger_1      | {\"level\":\"info\",\"ts\":1638603902.657897,\"caller\":\"app/server.go:277\",\"msg\":\"Starting GRPC server\",\"port\":16685,\"addr\":\":16685\"}\njaeger_1      | {\"level\":\"info\",\"ts\":1638603902.6579142,\"caller\":\"app/server.go:258\",\"msg\":\"Starting HTTP server\",\"port\":16686,\"addr\":\":16686\"}\n```", "```go\ndocker-compose -f docker-compose.yml  up -d\n```"]