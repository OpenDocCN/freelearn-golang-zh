["```go\npackage main\n//go:generate echo Generating SQL Schemas\n//go:generate sqlc generate\n```", "```go\n$ go generate\nGenerating SQL Schemas\n$\n```", "```go\npath: store/\nschema: migrations/\nqueries: queries/\n```", "```go\n    GET, POST, PUT, PATCH, and DELETE.\n    ```", "```go\n     1    func main() {\n     2        ...\n     3        server := api.NewServer(internal.GetAsInt(\n                                      \"SERVER_PORT\", 9002))\n     4\n     5        server.MustStart()\n     6        defer server.Stop()\n     7\n     8        defaultMiddleware := []mux.MiddlewareFunc{\n     9            api.JSONMiddleware,\n    10            api.CORSMiddleware(internal.GetAsSlice(\n                      \"CORS_WHITELIST\",\n    11                []string{\n    12                    \"http://localhost:9000\",\n    13                    \"http://0.0.0.0:9000\",\n    14                }, \",\"),\n    15            ),\n    16        }\n    17\n    18        // Handlers\n    19        server.AddRoute(\"/login\", handleLogin(db),\n                http.MethodPost, defaultMiddleware...)\n    20        server.AddRoute(\"/logout\", handleLogout(),\n                http.MethodGet, defaultMiddleware...)\n    21\n    22        // Our session protected middleware\n    23        protectedMiddleware :=\n                append(defaultMiddleware,\n                       validCookieMiddleware(db))\n    24        server.AddRoute(\"/checkSecret\",\n                 checkSecret(db), http.MethodGet,\n                 protectedMiddleware...)\n    25\n    26        ...\n    27    }\n```", "```go\n     1    func JSONMiddleware(next http.Handler)\n            http.Handler {\n     2        return http.HandlerFunc(func(wr\n                http.ResponseWriter, req *http.Request) {\n     3            contentType :=\n                    req.Header.Get(\"Content-Type\")\n     4\n     5            if strings.TrimSpace(contentType) == \"\" {\n     6                var parseError error\n     7                contentType, _, parseError =\n                        mime.ParseMediaType(contentType)\n     8                if parseError != nil {\n     9                    JSONError(wr,\n                            http.StatusBadRequest,\n                            \"Bad or no content-type header\n                             found\")\n    10                    return\n    11                }\n    12            }\n    13\n    14            if contentType != \"application/json\" {\n    15                JSONError(wr,\n                        http.StatusUnsupportedMediaType,\n                        \"Content-Type not\n                         application/json\")\n    16                return\n    17            }\n    18            // Tell the client we're talking JSON as\n                  // well.\n    19            wr.Header().Add(\"Content-Type\",\n                                  \"application/json\")\n    20            next.ServeHTTP(wr, req)\n    21        })\n    22    }\n```", "```go\n     1    session, err := cookieStore.Get(req,\n                                          \"session-name\")\n     2    if err != nil {\n     3       api.JSONError(wr,\n                           http.StatusInternalServerError,\n                           \"Session Error\")\n     4       return\n     5    }\n     6\n     7    userID, userIDOK :=\n            session.Values[\"userID\"].(int64)\n     8    isAuthd, isAuthdOK :=\n            session.Values[\"userAuthenticated\"].(bool)\n     9    if !userIDOK || !isAuthdOK {\n    10       api.JSONError(wr,\n               http.StatusInternalServerError,\n               \"Session Error\")\n    11       return\n    12    }\n    13\n    14    if !isAuthd || userID < 1 {\n    15       api.JSONError(wr, http.StatusForbidden,\n                           \"Bad Credentials\")\n    16       return\n    17    }\n    18    ...\n    19    ctx := context.WithValue(req.Context(),\n                                   SessionKey, UserSession{\n    20       UserID: user.UserID,\n    21    })\n    22    h.ServeHTTP(wr, req.WithContext(ctx))\n    23\n```", "```go\nfunc handleLogin(db *sql.DB) http.HandlerFunc {\n return http.HandlerFunc(func(wr http.ResponseWriter, req    *http.Request) {\n   type loginRequest struct {\n    Username string `json:\"username\"`\n    Password string `json:\"password\"`\n   }\n  ...\n}\n```", "```go\npayload := loginRequest{}\nif err := json.NewDecoder(req.Body).Decode(&payload); err != nil {\n ...\n}\n```", "```go\n   1    func handleAddSet(db *sql.DB) http.HandlerFunc {\n   2     return http.HandlerFunc(func(wr\n           http.ResponseWriter,\n           req *http.Request) {\n   3\n   4       ...\n   5\n   6       type newSetRequest struct {\n   7        ExerciseName string\n             `json:\"exercise_name,omitempty\"`\n   8        Weight    int  `json:\"weight,omitempty\"`\n   9       }\n  10\n  11       payload := newSetRequest{}\n  12       if err := json.NewDecoder(req.Body)\n             .Decode(&payload); err != nil {\n  13         ...\n  14        return\n  15       }\n  16\n  17       ...\n  18     })\n  19    }\n  20\n```", "```go\nfunc handleAddSet(db *sql.DB) http.HandlerFunc {\n return http.HandlerFunc(func(wr http.ResponseWriter,\n                              req *http.Request) {\n   ...\n   set, err :=\n     querier.CreateDefaultSetForExercise(req.Context(),\n       store.CreateDefaultSetForExerciseParams{\n      WorkoutID:  int64(workoutID),\n      ExerciseName: payload.ExerciseName,\n      Weight:    int32(payload.Weight),\n    })\n   ...\n   json.NewEncoder(wr).Encode(&set)\n })\n}\n```", "```go\ntype GowebappSet struct {\n SetID    int64 `json:\"set_id\"`\n WorkoutID  int64 `json:\"workout_id\"`\n ExerciseName string `json:\"exercise_name\"`\n Weight    int32 `json:\"weight\"`\n Set1     int64 `json:\"set1\"`\n Set2     int64 `json:\"set2\"`\n Set3     int64 `json:\"set3\"`\n}\n```", "```go\n{\n \"set_id\": 1,\n \"workout_id\": 1,\n \"exercise_name\": \"Barbell\",\n \"weight\": 700,\n \"set1\": 0,\n \"set2\": 0,\n \"set3\": 0\n}\n```", "```go\n   1    func JSONError(wr http.ResponseWriter,\n          errorCode int, errorMessages ...string) {\n   2     wr.WriteHeader(errorCode)\n   3     if len(errorMessages) > 1 {\n   4       json.NewEncoder(wr).Encode(struct {\n   5        Status string  `json:\"status,omitempty\"`\n   6        Errors []string `json:\"errors,omitempty\"`\n   7       }{\n   8        Status: fmt.Sprintf(\"%d / %s\", errorCode,\n              http.StatusText(errorCode)),\n   9        Errors: errorMessages,\n  10       })\n  11       return\n  12     }\n  13\n  14     json.NewEncoder(wr).Encode(struct {\n  15       Status string `json:\"status,omitempty\"`\n  16       Error string `json:\"error,omitempty\"`\n  17     }{\n  18       Status: fmt.Sprintf(\"%d / %s\", errorCode,\n             http.StatusText(errorCode)),\n  19       Error: errorMessages[0],\n  20     })\n  21    }\n```", "```go\ncurl http://localhost:9002/login -H 'Content-Type: application/json' -X POST -d '{\"username\" : \"user@user\", \"password\" : \"wrongpassword\"}\n```", "```go\n{\"status\":\"403 / Forbidden\",\"error\":\"Bad Credentials\"}\n```", "```go\ncurl http://localhost:9002/login -v -H 'Content-Type: application/json' -X POST -d '{\"username\" : \"user@user\", \"password\" : \"password\"}'\n```", "```go\n*  Trying ::1:9002...\n* TCP_NODELAY set\n* Connected to localhost (::1) port 9002 (#0)\n> POST /login HTTP/1.1\n> Host: localhost:9002\n…\n< Set-Cookie: session-name=MTY0NTM0OTI1OXxEdi1CQkFFQ180SUFBUkFCRUFBQVJQLUNBQUlHYzNSeWFXNW5EQk1BRVhWelpYSkJkWFJvWlc1MGFXTmhkR1ZrQkdKdmIyd0NBZ0FCQm5OMGNtbHVad3dJQUFaMWMyVnlTVVFGYVc1ME5qUUVBZ0FDfHMy75qzLVPoMZ3BbNY17qBWd_puOhl6jpgY-d29ULUV; Path=/; Expires=Sun, 20 Feb 2022 09:42:39 GMT; Max-Age=900; HttpOnly\n…\n* Connection #0 to host localhost left intact\n```", "```go\ncurl http://localhost:9002/workout -H 'Content-Type: application/json' -X POST --cookie 'session-name=MTY0NTM0OTI1OXxEdi1CQkFFQ180SUFBUkFCRUFBQVJQLUNBQUlHYzNSeWFXNW 5EQk1BRVhWelpYSkJkWFJvWlc1MGFXTmhkR1ZrQkdKdmIyd0NBZ0FCQm5OM\nGNtbHVad3dJQUFaMWMyVnlTVVFGYVc1ME5qUUVBZ0FDfHMy75qzLVPoMZ3BbNY 17qBWd_puOhl6jpgY-d29ULUV'\n```", "```go\n{\"workout_id\":3,\"user_id\":1,\"start_date\":\"2022-02-20T09:29:25.406523Z\"}\n```"]