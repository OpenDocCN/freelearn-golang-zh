- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Frontend Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we looked at different frameworks for building frontend
    applications. In this chapter, we will look at the different frontend libraries
    that are useful for building web applications. Frontend libraries are predefined
    functions and classes that can help speed up the development time when building
    frontend applications by providing functionality we’d otherwise have to build
    and develop ourselves. In this chapter, we will be looking at the following libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Vuetify`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Buefy`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Vuelidate`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Cleave.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Having completed this chapter, you will have explored the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Validating data with `Vuelidate`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Better input handling with `Cleave.js`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with different UI components using `Vuetify`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All the source code explained in this chapter can be checked out at [https://github.com/PacktPublishing/Full-Stack-Web-Development-with-Go/tree/main/Chapter08](https://github.com/PacktPublishing/Full-Stack-Web-Development-with-Go/tree/main/Chapter08).
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure you have all the necessary tools installed on your local machine
    by following the instructions from the `node.js` documentation available here:
    [https://docs.npmjs.com/downloading-and-installing-node-js-and-npm](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm).'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, there will be sample code that is shared using [codesandbox.io](http://codesandbox.io)
    and [jsfiddle.net](http://jsfiddle.net), which will make it easier for you to
    experiment with.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s begin our journey by looking into Vuetify in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Vuetify
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 7*](B18295_07.xhtml#_idTextAnchor128), *Frontend Frameworks*, we
    learned about the Vue framework, which is a rich frontend framework that allows
    frontend code to be extended and maintained easily. Vuetify ([https://vuetifyjs.com](https://vuetifyjs.com))
    provides a lot of user interface components out of the box, ready to be used by
    applications. The framework also allows developers to style the user interfaces
    to their needs.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will learn about Vuetify, which is a Material-based design
    framework that is built on top of Vue. Material is the Design Language made popular
    by Google across their web apps and Android applications – you can find out more
    at [https://m3.material.io/](https://m3.material.io/) –and is a very popular choice.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Vuetify
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to take a look at the example code inside the `chapter08/vuetify/components`
    directory. The example code demonstrates how to use the `Vuetify` framework. Before
    running the sample code, make sure you run the following command from inside the
    `chapter08/vuetify/components` directory to install all the necessary components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the installation is complete, run the sample code using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the server is up and running, you will get an output as shown in *Figure
    8**.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1: Output from running npx](img/Figure_8.01_B18295.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.1: Output from running npx'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can access the application using the URL specified in the output – for
    example, http://localhost:8080\. *Figure 8**.2* shows the output of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2: Output from the sample app](img/Figure_8.02_B18295.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.2: Output from the sample app'
  prefs: []
  type: TYPE_NORMAL
- en: The sample app displays the different components that are available inside Vuetify.
    As you can see, there are components available for radio button groups and color
    pickers, among many others.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at how we use Vuetify in the sample app and
    how things are wired up together.
  prefs: []
  type: TYPE_NORMAL
- en: Using UI components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many components provided with Vuetify but in this section, we will
    just talk about a few of them to get an idea of how to use them. The example code
    uses components such as a color picker, button, badge, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8**.3* shows the directory structure of the example. All of the source
    files are inside the `src/` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3: The directory structure of a Vuetify sample app](img/Figure_8.03_B18295.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.3: The directory structure of a Vuetify sample app'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `main.js` host code for initializing Vue and Vuetify is shown in the following
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The code looks like any other Vue-based application except it adds the Vuetify
    framework, which is imported from the `plugins/vuetify` directory, as shown in
    this snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Vuetify is initialized in the code as a plugin using the `Vue.use()` function
    call and exported to be made available to other parts of the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the initialization is out of the way, let’s take a look at how the
    sample is using the Vuetify components. The code snippet here from `App.vue` shows
    how the sample code uses the Color Picker component of Vuetify:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The tags that can be seen in the snippet – `<v-row>`, `<v-col>`, `<v-container>`,
    and so on – are all Vuetify components. The components can be configured through
    the available properties; for example, if we look at the component documentation
    ([https://vuetifyjs.com/en/api/v-row/#props](https://vuetifyjs.com/en/api/v-row/#props))
    for `<v-row>`, we can see that we can set different parameters, such as alignment.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned about Vuetify and how to use the components provided,
    and also how to wire things together to use it in a Vue-based application. In
    the next section, we will look at different user interface libraries that are
    more lightweight compared to Vuetify. We will start by looking at Buefy in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Buefy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Buefy is another user interface framework that is built on top of Bulma. Bulma
    ([https://bulma.io/](https://bulma.io/)) is an open source CSS project that provides
    different kinds of styles for HTML elements; the CSS file can be viewed at the
    following link: [https://github.com/jgthms/bulma/blob/master/css/bulma.css](https://github.com/jgthms/bulma/blob/master/css/bulma.css).'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a quick look at an example web page that uses Bulma CSS. This will
    give us a better idea of what Bulma is all about and also give us a better understanding
    of how Buefy is using it.
  prefs: []
  type: TYPE_NORMAL
- en: Bulma sample
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open the sample `chapter08/bulma/bulma_sample.xhtml` file in your browser,
    and the HTML page will look like *Figure 8**.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4: Bulma example page](img/Figure_8.04_B18295.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.4: Bulma example page'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet shows the Bulma CSS file used in the web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The web page uses different HTML elements tags styled using the Bulma CSS,
    as seen in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have an idea about what Bulma is and how to use it for a web page,
    we will take a look at setting up Buefy in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Buefy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to look at the Buefy example that is found inside the `chapter8/buefy`
    directory. Make sure you are inside the directory and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the server in your browser and you will see output like *Figure 8**.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.5: Buefy sample output](img/Figure_8.05_B18295.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.5: Buefy sample output'
  prefs: []
  type: TYPE_NORMAL
- en: UI components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The web page displays different components available in Buefy, such as a slider,
    a clickable button with a dropdown, and a breadcrumb.
  prefs: []
  type: TYPE_NORMAL
- en: 'Initializing Buefy is the same as initializing any other Vue plugin. It looks
    the same as what we went through in the previous section when we looked at Vuetify.
    The code will initialize Vue by using Buefy as stated in the `Vue.use(Buefy)`
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'One of the components that we are using in our sample app is `carousel`, which
    displays a user interface like a slideshow. To create `carousel`, it is just a
    few lines of code, as shown in the following code snippet, using the `<``b-carousel>`
    tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Like `carousel`, there are many different pre-built components available in
    Buefy that can help design complex user interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at how we can use the Vuelidate library as
    a way to perform validation on the data we capture and present in our user interface
    to ensure we interpret our customers’ data correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Validating data entry with Vuelidate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If your app does anything interactive, it’s likely that it will handle user-entered
    data, which means you must check whether what the users are providing is valid
    input.
  prefs: []
  type: TYPE_NORMAL
- en: Input validation libraries can be used to ensure only valid data is entered
    by the user and provide feedback as soon as data is received. This means we’re
    validating as soon our user hits that input field!
  prefs: []
  type: TYPE_NORMAL
- en: We’re going to explore HTML form validation in the frontend and the difference
    between input and value validation. It’s also important to note that no matter
    the validation in the frontend, it’s no substitute for validation in the backend
    and of the API endpoints. Our goal in the frontend is to prevent the user from
    making errors; however, you’ll never stop bad guys from submitting bad data to
    your app.
  prefs: []
  type: TYPE_NORMAL
- en: We can look at frontend validation through two lenses, as there’s a myriad of
    solutions out there, but we’ll contrast two options and show a working solution
    – the first is that of validating input, and the other is the validation of values.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we only want to validate the input, we could use the `vee-validate` library,
    which works by having you write the rules inside the `<template>` of your code.
    For example, see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This inline validation – wherein we perform `ValidateAll()` on submitting data
    – will allow us to validate the contents of the data using predefined rules, such
    as a field being required, its minimum length, or that it must be a valid email
    ID, for example. If invalid data is entered, we can iterate through the errors
    and present them to the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.6: Validation error message](img/Figure_8.06_B18295.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.6: Validation error message'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see this on the JS Playground website `JSFiddle` at the following link:
    [https://jsfiddle.net/vteudms5/](https://jsfiddle.net/vteudms5/).'
  prefs: []
  type: TYPE_NORMAL
- en: This is useful for simple validation, but when we want to add additional logic
    against values and collections of values, rather than just individual inputs,
    this is where libraries such as Vuelidate become powerful.
  prefs: []
  type: TYPE_NORMAL
- en: With Vuelidate, you’ll notice that the validation is decoupled from the template
    code we write, unlike the inline validation done in the `vee-validate` example.
    This allows us to write the rules against the data model rather than the inputs
    in our template.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Vuelidate, the validation results in a validation object referenced as `this.$v,`
    which we can use to validate our model state. Let’s rebuild our previous example
    to demonstrate how we going to use Vuelidate to validate the data – this sample
    is at [https://jsfiddle.net/34gr7vq0/3/](https://jsfiddle.net/34gr7vq0/3/):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting output shows us the `$v` object. The `required`, `email`, and
    `minLength` fields are firing when you type in the box. In our example, when we
    type in [nick@bar.com](mailto:nick@bar.com), the fields change value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.7: Illustration of the browser output from our JSFiddle sample](img/Figure_8.07_B18295.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.7: Illustration of the browser output from our JSFiddle sample'
  prefs: []
  type: TYPE_NORMAL
- en: 'Although similar to the `vee-validate` implementation in style, by utilizing
    the `$v` object concept and allowing that to be the source of validation, we can
    connect it to additional inputs across multiple forms and validate the entire
    collection. For example, if we had multiple fields, such as a name, email, users,
    and tags across `formA` and `formB`, we would be able to create the validation
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'There’s a large collection of available validators for Vuelidate that we can
    import. This gives us access to validators such as conditionally required fields;
    length validators; email, alpha/alphanum, regex, decimal, integer, and URL options;
    and many more that are accessible by importing the `validators` library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The full list is available on the Vuelidate website at [https://vuelidate-next.netlify.app/validators.xhtml](https://vuelidate-next.netlify.app/validators.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: Better input handling with Cleave.JS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we’ve just seen, getting data from your users in the right shape and form
    can be a challenge – be it a date in a YYYY/MM format, a phone number with a prefix,
    or other more structured input types.
  prefs: []
  type: TYPE_NORMAL
- en: We looked at validation previously, but you can further help your users by providing
    visual clues and feedback as they type to prevent them from reaching the end with
    validation errors – libraries such as those provided by the popular credit card
    and online payments processor. Stripe does a great job at helping users enter
    their credit card info correctly, but for those of us on a budget, we can use
    Cleave. js for a similar experience.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.7: Credit card validation (image from https://nosir.github.io/cleave.js/)](img/Figure_8.08_B18295.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.7: Credit card validation (image from https://nosir.github.io/cleave.js/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Frustratingly, Vue isn’t supported as a first-class citizen but there’s no
    reason we can’t set up the directive, which is available at [codesandbox.io](http://codesandbox.io)
    here – [https://bit.ly/3Ntvv27](https://bit.ly/3Ntvv27). *Figure 8**.8* shows
    how the validation will work for [codesandbox.io](http://codesandbox.io):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.8: Example of our Cleave.js example on codesandbox.io](img/Figure_8.09_B18295.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.8: Example of our Cleave.js example on codesandbox.io'
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s not as pretty in my hardcoded sample (the CSS is left as an exercise for
    you!) but the key part from the sandbox sample is how we overload `custom-input`
    with our `cleave` directive by doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In the future, it would be great to see Cleave.js incorporate a first-party
    implementation for Vue but until then, a number of npm packages exist to skip
    over the setup for our sample and provide a similar effect that will allow us
    to create beautiful experiences for our users.
  prefs: []
  type: TYPE_NORMAL
- en: To follow the status of Cleave.js official support, you can check out [https://github.com/nosir/cleave.js/blob/master/doc/vue.md](https://github.com/nosir/cleave.js/blob/master/doc/vue.md).
  prefs: []
  type: TYPE_NORMAL
- en: With Cleave.js, we have reached the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about several frontend libraries and tools to help
    us to iterate through code and design faster when building the frontend user interface
    for our product.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve looked at using Vuetify to create customizable user interfaces, and looked
    at Buefy, which provides a huge collection of UI components to allow us to build
    our apps rapidly.
  prefs: []
  type: TYPE_NORMAL
- en: We then finished up by providing an introduction to and contrast between input
    and value validation using Vuelidate and VeeValidate, respectively, and finally,
    explained how we can use Cleave.js to create smarter interfaces to help our users
    understand what our app expects.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at middleware pieces that will form the bridge
    between the frontend and the backend.
  prefs: []
  type: TYPE_NORMAL
