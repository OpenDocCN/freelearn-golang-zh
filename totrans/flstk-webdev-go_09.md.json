["```go\n<button type=\"button\" class=\"\n inline-block px-6 py-2.5 bg-blue-600\n text-white font-medium text-lg leading-tight\n rounded shadow-md\n hover:bg-blue-700 hover:shadow-lg\n focus:bg-blue-700 focus:shadow-lg\n focus:outline-none focus:ring-0\n active:bg-blue-800 active:shadow-lg\n transition duration-150 ease-in-out\n\">Button</button>\n```", "```go\nnpm create vite@latest\n```", "```go\n✔ Project name: … vue-frontend\n✔ Select a framework: › vue\n✔ Select a variant: › vue\nScaffolding project in /Users/.../vue-frontend...\nDone. Now run:\n  cd vue-frontend\n  npm install\n  npm run dev\n$ npm install\n$ npm run dev\n> vue-frontend@0.0.0 dev\n> vite\n  vite v2.9.12 dev server running at:\n  > Local: http://localhost:3000/\n  > Network: use `--host` to expose\n  ready in 332ms.\n```", "```go\n$ npm install -D tailwindcss postcss autoprefixer\n$ npx tailwindcss init -p\nCreated Tailwind CSS config file: tailwind.config.js\nCreated PostCSS config file: postcss.config.js\n$ cat << EOF > tailwind.config.js\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./index.xhtml\",\n    \"./src/**/*.{vue,js}\",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\nEOF\n$ cat << EOF > ./src/tailwind.css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\nEOF\n$ cat << EOF > ./src/main.js\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport './tailwind.css'\ncreateApp(App).mount('#app')\nEOF\n```", "```go\n<template>\n  <div class=\"flex space-x-2 justify-center\">\n    <button\n      @click=\"count++\"\n      type=\"button\"\n      class=\"inline-block px-6 py-2.5 bg-blue-600\n             text-white font-medium text-lg leading-tight\n             normal-case rounded shadow-md hover:bg-blue-\n             700 hover:shadow-lg focus:bg-blue-700\n             focus:shadow-lg focus:outline-none\n             focus:ring-0 active:bg-blue-800\n             active:shadow-lg transition duration-150\n             ease-in-out\"\n    >\n      Click me - my count is {{ count }}\n    </button>\n  </div>\n</template>\n```", "```go\nfunc appGET() http.HandlerFunc {\n    type ResponseBody struct {\n        Message string\n    }\n    return func(rw http.ResponseWriter, req *http.Request) {\n        log.Println(\"GET\", req)\n        json.NewEncoder(rw).Encode(ResponseBody{\n            Message: \"Hello World\",\n        })\n    }\n}\nfunc appPOST() http.HandlerFunc {\n    type RequestBody struct {\n        Inbound string\n    }\n    type ResponseBody struct {\n        OutBound string\n    }\n    return func(rw http.ResponseWriter, req *http.Request) {\n        log.Println(\"POST\", req)\n        var rb RequestBody\n        if err := json.NewDecoder(req.Body).Decode(&rb);\n                  err != nil {\n            log.Println(\"apiAdminPatchUser: Decode\n                         failed:\", err)\n            rw.WriteHeader(http.StatusBadRequest)\n            return\n        }\n        log.Println(\"We received an inbound value of\",\n                     rb.Inbound)\n        json.NewEncoder(rw).Encode(ResponseBody{\n            OutBound: stringutil.Reverse(rb.Inbound),\n        })\n    }\n}\n```", "```go\n$ npm install axios\n```", "```go\nimport axios from 'axios';\n// Create our \"axios\" object and export\n// to the general namespace. This lets us call it as\n// api.post(), api.get() etc\nexport default axios.create({\n  baseURL: import.meta.env.VITE_BASE_API_URL,\n  withCredentials: true,\n});\n```", "```go\nVITE_BASE_API_URL=\"http://0.0.0.0:8000\"\n```", "```go\nimport api from '@/lib/api';\nexport function getFromServer() {\n    return api.get(`/`);\n}\nexport function postToServer(data) {\n    return api.post(`/`, data );\n}\n```", "```go\n12:23:46 [vite] Internal server error: Failed to resolve import \"@/api/demo\" from \"src/components/HelloWorld.vue\". Does the file exist?\n  Plugin: vite:import-analysis\n  File: /Users/nickglynn/Projects/Becoming-a-Full-Stack-Go-\n        Developer/chapter 9/frontend/src/components/\n        HelloWorld.vue\n  1  |  import { ref } from 'vue';\n  2  |  import * as demoAPI from '@/api/demo';\n     |                            ^\n  3  |\n  4  |  // Sample to show how we can inspect mode\n```", "```go\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport path from 'path';\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [vue()],\n  // Add the '@' resolver\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, 'src'),\n    },\n  },\n})\n```", "```go\n<script setup>\nimport { ref } from 'vue';\nimport * as demoAPI from '@/api/demo';\n// Sample to show how we can inspect mode\n// and import env variables\nconst deploymentMode = import.meta.env.MODE;\nconst myBaseURL = import.meta.env.VITE_BASE_API_URL;\nasync function getData() {\n  const { data } = await demoAPI.getFromServer()\n  result.value.push(data.Message)\n}\nasync function postData() {\n  const { data } = await demoAPI.postToServer({ Inbound: msg.     value })\n  result.value.push(data.OutBound)\n}\nconst result = ref([])\nconst msg = ref(\"\")\ndefineProps({\n  sampleProp: String,\n});\n</script>\n<template>\n  <div class=\"flex space-2 justify-center\">\n    <button\n      @click=\"getData()\"\n      type=\"button\"\n      class=\"inline-block px-6 py-2.5 bg-blue-600\n             text-white font-medium text-lg leading-tight\n             normal-case rounded shadow-md hover:bg-blue-\n             700 hover:shadow-lg focus:bg-blue-700\n             focus:shadow-lg focus:outline-none\n             focus:ring-0 active:bg-blue-800\n             active:shadow-lg transition              duration-150 ease-in-out\"\n    >\n      Click to Get\n    </button>\n  </div>\n  <div class=\"flex mt-4 space-2 justify-center\">\n    <input type=\"text\"\n      class=\"inline-block px-6 py-2.5 text-blue-600\n             font-medium text-lg leading-tight\n             rounded shadow-md border-2 border-solid\n             border-black focus:shadow-lg  focus:ring-1 \"\n      v-model=\"msg\" />\n    <button\n      @click=\"postData()\"\n      type=\"button\"\n      class=\"inline-block px-6 py-2.5 bg-blue-600\n             text-white font-medium text-lg leading-tight\n             normal-case rounded shadow-md hover:bg-blue-\n             700 hover:shadow-lg focus:bg-blue-700\n             focus:shadow-lg focus:outline-none\n             focus:ring-0 active:bg-blue-800\n             active:shadow-lg transition\n             duration-150 ease-in-out\"\n    >\n      Click to Post\n    </button>\n  </div>\n  <p>You are in {{ deploymentMode }} mode</p>\n  <p>Your API is at {{ myBaseURL }}</p>\n  <li v-for=\"(r, index) in result\">\n    {{ r }}\n  </li>\n</template>\n<style scoped></style>\n```", "```go\n...\n    port := \":8000\"\n    rtr := mux.NewRouter()\n    rtr.Handle(\"/\", appGET()).Methods(http.MethodGet)\n    rtr.Handle(\"/\", appPOST()).Methods(http.MethodPost,\n                                       http.MethodOptions)\n    // Apply the CORS middleware to our top-level router, with     // the defaults.\n    rtr.Use(\n        handlers.CORS(\n          handlers.AllowedHeaders(\n           []string{\"X-Requested-With\",            \"Origin\", \"Content-Type\",}),\n          handlers.AllowedOrigins([]string{\n           \"http://0.0.0.0:3000\",            \"http://localhost:3000\"}),\n            handlers.AllowCredentials(),\n            handlers.AllowedMethods([]string{\n                http.MethodGet,\n                http.MethodPost,\n            })),\n    )\n    log.Printf(\"Listening on http://0.0.0.0%s/\", port)\n    http.ListenAndServe(port, rtr)\n```", "```go\nrtr.Use(\n    handlers.CORS(\n        handlers.AllowedHeaders(\n            env.GetAsSlice(\"ALLOWED_HEADERS\")),\n        handlers.AllowedOrigins(\n            env.GetAsSlice(\"ORIGIN_WHITELIST\")),\n        handlers.AllowCredentials(),\n        handlers.AllowedMethods([]string{\n            http.MethodGet,\n            http.MethodPost,\n        })),\n    )\n```", "```go\nfunc appPOST() http.HandlerFunc {\n    type RequestBody struct {\n        InboundMsg string `json:\"inbound_msg,omitempty\"`\n    }\n    type ResponseBody struct {\n        OutboundMsg string `json:\"outbound_msg,omitempty\"`\n    }\n...\n```", "```go\n$ npm install snakecase-keys camelcase-keys\n```", "```go\nimport axios from 'axios';\nimport camelCaseKeys from 'camelcase-keys';\nimport snakeCaseKeys from 'snakecase-keys';\nfunction isObject(value) {\n  return typeof value === 'object' && value instanceof\n    Object;\n}\nexport function transformSnakeCase(data) {\n  if (isObject(data) || Array.isArray(data)) {\n    return snakeCaseKeys(data, { deep: true });\n  }\n  if (typeof data === 'string') {\n    try {\n      const parsedString = JSON.parse(data);\n      const snakeCase = snakeCaseKeys(parsedString, { deep:\n                                      true });\n      return JSON.stringify(snakeCase);\n    } catch (error) {\n      // Bailout with no modification\n      return data;\n    }\n  }\n  return data;\n}\nexport function transformCamelCase(data) {\n  if (isObject(data) || Array.isArray(data)) {\n    return camelCaseKeys(data, { deep: true });\n  }\n  return data;\n}\nexport default axios.create({\n  baseURL: import.meta.env.VITE_BASE_API_URL,\n  withCredentials: true,\n  transformRequest: [...axios.defaults.transformRequest,\n                     transformSnakeCase],\n  transformResponse: [...axios.defaults.transformResponse,\n                      transformCamelCase],\n});\n```"]