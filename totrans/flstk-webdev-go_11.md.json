["```go\ngit clone https://github.com/nanikjava/feature-flags\n```", "```go\ngo build -o fflag .\n```", "```go\n./fflag\n```", "```go\n2022/07/30 15:10:38 Feature flag is up listening on  :8080\n```", "```go\ncurl -v -X POST http://localhost:8080/features -H \"Content-Type:application/json\" -d '{\"key\":\"disable_get\",\"enabled\":false,\"users\":[],\"groups\":[\"dev\",\"admin\"],\"percentage\":0}' \n```", "```go\n{\n  \"key\": \"disable_get\",\n  \"enabled\": false,\n  \"users\": [],\n  \"groups\": [\n    \"dev\",\n    \"admin\"\n  ],\n  \"percentage\": 0\n} \n```", "```go\n*   Trying 127.0.0.1:8080...\n* Connected to localhost (127.0.0.1) port 8080 (#0)\n…\n* Mark bundle as not supporting multiuse\n< HTTP/1.1 201 Created\n…\n< Content-Length: 89\n<\n{\"key\":\"disable_get\",\"enabled\":false,\"users\":[],\"groups\":[\"dev\",\"admin\"],\"percentage\":0}\n* Connection #0 to host localhost left intact\n```", "```go\nnpm install\nnpm run dev\n```", "```go\n{\n  \"key\": \"disable_get\",\n  \"enabled\": false,\n  \"users\": [],\n  \"groups\": [\n    \"dev\",\n    \"admin\"\n  ],\n  \"percentage\": 0\n}\n```", "```go\ncurl -v -X PATCH http://localhost:8080/features/disable_get -H \"Content-Type: application/json\" -d '{\"key\":\"disable_get\",\"enabled\":true}'\n```", "```go\n...\n<script>\nimport axios from 'axios';\nexport default {\n data() {\n   return {\n     enabled: true\n   }\n },\n mounted() {\n   axios({method: \"GET\", \"url\":\n     \"http://localhost:8080/features/disable_get\"}).then(result        => {\n     this.enabled = result.data.enabled\n     console.log(result);\n   }, error => {\n     console.error(error);\n   });\n }\n}\n</script>\n<template>\n <div  v-if=\"enabled\" class=\"flex space-2 justify-center\">\n   ...\n   </button>\n </div>\n ...\n```", "```go\ncurl -v -X POST http://localhost:8080/features -H \"Content-Type: application/json\" -d '{\"key\":\"serviceb\", \"enabled\":true,\"users\":[],\"groups\":[\"dev\",\"admin\"],\"percentage\":0}'\ncurl -v -X POST http://localhost:8080/features -H \"Content-Type: application/json\" -d '{\"key\":\"servicea\", \"enabled\":false,\"users\":[],\"groups\":[\"dev\",\"admin\"],\"percentage\":0}' \n```", "```go\n    go run main.go \n    ```", "```go\n    go run main.go  \n    ```", "```go\n    go run main.go \n    ```", "```go\n{\"Message\":\"-ServiceB active\"}\n```", "```go\ncurl -v -X PATCH http://localhost:8080/features/servicea -H \"Content-Type: application/json\" -d '{\"enabled\":true}'\n```", "```go\n{\"Message\":\"ServiceA active-ServiceB active\"}\n```", "```go\n...\nfunc main() {\n  port := \":8000\"\n  ...\n  wg := &sync.WaitGroup{}\n  wg.Add(1)\n  go func(w *sync.WaitGroup) {\n     defer w.Done()\n     serviceA = checkFlags(\"servicea\")\n     serviceB = checkFlags(\"serviceb\")\n  }(wg)\n  wg.Wait()\n  http.ListenAndServe(port, rtr)\n}\n```", "```go\nfunc handler() http.HandlerFunc {\n  type ResponseBody struct {\n     Message string\n  }\n  return func(rw http.ResponseWriter, req *http.Request) {\n     var a, b string\n     if serviceA {\n        a = callService(\"8081\")\n     }\n     if serviceB {\n        b = callService(\"8082\")\n     }\n     json.NewEncoder(rw).Encode(ResponseBody{\n        Message: a + \"-\" + b,\n     })\n  }\n}\n```", "```go\nfunc checkFlags(key string) bool {\n  ...\n  requestURL := fmt.Sprintf(\"http://localhost:%d/features/%s\",    8080, key)\n  res, err := http.Get(requestURL)\n  ...\n  resBody, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n     log.Printf(\"client: could not read response body: %s\\n\",       err)\n     os.Exit(1)\n  }\n  ...\n  return f.Enabled\n}\n```", "```go\nhttp://localhost:8080/features/servicea\nhttp://localhost:8080/features/serviceb\n```", "```go\n{\n  \"key\": \"servicea\",\n  \"enabled\": true,\n  \"users\": [],\n  \"groups\": [\n    \"dev\",\n    \"admin\"\n  ],\n  \"percentage\": 0\n} \n```", "```go\nfunc checkFlags(key string) bool {\n  type FeatureFlagServerResponse struct {\n     Enabled bool `json:\"enabled\"`\n  }\n  ...\n  var f FeatureFlagServerResponse\n  err = json.Unmarshal(resBody, &f)\n  ...\n}\n```", "```go\nfunc checkFlags(key string) bool {\n  ...\n  return f.Enabled\n}\n```"]