- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feature Flags
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn about feature flags, what they are, how to use
    them, and the benefits of using them. Using feature flags is not mandatory for
    applications. However, as application complexity increases, the need for feature
    flags will arise.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: There are many different features provided by feature flags, but in this chapter,
    we will focus on how to use feature flags to enable/disable certain features in
    an application. We will be using an open source, simple version of the feature
    flag server to demonstrate the integration for both frontend and backend services.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’ll cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Understanding what feature flags are all about
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing an open source feature flag server
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling/disabling features using feature flags
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating feature flags for frontend and backend services
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All the source code explained in this chapter can be found at [https://github.com/PacktPublishing/Full-Stack-Web-Development-with-Go/tree/main/chapter11](https://github.com/PacktPublishing/Full-Stack-Web-Development-with-Go/tree/main/chapter11).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: This chapter uses the cURL tool to perform HTTP operations. The tool is available
    for different operating systems and can be downloaded from [https://curl.se/download.xhtml](https://curl.se/download.xhtml).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to feature flags
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the current rapidly changing world, developers need to make changes and roll
    out new features almost every single day, if not quicker. Sometimes, this requires
    features to be built even before there are any user needs. Having the ability
    to deploy features into production without disruption is the holy grail of software
    development.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Features that are deployed to production may or may not be made available to
    users; this all depends on tactical decisions on the business side. Developers
    will keep on releasing features to production and, when the time is right, the
    feature will be made available with a click of a button from the business side.
    This kind of facility is provided by the feature flag.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: In simple terms, feature flags are like on/off switches that we can use to enable/disable
    features in our applications without creating disruption. Enabling features will
    also allow companies to strategically enable or disable features depending on
    the market and users’ needs, which can impact the bottom line of a company.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 'As a tool, feature flags not only provide the ability to run on/off features
    but there are also many other benefits you can also get out of it:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Testing features for certain demographics based on certain conditions such as
    geographical location, user’s age, and so on
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Splitting of the traffic request based on network condition
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conducting UX experiments to understand which design works well
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will look at an open source project feature flag tool to
    demonstrate how to use and integrate it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Feature flag configuration
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use feature flags by deploying them in your infrastructure or by using
    software-as-a-service solutions such as LaunchDarkly, Flagsmith, and many other
    available solutions. Each of the solutions provides its own API, which needs to
    be integrated into your application. This means that your application is tied
    to the solution that you choose. There is no one-size-fits-all solution; it all
    depends on what kind of features you need for your application.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a look at different kinds of configuration for using feature flags.
    *Figure 11**.1* shows the simplest way to use feature flags.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1: A web client using feature flags](img/Figure_11.01_B18295.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.1: A web client using feature flags'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: The web client will enable or disable the user interface depending on the feature
    flag. For example, in an application, a particular menu selection can be enabled
    when the feature flag related to the menu is turned on.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 11**.2* shows a different configuration where the web client will call
    different microservices, depending on which feature flag is turned on/off:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.2: Feature flag microservices](img/Figure_11.02_B18295.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.2: Feature flag microservices'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, the web client calls microservice A when feature flag
    A is turned on.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'Another interesting configuration is shown in *Figure 11**.3*, where the main
    microservice will determine which user interface will be returned back to the
    web client, depending on which feature flag has been configured:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.3: The feature flags for microservices](img/Figure_11.03_B18295_to_be_Redrawn.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.3: The feature flags for microservices'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: In the above example, the web client will get a different response to render
    if the main microservice detects that feature flag C has been enabled, which will
    get the response from MicroService C.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: So, as we can see, there are different ways to use feature flags and different
    places to use them. It all comes down to what will be needed for your application.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at using an open source feature flag server
    to enable/disable buttons in a sample web app.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Use cases for using feature flags
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Feature flags are not limited to flags that can be configured to turn on/off
    features inside applications; there are many more features and capabilities. In
    this section, we will look at the features provided in a full-blown feature flag
    server:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '**Segment targeting** – Imagine you are building a feature that you want to
    test on a group of users in your application. For example, you may want a certain
    group of users that are based in the USA to use the checkout feature based on
    PayPal.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Risk mitigation** – Building product features does not guarantee that a feature
    will bring in more users. New features can be released and, with time and more
    analysis, if it is found that the feature is providing a bad user experience,
    it will be turned off as part of the risk mitigation process.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gathering feedback before launch** – Using a targeted rollout for a certain
    group of users, it is possible to get feedback as early as possible from the user.
    The feedback will provide insight for the team to decide whether the feature indeed
    provides any additional benefit to the user or not.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we have a good understanding of the use cases for feature flag, we will
    look at installing the feature flag server in the next section.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Installing the feature flag server
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to use an open source feature flag server. Clone the project from
    the [github.com/nanikjava/feature-flags](http://github.com/nanikjava/feature-flags)
    repository as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'From your terminal, change the directory into the project directory and build
    the server using the following command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We are using the `-o` flag to compile the application and output it to a filename
    called `fflag`. Now that the server has been compiled and is ready to use, open
    a separate terminal window and run the server as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You will see the following output:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The server is now listening on port `8080`. Now, we need to add a new feature
    flag for our web app, and the key is called `disable_get`. The way to do this
    is to use the `curl` command line to send data using `POST` as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `curl` command is calling the `/features` endpoint and passing the JSON
    data. Once this has completed successfully, you will see the following output:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The JSON output shows that the feature flag server now has a new key called
    `disable_get`, and it is disabled, as indicated by the flag `enabled: false`.
    The output should look as follows, showing that the data has been successfully
    added:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The feature flag server is ready with the data we need. In the next section,
    we will look at using the flag inside our web app.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: The high-level architecture of feature flags
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Figure 11**.4* shows the architecture of the open source feature flag server
    at a high level.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.4: The high-level architecture](img/Figure_11.04_to_be_redrawn_B18295.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.4: The high-level architecture'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the diagram, the server uses mux.Router to route for different HTTP
    requests such as `GET`, `POST`, `DELETE`, and `PATCH`. The server uses an internal
    database as persistent storage for the feature flags that the application requires.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: The server is accessible via HTTP request calls that can be made from both web
    clients and microservices using the normal HTTP protocol.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Integration of the feature flag
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After we have installed the feature flag server, we want to start using it in
    our application. In this section, we will look at integrating the feature flag
    to enable/disable certain user interface elements in the frontend and to call
    only the backend services from our server that are enabled.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Web application
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The sample app we are going to use can be found inside the `chapter11/frontend-enable-disable`
    folder; the sample app demonstrates how to use the feature flag to enable/disable
    the user interface button. Open the terminal and change into the `chapter11/frontend-enable-disable`
    directory to run the web app as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The commands will install all the necessary packages and then run the web app.
    Once the command completes, open your browser and type `http://localhost:3000`
    in the address bar. You will see the web app shown in *Figure 11**.5*.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.5: The initial view of the web app using the feature flag](img/Figure_11.05_B18295.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.5: The initial view of the web app using the feature flag'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'What you are seeing in *Figure 11**.5* is that one of the buttons has been
    disabled. This is based on the flag value that we set in the previous section.
    The flag data looks as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `disable_get` key is the flag key we added to the server and the `enabled`
    field is set to `false`, which means that the button is disabled. Let’s change
    the `enabled` field to `true` and let’s see how the web page changes.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command in a terminal to update the data:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `curl` command updates the `enabled` field to `true`. Refresh the browser
    page and you will see the button is enabled, as shown in *Figure 11**.6*.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.6: The Click to Get button is enabled](img/Figure_11.06_B18295.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.6: The Click to Get button is enabled'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet from the `HelloWorld.vue` file takes care of reading
    the key from the server, using it to enable/disable the button:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the next section, we will look at using the feature flag to enable/disable
    certain features on the backend service.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Microservice integration
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will use the feature flag to enable/disable certain services.
    This will give the application the flexibility to access only the services that
    are currently enabled. *Figure 11**.7* shows how the microservice will be structured.
    The application is inside the `chapter11/multiple-service` folder.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.7: The microservice structure for the feature flag](img/Figure_11.07_B18295.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.7: The microservice structure for the feature flag'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 'Following the steps from the previous section to run the feature flag server,
    use the following command to create the flags:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The command creates two keys: `servicea` and `serviceb`. For now, `servicea`
    is disabled, while `serviceb` is enabled. Once the feature flags have been set
    up, we are going to run different services:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '`chapter11/multiple-service/mainserver` directory. Run the main server with
    the following command:'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The main server will run on port `8080`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '`servicea` – open the terminal and change the directory to `chapter11/multiple-service/servicea`.
    Run the service with the following command:'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`servicea` will run on port `8081`.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '`serviceb` – open the terminal and change the directory to `chapter11/multiple-service/serviceb`.
    Run the service with the following command:'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`serviceb` will run on port `8082`.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'We now have three different services running on ports `8080`, `8081`, and `8082`.
    Open your browser and access the service using `http://localhost:8000`. You will
    get a response like the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The response sent back came from `serviceb` as `servicea` is disabled, as per
    the configuration from the feature flag server. Now, let’s turn on the flag for
    `servicea` using the following command:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Restart the main server by force-stopping it using *Ctrl + C*. Re-run it using
    the same command discussed previously. Open your browser and access the service
    using `http://localhost:8000`. You should get a result like the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We get responses from both services now that both have been enabled.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at the code to understand how the feature flag is used. The
    following snippet shows part of the code to start the server:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The code calls the feature flag server to get flag information for `servicea`
    and `serviceb` in a goroutine. Once completed, it starts the server to listen
    on port `8000`. The state of the services is stored inside the `servicea` and
    `serviceb` variables, which will be used in other parts of the code, as shown
    in the following code snippet:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `handler()` method is called when you access the server on port `8000`.
    Inside the code, as can be seen, it calls the service only when it is enabled.
    Once the service is called, the results from the service are combined and sent
    back to the client as a single JSON response.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet shows how to access the feature flag server to extract
    the different flags. It uses a normal HTTP GET call:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The code is calling the feature flag server by getting each key that we are
    interested in. So, in the case of the sample, we are calling using the following
    URLs:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'For example, when calling `http://localhost:8080/features/servicea`, the code
    will get the following JSON response from the feature flag server:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The `checkFlags()` function is interested only in the `enabled` field, which
    will be unmarshalled into the `FeatureFlagServerResponse` struct as shown below:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'After successfully converting the JSON to a struct, it will return the `Enabled`
    value as shown here:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We have come to the end of the chapter. In this section, we looked at integrating
    the feature flag in different scenarios such as inside web applications as well
    as using it as a feature toggle for accessing different microservices. There are
    other use cases where feature flags can be used, such as enabling/disabling performance
    metrics in production and enabling tracing in production for troubleshooting bugs.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about feature flags, including what they are used
    for and how to use them. We learned how to install a simple feature flag server
    and saw how to integrate it with our sample application.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: We went through the steps of using feature flags in two different use cases
    – integrating it by checking on the flag to enable/disable a button in our frontend
    and in the backend to call different microservices. Using feature flags to enable
    or disable certain services gives the application flexibility on what response
    will be sent back to the frontend, which gives developers the ability to allow
    access to certain services as and when needed.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经通过两个不同的用例介绍了使用功能标志的步骤——通过检查标志来在我们的前端启用/禁用按钮，以及在后端调用不同的微服务。使用功能标志来启用或禁用某些服务，使应用程序在向前端发送响应方面具有灵活性，这给了开发者按需允许访问某些服务的能力。
- en: In the next chapter, we will look at building continuous integration by exploring
    the different features provided by GitHub.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过探索GitHub提供的不同功能来构建持续集成。
