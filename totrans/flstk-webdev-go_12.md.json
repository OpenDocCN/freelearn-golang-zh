["```go\nname: GitHub Actions Demo\non: [push]\njobs:\n  Explore-GitHub-Actions:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"🎉 The job was automatically triggered by a \n                   ${{ GitHub.event_name }} event.\"\n      - run: echo \"🐧 This job is now running on a ${{ runner.                   os }} \n                     server hosted by GitHub!\"\n      - run: echo \"🔎 The name of your branch is ${{ GitHub.                   ref }} and your repository is ${{ GitHub.                   repository }}.\"\n      - name: Check out repository code\n        uses: actions/checkout@v3\n      - run: echo \"💡 The ${{ GitHub.repository }} repository                     has been cloned to the runner.\"\n      - run: echo \"🖥 The workflow is now ready to test your                    code on the runner.\"\n      - name: List files in the repository\n        run: |\n          ls ${{ GitHub.workspace }}\n      - run: echo \"🍏 This job's status is ${{ job.status }}.\"\n```", "```go\nname: Build and Package\non:\n push:\n   branches:\n     - main\n pull_request:\njobs:\n lint:\n   name: Lint\n   runs-on: ubuntu-latest\n   steps:\n     - name: Set up Go\n       uses: actions/setup-go@v1\n       with:\n         go-version: 1.18\n     - name: Check out code\n       uses: actions/checkout@v1\n     - name: Lint Go Code\n       run: |\n         curl -sSfL \n         https://raw.GitHubusercontent.com/golangci/golangci-           lint/\n         master/install.sh | sh -s -- -b $(go env GOPATH)/bin\n         $(go env GOPATH)/bin/golangci-lint run\n build:\n   name: Build\n   runs-on: ubuntu-latest\n   needs: [ lint ]\n   steps:\n     - name: Set up Go\n       uses: actions/setup-go@v1\n       with:\n         go-version: 1.18\n     - name: Check out code\n       uses: actions/checkout@v1\n     - name: Build\n       run: make build\n```", "```go\nname: Build and Package\non:\n push:\n   branches:\n     - main\n```", "```go\njobs:\n lint:\n   name: Lint\n   runs-on: ubuntu-latest\n   steps:\n     ...\n build:\n   name: Build\n   runs-on: ubuntu-latest\n   needs: [ lint ]\n   steps:\n     ...\n```", "```go\n...\njobs:\n lint:\n   ...\n   steps:\n     - name: Set up Go\n       uses: actions/setup-go@v1\n       with:\n         go-version: 1.18\n     - name: Check out code\n       uses: actions/checkout@v1\n     - name: Lint Go Code\n       run: |\n         curl -sSfL  \n         https://raw.GitHubusercontent.com/golangci/golangci-           lint/\n         master/install.sh | sh -s -- -b $(go env GOPATH)/bin\n         $(go env GOPATH)/bin/golangci-lint run\n build:\n   ...\n   steps:\n     - name: Set up Go\n       uses: actions/setup-go@v1\n       with:\n         go-version: 1.18\n     - name: Check out code\n       uses: actions/checkout@v1\n     - name: Build\n       run: make build\n```", "```go\n# 1\\. Compile the app.\nFROM golang:1.18  as builder\nWORKDIR /app\nCOPY . .\nRUN CGO_ENABLED=0 GOOS=linux go build -a -o bin/embed\n# 2\\. Create final environment for the compiled binary.\nFROM alpine:latest\nRUN apk --update upgrade && apk --no-cache add curl ca-certificates && rm -rf /var/cache/apk/*\nRUN mkdir -p /app\n# 3\\. Copy the binary from step 1 and set it as the default command.\nCOPY --from=builder /app/bin/embed /app\nWORKDIR /app\nCMD /app/embed\n```", "```go\nname: Build Docker Image\non:\n push:\n   branches:\n     - main\n pull_request:\nenv:\n REGISTRY: ghcr.io\n IMAGE_NAME: ${{ GitHub.repository }}\njobs:\n push_to_GitHub_registry:\n   name: Push Docker image to Docker Hub\n   runs-on: ubuntu-latest\n   steps:\n     ...\n     - name: Log in to the Container registry\n       uses: docker/login-action@v2\n       with:\n         registry: ${{ env.REGISTRY }}\n         username: ${{ GitHub.actor }}\n         password: ${{ secrets.GITHUB_TOKEN }}\n     - name: Build and push Docker image\n       uses: docker/build-push-action@v3\n       with:\n         context: .\n         file: ./Dockerfile\n         push: true\n         tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME \n               }}/chapter12:latest\n```", "```go\ndocker pull ghcr.io/nanikjava/golangci/chapter12:latest\n```", "```go\nlatest: Pulling from nanikjava/golangci/chapter12\n213ec9aee27d: Already exists \n3a904afc80b3: Pull complete \n561cc7c7d83b: Pull complete \naee36b390937: Pull complete \n4f4fb700ef54: Pull complete \nDigest: sha256:a355f55c33a400290776faf20b33d45096eb19a6431fb0b3 f723c17236e8b03e\nStatus: Downloaded newer image for ghcr.io/nanikjava/golangci/chapter12:latest\n```", "```go\ndocker run -p 3333:3333 ghcr.io/nanikjava/golangci/chapter12\n```", "```go\n2022/08/18 08:03:10 Server Version : 0.0.1\n```"]