["```go\nusage: aws [options] <command> <subcommand> [<subcommand> ...] [parameters]\nTo see help text, you can run:\n  aws help\n  aws <command> help\n  aws <command> <subcommand> help\naws: error: the following arguments are required: command\n```", "```go\nexport PATH=$PATH:/home/user/Downloads/\n```", "```go\nTerraform\n```", "```go\nUsage: terraform [global options] <subcommand> [args]\nThe available commands for execution are listed below.\nThe primary workflow commands are given first, followed by\nless common or more advanced commands.\nMain commands:\n  init          Prepare your working directory for other\n                commands\n  ...\nAll other commands:\n  console       Try Terraform expressions at an interactive\n                command prompt\n  fmt           Reformat your configuration in the standard\n                style\n  ...\n```", "```go\nterraform init\n```", "```go\nInitializing the backend...\nInitializing provider plugins...\n- Finding kreuzwerker/docker versions matching \"~> 2.16.0\"...\n- Installing kreuzwerker/docker v2.16.0...\n- Installed kreuzwerker/docker v2.16.0 (self-signed, key ID BD080C4571C6104C)\n...\n```", "```go\n.\n├── main.tf\n├── .terraform\n│   └── providers\n│       └── registry.terraform.io\n│           └── kreuzwerker\n│               └── docker\n│                   └── 2.16.0\n│                       └── linux_amd64\n│                           ├── CHANGELOG.md\n│                           ├── LICENSE\n│                           ├── README.md\n│                           └── terraform-provider-docker_v2.16.0\n├── .terraform.lock.hcl\n└── versions.tf\n```", "```go\n# This file is maintained automatically by \"terraform\n# init\".\n# Manual edits may be lost in future updates.\nprovider \"registry.terraform.io/kreuzwerker/docker\" {\n version     = \"2.16.0\"\n constraints = \"~> 2.16.0\"\n hashes = [\n   \"h1:OcTn2QyCQNjDiJYy1vqQFmz2dxJdOF/2/HBXBvGxU2E=\",\n   ...\n ]\n}\n```", "```go\nterraform plan\n```", "```go\n...\nTerraform will perform the following actions:\n  # docker_container.nginx will be created\n  + resource \"docker_container\" \"nginx\" {\n      + attach           = false\n      + bridge           = (known after apply)\n      + command          = (known after apply)\n      + container_logs   = (known after apply)\n      + entrypoint       = (known after apply)\n      + env              = (known after apply)\n      + exit_code        = (known after apply)\n      ...\n      + remove_volumes   = true\n      + restart          = \"no\"\n      + rm               = false\n      + security_opts    = (known after apply)\n      + shm_size         = (known after apply)\n      + start            = true\n      + stdin_open       = false\n      + tty              = false\n      + healthcheck {\n          + interval     = (known after apply)\n          + retries      = (known after apply)\n          + start_period = (known after apply)\n          + test         = (known after apply)\n          + timeout      = (known after apply)\n        }\n      + labels {\n          + label = (known after apply)\n          + value = (known after apply)\n        }\n      + ports {\n          + external = 8000\n          + internal = 80\n          + ip       = \"0.0.0.0\"\n          + protocol = \"tcp\"\n        }\n    }\n  # docker_image.nginx will be created\n  + resource \"docker_image\" \"nginx\" {\n      + id           = (known after apply)\n      ...\n      + repo_digest  = (known after apply)\n    }\nPlan: 2 to add, 0 to change, 0 to destroy.\n...\n```", "```go\nterraform apply –auto-aprove\n```", "```go\n...\nTerraform will perform the following actions:\n  # docker_container.nginx will be created\n  + resource \"docker_container\" \"nginx\" {\n      + attach           = false\n      + bridge           = (known after apply)\n      ...\n    }\n  # docker_image.nginx will be created\n  + resource \"docker_image\" \"nginx\" {\n      + id           = (known after apply)\n      ...\n    }\nPlan: 2 to add, 0 to change, 0 to destroy.\ndocker_image.nginx: Creating...\ndocker_image.nginx: Still creating... [10s elapsed]\ndocker_image.nginx: Creation complete after 17s [id=sha256:2d389e545974d4a93ebdef09b650753a55f72d1ab4518d17a 30c0e1b3e297444nginx:latest]\ndocker_container.nginx: Creating...\ndocker_container.nginx: Creation complete after 2s [id=d0c94bd4 b548e6a19c3afb907a777bcb602e965bc05db8ef6d0d380601bb0694]\nApply complete! Resources: 2 added, 0 changed, 0 destroyed.\n```", "```go\nTerraform destroy –auto-approve\n```", "```go\ndocker_image.nginx: Refreshing state... [id=sha256:2d389e545974d4a93ebdef09b650753a55f72d1ab4518d17a30c 0e1b3e297444nginx:latest]\ndocker_container.nginx: Refreshing state... [id=9c46cff8 1a27edb6aba08a448d715599c644aaa79b192728016db0d903da9fb0]\n...\nTerraform will perform the following actions:\n  # docker_container.nginx will be destroyed\n  - resource \"docker_container\" \"nginx\" {\n      - attach            = false -> null\n      - command           = [\n          - \"nginx\",\n          - \"-g\",\n          - \"daemon off;\",\n        ] -> null\n      - cpu_shares        = 0 -> null\n      …\n    }\n  # docker_image.nginx will be destroyed\n  - resource \"docker_image\" \"nginx\" {\n      - id           =\n         \"sha256:2d389e545974d4a93ebdef09b650753a55f7\n         2d1ab4518d17a30c0e1b3e297444nginx:latest\" ->\n         null\n      - keep_locally = false -> null\n      - latest       =\n         \"sha256:2d389e545974d4a93ebdef09b650753a55f72\n          d1ab4518d17a30c0e1b3e297444\" -> null\n      - name         = \"nginx:latest\" -> null\n      - repo_digest  =\n          \"nginx@sha256:0b970013351304af46f322da126351\n           6b188318682b2ab1091862497591189ff1\" -> null\n    }\nPlan: 0 to add, 0 to change, 2 to destroy.\ndocker_container.nginx: Destroying... [id=9c46cff81a27edb6aba 08a448d715599c644aaa79b192728016db0d903da9fb0]\ndocker_container.nginx: Destruction complete after 1s\ndocker_image.nginx: Destroying... [id=sha256:2d389e545974d4a93 ebdef09b650753a55f72d1ab4518d17a30c0e1b3e297444nginx:latest]\ndocker_image.nginx: Destruction complete after 0s\nDestroy complete! Resources: 2 destroyed.\n```", "```go\nterraform {\n required_providers {\n   docker = {\n     source = \"kreuzwerker/docker\"\n     version = \"~> 2.16.0\"\n   }\n }\n}\nresource \"docker_image\" \"nginx\" {\n name         = \"nginx:latest\"\n keep_locally = false\n}\nresource \"docker_container\" \"nginx\" {\n image = docker_image.nginx.name\n name  = \"hello-terraform\"\n ports {\n   internal = 80\n   external = 8000\n }\n}\n```", "```go\nterraform init\n```", "```go\nInitializing the backend...\nInitializing provider plugins...\n- Finding kreuzwerker/docker versions matching \"~> 2.16.0\"...\n- Installing kreuzwerker/docker v2.16.0...\n- Installed kreuzwerker/docker v2.16.0 (self-signed, key ID BD080C4571C6104C)\n...\n```", "```go\nterraform apply -auto-approve\n```", "```go\n…\n  # docker_container.nginx will be created\n  + resource \"docker_container\" \"nginx\" {\n      + attach           = false\n      ...\n    }\n  # docker_image.nginx will be created\n  + resource \"docker_image\" \"nginx\" {\n      + id           = (known after apply)\n     …\n    }\nPlan: 2 to add, 0 to change, 0 to destroy.\n  …\ndocker_image.nginx: Creation complete after 22s [id=sha256:2d389e545974d4a93ebdef09b650753a55f72d1ab4518d17a 30c0e1b3e297444nginx:latest]\ndocker_container.nginx: Creating...\ndocker_container.nginx: Creation complete after 2s [id=b860780 af83a4c719a916b87171d96801cc2243a61242354815f6d82dc6a5e40]\n```", "```go\nterraform destroy -auto-approve\n```", "```go\n#script to pull chapter12 image and run it locally\n#it also store the image locally\nterraform {\n required_providers {\n   docker = {\n     source  = \"kreuzwerker/docker\"\n     version = \"~> 2.13.0\"\n   }\n }\n}\ndata \"docker_registry_image\" \"github\" {\n name = \"ghcr.io/nanikjava/golangci/chapter12:latest\"\n}\nresource \"docker_image\" \"embed\" {\n ...\n}\nresource \"docker_container\" \"embed\" {\n ...\n}\n```", "```go\nterraform init\n```", "```go\nterraform apply -auto-approve\n```", "```go\n…\ndata.docker_registry_image.github: Reading...\ndata.docker_registry_image.github: Read complete after 1s [id=sha256:a355f55c33a400290776faf20b33d45096eb19a6431fb 0b3f723c17236e8b03e]\n…\n  # docker_container.embed will be created\n  + resource \"docker_container\" \"embed\" {\n      + attach           = false\n     …\n      + ports {\n          + external = 3333\n          + internal = 3333\n          …\n        }\n    }\n  # docker_image.embed will be created\n  + resource \"docker_image\" \"embed\" {\n      …\n      + name         =\n         \"ghcr.io/nanikjava/golangci/chapter12:latest\"\n       …\n    }\nPlan: 2 to add, 0 to change, 0 to destroy.\n… [id=sha256:684e34e77f40ee1e75bfd7d86982a4f4fae1dbea3286682af 3222a270faa49b7ghcr.io/nanikjava/golangci/chapter12:latest]\ndocker_container.embed: Creation complete after 7s [id=f47d1ab90331dd8d6dd677322f00d9a06676b71dda3edf2cb2e66 edc97748329]\nApply complete! Resources: 2 added, 0 changed, 0 destroyed.\n```", "```go\n...\ndata \"docker_registry_image\" \"github\" {\n name = \"ghcr.io/nanikjava/golangci/chapter12:latest\"\n}\n...\n```", "```go\nresource \"docker_image\" \"embed\" {\n keep_locally = true\n name         = \"${data.docker_registry_image.github.name}\"\n}\n```", "```go\nterraform init\n```", "```go\nterraform apply  -var=\"aws_access_key=xxxx\" -var=\"aws_secret_key=xxx\" -auto-approve\n```", "```go\n...\nTerraform will perform the following actions:\n  # aws_instance.app_server will be created\n  + resource \"aws_instance\" \"app_server\" {\n      + ami = \"ami-0ff8a91507f77f867\"\n      ...\n    }\n  # aws_subnet.default-subnet will be created\n  + resource \"aws_subnet\" \"default-subnet\" {\n      ...\n    }\n  # aws_vpc.default-vpc will be created\n  + resource \"aws_vpc\" \"default-vpc\" {\n      + arn                      = (known after apply)\n      ...\n    }\nPlan: 3 to add, 0 to change, 0 to destroy.\n...\naws_instance.app_server: Creation complete after 24s [id=i-0358d1df58e055d70]\n```", "```go\nterraform {\n ...\n}\nvariable \"aws_access_key\" {\n type = string\n}\nvariable \"aws_secret_key\" {\n type = string\n}\nprovider \"aws\" {\n region     = \"us-east-1\"\n access_key = var.aws_access_key\n secret_key = var.aws_secret_key\n}\n```", "```go\nresource \"aws_vpc\" \"default-vpc\" {\n cidr_block           = \"10.0.0.0/16\"\n enable_dns_hostnames = true\n tags                 = {\n   env = \"dev\"\n }\n}\nresource \"aws_subnet\" \"default-subnet\" {\n cidr_block = \"10.0.0.0/24\"\n vpc_id     = aws_vpc.default-vpc.id\n}\n```", "```go\nresource \"aws_instance\" \"app_server\" {\n ami             = \"ami-0ff8a91507f77f867\"\n instance_type   = \"t2.nano\"\n subnet_id       = aws_subnet.default-subnet.id\n tags = {\n   Name = \"Chapter14\"\n }\n}\n```", "```go\n...\nTerraform will perform the following actions:\n  # aws_default_route_table.lbecs-subnet-default-route-\n  # table will be created\n  + resource \"aws_default_route_table\"\n             \"lbecs-subnet-default-route-table\" {\n      ...\n    }\n  # aws_ecs_cluster.lbecs-ecs-cluster will be created\n  + resource \"aws_ecs_cluster\" \"lbecs-ecs-cluster\" {\n      ...\n    }\n  # aws_ecs_service.lbecs-ecs-service will be created\n  + resource \"aws_ecs_service\" \"lbecs-ecs-service\" {\n      ...\n    }\n  # aws_ecs_task_definition.lbecs-ecs-task-definition will\n  # be created\n  + resource \"aws_ecs_task_definition\"\n             \"lbecs-ecs-task-definition\" {\n      ...\n    }\n  # aws_internet_gateway.lbecs-igw will be created\n  + resource \"aws_internet_gateway\" \"lbecs-igw\" {\n     ...\n    }\n  # aws_lb.lbecs-load-balancer will be created\n  + resource \"aws_lb\" \"lbecs-load-balancer\" {\n      ...\n    }\n  # aws_lb_listener.lbecs-load-balancer-listener will be\n  # created\n  + resource \"aws_lb_listener\"\n             \"lbecs-load-balancer-listener\" {\n      ...\n    }\n  # aws_lb_target_group.lbecs-load-balancer-target-group\n  # will be created\n  + resource \"aws_lb_target_group\"\n             \"lbecs-load-balancer-target-group\" {\n      ...\n    }\n  # aws_security_group.lbecs-security-group will be created\n  + resource \"aws_security_group\" \"lbecs-security-group\" {\n      ...\n    }\n  # aws_subnet.lbecs-subnet will be created\n  + resource \"aws_subnet\" \"lbecs-subnet\" {\n      ...\n    }\n  # aws_subnet.lbecs-subnet-1 will be created\n  + resource \"aws_subnet\" \"lbecs-subnet-1\" {\n      ...\n    }\n  # aws_vpc.lbecs-vpc will be created\n  + resource \"aws_vpc\" \"lbecs-vpc\" {\n      ...\n    }\nPlan: 12 to add, 0 to change, 0 to destroy.\n...\naws_ecs_service.lbecs-ecs-service: Creation complete after 2m49s [id=arn:aws:ecs:us-east-1:860976549008:service/lbecs-ecs-cluster/lbecs-ecs-service]\n...\nOutputs:\nurl = \"load-balancer-1956367690.us-east-1.elb.amazonaws.com\"\n```", "```go\nresource \"aws_internet_gateway\" \"lbecs-igw\" {\n vpc_id = aws_vpc.lbecs-vpc.id\n tags = {\n   Name = \"Internet Gateway\"\n }\n}\nresource \"aws_default_route_table\" \"lbecs-subnet-default-route-table\" {\n default_route_table_id =\n   aws_vpc.lbecs-vpc.default_route_table_id\n route {\n   cidr_block = \"0.0.0.0/0\"\n   gateway_id = \"${aws_internet_gateway.lbecs-igw.id}\"\n }\n}\n```", "```go\nresource \"aws_security_group\" \"lbecs-security-group\" {\n name        = \"allow_http\"\n description = \"Allow HTTP inbound traffic\"\n vpc_id      = aws_vpc.lbecs-vpc.id\n egress {\n   from_port   = 0\n   to_port     = 0\n   protocol    = \"-1\"\n   cidr_blocks = [\"0.0.0.0/0\"]\n }\n ingress {\n   description = \"Allow HTTP for all\"\n   from_port   = 80\n   to_port     = 3333\n   protocol    = \"tcp\"\n   cidr_blocks = [\"0.0.0.0/0\"]\n }\n}\n```", "```go\nresource \"aws_lb\" \"lbecs-load-balancer\" {\n name               = \"load-balancer\"\n internal           = false\n load_balancer_type = \"application\"\n security_groups    = [aws_security_group.lbecs-security-group.                       id]\n subnets            = [aws_subnet.lbecs-subnet.id,\n                       aws_subnet.lbecs-subnet-1.id]\n tags               = {\n   env = \"dev\"\n }\n}\n```", "```go\nresource \"aws_ecs_cluster\" \"lbecs-ecs-cluster\" {\n name = \"lbecs-ecs-cluster\"\n}\nresource \"aws_ecs_task_definition\" \"lbecs-ecs-task-definition\" {\n family                   = \"service\"\n requires_compatibilities = [\"FARGATE\"]\n network_mode             = \"awsvpc\"\n cpu                      = 1024\n memory                   = 2048\n container_definitions    = jsonencode([\n   {\n     name         = \"lbecs-ecs-cluster-chapter14\"\n     image        =\n       \"ghcr.io/nanikjava/golangci/chapter12:latest\"\n     ...\n     portMappings = [\n       {\n         containerPort = 3333\n       }\n     ]\n   }\n ])\n}\nresource \"aws_ecs_service\" \"lbecs-ecs-service\" {\n name            = \"lbecs-ecs-service\"\n cluster         = aws_ecs_cluster.lbecs-ecs-cluster.id\n task_definition =\n   aws_ecs_task_definition.lbecs-ecs-task-definition.arn\n desired_count   = 1\n launch_type     = \"FARGATE\"\n network_configuration {\n   ...\n }\n load_balancer {\n   target_group_arn = aws_lb_target_group.lbecs-load-\n                      balancer-target-group.arn\n   container_name   = \"lbecs-ecs-cluster-chapter14\"\n   container_port   = 3333\n }\n tags = {\n   env = \"dev\"\n }\n}\n```", "```go\n…\naws_lb_listener.lbecs-load-balancer-listener: Creating...\naws_lb_listener.lbecs-load-balancer-listener: Creation complete after 1s [id=arn:aws:elasticloadbalancing:us-east-1:860976549008:listener/app/load-balancer/4ad0f8b815a06f02/d945bba078d0c365]\naws_ecs_service.lbecs-ecs-service: Creation complete after 2m27s [id=arn:aws:ecs:us-east-1:860976549008:service/lbecs-ecs-cluster/lbecs-ecs-service]\nApply complete! Resources: 12 added, 0 changed, 0 destroyed.\nOutputs:\nurl = \"load-balancer-375816308.us-east-1.elb.amazonaws.com\"\n```"]