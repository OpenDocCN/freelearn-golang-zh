- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Cloud Deployment
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云部署
- en: In this chapter, we will learn about cloud deployment, specifically using AWS
    as the cloud provider. We will look at some of the infrastructure services provided
    by AWS and how to use them. We will learn about using and writing code for creating
    the different AWS infrastructure services using an open source tool called Terraform.
    Understanding the cloud and how cloud deployment works has become a necessity
    for developers nowadays rather than an exception. Gaining a good understanding
    of the different aspects of cloud deployment will allow you to think outside the
    box about how your application should run in the cloud.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习关于云部署的知识，特别是使用AWS作为云提供商。我们将查看AWS提供的一些基础设施服务以及如何使用它们。我们将学习如何使用和编写代码来创建不同的AWS基础设施服务，使用一个名为Terraform的开源工具。了解云以及云部署的工作原理已经成为开发者的必需品，而不是例外。深入了解云部署的不同方面将使您能够跳出思维定式，思考您的应用程序如何在云中运行。
- en: 'Upon completion of this chapter, we will have learned about the following key
    topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，我们将学习以下关键主题：
- en: Learning basic AWS infrastructure
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习基本的AWS基础设施
- en: Understanding and using Terraform
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解和使用Terraform
- en: Writing Terraform for local and cloud deployment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写用于本地和云部署的Terraform
- en: Deploying to AWS Elastic Container Service
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署到AWS弹性容器服务
- en: The end goal of this chapter is to provide you with some knowledge about the
    cloud and how to perform certain basic operations for deploying applications to
    the cloud.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最终目标是为您提供有关云以及如何执行某些基本操作以部署应用程序到云的一些知识。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: All the source code explained in this chapter can be checked out at [https://github.com/PacktPublishing/Full-Stack-Web-Development-with-Go/tree/main/chapter14](https://github.com/PacktPublishing/Full-Stack-Web-Development-with-Go/tree/main/chapter14).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中解释的所有源代码都可以在[https://github.com/PacktPublishing/Full-Stack-Web-Development-with-Go/tree/main/chapter14](https://github.com/PacktPublishing/Full-Stack-Web-Development-with-Go/tree/main/chapter14)上查看。
- en: This chapter uses AWS services, so you are expected to have an AWS account.
    AWS provides a Free Tier for new user registration; more information can be found
    at [https://aws.amazon.com/free](https://aws.amazon.com/free).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使用AWS服务，因此您预计将拥有一个AWS账户。AWS为新用户提供免费层；更多信息可以在[https://aws.amazon.com/free](https://aws.amazon.com/free)找到。
- en: Note
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Using any kind of AWS services will incur a cost. Please read and inform yourself
    before using the service. We highly recommend reading what is available on the
    Free Tier on the AWS website.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任何类型的AWS服务都会产生费用。请在使用服务之前阅读并了解相关信息。我们强烈建议您阅读AWS网站上关于免费层的信息。
- en: AWS refresher
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS复习
- en: '**AWS** stands for **Amazon Web Services** and belongs to Amazon, which provides
    the e-commerce platform [amazon.com.au](http://amazon.com.au). AWS provides services
    that allow organizations to run their applications in a complete infrastructure
    without owning any of the hardware required.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**AWS**代表**Amazon Web Services**，属于亚马逊公司，该公司提供电子商务平台[amazon.com.au](http://amazon.com.au)。AWS提供的服务允许组织在其完整的基础设施中运行其应用程序，而不需要拥有任何所需的硬件。'
- en: The AWS brand is a household name for developers and almost all developers have
    some basic direct/indirect exposure to using AWS tools or its services. In this
    section, we will look at some services provided by AWS as a refresher.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于开发者来说，AWS品牌是一个家喻户晓的名字，几乎所有开发者都直接或间接地接触过使用AWS工具或其服务。在本节中，我们将回顾AWS提供的一些服务。
- en: The question that comes to our mind is, why bother using services such as AWS?
    *Figure 14**.1* summarizes the answer nicely. AWS provides services that are available
    across different continents of the world and ready to be used by organizations
    to fulfill their needs. Imagine that your organization has customers across different
    continents. How much easier would it be to run your application on different continents
    without having the burden of investing in hardware on each of those continents?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们心中浮现的问题是，为什么还要使用AWS这样的服务？*图14.1*很好地总结了答案。AWS提供的服务遍布世界各地的不同大陆，并准备好供组织使用以满足其需求。想象一下，如果您的组织在不同大陆都有客户，那么在没有在每个大陆投资硬件的负担的情况下，在各个大陆上运行您的应用程序会容易多少？
- en: '![Figure 14.1: Global AWS Regions](img/Figure_14.01_B18295.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图14.1：全球AWS区域](img/Figure_14.01_B18295.jpg)'
- en: 'Figure 14.1: Global AWS Regions'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.1：全球AWS区域
- en: In the next section, we will look at the basic service provided by AWS called
    AWS EC2, which provides computing resources.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨AWS提供的基本服务，称为AWS EC2，它提供计算资源。
- en: Amazon Elastic Compute Cloud
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亚马逊弹性计算云
- en: 'Amazon **Elastic Compute Cloud** (**EC2**) is the basic computing resource
    for developers to run their applications on. You can think of EC2 as a virtual
    computer on Amazon infrastructure somewhere on the internet that runs your application.
    You can select from a number of computer configurations that you want to run your
    application on, from a small 512-MB memory to a gigantic 384-GB memory computer
    with different configurations of storage. *Figure 14**.2* shows the Instance Type
    Explorer that can be accessed using the following URL: [https://aws.amazon.com/ec2/instance-explorer/](https://aws.amazon.com/ec2/instance-explorer/).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊**弹性计算云**（**EC2**）是开发者在其上运行应用程序的基本计算资源。您可以选择在Amazon基础设施上的某个位置运行的计算机配置，从512-MB内存的小型计算机到具有不同存储配置的384-GB内存的大型计算机。*图14.2*显示了可以使用以下URL访问的实例类型探索器：[https://aws.amazon.com/ec2/instance-explorer/](https://aws.amazon.com/ec2/instance-explorer/)。
- en: '![Figure 14.2: Instance Type Explorer](img/Figure_14.02_B18295.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图14.2：实例类型探索器](img/Figure_14.02_B18295.jpg)'
- en: 'Figure 14.2: Instance Type Explorer'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.2：实例类型探索器
- en: In the next section, we will look at another AWS resource related to computing
    that is super important for applications, and that is storage.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨另一个与计算相关的AWS资源，这对应用程序来说非常重要，那就是存储。
- en: Storage
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 存储
- en: Computing power is great for running applications, but applications require
    long-term storage to store data such as log files and databases. There are a number
    of different kinds of storage provided by AWS. For example, *Figure 14**.3* shows
    the **Elastic Block Store** (**EBS**), which is a block storage service. This
    block storage is like the normal storage that you have on your local computer
    and is offered as a hard drive or a **solid-state** **drive** (**SSD**).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 计算能力非常适合运行应用程序，但应用程序需要长期存储来存储诸如日志文件和数据库之类的数据。AWS提供了多种不同的存储类型。例如，*图14.3*显示了**弹性块存储**（**EBS**），这是一种块存储服务。这种块存储类似于您在本地计算机上拥有的普通存储，提供为硬盘或**固态硬盘**（**SSD**）。
- en: '![Figure 14.3: EBS](img/Figure_14.03_B18295.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图14.3：EBS](img/Figure_14.03_B18295.jpg)'
- en: 'Figure 14.3: EBS'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.3：EBS
- en: The amazing thing about having this kind of storage is its elastic nature –
    what this means is you can increase or decrease the size of storage anytime you
    need without the worry of adding new hardware. Imagine what would happen if you
    were running out of hard drive space on your local computer. You would need to
    buy a new hard drive and install and configure it, none of which is required when
    you use the AWS storage service. Attaching storage to the EC2 instance of your
    choice enables your application to run and store data in the cloud.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有这种存储方式的惊人之处在于其弹性特性——这意味着您可以在需要时随时增加或减少存储大小，而无需担心添加新的硬件。想象一下，如果您在本地计算机上快用完硬盘空间会发生什么。您需要购买一块新硬盘并安装和配置它，而使用AWS存储服务时，这些都不需要。
- en: 'We will look at another AWS service that is as important as the one that we
    have just discussed: networking.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨另一个与AWS服务一样重要的服务：网络。
- en: Virtual Private Cloud
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 虚拟专用云
- en: Now that your application is running in its own virtual computer, complete with
    storage, the next question is how we configure a network in AWS so that users
    can access the application. This is called a **Virtual Private Cloud** (**VPC**).
    Think about a VPC as your own network setup, but without cables – everything is
    configured and run using software. *Figure 14**.4* shows the powerful capability
    of a VPC, enabling you to connect different networks configured in different Regions.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您的应用程序正在自己的虚拟计算机上运行，包括存储，接下来的问题是我们在AWS中如何配置网络，以便用户可以访问应用程序。这被称为**虚拟专用云**（**VPC**）。将VPC视为您自己的网络设置，但没有电缆——所有配置和运行都是通过软件完成的。*图14.4*显示了VPC的强大功能，使您能够连接在不同区域配置的不同网络。
- en: Think of a Region as the physical location where AWS stores its hardware, and
    if you run your applications in different physical locations, you are able to
    connect them using a VPC.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 将区域视为AWS存储其硬件的物理位置，如果您在不同的物理位置运行应用程序，您可以使用VPC将它们连接起来。
- en: '![Figure 14.4: Virtual Private Networking](img/Figure_14.04_B18295.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图14.4：虚拟专用网络](img/Figure_14.04_B18295.jpg)'
- en: 'Figure 14.4: Virtual Private Networking'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.4：虚拟专用网络
- en: You have full control to configure the network of each Region your application
    is running on, how these Regions communicate with your own network, and how your
    application will be accessible via the public internet.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以对应用程序运行在每个区域的网络进行完全控制，这些区域如何与您的网络通信，以及您的应用程序如何通过公共互联网访问。
- en: In the next section, we will look at another important service that a lot of
    applications require which is storing data in a database.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨许多应用程序都需要的重要服务之一，即存储在数据库中的数据。
- en: Database storage
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库存储
- en: No matter what kind of applications you are building, you will require a database
    to store data, and this requires a database server to be running. AWS provides
    different database services ranging from those that store small amounts of data
    to massively distributed databases across different continents. One of these services
    is called Amazon **Relational Database Service** (**RDS**), a managed service
    to set up, scale, and operate databases.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您正在构建什么类型的应用程序，您都需要数据库来存储数据，这需要运行数据库服务器。AWS提供了不同的数据库服务，从存储少量数据的服务到跨不同大陆的广泛分布的数据库。其中一项服务称为Amazon
    **关系数据库服务**（**RDS**），这是一种托管服务，用于设置、扩展和运行数据库。
- en: The databases that RDS can support are MySQL, PostgreSQL, MariaDB, Oracle, and
    SQL Server. *Figure 14**.5* outlines the features provided by RDS.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: RDS可以支持的数据库包括MySQL、PostgreSQL、MariaDB、Oracle和SQL Server。*图14**.5*概述了RDS提供的功能。
- en: '![Figure 14.5: RDS](img/Figure_14.05_B18295.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图14.5：RDS](img/Figure_14.05_B18295.jpg)'
- en: 'Figure 14.5: RDS'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.5：RDS
- en: Elastic Container Service
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弹性容器服务
- en: In [*Chapter 13*](B18295_13.xhtml#_idTextAnchor261), *Dockerizing an Application*,
    we learned how to create Docker images to package our application so it can run
    as a container. Packaging applications as Docker images allows us to run our application
    in any kind of environment, from a local machine to the cloud. AWS provides a
    related service called **Elastic Container** **Service** (**ECS**).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第13章*](B18295_13.xhtml#_idTextAnchor261)，“将应用程序Docker化”，我们学习了如何创建Docker镜像来打包我们的应用程序，使其可以作为容器运行。将应用程序打包为Docker镜像允许我们在任何环境中运行我们的应用程序，从本地机器到云端。AWS提供了一个相关服务，称为**弹性容器服务**（**ECS**）。
- en: 'ECS helps us to deploy, manage, and scale out applications that have been built
    as containers. A key scaling feature of ECS is the ability to scale your application
    using the Application Auto Scaling capability. This feature allows developers
    to scale applications based on certain conditions, such as the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: ECS帮助我们部署、管理和扩展已构建为容器的应用程序。ECS的一个关键扩展功能是使用应用程序自动扩展功能来扩展您的应用程序。此功能允许开发人员根据某些条件扩展应用程序，例如以下内容：
- en: '**Step scaling**: This means scaling an application based on the breach of
    an alarm'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤扩展**：这意味着根据警报的触发来扩展应用程序'
- en: '**Scheduled scaling**: This is scaling based on a predetermined time'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计划扩展**：这是基于预定时间的扩展'
- en: AWS tools
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS工具
- en: AWS provides different ways to use its services, including a web user interface
    and the **command-line interface** (**CLI**). The main page of the web UI can
    be seen in *Figure 14**.6*. You will need to register for an AWS account first
    before using any of the AWS tools.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: AWS提供了不同的方式来使用其服务，包括Web用户界面和**命令行界面**（**CLI**）。Web UI的主页可以在*图14**.6*中看到。在使用任何AWS工具之前，您需要先注册AWS账户。
- en: The UI is a very good place to start exploring the different services and go
    through some sample tutorials to get a better understanding of each service.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: UI是一个非常好的起点，可以探索不同的服务，并通过一些示例教程来更好地理解每个服务。
- en: '![Figure 14.6: AWS web UI](img/Figure_14.06_B18295.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图14.6：AWS web UI](img/Figure_14.06_B18295.jpg)'
- en: 'Figure 14.6: AWS web UI'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.6：AWS web UI
- en: 'The other AWS tool that is used to interact with the services is the CLI, which
    needs to be installed locally ([https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.xhtml](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.xhtml)).
    The CLI makes it easier to interact with the AWS services than the web UI. If
    you have installed it locally, when you run `aws` from your terminal, you will
    see the following output:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个用于与AWS服务交互的AWS工具是CLI，需要本地安装([https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.xhtml](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.xhtml))。CLI比Web
    UI更容易与AWS服务交互。如果您已本地安装，当您从终端运行`aws`时，您将看到以下输出：
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the next section, we will look at how to use some of the features described
    here to deploy our application in AWS.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨如何使用这里描述的一些功能在 AWS 中部署我们的应用程序。
- en: Understanding and using Terraform
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解和使用 Terraform
- en: 'In this section, we will look at another tool that makes it easier for us to
    work with AWS services: Terraform. In the previous section, we learned that AWS
    provides tools of its own, which is great for small tasks, but once you start
    combining the different services it becomes harder to use them.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨另一个使我们可以更轻松地与 AWS 服务一起工作的工具：Terraform。在前一节中，我们了解到 AWS 提供了自己的工具，这对于小任务来说很棒，但一旦开始组合不同的服务，使用起来就变得困难了。
- en: What is Terraform?
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 Terraform？
- en: Terraform ([https://www.terraform.io/](https://www.terraform.io/)) is an open
    source tool that provides **infrastructure as code** (**IaC**). What this means
    is you write code to define what kind of service you want to use and how you want
    to use it, and this way, you can combine and link the different services together
    as a single piece. This makes it easy for you as a developer to run and destroy
    infrastructure as a unit instead of separate fragments.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform ([https://www.terraform.io/](https://www.terraform.io/)) 是一个开源工具，它提供
    **基础设施即代码** (**IaC**)。这意味着您编写代码来定义您想要使用的服务类型以及您想要如何使用它，这样，您就可以将不同的服务组合并链接在一起作为一个单一的整体。这使得作为开发者的您能够作为一个单元运行和销毁基础设施，而不是单独的片段。
- en: The other benefit that Terraform provides is the ability to version control
    the infrastructure code like normal application code, where it goes through the
    normal review process, including the peer review process and also unit testing,
    before deploying the infrastructure to production. With this, your application
    and infrastructure will now go through the same development process, which is
    trackable.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 提供的另一个好处是能够像正常的应用程序代码一样对基础设施代码进行版本控制，在将基础设施部署到生产之前，它将经过正常的审查流程，包括同行评审流程和单元测试。这样，您的应用程序和基础设施现在将经历相同的发展过程，这是可追踪的。
- en: Installing Terraform
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Terraform
- en: 'The Terraform installation process is straightforward: you can find a complete
    set of instructions for your operating system in the HashiCorp documentation at
    [https://www.terraform.io/downloads](https://www.terraform.io/downloads).'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 的安装过程很简单：您可以在 HashiCorp 文档中找到适用于您操作系统的完整指令集，网址为 [https://www.terraform.io/downloads](https://www.terraform.io/downloads)。
- en: 'For example, when writing this book we are using an Ubuntu-based distro, so
    we download the AMD64 binary from [https://releases.hashicorp.com/terraform/1.3.0/terraform_1.3.0_linux_amd64](https://releases.hashicorp.com/terraform/1.3.0/terraform_1.3.0_linux_amd64)`.zip`
    and include the Terraform directory into our `PATH`, as in the following snippet.
    The directory added to the `PATH` variable environment is a temporary solution
    for the terminal that you are using. In order to store it, you need to put it
    as part of your shell script (for Linux, if you are using Bash, you can add this
    to your `.``bashrc` file):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在编写这本书时，我们使用的是基于 Ubuntu 的发行版，因此我们下载了来自 [https://releases.hashicorp.com/terraform/1.3.0/terraform_1.3.0_linux_amd64](https://releases.hashicorp.com/terraform/1.3.0/terraform_1.3.0_linux_amd64)`.zip`
    的 AMD64 二进制文件，并将 Terraform 目录添加到我们的 `PATH` 中，如下面的代码片段所示。添加到 `PATH` 环境变量的目录是用于您所使用的终端的临时解决方案。为了存储它，您需要将其作为您
    shell 脚本的一部分（对于 Linux，如果您使用 Bash，可以将此添加到您的 `.bashrc` 文件中）：
- en: '[PRE1]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To test whether the installation was successful, open the terminal and execute
    `Terraform`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试安装是否成功，请打开终端并执行 `Terraform`：
- en: '[PRE2]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You should get the following output:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到以下输出：
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: For detailed information on how to install Terraform for your environment, see
    [https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli](https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何在您的环境中安装 Terraform 的详细信息，请参阅 [https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli](https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli)。
- en: Now that we have completed the Terraform installation, we will learn how to
    use some of the basic commands available in Terraform. The commands will enable
    you to jumpstart your journey into the world of cloud deployment.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了 Terraform 的安装，我们将学习如何使用 Terraform 中的一些基本命令。这些命令将帮助你快速开始云部署之旅。
- en: Terraform basic commands
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Terraform 基本命令
- en: In this section, we will learn some basic Terraform commands that are often
    used when writing code. We will also examine concepts that are relevant to Terraform.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习一些在编写代码时经常使用的 Terraform 基本命令。我们还将检查与 Terraform 相关的概念。
- en: The init command
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: init 命令
- en: 'Every time we start writing Terraform code, the first command that we run is
    `terraform init`. This command prepares all the necessary dependencies required
    to run the code locally. The command performs the following steps:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我们开始编写Terraform代码时，我们运行的第一条命令是`terraform init`。此命令准备运行代码所需的全部必要依赖项。该命令执行以下步骤：
- en: Downloads all the necessary modules that are used in the code.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载代码中使用的所有必要模块。
- en: Initializes plugins that are used in the code. For example, if the code is deployed
    on AWS it will download the AWS plugins.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化代码中使用的插件。例如，如果代码部署在AWS上，它将下载AWS插件。
- en: Creates a file called a lock file that registers the different dependencies
    and versions that are used by the code.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为锁文件的文件，以注册代码使用的不同依赖项和版本。
- en: 'To gain a better understanding of the previous steps, let’s run the command.
    Open the terminal and change to the `chapter14/simple` directory, and execute
    the following command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解前面的步骤，让我们运行该命令。打开终端并切换到`chapter14/simple`目录，并执行以下命令：
- en: '[PRE4]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You will see an output as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '[PRE5]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once the `init` process is complete, your directory will look like the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`init`过程完成，你的目录将看起来如下所示：
- en: '[PRE6]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `.terraform` directory contains the dependencies that are specified in the
    code. In this example, it uses the `kreuzwerker/docker` plugin, which is used
    to run Docker containers.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`.terraform`目录包含代码中指定的依赖项。在这个例子中，它使用`kreuzwerker/docker`插件，该插件用于运行Docker容器。'
- en: 'The `.terraform.lock.hcl` file contains the version information of the dependencies,
    and it looks like the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`.terraform.lock.hcl`文件包含依赖项的版本信息，其外观如下：'
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The plan command
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计划命令
- en: The `plan` command is used to help us understand the execution plan that Terraform
    will be doing. This is a very important feature as it gives us visibility of what
    changes will be performed to our infrastructure. This will give us a better understanding
    of which parts of the infrastructure will be impacted by the code. Unlike tools
    such as Chef or Ansible, Terraform is interesting in that it will tend towards
    a target state and only make the changes necessary to reach it. For example, if
    you had a target of five EC2 instances but Terraform only knew of three, it would
    take the steps needed to reach that target of five.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`plan`命令用于帮助我们了解Terraform将要执行的执行计划。这是一个非常重要的功能，因为它让我们能够看到将对我们的基础设施执行哪些更改。这将让我们更好地了解代码将影响基础设施的哪些部分。与Chef或Ansible等工具不同，Terraform有趣的地方在于它将趋向于目标状态，并且只进行达到该状态的必要更改。例如，如果你有一个五个EC2实例的目标，但Terraform只知道三个，它将采取达到五个目标的必要步骤。'
- en: 'Open the terminal, change to the `chapter14/simple` directory, and execute
    the following command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端，切换到`chapter14/simple`目录，并执行以下命令：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You will get the following output:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到以下输出：
- en: '[PRE9]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The output shows that there will be `2` things added and `0` operations for
    changing or destroying, which tells us that this is the first time we are running
    the code or it’s still fresh.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示将有`2`项添加，`0`项更改或销毁操作，这告诉我们这是我们第一次运行代码，或者它仍然很新。
- en: The apply command
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用命令
- en: 'The normal process of running Terraform is that after `init`, we run `apply`
    (however, if we are not sure about the impact, we use the `plan` command as shown
    previously). Open the terminal, change to the `chapter14/simple` directory, and
    execute the following command:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 运行Terraform的正常流程是在`init`之后运行`apply`（然而，如果我们不确定影响，我们会使用前面显示的`plan`命令）。打开终端，切换到`chapter14/simple`目录，并执行以下命令：
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You will get the following output:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到以下输出：
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As seen in the output, the `nginx` container will be downloaded (if it does
    not exist as yet) and then run. Once the command is successfully run you can test
    it by opening your browser and accessing http://localhost:8080\. You will see
    something like *Figure 14**.7*.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如输出所示，`nginx`容器将被下载（如果尚未存在）然后运行。一旦命令成功运行，你可以通过打开浏览器并访问http://localhost:8080来测试它。你将看到类似*图14.7*的内容。
- en: '![Figure 14.7: nginx running in a container](img/Figure_14.07_B18295.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图14.7：nginx在容器中运行](img/Figure_14.07_B18295.jpg)'
- en: 'Figure 14.7: nginx running in a container'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.7：nginx在容器中运行
- en: The destroy command
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 销毁命令
- en: The last command that we will look at is `destroy`. As the name implies, it
    is used to destroy the infrastructure that was created using the `apply` command.
    Use this command with caution if you are unsure about the impact of the code on
    your infrastructure. Use the `plan` command before running this to get better
    visibility of what will be removed from the infrastructure.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要查看的最后一个命令是`destroy`。正如其名所示，它用于销毁使用`apply`命令创建的基础设施。如果你不确定代码对你的基础设施的影响，请谨慎使用此命令。在运行此命令之前使用`plan`命令以获得更好的可见性，了解将要从基础设施中移除的内容。
- en: 'Open the terminal and run the following command from the `chapter14/simple`
    directory:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端，从`chapter14/simple`目录运行以下命令：
- en: '[PRE12]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You will get the following output:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到以下输出：
- en: '[PRE13]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the output, we can see that there are `2` infrastructures that are destroyed
    – one is the container removed from memory, and the other is the removal of the
    image from the local Docker registry.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出中，我们可以看到有`2`个基础设施被破坏 – 一个是从内存中移除的容器，另一个是从本地Docker注册表中移除的镜像。
- en: The `–auto-approve` command is used to automatically approve the steps; normally,
    without using this, Terraform will stop execution and ask the user to enter `Yes`
    or `No` to continue at each step. This is a precautionary measure to ensure that
    the user does indeed want to destroy the infrastructure.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`-auto-approve`命令用于自动批准步骤；通常，如果不使用此命令，Terraform将在每个步骤停止执行并要求用户输入`Yes`或`No`以继续。这是一项预防措施，以确保用户确实想要销毁基础设施。'
- en: In the next section, we will look at writing Terraform code and how it uses
    providers. We will look at a few Terraform examples to get an understanding of
    how it works to spin up different AWS infrastructure services for deploying applications.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将查看编写Terraform代码以及它是如何使用提供者的。我们将查看一些Terraform示例，以了解它是如何为部署应用程序启动不同的AWS基础设施服务的。
- en: Coding in Terraform
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Terraform中进行编码
- en: HashiCorp, the creator of Terraform, created **HashiCorp configuration language**
    (**HCL**), which is used in writing Terraform code. HCL is a functional programming
    language with features such as loops, if statements, variables, and logic flow
    that are normally found in programming languages. Complete in-depth HCL documentation
    can be found at [https://www.terraform.io/language/](https://www.terraform.io/language/).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform的创建者HashiCorp创建了**HashiCorp配置语言**（**HCL**），它用于编写Terraform代码。HCL是一种具有循环、if语句、变量和逻辑流程等通常在编程语言中找到的功能的函数式编程语言。完整的HCL文档可以在[https://www.terraform.io/language/](https://www.terraform.io/language/)找到。
- en: Providers
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提供者
- en: 'The reason why Terraform is so widely used is the number of extensions that
    are available from the company and open source communities; these extensions are
    called providers. A provider is a piece of software that interacts with the different
    cloud providers and other resources in the cloud. We will look at Terraform code
    to understand more about providers. The following code snippets can be found inside
    the `chapter14/simple` directory:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform之所以被广泛使用，是因为公司及开源社区提供了大量的扩展；这些扩展被称为提供者。提供者是一段软件，它与其他云提供商和云中的其他资源进行交互。我们将查看Terraform代码，以了解更多关于提供者的信息。以下代码片段可以在`chapter14/simple`目录中找到：
- en: '[PRE14]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `resource` block in the code can be used to declare infrastructure or an
    API. In this example, we are using Docker, specifically, `docker_image` and `docker_container`.
    When Terraform runs the code it detects the `required_providers` block, which
    is used to define a provider. A provider is an external module that the code will
    be using, and this will be automatically downloaded by Terraform from a central
    repository. In our example, the provider that we are using is the `kreuzwerker/docker`
    Docker provider. More information on this provider can be found at the following
    link: [https://registry.terraform.io/providers/kreuzwerker/docker/](https://registry.terraform.io/providers/kreuzwerker/docker/).'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中的`resource`块可以用来声明基础设施或API。在这个例子中，我们使用的是Docker，具体是`docker_image`和`docker_container`。当Terraform运行代码时，它会检测到`required_providers`块，该块用于定义提供者。提供者是一个外部模块，代码将使用它，并且Terraform将从中央仓库自动下载它。在我们的例子中，我们使用的提供者是`kreuzwerker/docker`
    Docker提供者。有关此提供者的更多信息，请参阅以下链接：[https://registry.terraform.io/providers/kreuzwerker/docker/](https://registry.terraform.io/providers/kreuzwerker/docker/)。
- en: 'Open the terminal, make sure you are inside the `chapter14/simple` directory,
    and run the following command:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端，确保你位于`chapter14/simple`目录中，然后运行以下命令：
- en: '[PRE15]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You will see the following output in your terminal:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在终端中看到以下输出：
- en: '[PRE16]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Terraform downloads the provider and stores it inside the `chapter14/simple/.terraform`
    folder. Now, let’s run the sample code and see what we get, by running the following
    command in the same terminal:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 下载提供程序并将其存储在 `chapter14/simple/.terraform` 文件夹中。现在，让我们运行示例代码并查看结果，通过在相同的终端中运行以下命令：
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You will see the following output:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '[PRE18]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Open your browser and go to http://localhost:8000\. You will see something like
    *Figure 14**.7*.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您的浏览器并转到 http://localhost:8000。您将看到类似 *图 14.7* 的内容。
- en: 'Terraform downloads the `nginx` Docker image automatically to your local machine
    and runs the `nginx` container using the port defined in the `ports` code block
    (port `8000`). To destroy the running container and delete the image locally from
    the Docker registry, all you have to do is run the following command:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 自动将 `nginx` Docker 镜像下载到您的本地机器，并使用 `ports` 代码块中定义的端口（端口 `8000`）运行
    `nginx` 容器。要销毁正在运行的容器并从 Docker 仓库中删除镜像，您只需运行以下命令：
- en: '[PRE19]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If you compare the steps involved to do the same thing manually using the Docker
    command, it is more involved and error-prone; writing it in Terraform makes it
    much easier to run and remove containers with a single command.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将手动使用 Docker 命令执行相同操作的步骤进行比较，会发现它更复杂且容易出错；使用 Terraform 编写可以使运行和删除容器通过单个命令变得容易得多。
- en: In the next section, we will explore more examples to better understand how
    to use Terraform for deploying applications.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探索更多示例，以更好地了解如何使用 Terraform 部署应用程序。
- en: Terraform examples
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Terraform 示例
- en: In the following sections, we will look at different ways we can use Terraform,
    such as pulling images from GitHub and running them locally, or building and publishing
    Docker images.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我们将探讨不同的使用 Terraform 的方式，例如从 GitHub 拉取镜像并在本地运行，或者构建和发布 Docker 镜像。
- en: Note
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure every time you run Terraform examples that create AWS resources to
    remember to destroy the resources using the `terraform` `destroy` command.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 确保每次运行创建 AWS 资源的 Terraform 示例时，都要记得使用 `terraform` `destroy` 命令来销毁资源。
- en: All resources created in AWS incur charges, and by destroying them, you will
    ensure there will be no surprise charges.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AWS 中创建的所有资源都会产生费用，通过销毁它们，您将确保不会有意外费用。
- en: Pulling from GitHub Packages
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 GitHub Packages 拉取
- en: 'The example code for this section can be found inside the `chapter14/github`
    folder. The following snippet is from `pullfromgithub.tf`:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的示例代码位于 `chapter14/github` 文件夹中。以下片段来自 `pullfromgithub.tf`：
- en: '[PRE20]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The main objective of the code is to download the Docker image that we built
    in [*Chapter 12*](B18295_12.xhtml#_idTextAnchor241)*, Building Continuous Integration*.
    Once the Docker image is downloaded, it will be run locally. Open your terminal,
    make sure you are inside the `chapter14/github` directory, and run the following
    command:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的主要目标是下载我们在 [*第 12 章*](B18295_12.xhtml#_idTextAnchor241) 中构建的 Docker 镜像，即
    *构建持续集成*。一旦下载了 Docker 镜像，它将在本地运行。打开您的终端，确保您位于 `chapter14/github` 目录中，并运行以下命令：
- en: '[PRE21]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then run the following command:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行以下命令：
- en: '[PRE22]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You will see output in your terminal that looks like the following:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在终端中看到类似以下内容的输出：
- en: '[PRE23]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Open your browser and go to http://localhost:3333\. You will see the login page
    of the sample app.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您的浏览器并转到 http://localhost:3333。您将看到示例应用的登录页面。
- en: The code uses the same `docker` provider that we discussed in the previous section,
    and we use a new `docker_registry_image` command to specify the address to download
    the Docker image from, in this case from the `ghcr.io/nanikjava/golangci/chapter12:latest`
    GitHub package.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 代码使用与上一节中讨论的相同的 `docker` 提供程序，我们使用新的 `docker_registry_image` 命令来指定从哪里下载 Docker
    镜像的地址，在这种情况下是从 `ghcr.io/nanikjava/golangci/chapter12:latest` GitHub 包中下载。
- en: 'The other HCL feature we are using is the `data` block, as shown here:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的另一个 HCL 功能是 `data` 块，如下所示：
- en: '[PRE24]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The `data` block works similarly to `resource`, except it is only used for
    reading values and not creating or destroying resources or to get data that will
    be used internally as configuration to another resource. In our sample, it is
    used by the `docker_image` resource, as shown here:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`data` 块与 `resource` 类似，但它仅用于读取值，而不是创建或销毁资源，或者获取将作为其他资源的内部配置使用的数据。在我们的示例中，它被
    `docker_image` 资源使用，如下所示：'
- en: '[PRE25]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: AWS EC2 setup
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS EC2 设置
- en: In the previous examples, we looked at using the Docker provider to run Docker
    containers locally. In this example, we will look at creating AWS resources, specifically
    EC2 instances. An EC2 instance is basically a virtual machine that can be initialized
    with a certain configuration to run in the cloud to host your application.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，我们探讨了使用Docker提供者本地运行Docker容器。在这个示例中，我们将探讨创建AWS资源，特别是EC2实例。EC2实例基本上是一个虚拟机，可以通过一定的配置初始化，在云中运行以托管您的应用程序。
- en: In order to create resources in AWS, you will first need to already have an
    AWS account. If you don’t have an AWS account, you can create one at [https://aws.amazon.com/](https://aws.amazon.com/).
    Once you have your AWS account ready, log in to the AWS website, and in the main
    console (*Figure 14**.6*) web page, click on your name on the right side and it
    will display a drop-down menu, as shown in *Figure 14**.8*. Then click on **Security
    credentials**.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在AWS中创建资源，您首先需要已经有一个AWS账户。如果您没有AWS账户，您可以在[https://aws.amazon.com/](https://aws.amazon.com/)创建一个。一旦您的AWS账户准备就绪，登录AWS网站，在主控制台（*图14.6*）网页上，点击右侧的您的名字，它将显示一个下拉菜单，如图*图14.8*所示。然后点击**安全凭证**。
- en: '![Figure 14.8: Security credentials option](img/Figure_14.08_B18295.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图14.8：安全凭证选项](img/Figure_14.08_B18295.jpg)'
- en: 'Figure 14.8: Security credentials option'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.8：安全凭证选项
- en: Your browser will now show the **identity and access management** (**IAM**)
    page, as shown in *Figure 14**.9*. Select the **Access keys (access key ID and
    secret access key)** option. Since you haven’t created any key, it will be empty.
    Click on the **Create New Access Key** button and follow the instructions to create
    a new key.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 您的浏览器现在将显示**身份和访问管理**（**IAM**）页面，如图*图14.9*所示。选择**访问密钥（访问密钥ID和秘密访问密钥）**选项。由于您尚未创建任何密钥，因此它将是空的。点击**创建新访问密钥**按钮，按照指示创建一个新的密钥。
- en: '![Figure 14.9: Access keys section](img/Figure_14.09_B18295.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图14.9：访问密钥部分](img/Figure_14.09_B18295.jpg)'
- en: 'Figure 14.9: Access keys section'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.9：访问密钥部分
- en: Once you complete the steps you will get two keys – an Access Key ID and Secret
    Access Key. Keep these keys safe as they are used like a username and password
    combination you use to create resources in AWS infrastructure.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 完成步骤后，您将获得两个密钥——访问密钥ID和秘密访问密钥。请妥善保管这些密钥，因为它们就像您用于在AWS基础设施中创建资源的用户名和密码组合一样。
- en: 'Now that you have the keys required, you can now open a terminal and change
    into the `chapter14/simpleec2` directory, and run the example as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经拥有了所需的密钥，您现在可以打开一个终端，切换到`chapter14/simpleec2`目录，并按照以下方式运行示例：
- en: '[PRE26]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next, run the following command to create the EC2 instance:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，运行以下命令创建EC2实例：
- en: '[PRE27]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Once completed you will see the output as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您将看到以下输出：
- en: '[PRE28]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The output shows three resources were created – the AWS instance (EC2), an
    IP subnet, and a network VPC. Now, let’s take a look at the code (the complete
    code can be seen inside the `chapter14/simpleec2` directory). The code requires
    your AWS keys, storing them inside the `variable` block as `aws_access_key` and
    `aws_secret_key`:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果显示创建了三个资源——AWS实例（EC2）、一个IP子网和VPC网络。现在，让我们看一下代码（完整的代码可以在`chapter14/simpleec2`目录中查看）。该代码需要您的AWS密钥，将它们存储在`variable`块中，分别命名为`aws_access_key`和`aws_secret_key`：
- en: '[PRE29]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The keys will be passed to the `aws` provider to enable the provider to communicate
    with the AWS service using our keys.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这些密钥将被传递给`aws`提供者，以便提供者可以使用我们的密钥与AWS服务进行通信。
- en: 'The following part of the code creates the VPC and IP subnet, which will be
    used as a private network by EC2 instances:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码部分创建VPC和IP子网，这些子网将被EC2实例用作私有网络：
- en: '[PRE30]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The last resource the code defines is the EC2 instance, as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 代码定义的最后一个资源是EC2实例，如下所示：
- en: '[PRE31]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The EC2 instance type is `t2.nano`, which is the smallest virtual machine that
    can be configured. It is linked to the IP subnet defined earlier by assigning
    the subnet ID to the `subnet_id` parameter.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: EC2实例类型是`t2.nano`，这是可以配置的最小虚拟机。它通过将子网ID分配给`subnet_id`参数，与之前定义的IP子网相连接。
- en: Deploying to ECS with a load balancer
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用负载均衡器部署到ECS
- en: The last example that we are going to look at is using AWS ECS. The source code
    can be found inside the `chapter14/lbecs` directory. The code will use ECS to
    deploy our [*Chapter 12*](B18295_12.xhtml#_idTextAnchor241) container hosted in
    GitHub Packages and made scalable by using a load balancer. *Figure 14**.9* shows
    the infrastructure configuration after running the code.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要查看的最后一个示例是使用 AWS ECS。源代码可以在 `chapter14/lbecs` 目录中找到。代码将使用 ECS 来部署我们托管在 GitHub
    Packages 中的 [*第 12 章*](B18295_12.xhtml#_idTextAnchor241) 容器，并通过使用负载均衡器使其可扩展。*图
    14.9* 展示了运行代码后的基础设施配置。
- en: '![Figure 14.10: ECS with a load balancer](img/Figure_14.10_B18295.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.10：带有负载均衡器的 ECS](img/Figure_14.10_B18295.jpg)'
- en: 'Figure 14.10: ECS with a load balancer'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.10：带有负载均衡器的 ECS
- en: 'The code uses the following services:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 代码使用了以下服务：
- en: '**An internet gateway**: As the name implies, this is a gateway that enables
    communication to be established between the AWS VPC private network and the internet.
    With the help of the gateway, we open our application to the world.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**互联网网关**：正如其名所示，这是一个网关，它允许在 AWS VPC 私有网络和互联网之间建立通信。借助网关，我们将我们的应用程序向世界开放。'
- en: '**A load balancer**: This service helps balance the incoming traffic across
    the different networks configured, ensuring that the application can take care
    of all incoming requests.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载均衡器**：这项服务帮助在不同配置的网络之间平衡传入流量，确保应用程序可以处理所有传入请求。'
- en: ECS provides the capability to scale the deployment process for containers.
    This means that, as developers, we don’t have to worry about how to scale the
    containers that are running our application, as this is all taken care of by ECS.
    More in-depth information can be found at [https://aws.amazon.com/ecs/](https://aws.amazon.com/ecs/).
    The application is run the same way as in the previous examples, using the `terraform
    init` and `terraform` `apply` commands.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: ECS 提供了扩展容器部署过程的能力。这意味着作为开发者，我们不必担心如何扩展运行我们应用程序的容器，因为这一切都由 ECS 来处理。更深入的信息可以在
    [https://aws.amazon.com/ecs/](https://aws.amazon.com/ecs/) 找到。应用程序的运行方式与之前的示例相同，使用
    `terraform init` 和 `terraform apply` 命令。
- en: Note
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The ECS example takes a bit longer to execute compared to the other examples.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他示例相比，ECS 示例的执行时间要长一些。
- en: 'You will get output that looks like the following:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到如下所示的输出：
- en: '[PRE32]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Let’s break down the code to see how it uses ECS and configures the internet
    gateway, load balancer, and network. The following code shows the internet gateway
    declaration, which is simple enough as it requires to be attached to a VPC:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解代码，看看它是如何使用 ECS 以及如何配置互联网网关、负载均衡器和网络的。以下代码显示了互联网网关的声明，这很简单，因为它需要连接到 VPC：
- en: '[PRE33]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Besides that, the gateway will also be attached to a routing table declared
    inside the `aws_default_route_table` block. This is necessary as this tells the
    gateway how to route the incoming and outgoing traffic through the internal private
    VPC network.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，网关还将连接到在 `aws_default_route_table` 块内声明的路由表。这是必要的，因为它告诉网关如何通过内部私有 VPC 网络路由传入和传出的流量。
- en: 'Now that our internal private network can communicate to the internet via a
    gateway, we need to have network rules in place to ensure our network is secure,
    and this is done in the following code:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们内部的私有网络可以通过网关与互联网通信，我们需要设置网络规则以确保我们的网络安全，这将在以下代码中完成：
- en: '[PRE34]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The `egress` block declares the rule for outgoing network traffic, allowing
    all protocols to pass through. The incoming network traffic rule is declared in
    the `ingress` block, and allows ports between `80`-`3333` and only over TCP.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`egress` 块声明了出站网络流量的规则，允许所有协议通过。入站网络流量规则在 `ingress` 块中声明，并允许 `80`-`3333` 端口之间的通信，并且仅通过
    TCP。'
- en: 'Using a load balancer requires two different subnets to be declared. In our
    code example, this is as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 使用负载均衡器需要声明两个不同的子网。在我们的代码示例中，如下所示：
- en: '[PRE35]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The last piece of code that we will look at is the ECS block, as follows:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要查看的最后一段代码是 ECS 块，如下所示：
- en: '[PRE36]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The preceding code contains three different code blocks that are explained
    as follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码包含三个不同的代码块，具体解释如下：
- en: '`aws_ecs_cluster`: This block configures the name of the ECS cluster'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aws_ecs_cluster`：此块配置 ECS 集群的名称'
- en: '`aws_ecs_task_definition`: This block configures the ECS task, which specifies
    what kind of container it has to run, the virtual machine configuration that the
    container will be running on, the network mode, security group, and other options'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aws_ecs_task_definition`：此块配置ECS任务，指定它必须运行的容器类型、容器将运行的虚拟机配置、网络模式、安全组以及其他选项'
- en: '`aws_ecs_service`: This block ties together the different services to describe
    the complete infrastructure that will be run, such as security, ECS task, network
    configuration, load balancers, public IP address, and more'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aws_ecs_service`：此块将不同的服务连接起来，以描述将要运行的完整基础设施，例如安全、ECS任务、网络配置、负载均衡器、公网IP地址等'
- en: 'Once ECS has been spun up, it will print out in your console the load-balanced
    public address you can use to access the application. For example, when it was
    run, we got the following output in the terminal:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦ECS启动，它将在您的控制台中打印出您可以使用以访问应用程序的负载均衡器公网地址。例如，当它运行时，我们在终端中得到了以下输出：
- en: '[PRE37]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Using the `load-balancer-375816308.us-east-1.elb.amazonaws.com` address in the
    browser will show the application login page. This address is dynamically generated
    by AWS, and you will get something different than what is shown in the previous
    output.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 使用浏览器中的`load-balancer-375816308.us-east-1.elb.amazonaws.com`地址将显示应用程序登录页面。此地址由AWS动态生成，您将得到与之前输出中显示的内容不同的内容。
- en: Summary
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored cloud solutions provided by AWS, and we briefly
    looked at the different services offered, such as EC2, VPC, storage, and others.
    We learned about the open source Terraform tools that make it easy to create,
    manage, and destroy cloud infrastructure in AWS.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了AWS提供的云解决方案，并简要了解了提供的服务，如EC2、VPC、存储等。我们了解了开源的Terraform工具，它使得在AWS中创建、管理和销毁云基础设施变得容易。
- en: We learned how to install and use Terraform locally, and how to write Terraform
    code to use Docker as a provider, allowing us to run containers locally. Terraform
    also allows us to download, run, and destroy containers locally with a single
    command.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何在本地安装和使用Terraform，以及如何编写Terraform代码以使用Docker作为提供者，使我们能够在本地运行容器。Terraform还允许我们使用单个命令在本地下载、运行和销毁容器。
- en: We also explored different Terraform examples for creating AWS infrastructure
    resources and looked at one of the advanced features of AWS ECS.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还探讨了创建AWS基础设施资源的不同Terraform示例，并查看AWS ECS的一个高级功能。
- en: In this last chapter of the book, you have learned the different things that
    need to be done to deploy an application to the AWS cloud.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的最后一章，您学习了将应用程序部署到AWS云所需执行的不同操作。
