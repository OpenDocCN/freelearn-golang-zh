- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go is a multi-paradigm programming language. This means that both the object-oriented
    paradigm and the functional paradigm are entirely valid approaches to problem
    solving. In this book, we will explore the applications of functional programming
    techniques in Go. But rather than being purely focused on the functional aspect,
    we will embrace Go for what it is – multi-paradigm. This means that we highlight
    the difference between the functional and object-oriented ways of problem solving.
  prefs: []
  type: TYPE_NORMAL
- en: To write Go code that is more testable, readable, and reliable, we will look
    at functional-first approaches such as functions as first-class citizens, function
    purity, currying, and more. We will look not only at how to write functional code,
    but we will also explore the performance implications and limitations of Go.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this book is to get the reader accustomed to functional programming
    as a valid paradigm that can improve your code, no matter whether you’re working
    on a greenfield project or a project already entrenched in the OO paradigm.
  prefs: []
  type: TYPE_NORMAL
- en: For readers unfamiliar with the newly introduced generics in Go, this book also
    serves as an example of what’s possible now that generics are part of the standard
    library. Finally, we will also look at libraries that can be leveraged to write
    functional code for both pre-generic and post-generic versions of Go.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are a Go engineer with a background in traditionally object-oriented
    languages such as Java or C++ who wants to broaden your knowledge of functional
    programming, this book is for you. The book aims to teach you how concepts from
    functional programming can improve your existing Go code, as well as when to choose
    the functional approach. At each step, we highlight the trade-offs between the
    functional and object-oriented approaches to see how they compare.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 1*](B18771_01.xhtml#_idTextAnchor015), *Introducing Functional
    Programming*, we are going to take a bird’s eye view of the *what* and *why* behind
    functional programming. To start, we will take a brief look at the history and
    contemporary state of functional programming methodologies. Then we will take
    a look at how functional programming compares to the more traditional object-oriented
    programming.
  prefs: []
  type: TYPE_NORMAL
- en: In[*Chapter 2*](B18771_02.xhtml#_idTextAnchor028), *Treating Functions as First-Class
    Citizens*, we are going to cover exactly why functions are powerful in languages
    that treat them as **first-class citizens**. Go has functions as first-class citizens
    out of the box, meaning we get this functionality. We are going to see how this
    allows us to create function-centered constructs that improve the readability
    and testability of our code.
  prefs: []
  type: TYPE_NORMAL
- en: In[*Chapter 3*](B18771_03.xhtml#_idTextAnchor047), *Higher-Order Functions*,
    we are going to explore the concept of function composition through higher-order
    functions. There are a variety of new concepts that are introduced here, such
    as closures, partial application, and function currying. We will take a look at
    some practical examples and real-world use cases for these.
  prefs: []
  type: TYPE_NORMAL
- en: In[*Chapter 4*](B18771_04.xhtml#_idTextAnchor060), *Write Testable Code with
    Pure Functions*, we will take a look at what it means for a language, and a function,
    to be considered pure. We will take a look at some of the tradeoffs between function
    purity and impurity, and explore how pure functions help us write testable code.
  prefs: []
  type: TYPE_NORMAL
- en: In[*Chapter 5*](B18771_05.xhtml#_idTextAnchor085), *Immutability*, we cover
    what exactly it means to be immutable, and how the Go language can help preserve
    immutability at the struct level. To understand how this works, we will look at
    how Go handles pointers and references to objects, what the performance implications
    are, and how to decide between the pointer-reference trade-offs. We will also
    dive into the implications for garbage collection, unit testing, and pure functional
    programming.
  prefs: []
  type: TYPE_NORMAL
- en: In[*Chapter 6*](B18771_06.xhtml#_idTextAnchor101), *Three Common Categories
    of Functions*, we are going to look at some practical implementations of functions
    that leverage the concepts of functional programming covered up to now. We will
    build Filter functions, Map functions and Reducers.
  prefs: []
  type: TYPE_NORMAL
- en: In[*Chapter 7*](B18771_07.xhtml#_idTextAnchor113), *Recursion*, we are going
    to talk about recursion. This is a topic that all programmers encounter sooner
    or later, as it’s not exclusive to the functional paradigm. Any language in which
    you can express function calls also allows you to express functions that are recursive
    in nature. But in functional languages, these take center stage. We will look
    at the implications for this in Go.
  prefs: []
  type: TYPE_NORMAL
- en: In[*Chapter 8*](B18771_08.xhtml#_idTextAnchor126), *Readable Function Composition
    with Fluent Programming,* we are going to look at different methods for chaining
    functions in functional programming. The end goal here is to write code that is
    easier to read and creates less visual clutter. We will look at three ways for
    achieving this. First, we will take a look at how we can use type aliases to attach
    methods to container types, allowing us to create chained functions with the familiar
    *dot notation*. Next, we will look at continuation-passing style programming and
    consider the trade-offs of each approach.
  prefs: []
  type: TYPE_NORMAL
- en: In[*Chapter 9*](B18771_09.xhtml#_idTextAnchor138), *Functional Design Patterns*,
    we will move to a higher level of abstraction. Rather than talking about individual
    functions and operations, we will look at design patterns. While we will not extensively
    explain each design pattern, we will take a look at how the object-oriented pattern
    translates to the functional world.
  prefs: []
  type: TYPE_NORMAL
- en: In[*Chapter 10*](B18771_10.xhtml#_idTextAnchor147), *Concurrency and Functional
    Programming*, we consider how concurrency is all around us, both in the real world
    as well as the virtual one. In this chapter we will start by looking at concurrency,
    parallelism, and distributed computation. Next, we will focus on how the concurrency
    mechanisms in Go can help us write functional code.
  prefs: []
  type: TYPE_NORMAL
- en: In[*Chapter 11*](B18771_11.xhtml#_idTextAnchor158)*, Functional Programming
    Libraries*, we will explore several libraries that can help us build programs
    in the functional paradigm. We will look both at pre-generic libraries and post-generic
    libraries.
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Prior to picking up this book, the reader should be familiar with Go and generics.
    The basic concepts of the programming language (control flow, structs, and imports),
    how to build and run applications, and how to import open source libraries from
    GitHub should also be understood by the reader.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Software/hardware covered in** **the book** | **Operating** **system requirements**
    |'
  prefs: []
  type: TYPE_TB
- en: '| Go (pre- and post-generics) | Windows, macOS, or Linux |'
  prefs: []
  type: TYPE_TB
- en: Having Go 1.18 or later installed is a prerequisite for the majority of this
    book. Certain chapters will also work on Go version’s prior to 1.18, this will
    be called out per chapter. Most of the code will also work in the Go playground
    at[https://go.dev/play/](https://go.dev/play/).
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code from the book’s GitHub repository (a link
    is available in the next section). Doing so will help you avoid any potential
    errors related to the copying and pasting** **of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Some chapters will have snippets in Haskell and Java for illustrative purposes
    of (pure) functional and object-oriented counterparts* *to Go.*'
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/Functional-Programming-in-Go](https://github.com/PacktPublishing/Functional-Programming-in-Go).
    If there’s an update to the code, it will be updated in the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots and diagrams
    used in this book. You can download it here: [https://packt.link/5tPDg](https://packt.link/5tPDg).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: “When calling the `rollDice` function, the output
    is not consistent. If it were consistently outputting the same number, it would
    be a pretty bad randomization function.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For instance, words in menus or dialog boxes appear in **bold**. Here is an example:
    “In this main function, we are first defining a **deferred** function that runs
    at the end of main function, just before function exit.”'
  prefs: []
  type: TYPE_NORMAL
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '`customercare@packtpub.com` and mention the book title in the subject of your
    message.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  prefs: []
  type: TYPE_NORMAL
- en: '`copyright@packt.com` with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '`authors.packtpub.com`.'
  prefs: []
  type: TYPE_NORMAL
- en: Share your thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’ve read *Functional Programming in Golang*, we’d love to hear your
    thoughts! Please [click here to go straight to the Amazon review page](https://packt.link/r/9781803238012)
    for this book and share your feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
- en: Download a free PDF copy of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for purchasing this book!
  prefs: []
  type: TYPE_NORMAL
- en: Do you like to read on the go but are unable to carry your print books everywhere?
  prefs: []
  type: TYPE_NORMAL
- en: Is your eBook purchase not compatible with the device of your choice?
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry, now with every Packt book you get a DRM-free PDF version of that
    book at no cost.
  prefs: []
  type: TYPE_NORMAL
- en: Read anywhere, any place, on any device. Search, copy, and paste code from your
    favorite technical books directly into your application.
  prefs: []
  type: TYPE_NORMAL
- en: The perks don’t stop there, you can get exclusive access to discounts, newsletters,
    and great free content in your inbox daily
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these simple steps to get the benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Scan the QR code or visit the link below
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18771_QR_Free_PDF.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[https://packt.link/free-ebook/9781801811163](https://packt.link/free-ebook/9781801811163)'
  prefs: []
  type: TYPE_NORMAL
- en: Submit your proof of purchase
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s it! We’ll send your free PDF and other benefits to your email directly
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Part 1: Functional Programming Paradigm Essentials'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, we will take a look at what the functional programming paradigm
    entails. We’ll look at how it compares to the traditional object-oriented approach,
    and learn some language design differences between programming languages in each
    paradigm. We’ll also discuss what it means for Go to be a multi-paradigm language
    and see how this benefits our use case. Finally, we’ll look at some key ideas
    in functional programming, which we can leverage to write more readable, maintainable,
    and testable code.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B18771_01.xhtml#_idTextAnchor015), *Introducing Functional Programming*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B18771_02.xhtml#_idTextAnchor028), *Treating Functions as First-Class
    Citizens*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B18771_03.xhtml#_idTextAnchor047)*, Higher-Order Functions*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B18771_04.xhtml#_idTextAnchor060)*, Write Testable Code with
    Pure Functions*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B18771_05.xhtml#_idTextAnchor085)*, Immutability*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
