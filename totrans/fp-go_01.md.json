["```go\npackage main\nimport “fmt”\ntype predicate func(int) bool\nfunc main() {\n    is := []int{1, 1, 2, 3, 5, 8, 13}\n    larger := filter(is, largerThan5)\n    fmt.Printf(“%v”, larger)\n}\nfunc filter(is []int, condition predicate) []int {\n    out := []int{}\n    for _, i := range is {\n        if condition(i) {\n            out = append(out, i)\n        }\n    }\n    return out\n}\nfunc largerThan5(i int) bool {\n    return i > 5\n}\n```", "```go\ntype predicate func(int) bool\n```", "```go\nfunc filter(is []int, condition predicate) []int {…}\n```", "```go\nlarger := filter(is, largerThan5)\n```", "```go\ntype Person struct {\n    Age  int\n    Name string\n}\n```", "```go\nfunc changeName(p *Person, newName string) {\n    p.Name = newName\n}\n```", "```go\nfunc changeNamePure(p Person, newName string) Person {\n    return Person{\n        Age:  p.Age,\n        Name: newName,\n    }\n}\n```", "```go\nfunc DeclarativeFunction() int {\n    return IntRange(-10,10).\n        Abs().\n        Filter(func(i int64) bool {\n            return i % 2 == 0\n        }).\n        Sum()\n    // result = 60 \n}\n```", "```go\nfunc iterativeFunction() int {     \n    sum := 0\n    for i := -10; i <= 10; i++ {\n        absolute := int(math.Abs(float64(i)))\n        if absolute%2 == 0 {\n            sum += absolute\n        }\n    }    \n    return sum\n}\n```", "```go\nfun fac 0 = 1\n  | fac n = n * fac (n – 1)\n```", "```go\nsquares = [ n*n | n <- [0..] ]\n```", "```go\npackage main\nimport “fmt”\nfunc main() {\n     fmt.Println(“Hello Reader!”)    \n}\n```"]