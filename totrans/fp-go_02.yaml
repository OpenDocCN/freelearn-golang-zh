- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Treating Functions as First-Class Citizens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we established in the previous chapter, the core part of our functional programs
    will be functions. In this chapter, we are going to cover exactly why functions
    are powerful in languages that treat them as **first-class citizens**. Go has
    functions as first-class citizens out of the box, meaning we get this functionality
    by default. More and more languages are choosing this approach. In this chapter,
    we are going to see how this will allow us to create interesting constructs, which
    will improve the readability and test ability of our code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Concretely, we are going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of first-class functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining types for functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using functions like objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anonymous functions versus named functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing functions in data types or structs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a function dispatcher using all the previous
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All the examples for this chapter can be found at [https://github.com/PacktPublishing/Functional-Programming-in-Go./tree/main/Chapter2](https://github.com/PacktPublishing/Functional-Programming-in-Go./tree/main/Chapter2).
    For this example, any Go version will work
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of first-class functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we talk about “first-class functions,” let’s first define what it means
    for anything to be called “first-class” in programming language design. When we
    talk about a “first-class citizen,” we mean an entity (object, primitive, or function)
    for which all the common language operations are available. These are operations
    such as assignment, passing it to a function, returning from a function, or storing
    it in another data type such as a map.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at this list, we can see how all of those operations typically apply
    to the structs that we are defining in our language. Objects and primitives can
    be passed around between functions. They are often returned as the results of
    a function and we definitely assign them to variables. When we say that functions
    are first-class citizens, you can simply think of this as treating functions like
    objects. Their equivalence will help us create all future constructs in this book.
    They will lead to improved *testability*, such as by allowing us to mock functions
    of a struct, and improved *readability*, such as by removing large switch cases
    for a single function dispatcher.
  prefs: []
  type: TYPE_NORMAL
- en: Defining types for functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go is a statically typed language. Although, we don’t have to spell out the
    type for each assignment – the types are there under the hood. It is effectively
    the compiler taking care of this for us. When we work with functions in Go, they
    are also implicitly assigned a type. While defining a type for a function in the
    way a compiler does it is a difficult task, we can use the concept of function
    aliases to add type safety to our code base.
  prefs: []
  type: TYPE_NORMAL
- en: When working with functions throughout the rest of this book, we will often
    use **type aliases**. This will help the compiler provide more readable error
    messages, and also makes our code more readable in general. Type aliases are,
    however, not just useful in the context of functions. They are a great feature
    of Go that is not too often used. It’s also a feature that you won’t easily find
    in other mainstream languages. So let’s take a dive into what type aliases are.
  prefs: []
  type: TYPE_NORMAL
- en: In essence, a type alias does just what it says on the tin; it creates an alias
    for a type. It's similar to how in Unix systems you would create an alias for
    a command. It helps us create a new type that has all the same properties as the
    original type. One reason why we might want to do this is for readability, as
    we will see when creating aliases for functions. Another reason is to communicate
    our intent more clearly when we write code. For example, we could use our type
    system to define `CountryID` and `CityID` as an alias for `String`. Although both
    types are a string under the hood, they cannot be used interchangeably in code.
    Thus they communicate to the reader what the actual expected value is.
  prefs: []
  type: TYPE_NORMAL
- en: Type aliases for primitives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A common pattern to see in object-oriented languages is that the OO languages
    turn into `Person` struct, and we want to set a phone number on this struct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this example, which is heavily influenced by Java, we are creating a “setter-like”
    function that takes `phonenumber` as a string input and updates our object accordingly.
    If you are using an IDE that provides type hints for functions you are calling,
    it will just tell you that the `setPhoneNumberfunction` expects a string, which
    means any string is valid. Now, if we had a type alias, we could make that hint
    more useful.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let’s make some changes and use a type alias for `phoneNumber`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: By making this change, our type is now communicating more clearly with what
    our intent is, and with none of the overhead of creating a new struct just to
    model a phone number. We can do this, as a phone number can be thought of as essentially
    a string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using this, because a type alias is equivalent to the underlying type, is as
    easy as using a real string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay, great. So we have a name, which is just a string, and `phonenumber`,
    which is a `phoneNumber` type, which is equal to a string. So where does the benefit
    come from? Well, part of it is gained in communicating intent. Code is read by
    many more people than the original author, so we want to be as clear as possible
    in our code. The other part is in the error messages. Using type aliases, error
    messages will tell us explicitly what was expected rather than just saying a string
    was expected. Let’s create a function that can update both `name` and `phonenumber`,
    and let’s first use `string` for both:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'What happens when we try to compile our code? Well, we will get the following
    error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In this simple example, it doesn’t do much. But as your code base expands, this
    ensures that all developers are thinking about the type that should be passed
    into a function. This lowers the risk of errors by passing invalid data to a function.
    An additional benefit, depending on the IDE, is that your IDE will also show you
    the signature. If you had a large function that takes five different types of
    string, your IDE might just show you *function expects input (string, string,
    string, string, string)*, with no clear order in which arguments need to be passed.
    If each string is a distinct type, this might become *name, phonenumber, email,
    street, country*. Especially in a language such as Go, where single-letter variable
    names are often used, this can create readability benefits.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make our code work, we just have to make a small change to the function
    signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This is an easy fix and amounts to just a small change, but doing it consistently
    makes your code convey more meaning just with the type system. In the end, types
    are there to convey meaning to other readers as well as the compiler.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at another benefit of type aliases. Let’s add an `age` field
    to our struct with its own type alias:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'One thing that we cannot do with primitive types in Go such as `uint` is to
    attach functions to them. When we assign a type alias, however, that restriction
    is gone. Hence, now we can attach functions to the `age` type, which really is
    just attaching a function to `uint`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we are creating a `valid` function, which is bound to
    the `age` type. In other functions, we can now call the `valid()` function on
    this type with the familiar dot notation. This example is a bit trivial, but it’s
    something that would not work on a primitive type.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we tried to attach a function to a primitive, we would not be able to compile
    our program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This throws the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This alone makes type aliases quite powerful. It also means you can now extend
    types that are not created by you in your code base. You might be working with
    an external library that exposes a struct, but you want to add your own functionality
    to it. One way of doing that is by creating a type alias and extending it with
    your own functionality. While diving into this example is too in-depth for what
    we’re exploring in this chapter, suffice it to say that type aliases are a powerful
    construct.
  prefs: []
  type: TYPE_NORMAL
- en: Type aliases for functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As a function is a *first-class citizen* in Go, we can work with them like we
    would with any other data type. Thus, just as we can create a type alias for a
    variable or a struct, we can also create a type alias for a function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Why might we want to do this? The main benefit for the reader of our code will
    be the clarity and readability it creates. Look at the following piece of code
    for a `filter` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This function is a good example of using functions as first-class citizens.
    Here, the `predicate` function is a function that is passed to the `filter` function.
    It is passed around in the same way in which we would typically pass around objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to clean up this function signature, we can introduce a type alias
    and rewrite the filter function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Here, you can see that the second argument now takes the `predicate` type. The
    compiler will translate this type to `func(int) bool`, but we can just write `predicate`
    throughout our code base.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another benefit of introducing a type alias is that our error messages become
    more readable. Let’s imagine we pass a function to `filter` that does not adhere
    to the `predicate` type declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Without a type alias, the error message reads as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'That’s an error message that, while being quite explicit, is quite verbose
    to read. With the type alias, the message will tell us what type of function we
    expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Using functions as objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding section, we saw how to create type aliases to make our code
    more readable when dealing with functions. In this section, let’s take a brief
    look at how functions can be used in the same way as objects. This is the essence
    of what it means to be *first-class*.
  prefs: []
  type: TYPE_NORMAL
- en: Passing functions to functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can pass functions to functions as in the preceding filter function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we have created the `largerThanTwo` function, which adheres
    to the `predicate` type alias. Note that we don’t have to specify anywhere that
    this function adheres to our `predicate` type; the compiler will figure this out
    during compile time, just like it does for regular variables. Next, we have created
    a `filter` function, which expects both a slice of `ints` as well as a `predicate`
    function. In our `main` function, we create a slice of `ints` and call the `filter`
    function with the `largerThanTwo` function as the second parameter.
  prefs: []
  type: TYPE_NORMAL
- en: In-line function definitions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We don’t have to create functions such as `largerThanTwo` in the package scope.
    We can create functions inline, in the same way in which we can create structs
    inline:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The `inlinePersonStruct` is shown in this code as an example of how the inline
    function compares to the inline struct definition. The code won’t actually compile
    with this struct present as it’s not used in the rest of our `main` function.
  prefs: []
  type: TYPE_NORMAL
- en: Anonymous functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can also create functions on the fly where they are needed. These are called
    *anonymous* functions as they don’t have a name assigned to them. Continuing with
    our `filter` function, the anonymous function version of a `largerThanTwo` predicate
    would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we are both creating a slice of integers as well as
    the predicate function inline. Neither of them is named. The slice cannot be referenced
    anywhere else in that `main` function and neither can the function. While function
    definitions like these tend to make our code more verbose and can hinder readability,
    we will see applications of them in [*Chapter 3*](B18771_03.xhtml#_idTextAnchor047)
    and [*Chapter 4*](B18771_04.xhtml#_idTextAnchor060).
  prefs: []
  type: TYPE_NORMAL
- en: Returning functions from functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A core concept of any programming language is returning a value from a function.
    As a function is treated just like a regular object, we can return a function
    from a function.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the earlier examples, our predicate `largerThanTwo` function always checked
    whether or not an integer was larger than two. Now, let’s create a function that
    can generate such predicate functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we have created a `createLargerThanPredicate` function, which
    returns a `predicate`. Remember that the type `predicate` is just a type alias
    for a function that takes an integer as input and returns a bool as output. Next,
    we define the function that we are returning in the function body.
  prefs: []
  type: TYPE_NORMAL
- en: 'The function we are returning follows the type signature of `predicate`, and
    it returns true if `i` is larger than `threshold`. Notice that the `i` function
    is not passed to the `createLargerThanPredicate` function itself. We have defined
    that inline. When we call the `createLargerThanPredicate` function, we don’t get
    the outcome of the predicate function, but rather we get a new function that follows
    the inner signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Here, in the `main` function, we first call the `createLargerThanPredicate(2)`
    function. This returns a new `func(i int) bool` function. The `2` here refers
    to the `threshold` parameter, not the `i` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: On the next line, we can once again call the `filter` function with the newly
    created `largerThanTwo` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returning functions from functions will be a core concept when we dive into
    more advanced topics such as *continuation-passing style* programming and function
    currying. For now, the main takeaway is that this allows us to create customizable
    functions on the fly. For example, we could create a series of “larger than” predicates
    each with its own threshold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Notice that this example won’t compile, as we’re not using the functions anywhere
    in the remainder of the `main` block. But this shows us how we can essentially
    “spawn” functions with one parameter fixed. Instead of creating these functions
    inside function blocks, we can move them up to the package-specific `var` block.
  prefs: []
  type: TYPE_NORMAL
- en: Functions in var
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Continuing the preceding example, we can create a series of functions that
    can be used throughout our package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'These “function factories” allow us to create some customized functions throughout
    our code. One thing to note here is that this will work inside `var` blocks, but
    will not compile if we move these to a `const` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This will generate the following errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Our functions are not considered “constants” from a package perspective.
  prefs: []
  type: TYPE_NORMAL
- en: Functions inside data structures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we have been creating a bunch of functions that were either defined
    at the top-level `var` block or inline inside a function. What if we want to store
    our function somewhere in the runtime memory of our application?
  prefs: []
  type: TYPE_NORMAL
- en: Well, just like we can store primitives and structs inside our runtime memory,
    we can store functions there as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start off by storing our `largerThan` predicates in an array. We’ll move
    the predicate declarations back to the `var` block and pass them to a `filter`
    function in our `main` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we have created a “slice of predicates.” The type
    would be `[]predicate`, and as part of the declaration, we have also pushed the
    three predicates we created earlier to this slice. After this line, the slice
    contains a reference to the three functions: `largerThanTwo`, `largerThanFive`,
    and `largerThanHundred`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have created this slice, we can iterate over it just like any regular
    slice. When we write `for _, predicate := range predicates`, the value of `predicate`
    takes on the value of each function we stored in the slice, sequentially. Thus,
    when we print the output of our filter function for each subsequent iteration,
    we get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In the first iteration, `predicate` refers to the `largerThanTwofunction`; in
    the second iteration, it becomes `largerThanFive`, and finally becomes `largerThanHundred`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we can store functions inside a map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we create a map that stores predicates and associates the
    predicate function with a string as the key. We can then call the `filter` function
    and ask the map to return the function associated with the `"2"` key. This returns
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This pattern is quite powerful, which we’ll explore later in this chapter, in
    *Example 1*.
  prefs: []
  type: TYPE_NORMAL
- en: Before we dive into that example, let’s take a look at storing functions inside
    structs.
  prefs: []
  type: TYPE_NORMAL
- en: Functions inside structs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By now, it should come as no surprise that wherever we can use a data type,
    a function can play that role. Let’s see how this plays out for structs. Let’s
    create a struct called `ConstraintChecker`, which checks whether or not a value
    is in between two values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start off by defining our struct. The `ConstraintChecker` struct has
    two fields. Each field is a function of type `predicate`. The first function is
    `largerThan` and the second is `smallerThan`. These are the boundaries between
    which the input number should lie:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we create a method for this struct. The `check` method takes an integer
    input and passes this on to the `largerThan` and `smallerThan` functions, respectively.
    As both predicate functions return a bool, we simply check that the input returns
    true for both these functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our struct and our method created, let’s take a look at how
    we would use this struct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: In our main function, we first instantiate the functions. Note that we can create
    the `ConstraintChecker` struct both by providing an existing function, as we have
    done for `largerThan`, as well as by using an anonymous function as is the case
    for the `smallerThan` field.
  prefs: []
  type: TYPE_NORMAL
- en: This shows how a struct can store functions, and how these functions can be
    treated just like any other field in the struct. In essence, we could treat each
    function that is **bound** to a struct as a function that is a **field** of the
    struct. There are advantages to passing functions as a field versus binding it,
    which we will explore in more detail later, in *Example 2* in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The main difference is that a function that is bound is essentially constant
    – the implementation does not change. Whereas a function passed to a field is
    entirely flexible. The actual implementation is unknown to our struct. We’ll explore
    in more detail how this allows us to mock functions for testing in *Example 2*.
  prefs: []
  type: TYPE_NORMAL
- en: Example 1 – map dispatcher
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One pattern that is enabled by these types of first-class functions is the “map
    dispatcher pattern.” This is a pattern where we use a map of “key to function.”
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple calculator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this first example, let’s build a really simple calculator. This is just
    to demonstrate the idea of dispatching functions based on a certain input value.
    In this case, we are going to build a calculator that takes two integers as input,
    an operation, and returns the result of this operation to the user. For this first
    example, we are only supporting the addition, subtraction, multiplication, and
    division operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s define the basic functions that are supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: So far, this is all pretty standard stuff. We have a few functions that our
    calculator supports. In most cases, the result is returned instantly, but for
    the division function, we’ll do a quick check to make sure we’re not dividing
    by zero and panic otherwise. In a real application, we’d avoid the `panic` operation
    as much as possible, but for this example, it doesn’t really have any impact.
    No users were harmed by having a panic in this example!
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let’s take a look at how we’d implement the `calculate` function, which
    takes two numbers and the desired operation. We’ll implement this first without
    considering functions as first-class citizens and use a `switch` statement instead
    to decide which operation to dispatch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Each branch of the `switch` statement performs the desired operation on our
    numbers and returns the result. If the options are exhausted and nothing matched
    the input, we panic. Each time we added a new function to our calculator, we would
    have to extend this function with another branch. Over time, this might not be
    the most readable option. So let’s look at an alternative using what we’ve learned
    so far in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s introduce a type for these kinds of functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let’s create a map where we can bind the string input of a user to a
    calculator function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This map is called `operations`. The key of the map is the input the user will
    provide, which is the operations we support in our calculator. We have bound each
    input to a specific function call.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if we want to implement the actual `calculate` function, we just have
    to look up the key in our map and call the corresponding function. If the requested
    operation does not match a key in our map, we’ll panic. This is similar to the
    default branch in the switch-based approach:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: This way, we can replace `Switch` statements with a map dispatcher. Also remember
    also that a map lookup is typically done in constant time, so this implementation
    of a function dispatcher is fairly efficient. It does require us to use a bit
    more memory to bind keys to functions, but this is negligible. With this approach,
    adding a new operation is a matter of adding a new entry to our map rather than
    extending the `switch` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the use of anonymous functions, we could also define the dispatched function
    inline. For example, this is how we would extend the map with bitshift functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: In this way, we can create a map dispatcher for anonymous functions. This could
    become rather verbose to read though, so use your best judgment when applying
    this.
  prefs: []
  type: TYPE_NORMAL
- en: Example 2 – mocking functions for testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the following example, we will take a look at mocking functions using what
    we have learned so far in this chapter. The application we will be building and
    testing is a simple to-do application. The to-do application simply allows a user
    to add text to a to-do, to overwrite all content.
  prefs: []
  type: TYPE_NORMAL
- en: We won’t be using an actual database, so we’ll imagine that this one exists
    and use the filesystem and program arguments instead. Our goal will be to create
    tests for this application where we can mock the database interactions. To achieve
    this, we will use functions as first-class citizens and type aliases for code
    readability.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete example can be found on GitHub: [https://github.com/PacktPublishing/Functional-Programming-in-Go./tree/main/Chapter2/Examples/TestingExample](https://github.com/PacktPublishing/Functional-Programming-in-Go./tree/main/Chapter2/Examples/TestingExample)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by setting up our main structs. The two structs we will need are
    `Todo` and `Db`. The `Todo` struct represents the to-do item, which will contain
    a piece of text. The struct also contains a reference to a `Db` struct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we also created a “constructor” function, to ensure that users
    get a correctly initialized object.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will add two functions bound to this struct: `Write` and `Append`. The `Write`
    function will override the content of the `Text` field, while the `Append` function
    will add content to the existing field’s content. Let’s also assume that any call
    to these functions can only be done by authorized users. As such, we’ll first
    make a database call to figure out whether the user is authorized to perform this
    action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'With this in place, let’s take a look at the fake database. As we want to be
    able to mock our database’s functions in the tests that we will write later, we
    will leverage the concept of first-class functions. First, we’ll create a `Db`
    struct. As we are only pretending that we are connecting to a real database, we
    won’t bother with setting up the connection and having an actual database running
    somewhere:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: This is the struct definition of `Db`. Remember that functions can be stored
    as fields in a struct. And that’s what’s happening here, our `Db` struct contains
    a single field called `AuthorizationFn`. This is a reference to a function of
    type `authorizationFunc`. Remember that this is just a type alias. The compiler
    will actually expect a function with the `func() bool` signature. Thus, we are
    expecting a function that takes no arguments as input and returns a bool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s create such an authorization function. As this example is self-contained,
    we’re not interested in the overhead of having an actual database in use. For
    this example, assume that a user is authorized if the program arguments contain
    the `admin` string as the first argument to our program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that this function matches the function signature for the type `authorizationFunc`.
    As such, this can be stored inside the `authorizationFn` field of our `Db` struct.
    Next, let’s create a constructor type function for our `Db` so we can give users
    a correctly initialized struct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Notice how we are passing the `argsAuthorization` function to the `AuthorizationFn`
    field. Whenever we are creating a database, we can thus change the implementation
    of `AuthorizationFn` to match our use case. We’ll leverage this for unit testing
    later, but you could also leverage this to provide different authorization implementations,
    thus improving the reusability of our struct.
  prefs: []
  type: TYPE_NORMAL
- en: 'A handy construct to introduce here is to also create a function bound to the
    `Db` object, which will call the inner authorization function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: This is a simple quality-of-life improvement. In this way, we could add code
    to `IsAuthorized`, which runs regardless of which implementation is chosen for
    the authorization function. We could add logs here for debugging, collecting metrics,
    handling potential exceptions, and so forth. In our case, we’ll keep it as a simple
    function call to `AuthorizationFn`.
  prefs: []
  type: TYPE_NORMAL
- en: With this in place, let’s now think about testing our code. Without mocking
    the `IsAuthorized` function, our tests would fail the `Write` and `Append` tests,
    as only authorized users can call those functions. Our test runs should not depend
    on the “outside world” to succeed. Unit tests should run in isolation without
    caring about real underlying systems (in this case, program arguments, but in
    a real scenario, the actual database).
  prefs: []
  type: TYPE_NORMAL
- en: 'So, how do we get around this? We will mock the `authorizationFn` implementation
    by creating a `Db` struct with our own `AuthorizationFn` in its place:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Notice how in the setup of this test, we are manually constructing a `Todo`
    struct rather than calling the constructor-type `newTodo()` function. We’re also
    manually constructing `Db`. This is to avoid the default implementation from running
    in our unit tests. Instead of using the existing function found in the code, we’re
    providing a custom authorization function. Our custom function simply returns
    true for every call to `IsAuthorized`. This is the desired behavior in our test
    case, as we want to test the functionality of the `Todo` struct rather than that
    of `Db`. Using this pattern, we can mock core parts of our implementation. We
    also get the additional benefit that our structs themselves have become more flexible,
    as implementations can now be swapped out even at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have taken a look at what first-class functions are and
    what type of use cases they open up to us as Go developers. We have taken a look
    at the equivalence between functions and objects, such as how they can be instantiated,
    passed around as parameters, stored inside other data structures, and returned
    from other functions.
  prefs: []
  type: TYPE_NORMAL
- en: We have also learned how type aliases can be used to create more readable code
    and to provide clearer error messages. We’ve seen how these can be applied to
    both functions as well as regular data types for structs and primitives.
  prefs: []
  type: TYPE_NORMAL
- en: In the examples, we have seen how we can create a readable function dispatcher,
    as well as how we can leverage first-class functions to create mocks of functions.
    In the next chapter, we will use what we have learned in this chapter to build
    higher-order functions.
  prefs: []
  type: TYPE_NORMAL
