["```go\nfunc A() string {\n     return \"hello\"\n}\nfunc B(a A) string {\n     return A() + \" world\"\n}\n```", "```go\npackage main\nimport \"fmt\"\n// location 1\nfunc main() {\n     // location 2\n     b := true\n     if b {\n          // location 3\n          fmt.Println(b)\n     }\n}\n```", "```go\n func main() {\n      {\n           b := true\n     }\n     if b {\n          fmt.Println(\"b is true\")\n     }\n}\n```", "```go\nfunc main() {\n     s := \"hello\"\n     if true {\n          s := \"world\"\n          fmt.Println(s)\n     }\n     fmt.Println(s)\n}\n```", "```go\nfunc main() {\n     s := \"hello\"\n     if true {\n           s = \"world\"\n           fmt.Println(s)\n     }\n     fmt.Println(s)\n}\n```", "```go\nS := world\n```", "```go\nS = world\n```", "```go\nfunc main() {\n      s := \"hello\"\n      s := \"world\"\n      fmt.Println(s)\n}\n```", "```go\nfunc main() {\n      str1, err := func1()\n      if err != nil {\n           panic(err)\n      }\n      str2, err := func2()\n      if err != nil {\n           panic(err)\n      }\n      fmt.Printf(\"%v %v\\n\", str1, str2)\n}\nfunc func1() (string, error) {\n      return \"\", errors.New(\"error 1\")\n}\nfunc func2() (string, error) {\n      return \"\", errors.New(\"error 2\")\n}\n```", "```go\n// location 1\nfunc outerFunction() func() {\n     // location 2\n     fmt.Println(\"outer function\")\n     return func() {\n           // location 3\n           fmt.Println(\"inner function\")\n     }\n}\n```", "```go\nfunc main() {\n     greetingFunc := createGreeting()\n     response := greetingFunc(\"Ana\")\n     fmt.Println(response)\n}\nfunc createGreeting() func(string) string {\n     s := \"Hello \"\n     return func(name string) string {\n          return s + name\n     }\n}\n```", "```go\nfunc createGreeting(greeting string) func(string) string {..}\n```", "```go\nfunc createGreeting(greeting string) func(string) string {\n     return func(name string) string {\n          return greeting + name\n     }\n}\n```", "```go\nfunc main() {\n     firstGreeting := createGreeting(\"Well, hello there \")\n     secondGreeting := createGreeting(\"Hola \")\n     fmt.Println(firstGreeting(\"Remi\"))\n     fmt.Println(firstGreeting(\"Sean\"))\n     fmt.Println(secondGreeting(\"Ana\"))\n}\n```", "```go\nWell, hello there Remi\nWell, hello there Sean\nHola Ana\n```", "```go\ntype (\n     Name          string\n     Breed         int\n     Gender        int\n     NameToDogFunc func(Name) Dog\n)\n```", "```go\n// define possible breeds\nconst (\n     Bulldog Breed = iota\n     Havanese\n     Cavalier\n     Poodle\n)\n// define possible genders\nconst (\n     Male Gender = iota\n     Female\n)\n```", "```go\ntype Dog struct {\n     Name   Name\n     Breed  Breed\n     Gender Gender\n}\n```", "```go\nfunc createDogsWithoutPartialApplication() {\n     bucky := Dog{\n           Name:   \"Bucky\",\n           Breed:  Havanese,\n           Gender: Male,\n     }\n     rocky := Dog{\n           Name:   \"Rocky\",\n           Breed:  Havanese,\n           Gender: Male,\n     }\n     tipsy := Dog{\n           Name:   \"Tipsy\",\n           Breed:  Poodle,\n           Gender: Female,\n     }\n}\n```", "```go\nfunc DogSpawner(breed Breed, gender Gender) NameToDogFunc {\n     return func(n Name) Dog {\n           return Dog {\n                 Breed:  breed,\n                 Gender: gender,\n                 Name:   n,\n           }\n     }\n}\n```", "```go\nvar (\n     maleHavaneseSpawner = DogSpawner(Havanese, Male)\n     femalePoodleSpawner = DogSpawner(Poodle, Female)\n)\n```", "```go\nfunc main() {\n     bucky := maleHavaneseSpawner(\"bucky\")\n     rocky := maleHavaneseSpawner(\"rocky\")\n     tipsy := femalePoodleSpawner(\"tipsy\")\n     fmt.Printf(\"%v\\n\", bucky)\n     fmt.Printf(\"%v\\n\", rocky)\n     fmt.Printf(\"%v\\n\", tipsy)\n}\n```", "```go\nfunc main() {\n     createDog(\"bucky\", Havanese, Male)\n     createDog(\"rocky\", Havanese, Male)\n     createDog(\"tipsy\", Poodle, Female)\n     createDog(\"keeno\", Cavalier, Male)\n}\n```", "```go\nfunc F(a,b,c): int {}\n```", "```go\nfunc Fa(a): Fb(b)\nfunc Fb(b): Fc(c)\nfunc Fc(c): int\n```", "```go\nfunc threeSum(a, b, c int) int {\n     return a + b + c\n}\n```", "```go\nfunc threeSumCurried(a int) func(int) func(int) int {\n     return func(b int) func(int) int {\n          return func(c int) int {\n               return a + b + c\n          }\n     }\n}\n```", "```go\nfunc main() {\n     fmt.Println(threeSum(10, 20, 30))\n     fmt.Println(threeSumCurried(10)(20)(30))\n}\n```", "```go\nfunc DogSpawner(breed Breed, gender Gender) NameToDogFunc {\n     // implementation\n}\n```", "```go\nfunc DogSpawnerCurry(breed Breed) func(Gender) NameToDogFunc {\n     return func(gender Gender) NameToDogFunc {\n            return func(name Name) Dog {\n                   return Dog{\n                          Breed:  breed,\n                          Gender: gender,\n                       Name:   name,\n               }\n          }\n     }\n}\n```", "```go\nfunc DogSpawnerCurry(breed Breed) func(Gender) func(Name) Dog {\n     return func(gender Gender) func(Name) Dog{\n          return func(name Name) Dog {\n               return Dog{\n                    Breed:  breed,\n                    Gender: gender,\n                    Name:   name,\n               }\n          }\n     }\n}\n```", "```go\ntype (\n     ServerOptions func(options) options\n     TransportType int\n)\nconst (\n     UDP TransportType = iota\n     TCP\n)\n```", "```go\ntype Server struct {\n     options\n}\ntype options struct {\n     MaxConnection int\n     TransportType TransportType\n     Name          string\n}\n```", "```go\nfunc MaxConnection(n int) ServerOptions {\n     return func(o options) options {\n     o.MaxConnection = n\n          return o\n     }\n}\nfunc ServerName(n string) ServerOptions {\n     return func(o options) options {\n          o.Name = n\n          return o\n     }\n}\nfunc Transport(t TransportType) ServerOptions {\n        return func(o options) options {\n                o.TransportType = t\n                return o\n        }\n}\n```", "```go\nfunc NewServer(os ...ServerOptions) Server {\n     opts := options{}\n     for _, option := range os {\n          opts = option(opts)\n     }\n     return Server{\n          options: opts,\n          isAlive: true,\n     }\n}\n```", "```go\nfunc main() {\n     server := NewServer(MaxConnection(10), ServerName(\"MyFirstServer\"))\n     fmt.Printf(\"%+v\\n\", server)\n}\n```", "```go\n{options:{MaxConnection:10 TransportType:0 Name:MyFirstServer} \n  isAlive:true}\n```", "```go\nfunc NewServer(os ...ServerOptions) Server {\n        opts := options{\n                TransportType: TCP,\n        }\n        for _, option := range os {\n                opts = option(opts)\n        }\n        return Server{\n                options: opts,\n                isAlive: true,\n        }\n}\n```", "```go\n{options:{MaxConnection:10 TransportType:1 Name:MyFirstServer} \n  isAlive:true}\n```"]