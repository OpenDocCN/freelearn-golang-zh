- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Higher-Order Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to explore the concept of function composition
    through higher-order functions. There are a variety of new concepts that we are
    introducing here, such as closures, partial application, and function currying.
    We will take a look at some practical examples and real-world use cases for these.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will cover the core concepts of composing functions from an abstract
    viewpoint, and then we will combine the concepts in a practical example. Everything
    that we will learn here leans heavily on the concepts introduced in [*Chapter
    2*](B18771_02.xhtml#_idTextAnchor028), where we learned what it means to treat
    functions as first-class citizens.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to higher-order functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Closures and variable scoping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Partial application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Function currying, or how to reduce n-ary functions to unary functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All the examples for this chapter can be found at [https://github.com/PacktPublishing/Functional-Programming-in-Go./tree/main/Chapter3](https://github.com/PacktPublishing/Functional-Programming-in-Go./tree/main/Chapter3).
    For this example, any Go version will work.
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to higher-order functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In essence, a higher-order function is any function that either takes a function
    as the input or returns a function as the output. Recall from the previous chapter
    that both of these things are made possible through the support for functions
    as “first-class citizens.” Although it’s perhaps uncommon to call them “higher-order
    functions,” many programming languages do support these functions out of the box.
    For example, in Java and Python, the `map`, `filter`, and `reduce` functions are
    all examples of higher-order functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a simple example in Go. We’ll have a function, `A`, that returns
    `hello,` and a function, `B`, that takes `A` as an input parameter. This is a
    higher-order function, as the `A` function is used as input to `B`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: It is important to point out here that we’re not simply passing the result of
    `A` to `B` – we’re actually running the `A` function as part of the execution
    of `B`. So far, what I’ve shown here is not fundamentally different from anything
    that we saw in [*Chapter 2*](B18771_02.xhtml#_idTextAnchor028). Indeed, first-class
    functions are often demonstrated by the implementation of higher-order functions.
  prefs: []
  type: TYPE_NORMAL
- en: When they become interesting is when you start using them for partially applied
    computation, or when you use them to build function currying, but before we dive
    into these, let’s look at the concept of closure first.
  prefs: []
  type: TYPE_NORMAL
- en: Closures and variable scoping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Closures are closely related to how variable scoping works in a given programming
    language. To fully understand how they work and how they become useful, we will
    first do a quick refresher on how variable scoping works in Go. Next, we’ll remind
    ourselves of how anonymous functions work and what they are. Finally, we will
    take a look at what closures are in this context. This will set us up to properly
    understand partial application and function currying when we get to those techniques
    later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Variable scoping in Go
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Variable scoping in Go is done by what is called **lexical scoping**. This
    means that a variable is identified and usable within the context where it was
    created. In Go, “blocks” are used to delineate locations in code. For example,
    see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'There are three locations of scope in this code:'
  prefs: []
  type: TYPE_NORMAL
- en: The first one, `location 1`, is the package scope. Our main function sits at
    this level of scoping.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next location is inside our `main` function. This is where we are defining
    the `b` Boolean.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third location is inside the `if` statement. In Go, and many other languages,
    the block is defined by curly braces.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: As a rule, variables that are defined at a “higher location” are available at
    a lower location, but variables defined at the lower location are not available
    in the surrounding higher location. In the preceding example, our code works as
    expected, as `b` is accessible from within `location 3`, even though it was defined
    in `location 2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'So far, for the seasoned Go programmer, this should all pretty much be behaving
    as expected. Let’s take a look at a few other examples of scoping. Try to figure
    out the output of the code prior to reading on:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Scoping example 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: What would the output be here? The right answer is… *a compilation error*. In
    this example, we have defined `b` at a different scope than the scope of the `if`
    block. Thus, we don’t have access to `b` at this level of scoping.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, think about what the output would be here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Scoping example 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The right answer is `world hello`. This might be a bit surprising. You know
    that you can’t redeclare a variable in Go in a given scope, but, in this example,
    the scope inside our `if` statement is different from the scope of our `main`
    function. Thus, it is valid to declare a new `s` variable inside the `if` function.
    Do note that when using the `s` variable declared outside of our `if` statement,
    it has remained unchanged. This might be slightly surprising behavior. Let’s change
    our code slightly as we jump to the third example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try to guess what the output might be of the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Scoping example 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To point out the difference in this snippet, we have changed the first line
    in the `if` statement from this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, it is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This seemingly small difference creates the following output: `world world`.
    To understand this, remember that when using the `:=` syntax, we are declaring
    a new variable. When we only write `=`, we are redeclaring an existing variable.
    In this example, we are just updating the content of the `s` variable.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s make one final change to this example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Scoping example 4:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'As you might have guessed, this code does not compile. While Go does allow
    us to declare variables with the same name, it only allows us to do so when they
    are not in the same block scope. A notable exception here is when a function returns
    multiple values. For example, in the following snippet, we can redeclare the error
    value as a return value for both `func1` and `func2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding snippet, the `err` value gets redeclared even though we are
    using the `:=` syntax. This is commonly encountered in Go as the error values
    bubble up from each function to an eventual parent method that handles multiple
    errors.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to remember how scoping works and the significance of the curly
    braces to delineate blocks, as well as to remember the difference between introducing
    a new variable versus simply redeclaring an existing one. With this out of the
    way, we have enough background knowledge to jump into variable scoping when using
    functions inside functions.
  prefs: []
  type: TYPE_NORMAL
- en: Capturing variable context in functions (closures)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous chapter, we saw that each time we encountered curly braces,
    a new variable scope was introduced. This happens when we declare a function,
    branch into an `if` statement, introduce a `for` loop, or simply place curly braces
    anywhere in a function, as in our first scoping example. We also saw in [*Chapter
    2*](B18771_02.xhtml#_idTextAnchor028) that we can create functions inside functions
    – and, as you might have guessed, this creates a new scope yet again.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the remainder of this chapter, we will frequently use anonymous functions.
    Remember that an anonymous function is essentially a function declaration without
    an identifier attached to it. This is the general template that we are using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In this example, I have denoted the three variable scoping locations as well.
    As you can see, `location 3`, which is part of the anonymous function, is scoped
    at a lower level than `location 2`. This is a critical reason why closures work.
    Defining a new function does not automatically create a top-level scope. When
    we define a function inside another function, this new function scopes variables
    at a lower level than where it was introduced.
  prefs: []
  type: TYPE_NORMAL
- en: Also, note that `outerFunction` is a higher-order function. Although we don’t
    take a function as input, we are returning a function as output. This is a valid
    characteristic of higher-order functions.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s say specifically what we mean by a closure. A closure is *any inner
    function that uses a variable introduced in the outer function* to perform its
    work. Let’s make this more concrete by looking at an example.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we are going to create a function that creates a greeting
    function. Our outer function will be the function that determines the greeting
    message to show. The inner function will ask for a name as input and return the
    greeting combined with the name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we are using a closure. The anonymous inner function
    references the outer variable, `s`, to create the greeting. The output of this
    code is `Hello Ana`. What is important here is that, although the `s` variable
    went out of scope once the `createGreeting` function ended, the variable content
    is actually captured inside the inner function. Thus, after we called `greetingFunc`
    in our `main` function, the capture was fixed as `Hello`. Capturing a variable
    inside an inner function is what is meant when we talk about closures.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can make this function more flexible by accepting the greeting string as
    an input parameter to the `createGreeting` function so that we get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This small change brings us to the start of the next topic: partial applications.'
  prefs: []
  type: TYPE_NORMAL
- en: Partial application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we understand closures, we can start thinking about partial application.
    The name “partial application” quite explicitly tells us what is happening – it
    is a function that is partially applied. This is perhaps still a bit cryptic.
    A partially applied function is taking a function that takes *N* number of arguments
    and “fixing” a subset of these arguments. By fixing a subset of the arguments,
    they become set in stone, while the other input parameters remain flexible.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is perhaps best shown with an example. Let’s extend the `createGreeting`
    function that we built in the previous section of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The change we have made here is to have the greeting passed as an input to
    the `createGreeting` function. Each time that we call `createGreeting`, we are
    effectively creating a new function, which expects `name` as input but has the
    `greeting` string fixed. Let’s create a few of those functions now and use them
    to print the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of running this function is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we fix the first parameter of the `firstGreeting` function
    as `Well, hello there,` while for the `secondGreeting` function, we have fixed
    the value as `Hola`. This is partial application – when we create the function
    to greet users with a name, part of this function has already been applied. In
    this case, the `greeting` variable was fixed, but you can fix any subset of the
    arguments of a function – it’s not limited to just one variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: DogSpawner'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this example, we are going to tie everything that we have learned so far
    together. For this example, we are going to create `DogSpawner`. You can imagine
    that this could be used in the context of creating a game or another application
    for which you’d be maintaining information on dogs. As in our other examples,
    we are going to trim this down to the bare essentials and we won’t be making an
    actual game. What we are going to do in this example, however, is leverage what
    we’ve learned in previous chapters and tie it all together with clean functional
    code.
  prefs: []
  type: TYPE_NORMAL
- en: From a high-level point of view, our application should support dogs of multiple
    breeds. The breeds should be easily extensible. We also want to record the gender
    of the dog and give the dog a name. In our example, imagine that you’d want to
    spawn many dogs, so there would be a lot of repetition of types and genders. We’ll
    leverage partial application to prevent the repetitiveness of those function calls
    and improve the code readability.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will start by defining the types that we’ll need for this program.
    Remember from the first chapter that we can use the `type` system to give you
    more information about what is happening in the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that we can use a `type` block, similar to how we can use a `var` or
    `const` block. This prevents us from having to repeat the `type Name string` structure.
    In this `type` block, we have simply chosen `Name` to be a `string` object, `Breed`
    and `Gender` to be `int` objects, and `NameToDogFunc` is a function that takes
    in a given `Name` and returns a given `Dog` as a result. The reason we chose `int`
    objects for `Breed` and `Gender` is that we’ll construct those using Go’s equivalent
    of an `Enum` definition. We’ll go ahead and populate these enums with some values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: As you can tell from the preceding example, the default `iota` keyword works
    out of the box with the types that we have defined. Once again, this shows that
    our type aliases compile down to the underlying type, in this case, the `int`
    type for which `iota` is defined. You could merge the two `const` blocks in this
    example into a single block, but when dealing with enumerations, the code remains
    more readable when each block serves a single purpose.
  prefs: []
  type: TYPE_NORMAL
- en: 'With these constants and types in place, we can create a struct to represent
    our `Dog`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'It’s a bit repetitive in this struct, as the names of our variables are identical
    to the type. For this example, we can keep it lightweight and don’t have to add
    any more information to our `Dog`. With this in place, we have everything we need
    to start implementing our partially applied functions, but before we get to that,
    let’s look at how we’d create `Dog` structs without partially applied functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we have created three dogs. The first two are both
    male Havanese dogs, so we had to repeat the `Breed` and `Gender` information there.
    The only thing that’s unique between those two would be the name. Now, let’s create
    a function that allows us to create `DogSpawner` of various gender and breed combinations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The preceding `DogSpawner` function is a function that takes `Breed` and `Gender`
    as input. It returns a new function, `NameToDogFunc`, which takes `Name` as input
    and returns a new `Dog` struct. This `DogSpawner` function thus allows us to create
    new functions where the dog’s breed and gender are already partially applied,
    but the name is still expected as input.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `DogSpawner` function, we can create two new functions, `maleHavaneseSpawner`
    and `femalePoodleSpawner`. These functions will allow us to create male Havanese
    dogs and female poodles, by only providing a name for our dogs. Let’s go ahead
    and create two new functions in the package-scoped `var` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'After this definition, the `maleHavaneseSpawner` and `femalePoodleSpawner`
    functions are available anywhere in that package. You could also expose them as
    public functions that anyone using the package has access to. Let’s demonstrate
    in our `main` function how these functions could be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In this `main` function, we can see how we can leverage the partially applied
    functions. We could have created a function to create dogs, such as `newDog(n
    Name, b Breed, g Gender) Dog{}`, but this would still have led to a lot of repetition
    in creating our dogs, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: While still decently readable with only three parameters, more parameters will
    significantly impair readability. We’ll show this in the last example of this
    chapter after we’ve discussed function currying.
  prefs: []
  type: TYPE_NORMAL
- en: Function currying, or how to reduce n-ary functions to unary functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Function currying is often mistaken for partial application. As you will see,
    function currying and partial application are related but not identical concepts.
    When we talk about function currying, we are talking about transforming a function
    that takes a single argument to a sequence of functions where each function takes
    exactly one argument. In pseudocode, what we are doing is transforming a function
    such as the following into a sequence of three functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The first function, `(Fa)`, takes the `a` argument as input and returns a new
    function, `(Fb)`, as output. `(Fb)` takes `b` as input and returns an `(Fc)` function.
    `(Fc)`, the final function, takes `c` as input and returns an `int` object as
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This is done by leveraging the concept of first-class citizens and higher-order
    functions once again. We’ll be able to achieve this transformation by returning
    a function from a function. The core feature that we’ll achieve from this is more
    composable functions. For our purposes, you can think of this as partial application
    applied to single arguments.
  prefs: []
  type: TYPE_NORMAL
- en: One thing to note here is that in other programming languages such as Haskell,
    function currying plays a much more important role than here in our Go examples.
    Haskell (which is named after Haskell Curry), transforms each function into a
    curried function. The compiler takes care of that, so you’re not generally aware
    of this as a user. The Go compiler does no such thing, but we can still manually
    create functions in such a way. Before we dive into larger end-to-end examples,
    let’s take a quick look at how we’d transform the previous pseudocode into functioning
    Go code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Without currying, our function would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, with currying, the same example would translate to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'When calling them in the `main` function, these return the same result. Notice
    the difference in syntax between the two calls in the `main` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: It should go without saying that the curried version of this function is way
    more complicated to read and comprehend than the uncurried function. This ties
    back to what I mentioned in the first chapter – you should leverage functional
    concepts where they make sense. For this simple example, it didn’t make sense
    but it does demonstrate the point of what we are trying to do. The real power
    of function currying only comes in handy when we also decide to combine it with
    partial application to create flexible functions. To show how this works, let’s
    dive into an example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: function currying'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we are going to extend the functionality of the `DogSpawner`
    example that we’ve built to demonstrate partial application. If we look at the
    main `DogSpawner` code for that application, we can tell that we are almost using
    a unary function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'That gets us close, but no dice. To be a properly curried function, `DogSpawner`
    can only take one parameter. In essence, we are going to create a sequence of
    three functions that take the successive arguments to create `Dog`, `DogSpawner(Breed)(Gender)(Name)`.
    If we implement this function in Go, we get the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The way to read this is that `DogSpawnerCurry` is a function that takes `breed`
    as input. It returns a function that takes `gender` as input, which, in turn,
    returns a function that takes `name` as input and returns `Dog`. This is a bit
    complex to read, but you get the hang of it. This is also where type aliases come
    in handy. Without a type alias, this would be even more verbose, which would hinder
    reading and make it more error-prone to write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have covered the three main themes of this chapter, let’s take a
    look at some further examples to demonstrate these techniques.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: server constructor'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this first example, we are going to leverage what we’ve learned so far to
    create flexible constructors for data types. We will also see how we can create
    constructors with default values of our choosing.
  prefs: []
  type: TYPE_NORMAL
- en: In our setup, a `Server` struct is a simple struct that has a set number of
    maximum connections, a transport type, and a name. We won’t be building an actual
    web server, but rather, we are demonstrating the concepts with only a small amount
    of overhead. What we want to do in this example is to focus on the core ideas,
    which you can then apply anywhere you see fit. Our server only has three configurable
    parameters, but you can imagine that this benefit is more pronounced when there
    are more parameters to configure.
  prefs: []
  type: TYPE_NORMAL
- en: 'As always, we are going to start by defining the custom types of our application.
    To keep it lightweight, I’m defining two of them – `TransportType`, which is an
    `int` type to be used as an enumeration, and a type alias for `func(options) options`.
    Let’s also set some values for `TransportType`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have this, let’s get our structs in place – the two structs that
    we will be using as `Server` and `options`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: In the example here, we have embedded `options` without declaring a new name
    for the field. This is achieved in Go by simply writing the type of struct that
    you want to embed. When doing so, the `Server` struct will contain all the fields
    that the `options` struct has. It’s a way to model object composition in Go.
  prefs: []
  type: TYPE_NORMAL
- en: This might look a bit peculiar and warrants some further investigation. In a
    more typical setup, you might have the `Server` struct contain the variables that
    we have placed inside the `options` struct. The main reason for using the `options`
    struct and embedding it inside `Server` is to use this as a configuration for
    our server that we want users to provide. We don’t want users to provide data
    that is not contained in this struct, such as the `isAlive` flag. This clearly
    separates concerns, and it will allow us to build the next higher-order functions
    and partial application layers on top of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is creating a way for us to configure the `options` struct through
    multiple function calls. For each variable inside the `options` struct, we are
    creating a higher-order function. These are functions that take in the parameter
    to be configured, and return a new function, `ServerOptions`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the preceding three functions (`MaxConnection`, `ServerName`,
    and `TransportType`), we are using a closure to build this configuration. Each
    function takes in a struct of the `options` type, changes the corresponding variable,
    and returns the same `options` struct with the change applied. *Notice that these
    functions only change their corresponding variable, and everything else in the
    struct* *remains untouched.*
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have this, we have everything in place to start constructing our
    server. For our constructor, we’ll write a function that takes a variadic argument
    list of `ServerOptions` as our input. Remember that these inputs are really other
    functions. Our constructor is a higher-order function that takes functions as
    input and returns a server as output. Thus, when we iterate over our `ServerOptions`,
    we get a series of functions that we can call. We’ll create a default struct of
    `options` to pass to these functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: In the code here, you can see how our `Server` is finally built based on the
    `options` struct. We’re also setting the `isAlive` flag to `true`, as this is
    not something the user could input.
  prefs: []
  type: TYPE_NORMAL
- en: 'Great, we have everything in place to start creating servers – so how do we
    go about that? Well, our constructor is a bit different from other constructors
    that you might have seen. Rather than taking variables such as primitives or structs
    as input, we are going to pass functions as input. Let’s demonstrate in the `main`
    function how we can call this constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can tell, we call the `MaxConnection(10)` function inside the constructor.
    The output of this function is not simply a struct; the output is `function(options)
    options`. When running this code, we get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Great – now, we have a quite flexible constructor. If you notice in the output,
    we get `TransportType: 0` as output, even though we did not configure this in
    our `options` struct. This is because Go uses a sane default zero value for its
    primitive types. One thing our current constructor setup allows us to do is to
    create default values that we set ourselves with only minor changes to our code.
    Let’s update the `NewServer` function to use `TCP` (`TransportType: 1`) as the
    default value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'In the example, the only change we made was to add `TransportType: TCP` to
    the initialization for our `options`. Now, if we run the same main code again,
    we get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: This is how easy it is to create our own default values when a user does not
    provide any. As this example shows, we can easily use functional programming concepts
    to build flexible functions such as constructors and achieve functionality that
    is not natively present in Go. In some languages, such as Python, you can set
    default values for a function when the user does not provide them. Now, we can
    do the same thing using the `options` struct for our server.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we covered three things: closures, partial application, and
    currying. By using closures, we learned how we can share the context of variables
    between outer and inner functions. This allowed us to build flexible applications,
    such as the final “constructor” example. Next, we learned how to use a partially
    applied function to fix certain arguments to an n-ary function. This shows us
    how we can create default configurations for functions, such as how we created
    a `HavaneseSpawner` option in our example. Finally, we learned about function
    currying and how this relates to partial application. We showed how we can extend
    our partial application example by transforming each function into unary function
    calls. All three techniques have allowed us to create more composable and reusable
    functions.'
  prefs: []
  type: TYPE_NORMAL
- en: Up until now, we have not been concerned with function purity and have played
    a bit fast and loose with the state of our system. In the next chapter, we are
    going to talk about what it means for functions to be pure, how we can encapsulate
    side effects, and what benefits this brings for writing testable code.
  prefs: []
  type: TYPE_NORMAL
