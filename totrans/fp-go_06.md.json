["```go\ntype Predicate[A any] func(A) bool\n```", "```go\nfunc Filter(numbers []int) []int {\n\tout := []int{}\n\tfor _, num := range numbers {\n\t\tif num > 10 {\n\t\t\tout = append(out, num)\n\t\t}\n\t}\n\treturn out\n}\n```", "```go\nfunc Filter(numbers []int, threshold int) []int {\n\tout := []int{}\n\tfor _, num := range numbers {\n\t\tif num > threshold {\n\t\t\tout = append(out, num)\n\t\t}\n\t}\n\treturn out\n}\n```", "```go\nfunc FilterLargerThan(numbers []int, threshold int) []int {\n..\n}\nfunc FilterSmallerThan(numbers []int, threshold int) []int {\n..\n}\n```", "```go\nfunc Filter[A any](input []A, pred Predicate[A]) []A {\n\toutput := []A{}\n\tfor _, element := range input {\n\t\tif pred(element) {\n\t\t\toutput = append(output, element)\n\t\t}\n\t}\n\treturn output\n}\n```", "```go\nfunc main() {\n\tinput := []int{1, 1, 3, 5, 8, 13, 21, 34, 55}\n\tlarger20 :=\n          Filter(input, func(i int) bool { return i > 20 })\n\tsmaller20 :=\n          Filter(input, func(i int) bool { return i < 20 })\n\tfmt.Printf(\"%v\\n%v\\n\", larger20, smaller20)\n}\n```", "```go\nfunc main() {\n\tinput := []int{1, 1, 3, 5, 8, 13, 21, 34, 55}\n\tlarger10smaller20 := Filter(input, func(i int) bool {\n\t\treturn i > 10 && i < 20\n\t})\n\tevenNumbers := Filter(input, func(i int) bool {\n\t\treturn i%2 == 0\n\t})\n\tfmt.Printf(\"%v\\n%v\\n\", larger10smaller20, evenNumbers)\n}\n```", "```go\ntype Dog struct {\n\tName   Name\n\tBreed  Breed\n\tGender Gender\n}\n```", "```go\nfunc main() {\n\tdogs := []Dog{\n\t\tDog{\"Bucky\", Havanese, Male},\n\t\tDog{\"Tipsy\", Poodle, Female},\n\t}\n\tresult := Filter(dogs, func(d Dog) bool {\n\t\treturn d.Breed == Havanese\n\t})\n\tfmt.Printf(\"%v\\n\", result)\n}\n```", "```go\nfunc main() {\n\tinput := []int{1, 1, 3, 5, 8, 13, 21, 34, 55}\n\tfiltered := Filter(input, func(i int) bool { return i == \n        55 })\n\tcontains55 := len(filtered) > 0\n\tfmt.Printf(\"%v\\n\", contains55)\n}\n```", "```go\nfunc Any[A any](input []A, pred Predicate[A]) bool {\n\tfor _, element := range input {\n\t\tif pred(element) {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n```", "```go\nfunc All[A any](input []A, pred Predicate[A]) bool {\n\tfor _, element := range input {\n\t\tif !pred(element) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n```", "```go\nfunc TakeWhile[A any](input []A, pred Predicate[A]) []A {\n\tout := []A{}\n\tfor _, element := range input {\n\t\tif pred(element) {\n\t\t\tout = append(out, element)\n\t\t} else {\n\t\t\treturn out\n\t\t}\n\t}\n\treturn out\n}\n```", "```go\nfunc main() {\n\tints := []int{1, 1, 2, 3, 5, 8, 13}\n\tresult := TakeWhile(ints, func(i int) bool {\n\t\treturn i%2 != 0\n\t})\n\tfmt.Printf(\"%v\\n\", result)\n}\n```", "```go\nfunc DropWhile[A any](input []A, pred Predicate[A]) []A {\n\tout := []A{}\n\tdrop := true\n\tfor _, element := range input {\n\t\tif !pred(element) {\n\t\t\tdrop = false\n\t\t}\n\t\tif !drop {\n\t\t\tout = append(out, element)\n\t\t}\n\t}\n\treturn out\n}\n```", "```go\nfunc main() {\n\tints := []int{1, 1, 2, 3, 5, 8, 13}\n\tresult := DropWhile(ints, func(i int) bool {\n\t\treturn i%2 != 0\n\t})\n\tfmt.Printf(\"%v\\n\", result)\n}\n```", "```go\ntype MapFunc[A any] func(A) A\nfunc Map[A any](input []A, m MapFunc[A]) []A {\n\toutput := make([]A, len(input))\n\tfor i, element := range input {\n\t\toutput[i] = m(element)\n\t}\n\treturn output\n}\n```", "```go\ntype MapFunc[A any] func(A) A\n```", "```go\nfunc main() {\n\tints := []int{1, 1, 2, 3, 5, 8, 13}\n\tresult := Map(ints, func(i int) int {\n\t\treturn i * 2\n\t})\n\tfmt.Printf(\"%v\\n\", result)\n}\n```", "```go\nfunc dogMapDemo() {\n        dogs := []Dog{\n                Dog{\"Bucky\", Havanese, Male},\n                Dog{\"Tipsy\", Poodle, Female},\n        }\n        result := Map(dogs, func(d Dog) Dog {\n                if d.Gender == Male {\n                        d.Name = \"Mr. \" + d.Name\n                } else {\n                        d.Name = \"Mrs. \" + d.Name\n                }\n                return d\n        })\n        fmt.Printf(\"%v\\n\", result)\n}\n```", "```go\n[{Mr. Bucky 1 0} {Mrs. Tipsy 3 1}]\n```", "```go\nfunc FlatMap[A any](input []A, m func(A) []A) []A {\n\toutput := []A{}\n\tfor _, element := range input {\n\t\tnewElements := m(element)\n\t\toutput = append(output, newElements…)\n\t}\n\treturn output\n}\n```", "```go\nfunc main() {\n        ints := []int{1, 2, 3}\n        result := FlatMap(ints, func(n int) []int {\n                out := []int{}\n                for i := 0; i < n; i++ {\n                        out = append(out, i)\n                }\n                return out\n        })\n        fmt.Printf(\"%v\\n\", result)\n}\n```", "```go\n[0 0 1 0 1 2]\n```", "```go\n0: [0]\n1: [0 1]\n2: [0 1 2]\n```", "```go\ntype (\n        reduceFunc[A any] func(a1, a2 A) A\n)\n```", "```go\nfunc Reduce[A any](input []A, reducer reduceFunc[A]) A {\n\tif len(input) == 0 {\n\t\t// return default zero\n\t\treturn *new(A)\n\t}\n\tresult := input[0]\n\tfor _, element := range input[1:] {\n\t\tresult = reducer(result, element)\n\t}\n\treturn result\n}\n```", "```go\nfunc(a1, a2 A) A { return a1 + a2 }\n```", "```go\ntype Number interface {\n        ~uint8 | ~uint16 | ~uint32 | ~uint64 | ~uint |\n                ~int8 | ~int16 | ~int32 | ~int64 | ~int |\n                ~float32 | ~float64\n}\n```", "```go\nfunc Sum[A Number](input []A) A {\n\treturn Reduce(input, func(a1, a2 A) A { return a1 + a2 })\n}\n```", "```go\nfunc main{\n        ints := []int{1, 2, 3, 4}\n        result := Sum(ints)\n        fmt.Printf(\"%v\\n\", result)\n}\n```", "```go\nfunc Product[A Number](input []A) A {\n        return Reduce(input, func(a1, a2 A) A { return a1 * a2 })\n}\n```", "```go\nfunc ReduceWithStart[A any](input []A, startValue A, reducer reduceFunc[A]) A {\n        if len(input) == 0 {\n                return startValue\n        }\n        if len(input) == 1 {\n                return reducer(startValue, input[0])\n        }\n        result := reducer(startValue, input[0])\n        for _, element := range input[1:] {\n                result = reducer(result, element)\n        }\n        return result\n}\n```", "```go\nfunc main() {\n        words := []string{\"hello\", \"world\", \"universe\"}\n        result := ReduceWithStart(words, \"first\", func(s1, s2 \n            string) string {\n                return s1 + \", \" + s2\n        })\n        fmt.Printf(\"%v\\n\", result)\n}\n```", "```go\nfirst, hello, world, universe\n```", "```go\n  {\n    \"Airport\": {\n      \"Code\": string,\n      \"Name\": string\n    },\n    \"Statistics\": {\n      \"Flights\": {\n        \"Cancelled\": number,\n        \"Delayed\": number,\n        \"On Time\": number,\n        \"Total\": number\n      },\n      \"Minutes Delayed\": {\n        \"Carrier\": number,\n        \"Late Aircraft\": number,\n        \"Security\": number,\n        \"Total\": number,\n        \"Weather\": number\n      }\n    }\n  }\n```", "```go\ntype Entry struct {\n\tAirport struct {\n\t\tCode string `json:\"Code\"`\n\t\tName string `json:\"Name\"`\n\t} `json:\"Airport\"`\n\tStatistics struct {\n\t\tFlights struct {\n\t\t\tCancelled int `json:\"Cancelled\"`\n\t\t\tDelayed   int `json:\"Delayed\"`\n\t\t\tOnTime    int `json:\"On Time\"`\n\t\t\tTotal     int `json:\"Total\"`\n\t\t} `json:\"Flights\"`\n\t\tMinutesDelayed struct {\n\t\t\tCarrier                int `json:\"Carrier\"`\n\t\t\tLateAircraft           int `json:\"Late \n                                        Aircraft\"`\n\t\t\tSecurity               int `json:\"Security\"`\n\t\t\tWeather                int `json:\"Weather\"`\n\t\t} `json:\"Minutes Delayed\"`\n\t} `json:\"Statistics\"`\n}\n```", "```go\nfunc getEntries() []Entry {\n        bytes, err := ioutil.ReadFile(\"./resources/airlines.\n            json\")\n        if err != nil {\n                panic(err)\n        }\n        var entries []Entry\n        err = json.Unmarshal(bytes, &entries)\n        if err != nil {\n                panic(err)\n        }\n        return entries\n}\n```", "```go\nfunc main() {\n\tentries := getEntries()\n\tSEA := Filter(entries, func(e Entry) bool {\n\t\treturn e.Airport.Code == \"SEA\"\n\t})\n\tWeatherDelayHours := FMap(SEA, func(e Entry) int {\n\t\treturn e.Statistics.MinutesDelayed.Weather / 60\n\t})\n\ttotalWeatherDelay := Sum(WeatherDelayHours)\n\tfmt.Printf(\"%v\\n\", totalWeatherDelay)\n}\n```"]