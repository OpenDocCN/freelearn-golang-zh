- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Three Common Categories of Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding chapters, we have looked at some of the core components of
    functional programming. We have discussed how to write functions that adhere to
    both functional programming and pure functional programming.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to look at some practical implementations of
    functions that leverage these concepts. These are the categories and topics we
    will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: The first category we will look at is predicate-based functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we will take a look at data transformation functions, which maintain the
    structure of our data (more on that later)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we will take a look at functions, which transform the data and reduce
    the information into a single value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is not meant to be an exhaustive list, but with these three categories,
    we can build a large portion of our day-to-day applications.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, you can use any Go version at or above Go 1.18, as we will
    be using generics in some of the later examples. You can find all the code on
    GitHub at [https://github.com/PacktPublishing/Functional-Programming-in-Go./tree/main/Chapter6](https://github.com/PacktPublishing/Functional-Programming-in-Go./tree/main/Chapter6).
  prefs: []
  type: TYPE_NORMAL
- en: Predicate-based functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first type of functions that we will explore is predicate-based functions.
    A `if` statements inside the body of a function. A common use case is to filter
    a set of data into a subset that matches a specific condition – for example, given
    a list of people, return all of those who are older than 18 years old.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start, we can introduce a type alias for a function that defines the type
    signature of a predicate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This type alias tells us that the function takes an input with a type of `A`,
    which can represent `the any` type in our program, but needs to return a `bool`
    value. This type uses generics, which were introduced in Go 1.18\. We can now
    use this type in every place at which a predicate is expected. The first function
    that works using predicates is the simple `Filter` function.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a Filter function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Filter` function is a staple within the functional programmer’s toolbox.
    Let’s imagine that we don’t have higher-order functions available, and we want
    to write a `Filter`-like function. For this, let’s assume that we have a slice
    of numbers, and we want to filter all the numbers that are larger than 10\. We
    could write something such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This works well enough, but it’s not flexible. In this case, this function
    will always just filter for numbers larger than 10\. We could make it a bit more
    flexible by adjusting the threshold value using an input parameter for our function.
    With a trivial change, we get the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives us a more flexible `Filter` function. However, as we all know, requirements
    change often, and users need new functionalities on an existing system almost
    ad infinitum. The next requirement for our function is to optionally filter for
    either *larger than*, or, in some cases, *smaller than*. Thinking about this for
    some time, you might realize that this could be implemented as two functions (the
    function body is omitted in snippets, as it’s a trivial change):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Sure enough, this would work – but the work never stops. Next, you have to implement
    a function that can filter for numbers larger than a given value but smaller than
    another. Then, our users become really into odd numbers, so there needs to be
    a filter for finding all odd numbers as well. Later on, the user asks you to count
    the exact amount of times a certain value appears, so you also need a filter for
    a certain value *exactly* in your list of numbers. You get the point; we can create
    a bunch of functions that suit all these use cases, but that approach does not
    sound like the best option.
  prefs: []
  type: TYPE_NORMAL
- en: One of the benefits of having a language with support for higher-order functions
    is that we can reduce repetitive implementations and abstract our algorithm. All
    of the aforementioned use cases fit within a function often called `Filter` in
    functional programming languages. The implementation of the `Filter` function
    is rather straightforward. The basic operation it supports is to iterate over
    a container, such as a *slice*, and apply a predicate function to every data element
    contained within the container. If the predicate function returns `true`, we will
    append this data element to our output. If not, we simply discard elements that
    did not match.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we want to follow the best practices for implementing these functions, these
    functions will be pure and immutable. The original slice will never be modified
    within our filter functions, and neither will the elements contained therein:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This `Filter` implementation is a pretty typical implementation that you will
    find in many functional (and multi-paradigm) programming languages. Using higher-order
    functions in this way, we can essentially make part of an algorithm configurable.
    In other words, we abstract our algorithm. With the `Filter` function, the actual
    predicate part of an `if` statement is customizable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that we have implemented this using *generics*. `Filter` does not care
    what data types it is working with. Anything that can be stored in a slice can
    be passed to the `Filter` function. Let’s look at how we would use this in practice
    by creating some of the functions we discussed earlier. We will start off by implementing
    `LargerThan` and `SmallerThan` filters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The functions that we are passing to `Filter` as input are a tad verbose, as
    at the time of writing, Go does not have syntactic sugar for creating anonymous
    functions. Notice how we did not have to duplicate the body of our `Filter` function
    for this implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Implementing other filters, such as *larger than X but smaller than Y* or *filter
    even numbers*, are equally easy to implement. Remember that we only have to pass
    the `if` statement logic each time and the iteration of the list is taken care
    of by the `Filter` function itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: By implementing this with generics, our `Filter` function can work with any
    data type. Let’s see how this function would work with the `Dog` struct that we
    have used in earlier chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Recall that our struct for `Dog` had three fields: `Name`, `Breed`, and `Gender`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This snippet omits the `const` declarations for `Breed` and `Gender`, as well
    as the type aliases. These are the same as those in [*Chapter 3*](B18771_03.xhtml#_idTextAnchor047),
    and the full implementation can be found on GitHub: [https://github.com/PacktPublishing/Functional-Programming-in-Go./tree/main/Chapter3](https://github.com/PacktPublishing/Functional-Programming-in-Go./tree/main/Chapter3).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Because we have used generics in the implementation of our `Filter` function,
    this will work on any data type, including custom structs. As such, we can use
    the function as is without any changes. Let’s implement a filter for all dogs
    that are of the `Havanese` breed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: That’s all there is to it. Next, let’s look at some other functions that use
    predicates.
  prefs: []
  type: TYPE_NORMAL
- en: Any or all
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is common to have to make sure that either *some* elements or *all* elements
    match a certain condition. The use case for abstracting this into a higher-order
    function is the same as for the `Filter` function. If we do not abstract this,
    a separate `All` and `Any` function would have to be implemented for each use
    case. While these are not found as often in multi-paradigm languages or object-oriented
    languages, they are still found in purely functional languages and come in handy.
  prefs: []
  type: TYPE_NORMAL
- en: Looking for a match
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first function to look at is the `Any` function. At times, you may be interested
    in knowing whether or not a certain value is present in a list without being interested
    in exactly how often it is present or actually using the values afterward. If
    this is the case, the `Any` function is exactly what you are looking for.
  prefs: []
  type: TYPE_NORMAL
- en: 'Without the `Any` function, the same result could be achieved somewhat ad hoc
    with the `Filter` function. You would probably end up writing something such as
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Do note that I am splitting this into multiple lines for clarity, but in less
    verbose languages such as Python and Haskell, this kind of filter would still
    be a good one-liner. In Go, I’d be a bit cautious about the line length in case
    you decide to do so.
  prefs: []
  type: TYPE_NORMAL
- en: This implementation has one major flaw. What if you have a really large list
    of 10 million elements? The `Filter` function will iterate through every element
    in the list. It is always running in linear time, `O(n)`. Our `Any` function can
    do better, although we’ll still be running in `O(n)` – worst-case time. In practice,
    it can be more performant, however.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If we knew that we only needed to look for integers, there are better algorithms
    than our `Any` implementation here. However, we want to write it generically for
    any type of data, so those other algorithms would fail for data types such as
    strings or custom structs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest way to gain some performance, despite having a theoretical worst-case
    complexity of linear time, is by iterating through a slice until the first element
    matches our search. If the match is found, we return `true`. Otherwise, we return
    `false` at the end of our function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Looking for all matches
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The implementation for `All` matches is similar to the `Any` match, with the
    same benefit of abstracting the implementation of `if` statements. The implementation
    for `All` has a similar practical benefit as the `Any` implementation. As soon
    as an element does `false`. Otherwise, we return `true` at the end of our function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Implementing DropWhile and TakeWhile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next two implementations are still predicate-based, but rather than returning
    a single `true` or `false` as output, these are used to manipulate the slice.
    In that sense, they are closer to the original `Filter` implementation, but the
    difference is that they truncate either the start of a list or the tail of a list.
  prefs: []
  type: TYPE_NORMAL
- en: TakeWhile implementation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`TakeWhile` is a function that will take elements from the input slice as long
    as a condition is met. As soon as the condition fails, the result containing the
    start of the list up until the failing predicate is returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In this function, this is exactly what is happening. As long as our predicate
    is met for each subsequent element, this element is stored in our output value.
    Once the predicate fails a single time, the output is returned. Let’s demonstrate
    this with a simple slice containing consecutive numbers. Our predicate will look
    for odd numbers. Hence, as long as the numbers are odd, they will be appended
    to the output slice, but as soon as we encounter an even number, what we have
    collected thus far will be returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the output is `[1 1]`. Notice how this is different from the
    plain `Filter` function – if this same predicate was given to the `Filter` function,
    our output would be `[1 1 3` `5 13]`.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing DropWhile
  prefs: []
  type: TYPE_NORMAL
- en: 'Implementing `DropWhile` is the counterpart to `TakeWhile`. This function will
    drop elements as long as a condition is met. Thus, elements are returned from
    the first failed predicate test until the end of the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s test this out against the same input data as our `TakeWhile` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The output of this function is `[2 3 5 8 13]`. The only elements that are dropped
    are therefore `[1 1]`. If you combine the output of `TakeWhile` and `DropWhile`,
    given the same predicate, you would recreate the input slice.
  prefs: []
  type: TYPE_NORMAL
- en: Map/transformation functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next category of functions which we will look at is `Map` functions. These
    are functions that apply a transformation function to each element in a container,
    changing the element and possibly even the data type. This is one of the most
    powerful functions in a functional programmer’s toolbox, as this allows you to
    transform your data according to a given rule.
  prefs: []
  type: TYPE_NORMAL
- en: There are two main implementations that we will look at. The first implementation
    is the simple `Map` function, whereby an operation is performed on each element,
    but the data type remains the same before and after the transformation – for example,
    multiplying each element in a slice. This will change the content of the values,
    but not the type of the values. The other implementation of `Map` is one whereby
    the data types can change as well. This will be implemented as `FMap`, and this
    is what we introduced in the previous chapter when looking into Monads.
  prefs: []
  type: TYPE_NORMAL
- en: Transformations while maintaining the data type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first transformation function that we will look at is one whereby the data
    types remain the same. Whenever a programmer encounters this function, they can
    be assured that the data type after calling the function is the same as the data
    type that was passed to the function. In other words, if the function is called
    for a list of elements with a data type of `Dog`, the output of this function
    is still a list of `Dog` elements. What can be different though is the actual
    content of the fields within those structs (e.g., the name property can be updated).
  prefs: []
  type: TYPE_NORMAL
- en: Just like with the `Filter` implementation, these will be implemented in a purely
    functional way. Calling the `Map` function should **never** make changes in place
    to the objects that we provide as an input to the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Overall, implementing the `Map` function is straightforward. We will iterate
    over our slice of values and call a transformation function for each value. Essentially,
    what we are doing with the `Map` function is abstracting the actual transformation
    logic. The core algorithm is the iteration over our slice, not the concrete transformations.
    This means we are once again building a higher-order function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, our generic type signature tells us that the data type is
    preserved when calling `MapFunc`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Given `A`, we will get `A` back. Notice that the type can be any type as per
    the generic contract. There are no type constraints necessary for our `Map` implementation.
    Let’s look at a demo of multiplying each element in our slice by `2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This function can work with any data type as well. Let’s look at a demo in
    which we apply a transformation to the name of each dog in a list. If the gender
    of the dog is male, we’ll prefix the name with `Mr.`, and if the gender is female,
    we’ll prefix it with `Mrs.`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Running this code would result in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: It’s important to stress that these changes are made to copies of the data,
    and not to the original `Dog` objects.
  prefs: []
  type: TYPE_NORMAL
- en: Transforming from one to many
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An adaptation of the `Map` function is the `Flatmap` function. This function
    will map a `Flatmap`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The implementation of the function we will use is not as efficient but works
    well enough for most purposes. For each element in our slice, we are going to
    call the transformation function, which will transform our single element into
    a slice of elements. Rather than storing this intermediately as a slice of slices,
    we will immediately collapse each slice and store the individual elements consecutively
    in memory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s demonstrate this by implementing an example. For each integer, `N`, in
    a slice, we are going to turn this into a slice of all integers from 0 up to `N`.
    Finally, we are going to return this result as a consecutive slice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of running this code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what we have shown in the image. Every single element is turned into
    a slice, and the slices are then combined. For each element in our input slice,
    this is what the intermediate output would look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This intermediate output then gets combined into a single slice. Next, let’s
    take a look at the final category of functions that play a crucial role in functional
    programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: Data reducing functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final group we are going to take a look at is *reducer* functions. These
    are functions that apply an operation to a container of elements and derive a
    single value from them. Combined with the functions we have seen earlier in this
    chapter, we can compose the majority of our applications. At least, as far as
    data manipulation goes. There are a few different names for functions such as
    this in functional programming. In Haskell, you’ll find functions named `Fold`
    or `Fold` + a suffix, such as `Foldr`, while in some languages they are called
    `Reduce`. We will use the `Reduce` terminology for the remainder of this book.
  prefs: []
  type: TYPE_NORMAL
- en: The first function we will look at is simply `Reduce`. This higher-order function
    abstracts operations to two data elements of the list. It then repeats this operation,
    accumulating the result, until a single answer is retrieved. Just as with the
    `Filter` and `Map` functions, these functions are pure, so the actual input data
    is never changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The abstracted function in this algorithm is a function that takes two values
    of an identical data type and returns a single value of that data. The result
    is achieved by performing some operation on them that the caller of the function
    can provide:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'This function will ultimately be called iteratively for each element in the
    slice, storing the intermediate results and feeding those back into the function:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This sounds like recursion but it is not recursive in the implementation in
    this chapter. We will look at a recursive approach in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we are also handling our edge cases. If we get an empty slice,
    we return the `default-nil` value of whatever type was passed to our function.
    If there is only one item in the slice, no operation can be performed, and, instead,
    we just return that value (by not executing the loop and thus instantly returning
    the result based on `input[0]`).
  prefs: []
  type: TYPE_NORMAL
- en: 'These higher-order function abstracts are how you can combine two elements
    into a single answer. One possible reducer would be `sum reducer`, which adds
    two numbers and returns the result. The following anonymous function is an example
    of this function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This is an anonymous function that we would pass to `Reduce` to perform a summation
    of all elements – but there’s one problem with this approach as it is written
    now. The `Reduce` function is generic and can take `+` operator is not defined
    for every data type. To work around this, we can create a `Sum` function that
    calls the reducer internally but tightens the type signature to only allow numbers
    to be provided as input.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that as there are multiple number data types in Go, we want to be
    able to use the `Sum` function for all of these. This can be achieved by creating
    a custom type constraint for our generic functions. We’ll also consider a `type`
    alias of `Number` as valid – this can be achieved by adding the `~` prefix to
    each type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we can use this type as a type constraint in a generic function such
    as the `Sum` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'There we go – now, we can use this function to return a summation of a slice
    of numbers, whereby a number is any currently supported number-like data type
    in Go that we have defined in our constraint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this function is `10`. Effectively, our reducer has performed
    a sum of `1 + 2 + 3 + 4`. With the reducer in place, we can therefore abstract
    these operations to lists. Adding a similar function to perform the multiplication
    of each element is equally easy to write as the summation function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This implementation works the same way as the `Sum` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Haskell and other functional languages, there are a few different reducer
    implementations provided out of the box, each changing the core algorithm slightly.
    You will find the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Reducers that iterate from the start to the end of a list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reducers that iterate from the end to the start of a list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reducers that start with a default value instead of the first element of a list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reducers that start with a default value and then iterate from the end to the
    start of the list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The reverse reducers (iterating from the end to the start of a list) are left
    as an exercise for the reader to explore independently, but the full code for
    them can be found on GitHub: [https://github.com/PacktPublishing/Functional-Programming-in-Go./blob/main/Chapter6/pkg/reducers.go](https://github.com/PacktPublishing/Functional-Programming-in-Go./blob/main/Chapter6/pkg/reducers.go).
    However, we will take a look at the reducers that have a starting value.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Providing a different starting value would allow us to write a function such
    as `multiple all numbers together, and then finally multiply by two`. We could
    achieve this with some minor modifications to our `Reducer` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: We’re handling similar edge cases as with the original `Reduce` function, but
    one key difference is that we always have a default value to return. We can either
    return it when the slice is empty or return the combination of the starting value
    with the first element in the slice when the slice contains exactly one element.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next example code, we are going to concatenate strings with a comma
    in between each word, but to show off our new `ReduceWithStart` function, we will
    provide a starting value of `first`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'If we run this code, we will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: With these functions in place, let’s take a look at an example in which we combine
    the use of all three categories of functions.
  prefs: []
  type: TYPE_NORMAL
- en: Example – working with airport data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we are going to tie together the functions from this chapter
    to analyze airport data. We need to do some work before we can play around with
    the functions that we have created. First, we need to get the data. On GitHub,
    you can find a `.json` extract under [https://github.com/PacktPublishing/Functional-Programming-in-Go./blob/main/Chapter6/resources/airlines.json](https://github.com/PacktPublishing/Functional-Programming-in-Go./blob/main/Chapter6/resources/airlines.json).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following snippet is the template for the dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'To work with this data, we will recreate the `.json` structure as structs in
    Go. We can use the built-in `.json` tags and deserializers to read this data in
    memory. Our Go struct to work with this data looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a bit verbose, but it’s just a copy of what we could find in the first
    entry of the file. After this, we need to write some code to read this file into
    memory as entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: As in previous chapters, we are using `panic` in this code. It is discouraged,
    but for demonstration purposes, this is fine. This code will read our resource
    file, parse it as `json` based on the struct we have created, and return it as
    a slice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to demo the functions that we have created, this is what our problem statement
    looks like: **write a function that returns the total hours of delays for the
    Seattle airport (airport** **code: SEA)**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on this problem statement, we can see that there are three actions to
    take:'
  prefs: []
  type: TYPE_NORMAL
- en: Filter the data by the airport code SEA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Transform the `MinutesDelayed` field into hours.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sum all the hours.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The order of *steps 2 and 3* could be reversed, but this way, it follows the
    structure in which we have introduced those functions in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: And there we go. We have implemented our use case using three of the functions
    that we have seen in this chapter. As you can tell, whenever we call a function,
    we store the result in a new slice. The original data is therefore never lost,
    and we could still use it for other parts of our function should we choose to
    do so.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw three categories of functions that will help us functionally
    build our programs. First, we saw predicate-based functions, which can either
    filter our data into a subset meeting a requirement or tell us whether or not
    the data in our dataset entirely or partially matches a condition. Next, we saw
    how data can be changed functionally, ways of transforming data whereby our data
    type is guaranteed to remain the same, and functions in which we are also changing
    the type itself.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we looked at reducer functions, which take a list of elements and reduce
    them into a single value. We have demonstrated how these three types of functions
    can be combined in the airport data example.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will dive into recursion and see how this plays a role
    in functional programming, as well as what the performance implications are for
    writing recursive functions in Go.
  prefs: []
  type: TYPE_NORMAL
