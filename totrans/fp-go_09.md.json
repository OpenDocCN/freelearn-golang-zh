["```go\nInput = decipher(cipher(Input))\n```", "```go\nvar (\n    alphabet [26]rune = [26]rune{'a', 'b', 'c', 'd', 'e',\n    'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p',\n    'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n)\nfunc indexOf(r rune, rs [26]rune) (int, bool) {\n    for i := 0; i < len(rs); i++ {\n        if r == rs[i] {\n            return i, true\n        }\n    }\n    return -1, false\n}\ntype CipherService struct {\n    Strategy CipherStrategy\n}\n```", "```go\nfunc (c CipherService) Cipher(input string) string {\n        return c.Strategy.Cipher(input)\n}\nfunc (c CipherService) Decipher(input string) string {\n        return c.Strategy.Decipher(input)\n}\n```", "```go\ntype CipherStrategy interface {\n    Cipher(string) string\n    Decipher(string) string\n}\n```", "```go\ntype CaesarCipher struct {\n    Rotation int\n}\n```", "```go\nfunc (c CaesarCipher) Cipher(input string) string {\n        output := \"\"\n        for _, r := range input {\n                if idx, ok := indexOf(r, alphabet); ok {\n                        idx += c.Rotation\n                        idx = idx % 26\n                        output += string(alphabet[idx])\n                } else {\n                        output += string(r)\n                }\n        }\n        return output\n}\nfunc (c CaesarCipher) Decipher(input string) string {\n        output := \"\"\n        for _, r := range input {\n                if idx, ok := indexOf(r, alphabet); ok {\n                        idx += (26 - c.Rotation)\n                        idx = idx % 26\n                        output += string(alphabet[idx])\n                } else {\n                        output += string(r)\n                }\n        }\n        return output\n}\n```", "```go\ntype AtbashCipher struct {}\nfunc (a AtbashCipher) Cipher(input string) string {\n        output := \"\"\n        for _, r := range input {\n                if idx, ok := indexOf(r, alphabet); ok {\n                        idx = 25 - idx\n                        output += string(alphabet[idx])\n                } else {\n                        output += string(r)\n                }\n        }\n        return output\n}\nfunc (a AtbashCipher) Decipher(input string) string {\n        return a.Cipher(input)\n}\n```", "```go\nfunc main() {\n        svc := CipherService{}\n        svc.Strategy = CaesarCipher{Rotation: 10}\n        fmt.Println(svc.Cipher(\"helloworld\"))\n        svc.Strategy = AtbashCipher{}\n        fmt.Println(svc.Cipher(\"helloworld\"))\n}\n```", "```go\ntype (\n        CipherFunc   func(string) string\n        DecipherFunc func(string) string\n)\ntype CipherService struct {\n    CipherFn   CipherFunc\n    DecipherFn DecipherFunc\n}\nfunc (c CipherService) Cipher(input string) string {\n    return c.CipherFn(input)\n}\nfunc (c CipherService) Decipher(input string) string {\n    return c.DecipherFn(input)\n}\n```", "```go\nfunc CaesarCipher(input string, rotation int) string {\n    output := \"\"\n    for _, r := range input {\n        idx := indexOf(r, alphabet)\n        idx += rotation\n        idx = idx % 26\n        output += string(alphabet[idx])\n    }\n    return output\n}\nfunc CaesarDecipher(input string, rotation int) string {\n    output := \"\"\n    for _, r := range input {\n        idx := indexOf(r, alphabet)\n        idx += (26 - rotation)\n        idx = idx % 26\n        output += string(alphabet[idx])\n    }\n    return output\n}\n```", "```go\nfunc AtbashCipher(input string) string {\n    output := \"\"\n    for _, r := range input {\n        if idx, ok := indexOf(r, alphabet); ok {\n            idx = 25 - idx\n            output += string(alphabet[idx])\n        } else {\n            output += string(r)\n        }\n    }\n    return output\n}\nvar AtbashDecipher = AtbashCipher\n```", "```go\nfunc main() {\n    fpSvc := {\n        CipherFn: func(input string) string {\n            return (input, 10)\n        },\n        DecipherFn: func(input string) string {\n            Return fp.CaesarDecipher(input, 10)\n        },\n    }\n    fmt.Println(fpSvc.Cipher(\"helloworld\"))\n    fpSvc.CipherFn = AtbashCipher\n    fpSvc.DecipherFn = AtbashDeciphe\n    fmt.Println(fpSvc.Cipher(\"helloworld\"))\n    fmt.Println(fpSvc.Decipher(fpSvc.Cipher(\"hello\")))\n}\n```", "```go\ntype CipherLogDecorator struct {\n    CipherI CipherStrategy\n}\n```", "```go\nfunc (c CipherLogDecorator) Cipher(input string) string {\n    log.Printf(\"ciphering: %s\\n\", input)\n    return c.CipherI.Cipher(input)\n}\nfunc (c CipherLogDecorator) Decipher(input string) string {\n    log.Printf(\"deciphering: %s\\n\", input)\n    return c.CipherI.Decipher(input)\n}\n```", "```go\nfunc main() {\n    cld := {\n        CipherI: oop.CaesarCipher{Rotation: 10},\n    }\n    svc := oop.CipherService{Strategy: cld}\n    ciphered := svc.Cipher(\"helloworld\")\n    fmt.Println(ciphered)\n}\n```", "```go\n[ec2-user@ip-172-31-29-49 Chapter9]$ go run main.go\n2023/01/14 15:50:05 ciphering: helloworld\nrovvygybvn\n```", "```go\nfunc LogCipher(cipher CipherFunc) CipherFunc {\n    return func(input string) string {\n        log.Printf(\"ciphering: %s\\n\", input)\n        return cipher(input)\n    }\n}\nfunc LogDecipher(decipher DecipherFunc) DecipherFunc {\n    return func(input string) string {\n        log.Printf(\"deciphering: %s\\n\", input)\n        return decipher(input)\n    }\n}\n```", "```go\nfunc main() {\n    caesarCipher := func(input string) string {\n        return CaesarCipher(input, 10)\n    }\n    caesarDecipher := func(input string) string {\n        return CaesarDecipher(input, 10)\n    }\n    fpSvc := {\n        CipherFn:  LogCipher(caesarCipher),\n        DecipherFn: LogDecipher(caesarDecipher),\n    }\n    fmt.Println(fpSvc.Cipher(\"hello\"))\n}\n```", "```go\nfunc main() {\n    fpSvc := fp.CipherService{\n        CipherFn:   fp.LogCipher(caesarCipher),\n        DecipherFn: fp.LogDecipher(caesarDecipher),\n    }\n    fmt.Println(fpSvc.Cipher(\"hello\"))\n}\n```", "```go\ntype CipherStrategy interface {\n    Cipher(string) string\n    Decipher(string) string\n}\ntype CipherService struct {\n    Strategy CipherStrategy\n}\n```", "```go\nclass CaesarCipher {\n    int rotation;\n    CaesarCipher(int rotation) {\n        this.rotation = rotation;\n    }\n}\nclass CipherService {\n    CaesarCipher cipher = new CaesarCipher();\n    CipherService() {}\n    public String cipher(String input) {\n        String result = \"\";\n        // implement cipher\n        return result;\n    }\n}\n```", "```go\ntype CipherStrategy interface {\n    Cipher(string) string\n    Decipher(string) string\n}\ntype CipherService struct {\n    Strategy CipherStrategy\n}\n```", "```go\ntype (\n    CipherFunc   func(string) string\n    DecipherFunc func(string) string\n)\ntype CipherService struct {\n    CipherFn   CipherFunc\n    DecipherFn DecipherFunc\n}\n```"]