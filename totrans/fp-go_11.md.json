["```go\n//go:noinline\nfunc someFunc() {}\n```", "```go\ngo 1.17\nrequire github.com/elliotchance/pie v1.39.0\n```", "```go\npackage main\nimport (\n        \"fmt\"\n        \"github.com/elliotchance/pie/pie\"\n)\nfunc main() {\n        out := pie.Ints{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}.\n                Filter(func(i int) bool {\n                        return i%2 == 0\n                }).\n                Map(func(i int) int { return i * i })\n        fmt.Printf(\"result: %v\\n\", out)\n}\n```", "```go\n    //go:generate pie Dogs.*\n    type Dogs []Dog\n    type Dog struct {\n        Name string\n        Age  int\n    }\n    ```", "```go\n    // Reverse returns a new copy of the slice with the\n      elements ordered in reverse.\n    // This is useful when combined with Sort to get a\n      descending sort order:\n    //\n    //   ss.Sort().Reverse()\n    //\n    func (ss Dogs) Reverse() Dogs {\n     // Avoid the allocation. If there is one element or\n        less it is already\n     // reversed.\n     if len(ss) < 2 {\n               return ss\n     }\n     sorted := make([]Dog, len(ss))\n     for i := 0; i < len(ss); i++ {\n        sorted[i] = ss[len(ss)-i-1]\n     }\n     return sorted\n    }\n    ```", "```go\n    func (ss Dogs) Filter(condition func(Dog) bool) (ss2\n        Dogs) {\n     for _, s := range ss {\n        if condition(s) {\n     ss2 = append(ss2, s)\n          }\n     }\n     return\n    }\n    func (ss Dogs) Map(fn func(Dog) Dog) (ss2 Dogs) {\n     if ss == nil {\n        return nil\n     }\n     ss2 = make([]Dog, len(ss))\n     for i, s := range ss {\n        ss2[i] = fn(s)\n     }\n     return\n    }\n    ```", "```go\nfunc main() {\n        MyDogs := []pkg.Dog{\n                pkg.Dog{\n                        \"Bucky\",\n                        1,\n                },\n                pkg.Dog{\n                        \"Keeno\",\n                        15,\n                },\n                pkg.Dog{\n                        \"Tala\",\n                        16,\n                },\n                pkg.Dog{\n                        \"Amigo\",\n                        7,\n                },\n        }\n        results := pkg.Dogs(MyDogs).\n                Filter(func(d pkg.Dog) bool {\n                        return d.Age > 10\n                }).SortUsing(func(a, b pkg.Dog) bool {\n                return a.Age < b.Age\n        })\n        fmt.Printf(\"results: %v\\n\", results)\n}\n```", "```go\nresults: [{Keeno 15} {Tala 16}]\n```", "```go\ngo 1.18\nrequire github.com/elliotchance/pie/v2 v2.3.0\n```", "```go\ntype Dog struct {\n        Name string\n        Age  int\n}\n```", "```go\nimport\"github.com/elliotchance/pie/v2\"\nfunc main() {\n        MyDogs := []Dog{\n                Dog{\n                        \"Bucky\",\n                        1,\n                },\n                Dog{\n                        \"Keeno\",\n                        15,\n                },\n                Dog{\n                        \"Tala\",\n                        16,\n                },\n                Dog{\n                        \"Amigo\",\n                        7,\n                },\n        }\n        result := pie.Of(MyDogs).\n                Filter(func(d Dog) bool {\n                        return d.Age > 10\n                }).Map(func(d Dog) Dog {\n                d.Name = strings.ToUpper(d.Name)\n                return d\n        }).\n                SortUsing(func(a, b Dog) bool {\n                        return a.Age < b.Age\n                })\n        fmt.Printf(\"out: %v\\n\", result)\n}\n```", "```go\ngo 1.18\nrequire (\n        github.com/samber/lo v1.37.0\n)\n```", "```go\nfunc main() {\n        result :=\n                lo.Map(lo.Uniq(MyDogs), func(d Dog, i int)\n                    Dog {\n                        d.Name = strings.ToUpper(d.Name)\n                        return d\n                })\n        fmt.Printf(\"%v\\n\", result)\n}\n```", "```go\n        lop \"github.com/samber/lo/parallel\"\n```", "```go\n        result :=\n                lop.Map(lo.Uniq(MyDogs), func(d Dog, i int)\n                    Dog {\n                        d.Name = strings.ToUpper(d.Name)\n                        return d\n                })\n        fmt.Printf(\"%v\\n\", result)\n```", "```go\nfunc main() {\n        maybe := mo.Some(Dog{\"Bucky\", 1})\n        getOrElse := maybe.OrElse(Dog{})\n        fmt.Println(getOrElse)\n}\n```", "```go\n{Bucky 1}\n```", "```go\n        maybe2 := mo.None[Dog]()\n        getOrElse2 := maybe2.OrElse(Dog{\"Default\", -1})\n        fmt.Println(getOrElse2)\n```", "```go\n{Default -1}\n```", "```go\n        ok := mo.Ok(MyDogs[0])\n        result1 := ok.OrElse(Dog{})\n        err1 := ok.Error()\n        fmt.Println(result1, err1)\n        err := errors.New(\"dog not found\")\n        ok2 := mo.Err[Dog](err)\n        result2 := ok2.OrElse(Dog{\"Default\", -1})\n        err2 := ok2.Error()\n        fmt.Println(result2, err2)\n```", "```go\n{Bucky 1} <nil>\n{Default -1} dog not found\n```"]