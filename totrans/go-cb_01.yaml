- en: I/O and File Systems
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: I/O 和文件系统
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将涵盖以下食谱：
- en: Using the common I/O interfaces
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用常见的 I/O 接口
- en: Using the bytes and strings packages
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 bytes 和 strings 包
- en: Working with directories and files
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用目录和文件工作
- en: Working with the CSV format
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CSV 格式工作
- en: Working with temporary files
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用临时文件工作
- en: Working with text/template and HTML/templates
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 text/template 和 HTML/templates 工作与文本
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Go provides excellent support for both basic and complex I/O. The recipes in
    this chapter will explore common Go interfaces to deal with I/O and show how to
    make use of them. The Go standard library frequently uses these interfaces, and
    these interfaces will be used by recipes throughout the book.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Go 为基本和复杂的 I/O 提供了出色的支持。本章中的食谱将探索常见的 Go 接口以处理 I/O，并展示如何使用它们。Go 标准库经常使用这些接口，这些接口将在本书的食谱中广泛使用。
- en: You'll learn how to work with data in memory and in the form of streams. You'll
    see examples of working with files and directories and of working with the CSV
    format. The temporary files recipe discusses a mechanism to work with files without
    the overhead of dealing with name collision and more. Lastly, we'll explore Go
    standard templates for both plain text and HTML.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您将学习如何在内存和流的形式中处理数据。您将看到处理文件和目录的示例，以及处理 CSV 格式的示例。临时文件食谱讨论了一种无需处理名称冲突等开销即可处理文件的方法。最后，我们将探索
    Go 标准模板，包括纯文本和 HTML。
- en: These recipes should lay the foundation for the use of interfaces to represent
    and modify data and should help you think about data in an abstract and flexible
    way.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些食谱应该为使用接口表示和修改数据奠定基础，并帮助您以抽象和灵活的方式思考数据。
- en: Using the common I/O interfaces
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用常见的 I/O 接口
- en: Go provides a number of I/O interfaces used throughout the standard library.
    It is a best practice to make use of these interfaces wherever possible rather
    than passing structs or other types directly. Two powerful interfaces we explore
    in this recipe are the `io.Reader` and `io.Writer` interfaces. These interfaces
    are used throughout the standard library and understanding how to use them will
    make you a better Go developer.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Go 提供了标准库中使用的多个 I/O 接口。尽可能使用这些接口，而不是直接传递结构体或其他类型，这是一个最佳实践。在本食谱中，我们将探索两个强大的接口：`io.Reader`
    和 `io.Writer` 接口。这些接口在标准库中广泛使用，了解如何使用它们将使您成为更好的 Go 开发者。
- en: 'The `Reader` and `Writer` interfaces look like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`Reader` 和 `Writer` 接口看起来像这样：'
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Go also makes it easy to combine interfaces. For example, take a look at the
    following code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Go 还使得组合接口变得容易。例如，看看以下代码：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The recipe will also explore an `io` function called `Pipe()`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 食谱还将探索一个名为 `Pipe()` 的 `io` 函数：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The remainder of this book will make use of these interfaces.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本书剩余部分将使用这些接口。
- en: Getting ready
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Configure your environment according to these steps:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下步骤配置您的环境：
- en: Download and install Go on your operating system at [https://golang.org/doc/install](https://golang.org/doc/install)
    and configure your `GOPATH` environment variable.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的操作系统上下载并安装 Go，并在 [https://golang.org/doc/install](https://golang.org/doc/install)
    配置 `GOPATH` 环境变量。
- en: Open a terminal/console application, navigate to your `GOPATH/src` directory,
    and create a project directory such as `$GOPATH/src/github.com/yourusername/customrepo`.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/控制台应用程序，导航到您的 `GOPATH/src` 目录，并创建一个项目目录，例如 `$GOPATH/src/github.com/yourusername/customrepo`。
- en: All code will be run and modified from this directory.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 所有代码都将从这个目录运行和修改。
- en: 'Optionally, install the latest tested version of the code using the following
    command:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，使用以下命令安装最新测试版本的代码：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How to do it...
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'These steps cover writing and running your application:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行您的应用程序：
- en: From your terminal/console application, create a new directory called `chapter1/interfaces`.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端/控制台应用程序中，创建一个名为 `chapter1/interfaces` 的新目录。
- en: Navigate to that directory.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到该目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter1/interfaces](https://github.com/agtorre/go-cookbook/tree/master/chapter1/interfaces),
    or use this as an exercise to write some of your own code.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter1/interfaces](https://github.com/agtorre/go-cookbook/tree/master/chapter1/interfaces)
    复制测试，或者将其作为练习编写一些您自己的代码。
- en: 'Create a file called `interfaces.go` with the following contents:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `interfaces.go` 的文件，内容如下：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a file called `pipes.go` with the following contents:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `pipes.go` 的文件，内容如下：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Create a new directory named `example`.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录。
- en: Navigate to `example`.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `example`。
- en: 'Create a `main.go` file with the following contents and ensure that you modify
    the interfaces imported to use the path you set up in step 2:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main.go` 文件，并包含以下内容，并确保你修改导入的接口以使用步骤 2 中设置的路径：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Run `go run main.go`.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You may also run these:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行这些：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You should see the following output:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`,
    and ensure all tests pass.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上移动一个目录并运行 `go test`，并确保所有测试通过。
- en: How it works...
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Copy()` function copies between interfaces and treats them like streams.
    Thinking of data as streams has a lot of practical uses, especially when working
    with network traffic or filesystems. The `Copy()` function also creates a multi-writer
    that combines two writer streams and writes to them twice using `ReadSeeker`.
    If a `Reader` interface were used instead rather than seeing `exampleexample`,
    you would only see `example` despite copying to the `MultiWriter` interface twice.
    There's also an example of a buffered write that you might use if your stream
    is not fit into the memory.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`Copy()` 函数在接口之间进行复制，并将它们视为流。将数据视为流有许多实际用途，尤其是在处理网络流量或文件系统时。`Copy()` 函数还创建了一个多写入器，它结合了两个写入流，并使用
    `ReadSeeker` 对它们进行两次写入。如果你使用 `Reader` 接口而不是看到 `exampleexample`，那么即使复制到 `MultiWriter`
    接口两次，你也只会看到 `example`。还有一个缓冲写入的示例，如果你的流不适合内存，你可能需要使用它。'
- en: The `PipeReader` and `PipeWriter` structs implement `io.Reader` and `io.Writer`
    interfaces. They're connected, creating an in-memory pipe. The primary purpose
    of a pipe is to read from a stream while simultaneously writing from the same
    stream to a different source. In essence, it combines the two streams into a pipe.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`PipeReader` 和 `PipeWriter` 结构体实现了 `io.Reader` 和 `io.Writer` 接口。它们是连接的，创建了一个内存管道。管道的主要目的是从流中读取，同时从同一流向不同的源写入。本质上，它将两个流合并成一个管道。'
- en: Go interfaces are a clean abstraction to wrap data that performs common operations.
    This is made apparent when doing I/O operations, and so the `io` package is a
    great resource for learning about interface composition. The `pipe` package is
    often underused but provides great flexibility with thread-safety when linking
    input and output streams.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Go 接口是一个干净的抽象，用于封装执行常见操作的数据。这在进行 I/O 操作时变得明显，因此 `io` 包是学习接口组合的绝佳资源。`pipe` 包通常未被充分利用，但在连接输入和输出流时提供了极大的灵活性，并且具有线程安全性。
- en: Using the bytes and strings packages
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `bytes` 和 `strings` 包
- en: The `bytes` and `string` packages have a number of useful helpers to work with
    and convert between strings and byte types. They allow the creation of buffers
    that work with a number of common I/O interfaces.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`bytes` 和 `string` 包提供了一些有用的辅助函数，用于处理字符串和字节类型之间的转换。它们允许创建与许多通用 I/O 接口一起工作的缓冲区。'
- en: Getting ready
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Refer to the *Getting ready* section's steps in the *Using the common I/O interfaces*
    recipe*.*
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考 *准备工作* 部分的步骤，在 *使用通用 I/O 接口* 菜谱*中*。
- en: How to do it...
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create a new directory called `chapter1/bytestrings`.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的终端/控制台应用程序中，创建一个名为 `chapter1/bytestrings` 的新目录。
- en: Navigate to this directory.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到该目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter1/bytesstrings](https://github.com/agtorre/go-cookbook/tree/master/chapter1/bytesstrings),
    or use this as an exercise to write some of your own code!
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter1/bytesstrings](https://github.com/agtorre/go-cookbook/tree/master/chapter1/bytesstrings)
    复制测试，或者将其用作练习来编写你自己的代码！
- en: 'Create a file called `buffer.go` with the following contents:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `buffer.go` 的文件，并包含以下内容：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create a file called `bytes.go` with the following contents:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `bytes.go` 的文件，并包含以下内容：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Create a file called `string.go` with the following contents:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `string.go` 的文件，并包含以下内容：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Create a new directory named `example`.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录。
- en: Navigate to `example`.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `example`。
- en: 'Create a `main.go` file with the following contents and ensure that you modify
    the interfaces imported to use the path you set up in step 2:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main.go` 文件，并包含以下内容，并确保你修改导入的接口以使用步骤 2 中设置的路径：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Run `go run main.go`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You may also run these:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行这些：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You should see the following output:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`,
    and ensure all tests pass.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上移动一个目录并运行 `go test`，并确保所有测试通过。
- en: How it works...
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The bytes library provides a number of convenience functions when working with
    data. A buffer, for example, is far more flexible than an array of bytes when
    working with stream processing libraries or methods. Once you've created a buffer,
    it can be used to satisfy an `io.Reader` interface so you can take advantage of
    `ioutil` functions to manipulate the data. For steaming applications, you'd probably
    want to use a buffer and a scanner. The `bufio` package comes in handy for these
    cases. Sometimes, using an array or slice is more appropriate for smaller datasets
    or when you have a lot of memory on your machine.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当与数据一起工作时，字节库提供了一些方便的函数。例如，一个缓冲区在处理流处理库或方法时比字节数组更灵活。一旦创建了缓冲区，它就可以用来满足 `io.Reader`
    接口，这样您就可以利用 `ioutil` 函数来操作数据。对于流式应用程序，您可能希望使用缓冲区和扫描器。`bufio` 包在这些情况下非常有用。有时，使用数组或切片对于较小的数据集或当您的机器上有大量内存时更为合适。
- en: Go provides a lot of flexibility in converting between interfaces with these
    basic types--it's relatively simple to convert between strings and bytes. When
    working with strings, the `strings` package provides a number of convenience functions
    to work with, search, and manipulate strings. In some cases, a good regular expression
    may be appropriate, but most of the time, the `strings` and `strconv` packages
    are sufficient. The `strings` package allows you to make a string look like a
    title, split it into an array, or trim whitespace. It also provides a `Reader`
    interface of its own that can be used instead of the `bytes` package reader type.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Go 提供了在基本类型之间进行接口转换的很多灵活性--在字符串和字节之间进行转换相对简单。当与字符串一起工作时，`strings` 包提供了一些方便的函数来处理、搜索和操作字符串。在某些情况下，一个好的正则表达式可能是合适的，但大多数时候，`strings`
    和 `strconv` 包就足够了。`strings` 包允许您使字符串看起来像标题，将其分割成数组，或删除空白。它还提供了一个自己的 `Reader` 接口，可以用作
    `bytes` 包读取器类型的替代。
- en: Working with directories and files
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与目录和文件一起工作
- en: Working with directories and files can be difficult when you switch between
    platforms (Windows and Linux, for example). Go provides cross-platform support
    to work with files and directories in the `os` and `ioutils` packages. We've already
    seen examples of `ioutils`, but now we'll explore how to use them in another way!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在您在平台之间切换时（例如 Windows 和 Linux），与目录和文件一起工作可能会很困难。Go 提供了跨平台支持，在 `os` 和 `ioutils`
    包中处理文件和目录。我们已经看到了 `ioutils` 的例子，但现在我们将探讨如何以另一种方式使用它们！
- en: Getting ready
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Refer to the *Getting ready* section's steps in the *Using the common I/O interfaces*
    recipe*.*
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 参考在 *准备就绪* 部分的步骤，在 *使用通用 I/O 接口* 菜谱中。
- en: How to do it...
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行您的应用程序：
- en: From your terminal/console application, create a new directory called `chapter1/filedirs`.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端/控制台应用程序中，创建一个名为 `chapter1/filedirs` 的新目录。
- en: Navigate to this directory.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到该目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter1/filedirs](https://github.com/agtorre/go-cookbook/tree/master/chapter1/filedirs),
    or use this as an exercise to write some of your own code!
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter1/filedirs](https://github.com/agtorre/go-cookbook/tree/master/chapter1/filedirs)
    复制测试，或者将其作为练习编写一些自己的代码！
- en: 'Create a file called `dirs.go` with the following contents:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `dirs.go` 的文件，内容如下：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create a file called `bytes.go` with the following contents:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `bytes.go` 的文件，内容如下：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Create a new directory named `example`.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录。
- en: Navigate to `example`.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `example`。
- en: 'Create a `main.go` file with the following contents and ensure that you modify
    the `filedirs` package import to use the path you set up in step 2:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含以下内容的 `main.go` 文件，并确保您修改 `filedirs` 包导入以使用步骤 2 中设置的路径：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Run `go run main.go`.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You may also run these:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以运行以下命令：
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You should see the following output:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`,
    and ensure all tests pass.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请向上移动一个目录并运行 `go test`，并确保所有测试都通过。
- en: How it works...
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: If you're familiar with files in Unix, the Go `os` library should feel very
    familiar. You can do basically all common operations--stat a file to collect attributes,
    collect a file with different permissions, and create and modify directories and
    files. We performed a number of manipulations to directories and files and then
    cleaned up after ourselves.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉 Unix 中的文件，Go 的 `os` 库应该非常熟悉。你可以基本上执行所有常见的操作--获取文件属性、收集具有不同权限的文件、创建和修改目录和文件。我们执行了一系列对目录和文件的操纵，并在之后进行了清理。
- en: Working with file objects is very similar to in-memory streams. Files also provide
    a number of convenience functions directly, such as `Chown`, `Stat`, and `Truncate`.
    The easiest way to get comfortable with files is to make use of them. In all the
    previous recipes, we have to be careful to clean up after our programs.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 与文件对象一起工作非常类似于内存流。文件还直接提供了一些便利函数，例如 `Chown`、`Stat` 和 `Truncate`。最简单的方法是利用文件。在所有之前的菜谱中，我们必须小心清理我们的程序。
- en: Working with files is a very common operation when building backend applications.
    Files can be used for configuration, secret keys, as temporary storage, and more.
    Go wraps OS system calls using the `os` package and allows the same functions
    to operate regardless of whether you're using Windows or Unix.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建后端应用程序时，与文件一起工作是件非常常见的事情。文件可用于配置、密钥、临时存储等。Go 使用 `os` 包封装 OS 系统调用，并允许相同的函数在
    Windows 或 Unix 上运行。
- en: Once your file is opened and stored in a `File` struct, it can easily be passed
    into a number of interfaces discussed earlier. All the earlier examples of working
    with buffers and in-memory data streams can be replaced directly with file objects.
    This may be useful for things such as writing all logs to `stderr` and the file
    at the same time with a single write call.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的文件被打开并存储在 `File` 结构体中，它就可以很容易地传递到之前讨论的许多接口中。所有之前处理缓冲区和内存数据流的示例都可以直接替换为文件对象。这可能对将所有日志同时写入
    `stderr` 和文件的情况很有用。
- en: Working with the CSV format
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 CSV 格式
- en: CSV is a common format to manipulate data. It's common, for example, to import
    or export a CSV file into Excel. The Go `CSV` package operates on data interfaces,
    and as a result, it's easy to write data to a buffer, stdout, a file, or to a
    socket. The examples in this section will show some common ways to get data into
    and out of the CSV format.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: CSV 是一种常见的格式来操作数据。例如，导入或导出 CSV 文件到 Excel 是很常见的。Go 的 `CSV` 包在数据接口上操作，因此将数据写入缓冲区、stdout、文件或套接字变得很容易。本节中的示例将展示一些将数据输入和输出到
    CSV 格式的常见方法。
- en: Getting ready
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Refer to the *Getting ready* section's steps in the *Using the common I/O interfaces*
    recipe*.*
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 参考在 *使用通用 I/O 接口* 菜单中的 *准备工作* 部分的步骤*。
- en: How to do it...
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create a new directory called `chapter1/csvformat`.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的终端/控制台应用程序中，创建一个名为 `chapter1/csvformat` 的新目录。
- en: Navigate to this directory.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到该目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter1/csvformat](https://github.com/agtorre/go-cookbook/tree/master/chapter1/csvformat),
    or use this as an exercise to write some of your own code!
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter1/csvformat](https://github.com/agtorre/go-cookbook/tree/master/chapter1/csvformat)
    复制测试，或者将其作为练习编写一些你自己的代码！
- en: 'Create a file called `read_csv.go` with the following contents:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `read_csv.go` 的文件，并包含以下内容：
- en: '[PRE20]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a file called `write_csv.go` with the following contents:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `write_csv.go` 的文件，并包含以下内容：
- en: '[PRE21]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Create a new directory named `example`.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录。
- en: Navigate to `example`.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `example`。
- en: 'Create a `main.go` file with the following contents and ensure that you modify
    the `csvformat` import to use the path you set up in step 2:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，并确保你将 `csvformat` 导入修改为步骤 2 中设置的路径：
- en: '[PRE22]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Run go `run main.go`.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You may also run these:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还可以运行以下命令：
- en: '[PRE23]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You should see the following output:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE24]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`,
    and ensure all tests pass.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上移动一个目录并运行 `go test`，并确保所有测试都通过。
- en: How it works...
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In order to explore reading a CSV format, we first represent our data as a struct.
    It's very useful in Go to format data as a struct, as it makes things such as
    marshaling and encoding relatively simple. Our read example uses movies as our
    data type. The function takes an `io.Reader` interface that holds our CSV data
    as an input. This could be a file or a buffer. We then use that data to create
    and populate a `Movie` struct, including converting the year into an integer.
    We also add options to the CSV parser to use `;` as the separator and `-` as a
    comment line.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为了探索读取 CSV 格式，我们首先将我们的数据表示为一个结构体。在 Go 中，将数据格式化为结构体非常有用，因为它使得诸如序列化和编码等操作相对简单。我们的读取示例使用电影作为数据类型。该函数接受一个
    `io.Reader` 接口作为输入，该接口包含我们的 CSV 数据。这可能是一个文件或一个缓冲区。然后我们使用这些数据来创建和填充一个 `Movie` 结构体，包括将年份转换为整数。我们还向
    CSV 解析器添加了选项，使用 `;` 作为分隔符，`-` 作为注释行。
- en: Next, we explore the same idea, but in reverse. Novels are represented with
    a title and an author. We initialize an array of novels and then write specific
    novels in the CSV format to an `io.Writer` interface. Once again, this can be
    a file, stdout, or a buffer.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们探索相同的概念，但方向相反。小说用标题和作者来表示。我们初始化一个小说数组，然后将特定的小说以 CSV 格式写入一个 `io.Writer`
    接口。同样，这可以是一个文件、stdout 或一个缓冲区。
- en: The `CSV` package is an excellent example of why you'd want to think of data
    flows in Go as implementing common interfaces. It's easy to change the source
    and destination of our data with small one-line tweaks, and we can easily manipulate
    CSV data without using an excessive amount of memory or time. For example, it
    would be possible to read from a stream of data one record at a time and write
    to a separate stream in a modified format one record at a time. Doing this would
    not incur significant memory or processor usage.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`CSV` 包是为什么你想要在 Go 中将数据流视为实现常见接口的绝佳例子。通过简单的单行调整，我们可以轻松更改数据源和目标，并且可以轻松地操作 CSV
    数据，而无需使用过多的内存或时间。例如，可以一次从数据流中读取一条记录，并一次以修改后的格式写入另一个单独的流中。这样做不会产生显著的内存或处理器使用。'
- en: Later, when we explore data pipelines and worker pools, you'll see how these
    ideas can be combined and how to handle these streams in parallel.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在以后探索数据管道和工作者池时，你会看到这些想法如何结合，以及如何并行处理这些流。
- en: Working with temporary files
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用临时文件
- en: We've created and made use of files for a number of examples so far. We've also
    had to manually deal with cleanup, name collision, and more. Temporary files and
    directories are a quicker, simpler way to handle these cases.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建并使用文件处理了多个示例。我们也必须手动处理清理、名称冲突等问题。临时文件和目录是处理这些情况更快、更简单的方法。
- en: Getting ready
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Refer to the *Getting ready* section's steps in the *Using the common I/O interfaces*
    recipe*.*
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 参考在 *使用通用 I/O 接口* 菜单中的 *准备就绪* 部分的步骤*。
- en: How to do it...
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create a new directory called `chapter1/tempfiles`.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的终端/控制台应用程序中，创建一个名为 `chapter1/tempfiles` 的新目录。
- en: Navigate to this directory.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到这个目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter1/tempfiles](https://github.com/agtorre/go-cookbook/tree/master/chapter1/tempfiles),
    or use this as an exercise to write some of your own code!
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter1/tempfiles](https://github.com/agtorre/go-cookbook/tree/master/chapter1/tempfiles)
    复制测试，或者使用这个练习来编写你自己的代码！
- en: 'Create a file called `temp_files.go` with the following contents:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `temp_files.go` 的文件，内容如下：
- en: '[PRE25]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Create a new directory named `example`.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录。
- en: Navigate to `example`.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `example`。
- en: 'Create a `main.go` file with the following contents and ensure that you modify
    the tempfiles imported to use the path you set up in step 2:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main.go` 文件，内容如下，并确保你修改导入的 tempfiles 以使用步骤 2 中设置的路径：
- en: '[PRE26]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Run `go run main.go`.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You may also run these:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行以下命令：
- en: '[PRE27]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You should see (with a different path) the following output:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到（使用不同的路径）以下输出：
- en: '[PRE28]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`,
    and ensure all tests pass.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上移动一个目录并运行 `go test`，并确保所有测试通过。
- en: How it works...
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Creating temporary files and directories can be done using the `ioutil` package.
    Although you must still delete the files yourself, `RemoveAll` is the convention,
    and it will do that for you with only one extra line of code.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `ioutil` 包创建和利用临时文件和目录。虽然你仍然必须自己删除文件，但 `RemoveAll` 是一种约定，它只需一行额外的代码就会为你完成这项工作。
- en: When writing tests, the use of temporary files is highly recommended. It's also
    useful for things such as build artifacts and more. The Go `ioutil` package will
    try and honor the OS preferences by default, but it allows you to fall back to
    other directories if required.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写测试时，强烈建议使用临时文件。对于构建工件等其他事情也很有用。Go 的 `ioutil` 包默认会尝试尊重操作系统偏好，但如果需要，它允许你回退到其他目录。
- en: Working with text/template and HTML/templates
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 text/template 和 HTML/templates 进行工作
- en: Go provides rich support for templates. It is simple to nest templates, import
    functions, represent variables, iterate over data, and so on. If you need something
    more sophisticated than a CSV writer, templates may be a great solution.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Go 为模板提供了丰富的支持。嵌套模板、导入函数、表示变量、遍历数据等操作都非常简单。如果你需要比 CSV 写入器更复杂的功能，模板可能是一个很好的解决方案。
- en: Another application for templates is for websites. When we want to render server-side
    data to the client, templates fit the bill nicely. At first, Go templates can
    appear confusing. This chapter will explore working with templates, collecting
    templates inside of a directory, and working with HTML templates.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 模板的另一个应用是用于网站。当我们想要将服务器端数据渲染到客户端时，模板非常适合。最初，Go 模板可能看起来有些令人困惑。本章将探讨与模板一起工作、收集目录中的模板以及处理
    HTML 模板。
- en: Getting ready
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Refer to the *Getting ready* section's steps in the *Using the common I/O interfaces*
    recipe*.*
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 参考在 *使用常见 I/O 接口* 菜单中的 *准备就绪* 部分的步骤*。
- en: How to do it...
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'These steps cover writing and running your application:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create a new directory called `chapter1/templates`.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建一个名为 `chapter1/templates` 的新目录。
- en: Navigate to this directory.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到这个目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter1/templates](https://github.com/agtorre/go-cookbook/tree/master/chapter1/templates),
    or use this as an exercise to write some of your own!
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter1/templates](https://github.com/agtorre/go-cookbook/tree/master/chapter1/templates)
    复制测试，或者将其作为练习编写一些自己的测试！
- en: 'Create a file called `templates.go` with the following contents:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `templates.go` 的文件，内容如下：
- en: '[PRE29]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create a file called `template_files.go` with the following contents:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `template_files.go` 的文件，内容如下：
- en: '[PRE30]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Create a file called `html_templates.go` with the following content:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `html_templates.go` 的文件，内容如下：
- en: '[PRE31]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Create a new directory named `example`.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录。
- en: Navigate to `example`.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `example`。
- en: 'Create a `main.go` file with the following contents and ensure that you modify
    the tempfiles imported to use the path you set up in step 2:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，并确保你修改了导入的临时文件以使用步骤 2 中设置的路径：
- en: '[PRE32]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Run `go run main.go`.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You may also run these:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行这些：
- en: '[PRE33]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You should see (with a different path) the following output:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出（路径可能不同）：
- en: '[PRE34]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`,
    and ensure all tests pass.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上移动一个目录并运行 `go test`，并确保所有测试都通过。
- en: How it works...
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Go has two template packages--`text/template` and `html/template`. These share
    functionality and a variety of functions. In general, use `html/template` to render
    websites and text/html for everything else. Templates are plain text, but variables
    and functions can be used inside of curly brace blocks.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Go 有两个模板包--`text/template` 和 `html/template`。这两个包共享功能并提供了各种函数。通常，使用 `html/template`
    来渲染网站，对于其他所有内容则使用 text/html。模板是纯文本，但可以在花括号块中使用变量和函数。
- en: The template packages also provide convenience methods to work with files. The
    example creates a number of templates in a temporary directory and then reads
    them all with a single line of code.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 模板包还提供了方便的方法来处理文件。示例在临时目录中创建了一些模板，然后使用一行代码读取它们。
- en: The `html/template` package is a wrapper around the `text/template` package.
    All of the template examples work with the `html/template` package directly, using
    no modification and only changing the import statement. HTML templates provide
    the added benefit of context-aware safety. This prevents things such as JavaScript
    injection.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`html/template` 包是 `text/template` 包的包装器。所有的模板示例都直接使用 `html/template` 包，无需修改，只需更改导入语句。HTML
    模板提供了额外的上下文感知安全性。这防止了诸如 JavaScript 注入等问题。'
- en: The template packages provide what you'd expect out of a modern template library.
    It's easy to combine templates, add application logic, and ensure safety when
    emitting results to HTML and JavaScript.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 模板包提供了您期望的现代模板库所具备的功能。组合模板、添加应用程序逻辑以及确保将结果输出到HTML和JavaScript时的安全性都很简单。
