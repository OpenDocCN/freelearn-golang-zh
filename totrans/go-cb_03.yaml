- en: Data Conversion and Composition
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Converting data types and interface casting
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with numeric data types using math and math/big
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Currency conversions and float64 considerations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using pointers and SQL NullTypes for encoding and decoding
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encoding and decoding Go data
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Struct tags and basic reflection in Go
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing collections via closures
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reasoning about Go's typing system is a critical step to all levels of Go development.
    This chapter will show examples of converting between data types, working with
    very big numbers, working with currency, types of encoding and decoding, including
    base64 and gob, and creating custom collections using closures.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Converting data types and interface casting
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go is typically very flexible in conversion between data. A type may inherit
    another type as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, we can always cast back to the type we inherited as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: There are also convenience functions for converting between numbers with casting,
    between strings and other types using `fmt.Sprint` and with `strconv`, and between
    interfaces and types using reflection. This recipe will explore some of these
    basic conversions that will be used throughout the book.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Go on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install)
    and configure your `GOPATH` environment variable.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a terminal/console application, and navigate to your `GOPATH/src` and create
    a project directory such as `$GOPATH/src/github.com/yourusername/customrepo`.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All the code will be run and modified from this directory.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Optionally, install the latest tested version of the code using the `go get
    github.com/agtorre/go-cookbook/` command.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create and navigate to the `chapter3/dataconv`
    directory.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter3/dataconv](https://github.com/agtorre/go-cookbook/tree/master/chapter3/dataconv)
    or use this as an exercise to write some of your own code.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `dataconv.go` with the following contents:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a file called `strconv.go` with the following contents:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a file called `interfaces.go` with the following contents:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Create a new directory named `example`.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `example`.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file `main.go` with the following contents. Be sure to modify the
    `dataconv` import to use the path you set up in step 2:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Run `go run main.go`.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You could also run:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You should see the following output:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe demonstrates casting between types by wrapping them in a new type,
    using the `strconv` package, and by using interface reflection. These methods
    allow Go developer to quickly convert between various abstract Go types. will
    both reveal errors during compilation, but reflection can be more tricky. If you
    reflect incorrectly to an unsupported type, you'll cause a panic. Switching on
    type is a way to generalize and is also demonstrated in this recipe.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱通过使用新的类型包装它们、使用 `strconv` 包以及使用接口反射来演示类型之间的转换。这些方法允许 Go 开发者快速在多种抽象的 Go 类型之间进行转换。这些方法在编译过程中都会揭示错误，但反射可能更加复杂。如果你错误地反射到一个不受支持的类型，你将导致程序崩溃。根据类型进行切换是一种通用方法，本食谱中也进行了演示。
- en: Conversion becomes important for packages such as `math`, which operate on float64
    exclusively.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像 `math` 这样的包，转换变得很重要，因为它们仅使用 float64 进行操作。
- en: Working with numeric data types using math and math/big
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 math 和 math/big 进行数值数据类型的操作
- en: The `math` and `math/big` packages focus on exposing more complex mathematical
    operations to the Go language, such as `Pow`, `Sqrt`, and `Cos`. The `math` package
    itself operates predominately on float64 unless a function says otherwise. The
    `math/big` package is for numbers that are too large to represent in a 64-bit
    value. This recipe will show some basic usage of the `math` package and demonstrate
    `math/big` for fibonacci.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`math` 和 `math/big` 包专注于向 Go 语言暴露更复杂的数学运算，例如 `Pow`、`Sqrt` 和 `Cos`。`math` 包本身主要在
    float64 上操作，除非函数有其他说明。`math/big` 包用于表示超过 64 位值的大数。本食谱将展示 `math` 包的一些基本用法，并演示 `math/big`
    在斐波那契数列中的应用。'
- en: Getting ready
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Refer to the steps given in the *Getting ready* section of the *Converting data
    types and interface casting* recipe.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 参考在 *转换数据类型和接口转换* 食谱的 *准备就绪* 部分中给出的步骤。
- en: How to do it...
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create and navigate to the `chapter3/math`
    directory.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建并导航到 `chapter3/math` 目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter3/math](https://github.com/agtorre/go-cookbook/tree/master/chapter3/math)
    or use this as an exercise to write some of your own code.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter3/math](https://github.com/agtorre/go-cookbook/tree/master/chapter3/math)
    复制测试或将其作为练习编写一些自己的代码。
- en: 'Create a file called `math.go` with the following contents:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `math.go` 的文件，内容如下：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a file called `fib.go` with the following contents:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `fib.go` 的文件，内容如下：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Create a new directory named `example`.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录。
- en: Navigate to `example`.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `example`。
- en: 'Create a file `main.go` with the following contents; be sure to modify the
    `math` import to use the path you set up in step 2:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，内容如下；确保将 `math` 导入修改为步骤 2 中设置的路径：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Run `go run main.go`.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You could also run:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You should see the following output:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，向上移动一个目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `math` package makes it possible to do complex mathematical operations in
    Go. This recipe should be used in conjunction with this package for doing complex
    floating point operations and converting between types as needed. It's worth noting
    that even with float64, there may still be rounding errors for certain floating
    point numbers, and the following recipe demonstrates some techniques for dealing
    with this.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`math` 包使得在 Go 中执行复杂的数学运算成为可能。本食谱应与该包结合使用，以执行复杂的浮点运算和根据需要转换类型。值得注意的是，即使使用 float64，某些浮点数仍然可能存在舍入误差，以下食谱展示了处理这些误差的一些技术。'
- en: The `math/big` section showcases a recursive Fibonacci sequence. If you modify
    `main.go` to loop well beyond 10, you'll quickly overflow int64 if it was used
    instead of `big.Int`. This package also has helper methods to convert between
    the big types to other types.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`math/big` 部分展示了递归的斐波那契数列。如果你修改 `main.go` 以超过 10 的循环，如果你使用 `int64` 而不是 `big.Int`，你将很快溢出。此包还具有将大类型转换为其他类型的一些辅助方法。'
- en: Currency conversions and float64 considerations
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 货币转换和 float64 考虑事项
- en: Working with currency is always a tricky process. It can be tempting to represent
    money as a float64, but this can result in some pretty tricky (and wrong) rounding
    errors when doing calculations. For this reason, it's preferable to think of money
    in terms of cents and store it as an Int64.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 处理货币总是一个棘手的过程。可能会诱使你将金钱表示为 float64，但在进行计算时，这可能会导致一些相当棘手（且错误）的舍入误差。因此，最好将金钱视为分，并以
    Int64 存储它。
- en: When collecting user input from forms, the command line, or other sources, money
    is usually represented in dollar form. For this reason, it's best to treat it
    as a string and convert that string directly to pennies without floating point
    conversions. This recipe will present ways to convert a string representation
    of currency into an int64 (pennies) and back again.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当从表单、命令行或其他来源收集用户输入时，金钱通常以美元形式表示。因此，最好将其视为字符串，并直接将该字符串转换为便士，而不进行浮点数转换。这个食谱将展示如何将货币的字符串表示转换为
    int64（便士）以及再次转换回来。
- en: Getting ready
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Refer to the steps given in the *Getting ready* section of the *Converting data
    types and interface casting* recipe*.*
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 参考转换数据类型和接口转换食谱*中*的 *准备就绪* 部分的步骤。
- en: How to do it...
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create and navigate to the `chapter3/currency`
    directory.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的终端/控制台应用程序中，创建并导航到 `chapter3/currency` 目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter3/currency](https://github.com/agtorre/go-cookbook/tree/master/chapter3/currency)
    or use this as an exercise to write some of your own.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter3/currency](https://github.com/agtorre/go-cookbook/tree/master/chapter3/currency)
    复制测试或将其作为练习编写一些自己的测试。
- en: 'Create a file called `dollars.go` with the following contents:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `dollars.go` 的文件，并包含以下内容：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a file called `pennies.go` with the following contents:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `pennies.go` 的文件，并包含以下内容：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Create a new directory named `example`.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录。
- en: Navigate to `example`.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `example`。
- en: 'Create a file called `main.go` with the following contents; be sure to modify
    the `currency` import to use the path you set up in step 2:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，并包含以下内容；请确保将 `currency` 导入修改为你在第 2 步中设置的路径：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Run `go run main.go`.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You could also run this:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行以下操作：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You should see the following output:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上移动一个目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何工作...
- en: This recipe makes use of the `strconv` and `strings` packages to convert currency
    between dollars in string format and pennies in int64\. It does this without even
    converting to a float64 other than as validation.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱使用了 `strconv` 和 `strings` 包来在美元字符串格式和 int64 的便士之间转换货币。它甚至不需要将值转换为 float64，除了作为验证。
- en: The `strconv.ParseInt` and `strconv.FormatInt` functions are very useful for
    converting to and from int64 and strings. We also made use of the fact that Go
    strings can easily be appended and sliced as needed.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`strconv.ParseInt` 和 `strconv.FormatInt` 函数在将 int64 和字符串相互转换时非常有用。我们还利用了 Go
    字符串可以轻松地按需追加和切片的事实。'
- en: Using pointers and SQL NullTypes for encoding and decoding
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用指针和 SQL NullTypes 进行编码和解码
- en: When you encode or decode into an object in Go, types that are not explicitly
    set will be set to their default values. Strings will default to empty string
    "", and integers will default to `0` as an example. Normally, this is fine, unless
    `0` means something for your API or service that is consuming the user input or
    returning it.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在 Go 中编码或解码到对象时，未显式设置的类型将使用其默认值。例如，字符串将默认为空字符串 ""，整数将默认为 `0`。通常情况下，这是可以的，除非
    `0` 对于你的 API 或服务来说意味着消耗用户输入或返回输入。
- en: In addition, if you use struct tags such as `json omitempty`, 0 values will
    be ignored even if they're valid. Another example of this is `Null` that returns
    from SQL. What value best represents `Null` for an `Int`? This recipe will explore
    some of the ways Go developers deal with this issue.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你使用如 `json omitempty` 这样的结构标签，即使它们是有效的，0 值也会被忽略。另一个例子是 SQL 返回的 `Null`。对于
    `Int`，哪个值最能代表 `Null`？这个食谱将探讨一些 Go 开发者处理这个问题的方法。
- en: Getting ready
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Refer to the steps given in the *Getting ready* section of the *Converting data
    types and interface casting* recipe*.*
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 参考转换数据类型和接口转换食谱*中*的 *准备就绪* 部分的步骤。
- en: How to do it...
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create and navigate to the `chapter3/nulls`
    directory.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter3/nulls](https://github.com/agtorre/go-cookbook/tree/master/chapter3/nulls)
    or use this as an exercise to write some of your own code.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `base.go` with the following contents:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Create a file called `pointer.go` with the following contents:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Create a file called `nullencoding.go` with the following contents:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Create a new directory named `example`.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `example`.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `main.go` with the following contents; be sure to modify
    the `nulls` import to use the path you set up in step 2:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Run `go run main.go`.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You could also run this:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You should see the following output:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Switching from a value to a pointer is a quick way to express null values when
    marshaling and unmarshaling. It can be a bit unclear on setting these values as
    you can't assign them directly to a pointer `-- *a := 1`, but otherwise it's a
    flexible way of dealing with it.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: This recipe also demonstrated an alternative method using the `sql.NullInt64`
    type. This is normally used with SQL and valid is set if anything other than `Null`
    is returned, otherwise it sets `Null`. We added a `MarshalJSON` and `UnmarshallJSON`
    method to allow this type to interact with the `JSON` package and we chose to
    use a pointer so that `omitempty` would continue to work as expected.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Encoding and decoding Go data
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go features a number of alternative encoding types aside from JSON, TOML, and
    YAML. These are largely meant for transporting data between Go processes with
    things such as wire protocols and RPC or in cases where some character formats
    are restricted.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will explore encoding and decoding gob format and base64\. The later
    chapters will explore protocols such as GRPC.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the steps given in the *Getting ready* section of the *Converting Data
    Types and Interface Casting* recipe*.*
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create and navigate to a the `chapter3/encoding`
    directory.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter3/encoding](https://github.com/agtorre/go-cookbook/tree/master/chapter3/encoding)
    or use this as an exercise to write some of your own.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `gob.go` with the following contents:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create a file called `base64.go` with the following contents:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Create a new directory named `example`.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `example`.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `main.go` with the following contents; be sure to modify
    the `encoding` import to use the path you set up in step 2:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Run `go run main.go`.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You could also run this:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You should see the following output:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上移动一个目录并运行 `go test`。确保所有测试通过。
- en: How it works...
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Gob encoding is a streaming format built with Go data types in mind. It is most
    efficient when sending and encoding many consecutive items. For a single item,
    other encoding formats such as JSON are potentially more efficient and portable.
    Despite this, gob encoding makes it simple to marshal large complex structs and
    reconstruct them in a separate process. Although it wasn't shown here, gob can
    also operate on custom types or unexported types with custom `MarshalBinary` and
    `UnmarshalBinary` methods.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Gob 编码是一种考虑 Go 数据类型构建的流格式。在发送和编码许多连续项时效率最高。对于单个项，其他编码格式，如 JSON，可能更高效且更便携。尽管如此，gob
    编码使得对大型复杂结构体的序列化和在单独进程中重建变得简单。尽管这里没有展示，gob 还可以对具有自定义 `MarshalBinary` 和 `UnmarshalBinary`
    方法的自定义类型或未导出类型进行操作。
- en: Base64 encoding is useful for communicating via URLs in `GET` requests or for
    generating a string representation encoding of binary data. Most languages can
    support this format and unmarshal the data on the other end. As a result, it's
    common to encode things such as JSON payloads in cases where the JSON format is
    not supported.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Base64 编码在通过 `GET` 请求通过 URL 进行通信或生成二进制数据的字符串表示编码时很有用。大多数语言都可以支持这种格式并在另一端解包数据。因此，在
    JSON 格式不受支持的情况下，通常会将 JSON 负载编码。
- en: Struct tags and basic reflection in Go
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go 中的结构体标签和基本反射
- en: Reflection is a complicated topic that can't really be covered in a single recipe.
    However, a practical application of reflection is dealing with struct tags. At
    their core, struct tags are just key-value strings. You lookup the key, then deal
    with the value. As you can imagine, for something like JSON marshal and unmarshal,
    there's a lot of complexity for dealing with these values.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 反射是一个复杂的话题，无法在一个食谱中完全涵盖。然而，反射的一个实际应用是处理结构体标签。在本质上，结构体标签只是键值字符串。你查找键，然后处理值。正如你可以想象的那样，对于像
    JSON 序列化和反序列化这样的操作，处理这些值有很多复杂性。
- en: The `reflect` package is designed for interrogating and understanding interface
    objects. It has helper methods to look at kind of structs, values, struct tags,
    and more. If you need something beyond the basic interface conversion like at
    the beginning of this chapter, this is the package you should look at.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`reflect` 包旨在查询和理解接口对象。它有一些辅助方法来查看结构体的类型、值、结构体标签等。如果你需要像本章开头那样进行基本的接口转换之外的操作，你应该查看这个包。'
- en: Getting ready
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Refer to the steps given in the *Getting ready* section of the *Converting Data
    Types and Interface Casting* recipe*.*
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 参考转换数据类型和接口转换食谱*中*的 *准备工作* 部分的步骤。
- en: How to do it...
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'These steps cover writing and running your application:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create and navigate to the `chapter3/tags`
    directory .
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建并导航到 `chapter3/tags` 目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter3/tags](https://github.com/agtorre/go-cookbook/tree/master/chapter3/tags)
    or use this as an exercise to write some of your own code.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter3/tags](https://github.com/agtorre/go-cookbook/tree/master/chapter3/tags)
    复制测试或将其用作练习来编写你自己的代码。
- en: 'Create a file called `serialize.go` with the following contents:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `serialize.go` 的文件，并包含以下内容：
- en: '[PRE29]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create a file called `deserialize.go` with the following contents:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `deserialize.go` 的文件，并包含以下内容：
- en: '[PRE30]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Create a file called `tags.go` with the following contents:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `tags.go` 的文件，并包含以下内容：
- en: '[PRE31]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Create a new directory named `example`.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录。
- en: Navigate to `example`.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `example`。
- en: 'Create a file called `main.go` with the following contents; be sure to modify
    the `tags` import to use the path you set up in step 2:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，并包含以下内容；确保将 `tags` 导入修改为你在步骤 2 中设置的路径：
- en: '[PRE32]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Run `go run main.go`.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You could also run this:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行这个：
- en: '[PRE33]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You should see the following output:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE34]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上移动一个目录并运行 `go test`。确保所有测试通过。
- en: How it works...
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'This recipe makes a string serialization format that takes a struct, and serializes
    all the string fields into a parseable format. This recipe doesn''t deal with
    certain edge cases; in particular, strings must not contain `:` or `;` characters.
    Here is a summary of its behavior:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方创建了一种字符串序列化格式，它接受一个结构体，并将所有字符串字段序列化为可解析的格式。这个配方不处理某些边缘情况；特别是，字符串不得包含 `:`
    或 `;` 字符。以下是其行为摘要：
- en: If a field is a string, it will be serialized/deserialized.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果字段是字符串，它将被序列化/反序列化。
- en: If a field is not a string, it will be ignored.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果字段不是字符串，它将被忽略。
- en: If the struct tag of the field contains the serialize"key", then key will be
    the returned serialized/deserialized environment.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果字段的 struct 标签包含 `serialize"key"`，则键将是返回的序列化/反序列化环境。
- en: Duplicates are not handled.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复项不会被处理。
- en: If a struct tag is not specified, the field name is used instead.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有指定结构体标签，则使用字段名。
- en: If serialize `-` is specified, the field is ignored even if it's a string.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果指定了 `serialize `-`，即使字段是字符串，该字段也会被忽略。
- en: Some other things to note are that reflection does not work entirely with non-exported
    values.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的其他事项是，反射在非导出值上并不完全起作用。
- en: Implementing collections via closures
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过闭包实现集合
- en: If you've been working with functional or dynamic programming languages, you
    may feel that `for` loops and `if` statements produce verbose code. Functional
    constructs such as `map` and `filter` for processing lists can be useful and make
    code appear more readable. However, in Go, these types are not in the standard
    library and can be difficult to generalize without generics or very complex reflection
    and use of empty interfaces. This recipe will provide you with some basic examples
    of implementing collections using Go closures.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你一直在使用函数式或动态编程语言，你可能会觉得 `for` 循环和 `if` 语句会产生冗长的代码。用于处理列表的函数式结构，如 `map` 和 `filter`，可能很有用，并使代码看起来更易读。然而，在
    Go 中，这些类型不在标准库中，并且没有泛型或非常复杂的反射和空接口的使用，很难泛化。这个配方将为你提供一些使用 Go 闭包实现集合的基本示例。
- en: Getting ready
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Refer to the steps given in the *Getting ready* section of the *Converting Data
    Types and Interface Casting* recipe*.*
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 参考配方 *Converting Data Types and Interface Casting* 中的 *Getting ready* 部分给出的步骤*.*。
- en: How to do it...
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create and navigate to the `chapter3/collections`
    directory.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建并导航到 `chapter3/collections` 目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter3/collections](https://github.com/agtorre/go-cookbook/tree/master/chapter3/collections)
    or use this as an exercise to write some of your own code.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter3/collections](https://github.com/agtorre/go-cookbook/tree/master/chapter3/collections)
    复制测试或将其用作练习编写一些你自己的代码。
- en: 'Create a file called `collections.go` with the following contents:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `collections.go` 的文件，内容如下：
- en: '[PRE35]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Create a file called `functions.go` with the following contents:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `functions.go` 的文件，内容如下：
- en: '[PRE36]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Create a new directory named `example`.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录。
- en: Navigate to `example`.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `example`。
- en: 'Create a file called `main.go` with the following contents; be sure to modify
    the `collections` import to use the path you set up in step 2:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，内容如下；请确保将 `collections` 导入修改为你在步骤 2 中设置的路径：
- en: '[PRE37]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Run `go run main.go`.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You could also run this:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行以下操作：
- en: '[PRE38]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'You should see the following output:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE39]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上移动一个目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Closures in Go are very powerful. Although our collections functions are not
    generic, they're relatively small and easily applied with a variety of functions
    to our `WorkWith` struct. You may notice from looking at this that we're not returning
    errors anywhere. The idea of these functions are that they're pure. There are
    no side effects to the original list, except that we choose to write over it after
    each call.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Go 中的闭包非常强大。尽管我们的集合函数不是泛型的，但它们相对较小，并且可以很容易地应用于我们的 `WorkWith` 结构体的各种函数。你可能注意到，我们在任何地方都没有返回错误。这些函数的想法是它们是纯的。除了我们在每次调用后选择覆盖它之外，原始列表没有副作用。
- en: If you need to apply layers of modification to a list or struct of lists, this
    pattern can save you a lot of confusion and makes testing very straightforward.
    It is also possible to chain maps and filters together for a very expressive coding
    style.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要将修改层应用于列表或列表的列表结构，这种模式可以帮你节省很多困惑，并使测试变得非常直接。同时，也可以将映射和过滤器链式连接起来，以实现非常表达性的编码风格。
