- en: Error Handling in Go
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go 中的错误处理
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将涵盖以下配方：
- en: Handling errors and the Error interface
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理错误和错误接口
- en: Using the pkg/errors package and wrapping errors
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 pkg/errors 包和包装错误
- en: Using the log package and understanding when to log errors
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用日志包并了解何时记录错误
- en: Structured logging with the apex and logrus packages
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 apex 和 logrus 包进行结构化日志记录
- en: Logging with the context package
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用上下文包进行日志记录
- en: Using package-level global variables
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用包级全局变量
- en: Catching panics for long running processes
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获长时间运行进程的恐慌
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Error handling is important for even the most basic Go program. Errors in Go
    implement the `Error` interface and must be dealt with at every layer of the code.
    Go errors do not work like exceptions, and unhandled errors can cause enormous
    problems. You should strive to handle and consider errors whenever they occur.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 错误处理对于最基本的 Go 程序也很重要。Go 中的错误实现了 `Error` 接口，必须在代码的每一层进行处理。Go 错误不像异常那样工作，未处理的错误可能导致巨大的问题。您应该努力在错误发生时处理和考虑错误。
- en: This chapter also covers logging since it's common to log whenever an actual
    error occurs. We'll also investigate wrapping errors so that a given error has
    the appropriate amount of context for the calling function.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还涵盖了日志记录，因为每当实际发生错误时，通常都会进行日志记录。我们还将研究包装错误，以便给定的错误具有适当的上下文，以便调用函数。
- en: Handling errors and the Error interface
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理错误和错误接口
- en: 'The `Error` interface is a pretty small and simple interface:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`Error` 接口是一个非常小且简单的接口：'
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This interface is elegant because it's simple to make anything to satisfy it.
    Unfortunately, this also creates confusion for packages that need to take certain
    actions depending on the error received.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个接口很优雅，因为它简单，任何东西都可以满足它。不幸的是，这也为需要根据接收到的错误执行某些操作的包造成了混淆。
- en: There are a number of ways to create errors in Go, this recipe will explore
    the creation of basic errors, errors that have assigned values or types, and of
    a custom error using a struct.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Go 中创建错误有多种方式，这个配方将探讨创建基本错误、具有分配的值或类型的错误以及使用结构体创建的自定义错误。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Configure your environment according to these steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下步骤配置您的环境：
- en: Download and install Go on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install),
    and configure your `GOPATH` environment variable.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://golang.org/doc/install](https://golang.org/doc/install) 在您的操作系统上下载并安装
    Go，并配置您的 `GOPATH` 环境变量。
- en: Open a terminal/console application.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/控制台应用程序。
- en: Navigate to your `GOPATH/src` and create a project directory, for example, `$GOPATH/src/github.com/yourusername/customrepo`.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的 `GOPATH/src` 并创建一个项目目录，例如，`$GOPATH/src/github.com/yourusername/customrepo`。
- en: All code will be run and modified from this directory.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 所有代码都将从这个目录运行和修改。
- en: Optionally, install the latest tested version of the code using the `go get
    github.com/agtorre/go-cookbook/` command.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，使用 `go get github.com/agtorre/go-cookbook/` 命令安装代码的最新测试版本。
- en: How to do it...
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行您的应用程序：
- en: From your terminal/console application, create the `chapter4/basicerrors` directory
    and navigate to it.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的终端/控制台应用程序中创建 `chapter4/basicerrors` 目录并导航到它。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter4/basicerrors](https://github.com/agtorre/go-cookbook/tree/master/chapter4/basicerrors)
    or use this as an exercise to write some of your own code.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter4/basicerrors](https://github.com/agtorre/go-cookbook/tree/master/chapter4/basicerrors)
    复制测试或将其用作练习编写一些自己的代码。
- en: 'Create a file called `basicerrors.go` with the following content:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `basicerrors.go` 的文件，内容如下：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a file called `custom.go` with the following content:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `custom.go` 的文件，内容如下：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录并导航到它。
- en: 'Create a `main.go` file with the following content. Ensure that you modify
    the `basicerrors` import to use the path you set up in step 2:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main.go` 文件，内容如下。确保您修改 `basicerrors` 导入以使用步骤 2 中设置的路径：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Run `go run main.go`.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You may also run:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以运行：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You should now see the following output:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该看到以下输出：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请向上移动一个目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Whether you use `errors.New`, `fmt.Errorf`, or a custom error, the most important
    thing is that you should never leave errors unhandled in your code. These different
    methods of defining errors give a lot of flexibility. You can, for example, put
    extra functions in your struct to further interrogate an error and cast the interface
    to your error type in the calling function to get some added functionality.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你使用`errors.New`、`fmt.Errorf`还是自定义错误，最重要的是你绝对不应该在你的代码中留下未处理的错误。这些定义错误的不同方法提供了很大的灵活性。例如，你可以在你的结构体中添加额外的函数来进一步调查错误，并在调用函数中将接口转换为你的错误类型以获得一些附加功能。
- en: The interface itself is very simple and the only requirement is that you return
    a valid string. Connecting this to a struct may be useful for some high-level
    applications that have consistent error handling throughout but want to work nicely
    with other applications.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 该接口本身非常简单，唯一的要求是你返回一个有效的字符串。对于一些具有一致错误处理但希望与其他应用程序良好协作的高级应用程序，将此与结构体连接起来可能很有用。
- en: Using the pkg/errors package and wrapping errors
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pkg/errors包和错误包装
- en: 'The `errors` package located at `github.com/pkg/errors` is a drop in replacement
    for the standard Go `errors` package. In addition, it provides some very useful
    functionality for wrapping and handling errors. The typed and declared errors
    in the preceding recipe are a good example--they can be useful to add additional
    information to an error, but wrapping it in the standard way will change its type
    and break type assertion:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 位于`github.com/pkg/errors`的`errors`包是标准Go `errors`包的直接替代品。此外，它提供了一些非常实用的功能，用于包装和处理错误。前面菜谱中提到的类型化和声明性错误是一个很好的例子——它们可以用来向错误添加额外信息，但按照标准方式包装它将改变其类型并破坏类型断言：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This recipe will demonstrate how to use the `pkg/errors` package to add annotation
    to errors throughout your code.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱将演示如何使用`pkg/errors`包在你的代码中对错误添加注释。
- en: Getting ready
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备中
- en: 'Configure your environment according to these steps:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下步骤配置你的环境：
- en: Refer to the *Getting ready* section of the *Handling errors and the Error interface*
    recipe in this chapter.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 参考本章中“处理错误和错误接口”菜谱的“准备就绪”部分。
- en: Run the `go get github.com/pkg/errors/` command.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go get github.com/pkg/errors/`命令。
- en: How to do it...
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create the `chapter4/errwrap` directory
    and navigate to it.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建名为`chapter4/errwrap`的目录并导航到它。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter4/errwrap](https://github.com/agtorre/go-cookbook/tree/master/chapter4/errwrap)
    or use this as an exercise to write some of your own code.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://github.com/agtorre/go-cookbook/tree/master/chapter4/errwrap](https://github.com/agtorre/go-cookbook/tree/master/chapter4/errwrap)复制测试用例，或者将其作为练习编写你自己的代码。
- en: 'Create a file called `errwrap.go` with the following content:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`errwrap.go`的文件，并包含以下内容：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a file called `unwrap.go` with the following content:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`unwrap.go`的文件，并包含以下内容：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录并导航到它。
- en: 'Create a `main.go` file with the following content. Ensure that you modify
    the `errwrap` import to use the path you set up in step 2:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`main.go`文件，并包含以下内容。确保你修改`errwrap`导入以使用步骤2中设置的路径：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Run `go run main.go`.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You may also run the following:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还可以运行以下命令：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You should now see the following output:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该看到以下输出：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试用例，请向上移动一个目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `pkg/errors` package is a very useful tool. It makes sense to wrap basically
    every returned error using this package to provide extra context in logging and
    error debugging. It''s flexible enough to print the entire stack traces when an
    error occurs or to just add a prefix to your errors when printing them. It can
    also clean up code since a wrapped nil returns a `nil` value. For example:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`pkg/errors`包是一个非常实用的工具。对于基本上每个返回的错误使用此包来提供额外的日志记录和错误调试的上下文是有意义的。它足够灵活，可以在发生错误时打印整个堆栈跟踪，或者只是在打印错误时添加一个前缀。它还可以清理代码，因为包装后的nil返回一个`nil`值。例如：'
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In some cases, this can save you from having to check if an error is `nil` first
    before simply returning it. This recipe demonstrated how to use the package to
    wrap and unwrap errors, as well as basic stack trace functionality. The documentation
    for the package also provides some other useful examples such as printing partial
    stacks. Dave Cheney, the author of this library, has also written a number of
    helpful blogs and given talks on the subject, go to [https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully](https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully)
    to know more.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，这可以让你在直接返回错误之前，无需首先检查错误是否为 `nil`。本食谱演示了如何使用该包来包装和展开错误，以及基本的堆栈跟踪功能。该包的文档还提供了一些其他有用的示例，例如打印部分堆栈。本库的作者
    Dave Cheney 还撰写了许多有用的博客，并就这一主题发表了演讲，请访问 [https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully](https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully)
    了解更多信息。
- en: Using the log package and understanding when to log errors
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用日志包和理解何时记录错误
- en: Logging should typically occur when an error is the final result. In other words,
    it's useful to log when something exceptional or unexpected occurs. It might also
    be appropriate, if you use a log that provides log levels, to sprinkle debug or
    info statements at key parts of your code to quickly debug issues during development.
    Too much logging will make it difficult to find anything useful, but not enough
    logging can result in broken systems with no insight into the root cause. This
    recipe will demonstrate the use of the default Go `log` package and some useful
    options and showcase when a log should probably occur.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 日志记录通常发生在错误是最终结果时。换句话说，当发生异常或意外情况时，记录日志是有用的。如果你使用提供日志级别的日志，那么在代码的关键部分添加调试或信息语句，可以在开发过程中快速调试问题也是合适的。过多的日志记录会使找到任何有用的信息变得困难，但日志记录不足可能导致系统崩溃，无法洞察根本原因。本食谱将演示默认的
    Go `log` 包的使用和一些有用的选项，并展示何时可能需要记录日志。
- en: Getting ready
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Configure your environment according to these steps:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下步骤配置你的环境：
- en: Refer to the *Getting ready* section of the *Handling errors and the Error interface*
    recipe in this chapter.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 参考本章中“处理错误和 Error 接口”食谱的“准备工作”部分。
- en: Run the `go get github.com/pkg/errors/` command.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go get github.com/pkg/errors/` 命令。
- en: How to do it...
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create the `chapter4/log` directory
    and navigate to it.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建 `chapter4/log` 目录并导航到它。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter4/log](https://github.com/agtorre/go-cookbook/tree/master/chapter4/log)
    or use this as an exercise to write some of your own code.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter4/log](https://github.com/agtorre/go-cookbook/tree/master/chapter4/log)
    复制测试或将其作为练习编写一些自己的代码。
- en: 'Create a file called `log.go` with the following content:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `log.go` 的文件，内容如下：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a file called `error.go` with the following content:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `error.go` 的文件，内容如下：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录并导航到它。
- en: 'Create a `main.go` file with the following content. Ensure that you modify
    the `log` import to use the path you set up in step 2:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main.go` 文件，内容如下。确保你修改 `log` 导入以使用步骤 2 中设置的路径：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Run `go run main.go`.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You may also run:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You should see the following output:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上移动一个目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You can either initialize a logger and pass it around using `log.NewLogger()`,
    or use the `log` package level logger to log messages. The log file in this recipe
    does the former and error does the latter. It also shows when logging might make
    sense after an error has reached its final destination, otherwise it's likely
    that you'll log multiple times for one event.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以初始化一个日志记录器并使用 `log.NewLogger()` 将其传递，或者使用 `log` 包级别的日志记录器来记录消息。本食谱中的日志文件执行前者，而错误执行后者。它还展示了在错误达到最终目的地后何时记录日志可能是有意义的，否则你可能会为同一事件记录多次。
- en: There are a few issues with this approach. For one, you may have additional
    context in one of the intermediate functions, such as variables you'd like to
    log. Next, logging a bunch of variables can get messy and is confusing and difficult
    to read. The next recipe explores structured logging that provides flexibility
    in logging variables, and a later recipe will explore implementing a global package-level
    logger as well.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法有几个问题。首先，你可能在一个中间函数中有额外的上下文，例如你想要记录的变量。其次，记录大量变量可能会变得混乱，难以阅读和理解。下一个菜谱将探讨提供变量记录灵活性的结构化日志记录，稍后的菜谱将探讨实现全局包级日志记录器。
- en: Structured logging with the apex and logrus packages
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 apex 和 logrus 包进行结构化日志记录
- en: The primary reason to log information is to examine the state of the system
    when events occur or occurred in the past. Basic log messages are tricky to comb
    over when you have a large number of microservices that are logging.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 记录信息的主要原因是检查系统在事件发生或过去发生时所处的状态。当你有大量记录日志的微服务时，基本的日志消息很难整理。
- en: There's a variety of third-party packages for combing over logs if you can get
    the logs into a data format they understand. These packages provide indexing functionality,
    searchability, and more. The `sirupsen/logrus` and `apex/log` packages provide
    a way to do structured logging where you can log a number of fields that can be
    reformatted to fit these third-party log readers. For example, it's simple to
    emit logs in the JSON format to be parsed by a variety of services.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你可以将日志转换为它们理解的数据格式，那么有各种各样的第三方包可以用来处理日志。这些包提供索引功能、可搜索性以及更多功能。`sirupsen/logrus`
    和 `apex/log` 包提供了一种进行结构化日志记录的方法，你可以记录多个字段，这些字段可以被重新格式化以适应这些第三方日志读取器。例如，将日志以 JSON
    格式发射以便由各种服务解析是相当简单的。
- en: Getting ready
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Configure your environment according to these steps:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下步骤配置你的环境：
- en: Refer to the *Getting ready* section of the *Handling errors and the Error interface*
    recipe.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 参考菜谱 *Handling errors and the Error interface* 中的 *Getting ready* 部分。
- en: Run the `go get github.com/sirupsen/logrus` command.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go get github.com/sirupsen/logrus` 命令。
- en: Run the `go get github.com/apex/log` command.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go get github.com/apex/log` 命令。
- en: How to do it...
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'These steps cover writing and running your application:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create the `chapter4/structured` directory
    and navigate to it.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建 `chapter4/structured` 目录并导航到它。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter4/structured](https://github.com/agtorre/go-cookbook/tree/master/chapter4/structured)
    or use this as an exercise to write some of your own code.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter4/structured](https://github.com/agtorre/go-cookbook/tree/master/chapter4/structured)
    复制测试或使用这个练习来编写你自己的代码。
- en: 'Create a file called `logrus.go` with the following content:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `logrus.go` 的文件，内容如下：
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Create a file called `apex.go` with the following content:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `apex.go` 的文件，内容如下：
- en: '[PRE19]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录并导航到它。
- en: 'Create a `main.go` file with the following content. Ensure that you modify
    the `structured` import to use the path you set up in step 2:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main.go` 文件，内容如下。确保你修改 `structured` 导入以使用步骤 2 中设置的路径：
- en: '[PRE20]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Run `go run main.go`.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You may also run:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行：
- en: '[PRE21]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You should now see the following output:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该看到以下输出：
- en: '[PRE22]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure all tests pass.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上导航一个目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `sirupsen/logrus` and `apex/log` packages are both excellent structured
    loggers. Both provide hooks for either emitting to multiple events or to add extra
    fields to a log entry. It would be relatively simple, for example, to use the
    `logrus` hook or the `apex` custom handler to add line numbers to all of your
    logs as well as service names. Another use for a hook might include `traceID`
    to trace a request across different services.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`sirupsen/logrus` 和 `apex/log` 包都是优秀的结构化日志记录器。它们都提供了钩子，用于向多个事件发射或向日志条目添加额外字段。例如，使用
    `logrus` 钩子或 `apex` 自定义处理程序添加行号以及服务名称相对简单。钩子的另一个用途可能包括 `traceID` 以追踪跨越不同服务的一个请求。'
- en: While `logrus` splits the hook and the formatter, `apex` combines them. In addition,
    `apex` adds some convenience functions such as `WithError` to add an `error` field
    as well as tracing, both of which are demonstrated in the recipe. It's also relatively
    simple to adapt hooks from `logrus` into the `apex` handlers. For both solutions,
    it would be a simple change to convert to JSON formatting instead of ANSI colored
    text.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`logrus`将钩子和格式化器分开，但`apex`将它们合并。此外，`apex`还添加了一些便利函数，如`WithError`，用于添加`error`字段以及跟踪，这些都在配方中进行了演示。将`logrus`的钩子适配到`apex`处理程序也很简单。对于这两种解决方案，将转换为JSON格式而不是ANSI彩色文本只是一个简单的更改。
- en: Logging with the context package
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`context`包进行日志记录
- en: This recipe will demonstrate a way to pass log fields between various functions.
    The Go `pkg/context` package is an excellent way to pass additional variables
    and cancelation between functions. This recipe will explore using this functionality
    to distribute variables between functions for logging purposes.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方将演示在各个函数之间传递日志字段的方法。Go的`pkg/context`包是传递额外变量和取消操作在函数之间的一种极好方式。这个配方将探讨使用这种功能在函数之间分配变量以用于日志记录。
- en: This style can be adapted to `logrus` or `apex` from the previous recipe. We'll
    use `apex` for this recipe.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这种风格可以适应前面的配方中的`logrus`或`apex`。我们将使用`apex`进行这个配方。
- en: Getting ready
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Configure your environment according to these steps:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下步骤配置你的环境：
- en: Refer to the *Getting ready* section of the *Handling errors and the Error interface*
    recipe.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 参考配方*Handling errors and the Error interface*中的*Getting ready*部分。
- en: Run the `go get github.com/apex/log` command.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go get github.com/apex/log`命令。
- en: How to do it...
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application create and navigate to the `chapter4/context`
    directory.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的终端/控制台应用程序中创建并导航到`chapter4/context`目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter4/context](https://github.com/agtorre/go-cookbook/tree/master/chapter4/context)
    or use this as an exercise to write some of your own code.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://github.com/agtorre/go-cookbook/tree/master/chapter4/context](https://github.com/agtorre/go-cookbook/tree/master/chapter4/context)复制测试或使用这个练习来编写你自己的代码。
- en: 'Create a file called `log.go` with the following content:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`log.go`的文件，内容如下：
- en: '[PRE23]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Create a file called `collect.go` with the following content:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`collect.go`的文件，内容如下：
- en: '[PRE24]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example`的新目录并导航到它。
- en: 'Create a `main.go` file with the following content. Ensure that you modify
    the `context` import to use the path you set up in step 2:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含以下内容的`main.go`文件。确保你修改`context`导入以使用步骤2中设置的路径：
- en: '[PRE25]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Run `go run main.go`.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You may also run the following:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行以下命令：
- en: '[PRE26]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You should see the following output:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE27]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上导航一个目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `context` package now appears in a variety of packages, including the databases
    and HTTP packages. This recipe will allow you to attach log fields to a context
    and use them for logging purposes. The idea is that separate methods can attach
    more fields onto a context as it is passed around, then the final call-site can
    perform logging and aggregate variables.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`context`包现在出现在各种包中，包括数据库和HTTP包。这个配方将允许你将日志字段附加到上下文中，并用于日志记录目的。想法是，不同的方法可以在上下文传递过程中附加更多字段，然后最终调用点可以执行日志记录和聚合变量。'
- en: 'This recipe mimics the `WithField` and `WithFields` methods found in the logging
    packages in the previous recipe. These modify a single value stored in the context
    and also provide the other benefits of using a context: cancellation, timeouts,
    and thread safety.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方模仿了在前面配方中找到的日志包中的`WithField`和`WithFields`方法。这些方法修改上下文中存储的单个值，并提供使用上下文的其它好处：取消、超时和线程安全。
- en: Using package-level global variables
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用包级别的全局变量
- en: The `apex` and `logrus` packages in the earlier examples both used a package-level
    global variable. Sometimes, it's useful to structure your libraries to support
    both structs with a variety of methods and top-level functions so that you can
    use them directly without passing them around.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，`apex`和`logrus`包都使用了包级别的全局变量。有时，将你的库结构化以支持具有各种方法的struct和顶级函数是有用的，这样你就可以直接使用它们而无需传递它们。
- en: This recipe also demonstrates using `sync.Once` to ensure that the global logger
    will only be initialized once. It can also be bypassed by the `Set` method. The
    recipe only exports `WithField` and `Debug`, but one can imagine exporting every
    method attached to a `log` object.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方还展示了使用 `sync.Once` 来确保全局日志器只初始化一次。它也可以通过 `Set` 方法绕过。这个配方只导出 `WithField`
    和 `Debug`，但可以想象导出附加到 `log` 对象上的所有方法。
- en: Getting ready
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Configure your environment according to these steps:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤配置你的环境：
- en: Refer to the *Getting ready* section of the *Handling errors and the Error interface*
    recipe.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 参考本章中“处理错误和 Error 接口”配方中的“准备工作”部分。
- en: Run the `go get github.com/sirupsen/logrus` command.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go get github.com/sirupsen/logrus` 命令。
- en: How to do it...
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create the
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中创建
- en: '`chapter4/global` directory and navigate to it.'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进入 `chapter4/global` 目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter4/global](https://github.com/agtorre/go-cookbook/tree/master/chapter4/global)
    or use this as an exercise to write some of your own code.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter4/global](https://github.com/agtorre/go-cookbook/tree/master/chapter4/global)
    复制测试或将其用作练习来编写一些你自己的代码。
- en: 'Create a file called `global.go` with the following content:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `global.go` 的文件，内容如下：
- en: '[PRE28]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Create a file called `log.go` with the following content:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `log.go` 的文件，内容如下：
- en: '[PRE29]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Create a new directory named `example` and navigate to `example`.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录并导航到 `example`。
- en: 'Create a `main.go` file with the following content. Ensure that you modify
    the `global` import to use the path you set up in step 2:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含以下内容的 `main.go` 文件。确保你修改 `global` 导入以使用步骤 2 中设置的路径：
- en: '[PRE30]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Run `go run main.go`.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`.
- en: 'You may also run:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行：
- en: '[PRE31]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You should see the following output:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE32]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上移动一个目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: A common pattern for these global package-level objects is to keep the global
    unexported and expose only the functionality desired via methods. Typically, you
    could also include a method to return a copy of the global logger for packages
    that want a logger object.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这些全局包级对象的常见模式是保持全局未导出，并通过方法仅公开所需的功能。通常，你还可以为希望获得日志对象的项目提供一个返回全局日志器副本的方法。
- en: The `sync.Once` type is a newly introduced structure. This structure, in conjunction
    with the `Do` method, will only execute in the code once. We use this in our initialization
    code, and the `Init` function will throw an error if `Init` is called more than
    once.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`sync.Once` 类型是一种新引入的结构。这个结构，结合 `Do` 方法，将在代码中只执行一次。我们在初始化代码中使用它，如果 `Init` 被多次调用，`Init`
    函数将抛出错误。'
- en: Although this example uses a log, you can also imagine cases where this might
    be useful with a database connection, data streams, and a number of other use
    cases.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个例子使用了日志，你也可以想象在数据库连接、数据流和其他许多用例中这可能是有用的。
- en: Catching panics for long running processes
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 捕获长时间运行进程的恐慌
- en: When implementing long running processes, it's possible that certain code paths
    will result in a panic. This is usually common for things uninitialized maps and
    pointers, as well as division by zero problems in the case of poorly validated
    user input.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现长时间运行的过程时，某些代码路径可能会导致恐慌。这通常与未初始化的映射和指针以及用户输入验证不良时的除以零问题有关。
- en: Having a program crash completely in these cases is frequently much worse than
    the panic itself, and so it can be helpful to catch and handle panics.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下，程序完全崩溃通常比恐慌本身要糟糕得多，因此捕获和处理恐慌可能是有帮助的。
- en: Getting ready
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Refer to the *Getting ready* section of the *Handling errors and the Error interface*
    recipe in this chapter.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 参考本章中“处理错误和 Error 接口”配方中的“准备工作”部分。
- en: How to do it...
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create the `chapter4/panic` directory
    and navigate to it.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中创建 `chapter4/panic` 目录并导航到它。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter4/panic](https://github.com/agtorre/go-cookbook/tree/master/chapter4/panic)
    or use this as an exercise to write some of your own code.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter4/panic](https://github.com/agtorre/go-cookbook/tree/master/chapter4/panic)
    复制测试或将其作为练习来编写你自己的代码。
- en: 'Create a file called `panic.go` with the following content:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `panic.go` 的文件，并包含以下内容：
- en: '[PRE33]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Create a new directory named `example` and navigate to `example`.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录，并导航到 `example` 目录。
- en: 'Create a `main.go` file with the following content. Ensure that you modify
    the `panic` import to use the path you set up in step 2:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main.go` 文件，并包含以下内容。确保你修改 `panic` 导入以使用步骤2中设置的路径：
- en: '[PRE34]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Run `go run main.go`.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You may also run:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行：
- en: '[PRE35]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'You should see the following output:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE36]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上移动一个目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe is a very basic example of how to catch panics. You can imagine
    with more complex middleware how you can defer a recover and catch it after running
    many nested functions. Within the recover, you can do basically anything you want,
    although emitting a log is common.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例是一个非常基础的如何捕获恐慌的示例。你可以想象，在更复杂的中间件中，你可以在运行许多嵌套函数之后延迟恢复并捕获它。在恢复过程中，你可以基本上做任何你想做的事情，尽管输出日志是很常见的。
- en: In most web applications, it's common to catch panics and emit an `http.InternalServerError`
    message when a panic occurs.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数Web应用程序中，当发生恐慌时，捕获恐慌并输出一个 `http.InternalServerError` 消息是很常见的。
