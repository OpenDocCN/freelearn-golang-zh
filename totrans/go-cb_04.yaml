- en: Error Handling in Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, the following recipes will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Handling errors and the Error interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the pkg/errors package and wrapping errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the log package and understanding when to log errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Structured logging with the apex and logrus packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging with the context package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using package-level global variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Catching panics for long running processes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Error handling is important for even the most basic Go program. Errors in Go
    implement the `Error` interface and must be dealt with at every layer of the code.
    Go errors do not work like exceptions, and unhandled errors can cause enormous
    problems. You should strive to handle and consider errors whenever they occur.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter also covers logging since it's common to log whenever an actual
    error occurs. We'll also investigate wrapping errors so that a given error has
    the appropriate amount of context for the calling function.
  prefs: []
  type: TYPE_NORMAL
- en: Handling errors and the Error interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Error` interface is a pretty small and simple interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This interface is elegant because it's simple to make anything to satisfy it.
    Unfortunately, this also creates confusion for packages that need to take certain
    actions depending on the error received.
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of ways to create errors in Go, this recipe will explore
    the creation of basic errors, errors that have assigned values or types, and of
    a custom error using a struct.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Go on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install),
    and configure your `GOPATH` environment variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a terminal/console application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to your `GOPATH/src` and create a project directory, for example, `$GOPATH/src/github.com/yourusername/customrepo`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All code will be run and modified from this directory.
  prefs: []
  type: TYPE_NORMAL
- en: Optionally, install the latest tested version of the code using the `go get
    github.com/agtorre/go-cookbook/` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create the `chapter4/basicerrors` directory
    and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter4/basicerrors](https://github.com/agtorre/go-cookbook/tree/master/chapter4/basicerrors)
    or use this as an exercise to write some of your own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `basicerrors.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `custom.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.go` file with the following content. Ensure that you modify
    the `basicerrors` import to use the path you set up in step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whether you use `errors.New`, `fmt.Errorf`, or a custom error, the most important
    thing is that you should never leave errors unhandled in your code. These different
    methods of defining errors give a lot of flexibility. You can, for example, put
    extra functions in your struct to further interrogate an error and cast the interface
    to your error type in the calling function to get some added functionality.
  prefs: []
  type: TYPE_NORMAL
- en: The interface itself is very simple and the only requirement is that you return
    a valid string. Connecting this to a struct may be useful for some high-level
    applications that have consistent error handling throughout but want to work nicely
    with other applications.
  prefs: []
  type: TYPE_NORMAL
- en: Using the pkg/errors package and wrapping errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `errors` package located at `github.com/pkg/errors` is a drop in replacement
    for the standard Go `errors` package. In addition, it provides some very useful
    functionality for wrapping and handling errors. The typed and declared errors
    in the preceding recipe are a good example--they can be useful to add additional
    information to an error, but wrapping it in the standard way will change its type
    and break type assertion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This recipe will demonstrate how to use the `pkg/errors` package to add annotation
    to errors throughout your code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the *Getting ready* section of the *Handling errors and the Error interface*
    recipe in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get github.com/pkg/errors/` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create the `chapter4/errwrap` directory
    and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter4/errwrap](https://github.com/agtorre/go-cookbook/tree/master/chapter4/errwrap)
    or use this as an exercise to write some of your own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `errwrap.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `unwrap.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.go` file with the following content. Ensure that you modify
    the `errwrap` import to use the path you set up in step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `pkg/errors` package is a very useful tool. It makes sense to wrap basically
    every returned error using this package to provide extra context in logging and
    error debugging. It''s flexible enough to print the entire stack traces when an
    error occurs or to just add a prefix to your errors when printing them. It can
    also clean up code since a wrapped nil returns a `nil` value. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In some cases, this can save you from having to check if an error is `nil` first
    before simply returning it. This recipe demonstrated how to use the package to
    wrap and unwrap errors, as well as basic stack trace functionality. The documentation
    for the package also provides some other useful examples such as printing partial
    stacks. Dave Cheney, the author of this library, has also written a number of
    helpful blogs and given talks on the subject, go to [https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully](https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully)
    to know more.
  prefs: []
  type: TYPE_NORMAL
- en: Using the log package and understanding when to log errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Logging should typically occur when an error is the final result. In other words,
    it's useful to log when something exceptional or unexpected occurs. It might also
    be appropriate, if you use a log that provides log levels, to sprinkle debug or
    info statements at key parts of your code to quickly debug issues during development.
    Too much logging will make it difficult to find anything useful, but not enough
    logging can result in broken systems with no insight into the root cause. This
    recipe will demonstrate the use of the default Go `log` package and some useful
    options and showcase when a log should probably occur.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the *Getting ready* section of the *Handling errors and the Error interface*
    recipe in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get github.com/pkg/errors/` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create the `chapter4/log` directory
    and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter4/log](https://github.com/agtorre/go-cookbook/tree/master/chapter4/log)
    or use this as an exercise to write some of your own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `log.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `error.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.go` file with the following content. Ensure that you modify
    the `log` import to use the path you set up in step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can either initialize a logger and pass it around using `log.NewLogger()`,
    or use the `log` package level logger to log messages. The log file in this recipe
    does the former and error does the latter. It also shows when logging might make
    sense after an error has reached its final destination, otherwise it's likely
    that you'll log multiple times for one event.
  prefs: []
  type: TYPE_NORMAL
- en: There are a few issues with this approach. For one, you may have additional
    context in one of the intermediate functions, such as variables you'd like to
    log. Next, logging a bunch of variables can get messy and is confusing and difficult
    to read. The next recipe explores structured logging that provides flexibility
    in logging variables, and a later recipe will explore implementing a global package-level
    logger as well.
  prefs: []
  type: TYPE_NORMAL
- en: Structured logging with the apex and logrus packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The primary reason to log information is to examine the state of the system
    when events occur or occurred in the past. Basic log messages are tricky to comb
    over when you have a large number of microservices that are logging.
  prefs: []
  type: TYPE_NORMAL
- en: There's a variety of third-party packages for combing over logs if you can get
    the logs into a data format they understand. These packages provide indexing functionality,
    searchability, and more. The `sirupsen/logrus` and `apex/log` packages provide
    a way to do structured logging where you can log a number of fields that can be
    reformatted to fit these third-party log readers. For example, it's simple to
    emit logs in the JSON format to be parsed by a variety of services.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the *Getting ready* section of the *Handling errors and the Error interface*
    recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get github.com/sirupsen/logrus` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get github.com/apex/log` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create the `chapter4/structured` directory
    and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter4/structured](https://github.com/agtorre/go-cookbook/tree/master/chapter4/structured)
    or use this as an exercise to write some of your own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `logrus.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `apex.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.go` file with the following content. Ensure that you modify
    the `structured` import to use the path you set up in step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure all tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `sirupsen/logrus` and `apex/log` packages are both excellent structured
    loggers. Both provide hooks for either emitting to multiple events or to add extra
    fields to a log entry. It would be relatively simple, for example, to use the
    `logrus` hook or the `apex` custom handler to add line numbers to all of your
    logs as well as service names. Another use for a hook might include `traceID`
    to trace a request across different services.
  prefs: []
  type: TYPE_NORMAL
- en: While `logrus` splits the hook and the formatter, `apex` combines them. In addition,
    `apex` adds some convenience functions such as `WithError` to add an `error` field
    as well as tracing, both of which are demonstrated in the recipe. It's also relatively
    simple to adapt hooks from `logrus` into the `apex` handlers. For both solutions,
    it would be a simple change to convert to JSON formatting instead of ANSI colored
    text.
  prefs: []
  type: TYPE_NORMAL
- en: Logging with the context package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will demonstrate a way to pass log fields between various functions.
    The Go `pkg/context` package is an excellent way to pass additional variables
    and cancelation between functions. This recipe will explore using this functionality
    to distribute variables between functions for logging purposes.
  prefs: []
  type: TYPE_NORMAL
- en: This style can be adapted to `logrus` or `apex` from the previous recipe. We'll
    use `apex` for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the *Getting ready* section of the *Handling errors and the Error interface*
    recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get github.com/apex/log` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application create and navigate to the `chapter4/context`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter4/context](https://github.com/agtorre/go-cookbook/tree/master/chapter4/context)
    or use this as an exercise to write some of your own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `log.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `collect.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.go` file with the following content. Ensure that you modify
    the `context` import to use the path you set up in step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `context` package now appears in a variety of packages, including the databases
    and HTTP packages. This recipe will allow you to attach log fields to a context
    and use them for logging purposes. The idea is that separate methods can attach
    more fields onto a context as it is passed around, then the final call-site can
    perform logging and aggregate variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe mimics the `WithField` and `WithFields` methods found in the logging
    packages in the previous recipe. These modify a single value stored in the context
    and also provide the other benefits of using a context: cancellation, timeouts,
    and thread safety.'
  prefs: []
  type: TYPE_NORMAL
- en: Using package-level global variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `apex` and `logrus` packages in the earlier examples both used a package-level
    global variable. Sometimes, it's useful to structure your libraries to support
    both structs with a variety of methods and top-level functions so that you can
    use them directly without passing them around.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe also demonstrates using `sync.Once` to ensure that the global logger
    will only be initialized once. It can also be bypassed by the `Set` method. The
    recipe only exports `WithField` and `Debug`, but one can imagine exporting every
    method attached to a `log` object.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the *Getting ready* section of the *Handling errors and the Error interface*
    recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get github.com/sirupsen/logrus` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create the
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`chapter4/global` directory and navigate to it.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter4/global](https://github.com/agtorre/go-cookbook/tree/master/chapter4/global)
    or use this as an exercise to write some of your own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `global.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `log.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to `example`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.go` file with the following content. Ensure that you modify
    the `global` import to use the path you set up in step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common pattern for these global package-level objects is to keep the global
    unexported and expose only the functionality desired via methods. Typically, you
    could also include a method to return a copy of the global logger for packages
    that want a logger object.
  prefs: []
  type: TYPE_NORMAL
- en: The `sync.Once` type is a newly introduced structure. This structure, in conjunction
    with the `Do` method, will only execute in the code once. We use this in our initialization
    code, and the `Init` function will throw an error if `Init` is called more than
    once.
  prefs: []
  type: TYPE_NORMAL
- en: Although this example uses a log, you can also imagine cases where this might
    be useful with a database connection, data streams, and a number of other use
    cases.
  prefs: []
  type: TYPE_NORMAL
- en: Catching panics for long running processes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When implementing long running processes, it's possible that certain code paths
    will result in a panic. This is usually common for things uninitialized maps and
    pointers, as well as division by zero problems in the case of poorly validated
    user input.
  prefs: []
  type: TYPE_NORMAL
- en: Having a program crash completely in these cases is frequently much worse than
    the panic itself, and so it can be helpful to catch and handle panics.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the *Getting ready* section of the *Handling errors and the Error interface*
    recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create the `chapter4/panic` directory
    and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter4/panic](https://github.com/agtorre/go-cookbook/tree/master/chapter4/panic)
    or use this as an exercise to write some of your own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `panic.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to `example`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.go` file with the following content. Ensure that you modify
    the `panic` import to use the path you set up in step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe is a very basic example of how to catch panics. You can imagine
    with more complex middleware how you can defer a recover and catch it after running
    many nested functions. Within the recover, you can do basically anything you want,
    although emitting a log is common.
  prefs: []
  type: TYPE_NORMAL
- en: In most web applications, it's common to catch panics and emit an `http.InternalServerError`
    message when a panic occurs.
  prefs: []
  type: TYPE_NORMAL
