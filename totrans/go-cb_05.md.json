["```go\n        package database\n\n        import (\n            \"database/sql\"\n            \"fmt\"\n            \"os\"\n            \"time\"\n\n            _ \"github.com/go-sql-driver/mysql\" //we import supported \n            libraries for database/sql\n        )\n\n        // Example hold the results of our queries\n        type Example struct {\n            Name string\n            Created *time.Time\n        }\n\n        // Setup configures and returns our database\n        // connection poold\n        func Setup() (*sql.DB, error) {\n            db, err := sql.Open(\"mysql\", \n            fmt.Sprintf(\"%s:%s@/gocookbook? \n            parseTime=true\", os.Getenv(\"MYSQLUSERNAME\"), \n            os.Getenv(\"MYSQLPASSWORD\")))\n            if err != nil {\n                return nil, err\n            }\n            return db, nil\n        }\n\n```", "```go\n        package database\n\n        import (\n            \"database/sql\"\n\n            _ \"github.com/go-sql-driver/mysql\" //we import supported \n            libraries for database/sql\n        )\n\n        // Create makes a table called example\n        // and populates it\n        func Create(db *sql.DB) error {\n            // create the database\n            if _, err := db.Exec(\"CREATE TABLE example (name \n            VARCHAR(20), created DATETIME)\"); err != nil {\n                return err\n            }\n\n            if _, err := db.Exec(`INSERT INTO example (name, created) \n            values (\"Aaron\", NOW())`); err != nil {\n                return err\n            }\n\n            return nil\n        }\n\n```", "```go\n        package database\n\n        import (\n            \"database/sql\"\n            \"fmt\"\n\n            _ \"github.com/go-sql-driver/mysql\" //we import supported \n            libraries for database/sql\n        )\n\n        // Query grabs a new connection\n        // creates tables, and later drops them\n        // and issues some queries\n        func Query(db *sql.DB) error {\n            name := \"Aaron\"\n            rows, err := db.Query(\"SELECT name, created FROM example \n            where name=?\", name)\n            if err != nil {\n                return err\n            }\n            defer rows.Close()\n            for rows.Next() {\n                var e Example\n                if err := rows.Scan(&e.Name, &e.Created); err != nil {\n                    return err\n                }\n                fmt.Printf(\"Results:\\n\\tName: %s\\n\\tCreated: %v\\n\", \n                e.Name, e.Created)\n            }\n            return rows.Err()\n        }\n\n```", "```go\n        package dbinterface\n\n        // Exec replaces the Exec from the previous\n        // recipe\n        func Exec(db DB) error {\n\n            // uncaught error on cleanup, but we always\n            // want to cleanup\n            defer db.Exec(\"DROP TABLE example\")\n\n            if err := Create(db); err != nil {\n                return err\n            }\n\n            if err := Query(db); err != nil {\n                return err\n            }\n            return nil\n        }\n\n```", "```go\n        package main\n\n        import (\n            \"github.com/agtorre/go-cookbook/chapter5/database\"\n            _ \"github.com/go-sql-driver/mysql\" //we import supported \n            libraries for database/sql\n        )\n\n        func main() {\n            db, err := database.Setup()\n            if err != nil {\n                panic(err)\n            }\n\n            if err := database.Exec(db); err != nil {\n                panic(err)\n            }\n        }\n\n```", "```go\n go build ./example\n\n```", "```go\n $ go run main.go\n Results:\n Name: Aaron\n Created: 2017-02-16 19:02:36 +0000 UTC\n\n```", "```go\n        package database\n\n        import _ \"github.com/go-sql-driver/mysql\" //we import supported\n        libraries for database/sql\n        // Exec grabs a new connection\n        // creates tables, and later drops them\n        // and issues some queries\n        func Exec() error {\n            db, err := Setup()\n            if err != nil {\n                return err\n            }\n            // uncaught error on cleanup, but we always\n            // want to cleanup\n            defer db.Exec(\"DROP TABLE example\")\n\n            if err := Create(db); err != nil {\n                return err\n            }\n\n            if err := Query(db); err != nil {\n                return err\n            }\n            return nil\n\n        }\n\n```", "```go\n        package dbinterface\n\n        import _ \"github.com/go-sql-driver/mysql\" //we import supported\n        libraries for database/sql\n\n        // Create makes a table called example\n        // and populates it\n        func Create(db DB) error {\n            // create the database\n            if _, err := db.Exec(\"CREATE TABLE example (name             \n            VARCHAR(20), created DATETIME)\"); err != nil {\n                return err\n            }\n\n            if _, err := db.Exec(`INSERT INTO example (name, created) \n            values (\"Aaron\", NOW())`); err != nil {\n                return err\n            }\n\n            return nil\n        }\n\n```", "```go\n        package dbinterface\n\n        import (\n            \"fmt\"\n\n            \"github.com/agtorre/go-cookbook/chapter5/database\"\n        )\n\n        // Query grabs a new connection\n        // creates tables, and later drops them\n        // and issues some queries\n        func Query(db DB) error {\n            name := \"Aaron\"\n            rows, err := db.Query(\"SELECT name, created FROM example \n            where name=?\", name)\n            if err != nil {\n                return err\n            }\n            defer rows.Close()\n            for rows.Next() {\n                var e database.Example\n                if err := rows.Scan(&e.Name, &e.Created); err != nil {\n                    return err\n                }\n                fmt.Printf(\"Results:\\n\\tName: %s\\n\\tCreated: %v\\n\", \n                e.Name, e.Created)\n            }\n            return rows.Err()\n        }\n\n```", "```go\n        package dbinterface\n\n        // Exec replaces the Exec from the previous\n        // recipe\n        func Exec(db DB) error {\n\n            // uncaught error on cleanup, but we always\n            // want to cleanup\n            defer db.Exec(\"DROP TABLE example\")\n\n            if err := Create(db); err != nil {\n                return err\n            }\n\n            if err := Query(db); err != nil {\n                return err\n            }\n            return nil\n        }\n\n```", "```go\n        package main\n\n        import (\n            \"github.com/agtorre/go-cookbook/chapter5/database\"\n            \"github.com/agtorre/go-cookbook/chapter5/dbinterface\"\n            _ \"github.com/go-sql-driver/mysql\" //we import supported \n            libraries for database/sql\n        )\n\n        func main() {\n            db, err := database.Setup()\n            if err != nil {\n                panic(err)\n         }\n\n         tx, err := db.Begin()\n         if err != nil {\n             panic(err)\n         }\n         // this wont do anything if commit is successful\n         defer tx.Rollback()\n\n         if err := dbinterface.Exec(db); err != nil {\n             panic(err)\n         }\n         if err := tx.Commit(); err != nil {\n             panic(err)\n         }\n        }\n\n```", "```go\n go build ./example\n\n```", "```go\n $ go run main.go\n Results:\n Name: Aaron\n Created: 2017-02-16 20:00:00 +0000 UTC\n\n```", "```go\n        package pools\n\n        import (\n            \"database/sql\"\n            \"fmt\"\n            \"os\"\n\n            _ \"github.com/go-sql-driver/mysql\" //we import supported \n            libraries for database/sql\n        )\n\n        // Setup configures the db along with pools\n        // number of connections and more\n        func Setup() (*sql.DB, error) {\n            db, err := sql.Open(\"mysql\", \n            fmt.Sprintf(\"%s:%s@/gocookbook? \n            parseTime=true\", os.Getenv(\"MYSQLUSERNAME\"),         \n            os.Getenv(\"MYSQLPASSWORD\")))\n            if err != nil {\n                return nil, err\n            }\n\n            // there will only ever be 24 open connections\n            db.SetMaxOpenConns(24)\n\n            // MaxIdleConns can never be less than max open \n            // SetMaxOpenConns otherwise it'll default to that value\n            db.SetMaxIdleConns(24)\n\n            return db, nil\n        }\n\n```", "```go\n        package pools\n\n        import (\n            \"context\"\n            \"time\"\n        )\n\n        // ExecWithTimeout will timeout trying\n        // to get the current time\n        func ExecWithTimeout() error {\n            db, err := Setup()\n            if err != nil {\n                return err\n            }\n\n            ctx := context.Background()\n\n            // we want to timeout immediately\n            ctx, can := context.WithDeadline(ctx, time.Now())\n\n            // call cancel after we complete\n            defer can()\n\n            // our transaction is context aware\n            _, err = db.BeginTx(ctx, nil)\n            return err\n        }\n\n```", "```go\n        package main\n\n        import \"github.com/agtorre/go-cookbook/chapter5/pools\"\n\n        func main() {\n            if err := pools.ExecWithTimeout(); err != nil {\n                panic(err)\n            }\n        }\n\n```", "```go\n go build ./example\n\n```", "```go\n $ go run main.go\n panic: context deadline exceeded\n\n goroutine 1 [running]:\n main.main()\n /go/src/github.com/agtorre/go-  \n      cookbook/chapter5/pools/example/main.go:7 +0x4e\n exit status 2\n\n```", "```go\n        package redis\n\n        import (\n            \"os\"\n\n            redis \"gopkg.in/redis.v5\"\n        )\n\n        // Setup initializes a redis client\n        func Setup() (*redis.Client, error) {\n            client := redis.NewClient(&redis.Options{\n                Addr: \"localhost:6379\",\n                Password: os.Getenv(\"REDISPASSWORD\"),\n                DB: 0, // use default DB\n         })\n\n         _, err := client.Ping().Result()\n         return client, err\n        }\n\n```", "```go\n        package redis\n\n        import (\n            \"fmt\"\n            \"time\"\n\n            redis \"gopkg.in/redis.v5\"\n        )\n\n        // Exec performs some redis operations\n        func Exec() error {\n            conn, err := Setup()\n            if err != nil {\n                return err\n            }\n\n            c1 := \"value\"\n            // value is an interface, we can store whatever\n            // the last argument is the redis expiration\n            conn.Set(\"key\", c1, 5*time.Second)\n\n            var result string\n            if err := conn.Get(\"key\").Scan(&result); err != nil {\n                switch err {\n                // this means the key\n                // was not found\n                case redis.Nil:\n                    return nil\n                default:\n                    return err\n                }\n            }\n\n            fmt.Println(\"result =\", result)\n\n            return nil\n        }\n\n```", "```go\n        package redis\n\n        import (\n            \"fmt\"\n\n            redis \"gopkg.in/redis.v5\"\n        )\n\n        // Sort performs a sort redis operations\n        func Sort() error {\n            conn, err := Setup()\n            if err != nil {\n                return err\n            }\n\n            if err := conn.LPush(\"list\", 1).Err(); err != nil {\n                return err\n            }\n            if err := conn.LPush(\"list\", 3).Err(); err != nil {\n                return err\n            }\n            if err := conn.LPush(\"list\", 2).Err(); err != nil {\n                return err\n            }\n\n            res, err := conn.Sort(\"list\", redis.Sort{Order: \n            \"ASC\"}).Result()\n            if err != nil {\n                return err\n            }\n            fmt.Println(res)\n            conn.Del(\"list\")\n            return nil\n        }\n\n```", "```go\n        package main\n\n        import \"github.com/agtorre/go-cookbook/chapter5/redis\"\n\n        func main() {\n            if err := redis.Exec(); err != nil {\n                panic(err)\n            }\n\n            if err := redis.Sort(); err != nil {\n                panic(err)\n            }\n        }\n\n```", "```go\n go build ./example\n\n```", "```go\n $ go run main.go\n result = value\n [1 2 3]\n\n```", "```go\n        package mongodb\n\n        import mgo \"gopkg.in/mgo.v2\"\n\n        // Setup initializes a redis client\n        func Setup() (*mgo.Session, error) {\n            session, err := mgo.Dial(\"localhost\")\n            if err != nil {\n                return nil, err\n            }\n            return session, nil\n        }\n\n```", "```go\n        package mongodb\n\n        import (\n            \"fmt\"\n\n            \"gopkg.in/mgo.v2/bson\"\n        )\n\n        // State is our data model\n        type State struct {\n            Name string `bson:\"name\"`\n            Population int `bson:\"pop\"`\n        }\n\n        // Exec creates then queries an Example\n        func Exec() error {\n            db, err := Setup()\n            if err != nil {\n                return err\n            }\n\n            conn := db.DB(\"gocookbook\").C(\"example\")\n\n            // we can inserts many rows at once\n            if err := conn.Insert(&State{\"Washington\", 7062000}, \n            &State{\"Oregon\", 3970000}); err != nil {\n                return err\n            }\n\n            var s State\n            if err := conn.Find(bson.M{\"name\": \"Washington\"}).One(&s); \n            err!= nil {\n                return err\n            }\n\n            if err := conn.DropCollection(); err != nil {\n                return err\n            }\n\n            fmt.Printf(\"State: %#vn\", s)\n            return nil\n        }\n\n```", "```go\n        package main\n\n        import \"github.com/agtorre/go-cookbook/chapter5/mongodb\"\n\n        func main() {\n            if err := mongodb.Exec(); err != nil {\n                panic(err)\n            }\n        }\n\n```", "```go\n go build ./example\n\n```", "```go\n $ go run main.go\n State: mongodb.State{Name:\"Washington\", Population:7062000}\n\n```", "```go\n        package storage\n\n        import \"context\"\n\n        // Item represents an item at\n        // a shop\n        type Item struct {\n            Name  string\n            Price int64\n        }\n\n        // Storage is our storage interface\n        // We'll implement it with Mongo\n        // storage\n        type Storage interface {\n            GetByName(context.Context, string) (*Item, error)\n            Put(context.Context, *Item) error\n        }\n\n```", "```go\n        package storage\n\n        import mgo \"gopkg.in/mgo.v2\"\n\n        // MongoStorage implements our storage interface\n        type MongoStorage struct {\n            *mgo.Session\n            DB string\n            Collection string\n        }\n\n        // NewMongoStorage initializes a MongoStorage\n        func NewMongoStorage(connection, db, collection string) \n        (*MongoStorage, error) {\n            session, err := mgo.Dial(\"localhost\")\n            if err != nil {\n                return nil, err\n            }\n            ms := MongoStorage{\n                Session: session,\n                DB: db,\n                Collection: collection,\n            }\n            return &ms, nil\n        }\n\n```", "```go\n        package storage\n\n        import (\n            \"context\"\n\n            \"gopkg.in/mgo.v2/bson\"\n        )\n\n        // GetByName queries mongodb for an item with\n        // the correct name\n        func (m *MongoStorage) GetByName(ctx context.Context, name \n        string) (*Item, error) {\n            c := m.Session.DB(m.DB).C(m.Collection)\n            var i Item\n            if err := c.Find(bson.M{\"name\": name}).One(&i); err != nil \n            {\n                return nil, err\n            }\n\n            return &i, nil\n        }\n\n        // Put adds an item to our mongo instance\n        func (m *MongoStorage) Put(ctx context.Context, i *Item) error \n        {\n            c := m.Session.DB(m.DB).C(m.Collection)\n            return c.Insert(i)\n        }\n\n```", "```go\n        package storage\n\n        import (\n            \"context\"\n            \"fmt\"\n        )\n\n        // Exec initializes storage, then performs operations\n        // using the storage interface\n        func Exec() error {\n            m, err := NewMongoStorage(\"localhost\", \"gocookbook\", \n            \"items\")\n            if err != nil {\n                return err\n            }\n            if err := PerformOperations(m); err != nil {\n                return err\n            }\n\n            if err := \n            m.Session.DB(m.DB).C(m.Collection).DropCollection(); \n            err != nil {\n                return err\n            }\n\n            return nil\n        }\n\n        // PerformOperations creates a candle item\n        // then gets it\n        func PerformOperations(s Storage) error {\n            ctx := context.Background()\n            i := Item{Name: \"candles\", Price: 100}\n            if err := s.Put(ctx, &i); err != nil {\n                return err\n            }\n\n            candles, err := s.GetByName(ctx, \"candles\")\n            if err != nil {\n                return err\n            }\n            fmt.Printf(\"Result: %#vn\", candles)\n                return nil\n        }\n\n```", "```go\n        package main\n\n        import \"github.com/agtorre/go-cookbook/chapter5/storage\"\n\n        func main() {\n            if err := storage.Exec(); err != nil {\n                panic(err)\n            }\n        }\n\n```", "```go\n go build ./example\n\n```", "```go\n $ go run main.go\n Result: &storage.Item{Name:\"candles\", Price:100}\n\n```"]