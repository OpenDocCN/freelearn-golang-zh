- en: All about Databases and Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, the following recipes will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: The database/sql package with MySQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing a database transaction interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connection pooling, rate limiting, and timeouts for SQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Redis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using NoSQL with MongoDB and mgo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating storage interfaces for data portability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go applications frequently need to make use of long-term storage. This is usually
    in the form of relational and non-relational databases, as well as key-value stores
    and more. When working with these storage applications, it helps to wrap your
    operations in an interface. The recipes in this chapter will examine various storage
    interfaces, considering parallel access with things such as connection pools,
    and look at general tips for integrating a new library, which is often the case
    when using a new storage technology.
  prefs: []
  type: TYPE_NORMAL
- en: The database/sql package with MySQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Relational databases are some of the most well understood and common database
    options. MySQL and Postgres are two of the most popular open source relational
    databases. This recipe will demonstrate the `database/sql` package, a package
    that provides hooks for a number of relational databases and automatically handles
    connection pooling, connection duration, and gives access to a number of basic
    database operations.
  prefs: []
  type: TYPE_NORMAL
- en: The future versions of this package will include support for context and timeouts.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Go on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install),
    and configure your `GOPATH` environment variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a terminal/console application, navigate to your `GOPATH/src` and create
    a project directory such as
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$GOPATH/src/github.com/yourusername/customrepo`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: All code will be run and modified from this directory.
  prefs: []
  type: TYPE_NORMAL
- en: Optionally, install the latest tested version of the code using the `go get
    github.com/agtorre/go-cookbook/` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get github.com/go-sql-driver/mysql` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install and configure MySQL using [https://dev.mysql.com/doc/mysql-getting-started/en/](https://dev.mysql.com/doc/mysql-getting-started/en/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `export MYSQLUSERNAME=<your mysql username>` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `export MYSQLPASSWORD=<your mysql password>` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create and navigate to a the directory
    `chapter5/database`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter5/database](https://github.com/agtorre/go-cookbook/tree/master/chapter5/database)
    or use this as an exercise to write some of your own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `config.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `create.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `query.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `exec.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Create and navigate to the `example` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `main.go` with the following contents; be sure to modify
    the `database` import to use the path you set up in step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You could also run this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `_ "github.com/go-sql-driver/mysql"` line of the code is how you connect
    various database connectors to the `database/sql` package. The commands would
    be similar if you were to connect to Postgres, SQLite, or any others that implement
    the `database/sql` interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Once connected, the package sets up a connection pool that is covered in the
    *Connection pooling, rate limiting, and timeouts for SQL* recipe, and you can
    either directly execute SQL on the connection or create transaction objects that
    can do everything a connection can do with the `commit` and `rollback` commands.
  prefs: []
  type: TYPE_NORMAL
- en: The `mysql` package provides some convenience support for Go time objects when
    talking to the database. This recipe also retrieves the username and password
    from the `MYSQLUSERNAME` and `MYSQLPASSWORD` environment variables.
  prefs: []
  type: TYPE_NORMAL
- en: Executing a database transaction interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with connections to services such as database, it can be difficult
    to write tests. This is because it's difficult in Go to mock or duck-type things
    at runtime. Although I recommend using a storage interface when working with databases,
    it's still useful to mock a database transaction interface inside of this interface.
    The *Creating storage interfaces for data portability* recipe will cover storage
    interfaces; this one will focus on an interface to wrap database connections and
    transaction objects.
  prefs: []
  type: TYPE_NORMAL
- en: To show the use of such an interface, we'll rewrite the create and query files
    from the previous recipe to use our interface. The final output will be the same,
    but the create and query operations will all be performed in a transaction.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the steps given in the *Getting ready* section of the *The database/sql
    package with MySQL* recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get https://github.com/agtorre/go-cookbook/tree/master/chapter5/database`
    command or write your own using the *The database/sql package with MySQL* recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create and navigate to the `chapter5/dbinterface`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter5/dbinterface](https://github.com/agtorre/go-cookbook/tree/master/chapter5/dbinterface)
    or use this as an exercise to write some of your own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `transaction.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `create.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `query.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `exec.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to `example`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `main.go` with the following contents; be sure to modify
    the `dbinterface` import to use the path you set up in step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You could also run this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe works in a very similar way to the previous one, but demonstrates
    both using transactions and makes generic database functions that work with both
    `sql.DB` connections and `sql.Transaction` objects. It's also simple to mock these
    interfaces, as you'll see in [Chapter 8](ab72719b-7fbf-4127-a091-b4ca5cf59775.xhtml),
    *Testing*.
  prefs: []
  type: TYPE_NORMAL
- en: Connection pooling, rate limiting, and timeouts for SQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although the `database/sql` package provides support for connection pooling,
    rate limiting, and timeouts, it's often important to tweak the defaults to better
    accommodate your database configuration. This can become important when you have
    horizontal scaling on microservices and don't want to hold too many active connections
    to the database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the steps given in the *Getting ready* section of the *The database/sql
    package with MySQL* recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get https://github.com/agtorre/go-cookbook/tree/master/chapter5/database`
    command or write your own using the *The database/sql package with MySQL* recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create and navigate to the `chapter5/pools`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter5/pools](https://github.com/agtorre/go-cookbook/tree/master/chapter5/pools)
    or use this as an exercise to write some of your own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `pools.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `timeout.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to `example`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `main.go` with the following contents; be sure to modify
    the `pools` import to use the path you set up in step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You could also run this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Being able to control the depth of our connection pool is very useful. This
    will allow us not to overload a database, but it's important to consider what
    it will mean in the context of timeouts. If you enforce both a set number of connections
    and strict context-based timeouts, as we did in this recipe, there will be cases
    where you'll have requests frequently timing out on an overloaded application
    trying to establish too many connections.
  prefs: []
  type: TYPE_NORMAL
- en: This is because connections will timeout waiting for a connection to become
    available. The newly added context functionality for `database/sql` makes it much
    simpler to have a shared timeout for the entire request, including the steps involved
    with performing the query.
  prefs: []
  type: TYPE_NORMAL
- en: With this and the other recipes, it makes sense to use a global `config` object
    to pass into the `Setup()` function, although this recipe just uses environment
    variables.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Redis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes you want persistent storage or additional functionality provided by
    third-party libraries and services. This recipe will explore Redis as a form of
    non-relational data storage and showcase how a language such as Go can interact
    with these services.
  prefs: []
  type: TYPE_NORMAL
- en: Since Redis supports key-value storage with a simple interface, it's an excellent
    candidate for session storage or temporary data that has a duration. The ability
    to specify timeout on data stored in Redis is extremely valuable. This recipe
    will explore basic Redis usage from configuration, to querying, to using custom
    sorting.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Go on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install),
    and configure your `GOPATH` environment variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a terminal/console application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to your `GOPATH/src` and create a project directory such as `$GOPATH/src/github.com/yourusername/customrepo`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All code will be run and modified from this directory.
  prefs: []
  type: TYPE_NORMAL
- en: Optionally, install the latest tested version of the code using the `go get
    github.com/agtorre/go-cookbook/` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get gopkg.in/redis.v5` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install and configure Redis using [https://redis.io/topics/quickstart](https://redis.io/topics/quickstart).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create and navigate to the `chapter5/redis`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter5/redis](https://github.com/agtorre/go-cookbook/tree/master/chapter5/redis)
    or use this as an exercise to write some of your own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `config.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `exec.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `sort.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to `example`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `main.go` with the following contents; be sure to modify
    the `redis` import to use the path you set up in step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You could also run this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with Redis in Go is very similar to working with MySQL, although there's
    not a standard library, a lot of the same conventions are followed with functions
    such as `Scan()` to read data from Redis into Go types. It can be challenging
    to pick the best library to use in cases like this and I suggest surveying what's
    available periodically, as things can rapidly change.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe uses a `redis` package to do basic setting and getting, doing a
    more complex sort function, and basic configuration. Like `database/sql`, you
    can set additional configuration in the form of write timeouts, poolsize, and
    more. Redis itself also provides a lot of additional functionality, including
    Redis cluster support, Zscore and counter objects, distributed locks, and more.
  prefs: []
  type: TYPE_NORMAL
- en: As in the preceding recipe, I recommend using a `config` object, which stores
    your Redis settings and configuration details for ease of setup and security.
  prefs: []
  type: TYPE_NORMAL
- en: Using NoSQL with MongoDB and mgo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might first think that Go is better suited to relational databases due to
    Go structs and because Go is a typed language. When working with something like
    the `mgo` package, Go can nearly arbitrarily store and retrieve struct objects.
    If you version your objects, your schema can adapt and it can provide a very flexible
    development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Some libraries do a better job of hiding or elevating these abstractions. The
    `mgo` package is an excellent example of a library that does an excellent job
    of the former. This recipe will create a connection in a similar way to Redis
    and MySQL, but will store and retrieve an object without even defining a concrete
    schema.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Go on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install),
    and configure your `GOPATH` environment variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a terminal/console application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to your `GOPATH/src` and create a project directory such as `$GOPATH/src/github.com/yourusername/customrepo`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All code will be run and modified from this directory.
  prefs: []
  type: TYPE_NORMAL
- en: Optionally, install the latest tested version of the code using the `go get
    github.com/agtorre/go-cookbook/` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get gopkg.in/mgo.v2` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To run the code, you'll need a working database connection to a MongoDB instance
    that this book will not cover.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The basic setup is [https://docs.mongodb.com/getting-started/shell/](https://docs.mongodb.com/getting-started/shell/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create and navigate to the `chapter5/mongodb`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter5/mongodb](https://github.com/agtorre/go-cookbook/tree/master/chapter5/mongodb)
    or use this as an exercise to write some of your own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `config.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `exec.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to `example`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `main.go` with the following contents; be sure to modify
    the `mongodb` import to use the path you set up in step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You could also run this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `mgo` package also provides connection pooling, and many ways to tweak and
    configure your connections to the `mongodb` database. The examples of this recipe
    are fairly basic, but they illustrate how easy it is to reason about and query
    a document-based database. The package implements a BSON data type, and marshaling
    to and from it is very similar to working with JSON.
  prefs: []
  type: TYPE_NORMAL
- en: Consistency guarantees and best practice for `mongodb` are outside the scope
    of this book--but it's a pleasure to work with it in the Go language.
  prefs: []
  type: TYPE_NORMAL
- en: Creating storage interfaces for data portability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with external storage interfaces, it can be helpful to abstract
    your operations behind an interface. This is for ease of mocking, portability
    in case you change storage backends, and isolation of concerns. The downside to
    this approach may come if you need to perform multiple operations inside of a
    transaction. In that case, it makes sense to make composite operations, or to
    allow it to be passed in via a context object or additional function arguments.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will implement a very simple interface to working with items in
    MongoDB. These items will have a name and price and we'll use an interface to
    persist and retrieve these objects.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the steps given in the *Getting ready* section of the *Using NoSQL
    with MongoDB and mgo* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create and navigate to the `chapter5/mongodb`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter5/mongodb](https://github.com/agtorre/go-cookbook/tree/master/chapter5/mongodb)
    or use this as an exercise to write some of your own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `storage.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `mongoconfig.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `mongointerface.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `exec.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to `example`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `main.go` with the following contents; be sure to modify
    the `storage` import to use the path you set up in step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You could also run this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most important function for demonstrating this recipe is `PerformOperation`.
    This function takes an interface to the storage as a parameter. This means we
    can dynamically replace the underlying storage without even modifying this function.
    It would be simple, for example, to connect storage to a separate API in order
    to consume and modify it.
  prefs: []
  type: TYPE_NORMAL
- en: We added a context to these interfaces to add additional flexibility and allow
    the interface to handle timeout as well. Separating your application logic from
    the underlying storage provides a variety of benefits, but it can be difficult
    to pick the right places to draw boundaries, and this will vary widely by application.
  prefs: []
  type: TYPE_NORMAL
