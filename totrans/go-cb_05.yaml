- en: All about Databases and Storage
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 所有关于数据库和存储
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将涵盖以下食谱：
- en: The database/sql package with MySQL
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 的 database/sql 包
- en: Executing a database transaction interface
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行数据库事务接口
- en: Connection pooling, rate limiting, and timeouts for SQL
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL 的连接池、速率限制和超时
- en: Working with Redis
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 Redis 一起工作
- en: Using NoSQL with MongoDB and mgo
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 MongoDB 和 mgo 的 NoSQL
- en: Creating storage interfaces for data portability
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为数据可移植性创建存储接口
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Go applications frequently need to make use of long-term storage. This is usually
    in the form of relational and non-relational databases, as well as key-value stores
    and more. When working with these storage applications, it helps to wrap your
    operations in an interface. The recipes in this chapter will examine various storage
    interfaces, considering parallel access with things such as connection pools,
    and look at general tips for integrating a new library, which is often the case
    when using a new storage technology.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Go 应用程序通常需要使用长期存储。这通常以关系型和非关系型数据库、键值存储等形式存在。当与这些存储应用程序一起工作时，将你的操作封装在接口中很有帮助。本章中的食谱将检查各种存储接口，考虑连接池等并行访问，并查看集成新库的一般技巧，这在使用新存储技术时通常是情况。
- en: The database/sql package with MySQL
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL 的 database/sql 包
- en: Relational databases are some of the most well understood and common database
    options. MySQL and Postgres are two of the most popular open source relational
    databases. This recipe will demonstrate the `database/sql` package, a package
    that provides hooks for a number of relational databases and automatically handles
    connection pooling, connection duration, and gives access to a number of basic
    database operations.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 关系型数据库是一些最被理解和常见的数据库选项之一。MySQL 和 Postgres 是最受欢迎的开源关系型数据库。本食谱将演示 `database/sql`
    包，这是一个提供多个关系型数据库钩子的包，并自动处理连接池、连接时长，并提供对多个基本数据库操作的访问。
- en: The future versions of this package will include support for context and timeouts.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本包的未来版本将包括对上下文和超时的支持。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Configure your environment according to these steps:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下步骤配置你的环境：
- en: Download and install Go on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install),
    and configure your `GOPATH` environment variable.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://golang.org/doc/install](https://golang.org/doc/install) 下载并安装 Go
    到你的操作系统，并配置你的 `GOPATH` 环境变量。
- en: Open a terminal/console application, navigate to your `GOPATH/src` and create
    a project directory such as
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/控制台应用程序，导航到你的 `GOPATH/src` 并创建一个项目目录，例如
- en: '`$GOPATH/src/github.com/yourusername/customrepo`.'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`$GOPATH/src/github.com/你的用户名/customrepo`。'
- en: All code will be run and modified from this directory.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 所有代码都将从这个目录运行和修改。
- en: Optionally, install the latest tested version of the code using the `go get
    github.com/agtorre/go-cookbook/` command.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，使用 `go get github.com/agtorre/go-cookbook/` 命令安装代码的最新测试版本。
- en: Run the `go get github.com/go-sql-driver/mysql` command.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go get github.com/go-sql-driver/mysql` 命令。
- en: Install and configure MySQL using [https://dev.mysql.com/doc/mysql-getting-started/en/](https://dev.mysql.com/doc/mysql-getting-started/en/).
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 [https://dev.mysql.com/doc/mysql-getting-started/en/](https://dev.mysql.com/doc/mysql-getting-started/en/)
    安装和配置 MySQL。
- en: Run the `export MYSQLUSERNAME=<your mysql username>` command.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `export MYSQLUSERNAME=<你的 MySQL 用户名>` 命令。
- en: Run the `export MYSQLPASSWORD=<your mysql password>` command.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `export MYSQLPASSWORD=<你的 MySQL 密码>` 命令。
- en: How to do it...
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'These steps cover writing and running your application:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create and navigate to a the directory
    `chapter5/database`.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序创建并导航到目录 `chapter5/database`。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter5/database](https://github.com/agtorre/go-cookbook/tree/master/chapter5/database)
    or use this as an exercise to write some of your own code.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter5/database](https://github.com/agtorre/go-cookbook/tree/master/chapter5/database)
    复制测试或将其作为练习编写一些自己的代码。
- en: 'Create a file called `config.go` with the following contents:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `config.go` 的文件，内容如下：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a file called `create.go` with the following contents:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `create.go` 的文件，内容如下：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a file called `query.go` with the following contents:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `query.go` 的文件，内容如下：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a file called `exec.go` with the following contents:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `exec.go` 的文件，内容如下：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Create and navigate to the `example` directory.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并导航到 `example` 目录。
- en: 'Create a file called `main.go` with the following contents; be sure to modify
    the `database` import to use the path you set up in step 2:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，内容如下；请确保将 `database` 导入修改为步骤 2 中设置的路径：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Run `go run main.go`.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You could also run this:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您也可以运行以下命令：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You should see the following output:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请向上移动一个目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `_ "github.com/go-sql-driver/mysql"` line of the code is how you connect
    various database connectors to the `database/sql` package. The commands would
    be similar if you were to connect to Postgres, SQLite, or any others that implement
    the `database/sql` interfaces.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中的 `_ "github.com/go-sql-driver/mysql"` 行是如何将各种数据库连接器连接到 `database/sql` 包的。如果您要连接到
    Postgres、SQLite 或其他实现 `database/sql` 接口的数据库，命令将类似。
- en: Once connected, the package sets up a connection pool that is covered in the
    *Connection pooling, rate limiting, and timeouts for SQL* recipe, and you can
    either directly execute SQL on the connection or create transaction objects that
    can do everything a connection can do with the `commit` and `rollback` commands.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 连接后，该包设置了一个连接池，这在 *Connection pooling, rate limiting, and timeouts for SQL*
    菜谱中有介绍，您可以直接在连接上执行 SQL，或者创建可以执行 `commit` 和 `rollback` 命令的所有连接可以执行的事务对象。
- en: The `mysql` package provides some convenience support for Go time objects when
    talking to the database. This recipe also retrieves the username and password
    from the `MYSQLUSERNAME` and `MYSQLPASSWORD` environment variables.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`mysql` 包在与数据库通信时为 Go 时间对象提供了一些便利支持。此菜谱还从 `MYSQLUSERNAME` 和 `MYSQLPASSWORD`
    环境变量中检索用户名和密码。'
- en: Executing a database transaction interface
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行数据库事务接口
- en: When working with connections to services such as database, it can be difficult
    to write tests. This is because it's difficult in Go to mock or duck-type things
    at runtime. Although I recommend using a storage interface when working with databases,
    it's still useful to mock a database transaction interface inside of this interface.
    The *Creating storage interfaces for data portability* recipe will cover storage
    interfaces; this one will focus on an interface to wrap database connections and
    transaction objects.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当与数据库等服务进行连接时，编写测试可能很困难。这是因为 Go 在运行时模拟或鸭子类型化事物很困难。虽然我建议在处理数据库时使用存储接口，但在这个接口内部模拟数据库事务接口仍然很有用。*创建用于数据可移植性的存储接口*
    菜谱将涵盖存储接口；这个菜谱将专注于包装数据库连接和事务对象的接口。
- en: To show the use of such an interface, we'll rewrite the create and query files
    from the previous recipe to use our interface. The final output will be the same,
    but the create and query operations will all be performed in a transaction.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示此类接口的使用，我们将重写之前菜谱中的创建和查询文件，以使用我们的接口。最终输出将相同，但创建和查询操作都将在一个事务中执行。
- en: Getting ready
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Configure your environment according to these steps:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下步骤配置您的环境：
- en: Refer to the steps given in the *Getting ready* section of the *The database/sql
    package with MySQL* recipe.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 参考菜谱 *The database/sql package with MySQL* 中的 *Getting ready* 部分的步骤。
- en: Run the `go get https://github.com/agtorre/go-cookbook/tree/master/chapter5/database`
    command or write your own using the *The database/sql package with MySQL* recipe.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go get https://github.com/agtorre/go-cookbook/tree/master/chapter5/database`
    命令或使用 *The database/sql package with MySQL* 菜谱编写自己的命令。
- en: How to do it...
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行您的应用程序：
- en: From your terminal/console application, create and navigate to the `chapter5/dbinterface`
    directory.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端/控制台应用程序中，创建并导航到 `chapter5/dbinterface` 目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter5/dbinterface](https://github.com/agtorre/go-cookbook/tree/master/chapter5/dbinterface)
    or use this as an exercise to write some of your own code.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter5/dbinterface](https://github.com/agtorre/go-cookbook/tree/master/chapter5/dbinterface)
    复制测试或将其作为练习编写一些自己的代码。
- en: 'Create a file called `transaction.go` with the following contents:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `transaction.go` 的文件，内容如下：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a file called `create.go` with the following contents:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `create.go` 的文件，内容如下：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a file called `query.go` with the following contents:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `query.go` 的文件，内容如下：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create a file called `exec.go` with the following contents:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `exec.go` 的文件，内容如下：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Navigate to `example`.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `example`。
- en: 'Create a file called `main.go` with the following contents; be sure to modify
    the `dbinterface` import to use the path you set up in step 2:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，并包含以下内容；确保将 `dbinterface` 导入路径修改为你在第2步中设置的路径：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Run `go run main.go`.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`.
- en: 'You could also run this:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行以下命令：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You should see the following output:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上导航一个目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe works in a very similar way to the previous one, but demonstrates
    both using transactions and makes generic database functions that work with both
    `sql.DB` connections and `sql.Transaction` objects. It's also simple to mock these
    interfaces, as you'll see in [Chapter 8](ab72719b-7fbf-4127-a091-b4ca5cf59775.xhtml),
    *Testing*.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱与上一个菜谱非常相似，但展示了同时使用事务和创建通用的数据库函数，这些函数可以与 `sql.DB` 连接和 `sql.Transaction`
    对象一起使用。正如你将在第8章 *Testing* 中看到的，这些接口也很容易模拟。
- en: Connection pooling, rate limiting, and timeouts for SQL
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL的连接池、速率限制和超时
- en: Although the `database/sql` package provides support for connection pooling,
    rate limiting, and timeouts, it's often important to tweak the defaults to better
    accommodate your database configuration. This can become important when you have
    horizontal scaling on microservices and don't want to hold too many active connections
    to the database.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`database/sql`包提供了对连接池、速率限制和超时的支持，但通常需要调整默认设置以更好地适应你的数据库配置。当你对微服务进行横向扩展且不希望保持过多的数据库活动连接时，这可能会变得很重要。
- en: Getting ready
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Configure your environment according to these steps:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下步骤配置你的环境：
- en: Refer to the steps given in the *Getting ready* section of the *The database/sql
    package with MySQL* recipe.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 参考菜谱 *The database/sql package with MySQL* 中 *准备工作* 部分的步骤。
- en: Run the `go get https://github.com/agtorre/go-cookbook/tree/master/chapter5/database`
    command or write your own using the *The database/sql package with MySQL* recipe.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go get https://github.com/agtorre/go-cookbook/tree/master/chapter5/database`
    命令，或者使用 *The database/sql package with MySQL* 菜单编写自己的命令。
- en: How to do it...
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create and navigate to the `chapter5/pools`
    directory.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的终端/控制台应用程序中，创建并导航到 `chapter5/pools` 目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter5/pools](https://github.com/agtorre/go-cookbook/tree/master/chapter5/pools)
    or use this as an exercise to write some of your own code.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter5/pools](https://github.com/agtorre/go-cookbook/tree/master/chapter5/pools)
    复制测试，或者将此作为练习编写一些自己的代码。
- en: 'Create a file called `pools.go` with the following contents:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `pools.go` 的文件，并包含以下内容：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a file called `timeout.go` with the following contents:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `timeout.go` 的文件，并包含以下内容：
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Navigate to `example`.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `example`。
- en: 'Create a file called `main.go` with the following contents; be sure to modify
    the `pools` import to use the path you set up in step 2:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，并包含以下内容；确保将 `pools` 导入路径修改为你在第2步中设置的路径：
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Run `go run main.go`.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You could also run this:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行以下命令：
- en: '[PRE17]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You should see the following output:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上导航一个目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Being able to control the depth of our connection pool is very useful. This
    will allow us not to overload a database, but it's important to consider what
    it will mean in the context of timeouts. If you enforce both a set number of connections
    and strict context-based timeouts, as we did in this recipe, there will be cases
    where you'll have requests frequently timing out on an overloaded application
    trying to establish too many connections.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 能够控制连接池的深度非常有用。这将使我们不会过载数据库，但重要的是要考虑在超时上下文中的含义。如果你强制执行固定数量的连接和严格基于上下文的时间超时，就像我们在本菜谱中所做的那样，那么在尝试建立过多连接的过载应用程序中，你将会有请求频繁超时的情况。
- en: This is because connections will timeout waiting for a connection to become
    available. The newly added context functionality for `database/sql` makes it much
    simpler to have a shared timeout for the entire request, including the steps involved
    with performing the query.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为连接将在等待连接变得可用时超时。`database/sql` 新增的上下文功能使得为整个请求（包括执行查询的步骤）设置共享超时变得更加简单。
- en: With this and the other recipes, it makes sense to use a global `config` object
    to pass into the `Setup()` function, although this recipe just uses environment
    variables.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他食谱一样，使用全局 `config` 对象传递给 `Setup()` 函数是有意义的，尽管这个食谱只是使用了环境变量。
- en: Working with Redis
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Redis
- en: Sometimes you want persistent storage or additional functionality provided by
    third-party libraries and services. This recipe will explore Redis as a form of
    non-relational data storage and showcase how a language such as Go can interact
    with these services.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你可能需要持久化存储或第三方库和服务提供的附加功能。本食谱将探索 Redis 作为一种非关系型数据存储的形式，并展示一种如 Go 的语言如何与这些服务交互。
- en: Since Redis supports key-value storage with a simple interface, it's an excellent
    candidate for session storage or temporary data that has a duration. The ability
    to specify timeout on data stored in Redis is extremely valuable. This recipe
    will explore basic Redis usage from configuration, to querying, to using custom
    sorting.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Redis 支持使用简单接口进行键值存储，因此它非常适合用于会话存储或具有持续时间的数据。能够指定存储在 Redis 中的数据超时非常宝贵。本食谱将探索从配置到查询再到使用自定义排序的基本
    Redis 使用方法。
- en: Getting ready
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Configure your environment according to these steps:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤配置你的环境：
- en: Download and install Go on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install),
    and configure your `GOPATH` environment variable.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://golang.org/doc/install](https://golang.org/doc/install) 下载并安装 Go
    到你的操作系统，并配置你的 `GOPATH` 环境变量。
- en: Open a terminal/console application.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端/控制台应用程序。
- en: Navigate to your `GOPATH/src` and create a project directory such as `$GOPATH/src/github.com/yourusername/customrepo`.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到你的 `GOPATH/src` 并创建一个项目目录，例如 `$GOPATH/src/github.com/yourusername/customrepo`。
- en: All code will be run and modified from this directory.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 所有代码都将从这个目录运行和修改。
- en: Optionally, install the latest tested version of the code using the `go get
    github.com/agtorre/go-cookbook/` command.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，使用 `go get github.com/agtorre/go-cookbook/` 命令安装代码的最新测试版本。
- en: Run the `go get gopkg.in/redis.v5` command.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go get gopkg.in/redis.v5` 命令。
- en: Install and configure Redis using [https://redis.io/topics/quickstart](https://redis.io/topics/quickstart).
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 [https://redis.io/topics/quickstart](https://redis.io/topics/quickstart)
    安装和配置 Redis。
- en: How to do it...
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create and navigate to the `chapter5/redis`
    directory.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建并导航到 `chapter5/redis` 目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter5/redis](https://github.com/agtorre/go-cookbook/tree/master/chapter5/redis)
    or use this as an exercise to write some of your own code.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter5/redis](https://github.com/agtorre/go-cookbook/tree/master/chapter5/redis)
    复制测试或将其作为练习编写一些自己的代码。
- en: 'Create a file called `config.go` with the following contents:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `config.go` 的文件，并包含以下内容：
- en: '[PRE19]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Create a file called `exec.go` with the following contents:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `exec.go` 的文件，并包含以下内容：
- en: '[PRE20]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a file called `sort.go` with the following contents:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `sort.go` 的文件，并包含以下内容：
- en: '[PRE21]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Navigate to `example`.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `example`。
- en: 'Create a file called `main.go` with the following contents; be sure to modify
    the `redis` import to use the path you set up in step 2:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，并包含以下内容；确保将 `redis` 导入修改为步骤 2 中设置的路径：
- en: '[PRE22]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Run `go run main.go`.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You could also run this:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行以下命令：
- en: '[PRE23]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You should see the following output:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE24]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上导航一个目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Working with Redis in Go is very similar to working with MySQL, although there's
    not a standard library, a lot of the same conventions are followed with functions
    such as `Scan()` to read data from Redis into Go types. It can be challenging
    to pick the best library to use in cases like this and I suggest surveying what's
    available periodically, as things can rapidly change.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go中使用Redis与在MySQL中使用非常相似，尽管没有标准库，但很多相同的约定都遵循了，比如使用`Scan()`函数从Redis读取数据到Go类型。在这种情况下选择最佳库可能会很具挑战性，我建议定期调查可用的库，因为事情可能会迅速变化。
- en: This recipe uses a `redis` package to do basic setting and getting, doing a
    more complex sort function, and basic configuration. Like `database/sql`, you
    can set additional configuration in the form of write timeouts, poolsize, and
    more. Redis itself also provides a lot of additional functionality, including
    Redis cluster support, Zscore and counter objects, distributed locks, and more.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱使用`redis`包来进行基本的设置和获取，执行更复杂的排序函数，以及基本配置。就像`database/sql`一样，你可以以写入超时、连接池大小等形式设置额外的配置。Redis本身也提供了很多额外的功能，包括Redis集群支持、Zscore和计数器对象、分布式锁等。
- en: As in the preceding recipe, I recommend using a `config` object, which stores
    your Redis settings and configuration details for ease of setup and security.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个菜谱中建议的，我建议使用一个`config`对象，它存储你的Redis设置和配置细节，以便于设置和安全。
- en: Using NoSQL with MongoDB and mgo
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MongoDB和mgo的NoSQL
- en: You might first think that Go is better suited to relational databases due to
    Go structs and because Go is a typed language. When working with something like
    the `mgo` package, Go can nearly arbitrarily store and retrieve struct objects.
    If you version your objects, your schema can adapt and it can provide a very flexible
    development environment.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会首先认为Go更适合关系型数据库，因为Go有结构体，并且Go是一种静态类型语言。当使用类似`mgo`包的东西时，Go可以几乎任意地存储和检索结构体对象。如果你对对象进行版本控制，你的模式可以适应，并且它可以提供一个非常灵活的开发环境。
- en: Some libraries do a better job of hiding or elevating these abstractions. The
    `mgo` package is an excellent example of a library that does an excellent job
    of the former. This recipe will create a connection in a similar way to Redis
    and MySQL, but will store and retrieve an object without even defining a concrete
    schema.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 一些库在隐藏或提升这些抽象方面做得更好。`mgo`包是一个很好的例子，它出色地完成了前者。这个菜谱将以类似Redis和MySQL的方式创建连接，但将存储和检索对象，甚至不需要定义具体的模式。
- en: Getting ready
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Configure your environment according to these steps:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下步骤配置你的环境：
- en: Download and install Go on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install),
    and configure your `GOPATH` environment variable.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://golang.org/doc/install](https://golang.org/doc/install)下载并安装Go到你的操作系统上，并配置你的`GOPATH`环境变量。
- en: Open a terminal/console application.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端/控制台应用程序。
- en: Navigate to your `GOPATH/src` and create a project directory such as `$GOPATH/src/github.com/yourusername/customrepo`.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到你的`GOPATH/src`并创建一个项目目录，例如`$GOPATH/src/github.com/yourusername/customrepo`。
- en: All code will be run and modified from this directory.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 所有代码都将从这个目录运行和修改。
- en: Optionally, install the latest tested version of the code using the `go get
    github.com/agtorre/go-cookbook/` command.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，使用`go get github.com/agtorre/go-cookbook/`命令安装代码的最新测试版本。
- en: Run the `go get gopkg.in/mgo.v2` command.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go get gopkg.in/mgo.v2`命令。
- en: To run the code, you'll need a working database connection to a MongoDB instance
    that this book will not cover.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行代码，你需要一个连接到MongoDB实例的工作数据库连接，本书将不会涉及这部分内容。
- en: The basic setup is [https://docs.mongodb.com/getting-started/shell/](https://docs.mongodb.com/getting-started/shell/).
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基本设置是[https://docs.mongodb.com/getting-started/shell/](https://docs.mongodb.com/getting-started/shell/)。
- en: How to do it...
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create and navigate to the `chapter5/mongodb`
    directory.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建并导航到`chapter5/mongodb`目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter5/mongodb](https://github.com/agtorre/go-cookbook/tree/master/chapter5/mongodb)
    or use this as an exercise to write some of your own code.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://github.com/agtorre/go-cookbook/tree/master/chapter5/mongodb](https://github.com/agtorre/go-cookbook/tree/master/chapter5/mongodb)复制测试，或者将其作为练习编写一些你自己的代码。
- en: 'Create a file called `config.go` with the following contents:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`config.go`的文件，内容如下：
- en: '[PRE25]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create a file called `exec.go` with the following contents:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`exec.go`的文件，内容如下：
- en: '[PRE26]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Navigate to `example`.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`example`。
- en: 'Create a file called `main.go` with the following contents; be sure to modify
    the `mongodb` import to use the path you set up in step 2:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下；请确保将`mongodb`导入修改为使用你在步骤2中设置的路径：
- en: '[PRE27]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Run `go run main.go`.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You could also run this:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行以下命令：
- en: '[PRE28]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You should see the following output:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE29]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上移动一个目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `mgo` package also provides connection pooling, and many ways to tweak and
    configure your connections to the `mongodb` database. The examples of this recipe
    are fairly basic, but they illustrate how easy it is to reason about and query
    a document-based database. The package implements a BSON data type, and marshaling
    to and from it is very similar to working with JSON.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`mgo`包还提供了连接池，以及许多调整和配置与`mongodb`数据库连接的方法。此配方的示例相当基础，但它们说明了推理和查询基于文档的数据库是多么容易。该包实现了BSON数据类型，并且与它的序列化和反序列化非常类似于处理JSON。'
- en: Consistency guarantees and best practice for `mongodb` are outside the scope
    of this book--but it's a pleasure to work with it in the Go language.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 一致性保证和`mongodb`的最佳实践超出了本书的范围--但在Go语言中使用它是一种乐趣。
- en: Creating storage interfaces for data portability
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建用于数据可移植性的存储接口
- en: When working with external storage interfaces, it can be helpful to abstract
    your operations behind an interface. This is for ease of mocking, portability
    in case you change storage backends, and isolation of concerns. The downside to
    this approach may come if you need to perform multiple operations inside of a
    transaction. In that case, it makes sense to make composite operations, or to
    allow it to be passed in via a context object or additional function arguments.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 当与外部存储接口一起工作时，将操作抽象化在接口后面可能会有所帮助。这样做是为了方便模拟、在更改存储后端时的可移植性，以及关注点的隔离。这种方法的缺点可能在于，如果你需要在事务内部执行多个操作。在这种情况下，创建组合操作或允许通过上下文对象或额外的函数参数传递它是有意义的。
- en: This recipe will implement a very simple interface to working with items in
    MongoDB. These items will have a name and price and we'll use an interface to
    persist and retrieve these objects.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方将实现一个用于与MongoDB中的项目交互的非常简单的接口。这些项目将有一个名称和价格，我们将使用接口来持久化和检索这些对象。
- en: Getting ready
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Refer to the steps given in the *Getting ready* section of the *Using NoSQL
    with MongoDB and mgo* recipe.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考`使用MongoDB和mgo的NoSQL`配方中“准备工作”部分给出的步骤。
- en: How to do it...
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create and navigate to the `chapter5/mongodb`
    directory.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建并导航到`chapter5/mongodb`目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter5/mongodb](https://github.com/agtorre/go-cookbook/tree/master/chapter5/mongodb)
    or use this as an exercise to write some of your own code.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://github.com/agtorre/go-cookbook/tree/master/chapter5/mongodb](https://github.com/agtorre/go-cookbook/tree/master/chapter5/mongodb)复制测试或将其作为练习编写你自己的代码。
- en: 'Create a file called `storage.go` with the following contents:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`storage.go`的文件，内容如下：
- en: '[PRE30]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Create a file called `mongoconfig.go` with the following contents:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`mongoconfig.go`的文件，内容如下：
- en: '[PRE31]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create a file called `mongointerface.go` with the following contents:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`mongointerface.go`的文件，内容如下：
- en: '[PRE32]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Create a file called `exec.go` with the following contents:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`exec.go`的文件，内容如下：
- en: '[PRE33]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Navigate to `example`.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`example`。
- en: 'Create a file called `main.go` with the following contents; be sure to modify
    the `storage` import to use the path you set up in step 2:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main.go`的文件，内容如下；请确保将`storage`导入修改为使用你在步骤2中设置的路径：
- en: '[PRE34]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Run `go run main.go`.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go run main.go`。
- en: 'You could also run this:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行以下命令：
- en: '[PRE35]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'You should see the following output:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE36]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上移动一个目录并运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The most important function for demonstrating this recipe is `PerformOperation`.
    This function takes an interface to the storage as a parameter. This means we
    can dynamically replace the underlying storage without even modifying this function.
    It would be simple, for example, to connect storage to a separate API in order
    to consume and modify it.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 展示此菜谱最重要的功能是 `PerformOperation`。此函数接受存储接口作为参数。这意味着我们可以动态地替换底层的存储，甚至无需修改此函数。例如，将存储连接到单独的API以消费和修改它将变得非常简单。
- en: We added a context to these interfaces to add additional flexibility and allow
    the interface to handle timeout as well. Separating your application logic from
    the underlying storage provides a variety of benefits, but it can be difficult
    to pick the right places to draw boundaries, and this will vary widely by application.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为这些接口添加了上下文，以增加额外的灵活性并允许接口处理超时。将您的应用程序逻辑与底层存储分离提供了各种好处，但选择合适的边界位置可能很困难，并且这会因应用程序而异。
