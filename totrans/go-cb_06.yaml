- en: Web Clients and APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Initializing, storing, and passing http.Client structs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a client for a REST API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing parallel and async client requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making use of OAuth2 clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing an OAuth2 token storage interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrapping a client in added functionality and function composition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding GRPC clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with APIs and writing web clients can be a tricky subject. Different
    APIs have different types of authorization, authentication, and protocols. We'll
    explore the `http.Client` struct object, working with OAuth2 clients and long-term
    token storage, and finish off with GRPC with an additional REST interface.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you should have an idea of how to interface with
    third-party or in-house APIs and have some patterns for common operations, such
    as async requests to APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing, storing, and passing http.Client structs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Go `net/http` package exposes a flexible `http.Client` struct for working
    with HTTP APIs. This struct has separate transport functionality and is relatively
    simple to short-circuit requests, modify headers for each client operation, and
    handle any REST operations. Creating clients is a very common operation, and this
    recipe will start with the basics of working and creating an `http.Client` object.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Go on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install)
    and configure your `GOPATH` environment variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a terminal/console application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `GOPATH/src` and create a project directory. For example, `$GOPATH/src/github.com/yourusername/customrepo`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All code will be run and modified from this directory.
  prefs: []
  type: TYPE_NORMAL
- en: Optionally, install the latest tested version of the code using the `go get
    github.com/agtorre/go-cookbook/` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create the `chapter6/client` directory
    and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter6/client](https://github.com/agtorre/go-cookbook/tree/master/chapter6/client)
    or use this as an exercise to write some of your own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `client.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `exec.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `store.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file named `main.go` with the following content. Ensure that you modify
    the `client` import to use the path you set up in step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `net/http` package exposes a `DefaultClient` package variable, which is
    used by the internal operations, `Do`, `GET`, `POST`, and so on. Our `Setup()`
    function returns a client and sets the default client to be the same. When setting
    up a client, most of your modifications will take place in the transport, which
    only needs to implement the `RoundTripper` interface.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe gives an example of a no-op round tripper that always returns a
    418 status code. You can imagine how this might be useful for testing. It also
    demonstrates passing in clients as function arguments, using them as struct parameters,
    and using the default client to process requests.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a client for a REST API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing a client for a REST API will not only help you better understand the
    API in question, but also gives you a useful tool for all future applications
    using that API. This will explore structuring a client and show some strategies
    that you can immediately take advantage of.
  prefs: []
  type: TYPE_NORMAL
- en: For this client, we'll assume that the authentication is handled by basic auth,
    but it would also be possible to hit an endpoint to retrieve a token, and so on.
    For the sake of simplicity, we'll assume our API exposes one endpoint, `GetGoogle()`,
    which returns that status code returned from doing a `GET` request to [https://www.google.com](https://www.google.com).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the *Getting ready* section of the *Initializing, storing, and passing
    http.Client structs* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create the `chapter6/rest` directory
    and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter6/rest](https://github.com/agtorre/go-cookbook/tree/master/chapter6/rest)
    or use this as an exercise to write some of your own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `client.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `transport.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `exec.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file named `main.go` with the following content. Ensure that you modify
    the `rest` import to use the path you set up in step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This code demonstrates how to hide logic such as authentication, token refresh,
    and more using the `Transport` interface. It also demonstrates exposing an API
    call via a method. Had we been implementing against something like a user API,
    we would expect methods like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: If you've read [Chapter 5](e4c2a55e-c570-4490-b981-2685a89be7d2.xhtml), *All
    ab**out Databases and Storage*, this may look similar to the recipe. This composition
    through interfaces, especially common interfaces like the `RoundTripper` interface,
    provide a lot of flexibility for writing APIs. In addition, it may be useful to
    write a top-level interface as we did earlier and pass the interface around instead
    of the client directly. We'll explore this more in the next recipe as we explore
    writing an OAuth2 client.
  prefs: []
  type: TYPE_NORMAL
- en: Executing parallel and async client requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Performing client requests in parallel is relatively simple in Go. In the following
    recipe, we'll use a client to retrieve multiple URLs using Go buffered channels.
    Responses and errors will both go to a separate channel that is readily accessible
    by anyone with access to the client.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of this recipe, creation of the client, reading the channels, and
    handling of responses and errors will all be done in the `main.go` file.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the *Getting ready* section of the *Initializing, storing, and passing
    http.Client structs* recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create the `chapter6/async` directory
    and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter6/async](https://github.com/agtorre/go-cookbook/tree/master/chapter6/async)
    or use this as an exercise to write some of your own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `config.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `exec.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file named `main.go` with the following content. Ensure that you modify
    the `client` import to use the path you set up in step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe creates a framework for processing requests in a fan-out async way
    using a single client. It will attempt to retrieve as many URLs as you specify
    as quickly as it can. In many cases, you'd want to restrict this further with
    something like a worker pool. It may also make sense to handle these async Go
    routines outside of the client and for specific storage or retrieval interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe also explores using a case statement to switch on multiple channels.
    We handle the locking problem since we know how many responses we'll receive and
    we complete only after receiving them all. Another option would be a timeout if
    we were okay with dropping certain responses.
  prefs: []
  type: TYPE_NORMAL
- en: Making use of OAuth2 clients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OAuth2 is a relatively common protocol for speaking with APIs. The `golang.org/x/oauth2`
    package provides a pretty flexible client for working with OAuth2\. It has subpackages
    that specify endpoints for various providers such as Facebook, Google, and GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will demonstrate how to create a new GitHub OAuth2 client and some
    of its basic usage.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the *Getting ready* section of the *Initializing, storing, and passing
    http.Client structs* recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get golang.org/x/oauth2` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure an OAuth Client at [https://github.com/settings/applications/new](https://github.com/settings/applications/new).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the environment variables with your Client ID and Secret:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`export GITHUB_CLIENT="your_client"`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`export GITHUB_SECRET="your_secret"`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Brush up on the GitHub API documentation at [https://developer.github.com/v3/](https://developer.github.com/v3/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create and navigate to the `chapter6/client`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter6/oauthcli](https://github.com/agtorre/go-cookbook/tree/master/chapter6/oauthcli)
    or use this as an exercise to write some of your own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `config.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `exec.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.go` file with the following content. Ensure that you modify
    the `client` import to use the path you set up in step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The standard OAuth2 flow is redirect-based and ends with the server redirecting
    to an endpoint you specify. Your server is then responsible for grabbing the code
    and exchanging it for a token. This recipe bypasses that requirement by allowing
    us to use a URL such as `https://localhost` or `https://a-domain-you-own` and
    manually copying/pasting the code, then hitting enter. Once the token has been
    exchanged, the client will intelligently refresh the token as needed.
  prefs: []
  type: TYPE_NORMAL
- en: It's important to note that we're not storing the token in any way. If the program
    crashes, it must re-exchange for the token. It's also important to note that we
    need to retrieve the token explicitly only once unless the refresh token expires,
    is lost, or is corrupted. Once the client is configure, it should be able to do
    all typical HTTP operations for the API which it authorized against and for which
    it has appropriate scopes.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing an OAuth2 token storage interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we retrieved a token for our client and performed API
    requests. The downside of this approach is that we have no long-term storage for
    our token. In an HTTP server, for example, we'd like to have consistent storage
    of the token between requests.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will explore modifying the OAuth2 client to store a token between
    requests and retrieve them at will using a key. For the sake of simplicity, this
    key will be a file, but it could also be a database, Redis, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the *Getting ready* section of the *Making use of OAuth2 clients* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create and navigate to the `chapter6/client`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter6/oauthstore](https://github.com/agtorre/go-cookbook/tree/master/chapter6/oauthstore)
    or use this as an exercise to write some of your own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `config.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `tokensource.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `storage.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `filestorage.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file named `main.go` with the following content. Ensure that you modify
    the `oauthstore` import to use the path you set up in step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe takes care of storing and retrieving the contents of the token to/from
    a file. If it's a first run, it must execute the entire code exchange, but the
    subsequent runs will reuse the access token, and if one is available, it will
    refresh using the refresh token.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is currently no way in this code to differentiate between users/tokens,
    but that could be accomplished with cookies as a key for a filename or a row in
    the database as well. Let''s walk through what this code does:'
  prefs: []
  type: TYPE_NORMAL
- en: The `config.go` file wraps the standard OAuth2 config. For every method that
    involves retrieving a token, we first check whether we have a valid token in the
    local storage. If not, we retrieve one using the standard config and then store
    it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `tokensource.go` file implements our custom `TokenSource` interface that
    pairs with `Config`. Similar to `Config`, we always first try to retrieve our
    token from a file and set it with the new token otherwise.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `storage.go` file is the `storage` interface used by `Config` and `TokenSource`.
    It only defines two methods and we also include a helper function to bootstrap
    the OAuth2 code-based flow similar to what we did in the previous recipe, but
    if the file with a valid token already exists, it will be used instead.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `filestorage.go` file implements the `storage` interface. When we store
    a new token, we first truncate the file and write a JSON representation of the
    `token` struct. Otherwise, we decode the file and return `token`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrapping a client in added functionality and function composition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In 2015, Tomás Senart gave an excellent talk on wrapping an `http.Client` struct
    with an interface, allowing you to take advantage of middleware and function composition.
    You can find out more on this at [https://github.com/gophercon/2015-talks](https://github.com/gophercon/2015-talks).
    This recipe takes from his ideas and demonstrates an example of doing the same
    to the `Transport` interface of the `http.Client` struct similar to our earlier
    recipe, *Writing a client for a REST API.*
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will implement a logging and basic auth middleware for a standard
    `http.Client` struct. It also includes a decorate function that can be used when
    you need to with a large variety of middleware.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the *Getting ready* section of the *Initializing, storing, and passing
    http.Client structs* recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create the `chapter6/decorator` directory
    and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter6/decorator](https://github.com/agtorre/go-cookbook/tree/master/chapter6/decorator)
    or use this as an exercise to write some of your own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `config.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `decorator.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `middleware.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `exec.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.go` file with the following content. Ensure that you modify
    the `decorator` import to use the path you set up in step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe takes advantage of closures as first-class citizens and interfaces.
    The main trick that allows for this is having a function implement an interface.
    This allows us to wrap an interface implemented by a structure with an interface
    implemented by a function.
  prefs: []
  type: TYPE_NORMAL
- en: The `middleware.go` file contains two example client middleware functions. These
    could be extended to contain additional middleware, such as more sophisticated
    auth, metrics, and more. This recipe can also be combined with the previous recipe
    to produce an OAuth2 client that can be extended by additional middleware.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Decorator` function is a convenience function that allows the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The advantage of this approach compared to wrapping the client is that we can
    keep the interface sparse. If you want a fully featured client, you'd also need
    to implement methods such as `GET`, `POST`, and `PostForm`.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding GRPC clients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GRPC is a high performance RPC framework that is built using protocol buffers
    ([https://developers.google.com/protocol-buffers](https://developers.google.com/protocol-buffers))
    and HTTP/2 ([https://http2.github.io](https://http2.github.io)). Creating a GRPC
    client in Go has a lot of the same intricacies as working with Go HTTP clients.
    In order to demonstrate basic client usage, it's easiest to also implement a server.
    This recipe will create a `greeter` service, which takes a greeting and a name
    and returns the sentence `<greeting> <name>!`. In addition, the server can specify
    whether to exclaim `!` or not `.`.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe won't explore some details about GRPC such as streaming, but will
    hopefully serve as an introduction to creating a very basic server and client.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the *Getting ready* section of the *Initializing, storing, and passing
    http.Client structs* recipe in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install GRPC at [https://github.com/grpc/grpc/blob/master/INSTALL.md](https://github.com/grpc/grpc/blob/master/INSTALL.md).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get github.com/golang/protobuf/proto` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get github.com/golang/protobuf/protoc-gen-go` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create and navigate to the `chapter6/grpc`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter6/grpc](https://github.com/agtorre/go-cookbook/tree/master/chapter6/grpc)
    or use this as an exercise to write some of your own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory named `greeter` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `greeter.proto` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Navigate back up a directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory named `server` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `server.go` with the following content. Ensure that you
    modify the `greeter` import to use the path you set up in step 3:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `greeter.go` with the following content. Ensure that you
    modify the `greeter` import to use the path you set up in step 3:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Navigate back up a directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory named `client` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `client.go` with the following content. Ensure that you
    modify the `greeter` import to use the path you set up in step 3:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Navigate back up a directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run `go run server/server.go server/greeter.go`, and you will see the following
    output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'In a separate terminal, run `go run client/client.go` from the `grpc` directory,
    you will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The GRPC server is set up to listen on port `4444`. Once the client connects,
    it can send requests and receive responses from the server. The structure of the
    requests, responses, and supported methods are dictated by the `.proto` file we
    created in step 4\. In practice, when integrating against GRPC servers, they should
    provide the `.proto` file, which can be used to automatically generate a client.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the client, the `protoc` command generates the stubs for the
    server and all that's required is to fill in the implementation details. The generated
    Go code also has JSON tags and the same structs could be reused for JSON REST
    services. Our code sets up an insecure client. To handle GRPC securely, you need
    to use an SSL certificate.
  prefs: []
  type: TYPE_NORMAL
