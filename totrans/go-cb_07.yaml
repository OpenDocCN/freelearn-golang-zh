- en: Microservices for Applications in Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter the following recipes will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Working with web handlers, requests, and ResponseWriters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using structs and closures for stateful handlers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating input for Go structs and user inputs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering and content negotiation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing and using middleware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a reverse proxy application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting GRPC as a JSON API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Out of the box, Go is an excellent choice for writing web applications. The
    built-in `net/http` packages combined with packages like `html/template` allow
    for fully-featured modern web applications out of the box. It''s so easy that
    it encourages spinning up web interfaces for management of even basic long-running
    applications. Although the standard library is fully featured, there are still
    a large variety of third-party web packages for everything from routes to full-stack
    frameworks including these:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/urfave/negroni](https://github.com/urfave/negroni)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/gin-gonic/gin](https://github.com/gin-gonic/gin)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/labstack/echo](https://github.com/labstack/echo)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.gorillatoolkit.org/](http://www.gorillatoolkit.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/julienschmidt/httprouter](https://github.com/julienschmidt/httprouter)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The recipes in this chapter will focus on basic tasks you might run into when
    working with handlers, when navigating response and request objects, and in dealing
    with concepts such as middleware.
  prefs: []
  type: TYPE_NORMAL
- en: Working with web handlers, requests, and ResponseWriters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go defines `HandlerFuncs` and a `Handler` interface with the following signatures:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: By default, the `net/http` package makes extensive use of these types. For example,
    a route can be attached to a `Handler` or `HandlerFunc` interface. This recipe
    will explore creating a `Handler` interface, listening on a local port, and performing
    some operations on an `http.ResponseWriter` interface after processing `http.Request`.
    This should be considered the basis for Go web applications and RESTFul APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Go on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install),
    and configure your `GOPATH` environment variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a terminal/console application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to your `GOPATH/src` and create a project directory, such as `$GOPATH/src/github.com/yourusername/customrepo`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All code will be run and modified from this directory.
  prefs: []
  type: TYPE_NORMAL
- en: Optionally, install the latest tested version of the code using the `go get
    github.com/agtorre/go-cookbook/` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the curl command from [https://curl.haxx.se/download.html](https://curl.haxx.se/download.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create and navigate to the `chapter7/handlers`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter7/handlers](https://github.com/agtorre/go-cookbook/tree/master/chapter7/handlers)
    or use this as an exercise to write some of your own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `get.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `post.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `main.go` with the following contents; be sure to modify
    the `handlers` import to use the path you set up in step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You could also run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In a separate terminal, run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we set up two handlers. The first handler expects a `GET` request
    with a `GET` parameter called `name`. When we curl it, it returns the plain text
    string `Hello <name>!`
  prefs: []
  type: TYPE_NORMAL
- en: The second handler expects a `POST` method with `PostForm` requests. This is
    what you'd get if you used a standard HTML form without any AJAX calls. Alternatively,
    we could parse JSON out of the request body instead. This is commonly done with
    `json.Decoder`. I recommend trying this as an exercise as well. Lastly, the handler
    sends a JSON-formatted response and sets all the appropriate headers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although all of this was written explicitly, there are a number of methods
    for making the code less verbose, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Using [https://github.com/unrolled/render](https://github.com/unrolled/render)
    to handle responses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using various web frameworks mentioned in the *Working with web handlers, requests,
    and ResponseWriters* recipe of this chapter to parse route arguments, restrict
    routes to specific HTTP verbs, handle graceful shutdown, and more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using structs and closures for stateful handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Due to the sparse signatures of HTTP handler functions, it may seem tricky to
    add state to a handler. For example, there are a variety of ways to include a
    database connection. Two approaches to doing this are to pass in the state via
    closures, which is useful for flexibility on a single handler, or by using a struct.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will demonstrate both. We'll use a struct controller to store a
    storage interface and create two routes with a single handler that are modified
    by an outer function.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the steps given in the *Getting ready* section of the *Working with
    web handlers, requests, and ResponseWriters* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create and navigate to the `chapter7/rest`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter7/controllers](https://github.com/agtorre/go-cookbook/tree/master/chapter7/controllers)
    or use this as an exercise to write some of your own.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `controller.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `storage.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `post.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `get.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `main.go` with the following contents; be sure to modify
    the `controllers` import to use the path you set up in step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You could also run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In a separate terminal, run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These strategies work because Go allows methods to satisfy typed functions such
    as `http.HandlerFunc`. By using a struct, we can inject various pieces in `main.go`,
    which could include database connections, logging, and more. In this recipe, we
    inserted a `Storage` interface. All handlers connected to the controller can make
    use of its methods and attributes.
  prefs: []
  type: TYPE_NORMAL
- en: The `GetValue` method doesn't have an `http.HandlerFunc` signature and instead
    returns it. This is how we can use a closure to inject state. In `main.go`, we
    define two routes one with `UseDefault` set to `false` and the other with it set
    to `true`. This could be used when defining a function that spans multiple routes,
    or when using a struct where your handlers feel too cumbersome.
  prefs: []
  type: TYPE_NORMAL
- en: Validating input for Go structs and user inputs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Validation for web can be a difficult problem. This recipe will explore using
    closures to support easy mocking of validation functions and to allow flexibility
    in the type of validation performed when initializing a controller struct as described
    by the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: We'll perform this validation on a struct, but not explore how to populate the
    struct. We can assume that the data will be populated by parsing a JSON payload,
    populating explicitly from the form input, or other methods.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the steps given in the *Getting ready* section of the *Working with
    web handlers, requests, and ResponseWriters* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create and navigate to the `chapter7/validation`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter7/validation](https://github.com/agtorre/go-cookbook/tree/master/chapter7/validation)
    or use this as an exercise to write some of your own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `controller.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `validate.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `process.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `main.go` with the following contents; be sure to modify
    the `validation` import to use the path you set up in step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You could also run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In a separate terminal run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We handle validation by passing in a closure to our controller struct. For any
    input that the controller might need to validate, we'd need one of these closures.
    The advantage to this approach is that we can mock and replace the validation
    functions at run time, so testing becomes far simpler. In addition, we're not
    bound to a single function signature and we can pass in things such as a database
    connection to our validation functions.
  prefs: []
  type: TYPE_NORMAL
- en: The other thing this recipe demonstrates is returning a typed error called a
    `Verror`. This type holds validation error messages that can be displayed to users.
    One shortcoming of this approach is that it doesn't handle multiple validation
    messages at once. This would be possible by modifying the `Verror` type to allow
    for more state, for example, by including a map, in order to house a number of
    validation errors before it returns from our `ValidatePayload` function.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering and content negotiation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web handlers can return a variety of content types, for example, they can return
    JSON, plain text, images, and more. Frequently, when communicating with APIs,
    it's possible to specify and accept content type to clarify what format you'll
    pass data in as and what data you want to receive back out.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will explore using unrolled/render and a custom function to negotiate
    content type and respond accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the steps in the *Getting ready* section of the *Working with web handlers,
    requests, and ResponseWriters* recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get github.com/unrolled/render` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create and navigate to the `chapter7/negotiate`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter7/negotiate](https://github.com/agtorre/go-cookbook/tree/master/chapter7/negotiate)
    or use this as an exercise to write some of your own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `negotiate.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `respond.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `handler.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `main.go` with the following contents; be sure to modify
    the negotiate import to use the path you set up in step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You could also run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'In a separate terminal run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `github.com/unrolled/render` package does the heavy lifting for this recipe.
    There are a huge number of other options you can input if you need to work with
    HTML templates and more. This recipe can be used to autonegotiate when working
    through web handlers as is demonstrated here by passing in various content type
    headers, or directly by manipulating the struct.
  prefs: []
  type: TYPE_NORMAL
- en: A similar pattern can be applied to accept headers, but beware that this header
    often includes multiple values and your code will have to take that into account.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing and using middleware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Middleware for handlers in Go is an area that has been widely explored. There
    are a variety of packages for handling middleware. This recipe will create middleware
    from scratch and implement an `ApplyMiddleware` function to chain together a bunch
    of middleware.
  prefs: []
  type: TYPE_NORMAL
- en: It will also explore setting values in the request context object and retrieving
    them later using middleware. This will all be done with a very basic handler to
    help demonstrate how to decouple middleware logic from your handlers.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the steps given in the *Getting ready* section of the *Working with
    web handlers, requests, and ResponseWriters* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create and navigate to the `chapter7/middleware`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter7/middleware](https://github.com/agtorre/go-cookbook/tree/master/chapter7/middleware)
    or use this as an exercise to write some of your own.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `middleware.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `context.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `handler.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `main.go` with the following contents; be sure to modify
    the `middleware` import to use the path you set up in step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You could also run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'In a separate terminal, run the following curl command several times:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'In the original `main.go`, you should see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Middleware can be used to perform simple operations such as logging, metric
    collection and analytics. It can also be used to dynamically populate variables
    on each request. This can be used, for example, to collect an X-Header from the
    request to set an ID or generate an ID, like we did in this recipe. Another ID
    strategy might be to generate a UUID for every request--this allows us to easily
    correlate log messages together and trace your request across different applications
    if multiple microservices are involved in building the response.
  prefs: []
  type: TYPE_NORMAL
- en: When working with context values, it's important to consider the order of your
    middleware. Typically, it's better to not make middleware reliant on one another.
    For example, in this recipe, it would probably be better to generate the UUID
    in the logging middleware itself. However, this recipe should serve as a guide
    for layering middleware and initializing them in `main.go`.
  prefs: []
  type: TYPE_NORMAL
- en: Building a reverse proxy application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will develop a reverse proxy application. The idea is, by
    hitting `http://localhost:3333` in a browser, all traffic will be forwarded to
    a configurable host and the responses will be forwarded to your browser. The end
    result should be [https://www.golang.org](https://www.golang.org) rendered in
    a browser through our proxy application.
  prefs: []
  type: TYPE_NORMAL
- en: This can be combined with port forwarding and ssh tunnels in order to securely
    hit websites through an intermediate server. This recipe will build a reverse
    proxy from the ground up, but this functionality is also provided by the `net/http/httputil`
    package. Using this package, the incoming request can be modified by `Director
    func(*http.Request)` and the outgoing response can be modified by `ModifyResponse
    func(*http.Response) error`. In addition, there's support for buffering the response.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the steps given in the *Getting ready* section of the *Working with
    web handlers, requests, and ResponseWriters* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create and navigate to the `chapter7/proxy`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter7/proxy](https://github.com/agtorre/go-cookbook/tree/master/chapter7/proxy)
    or use this as an exercise to write some of your own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `proxy.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `process.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `main.go` with the following contents; be sure to modify
    the `proxy` import to use the path you set up in step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You could also run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Navigate a browser to `localhost:3333/`. You should see the [https://golang.org/](https://golang.org/)
    website rendered!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go request and response objects are largely shareable between clients and handlers.
    This code takes a request obtained by a `Proxy` struct that satisfies a `Handler`
    interface. The `main.go` file is using `Handle` instead of `HandleFunc` used elsewhere.
    Once the request is available, it's modified to prepend `Proxy.BaseURL` for the
    request which the client then dispatches. Lastly, the response is copied back
    to the `ResponseWriter` interface. This includes all headers, the body, and the
    status.
  prefs: []
  type: TYPE_NORMAL
- en: We can also add some additional features such as basic auth for requests, token
    management, and more if needed. This can be useful for token management where
    the proxy manages sessions for a JavaScript or other client application.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting GRPC as a JSON API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *Understanding GRPC clients* recipe from [Chapter 6](7a5004b7-eae0-4fbb-bcfe-5798a97ec835.xhtml),
    *Web Clients and APIs*, we wrote a basic GRPC server and client. This recipe will
    expand on that idea by putting common RPC functions in a package and wrapping
    them in both a GRPC server and a standard web handler. This can be useful when
    your API wants to support both types of client, but you don't want to replicate
    code for common functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the steps given in the *Getting ready* section of the *Working with
    web handlers, requests, and ResponseWriters* recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install GRPC from [https://github.com/grpc/grpc/blob/master/INSTALL.md](https://github.com/grpc/grpc/blob/master/INSTALL.md).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get github.com/golang/protobuf/proto` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get github.com/golang/protobuf/protoc-gen-go` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create and navigate to the `chapter7/grpcjson`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter7/grpcjson](https://github.com/agtorre/go-cookbook/tree/master/chapter7/grpcjson)
    or use this as an exercise to write some of your own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory named `keyvalue` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `keyvalue.proto` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Navigate back up a directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory named `internal`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `internal/keyvalue.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `grpc`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `grpc/main.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `http`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `http/set.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `http/get.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `http/main.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Run the `go run http/*.go` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'In a separate terminal run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although this recipe omits the client, you could replicate the steps in the
    *Understanding GRPC clients* recipe from [Chapter 6](7a5004b7-eae0-4fbb-bcfe-5798a97ec835.xhtml),
    *Web Clients and APIs*, and you should see identical results to what we see with
    our curls. Both the `http` and `grpc` directories make use of the same internal
    package. We have to be careful in this package to return appropriate GRPC error
    codes and to correctly map those error codes to our HTTP response. In this case,
    we use `codes.NotFound`, which we map to `http.StatusNotFound`. If you have to
    handle more than a few errors, a `switch` statement may make more sense than an
    `if…else` statements.
  prefs: []
  type: TYPE_NORMAL
- en: The other thing you may notice is that GRPC signatures are usually very consistent.
    They take a request and return an optional response and an error. It's possible
    to create a generic handler shim if your GRPC calls are repetitive enough and
    it also seems like it lends itself well to code generation, you may eventually
    see something like that with a package such as `github.com/goadesign/goa`.
  prefs: []
  type: TYPE_NORMAL
