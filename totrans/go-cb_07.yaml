- en: Microservices for Applications in Go
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go 应用程序的微服务
- en: 'In this chapter the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Working with web handlers, requests, and ResponseWriters
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 Web 处理程序、请求和 ResponseWriter 一起工作
- en: Using structs and closures for stateful handlers
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用结构体和闭包进行有状态处理程序
- en: Validating input for Go structs and user inputs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证 Go 结构体和用户输入
- en: Rendering and content negotiation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染和内容协商
- en: Implementing and using middleware
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现和使用中间件
- en: Building a reverse proxy application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 reverse proxy 应用程序
- en: Exporting GRPC as a JSON API
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 GRPC 导出为 JSON API
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: 'Out of the box, Go is an excellent choice for writing web applications. The
    built-in `net/http` packages combined with packages like `html/template` allow
    for fully-featured modern web applications out of the box. It''s so easy that
    it encourages spinning up web interfaces for management of even basic long-running
    applications. Although the standard library is fully featured, there are still
    a large variety of third-party web packages for everything from routes to full-stack
    frameworks including these:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Go 是编写 Web 应用的绝佳选择。内置的 `net/http` 包与 `html/template` 等包结合使用，可以轻松地构建功能齐全的现代
    Web 应用程序。它如此简单，以至于鼓励为甚至基本的长运行应用程序启动 Web 界面。尽管标准库功能齐全，但仍有许多第三方 Web 包，从路由到全栈框架，包括以下内容：
- en: '[https://github.com/urfave/negroni](https://github.com/urfave/negroni)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/urfave/negroni](https://github.com/urfave/negroni)'
- en: '[https://github.com/gin-gonic/gin](https://github.com/gin-gonic/gin)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/gin-gonic/gin](https://github.com/gin-gonic/gin)'
- en: '[https://github.com/labstack/echo](https://github.com/labstack/echo)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/labstack/echo](https://github.com/labstack/echo)'
- en: '[http://www.gorillatoolkit.org/](http://www.gorillatoolkit.org/)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.gorillatoolkit.org/](http://www.gorillatoolkit.org/)'
- en: '[https://github.com/julienschmidt/httprouter](https://github.com/julienschmidt/httprouter)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/julienschmidt/httprouter](https://github.com/julienschmidt/httprouter)'
- en: The recipes in this chapter will focus on basic tasks you might run into when
    working with handlers, when navigating response and request objects, and in dealing
    with concepts such as middleware.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的食谱将侧重于您在处理程序工作时可能遇到的基本任务，当导航响应和请求对象时，以及处理中间件等概念。
- en: Working with web handlers, requests, and ResponseWriters
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 Web 处理程序、请求和 ResponseWriter 一起工作
- en: 'Go defines `HandlerFuncs` and a `Handler` interface with the following signatures:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Go 定义了 `HandlerFuncs` 和 `Handler` 接口，具有以下签名：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: By default, the `net/http` package makes extensive use of these types. For example,
    a route can be attached to a `Handler` or `HandlerFunc` interface. This recipe
    will explore creating a `Handler` interface, listening on a local port, and performing
    some operations on an `http.ResponseWriter` interface after processing `http.Request`.
    This should be considered the basis for Go web applications and RESTFul APIs.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`net/http` 包广泛使用这些类型。例如，可以将路由附加到 `Handler` 或 `HandlerFunc` 接口。本食谱将探讨创建
    `Handler` 接口，监听本地端口，并在处理 `http.Request` 后对 `http.ResponseWriter` 接口执行一些操作。这应被视为
    Go Web 应用程序和 RESTful API 的基础。
- en: Getting ready
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Configure your environment according to these steps:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下步骤配置您的环境：
- en: Download and install Go on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install),
    and configure your `GOPATH` environment variable.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://golang.org/doc/install](https://golang.org/doc/install) 在您的操作系统上下载和安装
    Go，并配置您的 `GOPATH` 环境变量。
- en: Open a terminal/console application.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端/控制台应用程序。
- en: Navigate to your `GOPATH/src` and create a project directory, such as `$GOPATH/src/github.com/yourusername/customrepo`.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的 `GOPATH/src` 并创建一个项目目录，例如 `$GOPATH/src/github.com/yourusername/customrepo`。
- en: All code will be run and modified from this directory.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 所有代码都将从这个目录运行和修改。
- en: Optionally, install the latest tested version of the code using the `go get
    github.com/agtorre/go-cookbook/` command.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选，使用 `go get github.com/agtorre/go-cookbook/` 命令安装代码的最新测试版本。
- en: Install the curl command from [https://curl.haxx.se/download.html](https://curl.haxx.se/download.html).
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://curl.haxx.se/download.html](https://curl.haxx.se/download.html) 安装
    curl 命令。
- en: How to do it...
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行应用程序：
- en: From your terminal/console application, create and navigate to the `chapter7/handlers`
    directory.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端/控制台应用程序中，创建并导航到 `chapter7/handlers` 目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter7/handlers](https://github.com/agtorre/go-cookbook/tree/master/chapter7/handlers)
    or use this as an exercise to write some of your own code.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter7/handlers](https://github.com/agtorre/go-cookbook/tree/master/chapter7/handlers)
    复制测试或将其作为练习来编写一些自己的代码。
- en: 'Create a file called `get.go` with the following contents:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `get.go` 的文件，并包含以下内容：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a file called `post.go` with the following contents:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `post.go` 的文件，并包含以下内容：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录并导航到它。
- en: 'Create a file called `main.go` with the following contents; be sure to modify
    the `handlers` import to use the path you set up in step 2:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，并包含以下内容；确保将 `handlers` 导入修改为你在第二步中设置的路径：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Run `go run main.go`.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`.
- en: 'You could also run the following command:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行以下命令：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You should see the following output:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In a separate terminal, run the following commands:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个终端中，运行以下命令：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You will see the following output:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上移动一个目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: For this recipe, we set up two handlers. The first handler expects a `GET` request
    with a `GET` parameter called `name`. When we curl it, it returns the plain text
    string `Hello <name>!`
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们设置了两个处理器。第一个处理器期望一个带有名为 `name` 的 `GET` 参数的 `GET` 请求。当我们使用curl访问它时，它返回纯文本字符串
    `Hello <name>!`
- en: The second handler expects a `POST` method with `PostForm` requests. This is
    what you'd get if you used a standard HTML form without any AJAX calls. Alternatively,
    we could parse JSON out of the request body instead. This is commonly done with
    `json.Decoder`. I recommend trying this as an exercise as well. Lastly, the handler
    sends a JSON-formatted response and sets all the appropriate headers.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个处理器期望一个带有 `PostForm` 请求的 `POST` 方法。如果你使用了一个标准的HTML表单而没有任何AJAX调用，你将得到这个结果。或者，我们也可以从请求体中解析JSON。我建议你也尝试这个练习。最后，处理器发送一个JSON格式的响应并设置所有适当的头信息。
- en: 'Although all of this was written explicitly, there are a number of methods
    for making the code less verbose, as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管所有这些都被明确写出，但有许多方法可以使代码更简洁，如下所示：
- en: Using [https://github.com/unrolled/render](https://github.com/unrolled/render)
    to handle responses
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 [https://github.com/unrolled/render](https://github.com/unrolled/render)
    来处理响应
- en: Using various web frameworks mentioned in the *Working with web handlers, requests,
    and ResponseWriters* recipe of this chapter to parse route arguments, restrict
    routes to specific HTTP verbs, handle graceful shutdown, and more
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用本章 *与Web处理器、请求和ResponseWriters协同工作* 菜单中提到的各种Web框架来解析路由参数，限制路由到特定的HTTP动词，处理优雅的关闭，等等
- en: Using structs and closures for stateful handlers
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用结构和闭包进行有状态的处理
- en: Due to the sparse signatures of HTTP handler functions, it may seem tricky to
    add state to a handler. For example, there are a variety of ways to include a
    database connection. Two approaches to doing this are to pass in the state via
    closures, which is useful for flexibility on a single handler, or by using a struct.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 由于HTTP处理器函数的签名稀疏，可能看起来很难向处理器添加状态。例如，有各种方法来包含数据库连接。实现这一目标的两种方法是通过闭包传递状态，这对于单个处理器的灵活性很有用，或者通过使用结构体。
- en: This recipe will demonstrate both. We'll use a struct controller to store a
    storage interface and create two routes with a single handler that are modified
    by an outer function.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱将演示这两者。我们将使用一个结构控制器来存储存储接口，并创建两个由外部函数修改的单个处理器路由。
- en: Getting ready
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Refer to the steps given in the *Getting ready* section of the *Working with
    web handlers, requests, and ResponseWriters* recipe.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 参考本章 *准备工作* 部分的 *与Web处理器、请求和ResponseWriters协同工作* 菜单中的步骤。
- en: How to do it...
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'These steps cover writing and running your application:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create and navigate to the `chapter7/rest`
    directory.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序，创建并导航到 `chapter7/rest` 目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter7/controllers](https://github.com/agtorre/go-cookbook/tree/master/chapter7/controllers)
    or use this as an exercise to write some of your own.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter7/controllers](https://github.com/agtorre/go-cookbook/tree/master/chapter7/controllers)
    复制测试或将其作为练习来编写一些自己的。
- en: 'Create a file called `controller.go` with the following contents:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `controller.go` 的文件，并包含以下内容：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a file called `storage.go` with the following contents:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `storage.go` 的文件，并包含以下内容：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create a file called `post.go` with the following contents:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `post.go` 的文件，并包含以下内容：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Create a file called `get.go` with the following contents:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `get.go` 的文件，并包含以下内容：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录，并导航到该目录。
- en: 'Create a file called `main.go` with the following contents; be sure to modify
    the `controllers` import to use the path you set up in step 2:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，并包含以下内容；确保将 `controllers` 导入修改为步骤 2 中设置的路径：
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Run `go run main.go`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You could also run:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You should see the following output:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In a separate terminal, run the following commands:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个终端中，运行以下命令：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You will see the following output:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上导航一个目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: These strategies work because Go allows methods to satisfy typed functions such
    as `http.HandlerFunc`. By using a struct, we can inject various pieces in `main.go`,
    which could include database connections, logging, and more. In this recipe, we
    inserted a `Storage` interface. All handlers connected to the controller can make
    use of its methods and attributes.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这些策略之所以有效，是因为 Go 允许方法满足诸如 `http.HandlerFunc` 这样的类型函数。通过使用结构体，我们可以在 `main.go`
    中注入各种组件，这可能包括数据库连接、日志记录等。在这个配方中，我们插入了一个 `Storage` 接口。所有连接到控制器的处理程序都可以使用其方法和属性。
- en: The `GetValue` method doesn't have an `http.HandlerFunc` signature and instead
    returns it. This is how we can use a closure to inject state. In `main.go`, we
    define two routes one with `UseDefault` set to `false` and the other with it set
    to `true`. This could be used when defining a function that spans multiple routes,
    or when using a struct where your handlers feel too cumbersome.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`GetValue` 方法没有 `http.HandlerFunc` 签名，而是返回它。这就是我们如何使用闭包来注入状态。在 `main.go` 中，我们定义了两个路由，一个将
    `UseDefault` 设置为 `false`，另一个设置为 `true`。这可以在定义跨越多个路由的函数时使用，或者在使用结构体时，你的处理程序感觉过于繁琐。'
- en: Validating input for Go structs and user inputs
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证 Go 结构体和用户输入
- en: Validation for web can be a difficult problem. This recipe will explore using
    closures to support easy mocking of validation functions and to allow flexibility
    in the type of validation performed when initializing a controller struct as described
    by the previous recipe.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 网页验证可能是一个难题。这个配方将探讨使用闭包来支持轻松模拟验证函数，并允许在初始化控制器结构体时（如前一个配方所述）进行灵活的验证类型。
- en: We'll perform this validation on a struct, but not explore how to populate the
    struct. We can assume that the data will be populated by parsing a JSON payload,
    populating explicitly from the form input, or other methods.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在结构体上执行此验证，但不探讨如何填充结构体。我们可以假设数据将通过解析 JSON 有效负载、显式地从表单输入填充或其他方法来填充。
- en: Getting ready
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Refer to the steps given in the *Getting ready* section of the *Working with
    web handlers, requests, and ResponseWriters* recipe.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 参考在 *Working with web handlers, requests, and ResponseWriters* 配方的 *Getting
    ready* 部分中给出的步骤。
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'These steps cover writing and running your application:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create and navigate to the `chapter7/validation`
    directory.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建并导航到 `chapter7/validation` 目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter7/validation](https://github.com/agtorre/go-cookbook/tree/master/chapter7/validation)
    or use this as an exercise to write some of your own code.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter7/validation](https://github.com/agtorre/go-cookbook/tree/master/chapter7/validation)
    复制测试或将其作为练习编写一些自己的代码。
- en: 'Create a file called `controller.go` with the following contents:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `controller.go` 的文件，并包含以下内容：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a file called `validate.go` with the following contents:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `validate.go` 的文件，并包含以下内容：
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Create a file called `process.go` with the following contents:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `process.go` 的文件，并包含以下内容：
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录，并导航到该目录。
- en: 'Create a file called `main.go` with the following contents; be sure to modify
    the `validation` import to use the path you set up in step 2:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，并包含以下内容；确保将 `validation` 导入修改为步骤 2 中设置的路径：
- en: '[PRE20]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Run `go run main.go`.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You could also run:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行：
- en: '[PRE21]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You should see the following output:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE22]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In a separate terminal run the following commands:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个终端中运行以下命令：
- en: '[PRE23]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You should see the following output:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE24]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试用例，向上移动一个目录并运行 `go test`。确保所有测试通过。
- en: How it works...
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We handle validation by passing in a closure to our controller struct. For any
    input that the controller might need to validate, we'd need one of these closures.
    The advantage to this approach is that we can mock and replace the validation
    functions at run time, so testing becomes far simpler. In addition, we're not
    bound to a single function signature and we can pass in things such as a database
    connection to our validation functions.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过向我们的控制器结构体传递闭包来处理验证。对于控制器可能需要验证的任何输入，我们都需要这些闭包之一。这种方法的优势在于我们可以在运行时模拟和替换验证函数，从而使测试变得简单得多。此外，我们不受单一函数签名的限制，我们可以传递诸如数据库连接之类的信息给验证函数。
- en: The other thing this recipe demonstrates is returning a typed error called a
    `Verror`. This type holds validation error messages that can be displayed to users.
    One shortcoming of this approach is that it doesn't handle multiple validation
    messages at once. This would be possible by modifying the `Verror` type to allow
    for more state, for example, by including a map, in order to house a number of
    validation errors before it returns from our `ValidatePayload` function.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方还展示了返回一个名为 `Verror` 的类型化错误。此类型包含可以显示给用户的验证错误消息。这种方法的一个缺点是它不能同时处理多个验证消息。这可以通过修改
    `Verror` 类型来实现，允许更多的状态，例如，通过包括一个映射，以便在从我们的 `ValidatePayload` 函数返回之前存储多个验证错误。
- en: Rendering and content negotiation
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染和内容协商
- en: Web handlers can return a variety of content types, for example, they can return
    JSON, plain text, images, and more. Frequently, when communicating with APIs,
    it's possible to specify and accept content type to clarify what format you'll
    pass data in as and what data you want to receive back out.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Web 处理器可以返回各种内容类型，例如，它们可以返回 JSON、纯文本、图像等。在与 API 通信时，通常可以指定和接受内容类型，以明确你将传递数据的格式以及你希望接收的数据格式。
- en: This recipe will explore using unrolled/render and a custom function to negotiate
    content type and respond accordingly.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方将探讨使用 unrolled/render 和自定义函数来协商内容类型并相应地响应。
- en: Getting ready
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Configure your environment according to these steps:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下步骤配置你的环境：
- en: Refer to the steps in the *Getting ready* section of the *Working with web handlers,
    requests, and ResponseWriters* recipe.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 参考配方 *Working with web handlers, requests, and ResponseWriters* 中的 *Getting
    ready* 部分的步骤。
- en: Run the `go get github.com/unrolled/render` command.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go get github.com/unrolled/render` 命令。
- en: How to do it...
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create and navigate to the `chapter7/negotiate`
    directory.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的终端/控制台应用程序中，创建并导航到 `chapter7/negotiate` 目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter7/negotiate](https://github.com/agtorre/go-cookbook/tree/master/chapter7/negotiate)
    or use this as an exercise to write some of your own code.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter7/negotiate](https://github.com/agtorre/go-cookbook/tree/master/chapter7/negotiate)
    复制测试用例，或者将此作为练习来编写你自己的代码。
- en: 'Create a file called `negotiate.go` with the following contents:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `negotiate.go` 的文件，并包含以下内容：
- en: '[PRE25]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create a file called `respond.go` with the following contents:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `respond.go` 的文件，并包含以下内容：
- en: '[PRE26]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create a file called `handler.go` with the following contents:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `handler.go` 的文件，并包含以下内容：
- en: '[PRE27]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录并导航到它。
- en: 'Create a file called `main.go` with the following contents; be sure to modify
    the negotiate import to use the path you set up in step 2:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，并包含以下内容；确保将协商导入修改为使用步骤 2 中设置的路径：
- en: '[PRE28]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Run `go run main.go`.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You could also run:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行：
- en: '[PRE29]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You should see the following output:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE30]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In a separate terminal run the following:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个终端中运行以下命令：
- en: '[PRE31]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You will see the following output:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '[PRE32]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试用例，向上移动一个目录并运行 `go test`。确保所有测试通过。
- en: How it works...
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `github.com/unrolled/render` package does the heavy lifting for this recipe.
    There are a huge number of other options you can input if you need to work with
    HTML templates and more. This recipe can be used to autonegotiate when working
    through web handlers as is demonstrated here by passing in various content type
    headers, or directly by manipulating the struct.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`github.com/unrolled/render` 包为此菜谱做了大量工作。如果你需要处理HTML模板等，你可以输入大量的其他选项。此菜谱可用于在处理网络处理程序时自动协商，如在此处通过传递各种内容类型标题或直接操作结构体所示。'
- en: A similar pattern can be applied to accept headers, but beware that this header
    often includes multiple values and your code will have to take that into account.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将类似的模式应用于接受标题，但请注意，这个标题通常包含多个值，并且你的代码必须考虑到这一点。
- en: Implementing and using middleware
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现和使用中间件
- en: Middleware for handlers in Go is an area that has been widely explored. There
    are a variety of packages for handling middleware. This recipe will create middleware
    from scratch and implement an `ApplyMiddleware` function to chain together a bunch
    of middleware.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Go中的处理程序中间件是一个被广泛探讨的领域。有各种处理中间件的包。此菜谱将从头开始创建中间件并实现一个 `ApplyMiddleware` 函数来链接一系列中间件。
- en: It will also explore setting values in the request context object and retrieving
    them later using middleware. This will all be done with a very basic handler to
    help demonstrate how to decouple middleware logic from your handlers.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 它还将探索在请求上下文对象中设置值并在稍后使用中间件检索它们。所有这些都将使用一个非常基本的处理程序来完成，以帮助演示如何将中间件逻辑与你的处理程序解耦。
- en: Getting ready
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Refer to the steps given in the *Getting ready* section of the *Working with
    web handlers, requests, and ResponseWriters* recipe.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考 *与网络处理程序、请求和ResponseWriters一起工作* 菜谱中的 *准备工作* 部分给出的步骤。
- en: How to do it...
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create and navigate to the `chapter7/middleware`
    directory.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建并导航到 `chapter7/middleware` 目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter7/middleware](https://github.com/agtorre/go-cookbook/tree/master/chapter7/middleware)
    or use this as an exercise to write some of your own.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter7/middleware](https://github.com/agtorre/go-cookbook/tree/master/chapter7/middleware)
    复制测试或将其用作练习来编写一些你自己的测试。
- en: 'Create a file called `middleware.go` with the following contents:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `middleware.go` 的文件，并包含以下内容：
- en: '[PRE33]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Create a file called `context.go` with the following contents:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `context.go` 的文件，并包含以下内容：
- en: '[PRE34]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create a file called `handler.go` with the following contents:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `handler.go` 的文件，并包含以下内容：
- en: '[PRE35]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录并导航到它。
- en: 'Create a file called `main.go` with the following contents; be sure to modify
    the `middleware` import to use the path you set up in step 2:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，并包含以下内容；确保将 `middleware` 导入修改为你在第2步中设置的路径：
- en: '[PRE36]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Run `go run main.go`.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You could also run:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行：
- en: '[PRE37]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'You should see the following output:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE38]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'In a separate terminal, run the following curl command several times:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个终端中，多次运行以下curl命令：
- en: '[PRE39]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'You will see the following output:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '[PRE40]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'In the original `main.go`, you should see the following:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在原始的 `main.go` 中，你应该看到以下：
- en: '[PRE41]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上移动一个目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Middleware can be used to perform simple operations such as logging, metric
    collection and analytics. It can also be used to dynamically populate variables
    on each request. This can be used, for example, to collect an X-Header from the
    request to set an ID or generate an ID, like we did in this recipe. Another ID
    strategy might be to generate a UUID for every request--this allows us to easily
    correlate log messages together and trace your request across different applications
    if multiple microservices are involved in building the response.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 中间件可以用于执行简单的操作，如日志记录、指标收集和分析。它还可以用于在每个请求上动态填充变量。例如，我们可以从请求中收集X-Header来设置ID或生成ID，就像我们在本菜谱中所做的那样。另一种ID策略可能是为每个请求生成一个UUID--这使我们能够轻松地将日志消息关联起来，并在涉及多个微服务构建响应的情况下跟踪你的请求。
- en: When working with context values, it's important to consider the order of your
    middleware. Typically, it's better to not make middleware reliant on one another.
    For example, in this recipe, it would probably be better to generate the UUID
    in the logging middleware itself. However, this recipe should serve as a guide
    for layering middleware and initializing them in `main.go`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理上下文值时，考虑中间件的顺序很重要。通常，最好不要让中间件相互依赖。例如，在本食谱中，可能最好在日志中间件本身生成 UUID。然而，本食谱应作为分层中间件和初始化它们的
    `main.go` 的指南。
- en: Building a reverse proxy application
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建反向代理应用程序
- en: In this recipe, we will develop a reverse proxy application. The idea is, by
    hitting `http://localhost:3333` in a browser, all traffic will be forwarded to
    a configurable host and the responses will be forwarded to your browser. The end
    result should be [https://www.golang.org](https://www.golang.org) rendered in
    a browser through our proxy application.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将开发一个反向代理应用程序。其想法是，通过在浏览器中点击 `http://localhost:3333`，所有流量都将转发到可配置的主机，响应将转发到你的浏览器。最终结果应该是通过我们的代理应用程序在浏览器中渲染的
    [https://www.golang.org](https://www.golang.org)。
- en: This can be combined with port forwarding and ssh tunnels in order to securely
    hit websites through an intermediate server. This recipe will build a reverse
    proxy from the ground up, but this functionality is also provided by the `net/http/httputil`
    package. Using this package, the incoming request can be modified by `Director
    func(*http.Request)` and the outgoing response can be modified by `ModifyResponse
    func(*http.Response) error`. In addition, there's support for buffering the response.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以与端口转发和 ssh 隧道结合使用，以便通过中间服务器安全地访问网站。本食谱将从零开始构建反向代理，但此功能也由 `net/http/httputil`
    包提供。使用此包，可以通过 `Director func(*http.Request)` 修改传入的请求，并通过 `ModifyResponse func(*http.Response)
    error` 修改传出的响应。此外，还支持缓冲响应。
- en: Getting ready
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Refer to the steps given in the *Getting ready* section of the *Working with
    web handlers, requests, and ResponseWriters* recipe.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文档中“准备就绪”部分的步骤。
- en: How to do it...
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create and navigate to the `chapter7/proxy`
    directory.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建并导航到 `chapter7/proxy` 目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter7/proxy](https://github.com/agtorre/go-cookbook/tree/master/chapter7/proxy)
    or use this as an exercise to write some of your own code.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter7/proxy](https://github.com/agtorre/go-cookbook/tree/master/chapter7/proxy)
    复制测试或将其作为练习编写一些自己的代码。
- en: 'Create a file called `proxy.go` with the following contents:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `proxy.go` 的文件，并包含以下内容：
- en: '[PRE42]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Create a file called `process.go` with the following contents:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `process.go` 的文件，并包含以下内容：
- en: '[PRE43]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录并导航到它。
- en: 'Create a file called `main.go` with the following contents; be sure to modify
    the `proxy` import to use the path you set up in step 2:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，并包含以下内容；确保将 `proxy` 导入修改为使用你在第 2 步中设置的路径：
- en: '[PRE44]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Run `go run main.go`.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You could also run:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行：
- en: '[PRE45]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'You should see the following output:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE46]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Navigate a browser to `localhost:3333/`. You should see the [https://golang.org/](https://golang.org/)
    website rendered!
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用浏览器导航到 `localhost:3333/`。你应该能看到 [https://golang.org/](https://golang.org/)
    网站被渲染出来！
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请进入上一级目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Go request and response objects are largely shareable between clients and handlers.
    This code takes a request obtained by a `Proxy` struct that satisfies a `Handler`
    interface. The `main.go` file is using `Handle` instead of `HandleFunc` used elsewhere.
    Once the request is available, it's modified to prepend `Proxy.BaseURL` for the
    request which the client then dispatches. Lastly, the response is copied back
    to the `ResponseWriter` interface. This includes all headers, the body, and the
    status.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Go 请求和响应对象在客户端和处理器之间大部分是可共享的。此代码通过满足 `Handler` 接口的 `Proxy` 结构体获取请求。`main.go`
    文件使用 `Handle` 而不是其他地方使用的 `HandleFunc`。一旦请求可用，它就被修改为为请求添加 `Proxy.BaseURL` 前缀，然后客户端将其分派。最后，响应被复制回
    `ResponseWriter` 接口。这包括所有头部、正文和状态。
- en: We can also add some additional features such as basic auth for requests, token
    management, and more if needed. This can be useful for token management where
    the proxy manages sessions for a JavaScript or other client application.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以添加一些额外的功能，例如基本身份验证、令牌管理等等，如果需要的话。这对于令牌管理很有用，其中代理管理 JavaScript 或其他客户端应用程序的会话。
- en: Exporting GRPC as a JSON API
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 GRPC 作为 JSON API 导出
- en: In the *Understanding GRPC clients* recipe from [Chapter 6](7a5004b7-eae0-4fbb-bcfe-5798a97ec835.xhtml),
    *Web Clients and APIs*, we wrote a basic GRPC server and client. This recipe will
    expand on that idea by putting common RPC functions in a package and wrapping
    them in both a GRPC server and a standard web handler. This can be useful when
    your API wants to support both types of client, but you don't want to replicate
    code for common functionality.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 6 章 *理解 GRPC 客户端* 的配方中，*Web 客户端和 API*，我们编写了一个基本的 GRPC 服务器和客户端。这个配方将在此基础上扩展，通过将常见的
    RPC 函数放在一个包中，并将它们包装在 GRPC 服务器和标准网络处理器中。当你的 API 想要支持这两种类型的客户端，但又不想为常见功能重复代码时，这可能很有用。
- en: Getting ready
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Configure your environment according to these steps:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下步骤配置你的环境：
- en: Refer to the steps given in the *Getting ready* section of the *Working with
    web handlers, requests, and ResponseWriters* recipe.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请参考 *与网络处理器、请求和 ResponseWriters 一起工作* 配方中的 *准备就绪* 部分的步骤。
- en: Install GRPC from [https://github.com/grpc/grpc/blob/master/INSTALL.md](https://github.com/grpc/grpc/blob/master/INSTALL.md).
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/grpc/grpc/blob/master/INSTALL.md](https://github.com/grpc/grpc/blob/master/INSTALL.md)
    安装 GRPC。
- en: Run the `go get github.com/golang/protobuf/proto` command.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go get github.com/golang/protobuf/proto` 命令。
- en: Run the `go get github.com/golang/protobuf/protoc-gen-go` command.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go get github.com/golang/protobuf/protoc-gen-go` 命令。
- en: How to do it...
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create and navigate to the `chapter7/grpcjson`
    directory.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建并导航到 `chapter7/grpcjson` 目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter7/grpcjson](https://github.com/agtorre/go-cookbook/tree/master/chapter7/grpcjson)
    or use this as an exercise to write some of your own code.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter7/grpcjson](https://github.com/agtorre/go-cookbook/tree/master/chapter7/grpcjson)
    复制测试，或者将其作为练习编写一些自己的代码。
- en: Create a new directory named `keyvalue` and navigate to it.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `keyvalue` 的新目录，并导航到它。
- en: 'Create a file called `keyvalue.proto` with the following contents:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `keyvalue.proto` 的文件，并包含以下内容：
- en: '[PRE47]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Run the following command:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE48]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Navigate back up a directory.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向上移动一个目录。
- en: Create a new directory named `internal`.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `internal` 的新目录。
- en: 'Create a file called `internal/keyvalue.go` with the following contents:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `internal/keyvalue.go` 的文件，并包含以下内容：
- en: '[PRE49]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Create a new directory named `grpc`.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `grpc` 的新目录。
- en: 'Create a file called `grpc/main.go` with the following contents:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `grpc/main.go` 的文件，并包含以下内容：
- en: '[PRE50]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Create a new directory named `http`.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `http` 的新目录。
- en: 'Create a file called `http/set.go` with the following contents:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `http/set.go` 的文件，并包含以下内容：
- en: '[PRE51]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Create a file called `http/get.go` with the following contents:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `http/get.go` 的文件，并包含以下内容：
- en: '[PRE52]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Create a file called `http/main.go` with the following contents:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `http/main.go` 的文件，并包含以下内容：
- en: '[PRE53]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Run the `go run http/*.go` command.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run http/*.go` 命令。
- en: 'You should see the following output:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE54]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'In a separate terminal run the following commands:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个终端中运行以下命令：
- en: '[PRE55]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'You should see the following output:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE56]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上移动一个目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Although this recipe omits the client, you could replicate the steps in the
    *Understanding GRPC clients* recipe from [Chapter 6](7a5004b7-eae0-4fbb-bcfe-5798a97ec835.xhtml),
    *Web Clients and APIs*, and you should see identical results to what we see with
    our curls. Both the `http` and `grpc` directories make use of the same internal
    package. We have to be careful in this package to return appropriate GRPC error
    codes and to correctly map those error codes to our HTTP response. In this case,
    we use `codes.NotFound`, which we map to `http.StatusNotFound`. If you have to
    handle more than a few errors, a `switch` statement may make more sense than an
    `if…else` statements.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个配方省略了客户端，但你可以在[第6章](7a5004b7-eae0-4fbb-bcfe-5798a97ec835.xhtml)的*理解gRPC客户端*配方中复制这些步骤，*Web客户端和API*，你应该会看到与我们使用curl看到的结果完全相同。`http`和`grpc`目录都使用了相同的内部包。在这个包中，我们必须小心返回适当的gRPC错误代码，并将这些错误代码正确映射到我们的HTTP响应。在这种情况下，我们使用`codes.NotFound`，将其映射到`http.StatusNotFound`。如果你必须处理多个错误，使用`switch`语句可能比使用`if…else`语句更有意义。
- en: The other thing you may notice is that GRPC signatures are usually very consistent.
    They take a request and return an optional response and an error. It's possible
    to create a generic handler shim if your GRPC calls are repetitive enough and
    it also seems like it lends itself well to code generation, you may eventually
    see something like that with a package such as `github.com/goadesign/goa`.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还会注意到，gRPC签名通常非常一致。它们接收一个请求并返回一个可选的响应和一个错误。如果你的gRPC调用足够重复，你可以创建一个通用的处理程序适配器，而且这也似乎非常适合代码生成，你最终可能会在像`github.com/goadesign/goa`这样的包中看到类似的东西。
