["```go\n        [example]\n        aws_access_key_id = xxxxxxxx\n        aws_secret_access_key = xxxxxxxxxxxxxxxxxxxxxxxx\n\n```", "```go\n        export AWS_REGION=us-west-2\n\n```", "```go\n $ apex init \n\n Enter the name of your project. It should be machine-friendly, \n as this is used to prefix your functions in Lambda.\n\n Project name: go-cookbook\n\n Enter an optional description of your project.\n\n Project description: Demonstrating Apex with the Go Cookbook\n\n [+] creating IAM go-cookbook_lambda_function role\n [+] creating IAM go-cookbook_lambda_logs policy\n [+] attaching policy to lambda_function role.\n [+] creating ./project.json\n [+] creating ./functions\n\n Setup complete, deploy those functions!\n\n $ apex deploy\n\n```", "```go\n        package main\n\n        import (\n            \"encoding/json\"\n            \"fmt\"\n\n            \"github.com/apex/go-apex\"\n        )\n\n        type message struct {\n            Name string `json:\"name\"`\n        }\n\n        func main() {\n            apex.HandleFunc(func(event json.RawMessage, ctx \n            *apex.Context) (interface{}, error) {\n                var m message\n                if err := json.Unmarshal(event, &m); err != nil {\n                    return nil, err\n                }\n\n                resp := map[string]string{\n                    \"greeting\": fmt.Sprintf(\"Hello, %s\", m.Name),\n                }\n\n                return resp, nil\n            })\n        }\n\n```", "```go\n $ echo '{\"event\":{\"name\": \"test\"}}' | go run \n functions/greeter1/main.go \n\n {\"value\":{\"greeting\":\"Hello, test\"}}\n\n```", "```go\n $apex deploy\n • creating function env= function=greeter\n • created alias current env= function=greeter version=1\n • function created env= function=greeter name=go-\n cookbook_greeter1 version=1\n\n```", "```go\n $ echo '{\"name\": \"test\"}' | apex invoke greeter\n {\"greeting\":\"Hello, test\"}\n\n```", "```go\n        package main\n\n        import (\n            \"encoding/json\"\n            \"fmt\"\n\n            \"github.com/apex/go-apex\"\n        )\n\n        type message struct {\n            FirstName string `json:\"first_name\"`\n            LastName string `json:\"last_name\"`\n        }\n\n        func main() {\n            apex.HandleFunc(func(event json.RawMessage, ctx \n            *apex.Context) (interface{}, error) {\n                var m message\n                if err := json.Unmarshal(event, &m); err != nil {\n                    return nil, err\n                }\n\n                resp := map[string]string{\n                    \"greeting\": fmt.Sprintf(\"Hello, %s %s\", \n                    m.FirstName, m.LastName),\n                }\n\n                return resp, nil\n            })\n        }\n\n```", "```go\n $ apex deploy \n • creating function env= function=greeter\n • created alias current env= function=greeter version=2\n • function created env= function=greeter name=go-\n cookbook_greeter1 version=2\n\n```", "```go\n $ echo '{\"first_name\": \"Go\", \"last_name\": \"Coders\"}' | apex \n      invoke greeter2\n {\"greeting\":\"Hello, Go Coders\"}\n\n```", "```go\n $ apex logs greeter\n apex logs greeter\n /aws/lambda/go-cookbook_greeter START RequestId: 7c0f9129-3830-\n 11e7-8755-75aeb52a51b9 Version: 2\n /aws/lambda/go-cookbook_greeter END RequestId: 7c0f9129-3830-\n 11e7-8755-75aeb52a51b9\n /aws/lambda/go-cookbook_greeter REPORT RequestId: 7c0f9129-3830-\n 11e7-8755-75aeb52a51b9 Duration: 93.84 ms Billed Duration: 100 ms \n Memory Size: 128 MB Max Memory Used: 19 MB \n\n```", "```go\n $ apex delete\n The following will be deleted:\n\n - greeter\n\n Are you sure? (yes/no) yes\n • deleting env= function=greeter\n • function deleted env= function=greeter\n\n```", "```go\n        [example]\n        aws_access_key_id = xxxxxxxx\n        aws_secret_access_key = xxxxxxxxxxxxxxxxxxxxxxxx\n\n```", "```go\n        export AWS_REGION=us-west-2\n\n```", "```go\n $ apex init \n\n Enter the name of your project. It should be machine-friendly, as \n this is used to prefix your functions in Lambda.\n\n Project name: logging \n\n Enter an optional description of your project.\n\n Project description: An example of apex logging and metrics\n\n [+] creating IAM logging_lambda_function role\n [+] creating IAM logging_lambda_logs policy\n [+] attaching policy to lambda_function role.\n [+] creating ./project.json\n [+] creating ./functions\n\n Setup complete, deploy those functions!\n\n $ apex deploy\n\n```", "```go\n        package main\n\n        import (\n            \"encoding/json\"\n            \"os\"\n\n            \"github.com/apex/go-apex\"\n            \"github.com/apex/log\"\n            \"github.com/apex/log/handlers/text\"\n        )\n\n        // Input takes in a secret\n        type Input struct {\n            Secret string `json:\"secret\"`\n        }\n\n        func main() {\n            apex.HandleFunc(func(event json.RawMessage, ctx \n            *apex.Context) (interface{}, error) {\n                log.SetHandler(text.New(os.Stderr))\n\n                var input Input\n                if err := json.Unmarshal(event, &input); err != nil {\n                    log.WithError(err).Error(\"failed to unmarshal key \n                    input\")\n                    return nil, err\n                }\n                log.WithField(\"secret\", input.Secret).Info(\"secret \n                guessed\")\n\n                if input.Secret == \"klaatu barada nikto\" {\n                    return \"secret guessed!\", nil\n                }\n                return \"try again\", nil\n            })\n        }\n\n```", "```go\n $ apex deploy\n • creating function env= function=secret\n • created alias current env= function=secret version=1\n • function created env= function=secret name=logging_secret \n version=1\n\n```", "```go\n $ echo '{\"secret\": \"open sesame\"}' | apex invoke secret\n \"try again\"\n\n $ echo '{\"secret\": \"open sesame\"}' | apex invoke secret\n \"secret guessed!\"\n\n```", "```go\n $ apex logs secret\n /aws/lambda/logging_secret START RequestId: cfa6f655-3834-11e7-\n b99d-89998a7f39dd Version: 1\n /aws/lambda/logging_secret INFO[0000] secret guessed secret=open \n sesame\n /aws/lambda/logging_secret END RequestId: cfa6f655-3834-11e7-\n b99d-89998a7f39dd\n /aws/lambda/logging_secret REPORT RequestId: cfa6f655-3834-11e7-\n b99d-89998a7f39dd Duration: 52.23 ms Billed Duration: 100 ms \n Memory Size: 128 MB Max Memory Used: 19 MB \n /aws/lambda/logging_secret START RequestId: d74ea688-3834-11e7-\n aa4e-d592c1fbc35f Version: 1\n /aws/lambda/logging_secret INFO[0012] secret guessed \n secret=klaatu barada nikto\n /aws/lambda/logging_secret END RequestId: d74ea688-3834-11e7-\n aa4e-d592c1fbc35f\n /aws/lambda/logging_secret REPORT RequestId: d74ea688-3834-11e7-\n aa4e-d592c1fbc35f Duration: 7.43 ms Billed Duration: 100 ms \n Memory Size: 128 MB Max Memory Used: 19 MB \n\n```", "```go\n $ apex metrics secret !3445\n\n secret\n total cost: $0.00\n invocations: 0 ($0.00)\n duration: 0s ($0.00)\n throttles: 0\n errors: 0\n memory: 128\n\n```", "```go\n $ apex delete\n Are you sure? (yes/no) yes\n • deleting env= function=secret\n • function deleted env= function=secret\n\n```", "```go\n        runtime: go\n        env: flex\n\n        #[START env_variables]\n        env_variables:\n            GCLOUD_DATASET_ID: go-cookbook\n        #[END env_variables]\n\n```", "```go\n        package main\n\n        import (\n            \"context\"\n            \"time\"\n\n            \"cloud.google.com/go/datastore\"\n        )\n\n        // Message is the object we store\n        type Message struct {\n            Timestamp time.Time\n            Message string\n        }\n\n        func (c *Controller) storeMessage(ctx context.Context, message \n        string) error {\n            m := &Message{\n                Timestamp: time.Now(),\n                Message: message,\n            }\n\n            k := datastore.IncompleteKey(\"Message\", nil)\n            _, err := c.store.Put(ctx, k, m)\n            return err\n        }\n\n        func (c *Controller) queryMessages(ctx context.Context, limit \n        int) ([]*Message, error) {\n            q := datastore.NewQuery(\"Message\").\n            Order(\"-Timestamp\").\n            Limit(limit)\n\n            messages := make([]*Message, 0)\n            _, err := c.store.GetAll(ctx, q, &messages)\n            return messages, err\n        }\n\n```", "```go\n        package main\n\n        import (\n            \"context\"\n            \"fmt\"\n            \"log\"\n            \"net/http\"\n\n            \"cloud.google.com/go/datastore\"\n        )\n\n        // Controller holds our storage and other\n        // state\n        type Controller struct {\n            store *datastore.Client\n        }\n\n        func (c *Controller) handle(w http.ResponseWriter, r \n        *http.Request) {\n            if r.Method != http.MethodGet {\n                http.Error(w, \"invalid method\", \n                http.StatusMethodNotAllowed)\n            }\n\n            ctx := context.Background()\n\n            // store the new message\n            r.ParseForm()\n            if message := r.FormValue(\"message\"); message != \"\" {\n                if err := c.storeMessage(ctx, message); err != nil {\n                    log.Printf(\"could not store message: %v\", err)\n                    http.Error(w, fmt.Sprintf(\"could not store \n                    message\"), \n                    http.StatusInternalServerError)\n                    return\n                }\n            }\n\n            // get the current messages and display them\n            fmt.Fprintln(w, \"Messages:\")\n            messages, err := c.queryMessages(ctx, 10)\n            if err != nil {\n                log.Printf(\"could not get messages: %v\", err)\n                http.Error(w, \"could not get messages\", \n                http.StatusInternalServerError)\n                return\n            }\n\n            for _, message := range messages {\n                fmt.Fprintln(w, message.Message)\n            }\n        }\n\n```", "```go\n        package main\n\n        import (\n            \"log\"\n            \"net/http\"\n            \"os\"\n\n            \"cloud.google.com/go/datastore\"\n            \"golang.org/x/net/context\"\n            \"google.golang.org/appengine\"\n        )\n\n        func main() {\n            ctx := context.Background()\n            log.SetOutput(os.Stderr)\n\n            // Set this in app.yaml when running in production.\n            projectID := os.Getenv(\"GCLOUD_DATASET_ID\")\n\n            datastoreClient, err := datastore.NewClient(ctx, projectID)\n            if err != nil {\n                log.Fatal(err)\n            }\n\n            c := Controller{datastoreClient}\n\n            http.HandleFunc(\"/\", c.handle)\n            appengine.Main()\n        }\n\n```", "```go\n        package firebase\n\n        import (\n            \"log\"\n\n            \"gopkg.in/zabawaba99/firego.v1\"\n        )\n\n        // Client Interface for mocking\n        type Client interface {\n            Get() (map[string]interface{}, error)\n            Set(key string, value interface{}) error\n        }\n        type firebaseClient struct {\n            *firego.Firebase\n        }\n\n        func (f *firebaseClient) Get() (map[string]interface{}, error) \n        {\n            var v2 map[string]interface{}\n            if err := f.Value(&v2); err != nil {\n                log.Fatalf(\"error getting\")\n            }\n            return v2, nil\n        }\n\n        func (f *firebaseClient) Set(key string, value interface{}) \n        error {\n            v := map[string]interface{}{key: value}\n            if err := f.Firebase.Set(v); err != nil {\n                return err\n            }\n            return nil\n        }\n\n```", "```go\n        package firebase\n\n        import (\n            \"io/ioutil\"\n\n            \"golang.org/x/oauth2\"\n            \"golang.org/x/oauth2/google\"\n            \"gopkg.in/zabawaba99/firego.v1\"\n        )\n\n        // Authenticate grabs oauth scopes using a generated\n        // service_account.json file from\n        // https://console.firebase.google.com/project/go-\n        cookbook/settings/serviceaccounts/adminsdk\n        func Authenticate() (Client, error) {\n            d, err := ioutil.ReadFile(\"/tmp/service_account.json\")\n            if err != nil {\n                return nil, err\n            }\n\n            conf, err := google.JWTConfigFromJSON(d, \n            \"https://www.googleapis.com/auth/userinfo.email\",\n            \"https://www.googleapis.com/auth/firebase.database\")\n            if err != nil {\n                return nil, err\n            }\n            f := firego.New(\"https://go-cookbook.firebaseio.com\", \n            conf.Client(oauth2.NoContext))\n            return &firebaseClient{f}, err\n        }\n\n```", "```go\n        package main\n\n        import (\n            \"fmt\"\n            \"log\"\n\n            \"github.com/agtorre/go-cookbook/chapter12/firebase\"\n        )\n\n        func main() {\n            f, err := firebase.Authenticate()\n            if err != nil {\n                log.Fatalf(\"error authenticating\")\n            }\n            f.Set(\"key\", []string{\"val1\", \"val2\"})\n            res, _ := f.Get()\n            fmt.Println(res)\n\n            vals := res[\"key\"].([]interface{})\n            vals = append(vals, map[string][]string{\"key2\": \n            []string{\"val3\"}})\n            f.Set(\"key\", vals)\n            res, _ = f.Get()\n            fmt.Println(res)\n        }\n\n```", "```go\n $ go run main.go\n map[key:[val1 val2]]\n map[key:[val1 val2 map[key2:[val3]]]]\n\n```"]