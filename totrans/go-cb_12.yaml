- en: Serverless Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Go programming on Lambda with Apex
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apex serverless logging and metrics
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google App Engine with Go
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Firebase using zabawaba99/firego
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will focus on serverless architectures and using them with the
    Go language. It will also explore app engine and Firebase, two services to quickly
    deploy applications and data storage to the web.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: All of the recipes in this chapter deal with third-party services that bill
    for use; ensure that you clean up when you're done using them. Otherwise, think
    of these recipes as kick-starters for spinning up larger applications on these
    platforms.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Go programming on Lambda with Apex
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apex is a tool for building, deploying, and managing AWS Lambda functions. It
    provides wrappers for Go (using a `Node.js` shim). Currently, there is not a way
    to run native Go code on Lambda without such a shim. This recipe will explore
    creating Go Lambda functions and deploying them with Apex.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Go on your operating system ([https://golang.org/doc/install](https://golang.org/doc/install))
    and configure your `GOPATH` environment variable.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a terminal/console application.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to your `GOPATH/src` directory and create a project directory, for
    example, **`$GOPATH/src/github.com/yourusername/customrepo`**. All code will be
    run and modified from this directory.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optionally, install the latest tested version of the code using the
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**`go get github.com/agtorre/go-cookbook/...`** command.'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Install Apex from [http://apex.run/](http://apex.run/).
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the **`go get github.com/apex/go-apex`** command.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create the `chapter12/lambda` directory
    and navigate to it.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an Amazon account and an IAM role that can edit Lambda functions, which
    can be done from [https://aws.amazon.com/lambda/](https://aws.amazon.com/lambda/).
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `~/.aws/credentials` with the following content, copying
    your credentials from what you set up in the Amazon console:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create an environment variable to hold your desired region:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Run the `apex init` command and follow the onscreen instructions:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Remove the `lambda/functions/hello` directory.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new `lambda/functions/greeter/main.go` file with the following content:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To test your function, you can run the following:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Deploy it to your specified region:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To invoke it, run the following command:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now modify `lambda/functions/greeter/main.go`:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Redeploy, creating version 2:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Invoke the newly deployed function:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Take a look at the logs:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Clean up the deployed services:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works...
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS Lambda makes it easy to run functions on demand without maintaining a server.
    Apex provides facilities for deploying, versioning, and testing functions as you
    ship them to Lambda. It also provides a shim that allows us to execute arbitrary
    Go code. This is accomplished by defining a handler, processing incoming request
    payloads, and returning a response, which is a very similar flow to a standard
    web handler.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda 使你能够按需运行函数而无需维护服务器。Apex 提供了部署、版本控制和测试函数的设施，当你将它们发送到 Lambda 时。它还提供了一个允许我们执行任意
    Go 代码的适配器。这是通过定义一个处理程序、处理传入的请求有效载荷并返回一个响应来实现的，这与标准网络处理程序的流程非常相似。
- en: In this recipe, we initially took a name input and greeted that name. Later,
    we split the name into a first and last name, taking advantage of versioning.
    It would also be possible to deploy a separate function instead. It's possible
    to roll back with `apex rollback greeter` as well.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们最初接收一个名字输入并问候这个名字。后来，我们利用版本控制将名字拆分为首名和姓氏。也可以部署一个单独的功能。还可以使用 `apex rollback
    greeter` 进行回滚。
- en: Apex serverless logging and metrics
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apex 无服务器日志和指标
- en: When working with serverless functions such as Lambda, it is valuable to have
    portable, structured logs. In addition, you can combine earlier recipes dealing
    with logging to this recipe. The recipes covered in [Chapter 4](e501e4de-b31e-447a-8109-6eee1a7f3a57.xhtml),
    *Error Handling in Go*, are just as relevant. Because we're using Apex to handle
    our lambda functions, we chose to use the Apex logger for this recipe. We'll also
    rely on metrics provided by Apex as well as the AWS console. The earlier recipes
    explored more complex logging and metrics examples, and those still apply--the
    Apex logger can easily be configured to aggregate logs using something like Amazon
    Kinesis or Elasticsearch.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当与 Lambda 等无服务器函数一起工作时，拥有可移植的、结构化的日志非常有价值。此外，你还可以将处理日志的早期菜谱与此菜谱结合。本章中涵盖的 [第
    4 章](e501e4de-b31e-447a-8109-6eee1a7f3a57.xhtml) 中关于 Go 中的错误处理的菜谱同样相关。因为我们使用 Apex
    来处理我们的 Lambda 函数，所以我们选择使用 Apex 日志记录器来完成这个菜谱。我们还将依赖 Apex 提供的指标以及 AWS 控制台。早期的菜谱探讨了更复杂的日志和指标示例，这些仍然适用——Apex
    日志记录器可以轻松配置，以便使用类似 Amazon Kinesis 或 Elasticsearch 这样的工具聚合日志。
- en: Getting ready
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Configure your environment according to these steps:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下步骤配置你的环境：
- en: Refer to the *Getting ready* section of the *Go programming on Lambda with Apex*
    recipe in this chapter.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 参考本章中 *Go 在 Lambda 上使用 Apex 编程* 菜谱的 *准备工作* 部分。
- en: Run the **`go get github.com/apex/log`** command.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 **`go get github.com/apex/log`** 命令。
- en: How to do it...
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何完成...
- en: 'These steps cover writing and running your application:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create the `chapter12/logging` directory
    and navigate to it.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建 `chapter12/logging` 目录并导航到它。
- en: Create an Amazon account and an IAM role that can edit lambda functions, which
    can be done at [https://aws.amazon.com/lambda/](https://aws.amazon.com/lambda/).
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个可以编辑 Lambda 函数的 Amazon 账户和 IAM 角色，这可以在 [https://aws.amazon.com/lambda/](https://aws.amazon.com/lambda/)
    完成。
- en: 'Create a `~/.aws/credentials` file with the following content, copying your
    credentials from what you set up in the Amazon console:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含以下内容的 `~/.aws/credentials` 文件，从你在亚马逊控制台设置的内容中复制你的凭证：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create an environment variable to hold your desired region:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个环境变量来保存你期望的区域：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Run the `apex init` command and follow the onscreen instructions:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `apex init` 命令并遵循屏幕上的说明：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Remove the `lambda/functions/hello` directory.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除 `lambda/functions/hello` 目录。
- en: 'Create a new `lambda/functions/secret/main.go` file with the following content:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `lambda/functions/secret/main.go` 的新文件，并包含以下内容：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Deploy it to your specified region:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其部署到指定的区域：
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To invoke it, run the following command:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要调用它，请运行以下命令：
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Check the logs:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查日志：
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Check your metrics:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查你的指标：
- en: '[PRE19]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Clean up the deployed services:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清理已部署的服务：
- en: '[PRE20]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works...
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we created a new lambda function, secret, that will respond
    with whether or not you guessed a secret phrase. The function parses an incoming
    JSON request, performs some logging using `Stderr`, and returns a response.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们创建了一个新的 Lambda 函数，名为 secret，它会响应你是否猜对了秘密短语。该函数解析传入的 JSON 请求，使用 `Stderr`
    进行一些日志记录，并返回一个响应。
- en: After using the function a few times, we see that our logs are visible using
    the `apex logs` command. This command can be run on a single lambda function or
    across all of our managed functions. This is especially useful if you are chaining
    Apex commands together and want to watch logs across many services.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用该功能几次后，我们发现可以使用 `apex logs` 命令查看日志。此命令可以在单个 lambda 函数或所有我们的管理函数上运行。如果您正在将
    Apex 命令链接在一起并希望跨多个服务查看日志，这特别有用。
- en: In addition, we show how to use the apex metrics command to collect general
    metrics about your application, including cost and invocations. You can also see
    a lot of this information directly in the AWS console in the Lambda section. Like
    other recipes, we try and clean up after ourselves at the end.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们展示了如何使用 apex metrics 命令收集有关您的应用程序的一般指标，包括成本和调用次数。您还可以在 AWS 控制台的 Lambda
    部分直接查看大量此类信息。与其他菜谱一样，我们试图在结束时清理。
- en: Google App Engine with Go
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Go 运行 Google App Engine
- en: App Engine is a Google service that facilitates the quick deployment of web
    applications. These applications have access to cloud storage and various other
    Google APIs. The general idea is that App Engine will scale easily with load and
    simplify any operations management associated with hosting an app. This recipe
    will show how to create and optionally deploy a basic App Engine application.
    This recipe won't get into the details of setting up a Google cloud account, setting
    up billing, or the specifics on cleaning up your instance. At a minimum, access
    to Google Cloud Datastore ([https://cloud.google.com/datastore/docs/concepts/overview](https://cloud.google.com/datastore/docs/concepts/overview))
    is required for this recipe to work.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: App Engine 是一个 Google 服务，它简化了快速部署 Web 应用程序。这些应用程序可以访问云存储和各种其他 Google API。一般思路是
    App Engine 将会轻松地根据负载进行扩展，并简化与托管应用程序相关的任何操作管理。本菜谱将展示如何创建和可选部署一个基本的 App Engine 应用程序。本菜谱不会涉及设置
    Google 云账户、设置计费或清理实例的细节。至少，需要访问 Google Cloud Datastore ([https://cloud.google.com/datastore/docs/concepts/overview](https://cloud.google.com/datastore/docs/concepts/overview))
    才能使本菜谱工作。
- en: Getting ready
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Configure your environment according to these steps:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下步骤配置您的环境：
- en: Download and install Go on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install)
    and configure your `GOPATH` environment variable.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://golang.org/doc/install](https://golang.org/doc/install) 下载并安装 Go
    到您的操作系统上，并配置 `GOPATH` 环境变量。
- en: Open a terminal/console application.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/控制台应用程序。
- en: Navigate to your `GOPATH/src` and create a project directory, for example, `$GOPATH/src/github.com/yourusername/customrepo`.
    All code will be run and modified from this directory.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的 `GOPATH/src` 并创建一个项目目录，例如，`$GOPATH/src/github.com/yourusername/customrepo`。所有代码都将从这个目录运行和修改。
- en: Optionally, install the latest tested version of the code using the `go get
    github.com/agtorre/go-cookbook/...` command.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，使用 `go get github.com/agtorre/go-cookbook/...` 命令安装代码的最新测试版本。
- en: Download the Google Cloud SDK from [https://cloud.google.com/appengine/docs/flexible/go/quickstart](https://cloud.google.com/appengine/docs/flexible/go/quickstart).
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://cloud.google.com/appengine/docs/flexible/go/quickstart](https://cloud.google.com/appengine/docs/flexible/go/quickstart)
    下载 Google Cloud SDK。
- en: Create an app that allows for deploying and datastore access and record the
    app name.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个允许部署和访问数据存储的应用程序，并记录应用程序名称。
- en: Run the `go get cloud.google.com/go/datastore` command.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 `go get cloud.google.com/go/datastore` 命令。
- en: Run the `go get google.golang.org/appengine` command.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 `go get google.golang.org/appengine` 命令。
- en: How to do it...
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行您的应用程序：
- en: From your terminal/console application, create the `chapter12/appengine` directory
    and navigate to it.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端/控制台应用程序中，创建 `chapter12/appengine` 目录并导航到它。
- en: Copy tests from `https://github.com/agtorre/go-cookbook/tree/master/chapter12/appengine`
    or use this as an exercise to write some of your own.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `https://github.com/agtorre/go-cookbook/tree/master/chapter12/appengine` 复制测试用例，或者将其作为练习编写一些自己的测试用例。
- en: 'Create a file called `app.yml` with the following content, replacing `go-cookbook`
    with the name of the app you created in the *Getting ready* section:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `app.yml` 的文件，并包含以下内容，将 `go-cookbook` 替换为 *准备就绪* 部分中创建的应用程序的名称：
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create a file called `message.go` with the following content:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `message.go` 的文件，并包含以下内容：
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create a file called `controller.go` with the following content:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `controller.go` 的文件，并包含以下内容：
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Create a file `main.go` with the following content:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，并包含以下内容：
- en: '[PRE24]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Run the `gcloud config set project go-cookbook` command, where `go-cookbook`
    is the project you created in the *Getting ready* section.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`gcloud config set project go-cookbook`命令，其中`go-cookbook`是你*准备工作*部分中创建的项目。
- en: Run the `gcloud auth application-default login` command and follow the instructions.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`gcloud auth application-default login`命令并遵循指示。
- en: Run the `export PORT=8080` command.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`export PORT=8080`命令。
- en: Run the `export GCLOUD_DATASET_ID=go-cookbook` command, where `go-cookbook`
    is the project you created in the *Getting ready* section.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`export GCLOUD_DATASET_ID=go-cookbook`命令，其中`go-cookbook`是你*准备工作*部分中创建的项目。
- en: Run the `go build` command.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go build`命令。
- en: Run the `./example` command.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`./example`命令。
- en: Navigate to [http://localhost:8080/?message=hello%20there](http://localhost:8080/?message=hello%20there).
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到[http://localhost:8080/?message=hello%20there](http://localhost:8080/?message=hello%20there)。
- en: Try a few more messages (`?message=other`)
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试发送几条更多的消息（`?message=other`）
- en: Optionally, deploy the app to your instance with `gcloud app deploy`.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，使用`gcloud app deploy`将应用程序部署到你的实例上。
- en: Navigate to the deployed app with `gcloud app browse`.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`gcloud app browse`导航到已部署的应用程序。
- en: 'Clean up your appengine instance and datastore:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清理你的appengine实例和数据存储：
- en: '[https://console.cloud.google.com/datastore](https://console.cloud.google.com/datastore)'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://console.cloud.google.com/datastore](https://console.cloud.google.com/datastore)'
- en: '[https://console.cloud.google.com/appengine](https://console.cloud.google.com/appengine)'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://console.cloud.google.com/appengine](https://console.cloud.google.com/appengine)'
- en: If you copied or wrote your own tests, run the `go test` command. Ensure that
    all the tests pass.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，运行`go test`命令。确保所有测试都通过。
- en: How it works...
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Once the cloud SDK is configured to point at your application and has been authenticated,
    the GCloud tool allows quick deployment and configuration, allowing local applications
    to access Google services.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦云SDK配置为指向你的应用程序并经过认证，GCloud工具允许快速部署和配置，使本地应用程序能够访问Google服务。
- en: After authenticating and setting the port, we run the application on localhost,
    and we can begin working with code. The application defines a message object that
    can be stored and retrieved from the datastore. This demonstrates how you might
    isolate this sort of code. You might also use a storage/database interface, as
    shown in earlier chapters.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在认证和设置端口后，我们在localhost上运行应用程序，然后我们可以开始使用代码。应用程序定义了一个可以存储和从数据存储中检索的消息对象。这展示了你可能如何隔离这类代码。你还可以使用如前几章所示的数据存储/数据库接口。
- en: Next, we set up a handler that attempts to insert a message into the datastore,
    then retrieves all messages, displaying them in a browser. This creates something
    resembling a basic guestbook. You may notice that the message does not always
    appear immediately. If you navigate without a message parameter or send another
    message, it should appear on a reload.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们设置一个处理程序，尝试将消息插入到数据存储中，然后检索所有消息，并在浏览器中显示它们。这创建了一个类似基本留言簿的东西。你可能注意到消息并不总是立即出现。如果你没有消息参数进行导航或发送另一条消息，它应该在重新加载时出现。
- en: Lastly, ensure that you clean up instances if you're no longer using them.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，确保如果你不再使用它们，清理实例。
- en: Working with Firebase using zabawaba99/firego
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用zabawaba99/firego与Firebase一起工作
- en: Firebase is another Google cloud service that creates a scalable, easy-to-manage
    database that can support authentication and works especially well with mobile
    applications. The service provides significantly more than what will be covered
    in this recipe, but we will look at storing data, reading it, modifying it, and
    restoring it. We'll also look into how to set up authentication for your application
    and wrap the Firebase client with our own custom client.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase是另一个Google云服务，它创建了一个可扩展、易于管理的数据库，可以支持身份验证，并且与移动应用程序配合得非常好。该服务提供的功能远不止本食谱中涵盖的内容，但我们将探讨如何存储数据、读取数据、修改数据以及恢复数据。我们还将探讨如何为你的应用程序设置身份验证，并用我们自己的自定义客户端包装Firebase客户端。
- en: Getting ready
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Configure your environment according to these steps:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下步骤配置你的环境：
- en: Download and install Go on your operating system from [https://golang.org/doc/installand](https://golang.org/doc/installand)
    and configure your **`GOPATH`** environment variable.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://golang.org/doc/installand](https://golang.org/doc/installand)下载并安装Go到你的操作系统上，并配置你的**`GOPATH`**环境变量。
- en: Open a terminal/console application.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端/控制台应用程序。
- en: Navigate to your `GOPATH/src` and create a project directory, for example, `$GOPATH/src/github.com/yourusername/customrepo`.
    All code will be run and modified from this directory.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到你的 `GOPATH/src` 并创建一个项目目录，例如，`$GOPATH/src/github.com/yourusername/customrepo`。所有代码都将从这个目录运行和修改。
- en: Optionally, install the latest tested version of the code using the `go get
    github.com/agtorre/go-cookbook/...` command.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，使用 `go get github.com/agtorre/go-cookbook/...` 命令安装代码的最新测试版本。
- en: Create an account and database at [https://console.firebase.google.com/](https://console.firebase.google.com/).
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 [https://console.firebase.google.com/](https://console.firebase.google.com/)
    创建一个账户和数据库。
- en: Generate a service admin token from [https://console.firebase.google.com/project/go-cookbook/settings/serviceaccounts/adminsdk](https://console.firebase.google.com/project/go-cookbook/settings/serviceaccounts/adminsdk).
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://console.firebase.google.com/project/go-cookbook/settings/serviceaccounts/adminsdk](https://console.firebase.google.com/project/go-cookbook/settings/serviceaccounts/adminsdk)
    生成一个服务管理员令牌。
- en: Move the downloaded token to `/tmp/service_account.json`.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将下载的令牌移动到 `/tmp/service_account.json`。
- en: How to do it...
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'These steps cover writing and running your application:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create the `chapter12/firebase` directory
    and navigate to it.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序创建 `chapter12/firebase` 目录并进入它。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter12/firebase](https://github.com/agtorre/go-cookbook/tree/master/chapter12/firebase)
    or use this as an exercise to write some of your own.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter12/firebase](https://github.com/agtorre/go-cookbook/tree/master/chapter12/firebase)
    复制测试代码，或者将其作为练习编写一些自己的代码。
- en: 'Create a file called `client.go` with the following content:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `client.go` 的文件，并包含以下内容：
- en: '[PRE25]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create a file called `auth.go` with the following contents. Tweak **[https://go-cookbook.firebaseio.com](https://go-cookbook.firebaseio.com)**
    to match whatever your apps, name is:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `auth.go` 的文件，并包含以下内容。调整 **[https://go-cookbook.firebaseio.com](https://go-cookbook.firebaseio.com)**
    以匹配你的应用程序名称：
- en: '[PRE26]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Create a new directory named `example` and navigate to it.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录并进入它。
- en: 'Create a file named `main.go` with the following content. Ensure that you modify
    the `channels` import to use the path you set up in step 2:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，并包含以下内容。确保你修改 `channels` 导入以使用步骤 2 中设置的路径：
- en: '[PRE27]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Run `go run main.go`.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: You may also run `go build ./example`.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行 `go build ./example`。
- en: 'You should now see the following output:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该看到以下输出：
- en: '[PRE28]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，向上移动一个目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Firebase uses OAuth2 for authentication. In this case, we downloaded a credentials
    file that can be used, along with a request for appropriate scopes, to return
    a token that may work with the Firebase database. We can store any sort of structured
    map-like object. In this case, we store `map[string]interface{}`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase 使用 OAuth2 进行身份验证。在这种情况下，我们下载了一个凭证文件，可以与适当的范围请求一起使用，以返回可能与 Firebase
    数据库一起工作的令牌。我们可以存储任何类型的结构化类似映射的对象。在这种情况下，我们存储 `map[string]interface{}`。
- en: The client code wraps all operations in an interface for ease of testing. This
    is a common pattern when writing client code and is also used in other recipes.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端代码将所有操作封装在一个接口中，以便于测试。这在编写客户端代码时是一个常见的模式，在其他食谱中也被使用。
