- en: Serverless Programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Go programming on Lambda with Apex
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apex serverless logging and metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google App Engine with Go
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Firebase using zabawaba99/firego
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will focus on serverless architectures and using them with the
    Go language. It will also explore app engine and Firebase, two services to quickly
    deploy applications and data storage to the web.
  prefs: []
  type: TYPE_NORMAL
- en: All of the recipes in this chapter deal with third-party services that bill
    for use; ensure that you clean up when you're done using them. Otherwise, think
    of these recipes as kick-starters for spinning up larger applications on these
    platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Go programming on Lambda with Apex
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apex is a tool for building, deploying, and managing AWS Lambda functions. It
    provides wrappers for Go (using a `Node.js` shim). Currently, there is not a way
    to run native Go code on Lambda without such a shim. This recipe will explore
    creating Go Lambda functions and deploying them with Apex.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Go on your operating system ([https://golang.org/doc/install](https://golang.org/doc/install))
    and configure your `GOPATH` environment variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a terminal/console application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to your `GOPATH/src` directory and create a project directory, for
    example, **`$GOPATH/src/github.com/yourusername/customrepo`**. All code will be
    run and modified from this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optionally, install the latest tested version of the code using the
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**`go get github.com/agtorre/go-cookbook/...`** command.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Install Apex from [http://apex.run/](http://apex.run/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the **`go get github.com/apex/go-apex`** command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create the `chapter12/lambda` directory
    and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an Amazon account and an IAM role that can edit Lambda functions, which
    can be done from [https://aws.amazon.com/lambda/](https://aws.amazon.com/lambda/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `~/.aws/credentials` with the following content, copying
    your credentials from what you set up in the Amazon console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an environment variable to hold your desired region:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `apex init` command and follow the onscreen instructions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Remove the `lambda/functions/hello` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new `lambda/functions/greeter/main.go` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To test your function, you can run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Deploy it to your specified region:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To invoke it, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now modify `lambda/functions/greeter/main.go`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Redeploy, creating version 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Invoke the newly deployed function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at the logs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Clean up the deployed services:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS Lambda makes it easy to run functions on demand without maintaining a server.
    Apex provides facilities for deploying, versioning, and testing functions as you
    ship them to Lambda. It also provides a shim that allows us to execute arbitrary
    Go code. This is accomplished by defining a handler, processing incoming request
    payloads, and returning a response, which is a very similar flow to a standard
    web handler.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we initially took a name input and greeted that name. Later,
    we split the name into a first and last name, taking advantage of versioning.
    It would also be possible to deploy a separate function instead. It's possible
    to roll back with `apex rollback greeter` as well.
  prefs: []
  type: TYPE_NORMAL
- en: Apex serverless logging and metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with serverless functions such as Lambda, it is valuable to have
    portable, structured logs. In addition, you can combine earlier recipes dealing
    with logging to this recipe. The recipes covered in [Chapter 4](e501e4de-b31e-447a-8109-6eee1a7f3a57.xhtml),
    *Error Handling in Go*, are just as relevant. Because we're using Apex to handle
    our lambda functions, we chose to use the Apex logger for this recipe. We'll also
    rely on metrics provided by Apex as well as the AWS console. The earlier recipes
    explored more complex logging and metrics examples, and those still apply--the
    Apex logger can easily be configured to aggregate logs using something like Amazon
    Kinesis or Elasticsearch.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the *Getting ready* section of the *Go programming on Lambda with Apex*
    recipe in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the **`go get github.com/apex/log`** command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create the `chapter12/logging` directory
    and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an Amazon account and an IAM role that can edit lambda functions, which
    can be done at [https://aws.amazon.com/lambda/](https://aws.amazon.com/lambda/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `~/.aws/credentials` file with the following content, copying your
    credentials from what you set up in the Amazon console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an environment variable to hold your desired region:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `apex init` command and follow the onscreen instructions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Remove the `lambda/functions/hello` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new `lambda/functions/secret/main.go` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Deploy it to your specified region:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To invoke it, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the logs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Check your metrics:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Clean up the deployed services:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we created a new lambda function, secret, that will respond
    with whether or not you guessed a secret phrase. The function parses an incoming
    JSON request, performs some logging using `Stderr`, and returns a response.
  prefs: []
  type: TYPE_NORMAL
- en: After using the function a few times, we see that our logs are visible using
    the `apex logs` command. This command can be run on a single lambda function or
    across all of our managed functions. This is especially useful if you are chaining
    Apex commands together and want to watch logs across many services.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, we show how to use the apex metrics command to collect general
    metrics about your application, including cost and invocations. You can also see
    a lot of this information directly in the AWS console in the Lambda section. Like
    other recipes, we try and clean up after ourselves at the end.
  prefs: []
  type: TYPE_NORMAL
- en: Google App Engine with Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: App Engine is a Google service that facilitates the quick deployment of web
    applications. These applications have access to cloud storage and various other
    Google APIs. The general idea is that App Engine will scale easily with load and
    simplify any operations management associated with hosting an app. This recipe
    will show how to create and optionally deploy a basic App Engine application.
    This recipe won't get into the details of setting up a Google cloud account, setting
    up billing, or the specifics on cleaning up your instance. At a minimum, access
    to Google Cloud Datastore ([https://cloud.google.com/datastore/docs/concepts/overview](https://cloud.google.com/datastore/docs/concepts/overview))
    is required for this recipe to work.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Go on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install)
    and configure your `GOPATH` environment variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a terminal/console application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to your `GOPATH/src` and create a project directory, for example, `$GOPATH/src/github.com/yourusername/customrepo`.
    All code will be run and modified from this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optionally, install the latest tested version of the code using the `go get
    github.com/agtorre/go-cookbook/...` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the Google Cloud SDK from [https://cloud.google.com/appengine/docs/flexible/go/quickstart](https://cloud.google.com/appengine/docs/flexible/go/quickstart).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an app that allows for deploying and datastore access and record the
    app name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get cloud.google.com/go/datastore` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get google.golang.org/appengine` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create the `chapter12/appengine` directory
    and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from `https://github.com/agtorre/go-cookbook/tree/master/chapter12/appengine`
    or use this as an exercise to write some of your own.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `app.yml` with the following content, replacing `go-cookbook`
    with the name of the app you created in the *Getting ready* section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `message.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `controller.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file `main.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Run the `gcloud config set project go-cookbook` command, where `go-cookbook`
    is the project you created in the *Getting ready* section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `gcloud auth application-default login` command and follow the instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `export PORT=8080` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `export GCLOUD_DATASET_ID=go-cookbook` command, where `go-cookbook`
    is the project you created in the *Getting ready* section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go build` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `./example` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to [http://localhost:8080/?message=hello%20there](http://localhost:8080/?message=hello%20there).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try a few more messages (`?message=other`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optionally, deploy the app to your instance with `gcloud app deploy`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the deployed app with `gcloud app browse`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clean up your appengine instance and datastore:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://console.cloud.google.com/datastore](https://console.cloud.google.com/datastore)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://console.cloud.google.com/appengine](https://console.cloud.google.com/appengine)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you copied or wrote your own tests, run the `go test` command. Ensure that
    all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the cloud SDK is configured to point at your application and has been authenticated,
    the GCloud tool allows quick deployment and configuration, allowing local applications
    to access Google services.
  prefs: []
  type: TYPE_NORMAL
- en: After authenticating and setting the port, we run the application on localhost,
    and we can begin working with code. The application defines a message object that
    can be stored and retrieved from the datastore. This demonstrates how you might
    isolate this sort of code. You might also use a storage/database interface, as
    shown in earlier chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we set up a handler that attempts to insert a message into the datastore,
    then retrieves all messages, displaying them in a browser. This creates something
    resembling a basic guestbook. You may notice that the message does not always
    appear immediately. If you navigate without a message parameter or send another
    message, it should appear on a reload.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, ensure that you clean up instances if you're no longer using them.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Firebase using zabawaba99/firego
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firebase is another Google cloud service that creates a scalable, easy-to-manage
    database that can support authentication and works especially well with mobile
    applications. The service provides significantly more than what will be covered
    in this recipe, but we will look at storing data, reading it, modifying it, and
    restoring it. We'll also look into how to set up authentication for your application
    and wrap the Firebase client with our own custom client.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Go on your operating system from [https://golang.org/doc/installand](https://golang.org/doc/installand)
    and configure your **`GOPATH`** environment variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a terminal/console application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to your `GOPATH/src` and create a project directory, for example, `$GOPATH/src/github.com/yourusername/customrepo`.
    All code will be run and modified from this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optionally, install the latest tested version of the code using the `go get
    github.com/agtorre/go-cookbook/...` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an account and database at [https://console.firebase.google.com/](https://console.firebase.google.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generate a service admin token from [https://console.firebase.google.com/project/go-cookbook/settings/serviceaccounts/adminsdk](https://console.firebase.google.com/project/go-cookbook/settings/serviceaccounts/adminsdk).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the downloaded token to `/tmp/service_account.json`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create the `chapter12/firebase` directory
    and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter12/firebase](https://github.com/agtorre/go-cookbook/tree/master/chapter12/firebase)
    or use this as an exercise to write some of your own.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `client.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `auth.go` with the following contents. Tweak **[https://go-cookbook.firebaseio.com](https://go-cookbook.firebaseio.com)**
    to match whatever your apps, name is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file named `main.go` with the following content. Ensure that you modify
    the `channels` import to use the path you set up in step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may also run `go build ./example`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should now see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firebase uses OAuth2 for authentication. In this case, we downloaded a credentials
    file that can be used, along with a request for appropriate scopes, to return
    a token that may work with the Firebase database. We can store any sort of structured
    map-like object. In this case, we store `map[string]interface{}`.
  prefs: []
  type: TYPE_NORMAL
- en: The client code wraps all operations in an interface for ease of testing. This
    is a common pattern when writing client code and is also used in other recipes.
  prefs: []
  type: TYPE_NORMAL
