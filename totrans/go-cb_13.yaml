- en: Performance Improvements, Tips, and Tricks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能改进、技巧和窍门
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下菜谱：
- en: Speeding up compilation and testing cycles
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加快编译和测试周期
- en: Using the pprof tool
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用pprof工具
- en: Benchmarking and finding bottlenecks
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基准测试和查找瓶颈
- en: Memory allocation and heap management
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存分配和堆管理
- en: Vendoring and project layout
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖项和项目布局
- en: Using fasthttprouter and fasthttp
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用fasthttprouter和fasthttp
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: This chapter will focus on optimizing an application, discovering bottlenecks,
    and vendoring dependencies. These are some tips and tricks that can be used immediately
    by existing applications. Many of these recipes are necessary if you or your organization
    require fully reproducible builds. They're also useful when you want to benchmark
    an applications' performance. The final recipe focuses on increasing the speed
    of HTTP, however, it's always important to remember that the web world moves quickly,
    and it's important to refresh yourself on best practices. For example, if you
    require HTTP/2, it is now available using the built-in Go `net/http` package since
    version 1.6.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将专注于优化应用程序，发现瓶颈，以及依赖项的vendoring。这些是一些可以立即用于现有应用程序的技巧和窍门。如果你或你的组织需要完全可重复构建，这些菜谱是必要的。当你想基准测试应用程序的性能时，它们也非常有用。最后的菜谱专注于提高HTTP的速度，然而，始终要记住，网络世界变化迅速，了解最佳实践很重要。例如，如果你需要HTTP/2，从版本1.6开始，可以使用内置的Go
    `net/http`包来使用它。
- en: Speeding up compilation and testing cycles
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加快编译和测试周期
- en: There are a few reasons why an application might be slow to compile, and by
    extension, run tests against. Usually, this is a combination requiring the application
    to compile from scratch every time (no intermediate builds), large code bases,
    and many dependencies. This recipe will explore some tools that can be used to
    look at the current dependency lists and to speed up compilation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个原因可能导致应用程序编译缓慢，进而运行测试也缓慢。通常，这是需要应用程序每次从头开始编译（没有中间构建）、大型代码库和许多依赖的组合。这个菜谱将探讨一些可以用来查看当前依赖列表并加快编译速度的工具。
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Configure your environment by performing the following steps:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下步骤配置你的环境：
- en: Download and install Go on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install)
    and configure your `GOPATH` environment variable.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://golang.org/doc/install](https://golang.org/doc/install)下载并安装Go到你的操作系统，并配置你的`GOPATH`环境变量。
- en: Open a terminal/console application.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端/控制台应用程序。
- en: Navigate to your `GOPATH/src` directory and create a project directory, for
    example, `$GOPATH/src/github.com/yourusername/customrepo`.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到你的`GOPATH/src`目录并创建一个项目目录，例如，`$GOPATH/src/github.com/yourusername/customrepo`。
- en: All code will be run and modified from this directory.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所有代码都将从这个目录运行和修改。
- en: Optionally, install the latest tested version of the code using the `go get
    github.com/agtorre/go-cookbook/` command.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，使用`go get github.com/agtorre/go-cookbook/`命令安装代码的最新测试版本。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'These steps cover writing and running your application:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: To demonstrate how go build performance can degrade, either remove your `pkg`
    directory by running the `rm -rf $GOPATH/pkg/` command or set up a new `GOPATH`
    for this recipe. Ensure that `$GOPATH` is set.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了演示go构建性能如何退化，你可以通过运行`rm -rf $GOPATH/pkg/`命令来删除你的`pkg`目录，或者为这个菜谱设置一个新的`GOPATH`。确保`$GOPATH`已设置。
- en: Build the `github.com/agtorre/go-cookbook/chapter6/grpc/server`package by running
    the `cd $GOPATH/src/github.com/agtorre/go-cookbook/chapter6/grpc/server` command.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行`cd $GOPATH/src/github.com/agtorre/go-cookbook/chapter6/grpc/server`命令来构建`github.com/agtorre/go-cookbook/chapter6/grpc/server`包。
- en: 'Run the `time go build` command:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`time go build`命令：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Test the `github.com/agtorre/go-cookbook/chapter6/grpc/server` package using
    the following command:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令测试`github.com/agtorre/go-cookbook/chapter6/grpc/server`包：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Explore what''s causing the 4-second builds; it doesn''t appear to be the size
    of our project:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 探索导致4秒构建的原因；看起来并不是我们项目的大小：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'List all imports:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出所有导入：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'List dependencies instead; check the number. Note the difference when compared
    to an empty `main.go` file:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出依赖项；检查数量。注意与空`main.go`文件相比的差异：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Speed it up:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加速：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Try running the following commands again:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次尝试运行以下命令：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: If you're experiencing slow Go compilation speed, there are a few things to
    consider. Firstly, Go 1.5 was the first Go compile written entirely in Go. This
    came with a large increase in compilation times, and every release since has improved
    this. If you're working with Go 1.5 or later, your first step should be upgrading
    to the latest version of Go.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到Go编译速度慢的问题，有几个方面需要考虑。首先，Go 1.5是第一个完全用Go编写的Go编译器。这带来了编译时间的显著增加，并且从那时起，每个版本都对此进行了改进。如果你使用的是Go
    1.5或更高版本，你的第一步应该是升级到最新的Go版本。
- en: Next, some analysis of dependencies can be critical. Some go packages have large
    dependency changes, and you may unknowingly be adding hundreds of thousands of
    lines of code with a single import. It's worthwhile analyzing your dependencies.
    This is possible with the Go list tool, but there are also third-party tools,
    including the new dep ([https://github.com/golang/dep](https://github.com/golang/dep)),
    godep ([https://github.com/tools/godep](https://github.com/tools/godep)), and
    glide ([https://github.com/Masterminds/glide](https://github.com/Masterminds/glide)),
    and most vendor repositories will place all dependencies in the vendor directory.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，对依赖关系的分析可能至关重要。一些Go包有较大的依赖关系变化，你可能会在不知情的情况下通过单个导入添加数十万行代码。分析你的依赖关系是值得的。这可以通过Go
    list工具实现，但也有一些第三方工具，包括新的dep ([https://github.com/golang/dep](https://github.com/golang/dep))、godep
    ([https://github.com/tools/godep](https://github.com/tools/godep))和glide ([https://github.com/Masterminds/glide](https://github.com/Masterminds/glide))，以及大多数供应商仓库都会将所有依赖项放在供应商目录中。
- en: Lastly, saving intermediate builds of libraries can often give a significant
    boost. This is accomplished with the `go install ./...` and `go test -i ./...`
    commands, which will create artifacts in the `pkg` directory. The `install` command
    does this for imported packages, and `go test -i` does the same for test packages.
    This can be useful if you're using a framework such as `goconvey`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，保存库的中间构建版本通常会带来显著的提升。这可以通过`go install ./...`和`go test -i ./...`命令实现，这些命令将在`pkg`目录中创建工件。`install`命令为导入的包执行此操作，而`go
    test -i`为测试包执行相同的操作。如果你使用的是`goconvey`这样的框架，这可能会很有用。
- en: Using the pprof tool
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pprof工具
- en: The pprof tools allows Go applications to collect and export runtime profiling
    data. It also provides web hooks to access the tool from a web interface. This
    recipe will create a basic application that verifies a bcrypt hashed password
    against a plaintext one, then it will profile the application.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: pprof工具允许Go应用程序收集和导出运行时分析数据。它还提供了通过Web界面访问工具的Web钩子。这个方案将创建一个基本的应用程序，用于验证bcrypt散列密码与明文密码是否匹配，然后分析该应用程序。
- en: You might expect the pprof tool to be in the [Chapter 10](c869fa02-b731-4966-a966-0b7e996f242a.xhtml),
    *Distributed Systems*,with other metrics and monitoring recipes. It was instead
    put in this chapter because it will be used to analyze and improve a program much
    in the same way benchmarking can be used. As a result, this recipe will largely
    focus on pprof for analyzing and improving the memory usage of an application.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能期望在[第10章](c869fa02-b731-4966-a966-0b7e996f242a.xhtml)“分布式系统”中找到pprof工具，以及其他指标和监控方案。然而，它被放在了这一章，因为它将用于分析和改进程序，这与基准测试的使用方式非常相似。因此，这个方案将主要关注pprof在分析和改进应用程序内存使用方面的应用。
- en: Getting ready
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Configure your environment by performing these steps:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下步骤来配置你的环境：
- en: Refer to the *Getting ready* section of the *Speeding up compilation and testing
    cycles* recipe in this chapter.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 参考本章中“加快编译和测试周期”方案的*准备工作*部分。
- en: Optionally, install Graphviz from [http://www.graphviz.org/Home.php](http://www.graphviz.org/Home.php).
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，从[http://www.graphviz.org/Home.php](http://www.graphviz.org/Home.php)安装Graphviz。
- en: How to do it...
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create and navigate to the `chapter13/pprof`
    directory.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的终端/控制台应用程序中，创建并导航到`chapter13/pprof`目录。
- en: Copy tests from **[https://github.com/agtorre/go-cookbook/tree/master/chapter13/pprof](https://github.com/agtorre/go-cookbook/tree/master/chapter13/pprof)**
    or use this as an exercise to write some of your own code.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**[https://github.com/agtorre/go-cookbook/tree/master/chapter13/pprof](https://github.com/agtorre/go-cookbook/tree/master/chapter13/pprof)**复制测试或将其作为练习编写一些自己的代码。
- en: Create a directory named `crypto` and navigate to it.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`crypto`的目录并导航到它。
- en: 'Create a file called `handler.go` with the following content:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`handler.go`的文件，内容如下：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Navigate up a directory.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向上导航一个目录。
- en: Create a new directory named `example` and navigate to it.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `example` 的新目录并导航到它。
- en: 'Create a `main.go` file with the following content. Ensure that you modify
    the `crypto` import to use the path you set up in step 2:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含以下内容的 `main.go` 文件。确保你将 `crypto` 导入修改为在步骤 2 中设置的路径：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Run `go run main.go`.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You may also run the following command:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行以下命令：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You should now see the following output:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该看到以下输出：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In a separate terminal, run the following:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个终端中运行以下命令：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will start a 30 second timer.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将启动一个 30 秒的计时器。
- en: 'Run several curls while `pprof` runs:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `pprof` 运行时运行多个 curl：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Return to the `pprof` command and wait for it to complete.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到 `pprof` 命令并等待其完成。
- en: 'Run the `top10` command from the `pprof` command:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `pprof` 命令运行 `top10` 命令：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If you installed Graphviz, run the `pprof web` command. You should see something
    like this:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你安装了 Graphviz，运行 `pprof web` 命令。你应该看到类似以下的内容：
- en: '![](img/58ea20d4-c074-4591-9b44-5685f316c916.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/58ea20d4-c074-4591-9b44-5685f316c916.png)'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试用例，请向上导航一个目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The pprof tool provides a lot of runtime information about your application.
    Using the `net/pprof` package is usually the most simple to configure--all that's
    required is listening on a port and doing an import.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: pprof 工具提供了关于你的应用程序的大量运行时信息。使用 `net/pprof` 包通常是最简单的配置方式——所需做的就是监听一个端口并进行导入。
- en: In our case, we wrote a handler that uses a very compute-heavy applications
    (bcrypt) so that we can demonstrate how they pop up when profiling with pprof.
    This will quickly isolate chunks of code that are creating bottlenecks in your
    application.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们编写了一个使用非常计算密集型应用程序（bcrypt）的处理程序，以便我们可以演示它们在 pprof 分析时是如何出现的。这将快速隔离创建应用程序瓶颈的代码块。
- en: We chose to collect a general profile that causes pprof to poll our application
    endpoint for 30 seconds. We then generated traffic against the endpoint to help
    produce results. This can be helpful when you're attempting to check a single
    handler or branch of code.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择收集一个通用配置文件，使 pprof 在 30 秒内轮询我们的应用程序端点。然后我们生成针对端点的流量以帮助产生结果。这在你尝试检查单个处理器或代码分支时可能很有帮助。
- en: Lastly, we looked at the top 10 functions in terms of CPU utilization. It's
    also possible to look at memory/heap management with the `pprof http://localhost:8080/debug/pprof/heap`
    command. The `pprof web` command can be used to look at a visualization of your
    CPU/memory profile and helps highlight more active code.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们查看 CPU 利用率最高的前 10 个函数。也可以使用 `pprof http://localhost:8080/debug/pprof/heap`
    命令查看内存/堆管理。`pprof web` 命令可以用来查看你的 CPU/内存配置文件的可视化，并有助于突出更活跃的代码。
- en: Benchmarking and finding bottlenecks
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基准测试和查找瓶颈
- en: Another method for determining slow parts of code is to use benchmarks. Benchmarks
    can be used to test functions for average performance and can also run benchmarks
    in parallel. This can be useful when comparing functions or doing micro-optimizations
    for certain code, especially to see how a function implementation might perform
    when using it concurrently. For this recipe, we'll create two structs that both
    implement an atomic counter. The first will use the `sync` package, and the other
    will use `sync/atomic`. We'll then benchmark both the solutions.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 确定代码中缓慢部分的另一种方法是使用基准测试。基准测试可以用来测试函数的平均性能，也可以并行运行基准测试。这在对函数进行比较或对某些代码进行微优化时可能很有用，特别是为了查看函数实现在使用并发时可能的表现。对于这个菜谱，我们将创建两个都实现了原子计数器的结构体。第一个将使用
    `sync` 包，另一个将使用 `sync/atomic`。然后我们将基准测试这两个解决方案。
- en: Getting ready
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Refer to the *Getting ready* section of the *Speeding up compilation and testing
    cycles* recipe in this chapter.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 参考本章中 *加快编译和测试周期* 菜单的 *准备工作* 部分。
- en: How to do it...
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'These steps cover writing and running your application:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create the `chapter13/bench` directory
    and navigate to it.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建名为 `chapter13/bench` 的目录并导航到它。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter13/bench](https://github.com/agtorre/go-cookbook/tree/master/chapter13/bench)
    or use this as an exercise to write some of your own code.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter13/bench](https://github.com/agtorre/go-cookbook/tree/master/chapter13/bench)
    复制测试用例，或者将其作为练习编写一些自己的代码。
- en: Note that copied tests also include benchmarks written later in this recipe.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，复制的测试也包括在此配方中稍后编写的基准测试。
- en: 'Create a file called `lock.go` with the following content:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `lock.go` 的文件，内容如下：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a file called `atomic.go` with the following content:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `atomic.go` 的文件，内容如下：
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create a file called `lock_test.go` with the following content:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `lock_test.go` 的文件，内容如下：
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create a file called `atomic_test.go` with the following content:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `atomic_test.go` 的文件，内容如下：
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Run the `go test -bench1` command, and you will see the following output:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go test -bench1` 命令，你将看到以下输出：
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请向上导航一个目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe is an example of comparing a critical path of code. For example,
    sometimes your application must execute certain functionality often, maybe every
    call. In this case, we've written an atomic counter that can add or read values
    from multiple go routines.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方是代码关键路径比较的一个示例。例如，有时你的应用程序必须经常执行某些功能，可能每次调用都要执行。在这种情况下，我们编写了一个原子计数器，可以从多个goroutine中添加或读取值。
- en: The first solution uses `RWMutex` and `Lock` or `RLock` objects to write and
    read, respectively. The second uses the atomic package that provides the same
    functionality out of the box. We make the signatures of our functions the same,
    so benchmarks can be reused with minor modifications and so that either can satisfy
    the same atomic integer interface.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个解决方案使用 `RWMutex` 和 `Lock` 或 `RLock` 对象分别进行写入和读取。第二个使用提供相同功能的原子包。我们使函数的签名相同，以便基准测试可以经过少量修改后重用，并且两个都可以满足相同的原子整数接口。
- en: Lastly, we write standard benchmarks for adding values and reading them. Then,
    we write a parallel benchmark that calls the add and read functions. The parallel
    benchmark will create lot of lock contention, so we expect a slowdown. Perhaps
    unexpectedly, the atomic package significantly outperforms `RWMutex`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们编写了添加值和读取值的基准测试。然后，我们编写了一个并行基准测试，该测试调用添加和读取函数。并行基准测试将创建大量的锁竞争，因此我们预计会有性能下降。也许出乎意料的是，原子包在性能上显著优于
    `RWMutex`。
- en: Memory allocation and heap management
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存分配和堆管理
- en: Some applications can benefit a lot from optimization. Consider routers, for
    example, which we'll look at in a later recipe. Fortunately, the tool benchmark
    suite provides flags to collect a number of memory allocations as well as memory
    allocation size. It can be helpful to tune certain critical code paths to minimize
    these two attributes.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一些应用程序可以从优化中受益良多。以路由器为例，我们将在后面的配方中探讨。幸运的是，基准测试工具集提供了收集大量内存分配以及内存分配大小的标志。这有助于调整某些关键代码路径以最小化这两个属性。
- en: This recipe will show two approaches to writing a function that glues together
    strings with a space, similar to `strings.Join("a", "b", "c")`. One approach will
    use concatenation, while the other will use the `strings` package. We'll then
    compare performance and memory allocations between the two.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方将展示两种编写将字符串粘合在一起的方法，类似于 `strings.Join("a", "b", "c")`。一种方法将使用连接，而另一种将使用 `strings`
    包。然后我们将比较两种方法的性能和内存分配。
- en: Getting ready
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Refer to the *Getting ready* section of the *Speeding up compilation and testing
    cycles* recipe in this chapter.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 参考本章中 *Speeding up compilation and testing cycles* 配方的 *准备就绪* 部分。
- en: How to do it...
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create the `chapter13/tuning` directory
    and navigate to it.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的终端/控制台应用程序中，创建 `chapter13/tuning` 目录并导航到该目录。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter13/tuning](https://github.com/agtorre/go-cookbook/tree/master/chapter14/tuning)
    or use this as an exercise to write some of your own code.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter13/tuning](https://github.com/agtorre/go-cookbook/tree/master/chapter14/tuning)
    复制测试或将其作为练习编写一些自己的代码。
- en: Note that copied tests also include benchmarks written later in this recipe.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，复制的测试也包括在此配方中稍后编写的基准测试。
- en: 'Create a file called `concat.go` with the following content:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `concat.go` 的文件，内容如下：
- en: '[PRE19]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Create a file called `join.go` with the following content:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `join.go` 的文件，内容如下：
- en: '[PRE20]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a file called `concat_test.go` with the following content:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `concat_test.go` 的文件，内容如下：
- en: '[PRE21]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create a file called `join_test.go` with the following content:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `join_test.go` 的文件，内容如下：
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Run the `GOMAXPROCS=1 go test -bench=. -benchmem -benchtime=1s` command and
    you will see the following output:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `GOMAXPROCS=1 go test -bench=. -benchmem -benchtime=1s` 命令，您将看到以下输出：
- en: '[PRE23]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您复制或编写了自己的测试，请向上移动一个目录并运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Benchmarking helps us tune applications and do certain micro-optimizations for
    things such as memory allocations. When benchmarking allocations for applications
    with input, it's important to try a variety of input sizes to determine if it
    affects allocations. We wrote two functions, `concat` and `join`. Both join together
    a `variadic` string parameter with spaces, so the arguments (*a*, *b*, *c*) will
    return the string *a b c*.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 基准测试帮助我们调整应用程序，并对内存分配等事物进行某些微优化。当对具有输入的应用程序进行基准测试时，尝试各种输入大小以确定它是否会影响分配是很重要的。我们编写了两个函数，`concat`
    和 `join`。这两个函数都将一个可变字符串参数与空格连接起来，所以参数 (*a*, *b*, *c*) 将返回字符串 *a b c*。
- en: The `concat` approach accomplishes this solely through string concatenation.
    We create a string and append the strings in the list and spaces in a `for` loop.
    We omit adding a space on the last loop. The `join` function uses the internal
    `Strings.Join` function to accomplish this far more efficiently in most cases.
    It can be helpful to benchmark standard library compared to your own functions
    to help better understand tradeoffs in performance, simplicity, and functionality.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`concat` 方法仅通过字符串连接来完成这项工作。我们创建一个字符串，并在 `for` 循环中追加列表中的字符串和空格。在最后一个循环中我们省略添加空格。`join`
    函数使用内部的 `Strings.Join` 函数在大多数情况下更有效地完成这项工作。将标准库与您自己的函数进行比较进行基准测试可能有助于更好地理解性能、简单性和功能方面的权衡。'
- en: We used sub-benchmarks to test all of our parameters, which also work excellently
    with table-driven benchmarks. We can see how the `concat` approach results in
    a lot more allocations than join, at least for single length inputs. A good exercise
    would be to try this with variable length input strings as well as number of arguments.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了子基准测试来测试所有参数，这也非常适合与表格驱动基准测试一起使用。我们可以看到 `concat` 方法在至少对于单长度输入的情况下，比连接方法产生了更多的分配。一个很好的练习是尝试使用可变长度的输入字符串以及不同的参数数量。
- en: Vendoring and project layout
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 供应商化和项目布局
- en: Vendoring Go applications is still a largely unresolved issue. There are discussions
    and plans to produce an official vendoring solution ([https://github.com/golang/dep](https://github.com/golang/dep)),
    but it's very early days and things are far from complete. For now, there are
    a number of alternative solutions. By default, you can place packages into a local
    vendor directory to use them instead of those in your `GOPATH` environment variable.
    This allows packages to pin on the version in their vendor directory and allows
    for reproducible builds without having to commit your entire `GOPATH` into version
    control. Most package managers take advantage of this. For this recipe, we'll
    explore the layout for a web application and how to manage its vendor dependencies
    with `godep` [github.com/tools/godep](http://github.com/tools/godep), a popular
    tool for managing dependencies.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Go 应用程序进行供应商化仍然是一个很大程度上未解决的问题。有关于创建官方供应商解决方案的讨论和计划（[https://github.com/golang/dep](https://github.com/golang/dep)），但目前还处于早期阶段，事情远未完成。目前，有几种替代方案。默认情况下，您可以将包放置到本地供应商目录中，以使用它们而不是
    `GOPATH` 环境变量中的那些。这允许包锁定其供应商目录中的版本，并允许在不将整个 `GOPATH` 提交到版本控制的情况下进行可重复构建。大多数包管理器都利用了这一点。对于这个食谱，我们将探讨
    Web 应用程序的布局以及如何使用 `godep` [github.com/tools/godep](http://github.com/tools/godep)，一个流行的依赖管理工具来管理其供应商依赖。
- en: Getting ready
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Configure your environment by performing these steps:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下步骤配置您的环境：
- en: Refer to the *Getting ready* section of the *Speeding up compilation and testing
    cycles* recipe in this chapter.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 参考本章中“加速编译和测试周期”食谱的“准备就绪”部分。
- en: Run the `go get github.com/tools/godep` command.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go get github.com/tools/godep` 命令。
- en: Run the `go get github.com/sirupsen/logrus` command.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go get github.com/sirupsen/logrus` 命令。
- en: How to do it...
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行您的应用程序：
- en: From your terminal/console application, create the `chapter13/vendoring` directory
    and navigate to it.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端/控制台应用程序中，创建 `chapter13/vendoring` 目录并导航到它。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter13/vendoring](https://github.com/agtorre/go-cookbook/tree/master/chapter14/vendoring)
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter13/vendoring](https://github.com/agtorre/go-cookbook/tree/master/chapter14/vendoring)
    复制测试
- en: or use this as an exercise to write some of your own code.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者将其用作练习来编写你自己的代码。
- en: Create a directory named `models` and navigate to it.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `models` 的目录并进入该目录。
- en: 'Create a file called `models.go` with the following content:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `models.go` 的文件，内容如下：
- en: '[PRE24]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Navigate back up a directory.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向上导航一个目录。
- en: Create a directory named `handlers` and navigate to it.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `handlers` 的目录并进入该目录。
- en: 'Create a file called `controller.go` with the following content:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `controller.go` 的文件，内容如下：
- en: '[PRE25]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create a file called `get.go` with the following content:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `get.go` 的文件，内容如下：
- en: '[PRE26]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create a file called `set.go` with the following content:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `set.go` 的文件，内容如下：
- en: '[PRE27]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Vendor your dependencies:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 供应商你的依赖项：
- en: '[PRE28]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Navigate up one directory.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向上导航一个目录。
- en: 'Create a file called `main.go` with the following content:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，内容如下：
- en: '[PRE29]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Run `go run main.go`.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go`。
- en: 'You may also run the following command:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以运行以下命令：
- en: '[PRE30]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You should see the following output:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE31]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'In a separate terminal, run some curls:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个终端中运行一些curl命令：
- en: '[PRE32]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Look at the server logs:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看服务器日志：
- en: '[PRE33]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: If you copied or wrote your own tests, run `go test`. Ensure that all the tests
    pass.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，请运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe shows how to separate basic concerns in an applications. For resources
    such as models or clients, it's good to first create an interface for what actions
    it will perform, then satisfy that interface and provide convenient setup functions.
    Model/client code will also frequently produce custom error types.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱展示了如何在应用程序中分离基本关注点。对于模型或客户端等资源，首先创建一个执行动作的接口是一个好主意，然后满足该接口并提供方便的设置函数。模型/客户端代码也会经常产生自定义错误类型。
- en: Next, we create our controller and handlers, which isolate all client requests
    to the server. The `Controller` object uses the storage interface, making it easy
    to swap storage solutions without modifying application code. Lastly, `main.go`
    is used to set up routes, initialize controllers, and configure things such as
    logging. We use a package-level global logger so that any of our methods can freely
    log if needed. We still try to log only when we're dealing with an error rather
    than whenever we encounter and quickly return one.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建我们的控制器和处理器，将所有客户端请求隔离到服务器。`Controller` 对象使用存储接口，这使得在不修改应用程序代码的情况下轻松切换存储解决方案变得容易。最后，`main.go`
    用于设置路由、初始化控制器和配置诸如日志记录等事项。我们使用包级别的全局日志记录器，以便我们的任何方法都可以在需要时自由记录。我们仍然尝试只在处理错误时记录，而不是在遇到并快速返回时。
- en: We used logrus as our logging system, which introduced a dependency that we'd
    like to vendor for ease of reproducible builds. We used the Godep tool to store
    a local copy of logrus in our vendor directory. Checkouts of this project will
    use the pinned version in vendors for future builds and it can be upgraded when
    ready.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了 logrus 作为我们的日志系统，这引入了一个我们希望供应商以便于可重复构建的依赖项。我们使用了 Godep 工具将 logrus 的本地副本存储在我们的供应商目录中。本项目检查将使用
    vendors 中的固定版本进行未来构建，并且可以在准备就绪时升级。
- en: Using fasthttprouter and fasthttp
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 fasthttprouter 和 fasthttp
- en: Although the Go standard library provides everything you would need to run an
    HTTP server, sometimes you need to further optimize for things such as routing
    and request time. This recipe will explore a library that speeds up request handling
    called `fasthttp` ([https://github.com/valyala/fasthttp](https://github.com/valyala/fasthttp))
    and a router, that dramatically speeds up routing performance called `fasthttprouter`
    ([https://github.com/buaazp/fasthttprouter](https://github.com/buaazp/fasthttprouter)).
    Although fasthttp is quick, it's important to note that it doesn't support HTTP/2
    ([https://github.com/valyala/fasthttp/issues/45](https://github.com/valyala/fasthttp/issues/45)).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Go标准库提供了运行HTTP服务器所需的一切，但有时你需要进一步优化路由和请求时间等问题。本食谱将探讨一个名为 `fasthttp` 的库，它可以加快请求处理速度（[https://github.com/valyala/fasthttp](https://github.com/valyala/fasthttp)）以及一个名为
    `fasthttprouter` 的路由器，它可以显著提高路由性能（[https://github.com/buaazp/fasthttprouter](https://github.com/buaazp/fasthttprouter)）。虽然
    fasthttp 很快，但需要注意的是，它不支持 HTTP/2 ([https://github.com/valyala/fasthttp/issues/45](https://github.com/valyala/fasthttp/issues/45))。
- en: Getting ready
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Configure your environment by performing these steps:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下步骤来配置你的环境：
- en: Refer to the *Getting ready* section of the *Speeding up compilation and testing
    cycles* recipe in this chapter.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 参考本章中“加速编译和测试周期”食谱的“准备就绪”部分。
- en: Run the `go get github.com/buaazp/fasthttprouter` command.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go get github.com/buaazp/fasthttprouter` 命令。
- en: Run the `go get github.com/valyala/fasthttp` command.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go get github.com/valyala/fasthttp` 命令。
- en: How to do it...
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'These steps cover writing and running your application:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤涵盖了编写和运行你的应用程序：
- en: From your terminal/console application, create the `chapter13/fastweb` directory
    and navigate to it.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的终端/控制台应用程序中，创建 `chapter13/fastweb` 目录并导航到它。
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter13/fastweb](https://github.com/agtorre/go-cookbook/tree/master/chapter14/fastweb)
    or use this as an exercise to write some of your own code.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/agtorre/go-cookbook/tree/master/chapter13/fastweb](https://github.com/agtorre/go-cookbook/tree/master/chapter14/fastweb)
    复制测试或将其作为练习编写你自己的代码。
- en: 'Create a file called `items.go` with the following content:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `items.go` 的文件，并包含以下内容：
- en: '[PRE34]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create a file called `handlers.go` with the following content:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `handlers.go` 的文件，并包含以下内容：
- en: '[PRE35]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Create a file called `main.go` with the following content:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，并包含以下内容：
- en: '[PRE36]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Run the `go build` command.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go build` 命令。
- en: 'Run the `./fastweb` command:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `./fastweb` 命令：
- en: '[PRE37]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'From a separate terminal, test it our with some curls:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个终端中，使用一些curl命令进行测试：
- en: '[PRE38]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: If you copied or wrote your own tests, run `go test`. Ensure that all the tests
    pass.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你复制或编写了自己的测试，运行 `go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `fasthttp` and `fasthttprouter` packages can do a lot to speed up the life
    cycle of a web request. Both packages do a lot of optimization on the hot path
    of code, but with the unfortunate caveat of rewriting your handlers to use a new
    context object rather than traditional requests and response writer.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`fasthttp` 和 `fasthttprouter` 包可以为加快Web请求的生命周期做很多事情。这两个包在代码的热路径上做了很多优化，但不幸的是，你必须将处理器重写为使用新的上下文对象，而不是传统的请求和响应写入器。'
- en: There are a number of frameworks that have taken a similar approach to routing,
    and some have directly incorporated `fasthttp`. These projects keep up-to-date
    information in their `README` files.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多框架采用了类似的路由方法，其中一些直接集成了 `fasthttp`。这些项目在它们的 `README` 文件中保持信息更新。
- en: Our recipe implemented a simple list object that we can append to with one endpoint
    and that will be returned by the other. The primary purpose of this recipe is
    to demonstrate working with parameters, setting up a router that now explicitly
    defines the supported methods instead of the generic `Handle` and `HandleFunc`,
    and to show how similar it is to standard handlers, but with many other benefits.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的食谱实现了一个简单的列表对象，我们可以通过一个端点向其添加内容，另一个端点将返回它。本食谱的主要目的是演示如何使用参数，设置一个现在明确定义了支持方法的路由器，而不是通用的
    `Handle` 和 `HandleFunc`，并展示它如何与标准处理器相似，但具有许多其他优点。
