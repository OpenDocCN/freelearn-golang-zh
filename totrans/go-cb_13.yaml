- en: Performance Improvements, Tips, and Tricks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Speeding up compilation and testing cycles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the pprof tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benchmarking and finding bottlenecks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Memory allocation and heap management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vendoring and project layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using fasthttprouter and fasthttp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will focus on optimizing an application, discovering bottlenecks,
    and vendoring dependencies. These are some tips and tricks that can be used immediately
    by existing applications. Many of these recipes are necessary if you or your organization
    require fully reproducible builds. They're also useful when you want to benchmark
    an applications' performance. The final recipe focuses on increasing the speed
    of HTTP, however, it's always important to remember that the web world moves quickly,
    and it's important to refresh yourself on best practices. For example, if you
    require HTTP/2, it is now available using the built-in Go `net/http` package since
    version 1.6.
  prefs: []
  type: TYPE_NORMAL
- en: Speeding up compilation and testing cycles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a few reasons why an application might be slow to compile, and by
    extension, run tests against. Usually, this is a combination requiring the application
    to compile from scratch every time (no intermediate builds), large code bases,
    and many dependencies. This recipe will explore some tools that can be used to
    look at the current dependency lists and to speed up compilation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Go on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install)
    and configure your `GOPATH` environment variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a terminal/console application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to your `GOPATH/src` directory and create a project directory, for
    example, `$GOPATH/src/github.com/yourusername/customrepo`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All code will be run and modified from this directory.
  prefs: []
  type: TYPE_NORMAL
- en: Optionally, install the latest tested version of the code using the `go get
    github.com/agtorre/go-cookbook/` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate how go build performance can degrade, either remove your `pkg`
    directory by running the `rm -rf $GOPATH/pkg/` command or set up a new `GOPATH`
    for this recipe. Ensure that `$GOPATH` is set.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build the `github.com/agtorre/go-cookbook/chapter6/grpc/server`package by running
    the `cd $GOPATH/src/github.com/agtorre/go-cookbook/chapter6/grpc/server` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the `time go build` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Test the `github.com/agtorre/go-cookbook/chapter6/grpc/server` package using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Explore what''s causing the 4-second builds; it doesn''t appear to be the size
    of our project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'List all imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'List dependencies instead; check the number. Note the difference when compared
    to an empty `main.go` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Speed it up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Try running the following commands again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're experiencing slow Go compilation speed, there are a few things to
    consider. Firstly, Go 1.5 was the first Go compile written entirely in Go. This
    came with a large increase in compilation times, and every release since has improved
    this. If you're working with Go 1.5 or later, your first step should be upgrading
    to the latest version of Go.
  prefs: []
  type: TYPE_NORMAL
- en: Next, some analysis of dependencies can be critical. Some go packages have large
    dependency changes, and you may unknowingly be adding hundreds of thousands of
    lines of code with a single import. It's worthwhile analyzing your dependencies.
    This is possible with the Go list tool, but there are also third-party tools,
    including the new dep ([https://github.com/golang/dep](https://github.com/golang/dep)),
    godep ([https://github.com/tools/godep](https://github.com/tools/godep)), and
    glide ([https://github.com/Masterminds/glide](https://github.com/Masterminds/glide)),
    and most vendor repositories will place all dependencies in the vendor directory.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, saving intermediate builds of libraries can often give a significant
    boost. This is accomplished with the `go install ./...` and `go test -i ./...`
    commands, which will create artifacts in the `pkg` directory. The `install` command
    does this for imported packages, and `go test -i` does the same for test packages.
    This can be useful if you're using a framework such as `goconvey`.
  prefs: []
  type: TYPE_NORMAL
- en: Using the pprof tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The pprof tools allows Go applications to collect and export runtime profiling
    data. It also provides web hooks to access the tool from a web interface. This
    recipe will create a basic application that verifies a bcrypt hashed password
    against a plaintext one, then it will profile the application.
  prefs: []
  type: TYPE_NORMAL
- en: You might expect the pprof tool to be in the [Chapter 10](c869fa02-b731-4966-a966-0b7e996f242a.xhtml),
    *Distributed Systems*,with other metrics and monitoring recipes. It was instead
    put in this chapter because it will be used to analyze and improve a program much
    in the same way benchmarking can be used. As a result, this recipe will largely
    focus on pprof for analyzing and improving the memory usage of an application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment by performing these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the *Getting ready* section of the *Speeding up compilation and testing
    cycles* recipe in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optionally, install Graphviz from [http://www.graphviz.org/Home.php](http://www.graphviz.org/Home.php).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create and navigate to the `chapter13/pprof`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from **[https://github.com/agtorre/go-cookbook/tree/master/chapter13/pprof](https://github.com/agtorre/go-cookbook/tree/master/chapter13/pprof)**
    or use this as an exercise to write some of your own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a directory named `crypto` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `handler.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Navigate up a directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.go` file with the following content. Ensure that you modify
    the `crypto` import to use the path you set up in step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In a separate terminal, run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This will start a 30 second timer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run several curls while `pprof` runs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Return to the `pprof` command and wait for it to complete.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the `top10` command from the `pprof` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If you installed Graphviz, run the `pprof web` command. You should see something
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/58ea20d4-c074-4591-9b44-5685f316c916.png)'
  prefs: []
  type: TYPE_IMG
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The pprof tool provides a lot of runtime information about your application.
    Using the `net/pprof` package is usually the most simple to configure--all that's
    required is listening on a port and doing an import.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we wrote a handler that uses a very compute-heavy applications
    (bcrypt) so that we can demonstrate how they pop up when profiling with pprof.
    This will quickly isolate chunks of code that are creating bottlenecks in your
    application.
  prefs: []
  type: TYPE_NORMAL
- en: We chose to collect a general profile that causes pprof to poll our application
    endpoint for 30 seconds. We then generated traffic against the endpoint to help
    produce results. This can be helpful when you're attempting to check a single
    handler or branch of code.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we looked at the top 10 functions in terms of CPU utilization. It's
    also possible to look at memory/heap management with the `pprof http://localhost:8080/debug/pprof/heap`
    command. The `pprof web` command can be used to look at a visualization of your
    CPU/memory profile and helps highlight more active code.
  prefs: []
  type: TYPE_NORMAL
- en: Benchmarking and finding bottlenecks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another method for determining slow parts of code is to use benchmarks. Benchmarks
    can be used to test functions for average performance and can also run benchmarks
    in parallel. This can be useful when comparing functions or doing micro-optimizations
    for certain code, especially to see how a function implementation might perform
    when using it concurrently. For this recipe, we'll create two structs that both
    implement an atomic counter. The first will use the `sync` package, and the other
    will use `sync/atomic`. We'll then benchmark both the solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the *Getting ready* section of the *Speeding up compilation and testing
    cycles* recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create the `chapter13/bench` directory
    and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter13/bench](https://github.com/agtorre/go-cookbook/tree/master/chapter13/bench)
    or use this as an exercise to write some of your own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that copied tests also include benchmarks written later in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `lock.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `atomic.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `lock_test.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `atomic_test.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `go test -bench1` command, and you will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe is an example of comparing a critical path of code. For example,
    sometimes your application must execute certain functionality often, maybe every
    call. In this case, we've written an atomic counter that can add or read values
    from multiple go routines.
  prefs: []
  type: TYPE_NORMAL
- en: The first solution uses `RWMutex` and `Lock` or `RLock` objects to write and
    read, respectively. The second uses the atomic package that provides the same
    functionality out of the box. We make the signatures of our functions the same,
    so benchmarks can be reused with minor modifications and so that either can satisfy
    the same atomic integer interface.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we write standard benchmarks for adding values and reading them. Then,
    we write a parallel benchmark that calls the add and read functions. The parallel
    benchmark will create lot of lock contention, so we expect a slowdown. Perhaps
    unexpectedly, the atomic package significantly outperforms `RWMutex`.
  prefs: []
  type: TYPE_NORMAL
- en: Memory allocation and heap management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some applications can benefit a lot from optimization. Consider routers, for
    example, which we'll look at in a later recipe. Fortunately, the tool benchmark
    suite provides flags to collect a number of memory allocations as well as memory
    allocation size. It can be helpful to tune certain critical code paths to minimize
    these two attributes.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show two approaches to writing a function that glues together
    strings with a space, similar to `strings.Join("a", "b", "c")`. One approach will
    use concatenation, while the other will use the `strings` package. We'll then
    compare performance and memory allocations between the two.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the *Getting ready* section of the *Speeding up compilation and testing
    cycles* recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create the `chapter13/tuning` directory
    and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter13/tuning](https://github.com/agtorre/go-cookbook/tree/master/chapter14/tuning)
    or use this as an exercise to write some of your own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that copied tests also include benchmarks written later in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `concat.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `join.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `concat_test.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `join_test.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `GOMAXPROCS=1 go test -bench=. -benchmem -benchtime=1s` command and
    you will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Benchmarking helps us tune applications and do certain micro-optimizations for
    things such as memory allocations. When benchmarking allocations for applications
    with input, it's important to try a variety of input sizes to determine if it
    affects allocations. We wrote two functions, `concat` and `join`. Both join together
    a `variadic` string parameter with spaces, so the arguments (*a*, *b*, *c*) will
    return the string *a b c*.
  prefs: []
  type: TYPE_NORMAL
- en: The `concat` approach accomplishes this solely through string concatenation.
    We create a string and append the strings in the list and spaces in a `for` loop.
    We omit adding a space on the last loop. The `join` function uses the internal
    `Strings.Join` function to accomplish this far more efficiently in most cases.
    It can be helpful to benchmark standard library compared to your own functions
    to help better understand tradeoffs in performance, simplicity, and functionality.
  prefs: []
  type: TYPE_NORMAL
- en: We used sub-benchmarks to test all of our parameters, which also work excellently
    with table-driven benchmarks. We can see how the `concat` approach results in
    a lot more allocations than join, at least for single length inputs. A good exercise
    would be to try this with variable length input strings as well as number of arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Vendoring and project layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vendoring Go applications is still a largely unresolved issue. There are discussions
    and plans to produce an official vendoring solution ([https://github.com/golang/dep](https://github.com/golang/dep)),
    but it's very early days and things are far from complete. For now, there are
    a number of alternative solutions. By default, you can place packages into a local
    vendor directory to use them instead of those in your `GOPATH` environment variable.
    This allows packages to pin on the version in their vendor directory and allows
    for reproducible builds without having to commit your entire `GOPATH` into version
    control. Most package managers take advantage of this. For this recipe, we'll
    explore the layout for a web application and how to manage its vendor dependencies
    with `godep` [github.com/tools/godep](http://github.com/tools/godep), a popular
    tool for managing dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment by performing these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the *Getting ready* section of the *Speeding up compilation and testing
    cycles* recipe in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get github.com/tools/godep` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get github.com/sirupsen/logrus` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create the `chapter13/vendoring` directory
    and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter13/vendoring](https://github.com/agtorre/go-cookbook/tree/master/chapter14/vendoring)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: or use this as an exercise to write some of your own code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a directory named `models` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `models.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Navigate back up a directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a directory named `handlers` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `controller.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `get.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `set.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Vendor your dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Navigate up one directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `main.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'In a separate terminal, run some curls:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Look at the server logs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, run `go test`. Ensure that all the tests
    pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how to separate basic concerns in an applications. For resources
    such as models or clients, it's good to first create an interface for what actions
    it will perform, then satisfy that interface and provide convenient setup functions.
    Model/client code will also frequently produce custom error types.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we create our controller and handlers, which isolate all client requests
    to the server. The `Controller` object uses the storage interface, making it easy
    to swap storage solutions without modifying application code. Lastly, `main.go`
    is used to set up routes, initialize controllers, and configure things such as
    logging. We use a package-level global logger so that any of our methods can freely
    log if needed. We still try to log only when we're dealing with an error rather
    than whenever we encounter and quickly return one.
  prefs: []
  type: TYPE_NORMAL
- en: We used logrus as our logging system, which introduced a dependency that we'd
    like to vendor for ease of reproducible builds. We used the Godep tool to store
    a local copy of logrus in our vendor directory. Checkouts of this project will
    use the pinned version in vendors for future builds and it can be upgraded when
    ready.
  prefs: []
  type: TYPE_NORMAL
- en: Using fasthttprouter and fasthttp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although the Go standard library provides everything you would need to run an
    HTTP server, sometimes you need to further optimize for things such as routing
    and request time. This recipe will explore a library that speeds up request handling
    called `fasthttp` ([https://github.com/valyala/fasthttp](https://github.com/valyala/fasthttp))
    and a router, that dramatically speeds up routing performance called `fasthttprouter`
    ([https://github.com/buaazp/fasthttprouter](https://github.com/buaazp/fasthttprouter)).
    Although fasthttp is quick, it's important to note that it doesn't support HTTP/2
    ([https://github.com/valyala/fasthttp/issues/45](https://github.com/valyala/fasthttp/issues/45)).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment by performing these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the *Getting ready* section of the *Speeding up compilation and testing
    cycles* recipe in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get github.com/buaazp/fasthttprouter` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get github.com/valyala/fasthttp` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal/console application, create the `chapter13/fastweb` directory
    and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy tests from [https://github.com/agtorre/go-cookbook/tree/master/chapter13/fastweb](https://github.com/agtorre/go-cookbook/tree/master/chapter14/fastweb)
    or use this as an exercise to write some of your own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `items.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `handlers.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `main.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Run the `go build` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the `./fastweb` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'From a separate terminal, test it our with some curls:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, run `go test`. Ensure that all the tests
    pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `fasthttp` and `fasthttprouter` packages can do a lot to speed up the life
    cycle of a web request. Both packages do a lot of optimization on the hot path
    of code, but with the unfortunate caveat of rewriting your handlers to use a new
    context object rather than traditional requests and response writer.
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of frameworks that have taken a similar approach to routing,
    and some have directly incorporated `fasthttp`. These projects keep up-to-date
    information in their `README` files.
  prefs: []
  type: TYPE_NORMAL
- en: Our recipe implemented a simple list object that we can append to with one endpoint
    and that will be returned by the other. The primary purpose of this recipe is
    to demonstrate working with parameters, setting up a router that now explicitly
    defines the supported methods instead of the generic `Handle` and `HandleFunc`,
    and to show how similar it is to standard handlers, but with many other benefits.
  prefs: []
  type: TYPE_NORMAL
