- en: The Go programming language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since the invention of the C language in the early 1970s by *Dennis Ritchie*
    at Bell Labs, the computing industry has produced many popular languages that
    are based directly on (or have borrowed ideas from) its syntax. Commonly known
    as the C-family of languages, they can be split into two broad evolutionary branches.
    In one branch, derivatives such as C++, C#, and Java have evolved to adopt a strong
    type system, object orientation, and the use of compiled binaries. These languages,
    however, tend to have a slow build-deploy cycle and programmers are forced to
    adopt a complex object-oriented type system to attain runtime safety and speed
    of execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Go programming language](img/00001.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the other evolutionary linguistic branch are languages such as Perl, Python,
    and JavaScript that are described as dynamic languages for their lack of type
    safety formalities, use of lightweight scripting syntax, and code interpretation
    instead of compilation. Dynamic languages have become the preferred tool for web
    and cloud scale development where speed and ease of deployment are valued over
    runtime safety. The interpreted nature of dynamic languages means, however, they
    generally run slower than their compiled counterparts. In addition, the lack of
    type safety at runtime means the correctness of the system scales poorly as the
    application grows.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go was created as a system language at Google in 2007 by *Robert Griesemer*,
    *Rob Pike*, and *Ken Thomson* to handle the needs of application development.
    The designers of Go wanted to mitigate the issues with the aforementioned languages
    while creating a new language that is simple, safe, consistent, and predictable.
    As Rob Pike puts it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Go is an attempt to combine the safety and performance of a statically-typed
    language with the expressiveness and convenience of a dynamically-typed interpreted
    language."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Go borrows ideas from different languages that came before it, including:'
  prefs: []
  type: TYPE_NORMAL
- en: Simplified but concise syntax that is fun and easy to use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A type of system that feels more like a dynamic language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for object-oriented programming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Statically typed for compilation and runtime safety
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiled to native binaries for fast runtime execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Near-zero compilation time that feels more like an interpreted language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A simple concurrency idiom to leverage multi-core, multi-chip machines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A garbage collector for safe and automatic memory management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The remainder of this chapter will walk you through an introductory set of steps
    that will give you a preview of the language and get you started with building
    and running your first Go program. It is a precursor to the topics that are covered
    in detail in the remaining chapters of the book. You are welcome to skip to other
    chapters if you already have a basic understanding of Go.
  prefs: []
  type: TYPE_NORMAL
