- en: The Go programming language
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go编程语言
- en: 'Since the invention of the C language in the early 1970s by *Dennis Ritchie*
    at Bell Labs, the computing industry has produced many popular languages that
    are based directly on (or have borrowed ideas from) its syntax. Commonly known
    as the C-family of languages, they can be split into two broad evolutionary branches.
    In one branch, derivatives such as C++, C#, and Java have evolved to adopt a strong
    type system, object orientation, and the use of compiled binaries. These languages,
    however, tend to have a slow build-deploy cycle and programmers are forced to
    adopt a complex object-oriented type system to attain runtime safety and speed
    of execution:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 自从1970年代初在贝尔实验室由*Dennis Ritchie*发明C语言以来，计算机行业已经产生了许多直接基于（或从其语法中借鉴了想法）的流行语言。通常被称为C语言家族，它们可以分为两个广泛的进化分支。在一个分支中，如C++、C#和Java之类的衍生语言已经发展到采用强类型系统、面向对象和使用编译的二进制文件。然而，这些语言往往具有缓慢的构建-部署周期，程序员被迫采用复杂的面向对象类型系统以获得运行时安全性和执行速度：
- en: '![The Go programming language](img/00001.jpeg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Go编程语言](img/00001.jpeg)'
- en: In the other evolutionary linguistic branch are languages such as Perl, Python,
    and JavaScript that are described as dynamic languages for their lack of type
    safety formalities, use of lightweight scripting syntax, and code interpretation
    instead of compilation. Dynamic languages have become the preferred tool for web
    and cloud scale development where speed and ease of deployment are valued over
    runtime safety. The interpreted nature of dynamic languages means, however, they
    generally run slower than their compiled counterparts. In addition, the lack of
    type safety at runtime means the correctness of the system scales poorly as the
    application grows.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个进化语言分支中，如Perl、Python和JavaScript之类的语言被描述为动态语言，因为它们缺乏类型安全形式，使用轻量级脚本语法，以及代码解释而不是编译。动态语言已成为网络和云规模开发的优先工具，在这些开发中，速度和部署的便捷性比运行时安全性更重要。然而，动态语言的解释性质意味着它们通常比编译版本运行得更慢。此外，运行时缺乏类型安全性意味着随着应用程序的增长，系统的正确性扩展得不好。
- en: 'Go was created as a system language at Google in 2007 by *Robert Griesemer*,
    *Rob Pike*, and *Ken Thomson* to handle the needs of application development.
    The designers of Go wanted to mitigate the issues with the aforementioned languages
    while creating a new language that is simple, safe, consistent, and predictable.
    As Rob Pike puts it:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Go语言是在2007年由Google的*Robert Griesemer*、*Rob Pike*和*Ken Thomson*创建的系统语言，以处理应用程序开发的需求。Go的设计者希望减轻上述语言的问题，同时创建一个简单、安全、一致且可预测的新语言。正如Rob
    Pike所说：
- en: '*"Go is an attempt to combine the safety and performance of a statically-typed
    language with the expressiveness and convenience of a dynamically-typed interpreted
    language."*'
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"Go语言是一种尝试将静态类型语言的稳定性和性能与动态类型解释性语言的丰富性和便捷性相结合的努力。"*'
- en: 'Go borrows ideas from different languages that came before it, including:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Go借鉴了之前不同语言的想法，包括：
- en: Simplified but concise syntax that is fun and easy to use
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简洁但易于使用的语法
- en: A type of system that feels more like a dynamic language
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种感觉更像动态语言的系统类型
- en: Support for object-oriented programming
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持面向对象编程
- en: Statically typed for compilation and runtime safety
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态类型用于编译和运行时安全性
- en: Compiled to native binaries for fast runtime execution
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译成本地二进制文件以实现快速的运行时执行
- en: Near-zero compilation time that feels more like an interpreted language
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几乎零编译时间，感觉更像是一种解释性语言
- en: A simple concurrency idiom to leverage multi-core, multi-chip machines
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个简单的并发惯用语，以利用多核、多芯片机器
- en: A garbage collector for safe and automatic memory management
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个垃圾回收器用于安全且自动的内存管理
- en: The remainder of this chapter will walk you through an introductory set of steps
    that will give you a preview of the language and get you started with building
    and running your first Go program. It is a precursor to the topics that are covered
    in detail in the remaining chapters of the book. You are welcome to skip to other
    chapters if you already have a basic understanding of Go.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的剩余部分将向您介绍一系列入门步骤，这将让您预览该语言，并开始构建和运行您的第一个Go程序。它是本书剩余章节中详细讨论的主题的先导。如果您已经对Go有基本的了解，欢迎您跳转到其他章节。
