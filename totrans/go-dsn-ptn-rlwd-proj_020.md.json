["```go\n// This program prints molecular information for known metalloids \n// including atomic number, mass, and atom count found \n// in 100 grams of each element using the mole unit. \n// See http://en.wikipedia.org/wiki/Mole_(unit) \npackage main \n\nimport \"fmt\" \n\nconst avogadro float64 = 6.0221413e+23 \nconst grams = 100.0 \n\ntype amu float64 \n\nfunc (mass amu) float() float64 { \n  return float64(mass) \n} \n\ntype metalloid struct { \n  name   string \n  number int32 \n  weight amu \n} \n\nvar metalloids = []metalloid{ \n  metalloid{\"Boron\", 5, 10.81}, \n  metalloid{\"Silicon\", 14, 28.085}, \n  metalloid{\"Germanium\", 32, 74.63}, \n  metalloid{\"Arsenic\", 33, 74.921}, \n  metalloid{\"Antimony\", 51, 121.760}, \n  metalloid{\"Tellerium\", 52, 127.60}, \n  metalloid{\"Polonium\", 84, 209.0}, \n} \n\n// finds # of moles \nfunc moles(mass amu) float64 { \n  return grams / float64(mass) \n} \n\n// returns # of atoms moles \nfunc atoms(moles float64) float64 { \n  return moles * avogadro \n} \n\n// return column headers \nfunc headers() string { \n  return fmt.Sprintf( \n    \"%-10s %-10s %-10s Atoms in %.2f Grams\\n\", \n    \"Element\", \"Number\", \"AMU\", grams, \n  ) \n} \n\nfunc main() { \n  fmt.Print(headers()) \n\n    for _, m := range metalloids { \n      fmt.Printf( \n    \"%-10s %-10d %-10.3f %e\\n\", \n      m.name, m.number, m.weight.float(), atoms(moles(m.weight)), \n      ) \n    } \n}\n\n```", "```go\n$> go run metalloids.go \nElement    Number     AMU        Atoms in 100.00 Grams \nBoron      5          10.810     6.509935e+22 \nSilicon    14         28.085     1.691318e+23 \nGermanium  32         74.630     4.494324e+23 \nArsenic    33         74.921     4.511848e+23 \nAntimony   51         121.760    7.332559e+23 \nTellerium  52         127.600    7.684252e+23 \nPolonium   84         209.000    1.258628e+24\n\n```"]