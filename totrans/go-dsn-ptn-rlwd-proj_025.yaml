- en: Composite types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Besides the types for simple values, Go also supports composite types such
    as `array`, `slice`, and `map`. These types are designed to store indexed elements
    of values of a specified type. For instance, the `metalloid` example shown previously
    makes use of a slice, which is a variable-sized array. The variable `metalloid`
    is declared as a `slice` to store a collection of the type `metalloid`. The code
    uses the literal syntax to combine the declaration and assignment of a `slice`
    of type `metalloid`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Go also supports a `struct` type which is a composite that stores named elements
    called fields as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The previous example uses the literal syntax to declare `struct{name string;
    diameter int}` with the value `{"earth", 12742}`. You can read all about composite
    types in [Chapter 7](part0051_split_000.html#1GKCM2-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Chapter 7. Composite Types"), *Composite Types*.
  prefs: []
  type: TYPE_NORMAL
