- en: Composite types
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复合类型
- en: 'Besides the types for simple values, Go also supports composite types such
    as `array`, `slice`, and `map`. These types are designed to store indexed elements
    of values of a specified type. For instance, the `metalloid` example shown previously
    makes use of a slice, which is a variable-sized array. The variable `metalloid`
    is declared as a `slice` to store a collection of the type `metalloid`. The code
    uses the literal syntax to combine the declaration and assignment of a `slice`
    of type `metalloid`:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 除了简单值的类型外，Go 还支持复合类型，如 `array`、`slice` 和 `map`。这些类型被设计用来存储指定类型的索引元素。例如，之前展示的
    `metalloid` 示例就使用了 `slice`，它是一个可变大小的数组。变量 `metalloid` 被声明为一个 `slice`，用来存储 `metalloid`
    类型的集合。代码使用字面量语法来组合 `metalloid` 类型 `slice` 的声明和赋值：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Go also supports a `struct` type which is a composite that stores named elements
    called fields as shown in the following code:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Go 还支持一种 `struct` 类型，它是一个复合类型，如以下代码所示，它存储了称为字段的命名元素：
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The previous example uses the literal syntax to declare `struct{name string;
    diameter int}` with the value `{"earth", 12742}`. You can read all about composite
    types in [Chapter 7](part0051_split_000.html#1GKCM2-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Chapter 7. Composite Types"), *Composite Types*.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的示例使用字面量语法声明了 `struct{name string; diameter int}`，其值为 `{"earth", 12742}`。你可以在[第
    7 章](part0051_split_000.html#1GKCM2-9c484ed022e64a0fb0e1aebf8e05d4fd "第 7 章。复合类型")
    *复合类型* 中了解所有关于复合类型的信息。
