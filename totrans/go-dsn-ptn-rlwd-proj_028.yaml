- en: Interfaces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go supports the notion of a programmatic interface. However, as you will see
    in [Chapter 8](part0056_split_000.html#1LCVG1-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Chapter 8. Methods, Interfaces, and Objects"), *Methods, Interfaces, and Objects*,
    the Go interface is itself a type that aggregates a set of methods that can project
    capabilities onto values of other types. Staying true to its simplistic nature,
    implementing a Go interface does not require a keyword to explicitly declare an
    interface. Instead, the type system implicitly resolves implemented interfaces
    using the methods attached to a type.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, Go includes the built-in interface called `Stringer`, defined
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any type that has the method `String()` attached, automatically implements
    the `Stringer` interface. So, modifying the definition of the type `metalloid`,
    from the previous program, to attach the method `String()` will automatically
    implement the `Stringer` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch01/metalloids2.go
  prefs: []
  type: TYPE_NORMAL
- en: 'The `String()` methods return a pre-formatted string that represents the value
    of a `metalloid`. The function `Print()`, from the standard library package `fmt`,
    will automatically call the method `String()`, if its parameter implements `stringer`.
    So, we can use this fact to print `metalloid` values as follow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Again, refer to [Chapter 8](part0056_split_000.html#1LCVG1-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Chapter 8. Methods, Interfaces, and Objects"), *Methods, Interfaces, and Objects*,
    for a thorough treatment of the topic of interfaces.
  prefs: []
  type: TYPE_NORMAL
