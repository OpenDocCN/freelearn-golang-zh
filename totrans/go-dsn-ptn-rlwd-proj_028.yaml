- en: Interfaces
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接口
- en: Go supports the notion of a programmatic interface. However, as you will see
    in [Chapter 8](part0056_split_000.html#1LCVG1-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Chapter 8. Methods, Interfaces, and Objects"), *Methods, Interfaces, and Objects*,
    the Go interface is itself a type that aggregates a set of methods that can project
    capabilities onto values of other types. Staying true to its simplistic nature,
    implementing a Go interface does not require a keyword to explicitly declare an
    interface. Instead, the type system implicitly resolves implemented interfaces
    using the methods attached to a type.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Go支持程序化接口的概念。然而，正如你将在[第8章](part0056_split_000.html#1LCVG1-9c484ed022e64a0fb0e1aebf8e05d4fd
    "第8章。方法、接口和对象")中看到的那样，*方法、接口和对象*，Go的接口本身就是一个类型，它聚合了一组可以将能力投射到其他类型值上的方法。保持其简单性，实现Go接口不需要使用关键字来显式声明接口。相反，类型系统隐式地使用附加到类型的函数来解析实现的接口。
- en: 'For instance, Go includes the built-in interface called `Stringer`, defined
    as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Go包含一个名为`Stringer`的内建接口，定义如下：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Any type that has the method `String()` attached, automatically implements
    the `Stringer` interface. So, modifying the definition of the type `metalloid`,
    from the previous program, to attach the method `String()` will automatically
    implement the `Stringer` interface:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 任何附加了`String()`方法的类型，都会自动实现`Stringer`接口。因此，将之前程序中`metalloid`类型的定义修改为附加`String()`方法，将自动实现`Stringer`接口：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: golang.fyi/ch01/metalloids2.go
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch01/metalloids2.go
- en: 'The `String()` methods return a pre-formatted string that represents the value
    of a `metalloid`. The function `Print()`, from the standard library package `fmt`,
    will automatically call the method `String()`, if its parameter implements `stringer`.
    So, we can use this fact to print `metalloid` values as follow:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`String()`方法返回一个预格式化的字符串，表示`metalloid`的值。来自标准库包`fmt`的`Print()`函数将自动调用实现了`stringer`的参数的`String()`方法。因此，我们可以利用这一事实来按如下方式打印`metalloid`值：'
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Again, refer to [Chapter 8](part0056_split_000.html#1LCVG1-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Chapter 8. Methods, Interfaces, and Objects"), *Methods, Interfaces, and Objects*,
    for a thorough treatment of the topic of interfaces.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，参考[第8章](part0056_split_000.html#1LCVG1-9c484ed022e64a0fb0e1aebf8e05d4fd "第8章。方法、接口和对象")，*方法、接口和对象*，以深入了解接口这一主题。
