- en: Concurrency and channels
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并发与通道
- en: One of the main features that has rocketed Go to its current level of adoption
    is its inherent support for simple concurrency idioms. The language uses a unit
    of concurrency known as a `goroutine`, which lets programmers structure programs
    with independent and highly concurrent code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Go语言之所以能够迅速达到当前被广泛采用的水平，其中一个主要特征是其对简单并发惯用的内在支持。该语言使用一种称为`goroutine`的并发单元，允许程序员以独立且高度并发的代码结构化程序。
- en: 'As you will see in the following example, Go also relies on a construct known
    as a channel used for both communication and coordination among independently
    running `goroutines`. This approach avoids the perilous and (sometimes brittle)
    traditional approach of thread communicating by sharing memory. Instead, Go facilitates
    the approach of sharing by communicating using channels. This is illustrated in
    the following example that uses both `goroutines` and channels as processing and
    communication primitives:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，您将看到Go语言还依赖于一种称为通道的结构，用于独立运行的`goroutine`之间的通信和协调。这种方法避免了通过共享内存进行线程通信的传统方法的风险和（有时脆弱）的缺点。相反，Go通过使用通道进行通信来促进共享。以下示例展示了如何使用`goroutine`和通道作为处理和通信原语：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch01/euler1.go
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch01/euler1.go
- en: The code in the previous example splits the work to be done between two concurrently
    running `goroutines` (declared with the `go` keyword) as annotated in the code
    comment. Each `goroutine` runs independently and uses the Go channels, `work`
    and `result`, to communicate and coordinate the calculation of the final result.
    Again, if this code does not make sense at all, rest assured, concurrency has
    the whole of [Chapter 9](part0061_split_000.html#1Q5IA1-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Chapter 9. Concurrency"), *Concurrency*, dedicated to it.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段代码示例中，将需要完成的工作分配给了两个并发运行的`goroutine`（使用`go`关键字声明），如代码注释所示。每个`goroutine`独立运行，并使用Go的通道`work`和`result`来通信和协调最终结果的计算。再次强调，如果这段代码完全看不懂，请放心，并发相关的内容在[第9章](part0061_split_000.html#1Q5IA1-9c484ed022e64a0fb0e1aebf8e05d4fd
    "第9章。并发")，专门讨论并发的章节中有详细说明。
