- en: Testing and code coverage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While other languages usually rely on third-party tools for testing, Go includes
    both a built-in API and tools designed specifically for automated testing, benchmarking,
    and code coverage. Similar to other features in Go, the test tools use simple
    conventions to automatically inspect and instrument the test functions found in
    your code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following function is a simplistic implementation of the Euclidean division
    algorithm that returns a quotient and a remainder value (as variables `q` and
    `r`) for positive integers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch01/testexample/divide.go
  prefs: []
  type: TYPE_NORMAL
- en: 'In a separate source file, we can write a test function to validate the algorithm
    by checking the remainder value returned by the tested function using the Go test
    API as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch01/testexample/divide_test.go
  prefs: []
  type: TYPE_NORMAL
- en: 'To exercise the test source code, simply run Go''s test tool as shown in the
    following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The test tool reports a summary of the test result indicating the package that
    was tested and its pass/fail outcome. The Go Toolchain comes with many more features
    designed to help programmers create testable code, including:'
  prefs: []
  type: TYPE_NORMAL
- en: Automatically instrument code to gather coverage statistics during tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating HTML reports for covered code and tested paths
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A benchmark API that lets developers collect performance metrics from tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benchmark reports with valuable metrics for detecting performance issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can read all about testing and its related tools in [Chapter 12](part0083_split_000.html#2F4UM1-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Chapter 12. Code Testing"), *Code Testing*.
  prefs: []
  type: TYPE_NORMAL
