- en: Testing and code coverage
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试和代码覆盖率
- en: While other languages usually rely on third-party tools for testing, Go includes
    both a built-in API and tools designed specifically for automated testing, benchmarking,
    and code coverage. Similar to other features in Go, the test tools use simple
    conventions to automatically inspect and instrument the test functions found in
    your code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然其他语言通常依赖于第三方工具进行测试，但Go包含内置的API和专门为自动化测试、基准测试和代码覆盖率设计的工具。与Go中的其他功能类似，测试工具使用简单的约定来自动检查和配置代码中找到的测试函数。
- en: 'The following function is a simplistic implementation of the Euclidean division
    algorithm that returns a quotient and a remainder value (as variables `q` and
    `r`) for positive integers:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的函数是对欧几里得除法算法的简单实现，它返回一个商和一个余数值（作为变量`q`和`r`）用于正整数：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch01/testexample/divide.go
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch01/testexample/divide.go
- en: 'In a separate source file, we can write a test function to validate the algorithm
    by checking the remainder value returned by the tested function using the Go test
    API as shown in the following code:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在单独的源文件中，我们可以编写一个测试函数，通过使用Go测试API检查被测试函数返回的余数值来验证算法，如下面的代码所示：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: golang.fyi/ch01/testexample/divide_test.go
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch01/testexample/divide_test.go
- en: 'To exercise the test source code, simply run Go''s test tool as shown in the
    following example:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试测试源代码，只需像以下示例中那样运行Go的测试工具：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The test tool reports a summary of the test result indicating the package that
    was tested and its pass/fail outcome. The Go Toolchain comes with many more features
    designed to help programmers create testable code, including:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 测试工具报告了测试结果的摘要，指明了被测试的包及其通过/失败结果。Go工具链附带了许多更多功能，旨在帮助程序员创建可测试的代码，包括：
- en: Automatically instrument code to gather coverage statistics during tests
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在测试期间自动收集覆盖率统计信息的代码
- en: Generating HTML reports for covered code and tested paths
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为覆盖的代码和测试路径生成HTML报告
- en: A benchmark API that lets developers collect performance metrics from tests
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个基准API，允许开发者从测试中收集性能指标
- en: Benchmark reports with valuable metrics for detecting performance issues
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基准报告包含用于检测性能问题的宝贵指标
- en: You can read all about testing and its related tools in [Chapter 12](part0083_split_000.html#2F4UM1-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Chapter 12. Code Testing"), *Code Testing*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[第12章](part0083_split_000.html#2F4UM1-9c484ed022e64a0fb0e1aebf8e05d4fd "第12章。代码测试")
    *代码测试* 中阅读有关测试及其相关工具的所有内容。
