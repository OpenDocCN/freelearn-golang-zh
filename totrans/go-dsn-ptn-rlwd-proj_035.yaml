- en: The Go Toolchain
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we end the chapter, one last aspect of Go that should be highlighted
    is its collection of tools. While some of these tools were already mentioned in
    previous sections, others are listed here for your awareness:'
  prefs: []
  type: TYPE_NORMAL
- en: '`fmt`: Reformats source code to adhere to the standard'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vet`: Reports improper usage of source code constructs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lint`: Another source code tool that reports flagrant style infractions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`goimports`: Analyzes and fixes package import references in source code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`godoc`: Generates and organizes source code documentation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`generate`: Generates Go source code from directives stored in source code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get`: Remotely retrieves and installs packages and their dependencies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`build`: Compiles code in a specified package and its dependencies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`run`: Provides the convenience of compiling and running your Go program'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`test`: Performs unit tests with support for benchmark and coverage reports'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`oracle` static analysis tool: Queries source code structures and elements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cgo`: Generates source code for interoperability between Go and C'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
