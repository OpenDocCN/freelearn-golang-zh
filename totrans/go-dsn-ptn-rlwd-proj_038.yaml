- en: The Go source file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have seen, in [Chapter 1](part0011_split_000.html#AFM61-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Chapter 1. A First Step in Go"), *A First Step in Go*, some examples of Go programs.
    In this section, we will examine the Go source file. Let us consider the following
    source code file (which prints `"Hello World"` greetings in different languages):'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Go source file](img/00004.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: golang.fyi/ch02/helloworld2.go
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical Go source file, such as the one listed earlier, can be divided into
    three main sections, illustrated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Package Clause**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The **Import Declaration**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The **Source Body**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The **package** clause indicates the name of the package this source file belongs
    to (see [Chapter 6](part0042_split_000.html#181NK2-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Chapter 6. Go Packages and Programs"), Go *Packages and Programs* for a detailed
    discussion on package organization). The **import** declaration lists any external
    package that the source code wishes to use. The Go compiler strictly enforces
    package declaration usage. It is considered an error (compilation) to include
    an unused package in your source file. The last portion of the source is considered
    the body of your source file. It is where you declare variables, constants, types,
    and functions.
  prefs: []
  type: TYPE_NORMAL
- en: All Go source files must end with the `.go` suffix. In general, you can name
    a Go source file whatever you want. Unlike Java, for instance, there is no direct
    association between a Go file name and the types it declared in its content. It
    is, however, considered good practice to name your file something indicative of
    its content.
  prefs: []
  type: TYPE_NORMAL
- en: Before we explore Go's syntax in greater detail, it is important to understand
    some basic structural elements of the language. While some of these elements are
    syntactically bolted into the language, others are simple idioms and conventions
    that you should be aware of to make your introduction to Go simple and enjoyable.
  prefs: []
  type: TYPE_NORMAL
