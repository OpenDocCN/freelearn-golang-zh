- en: Optional semicolon
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You may have noticed that Go does not require a semicolon as a statement separator.
    This is a trait borrowed from other lighter and interpreted languages. The following
    two programs are functionally equivalent. The first program uses idiomatic Go
    and omits the semicolons:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Optional semicolon](img/00005.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The second version of the program, shown as follows, uses superfluous semicolons
    to explicitly terminate its statements. While the compiler may thank you for your
    help, this is not idiomatic in Go:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Optional semicolon](img/00006.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Although semicolons in Go are optional, Go''s formal grammar still requires
    them as statement terminators. So, the Go compiler will insert semicolons at the
    end of source code lines that end with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An identifier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A literal value for string, Boolean, numeric, or complex
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A control flow directive such as break, continue, or return
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A closing parenthesis or bracket such as `)`, `}`, or `]`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The increment `++` or the decrement `--` operator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Due to these rules, the compiler enforces strict syntactical forms that heavily
    influence source code style in Go. For instance, all code blocks must start with
    an open curly `{` brace on the same line as its preceding statement. Otherwise,
    the compiler may insert the semicolon in a location that breaks the code, as shown
    in the following `if` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Moving the curly brace to the next line causes the compiler to insert the semicolon
    prematurely, which will result in the following syntax error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This is because the compiler inserted the semicolon after the `if` statement
    (`if "a"=="a";`), using the semicolon insertion rules discussed in this section.
    You can verify this by manually inserting a semicolon after the `if` condition
    statement; you will get the same error. This is an excellent place to transition
    into the next section, to discuss trailing commas in code blocks.
  prefs: []
  type: TYPE_NORMAL
