- en: Optional semicolon
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可选分号
- en: 'You may have noticed that Go does not require a semicolon as a statement separator.
    This is a trait borrowed from other lighter and interpreted languages. The following
    two programs are functionally equivalent. The first program uses idiomatic Go
    and omits the semicolons:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，Go 不需要分号作为语句分隔符。这是从其他较轻量级和解释性语言中借用来的特性。以下两个程序在功能上是等价的。第一个程序使用惯用的 Go
    语法并省略了分号：
- en: '![Optional semicolon](img/00005.jpeg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![可选分号](img/00005.jpeg)'
- en: 'The second version of the program, shown as follows, uses superfluous semicolons
    to explicitly terminate its statements. While the compiler may thank you for your
    help, this is not idiomatic in Go:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的第二版本如下所示，它使用多余的分号来显式地终止其语句。虽然编译器可能会感谢你的帮助，但这在 Go 中并不符合习惯：
- en: '![Optional semicolon](img/00006.jpeg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![可选分号](img/00006.jpeg)'
- en: 'Although semicolons in Go are optional, Go''s formal grammar still requires
    them as statement terminators. So, the Go compiler will insert semicolons at the
    end of source code lines that end with the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在 Go 中分号是可选的，但 Go 的正式语法仍然要求它们作为语句终止符。因此，Go 编译器将在以下情况结束时在源代码行末插入分号：
- en: An identifier
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标识符
- en: A literal value for string, Boolean, numeric, or complex
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串、布尔值、数值或复数的字面值
- en: A control flow directive such as break, continue, or return
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制流指令，如 break、continue 或 return
- en: A closing parenthesis or bracket such as `)`, `}`, or `]`
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关闭括号或方括号，例如 `)`、`}` 或 `]`
- en: The increment `++` or the decrement `--` operator
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增量 `++` 或减少 `--` 操作符
- en: 'Due to these rules, the compiler enforces strict syntactical forms that heavily
    influence source code style in Go. For instance, all code blocks must start with
    an open curly `{` brace on the same line as its preceding statement. Otherwise,
    the compiler may insert the semicolon in a location that breaks the code, as shown
    in the following `if` statement:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些规则，编译器在 Go 中强制执行严格的语法形式，这极大地影响了源代码的风格。例如，所有代码块都必须从与它前面的语句在同一行的开大括号 `{` 开始。否则，编译器可能会在破坏代码的位置插入分号，如下面的
    `if` 语句所示：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Moving the curly brace to the next line causes the compiler to insert the semicolon
    prematurely, which will result in the following syntax error:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 将大括号移到下一行会导致编译器提前插入分号，这将导致以下语法错误：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is because the compiler inserted the semicolon after the `if` statement
    (`if "a"=="a";`), using the semicolon insertion rules discussed in this section.
    You can verify this by manually inserting a semicolon after the `if` condition
    statement; you will get the same error. This is an excellent place to transition
    into the next section, to discuss trailing commas in code blocks.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为编译器在 `if` 语句之后插入了分号（`if "a"=="a";`），使用了本节讨论的分号插入规则。你可以通过手动在 `if` 条件语句后插入分号来验证这一点；你将得到相同的错误。这是一个很好的地方，可以过渡到下一节，讨论代码块中的尾随逗号。
