- en: Multiple lines
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多行
- en: 'Breaking up expressions into multiple lines must follow the semi-colon rules
    discussed in the previous section. Mainly, in a multi-line expression, each line
    must end with a token that prevents the premature insertion of a semi-colon, as
    illustrated in the following table. It should be noted that rows in the table
    with an invalid expression will not compile:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 将表达式拆分成多行必须遵循上一节中讨论的分号规则。主要是在多行表达式中，每一行必须以一个阻止提前插入分号的标记结束，如下表所示。需要注意的是，表中带有无效表达式的行将无法编译：
- en: '| **Expression** | **Valid** |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '| **表达式** | **有效** |'
- en: '|'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '| Yes, the `+` operator prevents a premature semi-colon from being inserted.
    |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| 是的，`+` 运算符阻止了提前插入分号。|'
- en: '|'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '| No, a semi-colon will be inserted after the first line, semantically breaking
    the line. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| 不，分号将在第一行之后插入，从语义上破坏了该行。|'
- en: '|'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '| Yes, the comma properly breaks the expression. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 是的，逗号正确地中断了表达式。|'
- en: '|'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '| Yes, the compiler inserts a semi-colon only after the last line. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 是的，编译器仅在最后一行之后插入分号。|'
- en: '|'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '| No, the `Fri` line causes a premature semi-colon to be inserted. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 不，`Fri` 行会导致提前插入分号。|'
- en: '|'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '| Yes, the `Fri` line contains a trailing comma, which causes compiler to insert
    a semi-colon at the next line. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 是的，`Fri` 行包含一个尾随逗号，这会导致编译器在下一行插入分号。|'
- en: '| `weekDays1 := []string{``"Mon", "Tue",``"Wed", "Thr",``"Fri"}` | Yes, the
    semi-colon is inserted after the line with the closing bracket. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `weekDays1 := []string{``"Mon", "Tue",``"Wed", "Thr",``"Fri"}` | 是的，分号是在带有闭括号的行之后插入的。|'
- en: You may wonder why the Go compiler puts the onus on the developer to provide
    line-break hints to indicate the end of a statement. Surely, Go designers could
    have devised an elaborate algorithm to figure this out automatically. Yes, they
    could have. However, by keeping the syntax simple and predictable, the compiler
    is able to quickly parse and compile Go source code.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想知道为什么 Go 编译器将责任放在开发者身上，要求他们提供行断点提示以指示语句的结束。当然，Go 设计者可以设计一个复杂的算法来自动解决这个问题。是的，他们可以。然而，通过保持语法简单和可预测，编译器能够快速解析和编译
    Go 源代码。
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Go toolchain includes the gofmt tool, which can be used to consistently
    apply proper formatting rules to your source code. There is also the `govet` tool,
    which goes much further by analyzing your code for structural problems with code
    elements.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Go 工具链包括 gofmt 工具，它可以用来一致地应用适当的格式化规则到你的源代码中。还有一个 `govet` 工具，它通过分析你的代码中的代码元素结构问题来做得更多。
