- en: The zero-value
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous source code shows several examples of variables being declared
    with a variety of types. Then the variables are assigned a value inside the function
    `main()`. At first glance, it would appear that these declared variables do not
    have an assigned value when they are declared. This would contradict our previous
    assertion that all Go variables are bound to a type and a value.
  prefs: []
  type: TYPE_NORMAL
- en: How can we declare a variable and not bind a value to it? During declaration
    of a variable, if a value is not provided, Go will automatically bind a default
    value (or a zero-value) to the variable for proper memory initialization (we see
    how to do both declaration and initialization in one expression later).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows Go types and their default zero-values:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Type** | **Zero-Value** |'
  prefs: []
  type: TYPE_TB
- en: '| `string` | `""` (empty string) |'
  prefs: []
  type: TYPE_TB
- en: '| Numeric - Integers: `byte`, `int`, `int8`, `int16`, `int32`, `int64`, `rune`,
    `uint`, `uint8`, `uint16`, `uint32`, `uint64`, `uintptr` | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| Numeric - Floating point: `float32`, `float64` | 0.0 |'
  prefs: []
  type: TYPE_TB
- en: '| `bool` | false |'
  prefs: []
  type: TYPE_TB
- en: '| `Array` | Each index position has a zero-value corresponding to the array''s
    element type. |'
  prefs: []
  type: TYPE_TB
- en: '| `Struct` | An empty `struct` with each member having its respective zero-value.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Other types: Interface, function, channel, slice, map, and pointer | nil
    |'
  prefs: []
  type: TYPE_TB
