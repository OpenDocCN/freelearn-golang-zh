- en: Omitting variable types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far, we have discussed what is called the long form of Go''s variable declaration
    and initialization. To make the language feel closer to its dynamically-typed
    cousins, the type specification can be omitted, as shown in the following declaration
    format:'
  prefs: []
  type: TYPE_NORMAL
- en: '*var <identifier list> = <value list or initializer expressions>*'
  prefs: []
  type: TYPE_NORMAL
- en: During compilation, the compiler infers the type of the variable based on the
    assigned value or the initializer expression on the right-hand side of the equal
    sign, as shown in the following example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch02/vardec3.go
  prefs: []
  type: TYPE_NORMAL
- en: 'As stated earlier, when a variable is assigned a value, it must receive a type
    along with that value. When the type of the variable is omitted, the type information
    is deduced from the assigned value or the returned value of an expression. The
    following table shows the type that is inferred given a literal value:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Literal value** | **Inferred type** |'
  prefs: []
  type: TYPE_TB
- en: '| Double- or single-quoted (raw) text: `"Planet Mars"``"All planets revolve
    around the Sun."` | `string` |'
  prefs: []
  type: TYPE_TB
- en: '| Integers:`-76`0`1244``1840` | `int` |'
  prefs: []
  type: TYPE_TB
- en: '| Decimals:`-0.25``4.0``3.1e4``7e-12` | `float64` |'
  prefs: []
  type: TYPE_TB
- en: '| Complex numbers:`-5.0i``3i``(0+4i)` | `complex128` |'
  prefs: []
  type: TYPE_TB
- en: '| Booleans:`true``false` | `bool` |'
  prefs: []
  type: TYPE_TB
- en: '| Array values:`[2]int{-76, 8080}` | The `array` type defined in the literal
    value. In this case it is: `[2]int` |'
  prefs: []
  type: TYPE_TB
- en: '| Map values:`map[string]int{``  "Sun": 685800,``  "Earth": 6378,``  "Mars":
    3396,``}` | The map type defined in the literal value. In this case it is: `map[string]int`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Slice values:`[]int{-76, 0, 1244, 1840}` | The `slice` type defined in the
    literal value:`[]int` |'
  prefs: []
  type: TYPE_TB
- en: '| Struct values:`struct{``  name string``  diameter int}``{``  "Mars", 3396,``}`
    | A `struct` type as defined in the literal value. In this case the type is:`struct{name
    string; diameter int}` |'
  prefs: []
  type: TYPE_TB
- en: '| Function values:`var sqr = func (v int)   int {``  return v * v``}` | The
    function type defined in the function definition literal. In this `case`, `variable``sqr`
    will have type:`func (v int) int` |'
  prefs: []
  type: TYPE_TB
