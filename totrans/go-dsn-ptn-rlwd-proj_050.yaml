- en: Omitting variable types
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 省略变量类型
- en: 'So far, we have discussed what is called the long form of Go''s variable declaration
    and initialization. To make the language feel closer to its dynamically-typed
    cousins, the type specification can be omitted, as shown in the following declaration
    format:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了所谓的Go变量声明和初始化的长格式。为了使语言感觉更接近它的动态类型近亲，可以省略类型指定，如下面的声明格式所示：
- en: '*var <identifier list> = <value list or initializer expressions>*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*var <标识符列表> = <值列表或初始化表达式>*'
- en: During compilation, the compiler infers the type of the variable based on the
    assigned value or the initializer expression on the right-hand side of the equal
    sign, as shown in the following example.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译过程中，编译器根据等号右侧分配的值或初始化表达式推断变量的类型，如下面的示例所示。
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch02/vardec3.go
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch02/vardec3.go
- en: 'As stated earlier, when a variable is assigned a value, it must receive a type
    along with that value. When the type of the variable is omitted, the type information
    is deduced from the assigned value or the returned value of an expression. The
    following table shows the type that is inferred given a literal value:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，当一个变量被赋予一个值时，它必须与该值一起接收一个类型。当省略变量的类型时，类型信息是从分配的值或表达式的返回值中推断出来的。以下表格显示了给定字面值时推断出的类型：
- en: '| **Literal value** | **Inferred type** |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| **字面值** | **推断类型** |'
- en: '| Double- or single-quoted (raw) text: `"Planet Mars"``"All planets revolve
    around the Sun."` | `string` |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| 双引号或单引号（原始）文本: `"火星"` `"所有行星都围绕太阳旋转。"` | `string` |'
- en: '| Integers:`-76`0`1244``1840` | `int` |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| 整数:`-76` `0` `1244` `1840` | `int` |'
- en: '| Decimals:`-0.25``4.0``3.1e4``7e-12` | `float64` |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 小数:`-0.25` `4.0` `3.1e4` `7e-12` | `float64` |'
- en: '| Complex numbers:`-5.0i``3i``(0+4i)` | `complex128` |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 复数:`-5.0i` `3i` `(0+4i)` | `complex128` |'
- en: '| Booleans:`true``false` | `bool` |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 布尔值:`true` `false` | `bool` |'
- en: '| Array values:`[2]int{-76, 8080}` | The `array` type defined in the literal
    value. In this case it is: `[2]int` |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 数组值:`[2]int{-76, 8080}` | 在字面值中定义的`array`类型。在这种情况下，它是：`[2]int` |'
- en: '| Map values:`map[string]int{``  "Sun": 685800,``  "Earth": 6378,``  "Mars":
    3396,``}` | The map type defined in the literal value. In this case it is: `map[string]int`
    |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 映射值:`map[string]int{ "Sun": 685800, "Earth": 6378, "Mars": 3396, }` | 在字面值中定义的映射类型。在这种情况下，它是：`map[string]int`
    |'
- en: '| Slice values:`[]int{-76, 0, 1244, 1840}` | The `slice` type defined in the
    literal value:`[]int` |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 切片值:`[]int{-76, 0, 1244, 1840}` | 在字面值中定义的`slice`类型：`[]int` |'
- en: '| Struct values:`struct{``  name string``  diameter int}``{``  "Mars", 3396,``}`
    | A `struct` type as defined in the literal value. In this case the type is:`struct{name
    string; diameter int}` |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 结构体值:`struct{ name string; diameter int}` `{ "火星", 3396, }` | 在字面值中定义的结构体类型。在这种情况下，类型是：`struct{name
    string; diameter int}` |'
- en: '| Function values:`var sqr = func (v int)   int {``  return v * v``}` | The
    function type defined in the function definition literal. In this `case`, `variable``sqr`
    will have type:`func (v int) int` |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 函数值:`var sqr = func (v int) int { return v * v }` | 在函数定义字面值中定义的函数类型。在这个`case`中，`变量`sqr`将具有类型：`func
    (v int) int` |'
