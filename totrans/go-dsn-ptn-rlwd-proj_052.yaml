- en: Restrictions for short variable declaration
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 短变量声明的限制
- en: 'For convenience, the short form of the variable declaration does come with
    several restrictions that you should be aware of to avoid confusion:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，变量声明的简短形式确实伴随着一些限制，你应该注意这些限制以避免混淆：
- en: Firstly, it can only be used within a function block
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，它只能在函数块内部使用
- en: The assignment operator `:=`, declares variable and assign values
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 赋值运算符 `:=` 用于声明变量并赋值
- en: '`:=` cannot be used to update a previously declared variable'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:=` 不能用于更新之前已声明的变量'
- en: Updates to variables must be done with an equal sign
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量的更新必须使用等号
- en: While these restrictions may have their justifications rooted in the simplicity
    of Go's grammar, they are generally viewed as a source of confusion for newcomers
    to the language. For instance, the colon-equal operator cannot be used with package-level
    variables assignments. Developers learning Go may find it compelling to use the
    assignment operator as a way to update a variable, but that would cause a compilation
    error.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这些限制可能有其合理之处，根植于Go语法简单性，但它们通常被视为新接触这门语言的人的困惑之源。例如，冒号等于运算符不能用于包级别变量的赋值。学习Go的开发者可能会觉得使用赋值运算符来更新变量很有吸引力，但这样做会导致编译错误。
