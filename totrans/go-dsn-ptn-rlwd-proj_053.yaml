- en: Variable scope and visibility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go uses lexical scoping based on code blocks to determine the visibility of
    variables within a package. Depending on the location where a variable is declared,
    within the source text, will determine its scope. As a general rule, a variable
    is only accessible from within the block where it is declared and visible to all
    nested sub-blocks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot illustrates the scope of several variables declared
    within a source text. Each variable declaration is marked with its scope (`package`,
    `function`, `for` loop, and `if...else` block):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Variable scope and visibility](img/00007.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: golang.fyi/ch02/makenums.go
  prefs: []
  type: TYPE_NORMAL
- en: As explained earlier, variable visibility works top-down. Variables with package
    scope, such as `mapFile` and `numbersFile`, are globally visible to all other
    elements in the package. Moving down the scope ladder, function-block variables
    such as `data` and `err` are visible to all elements in the function and including
    sub-blocks. Variables `i` and `b` in the inner `for` loop block are only visible
    within that block. Once the loop is done, `i` and `b` would go out of scope.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One source of confusion to newcomers to Go is the visibility of package-scoped
    variables. When a variable is declared at package level (outside of a function
    or method block), it is globally visible to the entire package, not just to the
    source file where the variable is declared. This means a package-scoped variable
    identifier can only be declared once in a group of files that make up a package,
    a fact that may not be obvious to developers starting out with Go. Refer to [Chapter
    6](part0042_split_000.html#181NK2-9c484ed022e64a0fb0e1aebf8e05d4fd "Chapter 6. Go
    Packages and Programs"), *Go Packages and Programs*, for details on package organization.
  prefs: []
  type: TYPE_NORMAL
