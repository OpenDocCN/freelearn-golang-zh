- en: Variable scope and visibility
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量作用域和可见性
- en: Go uses lexical scoping based on code blocks to determine the visibility of
    variables within a package. Depending on the location where a variable is declared,
    within the source text, will determine its scope. As a general rule, a variable
    is only accessible from within the block where it is declared and visible to all
    nested sub-blocks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Go语言使用基于代码块的范围来确定包内变量的可见性。根据变量在源代码中的声明位置，将决定其作用域。一般来说，变量只能在其声明块内部访问，并且对所有嵌套的子块可见。
- en: 'The following screenshot illustrates the scope of several variables declared
    within a source text. Each variable declaration is marked with its scope (`package`,
    `function`, `for` loop, and `if...else` block):'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了在源代码中声明的几个变量的作用域。每个变量声明都标记了其作用域（`package`、`function`、`for`循环和`if...else`块）：
- en: '![Variable scope and visibility](img/00007.jpeg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![变量作用域和可见性](img/00007.jpeg)'
- en: golang.fyi/ch02/makenums.go
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch02/makenums.go
- en: As explained earlier, variable visibility works top-down. Variables with package
    scope, such as `mapFile` and `numbersFile`, are globally visible to all other
    elements in the package. Moving down the scope ladder, function-block variables
    such as `data` and `err` are visible to all elements in the function and including
    sub-blocks. Variables `i` and `b` in the inner `for` loop block are only visible
    within that block. Once the loop is done, `i` and `b` would go out of scope.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，变量可见性是自顶向下的。具有包作用域的变量，如`mapFile`和`numbersFile`，对包中的所有其他元素全局可见。沿着作用域层次结构向下移动，函数块变量如`data`和`err`对函数中的所有元素以及子块可见。内层`for`循环块中的变量`i`和`b`仅在该块内部可见。一旦循环完成，`i`和`b`就会超出作用域。
- en: Note
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: One source of confusion to newcomers to Go is the visibility of package-scoped
    variables. When a variable is declared at package level (outside of a function
    or method block), it is globally visible to the entire package, not just to the
    source file where the variable is declared. This means a package-scoped variable
    identifier can only be declared once in a group of files that make up a package,
    a fact that may not be obvious to developers starting out with Go. Refer to [Chapter
    6](part0042_split_000.html#181NK2-9c484ed022e64a0fb0e1aebf8e05d4fd "Chapter 6. Go
    Packages and Programs"), *Go Packages and Programs*, for details on package organization.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Go语言的新手来说，包作用域变量的可见性可能会引起混淆。当一个变量在包级别声明（在函数或方法块外部），它对整个包全局可见，而不仅仅是声明变量的源文件。这意味着包作用域的变量标识符在一个包的组成文件组中只能声明一次，这对于刚开始使用Go的开发者可能并不明显。有关包组织的详细信息，请参阅[第6章](part0042_split_000.html#181NK2-9c484ed022e64a0fb0e1aebf8e05d4fd
    "第6章。Go包和程序")，*Go包和程序*。
