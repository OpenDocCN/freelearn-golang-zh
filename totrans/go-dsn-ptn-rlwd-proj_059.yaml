- en: Assigning untyped constants
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Untyped constant values are of limited use until they are assigned to variables,
    used as function parameters, or are part of an expression assigned to a variable.
    In a strongly-typed language like Go, this means there is a potential for some
    type adjustment to ensure that the value stored in the constant can be properly
    assigned to the target variable. One advantage of using untyped constants is that
    the type system relaxes the strict application of type checking. An untyped constant
    can be assigned to different, though compatible, types of different precision
    without any complaint from the compiler, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'While the type system will accommodate the assignment of `m2` to variables
    of different precision, the resulting assignment is adjusted to fit the variable
    type, as noted in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'What about variable `u3`, which is itself an untyped variable? Since `u3` does
    not have a specified type, it will rely on type inference from the constant value
    to receive a type assignment. Recall from the discussion in the section *Omitting
    Variable Types* earlier, that constant literals are mapped to basic Go types based
    on their textual representations. Since constant `m2` represents a decimal value,
    the compiler will infer its default to be a `float64`, which will be automatically
    assigned to variable `u3`, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, Go's treatment of untyped raw constant literals increases the
    language's usability by automatically applying some simple, but effective, type
    inference rules without sacrificing type-safety. Unlike other languages, developers
    do not have to explicitly specify the type in the value literal or perform some
    sort of typecast to make this work.
  prefs: []
  type: TYPE_NORMAL
