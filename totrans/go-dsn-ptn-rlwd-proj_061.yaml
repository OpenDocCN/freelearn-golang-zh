- en: Constant enumeration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One interesting usage of constants is to create enumerated values. Using the
    declaration block format (shown in the preceding section), you can easily create
    numerically increasing enumerated integer values. Simply assign the pre-declared
    constant value `iota` to a constant identifier in the declaration block, as shown
    in the following code sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch02/enum0.go
  prefs: []
  type: TYPE_NORMAL
- en: 'The compiler will then automatically do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Declare each member in the block as an untyped integer constant value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initialize `iota` with a value of zero
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assign `iota`, or zero, to the first constant member (`StarHyperGiant`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each subsequent constant is assigned an `int` value increased by one
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So the previous list of constants would be assigned a sequence of values going
    from zero to nine. Whenever `const` appears as a declaration block, it resets
    the counter to zero. In the following snippet, each set of constants is enumerated
    from zero to four separately:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch02/enum1.go
  prefs: []
  type: TYPE_NORMAL
