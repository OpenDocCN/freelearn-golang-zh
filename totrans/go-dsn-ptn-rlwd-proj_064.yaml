- en: Skipping enumerated values
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跳过枚举值
- en: 'When working with enumerated constants, you may want to throw away certain
    values that should not be part of the enumeration. This can be accomplished by
    assigning iota to the blank identifier at the desired position in the enumeration.
    For instance, the following skips the values 0 and `64`:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理枚举常量时，你可能希望丢弃某些不应该包含在枚举中的值。这可以通过在枚举中所需位置将iota赋值给空标识符来实现。例如，以下代码跳过了值0和`64`：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch02/enum3.go
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch02/enum3.go
- en: 'Since we skip `iota` position `0`, the first assigned constant value is at
    position `1`. This results in expression `1 << iota` resolving to `1 << 1 = 2`.
    The same is done at the sixth position, where expression `1 << iota` returns `64`.
    That value will be skipped and not assigned to any constant, as shown in the following
    output:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们跳过了`iota`位置`0`，第一个分配的常量值位于位置`1`。这导致表达式`1 << iota`解析为`1 << 1 = 2`。同样的操作在第六个位置进行，此时表达式`1
    << iota`返回`64`。该值将被跳过，不会分配给任何常量，如下面的输出所示：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
