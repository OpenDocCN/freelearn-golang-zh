- en: Bitwise operators
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 位运算符
- en: 'Go includes full support for manipulating values at their most elemental forms.
    The following summarizes bitwise operators supported by Go:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Go 包含了对操作最基本形式值的完全支持。以下总结了 Go 支持的位运算符：
- en: '| **Operator** | **Description** |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '| **运算符** | **描述** |'
- en: '| `&` | Bitwise AND |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| `&` | 位与 |'
- en: '| `&#124;` | Bitwise OR |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| `|` | 位或 |'
- en: '| `a ^ b` | Bitwise XOR |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| `a ^ b` | 位异或 |'
- en: '| `&^` | Bitwise AND NOT |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| `&^` | 位与非 |'
- en: '| `^a` | Unary bitwise complement |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| `^a` | 一元位取反 |'
- en: '| `<<` | Left-shift |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| `<<` | 左移 |'
- en: '| `>>` | Right-shift |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| `>>` | 右移 |'
- en: The right operand, in a shift operation, must be an unsigned integer or be able
    to be converted to an unsigned value. When the left operand is an untyped constant
    value, the compiler must be able to derive a signed integer type from its value
    or it will fail compilation.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在位移操作中，右操作数必须是无符号整数或能够转换为无符号值。当左操作数是无类型的常量值时，编译器必须能够从其值推导出有符号整数类型，否则将无法编译。
- en: The shift operators in Go also support both arithmetic and logical shifts. If
    the left operand is unsigned, Go automatically applies logical shift, whereas
    if it is signed, Go will apply an arithmetic shift.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Go 中的位移运算符也支持算术位移和逻辑位移。如果左操作数是无符号整数，Go 会自动应用逻辑位移；如果它是带符号的，Go 将应用算术位移。
