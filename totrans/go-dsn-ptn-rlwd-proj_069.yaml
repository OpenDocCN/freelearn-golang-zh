- en: Bitwise operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Go includes full support for manipulating values at their most elemental forms.
    The following summarizes bitwise operators supported by Go:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Operator** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `&` | Bitwise AND |'
  prefs: []
  type: TYPE_TB
- en: '| `&#124;` | Bitwise OR |'
  prefs: []
  type: TYPE_TB
- en: '| `a ^ b` | Bitwise XOR |'
  prefs: []
  type: TYPE_TB
- en: '| `&^` | Bitwise AND NOT |'
  prefs: []
  type: TYPE_TB
- en: '| `^a` | Unary bitwise complement |'
  prefs: []
  type: TYPE_TB
- en: '| `<<` | Left-shift |'
  prefs: []
  type: TYPE_TB
- en: '| `>>` | Right-shift |'
  prefs: []
  type: TYPE_TB
- en: The right operand, in a shift operation, must be an unsigned integer or be able
    to be converted to an unsigned value. When the left operand is an untyped constant
    value, the compiler must be able to derive a signed integer type from its value
    or it will fail compilation.
  prefs: []
  type: TYPE_NORMAL
- en: The shift operators in Go also support both arithmetic and logical shifts. If
    the left operand is unsigned, Go automatically applies logical shift, whereas
    if it is signed, Go will apply an arithmetic shift.
  prefs: []
  type: TYPE_NORMAL
