- en: The if statement
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`if` 语句'
- en: 'The `if` statement, in Go, borrows its basic structural form from other C-like
    languages. The statement conditionally executes a code block when the Boolean
    expression that follows the `if` keyword evaluates to `true`, as illustrated in
    the following abbreviated program, which displays information about world currencies:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Go 中，`if` 语句借鉴了其基本结构形式来自其他 C 类语言。当跟在 `if` 关键字后面的布尔表达式评估为 `true` 时，该语句条件性地执行代码块，如下面的简化程序所示，该程序显示有关世界货币的信息：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch03/ifstmt.go
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch03/ifstmt.go
- en: 'The `if` statement in Go looks similar to other languages. However, it sheds
    a few syntactic rules, while enforcing new ones:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Go 中的 `if` 语句看起来与其他语言类似。然而，它省略了一些语法规则，同时强制执行新的规则：
- en: 'The parentheses around the test expression are not necessary. While the following
    `if` statement will compile, it is not idiomatic:'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试表达式的括号不是必需的。虽然以下 `if` 语句可以编译，但它不符合习惯用法：
- en: '[PRE1]'
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Use the following instead:'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下代码代替：
- en: '[PRE2]'
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The curly braces for the code block are always required. The following snippet
    will not compile:'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码块的括号总是必需的。以下代码片段将无法编译：
- en: '[PRE3]'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'However, this will compile:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然而，这将编译：
- en: '[PRE4]'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It is idiomatic, however, to write the `if` statement on multiple lines (no
    matter how simple the statement block may be). This encourages good style and
    clarity. The following snippet will compile with no issues:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然而，将 `if` 语句写在不同行上（无论语句块多么简单）是一种习惯用法。这有助于保持良好的风格和清晰度。以下代码片段可以无问题编译：
- en: '[PRE5]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'However, the preferred idiomatic layout for the statement is to use multiple
    lines, as follows:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然而，该语句的推荐习惯用法布局是使用多行，如下所示：
- en: '[PRE6]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `if` statement may include an optional `else` block, which is executed
    when the expression in the `if` block evaluates to `false`. The code in the `else`
    block must be wrapped in curly braces using multiple lines, as shown in the following
    snippet:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if` 语句可以包含一个可选的 `else` 块，当 `if` 块中的表达式评估为 `false` 时执行。`else` 块中的代码必须使用多行括在花括号中，如下面的代码片段所示：'
- en: '[PRE7]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `else` keyword may be immediately followed by another `if` statement forming
    an `if...else...if` chain, as used in the function `printCurr()` from the source
    code listed earlier:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`else` 关键字可以紧接着另一个 `if` 语句形成 `if...else...if` 链，正如在前面列出的源代码中的 `printCurr()`
    函数中所使用的那样：'
- en: '[PRE8]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `if...else...if` statement chain can grow as long as needed and may be
    terminated by an optional `else` statement to express all other untested conditions.
    Again, this is done in the `printCurr()` function, which tests four conditions
    using the `if...else...if` blocks. Lastly, it includes an `else` statement block
    to catch any other untested conditions:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`if...else...if` 语句链可以按需增长，并且可以通过可选的 `else` 语句来终止，以表达所有其他未测试的条件。再次强调，这是在 `printCurr()`
    函数中完成的，该函数使用 `if...else...if` 块测试四个条件。最后，它还包括一个 `else` 语句块来捕获任何其他未测试的条件：'
- en: '[PRE9]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In Go, however, the idiomatic, and cleaner, way to write such a deep `if...else...if`
    code block is to use an expressionless `switch` statement. This is covered later,
    in the *Switch statement* section.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在 Go 中，编写这样的深层 `if...else...if` 代码块的习惯用法和更简洁的方法是使用无表达式的 `switch` 语句。这将在后面的
    *Switch 语句* 部分中介绍。
