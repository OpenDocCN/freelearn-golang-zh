- en: The if statement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `if` statement, in Go, borrows its basic structural form from other C-like
    languages. The statement conditionally executes a code block when the Boolean
    expression that follows the `if` keyword evaluates to `true`, as illustrated in
    the following abbreviated program, which displays information about world currencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch03/ifstmt.go
  prefs: []
  type: TYPE_NORMAL
- en: 'The `if` statement in Go looks similar to other languages. However, it sheds
    a few syntactic rules, while enforcing new ones:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The parentheses around the test expression are not necessary. While the following
    `if` statement will compile, it is not idiomatic:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the following instead:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The curly braces for the code block are always required. The following snippet
    will not compile:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'However, this will compile:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It is idiomatic, however, to write the `if` statement on multiple lines (no
    matter how simple the statement block may be). This encourages good style and
    clarity. The following snippet will compile with no issues:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'However, the preferred idiomatic layout for the statement is to use multiple
    lines, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `if` statement may include an optional `else` block, which is executed
    when the expression in the `if` block evaluates to `false`. The code in the `else`
    block must be wrapped in curly braces using multiple lines, as shown in the following
    snippet:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `else` keyword may be immediately followed by another `if` statement forming
    an `if...else...if` chain, as used in the function `printCurr()` from the source
    code listed earlier:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `if...else...if` statement chain can grow as long as needed and may be
    terminated by an optional `else` statement to express all other untested conditions.
    Again, this is done in the `printCurr()` function, which tests four conditions
    using the `if...else...if` blocks. Lastly, it includes an `else` statement block
    to catch any other untested conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In Go, however, the idiomatic, and cleaner, way to write such a deep `if...else...if`
    code block is to use an expressionless `switch` statement. This is covered later,
    in the *Switch statement* section.
  prefs: []
  type: TYPE_NORMAL
