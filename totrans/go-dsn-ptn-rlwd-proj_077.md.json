["```go\nimport \"fmt\" \n\ntype Curr struct { \n  Currency string \n  Name     string \n  Country  string \n  Number   int \n} \n\nvar currencies = []Curr{ \n  Curr{\"DZD\", \"Algerian Dinar\", \"Algeria\", 12}, \n  Curr{\"AUD\", \"Australian Dollar\", \"Australia\", 36}, \n  Curr{\"EUR\", \"Euro\", \"Belgium\", 978}, \n  Curr{\"CLP\", \"Chilean Peso\", \"Chile\", 152}, \n  Curr{\"EUR\", \"Euro\", \"Greece\", 978}, \n  Curr{\"HTG\", \"Gourde\", \"Haiti\", 332}, \n  ... \n} \n\nfunc isDollar(curr Curr) bool { \n  var bool result \n  switch curr { \n  default: \n    result = false \n  case Curr{\"AUD\", \"Australian Dollar\", \"Australia\", 36}: \n    result = true \n  case Curr{\"HKD\", \"Hong Kong Dollar\", \"Hong Koong\", 344}: \n    result = true \n  case Curr{\"USD\", \"US Dollar\", \"United States\", 840}: \n    result = true \n  } \n  return result \n} \nfunc isDollar2(curr Curr) bool { \n  dollars := []Curr{currencies[2], currencies[6], currencies[9]} \n  switch curr { \n  default: \n    return false \n  case dollars[0]: \n    fallthrough \n  case dollars[1]: \n    fallthrough \n  case dollars[2]: \n    return true \n  } \n  return false \n} \n\nfunc isEuro(curr Curr) bool { \n  switch curr { \n  case currencies[2], currencies[4], currencies[10]: \n    return true \n  default: \n    return false \n  } \n} \n\nfunc main() { \n  curr := Curr{\"EUR\", \"Euro\", \"Italy\", 978} \n  if isDollar(curr) { \n    fmt.Printf(\"%+v is Dollar currency\\n\", curr) \n  } else if isEuro(curr) { \n    fmt.Printf(\"%+v is Euro currency\\n\", curr) \n  } else { \n    fmt.Println(\"Currency is not Dollar or Euro\") \n  } \n  dol := Curr{\"HKD\", \"Hong Kong Dollar\", \"Hong Koong\", 344} \n  if isDollar2(dol) { \n    fmt.Println(\"Dollar currency found:\", dol) \n  } \n} \n\n```"]