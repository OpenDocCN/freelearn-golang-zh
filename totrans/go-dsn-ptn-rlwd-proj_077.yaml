- en: Switch statements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go also supports a `switch` statement similar to that found in other languages
    such as, C or Java. The `switch` statement in Go achieves multi-way branching
    by evaluating values or expressions from `case` clauses, as shown in the following,
    abbreviated, source code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch03/switchstmt.go
  prefs: []
  type: TYPE_NORMAL
- en: 'The `switch` statement in Go has some interesting properties and rules that
    make it easy to use and reason about:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Semantically, Go''s `switch` statement can be used in two contexts:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An expression`switch` statement
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A type`switch` statement
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `break` statement can be used to escape out of a switch code block early.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `switch` statement can include a default case when no other case expressions
    evaluate to a match. There can only be one default case and it may be placed anywhere
    within the switch block.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
