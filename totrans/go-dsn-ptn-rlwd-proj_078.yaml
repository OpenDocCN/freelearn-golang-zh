- en: Using expression switches
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用表达式切换
- en: 'Expression switches are flexible and can be used in many contexts where control
    flow of a program needs to follow multiple path. An expression switch supports
    many attributes, as outlined in the following bullets:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式切换非常灵活，可以在许多需要程序控制流遵循多个路径的上下文中使用。表达式切换支持许多属性，如下列要点所述：
- en: 'Expression switches can test values of any types. For instance, the following
    code snippet (from the previous program listing) tests variable `Curr` of type
    `struct`:'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表达式切换可以测试任何类型的值。例如，以下代码片段（来自上一个程序列表）测试了类型为`struct`的变量`Curr`：
- en: '[PRE0]'
  id: totrans-3
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The expressions in `case` clauses are evaluated from left to right, top to bottom,
    until a value (or expression) is found that is equal to that of the `switch` expression.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`case`子句中的表达式是从左到右、从上到下评估的，直到找到一个与`switch`表达式的值相等的值（或表达式）。'
- en: Upon encountering the first case that matches the `switch` expression, the program
    will execute the statements for the `case` block and then immediately exit the
    `switch` block. Unlike other languages, the Go `case` statement does not need
    to use a break to avoid falling through the next case (see the *Fallthrough cases*
    section). For instance, calling `isDollar(Curr{"HKD", "Hong Kong Dollar", "Hong
    Kong", 344})` will match the second `case` statement in the preceding function.
    The code will set the result to `true` and exit the `switch` code block immediately.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当程序遇到第一个与`switch`表达式匹配的`case`时，程序将执行`case`块的语句，然后立即退出`switch`块。与其它语言不同，Go的`case`语句不需要使用`break`来避免跌入下一个`case`（请参阅*跌入下一个case*部分）。例如，调用`isDollar(Curr{"HKD",
    "Hong Kong Dollar", "Hong Kong", 344})`将匹配前面函数中的第二个`case`语句。代码将结果设置为`true`并立即退出`switch`代码块。
- en: '`Case` clauses can have multiple values (or expressions) separated by commas
    with a logical `OR` operator implied between them. For instance, in the following
    snippet, the `switch` expression `curr` is tested against values `currencies[2]`,
    `currencies[4]`, or `currencies[10]`, using one case clause until a match is found:'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`case`子句可以有多个值（或表达式），它们由逗号分隔，并且它们之间隐含着逻辑`OR`运算符。例如，在以下片段中，`switch`表达式`curr`被测试与值`currencies[2]`、`currencies[4]`或`currencies[10]`进行比较，使用一个`case`子句直到找到匹配项：'
- en: '[PRE1]'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `switch` statement is the cleaner and preferred idiomatic approach to writing
    complex conditional statements in Go. This is evident when the preceding snippet
    is compared to the following, which does the same comparison using `if` statements:'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`switch`语句是编写Go语言中复杂条件语句的更简洁和首选的惯用方法。这可以从与以下使用`if`语句执行相同比较的代码片段的比较中看出：'
- en: '[PRE2]'
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
