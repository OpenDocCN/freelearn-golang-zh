- en: Expressionless switches
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无表情的开关
- en: 'Go supports a form of the `switch` statement that does not specify an expression.
    In this format, each `case` expression must evaluate to a Boolean value `true`.
    The following abbreviated source code illustrates the uses of an expressionless
    `switch` statement, as listed in function `find()`. The function loops through
    the slice of `Curr` values to search for a match based on field values in the
    `struct` function that''s passed in:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Go 支持一种不指定表达式的 `switch` 语句。在这种格式中，每个 `case` 表达式必须评估为布尔值 `true`。以下简化的源代码展示了无表达式的
    `switch` 语句的使用，如函数 `find()` 中所示。该函数遍历 `Curr` 值的切片，根据传入的 `struct` 函数中的字段值来搜索匹配项：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch03/switchstmt2.go
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch03/switchstmt2.go
- en: 'Notice in the previous example, the `switch` statement in function `find()`
    does not include an expression. Each `case` expression is separated by a comma
    and must be evaluated to a Boolean value with an implied `OR` operator between
    each. The previous `switch` statement is equivalent to the following use of an
    `if` statement to achieve the same logic:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在先前的例子中，函数 `find()` 中的 `switch` 语句没有包含表达式。每个 `case` 表达式之间用逗号分隔，并且必须评估为布尔值，每个
    `case` 表达式之间隐含一个 `OR` 操作符。先前的 `switch` 语句等价于以下使用 `if` 语句实现相同逻辑的示例：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
