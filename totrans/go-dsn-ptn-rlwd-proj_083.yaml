- en: The for statements
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: for语句
- en: 'As a language related to the C-family, Go also supports `for` loop style control
    structures. However, as you may have come to expect by now, Go''s `for` statements
    work interestingly differently and simply. The `for` statement in Go supports
    four distinct idioms, as summarized in the following table:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 作为与C家族相关的语言，Go也支持`for`循环风格的控制结构。然而，正如你现在可能已经预料到的，Go的`for`语句工作起来非常有趣且简单。Go中的`for`语句支持四种不同的惯用法，如下表所示：
- en: '| **For Statement** | **Usage** |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '| **for语句** | **用法** |'
- en: '| For condition | Used to semantically replace `while` and `do...while` loops:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '| 条件for | 用于在语义上替换`while`和`do...while`循环：'
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '|'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Infinite loop | The conditional expression may be omitted to create an infinite
    loop:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '| 无限循环 | 可以省略条件表达式以创建无限循环：'
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '|'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Traditional | This is the traditional form of the C-family `for` loop with
    the initializer, test, and update clauses:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '| 传统 | 这是C家族`for`循环的传统形式，包含初始化、测试和更新子句：'
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '|'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| For range | Used to iterate over an expression representing a collection
    of items stored in an array, string (array of rune), slice, map, and channel:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '| 范围for | 用于遍历表示存储在数组、字符串（rune数组）、切片、映射和通道中的项目集合的表达式：'
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '|'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Notice, as with all other control statements in Go, the `for` statements do
    not use parentheses around their expressions. All statements for the loop code
    block must be enclosed within curly brackets or the compiler will produce an error.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，与Go中的所有其他控制语句一样，`for`语句在其表达式周围不使用括号。循环代码块中的所有语句都必须包含在大括号内，否则编译器将产生错误。
