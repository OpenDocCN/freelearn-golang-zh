- en: For condition
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 条件为
- en: 'The `for` condition uses a construct that is semantically equivalent to the
    `while` loop found in other languages. It uses the keyword `for`, followed by
    a Boolean expression that allows the loop to proceed as long as it is evaluated
    to true. The following abbreviated source listing shows an example of this form
    of the `for` loop:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '`for` 条件使用了一种在其它语言中找到的 `while` 循环的语义等效结构。它使用关键字 `for`，后跟一个布尔表达式，只要该表达式评估为真，循环就会继续进行。以下简化的源代码列表展示了这种
    `for` 循环的示例：'
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch03/forstmt.go
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch03/forstmt.go
- en: The `for` statement, in function `listCurrs()`, iterates as long as the conditional
    expression `i < len(currencencies)` returns `true`. Care must be taken to ensure
    the value of `i` is updated with each iteration to avoid creating an accidental
    infinite loop.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数 `listCurrs()` 中，`for` 语句会在条件表达式 `i < len(currencencies)` 返回 `true` 时持续迭代。必须注意确保每次迭代后
    `i` 的值都得到更新，以避免意外创建无限循环。
