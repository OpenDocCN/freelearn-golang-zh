["```go\nsortByNumber:\n```", "```go\ntype Curr struct {  \n  Currency string  \n  Name     string  \n  Country  string  \n  Number   int  \n}  \n\nvar currencies = []Curr{  \n  Curr{\"KES\", \"Kenyan Shilling\", \"Kenya\", 404},  \n  Curr{\"AUD\", \"Australian Dollar\", \"Australia\", 36},  \n... \n} \n\nfunc sortByNumber() {  \n  N := len(currencies)  \n  for i := 0; i < N-1; i++ {  \n     currMin := i  \n     for k := i + 1; k < N; k++ {  \n    if currencies[k].Number < currencies[currMin].Number {  \n         currMin = k  \n    }  \n     }  \n     // swap  \n     if currMin != i {  \n        temp := currencies[i]  \n    currencies[i] = currencies[currMin]  \n    currencies[currMin] = temp  \n     } \n  }  \n} \n\n```", "```go\nk:=initialize()\nfor ; k < 10; \n++{\n...\n}\n```", "```go\nfor k:=0; k < 10;{\n...\n}\n```", "```go\nfor ; k < 10;{\n...\n}\n```", "```go\nfor k:=0; ;k++{\n...\n}\n```", "```go\nfor ; ;{ ... }\n```", "```go\nimport ( \n  \"fmt\" \n  \"math/rand\" \n) \n\nvar list1 = []string{ \n\"break\", \"lake\", \"go\",  \n\"right\", \"strong\",  \n\"kite\", \"hello\"}  \n\nvar list2 = []string{ \n\"fix\", \"river\", \"stop\",  \n\"left\", \"weak\", \"flight\",  \n\"bye\"}  \n\nfunc main() {  \n  rand.Seed(31)  \n  for w1, w2:= nextPair();  \n  w1 != \"go\" && w2 != \"stop\";  \n  w1, w2 = nextPair() {  \n\n    fmt.Printf(\"Word Pair -> [%s, %s]\\n\", w1, w2)  \n  }  \n}  \n\nfunc nextPair() (w1, w2 string) {  \n  pos := rand.Intn(len(list1))  \n  return list1[pos], list2[pos]  \n} \n\n```"]