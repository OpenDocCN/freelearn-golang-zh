- en: The for range
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: for range
- en: 'Lastly, the `for` statement supports one additional form that uses the keyword
    `range` to iterate over an expression that evaluates to an array, slice, map,
    string, or channel. The for-range loop has this generic form:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`for` 语句支持一种使用关键字 `range` 来迭代评估为数组、切片、映射、字符串或通道的表达式的附加形式。for-range 循环具有以下通用形式：
- en: '*for [<identifier-list> :=] range <expression> { ... }*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*for [<标识符列表>] := range <表达式> { ... }*'
- en: 'Depending on the type produced by the `range` expression, there can be up to
    two variables emitted by each iteration, as summarized in the following table:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 `range` 表达式产生的类型，每个迭代可以产生多达两个变量，如下表所示：
- en: '| **Range Expression** | **Range Variables** |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| **范围表达式** | **范围变量** |'
- en: '| Loop over array or slice:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '| 遍历数组或切片： |'
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '| The range produces two values, where `i` is the loop index and `v` is the
    value `v[i]` from the collection. Further discussions on array and slice are covered
    in [Chapter 7](part0051_split_000.html#1GKCM2-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Chapter 7. Composite Types"), *Composite Types*. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| range 产生两个值，其中 `i` 是循环索引，`v` 是集合中的值 `v[i]`。关于数组和切片的进一步讨论请参阅[第7章](part0051_split_000.html#1GKCM2-9c484ed022e64a0fb0e1aebf8e05d4fd
    "第7章。复合类型")，*复合类型*。 |'
- en: '| Loop over string value:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '| 遍历字符串值： |'
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '| The range produces two values, where `i` is the index of byte in the string
    and `v` is the value of the UTF-8 encoded byte at `v[i]` returned as a rune. Further
    discussion on the string type is covered in in [Chapter 4](part0027_split_000.html#PNV61-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Chapter 4. Data Types"), *Data Types*. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| range 产生两个值，其中 `i` 是字符串中字节的索引，`v` 是 `v[i]` 返回的 UTF-8 编码字节的值，作为 rune。关于字符串类型的进一步讨论请参阅[第4章](part0027_split_000.html#PNV61-9c484ed022e64a0fb0e1aebf8e05d4fd
    "第4章。数据类型")，*数据类型*。 |'
- en: '| Loop over map:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '| 遍历映射： |'
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '| The `range` produces two values, where `k` is assigned the value of the map
    key of type `K` and `v` gets stored at `map[k]` of type `V`. Further discussion
    on map is covered in [Chapter 7](part0051_split_000.html#1GKCM2-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Chapter 7. Composite Types"), *Composite Types*. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| range 产生两个值，其中 `k` 被分配为类型 `K` 的映射键的值，`v` 存储在 `map[k]` 中，类型为 `V`。关于映射的进一步讨论请参阅[第7章](part0051_split_000.html#1GKCM2-9c484ed022e64a0fb0e1aebf8e05d4fd
    "第7章。复合类型")，*复合类型*。 |'
- en: '| Loop on channel values:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '| 遍历通道值： |'
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '| An adequate discussion of channels is covered in [Chapter 9](part0061_split_000.html#1Q5IA1-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Chapter 9. Concurrency"), *Concurrency*. A channel is a two-way conduit able
    to receive and emit values. The `for...range` statement assigns each value received
    from the channel to variable `c` with each iteration. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 在[第9章](part0061_split_000.html#1Q5IA1-9c484ed022e64a0fb0e1aebf8e05d4fd "第9章。并发")中详细讨论了通道，*并发*。通道是一个双向导线，能够接收和发送值。`for...range`
    语句将每个从通道接收到的值分配给变量 `c`，每次迭代一个。 |'
- en: 'You should be aware that the value emitted with each iteration is a copy of
    the original item stored in the source. For instance, in the following program,
    the values in the slice do not get updated after the loop completes:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该注意，每个迭代产生的值是源中存储的原始项的副本。例如，在以下程序中，循环完成后切片中的值不会更新：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To update the original value using the `for...range` loop, use the index expression
    to access the original value, as illustrated in the following.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `for...range` 循环更新原始值，请使用索引表达式来访问原始值，如下所示。
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the previous example, value `i` is used in a slice index expression  `vals[i]`
    to update the original value stored in the slice. It is possible to omit the iteration
    value (the second variable in the assignment) if you only need access to the index
    value of an array, slice, or string (or key for a map). For instance, in the following
    example, the `for...range` statement only emits the current index value with each
    iteration:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，值 `i` 被用于切片索引表达式 `vals[i]` 以更新存储在切片中的原始值。如果您只需要访问数组、切片或字符串（或映射的键）的索引值，则可以省略迭代值（赋值中的第二个变量）。例如，在以下示例中，`for...range`
    语句仅在每个迭代中输出当前索引值：
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: golang.fyi/ch03/for-range-stmt.go
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch03/for-range-stmt.go
- en: 'Finally, there are some situations where you may not be interested in any of
    the values generated by the iteration, but rather the iteration mechanic itself.
    The next form of the for statement was introduced (as of Version 1.4 of Go) to
    express a for range without any variable declaration as shown in the following
    code snippet:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，有些情况下你可能对迭代生成的任何值都不感兴趣，而是对迭代机制本身感兴趣。Go 1.4 版本中引入了 for 语句的下一形式，以表达没有变量声明的
    for range，如下代码片段所示：
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The previous code will print `"Looping"` four times on the standard output.
    This form of the `for...range` loop is used sometimes when the range expression
    is over a channel. It is used to simply notify of the presence of a value in the
    channel.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码将在标准输出上打印出 `"Looping"` 四次。当范围表达式跨越一个通道时，有时会使用这种形式的 `for...range` 循环。它被用来简单地通知通道中存在一个值。
