- en: The continue statement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `continue` statement causes the control flow to immediately terminate the
    current iteration of the enclosing `for` loop and jump to the next iteration.
    The `continue` statement can take an optional label as well. The label has similar
    properties to that of the `break` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: The label must be declared within the same running function where the `continue`
    statement is located
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The declared label must be followed immediately by an enclosing `for` loop statement
    where the continue statement is nested
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When present, the `continue` statement is reached within a `for` statement block,
    the `for` loop will be abruptly terminated and control will be transferred to
    the outermost labeled `for` loop block for continuation. If a label is not specified,
    the `continue` statement will simply transfer control to the start of its enclosing
    `for` loop block for continuation of the next iteration.
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate, let us revisit the previous example of word search. This version
    uses a `continue` statement, which causes the search to find multiple occurrences
    of the searched word in the slice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch03/breakstmt2.go
  prefs: []
  type: TYPE_NORMAL
- en: The `continue DoSearch` statement causes the current iteration of the innermost
    loop to stop and transfer control to the labeled outer loop, causing it to continue
    with the next iteration.
  prefs: []
  type: TYPE_NORMAL
