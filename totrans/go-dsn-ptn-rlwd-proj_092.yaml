- en: The goto statement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `goto` statement is more flexible, in that it allows flow control to be
    transferred to an arbitrary location, inside a function, where a target label
    is defined. The `goto` statement causes an abrupt transfer of control to the label
    referenced by the `goto` statement. The following shows Go''s `goto` statement
    in action in a simple, but functional example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch03/gotostmt.go
  prefs: []
  type: TYPE_NORMAL
- en: 'The code uses the `goto` statement to jump to different sections of the `main()`
    function. Notice that the `goto` statement can target labels defined anywhere
    in the code. The superfluous usage of the `Start:` label is left in the code for
    completeness and is not necessary in this context (since continue, without the
    label, would have the same effect). The following provides some guidance when
    using the `goto` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: Avoid using the `goto` statement unless the logic being implemented can only
    be achieved using `goto` branching. This is because overuse of the `goto` statement
    can make code harder to reason about and debug.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Place `goto` statements and their targeted label within the same enclosing code
    block when possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid placing labels where a `goto` statement will cause the flow to skip new
    variable declarations or cause them to be re-declared.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go will let you jump from inner to outer enclosing code blocks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is a compilation error if you try to jump to a peer or to an enclosing code
    block.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
