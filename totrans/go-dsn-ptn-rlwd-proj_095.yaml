- en: Go types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go 类型
- en: 'To help launch the conversation about types, let us take a peek at the types
    available. Go implements a simple type system that provides programmers direct
    control over how memory is allocated and laid out. When a program declares a variable,
    two things must take place:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助启动关于类型的对话，让我们看看可用的类型。Go 实现了一个简单的类型系统，它为程序员提供了直接控制内存分配和布局的能力。当程序声明一个变量时，必须发生两件事：
- en: The variable must receive a type
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量必须接收一个类型
- en: The variable will also be bound to a value (even when none is assigned)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量还将绑定到一个值（即使没有分配）
- en: This allows the type system to allocate the number of bytes necessary to store
    the declared value. The memory layout for declared variables maps directly to
    their declared types. There is no type boxing or automatic type conversion that
    takes place. The space you expect to be allocated is actually what gets reserved
    in memory.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许类型系统分配存储声明值所需的字节数。声明变量的内存布局直接映射到它们的声明类型。没有类型装箱或自动类型转换发生。你期望分配的空间实际上在内存中得到了保留。
- en: To demonstrate this fact, the following program uses a special package called
    `unsafe` to circumvent the type system and extract memory size information for
    declared variables. It is important to note that this is purely illustrative as
    most programs do not commonly make use of the `unsafe` package.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这一事实，以下程序使用一个名为 `unsafe` 的特殊包来绕过类型系统，提取声明的变量的内存大小信息。需要注意的是，这纯粹是为了说明，因为大多数程序并不经常使用
    `unsafe` 包。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch04/alloc.go
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch04/alloc.go
- en: 'When the program is executed, it prints out the amount of memory (in bits)
    consumed by each declared variable:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序执行时，它将打印出每个声明的变量消耗的内存量（以位为单位）：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: From the preceding output, we can see that variable `a` (of type `uint8`) will
    be stored using eight bits (or one byte), variable `b` using 32 bits (or four
    bytes), and so on. With the ability to influence memory consumption coupled with
    Go's support for pointer types, programmers are able to strongly control how memory
    is allocated and consumed in their programs.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出中，我们可以看到变量 `a`（类型为 `uint8`）将使用八个位（或一个字节）存储，变量 `b` 使用 32 个位（或四个字节），依此类推。有了影响内存消耗的能力，加上
    Go 对指针类型的支持，程序员能够强有力地控制程序中内存的分配和消耗。
- en: 'This chapter will cover the types listed in the following table. They include
    basic types such as numeric, Boolean, and strings:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍以下表格中列出的类型。它们包括基本类型，如数值、布尔值和字符串：
- en: '| **Type** | **Description** |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| **类型** | **描述** |'
- en: '| `string` | Type for storing text values |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `string` | 用于存储文本值的类型 |'
- en: '| `rune` | An integer type (int32) used to represent characters. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `rune` | 用于表示字符的整数类型（int32）。 |'
- en: '| `byte`, `int`, `int8`, `int16`, `int32`, `int64`, `rune`, `uint`, `uint8`,
    `uint16`, `uint32`, `uint64`, `uintptr` | Types for storing integral values. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `byte`, `int`, `int8`, `int16`, `int32`, `int64`, `rune`, `uint`, `uint8`,
    `uint16`, `uint32`, `uint64`, `uintptr` | 用于存储整数值的类型。 |'
- en: '| `float32`, `float64` | Types for storing floating point decimal values. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `float32`, `float64` | 用于存储浮点十进制值的类型。 |'
- en: '| `complex64`, `complex128` | Types that can represent complex numbers with
    both real and imaginary parts. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `complex64`, `complex128` | 可以表示具有实部和虚部的复数的类型。 |'
- en: '| `bool` | Type for Boolean values. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `bool` | 用于布尔值的类型。 |'
- en: '| `*T`, pointer to type T | A type that represents a memory address where a
    value of type T is stored. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `*T`，类型 T 的指针 | 表示存储类型 T 值的内存地址的类型。 |'
- en: The remaining types supported by Go, such as those listed in the following table,
    include composite, interface, function, and channels. They are covered later in
    chapters dedicated to their respective topics.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Go 支持的剩余类型包括以下表格中列出的一些类型，如复合类型、接口、函数和通道。它们将在各自主题的章节中详细介绍。
- en: '| **Type** | **Description** |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| **类型** | **描述** |'
- en: '| Array `[n]T` | An ordered collection of fixed size `n` of numerically indexed
    sequence of elements of a type `T`. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 数组 `[n]T` | 一个有序的、固定大小为 `n` 的、以数值索引的元素序列的集合，元素类型为 `T`。 |'
- en: '| Slice`[]T` | A collection of unspecified size of numerically indexed sequence
    of elements of type `T`. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 切片 `[]T` | 一个未指定大小的、以数值索引的元素序列的集合，元素类型为 `T`。 |'
- en: '| `struct{}` | A structure is a composite type composed of elements known as
    fields (think of an object). |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `struct{}` | 结构是由称为字段的元素组成的复合类型（想想对象）。 |'
- en: '| `map[K]T` | An unordered sequence of elements of type `T` indexed by a key
    of arbitrary type `K`. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `map[K]T` | 一个无序的元素序列，元素类型为 `T`，由任意类型的键 `K` 索引。 |'
- en: '| `interface{}` | A named set of function declarations that define a set of
    operations that can be implemented by other types. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `interface{}` | 一个命名函数声明集，定义了一组其他类型可以实现的操作。|'
- en: '| `func (T) R` | A type that represents all functions with a given parameter
    type `T` and return type `R`. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `func (T) R` | 表示具有给定参数类型 `T` 和返回类型 `R` 的所有函数的类型。|'
- en: '| `chan T` | A type for an internal communication channel to send or receive
    values of type `T`. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `chan T` | 一种用于发送或接收类型 `T` 值的内部通信通道的类型。|'
