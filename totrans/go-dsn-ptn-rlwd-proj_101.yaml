- en: Numeric literals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Go supports the natural representation of integer values using a sequence of
    digits with a combination of a sign and decimal point (as seen in the previous
    example). Optionally, Go integer literals can also represent hexadecimal and octal
    numbers as illustrated in the following program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch04/intslit.go
  prefs: []
  type: TYPE_NORMAL
- en: 'Hexadecimal values are prepended with the `0x` or (`0X`) prefix while octal
    values start with the number 0 as shown in the previous example. Floating point
    values can be represented using both decimal and exponential notations as shown
    in the following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch04/floats.go
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous program shows several representations of floating point literals
    in Go. Numbers can include an optional exponent portion indicated by `e` (or `E`)
    at the end of the number. For instance, `1.616199e-35` in the code represents
    numerical value 1.616199 x 10^(-35). Lastly, Go supports literals for expressing
    complex numbers as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch04/complex.go
  prefs: []
  type: TYPE_NORMAL
- en: In the previous example, variable `a` is assigned a complex number with both
    a real and an imaginary part. The imaginary literal is a floating point number
    followed by the letter `i`. Notice that Go also offers two built-in functions,
    `real()` and `imag(),` to deconstruct complex numbers into their real and imaginary
    parts respectively.
  prefs: []
  type: TYPE_NORMAL
