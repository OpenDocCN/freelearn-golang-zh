- en: Numeric literals
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数值字面量
- en: 'Go supports the natural representation of integer values using a sequence of
    digits with a combination of a sign and decimal point (as seen in the previous
    example). Optionally, Go integer literals can also represent hexadecimal and octal
    numbers as illustrated in the following program:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Go 支持使用一系列数字以及符号和十进制点（如前例所示）的自然表示法来表示整数值。可选地，Go 的整数字面量也可以表示十六进制和八进制数，如下面的程序所示：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch04/intslit.go
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch04/intslit.go
- en: 'Hexadecimal values are prepended with the `0x` or (`0X`) prefix while octal
    values start with the number 0 as shown in the previous example. Floating point
    values can be represented using both decimal and exponential notations as shown
    in the following examples:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 十六进制值以 `0x` 或 (`0X`) 前缀开头，而八进制值以数字 0 开头，如前例所示。浮点值可以使用十进制和指数表示法来表示，如下面的示例所示：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: golang.fyi/ch04/floats.go
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch04/floats.go
- en: 'The previous program shows several representations of floating point literals
    in Go. Numbers can include an optional exponent portion indicated by `e` (or `E`)
    at the end of the number. For instance, `1.616199e-35` in the code represents
    numerical value 1.616199 x 10^(-35). Lastly, Go supports literals for expressing
    complex numbers as shown in the following example:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的程序展示了 Go 中浮点字面量的几种表示形式。数字可以包含一个可选的指数部分，由数字末尾的 `e`（或 `E`）表示。例如，代码中的 `1.616199e-35`
    表示数值 1.616199 x 10^(-35)。最后，Go 支持使用以下示例所示的方式来表示复数：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: golang.fyi/ch04/complex.go
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch04/complex.go
- en: In the previous example, variable `a` is assigned a complex number with both
    a real and an imaginary part. The imaginary literal is a floating point number
    followed by the letter `i`. Notice that Go also offers two built-in functions,
    `real()` and `imag(),` to deconstruct complex numbers into their real and imaginary
    parts respectively.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在前例中，变量 `a` 被分配了一个具有实部和虚部的复数。虚数字面量是一个浮点数后跟字母 `i`。请注意，Go 还提供了两个内置函数，`real()`
    和 `imag()`，可以将复数分解为其实部和虚部。
