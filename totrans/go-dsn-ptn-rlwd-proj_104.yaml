- en: The rune
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So, what exactly does the `rune` type have to do with Unicode? The rune is
    an alias for the *int32* type. It is specifically intended to store Unicode integer
    values encoded as UTF-8\. Let us take a look at some rune literals in the following
    program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The rune](img/00009.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: golang.fyi/ch04/rune.go
  prefs: []
  type: TYPE_NORMAL
- en: 'Each variable in the previous program stores a Unicode character as a `rune`
    value. In Go, the `rune` may be specified as a string literal constant surrounded
    by single quotes. The literal may be one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A printable character (as shown with variables `char1`, `char2`, and `char3`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A single character escaped with backslash for non-printable control values as
    tab, linefeed, newline, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\u` followed by Unicode values directly (`\u0369`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\x` followed by two hex digits'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A backslash followed by three octal digits (`\045`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Regardless of the `rune` literal value within the single quotes, the compiler
    compiles and assigns an integer value as shown by the printout of the previous
    variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
