- en: Interpreted and raw string literals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch04/string.go
  prefs: []
  type: TYPE_NORMAL
- en: 'The literal value assigned to variable `txt2` is enclosed in double quotes.
    This is known as an interpreted string. An interpreted string may contain normal
    printable characters as well as backslash-escaped values which are parsed and
    interpreted as `rune` literals. So, when `txt2` is printed, the escape values
    are translated as the following string:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Interpreted and raw string literals](img/00011.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Each symbol, in the interpreted string, corresponds to an escape value or a
    printable symbol as summarized in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ![Interpreted and raw string literals](img/00012.jpeg) | **<space>** | **brings**
    | **<space>** | **life** | . |'
  prefs: []
  type: TYPE_TB
- en: '| \u6C34 | \x20 | brings | \x20 | \x6c\x69\x66\x65 | . |'
  prefs: []
  type: TYPE_TB
- en: On the other hand, the literal value assigned to variable `txt3` is surrounded
    by the grave accent characters [PRE2]. This creates what is known as a raw string
    in Go. Raw string values are uninterpreted where escape sequences are ignored
    and all valid characters are encoded as they appear in the literal.
  prefs: []
  type: TYPE_NORMAL
- en: 'When variable `txt3` is printed, it produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the printed string contains all the backslash-escaped values as
    they appear in the original string literal. Uninterpreted string literals are
    a great way to embed large multi-line textual content within the body of a source
    code without breaking its syntax.
  prefs: []
  type: TYPE_NORMAL
