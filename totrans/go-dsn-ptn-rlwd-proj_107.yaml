- en: Pointers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指针
- en: In Go, when a piece of data is stored in memory, the value for that data may
    be accessed directly or a pointer may be used to reference the memory address
    where the data is located. As with other C-family languages, pointers in Go provide
    a level of indirection that let programmers process data more efficiently without
    having to copy the actual data value every time it is needed.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go语言中，当数据存储在内存中时，可以直接访问该数据值，或者使用指针来引用数据所在内存地址。与其他C系列语言一样，Go中的指针提供了一种间接级别，允许程序员更有效地处理数据，而无需每次需要时都复制实际的数据值。
- en: Unlike C, however, the Go runtime maintains control of the management of pointers
    at runtime. A programmer cannot add an arbitrary integer value to the pointer
    to generate a new pointer address (a practice known as pointer arithmetic). Once
    an area of memory is referenced by a pointer, the data in that area will remain
    reachable until it is no longer referenced any pointer variable. At that point,
    the unreferenced value becomes eligible for garbage collection.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，与C语言不同，Go运行时在运行时维护对指针管理的控制。程序员不能将任意整数值添加到指针以生成新的指针地址（这种做法称为指针算术）。一旦某个内存区域被指针引用，该区域的数据将保持可访问状态，直到它不再被任何指针变量引用。到那时，未引用的值将符合垃圾回收的条件。
