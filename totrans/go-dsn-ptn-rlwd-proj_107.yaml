- en: Pointers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Go, when a piece of data is stored in memory, the value for that data may
    be accessed directly or a pointer may be used to reference the memory address
    where the data is located. As with other C-family languages, pointers in Go provide
    a level of indirection that let programmers process data more efficiently without
    having to copy the actual data value every time it is needed.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike C, however, the Go runtime maintains control of the management of pointers
    at runtime. A programmer cannot add an arbitrary integer value to the pointer
    to generate a new pointer address (a practice known as pointer arithmetic). Once
    an area of memory is referenced by a pointer, the data in that area will remain
    reachable until it is no longer referenced any pointer variable. At that point,
    the unreferenced value becomes eligible for garbage collection.
  prefs: []
  type: TYPE_NORMAL
