- en: The pointer type
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指针类型
- en: 'Similar to C/C++, Go uses the `*` operator to designate a type as a pointer.
    The following snippet shows several pointers with different underlying types:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 C/C++，Go 使用 `*` 操作符来指定一个类型为指针。以下代码片段展示了几个具有不同底层类型的指针：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch04/pointers.go
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch04/pointers.go
- en: Given a variable of type `T`, Go uses expression `*T` as its pointer type. The
    type system considers `T` and `*T` as distinct and are not fungible. The zero
    value of a pointer, when it is not pointing to anything, is the address 0, represented
    by the literal *constant* nil.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 给定类型为 `T` 的变量，Go 使用表达式 `*T` 作为其指针类型。类型系统认为 `T` 和 `*T` 是不同的，并且它们不是可互换的。当指针没有指向任何内容时，其零值是地址
    0，用字面量 *常量* nil 表示。
