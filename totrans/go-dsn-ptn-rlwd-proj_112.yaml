- en: Type declaration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Go, it is possible to bind a type to an identifier to create a new named
    type that can be referenced and used wherever the type is needed. Declaring a
    type takes the general format as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*type <name identifier> <underlying type name>*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The type declaration starts with the keyword `type` followed by a *name identifier *and
    the name of an existing *underlying type*. The underlying type can be a built-in
    named type such as one of the numeric types, a Boolean, or a string type as shown
    in the following snippet of type declarations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A type declaration can also use a composite *type literal* as its underlying
    type. Composite types include array, slice, map, and struct. This section focuses
    on non-composite types. For further details on composite types, refer to [Chapter
    7](part0051_split_000.html#1GKCM2-9c484ed022e64a0fb0e1aebf8e05d4fd "Chapter 7. Composite
    Types"), *Composite Types*.
  prefs: []
  type: TYPE_NORMAL
- en: The following sample illustrates how named types work in their most basic forms.
    The code in the example converts temperature values. Each temperature unit is
    represented by a declared type including `fahrenheit`, `celsius`, and `kelvin`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
