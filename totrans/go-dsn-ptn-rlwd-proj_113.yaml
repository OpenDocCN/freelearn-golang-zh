- en: Type conversion
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型转换
- en: 'In general, Go considers each type to be different. This means under normal
    circumstances, values of different types are not fungible in assignment, function
    parameters, and expression contexts. This is true for built-in and declared types.
    For instance, the following will cause a build error due to type mismatch:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，Go 将每种类型视为不同的类型。这意味着在正常情况下，不同类型的值在赋值、函数参数和表达式上下文中是不可互换的。这对于内置类型和声明类型都适用。例如，以下代码将由于类型不匹配而引发编译错误：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch04/type_conv.go
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch04/type_conv.go
- en: The expression `actual + count` causes a build time error because both variables
    are of different types. Even though variables `actual` and `count` are of numeric
    types and `int32` and `int` have the same memory representation, the compiler
    still rejects the expression.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式 `actual + count` 会导致编译时错误，因为这两个变量属于不同的类型。尽管变量 `actual` 和 `count` 都是数值类型，且
    `int32` 和 `int` 具有相同的内存表示，但编译器仍然拒绝这个表达式。
- en: The same is true for declared named types and their underlying types. The compiler
    will reject assignment `var event int = sig` because type `signal` is considered
    to be different from type `int`. This is true even though `signal` uses `int`
    as its underlying type.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对于声明命名的类型及其基础类型也是如此。编译器将拒绝赋值 `var event int = sig`，因为类型 `signal` 被认为是与类型 `int`
    不同的。即使 `signal` 使用 `int` 作为其基础类型，也是如此。
- en: 'To cross type boundaries, Go supports a type conversion expression that converts
    value from one type to another. Type conversion is done using the following format:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 要跨越类型边界，Go 支持类型转换表达式，可以将值从一种类型转换为另一种类型。类型转换使用以下格式进行：
- en: '*<target_type>(<value or expression>)*'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*<目标类型>(<值或表达式>)*'
- en: 'The following code snippet fixes the previous example by converting the variables
    to the proper types:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段通过将变量转换为正确的类型来修复前面的示例：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The conversion expressions satisfy the assignment by explicitly changing the
    type of the enclosing values. Obviously, not all types can be converted from one
    to another. The following table summarizes common scenarios when type conversion
    is appropriate and allowed:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 转换表达式通过显式改变包围值的类型来满足赋值。显然，并非所有类型都可以相互转换。以下表格总结了在适当且允许进行类型转换的常见场景：
- en: '| **Description** | **Code** |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| **描述** | **代码** |'
- en: '| The target type and converted value are both simple numeric types. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 目标类型和转换的值都是简单数值类型。 |'
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '|'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| The target type and the converted value are both complex numeric types. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 目标类型和转换的值都是复杂数值类型。 |'
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '|'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| The target type and converted value have the same underlying types. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 目标类型和转换的值具有相同的基础类型。 |'
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '|'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| The target type is a string and the converted value is a valid integer type.
    |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 目标类型是字符串，转换的值是有效的整数类型。 |'
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '|'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| The target type is string and the converted value is a slice of bytes, int32,
    or runes. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 目标类型是字符串，转换的值是字节切片、int32 或 runes。 |'
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '|'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| The target type is a slice of byte, int32, or rune values and the converted
    value is a string. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 目标类型是字节切片、int32 或 rune 值的切片，转换的值是字符串。 |'
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '|'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Additionally, the conversion rules also work when the target type and converted
    value are pointers that reference the same types. Besides these scenarios in the
    previous table, Go types cannot be explicitly converted. Any attempt to do so
    will result in a compilation error.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当目标类型和转换的值都是指向相同类型的指针时，转换规则同样适用。除了上表中的这些场景外，Go 类型不能进行显式转换。任何尝试这样做都会导致编译错误。
