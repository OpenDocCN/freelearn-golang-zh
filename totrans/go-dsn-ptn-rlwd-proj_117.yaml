- en: Function declaration
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数声明
- en: Declaring a function in Go takes the general form illustrated in the following
    figure. This canonical form is used to declare named and anonymous functions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Go 中声明函数采用以下图示的一般形式。这种规范形式用于声明命名和匿名函数。
- en: '![Function declaration](img/00013.jpeg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![函数声明](img/00013.jpeg)'
- en: The most common form of function definition in Go includes the function's assigned
    identifier in the function literal. To illustrate this, the following table shows
    the source code of several programs with definitions of named functions with different
    combinations of parameters and return types.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Go 中，函数定义的最常见形式包括函数字面量中的函数指定的标识符。为了说明这一点，以下表格显示了几个程序源代码，其中包含具有不同参数和返回类型组合的命名函数的定义。
- en: '| **Code** | **Description** |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| **代码** | **描述** |'
- en: '|'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch05/func0.go | A function with the name identifier `printPi`. It
    takes no parameter and returns no values. Notice when there is nothing to return,
    the `return` statement is optional. |
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch05/func0.go | 一个名为 `printPi` 的函数。它不接受任何参数也不返回任何值。注意，当没有要返回的内容时，`return`
    语句是可选的。 |
- en: '|'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: golang.fyi/ch05/func1.go | A function named `avogadro.` It takes no parameter
    but returns a value of type `float64`. Notice the `return` statement is required
    when a return value is declared as part of the function's signature. |
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch05/func1.go | 一个名为 `avogadro` 的函数。它不接受任何参数但返回一个类型为 `float64` 的值。注意，当返回值作为函数签名的一部分声明时，需要
    `return` 语句。 |
- en: '|'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: golang.fyi/ch05/func2.go | This defines the function `fib`. It takes parameter
    `n` of type `int` and prints the Fibonacci sequence for up to `n`. Again, nothing
    to return, therefore the `return` statement is omitted. |
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch05/func2.go | 这定义了函数 `fib`。它接受一个类型为 `int` 的参数 `n` 并打印出最多到 `n` 的斐波那契数列。同样，没有要返回的内容，因此省略了
    `return` 语句。 |
- en: '|'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: golang.fyi/ch05/func3.go | The last example defines the `isPrime` function.
    It takes a parameter of type `int` and returns a value of type `bool`. Since the
    function is declared to return a value of type `bool`, the last logical statement
    in the execution flow must be a `return` statement that returns a value of the
    declared type. |
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch05/func3.go | 最后一个示例定义了 `isPrime` 函数。它接受一个类型为 `int` 的参数并返回一个类型为
    `bool` 的值。由于函数声明为返回类型为 `bool` 的值，因此执行流程中的最后一个逻辑语句必须是一个返回声明类型的 `return` 语句。 |
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Function signature**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**函数签名**'
- en: The set of specified parameter types, result types, and the order in which those
    types are declared is known as the signature of the function. It is another unique
    characteristic that help identify a function. Two functions may have the same
    number of parameters and result values; however, if the order of those elements
    are different, then the functions have different signatures.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 指定参数类型、结果类型及其声明的顺序的集合称为函数的签名。这是帮助识别函数的另一个独特特征。两个函数可能有相同数量的参数和结果值；然而，如果这些元素的顺序不同，那么函数具有不同的签名。
