- en: The function type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Normally, the name identifier, declared in a function literal, is used to invoke
    the function using an invocation expression whereby the function identifier is
    followed by a parameter list. This is what we have seen throughout the book so
    far and it is illustrated in the following example calling the `fib` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When, however, a function''s identifier appears without parentheses, it is
    treated as a regular variable with a type and a value as shown in the following
    program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch05/functype.go
  prefs: []
  type: TYPE_NORMAL
- en: The type of a function is determined by its signature. Functions are considered
    to be of the same type when they have the same number of arguments with the same
    types in the same order. In the previous example the `opAdd` variable is declared
    having the type `func (int, int) int` . This is the same signature as the declared
    functions `add` and `sub`. Therefore, the `opAdd` variable is assigned the `add`
    function variable. This allows `opAdd` to be invoked as you would invoke the `add`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: The same is done for the Â `opSub` variable. It is assigned the value represented
    by the function identifier `sub` and type `func (int, int)`. Therefore, `opSub(99,13)`
    invokes the second function, which returns the result of a subtraction.
  prefs: []
  type: TYPE_NORMAL
