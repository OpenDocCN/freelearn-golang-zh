- en: The function type
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数类型
- en: 'Normally, the name identifier, declared in a function literal, is used to invoke
    the function using an invocation expression whereby the function identifier is
    followed by a parameter list. This is what we have seen throughout the book so
    far and it is illustrated in the following example calling the `fib` function:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在函数字面量中声明的名称标识符用于通过调用表达式调用函数，其中函数标识符后面跟着参数列表。这是我们到目前为止在书中看到的情况，以下示例调用`fib`函数进行了说明：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When, however, a function''s identifier appears without parentheses, it is
    treated as a regular variable with a type and a value as shown in the following
    program:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当一个函数的标识符没有括号时，它被视为具有类型和值的普通变量，如下面的程序所示：
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: golang.fyi/ch05/functype.go
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch05/functype.go
- en: The type of a function is determined by its signature. Functions are considered
    to be of the same type when they have the same number of arguments with the same
    types in the same order. In the previous example the `opAdd` variable is declared
    having the type `func (int, int) int` . This is the same signature as the declared
    functions `add` and `sub`. Therefore, the `opAdd` variable is assigned the `add`
    function variable. This allows `opAdd` to be invoked as you would invoke the `add`
    function.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的类型由其签名确定。当函数具有相同数量和类型的参数且顺序相同时，它们被认为是同一类型。在先前的示例中，`opAdd`变量被声明为具有类型`func
    (int, int) int`。这与声明的函数`add`和`sub`的签名相同。因此，`opAdd`变量被分配给`add`函数变量。这允许`opAdd`以调用`add`函数的方式被调用。
- en: The same is done for the  `opSub` variable. It is assigned the value represented
    by the function identifier `sub` and type `func (int, int)`. Therefore, `opSub(99,13)`
    invokes the second function, which returns the result of a subtraction.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`opSub`变量也是如此。它被分配给由函数标识符`sub`和类型`func (int, int)`表示的值。因此，`opSub(99,13)`调用第二个函数，该函数返回减法的结果。
