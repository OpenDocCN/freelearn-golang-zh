- en: Function result parameters
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数结果参数
- en: Go functions can be defined to return one or more result values. So far in the
    book, most of the functions we have encountered have been defined to return a
    single result value. In general, a function is able to return a list of result
    values, with diverse types, separated by a comma (see the previous section, *Function
    declaration*).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Go 函数可以被定义为返回一个或多个结果值。到目前为止，在本书中，我们遇到的大多数函数都被定义为返回单个结果值。一般来说，一个函数能够返回一个由逗号分隔的结果值列表，具有不同的类型（参见前文，*函数声明*）。
- en: 'To illustrate this concept, let us examine the following simple program which
    defines a function that implements an Euclidian division algorithm (see [http://en.wikipedia.org/wiki/Division_algorithm](http://en.wikipedia.org/wiki/Division_algorithm)).
    The `div` function returns both the quotient and the remainder values as its result:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这个概念，让我们考察以下简单的程序，该程序定义了一个实现欧几里得除法算法的函数（参见 [http://en.wikipedia.org/wiki/Division_algorithm](http://en.wikipedia.org/wiki/Division_algorithm)）。`div`
    函数返回商和余数值作为其结果：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch05/funcret0.go
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch05/funcret0.go
- en: The `**return**` keyword is followed by the number of result values matching
    (respectively) the declared results in the function's signature. In the previous
    example, the signature of the `div` function specifies two `int` values to be
    returned as result values. Internally, the function defines `int` variables `p`
    and `r` that are returned as result values upon completion of the function. Those
    returned values must match the types defined in the function's signature or risk
    compilation errors.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`**return**` 关键字后面跟着的结果值数量与函数签名中声明的结果相对应。在先前的例子中，`div` 函数的签名指定了两个 `int` 值作为结果值。在函数内部，该函数定义了
    `int` 变量 `p` 和 `r`，在函数完成后作为结果值返回。这些返回值必须与函数签名中定义的类型相匹配，否则可能会出现编译错误。'
- en: 'Functions with multiple result values must be invoked in the proper context:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 具有多个结果值的函数必须在适当的环境中调用：
- en: They must be assigned to a list of identifiers of the same types respectively
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们必须分别分配给相同类型的标识符列表
- en: They can only be included in expressions that expect the same number of returned
    values
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们只能包含在期望返回相同数量值的表达式中
- en: 'This is illustrated in the following source snippet:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这在前面的源代码片段中得到了说明：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Named result parameters
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命名结果参数
- en: 'In general, the result list of a function''s signature can be specified using
    variable identifiers along with their types. When using named identifiers, they
    are passed to the function as regular declared variables and can be accessed and
    modified as needed. Upon encountering a `return` statement, the last assigned
    result values are returned. This is illustrated in the following source snippet,
    which is a rewrite of the previous program:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，函数签名的结果列表可以使用变量标识符及其类型来指定。当使用命名标识符时，它们作为常规声明的变量传递给函数，并且可以根据需要访问和修改。在遇到 `return`
    语句时，最后分配的结果值将被返回。这在前面的源代码片段中得到了说明，它是先前程序的改写：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: golang.fyi/ch05/funcret1.go
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch05/funcret1.go
- en: Notice the `return` statement is naked; it omits all identifiers. As stated
    earlier, the values assigned in `q` and `r` will be returned to the caller. For
    readability, consistency, or style, you may elect not to use a naked `return`
    statement. It is perfectly legal to attach the identifier's name with the `return`
    statement (such as `return q, r`) as before.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到 `return` 语句是裸露的；它省略了所有标识符。如前所述，赋值给 `q` 和 `r` 的值将被返回给调用者。为了可读性、一致性或风格，你可以选择不使用裸露的
    `return` 语句。将标识符的名称与 `return` 语句一起使用（例如 `return q, r`）是完全合法的。
