- en: Function result parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go functions can be defined to return one or more result values. So far in the
    book, most of the functions we have encountered have been defined to return a
    single result value. In general, a function is able to return a list of result
    values, with diverse types, separated by a comma (see the previous section, *Function
    declaration*).
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate this concept, let us examine the following simple program which
    defines a function that implements an Euclidian division algorithm (see [http://en.wikipedia.org/wiki/Division_algorithm](http://en.wikipedia.org/wiki/Division_algorithm)).
    The `div` function returns both the quotient and the remainder values as its result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch05/funcret0.go
  prefs: []
  type: TYPE_NORMAL
- en: The `**return**` keyword is followed by the number of result values matching
    (respectively) the declared results in the function's signature. In the previous
    example, the signature of the `div` function specifies two `int` values to be
    returned as result values. Internally, the function defines `int` variables `p`
    and `r` that are returned as result values upon completion of the function. Those
    returned values must match the types defined in the function's signature or risk
    compilation errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Functions with multiple result values must be invoked in the proper context:'
  prefs: []
  type: TYPE_NORMAL
- en: They must be assigned to a list of identifiers of the same types respectively
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They can only be included in expressions that expect the same number of returned
    values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is illustrated in the following source snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Named result parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In general, the result list of a function''s signature can be specified using
    variable identifiers along with their types. When using named identifiers, they
    are passed to the function as regular declared variables and can be accessed and
    modified as needed. Upon encountering a `return` statement, the last assigned
    result values are returned. This is illustrated in the following source snippet,
    which is a rewrite of the previous program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch05/funcret1.go
  prefs: []
  type: TYPE_NORMAL
- en: Notice the `return` statement is naked; it omits all identifiers. As stated
    earlier, the values assigned in `q` and `r` will be returned to the caller. For
    readability, consistency, or style, you may elect not to use a naked `return`
    statement. It is perfectly legal to attach the identifier's name with the `return`
    statement (such asÂ `return q, r`) as before.
  prefs: []
  type: TYPE_NORMAL
