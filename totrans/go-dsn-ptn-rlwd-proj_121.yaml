- en: Passing parameter values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Go, all parameters passed to a function are done so by value. This means
    a local copy of the passed values is created inside the called function. There
    is no inherent concept of passing parameter values by reference. The following
    code illustrates this mechanism by modifying the value of the passed parameter,
    `val`, inside the `dbl` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch05/funcpassbyval.go
  prefs: []
  type: TYPE_NORMAL
- en: 'When the program runs, it produces the following output that chronicles the
    state of the `p` variable before it is passed to the `dbl` function. The update
    is made locally to the passed parameter variable inside the `dbl` function, and
    lastly the value of the `p` variable after the `dbl` function is called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The preceding output shows that the original value assigned to variableÂ `p`
    remains variable unchanged, even after it is passed to a function that seems to
    update its value internally. This is because the `val` parameter in the `dbl`
    function receives a local copy of the passed parameter.
  prefs: []
  type: TYPE_NORMAL
