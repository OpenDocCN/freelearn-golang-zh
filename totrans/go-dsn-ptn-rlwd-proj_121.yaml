- en: Passing parameter values
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传递参数值
- en: 'In Go, all parameters passed to a function are done so by value. This means
    a local copy of the passed values is created inside the called function. There
    is no inherent concept of passing parameter values by reference. The following
    code illustrates this mechanism by modifying the value of the passed parameter,
    `val`, inside the `dbl` function:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Go 语言中，所有传递给函数的参数都是按值传递的。这意味着在调用函数内部会创建传递值的局部副本。没有按引用传递参数值的固有概念。以下代码通过在 `dbl`
    函数内部修改传递的参数 `val` 的值来演示这一机制：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch05/funcpassbyval.go
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch05/funcpassbyval.go
- en: 'When the program runs, it produces the following output that chronicles the
    state of the `p` variable before it is passed to the `dbl` function. The update
    is made locally to the passed parameter variable inside the `dbl` function, and
    lastly the value of the `p` variable after the `dbl` function is called:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序运行时，它会生成以下输出，记录了在传递给 `dbl` 函数之前 `p` 变量的状态。更新是在 `dbl` 函数内部对传递的参数变量进行的局部更新，最后是调用
    `dbl` 函数后 `p` 变量的值：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding output shows that the original value assigned to variable `p`
    remains variable unchanged, even after it is passed to a function that seems to
    update its value internally. This is because the `val` parameter in the `dbl`
    function receives a local copy of the passed parameter.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的输出显示，即使变量 `p` 的原始值被传递给一个看似会内部更新其值的函数后，该值仍然保持不变。这是因为 `dbl` 函数中的 `val` 参数接收了传递参数的局部副本。
