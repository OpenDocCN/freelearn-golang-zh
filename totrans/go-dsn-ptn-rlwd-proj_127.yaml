- en: Error signaling and handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, let us address how to idiomatically signal and handle errors
    when you make a function call. If you have worked with languages such as Python,
    Java, or C#, you may be familiar with interrupting the flow of your executing
    code by throwing an exception when an undesirable state arises.
  prefs: []
  type: TYPE_NORMAL
- en: As we will explore in this section, Go has a simplified approach to error signaling
    and error handling that puts the onus on the programmer to handle possible errors
    immediately after a called function returns. Go discourages the notion of interrupting
    an execution by indiscriminately short-circuiting the executing program with an
    exception in the hope that it will be properly handled further up the call stack.
    In Go, the traditional way of signaling errors is to return a value of type `error`
    when something goes wrong during the execution of your function. So let us take
    a closer look how this is done.
  prefs: []
  type: TYPE_NORMAL
