- en: Error signaling and handling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误信号和错误处理
- en: At this point, let us address how to idiomatically signal and handle errors
    when you make a function call. If you have worked with languages such as Python,
    Java, or C#, you may be familiar with interrupting the flow of your executing
    code by throwing an exception when an undesirable state arises.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，让我们来探讨如何在函数调用时习惯性地发出错误信号并处理错误。如果你使用过像 Python、Java 或 C# 这样的语言，你可能熟悉在出现不希望的状态时通过抛出异常来中断执行代码的流程。
- en: As we will explore in this section, Go has a simplified approach to error signaling
    and error handling that puts the onus on the programmer to handle possible errors
    immediately after a called function returns. Go discourages the notion of interrupting
    an execution by indiscriminately short-circuiting the executing program with an
    exception in the hope that it will be properly handled further up the call stack.
    In Go, the traditional way of signaling errors is to return a value of type `error`
    when something goes wrong during the execution of your function. So let us take
    a closer look how this is done.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们将在本节中探讨的，Go 对错误信号和错误处理有简化的方法，它将责任放在程序员身上，要求在调用函数返回后立即处理可能出现的错误。Go 不鼓励通过在执行程序中无差别地短路异常来中断执行的想法，希望它会在调用堆栈的更高层得到适当的处理。在
    Go 中，传统的错误信号方式是在函数执行过程中出现问题时返回一个类型为 `error` 的值。因此，让我们更详细地看看这是如何实现的。
