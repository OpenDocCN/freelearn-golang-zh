- en: The error type
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误类型
- en: 'The `error` type is a built-in interface and, therefore must be implemented
    before it can be used. Fortunately, the Go standard library comes with implementations
    ready to be used. We have already used one of the implementation from the package,
    `errors`:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '`error`类型是一个内置接口，因此在使用之前必须实现。幸运的是，Go标准库提供了现成的实现，我们可以使用包中的一个实现，即`errors`：'
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can also create parameterized error values using the `fmt.Errorf` function
    as shown in the following snippet:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`fmt.Errorf`函数创建参数化的错误值，如下面的代码片段所示：
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[http://golang.org/src/os/error.go](http://golang.org/src/os/error.go)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://golang.org/src/os/error.go](http://golang.org/src/os/error.go)'
- en: You can also create your own implementation of the `error` interface to create
    custom errors. This topic is revisited in [Chapter 7](part0056_split_000.html#1LCVG1-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Chapter 8. Methods, Interfaces, and Objects"), *Methods, Interfaces, and Objects* where
    the book discusses the notion of extending types.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以创建自己的`error`接口实现来创建自定义错误。这个主题在[第7章](part0056_split_000.html#1LCVG1-9c484ed022e64a0fb0e1aebf8e05d4fd
    "第8章。方法、接口和对象")，*方法、接口和对象*中再次被提及，书中讨论了扩展类型的概念。
