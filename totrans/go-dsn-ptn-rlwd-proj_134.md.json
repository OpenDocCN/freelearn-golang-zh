["```go\nwrite function to panic when there is a file error:\n```", "```go\npackage main \n... \nfunc write(fname string, anagrams map[string][]string) { \n   file, err := os.OpenFile( \n         fname,  \n         os.O_WRONLY+os.O_CREATE+os.O_EXCL,  \n         0644, \n   ) \n   if err != nil { \n         msg := fmt.Sprintf( \n               \"Unable to create output file: %v\", err, \n         ) \n         panic(msg) \n   } \n   ... \n} \n\nfunc main() { \n   words, err := load(\"dict.txt\") \n   if err != nil { \n         fmt.Println(\"Unable to load file:\", err) \n         os.Exit(1) \n   } \n   anagrams := mapWords(words) \n   write(\"out.txt\", anagrams) \n} \n\nwrite function calls the panic function if os.OpenFile() method errors out. When the program calls the main function, if there is an output file already in the working directory, the program will panic and crash as shown in the following stack trace, indicating the sequence of calls that caused the crash:\n```", "```go\n> go run anagram2.go \npanic: Unable to create output file: open out.txt: file exists\ngoroutine 1 [running]:\nmain.write(0x4e7b30, 0x7, 0xc2080382a0)\n/Go/src/github.com/vladimirvivien/learning-go/ch05/anagram2.go:72 +0x1a3 \nmain.main()\nGo/src/github.com/vladimirvivien/learning-go/ch05/anagram2.go:103 +0x1e9\nexit status 2\n\n```"]