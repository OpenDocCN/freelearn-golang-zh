["```go\npackage main \n... \nfunc write(fname string, anagrams map[string][]string) { \n   file, err := os.OpenFile( \n         fname,  \n         os.O_WRONLY+os.O_CREATE+os.O_EXCL,  \n         0644, \n   ) \n   if err != nil { \n         msg := fmt.Sprintf( \n               \"Unable to create output file: %v\", err, \n         ) \n         panic(msg) \n   } \n   ... \n} \n\nfunc makeAnagrams(words []string, fname string) { \n   defer func() { \n         if r := recover(); r != nil { \n               fmt.Println(\"Failed to make anagram:\", r) \n         } \n   }() \n\n   anagrams := mapWords(words) \n   write(fname, anagrams) \n} \nfunc main() { \n   words, err := load(\"\") \n   if err != nil { \n         fmt.Println(\"Unable to load file:\", err) \n         os.Exit(1) \n   } \n   makeAnagrams(words, \"\") \n} \n\n```", "```go\ndefer func() { \n   if r := recover(); r != nil { \n         fmt.Println(\"Failed to make anagram:\", r) \n   } \n}() \n\n```", "```go\n> go run anagram3.go\nFailed to make anagram: Unable to open output file for creation: open out.txt: file exists\n\n```"]