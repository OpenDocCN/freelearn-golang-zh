- en: Understanding the Go package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we dive into package creation and use, it is crucial to take a high-level
    view of the concept of packages to help steer the discussion later. A Go package
    is both a physical and a logical unit of code organization used to encapsulate
    related concepts that can be reused. By convention, a group of source files stored
    in the same directory are considered to be part of the same package. The following
    illustrates a simple directory tree, where each directory represents a package
    containing some source code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch06-foo
  prefs: []
  type: TYPE_NORMAL
- en: 'While not a requirement, it is a recommended convention to set a package''s
    name, in each source file, to match the name of the directory where the file is
    located. For instance, source file `blat.go` is declared to be part of package
    `foo`, as shown in the following code, because it is stored in directory named
    `foo`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch06-foo/foo/blat.go
  prefs: []
  type: TYPE_NORMAL
- en: 'Files `quux.go` and `qux.go` are both part of package `bazz` since they are
    located in a directory with that name, as shown in the following code snippets:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch06-foo/foo/bazz/quux.go |
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch06-foo/foo/bazz/qux.go |
  prefs: []
  type: TYPE_NORMAL
