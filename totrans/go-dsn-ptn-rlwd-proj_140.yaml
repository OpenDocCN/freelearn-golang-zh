- en: The workspace
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another important concept to understand when discussing packages is that of
    the *Go * *workspace*. The workspace is simply an arbitrary directory that serves
    as a namespace used to resolved packages during certain tasks such as compilation.
    By convention, Go tools expect three specifically named subdirectories in a workspace
    directory: `src`, `pkg`, and `bin`. These subdirectories store Go source files
    along with all built package artifacts respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Establishing a static directory location where Go packages are kept together
    has the following advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: Simple setup with near-zero configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fast compilation by reducing code search to a known location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tools can easily create source graph of code and package artifacts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic inference and resolution of transitive dependencies from source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project setup can be made portable and easily distributable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a partial (and simplified) tree layout of my Go workspace
    on my laptop with the three subdirectories, `bin`, `pkg`, and `src`, highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Sample workspace directory
  prefs: []
  type: TYPE_NORMAL
- en: '`bin`: This is an auto-generated directory that stores compiled Go executable
    artifacts (also known as programs or commands). When Go tools compile and install
    executable packages, they are placed in this directory. The previous sample workspace
    shows two binaries listed `circ` and `golint`. It is a recommended practice to
    add this directory to your operating system''s `PATH` environment variable to
    make your command available locally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pkg`: This directory is also auto-generated to store built package artifacts.
    When the Go tools build and install non-executable packages, they are stored as
    object files (with `.a` suffix) in subdirectories with name patterns based on
    the targeted operating system and architecture. In the sample workspace, the object
    files are placed under subdirectory `linux_amd64`, which indicates that the object
    files in this directory were compiled for the Linux operating system running on
    a 64-bit architecture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src`: This is a user-created directory where the Go source code files are
    stored. Each subdirectory under `src` is mapped to a package. *src* is the root
    directory from which all import paths are resolved. The Go tools search that directory
    to resolve packages referenced in your code during compilation or other activities
    that depend on the source path. The sample workspace in the previous figure shows
    two packages: `github.com/golang/lint/golint/` and `github.com/vladimirvivien/learning-go/ch06/current`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may be wondering about the `github.com` prefix in the package path shown
    in the workspace example. It is worth noting there are no naming requirements
    for the package directories (see the *Naming packages* section). A package can
    have any arbitrary name. However, Go recommends certain conventions that help
    with global namespace resolution and package organization.
  prefs: []
  type: TYPE_NORMAL
