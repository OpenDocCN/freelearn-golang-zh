- en: The workspace
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作空间
- en: 'Another important concept to understand when discussing packages is that of
    the *Go * *workspace*. The workspace is simply an arbitrary directory that serves
    as a namespace used to resolved packages during certain tasks such as compilation.
    By convention, Go tools expect three specifically named subdirectories in a workspace
    directory: `src`, `pkg`, and `bin`. These subdirectories store Go source files
    along with all built package artifacts respectively.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论包时，还有一个重要概念需要理解，那就是*Go工作空间*。工作空间只是一个简单的目录，用作在编译等特定任务期间解析包的命名空间。按照惯例，Go工具期望在工作空间目录中有三个特定命名的子目录：`src`、`pkg`和`bin`。这些子目录分别存储Go源文件以及所有构建的包文件。
- en: 'Establishing a static directory location where Go packages are kept together
    has the following advantages:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在静态目录位置建立Go包的存储位置有以下优点：
- en: Simple setup with near-zero configuration
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单设置，几乎无需配置
- en: Fast compilation by reducing code search to a known location
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过减少代码搜索到已知位置来加快编译速度
- en: Tools can easily create source graph of code and package artifacts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具可以轻松创建代码和包文件的源图
- en: Automatic inference and resolution of transitive dependencies from source
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从源自动推断和解决传递依赖
- en: Project setup can be made portable and easily distributable
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目设置可以制作成便携式且易于分发
- en: 'The following is a partial (and simplified) tree layout of my Go workspace
    on my laptop with the three subdirectories, `bin`, `pkg`, and `src`, highlighted:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我笔记本电脑上Go工作空间的局部（简化）树布局，其中高亮显示了三个子目录`bin`、`pkg`和`src`：
- en: '|'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '|'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Sample workspace directory
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 示例工作空间目录
- en: '`bin`: This is an auto-generated directory that stores compiled Go executable
    artifacts (also known as programs or commands). When Go tools compile and install
    executable packages, they are placed in this directory. The previous sample workspace
    shows two binaries listed `circ` and `golint`. It is a recommended practice to
    add this directory to your operating system''s `PATH` environment variable to
    make your command available locally.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bin`：这是一个自动生成的目录，用于存储编译后的Go可执行程序（也称为程序或命令）。当Go工具编译和安装可执行包时，它们会被放置在这个目录中。前一个示例工作空间显示了两个二进制文件`circ`和`golint`。将此目录添加到操作系统的`PATH`环境变量中是一个推荐的做法，这样可以使你的命令在本地可用。'
- en: '`pkg`: This directory is also auto-generated to store built package artifacts.
    When the Go tools build and install non-executable packages, they are stored as
    object files (with `.a` suffix) in subdirectories with name patterns based on
    the targeted operating system and architecture. In the sample workspace, the object
    files are placed under subdirectory `linux_amd64`, which indicates that the object
    files in this directory were compiled for the Linux operating system running on
    a 64-bit architecture.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pkg`：这个目录也是自动生成的，用于存储构建的包文件。当Go工具构建和安装非可执行包时，它们会被存储为具有`.a`后缀的对象文件，存储在基于目标操作系统和架构命名的子目录中。在示例工作空间中，对象文件被放置在`linux_amd64`子目录下，这表明这个目录中的对象文件是为在64位架构上运行的Linux操作系统编译的。'
- en: '`src`: This is a user-created directory where the Go source code files are
    stored. Each subdirectory under `src` is mapped to a package. *src* is the root
    directory from which all import paths are resolved. The Go tools search that directory
    to resolve packages referenced in your code during compilation or other activities
    that depend on the source path. The sample workspace in the previous figure shows
    two packages: `github.com/golang/lint/golint/` and `github.com/vladimirvivien/learning-go/ch06/current`.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`：这是一个用户创建的目录，用于存储Go源代码文件。`src`下的每个子目录都映射到一个包。*src* 是所有导入路径解析的根目录。Go工具会搜索这个目录，以解析在编译或其他依赖于源路径的活动期间引用的包。前一个示例工作空间显示了两个包：`github.com/golang/lint/golint/`
    和 `github.com/vladimirvivien/learning-go/ch06/current`。'
- en: Note
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You may be wondering about the `github.com` prefix in the package path shown
    in the workspace example. It is worth noting there are no naming requirements
    for the package directories (see the *Naming packages* section). A package can
    have any arbitrary name. However, Go recommends certain conventions that help
    with global namespace resolution and package organization.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道工作空间示例中包路径中的`github.com`前缀。值得注意的是，对于包目录没有命名要求（参见*命名包*部分）。包可以有任意名称。然而，Go推荐某些约定，有助于全局命名空间解析和包组织。
