- en: Creating packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now, the chapter has covered the rudimentary concepts of the Go package;
    now it is time to dive deeper and look at the creation of Go code contained in
    packages. One of the main purposes of a Go package is to abstract out and aggregate
    common logic into sharable code units. Earlier in the chapter, it was mentioned
    that a group of Go source files in a directory is considered to be a package.
    While this is technically true, there is more to the concept of a Go package than
    just shoving a bunch of files in a directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'To help illustrate the creation of our first packages, we will enlist the use
    of example source code found in [github.com/vladimirvivien/learning-go/ch06](https://github.com/vladimirvivien/learning-go/ch06).
    The code in that directory defines a set of functions to help calculate electrical
    values using *Ohm''s Law*. The following shows the layout of the directories that
    make up the packages for the example (assuming they are saved in some workspace
    directoryÂ `$GOPATH/src`):'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Package layout for Ohm's Law example
  prefs: []
  type: TYPE_NORMAL
- en: 'Each directory, in the previous tree, contains one or more Go source code files
    that define and implement the functions, and other source code elements, that
    will be arranged into packages and be made reusable. The following table summarizes
    the import paths and package information extracted from preceding workspace layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Import Path** | **Package** |'
  prefs: []
  type: TYPE_TB
- en: '| "github.com/vladimirvivien/learning-go/ch06/**current**" | `current` |'
  prefs: []
  type: TYPE_TB
- en: '| "github.com/vladimirvivien/learning-go/ch06/**power**" | `power` |'
  prefs: []
  type: TYPE_TB
- en: '| "github.com/vladimirvivien/learning-go/ch06/**power/ir**" | `ir` |'
  prefs: []
  type: TYPE_TB
- en: '| "github.com/vladimirvivien/learning-go/ch06/**power/vr**" | `vr` |'
  prefs: []
  type: TYPE_TB
- en: '| "github.com/vladimirvivien/learning-go/ch06/**resistor**" | `resistor` |'
  prefs: []
  type: TYPE_TB
- en: '| "github.com/vladimirvivien/learning-go/ch06/**volt**" | `volt` |'
  prefs: []
  type: TYPE_TB
- en: While there are no naming requirements, it is sensible to name package directories
    to reflect their respective purposes. From the previous table, each package in
    the example is named to represent an electrical concept, such as current, power,
    resistor, and volt. The *Naming packages* section will go into further detail
    about package naming conventions.
  prefs: []
  type: TYPE_NORMAL
