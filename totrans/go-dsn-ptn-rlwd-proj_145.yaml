- en: Multi-File packages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The logical content of a package (source code elements such as types, functions,
    variables, and constants) can physically scale across multiple Go source files.
    A package directory can contain one or more Go source files. For instance, in
    the following example, package `resistor` is unnecessarily split among several
    Go source files to illustrate this point:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch06/resistor/lib.go |
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch06/resistor/res_equivalance.go |
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch06/resistor/res.go |
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch06/resistor/res_power.go |
  prefs: []
  type: TYPE_NORMAL
- en: Each file in the package must have a package declaration with the same name
    identifier (in this case `resistor`). The Go compiler will stitch all elements
    from all of the source files together to form one logical unit within a single
    scope that can be used by other packages.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to point out that compilation will fail if the package declaration
    is not identical across all source files in a given directory. This is understandable,
    as the compiler expects all files in a directory to be part of the same package.
  prefs: []
  type: TYPE_NORMAL
