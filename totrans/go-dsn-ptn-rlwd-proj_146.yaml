- en: Naming packages
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包命名
- en: As mentioned earlier, Go expects each package in a workspace to have a unique
    fully qualified import path. Your program may have as many packages as you want
    and your package structure can be as deep as you like in the workspace. However,
    idiomatic Go prescribes some **rules** for the naming and organization of your
    packages to make creating and using packages simple.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Go 预期工作区中的每个包都有一个唯一的完全限定导入路径。你的程序可以有尽可能多的包，你的包结构可以在工作区中尽可能深。然而，Go 的惯用规则规定了命名和组织包的一些规则，以使创建和使用包变得简单。
- en: Use globally unique namespaces
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用全局唯一命名空间
- en: Firstly, it is a good idea to fully qualify the import path of your packages
    in a global context, especially if you plan to share your code with others. Consider
    starting the name of your import path with a namespace scheme that uniquely identifies
    you or your organization. For instance, company *Acme, Inc.* may choose to start
    all of their Go package names with `acme.com/apps`. So a fully qualified import
    path for a package would be `"acme.com/apps/foo/bar"`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在全局上下文中完全限定你的包的导入路径是一个好主意，特别是如果你打算与他人共享代码。考虑以一个唯一标识你或你组织的命名空间方案开始你的导入路径名称。例如，公司
    *Acme, Inc.* 可以选择将所有他们的 Go 包名称以 `acme.com/apps` 开头。因此，一个包的完全限定导入路径将是 `"acme.com/apps/foo/bar"`。
- en: Note
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Later in this chapter, we will see how package import paths can be used when
    integrating Go with source code repository services such as GitHub.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后面部分，我们将看到如何将包导入路径用于将 Go 与源代码仓库服务（如 GitHub）集成。
- en: Add context to path
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为路径添加上下文
- en: 'Next, as you devise a naming scheme for your package, use the package''s path
    to add context to the name of your package name. The context in the name should
    start generic and get more specific from left to right. As an example, let us
    refer to the import paths for the power package (from the example earlier). The
    calculation of power values is split among three sub-packages shown as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，当你为你的包制定命名方案时，使用包的路径为你的包名添加上下文。包名中的上下文应该从通用开始，并从左到右变得越来越具体。以电力包（如前例所示）的导入路径为例。电力值的计算被分为三个子包，如下所示：
- en: '`github.com/vladimirvivien/learning-go/ch06/**power**`'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`github.com/vladimirvivien/learning-go/ch06/**power**`'
- en: '`github.com/vladimirvivien/learning-go/ch06/**power/ir**`'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`github.com/vladimirvivien/learning-go/ch06/**power/ir**`'
- en: '`github.com/vladimirvivien/learning-go/ch06/**power/vr**`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`github.com/vladimirvivien/learning-go/ch06/**power/vr**`'
- en: 'The parent path `power` contains package members with broader context. The
    sub-packages `ir` and `vr` contain members that are more specific with narrower
    contexts. This naming pattern is used heavily in Go, including the built-in packages
    such as the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 父路径 `power` 包含具有更广泛上下文的包成员。子包 `ir` 和 `vr` 包含具有更窄上下文的更具体成员。这种命名模式在 Go 中被广泛使用，包括以下内置包：
- en: '`crypto/md5`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`crypto/md5`'
- en: '`net/http`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`net/http`'
- en: '`net/http/httputil`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`net/http/httputil`'
- en: '`reflect`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reflect`'
- en: Note a package depth of one is a perfectly legitimate package name (see `reflect`)
    as long as it captures both context and the essence of what it does. Again, keep
    things simple. Avoid the temptation of nesting your packages beyond a depth of
    more than three inside your namespace. This temptation will be especially strong
    if you are a Java developer used to long nested package names.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意包深度为一的包名是完全合法的（参见 `reflect`），只要它捕捉到了上下文以及其本质功能。再次强调，保持简单。避免在命名空间内将包嵌套超过三层。如果你是一个习惯于长嵌套包名的
    Java 开发者，这种诱惑将特别强烈。
- en: Use short names
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用短名称
- en: When reviewing the names of built-in Go packages, one thing you will notice
    is the brevity of the names compared to other languages. In Go, a package is considered
    to be a collection of code that implements a specific set of closely related functionalities.
    As such, the import paths of your packages should be succinct and reflect what
    they do without being excessively long. Our example source code exemplifies this
    by naming the package directory with short names such as volt, power, resistance,
    current. In their respective contexts, each directory name states exactly what
    the package does.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当审查内置 Go 包的名称时，你会注意到与其他语言相比，名称的简洁性。在 Go 中，一个包被认为是一组实现一组紧密相关功能的代码集合。因此，你的包的导入路径应该是简洁的，并反映它们的功能，而不要过长。我们的示例源代码通过使用如
    volt、power、resistance、current 等简短名称来命名包目录来体现这一点。在各自的上下文中，每个目录名称都明确说明了包的功能。
- en: 'The short name rule is rigorously applied in the built-in packages of Go. For
    instance, following are several package names from Go''s built-in packages: `log`,
    `http`, `xml`, and `zip`. Each name readily identifies the purpose of the package.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Go 的内置包中严格遵循简短名称规则。例如，以下是从 Go 的内置包中选取的几个包名：`log`、`http`、`xml` 和 `zip`。每个名称都能清楚地标识包的用途。
- en: Note
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Short package names have the advantage of reducing keystrokes in larger code
    bases. However, having short and generic package names also has the disadvantage
    of being prone to import path clashes where developers in a large project (or
    developers of open source libraries) may end up using the same popular names (in
    other words, `log`, `util`, `db`, and so on) in their code. As we will see later
    in the chapter, this can be handled using `named` import paths.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 简短的包名在大型代码库中有减少按键次数的优势。然而，短且通用的包名也有缺点，即容易发生导入路径冲突。在大项目（或开源库的开发者）中，开发者可能会最终在他们的代码中使用相同的流行名称（换句话说，`log`、`util`、`db`
    等等）。正如我们在本章后面将要看到的，这可以通过使用 `named` 导入路径来处理。
