- en: Package visibility
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包可见性
- en: 'Regardless of the number of source files declared to be part of a package,
    all source code elements (types, variables, constants, and functions), declared
    at a package level, share a common scope. Therefore, the compiler will not allow
    an element identifier to be re-declared more than once in the entire package.
    Let us use the following code snippets to illustrate this point, assuming both
    source files are part of the same package `$GOPATH/src/foo`:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 无论声明为包一部分的源文件数量有多少，所有在包级别声明的源代码元素（类型、变量、常量和函数）都共享一个公共作用域。因此，编译器不会允许在包的整个范围内重复声明元素标识符。让我们使用以下代码片段来说明这一点，假设这两个源文件都是同一包
    `$GOPATH/src/foo` 的一部分：
- en: '|'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: foo/file1.go |
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: foo/file1.go |
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: foo/file2.go |
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: foo/file2.go |
- en: Illegal variable identifier re-declaration
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 非法变量标识符重新声明
- en: Although they are in two separate files, the declaration of variables with identifier
    `bar` is illegal in Go. Since the files are part of the same package, both identifiers
    have the same scope and therefore clash.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然它们位于两个不同的文件中，但在 Go 中，使用标识符 `bar` 声明变量是非法的。由于文件是同一包的一部分，这两个标识符具有相同的作用域，因此会发生冲突。
- en: 'The same is true for function identifiers. Go does not support the overloading
    of function names within the same scope. Therefore, it is illegal to have a function
    identifier used more than once, regardless of the function''s signature. If we
    assume the following code appears in two different source files within the same
    package, the following snippet would be illegal:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于函数标识符来说，情况也是一样的。Go 不支持在同一作用域内重载函数名。因此，无论函数的签名如何，重复使用函数标识符都是非法的。如果我们假设以下代码出现在同一包内的两个不同源文件中，以下片段将是非法的：
- en: '|'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: foo/file1.go |
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: foo/file1.go |
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: foo/file1.go |
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: foo/file1.go |
- en: Illegal function identifier re-declaration
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 非法函数标识符重新声明
- en: In the previous code snippets, function name identifier `qux` is used twice.
    The compiler will fail the compilation even though both functions have different
    signatures. The only way to fix this is to change the name.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，函数名标识符 `qux` 被使用了两次。即使两个函数有不同的签名，编译器也会失败编译。唯一修复这个问题的方式是更改名称。
