- en: Package visibility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Regardless of the number of source files declared to be part of a package,
    all source code elements (types, variables, constants, and functions), declared
    at a package level, share a common scope. Therefore, the compiler will not allow
    an element identifier to be re-declared more than once in the entire package.
    Let us use the following code snippets to illustrate this point, assuming both
    source files are part of the same package `$GOPATH/src/foo`:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: foo/file1.go |
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: foo/file2.go |
  prefs: []
  type: TYPE_NORMAL
- en: Illegal variable identifier re-declaration
  prefs: []
  type: TYPE_NORMAL
- en: Although they are in two separate files, the declaration of variables with identifier
    `bar` is illegal in Go. Since the files are part of the same package, both identifiers
    have the same scope and therefore clash.
  prefs: []
  type: TYPE_NORMAL
- en: 'The same is true for function identifiers. Go does not support the overloading
    of function names within the same scope. Therefore, it is illegal to have a function
    identifier used more than once, regardless of the function''s signature. If we
    assume the following code appears in two different source files within the same
    package, the following snippet would be illegal:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: foo/file1.go |
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: foo/file1.go |
  prefs: []
  type: TYPE_NORMAL
- en: Illegal function identifier re-declaration
  prefs: []
  type: TYPE_NORMAL
- en: In the previous code snippets, function name identifier `qux` is used twice.
    The compiler will fail the compilation even though both functions have different
    signatures. The only way to fix this is to change the name.
  prefs: []
  type: TYPE_NORMAL
