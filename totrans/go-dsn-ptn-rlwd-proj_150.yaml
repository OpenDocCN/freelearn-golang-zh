- en: Package member visibility
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包成员可见性
- en: 'The usefulness of a package is its ability to expose its source elements to
    other packages. Controlling the visibility of elements of a package is simple
    and follows this rule: *capitalized identifiers are exported automatically*. This
    means any type, variable, constant, or function with capitalized identifiers is
    automatically visible from outside of the package where it is declared.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 包的有用之处在于其能够将其源元素暴露给其他包。控制包元素的可见性很简单，遵循以下规则：*首字母大写的标识符会自动导出*。这意味着任何具有首字母大写标识符的类型、变量、常量或函数都会在声明它的包外部自动可见。
- en: 'Referring to the Ohm''s Law example, described earlier, the following illustrates
    this functionality from the package `resistor` (found in [github.com/vladimirvivien/learning-go/ch06/resistor](https://github.com/vladimirvivien/learning-go/ch06/resistor)):'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 参考前面描述的欧姆定律示例，以下展示了来自 `resistor` 包（位于 [github.com/vladimirvivien/learning-go/ch06/resistor](https://github.com/vladimirvivien/learning-go/ch06/resistor)）的功能：
- en: '| **Code** | **Description** |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| **代码** | **描述** |'
- en: '|'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '| Function `R` is automatically exported and can be accessed from other packages
    as: `resistor.R()` |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| 函数 `R` 会自动导出，可以从其他包中通过以下方式访问：`resistor.R()` |'
- en: '|'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '| Function identifier `recip` is in all lowercase and therefore is not exported.
    Though accessible within its own scope, the function will not be visible from
    within other packages. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| 函数标识符 `recip` 全部小写，因此不会被导出。尽管在其作用域内可访问，但该函数在其他包中不可见。|'
- en: It is worth restating that members within the same package are always visible
    to each other. In Go, there are no complicated visibility structures of private,
    friend, default, and so on, as is found in other languages. This frees the developer
    to concentrate on the solution being implemented rather than modeling visibility
    hierarchies.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 值得重申的是，同一包内的成员总是相互可见。在 Go 语言中，没有像其他语言中那样的复杂可见性结构，如私有、友元、默认等。这使开发者能够专注于实现解决方案，而不是构建可见性层次结构。
