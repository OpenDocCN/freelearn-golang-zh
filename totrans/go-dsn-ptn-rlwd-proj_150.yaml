- en: Package member visibility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The usefulness of a package is its ability to expose its source elements to
    other packages. Controlling the visibility of elements of a package is simple
    and follows this rule: *capitalized identifiers are exported automatically*. This
    means any type, variable, constant, or function with capitalized identifiers is
    automatically visible from outside of the package where it is declared.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Referring to the Ohm''s Law example, described earlier, the following illustrates
    this functionality from the package `resistor` (found in [github.com/vladimirvivien/learning-go/ch06/resistor](https://github.com/vladimirvivien/learning-go/ch06/resistor)):'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Code** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '| Function `R` is automatically exported and can be accessed from other packages
    as: `resistor.R()` |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '| Function identifier `recip` is in all lowercase and therefore is not exported.
    Though accessible within its own scope, the function will not be visible from
    within other packages. |'
  prefs: []
  type: TYPE_TB
- en: It is worth restating that members within the same package are always visible
    to each other. In Go, there are no complicated visibility structures of private,
    friend, default, and so on, as is found in other languages. This frees the developer
    to concentrate on the solution being implemented rather than modeling visibility
    hierarchies.
  prefs: []
  type: TYPE_NORMAL
