- en: Importing package
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入包
- en: 'At this point, you should have a good understanding of what a package is, what
    it does, and how to create one. Now, let us see how to use a package to import
    and reuse its members. As you will find in several other languages, the keyword
    `import` is used to import source code elements from an external package. It allows
    the importing source to access exported elements found in the imported package
    (see the *Package scope and visibility* section earlier in the chapter). The general
    format for the import clause is as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该已经很好地理解了什么是包，它做什么，以及如何创建一个包。现在，让我们看看如何使用包来导入和重用其成员。正如你将在其他几种语言中发现的那样，关键字
    `import` 用于从外部包导入源代码元素。它允许导入的源访问在导入的包中找到的导出元素（参见本章前面的 *包作用域和可见性* 部分）。导入子句的一般格式如下：
- en: '*import [package name identifier] "<import path>"*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*导入[包名称标识符] "<导入路径>"*'
- en: 'Notice that the import path must be enclosed within double quotes. The `import`
    statement also supports an optional package identifier that can be used to explicitly
    name the imported package (discussed later). The import statement can also be
    written as an import block, as shown in the following format. This is useful where
    there are two or more import packages listed:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，导入路径必须用双引号括起来。`import` 语句还支持一个可选的包标识符，可以用来显式命名导入的包（稍后讨论）。导入语句还可以写成导入块，如下所示格式。当有两个或更多导入包列表时，这很有用：
- en: '*import (*'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*导入(*'
- en: '*[package name identifier] "<import path>"*'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*[包名称标识符] "<导入路径>"*'
- en: '*)*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*)*'
- en: 'The following source code snippet shows the import declaration block in the
    Ohm''s Law examples introduced earlier:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下源代码片段显示了之前介绍的欧姆定律示例中的导入声明块：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch06/main.go
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch06/main.go
- en: 'Often the name identifiers of imported packages are omitted, as done above.
    Go then applies the name of the last directory of the import path as the name
    identifier for the imported package, as shown, for some packages, in the following
    table:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，导入包的名称标识符被省略，如上所示。Go 将导入路径的最后一个目录的名称用作导入包的名称标识符，如下表所示的一些包所示：
- en: '| **Import Path** | **Package name** |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| **导入路径** | **包名** |'
- en: '| `flag` | `flag` |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `flag` | `flag` |'
- en: '| `github.com/vladimirvivien/learning-go/ch06/current` | `current` |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `github.com/vladimirvivien/learning-go/ch06/current` | `current` |'
- en: '| `github.com/vladimirvivien/learning-go/ch06/power/ir` | `ir` |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `github.com/vladimirvivien/learning-go/ch06/power/ir` | `ir` |'
- en: '| `github.com/vladimirvivien/learning-go/ch06/volt` | `volt` |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `github.com/vladimirvivien/learning-go/ch06/volt` | `volt` |'
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: golang.fyi/ch06/main.go
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch06/main.go
