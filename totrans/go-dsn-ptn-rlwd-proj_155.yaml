- en: Package initialization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Go also makes use of a special function named `init` that takes no arguments
    and returns no result values. It is used to encapsulate custom initialization
    logic that is invoked when the package is imported. For instance, the following
    source code shows an `init` function used in the `resistor` package to initialize
    function variable `Rpi`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch06/resistor/res_power.go
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding code, the `init` function is invoked after the package-level
    variables are initialized. Therefore, the code in the `init` function can safely
    rely on the declared variable values to be in a stable state. The `init` function
    is special in the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: A package can have more than one `init` functions defined
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You cannot directly access declared `init` functions at runtime
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They are executed in the lexical order they appear within each source file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `init` function is a great way to inject logic into a package that gets
    executed prior to any other functions or methods.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
