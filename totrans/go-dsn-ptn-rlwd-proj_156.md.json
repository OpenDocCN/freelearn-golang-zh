["```go\npackage main \nimport ( \n   \"flag\" \n   \"fmt\" \n   \"os\" \n\n   \"github.com/vladimirvivien/learning-go/ch06/current\" \n   \"github.com/vladimirvivien/learning-go/ch06/power\" \n   \"github.com/vladimirvivien/learning-go/ch06/power/ir\" \n   \"github.com/vladimirvivien/learning-go/ch06/power/vr\" \n   res \"github.com/vladimirvivien/learning-go/ch06/resistor\" \n   \"github.com/vladimirvivien/learning-go/ch06/volt\" \n) \n\nvar ( \n   op string \n   v float64 \n   r float64 \n   i float64 \n   p float64 \n\n   usage = \"Usage: ./circ <command> [arguments]\\n\" + \n     \"Valid command { V | Vpi | R | Rvp | I | Ivp |\"+  \n    \"P | Pir | Pvr }\" \n) \n\nfunc init() { \n   flag.Float64Var(&v, \"v\", 0.0, \"Voltage value (volt)\") \n   flag.Float64Var(&r, \"r\", 0.0, \"Resistance value (ohms)\") \n   flag.Float64Var(&i, \"i\", 0.0, \"Current value (amp)\") \n   flag.Float64Var(&p, \"p\", 0.0, \"Electrical power (watt)\") \n   flag.StringVar(&op, \"op\", \"V\", \"Command - one of { V | Vpi |\"+   \n    \" R | Rvp | I | Ivp | P | Pir | Pvr }\") \n} \n\nfunc main() { \n   flag.Parse() \n   // execute operation \n   switch op { \n   case \"V\", \"v\": \n    val := volt.V(i, r) \n    fmt.Printf(\"V = %0.2f * %0.2f = %0.2f volts\\n\", i, r, val) \n   case \"Vpi\", \"vpi\": \n   val := volt.Vpi(p, i) \n    fmt.Printf(\"Vpi = %0.2f / %0.2f = %0.2f volts\\n\", p, i, val) \n   case \"R\", \"r\": \n   val := res.R(v, i)) \n    fmt.Printf(\"R = %0.2f / %0.2f = %0.2f Ohms\\n\", v, i, val) \n   case \"I\", \"i\": \n   val := current.I(v, r)) \n    fmt.Printf(\"I = %0.2f / %0.2f = %0.2f amps\\n\", v, r, val) \n   ... \n   default: \n         fmt.Println(usage) \n         os.Exit(1) \n   } \n} \n\n```"]