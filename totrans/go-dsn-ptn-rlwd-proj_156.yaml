- en: Creating programs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far in the book, you have learned how to create and bundle Go code as reusable
    packages. A package, however, cannot be executed as a standalone program. To create
    a program (also known as a command), you take a package and define an entry point
    of execution as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Declare (at least one) source file to be part of a special package called `main`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declare one function name `main()` to be used as the entry point of the program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The function `main` takes no argument nor returns any value. The following
    shows the abbreviated source code for the `main` package used in the Ohm''s Law
    example (from earlier). It uses the package `flag`, from Go''s standard library,
    to parse program arguments formatted as `flag`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch06/main.go
  prefs: []
  type: TYPE_NORMAL
- en: The previous listing shows the source code of the `main` package and the implementation
    of the function `main` which gets executed when the program runs. The Ohm's Law
    program accepts command-line arguments that specify which electrical operation
    to execute (see the following *Accessing program arguments* section). The function
    `init` is used to initialize parsing of the program flag values. The function
    main is set up as a big switch statement block to select the proper operation
    to execute based on the selected flags.
  prefs: []
  type: TYPE_NORMAL
