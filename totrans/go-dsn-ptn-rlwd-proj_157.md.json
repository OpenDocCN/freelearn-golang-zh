["```go\npackage main \nimport ( \n   \"fmt\" \n   \"os\" \n) \n\nfunc main() { \n   for _, arg := range os.Args { \n         fmt.Println(arg) \n   } \n} \n\n```", "```go\n$> go run hello.go hello world how are you?\n/var/folders/.../exe/hello\nhello\nworld\nhow\nare\nyou?\n\n```", "```go\nvar ( \n   op string \n   v float64 \n   r float64 \n   i float64 \n   p float64 \n) \n\nfunc init() { \n   flag.Float64Var(&v, \"v\", 0.0, \"Voltage value (volt)\") \n   flag.Float64Var(&r, \"r\", 0.0, \"Resistance value (ohms)\") \n   flag.Float64Var(&i, \"i\", 0.0, \"Current value (amp)\") \n   flag.Float64Var(&p, \"p\", 0.0, \"Electrical power (watt)\") \n   flag.StringVar(&op, \"op\", \"V\", \"Command - one of { V | Vpi |\"+   \n    \" R | Rvp | I | Ivp | P | Pir | Pvr }\") \n} \nfunc main(){ \n  flag.Parse() \n  ... \n} \n\ninit used to parse and initialize expected flags \"v\", \"i\", \"p\", and \"op\" (at runtime, each flag is prefixed with a minus sign). The initialization functions in package flag sets up the expected type, the default value, a flag description, and where to store the parsed value for the flag. The flag package also supports the special flag \"help\", used to provide helpful hints about each flag.\n```", "```go\n$> go run main.go -op I -v 12 -r 300\nI = 12.00 / 300.00 = 0.04 amps\n\n```"]