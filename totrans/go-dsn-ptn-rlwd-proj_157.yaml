- en: Accessing program arguments
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问程序参数
- en: 'When a program is executed, the Go runtime makes all command-line arguments
    available as a slice via package variable `os.Args`. For instance, when the following
    program is executed, it prints all command-line arguments passed to the program:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个程序执行时，Go 运行时会通过包变量 `os.Args` 将所有命令行参数作为一个切片提供。例如，当以下程序执行时，它会打印出传递给程序的 所有命令行参数：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch06-args/hello.go
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch06-args/hello.go
- en: 'The following is the output of the program when it is invoked with the shown
    arguments:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在使用所示参数调用程序时的输出：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that the command-line argument `"hello world how are you?"`, placed after
    the program's name, is split as a space-delimited string. Position 0 in slice
    `os.Args` holds the fully qualified name of the program's binary path. The rest
    of the slice stores each item in the string respectively.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，放置在程序名称之后的命令行参数 `"hello world how are you?"` 被作为一个空格分隔的字符串分割。切片 `os.Args`
    中的位置 0 保存了程序二进制路径的完全限定名称。切片的其余部分分别存储字符串中的每个项目。
- en: 'The `flag` package, from Go''s standard library, uses this mechanism internally
    to provide processing of structured command-line arguments known as flags. In
    the Ohm''s Law example listed earlier, the `flag` package is used to parse several
    flags, as listed in the following source snippet (extracted from the full listing
    earlier):'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Go 标准库中的 `flag` 包内部使用此机制来提供对称为标志的结构化命令行参数的处理。在前面列出的欧姆定律示例中，`flag` 包用于解析以下源代码片段中列出的几个标志（从前面较早的完整列表中提取）：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`flag.Parse()`, in the function `main`, is used to start the process of parsing
    any flags provided as command-line. For instance, to calculate the current of
    a circuit with 12 volts and 300 ohms, the program takes three flags and produces
    the shown output:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `main` 函数中，`flag.Parse()` 用于启动解析任何作为命令行提供的标志的过程。例如，为了计算一个 12 伏特和 300 欧姆电路的电流，程序需要三个标志并生成以下输出：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
