- en: Accessing program arguments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When a program is executed, the Go runtime makes all command-line arguments
    available as a slice via package variable `os.Args`. For instance, when the following
    program is executed, it prints all command-line arguments passed to the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch06-args/hello.go
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the output of the program when it is invoked with the shown
    arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note that the command-line argument `"hello world how are you?"`, placed after
    the program's name, is split as a space-delimited string. Position 0 in slice
    `os.Args` holds the fully qualified name of the program's binary path. The rest
    of the slice stores each item in the string respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `flag` package, from Go''s standard library, uses this mechanism internally
    to provide processing of structured command-line arguments known as flags. In
    the Ohm''s Law example listed earlier, the `flag` package is used to parse several
    flags, as listed in the following source snippet (extracted from the full listing
    earlier):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`flag.Parse()`, in the function `main`, is used to start the process of parsing
    any flags provided as command-line. For instance, to calculate the current of
    a circuit with 12 volts and 300 ohms, the program takes three flags and produces
    the shown output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
