- en: Building and installing programs
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建 和 安装 程序
- en: Building and installing Go programs follow the exact same procedures as building
    a regular package (as was discussed earlier in the *Building and installing packages*
    section). When you build source files of an executable Go program, the compiler
    will generate an executable binary file by transitively linking all the decencies
    declared in the `main` package. The build tool will name the output binary, by
    default the same name as the directory where the Go program source files are located.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 构建 和 安装 Go 程序遵循与构建常规包完全相同的程序（如在前面的 *构建和安装包* 部分所述）。当你构建可执行 Go 程序的源文件时，编译器将通过传递链接
    `main` 包中声明的所有依赖项来生成一个可执行的可执行二进制文件。构建工具将默认以 Go 程序源文件所在的目录名命名输出二进制文件。
- en: 'For instance, in the Ohm''s Law example, the file `main.go`, which is located
    in the directory `github.com/vladimirvivien/learning-go/ch06`, is declared to
    be part of the `main` package. The program can be built as shown in the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在欧姆定律的示例中，位于 `github.com/vladimirvivien/learning-go/ch06` 目录下的 `main.go`
    文件被声明为 `main` 包的一部分。程序可以按照以下方式构建：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When the `main.go` source file is built, the build tool will generate a binary
    named `ch06` because the source code for the program is located in a directory
    with that name. You can control the name of the binary using the output flag `-o`.
    In the following example, the build tool creates a binary file named `ohms`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当构建 `main.go` 源文件时，构建工具将生成一个名为 `ch06` 的二进制文件，因为程序的源代码位于具有该名称的目录中。你可以使用输出标志 `-o`
    控制二进制文件的名称。在以下示例中，构建工具创建了一个名为 `ohms` 的二进制文件。
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Lastly, installing a Go program is done in exactly the same way as installing
    a regular package using the Go `install` command:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，安装 Go 程序的方式与使用 Go `install` 命令安装常规包的方式完全相同：
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When a program is installed using the Go install command, it will be built,
    if necessary, and its generated binary will be saved in the `$GOPAHT/bin` directory.
    Adding the workspace `bin` directory to your OS's `$PATH` environment variable
    will make your Go program available for execution.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 Go install 命令安装程序时，如果需要，它将被构建，其生成的二进制文件将被保存在 `$GOPATH/bin` 目录中。将工作区 `bin`
    目录添加到你的操作系统的 `$PATH` 环境变量中，将使你的 Go 程序可用于执行。
- en: Note
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Go-generated programs are statically linked binaries. They require no additional
    dependencies to be satisfied to run. However, Go-compiled binaries include the
    Go runtime. This is the set of operations that handle functionalities such as
    garbage collection, type information, reflection, goroutines scheduling, and panic
    management. While a comparable C program would be order of magnitudes smaller,
    Go's runtime comes with the tools that make Go enjoyable.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Go 生成的程序是静态链接的二进制文件。它们在运行时不需要满足任何额外的依赖项。然而，Go 编译的二进制文件包括 Go 运行时。这是一组处理垃圾回收、类型信息、反射、goroutine
    调度以及恐慌管理的操作。虽然一个类似的 C 程序可能要小得多，但 Go 的运行时附带了一些使 Go 令人愉悦的工具。
