- en: Building and installing programs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Building and installing Go programs follow the exact same procedures as building
    a regular package (as was discussed earlier in the *Building and installing packages*
    section). When you build source files of an executable Go program, the compiler
    will generate an executable binary file by transitively linking all the decencies
    declared in the `main` package. The build tool will name the output binary, by
    default the same name as the directory where the Go program source files are located.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, in the Ohm''s Law example, the file `main.go`, which is located
    in the directory `github.com/vladimirvivien/learning-go/ch06`, is declared to
    be part of the `main` package. The program can be built as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When the `main.go` source file is built, the build tool will generate a binary
    named `ch06` because the source code for the program is located in a directory
    with that name. You can control the name of the binary using the output flag `-o`.
    In the following example, the build tool creates a binary file named `ohms`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, installing a Go program is done in exactly the same way as installing
    a regular package using the Go `install` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When a program is installed using the Go install command, it will be built,
    if necessary, and its generated binary will be saved in the `$GOPAHT/bin` directory.
    Adding the workspace `bin` directory to your OS's `$PATH` environment variable
    will make your Go program available for execution.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go-generated programs are statically linked binaries. They require no additional
    dependencies to be satisfied to run. However, Go-compiled binaries include the
    Go runtime. This is the set of operations that handle functionalities such as
    garbage collection, type information, reflection, goroutines scheduling, and panic
    management. While a comparable C program would be order of magnitudes smaller,
    Go's runtime comes with the tools that make Go enjoyable.
  prefs: []
  type: TYPE_NORMAL
