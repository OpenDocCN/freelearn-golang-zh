- en: Summary
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter presented an extensive look into the notion of source code organization
    and packages. Readers learned about the Go workspace and the import path. Readers
    were also introduced to the creation of packages and how to import packages to
    achieve code reusability. The chapter introduced mechanisms such as visibility
    of imported members and package initialization. The last portion of the chapter
    discussed the steps that are necessary to create an executable Go program from
    packaged code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章深入探讨了源代码组织和包的概念。读者了解了Go工作空间和导入路径。读者还学习了如何创建包以及如何导入包以实现代码复用。本章介绍了诸如导入成员的可见性和包初始化等机制。章节的最后部分讨论了从打包代码创建可执行Go程序所需的步骤。
- en: This was a lengthy chapter, and deservedly so to do justice to such a broad
    topic as package creation and management in Go. The next chapter returns to the
    Go types discussion with a detailed treatment of the composite types, such as
    array, slice, struct, and map.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一章篇幅较长的内容，这是对Go中包的创建和管理这样广泛主题的公正对待。下一章将回到Go类型讨论，详细介绍了复合类型，如数组、切片、结构体和映射。
