- en: The array type
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组类型
- en: 'As you would find in other languages, Go arrays are containers for storing
    sequenced values of the same type that are numerically indexed. The following
    code snippet shows samples of variables that are assigned array types:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在其他语言中会发现的那样，Go 数组是用于存储相同类型数值索引的序列值的容器。以下代码片段显示了被分配数组类型的变量示例：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch07/arrtypes.go
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch07/arrtypes.go
- en: 'Notice the types that are assigned to each variable in the previous example
    are specified using the following type format:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在上一个示例中分配给每个变量的类型是使用以下类型格式指定的：
- en: '*[<length>]<element_type>*'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*[<长度>]<元素类型>*'
- en: 'The type definition of an array is composed of its length, enclosed within
    brackets, followed by the type of its stored elements. For instance, the `days`
    variable is assigned a type `[7]string`. This is an important distinction as Go''s
    type system considers two arrays, storing the same type of elements but with different
    lengths, to be of different types. The following code illustrates this situation:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的类型定义由其长度组成，长度用括号括起来，后跟存储元素的类型。例如，`days` 变量被分配了一个类型 `[7]string`。这是一个重要的区别，因为
    Go 的类型系统认为存储相同类型元素但长度不同的两个数组是不同类型的。以下代码说明了这种情况：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Even though both variables are arrays with elements of type `string`, the type
    system considers the `days` and `weekdays` variables as different types.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这两个变量都是类型为 `string` 的数组，但类型系统认为 `days` 和 `weekdays` 变量是不同类型的。
- en: Note
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Later in the chapter, you will see how this type restriction is mitigated with
    the use of the slice type instead of arrays.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后面部分，您将看到如何使用切片类型而不是数组来减轻这种类型限制。
- en: 'Array types can be defined to be multi-dimensions. This is done by combining
    and nesting the definition of one-dimensional array types as shown in the following
    snippet:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将数组类型定义为多维的。这通过组合和嵌套一维数组类型的定义来实现，如下面的代码片段所示：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: golang.fyi/ch07/arrtypes.go
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch07/arrtypes.go
- en: Go does not have a separate type for multi-dimensional arrays. An array with
    more than one dimension is composed of one-dimensional arrays that are nested
    within each other. The next section covers how single and multi-dimensional arrays
    are initialized.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Go 没有单独的多维数组类型。一个具有多个维度的数组是由嵌套在彼此内部的一维数组组成的。下一节将介绍如何初始化单维和多维数组。
