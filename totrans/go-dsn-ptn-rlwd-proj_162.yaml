- en: The array type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you would find in other languages, Go arrays are containers for storing
    sequenced values of the same type that are numerically indexed. The following
    code snippet shows samples of variables that are assigned array types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch07/arrtypes.go
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice the types that are assigned to each variable in the previous example
    are specified using the following type format:'
  prefs: []
  type: TYPE_NORMAL
- en: '*[<length>]<element_type>*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The type definition of an array is composed of its length, enclosed within
    brackets, followed by theÂ type of its stored elements. For instance, the `days`
    variable is assigned a type `[7]string`. This is an important distinction as Go''s
    type system considers two arrays, storing the same type of elements but with different
    lengths, to be of different types. The following code illustrates this situation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Even though both variables are arrays with elements of type `string`, the type
    system considers the `days` and `weekdays` variables as different types.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Later in the chapter, you will see how this type restriction is mitigated with
    the use of the slice type instead of arrays.
  prefs: []
  type: TYPE_NORMAL
- en: 'Array types can be defined to be multi-dimensions. This is done by combining
    and nesting the definition of one-dimensional array types as shown in the following
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch07/arrtypes.go
  prefs: []
  type: TYPE_NORMAL
- en: Go does not have a separate type for multi-dimensional arrays. An array with
    more than one dimension is composed of one-dimensional arrays that are nested
    within each other. The next section covers how single and multi-dimensional arrays
    are initialized.
  prefs: []
  type: TYPE_NORMAL
