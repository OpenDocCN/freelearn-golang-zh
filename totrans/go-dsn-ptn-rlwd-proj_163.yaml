- en: Array initialization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When an array variable is not explicitly initialized, all of its elements will
    be assigned the zero-value for the declared type of the elements. An array can
    be initialized with a composite literal value with the following general format:'
  prefs: []
  type: TYPE_NORMAL
- en: '*<array_type>{<comma-separated list of element values>}*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The literal value for an array is composed of the array type definition (discussed
    in the previous section) followed by a set of comma-separated values, enclosed
    in curly brackets, as illustrated by the following code snippet, which shows several
    arrays being declared and initialized:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch07/arrinit.go
  prefs: []
  type: TYPE_NORMAL
- en: 'The number of elements in the literal must be less than or equal to the size
    declared in the array type. If the array defined is multi-dimensional, it can
    be initialized using literal values by nesting each dimension within the enclosing
    brackets of another, as shown in the following example snippets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The literal value of an array can also be indexed. This is useful if you want
    to initialize only certain array elements while allowing others to be initialized
    with their natural zero-value. The following specifies the initial values for
    elements at positions 0, `2`, `4`, `6`, `8`. The remaining elements will be assigned
    the empty string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
