- en: Using arrays
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用数组
- en: Arrays are static entities that cannot grow or shrink in size once they are
    declared with a specified length. Arrays are a great option when a program needs
    to allocate a block of sequential memory of a predefined size. When a variable
    of an array type is declared, it is ready to be used without any further allocation
    semantics.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 数组是静态实体，一旦声明了指定长度后，其大小就不能增长或缩小。当程序需要分配一个预定义大小的连续内存块时，数组是一个很好的选择。当声明一个数组类型的变量时，它就准备好使用，无需任何进一步的分配语义。
- en: 'So the following declaration of the `image` variable would allocate a memory
    block composed of 256 adjacent `int` values initialized with zeroes, as shown
    in the following figure:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，以下对`image`变量的声明将分配一个由256个相邻的`int`值组成的内存块，这些值被初始化为零，如图所示：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Using arrays](img/00015.jpeg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![使用数组](img/00015.jpeg)'
- en: 'Similar to C and Java, Go uses the square brackets index expression to access
    values stored in an array variable. This is done by specifying the variable identifier
    followed by an index of the element enclosed within the square brackets, as shown
    in the following code sample:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 与C和Java类似，Go使用方括号索引表达式来访问存储在数组变量中的值。这是通过指定变量标识符后跟方括号内元素的索引来完成的，如下面的代码示例所示：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The previous code updates the fifth element and prints the first element in
    the array.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码更新了数组的第五个元素，并打印出数组中的第一个元素。
