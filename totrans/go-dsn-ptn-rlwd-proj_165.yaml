- en: Using arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Arrays are static entities that cannot grow or shrink in size once they are
    declared with a specified length. Arrays are a great option when a program needs
    to allocate a block of sequential memory of a predefined size. When a variable
    of an array type is declared, it is ready to be used without any further allocation
    semantics.
  prefs: []
  type: TYPE_NORMAL
- en: 'So the following declaration of the `image` variable would allocate a memory
    block composed of 256 adjacent `int` values initialized with zeroes, as shown
    in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Using arrays](img/00015.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Similar to C and Java, Go uses the square brackets index expression to access
    values stored in an array variable. This is done by specifying the variable identifier
    followed by an index of the element enclosed within the square brackets, as shown
    in the following code sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The previous code updates the fifth element and prints the first element in
    the array.
  prefs: []
  type: TYPE_NORMAL
