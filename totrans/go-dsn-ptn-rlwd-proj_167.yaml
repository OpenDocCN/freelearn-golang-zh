- en: Array traversal
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组遍历
- en: '[PRE0]'
  id: totrans-1
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: golang.fyi/ch07/arrmax_iter.go
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch07/arrmax_iter.go
- en: In the traditional `for` statement, the loop's index variable `i` is used to
    access the value of the array using the index expression `num[i]`. In the `for…range`
    statement, in the `max` function, the iterated value is stored in the `val` variable
    with each pass of the loop and the index is ignored (assigned to the blank identifier).
    If you do not understand how *for* statements work, refer to [Chapter 3](part0022_split_000.html#KVCC1-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Chapter 3. Go Control Flow"), *Go Control Flow*, for a thorough explanation of
    the mechanics of loops in Go.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的 `for` 循环语句中，循环的索引变量 `i` 用于通过索引表达式 `num[i]` 访问数组的值。在 `for…range` 循环语句中，在
    `max` 函数中，每次循环迭代值被存储在 `val` 变量中，而索引被忽略（赋值给空标识符）。如果你不明白 `for` 语句是如何工作的，请参考[第3章](part0022_split_000.html#KVCC1-9c484ed022e64a0fb0e1aebf8e05d4fd
    "第3章。Go控制流")，*Go控制流*，以获得Go中循环机制的详细解释。
