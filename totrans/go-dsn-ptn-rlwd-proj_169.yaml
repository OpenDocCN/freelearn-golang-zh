- en: The slice type
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 切片类型
- en: 'The slice type is commonly used as the idiomatic construct for indexed data
    in Go. The slice is more flexible and has many more interesting characteristics
    than arrays. The slice itself is a composite type with semantics similar to arrays.
    In fact, a slice uses an array as its underlying data storage mechanism. The general
    form of a slice type is given as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 切片类型在Go中通常用作索引数据的惯用构造。切片比数组更灵活，并且具有许多更多有趣的特征。切片本身是一个复合类型，其语义类似于数组。实际上，切片使用数组作为其底层数据存储机制。切片类型的通用形式如下所示：
- en: '*[ ]<element_type>*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*[ ]<element_type>*'
- en: 'The one obvious difference between a slice and an array type is omission of
    the size in the type declaration, as shown in the following examples:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 切片类型与数组类型之间一个明显的区别在于类型声明中省略了大小，如下面的示例所示：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch07/slicetypes.go
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch07/slicetypes.go
- en: 'The missing size attribute in the slice type indicates the following:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 切片类型中缺失的大小属性表示以下内容：
- en: Unlike arrays, the size of a slice is not fixed
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与数组不同，切片的大小不是固定的
- en: A slice type represents all sets of the specified element type
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切片类型代表所有指定元素类型的集合
- en: This means a slice can theoretically grow unbounded (though in practice this
    is not true as the slice is backed by an underlying bounded array). A slice of
    a given element type is considered to be the same type regardless of its underlying
    size. This removes the restriction found in arrays where the size determines the
    type.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着切片在理论上可以无限制地增长（尽管在实际中并不如此，因为切片由一个底层的有界数组支持）。给定元素类型的切片被认为与其实际大小无关，属于同一类型。这消除了数组中存在的限制，即大小决定了类型。
- en: 'For instance, the following variables, `months` and `q1`, have the same type
    of `[]string` and will compile with no problem:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下变量`months`和`q1`具有相同的`[]string`类型，并且可以无问题编译：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: golang.fyi/ch07/slicetypes.go
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch07/slicetypes.go
- en: 'Similar to arrays, slice types may be nested to create multi-dimensional slices,
    as shown in the following code snippet. Each dimension can independently have
    its own size and must be initialized individually:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 与数组类似，切片类型可以嵌套以创建多维切片，如下面的代码片段所示。每个维度可以独立地有自己的大小，并且必须单独初始化：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
