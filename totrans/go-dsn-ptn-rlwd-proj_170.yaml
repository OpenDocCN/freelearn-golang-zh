- en: Slice initialization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A slice is represented by the type system as a value (the next section explores
    the internal representation of a slice). However, unlike the array type, an uninitialized
    slice has a zero value of *nil*, which means any attempt to access elements of
    an uninitialized slice will cause a program to panic.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the simplest ways to initialize a slice is with a composite literal
    value using the following format (similar to an array):'
  prefs: []
  type: TYPE_NORMAL
- en: '*<slice_type>{<comma-separated list of element values>}*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The literal value for a slice is composed of the slice type followed by a set
    of comma-separated values, enclosed in curly brackets, that are assigned to the
    elements of the slice. The following code snippet illustrates several slice variables
    initialized with composite literal values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch07/sliceinit.go
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned, the composite literal value of a slice is expressed using a similar
    form as the array. However, the number of elements provided in the literal is
    not bounded by a fixed size. This implies that the literal can be as large as
    needed. Under the cover though, Go creates and manages an array of appropriate
    size to store the values expressed in the literal.
  prefs: []
  type: TYPE_NORMAL
