- en: Slice representation
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 切片表示
- en: 'Earlier it was mentioned that the slice value uses an underlying array to store
    data. The name *slice*, in fact, is a reference to a slice of data segment from
    the array. Internally, a slice is represented by a composite value with the followings
    three attributes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 之前提到，切片值使用底层数组来存储数据。实际上，“切片”这个名字是指从数组中数据段的一个切片。内部，切片由以下三个属性组成的复合值表示：
- en: '| **Attribute** | **Description** |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '| **属性** | **描述** |'
- en: '| a *pointer* | The pointer is the address of the first element of the slice
    stored in an underlying array. When the slice value is uninitialized, its pointer
    value is nil, indicating that it is not pointing to an array yet.Go uses the pointer
    as the zero value of the slice itself. An uninitialized slice will return nil
    as its zero value. However, the slice value is not treated as a reference value
    by the type system. This means certain functions can be applied to a nil slice
    while others will cause a panic.Once a slice is created, the pointer does not
    change. To point to a different starting point, a new slice must be created. |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 指针 *pointer* | 指针是存储在底层数组中切片的第一个元素地址。当切片值未初始化时，其指针值为nil，表示它尚未指向一个数组。Go使用指针作为切片本身的零值。未初始化的切片将返回nil作为其零值。然而，切片值在类型系统中不被视为引用值。这意味着某些函数可以应用于nil切片，而其他函数将导致panic。一旦创建切片，指针就不会改变。要指向不同的起始点，必须创建一个新的切片。
    |'
- en: '| a *length* | The length indicates the number of contiguous elements that
    can be accessed starting with the first element. It is a dynamic value that can
    grow up to the capacity of the slice (see capacity next).The length of a slice
    is always less than or equal to its capacity. Attempts to access elements beyond
    the length of a slice, without resizing, will result in a panic. This is true
    even when the capacity is larger than the length. |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| 长度 *length* | 长度表示从第一个元素开始可以访问的连续元素的数量。它是一个动态值，可以增长到切片的容量（见下文容量）。切片的长度始终小于或等于其容量。尝试访问切片长度之外的元素，而不进行大小调整，将导致panic。即使容量大于长度，这也适用。
    |'
- en: '| a *capacity* | The capacity of a slice is the maximum number of elements
    that may be stored in the slice, starting from its first element. The capacity
    of a slice is bounded by the length of the underlying array. |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| 容量 *capacity* | 切片的容量是指切片中可能存储的最大元素数量，从其第一个元素开始。切片的容量受底层数组长度的限制。 |'
- en: 'So, when the following variable `halfyr` is initialized as shown:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当以下变量`halfyr`按如下方式初始化时：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It will be stored in an array of type `[6]string` with a pointer to the first
    element, a length, and a capacity of `6`, as represented graphically in the following
    figure:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 它将被存储在一个类型为`[6]string`的数组中，包含指向第一个元素的指针、长度和容量为`6`，如下面的图形所示：
- en: '![Slice representation](img/00016.jpeg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![切片表示](img/00016.jpeg)'
