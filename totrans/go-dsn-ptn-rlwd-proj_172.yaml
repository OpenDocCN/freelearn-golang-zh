- en: Slicing
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 切片
- en: 'Another way to create a slice value is by slicing an existing array or another
    slice value (or pointers to these values). Go provides an indexing format that
    makes it easy to express the slicing operation, as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种创建切片值的方法是通过切片现有的数组或另一个切片值（或这些值的指针）。Go 提供了一种索引格式，使得表达切片操作变得容易，如下所示：
- en: '*<slice or array value>[<low_index>:<high_index>]*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*<切片或数组值>[<低索引>:<高索引>]*'
- en: The slicing expression uses the [`:`] operator to specify the low and high bound
    indices, separated by a colon, for the slice segment.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 切片表达式使用 `[:]` 操作符来指定低和高界索引，它们通过冒号分隔，用于切片段。
- en: The *low* value is the zero-based index where the slice segment starts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*低* 值是切片段开始的零基于索引'
- en: The *high* value is the *n^(th)* element offset where the segment stops
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*高* 值是切片段停止的 *n^(th)* 元素偏移'
- en: 'The following table shows examples of slice expressions by re-slicing the following
    value: `halfyr := []string{"Jan","Feb","Mar","Apr","May","Jun"}`.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 下表通过重新切片以下值展示了切片表达式的示例：`halfyr := []string{"Jan","Feb","Mar","Apr","May","Jun"}`。
- en: '| **Expression** | **Description** |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| **表达式** | **描述** |'
- en: '| `all := halfyr[:]` | Omitting the low and high indices in the expression
    is equivalent to the following:`all := halfyr[0 : 6]`This produces a new slice
    segment equal to the original, which starts at index position 0 and stops at offset
    position `6`:`["Jan","Feb","Mar","Apr","May","Jun"]` |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| `all := halfyr[:]` | 在表达式中省略低和高索引相当于以下操作：`all := halfyr[0 : 6]` 这将产生一个新的切片段，与原始切片相等，从索引位置
    0 开始，到偏移位置 `6` 结束：`["Jan","Feb","Mar","Apr","May","Jun"]` |'
- en: '| `q1 := halfyr[:3]` | Here the slice expression omits low index value and
    specifies a slice segment length of `3`. It returns new slice, `["Jan","Feb","Mar"]`.
    |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| `q1 := halfyr[:3]` | 在这里，切片表达式省略了低索引值并指定了切片段长度为 `3`。它返回一个新的切片，`["Jan","Feb","Mar"]`。
    |'
- en: '| `q2 := halfyr[3:]` | This creates a new slice segment with the last three
    elements by specifying the staring index position of `3` and omitting the high
    bound index value, which defaults to `6`. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| `q2 := halfyr[3:]` | 通过指定起始索引位置 `3` 并省略高界索引值（默认为 `6`），这创建了一个包含最后三个元素的新切片段。
    |'
- en: '| `mapr := halfyr[2:4]` | To clear any confusion about slicing expressions,
    this example shows how to create a new slice with the months `"Mar"` and `"Apr"`.
    This returns a slice with the value `["Mar","Apr"]`. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| `mapr := halfyr[2:4]` | 为了消除对切片表达式的任何混淆，此示例展示了如何创建一个新的切片，包含月份 `"Mar"` 和 `"Apr"`。这返回一个包含值
    `["Mar","Apr"]` 的切片。 |'
