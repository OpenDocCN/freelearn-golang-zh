- en: Slicing a slice
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 切片切片
- en: 'Slicing an existing slice or array value does not create a new underlying array.
    The new slice creates new pointer location to the underlying array. For instance,
    the following code shows the slicing of the slice value `halfyr` into two additional
    slices:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 切片现有的切片或数组值不会创建一个新的基础数组。新的切片创建新的指针位置指向基础数组。例如，以下代码展示了如何将切片值 `halfyr` 切片成两个额外的切片：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch07/slice_reslice.go
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch07/slice_reslice.go
- en: 'The backing array may have many slices projecting a particular view of its
    data. The following figure illustrates how slicing in the previous code may be
    represented visually:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 支持数组可能有多个切片，它们以特定视图展示其数据。以下图示说明了前面代码中的切片可能如何直观表示：
- en: '![Slicing a slice](img/00017.jpeg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![切片切片](img/00017.jpeg)'
- en: Notice that both slices `q1` and `q2` are pointing to different elements in
    the same underlying array. Slice `q1` has an initial length of `3` with a capacity
    of `6`. This implies `q1` can be resized up to `6` elements in total. Slice `q2`,
    however, has a size of `3` and a capacity of `3` and cannot grow beyond its initial
    size (slice resizing is covered later).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到切片 `q1` 和 `q2` 都指向同一基础数组中的不同元素。切片 `q1` 的初始长度为 `3`，容量为 `6`。这意味着 `q1` 的总容量可以扩展到
    `6` 个元素。然而，切片 `q2` 的大小和容量都是 `3`，并且不能超过其初始大小（切片调整大小将在后面介绍）。
