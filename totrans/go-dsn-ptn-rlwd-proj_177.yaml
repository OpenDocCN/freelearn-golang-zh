- en: Using slices
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用切片
- en: 'The simplest operation to do with a slice value is to access its elements.
    As was mentioned, slices use index notation to access its elements similar to
    arrays. The following example accesses element at index position 0 and updates
    to `15`:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用切片值的最简单操作是访问其元素。正如之前提到的，切片使用索引符号来访问其元素，类似于数组。以下示例访问索引位置为0的元素，并将其更新为`15`：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch07/slice_use.go
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch07/slice_use.go
- en: When the program runs, it prints the updated value using index expression `h[0]`
    to retrieve the value of the item at position `0`. Note that the slice expression
    with only the index number, `h[0]` for instance, returns the value of the item
    at that position. When, however, the expression includes a colon, say `h[2:]`
    or `h[:6]`, that expression returns a new slice.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序运行时，它使用索引表达式`h[0]`打印更新后的值，以检索位置`0`的项的值。请注意，只有索引数字的切片表达式，例如`h[0]`，返回该位置的项的值。然而，当表达式包含冒号，例如`h[2:]`或`h[:6]`时，该表达式返回一个新的切片。
- en: 'Slice traversal can be done using the traditional `for`statement or with the,
    more idiomatic, `for…range` statement as shown in the following code snippets:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用传统的`for`语句或更习惯的`for…range`语句来遍历切片，如下面的代码片段所示：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
