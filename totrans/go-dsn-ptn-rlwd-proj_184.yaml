- en: Map initialization
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地图初始化
- en: Similar to a slice, a map manages an underlying data structure, opaque to its
    user, to store its values. An uninitialized map has a nil zero-value as well.
    Attempts to insert into an uninitialized map will result in a program panic. Unlike
    a slice, however, it is possible to access elements from a nil map, which will
    return the zero value of the element.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 与切片类似，地图管理一个底层的数据结构，对用户来说是透明的，用于存储其值。未初始化的地图也有一个空的零值。尝试向未初始化的地图中插入数据会导致程序崩溃。然而，与切片不同，可以从空地图中访问元素，这将返回元素的零值。
- en: 'Like other composite types, maps may be initialized using a composite literal
    value of the following form:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他复合类型一样，可以使用以下形式的复合字面量值来初始化地图：
- en: '*<map_type>{<comma-separated list of key:value pairs>}*'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*<map_type>{<逗号分隔的键:值对列表>}*'
- en: 'The following snippet shows variable initialization with map composite literals:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了使用地图复合字面量进行变量初始化：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch07/mapinit.go
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch07/mapinit.go
- en: The literal mapped values are specified using a colon-separated pair of key
    and value as shown in the previous example. The type of each key and value pair
    must match that of the declared elements in the map.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如前例所示，使用冒号分隔的键值对指定字面量映射的值。每个键值对的类型必须与地图中声明的元素类型匹配。
