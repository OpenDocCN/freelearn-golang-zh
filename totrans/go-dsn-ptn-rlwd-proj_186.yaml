- en: Using maps
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用映射
- en: '[PRE0]'
  id: totrans-1
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Accessing an element with a given key is done with an index expression, placed
    on the right side of an assignment, as shown in the following example, where the
    value indexed with the `"Mar"` key is assigned the `val` variable:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用给定键访问元素是通过一个索引表达式完成的，该表达式位于赋值符号的右侧，如下例所示，其中使用 `"Mar"` 键索引的值被赋给 `val` 变量：
- en: '[PRE2]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Earlier it was mentioned that accessing a non-existent key will return the
    zero-value for that element. For instance, the previous code would return 0 if
    the element with the key `"Mar"` does not exist in the map. As you can imagine,
    this can be a problem. How would you know whether you are getting an actual value
    or the zero-value? Fortunately, Go provides a way to explicitly test for the absence
    of an element by returning an optional Boolean value as part of the result of
    an index expression, as shown in the following snippet:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 之前提到，访问一个不存在的键将返回该元素的零值。例如，如果具有键 `"Mar"` 的元素不存在于映射中，前面的代码将返回 0。正如你可以想象的那样，这可能会成为一个问题。你如何知道你得到的是实际值还是零值？幸运的是，Go
    提供了一种方法，可以通过返回索引表达式结果的一部分可选布尔值来显式测试元素是否存在，如下面的代码片段所示：
- en: '[PRE3]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
