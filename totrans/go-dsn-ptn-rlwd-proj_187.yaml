- en: Map traversal
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 映射遍历
- en: '[PRE0]'
  id: totrans-1
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: golang.fyi/ch07/map_use.go
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch07/map_use.go
- en: Each iteration returns a key and its associated element value. Iteration order,
    however, is not guaranteed. The internal map iterator may traverse the map in
    a different order with each run of the program. In order to maintain a predictable
    traversal order, keep (or generate) a copy of the keys in a separate structure,
    such as a slice for instance. During traversal, range over the slice of keys to
    traverse in a predictable manner.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 每次迭代都会返回一个键及其关联的元素值。然而，迭代顺序是不确定的。内部映射迭代器可能会在每次程序运行时以不同的顺序遍历映射。为了保持可预测的遍历顺序，请保留（或生成）一个单独结构中的键的副本，例如一个切片。在遍历时，通过遍历键的切片以可预测的方式进行遍历。
- en: Note
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You should be aware that update done to the emitted value during the iteration
    will be lost. Instead, use an index expression, such as `hist[key]` to update
    an element during iteration. For details on `for…range` loop, refer to [Chapter
    3](part0022_split_000.html#KVCC1-9c484ed022e64a0fb0e1aebf8e05d4fd "Chapter 3. Go
    Control Flow"), *Go Control Flow*, for a thorough explanation of Go `for` loops.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该知道，在迭代过程中对发出的值进行的更新将会丢失。相反，您应该使用索引表达式，例如 `hist[key]` 来在迭代过程中更新一个元素。有关 `for…range`
    循环的详细信息，请参阅[第3章](part0022_split_000.html#KVCC1-9c484ed022e64a0fb0e1aebf8e05d4fd
    "第3章。Go控制流")，*Go控制流*，以获得对Go `for` 循环的全面解释。
