- en: Map functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Besides the `make` function, discussed earlier, map types support two additional
    functions discussed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Function** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| len(map) | As with other composite types, the built-in `len()` function returns
    the number of entries in a map. For instance, the following would print **3**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `len` function will return zero for an uninitialized map. |
  prefs: []
  type: TYPE_NORMAL
- en: '| delete(map, key) | The built-in `delete` function deletes an element from
    a given map associated with the provided key. The following code snippet would
    print **2**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Maps as parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Because a map maintains an internal pointer to its backing storage structure,
    all updates to map parameter within a called function will be seen by the caller
    once the function returns. The following sample shows a call to the `remove` function
    to change the content of a map. The passed variable, `hist`, will reflect the
    change once the `remove` function returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch07/map_use.go
  prefs: []
  type: TYPE_NORMAL
