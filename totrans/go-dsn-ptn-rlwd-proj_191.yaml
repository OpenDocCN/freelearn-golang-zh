- en: Struct initialization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to arrays, structs are pure values with no additional underlying storage
    structure. The fields for an uninitialized struct are assigned their respective
    zero values. This means an uninitialized struct requires no further allocation
    and is ready to be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nevertheless, a struct variable can be explicitly initialized using a composite
    literal of the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '*<struct_type>{<positional or named field values>}*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The composite literal value for a struct can be initialized by a set of field
    values specified by their respective positions. Using this approach, all field
    values must be provided, to match their respective declared types, as shown in
    the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch07/structinit.go
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous struct literal, all field values of the `struct` are provided,
    matching their declared field types. Alternatively, the composite literal value
    of a `struct` can be specified using a field indices and their associated value.
    As before, the index (the field name) and its value is separated by a colon, as
    shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch07/structinit.go
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, field values of the composite literal can be selectively specified
    when the index and its value are provided. For instance, in the initialization
    of the `node` variable, the `edge` field is initialized while `weight` is omitted.
  prefs: []
  type: TYPE_NORMAL
