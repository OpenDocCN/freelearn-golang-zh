- en: Structs as parameters
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结构体作为参数
- en: 'Recall that struct variables store actual values. This implies that a new copy
    of a struct value is created whenever a `struct` variable is reassigned or passed
    in as a function parameter. For instance, the following will not update the value
    of name after the call to `updateName()`:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，结构体变量存储实际值。这意味着每当结构体变量被重新赋值或作为函数参数传递时，都会创建结构体值的新副本。例如，以下代码在调用`updateName()`后不会更新`name`的值：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch07/struct_ptr.go
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch07/struct_ptr.go
- en: 'This can be remedied by passing a pointer to the `struct` value of the person
    type, as shown in the following snippet:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过传递`person`类型结构体值的指针来修复，如下面的代码片段所示：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: golang.fyi/ch07/struct_ptr2.go
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch07/struct_ptr2.go
- en: In this version, the `p` variable is declared as `*person` and is initialized
    using the built-in `new()` function. After `updateName()` returns, its changes
    are seen by the calling function.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个版本中，`p`变量被声明为`*person`，并使用内置的`new()`函数进行初始化。在`updateName()`返回后，调用函数可以看到其更改。
