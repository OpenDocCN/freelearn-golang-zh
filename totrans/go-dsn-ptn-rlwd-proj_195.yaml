- en: Field tags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The last topic on structs has to do with field tags. During the definition of
    a `struct` type, optional `string` values may be added to each field declaration.
    The value of the string is arbitrary and it can serve as hints to tools or other
    APIs that use reflection to consume the tags.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following shows a definition of the Person and Address structs that are
    tagged with JSON annotation which can be interpreted by Go''s JSON encoder and
    decoder (found in the standard library):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch07/struct_ptr2.go
  prefs: []
  type: TYPE_NORMAL
- en: Notice the tags are represented as raw string values (wrapped within a pair
    of [PRE1]). The tags are ignored by normal code execution. However, they can be
    collected using Go's reflection API as is done by the JSON library. You will encounter
    more on this subject in [Chapter 10](part0068_split_000.html#20R681-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Chapter 10. Data IO in Go"), *Data IO in Go*, when the book discusses input and
    output streams.
  prefs: []
  type: TYPE_NORMAL
