- en: Field tags
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字段标签
- en: The last topic on structs has to do with field tags. During the definition of
    a `struct` type, optional `string` values may be added to each field declaration.
    The value of the string is arbitrary and it can serve as hints to tools or other
    APIs that use reflection to consume the tags.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 结构体的最后一个主题与字段标签有关。在定义`struct`类型时，可以为每个字段声明添加可选的`string`值。字符串的值是任意的，它可以作为提示，供使用反射来消费标签的工具或其他API使用。
- en: 'The following shows a definition of the Person and Address structs that are
    tagged with JSON annotation which can be interpreted by Go''s JSON encoder and
    decoder (found in the standard library):'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 以下展示了带有JSON注解的Person和Address结构体的定义，这些注解可以被Go的JSON编码器和解码器（位于标准库中）解释：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch07/struct_ptr2.go
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch07/struct_ptr2.go
- en: Notice the tags are represented as raw string values (wrapped within a pair
    of [PRE1]). The tags are ignored by normal code execution. However, they can be
    collected using Go's reflection API as is done by the JSON library. You will encounter
    more on this subject in [Chapter 10](part0068_split_000.html#20R681-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Chapter 10. Data IO in Go"), *Data IO in Go*, when the book discusses input and
    output streams.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，标签被表示为原始字符串值（用一对[PRE1]括起来）。在正常代码执行中，标签被忽略。然而，它们可以通过Go的反射API被收集，正如JSON库所做的那样。你将在[第10章](part0068_split_000.html#20R681-9c484ed022e64a0fb0e1aebf8e05d4fd
    "第10章。Go中的数据输入输出")，*Go中的数据输入输出*中遇到更多关于这个主题的内容，当本书讨论输入和输出流时。
