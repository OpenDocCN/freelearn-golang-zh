- en: Value and pointer receivers
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 值接收器和指针接收器
- en: One aspect of methods that has escaped discussion so far is that receivers are
    normal function parameters. Therefore, they follow the pass-by-value mechanism
    of Go functions. This implies that the invoked method gets a copy of the original
    value from the declared type.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，方法的一个未被讨论的方面是接收器是正常的函数参数。因此，它们遵循Go函数的按值传递机制。这意味着被调用的方法会从声明的类型中获取原始值的副本。
- en: 'Receiver parameters can be passed as either values of or pointers of the base
    type. For instance, the following program shows two methods, `half` and `double`;
    both directly update the value of their respective method receiver parameters,
    `g`:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 接收器参数可以是基类型的值或指针。例如，以下程序显示了两个方法，`half`和`double`；它们都直接更新各自方法接收器参数`g`的值：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch08/receiver_ptr.go
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch08/receiver_ptr.go
- en: 'In the `half` method, the code updates the receiver parameter with `g = gallon(g
    * 0.5)`. As you would expect, this will not update the original declared value,
    but rather the copy stored in the `g` parameter. So, when `gal.half()` is invoked
    in `main`, the original value remains unchanged and the following would print
    `5`:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在`half`方法中，代码使用`g = gallon(g * 0.5)`更新接收器参数。正如你所预期的那样，这不会更新原始声明的值，而是更新存储在`g`参数中的副本。所以，当在`main`中调用`gal.half()`时，原始值保持不变，以下将打印`5`：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Pointer receiver parameters are widely used in Go. This is because they make
    it possible to express object-like primitives that can carry both state and behaviors.
    As the next section shows, pointer receivers, along with other type features,
    are the basis for creating objects in Go.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 指针接收器参数在Go中广泛使用。这是因为它们使得表达具有状态和行为对象原语成为可能。正如下一节所示，指针接收器，连同其他类型特性，是创建Go中对象的基础。
