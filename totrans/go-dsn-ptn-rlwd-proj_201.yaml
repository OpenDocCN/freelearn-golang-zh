- en: The struct as object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Nearly all Go types can play the role of an object by storing states and exposing
    methods that are capable of accessing and modifying those states. The `struct`
    type, however, offers all of the features that are traditionally attributed to
    objects in other languages, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Ability to host methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to be extended via composition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to be sub-typed (with help from the Go `interface` type)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The remainder of the chapter will base its discussion of objects on using the
    `struct` type.
  prefs: []
  type: TYPE_NORMAL
