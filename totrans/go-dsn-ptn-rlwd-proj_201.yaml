- en: The struct as object
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结构体作为对象
- en: 'Nearly all Go types can play the role of an object by storing states and exposing
    methods that are capable of accessing and modifying those states. The `struct`
    type, however, offers all of the features that are traditionally attributed to
    objects in other languages, such as:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有的 Go 类型都可以通过存储状态并暴露能够访问和修改这些状态的方法来扮演对象的角色。然而，`struct` 类型提供了其他语言中传统上归因于对象的全部特性，例如：
- en: Ability to host methods
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够拥有方法
- en: Ability to be extended via composition
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够通过组合进行扩展
- en: Ability to be sub-typed (with help from the Go `interface` type)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够被细分为子类型（借助 Go 的 `interface` 类型）
- en: The remainder of the chapter will base its discussion of objects on using the
    `struct` type.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的剩余部分将基于使用 `struct` 类型来讨论对象。
