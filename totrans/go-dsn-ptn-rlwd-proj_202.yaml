- en: Object composition
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象组合
- en: '[PRE0]'
  id: totrans-1
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Go uses the *composition over inheritance* principle to achieve polymorphism
    using the type embedding mechanism supported by the `struct` type. In Go, there
    is no support for polymorphism via type inheritance. Recall that each type is
    independent and is considered to be different from all others. In fact, the semantics
    in the model above is slightly broken. Types `truck` and `plane` are shown to
    be composed of (or has-a) the `vehicle` type, which does not sound correct. Instead,
    the proper, or at least a more correct, representation would be to show that the
    types `truck` and `plane` *is a* `vehicle` via a subtype relationship. Later in
    the chapter, we will see how this can be achieved using the `interface` type.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Go 语言使用 *组合优于继承* 原则，通过 `struct` 类型支持的类型嵌入机制来实现多态。在 Go 语言中，不支持通过类型继承来实现多态。回想一下，每个类型都是独立的，并且被认为与其他所有类型都不同。实际上，上述模型中的语义有些许错误。类型
    `truck` 和 `plane` 被显示为是由（或具有）`vehicle` 类型组成的，这听起来并不正确。相反，更合适，或者至少更正确的表示方式应该是通过子类型关系来显示类型
    `truck` 和 `plane` *是* `vehicle`。在章节的后面部分，我们将看到如何使用 `interface` 类型来实现这一点。
