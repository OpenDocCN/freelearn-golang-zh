- en: Implementing an interface
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现接口
- en: The interesting aspect of interfaces in Go is how they are implemented and ultimately
    used. Implementing a Go interface is done implicitly. There is no separate element
    or keyword required to indicate the intent of implementation. Any type that defines
    the method set of an `interface` type automatically satisfies its implementation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go语言中，接口的有趣之处在于它们的实现方式和最终的使用。实现Go接口是隐式进行的。不需要单独的元素或关键字来指示实现的意图。任何定义了`interface`类型方法集的类型都会自动满足其实现。
- en: 'The following source code shows the `rect` type as an implementation of the
    `interface` type `shape`. The `rect` type is defined as a `struct` with receiver
    methods `area` and `perim`. This fact automatically qualifies `rect` as an implementation
    of `shape`:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 以下源代码展示了`rect`类型作为`shape`接口类型的实现。`rect`类型被定义为包含接收器方法`area`和`perim`的`struct`。这一事实自动使`rect`成为`shape`的实现：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch08/interface_impl.go
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch08/interface_impl.go
