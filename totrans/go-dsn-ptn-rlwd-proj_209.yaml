- en: Interface embedding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another interesting aspects of the `interface` type is its support for type
    embedding (similar to the `struct` type). This gives you the flexibility to structure
    your types in ways that maximize type reuse. Continuing with the shape example,
    the following code snippet reorganizes and reduces the previous interface count
    from three to two by embedding shape into the other two types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch08/interface_impl3.go
  prefs: []
  type: TYPE_NORMAL
- en: 'The following illustration shows how the interface types may be combined so
    the *is-a*Â relationship still satisfies the relationships between code components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Interface embedding](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: When embedding interface types, the enclosing type will inherit the method set
    of the embedded types. The compiler will complain if the embedded type causes
    method signatures to clash. Embedding becomes a crucial feature, especially when
    the code applies type validation using type checking. It allows a type to roll
    up type information, thus reducing unnecessary assertion steps (type assertion
    is discussed later).
  prefs: []
  type: TYPE_NORMAL
