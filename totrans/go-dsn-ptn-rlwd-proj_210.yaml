- en: The empty interface type
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 空接口类型
- en: The `interface{}` type, or the empty `interface` type, is the literal representation
    of an `interface` type with an empty method set. According to our discussion so
    far, it can be deduced that *all types implement the empty interface* since all
    types can have a method set with zero or more members.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '`interface{}` 类型，或称为空 `interface` 类型，是表示一个具有空方法集的 `interface` 类型的字面表示。根据我们之前的讨论，可以推断出
    *所有类型都实现了空接口*，因为所有类型都可以有一个包含零个或多个成员的方法集。'
- en: 'When a variable is assigned the `interface{}` type, the compiler relaxes its
    build-time type checks. The variable, however, still carries type information
    that can be queried at runtime. The following code illustrates how this works:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个变量被赋予 `interface{}` 类型时，编译器会放宽其构建时的类型检查。然而，该变量仍然携带可以在运行时查询的类型信息。以下代码说明了这是如何工作的：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch08/interface_empty.go
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch08/interface_empty.go
- en: 'In the previous code, the `anyType` variable is declared to be of the type
    `interface{}`. It is able to be assigned values of different types without complaints
    from the compiler:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`anyType` 变量被声明为 `interface{}` 类型。它能够被赋予不同类型的值，而不会引起编译器的抱怨：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `printAnyType()` function takes a parameter of the type `interface{}`.
    This means the function can be passed the values of any valid type, as shown here:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`printAnyType()` 函数接受一个 `interface{}` 类型的参数。这意味着该函数可以传递任何有效类型的值，如下所示：'
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The empty interface is crucially important for idiomatic Go. Delaying type-checking
    until runtime makes the language feels more dynamic without completely sacrificing
    strong typing. Go offers mechanisms such as type assertion (covered next) to query
    the type information carried by interfaces at runtime.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 空接口对于 Go 语言的风格至关重要。将类型检查延迟到运行时使得语言感觉更加动态，同时并未完全牺牲强类型。Go 提供了诸如类型断言（将在下一节介绍）等机制，以在运行时查询接口携带的类型信息。
