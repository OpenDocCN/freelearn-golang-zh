- en: The empty interface type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `interface{}` type, or the empty `interface` type, is the literal representation
    of an `interface` type with an empty method set. According to our discussion so
    far, it can be deduced that *all types implement the empty interface* since all
    types can have a method set with zero or more members.
  prefs: []
  type: TYPE_NORMAL
- en: 'When a variable is assigned the `interface{}` type, the compiler relaxes its
    build-time type checks. The variable, however, still carries type information
    that can be queried at runtime. The following code illustrates how this works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch08/interface_empty.go
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous code, the `anyType` variable is declared to be of the type
    `interface{}`. It is able to be assigned values of different types without complaints
    from the compiler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The `printAnyType()` function takes a parameter of the type `interface{}`.
    This means the function can be passed the values of any valid type, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The empty interface is crucially important for idiomatic Go. Delaying type-checking
    until runtime makes the language feels more dynamic without completely sacrificing
    strong typing. Go offers mechanisms such as type assertion (covered next) to query
    the type information carried by interfaces at runtime.
  prefs: []
  type: TYPE_NORMAL
