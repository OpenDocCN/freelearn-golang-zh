- en: Type assertion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When an interface (empty or otherwise) is assigned to a variable, it carries
    type information that can be queried at runtime. Type assertion is a mechanism
    that is available in Go to idiomatically narrow a variable (of `interface` type)
    down to a concrete type and value that are stored in the variable. The following
    example uses type assertion in the `eat` function to select which `food` type
    to select in the `eat` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'A type assertion expression can also return just the value, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*value := <interface_variable>**.**(concrete type name)*'
  prefs: []
  type: TYPE_NORMAL
- en: This form of assertion is risky to do as the runtime will cause a panic in the
    program if the value stored in the interface variable is not of the asserted type.
    Use this form only if you have other safeguards to either prevent or gracefully
    handle a panic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, when your code requires multiple assertions to test many types at runtime,
    a much nicer idiom for assertions is the type `switch` statement. It uses the
    `switch` statement semantic to query static type information from an interface
    value using case clauses. The `eat` function from the previous food-related example
    can been updated to use a type `switch` instead of `if` statement, as shown in
    the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/interface_assert2.go
  prefs: []
  type: TYPE_NORMAL
- en: Notice the code is much nicer to read. It can support any number of cases and
    is clearly laid out with visual clues that makes it easy to reason about. The
    `switch` type also makes the panic issue go away by simply specifying a default
    case that can handle any types not specifically handled in the case clause.
  prefs: []
  type: TYPE_NORMAL
