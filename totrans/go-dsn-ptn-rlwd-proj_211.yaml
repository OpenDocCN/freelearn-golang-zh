- en: Type assertion
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型断言
- en: 'When an interface (empty or otherwise) is assigned to a variable, it carries
    type information that can be queried at runtime. Type assertion is a mechanism
    that is available in Go to idiomatically narrow a variable (of `interface` type)
    down to a concrete type and value that are stored in the variable. The following
    example uses type assertion in the `eat` function to select which `food` type
    to select in the `eat` function:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个接口（无论是空的还是其他情况）被分配给一个变量时，它携带的类型信息可以在运行时查询。类型断言是Go中可用的一种机制，可以习惯性地将变量（`interface`类型）缩小到存储在变量中的具体类型和值。以下示例在`eat`函数中使用类型断言来选择在`eat`函数中要选择的`food`类型：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A type assertion expression can also return just the value, as follows:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 类型断言表达式也可以只返回值，如下所示：
- en: '*value := <interface_variable>**.**(concrete type name)*'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*value := <interface_variable>**.**(具体类型名称)*'
- en: This form of assertion is risky to do as the runtime will cause a panic in the
    program if the value stored in the interface variable is not of the asserted type.
    Use this form only if you have other safeguards to either prevent or gracefully
    handle a panic.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这种形式的断言风险较大，因为如果接口变量中存储的值不是断言的类型，运行时将导致程序崩溃。只有在你有其他安全措施来防止或优雅地处理崩溃的情况下，才使用这种形式。
- en: 'Lastly, when your code requires multiple assertions to test many types at runtime,
    a much nicer idiom for assertions is the type `switch` statement. It uses the
    `switch` statement semantic to query static type information from an interface
    value using case clauses. The `eat` function from the previous food-related example
    can been updated to use a type `switch` instead of `if` statement, as shown in
    the following code snippet:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当你的代码需要在运行时测试多种类型时，断言的一个更优雅的语法是类型`switch`语句。它使用`switch`语句的语义，通过case子句从接口值查询静态类型信息。在先前的与食物相关的例子中的`eat`函数可以被更新为使用类型`switch`而不是`if`语句，如下面的代码片段所示：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: golang.fyi/interface_assert2.go
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/interface_assert2.go
- en: Notice the code is much nicer to read. It can support any number of cases and
    is clearly laid out with visual clues that makes it easy to reason about. The
    `switch` type also makes the panic issue go away by simply specifying a default
    case that can handle any types not specifically handled in the case clause.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 注意代码的阅读性更好。它可以支持任意数量的case，并且通过视觉线索清晰地布局，使得推理变得容易。`switch`类型还通过简单地指定一个可以处理在case子句中未特别处理的任何类型的默认case来消除panic问题。
