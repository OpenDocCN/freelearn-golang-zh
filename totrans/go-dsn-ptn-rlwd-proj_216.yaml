- en: Goroutine scheduling
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Goroutine调度
- en: 'In general, all goroutines run independently of each other, as depicted in
    the following illustration. A function that creates a goroutine does not wait
    for it to return, it continues with its own execution stream unless there is a
    blocking condition. Later, the chapter covers synchronization idioms to coordinate
    goroutines:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，所有goroutine都是独立运行的，如下面的插图所示。创建goroutine的函数不会等待它返回，它将继续自己的执行流，除非存在阻塞条件。稍后，本章将介绍同步惯用法来协调goroutine：
- en: '![Goroutine scheduling](img/00023.jpeg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Goroutine调度](img/00023.jpeg)'
- en: 'Go''s runtime scheduler uses a form of cooperative scheduling to schedule goroutines.
    By default, the scheduler will allow a running goroutine to execute to completion.
    However, the scheduler will automatically yield to another goroutine for execution
    if one of the following events occurs:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Go的运行时调度器使用一种协作式调度来调度goroutine。默认情况下，调度器将允许正在运行的goroutine执行到完成。然而，如果发生以下事件之一，调度器将自动将执行权交还给另一个goroutine：
- en: A `go` statement is encountered in the executing goroutine
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在执行goroutine中遇到`go`语句
- en: A channel operation is encountered (channels are covered later)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遇到通道操作（通道将在后面介绍）
- en: A blocking system call (file or network IO for instance) is encountered
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遇到阻塞的系统调用（例如文件或网络I/O）
- en: After the completion of a garbage collection cycle
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在垃圾回收周期完成后
- en: 'The scheduler will schedule a queued goroutines ready to enter execution when
    one of the previous events is encountered in a running goroutine. It is important
    to point out that the scheduler makes no guarantee of the order of execution of
    goroutines. When the following code snippet is executed, for instance, the output
    will be printed in an arbitrary order for each run:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当在运行中的goroutine遇到上述事件之一时，调度器将调度一个已排队的goroutine准备进入执行。重要的是指出，调度器不对goroutine执行顺序做出保证。例如，当执行以下代码片段时，输出将在每次运行时以任意顺序打印：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch09/goroutine1.go
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch09/goroutine1.go
- en: 'The following shows possible output for the previous program:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下显示了前一个程序的可能输出：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
