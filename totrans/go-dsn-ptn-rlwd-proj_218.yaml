- en: The Channel type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Later in the chapter, we will learn how to use the channel to send data between
    concurrent portions of a running program.
  prefs: []
  type: TYPE_NORMAL
- en: The send and receive operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Go uses the `<-` (arrow) operator to indicate data movement within a channel.
    The following table summarizes how to send or receive data from a channel:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Example** | **Operation** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `intCh <- 12` | Send | When the arrow is placed to the left of the value,
    variable or expression, it indicates a send operation to the channel it points
    to. In this example, `12` is sent into channel `intCh`. |'
  prefs: []
  type: TYPE_TB
- en: '| `value := <- intCh` | Receive | When the `<-` operator is place to the left
    of a channel, it indicates a receive operation from the channel. The `value` variable
    is assigned the value received from the `intCh` channel. |'
  prefs: []
  type: TYPE_TB
- en: An uninitialized channel has a *nil* zero value and must be initialized using
    the built-in *make* function. As will be discussed in the following sections,
    a channel can be initialized as either unbuffered or buffered, depending on its
    specified capacity. Each of type of channel has different characteristics that
    are leveraged in different concurrency constructs.
  prefs: []
  type: TYPE_NORMAL
