- en: Buffered channel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the `make` function uses the capacity argument, it returns a bidirectional
    *buffered* channel, as shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code will create a buffered channel with a capacity of `3`. The
    buffered channel operates as a first-in-first-out blocking queue, as illustrated
    in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Buffered channel](img/00025.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The buffered channel depicted in the preceding figure has the following characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: When the channel is empty, the receiver blocks until there is at least one element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The sender always succeeds as long as the channel is not at capacity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the channel is at capacity, the sender blocks until at least one element
    is received
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using a buffered channel, it is possible to send and receive values within
    the same goroutine without causing a deadlock. The following shows an example
    of sending and receiving using a buffered channel with a capacity of `4` elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch09/chan0.go
  prefs: []
  type: TYPE_NORMAL
- en: 'The code in the previous example is able to send the values `2`, `4`, `6`,
    and `8` to the `ch` channel without the risk of blocking. The four `fmt.Println(<-ch)`
    statements are used to receive the values buffered in the channel successively.
    However, if a fifth send operation is added, prior to the first receive, the code
    will deadlock as highlighted in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Later in the chapter, you will read more about idiomatic and safe ways to use
    channels for communications.
  prefs: []
  type: TYPE_NORMAL
