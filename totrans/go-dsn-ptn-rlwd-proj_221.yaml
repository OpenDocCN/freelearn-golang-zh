- en: Unidirectional channels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At declaration, a channel type may also include a unidirectional operator (using
    the `<-` arrow again) to indicate whether a channel is send-only or receive-only,
    as listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Declaration** | **Operation** |'
  prefs: []
  type: TYPE_TB
- en: '| `<-` *chan <element type>* | Declares a receive-only channel as shown later.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| *chan* `<-`*<element type>* | Declares a send-only channel as shown later.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch09/chan1.go
  prefs: []
  type: TYPE_NORMAL
- en: Since the directionality of the channel is baked in the type, access violations
    will be detected at compile time. So in the previous example, the `in` channel
    can only be used for receive operations.
  prefs: []
  type: TYPE_NORMAL
- en: A bidirectional channel can be converted to a unidirectional channel explicitly
    or automatically. For instance, when `makeEvenNums()` is called from `main()`,
    it receives the bidirectional channel `ch` as a parameter. The compiler automatically
    converts the channel to the appropriate type.
  prefs: []
  type: TYPE_NORMAL
