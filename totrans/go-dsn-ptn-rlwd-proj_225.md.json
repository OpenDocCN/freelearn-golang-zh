["```go\nfunc main() { \n   data := []string{ \n         \"The yellow fish swims slowly in the water\", \n         \"The brown dog barks loudly after a drink ...\", \n         \"The dark bird bird of prey lands on a small ...\", \n   } \n\n   histogram := make(map[string]int) \n   done := make(chan bool) \n\n   // splits and count words \n   go func() { \n         for _, line := range data { \n               words := strings.Split(line, \" \") \n               for _, word := range words { \n                     word = strings.ToLower(word) \n                     histogram[word]++ \n               } \n         } \n         done <- true \n   }() \n\n   if <-done { \n         for k, v := range histogram { \n               fmt.Printf(\"%s\\t(%d)\\n\", k, v) \n         } \n   } \n} \n\n```", "```go\nfunc main() { \n... \n   histogram := make(map[string]int) \n   done := make(chan struct{}) \n\n   // splits and count \n   go func() { \n         defer close(done) // closes channel upon fn return \n         for _, line := range data { \n               words := strings.Split(line, \" \") \n               for _, word := range words { \n                     word = strings.ToLower(word) \n                     histogram[word]++ \n               } \n         } \n   }() \n\n   <-done // blocks until closed \n\n   for k, v := range histogram { \n         fmt.Printf(\"%s\\t(%d)\\n\", k, v) \n   } \n} \n\n```"]