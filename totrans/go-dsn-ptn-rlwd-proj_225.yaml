- en: Synchronization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the primary uses of channels is synchronization between running goroutines.
    To illustrate this use case, let us examine the following code, which implements
    a word histogram. The program reads the words from the `data` slice then, on a
    separate goroutine, collects the occurrence of each word:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch09/pattern0.go
  prefs: []
  type: TYPE_NORMAL
- en: The code in the previous example uses `done := make(chan bool)` to create the
    channel that will be used to synchronize the two running goroutines in the program.
    The `main` function launches a secondary goroutine, which does the word counting,
    and then it continues execution until it blocks at the `<-done` expression, causing
    it to wait.
  prefs: []
  type: TYPE_NORMAL
- en: In the meantime, the secondary goroutine runs until it completes its loop. Then,
    it sends a value to the `done` channel with `done <- true`, causing the blocked
    `main` routine to become unblocked and continues with its execution.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The previous code has a bug that may cause a race condition. A correction will
    be introduced later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous example, the code allocates and actually sends a Boolean value
    that is used for the synchronization. Upon further inspection, it is clear that
    the value in the channel is irrelevant and we simply want it to signal. So, we
    can further distill the synchronization idiom into a colloquial form that is presented
    in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch09/pattern1.go
  prefs: []
  type: TYPE_NORMAL
- en: 'This version of the code achieves goroutine synchronization using:'
  prefs: []
  type: TYPE_NORMAL
- en: The done channel, declared as type `chan struct{}`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main goroutine blocks at receive expression `<-done`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the done channel is closed, all receivers succeed without blocking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although the signaling is done using different constructs, this version of the
    code is equivalent to the first version (`pattern0.go`). The emtpy `struct{}`
    type stores no value and it is used strictly for signaling. This version of the
    code closes the `done` channel (instead of sending a value). This has the effect
    of allowing the main goroutine to unblock and continue execution.
  prefs: []
  type: TYPE_NORMAL
