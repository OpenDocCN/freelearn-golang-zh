["```go\nfunc main(){ \n... \n   histogram := make(map[string]int) \n   wordsCh := make(chan string) \n\n   // splits lines and sends words to channel \n   go func() { \n         defer close(wordsCh) // close channel when done \n         for _, line := range data { \n               words := strings.Split(line, \" \") \n               for _, word := range words { \n                     word = strings.ToLower(word) \n                     wordsCh <- word \n               } \n         } \n   }() \n\n   // process word stream and count words \n   // loop until wordsCh is closed \n   for { \n         word, opened := <-wordsCh \n         if !opened { \n               break \n         } \n         histogram[word]++ \n   } \n\n   for k, v := range histogram { \n         fmt.Printf(\"%s\\t(%d)\\n\", k, v) \n   } \n} \n\n```", "```go\nwordsCh := make(chan string)   \n\n```", "```go\nwordsCh <- word   \n\n```", "```go\ndefer close(wordsCh)   \n\n```", "```go\nfor {   \n  word, opened := <-wordsCh   \n  if !opened {   \n    break   \n  }   \n  histogram[word]++   \n}   \n\n```"]