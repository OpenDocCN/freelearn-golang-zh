- en: Streaming data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A natural use of channels is to stream data from one goroutine to another.
    This pattern is quite common in Go code and for it to work, the followings must
    be done:'
  prefs: []
  type: TYPE_NORMAL
- en: Continuously send data on a channel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuously receive the incoming data from that channel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Signal the end of the stream so the receiver may stop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As you will see, all of this can be done using a single channel. The following
    code snippet is a rewrite of the previous example. It shows how to use a single
    channel to stream data from one goroutine to another. The same channel is also
    used as a signaling device to indicate the end of the stream:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch09/pattern2.go
  prefs: []
  type: TYPE_NORMAL
- en: 'This version of the code produces the word histogram as before, but introduces
    a different approach. This is accomplished using the highlighted portion of the
    code shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Code** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '| The channel used to stream data. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '| The sender goroutine loops through the text line and sends a word at a time.
    It then blocks until the word is received by the receiving (main) goroutine. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '| As the words are continuously received (see later), the sender goroutine
    closes the channel when it is done. This will be the signal to the receiver that
    it should also stop. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '| This is the receiver code. It is placed in a loop since it is does not know
    ahead of time how much data to expect. With each iteration of the loop, the code
    does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Pulls the data from the channel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checks the open status of the channel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If closed, break out of the loop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Otherwise record histogram
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
