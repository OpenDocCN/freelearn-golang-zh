- en: Using for…range to receive data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The previous pattern is so common in Go that the idiom is built into the language
    in the form of the following `for…range` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '*for <elemem> := range <channel>{...}*'
  prefs: []
  type: TYPE_NORMAL
- en: 'With each iteration, this `for…range` statement will block until it receives
    incoming data from the indicated channel, as shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch09/pattern3.go
  prefs: []
  type: TYPE_NORMAL
- en: The previous code shows the an updated version of the code using a for-range
    statement, `for word := range wordsCh`. It successively emits the received value
    from the `wordsCh` channel. When the channel is closed (from the goroutine), the
    loop automatically breaks.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Always remember to close the channel so receivers are signaled properly. Otherwise,
    the program may enter into a deadlock which could cause a panic.
  prefs: []
  type: TYPE_NORMAL
