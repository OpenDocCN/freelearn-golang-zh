- en: Using for…range to receive data
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用for…range接收数据
- en: 'The previous pattern is so common in Go that the idiom is built into the language
    in the form of the following `for…range` statement:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的模式在Go语言中非常常见，以至于这种习语被直接内建到语言中，以下是一个`for…range`语句的例子：
- en: '*for <elemem> := range <channel>{...}*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*for <elemem> := range <channel>{…}*'
- en: 'With each iteration, this `for…range` statement will block until it receives
    incoming data from the indicated channel, as shown in the following snippet:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次迭代中，这个`for…range`语句将阻塞，直到从指定的通道接收到数据，如下面的代码片段所示：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch09/pattern3.go
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch09/pattern3.go
- en: The previous code shows the an updated version of the code using a for-range
    statement, `for word := range wordsCh`. It successively emits the received value
    from the `wordsCh` channel. When the channel is closed (from the goroutine), the
    loop automatically breaks.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码展示了使用for-range语句更新后的代码版本，`for word := range wordsCh`。它依次发出从`wordsCh`通道接收到的值。当通道关闭（来自goroutine）时，循环会自动中断。
- en: Note
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Always remember to close the channel so receivers are signaled properly. Otherwise,
    the program may enter into a deadlock which could cause a panic.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 总是要记得关闭通道，以便接收者能够正确地收到信号。否则，程序可能会进入死锁状态，这可能导致程序崩溃。
