- en: Generator functions
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成器函数
- en: Channels and goroutines provide a natural substrate for implementing a form
    of producer/producer pattern using generator functions. In this approach, a goroutine
    is wrapped in a function which generates values that are sent via a channel returned
    by the function. The consumer goroutine receives these values as they are generated.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 通道和goroutine为使用生成器函数实现生产者/生产者模式提供了一个自然的底层支持。在这种方法中，一个goroutine被封装在一个函数中，该函数生成值并通过函数返回的通道发送。消费者goroutine接收这些值，就像它们被生成一样。
- en: 'The word histogram has been updated to use this pattern, as shown in the following
    code snippet:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 单词直方图已被更新为使用此模式，如下代码片段所示：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch09/pattern4.go
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch09/pattern4.go
- en: In this example, the generator function, declared as `func words(data []string)
    <-chan string`, returns a receive-only channel of string elements. The consumer
    function, in this instance `main()`, receives the data emitted by the generator
    function, which is processed using a `for…range` loop.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，生成器函数，声明为 `func words(data []string) <-chan string`，返回一个只读的字符串元素通道。消费者函数，在这个例子中是
    `main()`，接收由生成器函数发出的数据，这些数据通过一个 `for…range` 循环进行处理。
