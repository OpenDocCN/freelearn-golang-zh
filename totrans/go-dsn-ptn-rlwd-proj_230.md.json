["```go\nfunc main() { \n   data := []string{...} \n   histogram := make(map[string]int) \n   done := make(chan struct{}) \n\n   go func() { \n         defer close(done) \n         words := words(data) // returns handle to channel \n         for word := range words { \n               histogram[word]++ \n         } \n         for k, v := range histogram { \n               fmt.Printf(\"%s\\t(%d)\\n\", k, v) \n         } \n   }() \n\n   select { \n   case <-done: \n         fmt.Println(\"Done counting words!!!!\") \n   case <-time.After(200 * time.Microsecond): \n         fmt.Println(\"Sorry, took too long to count.\") \n   } \n} \nfunc words(data []string) <-chan string {...} \n\n```"]