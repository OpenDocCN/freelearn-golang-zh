- en: Channel timeout
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通道超时
- en: One popular idiom that is commonly encountered with Go concurrency is the use
    of the select statement, introduced previously, to implement timeouts. This works
    by using the select statement to wait for a channel operation to succeed within
    a given time duration using the API from the `time` package ([https://golang.org/pkg/time/](https://golang.org/pkg/time/)).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Go并发中常见的一个流行惯用法是使用之前介绍过的`select`语句来实现超时。这是通过使用`select`语句等待在给定时间范围内使用`time`包的API成功完成通道操作来实现的（[https://golang.org/pkg/time/](https://golang.org/pkg/time/))。
- en: 'The following code snippet shows a version of the word histogram example that
    times out if the program takes longer than 200 microseconds to count and print
    the words:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了单词直方图示例的一个版本，如果程序在200微秒内未能完成计数和打印单词，则会超时：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch09/pattern6.go
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch09/pattern6.go
- en: This version of the histogram example introduces the `done` channel, which is
    used to signal when processing is done. In the `select` statement, the receive
    operation `case``<-done:` blocks until the goroutine closes the `done` channel.
    Also in the `select` statement, the `time.After()` function returns a channel
    which will close after the indicated duration. If the 200 microseconds elapse
    before done is closed, the channel from `time.After()` will close first, causing
    the timeout case to succeed first.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本版本的直方图示例引入了`done`通道，用于在处理完成后发出信号。在`select`语句中，接收操作`case <-done:`会阻塞，直到goroutine关闭`done`通道。同样，在`select`语句中，`time.After()`函数返回一个通道，该通道将在指定的时间后关闭。如果在关闭`done`通道之前有200微秒的时间流逝，那么`time.After()`返回的通道将首先关闭，导致超时情况首先成功。
