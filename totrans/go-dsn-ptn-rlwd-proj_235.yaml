- en: Detecting race conditions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测竞态条件
- en: Debugging concurrent code with a race condition can be time consuming and frustrating.
    When a race condition occurs, it is usually inconsistent and displays little to
    no discernible pattern. Fortunately, since Version 1.1, Go has included a race
    detector as part of its command-line tool chain. When building, testing, installing,
    or running Go source code, simply add the `-race` command flag to enable the race
    detector instrumentation of your code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 调试存在竞态条件的并发代码可能会很耗时且令人沮丧。当发生竞态条件时，它通常是不一致的，并且显示很少或没有可识别的模式。幸运的是，自1.1版本以来，Go已经将其竞态检测器作为其命令行工具链的一部分。在构建、测试、安装或运行Go源代码时，只需添加
    `-race` 命令标志即可启用代码的竞态检测器配置。
- en: 'For instance, when the source file `golang.fyi/ch09/sync1.go` (a code with
    a race condition) is executed with the `-race` flag, the compiler''s output shows
    the offending goroutine locations that caused the race condition, as shown in
    the following output:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当使用 `-race` 标志执行源文件 `golang.fyi/ch09/sync1.go`（一个存在竞态条件的代码）时，编译器的输出显示了导致竞态条件的违规goroutine位置，如下所示：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The race detector lists the line numbers where there is concurrent access to
    shared values. It lists the *read* operations followed by the locations where
    *write* operations may happen concurrently. Racy conditions in code can go unnoticed,
    even in well-tested code, until it manifests itself randomly. If you are writing
    concurrent code, it is highly recommended that you integrate the race detector
    as part of your testing suite.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 竞态检测器列出了存在对共享值并发访问的行号。它列出了随后的 *读取* 操作和可能并发发生 *写入* 操作的位置。代码中的竞态条件可能不会被注意到，即使在经过良好测试的代码中，直到它随机出现。如果你正在编写并发代码，强烈建议将竞态检测器集成到你的测试套件中。
