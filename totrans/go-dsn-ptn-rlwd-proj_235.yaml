- en: Detecting race conditions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Debugging concurrent code with a race condition can be time consuming and frustrating.
    When a race condition occurs, it is usually inconsistent and displays little to
    no discernible pattern. Fortunately, since Version 1.1, Go has included a race
    detector as part of its command-line tool chain. When building, testing, installing,
    or running Go source code, simply add the `-race` command flag to enable the race
    detector instrumentation of your code.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, when the source file `golang.fyi/ch09/sync1.go` (a code with
    a race condition) is executed with the `-race` flag, the compiler''s output shows
    the offending goroutine locations that caused the race condition, as shown in
    the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The race detector lists the line numbers where there is concurrent access to
    shared values. It lists the *read* operations followed by the locations where
    *write* operations may happen concurrently. Racy conditions in code can go unnoticed,
    even in well-tested code, until it manifests itself randomly. If you are writing
    concurrent code, it is highly recommended that you integrate the race detector
    as part of your testing suite.
  prefs: []
  type: TYPE_NORMAL
