["```go\nconst MAX = 1000 \nconst workers = 2 \n\nfunc main() { \n   values := make(chan int) \n   result := make(chan int, workers) \n   var wg sync.WaitGroup \n\n   go func() { // gen multiple of 3 & 5 values \n         for i := 1; i < MAX; i++ { \n               if (i%3) == 0 || (i%5) == 0 { \n                     values <- i // push downstream \n               } \n         } \n         close(values) \n   }() \n\n   work := func() { // work unit, calc partial result \n         defer wg.Done() \n         r := 0 \n         for i := range values { \n               r += i \n         } \n         result <- r \n   } \n\n   //launch workers \n   wg.Add(workers) \n   for i := 0; i < workers; i++ { \n         go work() \n   } \n\n   wg.Wait() // wait for all groutines \n   close(result) \n   total := 0 \n   // gather partial results \n   for pr := range result { \n         total += pr \n   } \n   fmt.Println(\"Total:\", total) \n} \n\n```"]