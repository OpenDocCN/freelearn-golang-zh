- en: Parallelism in Go
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go 中的并行处理
- en: 'So far, the discussion in this chapter has focused on synchronizing concurrent
    programs. As was mentioned earlier in the chapter, the Go runtime scheduler automatically
    multiplexes and schedules goroutines across available OS-managed threads. This
    means concurrent programs that can be parallelized have the ability to take advantage
    of the underlying processor cores with little to no configuration. For instance,
    the following code cleanly segregates its work unit (to calculate sums of multiples
    of 3 and 5) to be calculated by launching `workers` number of goroutines:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本章的讨论主要集中在同步并发程序上。正如本章前面提到的，Go 运行时调度器会自动在可用的操作系统管理的线程之间多路复用和调度 goroutines。这意味着可以并行化的并发程序能够利用底层处理器核心，而无需进行大量或任何配置。例如，以下代码干净地分离了其工作单元（计算3和5的倍数的和），通过启动
    `workers` 个数的 goroutines 来计算：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch09/sync6.go
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch09/sync6.go
- en: The previous code will automatically launch each goroutine, with `go work()`,
    in parallel when executed on a multi-core machine. The Go runtime scheduler, by
    default, will create a number of OS-backed threads for scheduling that is equal
    to the number of CPU cores. That quantity is identified by runtime value called
    *GOMAXPROCS*.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在多核机器上执行时，前面的代码将自动并行启动每个 goroutine，使用 `go work()`。默认情况下，Go 运行时调度器将为调度创建与 CPU
    核心数量相等的由操作系统支持的线程。这个数量由运行时值 *GOMAXPROCS* 来标识。
- en: The GOMAXPROCS value can be explicitly changed to influence the number threads
    that are made available to the scheduler. That value can be changed using a command-line
    environment variable with the same name. GOMAXPROCS can also be updated in the
    using function `GOMAXPROCS()` from the *runtime* package ([https://golang.org/pkg/runtime](https://golang.org/pkg/runtime)).
    Either approach allows programmers to fine-tune the number of threads that will
    participate in scheduling goroutines.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: GOMAXPROCS 的值可以被显式地改变，以影响调度器可用的线程数量。该值可以通过具有相同名称的命令行环境变量来更改。GOMAXPROCS 也可以通过
    *runtime* 包中的 `GOMAXPROCS()` 函数来更新 ([https://golang.org/pkg/runtime](https://golang.org/pkg/runtime))。这两种方法都允许程序员微调将参与调度
    goroutines 的线程数量。
