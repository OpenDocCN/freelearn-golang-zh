- en: IO with readers and writers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与读者和写者进行IO操作
- en: 'Similar to other languages, such as Java, Go models data input and output as
    a stream that flows from sources to targets. Data resources, such as files, networked
    connections, or even some in-memory objects, can be modeled as streams of bytes
    from which data can be *read* or *written* to, as illustrated in the following
    figure:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他语言，如Java类似，Go将数据输入和输出建模为一个从源流向目标的流。数据资源，如文件、网络连接，甚至一些内存中的对象，都可以被建模为字节数据流，数据可以从该流中读取或写入，如下面的图示所示：
- en: '![IO with readers and writers](img/00026.jpeg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![与读者和写者进行IO操作](img/00026.jpeg)'
- en: The stream of data is represented as a **slice of bytes** (**[]byte**) that
    can be accessed for reading or writing. As we will explore in this chapter, the
    `*io*` package makes available the `io.Reader` interface to implement code that
    *reads* and transfers data from a source into a stream of bytes. Conversely, the
    `io.Writer` interface lets implementers create code that reads data from a provided
    stream of bytes and *writes* it as output to a target resource. Both interfaces
    are used extensively in Go as a standard idiom to express IO operations. This
    makes it possible to interchange readers and writers of different implementations
    and contexts with predictable results.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 数据流被表示为一个**字节数组切片**（**[]byte**），它可以被访问以进行读取或写入。正如我们将在本章中探讨的，`*io*`包提供了`io.Reader`接口来实现从源读取并将数据传输到字节数据流中的代码。相反，`io.Writer`接口允许实现者创建从提供的字节数据流中读取数据并将其作为输出写入目标资源的代码。这两个接口在Go中被广泛用作标准习语来表达IO操作。这使得不同实现和上下文中的读取器和写入器可以互换，并产生可预测的结果。
