- en: The io.Reader interface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`io.Reader` 接口'
- en: The `io.Reader` interface, as shown in the following listing, is simple. It
    consists of a single method, `Read([]byte)(int, error)`, intended to let programmers
    implement code that *reads* data, from an arbitrary source, and transfers it into
    the provided slice of bytes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示，`io.Reader` 接口很简单。它只包含一个方法，`Read([]byte)(int, error)`，旨在让程序员实现代码来*读取*数据，从任意来源，并将其传输到提供的字节数组中。
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `Read` method returns the total number of bytes transferred into the provided
    slice and an error value (if necessary). As a guideline, implementations of the
    `io.Reader` should return an error value of `io.EOF` when the reader has no more
    data to transfer into stream `p`. The following shows the type `alphaReader`,
    a trivial implementation of the `io.Reader` that filters out non-alpha characters
    from its string source:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`Read` 方法返回传输到提供数组的总字节数和一个错误值（如果需要）。作为一个指导原则，`io.Reader` 的实现应该在读取器没有更多数据可以传输到流
    `p` 时返回错误值 `io.EOF`。以下展示了 `alphaReader` 类型，它是 `io.Reader` 的一个简单实现，它会从其字符串源过滤掉非字母字符：'
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: golang.fyi/ch10/reader0.go
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch10/reader0.go
- en: Since values of the `alphaReader` type implement the `io.Reader` interface,
    they can participate anywhere a reader is expected as shown in the call to `io.Copy(os.Stdout,
    &str)`. This copies the stream of bytes emitted by the `alphaReader` variable
    into a writer interface, `os.Stdout` (covered later).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `alphaReader` 类型的值实现了 `io.Reader` 接口，因此它们可以在任何期望读取器的地方参与，如 `io.Copy(os.Stdout,
    &str)` 调用所示。这会将 `alphaReader` 变量发出的字节流复制到一个写入器接口 `os.Stdout` 中（稍后介绍）。
