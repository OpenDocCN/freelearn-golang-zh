["```go\nalphaReader. This time, it takes an io.Reader as its source as shown in the following code:\n```", "```go\ntype alphaReader struct { \n   src io.Reader \n} \n\nfunc NewAlphaReader(source io.Reader) *alphaReader { \n   return &alphaReader{source} \n} \n\nfunc (a *alphaReader) Read(p []byte) (int, error) { \n   if len(p) == 0 { \n         return 0, nil \n   } \n   count, err := a.src.Read(p) // p has now source data \n   if err != nil { \n         return count, err \n   } \n   for i := 0; i < len(p); i++ { \n         if (p[i] >= 'A' && p[i] <= 'Z') || \n               (p[i] >= 'a' && p[i] <= 'z') { \n               continue \n         } else { \n               p[i] = 0 \n         } \n   } \n   return count, io.EOF \n} \n\nfunc main() { \n   str := strings.NewReader(\"Hello! Where is the sun?\") \n   alpha := NewAlphaReader(str) \n   io.Copy(os.Stdout, alpha) \n   fmt.Println() \n} \n\nalphaReader type can now be combined with an os.File to filter out non-alphabetic characters from a file (the Go source code itself):\n```", "```go\n... \nfunc main() { \n   file, _ := os.Open(\"./reader2.go\") \n   alpha := NewAlphaReader(file) \n   io.Copy(os.Stdout, alpha) \n   fmt.Println() \n} \n\n```"]