["```go\ndata := strings.NewReader(\"Write   me down.\")   \nfile, _ := os.Create(\"./iocopy.data\")   \nio.Copy(file, data)   \n\n```", "```go\nfile, _ := os.Create(\"./iopipe.data\")   \npr, pw := io.Pipe()    \ngo func() {   \n    fmt.Fprint(pw, \"Pipe   streaming\")   \n    pw.Close()   \n}()   \n\nwait := make(chan struct{})   \ngo func() {   \n    io.Copy(file, pr)   \n    pr.Close()   \n    close(wait)   \n}()   \n<-wait //wait for pr to finish   \n\n```", "```go\nTeeReader. The resulting reader, data, is then streamed to a gzip writer zip:\n```", "```go\nfin, _ := os.Open(\"./ioteerdr.go\")   \ndefer fin.Close()   \nfout, _ := os.Create(\"./teereader.gz\")   \ndefer fout.Close()   \n\nzip := gzip.NewWriter(fout)   \ndefer zip.Close()   \nsha := sha1.New()   \ndata := io.TeeReader(fin, sha)    \nio.Copy(zip, data)   \n\nfmt.Printf(\"SHA1 hash %x\\n\",   sha.Sum(nil))   \n\n```", "```go\nsha := sha1.New()   \nmd := md5.New()   \ndata := io.TeeReader(\n  io.TeeReader(fin, md), sha,   \n)    \nio.Copy(zip, data)   \n\n```", "```go\nfout, err := os.Create(\"./iowritestr.data\")   \nif err != nil {   \n    fmt.Println(err)   \n    os.Exit(1)   \n}   \ndefer fout.Close()   \nio.WriteString(fout, \"Hello   there!\\n\")   \n\n```", "```go\nstr := strings.NewReader(\"The   quick brown \" +       \n    \"fox jumps over the lazy   dog\")   \nlimited :=   &io.LimitedReader{R: str, N: 19}   \nio.Copy(os.Stdout, limited)   \n\n```", "```go\n$> go run iolimitedrd.go   \nThe quick brown fox   \n\n```", "```go\nstr := strings.NewReader(\"The   quick brown\"+   \n    \"fox jumps over the lazy   dog\")   \nsection := io.NewSectionReader(str,   19, 23)   \nio.Copy(os.Stdout, section)   \n\n```"]