["```go\nWriteString method from the os.File variable, fout, to create a text file:\n```", "```go\nfunc main() { \n   rows := []string{ \n         \"The quick brown fox\", \n         \"jumps over the lazy dog\", \n   } \n\n   fout, err := os.Create(\"./filewrite.data\") \n   if err != nil { \n         fmt.Println(err) \n         os.Exit(1) \n   } \n   defer fout.Close() \n\n   for _, row := range rows { \n         fout.WriteString(row) \n   } \n} \n\n```", "```go\nfunc main() { \n   data := [][]byte{ \n         []byte(\"The quick brown fox\\n\"), \n         []byte(\"jumps over the lazy dog\\n\"), \n   } \n   fout, err := os.Create(\"./filewrite.data\") \n   if err != nil { ... } \n   defer fout.Close() \n\n   for _, out := range data { \n         fout.Write(out) \n   } \n} \n\n../ch0r/dict.txt as raw bytes assigned to slice p up to 1024-byte chunks at a time:\n```", "```go\nfunc main() { \n   fin, err := os.Open(\"../ch05/dict.txt\") \n   if err != nil { \n         fmt.Println(err) \n         os.Exit(1) \n   } \n   defer fin.Close() \n   p := make([]byte, 1024) \n   for { \n         n, err := fin.Read(p) \n         if err == io.EOF { \n               break \n         } \n         fmt.Print(string(p[:n])) \n   } \n} \n\n```"]