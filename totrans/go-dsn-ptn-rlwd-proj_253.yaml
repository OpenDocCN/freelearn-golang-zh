- en: Reading from standard input
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从标准输入读取
- en: 'Instead of reading from an arbitrary `io.Reader`, the `fmt.Scan`, `fmt.Scanf`,
    and `fmt.Scanln` are used to read data from standard input file handle, `os.Stdin`.
    The following code snippet shows a simple program that reads text input from the
    console:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 与从任意的 `io.Reader` 读取不同，`fmt.Scan`、`fmt.Scanf` 和 `fmt.Scanln` 用于从标准输入文件句柄 `os.Stdin`
    读取数据。以下代码片段展示了一个简单的程序，该程序从控制台读取文本输入：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch10/fmtscan1.go
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch10/fmtscan1.go
- en: 'In the previous program, the `fmt.Scanf` function parses the input using the
    format specifier `"%d"` to read an integer value from the standard input. The
    function will throw an error if the value read does not match exactly the specified
    format. For instance, the following shows what happens when character `D` is read
    instead of an integer:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个程序中，`fmt.Scanf` 函数使用格式说明符 `"%d"` 解析输入，从标准输入读取一个整数值。如果读取的值与指定的格式不完全匹配，该函数将抛出一个错误。例如，以下展示了当读取字符
    `D` 而不是整数时会发生什么：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
