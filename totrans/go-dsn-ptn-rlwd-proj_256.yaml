- en: Scanning the buffer
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓冲区扫描
- en: '[PRE0]'
  id: totrans-1
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: golang.fyi/ch10/bufscan0.go
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch10/bufscan0.go
- en: 'Using `bufio.Scanner` is done in four steps as shown in the previous example:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `bufio.Scanner` 的步骤如前一个示例所示，共有四个步骤：
- en: First, use `bufio.NewScanner(io.Reader)` to create a scanner
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，使用 `bufio.NewScanner(io.Reader)` 创建一个扫描器
- en: Call the `scanner.Split` method to configure how the content is tokenized
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用 `scanner.Split` 方法来配置内容如何被分词
- en: Traverse the generated tokens with the `scanner.Scan` method
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `scanner.Scan` 方法遍历生成的标记
- en: Read the tokenized data with the `scanner.Text` method
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `scanner.Text` 方法读取分词后的数据
- en: The code uses the pre-defined function `bufio.ScanLines` to parse the buffered
    content using a line-delimiter. The `bufio` package comes with several pre-defined
    splitter functions including *ScanBytes* to scan each byte as a token, *ScanRunes*
    to scan UTF-8 encoded tokens, and *ScanWords* which scan each space-separated
    words as tokens.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 代码使用预定义函数 `bufio.ScanLines` 来解析使用行分隔符的缓冲内容。`bufio` 包包含几个预定义的分割函数，包括 *ScanBytes*
    用于将每个字节作为标记扫描，*ScanRunes* 用于扫描 UTF-8 编码的标记，以及 *ScanWords* 用于将每个空格分隔的单词作为标记扫描。
