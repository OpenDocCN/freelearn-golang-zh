["```go\nbooks, a slice of the Book type with nested values, into the gob format. The encoder writes its generated binary data to an os.Writer instance, in this case the file variable of the *os.File type:\n```", "```go\ntype Name struct { \n   First, Last string \n} \n\ntype Book struct { \n   Title       string \n   PageCount   int \n   ISBN        string \n   Authors     []Name \n   Publisher   string \n   PublishDate time.Time \n} \n\nfunc main() { \n   books := []Book{ \n         Book{ \n               Title:       \"Leaning Go\", \n               PageCount:   375, \n               ISBN:        \"9781784395438\", \n               Authors:     []Name{{\"Vladimir\", \"Vivien\"}}, \n               Publisher:   \"Packt\", \n               PublishDate: time.Date( \n                     2016, time.July, \n                     0, 0, 0, 0, 0, time.UTC, \n               ), \n         }, \n         Book{ \n               Title:       \"The Go Programming Language\", \n               PageCount:   380, \n               ISBN:        \"9780134190440\", \n               Authors:     []Name{ \n                     {\"Alan\", \"Donavan\"}, \n                     {\"Brian\", \"Kernighan\"}, \n               }, \n               Publisher:   \"Addison-Wesley\", \n               PublishDate: time.Date( \n                     2015, time.October, \n                     26, 0, 0, 0, 0, time.UTC, \n               ), \n         }, \n         ... \n   } \n\n   // serialize data structure to file \n   file, err := os.Create(\"book.dat\") \n   if err != nil { \n         fmt.Println(err) \n         return \n   } \n   enc := gob.NewEncoder(file) \n   if err := enc.Encode(books); err != nil { \n         fmt.Println(err) \n   } \n} \n\nbooks.data file in the previous example. The decoder reads the data from an io.Reader, in this instance the variable file of the *os.File type:\n```", "```go\ntype Name struct { \n   First, Last string \n} \n\ntype Book struct { \n   Title       string \n   PageCount   int \n   ISBN        string \n   Authors     []Name \n   Publisher   string \n   PublishDate time.Time \n} \n\nfunc main() { \n   file, err := os.Open(\"book.dat\") \n   if err != nil { \n         fmt.Println(err) \n         return \n   } \n\n   var books []Book \n   dec := gob.NewDecoder(file) \n   if err := dec.Decode(&books); err != nil { \n         fmt.Println(err) \n         return \n   } \n} \n\n```"]