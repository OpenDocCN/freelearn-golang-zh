- en: Binary encoding with gob
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch10/gob1.go
  prefs: []
  type: TYPE_NORMAL
- en: Decoding a previously encoded gob data is done by creating a decoder using `dec
    := gob.NewDecoder(file)`. The next step is to declare the variable that will store
    the decoded data. In our example, the `books` variable, of the `[]Book` type,
    is declared as the destination of the decoded data. The actual decoding is done
    by invoking `dec.Decode(&books)`. Notice the `Decode()`Â method takes the address
    of its target variable as an argument. Once decoded, the `books` variable will
    contain the reconstituted data structure streamed from the file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As of this writing, gob encoder and decoder APIs are only available in the Go
    programming language. This means that data encoded as gob can only be consumed
    by Go programs.
  prefs: []
  type: TYPE_NORMAL
