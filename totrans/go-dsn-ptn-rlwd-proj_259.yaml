- en: Binary encoding with gob
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 gob 进行二进制编码
- en: '[PRE0]'
  id: totrans-1
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: golang.fyi/ch10/gob1.go
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch10/gob1.go
- en: Decoding a previously encoded gob data is done by creating a decoder using `dec
    := gob.NewDecoder(file)`. The next step is to declare the variable that will store
    the decoded data. In our example, the `books` variable, of the `[]Book` type,
    is declared as the destination of the decoded data. The actual decoding is done
    by invoking `dec.Decode(&books)`. Notice the `Decode()` method takes the address
    of its target variable as an argument. Once decoded, the `books` variable will
    contain the reconstituted data structure streamed from the file.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 解码之前编码的 gob 数据是通过创建一个解码器来完成的，使用 `dec := gob.NewDecoder(file)`。下一步是声明将存储解码数据的变量。在我们的例子中，`books`
    变量，其类型为 `[]Book`，被声明为解码数据的目的地。实际的解码是通过调用 `dec.Decode(&books)` 来完成的。注意 `Decode()`
    方法接受其目标变量的地址作为参数。一旦解码完成，`books` 变量将包含从文件中流式传输的重新构建的数据结构。
- en: Note
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As of this writing, gob encoder and decoder APIs are only available in the Go
    programming language. This means that data encoded as gob can only be consumed
    by Go programs.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，gob 编码器和解码器 API 仅在 Go 编程语言中可用。这意味着以 gob 编码的数据只能由 Go 程序消费。
