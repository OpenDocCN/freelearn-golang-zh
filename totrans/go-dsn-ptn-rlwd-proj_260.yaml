- en: Encoding data as JSON
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The encoding package also comes with a *json* encoder sub-package ([https://golang.org/pkg/encoding/json/](https://golang.org/pkg/encoding/json/))
    to support JSON-formatted data. This greatly broadens the number of languages
    with which Go programs can exchange complex data structures. JSON encoding works
    similarly as the encoder and decoder from the gob package. The difference is that
    the generated data takes the form of a clear text JSON-encoded format instead
    of a binary. The following code updates the previous example to encode the data
    as JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch10/json0.go
  prefs: []
  type: TYPE_NORMAL
- en: 'The code is exactly the same as before. It uses the same slice of nested structs
    assigned to the `books` variable. The only difference is the encoder is created
    with `enc := json.NewEncoder(file)` which creates a JSON encoder that will use
    the `file` variable as its `io.Writer` destination. When `enc.Encode(books)` is
    executed, the content of the variable `books` is serialized as JSON to the local
    file `books.dat`, shown in the following code (formatted for readability):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch10/json1.go
  prefs: []
  type: TYPE_NORMAL
- en: The data in the books.dat file is stored as an array of JSON objects. Therefore,
    the code must declare a variable capable of storing an indexed collection of nested
    struct values. In the previous example, the `books` variable, of the type `[]Book` is
    declared as the destination of the decoded data. The actual decoding is done by
    invoking `dec.Decode(&books)`. Notice the `Decode()` method takes the address
    of its target variable as an argument. Once decoded, the `books` variable will
    contain the reconstituted data structure streamed from the file.
  prefs: []
  type: TYPE_NORMAL
