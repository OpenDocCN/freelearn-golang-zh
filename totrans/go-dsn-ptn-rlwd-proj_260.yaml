- en: Encoding data as JSON
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将数据编码为 JSON
- en: 'The encoding package also comes with a *json* encoder sub-package ([https://golang.org/pkg/encoding/json/](https://golang.org/pkg/encoding/json/))
    to support JSON-formatted data. This greatly broadens the number of languages
    with which Go programs can exchange complex data structures. JSON encoding works
    similarly as the encoder and decoder from the gob package. The difference is that
    the generated data takes the form of a clear text JSON-encoded format instead
    of a binary. The following code updates the previous example to encode the data
    as JSON:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 编码包还附带了一个 *json* 编码子包 ([https://golang.org/pkg/encoding/json/](https://golang.org/pkg/encoding/json/))，以支持
    JSON 格式的数据。这极大地扩展了 Go 程序可以与之交换复杂数据结构的语言数量。JSON 编码与 gob 包中的编码器和解码器的工作方式类似。区别在于生成数据采用清晰的文本
    JSON 编码格式，而不是二进制格式。以下代码更新了先前的例子，将数据编码为 JSON：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch10/json0.go
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch10/json0.go
- en: 'The code is exactly the same as before. It uses the same slice of nested structs
    assigned to the `books` variable. The only difference is the encoder is created
    with `enc := json.NewEncoder(file)` which creates a JSON encoder that will use
    the `file` variable as its `io.Writer` destination. When `enc.Encode(books)` is
    executed, the content of the variable `books` is serialized as JSON to the local
    file `books.dat`, shown in the following code (formatted for readability):'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 代码与之前完全相同。它使用分配给 `books` 变量的相同嵌套结构切片。唯一的区别是使用 `enc := json.NewEncoder(file)`
    创建编码器，这将创建一个使用 `file` 变量作为其 `io.Writer` 目的地的 JSON 编码器。当执行 `enc.Encode(books)`
    时，`books` 变量的内容将被序列化为 JSON 格式并写入本地文件 `books.dat`，如下面的代码所示（格式化以提高可读性）：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: golang.fyi/ch10/json1.go
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch10/json1.go
- en: The data in the books.dat file is stored as an array of JSON objects. Therefore,
    the code must declare a variable capable of storing an indexed collection of nested
    struct values. In the previous example, the `books` variable, of the type `[]Book` is
    declared as the destination of the decoded data. The actual decoding is done by
    invoking `dec.Decode(&books)`. Notice the `Decode()` method takes the address
    of its target variable as an argument. Once decoded, the `books` variable will
    contain the reconstituted data structure streamed from the file.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 书本.dat 文件中的数据存储为一个 JSON 对象数组。因此，代码必须声明一个变量，能够存储索引化的嵌套结构值集合。在先前的例子中，`books` 变量，其类型为
    `[]Book`，被声明为解码数据的目的地。实际的解码是通过调用 `dec.Decode(&books)` 来完成的。注意，`Decode()` 方法接受其目标变量的地址作为参数。一旦解码完成，`books`
    变量将包含从文件中流出的重构数据结构。
