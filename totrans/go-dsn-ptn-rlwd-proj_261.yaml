- en: Controlling JSON mapping with struct tags
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用结构体标签控制 JSON 映射
- en: '[PRE0]'
  id: totrans-1
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: golang.fyi/ch10/json2.go
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch10/json2.go
- en: 'The tags and their meaning are summarized in the following table:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 标签及其含义总结在下表中：
- en: '| **Tags** | **Description** |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| **标签** | **描述** |'
- en: '| `` Title string `json:"book_title"` `` | Maps the `Title` struct field to
    the JSON object key, `"book_title"`. |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| `` 标题 string `json:"book_title"` `` | 将 `Title` 结构体字段映射到 JSON 对象键 `"book_title"`。
    |'
- en: '| `` PageCount int `json:"pages,string"` `` | Maps the `PageCount` struct field
    to the JSON object key, `"pages",` and outputs the value as a string instead of
    a number. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| `` 页数 int `json:"pages,string"` `` | 将 `PageCount` 结构体字段映射到 JSON 对象键 `"pages"`，并将值输出为字符串而不是数字。
    |'
- en: '| `` ISBN string `json:"-"` `` | The dash causes the `ISBN` field to be skipped
    during encoding and decoding. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| `` 国际标准书号 string `json:"-"` `` | 短横线导致在编码和解码过程中跳过 `ISBN` 字段。 |'
- en: '| `` Authors []Name `json:"auths,omniempty"` `` | Maps the `Authors` field
    to the JSON object key, `"auths"`. The annotation, `omniempty,` causes the field
    to be omitted if its value is nil. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| `` 作者 []Name `json:"auths,omniempty"` `` | 将 `Authors` 字段映射到 JSON 对象键 `"auths"`。注释
    `omniempty` 导致如果其值为 nil，则省略该字段。 |'
- en: '| `` Publisher string `json:",omniempty"` `` | Maps the struct field name,
    `Publisher,` as the JSON object key name. The annotation, `omniempty,` causes
    the field to be omitted when empty. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| `` 出版社 string `json:",omniempty"` `` | 将结构体字段 `Publisher` 映射为 JSON 对象键名称。注释
    `omniempty` 导致当字段为空时省略该字段。 |'
- en: '| `` PublishDate time.Time `json:"pub_date"` `` | Maps the field name, `PublishDate,`
    to the JSON object key, `"pub_date"`. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| `` 发布日期 time.Time `json:"pub_date"` `` | 将字段名称 `PublishDate` 映射到 JSON 对象键
    `"pub_date"`。 |'
- en: 'When the previous struct is encoded, it produces the following JSON output
    in the `books.dat` file (formatted for readability):'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当之前的结构体被编码时，它会在 `books.dat` 文件中产生以下 JSON 输出（格式化以提高可读性）：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice the JSON object keys are titled as specified in the `struct` tags. The
    object key `"pages"` (mapped to the struct field, `PageCount`) is encoded as a
    string. Finally, the struct field, `ISBN,` is omitted, as annotated in the `struct`
    tag.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 JSON 对象键的名称与 `struct` 标签中指定的名称一致。对象键 `"pages"`（映射到结构体字段 `PageCount`）被编码为字符串。最后，结构体字段
    `ISBN` 被省略，如 `struct` 标签中所示。
