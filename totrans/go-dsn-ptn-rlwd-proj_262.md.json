["```go\nName is updated to implement json.Marshaller as shown:\n```", "```go\ntype Name struct { \n   First, Last string \n} \nfunc (n *Name) MarshalJSON() ([]byte, error) { \n   return []byte( \n         fmt.Sprintf(\"\"%s, %s\"\", n.Last, n.First) \n   ), nil \n} \n\ntype Book struct { \n   Title       string \n   PageCount   int \n   ISBN        string \n   Authors     []Name \n   Publisher   string \n   PublishDate time.Time \n} \nfunc main(){ \n   books := []Book{ \n         Book{ \n               Title:       \"Leaning Go\", \n               PageCount:   375, \n               ISBN:        \"9781784395438\", \n               Authors:     []Name{{\"Vladimir\", \"Vivien\"}}, \n               Publisher:   \"Packt\", \n               PublishDate: time.Date( \n                     2016, time.July, \n                     0, 0, 0, 0, 0, time.UTC), \n         }, \n         ... \n   } \n   ... \n   enc := json.NewEncoder(file) \n   if err := enc.Encode(books); err != nil { \n         fmt.Println(err) \n   } \n} \n\n```", "```go\n [\n ...\n {\n                \"Title\":\"Leaning Go\",\n                \"PageCount\":375,\n                \"ISBN\":\"9781784395438\",\n                \"Authors\":[\"Vivien, Vladimir\"],\n                \"Publisher\":\"Packt\",\n                \"PublishDate\":\"2016-06-30T00:00:00Z\"\n          },\n          ...\n    ] \n\njson.Unmarshaler to handle the JSON output for the NameÂ type:\n```", "```go\ntype Name struct { \n   First, Last string \n} \n\nfunc (n *Name) UnmarshalJSON(data []byte) error { \n   var name string \n   err := json.Unmarshal(data, &name) \n   if err != nil { \n         fmt.Println(err) \n         return err \n   } \n   parts := strings.Split(name, \", \") \n   n.Last, n.First = parts[0], parts[1] \n   return nil \n} \n\n```"]