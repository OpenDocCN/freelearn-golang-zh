- en: Custom encoding and decoding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch10/json3.go
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous example, values of the `Name` type are serialized as a JSON
    string (instead of an object as earlier). The serialization is handled by the
    method `Name.MarshallJSON` which returns an array of bytes that contains the last
    and first name separated by a comma. The preceding code generates the following
    JSON output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch10/json4.go
  prefs: []
  type: TYPE_NORMAL
- en: The `Name` type is an implementation of `json.Unmarshaler`. When the decoder
    encounters a JSON object with the key `"Authors"`, it uses the method `Name.Unmarshaler`
    to reconstitute the Go struct `Name` type from the JSON string.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Go standard libraries offer additional encoders (not covered here) including
    `base32`, `bas364`, `binary`, `csv`, `hex`, `xml`, `gzip`, and numerous encryption
    format encoders.
  prefs: []
  type: TYPE_NORMAL
