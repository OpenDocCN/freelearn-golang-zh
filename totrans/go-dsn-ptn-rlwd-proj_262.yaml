- en: Custom encoding and decoding
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义编码和解码
- en: '[PRE0]'
  id: totrans-1
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: golang.fyi/ch10/json3.go
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch10/json3.go
- en: 'In the previous example, values of the `Name` type are serialized as a JSON
    string (instead of an object as earlier). The serialization is handled by the
    method `Name.MarshallJSON` which returns an array of bytes that contains the last
    and first name separated by a comma. The preceding code generates the following
    JSON output:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`Name` 类型的值被序列化为 JSON 字符串（而不是像之前那样作为对象）。序列化由 `Name.MarshallJSON` 方法处理，该方法返回一个包含由逗号分隔的姓氏和名字的字节序列数组。前面的代码生成了以下
    JSON 输出：
- en: '[PRE2]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: golang.fyi/ch10/json4.go
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch10/json4.go
- en: The `Name` type is an implementation of `json.Unmarshaler`. When the decoder
    encounters a JSON object with the key `"Authors"`, it uses the method `Name.Unmarshaler`
    to reconstitute the Go struct `Name` type from the JSON string.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`Name` 类型是 `json.Unmarshaler` 的实现。当解码器遇到具有键 `"Authors"` 的 JSON 对象时，它使用 `Name.Unmarshaler`
    方法从 JSON 字符串重新构建 Go 结构体 `Name` 类型。'
- en: Note
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Go standard libraries offer additional encoders (not covered here) including
    `base32`, `bas364`, `binary`, `csv`, `hex`, `xml`, `gzip`, and numerous encryption
    format encoders.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Go 标准库提供了额外的编码器（此处未涵盖），包括 `base32`、`base64`、`binary`、`csv`、`hex`、`xml`、`gzip`
    以及众多加密格式编码器。
