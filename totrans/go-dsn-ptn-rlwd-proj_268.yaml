- en: Dialing a connection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Client programs use the `net.Dial` function, which has the following signature,Â to
    connect to a host service over the network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch11/dial0.go
  prefs: []
  type: TYPE_NORMAL
- en: Because the `net.Conn` type implements the `io.Reader` and `io.Writer`, it can
    be used to both send data and receive data using streaming IO semantics. In the
    preceding example, `conn.Write([]byte(httpRequest))` sends the HTTP request to
    the server. The response returned by the host is copied from the `conn` variable
    to the `file` variable using `io.Copy(file, conn)`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the previous is an illustration that shows how to connect to an HTTP
    server using raw TCP. The Go standard library provides a separate package designed
    specifically for HTTP programming which abstracts away the low-level protocol
    details (covered later in the chapter).
  prefs: []
  type: TYPE_NORMAL
- en: The `net` package also makes available network specific dialing functions such
    as `DialUDP`, `DiapTCP`, or `DialIP`, each returning its respective connection
    implementation. In most cases, the `net.Dial` function and the `net.Conn` interface
    provide adequate capabilities to connect and manage connections to a remote host.
  prefs: []
  type: TYPE_NORMAL
