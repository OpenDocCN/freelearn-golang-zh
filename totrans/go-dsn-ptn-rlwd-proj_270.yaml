- en: Accepting client connections
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接受客户端连接
- en: 'The `net.Listener` interface uses the *Accept* method to block indefinitely
    until a new connection arrives from a client. The following abbreviated code snippet
    shows a simple server that returns the string "Nice to meet you!" to each client
    connection and then disconnects immediately:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '`net.Listener` 接口使用 `*Accept*` 方法无限期地阻塞，直到从客户端收到新的连接。以下简化的代码片段展示了返回字符串 "很高兴见到你！"
    给每个客户端连接并立即断开连接的简单服务器：'
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch11/listen0.go
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch11/listen0.go
- en: 'In the code, the `listener.Accept` method returns a value of the `net.Conn`
    type to handle data exchange between the server and the client (or it returns
    a non-nil `error` if it fails). The `conn.Write([]byte("Nice to meet you!"))`
    method call is used to write the response to the client. When the server program
    is running, it can be tested using a *telnet* client as shown in the following
    output:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，`listener.Accept` 方法返回一个 `net.Conn` 类型的值来处理服务器和客户端之间的数据交换（或者在失败时返回非 nil
    的 `error`）。`conn.Write([]byte("Nice to meet you!"))` 方法调用用于将响应写入客户端。当服务器程序运行时，可以使用以下输出所示的
    *telnet* 客户端进行测试：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To ensure that the server program continues to run and handle subsequent client
    connections, the call to the `Accept` method is wrapped within an infinite for-loop.
    As soon as a connection is closed, the loop restarts the cycle to wait for the
    next client connection. Also notice that it is a good practice to close the listener
    when the server process is shutting down with a call to `Listener.Close()`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保服务器程序继续运行并处理后续的客户端连接，`Accept` 方法的调用被包裹在一个无限循环中。一旦连接关闭，循环就会重新启动周期以等待下一个客户端连接。同时请注意，当服务器进程关闭时，通过调用
    `Listener.Close()` 关闭监听器是一个好的实践。
- en: Note
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The observant reader may notice that this simple server will not scale as it
    cannot handle more than one client request at once. In the next section, we will
    see the techniques for creating a scalable server.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细的读者可能会注意到，这个简单的服务器无法扩展，因为它一次无法处理多个客户端请求。在下一节中，我们将看到创建可扩展服务器的技术。
