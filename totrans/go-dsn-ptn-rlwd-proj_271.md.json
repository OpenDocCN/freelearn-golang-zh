["```go\nimport ( \n   \"net\" \n   ... \n   curr \"https://github.com/vladimirvivien/learning-go/ch11/curr0\" \n) \n\nvar currencies = curr.Load(\"./data.csv\") \n\nfunc main() { \n   ln, _ := net.Listen(\"tcp\", \":4040\") \n   defer ln.Close() \n\n   // connection loop \n   for { \n         conn, err := ln.Accept() \n         if err != nil { \n               fmt.Println(err) \n               conn.Close() \n               continue \n         }      \n         go handleConnection(conn) \n   } \n} \n\n// handle client connection \nfunc handleConnection(conn net.Conn) { \n   defer conn.Close() \n\n   // loop to stay connected with client \n   for { \n         cmdLine := make([]byte, (1024 * 4)) \n         n, err := conn.Read(cmdLine) \n         if n == 0 || err != nil { \n               return \n         } \n         cmd, param := parseCommand(string(cmdLine[0:n])) \n         if cmd == \"\" { \n               continue \n         } \n\n         // execute command \n         switch strings.ToUpper(cmd) { \n         case \"GET\": \n               result := curr.Find(currencies, param) \n               // stream result to client \n               for _, cur := range result { \n                     _, err := fmt.Fprintf( \n                           conn, \n                           \"%s %s %s %s\\n\", \n                           cur.Name, cur.Code, \n                           cur.Number, cur.Country, \n                     ) \n                     if err != nil { \n                           return \n                     } \n                     // reset deadline while writing, \n                     // closes conn if client is gone \n                     conn.SetWriteDeadline( \n                           time.Now().Add(time.Second * 5)) \n               } \n               // reset read deadline for next read \n               conn.SetReadDeadline( \n                     time.Now().Add(time.Second * 300)) \n\n         default: \n               conn.Write([]byte(\"Invalid command\\n\")) \n         } \n   } \n} \n\nfunc parseCommand(cmdLine string) (cmd, param string) { \n   parts := strings.Split(cmdLine, \" \") \n   if len(parts) != 2 { \n         return \"\", \"\" \n   } \n   cmd = strings.TrimSpace(parts[0]) \n   param = strings.TrimSpace(parts[1]) \n   return \n} \n\n```"]