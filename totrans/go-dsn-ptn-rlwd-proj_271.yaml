- en: A TCP API server
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TCP API服务器
- en: At this point, the chapter has covered the minimum networking components necessary
    to create client and service programs. The remainder of the chapter will discuss
    different versions of a server that implement a *monetary currency information*
    service. The service returns ISO 4217 monetary currency information with each
    request. The intent is to show the implications of creating networked services,
    along with their clients, using different application-level protocols.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本章已涵盖了创建客户端和服务程序所需的最基本的网络组件。本章剩余部分将讨论实现 *货币信息服务* 的服务器不同版本。该服务在每个请求中返回ISO
    4217货币信息。目的是展示创建网络服务及其客户端时使用不同应用层协议的影响。
- en: 'Earlier we introduced a very simple server to demonstrate the necessary steps
    required to set up a networked service. This section dives deeper into network
    programming by creating a TCP server that scales to handle many concurrent connections.
    The server code presented in this section has the following design goals:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 之前我们介绍了一个非常简单的服务器来演示设置网络服务所需的必要步骤。本节通过创建一个可扩展以处理许多并发连接的TCP服务器来深入探讨网络编程。本节中展示的服务器代码有以下设计目标：
- en: Use raw TCP to communicate between client and server
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用原始TCP在客户端和服务器之间进行通信
- en: Develop a simple text-based protocol, over TCP, for communication
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发一个简单的基于文本的TCP协议进行通信
- en: Clients can query the server for global currency information with text commands
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端可以使用文本命令查询服务器的全局货币信息
- en: Use a goroutine per connection to handle connection concurrency
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每个连接使用一个goroutine来处理连接并发
- en: Maintain connection until the client disconnects
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维持连接直到客户端断开
- en: The following lists an abbreviated version of the server code. The program uses
    the `curr` package (found at [https://github.com/vladimirvivien/learning-go/ch11/curr0](https://github.com/vladimirvivien/learning-go/ch11/curr0)),
    not discussed here, to load monetary currency data from a local CSV file into
    slice `currencies`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的列表提供了一个服务器代码的简略版本。该程序使用 `curr` 包（位于 [https://github.com/vladimirvivien/learning-go/ch11/curr0](https://github.com/vladimirvivien/learning-go/ch11/curr0)），此处未讨论，从本地CSV文件中加载货币数据到
    `currencies` 切片。
- en: 'Upon successful connection to a client, the server parses the incoming client
    commands specified with a simple text protocol with the format *GET <currency-filter-value>*
    where *<currency-filter-value>* specifies a string value used to search for currency
    information:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 成功连接到客户端后，服务器使用简单的文本协议解析传入的客户端命令，格式为 *GET <currency-filter-value>*，其中 *<currency-filter-value>*
    指定一个字符串值，用于搜索货币信息：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch11/tcpserv0.go
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch11/tcpserv0.go
- en: Unlike the simple server introduced in the last section, this server is able
    to service multiple client connections at the same time. Upon accepting a new
    connection, with `ln.Accept()`, it delegates the handling of new client connections
    to a goroutine with `go handleConnection(conn)`. The connection loop then continues
    immediately and waits for the next client connection.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一节中介绍的简单服务器不同，这个服务器能够同时处理多个客户端连接。在通过 `ln.Accept()` 接受新连接后，它将新客户端连接的处理委托给一个goroutine，使用
    `go handleConnection(conn)`。然后连接循环立即继续并等待下一个客户端连接。
- en: The `handleConnection` function manages the server communication with the connected
    client. It first reads and parses a slice of bytes, from the client, into a command
    string using `cmd, param := parseCommand(string(cmdLine[0:n]))`. Next, the code
    tests the command with a `switch` statement. If the `cmd` is equal to `"GET"`,
    the code searches slice `currencies` for values that matches `param` with a call
    to `curr.Find(currencies, param)`. Finally, it streams the search result to the
    client's connection using `fmt.Fprintf(conn, "%s %s %s %s\n", cur.Name, cur.Code,
    cur.Number, cur.Country)`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`handleConnection` 函数管理服务器与连接客户端的通信。它首先读取并解析从客户端传来的字节数组，使用 `cmd, param := parseCommand(string(cmdLine[0:n]))`
    将其转换为命令字符串。接下来，代码使用 `switch` 语句测试命令。如果 `cmd` 等于 `"GET"`，代码将调用 `curr.Find(currencies,
    param)` 在 `currencies` 切片中搜索与 `param` 匹配的值。最后，它使用 `fmt.Fprintf(conn, "%s %s %s
    %s\n", cur.Name, cur.Code, cur.Number, cur.Country)` 将搜索结果流式传输到客户端的连接。'
- en: The simple text protocol supported by the server does not include any sort of
    session control or control messages. Therefore, the code uses the `conn.SetWriteDeadline`
    method to ensure the connection to the client does not linger unnecessarily for
    long periods of time. The method is called during the loop that streams out a
    response to the client. It is set for a deadline of 5 seconds to ensure the client
    is always ready to receive the next chunk of bytes within that time, otherwise
    it times the connection out.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器支持的简单文本协议不包含任何形式的会话控制或控制消息。因此，代码使用`conn.SetWriteDeadline`方法来确保与客户端的连接不会无必要地长时间挂起。该方法在循环中调用，循环用于向客户端发送响应。它被设置为5秒的截止时间，以确保客户端在此时间内始终准备好接收下一块字节，否则它会超时连接。
