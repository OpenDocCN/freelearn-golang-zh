- en: The http.Client type
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`http.Client` 类型'
- en: 'The `http.Client` struct represents an HTTP client and is used to create HTTP
    requests and retrieve responses from a server. The following illustrates how to
    retrieve the text content of Beowulf from Project Gutenberg''s website located
    at [http://gutenberg.org/cache/epub/16328/pg16328.txt](http://gutenberg.org/cache/epub/16328/pg16328.txt), using
    the `client` variable of the `http.Client` type and prints its content to a standard
    output:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '`http.Client` 结构体代表一个 HTTP 客户端，用于创建 HTTP 请求并从服务器检索响应。以下示例展示了如何使用 `http.Client`
    类型的 `client` 变量从位于 [http://gutenberg.org/cache/epub/16328/pg16328.txt](http://gutenberg.org/cache/epub/16328/pg16328.txt)
    的 Project Gutenberg 网站检索 Beowulf 的文本内容，并将其内容打印到标准输出：'
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch11/httpclient1.go
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch11/httpclient1.go
- en: The previous example uses the `client.Get` method to retrieve content from the
    remote server using the HTTP protocol method `GET` internally. The `GET` method
    is part of several convenience methods offered, by the Client type, to interact
    with HTTP servers as summarized in the following table. Notice that all of these
    methods return a value of the `*http.Response` type (discussed later) to handle
    responses returned by the HTTP server.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个示例使用 `client.Get` 方法通过 HTTP 协议的 `GET` 方法从远程服务器检索内容。`GET` 方法是客户端类型提供的几个便利方法之一，用于与
    HTTP 服务器交互，如下表所示。请注意，所有这些方法都返回一个 `*http.Response` 类型的值（稍后讨论），以处理 HTTP 服务器返回的响应。
- en: '| **Method** | **Description** |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| **方法** | **描述** |'
- en: '| `Client.Get` | As discussed earlier, `Get` is a convenience method that issues
    an HTTP `GET` method to retrieve the resource specified by the `url` parameter
    from the server:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Client.Get` | 如前所述，`Get` 是一个便利方法，它向服务器发送一个 HTTP `GET` 方法请求，以从服务器检索由 `url`
    参数指定的资源：'
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '|'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Client.Post` | The `Post` method is a convenience method that issues an
    HTTP `POST` method to send the content specified by the `body` parameter to the
    server specified by the `url` parameter:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Client.Post` | `Post` 方法是一个便利方法，它向由 `url` 参数指定的服务器发送由 `body` 参数指定的内容：'
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '|'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Client.PostForm` | The `PostForm` method is a convenience method that uses
    the HTTP `POST` method to send form `data`, specified as mapped key/value pairs,
    to the server:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Client.PostForm` | `PostForm` 方法是一个便利方法，它使用 HTTP `POST` 方法将表单 `data`（指定为映射的键/值对）发送到服务器：'
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '|'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Client.Head` | The `Head` method is a convenience method that issues an
    HTTP method, `HEAD`, to the remote server specified by the `url` parameter:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Client.Head` | `Head` 方法是一个便利方法，它向由 `url` 参数指定的远程服务器发送 HTTP 方法 `HEAD`：'
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '|'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Client.Do` | This method generalizes the request and response interaction
    with a remote HTTP server. It is wrapped internally by the methods listed in this
    table. Section *Handling client requests and responses* discusses how to use this
    method to talk to the server. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `Client.Do` | 此方法泛化了与远程 HTTP 服务器的请求和响应交互。它被内部封装在本表列出的方法中。*处理客户端请求和响应*部分讨论了如何使用此方法与服务器通信。
    |'
- en: 'It should be noted that the HTTP package uses an internal `http.Client` variable
    designed to mirror the preceding methods as package functions for further convenience.
    They include `http.Get`, `*http.Post*` , `http.PostForm`, and `http.Head`. The
    following snippet shows the previous example using `http.Get` instead of the method
    from the `http.Client`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 应当注意，HTTP 包使用一个内部 `http.Client` 变量，该变量旨在作为包函数来镜像前面的方法，以提供进一步的便利。这些方法包括 `http.Get`、`*http.Post*`、`http.PostForm`
    和 `http.Head`。以下代码片段展示了使用 `http.Get` 而不是 `http.Client` 中的方法的前一个示例：
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: golang.fyi/ch11/httpclient1a.go
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch11/httpclient1a.go
