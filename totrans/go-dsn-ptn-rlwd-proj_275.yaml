- en: The http.Client type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `http.Client` struct represents an HTTP client and is used to create HTTP
    requests and retrieve responses from a server. The following illustrates how to
    retrieve the text content of Beowulf from Project Gutenberg''s website located
    at [http://gutenberg.org/cache/epub/16328/pg16328.txt](http://gutenberg.org/cache/epub/16328/pg16328.txt), using
    the `client` variable of the `http.Client` type and prints its content to a standard
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch11/httpclient1.go
  prefs: []
  type: TYPE_NORMAL
- en: The previous example uses the `client.Get` method to retrieve content from the
    remote server using the HTTP protocol method `GET` internally. The `GET` method
    is part of several convenience methods offered, by the Client type, to interact
    with HTTP servers as summarized in the following table. Notice that all of these
    methods return a value of the `*http.Response` type (discussed later) to handle
    responses returned by the HTTP server.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `Client.Get` | As discussed earlier, `Get` is a convenience method that issues
    an HTTP `GET` method to retrieve the resource specified by the `url` parameter
    from the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Client.Post` | The `Post` method is a convenience method that issues an
    HTTP `POST` method to send the content specified by the `body` parameter to the
    server specified by the `url` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Client.PostForm` | The `PostForm` method is a convenience method that uses
    the HTTP `POST` method to send form `data`, specified as mapped key/value pairs,
    to the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Client.Head` | The `Head` method is a convenience method that issues an
    HTTP method, `HEAD`, to the remote server specified by the `url` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Client.Do` | This method generalizes the request and response interaction
    with a remote HTTP server. It is wrapped internally by the methods listed in this
    table. Section *Handling client requests and responses* discusses how to use this
    method to talk to the server. |'
  prefs: []
  type: TYPE_TB
- en: 'It should be noted that the HTTP package uses an internal `http.Client` variable
    designed to mirror the preceding methods as package functions for further convenience.
    They include `http.Get`, `*http.Post*` , `http.PostForm`, and `http.Head`. The
    following snippet shows the previous example using `http.Get` instead of the method
    from the `http.Client`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch11/httpclient1a.go
  prefs: []
  type: TYPE_NORMAL
