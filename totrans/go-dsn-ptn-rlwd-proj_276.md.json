["```go\nTimeout attribute of the Client type:\n```", "```go\nfunc main() { \n   client := &http.Client{ \n         Timeout: 21 * time.Second \n   } \n   resp, err := client.Get( \n         \"http://tools.ietf.org/rfc/rfc7540.txt\") \n   if err != nil { \n         fmt.Println(err) \n         return \n   } \n   defer resp.Body.Close() \n   io.Copy(os.Stdout, resp.Body) \n} \n\nDisableKeepAlive field. The code also uses the Dial function to specify further granular control over the HTTP connection used by the underlying client, setting its timeout value to 30 seconds:\n```", "```go\nfunc main() { \n   client := &http.Client{ \n         Transport: &http.Transport{ \n               DisableKeepAlives: true, \n               Dial: (&net.Dialer{ \n                  Timeout:   30 * time.Second, \n               }).Dial, \n         }, \n   } \n... \n} \n\n```"]