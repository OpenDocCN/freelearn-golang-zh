- en: Handling client requests and responses
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch11/httpclient3.go
  prefs: []
  type: TYPE_NORMAL
- en: 'The `http.NewRequest` function has the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The method accepts a pointer to an `http.Request` value, as discussed in the
    previous section. It then returns a pointer to an `http.Response` value or an
    error if the request fails. In the previous source code, `resp, err := client.Do(req)`
    is used to send the request to the server and assigns the response to the `resp`
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: The response from the server is encapsulated in struct `http.Response` which
    contains several fields to describe the response including the HTTP response status,
    content length, headers, and the response body. The response body, exposed as
    the `http.Response.Body` field, implements the `io.Reader` which affords the use
    streaming IO primitives to consume the response content.
  prefs: []
  type: TYPE_NORMAL
- en: The `Body` field also implements `*io.Closer*` which allows the closing of IO
    resources. The previous source uses `defer resp.Body.Close()` to close the IO
    resource associated with the response body. This is a recommended idiom when the
    server is expected to return a non-nil body.
  prefs: []
  type: TYPE_NORMAL
