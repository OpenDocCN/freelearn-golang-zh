- en: A simple HTTP server
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个简单的 HTTP 服务器
- en: 'The HTTP package provides two main components to accept HTTP requests and serve
    responses:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 包提供了两个主要组件来接受 HTTP 请求并服务响应：
- en: The `http.Handler` interface
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http.Handler` 接口'
- en: The `http.Server` type
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http.Server` 类型'
- en: 'The `http.Server` type uses the `http.Handler` interface type, defined in the
    following listing, to receive requests and server responses:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`http.Server` 类型使用在以下列表中定义的 `http.Handler` 接口类型来接收请求和服务器响应：'
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: golang.fyi/ch11/httpserv0.go
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch11/httpserv0.go
- en: 'In the previous code, the `msg` type, which uses a string as its underlying
    type, implements the `ServeHTTP()` method making it a valid HTTP handler. Its
    `ServeHTTP` method uses the response parameter, `resp`, to print response headers
    `"200 OK"` and `"Content-Type: text/html"`. The method also writes the string
    value `m` to the response variable using `fmt.Fprint(resp, m)` which is sent back
    to the client.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '在之前的代码中，`msg` 类型，它使用字符串作为其底层类型，实现了 `ServeHTTP()` 方法，使其成为一个有效的 HTTP 处理程序。其 `ServeHTTP`
    方法使用响应参数 `resp` 来打印响应头 `"200 OK"` 和 `"Content-Type: text/html"`。该方法还使用 `fmt.Fprint(resp,
    m)` 将字符串值 `m` 写入响应变量，并将其发送回客户端。'
- en: 'In the code, the variable `server` is initialized as `http.Server{Addr: ":4040",
    Handler: msgHandler}`. This means the server will listen on all network interfaces
    at port `4040` and will use variable `msgHandler` as its `http.Handler` implementation.
    Once initialized, the server is started with the `server.ListenAndServe()` method
    call that is used to block and listen for incoming requests.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '在代码中，变量 `server` 被初始化为 `http.Server{Addr: ":4040", Handler: msgHandler}`。这意味着服务器将在端口
    `4040` 上监听所有网络接口，并使用变量 `msgHandler` 作为其 `http.Handler` 实现方式。一旦初始化，服务器将通过 `server.ListenAndServe()`
    方法调用启动，该方法用于阻塞并监听传入的请求。'
- en: 'Besides the `Addr` and `Handler`, the `http.Server` struct exposes several
    additional fields that can be used to control different aspects of the HTTP service
    such as connection, timeout values, header sizes, and TLS configuration. For instance,
    the following snippet shows an updated example which specifies the server''s read
    and write timeouts:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `Addr` 和 `Handler` 之外，`http.Server` 结构体还公开了几个其他字段，可用于控制 HTTP 服务的不同方面，例如连接、超时值、头大小和
    TLS 配置。例如，以下片段显示了一个更新的示例，它指定了服务器的读取和写入超时：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: golang.fyi/ch11/httpserv1.go
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch11/httpserv1.go
- en: The default server
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 默认服务器
- en: 'It should be noted that the HTTP package includes a default server that can
    be used in simpler cases when there is no need for configuration of the server.
    The following abbreviated code snippet starts a simple server without explicitly
    creating a server variable:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 应注意，HTTP 包包含一个默认的服务器，可以在不需要配置服务器的情况下用于更简单的情况。以下简化的代码片段启动了一个简单的服务器，而没有显式创建服务器变量：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: golang.fyi/ch11/httpserv2.go
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch11/httpserv2.go
- en: In the code, the `http.ListenAndServe(":4040", msgHandler)` function is used
    to start a server which is declared as a variable in the HTTP package. The server
    is configured with the local address `":4040"` and the handler `msgHandler` (as
    was done earlier) to handle all incoming requests.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，使用 `http.ListenAndServe(":4040", msgHandler)` 函数启动了一个服务器，该服务器在 HTTP 包中声明为一个变量。服务器配置了本地地址
    `":4040"` 和处理程序 `msgHandler`（如之前所述）以处理所有传入的请求。
