- en: A simple HTTP server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The HTTP package provides two main components to accept HTTP requests and serve
    responses:'
  prefs: []
  type: TYPE_NORMAL
- en: The `http.Handler` interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `http.Server` type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `http.Server` type uses the `http.Handler` interface type, defined in the
    following listing, to receive requests and server responses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch11/httpserv0.go
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous code, the `msg` type, which uses a string as its underlying
    type, implements the `ServeHTTP()` method making it a valid HTTP handler. Its
    `ServeHTTP` method uses the response parameter, `resp`, to print response headers
    `"200 OK"` and `"Content-Type: text/html"`. The method also writes the string
    value `m` to the response variable using `fmt.Fprint(resp, m)` which is sent back
    to the client.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the code, the variable `server` is initialized as `http.Server{Addr: ":4040",
    Handler: msgHandler}`. This means the server will listen on all network interfaces
    at port `4040` and will use variable `msgHandler` as its `http.Handler` implementation.
    Once initialized, the server is started with the `server.ListenAndServe()` method
    call that is used to block and listen for incoming requests.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides the `Addr` and `Handler`, the `http.Server` struct exposes several
    additional fields that can be used to control different aspects of the HTTP service
    such as connection, timeout values, header sizes, and TLS configuration. For instance,
    the following snippet shows an updated example which specifies the server''s read
    and write timeouts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch11/httpserv1.go
  prefs: []
  type: TYPE_NORMAL
- en: The default server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It should be noted that the HTTP package includes a default server that can
    be used in simpler cases when there is no need for configuration of the server.
    The following abbreviated code snippet starts a simple server without explicitly
    creating a server variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch11/httpserv2.go
  prefs: []
  type: TYPE_NORMAL
- en: In the code, the `http.ListenAndServe(":4040", msgHandler)` function is used
    to start a server which is declared as a variable in the HTTP package. The server
    is configured with the local address `":4040"` and the handler `msgHandler` (as
    was done earlier) to handle all incoming requests.
  prefs: []
  type: TYPE_NORMAL
