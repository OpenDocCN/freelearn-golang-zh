["```go\ntype Currency struct { \n   Code    string `json:\"currency_code\"` \n   Name    string `json:\"currency_name\"` \n   Number  string `json:\"currency_number\"` \n   Country string `json:\"currency_country\"` \n} \n\ntype CurrencyRequest struct { \n   Get   string `json:\"get\"` \n   Limit int    `json:limit` \n} \n\n```", "```go\nimport ( \n   \"encoding/json\" \n   \"fmt\" \n   \"net/http\" \n\n   \" github.com/vladimirvivien/learning-go/ch11/curr1\" \n) \nvar currencies = curr1.Load(\"./data.csv\") \n\nfunc currs(resp http.ResponseWriter, req *http.Request) { \n   var currRequest curr1.CurrencyRequest \n   dec := json.NewDecoder(req.Body) \n   if err := dec.Decode(&currRequest); err != nil { \n         resp.WriteHeader(http.StatusBadRequest) \n         fmt.Println(err) \n         return \n   } \n\n   result := curr1.Find(currencies, currRequest.Get) \n   enc := json.NewEncoder(resp) \n   if err := enc.Encode(&result); err != nil { \n         fmt.Println(err) \n         resp.WriteHeader(http.StatusInternalServerError) \n         return \n   } \n} \n\nfunc main() { \n   mux := http.NewServeMux() \n   mux.HandleFunc(\"/currency\", get) \n\n   if err := http.ListenAndServe(\":4040\", mux); err != nil { \n         fmt.Println(err) \n   } \n} \n\n```", "```go\nvar currRequest curr1.CurrencyRequest \ndec := json.NewDecoder(req.Body) \nif err := dec.Decode(&currRequest); err != nil { ... } \n\n```", "```go\nresult := curr1.Find(currencies, currRequest.Get) \nenc := json.NewEncoder(resp) \nif err := enc.Encode(&result); err != nil { ... } \n\n```"]