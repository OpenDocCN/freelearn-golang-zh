["```go\nhttp.Client type to communicate with the server. It also uses the encoding/json sub-package to decode incoming data (note that the client also makes use of the curr1 package, shown earlier, which contains the types needed to communicate with the server):\n```", "```go\nimport ( \n   \"bytes\" \n   \"encoding/json\" \n   \"fmt\" \n   \"net/http\" \n\n   \" github.com/vladimirvivien/learning-go/ch11/curr1\" \n) \n\nfunc main() { \n   var param string \n   fmt.Print(\"Currency> \") \n   _, err := fmt.Scanf(\"%s\", &param) \n\n   buf := new(bytes.Buffer) \n   currRequest := &curr1.CurrencyRequest{Get: param} \n   err = json.NewEncoder(buf).Encode(currRequest) \n   if err != nil { \n         fmt.Println(err) \n         return \n   } \n\n   // send request \n   client := &http.Client{} \n   req, err := http.NewRequest( \n         \"POST\", \"http://127.0.0.1:4040/currency\", buf) \n   if err != nil { \n         fmt.Println(err) \n         return \n   } \n\n   resp, err := client.Do(req) \n   if err != nil { \n         fmt.Println(err) \n         return \n   } \n   defer resp.Body.Close() \n\n   // decode response \n   var currencies []curr1.Currency \n   err = json.NewDecoder(resp.Body).Decode(&currencies) \n   if err != nil { \n         fmt.Println(err) \n         return \n   } \n   fmt.Println(currencies) \n} \n\n```"]