- en: A JavaScript API server client
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript API服务器客户端
- en: So far, we have seen how to use the API service using the `cURL` command-line
    tool and a native Go client. This section shows the versatility of using HTTP
    to implement networked services by showcasing a web-based JavaScript client. In
    this approach, the client is a web-based GUI that uses modern HTML, CSS, and JavaScript
    to create an interface that interacts with the API server.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了如何使用`cURL`命令行工具和原生Go客户端来使用API服务。本节展示了使用HTTP实现网络服务的多功能性，通过展示一个基于Web的JavaScript客户端。在这种方法中，客户端是一个基于Web的GUI，它使用现代HTML、CSS和JavaScript来创建一个与API服务器交互的界面。
- en: 'First, the server code is updated with an additional handler to serve the static
    HTML file that renders the GUI on the browser. This is illustrated in the following
    code:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，服务器代码通过添加一个处理程序来更新，以服务在浏览器上渲染GUI的静态HTML文件。这如下面的代码所示：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![A JavaScript API server client](img/00027.jpeg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript API服务器客户端](img/00027.jpeg)'
- en: 'The next HTML page ([golang.fyi/ch11/currency.html](http://learning.golang.fyi/ch11/currency.html))
    is responsible for displaying the result of a currency search. It uses JavaScritpt
    functions along with the `jQuery.js` library (not covered here) to post JSON-encoded
    requests to the backend Go service as shown in the following abbreviated HTML
    and JavaScript snippets:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 下一页HTML页面([golang.fyi/ch11/currency.html](http://learning.golang.fyi/ch11/currency.html))负责显示货币搜索的结果。它使用JavaScript函数以及`jQuery.js`库（此处未介绍）将JSON编码的请求发送到后端Go服务，如下面的简化的HTML和JavaScript片段所示：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: golang.fyi/ch11/currency.html
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch11/currency.html
- en: A line-by-line analysis of the HTML and JavaScript code in this example is beyond
    the scope of the book; however, it is worth pointing out that the JavaScript `doRequest`
    function is where the interaction between the client and the server happens. It
    uses the jQuery's `$.ajax` function to build an HTTP request with a `PUT` method
    and to specify a JSON-encoded currency request object, `JSON.stringify({get:param})`,
    to send to the server. The `then` method accepts the callback function, `success(currencies)`,
    which handles the response from the server that parses displays in an HTML table.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对本例中HTML和JavaScript代码的逐行分析超出了本书的范围；然而，值得指出的是，JavaScript的`doRequest`函数是客户端与服务器交互的地方。它使用jQuery的`$.ajax`函数构建一个带有`PUT`方法的HTTP请求，并指定一个JSON编码的货币请求对象`JSON.stringify({get:param})`发送到服务器。`then`方法接受回调函数`success(currencies)`，该函数处理来自服务器的响应，并在HTML表格中解析显示。
- en: 'When a search value is provided in the text box on the GUI, the page displays
    its results in the table dynamically as shown in the following screenshot:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当在GUI的文本框中提供搜索值时，页面会动态地在表格中显示其结果，如下面的截图所示：
- en: '![A JavaScript API server client](img/00028.jpeg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript API服务器客户端](img/00028.jpeg)'
