["```go\nimport \"testing\" \n\nfunc TestVectorAdd(t *testing.T) { \n   v1 := New(8.218, -9.341) \n   v2 := New(-1.129, 2.111) \n   v3 := v1.Add(v2) \n   expect := New( \n       v1[0]+v2[0], \n       v1[1]+v2[1], \n   ) \n\n   if !v3.Eq(expect) { \n       t.Logf(\"Addition failed, expecting %s, got %s\",  \n          expect, v3) \n       t.Fail() \n   } \n   t.Log(v1, \"+\", v2, v3) \n} \n\nfunc TestVectorSub(t *testing.T) { \n   v1 := New(7.119, 8.215) \n   v2 := New(-8.223, 0.878) \n   v3 := v1.Sub(v2) \n   expect := New( \n       v1[0]-v2[0], \n       v1[1]-v2[1], \n   ) \n   if !v3.Eq(expect) { \n       t.Log(\"Subtraction failed, expecting %s, got %s\",  \n           expect, v3) \n           t.Fail() \n   } \n   t.Log(v1, \"-\", v2, \"=\", v3) \n} \n\nfunc TestVectorScale(t *testing.T) { \n   v := New(1.671, -1.012, -0.318) \n   v.Scale(7.41) \n   expect := New( \n       7.41*1.671, \n       7.41*-1.012, \n       7.41*-0.318, \n   ) \n   if !v.Eq(expect) { \n       t.Logf(\"Scalar mul failed, expecting %s, got %s\",  \n           expect, v) \n       t.Fail() \n   } \n   t.Log(\"1.671,-1.012, -0.318 Scale\", 7.41, \"=\", v) \n} \n\nThe source code of a test function usually sets up an expected value, which is pre-determined based on knowledge of the tested code. That value is then compared to the calculated value returned by the code being tested. For instance, when adding two vectors, we can calculate the expected result using the rules of vector additions, as shown in the following snippet:\n```", "```go\nv1 := New(8.218, -9.341) \nv2 := New(-1.129, 2.111) \nv3 := v1.Add(v2) \nexpect := New( \n    v1[0]+v2[0], \n    v1[1]+v2[1], \n) \n\nv1 and v2, and stored in the variable expect. Variable v3, on the other hand, stores the actual value of the vector, as calculated by the tested code. This allows us to test the actual versus the expected, as shown in the following:\n```", "```go\nif !v3.Eq(expect) { \n    t.Log(\"Addition failed, expecting %s, got %s\", expect, v3) \n    t.Fail() \n} \n\nfalse, then the test has failed. The code uses t.Fail() to signal the failure of the test function. Signaling failure is discussed in more detail in the Reporting failure section.\n```"]