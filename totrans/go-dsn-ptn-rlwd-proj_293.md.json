["```go\nfunc TestVectorDotProd(t *testing.T) { \n    v1 := New(7.887, 4.138).(SimpleVector) \n    v2 := New(-8.802, 6.776).(SimpleVector) \n    actual := v1.DotProd(v2) \n    expect := v1[0]*v2[0] - v1[1]*v2[1] \n    if actual != expect { \n        t.Logf(\"DotPoduct failed, expecting %d, got %d\",  \n          expect, actual) \n    } \n} \n\n```", "```go\n$> go test -run=VectorDot\nPASS\nok    github.com/vladimirvivien/learning-go/ch12/vector     0.001s\n\n```", "```go\nfunc TestVectorDotProd(t *testing.T) { \n... \n    if actual != expect { \n        t.Logf(\"DotPoduct failed, expecting %d, got %d\",  \n          expect, actual) \n        t.Fail() \n    } \n} \n\n```", "```go\n$> go test -run=VectorDot\n--- FAIL: TestVectorDotProd (0.00s)\nvec_test.go:109: DotPoduct failed, expecting -97.460462, got -41.382286\nFAIL\nexit status 1\nFAIL  github.com/vladimirvivien/learning-go/ch12/vector     0.002s\n\nErrorf method, which is equivalent to calling the Logf and Fail methods:\n```", "```go\nfunc TestVectorMag(t *testing.T) { \n    v := New(-0.221, 7.437) \n    expected := math.Sqrt(v[0]*v[0] + v[1]*v[1]) \n    if v.Mag() != expected { \n   t.Errorf(\"Magnitude failed, execpted %d, got %d\",  \n        expected, v.Mag()) \n    } \n} \n\n```"]