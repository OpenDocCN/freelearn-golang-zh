- en: Reporting failure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, the Go test runtime considers a test a success if the test function
    runs and returns normally without a panic. For example, the following test function
    is broken, since its expected value is not properly calculated. The test runtime,
    however, will always report it as passing because it does not include any code
    to report the failure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch12/vec_test.go
  prefs: []
  type: TYPE_NORMAL
- en: 'This false positive condition may go unnoticed, especially if the verbose flag
    is turned off, minimizing any visual clues that it is broken:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'One way the previous test can be fixed is by using the `Fail` method from type
    `testing.T` to signal failure, as shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'So now, when the test is executed, it correctly reports that it is broken,
    as shown in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch12/vector/vec.go
  prefs: []
  type: TYPE_NORMAL
- en: Type `testing.T` also offers `Fatal` and `Formatf` methods as a way of combining
    the logging of a message and the immediate termination of a test function.
  prefs: []
  type: TYPE_NORMAL
