- en: Table-driven tests
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表驱动测试
- en: 'One technique you often encounter in Go is the use of table-driven tests. This
    is where a set of input and expected output is stored in a data structure, which
    is then used to cycle through different test scenarios. For instance, in the following
    test function, the `cases` variable, of type `[]struct{vec SimpleVector; expected
    float64}`, to store several vector values and their expected magnitude values
    used to test the vector method `Mag`:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go语言中，你经常会遇到的一种技术是使用表驱动测试。这是指将一组输入和预期输出存储在数据结构中，然后用于循环不同的测试场景。例如，在下面的测试函数中，`cases`变量，其类型为`[]struct{vec
    SimpleVector; expected float64}`，用于存储多个向量值及其预期的幅度值，这些值用于测试向量方法`Mag`：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch12/vector/vec.go
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch12/vector/vec.go
- en: With each iteration of the loop, the code tests the value calculated by the
    `Mag` method against an expected value. Using this approach, we can test several
    combinations of input and their respective output, as is done in the preceding
    code. This technique can be expanded as necessary to include more parameters.
    For instance, a name field can be used to name each case, which is useful when
    the number of test cases is large. Or, to be even more fancy, one can include
    a function field in the test case struct to specify custom logic to use for each
    respective case.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环的每次迭代中，代码都会将`Mag`方法计算出的值与预期值进行比较。使用这种方法，我们可以测试多种输入及其相应的输出组合，正如前面代码中所做的那样。根据需要，这种技术可以扩展以包括更多参数。例如，可以使用名称字段为每个案例命名，这在测试案例数量较多时非常有用。或者，为了更加复杂，可以在测试案例结构体中包含一个函数字段，以指定为每个相应案例使用的自定义逻辑。
