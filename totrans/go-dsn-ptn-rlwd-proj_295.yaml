- en: Table-driven tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One technique you often encounter in Go is the use of table-driven tests. This
    is where a set of input and expected output is stored in a data structure, which
    is then used to cycle through different test scenarios. For instance, in the following
    test function, the `cases` variable, of type `[]struct{vec SimpleVector; expected
    float64}`, to store several vector values and their expected magnitude values
    used to test the vector method `Mag`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch12/vector/vec.go
  prefs: []
  type: TYPE_NORMAL
- en: With each iteration of the loop, the code tests the value calculated by the
    `Mag` method against an expected value. Using this approach, we can test several
    combinations of input and their respective output, as is done in the preceding
    code. This technique can be expanded as necessary to include more parameters.
    For instance, a name field can be used to name each case, which is useful when
    the number of test cases is large. Or, to be even more fancy, one can include
    a function field in the test case struct to specify custom logic to use for each
    respective case.
  prefs: []
  type: TYPE_NORMAL
