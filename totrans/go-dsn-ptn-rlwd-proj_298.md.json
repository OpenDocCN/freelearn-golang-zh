["```go\ntype vecClient struct { \n    svcAddr string \n    client *http.Client \n} \nfunc (c *vecClient) add( \n   vec0, vec1 vector.SimpleVector) (vector.SimpleVector, error) { \n   uri := c.svcAddr + \"/vec/add\" \n\n   // encode params \n   var body bytes.Buffer \n    params := []vector.SimpleVector{vec0, vec1} \n   if err := json.NewEncoder(&body).Encode(&params); err != nil { \n         return []float64{}, err \n   } \n   req, err := http.NewRequest(\"POST\", uri, &body) \n   if err != nil { \n        return []float64{}, err \n   } \n\n   // send request \n   resp, err := c.client.Do(req) \n   if err != nil { \n       return []float64{}, err \n   } \n   defer resp.Body.Close() \n\n   // handle response \n   var result vector.SimpleVector \n   if err := json.NewDecoder(resp.Body). \n        Decode(&result); err != nil { \n        return []float64{}, err \n    } \n    return result, nil \n} \n\n```", "```go\nimport( \n    \"net/http\" \n    \"net/http/httptest\" \n    ... \n) \nfunc TestClientAdd(t *testing.T) { \n   server := httptest.NewServer(http.HandlerFunc( \n         func(resp http.ResponseWriter, req *http.Request) { \n             // test incoming request path \n             if req.URL.Path != \"/vec/add\" { \n                 t.Errorf(\"unexpected request path %s\",  \n                    req.URL.Path) \n                   return \n               } \n               // test incoming params \n               body, _ := ioutil.ReadAll(req.Body) \n               params := strings.TrimSpace(string(body)) \n               if params != \"[[1,2],[3,4]]\" { \n                     t.Errorf(\"unexpected params '%v'\", params) \n                     return \n               } \n               // send result \n               result := vector.New(1, 2).Add(vector.New(3, 4)) \n               err := json.NewEncoder(resp).Encode(&result) \n               if err != nil { \n                     t.Fatal(err) \n                     return \n               } \n         }, \n   )) \n   defer server.Close() \n   client := newVecClient(server.URL) \n   expected := vector.New(1, 2).Add(vector.New(3, 4)) \n   result, err := client.add(vector.New(1, 2), vector.New(3, 4)) \n   if err != nil { \n         t.Fatal(err) \n   } \n   if !result.Eq(expected) { \n         t.Errorf(\"Expecting %s, got %s\", expected, result) \n   } \n} \n\n```"]