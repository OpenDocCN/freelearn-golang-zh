- en: Testing HTTP client code
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试HTTP客户端代码
- en: Creating test code for an HTTP client is more involved, since you actually need
    a server running for proper testing. Luckily, package `httptest` provides type
    `httptest.Server` to programmatically create servers to test client requests and
    send back mock responses to the client.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 为HTTP客户端创建测试代码更为复杂，因为你实际上需要一个正在运行的服务器来进行适当的测试。幸运的是，`httptest`包提供了类型`httptest.Server`，可以程序化地创建服务器以测试客户端请求，并将模拟响应发送回客户端。
- en: 'To illustrate, let us consider the following code, which partially shows the
    implementation of an HTTP client to the vector server presented earlier (see the
    full code listing at [https://github.com/vladimirvivien/learning-go/ch12/client/client.go](https://github.com/vladimirvivien/learning-go/ch12/client/client.go)).
    The `add` method encodes the parameters `vec0` and `vec2` of type `vector.SimpleVector`
    as JSON objects, which are sent to the server using `c.client.Do(req)`. The response
    is decoded from the JSON array into type `vector.SimpleVector` assigned to variable
    `result`:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明，让我们考虑以下代码，它部分展示了之前提到的向量服务器的HTTP客户端实现（请参阅完整的代码列表[https://github.com/vladimirvivien/learning-go/ch12/client/client.go](https://github.com/vladimirvivien/learning-go/ch12/client/client.go)）。`add`方法将`vec0`和`vec2`的参数编码为JSON对象，这些对象通过`c.client.Do(req)`发送到服务器。响应从JSON数组解码为类型为`vector.SimpleVector`的变量`result`：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch12/client/client.go
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch12/client/client.go
- en: We can use type `httptest.Server` to create code to test the requests sent by
    a client and to return data to the client code for further inspection. Function
    `httptest.NewServer` takes a value of type `http.Handler`, where the test logic
    for the server is encapsulated. The function then returns a new running HTTP server
    ready to serve on a system-selected port.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用类型`httptest.Server`来创建代码以测试客户端发送的请求，并将数据返回给客户端代码以进行进一步检查。`httptest.NewServer`函数接受一个类型为`http.Handler`的值，其中封装了服务器的测试逻辑。然后，该函数返回一个新的正在运行的HTTP服务器，准备在系统选择的端口上提供服务。
- en: 'The following test function shows how to use `httptest.Server` to exercise
    the `add` method from the client code presented earlier. Notice that when creating
    the server, the code uses type `http.HandlerFunc`, which is an adapter that takes
    a function value to produce an `http.Handler`. This convenience allows us to skip
    the creation of a separate type to implement a new `http.Handler`:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以下测试函数展示了如何使用`httptest.Server`来测试之前提供的客户端代码中的`add`方法。请注意，在创建服务器时，代码使用类型`http.HandlerFunc`，这是一个适配器，它接受一个函数值以生成`http.Handler`。这种便利性允许我们跳过创建一个单独的类型来实现新的`http.Handler`：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: golang.fyi/ch12/client/client_test.go
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch12/client/client_test.go
- en: The test function first sets up the `server` along with its handler function.
    Inside the function of `http.HandlerFunc`, the code first ensures that the client
    requests the proper path of `"/vec/add"`. Next, the code inspects the request
    body from the client, ensuring proper JSON format and valid parameters for the
    add operation. Finally, the handler function encodes the expected result as JSON
    and sends it as a response to the client.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 测试函数首先设置`server`及其处理函数。在`http.HandlerFunc`函数内部，代码首先确保客户端请求正确的`"/vec/add"`路径。接下来，代码检查客户端的请求体，确保JSON格式正确且参数对加法操作有效。最后，处理函数将预期结果编码为JSON，并将其作为响应发送给客户端。
- en: The code uses the system-generated `server` address to create a new `client`
    with `newVecClient(server.URL)`. Method call `client.add(vector.New(1, 2), vector.New(3,
    4))` sends a request to the test server to calculate the vector addition of the
    two values in its parameter list. As shown earlier, the test server merely simulates
    the real server code and returns the calculated vector value. The `result` is
    inspected against the `expected` value to ensure proper working of the `add` method.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 代码使用系统生成的`server`地址通过`newVecClient(server.URL)`创建一个新的`client`。方法调用`client.add(vector.New(1,
    2), vector.New(3, 4))`向测试服务器发送请求，以计算其参数列表中两个值的向量加法。如前所述，测试服务器仅模拟真实服务器的代码，并返回计算出的向量值。`result`与`expected`值进行比较，以确保`add`方法正常工作。
