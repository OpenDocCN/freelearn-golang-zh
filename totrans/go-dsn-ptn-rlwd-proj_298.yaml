- en: Testing HTTP client code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating test code for an HTTP client is more involved, since you actually need
    a server running for proper testing. Luckily, package `httptest` provides type
    `httptest.Server` to programmatically create servers to test client requests and
    send back mock responses to the client.
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate, let us consider the following code, which partially shows the
    implementation of an HTTP client to the vector server presented earlier (see the
    full code listing at [https://github.com/vladimirvivien/learning-go/ch12/client/client.go](https://github.com/vladimirvivien/learning-go/ch12/client/client.go)).
    The `add` method encodes the parameters `vec0` and `vec2` of type `vector.SimpleVector`
    as JSON objects, which are sent to the server using `c.client.Do(req)`. The response
    is decoded from the JSON array into type `vector.SimpleVector` assigned to variable
    `result`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch12/client/client.go
  prefs: []
  type: TYPE_NORMAL
- en: We can use type `httptest.Server` to create code to test the requests sent by
    a client and to return data to the client code for further inspection. Function
    `httptest.NewServer` takes a value of type `http.Handler`, where the test logic
    for the server is encapsulated. The function then returns a new running HTTP server
    ready to serve on a system-selected port.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following test function shows how to use `httptest.Server` to exercise
    the `add` method from the client code presented earlier. Notice that when creating
    the server, the code uses type `http.HandlerFunc`, which is an adapter that takes
    a function value to produce an `http.Handler`. This convenience allows us to skip
    the creation of a separate type to implement a new `http.Handler`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: golang.fyi/ch12/client/client_test.go
  prefs: []
  type: TYPE_NORMAL
- en: The test function first sets up the `server` along with its handler function.
    Inside the function ofÂ `http.HandlerFunc`, the code first ensures that the client
    requests the proper path of `"/vec/add"`. Next, the code inspects the request
    body from the client, ensuring proper JSON format and valid parameters for the
    add operation. Finally, the handler function encodes the expected result as JSON
    and sends it as a response to the client.
  prefs: []
  type: TYPE_NORMAL
- en: The code uses the system-generated `server` address to create a new `client`
    with `newVecClient(server.URL)`. Method call `client.add(vector.New(1, 2), vector.New(3,
    4))` sends a request to the test server to calculate the vector addition of the
    two values in its parameter list. As shown earlier, the test server merely simulates
    the real server code and returns the calculated vector value. The `result` is
    inspected against the `expected` value to ensure proper working of the `add` method.
  prefs: []
  type: TYPE_NORMAL
