- en: Test coverage
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试覆盖率
- en: When writing tests, it is often important to know how much of the actual code
    is getting exercised (or covered) by the tests. That number is an indication of
    the penetration of the test logic against the source code. Whether you agree or
    not, in many software development practices, test coverage is a critical metric
    as it is a measure of how well the code is tested.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当编写测试时，了解实际代码中有多少部分被测试（或覆盖）通常很重要。这个数字是测试逻辑对源代码渗透程度的指示。无论你是否同意，在许多软件开发实践中，测试覆盖率是一个关键指标，因为它衡量了代码被测试的程度。
- en: 'Fortunately, the Go test tool comes with a built-in coverage tool. Running
    the Go test command with the `-cover` flag instruments the original source code
    with coverage logic. It then runs the generated test binary, providing a summary
    of the overall coverage profile of the package, as shown in the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Go 测试工具自带了一个内置的覆盖率工具。使用带有 `-cover` 标志的 Go 测试命令会对原始源代码进行覆盖率逻辑的注入。然后运行生成的测试二进制文件，提供包的整体覆盖率概要，如下所示：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The result shows a well-tested code with a coverage number of `87.8%`. We can
    use the test tool to extract more details about the section of the code that is
    tested. To do this, we use the `-coverprofile` flag to record coverage metrics
    to a file, as shown:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示代码经过良好测试，覆盖率为 `87.8%`。我们可以使用测试工具提取有关被测试代码部分的更多详细信息。为此，我们使用 `-coverprofile`
    标志将覆盖率指标记录到文件中，如下所示：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
