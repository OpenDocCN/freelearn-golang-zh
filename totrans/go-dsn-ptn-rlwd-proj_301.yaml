- en: Code benchmark
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码基准测试
- en: 'The purpose of benchmarking is to measure a code''s performance. The Go test
    command-line tool comes with support for the automated generation and measurement
    of benchmark metrics. Similar to unit tests, the test tool uses benchmark functions
    to specify what portion of the code to measure. The benchmark function uses the
    following function naming pattern and signature:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 基准测试的目的是衡量代码的性能。Go 测试命令行工具支持自动生成和测量基准指标。类似于单元测试，测试工具使用基准函数来指定要测量的代码部分。基准函数使用以下函数命名模式和签名：
- en: '*func Benchmark<Name>(*testing.B)*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*func Benchmark<Name>(*testing.B)*'
- en: 'Benchmark functions are expected to have names that start with *benchmark*
    and accept a pointer value of type `*testing.B`. The following shows a function
    that benchmarks the `Add` method for type `SimpleVector` (introduced earlier):'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 基准函数的名称应以 *benchmark* 开头，并接受类型为 `*testing.B` 的指针值。以下是一个基准函数的示例，用于基准测试 `SimpleVector`
    类型的 `Add` 方法（之前已介绍）：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: golang.fyi/ch12/vector/vec_bench_test.go
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: golang.fyi/ch12/vector/vec_bench_test.go
- en: Go's test runtime invokes the benchmark functions by injecting pointer `*testing.B`
    as a parameter. That value defines methods for interacting with the benchmark
    framework such as logging, failure-signaling, and other functionalities similar
    to type `testing.T`. Type `testing.B` also offers additional benchmark-specific
    elements, including an integer field `N`. It is intended to be the number of iterations
    that the benchmark function should use for effective measurements.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Go 的测试运行时会通过注入指针 `*testing.B` 作为参数来调用基准函数。该值定义了与基准框架交互的方法，例如日志记录、失败信号以及其他类似于
    `testing.T` 类型的功能。类型 `testing.B` 还提供了额外的基准特定元素，包括一个整数字段 `N`。它旨在是基准函数应使用的迭代次数，以进行有效的测量。
- en: The code being benchmarked should be placed within a `for` loop bounded by `N`,
    as illustrated in the previous example. For the benchmark to be effective, there
    should be no variances in the size of the input for each iteration of the loop.
    For instance, in the preceding benchmark, each iteration always uses a vector
    of size `2` (while the actual values of the vectors are randomized).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 正在被基准测试的代码应放置在由 `N` 界定的 `for` 循环中，如前一个示例所示。为了使基准测试有效，循环每次迭代的输入大小应保持不变。例如，在前面的基准测试中，每次迭代始终使用大小为
    `2` 的向量（而向量的实际值是随机化的）。
