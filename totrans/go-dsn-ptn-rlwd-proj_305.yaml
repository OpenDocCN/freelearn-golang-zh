- en: Adjusting N
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整N
- en: 'By default, the test framework gradually adjusts `N` to be large enough to
    arrive at stable and meaningful metrics over a period of *one second*. You cannot
    change `N` directly. However, you can use flag `-benchtime` to specify a benchmark
    run time and thus influence the number of iterations during a benchmark. For instance,
    the following runs the benchmark for a period of `5` seconds:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，测试框架会逐渐调整`N`，使其足够大，以便在一段时间内（一秒钟）获得稳定且有意义的指标。你不能直接更改`N`。然而，你可以使用标志`-benchtime`来指定基准运行时间，从而影响基准测试中的迭代次数。例如，以下命令将基准测试运行了`5`秒钟：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Notice that even though there is a drastic jump in the number iterations (factor
    of five or more) for each benchmark, the average performance time for each benchmark
    function remains reasonably consistent. This information provides valuable insight
    into the performance of your code. It is a great way to observe the impact of
    code or load changes on performance, as discussed in the following section.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，尽管每个基准测试的迭代次数（增加五倍或更多）有显著跳跃，但每个基准函数的平均性能时间仍然保持相对一致。这些信息为你的代码性能提供了宝贵的洞察。这是观察代码或负载变化对性能影响的一个很好的方法，正如下一节所讨论的。
