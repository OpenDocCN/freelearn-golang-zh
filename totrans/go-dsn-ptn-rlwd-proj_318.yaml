- en: Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Types give the user the ability to store values in mnemonic names. All programming
    languages have types related with numbers (to store integers, negative numbers,
    or floating point for example) with characters (to store a single character) with
    strings (to store complete words) andÂ so on. Go language has the common types
    found in most programming languages:'
  prefs: []
  type: TYPE_NORMAL
- en: The `bool` keyword is for Boolean type which represents a `True` or `False`
    state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Many numeric types being the most common:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `int` is a signed integer type, so int type represents a number from -2147483648
    to 2147483647 in 32 bits machines
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `byte` type represents a number from 0 to 255.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `float32` and `float64` types are the set of all IEEE-754 64/-bit floating-point
    numbers respectively.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You also have `signed int` type like `rune` which is an alias of `int32` type,
    a number that goes from -2147483648 to 2147483647 and `complex64` and `complex128`
    which are the set of all complex numbers with `float32`/ `float64` real and imaginary
    parts like *2.0i*.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `string` keyword for string type represents an array of characters enclosed
    in quotes like `"golang"` or `"computer"`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `array` that is a numbered sequence of elements of a single type and a fixed
    size (more about arrays later in this chapter). A list of numbers or lists of
    words with a fixed size is considered arrays.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `slice` type is a segment of an underlying array (more about this later
    in this chapter). This type is a bit confusing at the beginning because it seems
    like an array but we will see that actually, they are more powerful.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The structures that are the objects that are composed of another objects or
    types.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The pointers (more about this later in this chapter)are like directions in the
    memory of our program (yes, like mailboxes that you don't know what's inside).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The functions are interesting (more about this later in this chapter). You can
    also define functions as variables and pass them to other functions (yes, a function
    that uses a function, did you like Inception movie?).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `interface` is incredibly important for the language as they provide many
    encapsulation and abstraction functionalities that we'll need often. We'll use
    interfaces extensively during the book and they are presented in greater detail
    later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `map` types are unordered key-value structures. So for a given key, you
    have an associated value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The channels are the communication primitive in Go for concurrency programs.
    We'll look on channels with more detail on Chapter 8, *Dealing with Go's CSP concurrency*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
