- en: Variables and constants
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量和常量
- en: 'Variables are spaces in computer''s memory to store values that can be modified
    during the execution of the program. Variables and constants have a type like
    the ones described in preceding text. Although, you don''t need to explicitly
    write the type of them (although you can do it). This property to avoid explicit
    type declaration is what is called **Inferred types**. For example:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 变量是计算机内存中的空间，用于存储在程序执行过程中可以修改的值。变量和常量具有与前面描述的类型类似。尽管，你不需要明确写出它们的类型（尽管你可以这样做）。这种避免显式类型声明的特性被称为**推断类型**。例如：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here we are declaring a variable (with the keyword `var`) called `explicit`
    of string type. At the same time, we are defining the value to `Hello World!`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们使用关键字`var`声明了一个名为`explicit`的字符串类型的变量。同时，我们定义了其值为`Hello World!`。
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: But here we are doing exactly the same thing. We have avoided the `var` keyword
    and the `string` type declaration. Internally, Go's compiler will infer (guess)
    the type of the variable to a string type. This way you have to write much less
    code for each variable definition.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 但在这里我们正在做完全相同的事情。我们避免了使用`var`关键字和`string`类型声明。内部，Go的编译器会推断（猜测）变量的类型为字符串类型。这样你为每个变量定义就必须写更少的代码。
- en: 'The following lines use the `reflect` package to gather information about a
    variable. We are using it to print the type of (the `TypeOf` variable in the code)
    of both variables:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行使用`reflect`包来收集有关变量的信息。我们正在使用它来打印两个变量的类型（代码中的`TypeOf`变量）：
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When we run the program, the result is the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行程序时，结果是以下内容：
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As we expected, the compiler has inferred the type of the implicit variable
    to string too. Both have written the expected output to the console.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所预期，编译器也将隐式变量的类型推断为字符串。两者都将预期的输出写到了控制台。
