- en: Variables and constants
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Variables are spaces in computer''s memory to store values that can be modified
    during the execution of the program. Variables and constants have a type like
    the ones described in preceding text. Although, you don''t need to explicitly
    write the type of them (although you can do it). This property to avoid explicit
    type declaration is what is called **Inferred types**. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here we are declaring a variable (with the keyword `var`) called `explicit`
    of string type. At the same time, we are defining the value to `Hello World!`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: But here we are doing exactly the same thing. We have avoided the `var` keyword
    and the `string` type declaration. Internally, Go's compiler will infer (guess)
    the type of the variable to a string type. This way you have to write much less
    code for each variable definition.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following lines use the `reflect` package to gather information about a
    variable. We are using it to print the type of (the `TypeOf` variable in the code)
    of both variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'When we run the program, the result is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As we expected, the compiler has inferred the type of the implicit variable
    to string too. Both have written the expected output to the console.
  prefs: []
  type: TYPE_NORMAL
