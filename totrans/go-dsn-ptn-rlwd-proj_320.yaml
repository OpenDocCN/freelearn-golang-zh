- en: Operators
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运算符
- en: The operators are used to perform arithmetic operations and make comparisons
    between many things. The following operators are reserved by Go language.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 运算符用于执行算术运算和比较许多事物。以下运算符由Go语言保留。
- en: '![Operators](img/00030.jpeg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![运算符](img/00030.jpeg)'
- en: 'Most commonly used operators are the arithmetic operators and comparators.
    Arithmetic operators are as following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的运算符是算术运算符和比较运算符。算术运算符如下：
- en: The `+` operator for sums
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于求和的`+`运算符
- en: The `-` operator for subtractions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于减法的`-`运算符
- en: The `*` operator for multiplications
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于乘法的`*`运算符
- en: The `/` operator for divisions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于除法的`/`运算符
- en: The `%` operator for division remainders
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于除法余数的`%`运算符
- en: The `++` operator to add 1 to the current variable
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于将当前变量加1的`++`运算符
- en: The `--` operator to subtract 1 to the current variable
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于将当前变量减1的`--`运算符
- en: 'On the other side, comparators are used to check the differences between two
    statements:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，比较运算符用于检查两个语句之间的差异：
- en: The `==` operator to check if two values are equal
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查两个值是否相等的`==`运算符
- en: The `!=` operator to check if two values are different
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于检查两个值是否不同的`!=`运算符
- en: The `>` operator to check if left value is higher than right value
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查左值是否大于右值的`>`运算符
- en: The `<` operator to check if left value is lower than right value
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查左值是否小于右值的`<`运算符
- en: The `>=` operator to check if left value is higher or equal to right value
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查左值是否大于或等于右值的`>=`运算符
- en: The `<=` operator to check if left value is lower or equal to right value
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查左值是否小于或等于右值的`<=`运算符
- en: The `&&`operator to check if two values are `true`
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于检查两个值是否为`true`的`&&`运算符
- en: You also have the shifters to perform a binary shift to left or right of a value
    and a negated operator to invert some value. We´ll use these operators a lot during
    the following chapters so don´t worry too much about them now, just keep in mind
    that you cannot set the name of any variable, field or function in your code like
    this operators.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用位移运算符来执行值的左移或右移，以及一个取反运算符来反转某些值。在接下来的章节中，我们会大量使用这些运算符，所以现在不必过于担心它们，只需记住您不能像这些运算符一样在代码中设置任何变量、字段或函数的名称。
- en: Tip
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: What's the inverted value of 10? What's the negated value of 10? -10? Incorrect..
    10 in binary code is `1010` so if we negate every number we will have `0101` or
    `101` which is the number 5.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 10的取反值是多少？10的取反值是多少？-10？错误。10的二进制代码是`1010`，如果我们对每个数字取反，我们将得到`0101`或`101`，这是数字5。
