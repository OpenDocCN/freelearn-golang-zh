- en: Operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The operators are used to perform arithmetic operations and make comparisons
    between many things. The following operators are reserved by Go language.
  prefs: []
  type: TYPE_NORMAL
- en: '![Operators](img/00030.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Most commonly used operators are the arithmetic operators and comparators.
    Arithmetic operators are as following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `+` operator for sums
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `-` operator for subtractions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `*` operator for multiplications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `/` operator for divisions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `%` operator for division remainders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `++` operator to add 1 to the current variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `--` operator to subtract 1 to the current variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On the other side, comparators are used to check the differences between two
    statements:'
  prefs: []
  type: TYPE_NORMAL
- en: The `==` operator to check if two values are equal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `!=` operator to check if two values are different
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `>` operator to check if left value is higher than right value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<` operator to check if left value is lower than right value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `>=` operator to check if left value is higher or equal to right value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<=` operator to check if left value is lower or equal to right value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `&&`operator to check if two values are `true`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You also have the shifters to perform a binary shift to left or right of a value
    and a negated operator to invert some value. We´ll use these operators a lot during
    the following chapters so don´t worry too much about them now, just keep in mind
    that you cannot set the name of any variable, field or function in your code like
    this operators.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What's the inverted value of 10? What's the negated value of 10? -10? Incorrect..
    10 in binary code is `1010` so if we negate every number we will have `0101` or
    `101` which is the number 5.
  prefs: []
  type: TYPE_NORMAL
