- en: The forâ€¦range statement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `_for_` loop is also similar than in common programming languages but you
    don't use parentheses either
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As you have probably imagined if you have computer science background, we infer
    an `int` variable defined as `0` and execute the code between the brackets while
    the condition (`i<=10`) is satisfied. Finally, for each execution, we added `1`
    to the value of `i`. This code will print the numbers from 0 to 10\. You also
    have a special syntax to iterate over arrays or slices which is `range`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: First, the `fmt` (format) is a very common Go package that we will use extensively
    to give shape to the message that we will print in the console.
  prefs: []
  type: TYPE_NORMAL
- en: 'Regarding for, you can use the `range` keyword to retrieve every item in a
    collection like `my_array` and assign them to the value temporal variable. It
    will also give you an `index` variable to know the position of the value you''re
    retrieving. It''s equivalent to write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `len` method is used to know the length of a collection.
  prefs: []
  type: TYPE_NORMAL
- en: If you execute this code, you'll see that the result is the same.
  prefs: []
  type: TYPE_NORMAL
