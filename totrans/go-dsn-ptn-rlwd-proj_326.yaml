- en: What does a function look like?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A function is a piece of code with its own variables and flow that doesn''t
    affect anything outside of the opening and close brackets but global package or
    program variables. Functions in Go has the following composition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Following the previous definition, we could have the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Functions can call other functions. For example, in our previous `hello` function,
    we are receiving a message argument of type string and we are calling a different
    function `fmt.Printf("Hello %s\n", message)` with our argument as parameter. Functions
    can also be used as parameters when calling other functions or be returned.
  prefs: []
  type: TYPE_NORMAL
- en: It is very important to choose a good name for your function so that it is very
    clear what it is about without writing too many comments over it. This can look
    a bit trivial but choosing a good name is not so easy. A short name must show
    what the function does and let the reader imagine what error is it handling or
    if it's doing any kind of logging. Within your function, you want to do everything
    that a particular behavior need but also to control expected errors and wrapping
    them properly.
  prefs: []
  type: TYPE_NORMAL
- en: So, to write a function is more than simply throw a couple of lines that does
    what you need, that's why it is important to write a unit test, make them small
    and concise.
  prefs: []
  type: TYPE_NORMAL
