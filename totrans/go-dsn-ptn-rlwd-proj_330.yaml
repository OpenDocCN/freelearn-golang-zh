- en: Function with undetermined number of parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Functions can be declared as *variadic*. This means that its number of arguments
    can vary. What this does is to provide an array to the scope of the function that
    contains the arguments that the function was called with. This is convenient if
    you don''t want to force the user to provideÂ an array when using this function.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we have a `sum` function that will return the sum of all its
    arguments but take a closer look at the `main` function where we call `sum`. As
    you can see now, first we call `sum` with three arguments and then with five arguments.
    For `sum` functions, it doesn't matter how many arguments you pass as it treats
    its arguments as an array all in all. So on our `sum` definition, we simply iterate
    over the array to add each number to the `result` integer.
  prefs: []
  type: TYPE_NORMAL
- en: Naming returned types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Have you realized that we have given a name to the returned type? Usually, our
    declaration would be written as `func sum(args int) int` but you can also name
    the variable that you'll use within the function as a return value. Naming the
    variable in the return type would also zero-value it (in this case, an `int` will
    be initialized as zero). At the end, you just need to return the function (without
    value) and it will take the respective variable from the scope as returned value.
    This also makes easier to follow the mutation that the returning variable is suffering
    as well as to ensure that you aren't returning a mutated argument.
  prefs: []
  type: TYPE_NORMAL
