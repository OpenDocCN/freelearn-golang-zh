- en: Arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An array is a numbered sequence of elements of a single type. You can store
    100 different unsigned integers in a unique variable, three strings or 400 `bool`
    values. Their size cannot be changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'You must declare the length of the array on its creation as well as the type.
    You can also assign some value on creation. For example here you have 100 `int`
    values all with `0` as value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Or an array of size 3 with `strings` already assigned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here you have an array of 2 `bool` values that we initialize later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Zero-initialization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In our previous example, we have initialized an `array` of `bool` values of
    size `2`. We wouldn't need to assign `arr[1]` to `false` because of the nature
    of zero-initialization in the language. Go will initialize every value in a `bool`
    array to `false`. We will look deeper to zero-initialization later in this chapter.
  prefs: []
  type: TYPE_NORMAL
