- en: Maps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Maps are like dictionaries--for each word, we have a definition but we can
    use any type as word or definition and they''ll never be ordered alphabetically.
    We can create maps of string that point to numbers, a string that points to `interfaces` and
    `structs` that point to `int` and `int` to `function`. You cannot use as key:
    slices, the functions, and maps. Finally, you create maps by using the keyword
    make and specifying the key type and the value type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When parsing JSON content, you can also use them to get a `string[interface]`
    map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `myJsonMap` variable is a map that will store the contents of JSON and that
    we will need to pass its pointer to the `Unmarshal` function. The `jsonData` variable
    declares an array of bytes with the typical content of a JSON object; we are using
    this as the mock object. Then, we unmarshal the contents of the JSON storing the
    result of the memory location of `myJsonMap` variable. After checking that the
    conversion was ok and the JSON byte array didn't have syntax mistakes, we can
    access the contents of the map in a JSON-like syntax.
  prefs: []
  type: TYPE_NORMAL
