- en: Zero-initialization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 零初始化。
- en: 'Zero-initialization is a source of confusion sometimes. They are default values
    for many types that are assigned even if you don''t provide a value for the definition.
    Following are the zero-initialization for various types:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 零初始化有时是混淆的来源。它们是许多类型的默认值，即使你没有为定义提供值，也会被分配。以下是各种类型的零初始化：
- en: The `false` initialization for `bool` type.
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bool`类型的`false`初始化。'
- en: Using `0` values for `int` type.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`int`类型，使用`0`值。
- en: Using `0.0` for `float` type.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`float`类型，使用`0.0`。
- en: Using `""` (empty strings) for `string` type.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`string`类型，使用`""`（空字符串）。
- en: Using `nil` keyword for pointers, functions, interfaces, slices, channels and
    maps.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`nil`关键字表示指针、函数、接口、切片、通道和映射。
- en: Empty `struct` for structures without fields.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于没有字段的`struct`，使用空`struct`。
- en: Zero-initialized `struct` for structures with fields. The zero value of a structure
    is defined as the structure that has its fields initialized as zero value too.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于有字段的`struct`，使用零初始化的`struct`。结构的零值定义为所有字段都初始化为零值的结构。
- en: Zero-initialization is important when programming in Go because you won't be
    able to return a `nil` value if you have to return an `int` type or a `struct`.
    Keep this in mind, for example, in functions where you have to return a `bool`
    value. Imagine that you want to know if a number is divisible by a different number
    but you pass `0` (zero) as the divisor.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go语言编程中，零初始化非常重要，因为如果你必须返回`int`类型或`struct`类型的值，你将无法返回`nil`值。记住这一点，例如，在必须返回`bool`值的函数中。想象一下，你想要知道一个数是否能被另一个数整除，但你传递了`0`（零）作为除数。
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output of this program is `false` but this is incorrect. A number divided
    by zero is an error, it''s not that 10 isn''t divisible by zero but that a number
    cannot be divided by zero by definition. Zero-initialization is making things
    awkward in this situation. So, how can we solve this error? Consider the following
    code:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序输出的结果是`false`，但这是不正确的。一个数除以零是一个错误，并不是因为10不能被零整除，而是按照定义，一个数不能被零除。在这种情况下，零初始化使得事情变得尴尬。那么，我们该如何解决这个问题呢？考虑以下代码：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We're dividing `10` by `0` again but now the output of this function is `A number
    cannot be divided by zero`. Error captured, the program finished gracefully.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次将`10`除以`0`，但现在这个函数的输出是`一个数不能被零除`。错误已被捕获，程序优雅地结束。
