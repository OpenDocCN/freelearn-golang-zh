- en: Pointers and structures
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指针和结构体
- en: Pointers are the number one source of a headache of every C or C++ programmer.
    But they are one of the main tools to achieve high-performance code in non-garbage-collected
    languages. Fortunately for us, Go's pointers have achieved the best of both worlds
    by providing high-performance pointers with garbage-collector capabilities and
    easiness.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 指针是每个 C 或 C++ 程序员头痛的首要来源。但它们是实现非垃圾回收语言中高性能代码的主要工具之一。幸运的是，对于 Go 语言来说，它的指针通过提供具有垃圾回收功能的高性能指针以及易用性，实现了两者的最佳结合。
- en: On the other side for its detractors, Go lacks inheritance in favor of composition.
    Instead of talking about the objects that *are* in Go, your objects *have other *.
    So, instead of having a `car` structure that inherits the class `vehicle` (a car
    is a vehicle), you could have a `vehicle` structure that contains a `car` structure
    within.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于它的批评者来说，Go 语言放弃了继承，转而支持组合。在谈论 Go 中的对象时，你的对象*拥有其他对象*。因此，你不需要有一个继承自 `vehicle`
    类（汽车是一种车辆）的 `car` 结构体，而可以有一个包含 `car` 结构体的 `vehicle` 结构体。
