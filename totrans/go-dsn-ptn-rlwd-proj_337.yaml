- en: Pointers and structures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pointers are the number one source of a headache of every C or C++ programmer.
    But they are one of the main tools to achieve high-performance code in non-garbage-collected
    languages. Fortunately for us, Go's pointers have achieved the best of both worlds
    by providing high-performance pointers with garbage-collector capabilities and
    easiness.
  prefs: []
  type: TYPE_NORMAL
- en: On the other side for its detractors, Go lacks inheritance in favor of composition.
    Instead of talking about the objects that *are* in Go, your objects *have other *.
    So, instead of having a `car` structure that inherits the class `vehicle` (a car
    is a vehicle), you could have a `vehicle` structure that contains a `car` structure
    within.
  prefs: []
  type: TYPE_NORMAL
