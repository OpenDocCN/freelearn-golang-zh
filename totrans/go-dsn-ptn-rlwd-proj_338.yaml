- en: What is a pointer? Why are they good?
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指针是什么？为什么它们很好？
- en: Pointers are hated, loved, and very useful at the same time. To understand what
    a pointer is can be difficult so let's try with a real world explanation. As we
    mentioned earlier in this chapter, a pointer is a like a mailbox. Imagine a bunch
    of mailboxes in a building; all of them have the same size and shape but each
    refers to a different house within the building. Just because all mailboxes are
    the same size does not mean that each house will have the same size. We could
    even have a couple of houses joined, a house that was there but now has a license
    of commerce, or a house that is completely empty. So the pointers are the mailboxes,
    all of them of the same size and that refer to a house. The building is our memory
    and the houses are the types our pointers refer to and the memory they allocate.
    If you want to receive something in your house, it's far easier to simply send
    the address of your house (to send the pointer) instead of sending the entire
    house so that your package is deposited inside. But they have some drawbacks as
    if you send your address and your house (variable it refers to) disappears after
    sending, or its type owner change--you'll be in trouble.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 指针既令人讨厌，又令人喜爱，同时非常实用。理解指针是什么可能很困难，所以让我们用一个现实世界的解释来尝试。正如我们在本章前面提到的，指针就像一个邮箱。想象一下一栋楼里的许多邮箱；它们都有相同的大小和形状，但每个都指向楼内的不同房子。仅仅因为所有邮箱的大小相同，并不意味着每栋房子的大小都相同。我们甚至可以有两个房子相连，一个房子曾经在那里但现在有了商业许可证，或者一个完全空着的房子。所以指针就像是邮箱，它们大小相同，但都指向一个房子。这栋楼是我们的内存，而房子则是我们的指针所指向的类型和它们分配的内存。如果你想在你家里收到东西，直接发送你房子的地址（发送指针）要比发送整个房子容易得多，这样你的包裹就可以被存放在里面。但它们也有一些缺点，比如如果你发送了你的地址和你的房子（它所指向的变量）在发送后消失了，或者它的类型所有者发生了变化——你将会遇到麻烦。
- en: How is this useful? Imagine that somehow you have 4 GB of data in a variable
    and you need to pass it to a different function. Without a pointer, the entire
    variable is cloned to the scope of the function that is going to use it. So, you'll
    have 8 GB of memory occupied by using this variable twice that, hopefully, the
    second function isn't going to use in a different function again to raise this
    number even more.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这有什么用？想象一下，你有一个变量中有4GB的数据，你需要将它传递到另一个函数。如果没有指针，整个变量将被克隆到将要使用它的函数的作用域中。所以，你将会有8GB的内存被占用，使用这个变量两次，希望第二个函数不会在另一个函数中再次使用，以进一步提高这个数字。
- en: You could use a pointer to pass a very small reference to this chunk to the
    first function so that just the small reference is cloned and you can keep your
    memory usage low.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用指针来传递对这个块的小型引用到第一个函数，这样只需克隆这个小引用，你就可以保持内存使用量低。
- en: While this isn't the most academic nor exact explanation, it gives a good view
    of what a pointer is without explaining what a stack or a heap is or how they
    work in x86 architectures.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这并不是最学术或最精确的解释，但它提供了一个很好的视角，说明了指针是什么，而不涉及栈或堆是什么，或者它们在x86架构中是如何工作的。
- en: Pointers in Go are very limited compared with C or C++ pointers. You can't use
    pointer arithmetic nor can you create a pointer to reference an exact position
    in the stack.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 与C或C++的指针相比，Go中的指针非常有限。你不能使用指针算术，也不能创建一个指向栈中确切位置的指针。
- en: 'Pointers in Go can be declared like this:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go中，指针可以这样声明：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here `number := 5` code represents our 4 GB variable and `pointer_to_number`
    contains the reference (represented by an ampersand) to this variable. It''s the
    direction to the variable (the one that you put in the mailbox of this `house/type/variable`).
    Let''s print the variable `pointer_to_number` , which is a simple variable:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这里`number := 5`代码代表我们的4GB变量，`pointer_to_number`包含对这个变量的引用（用和号表示），这是指向变量的方向（你把它放在这个“房子/类型/变量”的邮箱里）。让我们打印变量`pointer_to_number`，它是一个简单的变量：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What's that number? Well, the direction to our variable in memory. And how can
    I print the actual value of the house? Well, with an asterisk (`*)` we tell the
    compiler to take the value that the pointer is referencing, which is our 4 GB
    variable.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 那个数字是什么？嗯，是我们变量在内存中的方向。我该如何打印出房子的实际值呢？嗯，用星号（`*`）告诉编译器取指针所引用的值，也就是我们的4GB变量。
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
