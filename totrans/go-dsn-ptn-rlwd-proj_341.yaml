- en: Interfaces - signing a contract
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An interface is something really simple but powerful. It's usually defined as
    a contract between the objects that implement it but this explanation isn't clear
    enough in my honest opinion for newcomers to the interface world.
  prefs: []
  type: TYPE_NORMAL
- en: A water-pipe is a contract too; whatever you pass through it must be a liquid.
    Anyone can use the pipe, and the pipe will transport whatever liquid you put in
    it (without knowing the content). The water-pipe is the interface that enforces
    that the users must pass liquids (and not something else).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s think about another example: a train. The railroads of a train are like
    an interface. A train must construct (implement) its width with a specified value
    so that it can enter the railroad but the railroad never knows exactly what it''s
    carrying (passengers or cargo). So for example, an interface of the railroad will
    have the following aspect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `RailroadWideChecker` is the type our trains must implement to provide
    information about their width. The trains will verify that the train isn''t too
    wide or too narrow to use its railroads:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Railroad` is implemented by an imaginary station object that contains
    the information about the width of the railroads in this station and that has
    a method to check whether a train fits the needs of the railroad with the `IsCorrectSizeTrain`
    method. The `IsCorrectSizeTrain` method receives an interface object which is
    a pointer to a train that implements this interface and returns a validation between
    the width of the train and the railroad:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now we have created a passenger's train. It has a field to contain its width
    and implements our `CheckRailsWidth` interface method. This structure is considered
    to fulfill the needs of a `RailRoadWideChecker` interface (because it has an implementation
    of the methods that the interfaces ask for).
  prefs: []
  type: TYPE_NORMAL
- en: So now, we'll create a railroad of `10` units wide and two trains--one of `10`
    units wide that fit the railroad size and another of `15` units that cannot use
    the railroad.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s dissect this `main` function. First, we created a railroad object of
    `10` units called `railroad`. Then two trains, of `10` and `15` units'' width
    for passengers and cargo respectively. Then, we pass both objects to the railroad
    method that accepts interfaces of the `RailroadWideChecker` interface. The railroad
    itself does not know the width of each train separately (we''ll have a huge list
    of trains) but it has an interface that trains must implement so that it can ask
    for each width and returns a value telling you if a train can or cannot use of
    the railroads. Finally, the output of the call to `printf` function is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As I mentioned earlier, interfaces are so widely used during this book that
    it doesn't matter if it still looks confusing for the reader as they'll be plenty
    of examples during the book.
  prefs: []
  type: TYPE_NORMAL
