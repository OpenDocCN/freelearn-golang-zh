- en: Interfaces - signing a contract
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接口 - 签订合同
- en: An interface is something really simple but powerful. It's usually defined as
    a contract between the objects that implement it but this explanation isn't clear
    enough in my honest opinion for newcomers to the interface world.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 接口是一件非常简单但强大的东西。它通常被定义为实现它的对象之间的合同，但在我看来，这种解释对于接口世界的初学者来说还不够清晰。
- en: A water-pipe is a contract too; whatever you pass through it must be a liquid.
    Anyone can use the pipe, and the pipe will transport whatever liquid you put in
    it (without knowing the content). The water-pipe is the interface that enforces
    that the users must pass liquids (and not something else).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 水管也是一种合同；无论你通过它传递什么，都必须是液体。任何人都可以使用管道，管道将运输你放入其中的任何液体（而不知道内容）。水管是强制用户传递液体（而不是其他东西）的接口。
- en: 'Let''s think about another example: a train. The railroads of a train are like
    an interface. A train must construct (implement) its width with a specified value
    so that it can enter the railroad but the railroad never knows exactly what it''s
    carrying (passengers or cargo). So for example, an interface of the railroad will
    have the following aspect:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑另一个例子：一列火车。火车的铁路就像一个接口。火车必须用指定的值构建（实现）其宽度，以便它可以进入铁路，但铁路永远不会知道它确切地承载了什么（乘客或货物）。例如，铁路的接口将具有以下特点：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `RailroadWideChecker` is the type our trains must implement to provide
    information about their width. The trains will verify that the train isn''t too
    wide or too narrow to use its railroads:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`RailroadWideChecker`是我们列车必须实现的类型，以提供关于其宽度的信息。列车将验证列车是否太宽或太窄，无法使用其铁路：'
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `Railroad` is implemented by an imaginary station object that contains
    the information about the width of the railroads in this station and that has
    a method to check whether a train fits the needs of the railroad with the `IsCorrectSizeTrain`
    method. The `IsCorrectSizeTrain` method receives an interface object which is
    a pointer to a train that implements this interface and returns a validation between
    the width of the train and the railroad:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`Railroad`由一个虚构的车站对象实现，该对象包含有关该站铁路宽度的信息，并且有一个使用`IsCorrectSizeTrain`方法检查火车是否符合铁路需求的方法。`IsCorrectSizeTrain`方法接收一个接口对象，它是指向实现此接口的列车的指针，并返回火车宽度和铁路之间的验证：'
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now we have created a passenger's train. It has a field to contain its width
    and implements our `CheckRailsWidth` interface method. This structure is considered
    to fulfill the needs of a `RailRoadWideChecker` interface (because it has an implementation
    of the methods that the interfaces ask for).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一列旅客列车。它有一个字段来包含其宽度，并实现了我们的`CheckRailsWidth`接口方法。这种结构被认为是满足`RailRoadWideChecker`接口需求（因为它实现了接口所要求的方法）。
- en: So now, we'll create a railroad of `10` units wide and two trains--one of `10`
    units wide that fit the railroad size and another of `15` units that cannot use
    the railroad.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在，我们将创建一个宽度为`10`个单位的铁路，以及两列火车——一列宽度为`10`个单位，适合铁路尺寸，另一列宽度为`15`个单位，无法使用铁路。
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s dissect this `main` function. First, we created a railroad object of
    `10` units called `railroad`. Then two trains, of `10` and `15` units'' width
    for passengers and cargo respectively. Then, we pass both objects to the railroad
    method that accepts interfaces of the `RailroadWideChecker` interface. The railroad
    itself does not know the width of each train separately (we''ll have a huge list
    of trains) but it has an interface that trains must implement so that it can ask
    for each width and returns a value telling you if a train can or cannot use of
    the railroads. Finally, the output of the call to `printf` function is the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们剖析这个`main`函数。首先，我们创建了一个宽度为`10`个单位的铁路对象，称为`railroad`。然后创建了两个列车，一个是`10`个单位宽的客运列车，另一个是`15`个单位宽的货运列车。然后，我们将这两个对象传递给接受`RailroadWideChecker`接口的铁路方法。铁路本身不知道每列列车的具体宽度（我们将有一个庞大的列车列表），但它有一个列车必须实现的接口，以便它可以询问每个宽度，并返回一个值告诉你列车是否可以使用铁路。最后，`printf`函数调用的输出如下：
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As I mentioned earlier, interfaces are so widely used during this book that
    it doesn't matter if it still looks confusing for the reader as they'll be plenty
    of examples during the book.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前提到的，接口在这本书中得到了广泛的应用，所以即使对读者来说仍然看起来很复杂，因为在书中会有很多例子。
