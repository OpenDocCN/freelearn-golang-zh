- en: Testing and TDD
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试和TDD
- en: When you write the first lines of some library, it's difficult to introduce
    many bugs. But once the source code gets bigger and bigger, it becomes easier
    to break things. The team grows and now many people are writing the same source
    code, new functionality is added on top of the code that you wrote at the beginning.
    And code stopped working by some modification in some function that now nobody
    can track down.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编写某个库的第一行代码时，引入很多错误是很困难的。但是一旦源代码越来越大，破坏东西就变得更容易了。团队在增长，现在很多人都在编写相同的源代码，新的功能被添加到最初你编写的代码之上。而且代码因为某个函数的某些修改而停止工作，现在没有人能够追踪到这个问题。
- en: This is a common scenario in enterprises that testing tries to reduce (it doesn't
    completely solve it, it's not a holy grail). When you write unit tests during
    your development process, you can check whether some new feature is breaking something
    older or whether your current new feature is achieving everything expected in
    the requirements.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这在企业中是一个常见的场景，测试试图减少（它并不能完全解决这个问题，它不是圣杯）。当你在你开发过程中编写单元测试时，你可以检查是否有一些新功能破坏了旧的功能，或者你的当前新功能是否实现了所有预期的需求。
- en: Go has a powerful testing package that allows you also to work in a TDD environment
    quite easily. It is also very convenient to check the portions of your code without
    the need to write an entire main application that uses it.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Go 语言拥有强大的测试包，这使得你也能够非常容易地在 TDD（测试驱动开发）环境中工作。同时，它也非常方便地检查你的代码片段，而无需编写一个使用它的完整主应用程序。
