- en: The testing package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Testing is very important in every programming language. Go creators knew it
    and decided to provide all libraries and packages needed for the test in the core
    package. You don't need any third-party library for testing or code coverage.
  prefs: []
  type: TYPE_NORMAL
- en: 'The package that allows for testing Go apps is called, conveniently, testing.
    We will create a small app that sums two numbers that we provide through the command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s execute our program in the terminal to get the sum:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: By the way, we're using the `strconv` package to convert strings to other types,
    in this case, to `int`. The method `Atoi` receives a string and returns an `int` and
    an `error` that, for simplicity, we are ignoring here (by using the underscore).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can ignore variable returns by using the underscores if necessary, but usually,
    you don't want to ignore errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ok, so let''s write a test that checks the correct result of the sum. We''re
    creating a new file called `main_test.go`. By convention, test files are named
    like the files they''re testing plus the `_test` suffix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Testing in Go is used by writing methods started with the prefix `Test`, a test
    name, and the injection of the `testing.T` pointer called `t`. Contrary to other
    languages, there are no asserts nor special syntax for testing in Go. You can
    use Go syntax to check for errors and you call `t` with information about the
    error in case it fails. If the code reaches the end of the `Test` function without
    arising errors, the function has passed the tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run a test in Go, you must use the `go test -v` command (`-v` is to receive
    verbose output from the test) keyword, as following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Our tests were correct. Let''s see what happens if we break things on purpose
    and we change the expected value of the test from `11` to `10`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The test has failed (as we expected). The testing package provides the information
    you set on the test. Let''s make it work again and check test coverage. Change
    the value of the variable `expected` from `10` to `11` again and run the command
    `go test -cover` to see code coverage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `-cover` options give us information about the code coverage for a given
    package. Unfortunately, it doesn't provide information about overall application
    coverage.
  prefs: []
  type: TYPE_NORMAL
