- en: The testing package
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试包
- en: Testing is very important in every programming language. Go creators knew it
    and decided to provide all libraries and packages needed for the test in the core
    package. You don't need any third-party library for testing or code coverage.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在每种编程语言中，测试都非常重要。Go的创造者知道这一点，并决定在核心包中提供所有必要的测试库和包。你不需要任何第三方库来进行测试或代码覆盖率。
- en: 'The package that allows for testing Go apps is called, conveniently, testing.
    We will create a small app that sums two numbers that we provide through the command
    line:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 允许测试Go应用程序的包被称为，方便地，testing。我们将创建一个小程序，该程序通过命令行提供两个数字并将它们相加：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s execute our program in the terminal to get the sum:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在终端中执行我们的程序以获取求和结果：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By the way, we're using the `strconv` package to convert strings to other types,
    in this case, to `int`. The method `Atoi` receives a string and returns an `int` and
    an `error` that, for simplicity, we are ignoring here (by using the underscore).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一下，我们正在使用`strconv`包将字符串转换为其他类型，在这种情况下，转换为`int`。`Atoi`方法接收一个字符串并返回一个`int`和一个`error`，为了简单起见，我们在这里忽略它（通过使用下划线）。
- en: Tip
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can ignore variable returns by using the underscores if necessary, but usually,
    you don't want to ignore errors.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，你可以通过使用下划线来忽略变量返回值，但通常你不想忽略错误。
- en: 'Ok, so let''s write a test that checks the correct result of the sum. We''re
    creating a new file called `main_test.go`. By convention, test files are named
    like the files they''re testing plus the `_test` suffix:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，那么让我们编写一个测试来检查求和的正确结果。我们正在创建一个名为`main_test.go`的新文件。按照惯例，测试文件的命名方式是它们要测试的文件名加上`_test`后缀：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Testing in Go is used by writing methods started with the prefix `Test`, a test
    name, and the injection of the `testing.T` pointer called `t`. Contrary to other
    languages, there are no asserts nor special syntax for testing in Go. You can
    use Go syntax to check for errors and you call `t` with information about the
    error in case it fails. If the code reaches the end of the `Test` function without
    arising errors, the function has passed the tests.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go中进行测试是通过编写以`Test`前缀开头的方法、一个测试名称以及注入名为`t`的`testing.T`指针来实现的。与其它语言不同，Go中没有断言或特殊的测试语法。你可以使用Go语法来检查错误，并在失败的情况下通过`t`传递有关错误的信息。如果代码在`Test`函数的末尾没有出现错误，则函数通过了测试。
- en: 'To run a test in Go, you must use the `go test -v` command (`-v` is to receive
    verbose output from the test) keyword, as following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Go中运行测试，你必须使用`go test -v`命令（`-v`是为了从测试中获得详细输出）关键字，如下所示：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Our tests were correct. Let''s see what happens if we break things on purpose
    and we change the expected value of the test from `11` to `10`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的所有测试都是正确的。让我们看看如果我们故意破坏某些东西并将测试的预期值从`11`更改为`10`会发生什么：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The test has failed (as we expected). The testing package provides the information
    you set on the test. Let''s make it work again and check test coverage. Change
    the value of the variable `expected` from `10` to `11` again and run the command
    `go test -cover` to see code coverage:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 测试失败（正如我们所预期的那样）。测试包提供了你在测试中设置的信息。让我们让它再次工作并检查测试覆盖率。将变量`expected`的值从`10`再次更改为`11`，然后运行命令`go
    test -cover`以查看代码覆盖率：
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `-cover` options give us information about the code coverage for a given
    package. Unfortunately, it doesn't provide information about overall application
    coverage.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`-cover`选项为我们提供了关于给定包的代码覆盖率信息。不幸的是，它并不提供关于整体应用程序覆盖率的信息。'
