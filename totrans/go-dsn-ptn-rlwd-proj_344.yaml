- en: What is TDD?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TDD is the acronym for **Test Driven Development**. It consists of writing the
    tests first before writing the function (instead of what we did just before when
    we wrote the `sum` function first and then we wrote the `test` function).
  prefs: []
  type: TYPE_NORMAL
- en: TDD changes the way to write code and structure code so that it can be tested
    (a lot of code you can find in GitHub, even code that you have probably written
    in the past is probably very difficult, if not impossible, to test).
  prefs: []
  type: TYPE_NORMAL
- en: 'So, how does it work? Let''s explain this with a real life example--imagine
    that you are in summer and you want to be refreshed somehow. You can build a pool,
    fill it with cold water, and jump into it. But in TDD terms, the steps will be:'
  prefs: []
  type: TYPE_NORMAL
- en: You jump into a place where the pool will be built (you write a test that you
    know it will fail).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It hurts... and you aren't cool either (yes... the test failed, as we predicted).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You build a pool and fill it with cold water (you code the functionality).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You jump into the pool (you repeat the point 1 test again).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You're cold now. Awesome! Object completed (test passed).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the fridge and take a beer to the pool. Drink. Double awesomeness (refactor
    the code).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So let''s repeat the previous example but with a multiplication. First, we
    will write the declaration of the function that we''re going to test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s write the test that will check the correctness of the previous function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And we test it through the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Nice. Like in our pool example where the water wasn''t there yet, our function
    returns an incorrect value too. So now we have a function declaration (but isn''t
    defined yet) and the test that fails. Now we have to make the test pass by writing
    the function and executing the test to check:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'And we execute again our testing suite. After writing our code correctly, the
    test should pass so we can continue to the refractoring process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Great! We have developed the `multiply` function following TDD. Now we must
    refactor our code but we cannot make it more simple or readable so the loop can
    be considered closed.
  prefs: []
  type: TYPE_NORMAL
- en: During this book, we will write many tests that define the functionality that
    we want to achieve in our patterns. TDD promotes encapsulation and abstraction
    (just like design patterns do).
  prefs: []
  type: TYPE_NORMAL
