- en: What is TDD?
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TDD是什么？
- en: TDD is the acronym for **Test Driven Development**. It consists of writing the
    tests first before writing the function (instead of what we did just before when
    we wrote the `sum` function first and then we wrote the `test` function).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: TDD是**测试驱动开发**的缩写。它包括在编写函数之前先编写测试（而不是我们之前所做的，当我们首先编写了`sum`函数，然后才编写了`test`函数）。
- en: TDD changes the way to write code and structure code so that it can be tested
    (a lot of code you can find in GitHub, even code that you have probably written
    in the past is probably very difficult, if not impossible, to test).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: TDD改变了编写代码和结构代码的方式，以便它可以被测试（你可以在GitHub上找到很多代码，甚至是你过去可能编写过的代码，可能非常难以测试，如果不是不可能的话）。
- en: 'So, how does it work? Let''s explain this with a real life example--imagine
    that you are in summer and you want to be refreshed somehow. You can build a pool,
    fill it with cold water, and jump into it. But in TDD terms, the steps will be:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，它是如何工作的？让我们用一个现实生活中的例子来解释这一点——想象一下你在夏天，你想以某种方式让自己凉爽。你可以建造一个泳池，把它填满冷水，然后跳进去。但在TDD的术语中，步骤将是：
- en: You jump into a place where the pool will be built (you write a test that you
    know it will fail).
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你跳进一个将要建造泳池的地方（你编写一个你知道会失败的测试）。
- en: It hurts... and you aren't cool either (yes... the test failed, as we predicted).
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 疼痛...而且你也不酷（是的...测试失败了，正如我们所预测的）。
- en: You build a pool and fill it with cold water (you code the functionality).
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你建造一个泳池，并把它填满冷水（你编写功能代码）。
- en: You jump into the pool (you repeat the point 1 test again).
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你跳进泳池（你再次重复1点的测试）。
- en: You're cold now. Awesome! Object completed (test passed).
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在感到冷了。太棒了！目标完成（测试通过）。
- en: Go to the fridge and take a beer to the pool. Drink. Double awesomeness (refactor
    the code).
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 去冰箱拿一瓶啤酒到泳池边。喝。双倍酷（重构代码）。
- en: 'So let''s repeat the previous example but with a multiplication. First, we
    will write the declaration of the function that we''re going to test:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们重复之前的例子，但用乘法。首先，我们将编写我们要测试的函数的声明：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now let''s write the test that will check the correctness of the previous function:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们编写一个测试来检查之前函数的正确性：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And we test it through the command line:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过命令行测试它：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Nice. Like in our pool example where the water wasn''t there yet, our function
    returns an incorrect value too. So now we have a function declaration (but isn''t
    defined yet) and the test that fails. Now we have to make the test pass by writing
    the function and executing the test to check:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 很好。就像我们泳池的例子中，水还没到那里，我们的函数也返回了一个错误值。所以现在我们有一个函数声明（但还没有定义）和一个失败的测试。现在我们必须通过编写函数并执行测试来使测试通过，以检查：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And we execute again our testing suite. After writing our code correctly, the
    test should pass so we can continue to the refractoring process:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次执行我们的测试套件。在正确编写代码后，测试应该通过，这样我们就可以继续到重构过程：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Great! We have developed the `multiply` function following TDD. Now we must
    refactor our code but we cannot make it more simple or readable so the loop can
    be considered closed.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！我们已经按照TDD开发了`multiply`函数。现在我们必须重构我们的代码，但我们不能让它更简单或更易读，这样循环就可以被认为是闭合的。
- en: During this book, we will write many tests that define the functionality that
    we want to achieve in our patterns. TDD promotes encapsulation and abstraction
    (just like design patterns do).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将编写许多测试来定义我们想要在模式中实现的功能。TDD促进封装和抽象（就像设计模式所做的那样）。
