- en: The Go get tool
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go get 工具
- en: Go get is a tool to get third party projects from CVS repositories. Instead
    of using the `git clone` command, you can use Go get to receive a series of added
    benefits. Let's write an example using CoreOS's **ETCD **project which is a famous
    distributed key-value store.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Go get 是一个从 CVS 仓库获取第三方项目的工具。你不必使用 `git clone` 命令，可以使用 Go get 获得一系列附加的好处。让我们用一个例子来说明，使用
    CoreOS 的 **ETCD** 项目，这是一个著名的分布式键值存储。
- en: 'CoreOS''s ETCD is hosted on GitHub at  [https://github.com/coreos/etcd.git](https://github.com/coreos/etcd.git).
    To download this project source code using the Go get tool, we must type in the
    Terminal it''s resulting import path that it will have in our GOPATH:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: CoreOS 的 ETCD 在 GitHub 上托管，网址为 [https://github.com/coreos/etcd.git](https://github.com/coreos/etcd.git)。要使用
    Go get 工具下载此项目的源代码，我们必须在终端中输入它在我们 GOPATH 中的结果导入路径：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that we have just typed the most relevant information so that Go get figures
    out the rest. You'll get some output, depending on the state of the project, but
    after, while, it will disappear. But what did happen?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们刚刚输入了最相关的信息，以便 Go get 推断其余信息。根据项目状态，你会得到一些输出，但之后，它将消失。但发生了什么？
- en: Go get has created a folder in `$GOPATH/src/github.com/coreos`.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go get 在 `$GOPATH/src/github.com/coreos` 下创建了一个文件夹。
- en: It has cloned the project in that location, so now the source code of ETCD is
    available at `$GOPATH/src/github.com/coreos/etcd`.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它已在该位置克隆了项目，因此现在 ETCD 的源代码可在 `$GOPATH/src/github.com/coreos/etcd` 处可用。
- en: Go get has cloned any repository that ETCD could need.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go get 克隆了 ETCD 可能需要的任何仓库。
- en: It has tried to install the project if it is not a library. This means, it has
    generated a binary file of ETCD and has put it in `$GOPATH/bin` folder.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果它不是一个库，它将尝试安装项目。这意味着，它已生成 ETCD 的二进制文件并将其放入 `$GOPATH/bin` 文件夹。
- en: 'By simply typing the `go get [project]` command, you''ll get all that material
    from a project in your system. Then in your Go apps, you can just use any library
    by importing the path within the source. So for the ETCD project, it will be:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通过简单地输入 `go get [project]` 命令，你将从系统中的项目获取所有这些材料。然后在你的 Go 应用程序中，你可以通过在源中导入路径来使用任何库。所以对于
    ETCD 项目，它将是：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It's very important that you get familiar with the use of the Go get tool and
    stop using `git clone` when you want a project from a Git repository. This will
    save you some headaches when trying to import a project that isn't contained within
    your GOPATH.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 熟悉 Go get 工具的使用非常重要，当你需要从 Git 仓库获取项目时，请停止使用 `git clone`。这将在尝试导入不包含在 GOPATH 中的项目时节省你一些麻烦。
