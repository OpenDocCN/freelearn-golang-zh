- en: Managing JSON data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JSON is the acronym for **JavaScript Object Notation** and, like the name implies,
    it''s natively JavaScript. It has become very popular and it''s the most used
    format for communication today. Go has very good support for JSON serialization/deserialization
    with the `JSON` package that does most of the dirty work for you. First of all,
    there are two concepts to learn when working with JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Marshal**: When you marshal an instance of a structure or object, you are
    converting it to its JSON counterpart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unmarshal**: When you are unmarshaling some data, in the form of an array
    of bytes, you are trying to convert some JSON-expected-data to a known struct
    or object. You can also *unmarshal* to a `map[string]interface{}` in a fast but
    not very safe way to interpret the data as we''ll see now.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s see an example of marshaling a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: First, we have defined a variable called `packt` to hold the contents of the
    `packt` string. Then, we have used the `json` library to use the `Marshal` command
    with our new variable. This will return a new `bytearray` with the JSON and a
    flag to provide and `boolOK` result for the operation. When we print the contents
    of the bytes array (previous casting to string) the expected value appears. Note
    that `packt` appeared actually between quotes as the JSON representation would
    be.
  prefs: []
  type: TYPE_NORMAL
