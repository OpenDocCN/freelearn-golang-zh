["```go\ntype MyObject struct { \n    Number int \n    `json:\"number\"` \n    Word string \n} \n\nfunc main(){ \n    object := MyObject{5, \"Packt\"} \n    oJson, _ := json.Marshal(object) \n    fmt.Printf(\"%s\\n\", oJson) \n} \n$ {\"Number\":5,\"Word\":\"Packt\"}\n\n```", "```go\ntype MyObject struct { \n    Number int \n    Word string \n} \n\nfunc main(){ \n    object := MyObject{5, \"Packt\"} \n    oJson, _ := json.Marshal(object) \n    fmt.Printf(\"%s\\n\", oJson) \n} \n$ {\"number\":5,\"string\":\"Packt\"}\n\n```", "```go\ntype MyObject struct { \nNumber int`json:\"number\"` \nWord string`json:\"string\"` \n} \n\nfunc main(){ \n    jsonBytes := []byte(`{\"number\":5, \"string\":\"Packt\"}`) \n    var object MyObject \n    err := json.Unmarshal(jsonBytes, &object) \n    if err != nil { \n        panic(err) \n    } \n    fmt.Printf(\"Number is %d, Word is %s\\n\", object.Number, object.Word) \n} \n\n```", "```go\ntype MyObject struct { \n    Number int     `json:\"number\"` \n    Word string    `json:\"string\"` \n} \n\nfunc main(){ \n    jsonBytes := []byte(`{\"number\":5, \"string\":\"Packt\"}`) \n    var dangerousObject map[string]interface{} \n    err := json.Unmarshal(jsonBytes, &dangerousObject) \n    if err != nil { \n        panic(err) \n    } \n\n    fmt.Printf(\"Number is %d, \", dangerousObject[\"number\"]) \n    fmt.Printf(\"Word is %s\\n\", dangerousObject[\"string\"]) \n    fmt.Printf(\"Error reference is %v\\n\",  \ndangerousObject[\"nothing\"])\n} \n$ Number is %!d(float64=5), Word is Packt \nError reference is <nil> \n\n```"]