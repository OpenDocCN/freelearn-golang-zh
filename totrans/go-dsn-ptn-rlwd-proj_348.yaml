- en: The encoding package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Have you realized that we have imported the package `encoding/json`? Why is
    it prefixed with the word `encoding`? If you take a look at Go's source code to
    the `src/encoding` folder you'll find many interesting packages for encoding/decoding
    such as, XML, HEX, binary, or even CSV.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now something a bit more complicated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Conveniently, it also works pretty well with structures but what if I want
    to not use uppercase in the JSON data? You can define the output/input name of
    the JSON in the structure declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We have not only lowercased the names of the keys, but we have even changed
    the name of the `Word` key to string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enough of marshalling, we will receive JSON data as an array of bytes, but
    the process is very similar with some changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The big difference here is that you have to allocate the space for the structure
    first (with a zero value) and the pass the reference to the method `Unmarshal`
    so that it tries to fill it. When you use `Unmarshal`, the first parameter is
    the array of bytes that contains the JSON information while the second parameter
    is the reference (that''s why we are using an ampersand) to the structure we want
    to fill. Finally, let''s use a generic `map[string]interface{}` method to hold
    the content of a JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: What happened in the result? This is why we described the object as dangerous.
    You can point to a `nil` location when using this mode if you call a non-existing
    key in the JSON. Not only this, like in the example, it could also interpret a
    value as a `float64` when it is simply a `byte`, wasting a lot of memory.
  prefs: []
  type: TYPE_NORMAL
- en: So remember to just use `map[string]interface{}` when you need dirty quick access
    to JSON data that is fairly simple and you have under control the type of scenarios
    described previously.
  prefs: []
  type: TYPE_NORMAL
