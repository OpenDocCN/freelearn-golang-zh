- en: The godoc tool
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: godoc 工具
- en: 'Go documentation is pretty extended and verbose. You can find detailed information
    about any topic you want to achieve. The `godoc` tool also helps you access this
    documentation directly from the command line. For example, we can query the package
    `encoding/json`:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Go 文档相当详细且冗长。您可以找到有关您想要实现任何主题的详细信息。`godoc` 工具还帮助您直接从命令行访问此文档。例如，我们可以查询 `encoding/json`
    包：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can also use **grep**, a bash utility for Linux and Mac, to find specific
    information about some functionality. For example, we''ll use grep to look for
    text that mentions anything about parsing JSON files:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用 **grep**，这是一个适用于 Linux 和 Mac 的 bash 工具，以查找有关某些功能的具体信息。例如，我们将使用 grep 来查找提及解析
    JSON 文件内容的文本：
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `Unmarshal` command parses the JSON encoded data and stores the result in
    the object being parsed.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`Unmarshal` 命令解析 JSON 编码的数据，并将结果存储在正在解析的对象中。'
- en: One of the things that the `golint` command warns about is to use the beginning
    of a comment with the same name of the function it describes. This way, if you
    don't remember the name of the function that parses JSON, you can use `godoc`
    with `grep` and search for `parse` so the beginning of the line will always be
    the function name like in the example preceding the `Unmarshal` command.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`golint` 命令警告的一件事是使用与描述的函数同名注释的开头。这样，如果您不记得解析 JSON 的函数名称，您可以使用 `godoc` 与 `grep`
    搜索 `parse`，这样行的开头总是函数名称，就像在 `Unmarshal` 命令之前的示例中那样。'
