- en: Chapter 2. Creational Patterns - Singleton, Builder, Factory, Prototype, and
    Abstract Factory Design Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 创建型模式 - 单例、建造者、工厂、原型和抽象工厂设计模式
- en: We have defined two types of cars-luxury and family. The car Factory will have
    to return The first groups of design patterns that we are going to cover are the
    Creational patterns. As the name implies, it groups common practices for creating
    objects, so object creation is more encapsulated from the users that need those
    objects. Mainly, creational patterns try to give ready-to-use objects to users
    instead of asking for their creation, which, in some cases, could be complex,
    or which would couple your code with the concrete implementations of the functionality
    that should be defined in an interface.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经定义了两种类型的汽车——豪华型和家庭型。汽车工厂将不得不返回我们即将要介绍的第一组设计模式是创建型模式。正如其名所示，它将创建对象的常见实践分组，因此对象创建对需要这些对象的用户来说更加封装。主要来说，创建型模式试图向用户提供现成的对象，而不是要求他们自己创建，这在某些情况下可能很复杂，或者会将你的代码与应该在接口中定义的功能的具体实现耦合起来。
