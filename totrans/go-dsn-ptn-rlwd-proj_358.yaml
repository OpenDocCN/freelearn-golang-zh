- en: Description
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 描述
- en: The Singleton pattern is easy to remember. As the name implies, it will provide
    you with a single instance of an object, and guarantee that there are no duplicates.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 单例模式易于记忆。正如其名所示，它将为您提供对象的单个实例，并保证没有重复。
- en: At the first call to use the instance, it is created and then reused between
    all the parts in the application that need to use that particular behavior.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一次调用使用实例时，它被创建，然后在该应用程序中所有需要使用该特定行为的部分之间重用。
- en: 'You''ll use the Singleton pattern in many different situations. For example:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在许多不同的场景中使用单例模式。例如：
- en: When you want to use the same connection to a database to make every query
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你想要使用相同的连接到数据库进行每个查询时
- en: When you open a **Secure Shell** (**SSH**) connection to a server to do a few
    tasks, and don't want to reopen the connection for each task
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你打开一个**安全壳**（**SSH**）连接到服务器以执行一些任务，并且不想为每个任务重新打开连接时
- en: If you need to limit the access to some variable or space, you use a Singleton
    as the door to this variable (we'll see in the following chapters that this is
    more achievable in Go using channels anyway)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你需要限制对某些变量或空间的访问，你可以使用单例作为进入该变量的门户（我们将在接下来的章节中看到，在Go中使用通道实现这一点更为可行）
- en: If you need to limit the number of calls to some places, you create a Singleton
    instance to make the calls in the accepted window
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你需要限制对某些地方的调用次数，你可以创建一个单例实例在可接受的时间窗口内进行调用
- en: The possibilities are endless, and we have just mentioned some of them.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 可能性是无限的，我们只是提到了其中的一些。
