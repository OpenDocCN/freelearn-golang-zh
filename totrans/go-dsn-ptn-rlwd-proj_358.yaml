- en: Description
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Singleton pattern is easy to remember. As the name implies, it will provide
    you with a single instance of an object, and guarantee that there are no duplicates.
  prefs: []
  type: TYPE_NORMAL
- en: At the first call to use the instance, it is created and then reused between
    all the parts in the application that need to use that particular behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll use the Singleton pattern in many different situations. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: When you want to use the same connection to a database to make every query
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you open a **Secure Shell** (**SSH**) connection to a server to do a few
    tasks, and don't want to reopen the connection for each task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need to limit the access to some variable or space, you use a Singleton
    as the door to this variable (we'll see in the following chapters that this is
    more achievable in Go using channels anyway)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need to limit the number of calls to some places, you create a Singleton
    instance to make the calls in the accepted window
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The possibilities are endless, and we have just mentioned some of them.
  prefs: []
  type: TYPE_NORMAL
