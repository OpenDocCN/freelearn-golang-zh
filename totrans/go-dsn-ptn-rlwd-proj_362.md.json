["```go\nmkdir -p $GOPATH/src/github.com/sayden/go-design-patterns/creational/singleton \ncd $GOPATH/src/github.com/sayden/go-design-\npatterns/creational/singleton\n\n```", "```go\npackage singleton \n\ntype Singleton interface { \n    AddOne() int \n} \n\ntype singleton struct { \n    count int \n} \n\nvar instance *singleton \n\nfunc GetInstance() Singleton { \n    return nil \n} \nfunc (s *singleton) AddOne() int { \n    return 0 \n} \n\n```", "```go\npackage singleton \n\nimport \"testing\" \n\nfunc TestGetInstance(t *testing.T) { \n   counter1 := GetInstance() \n\n   if counter1 == nil { \n         //Test of acceptance criteria 1 failed \n         t.Error(\"expected pointer to Singleton after calling GetInstance(), not nil\") \n   } \n\n   expectedCounter := counter1 \n} \n\n```", "```go\ncurrentCount := counter1.AddOne() \nif currentCount != 1 { \n     t.Errorf(\"After calling for the first time to count, the count must be 1 but it is %d\\n\", currentCount) \n} \n\n```", "```go\ncounter2 := GetInstance() \nif counter2 != expectedCounter { \n    //Test 2 failed \n    t.Error(\"Expected same instance in counter2 but it got a different instance\") \n} \n\n```", "```go\ncurrentCount = counter2.AddOne() \nif currentCount != 2 { \n    t.Errorf(\"After calling 'AddOne' using the second counter, the current count must be 2 but was %d\\n\", currentCount) \n} \n\n```", "```go\n$ go test -v .\n=== RUN   TestGetInstance\n--- FAIL: TestGetInstance (0.00s)\n singleton_test.go:9: expected pointer to Singleton after calling GetInstance(), not nil\n singleton_test.go:15: After calling for the first time to count, the count must be 1 but it is 0\n singleton_test.go:27: After calling 'AddOne' using the second counter, the current count must be 2 but was 0\nFAIL\nexit status 1\nFAIL\n\n```"]