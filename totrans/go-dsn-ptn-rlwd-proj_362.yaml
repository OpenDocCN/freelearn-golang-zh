- en: Writing unit tests first
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go's implementation of this pattern is slightly different from what you'll find
    in pure object-oriented languages such as Java or C++, where you have static members.
    In Go, there's nothing like static members, but we have package scope to deliver
    a similar result.
  prefs: []
  type: TYPE_NORMAL
- en: To set up our project, we must create a new folder within our `$GOPATH/src`
    directory. The general rule as we mentioned in the [Chapter 1](part0090_split_000.html#2LQIK1-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Chapter 1. Ready... Steady... Go!"), *Ready... Steady... Go!*, is to create a
    subfolder with the VCS provider (such as GitHub), the username, and the name of
    the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in my case, I use GitHub as my VCS and my username is *sayden,*
    so I will create the path `$GOPATH/src/github.com/sayden/go-design-patterns/creational/singleton`.
    The `go-design-patterns` instance in the path is the project name, the creational
    subfolder will also be our library name, and singleton the name of this particular
    package and subfolder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new file inside the singleton folder called `singleton.go` to also
    reflect the name of the package and write the following package declarations for
    the `singleton` type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As we are following a TDD approach while writing the code, let''s code the
    tests that use the functions we have just declared. The tests are going to be
    defined by following the acceptance criteria that we have written earlier. By
    convention in test files, we must create a file with the same name as the file
    to test, suffixed with `_test.go`. Both must reside in the same folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The first test checks something obvious, but no less important, in complex
    applications. We actually receive something when we ask for an instance of the
    counter. We have to think of it as a Creational pattern--we delegate the creation
    of the object to an unknown package that could fail in the creation or retrieval
    of the object. We also store the current counter in the `expectedCounter` variable
    to make a comparison later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now we take advantage of the zero-initialization feature of Go. Remember that
    integer types in Go cannot be nil and as we know, that this is the first call
    to the counter, and it is an integer type of variable, and we also know that it
    is zero-initialized. So after the first call to the `AddOne()` function, the value
    of the count must be 1.
  prefs: []
  type: TYPE_NORMAL
- en: 'The test that checks the second condition proves that the `expectedConnection`
    variable is not different to the returned connection that we requested later.
    If they were different, the message `Singleton instances must be different` will
    cause the test to fail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The last test is simply counting 1 again with the second instance. The previous
    result was 1, so now it must give us 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The last thing we have to do to finish our test part is to execute the tests
    to make sure that they are failing before implementation. If one of them doesn''t
    fail, it implies that we have done something wrong, and we have to reconsider
    that particular test. We must open the terminal and navigate to the path of the
    singleton package to execute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
