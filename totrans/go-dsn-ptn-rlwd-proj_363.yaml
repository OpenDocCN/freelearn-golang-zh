- en: Implementation
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现
- en: 'Finally, we have to implement the Singleton pattern. As we mentioned earlier,
    we''ll usually write a `static` method and instance to retrieve the Singleton
    instance in languages such as Java or C++. In Go, we don''t have the keyword `static`,
    but we can achieve the same result by using the scope of the package. First, we
    create a `struct` that contains the object which we want to guarantee to be a
    Singleton during the execution of the program:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们必须实现单例模式。正如我们之前提到的，在像Java或C++这样的语言中，我们通常会写一个`static`方法和一个实例来检索单例实例。在Go语言中，我们没有`static`关键字，但我们可以通过使用包的作用域来实现相同的结果。首先，我们创建一个`struct`，它包含我们在程序执行期间想要保证是单例的对象：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We must pay close attention to this piece of code. In languages such as Java
    or C++, the variable instance would be initialized to NULL at the beginning of
    the program. In Go, you can initialize a pointer to a struct as `nil`, but you
    cannot initialize a structure to `nil` (the equivalent of NULL). So the `var instance
    *singleton` line defines a pointer to a struct of type Singleton as nil, and the
    variable called `instance`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须密切关注这段代码。在像Java或C++这样的语言中，变量实例在程序开始时会初始化为NULL。在Go语言中，你可以将结构体的指针初始化为`nil`，但你不能将结构体初始化为`nil`（与NULL等价）。因此，`var
    instance *singleton`行定义了一个指向Singleton类型结构体的指针，并命名为`instance`。
- en: We created a `GetInstance` method that checks if the instance has not been initialized
    already (`instance == nil`), and creates an instance in the space already allocated
    in the line `instance = new(singleton)`. Remember, when we use the keyword `new`,
    we are creating a pointer to an instance of the type between the parentheses.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个`GetInstance`方法，该方法检查实例是否尚未初始化（`instance == nil`），并在第`instance = new(singleton)`行中创建一个实例。记住，当我们使用`new`关键字时，我们正在创建一个指向括号中类型实例的指针。
- en: The `AddOne` method will take the count of the variable instance, raise it by
    1, and return the current value of the counter.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`AddOne`方法将变量实例的计数增加1，并返回计数器的当前值。'
- en: 'Let''s run now our unit tests again:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次运行我们的单元测试：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
