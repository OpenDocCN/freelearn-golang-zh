- en: A few words about the Singleton design pattern
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have seen a very simple example of the Singleton pattern, partially applied
    to some situation, that is, a simple counter. Just keep in mind that the Singleton
    pattern will give you the power to have a unique instance of some struct in your
    application and that no package can create any clone of this struct.
  prefs: []
  type: TYPE_NORMAL
- en: With Singleton, you are also hiding the complexity of creating the object, in
    case it requires some computation, and the pitfall of creating it every time you
    need an instance of it if all of them are similar. All this code writing, checking
    if the variable already exists, and storage, are encapsulated in the singleton
    and you won't need to repeat it everywhere if you use a global variable.
  prefs: []
  type: TYPE_NORMAL
- en: Here we are learning the classic singleton implementation for single threaded
    context. We will see a concurrent singleton implementation when we reach the chapters
    about concurrency because this implementation is not thread safe!
  prefs: []
  type: TYPE_NORMAL
