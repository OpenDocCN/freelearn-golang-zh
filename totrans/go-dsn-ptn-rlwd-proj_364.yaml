- en: A few words about the Singleton design pattern
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于Singleton设计模式的一些话
- en: We have seen a very simple example of the Singleton pattern, partially applied
    to some situation, that is, a simple counter. Just keep in mind that the Singleton
    pattern will give you the power to have a unique instance of some struct in your
    application and that no package can create any clone of this struct.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了Singleton模式的一个非常简单的例子，部分应用于某些情况，即一个简单的计数器。只需记住，Singleton模式将赋予你在应用程序中拥有某些结构唯一实例的能力，并且没有任何包可以创建这个结构的任何克隆。
- en: With Singleton, you are also hiding the complexity of creating the object, in
    case it requires some computation, and the pitfall of creating it every time you
    need an instance of it if all of them are similar. All this code writing, checking
    if the variable already exists, and storage, are encapsulated in the singleton
    and you won't need to repeat it everywhere if you use a global variable.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Singleton，你还可以隐藏创建对象的复杂性，如果它需要一些计算，以及每次需要该实例时都创建它的陷阱——如果它们都是相似的话。所有这些代码编写、检查变量是否已存在以及存储的工作都被封装在Singleton中，如果你使用全局变量，你就不需要重复它了。
- en: Here we are learning the classic singleton implementation for single threaded
    context. We will see a concurrent singleton implementation when we reach the chapters
    about concurrency because this implementation is not thread safe!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在学习单线程上下文中的经典Singleton实现。当我们到达关于并发的章节时，我们将看到并发Singleton实现，因为这种实现不是线程安全的！
