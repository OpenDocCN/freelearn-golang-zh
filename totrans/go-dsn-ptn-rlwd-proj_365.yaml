- en: Builder design pattern - reusing an algorithm to create many implementations
    of an interface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建造者设计模式 - 重复使用算法以创建接口的多个实现
- en: Talking about **Creational** design patterns, it looks pretty semantic to have
    a **Builder** design pattern. The Builder pattern helps us construct complex objects
    without directly instantiating their struct, or writing the logic they require.
    Imagine an object that could have dozens of fields that are more complex structs
    themselves. Now imagine that you have many objects with these characteristics,
    and you could have more. We don't want to write the logic to create all these
    objects in the package that just needs to use the objects.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 谈及**创建型**设计模式，拥有一个**建造者**设计模式看起来非常符合语义。建造者模式帮助我们构建复杂对象，而无需直接实例化它们的结构，或编写它们所需的逻辑。想象一个可能拥有数十个字段的对象，而这些字段本身又是更复杂的结构。现在想象一下，你有很多具有这些特性的对象，而且可能还有更多。我们不希望在仅需要使用对象的包中编写创建所有这些对象的逻辑。
