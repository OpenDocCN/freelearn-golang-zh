- en: Description
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 描述
- en: Instance creation can be as simple as providing the opening and closing braces
    `{}` and leaving the instance with zero values, or as complex as an object that
    needs to make some API calls, check states, and create objects for its fields.
    You could also have an object that is composed of many objects, something that's
    really idiomatic in Go, as it doesn't support inheritance.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 实例创建可以非常简单，只需提供开闭花括号 `{}` 并将实例的值设为零，或者非常复杂，比如需要执行一些API调用、检查状态并为字段创建对象的对象。您还可以有一个由许多对象组成的对象，这在Go语言中非常常见，因为它不支持继承。
- en: At the same time, you could be using the same technique to create many types
    of objects. For example, you'll use almost the same technique to build a car as
    you would build a bus, except that they'll be of different sizes and number of
    seats, so why don't we reuse the construction process? This is where the Builder
    pattern comes to the rescue.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，您可以使用相同的技巧来创建多种类型的对象。例如，您构建汽车和公交车时几乎会使用相同的技巧，只是它们的尺寸和座位数不同，那么我们为什么不用同样的构建过程呢？这正是建造者模式大显身手的地方。
