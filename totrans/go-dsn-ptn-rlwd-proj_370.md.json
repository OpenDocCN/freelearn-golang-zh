["```go\npackage creational \n\ntype BuildProcess interface { \n    SetWheels() BuildProcess \n    SetSeats() BuildProcess \n    SetStructure() BuildProcess \n    GetVehicle() VehicleProduct \n} \n\n```", "```go\ntype ManufacturingDirector struct {} \n\nfunc (f *ManufacturingDirector) Construct() { \n    //Implementation goes here \n} \n\nfunc (f *ManufacturingDirector) SetBuilder(b BuildProcess) { \n    //Implementation goes here \n} \n\n```", "```go\ntype VehicleProduct struct { \n    Wheels    int \n    Seats     int \n    Structure string \n} \n\n```", "```go\ntype CarBuilder struct {} \n\nfunc (c *CarBuilder) SetWheels() BuildProcess { \n    return nil \n} \n\nfunc (c *CarBuilder) SetSeats() BuildProcess { \n    return nil \n} \n\nfunc (c *CarBuilder) SetStructure() BuildProcess { \n    return nil \n} \n\nfunc (c *CarBuilder) Build() VehicleProduct { \n    return VehicleProduct{} \n} \n\n```", "```go\ntype BikeBuilder struct {} \n\nfunc (b *BikeBuilder) SetWheels() BuildProcess { \n    return nil \n} \n\nfunc (b *BikeBuilder) SetSeats() BuildProcess { \n    return nil \n} \n\nfunc (b *BikeBuilder) SetStructure() BuildProcess { \n    return nil \n} \n\nfunc (b *BikeBuilder) Build() VehicleProduct { \n    return VehicleProduct{} \n} \n\n```", "```go\npackage creational \n\nimport \"testing\" \n\nfunc TestBuilderPattern(t *testing.T) { \n    manufacturingComplex := ManufacturingDirector{} \n\n    carBuilder := &CarBuilder{} \n    manufacturingComplex.SetBuilder(carBuilder) \n    manufacturingComplex.Construct() \n\n    car := carBuilder.Build() \n\n    //code continues here... \n\n```", "```go\nif car.Wheels != 4 { \n    t.Errorf(\"Wheels on a car must be 4 and they were %d\\n\", car.Wheels) \n} \n\nif car.Structure != \"Car\" { \n    t.Errorf(\"Structure on a car must be 'Car' and was %s\\n\", car.Structure) \n} \n\nif car.Seats != 5 { \n    t.Errorf(\"Seats on a car must be 5 and they were %d\\n\", car.Seats) \n} \n\n```", "```go\n$ go test -v -run=TestBuilder .\n=== RUN   TestBuilderPattern\n--- FAIL: TestBuilderPattern (0.00s)\n builder_test.go:15: Wheels on a car must be 4 and they were 0\n builder_test.go:19: Structure on a car must be 'Car' and was\n builder_test.go:23: Seats on a car must be 5 and they were 0\nFAIL\n\n```", "```go\nbikeBuilder := &BikeBuilder{} \n\nmanufacturingComplex.SetBuilder(bikeBuilder) \nmanufacturingComplex.Construct() \n\nmotorbike := bikeBuilder.GetVehicle() \nmotorbike.Seats = 1 \n\nif motorbike.Wheels != 2 { \n    t.Errorf(\"Wheels on a motorbike must be 2 and they were %d\\n\", motorbike.Wheels) \n} \n\nif motorbike.Structure != \"Motorbike\" { \n    t.Errorf(\"Structure on a motorbike must be 'Motorbike' and was %s\\n\", motorbike.Structure) \n} \n\n```", "```go\n$ go test -v -run=Builder .\n=== RUN   TestBuilderPattern\n--- FAIL: TestBuilderPattern (0.00s)\n builder_test.go:15: Wheels on a car must be 4 and they were 0\n builder_test.go:19: Structure on a car must be 'Car' and was\n builder_test.go:23: Seats on a car must be 5 and they were 0\n builder_test.go:35: Wheels on a motorbike must be 2 and they were 0\n builder_test.go:39: Structure on a motorbike must be 'Motorbike' and was\nFAIL\n\n```"]