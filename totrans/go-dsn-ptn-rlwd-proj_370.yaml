- en: Unit test for the vehicle builder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the previous acceptance criteria, we will create a director variable,
    the `ManufacturingDirector` type, to use the build processes represented by the
    product builder variables for a car and motorbike. The director is the one in
    charge of construction of the objects, but the builders are the ones that return
    the actual vehicle. So our builder declaration will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This preceding interface defines the steps that are necessary to build a vehicle.
    Every builder must implement this `interface` if they are to be used by the manufacturing.
    On every `Set` step, we return the same build process, so we can chain various
    steps together in the same statement, as we''ll see later. Finally, we''ll need
    a `GetVehicle` method to retrieve the `Vehicle` instance from the builder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ManufacturingDirector` director variable is the one in charge of accepting
    the builders. It has a `Construct` method that will use the builder that is stored
    in `Manufacturing`, and will reproduce the required steps. The `SetBuilder` method
    will allow us to change the builder that is being used in the `Manufacturing`
    director:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The product is the final object that we want to retrieve while using the manufacturing.
    In this case, a vehicle is composed of wheels, seats, and a structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The first Builder is the `Car` builder. It must implement every method defined
    in the `BuildProcess` interface. This is where we''ll set the information for
    this particular builder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Motorbike` structure must be the same as the `Car` structure, as they
    are all Builder implementations, but keep in mind that the process of building
    each can be very different. With this declaration of objects, we can create the
    following tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We will start with the `Manufacturing` director and the `Car` Builder to fulfill
    the first two acceptance criteria. In the preceding code, we are creating our
    `Manufacturing` director that will be in charge of the creation of every vehicle
    during the test. After creating the `Manufacturing` director, we created a `CarBuilder`
    that we then passed to manufacturing by using the `SetBuilder` method. Once the
    `Manufacturing` director knows what it has to construct now, we can call the `Construct`
    method to create the `VehicleProduct` using `CarBuilder`. Finally, once we have
    all the pieces for our car, we call the `GetVehicle` method on `CarBuilder` to
    retrieve a `Car` instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We have written three small tests to check if the outcome is a car. We checked
    that the car has four wheels, the structure has the description `Car`, and the
    number of seats is five. We have enough data to execute the tests and make sure
    that they are failing so that we can consider them reliable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Perfect! Now we will create tests for a `Motorbike` builder that covers the
    third and fourth acceptance criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is a continuation of the car tests. As you can see, we reuse
    the previously created manufacturing to create the bike now by passing the `Motorbike` builder
    to it. Then we hit the `construct` button again to create the necessary parts,
    and call the builder `GetVehicle` method to retrieve the motorbike instance.
  prefs: []
  type: TYPE_NORMAL
- en: Take a quick look, because we have changed the default number of seats for this
    particular motorbike to 1\. What we want to show here is that even while having
    a builder, you must also be able to change the default information in the returned
    instance to fit some specific needs. As we set the wheels manually, we won't test
    this feature.
  prefs: []
  type: TYPE_NORMAL
- en: 'Re-running the tests triggers the expected behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
