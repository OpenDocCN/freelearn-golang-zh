- en: Unit test for the vehicle builder
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 车辆构建者的单元测试
- en: 'With the previous acceptance criteria, we will create a director variable,
    the `ManufacturingDirector` type, to use the build processes represented by the
    product builder variables for a car and motorbike. The director is the one in
    charge of construction of the objects, but the builders are the ones that return
    the actual vehicle. So our builder declaration will look as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 根据之前的验收标准，我们将创建一个导演变量，即`ManufacturingDirector`类型，以使用代表汽车和摩托车的产品构建者变量进行构建过程。导演负责构建对象，但构建者是返回实际车辆的一方。因此，我们的构建者声明将如下所示：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This preceding interface defines the steps that are necessary to build a vehicle.
    Every builder must implement this `interface` if they are to be used by the manufacturing.
    On every `Set` step, we return the same build process, so we can chain various
    steps together in the same statement, as we''ll see later. Finally, we''ll need
    a `GetVehicle` method to retrieve the `Vehicle` instance from the builder:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此前定义的接口定义了构建车辆所需的步骤。每个构建者都必须实现此`interface`，才能被制造使用。在每一个`Set`步骤中，我们返回相同的构建过程，因此我们可以在同一个语句中链接各种步骤，就像我们稍后将要看到的那样。最后，我们还需要一个`GetVehicle`方法来从构建者中检索`Vehicle`实例：
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `ManufacturingDirector` director variable is the one in charge of accepting
    the builders. It has a `Construct` method that will use the builder that is stored
    in `Manufacturing`, and will reproduce the required steps. The `SetBuilder` method
    will allow us to change the builder that is being used in the `Manufacturing`
    director:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`ManufacturingDirector` 导演变量是负责接受构建者的一个变量。它有一个`Construct`方法，将使用存储在`Manufacturing`中的构建者，并重现所需的步骤。`SetBuilder`方法将允许我们更改`Manufacturing`导演中正在使用的构建者：'
- en: '[PRE2]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The product is the final object that we want to retrieve while using the manufacturing.
    In this case, a vehicle is composed of wheels, seats, and a structure:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 产品是我们使用制造过程中想要检索的最终对象。在这种情况下，一辆车由轮子、座位和结构组成：
- en: '[PRE3]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The first Builder is the `Car` builder. It must implement every method defined
    in the `BuildProcess` interface. This is where we''ll set the information for
    this particular builder:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个构建者是`Car`构建者。它必须实现`BuildProcess`接口中定义的每个方法。这就是我们为这个特定的构建者设置信息的地方：
- en: '[PRE4]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `Motorbike` structure must be the same as the `Car` structure, as they
    are all Builder implementations, but keep in mind that the process of building
    each can be very different. With this declaration of objects, we can create the
    following tests:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`Motorbike`结构必须与`Car`结构相同，因为它们都是构建者实现，但请记住，构建每个的过程可能非常不同。有了这个对象声明，我们可以创建以下测试：'
- en: '[PRE5]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We will start with the `Manufacturing` director and the `Car` Builder to fulfill
    the first two acceptance criteria. In the preceding code, we are creating our
    `Manufacturing` director that will be in charge of the creation of every vehicle
    during the test. After creating the `Manufacturing` director, we created a `CarBuilder`
    that we then passed to manufacturing by using the `SetBuilder` method. Once the
    `Manufacturing` director knows what it has to construct now, we can call the `Construct`
    method to create the `VehicleProduct` using `CarBuilder`. Finally, once we have
    all the pieces for our car, we call the `GetVehicle` method on `CarBuilder` to
    retrieve a `Car` instance:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`Manufacturing`导演和`Car`构建者来满足前两个验收标准。在先前的代码中，我们创建了一个`Manufacturing`导演，它将负责测试期间每辆车的创建。在创建`Manufacturing`导演后，我们创建了一个`CarBuilder`，然后通过使用`SetBuilder`方法将其传递给制造。一旦`Manufacturing`导演知道现在要构建什么，我们就可以调用`Construct`方法来使用`CarBuilder`创建`VehicleProduct`。最后，一旦我们拥有了汽车的所有部件，我们就在`CarBuilder`上调用`GetVehicle`方法来检索一个`Car`实例：
- en: '[PRE6]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We have written three small tests to check if the outcome is a car. We checked
    that the car has four wheels, the structure has the description `Car`, and the
    number of seats is five. We have enough data to execute the tests and make sure
    that they are failing so that we can consider them reliable:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写了三个小型测试来检查结果是否为汽车。我们检查了汽车有四个轮子，结构描述为`Car`，座位数为五。我们有足够的数据来执行测试并确保它们失败，这样我们就可以认为它们是可靠的：
- en: '[PRE7]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Perfect! Now we will create tests for a `Motorbike` builder that covers the
    third and fourth acceptance criteria:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 完美！现在我们将为`Motorbike`构建者创建测试，以涵盖第三和第四个验收标准：
- en: '[PRE8]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding code is a continuation of the car tests. As you can see, we reuse
    the previously created manufacturing to create the bike now by passing the `Motorbike` builder
    to it. Then we hit the `construct` button again to create the necessary parts,
    and call the builder `GetVehicle` method to retrieve the motorbike instance.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码是汽车测试的延续。如您所见，我们通过将`Motorbike`构建器传递给它，重新使用了之前创建的制造过程来创建自行车。然后我们再次点击`construct`按钮来创建必要的部件，并调用构建器的`GetVehicle`方法来检索摩托车实例。
- en: Take a quick look, because we have changed the default number of seats for this
    particular motorbike to 1\. What we want to show here is that even while having
    a builder, you must also be able to change the default information in the returned
    instance to fit some specific needs. As we set the wheels manually, we won't test
    this feature.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 快速看一下，因为我们已经将这个特定摩托车的默认座位数更改为1。我们在这里想要展示的是，即使有构建器，你也必须能够更改返回实例中的默认信息以适应某些特定需求。由于我们手动设置了车轮，所以我们将不会测试这个功能。
- en: 'Re-running the tests triggers the expected behavior:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 重新运行测试会触发预期的行为：
- en: '[PRE9]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
