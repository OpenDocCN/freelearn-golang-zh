- en: Wrapping up the Builder design pattern
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结建造者设计模式
- en: The Builder design pattern helps us maintain an unpredictable number of products
    by using a common construction algorithm that is used by the director. The construction
    process is always abstracted from the user of the product.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 建造者设计模式通过使用导演所用的通用构建算法，帮助我们维护一个不可预测数量的产品。构建过程始终被抽象化，从产品的使用者那里分离出来。
- en: At the same time, having a defined construction pattern helps when a newcomer
    to our source code needs to add a new product to the *pipeline*. The `BuildProcess`
    interface specifies what he must comply to be part of the possible builders.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，当我们源代码的新来者需要向*流水线*中添加新产品时，有一个定义好的构建模式会很有帮助。`BuildProcess`接口规定了他们必须遵守的规范，以便成为可能的建造者之一。
- en: However, try to avoid the Builder pattern when you are not completely sure that
    the algorithm is going to be more or less stable because any small change in this
    interface will affect all your builders and it could be awkward if you add a new
    method that some of your builders need and others Builders do not.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当你不确定算法是否将大致稳定时，尽量避免使用建造者模式，因为任何对这个接口的微小更改都将影响所有建造者，如果你添加了一个某些建造者需要而其他建造者不需要的新方法，可能会显得有些尴尬。
