- en: First unit test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A Factory method has a very simple structure; we just need to identify how
    many implementations of our interface we are storing, and then provide a method,
    `GetPaymentMethod`, where you can pass a type of payment as an argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding lines define the interface of the payment method. They define a
    way of making a payment at the shop. The Factory method will return instances
    of types that implement this interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We have to define the identified payment methods of the Factory as constants
    so that we can call and check the possible payment methods from outside of the
    package.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is the function that will create the objects for us. It returns
    a pointer, which must have an object that implements the `PaymentMethod` interface,
    and an error if asked for a method which is not registered.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To finish the declaration of the Factory, we create the two payment methods.
    As you can see, the `CashPM` and `DebitCardPM` structs implement the `PaymentMethod`
    interface by declaring a method, `Pay(amount float32) string`. The returned string
    will contain information about the payment.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this declaration, we will start by writing the tests for the first acceptance
    criteria: to have a common method to retrieve objects that implement the `PaymentMethod`
    interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now we'll have to separate the tests among a few of the test functions. `GetPaymentMethod`
    is a common method to retrieve methods of payment. We use the constant `Cash`,
    which we have defined in the implementation file (if we were using this constant
    outside for the scope of the package, we would call it using the name of the package
    as the prefix, so the syntax would be `creational.Cash`). We also check that we
    have not received an error when asking for a payment method. Observe that if we
    receive the error when asking for a payment method, we call `t.Fatal` to stop
    the execution of the tests; if we called just `t.Error` like in the previous tests,
    we would have a problem in the next lines when trying to access the `Pay` method
    of a nil object, and our tests would crash execution. We continue by using the
    `Pay` method of the interface by passing 10.30 as the amount. The returned message
    will have to contain the text `paid using cash`. The `t.Log(string)` method is
    a special method in testing. This struct allows us to write some logs when we
    run the tests if we pass the `-v` flag.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We repeat the same operation with the debit card method. We ask for the payment
    method defined with the constant `DebitCard,` and the returned message, when paying
    with debit card, must contain the `paid using debit card` string.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we are going to test the situation when we request a payment method
    that doesn´t exist (represented by the number 20, which doesn't match any recognized
    constant in the Factory). We will check if an error message (any) is returned
    when asking for an unknown payment method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check whether all tests are failing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in this example, we can only see tests that return the `PaymentMethod`
    interfaces failing. In this case, we'll have to implement just a part of the code,
    and then test again before continuing.
  prefs: []
  type: TYPE_NORMAL
