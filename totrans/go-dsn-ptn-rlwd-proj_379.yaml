- en: Implementation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start with the `GetPaymentMethod` method. It must receive an integer
    that matches with one of the defined constants of the same file to know which
    implementation it should return.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We use a plain switch to check the contents of the argument `m` (method). If
    it matches any of the known methods--cash or debit card, it returns a new instance
    of them. Otherwise, it will return a nil and an error indicating that the payment
    method has not been recognized. Now we can run our tests again to check the second
    part of the unit tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we do not get the errors saying it couldn''t find the type of payment methods.
    Instead, we receive a `message not correct` error when it tries to use any of
    the methods that it covers. We also got rid of the `Not implemented` message that
    was being returned when we asked for an unknown payment method. Let''s implement
    the structs now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We just get the amount, printing it in a nicely formatted message. With this
    implementation, the tests will all be passing now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Do you see the `LOG`: messages? They aren''t errors, we just print some information
    that we receive when using the package under test. These messages can be omitted
    unless you pass the `-v` flag to the test command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
