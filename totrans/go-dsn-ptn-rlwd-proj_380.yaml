- en: Upgrading the Debitcard method to a new platform
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now imagine that your `DebitCard` payment method has changed for some reason,
    and you need a new struct for it. To achieve this scenario, you will only need
    to create the new struct and replace the old one when the user asks for the `DebitCard`
    payment method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This is our new type that will replace the `DebitCardPM` structure. The `CreditCardPM`
    implements the same `PaymentMethod` interface as the debit card. We haven''t deleted
    the previous one in case we need it in the future. The only difference lies in
    the returned message that now contains the information about the new type. We
    also have to modify the method to retrieve the payment methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The only modification is in the line where we create the new debit card that
    now points to the newly created struct. Let''s run the tests to see if everything
    is still correct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Uh, oh! Something has gone wrong. The expected message when paying with a credit
    card does not match the returned message. Does it mean that our code isn''t correct?
    Generally speaking, yes, you shouldn''t modify your tests to make your program
    work. When defining tests, you should be also aware of not defining them too much
    because you could achieve some coupling in the tests that you didn''t have in
    your code. With the message restriction, we have a few grammatically correct possibilities
    for the message, so we''ll change it to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We run the tests again now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Everything is okay again. This was just a small example of how to write good
    unit tests, too. When we wanted to check that a debit card payment method returns
    a message that contains `paid using debit card` string, we were probably being
    a bit restrictive, and it would be better to check for those words separately
    or define a better formatting for the returned messages.
  prefs: []
  type: TYPE_NORMAL
