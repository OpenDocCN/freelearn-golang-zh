- en: Upgrading the Debitcard method to a new platform
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将借记卡方法升级到新平台
- en: 'Now imagine that your `DebitCard` payment method has changed for some reason,
    and you need a new struct for it. To achieve this scenario, you will only need
    to create the new struct and replace the old one when the user asks for the `DebitCard`
    payment method:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在想象一下，由于某种原因，你的`DebitCard`支付方式已经改变，你需要为它创建一个新的结构。为了实现这个场景，你只需要创建新的结构，并在用户请求`DebitCard`支付方式时替换旧的一个：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is our new type that will replace the `DebitCardPM` structure. The `CreditCardPM`
    implements the same `PaymentMethod` interface as the debit card. We haven''t deleted
    the previous one in case we need it in the future. The only difference lies in
    the returned message that now contains the information about the new type. We
    also have to modify the method to retrieve the payment methods:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们即将替换`DebitCardPM`结构的新类型。`CreditCardPM`实现了与借记卡相同的`PaymentMethod`接口。我们还没有删除之前的版本，以防将来需要它。唯一的区别在于返回的消息，现在包含了关于新类型的信息。我们还需要修改获取支付方式的方法：
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The only modification is in the line where we create the new debit card that
    now points to the newly created struct. Let''s run the tests to see if everything
    is still correct:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的修改是在我们创建新借记卡的那一行，现在它指向新创建的结构。让我们运行测试来看看一切是否仍然正确：
- en: '[PRE2]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Uh, oh! Something has gone wrong. The expected message when paying with a credit
    card does not match the returned message. Does it mean that our code isn''t correct?
    Generally speaking, yes, you shouldn''t modify your tests to make your program
    work. When defining tests, you should be also aware of not defining them too much
    because you could achieve some coupling in the tests that you didn''t have in
    your code. With the message restriction, we have a few grammatically correct possibilities
    for the message, so we''ll change it to the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！出问题了。使用信用卡支付时预期的消息与返回的消息不匹配。这意味着我们的代码不正确吗？一般来说，是的，你不应该修改测试来让程序工作。在定义测试时，你也应该意识到不要定义得太多，因为你可能会在测试中实现一些代码中没有的耦合。由于消息限制，我们有几种语法上正确的消息可能性，所以我们将它改为以下内容：
- en: '[PRE3]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We run the tests again now:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在再次运行测试：
- en: '[PRE4]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Everything is okay again. This was just a small example of how to write good
    unit tests, too. When we wanted to check that a debit card payment method returns
    a message that contains `paid using debit card` string, we were probably being
    a bit restrictive, and it would be better to check for those words separately
    or define a better formatting for the returned messages.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都正常了。这只是一个如何编写良好单元测试的小例子。当我们想要检查借记卡支付方式返回的消息是否包含`paid using debit card`字符串时，我们可能过于严格了，最好分别检查这些单词或者为返回的消息定义更好的格式。
