- en: Description
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 描述
- en: The Abstract Factory design pattern is a new layer of grouping to achieve a
    bigger (and more complex) composite object, which is used through its interfaces.
    The idea behind grouping objects in families and grouping families is to have
    big factories that can be interchangeable and can grow more easily. In the early
    stages of development, it is also easier to work with factories and abstract factories
    than to wait until all concrete implementations are done to start your code. Also,
    you won't write an Abstract Factory from the beginning unless you know that your
    object's inventory for a particular field is going to be very large and it could
    be easily grouped into families.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象工厂设计模式是一种新的分组层，用于创建更大的（且更复杂的）组合对象，这些对象通过其接口使用。将对象分组到家族中以及将家族分组背后的理念是拥有可以互换且更容易扩展的大工厂。在开发的早期阶段，与工厂和抽象工厂一起工作也比等到所有具体实现完成后再开始编写代码要容易。此外，除非你知道特定字段的对象库存将会非常大，并且可以很容易地分组到家族中，否则你不会从一开始就编写抽象工厂。
