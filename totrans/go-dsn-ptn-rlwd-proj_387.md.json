["```go\npackage abstract_factory \n\ntype Vehicle interface { \n    NumWheels() int \n    NumSeats() int \n} \n\n```", "```go\n// Package abstract_factory file: car.go \npackage abstract_factory \n\ntype Car interface { \n    NumDoors() int \n} \n// Package abstract_factory file: motorbike.go \npackage abstract_factory \n\ntype Motorbike interface { \n    GetMotorbikeType() int \n} \n\n```", "```go\npackage abstract_factory \n\ntype VehicleFactory interface { \n    NewVehicle(v int) (Vehicle, error) \n} \n\n```", "```go\nconst ( \n    LuxuryCarType = 1 \n    FamilyCarType = 2 \n) \n\ntype CarFactory struct{} \nfunc (c *CarFactory) NewVehicle(v int) (Vehicle, error) { \n    switch v { \n        case LuxuryCarType: \n        return new(LuxuryCar), nil \n        case FamilyCarType: \n        return new(FamilyCar), nil \n        default: \n        return nil, errors.New(fmt.Sprintf(\"Vehicle of type %d not recognized\\n\", v)) \n    } \n} \n\n```", "```go\n//luxury_car.go \npackage abstract_factory \n\ntype LuxuryCar struct{} \n\nfunc (*LuxuryCar) NumDoors() int { \n    return 4 \n} \nfunc (*LuxuryCar) NumWheels() int { \n    return 4 \n} \nfunc (*LuxuryCar) NumSeats() int { \n    return 5 \n} \n\npackage abstract_factory \n\ntype FamilyCar struct{} \n\nfunc (*FamilyCar) NumDoors() int { \n    return 5 \n} \nfunc (*FamilyCar) NumWheels() int { \n    return 4 \n} \nfunc (*FamilyCar) NumSeats() int { \n    return 5 \n} \n\n```", "```go\nconst ( \n    SportMotorbikeType = 1 \n    CruiseMotorbikeType = 2 \n) \n\ntype MotorbikeFactory struct{} \n\nfunc (m *MotorbikeFactory) Build(v int) (Vehicle, error) { \n    switch v { \n        case SportMotorbikeType: \n        return new(SportMotorbike), nil \n        case CruiseMotorbikeType: \n        return new(CruiseMotorbike), nil \n        default: \n        return nil, errors.New(fmt.Sprintf(\"Vehicle of type %d not recognized\\n\", v)) \n    } \n} \n\n```", "```go\n//sport_motorbike.go \npackage abstract_factory \n\ntype SportMotorbike struct{} \n\nfunc (s *SportMotorbike) NumWheels() int { \n    return 2 \n} \nfunc (s *SportMotorbike) NumSeats() int { \n    return 1 \n} \nfunc (s *SportMotorbike) GetMotorbikeType() int { \n    return SportMotorbikeType \n} \n\n//cruise_motorbike.go \npackage abstract_factory \n\ntype CruiseMotorbike struct{} \n\nfunc (c *CruiseMotorbike) NumWheels() int { \n    return 2 \n} \nfunc (c *CruiseMotorbike) NumSeats() int { \n    return 2 \n} \nfunc (c *CruiseMotorbike) GetMotorbikeType() int { \n    return CruiseMotorbikeType \n} \n\n```", "```go\npackage abstract_factory \n\nimport ( \n    \"fmt\" \n    \"errors\" \n) \n\ntype VehicleFactory interface { \n    Build(v int) (Vehicle, error) \n} \n\nconst ( \n    CarFactoryType = 1 \n    MotorbikeFactoryType = 2 \n) \n\nfunc BuildFactory(f int) (VehicleFactory, error) { \n    switch f { \n        default: \n        return nil, errors.New(fmt.Sprintf(\"Factory with id %d not recognized\\n\", f)) \n    } \n}\n```", "```go\npackage abstract_factory \n\nimport \"testing\" \n\nfunc TestMotorbikeFactory(t *testing.T) { \n    motorbikeF, err := BuildFactory(MotorbikeFactoryType) \n    if err != nil { \n        t.Fatal(err) \n    } \n\n    motorbikeVehicle, err := motorbikeF.Build(SportMotorbikeType) \n    if err != nil { \n        t.Fatal(err) \n    } \n\n    t.Logf(\"Motorbike vehicle has %d wheels\\n\", motorbikeVehicle.NumWheels()) \n\n    sportBike, ok := motorbikeVehicle.(Motorbike) \n    if !ok { \n        t.Fatal(\"Struct assertion has failed\") \n    } \n    t.Logf(\"Sport motorbike has type %d\\n\", sportBike.GetMotorbikeType()) \n} \n\n```", "```go\nfunc TestCarFactory(t *testing.T) { \n    carF, err := BuildFactory(CarFactoryType) \n    if err != nil { \n        t.Fatal(err) \n    } \n\n    carVehicle, err := carF.Build(LuxuryCarType) \n    if err != nil { \n        t.Fatal(err) \n    } \n\n    t.Logf(\"Car vehicle has %d seats\\n\", carVehicle.NumWheels()) \n\n    luxuryCar, ok := carVehicle.(Car) \n    if !ok { \n        t.Fatal(\"Struct assertion has failed\") \n    } \n    t.Logf(\"Luxury car has %d doors.\\n\", luxuryCar.NumDoors()) \n} \n\n```", "```go\ngo test -v -run=Factory .\n=== RUN   TestMotorbikeFactory\n--- FAIL: TestMotorbikeFactory (0.00s)\n vehicle_factory_test.go:8: Factory with id 2 not recognized\n=== RUN   TestCarFactory\n--- FAIL: TestCarFactory (0.00s)\n vehicle_factory_test.go:28: Factory with id 1 not recognized\nFAIL\nexit status 1\nFAIL \n\n```"]