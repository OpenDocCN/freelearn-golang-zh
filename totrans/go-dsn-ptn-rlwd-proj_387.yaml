- en: Unit test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is going to be a long example, so pay attention, please. We will have
    the following entities:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vehicle**: The interface that all objects in our factories must implement:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Motorbike**: An interface for motorbikes of the types sport (one seat) and
    cruise (two seats).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Car**: An interface for cars of types luxury (with four doors) and family
    (with five doors).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VehicleFactory**: An interface (the Abstract Factory) to retrieve factories
    that implement the `VehicleFactory` method:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Motorbike** Factory: A factory that implements the `VehicleFactory` interface
    to return vehicle that implements the `Vehicle` and `Motorbike` interfaces.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Car** Factory: Another factory that implements the `VehicleFactory` interface
    to return vehicles that implement the `Vehicle` and `Car` interfaces.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For clarity, we are going to separate each entity into a different file. We
    will start with the `Vehicle` interface, which will be in the `vehicle.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Car` and `Motorbike` interfaces will be in the `car.go` and `motorbike.go`
    files, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We have one last interface, the one that each factory must implement. This
    will be in the `vehicle_factory.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'So, now we are going to declare the car factory. It must implement the `VehicleFactory`
    interface defined previously to return `Vehicles` instances:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We have defined two types of cars--luxury and family. The `car` Factory will
    have to return cars that implement the `Car` and the `Vehicle` interfaces, so
    we need two concrete implementations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s all for cars. Now we need the motorbike factory, which, like the car
    factory, must implement the `VehicleFactory` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'For the motorbike Factory, we have also defined two types of motorbikes using
    the `const` keywords: `SportMotorbikeType` and `CruiseMotorbikeType`. We will
    switch over the `v` argument in the `Build` method to know which type shall be
    returned. Let''s write the two concrete motorbikes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To finish, we need the abstract factory itself, which we will put in the previously
    created `vehicle_factory.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We are going to write enough tests to make a reliable check as the scope of
    the book doesn''t cover 100% of the statements. It will be a good exercise for
    the reader to finish these tests. First, a `motorbike` Factory test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We use the package method, `BuildFactory` , to retrieve a motorbike Factory
    (passing the `MotorbikeFactory` ID in the parameters), and check if we get any
    error. Then, already with the motorbike factory, we ask for a vehicle of the type
    `SportMotorbikeType` and check for errors again. With the returned vehicle, we
    can ask for methods of the vehicle interface (`NumWheels` and `NumSeats`). We
    know that it is a motorbike, but we cannot ask for the type of motorbike without
    using the type assertion. We use the type assertion on the vehicle to retrieve
    the motorbike that the `motorbikeVehicle` represents in the code line `sportBike,
    found := motorbikeVehicle.(Motorbike)`, and we must check that the type we have
    received is correct.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, now we have a motorbike instance, we can ask for the bike type by
    using the `GetMotorbikeType` method. Now we are going to write a test that checks
    the car factory in the same manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Again, we use the `BuildFactory` method to retrieve a `Car` Factory by using
    the `CarFactoryType` in the parameters. With this factory, we want a car of the `Luxury`
    type so that it returns a `vehicle` instance. We again do the type assertion to
    point to a car instance so that we can ask for the number of doors using the `NumDoors`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s run the unit tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Done. It can't recognize any factory as their implementation is still not done.
  prefs: []
  type: TYPE_NORMAL
