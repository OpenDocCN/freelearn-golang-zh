- en: Implementation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The implementation of every factory is already done for the sake of brevity.
    They are very similar to the Factory method with the only difference being that
    in the Factory method, we don''t use an instance of the Factory method because
    we use the package functions directly. The implementation of the `vehicle` Factory
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Like in any factory, we switched between the factory possibilities to return
    the one that was demanded. As we have already implemented all concrete vehicles,
    the tests must run too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'All of them passed. Take a close look and note that we have used the `-cover`
    flag when running the tests to return a coverage percentage of the package: 45.8%.
    What this tells us is that 45.8% of the lines are covered by the tests we have
    written, but 54.2% are still not under the tests. This is because we haven''t
    covered the cruise motorbike and the family car with the tests. If you write those
    tests, the result should rise to around 70.8%.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Type assertion is also known as **casting** in other languages. When you have
    an interface instance, which is essentially a pointer to a struct, you just have
    access to the interface methods. With type assertion, you can tell the compiler
    the type of the pointed struct, so you can access the entire struct fields and
    methods.
  prefs: []
  type: TYPE_NORMAL
