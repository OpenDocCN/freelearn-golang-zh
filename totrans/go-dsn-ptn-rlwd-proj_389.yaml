- en: A few lines about the Abstract Factory method
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 几行关于抽象工厂方法的介绍
- en: We have learned how to write a factory of factories that provides us with a
    very generic object of vehicle type. This pattern is commonly used in many applications
    and libraries, such as cross-platform GUI libraries. Think of a button, a generic
    object, and button factory that provides you with a factory for Microsoft Windows
    buttons while you have another factory for Mac OS X buttons. You don't want to
    deal with the implementation details of each platform, but you just want to implement
    the actions for some specific behavior raised by a button.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了如何编写一个提供非常通用的车辆类型对象的工厂工厂。这种模式在许多应用程序和库中都很常见，例如跨平台GUI库。想象一下，一个按钮，一个通用对象，以及一个提供Microsoft
    Windows按钮工厂的按钮工厂，同时你还有一个为Mac OS X按钮提供工厂的另一个工厂。你不想处理每个平台的实现细节，你只想实现由按钮引发的一些特定行为的动作。
- en: Also, we have seen the differences when approaching the same problem with two
    different solutions--the Abstract factory and the Builder pattern. As you have
    seen, with the Builder pattern, we had an unstructured list of objects (cars with
    motorbikes in the same factory). Also, we encouraged reusing the building algorithm
    in the Builder pattern. In the Abstract factory, we have a very structured list
    of vehicles (the factory for motorbikes and a factory for cars). We also didn't
    mix the creation of cars with motorbikes, providing more flexibility in the creation
    process. The Abstract factory and Builder patterns can both resolve the same problem,
    but your particular needs will help you find the slight differences that should
    lead you to take one solution or the other.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们也看到了使用两种不同的解决方案来处理相同问题时存在的差异——抽象工厂和建造者模式。正如你所见，在使用建造者模式时，我们有一个无结构的对象列表（同一工厂中的汽车和摩托车）。在建造者模式中，我们还鼓励重用构建算法。在抽象工厂中，我们有一个非常结构化的车辆列表（摩托车工厂和汽车工厂）。我们也没有将汽车和摩托车的创建混合在一起，这为创建过程提供了更多的灵活性。抽象工厂和建造者模式都可以解决相同的问题，但你的特定需求将帮助你找到应该导致你选择一种解决方案而不是另一种解决方案的细微差异。
