- en: A few lines about the Abstract Factory method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have learned how to write a factory of factories that provides us with a
    very generic object of vehicle type. This pattern is commonly used in many applications
    and libraries, such as cross-platform GUI libraries. Think of a button, a generic
    object, and button factory that provides you with a factory for Microsoft Windows
    buttons while you have another factory for Mac OS X buttons. You don't want to
    deal with the implementation details of each platform, but you just want to implement
    the actions for some specific behavior raised by a button.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we have seen the differences when approaching the same problem with two
    different solutions--the Abstract factory and the Builder pattern. As you have
    seen, with the Builder pattern, we had an unstructured list of objects (cars with
    motorbikes in the same factory). Also, we encouraged reusing the building algorithm
    in the Builder pattern. In the Abstract factory, we have a very structured list
    of vehicles (the factory for motorbikes and a factory for cars). We also didn't
    mix the creation of cars with motorbikes, providing more flexibility in the creation
    process. The Abstract factory and Builder patterns can both resolve the same problem,
    but your particular needs will help you find the slight differences that should
    lead you to take one solution or the other.
  prefs: []
  type: TYPE_NORMAL
