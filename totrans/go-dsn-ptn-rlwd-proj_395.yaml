- en: Unit test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we will need a `ShirtCloner` interface and an object that implements
    it. Also, we need a package-level function called `GetShirtsCloner` to retrieve
    a new instance of the cloner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need an object struct to clone, which implements an interface to retrieve
    the information of its fields. We will call the object `Shirt` and theÂ `ItemInfoGetter`
    interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Have you realized that the type called `ShirtColor` that we defined is just
    a `byte` type? Maybe you are wondering why we haven't simply used the byte `type`.
    We could, but this way we created an easily readable struct, which we can upgrade
    with some methods in the future if required. For example, we could write a `String()`
    method that returns the color in the string format (`White` for type 1, `Black`
    for type 2, and `Blue` for type 3).
  prefs: []
  type: TYPE_NORMAL
- en: 'With this code, we can already write our first tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We will cover the first case of our scenario, where we need a cloner object
    that we can use to ask for different shirt colors.
  prefs: []
  type: TYPE_NORMAL
- en: For the second case, we will take the original object (which we can access because
    we are in the scope of the package), and we will compare it with our `shirt1`
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, for the third case. First, we will type assert `item1` to a shirt so that
    we can set an SKU. We will create a second shirt, also white, and we will type
    assert it too to check that the SKUs are different:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, for the fourth case, we log the info of the first and second shirts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We will be printing the memory positions of both shirts, so we make this assertion
    at a more physical level:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we run the tests so we can check that it fails:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We have to stop there so that the tests don't panic if we try to use a nil object
    that is returned by the `GetShirtsCloner` function.
  prefs: []
  type: TYPE_NORMAL
