["```go\nvar whitePrototype *Shirt = &Shirt{ \n    Price: 15.00, \n    SKU:   \"empty\", \n    Color: White, \n} \n\nvar blackPrototype *Shirt = &Shirt{ \n    Price: 16.00, \n    SKU:   \"empty\", \n    Color: Black, \n} \n\nvar bluePrototype *Shirt = &Shirt{ \n    Price: 17.00, \n    SKU:   \"empty\", \n    Color: Blue, \n} \n\n```", "```go\ntype ShirtsCache struct {} \nfunc (s *ShirtsCache)GetClone(s int) (ItemInfoGetter, error) { \n    switch m { \n        case White: \n            newItem := *whitePrototype \n            return &newItem, nil \n        case Black: \n            newItem := *blackPrototype \n            return &newItem, nil \n        case Blue: \n            newItem := *bluePrototype \n            return &newItem, nil \n        default: \n            return nil, errors.New(\"Shirt model not recognized\") \n    } \n} \n\n```", "```go\ntype ShirtColor byte \n\ntype Shirt struct { \n    Price float32 \n    SKU   string \n    Color ShirtColor \n} \n\nfunc (s *Shirt) GetInfo() string { \n    return fmt.Sprintf(\"Shirt with SKU '%s' and Color id %d that costs %f\\n\", s.SKU, s.Color, s.Price) \n} \n\n```", "```go\ngo test -run=TestClone -v . \n=== RUN   TestClone \n--- PASS: TestClone (0.00s) \nprototype_test.go:41: LOG: Shirt with SKU 'abbcc' and Color id 1 that costs 15.000000 \nprototype_test.go:42: LOG: Shirt with SKU 'empty' and Color id 1 that costs 15.000000 \nprototype_test.go:44: LOG: The memory positions of the shirts are different 0xc42002c038 != 0xc42002c040  \n\nPASS \nok\n\n```"]