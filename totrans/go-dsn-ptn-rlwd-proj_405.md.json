["```go\ntype Athlete struct{} \n\nfunc (a *Athlete) Train() { \n  fmt.Println(\"Training\") \n} \n\n```", "```go\ntype CompositeSwimmerA struct{ \n  MyAthlete Athlete \n  MySwim func() \n} \n\n```", "```go\nfunc Swim(){ \n  fmt.Println(\"Swimming!\") \n} \n\n```", "```go\nswimmer := CompositeSwimmerA{ \n  MySwim: Swim, \n} \n\nswimmer.MyAthlete.Train() \nswimmer.MySwim() \n\n```", "```go\n$ go run main.go\nTraining\nSwimming!\n\n```", "```go\ntype CompositeSwimmerA struct{ \n  MyAthlete Athlete \n  MySwim    func() \n} \n\n```", "```go\nlocalSwim := Swim \n\nswimmer := CompositeSwimmerA{ \n  MySwim: localSwim, \n} \n\nswimmer.MyAthlete.Train() \nswimmer.MySwim () \n\n```", "```go\ntype Animal struct{} \n\nfunc (r *Animal)Eat() { \n  println(\"Eating\") \n} \n\n```", "```go\ntype Shark struct{ \n  Animal \n  Swim func() \n} \n\n```", "```go\nfish := Shark{ \n  Swim: Swim, \n} \n\nfish.Eat() \nfish.Swim() \n\n```", "```go\n$ go run main.go \nEating \nSwimming!\n\n```", "```go\ntype Swimmer interface { \n  Swim() \n} \ntype Trainer interface { \n  Train() \n} \n\ntype SwimmerImpl struct{} \nfunc (s *SwimmerImpl) Swim(){ \n  println(\"Swimming!\") \n} \n\ntype CompositeSwimmerB struct{ \n  Trainer \n  Swimmer \n} \n\n```", "```go\nswimmer := CompositeSwimmerB{ \n  &Athlete{}, \n  &SwimmerImpl{}, \n} \n\nswimmer.Train() \nswimmer.Swim() \n\n```", "```go\n$ go run main.go\nTraining\nSwimming!\n\n```"]