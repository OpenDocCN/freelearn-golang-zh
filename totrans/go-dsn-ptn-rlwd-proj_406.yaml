- en: Binary Tree compositions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another very common approach to the Composite pattern is when working with
    Binary Tree structures. In a Binary Tree, you need to store instances of itself
    in a field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This is some kind of recursive compositing, and, because of the nature of recursivity,
    we must use pointers so that the compiler knows how much memory it must reserve
    for this struct. Our `Tree` struct stored a `LeafValue` object for each instance
    and a new `Tree` in its `Right` and `Left` fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this structure, we could create an object like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can print the contents of its deepest branch like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
