- en: Composite pattern versus inheritance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When using the Composite design pattern in Go, you must be very careful not
    to confuse it with inheritance. For example, when you embed a `Parent` struct
    within a `Son` struct, like in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You cannot consider that the `Son` struct is also the `Parent` struct. What
    this means is that you cannot pass an instance of the `Son` struct to a function
    that is expecting a `Parent` struct like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'When you try to pass a `Son` instance to the `GetParentField` method, you will
    get the following error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This, in fact, makes a lot of sense. What''s the solution for this? Well, you
    can simply composite the `Son`  struct with the parent without embedding so that
    you can access the `Parent` instance later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'So now you could use the `P` field to pass it to the `GetParentField` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
