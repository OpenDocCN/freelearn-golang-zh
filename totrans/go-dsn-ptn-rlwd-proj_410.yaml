- en: Description
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 描述
- en: The Adapter pattern is very useful when, for example, an interface gets outdated
    and it's not possible to replace it easily or fast. Instead, you create a new
    interface to deal with the current needs of your application, which, under the
    hood, uses implementations of the old interface.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 适配器模式在例如接口过时且无法轻松或快速替换时非常有用。相反，你可以创建一个新的接口来处理应用程序当前的需求，而在底层，它使用旧接口的实现。
- en: Adapter also helps us to maintain the *open/closed principle* in our apps, making
    them more predictable too. They also allow us to write code which uses some base
    that we can't modify.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 适配器还帮助我们维护应用程序中的*开放/封闭原则*，使它们更具可预测性。它们还允许我们编写使用一些无法修改的基类的代码。
- en: Note
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The open/closed principle was first stated by Bertrand Meyer in his book *Object-Oriented
    Software Construction*. He stated that code should be open to new functionality,
    but closed to modifications. What does it mean? Well, it implies a few things.
    On one hand, we should try to write code that is extensible and not only one that
    works. At the same time, we should try not to modify the source code (yours or
    other people's) as much as we can, because we aren't always aware of the implications
    of this modification. Just keep in mind that extensibility in code is only possible
    through the use of design patterns and interface-oriented programming.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 开放/封闭原则最初由伯特兰·迈耶在他的书《面向对象软件构造》中提出。他提出，代码应该对新功能开放，但对修改封闭。这意味着什么？嗯，它暗示了几件事情。一方面，我们应该尝试编写可扩展的代码，而不仅仅是能工作的代码。同时，我们应该尽量少修改源代码（你或他人的），因为我们并不总是意识到这种修改的后果。只需记住，代码的可扩展性只有通过使用设计模式和面向接口的编程才能实现。
