- en: Unit testing our Printer adapter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will write the legacy code first, but we won''t test it as we should imagine
    that it isn''t our code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The legacy interface called `LegacyPrinter` has a `Print` method that accepts
    a string and returns a message. Our `MyLegacyPrinter` struct implements the `LegacyPrinter` interface
    and modifies the passed string by prefixing the text `Legacy Printer:`. After
    modifying the text, the `MyLegacyPrinter` struct prints the text on the console,
    and then returns it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we''ll declare the new interface that we''ll have to adapt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, the new `PrintStored` method doesn''t accept any string as an
    argument, because it will have to be stored in the implementers in advance. We
    will call our Adapter pattern''s `PrinterAdapter` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As mentioned earlier, the `PrinterAdapter` adapter must have a field to store
    the string to print. It must also have a field to store an instance of the `LegacyPrinter`
    adapter. So let''s write the unit tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We will use the message `Hello World!` for our adapter. When using this message
    with an instance of the `MyLegacyPrinter` struct, it prints the text `Legacy Printer:
    Hello World!`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We created an instance of the `PrinterAdapter` interface called `adapter`.
    We passed an instance of the `MyLegacyPrinter` struct as the `LegacyPrinter` field
    called `OldPrinter`. Also, we set the message we want to print in the `Msg` field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we used the `PrintStored` method of the `ModernPrinter` interface; this
    method doesn''t accept any argument and must return the modified string. We know
    that the `MyLegacyPrinter` struct returns the passed string prefixed with the
    text `LegacyPrinter:`, and the adapter will prefix it with the text `Adapter:`
    So, in the end, we must have the text `Legacy Printer: Adapter: Hello World!\n`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As we are storing an instance of an interface, we must also check that we handle
    the situation where the pointer is nil. This is done with the following test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If we don''t pass an instance of the `LegacyPrinter` interface, the Adapter
    must ignore its adapt nature, and simply print and return the original message.
    Time to run our tests; consider the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
