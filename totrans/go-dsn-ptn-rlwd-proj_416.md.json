["```go\npackage main \n\nimport ( \n    \"fmt\" \n    \"log\" \n    \"net/http\" \n) \ntype MyServer struct{ \n  Msg string \n} \nfunc (m *MyServer) ServeHTTP(w http.ResponseWriter,r *http.Request){ \n  fmt.Fprintf(w, \"Hello, World\") \n} \n\nfunc main() { \n  server := &MyServer{ \n  Msg:\"Hello, World\", \n} \n\nhttp.Handle(\"/\", server)  \nlog.Fatal(http.ListenAndServe(\":8080\", nil)) \n} \n\n```", "```go\ntype Handler interface { \n  ServeHTTP(ResponseWriter, *Request) \n} \n\n```", "```go\nfunc main() { \n  http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) { \n    fmt.Fprintf(w, \"Hello, World\") \n  }) \n\n  log.Fatal(http.ListenAndServe(\":8080\", nil)) \n} \n\n```", "```go\ntype HandlerFunc func(ResponseWriter, *Request) \n\nfunc (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) { \n  f(w, r) \n} \n\n```", "```go\ntype Reader interface { \n  Read(p []byte) (n int, err error) \n} \n\ntype Writer interface { \n  Write(p []byte) (n int, err error) \n} \n\n```", "```go\ntype Counter struct {} \nfunc (f *Counter) Count(n uint64) uint64 { \n  if n == 0 { \n    println(strconv.Itoa(0)) \n    return 0 \n  } \n\n  cur := n \n  println(strconv.FormatUint(cur, 10)) \n  return f.Count(n - 1) \n} \n\n```", "```go\n3\n2\n1\n\n```", "```go\ntype Counter struct { \n  Writer io.Writer \n} \nfunc (f *Counter) Count(n uint64) uint64 { \n  if n == 0 { \n    f.Writer.Write([]byte(strconv.Itoa(0) + \"\\n\")) \n    return 0 \n  } \n\n  cur := n \n  f.Writer.Write([]byte(strconv.FormatUint(cur, 10) + \"\\n\")) \n  return f.Count(n - 1) \n}\n\n```", "```go\npipeReader, pipeWriter := io.Pipe() \ndefer pw.Close() \ndefer pr.Close() \n\ncounter := Counter{ \n  Writer: pipeWriter, \n} \n\n```", "```go\ntee := io.TeeReader(pipeReader, file) \n\n```", "```go\ngo func(){ \n  io.Copy(os.Stdout, tee) \n}() \n\n```", "```go\ncounter.Count(5) \n\n```", "```go\n$ go run counter.go\n5\n4\n3\n2\n1\n0\n\n```", "```go\n$ cat /tmp/pipe\n5\n4\n3\n2\n1\n0\n\n```"]