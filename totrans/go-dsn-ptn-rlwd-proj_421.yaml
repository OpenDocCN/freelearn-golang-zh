- en: Two printers and two ways of printing for each
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 每个打印机有两种打印方式
- en: For our example, we will go to a console printer abstraction to keep it simple.
    We will have two implementations. The first will write to the console. Having
    learned about the `io.Writer` interface in the previous section, we will make
    the second write to an `io.Writer` interface to provide more flexibility to the
    solution. We will also have two abstracted object users of the implementations--a
    `Normal` object, which will use each implementation in a straightforward manner,
    and a `Packt` implementation, which will append the sentence `Message from Packt:`
    to the printing message.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们将使用控制台打印机抽象来简化问题。我们将有两个实现。第一个将写入控制台。在前一节学习了`io.Writer`接口后，我们将使第二个实现写入`io.Writer`接口，以提供更多灵活性给解决方案。我们还将有两个抽象对象用户，一个`Normal`对象，它将以直接的方式使用每个实现，以及一个`Packt`实现，它将在打印消息中追加句子`Message
    from Packt:`。
- en: At the end of this section, we will have two abstraction objects, which have
    two different implementations of their functionality. So, actually, we will have
    2² possible combinations of object functionality.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的结尾，我们将有两个抽象对象，它们具有其功能的不同实现。因此，实际上，我们将有2²种对象功能可能的组合。
