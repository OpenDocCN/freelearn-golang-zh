- en: Reuse everything with the Bridge pattern
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用桥接模式重用一切
- en: With the Bridge pattern, we have learned how to uncouple an object and its implementation
    for the `PrintMessage` method. This way, we can reuse its abstractions as well
    as its implementations. We can swap the printer abstractions as well as the printer
    APIs as much as we want without affecting the user code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 通过桥接模式，我们学习了如何解耦对象及其`PrintMessage`方法的实现。这样，我们就可以重用其抽象以及实现。我们可以随意交换打印抽象以及打印API，而不会影响用户代码。
- en: We have also tried to keep things as simple as possible, but I'm sure that you
    have realized that all implementations of the `PrinterAPI` interface could have
    been created using a factory. This would be very natural, and you could find many
    implementations that have followed this approach. However, we shouldn't get into
    over-engineering, but should analyze each problem to make a precise design of
    its needs and finds the best way to create a reusable, maintainable, and *readable*
    source code. Readable code is commonly forgotten, but a robust and uncoupled source
    code is useless if nobody can understand it to maintain it. It's like a book of
    the tenth century--it could be a precious story but pretty frustrating if we have
    difficulty understanding its grammar.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也尽量使事情尽可能简单，但我确信你已经意识到，所有`PrinterAPI`接口的实现本都可以通过工厂模式创建。这将是非常自然的，你也能找到许多遵循这一方法的实现。然而，我们不应该过度设计，而应该分析每个问题，精确地设计其需求，并找到创建可重用、可维护和*可读*源代码的最佳方式。可读的代码常常被忽视，但如果没有人能够理解它来维护它，那么一个健壮且解耦的源代码就毫无用处。这就像一本十世纪的书籍——它可能是一个珍贵的故事，但如果我们难以理解其语法，那么它就会非常令人沮丧。
