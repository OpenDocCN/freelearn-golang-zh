- en: Reuse everything with the Bridge pattern
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the Bridge pattern, we have learned how to uncouple an object and its implementation
    for the `PrintMessage` method. This way, we can reuse its abstractions as well
    as its implementations. We can swap the printer abstractions as well as the printer
    APIs as much as we want without affecting the user code.
  prefs: []
  type: TYPE_NORMAL
- en: We have also tried to keep things as simple as possible, but I'm sure that you
    have realized that all implementations of the `PrinterAPI` interface could have
    been created using a factory. This would be very natural, and you could find many
    implementations that have followed this approach. However, we shouldn't get into
    over-engineering, but should analyze each problem to make a precise design of
    its needs and finds the best way to create a reusable, maintainable, and *readable*
    source code. Readable code is commonly forgotten, but a robust and uncoupled source
    code is useless if nobody can understand it to maintain it. It's like a book of
    the tenth century--it could be a precious story but pretty frustrating if we have
    difficulty understanding its grammar.
  prefs: []
  type: TYPE_NORMAL
