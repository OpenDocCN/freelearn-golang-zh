- en: Summary
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have seen the power of composition in this chapter and many of the ways that
    Go takes advantage of it by its own nature. We have seen that the Adapter pattern
    can help us make two incompatible interfaces work together by using an `Adapter`
    object in between. At the same time, we have seen some real-life examples in Go's
    source code, where the creators of the language used this design pattern to improve
    the possibilities of some particular piece of the standard library. Finally, we
    have seen the Bridge pattern and its possibilities, allowing us to create swapping
    structures with complete reusability between objects and their implementations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中看到了组合的力量，以及Go语言如何凭借其本质利用组合的多种方式。我们了解到适配器模式可以通过在两者之间使用一个`适配器`对象来帮助两个不兼容的接口协同工作。同时，我们也看到了Go源代码中的一些真实例子，其中语言的创造者使用了这种设计模式来提高标准库中某些特定部分的可行性。最后，我们探讨了桥接模式及其可能性，它允许我们创建具有完全可互换性的对象及其实现之间的交换结构。
- en: Also, we have used the Composite design pattern throughout the chapter, not
    only when explaining it. We have mentioned it earlier but design patterns make
    use of each other very frequently. We have used pure composition instead of embedding
    to increase readability, but, as you have learned, you can use both interchangeably
    according to your needs. We will keep using the Composite pattern in the following
    chapters, as it is the foundation for building relationships in the Go programming
    language.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们在整章中使用了组合设计模式，不仅是在解释它的时候。我们之前也提到过，设计模式之间非常频繁地相互利用。我们使用纯组合而不是嵌入来提高可读性，但正如你所学的，你可以根据需要互换使用它们。我们将在接下来的章节中继续使用组合模式，因为它是构建Go编程语言中关系的基础。
