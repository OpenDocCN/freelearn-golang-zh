- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen the power of composition in this chapter and many of the ways that
    Go takes advantage of it by its own nature. We have seen that the Adapter pattern
    can help us make two incompatible interfaces work together by using an `Adapter`
    object in between. At the same time, we have seen some real-life examples in Go's
    source code, where the creators of the language used this design pattern to improve
    the possibilities of some particular piece of the standard library. Finally, we
    have seen the Bridge pattern and its possibilities, allowing us to create swapping
    structures with complete reusability between objects and their implementations.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we have used the Composite design pattern throughout the chapter, not
    only when explaining it. We have mentioned it earlier but design patterns make
    use of each other very frequently. We have used pure composition instead of embedding
    to increase readability, but, as you have learned, you can use both interchangeably
    according to your needs. We will keep using the Composite pattern in the following
    chapters, as it is the foundation for building relationships in the Go programming
    language.
  prefs: []
  type: TYPE_NORMAL
