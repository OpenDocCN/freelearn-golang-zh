- en: Chapter 4. Structural Patterns - Proxy, Facade, Decorator, and Flyweight Design
    Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章 结构型模式 - 代理模式、外观模式、装饰器模式和享元模式
- en: With this chapter, we will finish with the Structural patterns. We have left
    some of the most complex ones till the end so that you get more used to the mechanics
    of design patterns, and the features of Go language.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章，我们将结束对结构型模式的讨论。我们故意将一些最复杂的模式留到了最后，这样你可以更习惯设计模式的机制，以及Go语言的特点。
- en: In this chapter, we will work at writing a cache to access a database, a library
    to gather weather data, a server with runtime middleware, and discuss a way to
    save memory by saving shareable states between the types values.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将编写一个用于访问数据库的缓存、一个用于收集天气数据的库、一个带有运行时中间件的服务器，并讨论一种通过在类型值之间保存可共享状态来节省内存的方法。
