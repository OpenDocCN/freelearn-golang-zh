["```go\ntype UserList []User \n\nfunc (t *UserList) FindUser(id int32) (User, error) { \n  for i := 0; i < len(*t); i++ { \n    if (*t)[i].ID == id { \n      return (*t)[i], nil \n    } \n  } \n  return User{}, fmt.Errorf(\"User %s could not be found\\n\", id) \n} \n\n```", "```go\nfunc (u *UserListProxy) FindUser(id int32) (User, error) { \n  user, err := u.StackCache.FindUser(id) \n  if err == nil { \n    fmt.Println(\"Returning user from cache\") \n    u.DidLastSearchUsedCache = true \n    return user, nil \n  } \n\n```", "```go\n  user, err = u.SomeDatabase.FindUser(id) \n  if err != nil { \n    return User{}, err \n  } \n\n```", "```go\nfunc (u *UserListProxy) addUserToStack(user User) { \n  if len(u.StackCache) >= u.StackCapacity { \n    u.StackCache = append(u.StackCache[1:], user) \n  } \n  else { \n    u.StackCache.addUser(user) \n  } \n} \n\nfunc (t *UserList) addUser(newUser User) { \n  *t = append(*t, newUser) \n} \n\n```", "```go\nu.addUserToStack(user) \n\n```", "```go\n  fmt.Println(\"Returning user from database\") \n  u.DidLastSearchUsedCache = false \n  return user, nil \n} \n\n```", "```go\n$ go test -v .\n=== RUN   Test_UserListProxy\n=== RUN   Test_UserListProxy/FindUser_-_Empty_cache\nReturning user from database\n=== RUN   Test_UserListProxy/FindUser_-_One_user,_ask_for_the_same_user\nReturning user from cache\n=== RUN   Test_UserListProxy/FindUser_-_overflowing_the_stack\nReturning user from cache\nReturning user from database\nReturning user from database\n--- PASS: Test_UserListProxy (0.09s) \n--- PASS: Test_UserListProxy/FindUser_-_Empty_cache (0.00s)\n--- PASS: Test_UserListProxy/FindUser_-_One_user,_ask_for_the_same_user (0.00s)\n--- PASS: Test_UserListProxy/FindUser_-_overflowing_the_stack (0.00s)\nPASS\nok\n\n```"]