- en: Objectives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you think about extending legacy code without the risk of breaking something,
    you should think of the Decorator pattern first. It's a really powerful approach
    to deal with this particular problem.
  prefs: []
  type: TYPE_NORMAL
- en: A different field where the Decorator is very powerful may not be so obvious
    though it reveals itself when creating types with lots of features based on user
    inputs, preferences, or similar inputs. Like in a Swiss knife, you have a base
    type (the frame of the knife), and from there you unfold its functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, precisely when are we going to use the Decorator pattern? Answer to this
    question:'
  prefs: []
  type: TYPE_NORMAL
- en: When you need to add functionality to some code that you don't have access to,
    or you don't want to modify to avoid a negative effect on the code, and follow
    the open/close principle (like legacy code)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you want the functionality of an object to be created or altered dynamically,
    and the number of features is unknown and could grow fast
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
