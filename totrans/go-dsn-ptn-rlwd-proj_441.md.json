["```go\ntype IngredientAdd interface { \n  AddIngredient() (string, error) \n} \n\n```", "```go\ntype PizzaDecorator struct{ \n  Ingredient IngredientAdd \n} \n\nfunc (p *PizzaDecorator) AddIngredient() (string, error) { \n  return \"\", errors.New(\"Not implemented yet\") \n} \n\n```", "```go\ntype Meat struct { \n  Ingredient IngredientAdd \n} \n\nfunc (m *Meat) AddIngredient() (string, error) { \n  return \"\", errors.New(\"Not implemented yet\") \n} \n\n```", "```go\ntype Onion struct { \n  Ingredient IngredientAdd \n} \n\nfunc (o *Onion) AddIngredient() (string, error) { \n  return \"\", errors.New(\"Not implemented yet\") \n}  \n\n```", "```go\nfunc TestPizzaDecorator_AddIngredient(t *testing.T) { \n  pizza := &PizzaDecorator{} \n  pizzaResult, _ := pizza.AddIngredient() \n  expectedText := \"Pizza with the following ingredients:\" \n  if !strings.Contains(pizzaResult, expectedText) { \n    t.Errorf(\"When calling the add ingredient of the pizza decorator it must return the text %sthe expected text, not '%s'\", pizzaResult, expectedText) \n  } \n} \n\n```", "```go\n$ go test -v -run=TestPizzaDecorator .\n=== RUN   TestPizzaDecorator_AddIngredient\n--- FAIL: TestPizzaDecorator_AddIngredient (0.00s)\ndecorator_test.go:29: Not implemented yet\ndecorator_test.go:34: When the theÂ AddIngredient method of the pizza decorator object is called, it must return the text\nPizza with the following ingredients:\nFAIL\nexit status 1\nFAIL \n\n```", "```go\nfunc TestOnion_AddIngredient(t *testing.T) { \n  onion := &Onion{} \n  onionResult, err := onion.AddIngredient() \n  if err == nil { \n    t.Errorf(\"When calling AddIngredient on the onion decorator without\" + \"an IngredientAdd on its Ingredient field must return an error, not a string with '%s'\", onionResult) \n  } \n\n```", "```go\n  onion = &Onion{&PizzaDecorator{}} \n  onionResult, err = onion.AddIngredient() \n\n  if err != nil { \n    t.Error(err) \n  } \n  if !strings.Contains(onionResult, \"onion\") { \n    t.Errorf(\"When calling the add ingredient of the onion decorator it\" + \"must return a text with the word 'onion', not '%s'\", onionResult) \n  } \n} \n\n```", "```go\n$ go test -v -run=TestOnion_AddIngredient .\n=== RUN   TestOnion_AddIngredient\n--- FAIL: TestOnion_AddIngredient (0.00s)\ndecorator_test.go:48: Not implemented yet\ndecorator_test.go:52: When calling the add ingredient of the onion decorator it must return a text with the word 'onion', not ''\nFAIL\nexit status 1\nFAIL\n\n```", "```go\nfunc TestMeat_AddIngredient(t *testing.T) { \n  meat := &Meat{} \n  meatResult, err := meat.AddIngredient() \n  if err == nil { \n    t.Errorf(\"When calling AddIngredient on the meat decorator without\" + \"an IngredientAdd in its Ingredient field must return an error,\" + \"not a string with '%s'\", meatResult) \n  } \n\n  meat = &Meat{&PizzaDecorator{}} \n  meatResult, err = meat.AddIngredient() \n  if err != nil { \n    t.Error(err) \n  } \n\n  if !strings.Contains(meatResult, \"meat\") { \n    t.Errorf(\"When calling the add ingredient of the meat decorator it\" + \"must return a text with the word 'meat', not '%s'\", meatResult) \n  } \n} \n\n```", "```go\ngo test -v -run=TestMeat_AddIngredient .\n=== RUN   TestMeat_AddIngredient\n--- FAIL: TestMeat_AddIngredient (0.00s)\ndecorator_test.go:68: Not implemented yet\ndecorator_test.go:72: When calling the add ingredient of the meat decorator it must return a text with the word 'meat', not ''\nFAIL\nexit status 1\nFAIL\n\n```", "```go\nfunc TestPizzaDecorator_FullStack(t *testing.T) { \n  pizza := &Onion{&Meat{&PizzaDecorator{}}} \n  pizzaResult, err := pizza.AddIngredient() \n  if err != nil { \n    t.Error(err) \n  } \n\n  expectedText := \"Pizza with the following ingredients: meat, onion\" \n  if !strings.Contains(pizzaResult, expectedText){ \n    t.Errorf(\"When asking for a pizza with onion and meat the returned \" + \"string must contain the text '%s' but '%s' didn't have it\", expectedText,pizzaResult) \n  } \n\n  t.Log(pizzaResult) \n} \n\n```", "```go\ngo test -v -run=TestPizzaDecorator_FullStack .\n=== RUN   TestPizzaDecorator_FullStack\n--- FAIL: TestPizzaDecorator_FullStack (0.\ndecorator_test.go:80: Not implemented yet\ndecorator_test.go:87: When asking for a pizza with onion and meat the returned string must contain the text 'Pizza with the following ingredients: meat, onion' but '' didn't have it\nFAIL\nexit status 1\nFAIL\n\n```"]