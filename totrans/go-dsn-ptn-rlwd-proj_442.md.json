["```go\ntype PizzaDecorator struct { \n  Ingredient IngredientAdd \n} \n\nfunc (p *PizzaDecorator) AddIngredient() (string, error) { \n  return \"Pizza with the following ingredients:\", nil \n} \n\n```", "```go\ngo test -v -run=TestPizzaDecorator_Add .\n=== RUN   TestPizzaDecorator_AddIngredient\n--- PASS: TestPizzaDecorator_AddIngredient (0.00s)\nPASS\nok\n\n```", "```go\ntype Onion struct { \n  Ingredient IngredientAdd \n} \n\nfunc (o *Onion) AddIngredient() (string, error) { \n  if o.Ingredient == nil { \n    return \"\", errors.New(\"An IngredientAdd is needed in the Ingredient field of the Onion\") \n  } \n  s, err := o.Ingredient.AddIngredient() \n  if err != nil { \n    return \"\", err \n  } \n  return fmt.Sprintf(\"%s %s,\", s, \"onion\"), nil \n} \n\n```", "```go\ngo test -v -run=TestOnion_AddIngredient .\n=== RUN   TestOnion_AddIngredient\n--- PASS: TestOnion_AddIngredient (0.00s)\nPASS\nok\n\n```", "```go\ntype Meat struct { \n  Ingredient IngredientAdd \n} \n\nfunc (m *Meat) AddIngredient() (string, error) { \n  if m.Ingredient == nil { \n    return \"\", errors.New(\"An IngredientAdd is needed in the Ingredient field of the Meat\") \n  } \n  s, err := m.Ingredient.AddIngredient() \n  if err != nil { \n    return \"\", err \n  } \n  return fmt.Sprintf(\"%s %s,\", s, \"meat\"), nil \n} \n\n```", "```go\ngo test -v -run=TestMeat_AddIngredient .\n=== RUN   TestMeat_AddIngredient\n--- PASS: TestMeat_AddIngredient (0.00s)\nPASS\nok\n\n```", "```go\ngo test -v -run=TestPizzaDecorator_FullStack .\n=== RUN   TestPizzaDecorator_FullStack\n--- PASS: TestPizzaDecorator_FullStack (0.00s)\ndecorator_test.go:92: Pizza with the following ingredients: meat, onion,\nPASS\nok\n\n```"]