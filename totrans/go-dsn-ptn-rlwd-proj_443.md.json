["```go\ntype MyServer struct{} \n\nfunc (m *MyServer) ServeHTTP(w http.ResponseWriter, r *http.Request) { \n  fmt.Fprintln(w, \"Hello Decorator!\") \n} \n\n```", "```go\nfunc main() { \n  http.Handle(\"/\", &MyServer{}) \n\n  log.Fatal(http.ListenAndServe(\":8080\", nil)) \n} \n\n```", "```go\n$ curl http://localhost:8080\nHello Decorator!\n\n```", "```go\ntype LoggerServer struct { \n  Handler   http.Handler \n  LogWriter io.Writer \n} \n\nfunc (s *LoggerServer) ServeHTTP(w http.ResponseWriter, r *http.Request) { \n  fmt.Fprintf(s.LogWriter, \"Request URI: %s\\n\", r.RequestURI) \n  fmt.Fprintf(s.LogWriter, \"Host: %s\\n\", r.Host) \n  fmt.Fprintf(s.LogWriter, \"Content Length: %d\\n\",  \nr.ContentLength) \n  fmt.Fprintf(s.LogWriter, \"Method: %s\\n\", r.Method)fmt.Fprintf(s.LogWriter, \"--------------------------------\\n\") \n\n  s.Handler.ServeHTTP(w, r) \n} \n\n```", "```go\nfunc main() { \n  http.Handle(\"/\", &LoggerServer{ \n    LogWriter:os.Stdout, \n    Handler:&MyServer{}, \n  }) \n\n  log.Fatal(http.ListenAndServe(\":8080\", nil)) \n} \n\n```", "```go\n$ curl http://localhost:8080\nHello Decorator!\n\n```", "```go\n$ go run server_decorator.go\nRequest URI: /\nHost: localhost:8080\nContent Length: 0\nMethod: GET\n\n```", "```go\ntype BasicAuthMiddleware struct { \n  Handler  http.Handler \n  User     string \n  Password string \n} \n\n```", "```go\nfunc (s *BasicAuthMiddleware) ServeHTTP(w http.ResponseWriter, r *http.Request) { \n  user, pass, ok := r.BasicAuth() \n\n  if ok { \n    if user == s.User && pass == s.Password { \n      s.Handler.ServeHTTP(w, r) \n    } \n    else { \n      fmt.Fprintf(w, \"User or password incorrect\\n\") \n    } \n  } \n  else { \n    fmt.Fprintln(w, \"Error trying to retrieve data from Basic auth\") \n  } \n} \n\n```", "```go\nfunc main() { \n  fmt.Println(\"Enter the type number of server you want to launch from the  following:\") \n  fmt.Println(\"1.- Plain server\") \n  fmt.Println(\"2.- Server with logging\") \n  fmt.Println(\"3.- Server with logging and authentication\") \n\n  var selection int \n  fmt.Fscanf(os.Stdin, \"%d\", &selection) \n} \n\n```", "```go\n   switch selection { \n   case 1: \n     mySuperServer = new(MyServer) \n   case 2: \n     mySuperServer = &LoggerMiddleware{ \n       Handler:   new(MyServer), \n       LogWriter: os.Stdout, \n     } \n   case 3: \n     var user, password string \n\n     fmt.Println(\"Enter user and password separated by a space\") \n     fmt.Fscanf(os.Stdin, \"%s %s\", &user, &password) \n\n     mySuperServer = &LoggerMiddleware{ \n     Handler: &SimpleAuthMiddleware{ \n       Handler:  new(MyServer), \n       User:     user, \n       Password: password, \n     }, \n     LogWriter: os.Stdout, \n   } \n   default: \n   mySuperServer = new(MyServer) \n } \n\n```", "```go\nhttp.Handle(\"/\", mySuperServer) \nlog.Fatal(http.ListenAndServe(\":8080\", nil)) \n\n```", "```go\n$go run server_decorator.go \nEnter the server type number you want to launch from the following: \n1.- Plain server \n2.- Server with logging \n3.- Server with logging and authentication \n\nEnter user and password separated by a space \nmario castro\n\n```", "```go\n$ curl http://localhost:8080\nError trying to retrieve data from Basic auth\n\n```", "```go\n$ curl -u no:correct http://localhost:8080\nUser or password incorrect\n\n```", "```go\nRequest URI: /\nHost: localhost:8080\nContent Length: 0\nMethod: GET\n\n```", "```go\n$ curl -u packt:publishing http://localhost:8080\nHello Decorator!\n\n```"]