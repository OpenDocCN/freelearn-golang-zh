- en: Objectives
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目标
- en: You use Facade when you want to hide the complexity of some tasks, especially
    when most of them share utilities (such as authentication in an API). A library
    is a form of facade, where someone has to provide some methods for a developer
    to do certain things in a friendly way. This way, if a developer needs to use
    your library, he doesn't need to know all the inner tasks to retrieve the result
    he/she wants.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想要隐藏某些任务的复杂性时，特别是当大多数任务共享一些实用工具（如API中的身份验证）时，你使用外观。库是外观的一种形式，其中某人必须提供一些方法，以便开发者以友好的方式完成某些事情。这样，如果开发者需要使用你的库，他/她不需要知道所有内部任务来获取他/她想要的结果。
- en: 'So, you use the Facade design pattern in the following scenarios:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你可以在以下场景中使用外观设计模式：
- en: When you want to decrease the complexity of some parts of our code. You hide
    that complexity behind the facade by providing a more easy-to-use method.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你想要降低我们代码中某些部分的复杂性时。通过提供更易于使用的方法，你可以在外观后面隐藏这种复杂性。
- en: When you want to group actions that are cross-related in a single place.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你想要将相互关联的操作组合在一个地方时。
- en: When you want to build a library so that others can use your products without
    worrying about how it all works.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你想要构建一个库，以便其他人可以使用你的产品而无需担心它的工作原理。
