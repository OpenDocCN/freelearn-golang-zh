["```go\ntype CurrentWeatherDataRetriever interface { \n  GetByCityAndCountryCode(city, countryCode string) (Weather, error) \n  GetByGeoCoordinates(lat, lon float32) (Weather, error) \n} \n\n```", "```go\ntype Weather struct { \n  ID   int    `json:\"id\"` \n  Name string `json:\"name\"` \n  Cod  int    `json:\"cod\"` \n  Coord struct { \n    Lon float32 `json:\"lon\"` \n    Lat float32 `json:\"lat\"` \n  } `json:\"coord\"`  \n\n  Weather []struct { \n    Id          int    `json:\"id\"` \n    Main        string `json:\"main\"` \n    Description string `json:\"description\"` \n    Icon        string `json:\"icon\"` \n  } `json:\"weather\"` \n\n  Base string `json:\"base\"` \n  Main struct { \n    Temp     float32 `json:\"temp\"` \n    Pressure float32 `json:\"pressure\"` \n    Humidity float32 `json:\"humidity\"` \n    TempMin  float32 `json:\"temp_min\"` \n    TempMax  float32 `json:\"temp_max\"` \n  } `json:\"main\"` \n\n  Wind struct { \n    Speed float32 `json:\"speed\"` \n    Deg   float32 `json:\"deg\"` \n  } `json:\"wind\"` \n\n  Clouds struct { \n    All int `json:\"all\"` \n  } `json:\"clouds\"` \n\n  Rain struct { \n    ThreeHours float32 `json:\"3h\"` \n  } `json:\"rain\"` \n\n  Dt  uint32 `json:\"dt\"` \n  Sys struct { \n    Type    int     `json:\"type\"` \n    ID      int     `json:\"id\"` \n    Message float32 `json:\"message\"` \n    Country string  `json:\"country\"` \n    Sunrise int     `json:\"sunrise\"` \n    Sunset  int     `json:\"sunset\"` \n  }`json:\"sys\"` \n} \n\n```", "```go\n`json:\"something,omitempty\" \n\n```", "```go\ntype CurrentWeatherData struct { \n  APIkey string \n} \n\n```", "```go\n func getMockData() io.Reader { \n  response := `{\n    \"coord\":{\"lon\":-3.7,\"lat\":40.42},\"weather : [{\"id\":803,\"main\":\"Clouds\",\"description\":\"broken clouds\",\"icon\":\"04n\"}],\"base\":\"stations\",\"main\":{\"temp\":303.56,\"pressure\":1016.46,\"humidity\":26.8,\"temp_min\":300.95,\"temp_max\":305.93},\"wind\":{\"speed\":3.17,\"deg\":151.001},\"rain\":{\"3h\":0.0075},\"clouds\":{\"all\":68},\"dt\":1471295823,\"sys\":{\"type\":3,\"id\":1442829648,\"message\":0.0278,\"country\":\"ES\",\"sunrise\":1471238808,\"sunset\":1471288232},\"id\":3117735,\"name\":\"Madrid\",\"cod\":200}` \n\n  r := bytes.NewReader([]byte(response)) \n  return r \n} \n\n```", "```go\nfunc TestOpenWeatherMap_responseParser(t *testing.T) { \n  r := getMockData() \n  openWeatherMap := CurrentWeatherData{APIkey: \"\"} \n\n  weather, err := openWeatherMap.responseParser(r) \n  if err != nil { \n    t.Fatal(err) \n  } \n\n  if weather.ID != 3117735 { \n    t.Errorf(\"Madrid id is 3117735, not %d\\n\", weather.ID) \n  } \n} \n\n```", "```go\nfunc (p *CurrentWeatherData) responseParser(body io.Reader) (*Weather, error) { \n  return nil, fmt.Errorf(\"Not implemented yet\") \n} \n\n```", "```go\ngo test -v -run=responseParser .\n=== RUN   TestOpenWeatherMap_responseParser\n--- FAIL: TestOpenWeatherMap_responseParser (0.00s)\n facade_test.go:72: Not implemented yet\nFAIL\nexit status 1\nFAIL\n\n```"]