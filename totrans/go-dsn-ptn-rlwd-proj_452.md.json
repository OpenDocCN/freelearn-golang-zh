["```go\nfunc (p *CurrentWeatherData) responseParser(body io.Reader) (*Weather, error) { \n  w := new(Weather) \n  err := json.NewDecoder(body).Decode(w) \n  if err != nil { \n    return nil, err \n  } \n\n  return w, nil \n} \n\n```", "```go\ngo test -v -run=responseParser . \n=== RUN   TestOpenWeatherMap_responseParser \n--- PASS: TestOpenWeatherMap_responseParser (0.00s) \nPASS \nok\n\n```", "```go\nfunc (c *CurrentWeatherData) GetByGeoCoordinates(lat, lon float32) (weather *Weather, err error) { \n  return c.doRequest( \n  fmt.Sprintf(\"http://api.openweathermap.org/data/2.5/weather q=%s,%s&APPID=%s\", lat, lon, c.APIkey)) \n} \n\nfunc (c *CurrentWeatherData) GetByCityAndCountryCode(city, countryCode string) (weather *Weather, err error) { \n  return c.doRequest(   \n  fmt.Sprintf(\"http://api.openweathermap.org/data/2.5/weather?lat=%f&lon=%f&APPID=%s\", city, countryCode, c.APIkey) ) \n} \n\n```", "```go\nfmt.Sprintf(\"http://api.openweathermap.org/data/2.5/weather?lat=%f&lon=%f&APPID=%s\", city, countryCode, c.APIkey) \n\n```", "```go\nfunc (o *CurrentWeatherData) doRequest(uri string) (weather *Weather, err error) { \n  client := &http.Client{} \n  req, err := http.NewRequest(\"GET\", uri, nil) \n  if err != nil { \n    return \n  } \n  req.Header.Set(\"Content-Type\", \"application/json\") \n\n```", "```go\nresp, err := client.Do(req) \nif err != nil { \n  return \n} \n\nif resp.StatusCode != 200 { \n  byt, errMsg := ioutil.ReadAll(resp.Body) \n  if errMsg == nil { \n    errMsg = fmt.Errorf(\"%s\", string(byt)) \n  } \n  err = fmt.Errorf(\"Status code was %d, aborting. Error message was:\\n%s\\n\",resp.StatusCode, errMsg) \n\n  return \n} \n\n```", "```go\n  weather, err = o.responseParser(resp.Body) \n  resp.Body.Close() \n\n  return \n} \n\n```"]