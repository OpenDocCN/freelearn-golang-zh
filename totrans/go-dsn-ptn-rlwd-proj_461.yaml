- en: What's the difference between Singleton and Flyweight then?
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那么 Singleton 和 Flyweight 之间的区别是什么呢？
- en: Well, the difference is subtle but it's just there. With the Singleton pattern,
    we ensure that the same type is created only once. Also, the Singleton pattern
    is a Creational pattern. With Flyweight, which is a Structural pattern, we aren't
    worried about how the objects are created, but about how to structure a type to
    contain heavy information in a light way. The structure we are talking about is
    the `map[int]*Team` structure in our example. Here, we really didn't care about
    how we created the object; we have simply written an uncomplicated the `getTeamFactory` method
    for it. We gave major importance to having a light structure to hold a shareable
    object (or objects), in this case, the map.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，区别很微妙，但确实存在。使用 Singleton 模式，我们确保同一类型只被创建一次。此外，Singleton 模式是一种创建型模式。而 Flyweight，它是一种结构型模式，我们并不关心对象的创建方式，而是关注如何以轻量级的方式组织一个类型以包含大量信息。我们所说的结构是在我们的例子中的
    `map[int]*Team` 结构。在这里，我们实际上并不关心对象的创建方式；我们只是简单地为它编写了一个简单的 `getTeamFactory` 方法。我们非常重视拥有一个轻量级结构来持有可共享的对象（或对象），在这种情况下，是地图。
