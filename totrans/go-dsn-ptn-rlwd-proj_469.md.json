["```go\ntype PrintStrategy interface { \n  Print() error \n} \n\n```", "```go\ntype ConsoleSquare struct {} \n\ntype ImageSquare struct { \n  DestinationFilePath string \n} \n\n```", "```go\nfunc(c *ConsoleSquare) Print() error { \n  println(\"Square\")  \n  return nil \n} \n\n```", "```go\nfunc (t *ImageSquare) Print() error { \n  width := 800 \n  height := 600 \n\n  origin := image.Point{0, 0} \n\n  bgImage := image.NewRGBA(image.Rectangle{ \n    Min: origin, \n    Max: image.Point{X: width, Y: height}, \n  }) \n\n  bgColor := image.Uniform{color.RGBA{R: 70, G: 70, B: 70, A:0}} \n  quality := &jpeg.Options{Quality: 75} \n\n  draw.Print(bgImage, bgImage.Bounds(), &bgColor, origin, draw.Src) \n\n```", "```go\n  squareWidth := 200 \n  squareHeight := 200 \n  squareColor := image.Uniform{color.RGBA{R: 255, G: 0, B: 0, A: 1}} \n  square := image.Rect(0, 0, squareWidth, squareHeight) \n  square = square.Add(image.Point{ \n    X: (width / 2) - (squareWidth / 2), \n    Y: (height / 2) - (squareHeight / 2), \n  }) \n  squareImg := image.NewRGBA(square) \n\n  draw.Print(bgImage, squareImg.Bounds(), &squareColor, origin, draw.Src) \n\n```", "```go\n  w, err := os.Create(t.DestinationFilePath) \n  if err != nil { \n    return fmt.Errorf(\"Error opening image\") \n  } \n  defer w.Close() \n\n  if err = jpeg.Encode(w, bgImage, quality); err != nil { \n    return fmt.Errorf(\"Error writing image to disk\") \n  } \n\n  return nil \n} \n\n```", "```go\nvar output = flag.String(\"output\", \"console\", \"The output to use between 'console' and 'image' file\") \n\n```", "```go\nfunc main(){ \n    flag.Parse() \n\n```", "```go\nvar activeStrategy PrintStrategy \n\nswitch *output { \ncase \"console\": \n  activeStrategy = &TextSquare{} \ncase \"image\": \n  activeStrategy = &ImageSquare{\"/tmp/image.jpg\"} \ndefault: \n  activeStrategy = &TextSquare{} \n} \n\n```", "```go\n  err := activeStrategy.Print() \n  if err != nil { \n    log.Fatal(err) \n  } \n}\n\n```", "```go\n$ go run main.go --output=console\nSquare\n\n```", "```go\n$ go run main.go --output=console\nSquare\n$ go run main.go --output console\nSquare\n$ go run main.go\nSquare\n\n```", "```go\n$ go run main.go --output image\n\n```"]