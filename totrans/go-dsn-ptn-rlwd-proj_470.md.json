["```go\ntype PrintStrategy interface { \n  Print() error \n  SetLog(io.Writer) \n  SetWriter(io.Writer) \n} \n\n```", "```go\ntype PrintOutput struct { \n  Writer    io.Writer \n  LogWriter io.Writer \n} \n\nfunc(d *PrintOutput) SetLog(w io.Writer) { \n  d.LogWriter = w \n} \n\nfunc(d *PrintOutput) SetWriter(w io.Writer) { \n  d.Writer = w \n} \n\n```", "```go\npackage shapes \n\ntype TextSquare struct { \n  strategy.PrintOutput \n} \n\n```", "```go\nfunc (t *TextSquare) Print() error { \n  r := bytes.NewReader([]byte(\"Circle\")) \n  io.Copy(t.Writer, r) \n  return nil \n} \n\n```", "```go\nfunc (t *TextSquare) Print() error { \n  t.Writer.Write([]byte(\"Circle\")) \n  return nil \n} \n\n```", "```go\ntype ImageSquare struct { \n  strategy.PrintOutput \n} \n\n```", "```go\ndraw.Print(bgImage, squareImg.Bounds(), &squareColor, origin, draw.Src) \n\nif i.Writer == nil { \n  return fmt.Errorf(\"No writer stored on ImageSquare\") \n} \nif err := jpeg.Encode(i.Writer, bgImage, quality); err != nil { \n  return fmt.Errorf(\"Error writing image to disk\") \n} \n\nif i.LogWriter != nil { \n  io.Copy(i.LogWriter, \"Image written in provided writer\\n\") \n} \n\nreturn nil \n\n```", "```go\nconst ( \n  TEXT_STRATEGY  = \"text\" \n  IMAGE_STRATEGY = \"image\" \n) \n\nfunc NewPrinter(s string) (strategy.Output, error) { \n  switch s { \n  case TEXT_STRATEGY: \n    return &TextSquare{ \n      PrintOutput: strategy.PrintOutput{ \n        LogWriter: os.Stdout, \n      }, \n    }, nil \n  case IMAGE_STRATEGY: \n    return &ImageSquare{ \n      PrintOutput: strategy.PrintOutput{ \n        LogWriter: os.Stdout, \n      }, \n    }, nil \n  default: \n    return nil, fmt.Errorf(\"Strategy '%s' not found\\n\", s) \n  } \n} \n\n```", "```go\nvar output = flag.String(\"output\", \"text\", \"The output to use between \"+ \n  \"'console' and 'image' file\") \n\nfunc main() { \n  flag.Parse() \n\n```", "```go\nactiveStrategy, err := shapes.NewPrinter(*output) \nif err != nil { \n  log.Fatal(err) \n} \n\nlog.Fatal method if any error is found (such as an unrecognized strategy).\n```", "```go\nswitch *output { \ncase shapes.TEXT_STRATEGY: \n  activeStrategy.SetWriter(os.Stdout) \ncase shapes.IMAGE_STRATEGY: \n  w, err := os.Create(\"/tmp/image.jpg\") \n  if err != nil { \n    log.Fatal(\"Error opening image\") \n  } \n  defer w.Close() \n\n  activeStrategy.SetWriter(w) \n} \n\n```", "```go\nerr = activeStrategy.Print() \nif err != nil { \n  log.Fatal(err) \n} \n\n```", "```go\n$ go run main.go --output text\nCircle\n\n```", "```go\n$ go run main.go --output image\nImage written in provided writer\n\n```"]