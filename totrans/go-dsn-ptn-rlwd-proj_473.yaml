- en: Description
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 描述
- en: The single responsibility principle implies that a type, function, method, or
    any similar abstraction must have one single responsibility only and it must do
    it quite well. This way, we can apply many functions that achieve one specific
    thing each to some struct, slice, map, and so on.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 单一职责原则意味着一个类型、函数、方法或任何类似的抽象必须只有一个单一职责，并且它必须做得相当好。这样，我们可以将许多实现特定功能的函数应用到某些结构体、切片、映射等中。
- en: When we apply many of these abstractions in a logical way very often, we can
    chain them to execute in order such as, for example, a logging chain.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们以逻辑方式非常频繁地应用这些抽象时，我们可以将它们链接起来按顺序执行，例如，比如日志链。
- en: A logging chain is a set of types that logs the output of some program to more
    than one `io.Writer` interface. We could have a type that logs to the console,
    a type that logs to a file, and a type that logs to a remote server. You can make
    three calls every time you want to do some logging, but it's more elegant to make
    only one and provoke a chain reaction.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 日志链是一组类型，它将某个程序的输出记录到多个`io.Writer`接口中。我们可以有一个将日志输出到控制台的类型，一个将日志输出到文件的类型，以及一个将日志输出到远程服务器的类型。每次你想进行日志记录时，你可以进行三次调用，但只进行一次并引发连锁反应会更优雅。
- en: But also, we could have a chain of checks and, in case one of them fails, break
    the chain and return something. This is the authentication and authorization middleware
    works.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以有一个检查链，如果其中一个检查失败，就断开链并返回一些内容。这就是身份验证和授权中间件的工作方式。
