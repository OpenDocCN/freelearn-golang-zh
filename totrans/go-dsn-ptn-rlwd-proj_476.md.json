["```go\ntype ChainLogger interface { \n  Next(string) \n} \n\n```", "```go\ntype FirstLogger struct { \n  NextChain ChainLogger \n} \n\nfunc (f *FirstLogger) Next(s string) {} \n\ntype SecondLogger struct { \n  NextChain ChainLogger \n} \n\nfunc (f *SecondLogger) Next(s string) {} \n\ntype WriterLogger struct { \n  NextChain ChainLogger \n  Writer    io.Writer \n} \nfunc (w *WriterLogger) Next(s string) {} \n\n```", "```go\ntype myTestWriter struct { \n  receivedMessage string \n} \n\nfunc (m *myTestWriter) Write(p []byte) (int, error) { \n  m.receivedMessage += string(p) \n  return len(p), nil \n} \n\nfunc(m *myTestWriter) Next(s string){ \n  m.Write([]byte(s)) \n} \n\n```", "```go\nfunc TestCreateDefaultChain(t *testing.T) { \n  //Our test ChainLogger \n  myWriter := myTestWriter{} \n\n  writerLogger := WriterLogger{Writer: &myWriter} \n  second := SecondLogger{NextChain: &writerLogger} \n  chain := FirstLogger{NextChain: &second} \n\n```", "```go\nt.Run(\"3 loggers, 2 of them writes to console, second only if it founds \" + \n  \"the word 'hello', third writes to some variable if second found 'hello'\", \n  func(t *testing.T){ \n    chain.Next(\"message that breaks the chain\\n\") \n\n    if myWriter.receivedMessage != \"\" { \n      t.Fatal(\"Last link should not receive any message\") \n    } \n\n    chain.Next(\"Hello\\n\") \n\n    if !strings.Contains(myWriter.receivedMessage, \"Hello\") { \n      t.Fatal(\"Last link didn't received expected message\") \n    } \n}) \n\n```", "```go\ngo test -v .\n=== RUN   TestCreateDefaultChain\n=== RUN   TestCreateDefaultChain/3_loggers,_2_of_them_writes_to_console,_second_only_if_it_founds_the_word_'hello',_third_writes_to_some_variable_if_second_found_'hello'\n--- FAIL: TestCreateDefaultChain (0.00s)\n--- FAIL: TestCreateDefaultChain/3_loggers,_2_of_them_writes_to_console,_second_only_if_it_founds_the_word_'hello',_third_writes_to_some_variable_if_second_found_'hello' (0.00s)\n chain_test.go:33: Last message didn't received expected message\nFAIL\nexit status 1\nFAIL\n\n```", "```go\ntype myTestWriter struct { \n  receivedMessage *string \n} \n\nfunc (m *myTestWriter) Write(p []byte) (int, error) { \n  if m.receivedMessage == nil { \n         m.receivedMessage = new(string) \n} \n  tempMessage := fmt.Sprintf(\"%s%s\", m.receivedMessage, p) \n  m.receivedMessage = &tempMessage \n  return len(p), nil \n} \n\nfunc (m *myTestWriter) Next(s string) { \n  m.Write([]byte(s)) \n} \n\n```", "```go\nt.Run(\"3 loggers, 2 of them writes to console, second only if it founds \"+ \n\"the word 'hello', third writes to some variable if second found 'hello'\", \nfunc(t *testing.T) { \n  chain.Next(\"message that breaks the chain\\n\") \n\n  if myWriter.receivedMessage != nil { \n    t.Error(\"Last link should not receive any message\") \n  } \n\n  chain.Next(\"Hello\\n\") \n\n  if myWriter.receivedMessage == \"\" || !strings.Contains(*myWriter.receivedMessage, \"Hello\") { \n    t.Fatal(\"Last link didn't received expected message\") \n  } \n}) \n\n```", "```go\ngo test -v . \n=== RUN   TestCreateDefaultChain \n=== RUN   TestCreateDefaultChain/3_loggers,_2_of_them_writes_to_console,_second_only_if_it_founds_the_word_'hello',_third_writes_to_some_variable_if_second_found_'hello' \n--- FAIL: TestCreateDefaultChain (0.00s) \n--- FAIL: TestCreateDefaultChain/3_loggers,_2_of_them_writes_to_console,_second_only_if_it_founds_the_word_'hello',_third_writes_to_some_variable_if_second_found_'hello' (0.00s) \n        chain_test.go:40: Last link didn't received expected message \nFAIL \nexit status 1 \nFAIL\n\n```"]