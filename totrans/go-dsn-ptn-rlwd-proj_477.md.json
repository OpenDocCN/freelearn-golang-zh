["```go\ntype FirstLogger struct { \n  NextChain ChainLogger \n} \n\nfunc (f *FirstLogger) Next(s string) { \n  fmt.Printf(\"First logger: %s\\n\", s) \n\n  if f.NextChain != nil { \n    f.NextChain.Next(s) \n  } \n} \n\n```", "```go\ntype SecondLogger struct { \n  NextChain ChainLogger \n} \n\nfunc (se *SecondLogger) Next(s string) { \n  if strings.Contains(strings.ToLower(s), \"hello\") { \n    fmt.Printf(\"Second logger: %s\\n\", s) \n\n    if se.NextChain != nil { \n      se.NextChain.Next(s) \n    } \n\n    return \n  } \n\n  fmt.Printf(\"Finishing in second logging\\n\\n\") \n} \n\n```", "```go\ntype WriterLogger struct { \n  NextChain ChainLogger \n  Writer    io.Writer \n} \n\nfunc (w *WriterLogger) Next(s string) { \n  if w.Writer != nil { \n    w.Writer.Write([]byte(\"WriterLogger: \" + s)) \n  } \n\n  if w.NextChain != nil { \n    w.NextChain.Next(s) \n  } \n} \n\n```", "```go\ngo test -v .\n=== RUN   TestCreateDefaultChain\n=== RUN   TestCreateDefaultChain/3_loggers,_2_of_them_writes_to_console,_second_only_if_it_founds_the_word_'hello',_third_writes_to_some_variable_if_second_found_'hello'\nFirst logger: message that breaks the chain\nFinishing in second logging\nFirst logger: Hello\nSecond logger: Hello\n--- PASS: TestCreateDefaultChain (0.00s)\n --- PASS: TestCreateDefaultChain/3_loggers,_2_of_them_writes_to_console,_second_only_if_it_founds_the_word_'hello',_third_writes_to_some_variable_if_second_found_'hello' (0.00s)\nPASS\nok\n\n```"]