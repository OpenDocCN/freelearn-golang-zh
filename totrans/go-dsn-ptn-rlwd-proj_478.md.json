["```go\ntype ClosureChain struct { \n  NextChain ChainLogger \n  Closure   func(string) \n} \n\nfunc (c *ClosureChain) Next(s string) { \n  if c.Closure != nil { \n    c.Closure(s) \n  } \n\n  if c.NextChain != nil { \n    c.Next(s) \n  } \n} \n\n```", "```go\nt.Run(\"2 loggers, second uses the closure implementation\", func(t *testing.T) { \n  myWriter = myTestWriter{} \n  closureLogger := ClosureChain{ \n    Closure: func(s string) { \n      fmt.Printf(\"My closure logger! Message: %s\\n\", s) \n      myWriter.receivedMessage = &s \n    }, \n  } \n\n  writerLogger.NextChain = &closureLogger \n\n  chain.Next(\"Hello closure logger\") \n\n  if *myWriter.receivedMessage != \"Hello closure logger\" { \n    t.Fatal(\"Expected message wasn't received in myWriter\") \n  } \n}) \n\n```", "```go\ngo test -v . \n=== RUN   TestCreateDefaultChain \n=== RUN   TestCreateDefaultChain/3_loggers,_2_of_them_writes_to_console,_second_only_if_it_founds_the_word_'hello',_third_writes_to_some_variable_if_second_found_'hello' \nFirst logger: message that breaks the chain \nFinishing in second logging \n\nFirst logger: Hello \nSecond logger: Hello \n=== RUN   TestCreateDefaultChain/2_loggers,_second_uses_the_closure_implementation \nFirst logger: Hello closure logger \nSecond logger: Hello closure logger \nMy closure logger! Message: Hello closure logger \n--- PASS: TestCreateDefaultChain (0.00s) \n    --- PASS: TestCreateDefaultChain/3_loggers,_2_of_them_writes_to_console,_second_only_if_it_founds_the_word_'hello',_third_writes_to_some_variable_if_second_found_'hello' (0.00s) \n    --- PASS: TestCreateDefaultChain/2_loggers,_second_uses_the_closure_implementation (0.00s) \nPASS \nok\n\n```"]