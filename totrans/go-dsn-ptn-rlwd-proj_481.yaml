- en: Description
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Command design pattern is quite similar to the Strategy design pattern but
    with key differences. While in the strategy pattern we focus on changing algorithms,
    in the Command pattern, we focus on the invocation of something or on the abstraction
    of some type.
  prefs: []
  type: TYPE_NORMAL
- en: A Command pattern is commonly seen as a container. You put something like the
    info for user interaction on a UI that could be `click on login` and pass it as
    a command. You don't need to have the complexity related toÂ the `click on login`
    action in the command but simply the action itself.
  prefs: []
  type: TYPE_NORMAL
- en: An example for the organic world would be a box for a delivery company. We can
    put anything on it but, as a delivery company, we are interested in managing the
    box instead of its contents directly.
  prefs: []
  type: TYPE_NORMAL
- en: The command pattern will be used heavily when dealing with channels. With channels
    you can send any message through it but, if we need a response from the receiving
    side of the channel, a common approach is to create a command that has a second,
    response channel attached where we are listening.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, a good example would be a multi-player video game, where every stroke
    of each user can be sent as commands to the rest of the users through the network.
  prefs: []
  type: TYPE_NORMAL
