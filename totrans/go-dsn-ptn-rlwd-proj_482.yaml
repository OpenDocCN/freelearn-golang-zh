- en: Objectives
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目标
- en: 'When using the Command design pattern, we are trying to encapsulate some sort
    of action or information in a light package that must be processed somewhere else.
    It''s similar to the Strategy pattern but, in fact, a Command could trigger a
    preconfigured Strategy somewhere else, so they are not the same. The following
    are the objectives for this design pattern:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用命令设计模式时，我们试图将某种动作或信息封装在一个轻量级的包中，这个包必须在其他地方被处理。它与策略模式类似，但实际上命令可以在其他地方触发一个预配置的策略，因此它们并不相同。以下是这个设计模式的目标：
- en: Put some information into a box. Just the receiver will open the box and know
    its contents.
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将一些信息放入一个盒子。只有接收者会打开盒子并知道其内容。
- en: Delegate some action somewhere else.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将某些动作委托给其他地方。
- en: 'The behavior is also explained in the following diagram:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 行为也在以下图中进行了说明：
- en: '![Objectives](img/00034.jpeg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![目标](img/00034.jpeg)'
- en: There we have a **Command** interface with a **Get() interface{}** method. We
    have a type **A** and a type **B**. The idea is that **A** and **B** implement
    the **Command** interface to return themselves as an `interface{}`. As now they
    implement **Command**, they can be used in a **Command handler** which doesn't
    care very much about the underlying type. Now **A** and **B** can travel through
    functions that handles commands or store Commands freely. But **B** handler can
    take an object from any **Command** handler to "unwrap" it and take its **B**
    content as well as **A** command handler with its `A` content.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '在这里，我们有一个**命令**接口，它有一个**Get() interface{}**方法。我们有类型**A**和类型**B**。想法是**A**和**B**实现**命令**接口，以返回自身作为一个`interface{}`。既然它们实现了**命令**，它们就可以在**命令处理者**中使用，而处理者并不关心底层类型。现在**A**和**B**可以自由地通过处理命令的函数或存储命令。但是**B**处理者可以从任何**命令处理者**中取一个对象来“展开”它，并获取其**B**内容以及带有其`A`内容的**A**命令处理者。 '
- en: We put the information in a box (the **Command**) and delegate what to do with
    it to the handlers of Commands.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将信息放入一个盒子（即**命令**）中，并将处理它的任务委托给命令的处理者。
