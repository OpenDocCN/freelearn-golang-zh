- en: Objectives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When using the Command design pattern, we are trying to encapsulate some sort
    of action or information in a light package that must be processed somewhere else.
    It''s similar to the Strategy pattern but, in fact, a Command could trigger a
    preconfigured Strategy somewhere else, so they are not the same. The following
    are the objectives for this design pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: Put some information into a box. Just the receiver will open the box and know
    its contents.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delegate some action somewhere else.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The behavior is also explained in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Objectives](img/00034.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: There we have a **Command** interface with a **Get() interface{}** method. We
    have a type **A** and a type **B**. The idea is that **A** and **B** implement
    the **Command** interface to return themselves as an `interface{}`. As now they
    implement **Command**, they can be used in a **Command handler** which doesn't
    care very much about the underlying type. Now **A** and **B** can travel through
    functions that handles commands or store Commands freely. But **B** handler can
    take an object from any **Command** handler to "unwrap" it and take its **B**
    content as well as **A** command handler with its `A` content.
  prefs: []
  type: TYPE_NORMAL
- en: We put the information in a box (the **Command**) and delegate what to do with
    it to the handlers of Commands.
  prefs: []
  type: TYPE_NORMAL
