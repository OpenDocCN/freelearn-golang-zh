["```go\ntype Command interface { \n  Execute() \n} \n\n```", "```go\ntype ConsoleOutput struct { \n  message string \n} \n\nfunc (c *ConsoleOutput) Execute() { \n  fmt.Println(c.message) \n} \n\n```", "```go\n func CreateCommand(s string) Command { \n   fmt.Println(\"Creating command\") \n\n   return &ConsoleOutput{ \n         message: s, \n   } \n} \n\n```", "```go\ntype CommandQueue struct { \n  queue []Command \n} \n\nfunc (p *CommandQueue) AddCommand(c Command) { \n  p.queue = append(p.queue, c) \n\n  if len(p.queue) == 3 { \n    for _, command := range p.queue { \n      command.Execute() \n    } \n\n    p.queue = make([]Command, 3) \n  } \n} \n\n```", "```go\nfunc main() { \n  queue := CommandQueue{} \n\n  queue.AddCommand(CreateCommand(\"First message\")) \n  queue.AddCommand(CreateCommand(\"Second message\")) \n  queue.AddCommand(CreateCommand(\"Third message\")) \n\n  queue.AddCommand(CreateCommand(\"Fourth message\")) \n  queue.AddCommand(CreateCommand(\"Fifth message\")) \n} \n\n```", "```go\n$go run command.go\nCreating command\nCreating command\nCreating command\nFirst message\nSecond message\nThird message\nCreating command\nCreating command\n\n```"]