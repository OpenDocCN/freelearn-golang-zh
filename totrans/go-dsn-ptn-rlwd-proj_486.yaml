- en: More examples
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多示例
- en: The previous example shows how to use a Command handler that executes the content
    of the command. But a common way to use a Command pattern is to delegate the information,
    instead of the execution, to a different object.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的示例展示了如何使用执行命令内容的命令处理器。但使用命令模式的一种常见方式是将信息委托给不同的对象，而不是执行。
- en: 'For example, instead of printing to the console, we will create a command that
    extracts information:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们不会将信息打印到控制台，而是创建一个命令来提取信息：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this case, our `Command` interface will have a method named `Info` that
    will retrieve some information from its implementor. We will create two implementations;
    one will return the time passed since the creation of the command to its execution:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们的`Command`接口将有一个名为`Info`的方法，该方法将从其实现者中检索一些信息。我们将创建两个实现；一个将返回自命令创建到执行所经过的时间：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `time.Since` function returns the time elapsed since the time stored in
    the provided parameter. We returned the string representation of the passed time
    by calling the `String()` method on the `time.Time` type. The second implementation
    of our new `Command` will return the message `Hello World!`:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`time.Since`函数返回自提供的参数存储的时间以来经过的时间。我们通过在`time.Time`类型上调用`String()`方法来返回传递时间的字符串表示。我们新`Command`的第二个实现将返回消息`Hello
    World!`：'
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And our `main` function will simply create an instance of each type, then waits
    for a second and print the info returned from each `Command`:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`main`函数将简单地创建每种类型的实例，然后等待一秒钟，并打印出每个`Command`返回的信息：
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `time.Sleep` function stops the execution of the current goroutine for the
    specified period (a second). So, to recall--the `timeCommand` variable stores
    the time when the program was started and its `Info()` method returns a string
    representation of the time that passed since we give a value to the type to the
    moment were we called the `Info()` method on it. The `helloCommand` variable returns
    the message `Hello World!` when we call its `Info()` method. Here we haven't implemented
    a `Command` handler again to keep things simple but we can consider the console
    as the handler because we can only print ASCII characters on it like the ones
    retrieved by the `Info()` method.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`time.Sleep`函数停止当前goroutine的执行指定的时间（一秒钟）。所以，回想一下——`timeCommand`变量存储了程序开始的时间，它的`Info()`方法返回自我们给类型赋值到调用该`Info()`方法的时间所经过的时间的字符串表示。`helloCommand`变量在调用其`Info()`方法时返回消息`Hello
    World!`。在这里我们没有再次实现`Command`处理器以保持简单，但我们可以将控制台视为处理器，因为我们只能在其上打印ASCII字符，就像通过`Info()`方法检索到的那些字符一样。'
- en: 'Let''s run the `main` function:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行`main`函数：
- en: '[PRE4]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here we are. In this case, we retrieve some information by using the Command
    pattern. One type stores `time` information while the other stores nothing and
    it simply returns the same simple string. Each time we run the `main` function
    will return a different elapsed time, so don't worry if the time doesn't match
    with the one in the example.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们就是。在这种情况下，我们通过使用命令模式来检索一些信息。一种类型存储`时间`信息，而另一种则不存储任何信息，它简单地返回相同的简单字符串。每次运行`main`函数都会返回不同的经过时间，所以如果时间与示例中的时间不匹配，请不要担心。
