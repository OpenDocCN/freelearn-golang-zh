- en: Summary
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have taken our first steps in the Behavioral patterns. The objective of this
    chapter was to introduce the reader to the concept of algorithm and execution
    encapsulation using proper interfaces and structures. With the strategy, we have
    encapsulated algorithms, with the chain of responsibility handlers and with the
    Command design pattern executions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在行为模式方面迈出了第一步。本章的目标是向读者介绍使用适当的接口和结构来封装算法和执行的概念。通过这种策略，我们已经封装了算法，通过责任链处理器，以及通过命令设计模式执行。
- en: Now, with the knowledge we have acquired about the strategy pattern, we can
    uncouple heavily our applications from their algorithms, just for testing, this
    is a very useful feature to inject mocks in different types that would be almost
    impossible to test. But also for anything that could need different approaches
    based on some context (such as shorting a list; some algorithms perform better
    depending on the distribution of the list).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，随着我们对策略模式的了解，我们可以将我们的应用程序与其算法高度解耦，仅用于测试，这是一个非常有用的功能，可以在不同类型中注入模拟，这在测试中几乎是不可能的。但这也适用于任何可能需要根据某些上下文采取不同方法的情况（例如，对列表进行排序；某些算法的性能取决于列表的分布）。
- en: The Chain of Responsibility pattern opens the door of middleware of any type
    and plugin-like libraries to improve the functionality of some part. Many open
    source projects uses a Chain of Responsibility to handler HTTP requests and responses
    to extract information to the end user (such as cookies info) or check authentication
    details (I'll let you pass to the next link only if I have you on my database).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 责任链模式为任何类型的中间件和插件式库打开了大门，以改进某些部分的功能。许多开源项目使用责任链来处理HTTP请求和响应，以便提取信息传递给最终用户（例如，cookie信息）或检查认证细节（只有当我在我的数据库中有你的记录时，我才会让你通过到下一个链接）。
- en: Finally, the Command pattern is the most common pattern for UI handling but
    also very useful in many other scenarios where we need some type of handling between
    many unrelated types that are travelling through the code (such as a message passed
    through a channel).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，命令模式是最常见的用于UI处理的模式，但在许多其他场景中也非常有用，在这些场景中，我们需要在许多不相关的类型之间进行某种类型的处理，这些类型正在代码中传递（例如，通过通道传递的消息）。
