- en: Description
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While with the Strategy pattern we were encapsulating algorithm implementation
    in different strategies, with the Template pattern we will try to achieve something
    similar but with just part of the algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: The Template design pattern lets the user write a part of an algorithm while
    the rest is executed by the abstraction. This is common when creating libraries
    to ease in some complex task or when reusability of some algorithm is compromised
    by only a part of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine, for example, that we have a long transaction of HTTP requests. We
    have to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Authenticate user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Authorize him.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Retrieve some details from a database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make some modification.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Send the details back in a new request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It wouldn't make sense to repeat steps 1 to 5 in the user's code every time
    he needs to modify something on the database. Instead, steps 1, 2, 3, and 5 will
    be abstracted in the same algorithm that receives an interface with whatever the
    fifth step needs to finish the transaction. It doesn't need to be a interface
    either, it could be a callback.
  prefs: []
  type: TYPE_NORMAL
