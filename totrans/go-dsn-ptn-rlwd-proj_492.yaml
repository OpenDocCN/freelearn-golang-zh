- en: Description
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 描述
- en: While with the Strategy pattern we were encapsulating algorithm implementation
    in different strategies, with the Template pattern we will try to achieve something
    similar but with just part of the algorithm.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用策略模式时，我们正在封装不同的策略中的算法实现，而使用模板模式，我们将尝试实现类似的功能，但只是算法的一部分。
- en: The Template design pattern lets the user write a part of an algorithm while
    the rest is executed by the abstraction. This is common when creating libraries
    to ease in some complex task or when reusability of some algorithm is compromised
    by only a part of it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 模板设计模式允许用户编写算法的一部分，而其余部分由抽象执行。这在创建库以简化某些复杂任务或当算法的复用性仅由其中一部分构成时很常见。
- en: 'Imagine, for example, that we have a long transaction of HTTP requests. We
    have to perform the following steps:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们有一个长事务的HTTP请求。我们必须执行以下步骤：
- en: Authenticate user.
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证用户身份。
- en: Authorize him.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 授权他。
- en: Retrieve some details from a database.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从数据库中检索一些详细信息。
- en: Make some modification.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进行一些修改。
- en: Send the details back in a new request.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的请求中发送详细信息。
- en: It wouldn't make sense to repeat steps 1 to 5 in the user's code every time
    he needs to modify something on the database. Instead, steps 1, 2, 3, and 5 will
    be abstracted in the same algorithm that receives an interface with whatever the
    fifth step needs to finish the transaction. It doesn't need to be a interface
    either, it could be a callback.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户的代码中每次需要修改数据库上的内容时重复步骤1到5是没有意义的。相反，步骤1、2、3和5将被抽象到同一个算法中，该算法接收一个接口，无论第五步需要完成什么交易。它也不需要是一个接口，它也可以是一个回调。
