- en: Unit tests for the simple algorithm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will focus on testing the public methods only. This is a very common approach.
    All in all, if your private methods aren''t called from some level of the public
    ones, they aren''t called at all. We need two interfaces here, one for the Template
    implementors and one for the abstract step of the algorithm:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'A Template implementor will accept a `MessageRetriever` interface to execute
    as part of its execution algorithm. We need a type that implements this interface
    called `Template`, we will call it `TemplateImpl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'So our first test checks the fourth and fifth acceptance criteria. We will
    create the `TestStruct` type that implements the `MessageRetriever` interface
    returning the string `world` and has embedded the Template so that it can call
    the `ExecuteAlgorithm` method. It will act as the Template and the abstraction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: First, we will define the `TestStruct` type. In this case, the part of the algorithm
    deferred to us is going to return the `world` text. This is the string we will
    look for later in the test doing a check of type "is the word `world` present
    on this string?".
  prefs: []
  type: TYPE_NORMAL
- en: Take a close look, the `TestStruct` embeds a type called `Template` which represents
    the Template pattern of our algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we implement the `Message()` method, we are implicitly implementing the
    `MessageRetriever` interface. So now we can use `TestStruct` type as a pointer
    to a `MessageRetriever` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the test, we will use the type we have just created. When we call the `ExecuteAlgorithm`
    method, we need to pass the `MessageRetriever` interface. As the `TestStruct`
    type also implements the `MessageRetriever` interface, we can pass it as an argument,
    but this is not mandatory, of course.
  prefs: []
  type: TYPE_NORMAL
- en: The result of the `ExecuteAlgorithm` method, as defined in the fifth acceptance
    criterion, must return a string that contains the returned value of the `first()` method,
    the returned value of `TestStruct` (the `world` string) and the returned value
    of the `third()` method separated by a space. Our implementation is on the second
    place; that's why we checked that a space is prefixed and suffixed on the string
    `world`.
  prefs: []
  type: TYPE_NORMAL
- en: So, if the returned string, when calling the `ExecuteAlgorithm` method, doesn't
    contain the string `world`, the test fails.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is enough to make the project compile and run the tests that should fail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Time to pass to the implementation of this pattern.
  prefs: []
  type: TYPE_NORMAL
