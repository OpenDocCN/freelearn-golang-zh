- en: Implementing the Template pattern
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现模板模式
- en: 'As defined in the acceptance criteria, we have to return the string `hello`
    in the `first()` method and the string `template` in the `third()` method. That''s
    pretty easy to implement:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 根据验收标准定义，我们必须在 `first()` 方法中返回字符串 `hello`，在 `third()` 方法中返回字符串 `template`。这很容易实现：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: With this implementation, we should be covering the *second* and *third* acceptance
    criteria and partially covering the *first* criterion (each step in the algorithm
    must return a string).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种实现，我们应该覆盖第二个和第三个验收标准，并部分覆盖第一个标准（算法的每一步必须返回一个字符串）。
- en: 'To cover the *fifth* acceptance criterion, we define an `ExecuteAlgorithm`
    method that accepts the `MessageRetriever` interface as argument and returns the
    full algorithm: a single string done by joining the strings returned by the `first()`,
    `Message() string` and `third()` methods:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了覆盖第五个验收标准，我们定义了一个 `ExecuteAlgorithm` 方法，它接受 `MessageRetriever` 接口作为参数，并返回完整的算法：通过连接
    `first()`、`Message()` 字符串和 `third()` 方法返回的字符串组成的单个字符串：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `strings.Join` function has the following signature:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`strings.Join` 函数具有以下签名：'
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It takes an array of strings and joins them, placing the second argument between
    each item in the array. In our case, we create a string array on the fly to pass
    it as the first argument. Then we pass a whitespace as the second argument.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 它接受一个字符串数组并将它们连接起来，在数组的每个项目之间放置第二个参数。在我们的情况下，我们动态创建一个字符串数组并将其作为第一个参数传递。然后我们传递一个空格作为第二个参数。
- en: 'With this implementation, the tests must be passing already:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种实现，测试必须已经通过：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The tests passed. The test has checked that the string `world` is present in
    the returned result, which is the `hello world template` message. The `hello` text
    was the string returned by the `first()` method, the `world` string was returned
    by our `MessageRetriever` implementation, and `template` was the string returned
    by the `third()` method. The whitespaces are inserted by Go's `strings.Join` function.
    But any use of the `TemplateImpl.ExecuteAlgorithm` type will always return "hello
    [something] template" in its result.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 测试通过了。测试检查了返回结果中是否存在字符串 `world`，这是 `hello world template` 消息。`hello` 文本是由 `first()`
    方法返回的字符串，`world` 字符串是由我们的 `MessageRetriever` 实现返回的，而 `template` 是由 `third()` 方法返回的字符串。空格是由
    Go 的 `strings.Join` 函数插入的。但任何使用 `TemplateImpl.ExecuteAlgorithm` 类型的操作都将始终在其结果中返回
    "hello [something] template"。
