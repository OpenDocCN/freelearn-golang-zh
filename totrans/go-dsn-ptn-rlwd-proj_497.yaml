- en: Implementing the Template pattern
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As defined in the acceptance criteria, we have to return the string `hello`
    in the `first()` method and the string `template` in the `third()` method. That''s
    pretty easy to implement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: With this implementation, we should be covering the *second* and *third* acceptance
    criteria and partially covering the *first* criterion (each step in the algorithm
    must return a string).
  prefs: []
  type: TYPE_NORMAL
- en: 'To cover the *fifth* acceptance criterion, we define an `ExecuteAlgorithm`
    method that accepts the `MessageRetriever` interface as argument and returns the
    full algorithm: a single string done by joining the strings returned by the `first()`,
    `Message() string` and `third()` methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The `strings.Join` function has the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: It takes an array of strings and joins them, placing the second argument between
    each item in the array. In our case, we create a string array on the fly to pass
    it as the first argument. Then we pass a whitespace as the second argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this implementation, the tests must be passing already:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The tests passed. The test has checked that the string `world` is present in
    the returned result, which is the `hello world template` message. The `hello` text
    was the string returned by the `first()` method, the `world` string was returned
    by our `MessageRetriever` implementation, and `template` was the string returned
    by the `third()` method. The whitespaces are inserted by Go's `strings.Join` function.
    But any use of the `TemplateImpl.ExecuteAlgorithm` type will always return "hello
    [something] template" in its result.
  prefs: []
  type: TYPE_NORMAL
