- en: Anonymous functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is not the only way to achieve the Template design pattern. We can also
    use an anonymous function to give our implementation to the `ExecuteAlgorithm`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s write a test in the same method that was used previously just after
    the test (marked in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Our new test is called *Using anonymous functions*. We have also extracted the
    checking on the test to an external function to reuse it in this test. We have
    called this function `expectedOrError` because it will fail with an error if the
    expected value isn't received.
  prefs: []
  type: TYPE_NORMAL
- en: In our test, we will create a type called `AnonymousTemplate` that replaces
    the previous `Template` type. The `ExecuteAlgorithm` method of this new type accepts
    the `func()` method `string` type that we can implement directly in the test to
    return the string `world`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `AnonymousTemplate` type will have the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The only difference with the `Template` type is that the `ExecuteAlgorithm`
    method accepts a function that returns a string instead of a `MessageRetriever`
    interface. Let''s run the new test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can read in the output of the test execution, the error is thrown on
    the *Using anonymous functions* test, which is what we were expecting. Now we
    will write the implementation as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The implementation is quite similar to the one in the `Template` type. However,
    now we have passed a function called `f` that we will use as the second item in
    the string array we used on `Join` function. As `f` is simply a function that
    returns a string, the only thing we need to do with it is to execute it in the
    proper place (the second position in the array).
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the tests again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Awesome! Now we know two ways to implement the Template design pattern.
  prefs: []
  type: TYPE_NORMAL
