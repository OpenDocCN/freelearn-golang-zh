- en: How to avoid modifications on the interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The problem of the previous approach is that now we have two templates to maintain
    and we could end duplicating code. What can we do in the situation that we cannot
    change the interface are we using? Our interface was `MessageRetriever` but we
    want to use an anonymous function now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, do you remember the Adapter design pattern? We just have to create an
    `Adapter` type that, accepting a `func() string` type, returns an implementation
    of the `MessageRetriever` interface. We will call this type `TemplateAdapter`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the `TemplateAdapter` type has a field called `myFunc` which
    is of type `func() string`. We have also defined adapter as private because it
    shouldn''t be used without a function defined in the `myFunc` field. We have created
    a public function called the `MessageRetrieverAdapter` to achieve this. Our test
    should look more or less like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Look at the statement where we called the `MessageRetrieverAdapter` method.
    We passed an anonymous function as an argument defined as `func()` string. Then,
    we reuse the previously defined `Template` type from our first test to pass the
    `messageRetriever` variable. Finally, we checked again with the `expectedOrError`
    method. Take a look at the `MessageRetrieverAdapter` method, it will return a
    function that has nil value. If strictly following the test-driven development
    rules, we must do tests first and they must not pass before implementation is
    done. That's why we returned nil on the `MessageRetrieverAdapter` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s run the tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The test fails on *line 39* of the code and it doesn't continue (again, depending
    on how you wrote your code, the line representing your error could be somewhere
    else). We stop test execution because we will need a valid `MessageRetriever`
    interface when we call the `ExecuteAlgorithm` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the implementation of the adapter for our Template pattern, we will start
    with `MessageRetrieverAdapter` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: It's very easy, right? You could be wondering what happens if we pass `nil` value
    for the `f` argument. Well, we will cover this issue by calling the `myFunc` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `adapter` type is finished with this implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When calling the `Message()` function, we check that we actually have something
    stored in the `myFunc` function before calling. If nothing was stored, we return
    an empty string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, our third implementation of the `Template` type, using the Adapter pattern,
    is done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
