- en: Looking for the Template pattern in Go's source code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Sort` package in Go's source code can be considered a Template implementation
    of a sort algorithm. As defined in the package itself, the `Sort` package provides
    primitives for sorting slices and user-defined collections.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we can also find a good example of why Go authors aren''t worried about
    implementing generics. Sorting the lists is maybe the best example of generic
    usage in other languages. The way that Go deals with this is very elegant too-it
    deals with this issue with an interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the interface for lists that need to be sorted by using the `sort`
    package. In the words of Go''s authors:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"A type, typically, is a collection that satisfies sort. Interface can be
    sorted by the routines in this package. The methods require that the elements
    of the collection be enumerated by an integer index."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In other words, write a type that implements this `Interface` so that the `Sort`
    package can be used to sort any slice. The sorting algorithm is the template and
    we must define how to retrieve values in our slice.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we peek in the `sort` package, we can also find an example of how to use
    the sorting template but we will create our own example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: First, we have done a very simple type that stores an `int` list. This could
    be any kind of list, usually a list of some kind of struct. Then we have implemented
    the `sort.Interface` interface by defining the `Len`, `Swap`, and `Less` methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the `main` function creates an unordered list of numbers of the `MyList`
    type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We print the list that we created (unordered) and then we sort it (the `sort.Sort`
    method actually modifies our variable instead of returning a new list so beware!).
    Finally, we print again the resulting list. The console output of this `main`
    method is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `sort.Sort` function has sorted our list in a transparent way. It has a
    lot of code written and delegates `Len`, `Swap` and `Less` methods to an interface,
    like we did in our template delegating to the `MessageRetriever` interface.
  prefs: []
  type: TYPE_NORMAL
