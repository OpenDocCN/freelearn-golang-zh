["```go\ntype Command interface { \n  GetValue() interface{} \n} \n\n```", "```go\ntype Volume byte \n\nfunc (v Volume) GetValue() interface{} { \n  return v \n} \n\ntype Mute bool \n\nfunc (m Mute) GetValue() interface{} { \n  return m \n} \n\n```", "```go\ntype Memento struct { \n  memento Command \n} \n\n```", "```go\ntype originator struct { \n  Command Command \n} \n\nfunc (o *originator) NewMemento() Memento { \n  return Memento{memento: o.Command} \n} \n\nfunc (o *originator) ExtractAndStoreCommand(m Memento) { \n  o.Command = m.memento \n} \n\n```", "```go\ntype careTaker struct { \n  mementoList []Memento \n} \n\nfunc (c *careTaker) Add(m Memento) { \n  c.mementoList = append(c.mementoList, m) \n} \n\nfunc (c *careTaker) Pop() Memento { \n  if len(c.mementoStack) > 0 { \n    tempMemento := c.mementoStack[len(c.mementoStack)-1] \n    c.mementoStack = c.mementoStack[0:len(c.mementoStack)-1] \n    return tempMemento \n  } \n\n  return Memento{} \n} \n\n```", "```go\ntype MementoFacade struct { \n  originator originator \n  careTaker  careTaker \n} \n\nfunc (m *MementoFacade) SaveSettings(s Command) { \n  m.originator.Command = s \n  m.careTaker.Add(m.originator.NewMemento()) \n} \n\nfunc (m *MementoFacade) RestoreSettings(i int) Command { \n  m.originator.ExtractAndStoreCommand(m.careTaker.Memento(i)) \n  return m.originator.Command \n} \n\n```", "```go\nfunc main(){ \n  m := MementoFacade{} \n\n  m.SaveSettings(Volume(4)) \n  m.SaveSettings(Mute(false)) \n\n```", "```go\nfunc assertAndPrint(c Command){ \n  switch cast := c.(type) { \n  case Volume: \n    fmt.Printf(\"Volume:\\t%d\\n\", cast) \n  case Mute: \n    fmt.Printf(\"Mute:\\t%t\\n\", cast) \n  } \n} \n\n```", "```go\nfunc main() { \n  m := MementoFacade{} \n\n  m.SaveSettings(Volume(4)) \n  m.SaveSettings(Mute(false)) \n\n assertAndPrint(m.RestoreSettings(0))\n assertAndPrint(m.RestoreSettings(1)) \n} \n\n```", "```go\n$ go run memento_command.go\nMute:   false\nVolume: 4\n\n```"]