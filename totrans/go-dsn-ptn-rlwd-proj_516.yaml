- en: Unit test of some operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this case, we will only have a public method called `Calculate` that takes
    an operation with its values defined as a string and will return a value or an
    error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'So, we will send a string like `"3 4 +"` to the `Calculate` method and it should
    return *7, nil*. Two tests more will check the correct implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'First, we are going to make the operation we have used as an example. The `3
    4 sum 2 sub` notation is part of our language and we use it in the `Calculate`
    function. If an error is returned, the test fails. Finally, the result must be
    equal to `5` and we check it on the last lines. The next test checks the rest
    of the operators on slightly more complex operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we repeated the preceding process with a longer operation, the *(((5
    - 3) * 8) + 4) / 5* notation which is equal to *4*. From left to right, it would
    be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The test must fail, of course!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
