- en: Complexity with the Interpreter design pattern
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用解释器设计模式的复杂性
- en: In this example, we haven't used any interfaces. This is not exactly how the
    Interpreter design pattern is defined in more object-oriented languages. However,
    this example is the simplest example possible to understand the objectives of
    the language and the next level is inevitably much more complex and not intended
    for beginner users.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们没有使用任何接口。这并不完全符合在更面向对象的语言中定义的解释器设计模式。然而，这个例子是理解语言目标的最简单示例，而下一个层次不可避免地要复杂得多，并不适合初学者使用。
- en: With a more complex example, we will have to define a type containing more types
    of itself, a value, or nothing. With a parser, you create this abstract syntax
    tree to interpret it later.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个更复杂的例子中，我们需要定义一个包含更多自身类型、一个值或什么都没有的类型。使用解析器，你创建这个抽象语法树以供后续解释。
- en: The same example, done by using interfaces, would be as in the following description
    section.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用接口实现的相同示例，将在以下描述部分中展示。
