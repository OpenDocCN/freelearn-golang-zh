- en: Interpreter pattern again - now using interfaces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The main interface we are going to use is called the `Interpreter` interface.
    This interface has a `Read()` method that every symbol (value or operator) must
    implement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We will implement only the sum and the subtraction from the operators and a
    type called `Value` for the numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Value` is a type `int` that, when implementing the `Read` method, just
    returns its value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `operationSum` struct has the `Left` and `Right` fields and its `Read`
    method returns the sum of each of their `Read` methods. The `operationSubtract` struct
    is the same but subtracting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need a Factory pattern to create operators; we will call it the `operatorFactory`
    method. The difference now is that it not only accepts the symbol but also the
    `Left` and `Right` values taken from the stack:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'As we have just mentioned, we also need a stack. We can reuse the one from
    the previous example by changing its type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the stack works with Interpreter pointers instead of `int` but its functionality
    is the same. Finally, our `main` method also looks similar to our previous example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Like before, we check whether the symbol is operator or value first. When it's
    a value, it pushes it into the stack.
  prefs: []
  type: TYPE_NORMAL
- en: When the symbol is an operator, we also take the right and left values from
    the stack, we call the Factory pattern using the current operator and the left
    and right values that we just took from the stack. Once we have the operator type,
    we just need to call its `Read` method to push the returned value to the stack
    too.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, just one example must be left on the stack, so we print it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
