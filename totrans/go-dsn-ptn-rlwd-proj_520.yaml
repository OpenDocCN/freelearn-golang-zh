- en: The power of the Interpreter pattern
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解释器模式的强大之处
- en: This pattern is extremely powerful but it must also be used carefully. To create
    a language, it generates a strong coupling between its users and the functionality
    it provides. One can fall into the error of trying to create a too flexible language
    that is incredibly complex to use and maintain. Also, one can create a fairly
    small and useful language that doesn't interpret correctly sometimes and it could
    be a pain for its users.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式非常强大，但必须谨慎使用。创建一种语言时，它会在用户和它提供的功能之间产生强烈的耦合。人们可能会陷入试图创建一个过于灵活的语言的误区，这种语言使用和维护起来极其复杂。同样，人们可能会创建一个相对较小且有用的语言，但有时它可能无法正确解释，这可能会给用户带来不便。
- en: In our example, we have omitted quite a lot of error-checking to focus on the
    implementation of the Interpreter. However, you'll need quite a lot of error checking
    and verbose output on errors to help the user correct its syntax errors. So, have
    fun writing your language but be nice to your users.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们省略了大量的错误检查，以便专注于解释器的实现。然而，你需要进行大量的错误检查和详细的错误输出，以帮助用户纠正其语法错误。所以，编写你的语言时尽情享受，但要对你的用户友好。
