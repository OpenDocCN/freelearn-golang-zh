- en: Chapter 7. Behavioral Patterns - Visitor, State, Mediator, and Observer Design
    Patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the last chapter about Behavioral patterns and it also closes this book's
    section about common, well known design patterns in Go language.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to look at three more design patterns. Visitor
    pattern is very useful when you want to abstract away some functionality from
    a set of objects.
  prefs: []
  type: TYPE_NORMAL
- en: State is used commonly to build **Finite State Machines** (**FSM**) and, in
    this section, we will develop a small *guess the number* game.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the Observer pattern is commonly used in event-driven architectures
    and is gaining a lot of traction again, especially in the microservices world.
  prefs: []
  type: TYPE_NORMAL
- en: After this chapter, we'll need to feel very comfortable with common design patterns
    before digging in concurrency and the advantages (and complexity), it brings to
    design patterns.
  prefs: []
  type: TYPE_NORMAL
