- en: Chapter 7. Behavioral Patterns - Visitor, State, Mediator, and Observer Design
    Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。行为模式 - 访问者、状态、中介者和观察者设计模式
- en: This is the last chapter about Behavioral patterns and it also closes this book's
    section about common, well known design patterns in Go language.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这是关于行为模式的最后一章，同时也结束了本书关于Go语言中常见、知名设计模式的章节。
- en: In this chapter, we are going to look at three more design patterns. Visitor
    pattern is very useful when you want to abstract away some functionality from
    a set of objects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨三种更多设计模式。访问者模式在你想要从一组对象中抽象出某些功能时非常有用。
- en: State is used commonly to build **Finite State Machines** (**FSM**) and, in
    this section, we will develop a small *guess the number* game.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 状态通常用于构建**有限状态机**（**FSM**），在本节中，我们将开发一个小型的*猜数字*游戏。
- en: Finally, the Observer pattern is commonly used in event-driven architectures
    and is gaining a lot of traction again, especially in the microservices world.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，观察者模式在事件驱动架构中常用，并且在微服务领域再次获得了大量关注。
- en: After this chapter, we'll need to feel very comfortable with common design patterns
    before digging in concurrency and the advantages (and complexity), it brings to
    design patterns.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章之后，在深入研究并发及其在设计模式中带来的优势（以及复杂性）之前，我们需要对常见设计模式感到非常熟悉。
