- en: Objectives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With Behavioral design patterns we are mainly dealing with algorithms. Visitor
    patterns are not an exception. The objectives that we are trying to achieve are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: To separate the algorithm of some type from its implementation within some other
    type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To improve the flexibility of some types by using them with little or no logic
    at all so all new functionality can be added without altering the object structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To fix a structure or behavior that would break the open/closed principle in
    a type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You might be thinking what the open/closed principle is. In computer science,
    the open/closed principle states that: *entities should be open for * *extension
    but closed for modification*. This simple state has lots of implications that
    allows building more maintainable software and less prone to errors. And the Visitor
    pattern helps us to delegate some commonly changing algorithm from a type that
    we need it to be "stable" to an external type that can change often without affecting
    our original one.
  prefs: []
  type: TYPE_NORMAL
