- en: Objectives
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目标
- en: 'With Behavioral design patterns we are mainly dealing with algorithms. Visitor
    patterns are not an exception. The objectives that we are trying to achieve are
    as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在行为设计模式中，我们主要处理的是算法。访问者模式也不例外。我们试图实现的目标如下：
- en: To separate the algorithm of some type from its implementation within some other
    type
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将某些类型的算法与其在另一种类型中的实现分离
- en: To improve the flexibility of some types by using them with little or no logic
    at all so all new functionality can be added without altering the object structure
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用几乎没有任何逻辑的方式来提高某些类型的灵活性，这样所有新的功能都可以添加，而无需改变对象结构
- en: To fix a structure or behavior that would break the open/closed principle in
    a type
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复一个会破坏类型中开放/封闭原则的结构或行为
- en: You might be thinking what the open/closed principle is. In computer science,
    the open/closed principle states that: *entities should be open for * *extension
    but closed for modification*. This simple state has lots of implications that
    allows building more maintainable software and less prone to errors. And the Visitor
    pattern helps us to delegate some commonly changing algorithm from a type that
    we need it to be "stable" to an external type that can change often without affecting
    our original one.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道开放/封闭原则是什么。在计算机科学中，开放/封闭原则指出：*实体应该对扩展开放，但对修改封闭*。这个简单的状态有很多含义，允许构建更易于维护且更不易出错的软件。而且访问者模式帮助我们将一些经常变化的算法从我们需要其“稳定”的类型中委托给一个可以经常变化而不影响我们原始类型的外部类型。
