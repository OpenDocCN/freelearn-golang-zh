["```go\npackage visitor \n\nimport ( \n  \"io\" \n  \"os\" \n  \"fmt\" \n) \n\ntype MessageA struct { \n  Msg string \n  Output io.Writer \n} \n\ntype MessageB struct { \n  Msg string \n  Output io.Writer \n} \n\ntype Visitor interface { \n  VisitA(*MessageA) \n  VisitB(*MessageB) \n} \n\ntype Visitable interface { \n  Accept(Visitor) \n} \n\ntype MessageVisitor struct {} \n\n```", "```go\npackage visitor \n\nimport \"testing\" \n\ntype TestHelper struct { \n  Received string \n} \n\nfunc (t *TestHelper) Write(p []byte) (int, error) { \n  t.Received = string(p) \n  return len(p), nil \n} \n\n```", "```go\nfunc Test_Overall(t *testing.T) { \n  testHelper := &TestHelper{} \n  visitor := &MessageVisitor{} \n  ... \n} \n\n```", "```go\nfunc Test_Overall(t *testing.T) { \n  testHelper := &TestHelper{} \n  visitor := &MessageVisitor{} \n\n  t.Run(\"MessageA test\", func(t *testing.T){ \n    msg := MessageA{ \n      Msg: \"Hello World\", \n      Output: testHelper, \n    } \n\n    msg.Accept(visitor) \n    msg.Print() \n\n    expected := \"A: Hello World (Visited A)\" \n    if testHelper.Received !=  expected { \n      t.Errorf(\"Expected result was incorrect. %s != %s\", \n      testHelper.Received, expected) \n    } \n  }) \n  ... \n} \n\n```", "```go\n  t.Run(\"MessageB test\", func(t *testing.T){ \n    msg := MessageB { \n      Msg: \"Hello World\", \n      Output: testHelper, \n    } \n\n    msg.Accept(visitor) \n    msg.Print() \n\n    expected := \"B: Hello World (Visited B)\" \n    if testHelper.Received !=  expected { \n      t.Errorf(\"Expected result was incorrect. %s != %s\", \n        testHelper.Received, expected) \n    } \n  }) \n} \n\n```", "```go\nfunc (m *MessageA) Accept(v Visitor) { \n  //Do nothing \n} \n\nfunc (m *MessageB) Accept(v Visitor) { \n  //Do nothing \n} \n\n```", "```go\nfunc (mf *MessageVisitor) VisitA(m *MessageA){ \n  //Do nothing \n} \nfunc (mf *MessageVisitor) VisitB(m *MessageB){ \n  //Do nothing \n} \n\n```", "```go\nfunc (m *MessageA) Print(){ \n  //Do nothing \n} \n\nfunc (m *MessageB) Print(){ \n  //Do nothing \n} \n\n```", "```go\ngo test -v .\n=== RUN   Test_Overall\n=== RUN   Test_Overall/MessageA_test\n=== RUN   Test_Overall/MessageB_test\n--- FAIL: Test_Overall (0.00s)\n --- FAIL: Test_Overall/MessageA_test (0.00s)\n visitor_test.go:30: Expected result was incorrect.  != A: Hello World (Visited A)\n --- FAIL: Test_Overall/MessageB_test (0.00s)\n visitor_test.go:46: Expected result was incorrect.  != B: Hello World (Visited B)\nFAIL\nexit status 1\nFAIL\n\n```"]