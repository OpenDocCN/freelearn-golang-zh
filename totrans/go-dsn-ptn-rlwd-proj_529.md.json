["```go\nfunc (mf *MessageVisitor) VisitA(m *MessageA){ \n  m.Msg = fmt.Sprintf(\"%s %s\", m.Msg, \"(Visited A)\") \n} \nfunc (mf *MessageVisitor) VisitB(m *MessageB){ \n  m.Msg = fmt.Sprintf(\"%s %s\", m.Msg, \"(Visited B)\") \n} \n\n```", "```go\nfunc (m *MessageA) Accept(v Visitor) { \n  v.VisitA(m) \n} \n\nfunc (m *MessageB) Accept(v Visitor) { \n  v.VisitB(m) \n} \n\n```", "```go\nfunc (m *MessageA) Print() { \n  if m.Output == nil { \n    m.Output = os.Stdout \n  } \n\n  fmt.Fprintf(m.Output, \"A: %s\", m.Msg) \n} \n\nfunc (m *MessageB) Print() { \n  if m.Output == nil { \n    m.Output = os.Stdout \n  } \n  fmt.Fprintf(m.Output, \"B: %s\", m.Msg) \n} \n\n```", "```go\ngo test -v .\n=== RUN   Test_Overall\n=== RUN   Test_Overall/MessageA_test\n=== RUN   Test_Overall/MessageB_test\n--- PASS: Test_Overall (0.00s)\n --- PASS: Test_Overall/MessageA_test (0.00s)\n --- PASS: Test_Overall/MessageB_test (0.00s)\nPASS\nok\n\n```", "```go\ntype MsgFieldVisitorPrinter struct {} \n\nfunc (mf *MsgFieldVisitorPrinter) VisitA(m *MessageA){ \n  fmt.Printf(m.Msg) \n} \nfunc (mf *MsgFieldVisitorPrinter) VisitB(m *MessageB){ \n  fmt.Printf(m.Msg) \n} \n\n```"]