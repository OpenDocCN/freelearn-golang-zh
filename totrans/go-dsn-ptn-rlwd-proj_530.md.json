["```go\ntype ProductInfoRetriever interface { \n  GetPrice() float32 \n  GetName() string \n} \n\ntype Visitor interface { \n  Visit(ProductInfoRetriever) \n} \n\ntype Visitable interface { \n  Accept(Visitor) \n} \n\n```", "```go\ntype Product struct { \n  Price float32 \n  Name  string \n} \n\nfunc (p *Product) GetPrice() float32 { \n  return p.Price \n} \n\nfunc (p *Product) Accept(v Visitor) { \n  v.Visit(p) \n} \n\nfunc (p *Product) GetName() string { \n  return p.Name \n} \n\n```", "```go\ntype Rice struct { \n  Product \n} \n\ntype Pasta struct { \n  Product \n} \n\n```", "```go\ntype PriceVisitor struct { \n  Sum float32 \n} \n\nfunc (pv *PriceVisitor) Visit(p ProductInfoRetriever) { \n  pv.Sum += p.GetPrice() \n} \n\ntype NamePrinter struct { \n  ProductList string \n} \n\nfunc (n *NamePrinter) Visit(p ProductInfoRetriever) { \n  n.Names = fmt.Sprintf(\"%s\\n%s\", p.GetName(), n.ProductList) \n} \n\n```", "```go\nfunc main() { \n  products := make([]Visitable, 2) \n  products[0] = &Rice{ \n    Product: Product{ \n      Price: 32.0, \n      Name:  \"Some rice\", \n    }, \n  } \n  products[1] = &Pasta{ \n    Product: Product{ \n      Price: 40.0, \n      Name:  \"Some pasta\", \n    }, \n  } \n\n  //Print the sum of prices \n  priceVisitor := &PriceVisitor{} \n\n  for _, p := range products { \n    p.Accept(priceVisitor) \n  } \n\n  fmt.Printf(\"Total: %f\\n\", priceVisitor.Sum) \n\n  //Print the products list \n  nameVisitor := &NamePrinter{} \n\n  for _, p := range products { \n    p.Accept(nameVisitor) \n  } \n\n  fmt.Printf(\"\\nProduct list:\\n-------------\\n%s\",  nameVisitor.ProductList) \n} \n\n```", "```go\ngo run visitor.go\nTotal: 72.000000\nProduct list:\n-------------\nSome pasta\nSome rice\n\n```", "```go\ntype Fridge struct { \n  Product \n} \n\n```", "```go\ntype Fridge struct { \n  Product \n} \n\nfunc (f *Fridge) GetPrice() float32 { \n  return f.Product.Price + 20 \n} \n\n```", "```go\ntype Fridge struct { \n  Product \n} \n\nfunc (f *Fridge) GetPrice() float32 { \n  return f.Product.Price + 20 \n} \n\nfunc (f *Fridge) Accept(v Visitor) { \n  v.Visit(f) \n} \n\n```", "```go\nfunc main() { \n  products := make([]Visitable, 3) \n  products[0] = &Rice{ \n    Product: Product{ \n      Price: 32.0, \n      Name:  \"Some rice\", \n    }, \n  } \n  products[1] = &Pasta{ \n    Product: Product{ \n      Price: 40.0, \n      Name:  \"Some pasta\", \n    }, \n  } \n  products[2] = &Fridge{ \n    Product: Product{ \n      Price: 50, \n      Name:  \"A fridge\", \n    }, \n  } \n  ... \n} \n\n```", "```go\n$ go run visitor.go\nTotal: 142.000000\nProduct list:\n-------------\nA fridge\nSome pasta\nSome rice\n\n```"]