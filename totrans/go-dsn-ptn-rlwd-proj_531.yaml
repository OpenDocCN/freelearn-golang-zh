- en: Visitors to the rescue!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have seen a powerful abstraction to add new algorithms to some types. However,
    because of the lack of overloading in Go, this pattern could be limiting in some
    aspects (we have seen it in the first example, where we had to create the `VisitA`
    and `VisitB` implementations). In the second example, we haven't dealt with this
    limitation because we have used an interface to the `Visit` method of the `Visitor` struct,
    but we just used one type of visitor (`ProductInfoRetriever`) and we would have
    the same problem if we implemented a `Visit` method for a second type, which is
    one of the objectives of the original *Gang of Four* design patterns.
  prefs: []
  type: TYPE_NORMAL
