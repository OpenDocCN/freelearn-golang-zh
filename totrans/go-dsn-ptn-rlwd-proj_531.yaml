- en: Visitors to the rescue!
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问者模式来拯救！
- en: We have seen a powerful abstraction to add new algorithms to some types. However,
    because of the lack of overloading in Go, this pattern could be limiting in some
    aspects (we have seen it in the first example, where we had to create the `VisitA`
    and `VisitB` implementations). In the second example, we haven't dealt with this
    limitation because we have used an interface to the `Visit` method of the `Visitor` struct,
    but we just used one type of visitor (`ProductInfoRetriever`) and we would have
    the same problem if we implemented a `Visit` method for a second type, which is
    one of the objectives of the original *Gang of Four* design patterns.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了一种强大的抽象方法，可以将新算法添加到某些类型中。然而，由于Go语言中缺乏重载功能，这种模式在某些方面可能会受到限制（我们在第一个例子中已经看到了这一点，当时我们不得不创建`VisitA`和`VisitB`的实现）。在第二个例子中，我们没有处理这种限制，因为我们使用了`Visitor`结构体的`Visit`方法接口，但我们只是使用了一种类型的访问者（`ProductInfoRetriever`），如果我们为第二种类型实现一个`Visit`方法，我们也会遇到同样的问题，这正是原始的*四人帮*设计模式之一的目标。
