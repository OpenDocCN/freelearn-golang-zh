["```go\ntype Observer interface { \n  Notify(string) \n} \n\n```", "```go\ntype Publisher struct { \n  ObserversList []Observer \n} \n\nfunc (s *Publisher) AddObserver(o Observer) {} \n\nfunc (s *Publisher) RemoveObserver(o Observer) {} \n\nfunc (s *Publisher) NotifyObservers(m string) {} \n\n```", "```go\ntype TestObserver struct { \n  ID      int \n  Message string \n} \nfunc (p *TestObserver) Notify(m string) { \n  fmt.Printf(\"Observer %d: message '%s' received \\n\", p.ID, m) \n  p.Message = m \n} \n\n```", "```go\nfunc TestSubject(t *testing.T) { \n  testObserver1 := &TestObserver{1, \"\"} \n  testObserver2 := &TestObserver{2, \"\"} \n  testObserver3 := &TestObserver{3, \"\"} \n  publisher := Publisher{} \n\n```", "```go\n  t.Run(\"AddObserver\", func(t *testing.T) { \n    publisher.AddObserver(testObserver1) \n    publisher.AddObserver(testObserver2) \n    publisher.AddObserver(testObserver3) \n\n    if len(publisher.ObserversList) != 3 { \n      t.Fail() \n    } \n  }) \n\n```", "```go\n  t.Run(\"RemoveObserver\", func(t *testing.T) { \n    publisher.RemoveObserver(testObserver2) \n\n    if len(publisher.ObserversList) != 2 { \n      t.Errorf(\"The size of the observer list is not the \" + \n        \"expected. 3 != %d\\n\", len(publisher.ObserversList)) \n    } \n\n    for _, observer := range publisher.ObserversList { \n      testObserver, ok := observer.(TestObserver) \n      if !ok {  \n        t.Fail() \n      } \n\n      if testObserver.ID == 2 { \n        t.Fail() \n      } \n    } \n  }) \n\n```", "```go\nt.Run(\"Notify\", func(t *testing.T) { \n    for _, observer := range publisher.ObserversList { \n      printObserver, ok := observer.(*TestObserver) \n      if !ok { \n        t.Fail() \n        break \n      } \n\n      if printObserver.Message != \"\" { \n        t.Errorf(\"The observer's Message field weren't \" + \"  empty: %s\\n\", printObserver.Message) \n      } \n    } \n\n```", "```go\n    ... \n    message := \"Hello World!\" \n    publisher.NotifyObservers(message) \n\n    for _, observer := range publisher.ObserversList { \n      printObserver, ok := observer.(*TestObserver) \n      if !ok { \n        t.Fail() \n        break \n      } \n\n      if printObserver.Message != message { \n        t.Errorf(\"Expected message on observer %d was \" + \n          \"not expected: '%s' != '%s'\\n\", printObserver.ID, \n          printObserver.Message, message) \n      } \n    } \n  }) \n} \n\n```", "```go\ngo test -v  \n=== RUN   TestSubject \n=== RUN   TestSubject/AddObserver \n=== RUN   TestSubject/RemoveObserver \n=== RUN   TestSubject/Notify \n--- FAIL: TestSubject (0.00s) \n    --- FAIL: TestSubject/AddObserver (0.00s) \n    --- FAIL: TestSubject/RemoveObserver (0.00s) \n        observer_test.go:40: The size of the observer list is not the expected. 3 != 0 \n    --- PASS: TestSubject/Notify (0.00s) \nFAIL \nexit status 1 \nFAIL\n\n```", "```go\n  if len(publisher.ObserversList) == 0 { \n      t.Errorf(\"The list is empty. Nothing to test\\n\") \n  } \n\n```", "```go\ngo test -v\n=== RUN   TestSubject\n=== RUN   TestSubject/AddObserver\n=== RUN   TestSubject/RemoveObserver\n=== RUN   TestSubject/Notify\n--- FAIL: TestSubject (0.00s)\n --- FAIL: TestSubject/AddObserver (0.00s)\n --- FAIL: TestSubject/RemoveObserver (0.00s)\n observer_test.go:40: The size of the observer list is not the expected. 3 != 0\n --- FAIL: TestSubject/Notify (0.00s)\n observer_test.go:58: The list is empty. Nothing to test\nFAIL\nexit status 1\nFAIL\n\n```"]