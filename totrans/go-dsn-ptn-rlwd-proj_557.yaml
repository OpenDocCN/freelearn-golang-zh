- en: Concurrency versus parallelism
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并发与并行
- en: 'Many people have misunderstood the differences between both, even thinking
    that they are the same. There is a popular speech by Rob Pike, one of the creators
    of Go, *Concurrency is not parallelism*, which I really agree with. As a quick
    summary of the talk, we can extract the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人误解了两者之间的区别，甚至认为它们是相同的。Go的创造者之一Rob Pike有一个流行的演讲，他说：“并发不是并行”，我非常同意。作为这次演讲的简要总结，我们可以提取以下内容：
- en: Concurrency is about dealing with many things at once
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并发是关于同时处理很多事情
- en: Parallelism is about doing many things at the same time
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并行是指同时做很多事情
- en: Concurrency enables parallelism by designing a correct structure of concurrency
    work.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 并发通过设计正确的并发工作结构来启用并行。
- en: For example, we can think of the mechanism of a bike. When we pedal, we usually
    push down the pedal to produce force (and this push, raises our opposite leg on
    the opposite pedal). We cannot push with both legs at the same time because the
    cranks don't allow us to do it. But this design allows the construction of a parallel
    bike, commonly called a **tandem bike**. A tandem bike is a bike that two people
    can ride at the same time; they both pedal and apply force to the bike.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以考虑自行车的机制。当我们踩踏板时，我们通常会向下推踏板产生力量（而这个推力，也会抬起我们相对的另一条腿上的踏板）。我们不能同时用两条腿推，因为曲柄不允许我们这样做。但这个设计允许构建一个并行自行车，通常称为**双人自行车**。双人自行车是一种两个人可以同时骑的自行车；他们都踩踏板并给自行车施加力量。
- en: In the bike example, concurrency is the design of a bike that, with two legs
    (Goroutines), you can produce power to move the bike by yourself. The design is
    concurrent and correct. If we use a tandem bike and two people (two cores), the
    solution is concurrent, correct, and parallel. But the key thing is that with
    a concurrent design, we don't have to worry about parallelism; we can think about
    it as an extra feature if our concurrent design is correct. In fact, we can use
    the tandem bike with only one person, but the concurrent design of the legs, pedals,
    chain, wheels of a bike is still correct.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在自行车示例中，并发是指一种自行车的设计，通过两条腿（Goroutines），你可以自己产生动力来推动自行车。这种设计是并发的且是正确的。如果我们使用双人自行车和两个人（两个核心），解决方案是并发的、正确的，并且是并行的。但关键在于，在并发设计中，我们不必担心并行性；如果我们并发设计正确，我们可以将其视为一个额外功能。实际上，我们甚至可以用一个人来使用双人自行车，但自行车腿、踏板、链条、车轮的并发设计仍然是正确的。
- en: '![Concurrency versus parallelism](img/00035.jpeg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![并发与并行](img/00035.jpeg)'
- en: With concurrency, on the left side, we have a design and a structure that is
    executed sequentially by the same CPU core. Once we have this design and structure,
    parallelism can be achieved by simply repeating this structure on a different
    thread.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在并发方面，在左侧，我们有一个由同一CPU核心顺序执行的设计和结构。一旦我们有了这个设计和结构，通过简单地在不同线程上重复这个结构，就可以实现并行。
- en: This is how Go eases the reasoning about concurrent and parallel programs by
    simply not worrying too much about parallel execution and focusing much more on
    concurrent design and structure. Breaking a big task into smaller tasks that can
    be run concurrently usually provides much better performance in a single-core
    computer, but, if this design can also be run in parallel, we could achieve an
    even higher throughput (or not, depending on the design).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Go如何通过简单地不过多关注并行执行，而更多地关注并发设计和结构来简化对并发和并行程序的推理。将大任务分解成可以并发运行的小任务，通常在单核计算机上提供更好的性能，但如果这种设计也可以并行运行，我们就可以实现更高的吞吐量（或者不一定，这取决于设计）。
- en: In fact, we can set the number of cores in use in a Go app by setting the environment
    variable `GOMAXPROCS` to the number of cores we want. This is not only useful
    when using schedulers, such as **Apache Mesos**, but it gives us more control
    about how a Go app works and performs.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，我们可以在Go应用程序中通过设置环境变量`GOMAXPROCS`为我们想要的核数来设置使用的核心数。这不仅在使用调度器（如**Apache Mesos**）时很有用，而且它让我们对Go应用程序的工作方式和性能有了更多的控制。
- en: So, to recap, it is very important to keep in mind that concurrency is about
    structure and parallelism is about execution. We must think about making our programs
    concurrent in a better way, by breaking them down into smaller pieces of work,
    and Go's scheduler will try to make them parallel if it's possible and allowed.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，总结一下，我们必须牢记并发是关于结构，而并行是关于执行。我们必须考虑以更好的方式使我们的程序并发，通过将它们分解成更小的任务块，Go的调度器将尝试在可能和允许的情况下使它们并行。
