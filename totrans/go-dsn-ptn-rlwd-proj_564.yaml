- en: Callback hell
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回调地狱
- en: 'The term **callback hell** is commonly used to refer to when many callbacks
    have been stacked within each other. This makes them difficult to reason with
    and handle when they grow too much. For example, using the same code as before,
    we could stack another asynchronous call with the contents that we previously
    printed to the console:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 术语**回调地狱**通常用来指代当许多回调层层嵌套在一起时的情况。当它们变得太多时，这使得推理和处理变得困难。例如，使用与之前相同的代码，我们可以将另一个异步调用与之前打印到控制台的内容堆叠起来：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '(We have omitted imports, the package name, and the `toUpperAsync` function
    as they have not changed.) Now we have the `toUpperAsync` function within a `toUpperAsync`
    function, and we could embed many more if we want. In this case, we again pass
    the text that we previously printed on the console to use it in the following
    callback. The inner callback finally prints it on the console, giving the following
    output:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: （我们省略了导入、包名和`toUpperAsync`函数，因为它们没有变化。）现在我们在`toUpperAsync`函数内部有了`toUpperAsync`函数，如果我们想的话，还可以嵌入更多。在这种情况下，我们再次传递之前打印到控制台上的文本，以便在接下来的回调中使用。内层回调最终将其打印到控制台，得到以下输出：
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this case, we can assume that the outer callback will be executed before
    the inner one. That's why we don't need to add one more to the WaitGroup.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们可以假设外层回调将在内层回调之前执行。这就是为什么我们不需要向WaitGroup添加另一个回调。
- en: The point here is that we must be careful when using callbacks. In very complex
    systems, too many callbacks are hard to reason with and hard to deal with. But
    with care and rationality, they are powerful tools.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的问题是，在使用回调时我们必须小心。在非常复杂的系统中，过多的回调难以推理和处理。但是，只要谨慎且理性，它们就是强大的工具。
