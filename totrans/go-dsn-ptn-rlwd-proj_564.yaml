- en: Callback hell
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The term **callback hell** is commonly used to refer to when many callbacks
    have been stacked within each other. This makes them difficult to reason with
    and handle when they grow too much. For example, using the same code as before,
    we could stack another asynchronous call with the contents that we previously
    printed to the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '(We have omitted imports, the package name, and the `toUpperAsync` function
    as they have not changed.) Now we have the `toUpperAsync` function within a `toUpperAsync`
    function, and we could embed many more if we want. In this case, we again pass
    the text that we previously printed on the console to use it in the following
    callback. The inner callback finally prints it on the console, giving the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this case, we can assume that the outer callback will be executed before
    the inner one. That's why we don't need to add one more to the WaitGroup.
  prefs: []
  type: TYPE_NORMAL
- en: The point here is that we must be careful when using callbacks. In very complex
    systems, too many callbacks are hard to reason with and hard to deal with. But
    with care and rationality, they are powerful tools.
  prefs: []
  type: TYPE_NORMAL
