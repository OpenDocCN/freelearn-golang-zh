- en: Directional channels
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方向性通道
- en: One cool feature about Go channels is that, when we use them as parameters,
    we can restrict their directionality so that they can be used only to send or
    to receive. The compiler will complain if a channel is used in the restricted
    direction. This feature applies a new level of static typing to Go apps and makes
    code more understandable and more readable.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Go通道的一个酷特性是，当我们将它们用作参数时，我们可以限制它们的方向性，使得它们只能用于发送或接收。如果在一个受限的方向上使用通道，编译器会提出抱怨。这个特性为Go应用带来了新的静态类型级别，使得代码更加易于理解和阅读。
- en: 'We''ll take a simple example with channels:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用一个简单的通道示例来说明：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The line where we launch the new Goroutine `go func(ch chan<- string)` states
    that the channel passed to this function can only be used as an input channel,
    and you can't listen to it.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们启动新的Goroutine `go func(ch chan<- string)`的行中，表示传递给这个函数的通道只能用作输入通道，你不能监听它。
- en: 'We can also pass a channel that will be used as a receiver channel only:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以传递一个仅用作接收通道的通道：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, the arrow is on the opposite side of the keyword `chan`, indicating
    an extracting operation from the channel. Keep in mind that the channel arrow
    always points left, to indicate a receiving channel, it must go on the left, and
    to indicate an inserting channel, it must go on the right.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，箭头位于关键字`chan`的对面，表示从通道中提取操作。请记住，通道箭头始终指向左边，表示接收通道，它必须位于左边；而表示插入通道，它必须位于右边。
- en: 'If we try to send a value through this *receive only* channel, the compiler
    will complain about it:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试通过这个**只接收**通道发送一个值，编译器会对此提出抱怨：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This function has a receive only channel that we will try to use to send the
    message `hello` through. Let''s see what the compiler says:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数有一个只接收通道，我们将尝试通过它发送消息`hello`。让我们看看编译器会说什么：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It doesn't like it and asks us to correct it. Now the code is even more readable
    and safe, and we have just placed an arrow in front or behind the `chan` argument.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 它不喜欢这样，并要求我们进行修正。现在代码更加易于阅读和安全，我们只是在`chan`参数前或后放置了一个箭头。
