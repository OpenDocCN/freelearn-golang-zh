- en: Unit test
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单元测试
- en: To restrict concurrent access to the `singleton` instance, just one Goroutine
    will be able to access it. We'll access it using channels--the first one to add
    one, the second one to get the current count, and the third one to stop the Goroutine.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 为了限制对 `singleton` 实例的并发访问，只有一个 Goroutine 能够访问它。我们将使用通道来访问它--第一个用于加一，第二个用于获取当前计数，第三个用于停止
    Goroutine。
- en: We will add one 10,000 times using 10,000 different Goroutines launched from
    two different `singleton` instances. Then, we'll introduce a loop to check the
    count of the `singleton` until it is 5,000, but we'll write how much the count
    is before starting the loop.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用从两个不同的 `singleton` 实例启动的 10,000 个不同的 Goroutine 来加一 10,000 次。然后，我们将引入一个循环来检查
    `singleton` 的计数，直到它达到 5,000，但我们将先写出循环开始前的计数。
- en: 'Once the count has reached 5,000, the loop will exit and quit the running Goroutine-the
    test code looks like this:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦计数达到 5,000，循环将退出，并退出正在运行的 Goroutine-测试代码如下：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, we can see the full test we'll use. After creating two instances of the
    `singleton`, we have created a `for` loop that launches the `AddOne` method 5,000
    times from each instance. This is not happening yet; they are being scheduled
    and will be executed eventually. We are printing the count of the `singleton`
    instance to clearly see this eventuality; depending on the computer, it will print
    some number greater than 0 and lower than 10,000.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到我们将使用的完整测试。在创建两个 `singleton` 实例之后，我们创建了一个 `for` 循环，从每个实例启动 `AddOne`
    方法 5,000 次。目前还没有发生这种情况；它们正在被调度，最终将执行。我们正在打印 `singleton` 实例的计数，以便清楚地看到这个事件；根据计算机的不同，它将打印一个大于
    0 且小于 10,000 的数字。
- en: The last step before stopping the Goroutine that is holding the count is to
    enter a loop that checks the value of the count and waits 10 milliseconds if the
    value is not the expected value (10,000). Once it reaches this value, the loop
    will exit and we can stop the `singleton` instance.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在停止持有计数的 Goroutine 之前，最后一步是进入一个循环，检查计数的值，如果值不是预期的值（10,000），则等待 10 毫秒。一旦达到这个值，循环将退出，我们可以停止
    `singleton` 实例。
- en: We'll jump directly to the implementation as the requirement is quite simple.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由于要求很简单，我们将直接跳到实现部分。
