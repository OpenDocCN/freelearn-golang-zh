- en: Chapter 9. Concurrency Patterns - Barrier, Future, and Pipeline Design Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章. 并发模式 - 障碍、未来和管道设计模式
- en: 'Now that we are familiar with the concepts of concurrency and parallelism,
    and we have understood how to achieve them by using Go''s concurrency primitives,
    we can see some patterns regarding concurrent work and parallel execution. In
    this chapter we''ll see the following patterns:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经熟悉了并发和并行性的概念，并且我们已经理解了如何通过使用Go的并发原语来实现它们，我们可以看到一些关于并发工作和并行执行的模式。在本章中，我们将看到以下模式：
- en: Barrier is a very common pattern, especially when we have to wait for more than
    one response from different Goroutines before letting the program continue
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 障碍是一种非常常见的模式，尤其是在我们需要等待来自不同Goroutine的多个响应后才能让程序继续执行
- en: Future pattern allows us to write an algorithm that will be executed eventually
    in time (or not) by the same Goroutine or a different one
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未来模式允许我们编写一个算法，该算法最终（或可能不）由同一个Goroutine或不同的Goroutine执行
- en: Pipeline is a powerful pattern to build complex synchronous flows of Goroutines
    that are connected with each other according to some logic
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管道是一种强大的模式，用于构建复杂的同步Goroutine流，这些Goroutine根据某种逻辑相互连接
- en: Take a quick look at the description of the three patterns. They all describe
    some sort of logic to synchronize execution in time. It's very important to keep
    in mind that we are now developing concurrent structures with all the tools and
    patterns we have seen in the previous chapters. With Creational patterns we were
    dealing with creating objects. With the Structural patterns we were learning how
    to build idiomatic structures and in Behavioral patterns we were managing mostly
    with algorithms. Now, with Concurrency patterns, we will mostly manage the timing
    execution and order execution of applications that has more than one *flow*.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 快速浏览一下这三种模式的描述。它们都描述了某种同步执行逻辑。记住这一点非常重要，我们现在正在使用前几章中看到的所有工具和模式来开发并发结构。在使用创建型模式时，我们处理的是对象的创建。在使用结构型模式时，我们学习如何构建惯用的结构，而在行为模式中，我们主要管理算法。现在，在并发模式中，我们将主要管理具有多个*流程*的应用程序的定时执行和顺序执行。
