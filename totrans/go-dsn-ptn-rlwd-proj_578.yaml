- en: Chapter 9. Concurrency Patterns - Barrier, Future, and Pipeline Design Patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we are familiar with the concepts of concurrency and parallelism,
    and we have understood how to achieve them by using Go''s concurrency primitives,
    we can see some patterns regarding concurrent work and parallel execution. In
    this chapter we''ll see the following patterns:'
  prefs: []
  type: TYPE_NORMAL
- en: Barrier is a very common pattern, especially when we have to wait for more than
    one response from different Goroutines before letting the program continue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Future pattern allows us to write an algorithm that will be executed eventually
    in time (or not) by the same Goroutine or a different one
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pipeline is a powerful pattern to build complex synchronous flows of Goroutines
    that are connected with each other according to some logic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take a quick look at the description of the three patterns. They all describe
    some sort of logic to synchronize execution in time. It's very important to keep
    in mind that we are now developing concurrent structures with all the tools and
    patterns we have seen in the previous chapters. With Creational patterns we were
    dealing with creating objects. With the Structural patterns we were learning how
    to build idiomatic structures and in Behavioral patterns we were managing mostly
    with algorithms. Now, with Concurrency patterns, we will mostly manage the timing
    execution and order execution of applications that has more than one *flow*.
  prefs: []
  type: TYPE_NORMAL
