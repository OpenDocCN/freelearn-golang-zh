- en: Description
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Imagine the situation where we have a microservices application where one service
    needs to compose its response by merging the responses of another three microservices.
    This is where the Barrier pattern can help us.
  prefs: []
  type: TYPE_NORMAL
- en: Our Barrier pattern could be a service that will block its response until it
    has been composed with the results returned by one or more different Goroutines
    (or services). And what kind of primitive do we have that has a blocking nature?
    Well, we can use a lock, but it's more idiomatic in Go to use an unbuffered channel.
  prefs: []
  type: TYPE_NORMAL
