- en: Description
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 描述
- en: Imagine the situation where we have a microservices application where one service
    needs to compose its response by merging the responses of another three microservices.
    This is where the Barrier pattern can help us.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下这样的场景：我们有一个微服务应用，其中一个服务需要通过合并其他三个微服务的响应来构建自己的响应。这正是屏障模式能帮到我们的地方。
- en: Our Barrier pattern could be a service that will block its response until it
    has been composed with the results returned by one or more different Goroutines
    (or services). And what kind of primitive do we have that has a blocking nature?
    Well, we can use a lock, but it's more idiomatic in Go to use an unbuffered channel.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的屏障模式可能是一个服务，它会阻塞其响应，直到它与一个或多个不同的Goroutines（或服务）返回的结果组合完成。那么我们有什么具有阻塞性质的原始机制呢？嗯，我们可以使用锁，但在Go语言中，使用无缓冲通道更为常见。
