- en: An HTTP GET aggregator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For our example, we are going to write a very typical situation in a microservices
    application-an app that performs two HTTP `GET` calls and joins them in a single
    response that will be printed on the console.
  prefs: []
  type: TYPE_NORMAL
- en: Our small app must perform each request in a different Goroutine and print the
    result on the console if both responses are correct. If any of them returns an
    error, then we print just the error.
  prefs: []
  type: TYPE_NORMAL
- en: 'The design must be concurrent, allowing us to take advantage of our multicore
    CPUs to make the calls in parallel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An HTTP GET aggregator](img/00039.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding diagram, the solid lines represent calls and the dashed lines
    represent channels. The balloons are Goroutines, so we have two Goroutines launched
    by the `main` function (which could also be considered a Goroutine). These two
    functions will communicate back to the `main` function by using a **common channel**
    that they received when they were created on the `makeRequest` calls.
  prefs: []
  type: TYPE_NORMAL
