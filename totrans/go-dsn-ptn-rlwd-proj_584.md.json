["```go\npackage barrier \n\nimport ( \n    \"bytes\" \n    \"io\" \n    \"os\" \n    \"strings\" \n    \"testing\" \n) \n\nfunc TestBarrier(t *testing.T) { \n  t.Run(\"Correct endpoints\", func(t *testing.T) { \n    endpoints := []string{\"http://httpbin.org/headers\",  \"http://httpbin.org/User-Agent\"\n    } \n  }) \n\n  t.Run(\"One endpoint incorrect\", func(t *testing.T) { \n    endpoints := []string{\"http://malformed-url\",  \"http://httpbin.org/User-Agent\"} \n  }) \n\n  t.Run(\"Very short timeout\", func(t *testing.T) { \n    endpoints := []string{\"http://httpbin.org/headers\",  \"http://httpbin.org/User-Agent\"} \n  }) \n} \n\n```", "```go\nfunc barrier(endpoints ...string) {} \n\n```", "```go\nfunc captureBarrierOutput(endpoints ...string) string { \n    reader, writer, _ := os.Pipe() \n\n    os.Stdout = writer \n    out := make(chan string) \n\n    go func() { \n      var buf bytes.Buffer \n      io.Copy(&buf, reader) \n      out <- buf.String() \n    }() \n\n    barrier(endpoints...) \n\n    writer.Close() \n    temp := <-out \n\n    return temp \n} \n\n```", "```go\nt.Run(\"Correct endpoints\", func(t *testing.T) { \n    endpoints := []string{\"http://httpbin.org/headers\", \"http://httpbin.org/User-Agent\"\n    } \n\n result := captureBarrierOutput(endpoints...)\n if !strings.Contains(result, \"Accept-Encoding\") || strings.Contains (result, \"User-Agent\") \n  {\n t.Fail()\n }\n t.Log(result) \n}) \n\n```", "```go\nt.Run(\"One endpoint incorrect\", func(t *testing.T) { \n  endpoints := []string\n  {\n    \"http://malformed-url\", \"http://httpbin.org/User-Agent\"} \n\n result := captureBarrierOutput(endpoints...)\n if !strings.Contains(result, \"ERROR\") {\n t.Fail()\n }\n t.Log(result) \n}) \n\n```", "```go\nt.Run(\"Very short timeout\", func(t *testing.T) { \n  endpoints := []string\n  {\n    \"http://httpbin.org/headers\", \"http://httpbin.org/User-Agent\"} \n timeoutMilliseconds = 1\n result := captureBarrierOutput(endpoints...)\n if !strings.Contains(result, \"Timeout\") {\n t.Fail()\n }\n t.Log(result) \n  }) \n\n```"]