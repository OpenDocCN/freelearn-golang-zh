- en: A simple asynchronous requester
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个简单的异步请求者
- en: We are going to develop a very simple example to try to understand how a Future
    works. In this example, we will have a method that returns a string or an error,
    but we want to execute it concurrently. We have learned ways to do this already.
    Using a channel, we can launch a new Goroutine and handle the incoming result
    from the channel.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开发一个非常简单的示例，以尝试理解Future是如何工作的。在这个示例中，我们将有一个返回字符串或错误的函数，但我们希望并发执行它。我们已经学过如何做到这一点。使用通道，我们可以启动一个新的Goroutine，并处理从通道传入的结果。
- en: But in this case, we will have to handle the result (string or error), and we
    don't want this. Instead, we will define what to do in case of success and what
    to do in case of error and fire-and-forget the Goroutine.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 但在这种情况下，我们必须处理结果（字符串或错误），而我们不希望这样做。相反，我们将定义在成功的情况下要做什么，在出错的情况下要做什么，并让Goroutine执行后立即忘记。
