["```go\ntype MaybeString struct {} \n\n```", "```go\npackage future \n\nimport ( \n  \"errors\" \n  \"testing\" \n  \"sync\" \n) \n\nfunc TestStringOrError_Execute(t *testing.T) { \n  future := &MaybeString{} \n  t.Run(\"Success result\", func(t *testing.T) { \n    ... \n  }) \n  t.Run(\"Error result\", func(t *testing.T) { \n  ... \n  }) \n} \n\n```", "```go\nt.Run(\"Success result\", func(t *testing.T) { \n future.Success(func(s string) {\n t.Log(s)\n }).Fail(func(e error) {\n t.Fail()\n })\n future.Execute(func() (string, error) {\n return \"Hello World!\", nil\n }) \n}) \n\n```", "```go\nt.Run(\"Success result\", func(t *testing.T) { \n var wg sync.WaitGroup\n wg.Add(1) \n    future.Success(func(s string) { \n      t.Log(s) \n\n wg.Done() \n    }).Fail(func(e error) { \n      t.Fail() \n\n wg.Done() \n    }) \n\n    future.Execute(func() (string, error) { \n      return \"Hello World!\", nil \n    }) \n wg.Wait() \n  }) \n\n```", "```go\nt.Run(\"Failed result\", func(t *testing.T) { \n var wg sync.WaitGroup\n wg.Add(1)\n future.Success(func(s string) {\n t.Fail()\n wg.Done()\n }).Fail(func(e error) {\n t.Log(e.Error())\n wg.Done()\n })\n future.Execute(func() (string, error) {\n return \"\", errors.New(\"Error ocurred\")\n })\n wg.Wait() \n}) \n\n```", "```go\npackage future \n\ntype SuccessFunc func(string) \ntype FailFunc func(error) \ntype ExecuteStringFunc func() (string, error) \n\ntype MaybeString struct { \n  ... \n} \n\nfunc (s *MaybeString) Success(f SuccessFunc) *MaybeString { \n  return nil \n} \n\nfunc (s *MaybeString) Fail(f FailFunc) *MaybeString { \n  return nil \n} \n\nfunc (s *MaybeString) Execute(f ExecuteStringFunc) { \n  ... \n} \n\n```", "```go\ngo test -v .\n=== RUN   TestStringOrError_Execute\n=== RUN   TestStringOrError_Execute/Success_result\nfatal error: all goroutines are asleep - deadlock!\ngoroutine 1 [chan receive]:\ntesting.(*T).Run(0xc4200780c0, 0x5122e9, 0x19, 0x51d750, 0xc420041d30)\n /usr/lib/go/src/testing/testing.go:647 +0x316\ntesting.RunTests.func1(0xc4200780c0)\n /usr/lib/go/src/testing/testing.go:793 +0x6d\ntesting.tRunner(0xc4200780c0, 0xc420041e20)\n /usr/lib/go/src/testing/testing.go:610 +0x81\ntesting.RunTests(0x51d758, 0x5931e0, 0x1, 0x1, 0x50feb4)\n /usr/lib/go/src/testing/testing.go:799 +0x2f5\ntesting.(*M).Run(0xc420041ee8, 0xc420014550)\n /usr/lib/go/src/testing/testing.go:743 +0x85\nmain.main()\n go-design-patterns/future/_test/_testmain.go:54 +0xc6\n...continue\n\n```", "```go\nfunc timeout(t *testing.T, wg *sync.WaitGroup) { \n  time.Sleep(time.Second) \n  t.Log(\"Timeout!\") \n\n  t.Fail() \n  wg.Done() \n} \n\n```", "```go\nt.Run(\"Success result\", func(t *testing.T) { \n  var wg sync.WaitGroup \n  wg.Add(1) \n\n  //Timeout! \n  go timeout(t, wg) \n  // ... \n}) \n\n```", "```go\ngo test -v .\n=== RUN   TestStringOrError_Execute\n=== RUN   TestStringOrError_Execute/Success_result\n=== RUN   TestStringOrError_Execute/Failed_result\n--- FAIL: TestStringOrError_Execute (2.00s)\n --- FAIL: TestStringOrError_Execute/Success_result (1.00s)\n future_test.go:64: Timeout!\n --- FAIL: TestStringOrError_Execute/Failed_result (1.00s)\n future_test.go:64: Timeout!\nFAIL\nexit status 1\nFAIL\n\n```"]