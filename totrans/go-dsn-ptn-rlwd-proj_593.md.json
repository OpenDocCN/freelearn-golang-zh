["```go\ntype MaybeString struct { \n  successFunc SuccessFunc \n  failFunc    FailFunc \n} \n\nfunc (s *MaybeString) Success(f SuccessFunc) *MaybeString { \n  s.successFunc = f \n  return s \n} \n\nfunc (s *MaybeString) Fail(f FailFunc) *MaybeString { \n  s.failFunc = f \n  return s \n} \n\n```", "```go\nfunc (s *MaybeString) Execute(f ExecuteStringFunc) { \n  go func(s *MaybeString) { \n    str, err := f() \n    if err != nil { \n      s.failFunc(err) \n    } else { \n      s.successFunc(str) \n    } \n  }(s) \n} \n\n```", "```go\ngo test -v .\n=== RUN   TestStringOrError_Execute\n=== RUN   TestStringOrError_Execute/Success_result\n=== RUN   TestStringOrError_Execute/Failed_result\n--- PASS: TestStringOrError_Execute (0.00s)\n --- PASS: TestStringOrError_Execute/Success_result (0.00s)\n future_test.go:21: Hello World!\n --- PASS: TestStringOrError_Execute/Failed_result (0.00s)\n future_test.go:49: Error ocurred\nPASS\nok \n\n```", "```go\nfunc setContext(msg string) ExecuteStringFunc { \n  msg = fmt.Sprintf(\"%d Closure!\\n\", msg) \n\n  return func() (string, error){ \n    return msg, nil \n  } \n} \n\n```", "```go\nt.Run(\"Closure Success result\", func(t *testing.T) { \n    var wg sync.WaitGroup \n    wg.Add(1) \n    //Timeout! \n    go timeout(t, &wg) \n\n    future.Success(func(s string) { \n      t.Log(s) \n      wg.Done() \n    }).Fail(func(e error) { \n      t.Fail() \n      wg.Done() \n    }) \n    future.Execute(setContext(\"Hello\")) \n    wg.Wait() \n  }) \n\n```", "```go\ngo test -v .\n=== RUN   TestStringOrError_Execute\n=== RUN   TestStringOrError_Execute/Success_result\n=== RUN   TestStringOrError_Execute/Failed_result\n=== RUN   TestStringOrError_Execute/Closure_Success_result\n--- PASS: TestStringOrError_Execute (0.00s)\n --- PASS: TestStringOrError_Execute/Success_result (0.00s)\n future_test.go:21: Hello World!\n --- PASS: TestStringOrError_Execute/Failed_result (0.00s)\n future_test.go:49: Error ocurred\n --- PASS: TestStringOrError_Execute/Closure_Success_result (0.00s)\n future_test.go:69: Hello Closure!\nPASS\nok\n\n```"]