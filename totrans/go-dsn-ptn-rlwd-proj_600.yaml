- en: Beginning with tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create only one function that will manage everything. We will call
    this function `LaunchPipeline` to simplify things. It will take an integer as
    an argument, which will be our N number, the number of items in our list. The
    declaration in the implementation file looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In our test file, we will create a table of tests by using a slice of slices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Our table is a slice of slices of integer types. On each slice, the first integer
    represents the list size and the second position represents the item within the
    list. It is, effectively, a matrix. When passing 3, it must return 14\. When passing
    5, it must return 55\. Then we have to iterate over the table and pass the first
    index of each array to the `LaunchPipeline` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Using `range`, we get every row in the matrix . Each row is contained in a
    temporary variable called `test`. `test[0]` represents `N` and `test[1]` the expected
    result. We compare the expected result with the returning value of the `LaunchPipeline`
    function. If they aren''t the same, the test fails:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
