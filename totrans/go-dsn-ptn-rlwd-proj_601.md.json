["```go\nfunc functionName(in <-chan int) (<-chan int){ \n  out := make(chan bool, 100) \n\n  go func(){ \n    for v := range in { \n      // Do something with v and send it to channel out \n} \n\nclose(out) \n   }() \n\n  return out \n} \n\n```", "```go\nfunc generator(max int) <-chan int { \n  outChInt := make(chan int, 100) \n\n  go func() { \n    for i := 1; i <= max; i++ { \n      outChInt <- i \n    } \n\n    close(outChInt) \n  }() \n  return outChInt \n} \n\n```", "```go\nfunc power(in <-chan int) <-chan int { \n  out := make(chan int, 100) \n\n  go func() { \n    for v := range in { \n      out <- v * v \n    } \n    close(out) \n  }() \n  return out \n} \n\n```", "```go\nfunc sum(in <-chan int) <-chan int { \n  out := make(chan int, 100) \n  go func() { \n    var sum int \n\n    for v := range in { \n      sum += v \n    } \n\n    out <- sum \n    close(out) \n  }()\n\n  return out \n} \n\n```", "```go\nfunc LaunchPipeline(amount int) int { \n  firstCh := generator(amount) \n  secondCh := power(firstCh) \n  thirdCh := sum(secondCh) \n\n  result := <-thirdCh \n\n  return result \n} \n\n```", "```go\ngo test -v .\n=== RUN   TestLaunchPipeline\n--- PASS: TestLaunchPipeline (0.00s)\n pipeline_test.go:18: 14 == 14\n pipeline_test.go:18: 55 == 55\nPASS\nok\n\n```", "```go\nfunc LaunchPipeline(amount int) int { \n  return <-sum(power(generator(amount))) \n} \n\n```"]