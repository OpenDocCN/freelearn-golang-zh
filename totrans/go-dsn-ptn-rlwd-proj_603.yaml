- en: Summary
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Concurrency design patterns are a step forward in difficulty, and take some
    time to grasp. Our biggest mistake as concurrent programmers is thinking in terms
    of parallelism (How can I make this parallel? or How can I run this in a new thread?)
    instead of in terms of concurrent structures.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 并发设计模式在难度上是一个进步，需要一些时间来掌握。作为并发程序员，我们最大的错误是按照并行性（我如何使其并行？或者我如何在新线程中运行它？）来思考，而不是按照并发结构来思考。
- en: Pure functions (functions that will always produce the same output (given the
    same input) without affecting anything outside their scope) help in this design.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 纯函数（在给定相同输入的情况下，始终产生相同输出（不影响其作用域之外的内容）的函数）有助于这种设计。
- en: Concurrent programming requires practice and more practice. Go makes it easy
    once you understand the basic primitives. Diagrams can help you to understand
    the possible flow of data, but the best way of understanding it all is simply
    to practice.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 并发编程需要实践，更多的实践。一旦你理解了基本原语，Go 就会变得容易。图表可以帮助你理解可能的数据流，但理解所有这些的最佳方式仅仅是实践。
- en: In the following chapter, we will see how to use a pool of pipeline workers
    to do some work instead of having a unique pipeline. Also, we will learn how to
    create the publish/subscriber pattern in a concurrent structure and see how different
    the same pattern can be when we build by using concurrency.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何使用一组管道工作者来执行一些工作，而不是使用唯一的管道。我们还将学习如何在并发结构中创建发布/订阅模式，并看到当我们使用并发构建时，相同的模式会有多么不同。
