- en: A pool of pipelines
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一系列管道
- en: In the previous chapter, we saw how to work with a pipeline. Now we will launch
    a bounded number of them so that the Go scheduler can try to process requests
    in parallel. The idea here is to control the number of Goroutines, stop them gracefully
    when the app has finished, and maximize parallelism using a concurrent structure
    without race conditions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到了如何使用管道。现在我们将启动有限数量的管道，以便Go调度器可以尝试并行处理请求。这里的想法是控制Goroutines的数量，当应用程序完成时优雅地停止它们，并使用无竞态条件的并发结构来最大化并行性。
- en: The pipeline we will use is similar to the one we used in the previous chapter,
    where we were generating numbers, raising them to the power of 2, and summing
    the final results. In this case, we are going to pass strings to which we will
    append and prefix data.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要使用的管道与上一章中使用的类似，其中我们生成数字，将它们平方，并求和最终结果。在这种情况下，我们将传递字符串，我们将向其中追加和添加前缀数据。
