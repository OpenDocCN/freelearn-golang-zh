["```go\n//workers_pipeline.go file \npackage main \n\nimport \"testing\" \n\nfunc Test_Dispatcher(t *testing.T){ \n    //pasted code from main function \n bufferSize := 100\n var dispatcher Dispatcher = NewDispatcher(bufferSize)\n workers := 3\n for i := 0; i < workers; i++ \n    {\n var w WorkerLauncher = &PreffixSuffixWorker{\n prefixS: fmt.Sprintf(\"WorkerID: %d -> \", i), \nsuffixS: \" World\", \nid: i,\n}\n dispatcher.LaunchWorker(w)\n }\n //Simulate Requests\n requests := 10\n var wg \n    sync.WaitGroup\n wg.Add(requests) \n} \n\n```", "```go\nfor i := 0; i < requests; i++ { \n    req := Request{ \n        Data: fmt.Sprintf(\"(Msg_id: %d) -> Hello\", i), \n        handler: func(i interface{}) \n        { \n            s, ok := i.(string) \n            defer wg.Done() \n if !ok \n            {\n t.Fail()\n }\n ok, err := regexp.Match(\n`WorkerID\\: \\d* -\\> \\(MSG_ID: \\d*\\) -> [A-Z]*\\sWorld`,\n []byte(s)) \n if !ok || err != nil {\n t.Fail()\n } \n        }, \n    } \n    dispatcher.MakeRequest(req) \n} \n\n```", "```go\ngo test -v .\n=== RUN   Test_Dispatcher\n--- PASS: Test_Dispatcher (0.00s)\nPASS\nok\n\n```"]