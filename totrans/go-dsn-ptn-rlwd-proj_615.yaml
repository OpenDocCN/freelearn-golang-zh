- en: Description
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 描述
- en: 'If you remember from the previous explanation, the Observer pattern maintains
    a list of observers or subscribers that want to be notified of a particular event.
    In this case, each subscriber is going to run in a different Goroutine as well
    as the publisher. We will have new problems with building this structure:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还记得前面的解释，观察者模式维护一个观察者或订阅者的列表，这些观察者或订阅者希望被通知特定的事件。在这种情况下，每个订阅者将运行在不同的Goroutine中，以及发布者。我们将面临构建这个结构的新问题：
- en: Now, the access to the list of subscribers must be serialized. If we are reading
    the list with one Goroutine, we cannot be removing a subscriber from it or we
    will have a race.
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，对订阅者列表的访问必须进行序列化。如果我们用一个Goroutine读取列表，我们不能从列表中移除订阅者，否则会发生竞争。
- en: When a subscriber is removed, the subscriber's Goroutine must be closed too,
    or it will keep iterating forever and we will run into Goroutine leaks.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当移除订阅者时，订阅者的Goroutine也必须关闭，否则它将无限迭代，我们将会遇到Goroutine泄漏问题。
- en: When stopping the publisher, all subscribers must stop their Goroutines, too.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当停止发布者时，所有订阅者也必须停止它们的Goroutine。
