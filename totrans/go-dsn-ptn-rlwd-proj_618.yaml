- en: Acceptance criteria
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Requirements between this example and the one in the [Chapter 7](part0134_split_000.html#3VPBC2-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Chapter 7. Behavioral Patterns - Visitor, State, Mediator, and Observer Design
    Patterns") *, Behavioral patterns - Visitor, State, Mediator, and Observer Design
    Patterns* must not change. The objective in both examples is the same so the requirements
    must also be the same. In this case, our requirements are technical, so we actually
    need to add some more acceptance criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: We must have a publisher with a `PublishingCh` method that returns a channel
    to send messages through and triggers a `Notify` method on every observer subscribed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We must have a method to add new subscribers to the publisher.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We must have a method to remove new subscribers from the publisher.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We must have a method to stop a subscriber.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We must have a method to stop a `Publisher` interface that will also stop all
    subscribers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All inter Goroutine communication must be synchronized so that no Goroutine
    is locked waiting for a response. In such cases, an error is returned after the
    specified timeout period has passed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Well, these criteria seem quite daunting. We have left out some requirements
    that would add even more complexity, such as removing non-responding subscribers
    or checks to monitor that the publisher Goroutine is always on.
  prefs: []
  type: TYPE_NORMAL
