- en: Chapter 1.  Chat Application with Web Sockets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go is great for writing high-performance, concurrent server applications and
    tools, and the Web is the perfect medium over which to deliver them. It would
    be difficult these days to find a gadget that is not web-enabled and this allows
    us to build a single application that targets almost all platforms and devices.
  prefs: []
  type: TYPE_NORMAL
- en: Our first project will be a web-based chat application that allows multiple
    users to have a real-time conversation right in their web browser. Idiomatic Go
    applications are often composed of many packages, which are organized by having
    code in different folders, and this is also true of the Go standard library. We
    will start by building a simple web server using the `net/http` package, which
    will serve the HTML files. We will then go on to add support for web sockets through
    which our messages will flow.
  prefs: []
  type: TYPE_NORMAL
- en: In languages such as C#, Java, or Node.js, complex threading code and clever
    use of locks need to be employed in order to keep all clients in sync. As we will
    see, Go helps us enormously with its built-in channels and concurrency paradigms.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the `net/http` package to serve HTTP requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deliver template-driven content to users' browsers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Satisfy a Go interface to build our own `http.Handler` types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Go's goroutines to allow an application to perform multiple tasks concurrently
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use channels to share information between running goroutines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade HTTP requests to use modern features such as web sockets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add tracing to the application to better understand its inner working
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write a complete Go package using test-driven development practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return unexported types through exported interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete source code for this project can be found at [https://github.com/matryer/goblueprints/tree/master/chapter1/chat](https://github.com/matryer/goblueprints/tree/master/chapter1/chat).
    The source code was periodically committed so the history in GitHub actually follows
    the flow of this chapter too.
  prefs: []
  type: TYPE_NORMAL
