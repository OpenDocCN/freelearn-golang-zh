- en: Chapter 1.  Chat Application with Web Sockets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 使用 Web Sockets 的聊天应用
- en: Go is great for writing high-performance, concurrent server applications and
    tools, and the Web is the perfect medium over which to deliver them. It would
    be difficult these days to find a gadget that is not web-enabled and this allows
    us to build a single application that targets almost all platforms and devices.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Go 是编写高性能、并发服务器应用程序和工具的绝佳选择，而 Web 是传递它们的完美媒介。如今，很难找到不是 Web 兼容的小工具，这使得我们可以构建一个针对几乎所有平台和设备的单一应用程序。
- en: Our first project will be a web-based chat application that allows multiple
    users to have a real-time conversation right in their web browser. Idiomatic Go
    applications are often composed of many packages, which are organized by having
    code in different folders, and this is also true of the Go standard library. We
    will start by building a simple web server using the `net/http` package, which
    will serve the HTML files. We will then go on to add support for web sockets through
    which our messages will flow.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个项目将是一个基于 Web 的聊天应用，允许多个用户在他们的 Web 浏览器中进行实时对话。惯用的 Go 应用程序通常由许多包组成，这些包通过在不同的文件夹中放置代码来组织，Go
    标准库也是如此。我们将首先使用 `net/http` 包构建一个简单的 Web 服务器，该服务器将提供 HTML 文件。然后我们将继续添加对 Web Sockets
    的支持，我们的消息将通过它传递。
- en: In languages such as C#, Java, or Node.js, complex threading code and clever
    use of locks need to be employed in order to keep all clients in sync. As we will
    see, Go helps us enormously with its built-in channels and concurrency paradigms.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在 C#、Java 或 Node.js 等语言中，需要使用复杂的线程代码和巧妙的锁的使用来保持所有客户端的同步。正如我们将看到的，Go 通过其内置的通道和并发范式极大地帮助我们。
- en: 'In this chapter, you will learn how to:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何：
- en: Use the `net/http` package to serve HTTP requests
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `net/http` 包来处理 HTTP 请求
- en: Deliver template-driven content to users' browsers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向用户浏览器提供模板驱动的内容
- en: Satisfy a Go interface to build our own `http.Handler` types
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 满足 Go 接口以构建我们自己的 `http.Handler` 类型
- en: Use Go's goroutines to allow an application to perform multiple tasks concurrently
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Go 的 goroutines 允许应用程序并发执行多个任务
- en: Use channels to share information between running goroutines
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用通道在运行的 goroutines 之间共享信息
- en: Upgrade HTTP requests to use modern features such as web sockets
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 HTTP 请求升级以使用现代功能，如 Web Sockets
- en: Add tracing to the application to better understand its inner working
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向应用添加跟踪功能以更好地理解其内部工作原理
- en: Write a complete Go package using test-driven development practices
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用测试驱动开发实践编写一个完整的 Go 包
- en: Return unexported types through exported interfaces
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过导出接口返回未导出类型
- en: Note
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Complete source code for this project can be found at [https://github.com/matryer/goblueprints/tree/master/chapter1/chat](https://github.com/matryer/goblueprints/tree/master/chapter1/chat).
    The source code was periodically committed so the history in GitHub actually follows
    the flow of this chapter too.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目的完整源代码可以在[https://github.com/matryer/goblueprints/tree/master/chapter1/chat](https://github.com/matryer/goblueprints/tree/master/chapter1/chat)找到。源代码定期提交，因此
    GitHub 中的历史记录也遵循本章的流程。
