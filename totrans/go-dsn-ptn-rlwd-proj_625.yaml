- en: A simple web server
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个简单的 Web 服务器
- en: 'The first thing our chat application needs is a web server that has two main
    responsibilities:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们聊天应用需要的第一件事是一个具有两个主要职责的 Web 服务器：
- en: Serving the HTML and JavaScript chat clients that run in the user's browser
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为在用户浏览器中运行的 HTML 和 JavaScript 聊天客户端提供服务
- en: Accepting web socket connections to allow the clients to communicate
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接受 WebSocket 连接以允许客户端进行通信
- en: Note
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `GOPATH` environment variable is covered in detail in [Appendix](part0227_split_000.html#6OFFM1-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Appendix Appendix. Good Practices for a Stable Go Environment"), *Good Practices
    for a Stable Go environment*. Be sure to read that first if you need help getting
    set up.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`GOPATH` 环境变量在 [附录](part0227_split_000.html#6OFFM1-9c484ed022e64a0fb0e1aebf8e05d4fd
    "附录 附录. 稳定 Go 环境的良好实践") 中有详细的介绍，*稳定 Go 环境的良好实践*。如果你需要帮助设置环境，请务必先阅读它。'
- en: 'Create a `main.go` file inside a new folder called `chat` in your `GOPATH`
    and add the following code:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 `GOPATH` 中创建一个名为 `chat` 的新文件夹，并在其中创建一个 `main.go` 文件，并添加以下代码：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is a complete, albeit simple, Go program that will:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个完整、尽管简单，的 Go 程序，它将：
- en: Listen to the root path using the `net/http` package
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `net/http` 包监听根路径
- en: Write out the hardcoded HTML when a request is made
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当请求时写入硬编码的 HTML
- en: Start a web server on port `:8080` using the `ListenAndServe` method
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `ListenAndServe` 方法在端口 `:8080` 上启动 Web 服务器
- en: The `http.HandleFunc` function maps the path pattern `/` to the function we
    pass as the second argument, so when the user hits `http://localhost:8080/`, the
    function will be executed. The function signature of `func(w http.ResponseWriter,
    r *http.Request)` is a common way of handling HTTP requests throughout the Go
    standard library.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`http.HandleFunc` 函数将路径模式 `/` 映射到我们作为第二个参数传递的函数，因此当用户访问 `http://localhost:8080/`
    时，该函数将被执行。`func(w http.ResponseWriter, r *http.Request)` 的函数签名是 Go 标准库中处理 HTTP
    请求的常见方式。'
- en: Tip
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: We are using `package main` because we want to build and run our program from
    the command line. However, if we were building a reusable chatting package, we
    might choose to use something different, such as `package chat`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `package main` 是因为我们想从命令行构建和运行我们的程序。然而，如果我们正在构建一个可重用的聊天包，我们可能会选择使用不同的包名，例如
    `package chat`。
- en: 'In a terminal, run the program by navigating to the `main.go` file you just
    created and execute the following command:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中，通过导航到您刚刚创建的 `main.go` 文件并执行以下命令来运行程序：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The `go run` command is a helpful shortcut for running simple Go programs. It
    builds and executes a binary in one go. In the real world, you usually use `go
    build` yourself to create and distribute binaries. We will explore this later.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`go run` 命令是运行简单 Go 程序的有用快捷方式。它一次构建并执行一个二进制文件。在现实世界中，你通常使用 `go build` 自己创建和分发二进制文件。我们稍后会探讨这一点。'
- en: Open the browser and type `http://localhost:8080` to see the **Let's chat!**
    message.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器并输入 `http://localhost:8080` 以查看 **让我们聊天** 消息。
- en: Having the HTML code embedded within our Go code like this works, but it is
    pretty ugly and will only get worse as our projects grow. Next, we will see how
    templates can help us clean this up.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 Go 代码中嵌入 HTML 代码如这样是可行的，但看起来相当丑陋，随着我们项目的增长，情况只会变得更糟。接下来，我们将看到模板如何帮助我们清理这个问题。
