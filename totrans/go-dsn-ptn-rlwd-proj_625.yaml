- en: A simple web server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing our chat application needs is a web server that has two main
    responsibilities:'
  prefs: []
  type: TYPE_NORMAL
- en: Serving the HTML and JavaScript chat clients that run in the user's browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accepting web socket connections to allow the clients to communicate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `GOPATH` environment variable is covered in detail in [Appendix](part0227_split_000.html#6OFFM1-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Appendix Appendix. Good Practices for a Stable Go Environment"), *Good Practices
    for a Stable Go environment*. Be sure to read that first if you need help getting
    set up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `main.go` file inside a new folder called `chat` in your `GOPATH`
    and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a complete, albeit simple, Go program that will:'
  prefs: []
  type: TYPE_NORMAL
- en: Listen to the root path using the `net/http` package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write out the hardcoded HTML when a request is made
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start a web server on port `:8080` using the `ListenAndServe` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `http.HandleFunc` function maps the path pattern `/` to the function we
    pass as the second argument, so when the user hits `http://localhost:8080/`, the
    function will be executed. The function signature of `func(w http.ResponseWriter,
    r *http.Request)` is a common way of handling HTTP requests throughout the Go
    standard library.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are using `package main` because we want to build and run our program from
    the command line. However, if we were building a reusable chatting package, we
    might choose to use something different, such as `package chat`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a terminal, run the program by navigating to the `main.go` file you just
    created and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `go run` command is a helpful shortcut for running simple Go programs. It
    builds and executes a binary in one go. In the real world, you usually use `go
    build` yourself to create and distribute binaries. We will explore this later.
  prefs: []
  type: TYPE_NORMAL
- en: Open the browser and type `http://localhost:8080` to see the **Let's chat!**
    message.
  prefs: []
  type: TYPE_NORMAL
- en: Having the HTML code embedded within our Go code like this works, but it is
    pretty ugly and will only get worse as our projects grow. Next, we will see how
    templates can help us clean this up.
  prefs: []
  type: TYPE_NORMAL
