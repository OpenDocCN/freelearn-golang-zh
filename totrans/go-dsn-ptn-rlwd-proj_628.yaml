- en: Modeling a chat room and clients on the server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All users (clients) of our chat application will automatically be placed in
    one big public room where everyone can chat with everyone else. The `room` type
    will be responsible for managing client connections and routing messages in and
    out, while the `client` type represents the connection to a single client.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go refers to classes as types and instances of those classes as objects.
  prefs: []
  type: TYPE_NORMAL
- en: To manage our web sockets, we are going to use one of the most powerful aspects
    of the Go community open source third-party packages. Every day, new packages
    solving real-world problems are released, ready for you to use in your own projects,
    and they even allow you to add features, report and fix bugs, and get support.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is often unwise to reinvent the wheel unless you have a very good reason.
    So before embarking on building a new package, it is worth searching for any existing
    projects that might have already solved your very problem. If you find one similar
    project that doesn't quite satisfy your needs, consider contributing to the project
    and adding features. Go has a particularly active open source community (remember
    that Go itself is open source) that is always ready to welcome new faces or avatars.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to use Gorilla Project's `websocket` package to handle our server-side
    sockets rather than write our own. If you're curious about how it works, head
    over to the project home page on GitHub, [https://github.com/gorilla/websocket](https://github.com/gorilla/websocket),
    and browse the open source code.
  prefs: []
  type: TYPE_NORMAL
