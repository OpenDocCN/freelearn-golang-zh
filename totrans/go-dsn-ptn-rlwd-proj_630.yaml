- en: Modeling a room
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模拟一个房间
- en: 'We need a way for clients to join and leave rooms in order to ensure that the `c.room.forward
    <- msg` code in the preceding section actually forwards the message to all the
    clients. To ensure that we are not trying to access the same data at the same
    time, a sensible approach is to use two channels: one that will add a client to
    the room and another that will remove it. Let''s update our `room.go` code to
    look like this:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一种方式让客户端能够加入和离开房间，以确保上一节中的 `c.room.forward <- msg` 代码实际上将消息转发给所有客户端。为了确保我们不会同时尝试访问相同的数据，一个合理的方法是使用两个通道：一个用于将客户端添加到房间，另一个用于将其移除。让我们更新我们的
    `room.go` 代码，使其看起来像这样：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We have added three fields: two channels and a map. The `join` and `leave`
    channels exist simply to allow us to safely add and remove clients from the `clients`
    map. If we were to access the map directly, it is possible that two goroutines
    running concurrently might try to modify the map at the same time, resulting in
    corrupt memory or unpredictable state.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了三个字段：两个通道和一个地图。`join` 和 `leave` 通道的存在只是为了让我们能够安全地向 `clients` 地图中添加和移除客户端。如果我们直接访问地图，那么可能两个并发运行的
    goroutine 会尝试同时修改地图，这可能导致内存损坏或不可预测的状态。
