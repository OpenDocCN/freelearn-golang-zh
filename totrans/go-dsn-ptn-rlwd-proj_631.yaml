- en: Concurrency programming using idiomatic Go
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we get to use an extremely powerful feature of Go's concurrency offerings
    the `select` statement. We can use `select` statements whenever we need to synchronize
    or modify shared memory, or take different actions depending on the various activities
    within our channels.
  prefs: []
  type: TYPE_NORMAL
- en: 'Beneath the `room` structure, add the following `run` method that contains
    three `select` cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Although this might seem like a lot of code to digest, once we break it down
    a little, we will see that it is fairly simple, although extremely powerful. The
    top `for` loop indicates that this method will run forever, until the program
    is terminated. This might seem like a mistake, but remember, if we run this code
    as a goroutine, it will run in the background, which won't block the rest of our
    application. The preceding code will keep watching the three channels inside our
    room: `join`, `leave`, and `forward`. If a message is received on any of those
    channels, the `select` statement will run the code for that particular case.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is important to remember that it will only run one block of case code at
    a time. This is how we are able to synchronize to ensure that our `r.clients`
    map is only ever modified by one thing at a time.
  prefs: []
  type: TYPE_NORMAL
- en: If we receive a message on the `join` channel, we simply update the `r.clients`
    map to keep a reference of the client that has joined the room. Notice that we
    are setting the value to `true`. We are using the map more like a slice, but do
    not have to worry about shrinking the slice as clients come and go through time
    setting the value to `true` is just a handy, low-memory way of storing the reference.
  prefs: []
  type: TYPE_NORMAL
- en: If we receive a message on the `leave` channel, we simply delete the `client`
    type from the map, and close its `send` channel. If we receive a message on the `forward`
    channel, we iterate over all the clients and add the message to each client's `send`
    channel. Then, the `write` method of our client type will pick it up and send
    it down the socket to the browser.
  prefs: []
  type: TYPE_NORMAL
