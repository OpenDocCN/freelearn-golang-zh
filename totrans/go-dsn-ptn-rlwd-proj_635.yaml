- en: Building an HTML and JavaScript chat client
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个 HTML 和 JavaScript 聊天客户端
- en: In order for the users of our chat application to interact with the server and
    therefore other users, we need to write some client-side code that makes use of
    the web sockets found in modern browsers. We are already delivering HTML content
    via the template when users hit the root of our application, so we can enhance
    that.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让我们的聊天应用的用户能够与服务器以及其他用户进行交互，我们需要编写一些客户端代码，利用现代浏览器中找到的 WebSockets。当用户访问我们应用的根目录时，我们已经在通过模板传递
    HTML 内容，因此我们可以增强这一点。
- en: 'Update the `chat.html` file in the `templates` folder with the following markup:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `templates` 文件夹中的 `chat.html` 文件进行以下标记的更新：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding HTML will render a simple web form on the page containing a text
    area and a **Send** button this is how our users will submit messages to the server.
    The `messages` element in the preceding code will contain the text of the chat
    messages so that all the users can see what is being said. Next, we need to add
    some JavaScript to add some functionality to our page. Underneath the `form` tag,
    above the closing `</body>` tag, insert the following code:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 HTML 将在页面上渲染一个简单的网页表单，包含一个文本区域和一个 **发送** 按钮，这是我们的用户将消息提交给服务器的方式。前述代码中的 `messages`
    元素将包含聊天消息的文本，以便所有用户都能看到正在说的话。接下来，我们需要添加一些 JavaScript 代码来为我们的页面添加一些功能。在 `form`
    标签下方，在关闭 `</body>` 标签上方，插入以下代码：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `socket = new WebSocket("ws://localhost:8080/room")` line is where we open
    the socket and add event handlers for two key events: `onclose` and `onmessage`.
    When the socket receives a message, we use jQuery to append the message to the
    list element and thus present it to the user.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`socket = new WebSocket("ws://localhost:8080/room")` 这一行是打开套接字并为两个关键事件 `onclose`
    和 `onmessage` 添加事件处理程序的地方。当套接字接收到消息时，我们使用 jQuery 将消息追加到列表元素中，从而将其展示给用户。'
- en: Submitting the HTML form triggers a call to `socket.send`, which is how we send
    messages to the server.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 提交 HTML 表单会触发对 `socket.send` 的调用，这是我们向服务器发送消息的方式。
- en: Build and run the program again to ensure the templates recompile so these changes
    are represented.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 再次构建并运行程序以确保模板重新编译，以便反映这些更改。
- en: 'Navigate to `http://localhost:8080/` in two separate browsers (or two tabs
    of the same browser) and play with the application. You will notice that messages
    sent from one client appear instantly in the other clients:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在两个不同的浏览器（或同一浏览器的两个标签页）中导航到 `http://localhost:8080/` 并与该应用互动。您会注意到从一个客户端发送的消息会立即出现在另一个客户端：
- en: '![Building an HTML and JavaScript chat client](img/00044.jpeg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![构建一个 HTML 和 JavaScript 聊天客户端](img/00044.jpeg)'
