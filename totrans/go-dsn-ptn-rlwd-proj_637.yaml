- en: Tracing code to get a look under the hood
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跟踪代码以窥探内部结构
- en: The only way we will know that our application is working is by opening two
    or more browsers and using our UI to send messages. In other words, we are manually
    testing our code. This is fine for experimental projects such as our chat application
    or small projects that aren't expected to grow, but if our code is to have a longer
    life or be worked on by more than one person, manual testing of this kind becomes
    a liability. We are not going to tackle **Test-driven Development** (**TDD**)
    for our chat program, but we should explore another useful debugging technique
    called **tracing**.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道我们的应用程序是否正常工作的唯一方法是通过打开两个或更多浏览器并使用我们的用户界面发送消息。换句话说，我们正在手动测试我们的代码。这对于像我们的聊天应用程序或预期不会扩大的小型项目来说是可行的，但如果我们的代码需要更长的生命周期或由多个人共同工作，这种手动测试就变成了一个负担。我们不会在我们的聊天程序中采用**测试驱动开发**（**TDD**），但我们应该探索另一种有用的调试技术，称为**跟踪**。
- en: Tracing is a practice by which we log or print key steps in the flow of a program
    to make what is going on under the covers visible. In the previous section, we
    added a `log.Println` call to output the address that the chat program was binding
    to. In this section, we are going to formalize this and write our own complete
    tracing package.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪是一种实践，通过它我们在程序的流程中记录或打印关键步骤，以便使底层的操作变得可见。在前一节中，我们添加了一个`log.Println`调用，以输出聊天程序所绑定的地址。在本节中，我们将正式化这一过程，并编写我们自己的完整跟踪包。
- en: We are going to explore TDD practices when writing our tracing code because
    TDD is a perfect example of a package that we are likely to reuse, add to, share,
    and hopefully, even open source.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们编写跟踪代码时，我们将探索TDD实践，因为TDD是一个我们可能会重用、添加到、共享，甚至希望开源的完美示例。
