- en: Writing a package using TDD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Packages in Go are organized into folders, with one package per folder. It is
    a build error to have differing package declarations within the same folder because
    all sibling files are expected to contribute to a single package. Go has no concept
    of subpackages, which means nested packages (in nested folders) exist only for
    aesthetic or informational reasons but do not inherit any functionality or visibility
    from super packages. In our chat application, all of our files contributed to
    the `main` package because we wanted to build an executable tool. Our tracing
    package will never be run directly, so it can and should use a different package
    name. We will also need to think about the **Application Programming Interface**
    (**API**) of our package, considering how to model a package so that it remains
    as extensible and flexible as possible for users. This includes the fields, functions,
    methods, and types that should be exported (visible to the user) and remain hidden
    for simplicity's sake.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go uses capitalization of names to denote which items are exported such that
    names that begin with a capital letter (for example, `Tracer`) are visible to
    users of a package, and names that begin with a lowercase letter (for example, `templateHandler`)
    are hidden or private.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new folder called `trace`, which will be the name of our tracing package,
    alongside the `chat` folder so that the folder structure now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we jump into code, let''s agree on some design goals for our package
    by which we can measure success:'
  prefs: []
  type: TYPE_NORMAL
- en: The package should be easy to use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit tests should cover the functionality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users should have the flexibility to replace the tracer with their own implementation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
