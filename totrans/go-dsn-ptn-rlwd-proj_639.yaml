- en: Interfaces
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接口
- en: Interfaces in Go are an extremely powerful language feature that allows us to
    define an API without being strict or specific on the implementation details.
    Wherever possible, describing the basic building blocks of your packages using
    interfaces usually ends up paying dividends down the road, and this is where we
    will start for our tracing package.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Go中的接口是一个非常强大的语言特性，它允许我们定义一个API，而不必在实现细节上过于严格或具体。尽可能使用接口来描述您包的基本构建块通常会在未来带来回报，这就是我们将从我们的跟踪包开始的地方。
- en: 'Create a new file called `tracer.go` inside the `trace` folder and write the
    following code:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在`trace`文件夹内创建一个名为`tracer.go`的新文件，并编写以下代码：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first thing to notice is that we have defined our package as `trace`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要注意的是，我们已经将我们的包定义为`trace`。
- en: Note
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: While it is a good practice to have the folder name match the package name,
    Go tools do not enforce it, which means you are free to name them differently
    if it makes sense. Remember, when people import your package, they will type the
    name of the folder, and if suddenly a package with a different name is imported,
    it could get confusing.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然将文件夹名称与包名称匹配是一种良好的实践，但Go工具并不强制执行这一规定，这意味着如果这样做有意义，您可以自由地给它们不同的名称。记住，当人们导入您的包时，他们将输入文件夹的名称，如果突然导入了一个不同名称的包，可能会造成混淆。
- en: Our `Tracer` type (the capital `T` means we intend this to be a publicly visible
    type) is an interface that describes a single method called `Trace`. The `...interface{}`
    argument type states that our `Trace` method will accept zero or more arguments
    of any type. You might think that this is a redundant provision as the method
    should just take a single string (we want to just trace out some string of characters,
    don't we?). However, consider functions such as `fmt.Sprint` and `log.Fatal`,
    both of which follow a pattern littered throughout Go's standard library that
    provides a helpful shortcut when trying to communicate multiple things in one
    go. Wherever possible, we should follow such patterns and practices because we
    want our own APIs to be familiar and clear to the Go community.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`Tracer`类型（大写`T`表示我们打算将其作为一个公开可见的类型）是一个接口，它描述了一个名为`Trace`的单个方法。`...interface{}`参数类型表示我们的`Trace`方法将接受零个或多个任何类型的参数。您可能会认为这是一个冗余的规定，因为该方法应该只接受一个字符串（我们不是只想跟踪一些字符吗？）。然而，考虑一下像`fmt.Sprint`和`log.Fatal`这样的函数，它们都遵循Go标准库中普遍存在的模式，当试图一次性传达多个事物时，这些模式提供了有用的快捷方式。尽可能遵循这样的模式和惯例，因为我们希望我们的API对Go社区既熟悉又清晰。
