["```go\ntype room struct { \n  // forward is a channel that holds incoming messages \n  // that should be forwarded to the other clients. \n  forward chan []byte \n  // join is a channel for clients wishing to join the room. \n  join chan *client \n  // leave is a channel for clients wishing to leave the room. \n  leave chan *client \n  // clients holds all current clients in this room. \n  clients map[*client]bool  \n  // tracer will receive trace information of activity \n  // in the room. \n  tracer trace.Tracer \n} \nfunc (r *room) run() { \n  for { \n    select { \n    case client := <-r.join: \n      // joining \n      r.clients[client] = true \n      r.tracer.Trace(\"New client joined\") \n    case client := <-r.leave: \n      // leaving \n      delete(r.clients, client) \n      close(client.send) \n      r.tracer.Trace(\"Client left\") \n    case msg := <-r.forward: \n      r.tracer.Trace(\"Message received: \", string(msg)) \n      // forward message to all clients \n      for client := range r.clients { \n        client.send <- msg \n        r.tracer.Trace(\" -- sent to client\") \n      } \n    } \n  } \n}  \n\n```", "```go\nr := newRoom() \nr.tracer = trace.New(os.Stdout) \n\n```"]