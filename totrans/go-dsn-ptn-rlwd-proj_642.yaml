- en: Using our new trace package
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用我们的新trace包
- en: Now that we have completed the first version of our `trace` package, we can
    use it in our chat application in order to better understand what is going on
    when users send messages through the user interface.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了我们`trace`包的第一个版本，我们可以在我们的聊天应用中使用它，以便更好地理解当用户通过用户界面发送消息时发生了什么。
- en: In `room.go`, let's import our new package and make some calls to the `Trace`
    method. The path to the `trace` package we just wrote will depend on your `GOPATH`
    environment variable because the import path is relative to the `$GOPATH/src`
    folder. So if you create your `trace` package in `$GOPATH/src/mycode/trace`, then
    you would need to import `mycode/trace`.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在`room.go`中，让我们导入我们的新包，并对`Trace`方法进行一些调用。我们刚刚编写的`trace`包的路径将取决于你的`GOPATH`环境变量，因为导入路径是相对于`$GOPATH/src`文件夹的。所以如果你在`$GOPATH/src/mycode/trace`中创建你的`trace`包，那么你需要导入`mycode/trace`。
- en: 'Update the `room` type and the `run()` method like this:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式更新`room`类型和`run()`方法：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We added a `trace.Tracer` field to our `room` type and then made periodic calls
    to the `Trace` method peppered throughout the code. If we run our program and
    try to send messages, you''ll notice that the application panics because the `tracer`
    field is `nil`. We can remedy this for now by making sure we create and assign
    an appropriate object when we create our `room` type. Update the `main.go` file
    to do this:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在我们的`room`类型中添加了一个`trace.Tracer`字段，然后在代码中周期性地调用`Trace`方法。如果我们运行我们的程序并尝试发送消息，你会注意到应用程序崩溃，因为`tracer`字段是`nil`。我们可以通过确保在我们创建`room`类型时创建并分配一个适当的对象来解决这个问题。更新`main.go`文件以执行此操作：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We are using our `New` method to create an object that will send the output
    to the `os.Stdout` standard output pipe (this is a technical way of saying we
    want it to print the output to our terminal).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用我们的`New`方法创建一个对象，该对象将输出发送到`os.Stdout`标准输出管道（这是一种技术性的说法，意思是我们要将其输出打印到我们的终端）。
- en: 'Rebuild and run the program and use two browsers to play with the application,
    and notice that the terminal now has some interesting trace information for us:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 重新构建并运行程序，并使用两个浏览器来玩转应用程序，注意现在终端有一些有趣的跟踪信息供我们查看：
- en: '![Using our new trace package](img/00045.jpeg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![使用我们的新trace包](img/00045.jpeg)'
- en: Now we are able to use the debug information to get an insight into what the
    application is doing, which will assist us when developing and supporting our
    project.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们能够使用调试信息来深入了解应用程序正在做什么，这将有助于我们在开发和支持我们的项目时。
