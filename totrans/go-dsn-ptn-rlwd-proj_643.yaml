- en: Making tracing optional
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使跟踪可选
- en: Once the application is released, the sort of tracing information we are generating
    will be pretty useless if it's just printed out to some terminal somewhere, or
    even worse, if it creates a lot of noise for our system administrators. Also,
    remember that when we don't set a tracer for our `room` type, our code panics,
    which isn't a very user-friendly situation. To resolve these two issues, we are
    going to enhance our `trace` package with a `trace.Off()` method that will return
    an object that satisfies the `Tracer` interface but will not do anything when
    the `Trace` method is called.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序发布，如果我们只是将生成的跟踪信息打印到某个终端，或者更糟糕的是，如果它为我们的系统管理员创建了很多噪音，那么这种跟踪信息将非常无用。此外，记住当我们没有为我们的`room`类型设置tracer时，我们的代码会panic，这不是一个用户友好的情况。为了解决这两个问题，我们将通过添加一个`trace.Off()`方法来增强我们的`trace`包，该方法将返回一个满足`Tracer`接口的对象，但在调用`Trace`方法时不会执行任何操作。
- en: 'Let''s add a test that calls the `Off` function to get a silent tracer before
    making a call to `Trace` to ensure the code doesn''t panic. Since the tracing
    won''t happen, that''s all we can do in our test code. Add the following test
    function to the `tracer_test.go` file:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个测试，在调用`Trace`之前调用`Off`函数以获取一个静默的tracer，以确保代码不会panic。由于不会发生跟踪，我们可以在测试代码中做的就只有这些。将以下测试函数添加到`tracer_test.go`文件中：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To make it pass, add the following code to the `tracer.go` file:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使其通过，请将以下代码添加到`tracer.go`文件中：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Our `nilTracer` struct has defined a `Trace` method that does nothing, and a
    call to the `Off()` method will create a new `nilTracer` struct and return it.
    Notice that our `nilTracer` struct differs from our `tracer` struct in that it
    doesn't take an `io.Writer` interface; it doesn't need one because it isn't going
    to write anything.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`nilTracer`结构体定义了一个不执行任何操作的`Trace`方法，调用`Off()`方法将创建一个新的`nilTracer`结构体并返回它。请注意，我们的`nilTracer`结构体与我们的`tracer`结构体不同，因为它不接收`io.Writer`接口；它不需要它，因为它不会写入任何内容。
- en: 'Now let''s solve our second problem by updating our `newRoom` method in the
    `room.go` file:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过更新`room.go`文件中的`newRoom`方法来解决我们的第二个问题：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'By default, our `room` type will be created with a `nilTracer` struct and any
    calls to `Trace` will just be ignored. You can try this out by removing the `r.tracer
    = trace.New(os.Stdout)` line from the `main.go` file: notice that nothing gets
    written to the terminal when you use the application and there is no panic.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，我们的`room`类型将使用`nilTracer`结构体创建，任何对`Trace`的调用都将被忽略。你可以通过从`main.go`文件中移除`r.tracer
    = trace.New(os.Stdout)`行来尝试这一点：注意当你使用应用程序时，终端上没有任何内容被写入，也没有发生panic。
