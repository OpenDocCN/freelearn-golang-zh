- en: Clean package APIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A quick glance at the API (in this context, the exposed variables, methods,
    and types) for our `trace` package highlights that a simple and obvious design
    has emerged:'
  prefs: []
  type: TYPE_NORMAL
- en: The `New()` - method-creates a new instance of a Tracer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Off()` - method-gets a Tracer that does nothing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Tracer` interface - describes the methods Tracer objects will implement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I would be very confident to give this package to a Go programmer without any
    documentation or guidelines, and I'm pretty sure they would know what do to with
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Go, adding documentation is as simple as adding comments to the line before
    each item. The blog post on the subject is a worthwhile read ([http://blog.golang.org/godoc-documenting-go-code](http://blog.golang.org/godoc-documenting-go-code)),
    where you can see a copy of the hosted source code for `tracer.go` that is an
    example of how you might annotate the `trace` package. For more information, refer
    to [https://github.com/matryer/goblueprints/blob/master/chapter1/trace/tracer.go](https://github.com/matryer/goblueprints/blob/master/chapter1/trace/tracer.go).
  prefs: []
  type: TYPE_NORMAL
