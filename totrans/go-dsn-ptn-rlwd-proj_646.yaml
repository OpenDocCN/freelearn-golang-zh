- en: Chapter 2.  Adding User Accounts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章：添加用户账户
- en: The chat application we built in the previous chapter focused on high performance
    transmission of messages from the clients to the server and back again. However,
    the way things stand, our users have no way of knowing who they would be talking
    to. One solution to this problem is building some kind of sign-up and login functionality
    and letting our users create accounts and authenticate themselves before they
    can open the chat page.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前一章构建的聊天应用程序专注于从客户端到服务器以及从服务器到客户端的高性能消息传输。然而，目前的情况是，我们的用户无法知道他们将和谁交谈。解决这个问题的方法之一是构建某种注册和登录功能，并让我们的用户在打开聊天页面之前创建账户并验证自己。
- en: Whenever we are about to build something from scratch, we must ask ourselves
    how others have solved this problem before (it is extremely rare to encounter
    genuinely original problems) and whether any open solutions or standards already
    exist that we can make use of. Authorization and authentication can hardly be
    considered new problems, especially in the world of the Web, with many different
    protocols out there to choose from. So how do we decide the best option to pursue?
    As always, we must look at this question from the point of view of the user.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们准备从头开始构建某样东西时，我们必须问自己，在别人之前是如何解决这个问题（真正原创的问题极其罕见）的，以及是否已经存在我们可以利用的开放解决方案或标准。授权和认证几乎不能被认为是新问题，尤其是在网络世界中，有许多不同的协议可供选择。那么我们如何决定最佳选择呢？一如既往，我们必须从用户的角度来看待这个问题。
- en: A lot of websites these days allow you to sign in using your accounts that exist
    elsewhere on a variety of social media or community websites. This saves users
    the tedious job of entering all of their account information over and over again
    as they decide to try out different products and services. It also has a positive
    effect on the conversion rates for new sites.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，许多网站允许您使用存在于各种社交媒体或社区网站上的账户进行登录。这节省了用户在决定尝试不同产品和服务时反复输入所有账户信息的繁琐工作。这对新网站的转化率也有积极影响。
- en: In this chapter, we will enhance our chat codebase to add authorization, which
    will allow our users to sign in using Google, Facebook, or GitHub, and you'll
    see how easy it is to add other sign-in portals too. In order to join the chat,
    users must first sign in. Following this, we will use the authorized data to augment
    our user experience so everyone knows who is in the room and who said what.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将增强我们的聊天代码库以添加授权功能，这将允许我们的用户使用Google、Facebook或GitHub进行登录，您将看到添加其他登录端口是多么简单。为了加入聊天，用户必须首先登录。在此之后，我们将使用授权数据来增强用户体验，以便每个人都知道房间里是谁，谁说了什么。
- en: 'In this chapter, you will learn to:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习到：
- en: Use the decorator pattern to wrap `http.Handler` types in order to add additional
    functionality to handlers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用装饰器模式将`http.Handler`类型包装起来，以便为处理器添加额外功能
- en: Serve HTTP endpoints with dynamic paths
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用动态路径提供HTTP端点
- en: Use the `gomniauth` open source project to access authentication services
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`gomniauth`开源项目访问认证服务
- en: Get and set cookies using the `http` package
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`http`包获取和设置cookie
- en: Encode objects as Base64 and back to normal again
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将对象编码为Base64，然后再将其转换回正常格式
- en: Send and receive JSON data over a web socket
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Websocket发送和接收JSON数据
- en: Give different types of data to templates
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向模板提供不同类型的数据
- en: Work with the channels of your own types
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用您自己的类型的通道进行工作
