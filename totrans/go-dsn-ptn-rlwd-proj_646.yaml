- en: Chapter 2.  Adding User Accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The chat application we built in the previous chapter focused on high performance
    transmission of messages from the clients to the server and back again. However,
    the way things stand, our users have no way of knowing who they would be talking
    to. One solution to this problem is building some kind of sign-up and login functionality
    and letting our users create accounts and authenticate themselves before they
    can open the chat page.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever we are about to build something from scratch, we must ask ourselves
    how others have solved this problem before (it is extremely rare to encounter
    genuinely original problems) and whether any open solutions or standards already
    exist that we can make use of. Authorization and authentication can hardly be
    considered new problems, especially in the world of the Web, with many different
    protocols out there to choose from. So how do we decide the best option to pursue?
    As always, we must look at this question from the point of view of the user.
  prefs: []
  type: TYPE_NORMAL
- en: A lot of websites these days allow you to sign in using your accounts that exist
    elsewhere on a variety of social media or community websites. This saves users
    the tedious job of entering all of their account information over and over again
    as they decide to try out different products and services. It also has a positive
    effect on the conversion rates for new sites.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will enhance our chat codebase to add authorization, which
    will allow our users to sign in using Google, Facebook, or GitHub, and you'll
    see how easy it is to add other sign-in portals too. In order to join the chat,
    users must first sign in. Following this, we will use the authorized data to augment
    our user experience so everyone knows who is in the room and who said what.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn to:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the decorator pattern to wrap `http.Handler` types in order to add additional
    functionality to handlers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serve HTTP endpoints with dynamic paths
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `gomniauth` open source project to access authentication services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get and set cookies using the `http` package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encode objects as Base64 and back to normal again
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Send and receive JSON data over a web socket
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Give different types of data to templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Work with the channels of your own types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
