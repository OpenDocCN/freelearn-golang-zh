- en: Making a pretty social sign-in page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we haven't paid much attention to making our application look nice;
    after all, this book is about Go and not user interface development. However,
    there is no excuse for building ugly apps, and so we will build a social sign-in
    page that is as pretty as it is functional.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap is a frontend framework for developing responsive projects on the
    Web. It provides CSS and JavaScript code that solve many user interface problems
    in a consistent and good-looking way. While sites built using Bootstrap tend to
    look the same (although there are a plenty of ways in which the UI can be customized),
    it is a great choice for early versions of apps or for developers who don't have
    access to designers.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you build your application using the semantic standards set forth by Bootstrap,
    it will become easy for you to make a Bootstrap theme for your site or application,
    and you know it will slot right into your code.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the version of Bootstrap hosted on a CDN so we don't have to worry
    about downloading and serving our own version through our chat application. This
    means that in order to render our pages properly, we will need an active Internet
    connection even during development.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you prefer to download and host your own copy of Bootstrap, you can do so.
    Keep the files in an `assets` folder and add the following call to your `main`
    function (it uses `http.Handle` to serve the assets via your application):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice how the `http.StripPrefix` and `http.FileServer` functions return objects
    that satisfy the `http.Handler` interface as per the decorator pattern that we
    implement with our `MustAuth` helper function.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `main.go`, let''s add an endpoint for the login page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Obviously, we do not want to use the `MustAuth` method for our login page because
    it will cause an infinite redirection loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file called `login.html` inside our `templates` folder and insert
    the following HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart the web server and navigate to `http://localhost:8080/login`. You will
    notice that it now displays our **Sign in** page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making a pretty social sign-in page](img/00047.jpeg)'
  prefs: []
  type: TYPE_IMG
