- en: Logging in
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 登录
- en: 'Now that we have configured Gomniauth, we need to redirect users to the provider''s
    authorization page when they land on our `/auth/login/{provider}` path. We just
    have to update our `loginHandler` function in `auth.go`:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置了Gomniauth，当用户访问我们的`/auth/login/{provider}`路径时，我们需要将用户重定向到提供者的授权页面。我们只需更新`auth.go`中的`loginHandler`函数：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We do two main things here. First, we use the `gomniauth.Provider` function
    to get the provider object that matches the object specified in the URL (such
    as `google` or `github`). Then, we use the `GetBeginAuthURL` method to get the
    location where we must send users to in order to start the authorization process.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里做两件主要的事情。首先，我们使用`gomniauth.Provider`函数获取与URL中指定的对象（如`google`或`github`）匹配的提供者对象。然后，我们使用`GetBeginAuthURL`方法获取我们必须将用户发送到的位置，以便开始授权过程。
- en: Note
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `GetBeginAuthURL(nil, nil)` arguments are for the state and options respectively,
    which we are not going to use for our chat application.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`GetBeginAuthURL(nil, nil)`参数分别用于状态和选项，我们不会在我们的聊天应用程序中使用它们。'
- en: The first argument is a state map of data that is encoded and signed and sent
    to the authentication provider. The provider doesn't do anything with the state;
    it just sends it back to our callback endpoint. This is useful if, for example,
    we want to redirect the user back to the original page they were trying to access
    before the authentication process intervened. For our purpose, we have only the
    `/chat` endpoint, so we don't need to worry about sending any state.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是一个编码并签名后的数据状态映射，该映射被发送到认证提供者。提供者不对状态做任何处理；它只是将其发送回我们的回调端点。如果，例如，我们想在认证过程介入之前将用户重定向回他们试图访问的原始页面，这很有用。对于我们的目的，我们只有`/chat`端点，所以我们不需要担心发送任何状态。
- en: The second argument is a map of additional options that will be sent to the
    authentication provider, which somehow modifies the behavior of the authentication
    process. For example, you can specify your own `scope` parameter, which allows
    you to make a request for permission to access additional information from the
    provider. For more information about the available options, search for OAuth2
    on the Internet or read the documentation for each provider, as these values differ
    from service to service.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个参数是一个包含额外选项的映射，这些选项将被发送到认证提供者，从而以某种方式修改认证过程的行为。例如，您可以指定自己的`scope`参数，这允许您请求访问提供者额外信息的权限。有关可用选项的更多信息，请在互联网上搜索OAuth2，或阅读每个提供者的文档，因为这些值因服务而异。
- en: If our code gets no error from the `GetBeginAuthURL` call, we simply redirect
    the user's browser to the returned URL.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的代码从`GetBeginAuthURL`调用中没有收到错误，我们只需将用户的浏览器重定向到返回的URL。
- en: If errors occur, we use the `http.Error` function to write the error message
    out with a `non-200` status code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发生错误，我们使用`http.Error`函数以`非200`状态码输出错误信息。
- en: 'Rebuild and run the chat application:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 重建并运行聊天应用程序：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: We will continue to stop, rebuild, and run our projects manually throughout
    this book, but there are some tools that will take care of this for you by watching
    for changes and restarting Go applications automatically. If you're interested
    in such tools, check out [https://github.com/pilu/fresh](https://github.com/pilu/fresh)
    and [https://github.com/codegangsta/gin](https://github.com/codegangsta/gin).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将继续手动停止、重建和运行我们的项目，但有一些工具会通过监视更改并自动重启Go应用程序来为您处理这些操作。如果您对此类工具感兴趣，请查看[https://github.com/pilu/fresh](https://github.com/pilu/fresh)和[https://github.com/codegangsta/gin](https://github.com/codegangsta/gin)。
- en: 'Open the main chat page by accessing `http://localhost:8080/chat`. As we aren''t
    logged in yet, we are redirected to our sign-in page. Click on the **Google**
    option to sign in using your Google account and you will notice that you are presented
    with a Google-specific sign-in page (if you are not already signed in to Google).
    Once you are signed in, you will be presented with a page asking you to give permission
    for our chat application before you can view basic information about your account:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通过访问`http://localhost:8080/chat`打开主聊天页面。由于我们尚未登录，我们将被重定向到我们的登录页面。点击**Google**选项使用您的Google账户登录，您将注意到您被提供了一个特定的Google登录页面（如果您尚未登录到Google）。一旦您登录，您将看到一个页面，要求您在查看您账户的基本信息之前允许我们的聊天应用程序：
- en: '![Logging in](img/00049.jpeg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![登录](img/00049.jpeg)'
- en: This is the same flow that the users of our chat application will experience
    when signing in.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们聊天应用程序用户在登录时将经历的同一种流程。
- en: Click on **Accept** and you will notice that you are redirected to our application
    code but presented with an `Auth action callback not supported` error. This is
    because we haven't yet implemented the callback functionality in `loginHandler`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**接受**后，你会注意到你被重定向到我们的应用程序代码，但会显示一个`Auth action callback not supported`错误。这是因为我们尚未在`loginHandler`中实现回调功能。
