- en: Logging in
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have configured Gomniauth, we need to redirect users to the provider''s
    authorization page when they land on our `/auth/login/{provider}` path. We just
    have to update our `loginHandler` function in `auth.go`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We do two main things here. First, we use the `gomniauth.Provider` function
    to get the provider object that matches the object specified in the URL (such
    as `google` or `github`). Then, we use the `GetBeginAuthURL` method to get the
    location where we must send users to in order to start the authorization process.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `GetBeginAuthURL(nil, nil)` arguments are for the state and options respectively,
    which we are not going to use for our chat application.
  prefs: []
  type: TYPE_NORMAL
- en: The first argument is a state map of data that is encoded and signed and sent
    to the authentication provider. The provider doesn't do anything with the state;
    it just sends it back to our callback endpoint. This is useful if, for example,
    we want to redirect the user back to the original page they were trying to access
    before the authentication process intervened. For our purpose, we have only the
    `/chat` endpoint, so we don't need to worry about sending any state.
  prefs: []
  type: TYPE_NORMAL
- en: The second argument is a map of additional options that will be sent to the
    authentication provider, which somehow modifies the behavior of the authentication
    process. For example, you can specify your own `scope` parameter, which allows
    you to make a request for permission to access additional information from the
    provider. For more information about the available options, search for OAuth2
    on the Internet or read the documentation for each provider, as these values differ
    from service to service.
  prefs: []
  type: TYPE_NORMAL
- en: If our code gets no error from the `GetBeginAuthURL` call, we simply redirect
    the user's browser to the returned URL.
  prefs: []
  type: TYPE_NORMAL
- en: If errors occur, we use the `http.Error` function to write the error message
    out with a `non-200` status code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rebuild and run the chat application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will continue to stop, rebuild, and run our projects manually throughout
    this book, but there are some tools that will take care of this for you by watching
    for changes and restarting Go applications automatically. If you're interested
    in such tools, check out [https://github.com/pilu/fresh](https://github.com/pilu/fresh)
    and [https://github.com/codegangsta/gin](https://github.com/codegangsta/gin).
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the main chat page by accessing `http://localhost:8080/chat`. As we aren''t
    logged in yet, we are redirected to our sign-in page. Click on the **Google**
    option to sign in using your Google account and you will notice that you are presented
    with a Google-specific sign-in page (if you are not already signed in to Google).
    Once you are signed in, you will be presented with a page asking you to give permission
    for our chat application before you can view basic information about your account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Logging in](img/00049.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This is the same flow that the users of our chat application will experience
    when signing in.
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Accept** and you will notice that you are redirected to our application
    code but presented with an `Auth action callback not supported` error. This is
    because we haven't yet implemented the callback functionality in `loginHandler`.
  prefs: []
  type: TYPE_NORMAL
