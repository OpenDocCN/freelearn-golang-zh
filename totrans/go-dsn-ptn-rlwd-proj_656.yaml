- en: Presenting the user data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having the user data inside a cookie is a good start, but non-technical people
    will never even know it's there, so we must bring the data to the fore. We will
    do this by enhancing `templateHandler` that first passes the user data to the
    template's `Execute` method; this allows us to use template annotations in our
    HTML to display the user data to the users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `ServeHTTP` method of `templateHandler` in `main.go`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of just passing the entire `http.Request` object to our template as
    data, we are creating a new `map[string]interface{}` definition for a data object
    that potentially has two fields: `Host` and `UserData` (the latter will only appear
    if an `auth` cookie is present). By specifying the map type followed by curly
    braces, we are able to add the `Host` entry at the same time as making our map
    while avoiding the `make` keyword altogether. We then pass this new `data` object
    as the second argument to the `Execute` method on our template.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we add an HTML file to our template source to display the name. Update
    the `chatbox` form in `chat.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `{{.UserData.name}}` annotation tells the template engine to insert our
    user's name before the `textarea` control.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since we're using the `objx` package, don't forget to run `go get http://github.com/stretchr/objx`
    and import it. Additional dependencies add complexity to projects, so you may
    decide to copy and paste the appropriate functions from the package or even write
    your own code that marshals between Base64-encoded cookies and back.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can **vendor** the dependency by copying the whole source
    code to your project (inside a root-level folder called `vendor`). Go will, at
    build time, first check the vendor folder for any imported packages before checking
    them in `$GOPATH` (which were put there by `go get`). This allows you to fix the
    exact version of a dependency rather than rely on the fact that the source package
    hasn't changed since you wrote your code.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about using vendors in Go, check out Daniel Theophanes'
    post on the subject at [https://blog.gopheracademy.com/advent-2015/vendor-folder/](https://blog.gopheracademy.com/advent-2015/vendor-folder/)
    or search for `vendoring in Go`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rebuild and run the chat application again and you will notice the addition
    of your name before the chat box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
