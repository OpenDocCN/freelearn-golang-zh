["```go\npackage main \nimport ( \n  \"time\" \n) \n// message represents a single message \ntype message struct { \n  Name    string \n  Message string \n  When    time.Time \n} \n\n```", "```go\nfunc (c *client) read() { \n  defer c.socket.Close() \n  for { \n    var msg *message \n    err := c.socket.ReadJSON(&msg) \n    if err != nil { \n      return \n    } \n    msg.When = time.Now() \n    msg.Name = c.userData[\"name\"].(string) \n    c.room.forward <- msg  \n} \n}  \nfunc (c *client) write() { \n  defer c.socket.Close() \n  for msg := range c.send { \n    err := c.socket.WriteJSON(msg) \n    if err != nil { \n      break \n    } \n  } \n} \n\n```", "```go\n// client represents a single chatting user. \ntype client struct { \n  // socket is the web socket for this client. \n  socket *websocket.Conn \n  // send is a channel on which messages are sent. \n  send chan *message \n  // room is the room this client is chatting in. \n  room *room \n  // userData holds information about the user \n  userData map[string]interface{} \n} \n\n```", "```go\nfunc (r *room) ServeHTTP(w http.ResponseWriter, req *http.Request) { \n  socket, err := upgrader.Upgrade(w, req, nil) \n  if err != nil { \n    log.Fatal(\"ServeHTTP:\", err) \n    return \n  } \n  authCookie, err := req.Cookie(\"auth\") \n  if err != nil { \n    log.Fatal(\"Failed to get auth cookie:\", err) \n    return \n  } \n  client := &client{ \n    socket:   socket, \n    send:     make(chan *message, messageBufferSize), \n    room:     r, \n    userData: objx.MustFromBase64(authCookie.Value), \n  } \n  r.join <- client \n  defer func() { r.leave <- client }() \n  go client.write() \n  client.read() \n} \n\n```", "```go\nsocket.send(JSON.stringify({\"Message\": msgBox.val()})); \n\n```", "```go\nsocket.onmessage = function(e) { \n  var msg = JSON.parse(e.data); \n  messages.append( \n    $(\"<li>\").append( \n      $(\"<strong>\").text(msg.Name + \": \"), \n      $(\"<span>\").text(msg.Message) \n    ) \n  ); \n} \n\nJSON.parse function to turn the JSON string into a JavaScript object and then access the fields to build up the elements needed to properly display them.\n```", "```go\ngo build -o chat\n./chat -host=\":8080\"\n\n```"]