- en: Chapter 3. Three Ways to Implement Profile Pictures
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章：实现用户头像的三种方法
- en: So far, our chat application has made use of the **OAuth2** protocol to allow
    users to sign in to our application so that we know who is saying what. In this
    chapter, we are going to add profile pictures to make the chatting experience
    more engaging.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的聊天应用程序已经使用了**OAuth2**协议来允许用户登录我们的应用程序，这样我们就能知道是谁在说什么。在本章中，我们将添加个人头像，使聊天体验更加吸引人。
- en: 'We will look at the following ways to add pictures or avatars alongside the
    messages in our application:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨以下几种在应用程序中添加图片或头像的方法：
- en: Using the avatar picture provided by the auth service
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用认证服务提供的头像图片
- en: Using the [https://en.gravatar.com/](https://en.gravatar.com/) web service to
    look up a picture by the user's e-mail address
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[https://en.gravatar.com/](https://en.gravatar.com/)网络服务通过用户的电子邮件地址查找图片
- en: Allowing the user to upload their own picture and host it themselves
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许用户上传自己的图片并自行托管
- en: The first two options allow us to delegate the hosting of pictures to a third
    party either an authorization service or [https://en.gravatar.com/](https://en.gravatar.com/) which
    is great because it reduces the cost of hosting our application (in terms of storage
    costs and bandwidth, since the user's browsers will actually download the pictures
    from the servers of the authenticating service, not ours). The third option requires
    us to host pictures ourselves at a location that is accessible on the Web.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 前两种选项允许我们将图片托管委托给第三方，无论是授权服务还是[https://en.gravatar.com/](https://en.gravatar.com/)，这很好，因为它减少了我们托管应用程序的成本（在存储成本和带宽方面，因为用户的浏览器实际上会从认证服务的服务器下载图片，而不是我们的服务器）。第三种选项要求我们自己在网络上可访问的位置托管图片。
- en: These options aren't mutually exclusive; you will most likely use a combination
    of them in a real-world production application. Toward the end of the chapter,
    you will see how the flexible design that emerges allows us to try each implementation
    in turn until we find an appropriate avatar.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项不是相互排斥的；你很可能在实际的生产应用中结合使用它们。在本章的末尾，你将看到灵活的设计如何使我们能够依次尝试每种实现，直到找到合适的头像。
- en: We are going to be agile with our design throughout this chapter, doing the
    minimum work needed to accomplish each milestone. This means that at the end of
    each section, we will have working implementations that are demonstrable in the
    browser. This also means that we will refactor code as and when we need to and
    discuss the rationale behind the decisions we make as we go.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将对设计保持敏捷，只做完成每个里程碑所需的最少工作。这意味着在每个部分结束时，我们将拥有可演示的、在浏览器中可工作的实现。这也意味着我们将根据需要重构代码，并在进行决策时讨论其背后的理由。
- en: 'Specifically, in this chapter, you will learn:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，在本章中，你将学习：
- en: What the good practices to get additional information from auth services are,
    even when there are no standards in place
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使没有标准，如何从认证服务中获取额外信息的良好实践
- en: When it is appropriate to build abstractions into our code
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 何时在代码中构建抽象
- en: How Go's zero-initialization pattern can save time and memory
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go语言的零初始化模式如何节省时间和内存
- en: How reusing an interface allows us to work with collections and individual objects
    in the same way as the existing interface did
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何通过重用接口以与现有接口相同的方式处理集合和单个对象
- en: How to use the [https://en.gravatar.com/](https://en.gravatar.com/) web service
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用[https://en.gravatar.com/](https://en.gravatar.com/)网络服务
- en: How to do MD5 hashing in Go
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在Go语言中实现MD5哈希
- en: How to upload files over HTTP and store them on a server
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何通过HTTP上传文件并将它们存储在服务器上
- en: How to serve static files through a Go web server
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何通过Go网络服务器提供静态文件服务
- en: How to use unit tests to guide the refactoring of code
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用单元测试来指导代码重构
- en: How and when to abstract functionality from `struct` types into interfaces
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何以及何时将功能从`struct`类型抽象到接口中
