- en: Getting the avatar URL
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取头像URL
- en: The schema for user or profile resources is not part of the OAuth2 spec, which
    means that each provider is responsible for deciding how to represent that data.
    Indeed, providers do things differently; for example, the avatar URL in a GitHub
    user resource is stored in a field called `avatar_url`, whereas in Google, the
    same field is called `picture`. Facebook goes even further by nesting the avatar
    URL value in a `url` field inside an object called `picture`. Luckily, Gomniauth
    abstracts this for us; its `GetUser` call on a provider standardizes the interface
    to get common fields.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 用户或配置文件资源的模式不是OAuth2规范的一部分，这意味着每个提供者负责决定如何表示这些数据。确实，提供者做事情的方式不同；例如，GitHub用户资源中的头像URL存储在名为`avatar_url`的字段中，而在Google中，相同的字段名为`picture`。Facebook甚至更进一步，将头像URL值嵌套在一个名为`picture`的对象内的`url`字段中。幸运的是，Gomniauth为我们抽象了这一点；它在提供者上的`GetUser`调用将接口标准化，以获取常用字段。
- en: 'In order to make use of the avatar URL field, we need to go back and store
    that information in our cookie. In `auth.go`, look inside the `callback` action
    switch case and update the code that creates the `authCookieValue` object, as
    follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用头像URL字段，我们需要回到存储该信息到我们的cookie中。在`auth.go`中，查看`callback`动作的switch case内部，并更新创建`authCookieValue`对象的代码，如下所示：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `AvatarURL` field called in the preceding code will return the appropriate
    URL value and store it in our `avatar_url` field, which we then put into the cookie.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中调用的`AvatarURL`字段将返回适当的URL值，并将其存储在我们的`avatar_url`字段中，然后我们将其放入cookie中。
- en: Tip
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Gomniauth defines a `User` type of interface and each provider implements their
    own version. The generic `map[string]interface{}` data returned from the auth
    server is stored inside each object, and the method calls access the appropriate
    value using the right field name for that provider. This approach describing the
    way information is accessed without being strict about implementation details–is
    a great use of interfaces in Go.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Gomniauth定义了一个`User`类型的接口，每个提供者实现自己的版本。从认证服务器返回的通用`map[string]interface{}`数据存储在每个对象内部，方法调用使用该提供者的正确字段名来访问相应的值。这种描述信息访问方式而不严格关注实现细节的方法——是Go中使用接口的绝佳例子。
