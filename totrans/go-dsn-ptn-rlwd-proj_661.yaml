- en: Getting the avatar URL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The schema for user or profile resources is not part of the OAuth2 spec, which
    means that each provider is responsible for deciding how to represent that data.
    Indeed, providers do things differently; for example, the avatar URL in a GitHub
    user resource is stored in a field called `avatar_url`, whereas in Google, the
    same field is called `picture`. Facebook goes even further by nesting the avatar
    URL value in a `url` field inside an object called `picture`. Luckily, Gomniauth
    abstracts this for us; its `GetUser` call on a provider standardizes the interface
    to get common fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to make use of the avatar URL field, we need to go back and store
    that information in our cookie. In `auth.go`, look inside the `callback` action
    switch case and update the code that creates the `authCookieValue` object, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `AvatarURL` field called in the preceding code will return the appropriate
    URL value and store it in our `avatar_url` field, which we then put into the cookie.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Gomniauth defines a `User` type of interface and each provider implements their
    own version. The generic `map[string]interface{}` data returned from the auth
    server is stored inside each object, and the method calls access the appropriate
    value using the right field name for that provider. This approach describing the
    way information is accessed without being strict about implementation detailsâ€“is
    a great use of interfaces in Go.
  prefs: []
  type: TYPE_NORMAL
