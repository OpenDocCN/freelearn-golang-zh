- en: User identification
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to uniquely identify our users, we are going to copy Gravatar's approach
    by hashing their e-mail address and using the resulting string as an identifier.
    We will store the user ID in the cookie along with the rest of the user-specific
    data. This will actually have the added benefit of removing the inefficiency associated
    with continuous hashing from `GravatarAuth`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `auth.go`, replace the code that creates the `authCookieValue` object with
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have hashed the e-mail address and stored the resulting value in the
    `userid` field at the point at which the user logs in. From now on, we can use
    this value in our Gravatar code instead of hashing the e-mail address for every
    message. To do this, first, we update the test by removing the following line
    from `avatar_test.go`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We then replace the preceding line with this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We no longer need to set the `email` field since it is not used; instead, we
    just have to set an appropriate value to the new `userid` field. However, if you
    run `go test` in a terminal, you will see this test fail.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the test pass, in `avatar.go`, update the `GetAvatarURL` method for
    the `GravatarAuth` type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This won't change the behavior, but it allows us to make an unexpected optimization,
    which is a great example of why you shouldn't optimize code too early the inefficiencies
    that you spot early on may not last long enough to warrant the effort required
    to fix them.
  prefs: []
  type: TYPE_NORMAL
