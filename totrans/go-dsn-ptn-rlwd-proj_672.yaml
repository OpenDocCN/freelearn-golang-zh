- en: Serving the images
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器端图片服务
- en: 'Now that we have a place to keep our user''s avatar images on the server, we
    need a way to make them accessible to the browser. We do this using the `net/http`
    package''s built-in file server. In `main.go`, add the following code:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个在服务器上存储用户头像图片的地方，我们需要一种方法让浏览器可以访问它们。我们使用 `net/http` 包内置的文件服务器来实现这一点。在
    `main.go` 中添加以下代码：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is actually a single line of code that has been broken up to improve readability.
    The `http.Handle` call should feel familiar, as we are specifying that we want
    to map the `/avatars/` path with the specified handler this is where things get
    interesting. Both `http.StripPrefix` and `http.FileServer` return `http.Handler`,
    and they make use of the wrapping pattern we learned about in the previous chapter.
    The `StripPrefix` function takes `http.Handler` in, modifies the path by removing
    the specified prefix, and passes the functionality onto an inner handler. In our
    case, the inner handler is an `http.FileServer` handler that will simply serve
    static files, provide index listings, and generate the `404 Not Found` error if
    it cannot find the file. The `http.Dir` function allows us to specify which folder
    we want to expose publicly.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上是一行代码，为了提高可读性而被拆分。`http.Handle` 的调用应该很熟悉，因为我们指定了要将 `/avatars/` 路径映射到指定的处理器，这里事情变得有趣。`http.StripPrefix`
    和 `http.FileServer` 都返回 `http.Handler`，并且它们使用了我们在上一章中学到的包装模式。`StripPrefix` 函数接收
    `http.Handler` 作为输入，通过移除指定的前缀来修改路径，并将功能传递给内部处理器。在我们的例子中，内部处理器是一个 `http.FileServer`
    处理器，它将简单地提供静态文件服务、提供索引列表，如果找不到文件，则生成 `404 Not Found` 错误。`http.Dir` 函数允许我们指定我们想要公开的文件夹。
- en: Tip
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If we didn't strip the `/avatars/` prefix from the requests with `http.StripPrefix`,
    the file server would look for another folder called `avatars` inside the actual
    `avatars` folder, that is, `/avatars/avatars/filename` instead of `/avatars/filename`.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有使用 `http.StripPrefix` 从请求中去除 `/avatars/` 前缀，文件服务器将会在实际的 `avatars` 文件夹内寻找另一个名为
    `avatars` 的文件夹，即 `/avatars/avatars/filename` 而不是 `/avatars/filename`。
- en: Let's build the program and run it before opening `http://localhost:8080/avatars/`
    in a browser. You'll notice that the file server has generated a listing of the
    files inside our `avatars` folder. Clicking on a file will either download the
    file, or in the case of an image, simply display it. If you haven't done this
    already, go to `http://localhost:8080/upload` and upload a picture, and then head
    back to the listing page and click on it to see it in the browser.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在打开浏览器中的 `http://localhost:8080/avatars/` 之前，让我们构建并运行程序。你会注意到文件服务器已经生成了我们 `avatars`
    文件夹内文件的列表。点击一个文件将下载该文件，或者在图片的情况下，直接在浏览器中显示它。如果你还没有这样做，请访问 `http://localhost:8080/upload`
    并上传一张图片，然后回到列表页面并点击它，在浏览器中查看。
