["```go\nfunc TestFileSystemAvatar(t *testing.T) { \n\n  filename := filepath.Join(\"avatars\", \"abc.jpg\") \n  ioutil.WriteFile(filename, []byte{}, 0777) \n  defer os.Remove(filename)  \n  var fileSystemAvatar FileSystemAvatar \n  client := new(client) \n  client.userData = map[string]interface{}{\"userid\": \"abc\"} \n  url, err := fileSystemAvatar.GetAvatarURL(client) \n  if err != nil { \n    t.Error(\"FileSystemAvatar.GetAvatarURL should not return an error\") \n  } \n  if url != \"/avatars/abc.jpg\" { \n    t.Errorf(\"FileSystemAvatar.GetAvatarURL wrongly returned %s\", url) \n  } \n} \n\n```", "```go\ntype FileSystemAvatar struct{} \nvar UseFileSystemAvatar FileSystemAvatar \nfunc (FileSystemAvatar) GetAvatarURL(c *client) (string, error) { \n  if userid, ok := c.userData[\"userid\"]; ok { \n    if useridStr, ok := userid.(string); ok { \n      return \"/avatars/\" + useridStr + \".jpg\", nil \n    } \n  } \n  return \"\", ErrNoAvatarURL \n} \n\n```", "```go\nr := newRoom(UseFileSystemAvatar) \n\n```", "```go\nfunc (FileSystemAvatar) GetAvatarURL(c *client) (string, error) { \n  if userid, ok := c.userData[\"userid\"]; ok { \n    if useridStr, ok := userid.(string); ok { \n      files, err := ioutil.ReadDir(\"avatars\") \n      if err != nil { \n        return \"\", ErrNoAvatarURL \n      } \n      for _, file := range files { \n        if file.IsDir() { \n          continue \n        } \n        if match, _ := path.Match(useridStr+\"*\", file.Name());\n        match { \n          return \"/avatars/\" + file.Name(), nil \n        } \n      } \n    } \n  } \n  return \"\", ErrNoAvatarURL \n} \n\n```"]