- en: The Avatar implementation for local files
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地文件的 Avatar 实现
- en: The final step in making filesystem avatars work is writing an implementation
    of our `Avatar` interface that generates URLs that point to the filesystem endpoint
    we created in the previous section.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使文件系统 Avatar 工作的最后一步是编写一个实现我们的 `Avatar` 接口，该接口生成指向我们在上一节中创建的文件系统端点的 URL。
- en: 'Let''s add a test function to our `avatar_test.go` file:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `avatar_test.go` 文件中添加一个测试函数：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This test is similar to, but slightly more involved than, the `GravatarAvatar`
    test because we are also creating a test file in our `avatars` folder and deleting
    it afterwards.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试与 `GravatarAvatar` 测试类似，但稍微复杂一些，因为我们还在 `avatars` 文件夹中创建了一个测试文件，并在之后删除它。
- en: Tip
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Even if our test code panics, the deferred functions will still be called. So
    regardless of what happens, our test code will clean up after itself.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们的测试代码崩溃，延迟调用的函数仍然会被调用。所以无论发生什么，我们的测试代码都会自行清理。
- en: 'The rest of the test is simple: we set a `userid` field in `client.userData`
    and call `GetAvatarURL` to ensure we get the right value back. Of course, running
    this test will fail, so let''s go and add the following code in order to make
    it pass in `avatar.go`:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 剩余的测试很简单：我们在 `client.userData` 中设置一个 `userid` 字段，并调用 `GetAvatarURL` 来确保我们得到正确的返回值。当然，运行此测试将失败，所以让我们去
    `avatar.go` 中添加以下代码，以便使其通过：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see here, in order to generate the correct URL, we simply get the
    `userid` value and build the final string by adding the appropriate segments together.
    You may have noticed that we have hardcoded the file extension to `.jpg`, which
    means that the initial version of our chat application will only support JPEGs.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，为了生成正确的 URL，我们只需获取 `userid` 值，并通过添加适当的段来构建最终的字符串。你可能已经注意到我们硬编码了文件扩展名为
    `.jpg`，这意味着我们聊天应用的初始版本将只支持 JPEGs。
- en: Tip
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Supporting only JPEGs might seem like a half-baked solution, but following Agile
    methodologies, this is perfectly fine; after all, custom JPEG profile pictures
    are better than no custom profile pictures at all.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 只支持 JPEGs 可能看起来像是一个半成品解决方案，但按照敏捷方法，这完全没问题；毕竟，定制的 JPEG 个人资料图片比完全没有好。
- en: 'Let''s look at our new code in action by updating `main.go` to use our new
    `Avatar` implementation:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过更新 `main.go` 来查看我们的新代码的实际效果，使用我们的新 `Avatar` 实现：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now build and run the application as usual and go to `http://localhost:8080/upload`
    and use a web form to upload a JPEG image to use as your profile picture. To make
    sure it's working correctly, choose a unique image that isn't your Gravatar picture
    or the image from the auth service. Once you see the successful message after
    clicking on **Upload**, go to `http://localhost:8080/chat` and post a message.
    You will notice that the application has indeed used the profile picture that
    you uploaded.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在按常规构建并运行应用程序，然后转到 `http://localhost:8080/upload` 并使用网页表单上传一个 JPEG 图像作为您的个人资料图片。为了确保它正常工作，请选择一个独特的图像，而不是您的
    Gravatar 图片或身份验证服务的图片。在点击 **上传** 后，您将看到成功消息，然后转到 `http://localhost:8080/chat`
    并发布一条消息。您会注意到应用程序确实使用了您上传的个人资料图片。
- en: To change your profile picture, go back to the `/upload` page and upload a different
    picture, and then jump back to the `/chat` page and post more messages.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改您的个人资料图片，请返回到 `/upload` 页面并上传不同的图片，然后跳转到 `/chat` 页面并发布更多消息。
- en: '![The Avatar implementation for local files](img/00054.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![本地文件的 Avatar 实现](img/00054.jpeg)'
- en: Supporting different file types
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 支持不同的文件类型
- en: To support different file types, we have to make our `GetAvatarURL` method for
    the `FileSystemAvatar` type a little smarter.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持不同的文件类型，我们必须使 `FileSystemAvatar` 类型的 `GetAvatarURL` 方法变得更智能一些。
- en: Instead of just blindly building the string, we will use the very important
    `ioutil.ReadDir` method to get a listing of the files. The listing also includes
    directories so we will use the `IsDir` method to determine whether we should skip
    it or not.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会只是盲目地构建字符串，而是会使用非常重要的 `ioutil.ReadDir` 方法来获取文件列表。列表中也包括目录，因此我们将使用 `IsDir`
    方法来确定是否应该跳过它。
- en: We will then check whether each file matches the `userid` field (remember that
    we named our files in this way) by a call to `path.Match`. If the filename matches
    the `userid` field, then we have found the file for that user and we return the
    path. If anything goes wrong or if we can't find the file, we return the `ErrNoAvatarURL`
    error as usual.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过调用 `path.Match` 来检查每个文件是否与 `userid` 字段匹配（记住我们这样命名文件）。如果文件名与 `userid` 字段匹配，那么我们就找到了该用户的文件，并返回该路径。如果发生错误或找不到文件，我们将像往常一样返回
    `ErrNoAvatarURL` 错误。
- en: 'Update the appropriate method in `avatar.go` with the following code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `avatar.go` 文件中更新相应的方法，使用以下代码：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Delete all the files in the `avatar` folder to prevent confusion and rebuild
    the program. This time, upload an image of a different type and note that our
    application has no difficulty handling it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 删除 `avatar` 文件夹中的所有文件，以避免混淆并重新构建程序。这次，上传一个不同类型的图片，并注意我们的应用程序没有处理它的困难。
