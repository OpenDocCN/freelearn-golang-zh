- en: The Avatar implementation for local files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The final step in making filesystem avatars work is writing an implementation
    of our `Avatar` interface that generates URLs that point to the filesystem endpoint
    we created in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a test function to our `avatar_test.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This test is similar to, but slightly more involved than, the `GravatarAvatar`
    test because we are also creating a test file in our `avatars` folder and deleting
    it afterwards.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Even if our test code panics, the deferred functions will still be called. So
    regardless of what happens, our test code will clean up after itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'The rest of the test is simple: we set a `userid` field in `client.userData`
    and call `GetAvatarURL` to ensure we get the right value back. Of course, running
    this test will fail, so let''s go and add the following code in order to make
    it pass in `avatar.go`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you can see here, in order to generate the correct URL, we simply get the
    `userid` value and build the final string by adding the appropriate segments together.
    You may have noticed that we have hardcoded the file extension to `.jpg`, which
    means that the initial version of our chat application will only support JPEGs.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Supporting only JPEGs might seem like a half-baked solution, but following Agile
    methodologies, this is perfectly fine; after all, custom JPEG profile pictures
    are better than no custom profile pictures at all.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at our new code in action by updating `main.go` to use our new
    `Avatar` implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now build and run the application as usual and go to `http://localhost:8080/upload`
    and use a web form to upload a JPEG image to use as your profile picture. To make
    sure it's working correctly, choose a unique image that isn't your Gravatar picture
    or the image from the auth service. Once you see the successful message after
    clicking on **Upload**, go to `http://localhost:8080/chat` and post a message.
    You will notice that the application has indeed used the profile picture that
    you uploaded.
  prefs: []
  type: TYPE_NORMAL
- en: To change your profile picture, go back to the `/upload` page and upload a different
    picture, and then jump back to the `/chat` page and post more messages.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Avatar implementation for local files](img/00054.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Supporting different file types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To support different file types, we have to make our `GetAvatarURL` method for
    the `FileSystemAvatar` type a little smarter.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of just blindly building the string, we will use the very important
    `ioutil.ReadDir` method to get a listing of the files. The listing also includes
    directories so we will use the `IsDir` method to determine whether we should skip
    it or not.
  prefs: []
  type: TYPE_NORMAL
- en: We will then check whether each file matches the `userid` field (remember that
    we named our files in this way) by a call to `path.Match`. If the filename matches
    the `userid` field, then we have found the file for that user and we return the
    path. If anything goes wrong or if we can't find the file, we return the `ErrNoAvatarURL`
    error as usual.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the appropriate method in `avatar.go` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Delete all the files in the `avatar` folder to prevent confusion and rebuild
    the program. This time, upload an image of a different type and note that our
    application has no difficulty handling it.
  prefs: []
  type: TYPE_NORMAL
