- en: Combining all three implementations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To close this chapter with a bang, we will implement a mechanism in which each
    `Avatar` implementation takes a turn in trying to get a URL for a user. If the
    first implementation returns the `ErrNoAvatarURL` error, we will try the next
    and so on until we find a useable value.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `avatar.go`, underneath the `Avatar` type, add the following type definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `TryAvatars` type is simply a slice of `Avatar` objects that we are free
    to add methods to. Let''s add the following `GetAvatarURL` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This means that `TryAvatars` is now a valid `Avatar` implementation and can
    be used in place of any specific implementation. In the preceding method, we iterated
    over the slice of `Avatar` objects in an order, calling `GetAvatarURL` for each
    one. If no error is returned, we return the URL; otherwise, we carry on looking.
    Finally, if we are unable to find a value, we just return `ErrNoAvatarURL` as
    per the interface design.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `avatars` global variable in `main.go` to use our new implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here, we created a new instance of our `TryAvatars` slice type while putting
    the other `Avatar` implementations inside it. The order matters since it iterates
    over the objects in the order in which they appear in the slice. So, first our
    code will check whether the user has uploaded a picture; if they haven't, the
    code will check whether the auth service has a picture for us to use. If the approaches
    fail, a Gravatar URL will be generated, which in the worst case (for example,
    if the user hasn't added a Gravatar picture) will render a default placeholder
    image.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see our new functionality in action, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and rerun the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Log out by visiting `http://localhost:8080/logout`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete all the pictures from the `avatars` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log back in by navigating to `http://localhost:8080/chat`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Send some messages and take note of your profile picture.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit `http://localhost:8080/upload` and upload a new profile picture.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log out again and log back in as you did earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Send some more messages and note that your profile picture has been updated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
