- en: Pipe design for command-line tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to build a series of command-line tools that use the standard streams
    (`stdin` and `stdout`) to communicate with the user and with other tools. Each
    tool will take an input line by line via the standard input pipe, process it in
    some way, and then print the output line by line to the standard out pipe for
    the next tool or user.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the standard input is connected to the user''s keyboard, and the
    standard output is printed to the terminal from where the command was run; however,
    both can be redirected using **redirection metacharacters**. It''s possible to
    throw the output away by redirecting it to `NUL` on Windows or `/dev/null` on
    Unix machines, or redirecting it to a file that will cause the output to be saved
    to a disk. Alternatively, you can pipe (using the `|` pipe character) the output
    of one program to the input of another; it is this feature that we will make use
    of in order to connect our various tools together. For example, you could pipe
    the output from one program to the input of another program in a terminal using
    this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the `echo` command will be the string `Hello` (without the quotes),
    which is then **piped** to the `md5` command; this command will in turn calculate
    the MD5 hash of `Hello`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Our tools will work with lines of strings where each line (separated by a linefeed
    character) represents one string. When run without any pipe redirection, we will
    be able to interact directly with the programs using the default in and out, which
    will be useful when testing and debugging our code.
  prefs: []
  type: TYPE_NORMAL
