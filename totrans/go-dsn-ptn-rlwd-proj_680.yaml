- en: Sprinkle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our first program augments the incoming words with some sugar terms in order
    to improve the odds of finding names that are available. Many companies use this
    approach to keep the core messaging consistent while being able to afford the
    `.com` domain. For example, if we pass in the word `chat`, it might pass out `chatapp`;
    alternatively, if we pass in `talk`, we may get back `talk time`.
  prefs: []
  type: TYPE_NORMAL
- en: Go's `math/rand` package allows us to break away from the predictability of
    computers. It gives our program the appearance of intelligence by introducing
    elements of chance into its decision making.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make our Sprinkle program work, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Define an array of transformations, using a special constant to indicate where
    the original word will appear
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `bufio` package to scan the input from `stdin` and `fmt.Println` in
    order to write the output to `stdout`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `math/rand` package to randomly select a transformation to apply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All our programs will reside in the `$GOPATH/src` directory. For example, if
    your GOPATH is `~/Work/projects/go`, you would create your program folders in
    the `~/Work/projects/go/src` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `$GOPATH/src` directory, create a new folder called `sprinkle` and add
    a `main.go` file containing the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: From now on, it is assumed that you will sort out the appropriate `import` statements
    yourself. If you need assistance, refer to the tips provided in [Appendix](part0227_split_000.html#6OFFM1-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Appendix Appendix. Good Practices for a Stable Go Environment"), *Good Practices
    for a Stable Go Environment*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding code represents our complete Sprinkle program. It defines three
    things: a constant, a variable, and the obligatory `main` function, which serves
    as the entry point to Sprinkle. The `otherWord` constant string is a helpful token
    that allows us to specify where the original word should occur in each of our
    possible transformations. It lets us write code, such as `otherWord+"extra"`,
    which makes it clear that in this particular case, we want to add the word "extra"
    to the end of the original word.'
  prefs: []
  type: TYPE_NORMAL
- en: The possible transformations are stored in the `transforms` variable that we
    declare as a slice of strings. In the preceding code, we defined a few different
    transformations, such as adding `app` to the end of a word or `lets` before it.
    Feel free to add some more; the more creative, the better.
  prefs: []
  type: TYPE_NORMAL
- en: In the `main` function, the first thing we do is use the current time as a random
    seed. Computers can't actually generate random numbers, but changing the seed
    number of random algorithms gives the illusion that it can. We use the current
    time in nanoseconds because it's different each time the program is run (provided
    the system clock isn't being reset before each run). If we skip this step, the
    numbers generated by the `math/rand` package would be deterministic; they'd be
    the same every time we run the program.
  prefs: []
  type: TYPE_NORMAL
- en: We then create a `bufio.Scanner` object (by calling `bufio.NewScanner`) and
    tell it to read the input from `os.Stdin`, which represents the standard input
    stream. This will be a common pattern in our five programs since we are always
    going to read from the standard *in* and write to the standard *out*.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `bufio.Scanner` object actually takes `io.Reader` as its input source, so
    there is a wide range of types that we could use here. If you were writing unit
    tests for this code, you could specify your own `io.Reader` for the scanner to
    read from, removing the need for you to worry about simulating the standard input
    stream.
  prefs: []
  type: TYPE_NORMAL
- en: As the default case, the scanner allows us to read blocks of bytes separated
    by defined delimiters, such as carriage return and linefeed characters. We can
    specify our own split function for the scanner or use one of the options built
    in the standard library. For example, there is `bufio.ScanWords`, which scans
    individual words by breaking on whitespace rather than linefeeds. Since our design
    specifies that each line must contain a word (or a short phrase), the default
    line-by-line setting is ideal.
  prefs: []
  type: TYPE_NORMAL
- en: A call to the `Scan` method tells the scanner to read the next block of bytes
    (the next line) from the input, and then it returns a `bool` value indicating
    whether it found anything or not. This is how we are able to use it as the condition
    for the `for` loop. While there is content to work on, `Scan` returns `true` and
    the body of the `for` loop is executed; when `Scan` reaches the end of the input,
    it returns `false`, and the loop is broken. The bytes that are selected are stored
    in the `Bytes` method of the scanner, and the handy `Text` method that we use
    converts the `[]byte` slice into a string for us.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `for` loop (so for each line of input), we use `rand.Intn` to select
    a random item from the `transforms` slice and use `strings.Replace` to insert
    the original word where the `otherWord` string appears. Finally, we use `fmt.Println`
    to print the output to the default standard output stream.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `math/rand` package provides insecure random numbers. If you want to write
    code that utilizes random numbers for security purposes, you must use the `crypto/rand`
    package instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s build our program and play with it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the program starts running, it will use the default behavior to read the
    user input from the terminal. It uses the default behavior because we haven''t
    piped in any content or specified a source for it to read from. Type `chat` and
    hit return. The scanner in our code notices the linefeed character at the end
    of the word and runs the code that transforms it, outputting the result. For example,
    if you type `chat` a few times, you would see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Sprinkle never exits (meaning the `Scan` method never returns `false` to break
    the loop) because the terminal is still running; in normal execution, the in pipe
    will be closed by whatever program is generating the input. To stop the program,
    hit *Ctrl + C*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we move on, let''s try to run Sprinkle, specifying a different input
    source. We are going to use the `echo` command to generate some content and pipe
    it to our Sprinkle program using the pipe character:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The program will randomly transform the word, print it out, and exit since the
    `echo` command generates only one line of input before terminating and closing
    the pipe.
  prefs: []
  type: TYPE_NORMAL
- en: We have successfully completed our first program, which has a very simple but
    useful function, as we will see.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As an extra assignment, rather than hardcoding the `transformations` array as
    we have done, see whether you can externalize it via flags or store them in a
    text file or database.
  prefs: []
  type: TYPE_NORMAL
