- en: Domainify
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Domainify
- en: 'Some of the words that output from Sprinkle contain spaces and perhaps other
    characters that are not allowed in domains. So we are going to write a program
    called Domainify; it converts a line of text into an acceptable domain segment
    and adds an appropriate **Top-level Domain** (**TLD**) to the end. Alongside the
    `sprinkle` folder, create a new one called `domainify` and add the `main.go` file
    with the following code:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Sprinkle输出的某些单词包含空格，也许还有在域名中不允许的其他字符。因此，我们将编写一个名为Domainify的程序；它将一行文本转换为可接受的域名段，并在末尾添加适当的**顶级域名**（**TLD**）。在`sprinkle`文件夹旁边创建一个新的文件夹，命名为`domainify`，并添加以下代码的`main.go`文件：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You will notice a few similarities between Domainify and the Sprinkle program:
    we set the random seed using `rand.Seed`, generate a `NewScanner` method wrapping
    the `os.Stdin` reader, and scan each line until there is no more input.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到Domainify和Sprinkle程序之间有一些相似之处：我们使用`rand.Seed`设置随机种子，生成一个包装`os.Stdin`读取器的`NewScanner`方法，并扫描每一行，直到没有更多输入。
- en: We then convert the text to lowercase and build up a new slice of `rune` types
    called `newText`. The `rune` types consist of only characters that appear in the
    `allowedChars` string, which `strings.ContainsRune` lets us know. If `rune` is
    a space that we determine by calling `unicode.IsSpace`, we replace it with a hyphen,
    which is an acceptable practice in domain names.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将文本转换为小写，并构建一个新的`rune`类型切片，称为`newText`。`rune`类型仅包含出现在`allowedChars`字符串中的字符，这是`strings.ContainsRune`函数告诉我们的。如果`rune`是一个空格，我们通过调用`unicode.IsSpace`来确定，我们将其替换为一个连字符，这在域名中是一种可接受的实践。
- en: Note
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Ranging over a string returns the index of each character and a `rune` type,
    which is a numerical value (specifically, `int32`) representing the character
    itself. For more information about runes, characters, and strings, refer to [http://blog.golang.org/strings](http://blog.golang.org/strings).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历字符串返回每个字符的索引和`rune`类型，这是一个表示字符本身的数值（具体来说，是`int32`）。有关runes、字符和字符串的更多信息，请参阅[http://blog.golang.org/strings](http://blog.golang.org/strings)。
- en: Finally, we convert `newText` from a `[]rune` slice into a string and add either
    `.com` or `.net` at the end, before printing it out using `fmt.Println`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将`newText`从`[]rune`切片转换为字符串，并在打印之前添加`.com`或`.net`，使用`fmt.Println`打印出来。
- en: 'Let''s build and run Domainify:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建并运行Domainify：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Type in some of these options to see how `domainify` reacts:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 输入一些这些选项以查看`domainify`如何反应：
- en: Monkey
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Monkey
- en: Hello Domainify
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hello Domainify
- en: '"What''s up?"'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"What''s up?"'
- en: One (two) three!
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: One (two) three!
- en: You can see that, for example, `One (two) three!` might yield `one-two-three.com`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`One (two) three!`可能会得到`one-two-three.com`。
- en: 'We are now going to compose Sprinkle and Domainify to see them work together.
    In your terminal, navigate to the parent folder (probably `$GOPATH/src`) of `sprinkle`
    and `domainify` and run the following command:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将组合Sprinkle和Domainify，看看它们是如何一起工作的。在你的终端中，导航到`sprinkle`和`domainify`的父文件夹（可能是`$GOPATH/src`），并运行以下命令：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, we ran the `sprinkle` program and piped the output to the `domainify`
    program. By default, `sprinkle` uses the terminal as the input and `domanify`
    outputs to the terminal. Try typing in `chat` a few times again and notice the
    output is similar to what Sprinkle was outputting previously, except now they
    are acceptable for domain names. It is this piping between programs that allows
    us to compose command-line tools together.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们运行了`sprinkle`程序，并将输出管道传输到`domainify`程序。默认情况下，`sprinkle`使用终端作为输入，而`domanify`输出到终端。再次尝试输入`chat`几次，你会注意到输出与Sprinkle之前输出的相似，但现在它们是域名中可接受的。正是这种程序之间的管道连接使我们能够组合命令行工具。
- en: Tip
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Only supporting `.com` and `.net` top-level domains is fairly limiting. As an
    additional assignment, see whether you can accept a list of TLDs via a command-line
    flag.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 仅支持`.com`和`.net`顶级域名相当有限。作为额外的作业，看看你是否可以通过命令行标志接受一个TLDs列表。
