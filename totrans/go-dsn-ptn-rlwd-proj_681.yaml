- en: Domainify
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some of the words that output from Sprinkle contain spaces and perhaps other
    characters that are not allowed in domains. So we are going to write a program
    called Domainify; it converts a line of text into an acceptable domain segment
    and adds an appropriate **Top-level Domain** (**TLD**) to the end. Alongside the
    `sprinkle` folder, create a new one called `domainify` and add the `main.go` file
    with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You will notice a few similarities between Domainify and the Sprinkle program:
    we set the random seed using `rand.Seed`, generate a `NewScanner` method wrapping
    the `os.Stdin` reader, and scan each line until there is no more input.'
  prefs: []
  type: TYPE_NORMAL
- en: We then convert the text to lowercase and build up a new slice of `rune` types
    called `newText`. The `rune` types consist of only characters that appear in the
    `allowedChars` string, which `strings.ContainsRune` lets us know. If `rune` is
    a space that we determine by calling `unicode.IsSpace`, we replace it with a hyphen,
    which is an acceptable practice in domain names.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ranging over a string returns the index of each character and a `rune` type,
    which is a numerical value (specifically, `int32`) representing the character
    itself. For more information about runes, characters, and strings, refer to [http://blog.golang.org/strings](http://blog.golang.org/strings).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we convert `newText` from a `[]rune` slice into a string and add either
    `.com` or `.net` at the end, before printing it out using `fmt.Println`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s build and run Domainify:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Type in some of these options to see how `domainify` reacts:'
  prefs: []
  type: TYPE_NORMAL
- en: Monkey
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hello Domainify
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '"What''s up?"'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One (two) three!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can see that, for example, `One (two) three!` might yield `one-two-three.com`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now going to compose Sprinkle and Domainify to see them work together.
    In your terminal, navigate to the parent folder (probably `$GOPATH/src`) of `sprinkle`
    and `domainify` and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here, we ran the `sprinkle` program and piped the output to the `domainify`
    program. By default, `sprinkle` uses the terminal as the input and `domanify`
    outputs to the terminal. Try typing in `chat` a few times again and notice the
    output is similar to what Sprinkle was outputting previously, except now they
    are acceptable for domain names. It is this piping between programs that allows
    us to compose command-line tools together.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Only supporting `.com` and `.net` top-level domains is fairly limiting. As an
    additional assignment, see whether you can accept a list of TLDs via a command-line
    flag.
  prefs: []
  type: TYPE_NORMAL
