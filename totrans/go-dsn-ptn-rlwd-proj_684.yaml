- en: Available
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our final program, Available, will connect to a WHOIS server to ask for details
    about the domains passed to it of course, if no details are returned, we can safely
    assume that the domain is available for purchase. Unfortunately, the WHOIS specification
    (see [http://tools.ietf.org/html/rfc3912](http://tools.ietf.org/html/rfc3912))
    is very small and contains no information about how a WHOIS server should reply
    when you ask for details about a domain. This means programmatically parsing the
    response becomes a messy endeavor. To address this issue for now, we will integrate
    with only a single WHOIS server, which we can be sure will have `No match` somewhere
    in the response when it has no records for the domain.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A more robust solution is to have a WHOIS interface with a well-defined structure
    for the details and perhaps an error message for cases when the domain doesn't
    exist with different implementations for different WHOIS servers. As you can imagine,
    it's quite a project; it is perfect for an open source effort.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new folder called `available` alongside others and add a `main.go`
    file to it containing the following function code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `exists` function implements what little there is in the WHOIS specification
    by opening a connection to port `43` on the specified `whoisServer` instance with
    a call to `net.Dial`. We then defer the closing of the connection, which means
    that no matter how the function exits (successful, with an error, or even a panic),
    `Close()` will still be called on the `conn` connection. Once the connection is
    open, we simply write the domain followed by `rn` (the carriage return and linefeed
    characters). This is all that the specification tells us, so we are on our own
    from now on.
  prefs: []
  type: TYPE_NORMAL
- en: Essentially, we are looking for some mention of "no match" in the response,
    and this is how we will decide whether a domain exists or not (`exists` in this
    case is actually just asking the WHOIS server whether it has a record for the
    domain we specified). We use our favorite `bufio.Scanner` method to help us iterate
    over the lines in the response. Passing the connection to `NewScanner` works because
    `net.Conn` is actually an `io.Reader` too. We use `strings.ToLower` so we don't
    have to worry about case sensitivity and `strings.Contains` to check whether any
    one of the lines contains the `no match` text. If it does, we return `false` (since
    the domain doesn't exist); otherwise, we return `true`.
  prefs: []
  type: TYPE_NORMAL
- en: The `com.whois-servers.net` WHOIS service supports domain names for `.com` and
    `.net`, which is why the Domainify program only adds these types of domains. If
    you had used a server that had WHOIS information for a wider selection of domains,
    you could have added support for additional TLDs.
  prefs: []
  type: TYPE_NORMAL
- en: Let's add a `main` function that uses our `exists` function to check whether
    the incoming domains are available or not. The check mark and cross mark symbols
    in the following code are optional if your terminal doesn't support them you are
    free to substitute them with simple `Yes` and `No` strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to `main.go`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can use the check and cross characters in our code happily because all Go
    code files are UTF-8 compliant the best way to actually get these characters is
    to search the Web for them and use the copy and paste option to bring them into
    our code. Otherwise, there are platform-dependent ways to get such special characters.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding code for the `main` function, we simply iterate over each line
    coming in via `os.Stdin`. This process helps us print out the domain with `fmt.Print`
    (but not `fmt.Println`, as we do not want the linefeed yet), call our `exists`
    function to check whether the domain exists or not, and print out the result with
    `fmt.Println` (because we *do* want a linefeed at the end).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we use `time.Sleep` to tell the process to do nothing for a second
    in order to make sure we take it easy on the WHOIS server.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most WHOIS servers will be limited in various ways in order to prevent you from
    taking up too much in terms of resources. So, slowing things down is a sensible
    way to make sure we don't make the remote servers angry.
  prefs: []
  type: TYPE_NORMAL
- en: Consider what this also means for unit tests. If a unit test were actually making
    real requests to a remote WHOIS server, every time your tests run, you will be
    clocking up statistics against your IP address. A much better approach would be
    to stub the WHOIS server to simulate responses.
  prefs: []
  type: TYPE_NORMAL
- en: The `marks` map at the top is a nice way to map the `bool` response from `exists`
    to human-readable text, allowing us to just print the response in a single line
    using `fmt.Println(marks[!exist])`. We are saying *not exist* because our program
    is checking whether the domain is available or not (logically, the opposite of
    whether it exists in the WHOIS server or not).
  prefs: []
  type: TYPE_NORMAL
- en: 'After fixing the import statements for the main.go file, we can try out Available
    to see whether the domain names are available or not by typing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Once Available is running, type in some domain names and see the result appear
    on the next line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Available](img/00056.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, for domains that are not available, we get a little cross mark
    next to them; however, when we make up a domain name using random numbers, we
    see that it is indeed available.
  prefs: []
  type: TYPE_NORMAL
