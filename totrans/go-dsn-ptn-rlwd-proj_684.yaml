- en: Available
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可用
- en: Our final program, Available, will connect to a WHOIS server to ask for details
    about the domains passed to it of course, if no details are returned, we can safely
    assume that the domain is available for purchase. Unfortunately, the WHOIS specification
    (see [http://tools.ietf.org/html/rfc3912](http://tools.ietf.org/html/rfc3912))
    is very small and contains no information about how a WHOIS server should reply
    when you ask for details about a domain. This means programmatically parsing the
    response becomes a messy endeavor. To address this issue for now, we will integrate
    with only a single WHOIS server, which we can be sure will have `No match` somewhere
    in the response when it has no records for the domain.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最终的程序，Available，将连接到 WHOIS 服务器以获取传递给它的域名的详细信息，当然，如果没有返回详细信息，我们可以安全地假设该域名可供购买。不幸的是，WHOIS
    规范（见 [http://tools.ietf.org/html/rfc3912](http://tools.ietf.org/html/rfc3912)）非常小，并且不包含有关当您请求有关域名的详细信息时
    WHOIS 服务器应该如何响应的信息。这意味着程序化解析响应变成了一项混乱的工作。为了解决这个问题，我们现在将仅与单个 WHOIS 服务器集成，我们可以确信当该域名没有记录时，响应中会有
    `No match`。
- en: Note
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A more robust solution is to have a WHOIS interface with a well-defined structure
    for the details and perhaps an error message for cases when the domain doesn't
    exist with different implementations for different WHOIS servers. As you can imagine,
    it's quite a project; it is perfect for an open source effort.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更健壮的解决方案是拥有一个 WHOIS 接口，该接口具有为详细信息定义良好的结构，也许还有当域名不存在时的错误消息，以及为不同的 WHOIS 服务器提供不同的实现。正如你可以想象的那样，这是一个相当大的项目；它非常适合开源努力。
- en: 'Create a new folder called `available` alongside others and add a `main.go`
    file to it containing the following function code:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他文件夹旁边创建一个名为 `available` 的新文件夹，并将一个 `main.go` 文件添加到其中，该文件包含以下函数代码：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `exists` function implements what little there is in the WHOIS specification
    by opening a connection to port `43` on the specified `whoisServer` instance with
    a call to `net.Dial`. We then defer the closing of the connection, which means
    that no matter how the function exits (successful, with an error, or even a panic),
    `Close()` will still be called on the `conn` connection. Once the connection is
    open, we simply write the domain followed by `rn` (the carriage return and linefeed
    characters). This is all that the specification tells us, so we are on our own
    from now on.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`exists` 函数通过调用 `net.Dial` 打开指定 `whoisServer` 实例上的 `43` 端口来实现了 WHOIS 规范中存在的内容。然后我们延迟关闭连接，这意味着无论函数如何退出（成功、出错或甚至恐慌），都会在
    `conn` 连接上调用 `Close()`。一旦连接打开，我们只需简单地写入域名后跟 `rn`（回车和换行字符）。这就是规范告诉我们的全部内容，所以从现在起我们就得自己来了。'
- en: Essentially, we are looking for some mention of "no match" in the response,
    and this is how we will decide whether a domain exists or not (`exists` in this
    case is actually just asking the WHOIS server whether it has a record for the
    domain we specified). We use our favorite `bufio.Scanner` method to help us iterate
    over the lines in the response. Passing the connection to `NewScanner` works because
    `net.Conn` is actually an `io.Reader` too. We use `strings.ToLower` so we don't
    have to worry about case sensitivity and `strings.Contains` to check whether any
    one of the lines contains the `no match` text. If it does, we return `false` (since
    the domain doesn't exist); otherwise, we return `true`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们正在寻找响应中关于 "no match" 的提及，这就是我们决定一个域名是否存在的方法（在这种情况下，`exists` 实际上只是询问 WHOIS
    服务器是否有我们指定的域名的记录）。我们使用我们最喜欢的 `bufio.Scanner` 方法来帮助我们遍历响应中的行。将连接传递给 `NewScanner`
    是可行的，因为 `net.Conn` 实际上也是一个 `io.Reader`。我们使用 `strings.ToLower` 以免担心大小写敏感，并使用 `strings.Contains`
    来检查是否有任何一行包含 `no match` 文本。如果有的话，我们返回 `false`（因为域名不存在）；否则，我们返回 `true`。
- en: The `com.whois-servers.net` WHOIS service supports domain names for `.com` and
    `.net`, which is why the Domainify program only adds these types of domains. If
    you had used a server that had WHOIS information for a wider selection of domains,
    you could have added support for additional TLDs.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`com.whois-servers.net` WHOIS 服务支持 `.com` 和 `.net` 域名，这就是为什么 Domainify 程序只添加这些类型的域名。如果你使用了一个包含更广泛域名
    WHOIS 信息的服务器，你就可以添加对其他顶级域（TLDs）的支持。'
- en: Let's add a `main` function that uses our `exists` function to check whether
    the incoming domains are available or not. The check mark and cross mark symbols
    in the following code are optional if your terminal doesn't support them you are
    free to substitute them with simple `Yes` and `No` strings.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个 `main` 函数，使用我们的 `exists` 函数来检查传入的域名是否可用。以下代码中的勾号和叉号符号是可选的，如果你的终端不支持它们，你可以自由地将它们替换为简单的
    `Yes` 和 `No` 字符串。
- en: 'Add the following code to `main.go`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到 `main.go` 中：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We can use the check and cross characters in our code happily because all Go
    code files are UTF-8 compliant the best way to actually get these characters is
    to search the Web for them and use the copy and paste option to bring them into
    our code. Otherwise, there are platform-dependent ways to get such special characters.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在代码中愉快地使用勾号和叉号字符，因为所有 Go 代码文件都是 UTF-8 兼容的。实际上获取这些字符的最佳方式是搜索网络并使用复制粘贴选项将它们带入我们的代码。否则，有平台依赖的方法来获取这样的特殊字符。
- en: In the preceding code for the `main` function, we simply iterate over each line
    coming in via `os.Stdin`. This process helps us print out the domain with `fmt.Print`
    (but not `fmt.Println`, as we do not want the linefeed yet), call our `exists`
    function to check whether the domain exists or not, and print out the result with
    `fmt.Println` (because we *do* want a linefeed at the end).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `main` 函数的前置代码中，我们简单地遍历通过 `os.Stdin` 进来的每一行。这个过程帮助我们使用 `fmt.Print`（而不是 `fmt.Println`，因为我们还不想要换行符）打印出域名，调用我们的
    `exists` 函数来检查域名是否存在，并使用 `fmt.Println`（因为我们确实想要在末尾有一个换行符）打印出结果。
- en: Finally, we use `time.Sleep` to tell the process to do nothing for a second
    in order to make sure we take it easy on the WHOIS server.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用 `time.Sleep` 来告诉进程暂停一秒钟，以确保我们对 WHOIS 服务器不要太苛刻。
- en: Tip
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Most WHOIS servers will be limited in various ways in order to prevent you from
    taking up too much in terms of resources. So, slowing things down is a sensible
    way to make sure we don't make the remote servers angry.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 WHOIS 服务器都会以各种方式限制，以防止你占用过多的资源。因此，放慢速度是一种明智的做法，以确保我们不会让远程服务器生气。
- en: Consider what this also means for unit tests. If a unit test were actually making
    real requests to a remote WHOIS server, every time your tests run, you will be
    clocking up statistics against your IP address. A much better approach would be
    to stub the WHOIS server to simulate responses.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这对单元测试的意义。如果一个单元测试实际上正在向远程 WHOIS 服务器发送真实请求，每次你的测试运行时，你都会对你的 IP 地址进行统计。一个更好的方法是对
    WHOIS 服务器进行存根以模拟响应。
- en: The `marks` map at the top is a nice way to map the `bool` response from `exists`
    to human-readable text, allowing us to just print the response in a single line
    using `fmt.Println(marks[!exist])`. We are saying *not exist* because our program
    is checking whether the domain is available or not (logically, the opposite of
    whether it exists in the WHOIS server or not).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 顶部的 `marks` 映射是一个很好的方式，将 `exists` 函数返回的 `bool` 响应映射到可读文本，允许我们仅使用 `fmt.Println(marks[!exist])`
    在一行中打印出响应。我们说“不存在”，因为我们的程序正在检查域名是否可用（逻辑上，这是否存在于 WHOIS 服务器中的对立面）。
- en: 'After fixing the import statements for the main.go file, we can try out Available
    to see whether the domain names are available or not by typing the following command:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在修复 main.go 文件的导入语句后，我们可以尝试运行 Available 来查看域名是否可用，只需输入以下命令：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once Available is running, type in some domain names and see the result appear
    on the next line:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Available 运行起来，输入一些域名，然后查看结果出现在下一行：
- en: '![Available](img/00056.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![可用](img/00056.jpeg)'
- en: As you can see, for domains that are not available, we get a little cross mark
    next to them; however, when we make up a domain name using random numbers, we
    see that it is indeed available.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，对于不可用的域名，我们在它们旁边会看到一个小的叉号；然而，当我们使用随机数字来创建一个域名时，我们会看到它确实是可用的。
