["```go\n#!/bin/bash \necho Building domainfinder... \ngo build -o domainfinder \necho Building synonyms... \ncd ../synonyms \ngo build -o ../domainfinder/lib/synonyms \necho Building available... \ncd ../available \ngo build -o ../domainfinder/lib/available \ncd ../build \necho Building sprinkle... \ncd ../sprinkle \ngo build -o ../domainfinder/lib/sprinkle \ncd ../build \necho Building coolify... \ncd ../coolify \ngo build -o ../domainfinder/lib/coolify \ncd ../build \necho Building domainify... \ncd ../domainify \ngo build -o ../domainfinder/lib/domainify \ncd ../build \necho Done.\n```", "```go\npackage main \nvar cmdChain = []*exec.Cmd{ \n  exec.Command(\"lib/synonyms\"), \n  exec.Command(\"lib/sprinkle\"), \n  exec.Command(\"lib/coolify\"), \n  exec.Command(\"lib/domainify\"), \n  exec.Command(\"lib/available\"), \n} \nfunc main() { \n  cmdChain[0].Stdin = os.Stdin \n  cmdChain[len(cmdChain)-1].Stdout = os.Stdout \n  for i := 0; i < len(cmdChain)-1; i++ { \n    thisCmd := cmdChain[i] \n    nextCmd := cmdChain[i+1] \n    stdout, err := thisCmd.StdoutPipe() \n    if err != nil { \n      log.Fatalln(err) \n    } \n    nextCmd.Stdin = stdout \n  } \n  for _, cmd := range cmdChain { \n    if err := cmd.Start(); err != nil { \n      log.Fatalln(err) \n    } else { \n      defer cmd.Process.Kill() \n    } \n  } \n  for _, cmd := range cmdChain { \n    if err := cmd.Wait(); err != nil { \n      log.Fatalln(err) \n    } \n  } \n}\n```"]