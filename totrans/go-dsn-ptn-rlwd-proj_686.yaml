- en: One program to rule them all
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Running our solution by piping programs together is an elegant form of architecture,
    but it doesn't have a very elegant interface. Specifically, whenever we want to
    run our solution, we have to type the long, messy line where each program is listed
    and separated by pipe characters. In this section, we are going to write a Go
    program that uses the `os/exec` package to run each subprogram while piping the
    output from one to the input of the next, as per our design.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder called `domainfinder` alongside the other five programs
    and create another new folder called `lib` inside this folder. The `lib` folder
    is where we will keep builds of our subprograms, but we don't want to copy and
    paste them every time we make a change. Instead, we will write a script that builds
    the subprograms and copies the binaries to the `lib` folder for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file called `build.sh` on Unix machines or `build.bat` for Windows
    and insert into it the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding script simply builds all our subprograms (including `domainfinder`,
    which we are yet to write), telling `go build` to place them in our `lib` folder.
    Be sure to give execution rights to the new script by doing `chmod +x build.sh`
    or something similar. Run this script from a terminal and look inside the `lib`
    folder to ensure that it has indeed placed the binaries for our subprograms.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't worry about the `no buildable Go source files` error for now; it's just
    Go telling us that the `domainfinder` program doesn't have any `.go` files to
    build.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file called `main.go` inside `domainfinder` and insert the following
    code into the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `os/exec` package gives us everything we need to work with to run external
    programs or commands from within Go programs. First, our `cmdChain` slice contains
    `*exec.Cmd` commands in the order in which we want to join them together.
  prefs: []
  type: TYPE_NORMAL
- en: At the top of the `main` function, we tie the `Stdin` (standard in stream) of
    the first program with the `os.Stdin` stream of this program and the `Stdout`
    (standard out stream) of the last program with the `os.Stdout` stream of this
    program. This means that, like before, we will be taking input through the standard
    input stream and writing output to the standard output stream.
  prefs: []
  type: TYPE_NORMAL
- en: Our next block of code is where we join the subprograms together by iterating
    over each item and setting its `Stdin` to the `Stdout` stream of the program before
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows each program with a description of where it gets
    its input from and where its output goes:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Program** | **Input (Stdin)** | **Output (Stdout)** |'
  prefs: []
  type: TYPE_TB
- en: '| synonyms | The same `Stdin` as `domainfinder` | sprinkle |'
  prefs: []
  type: TYPE_TB
- en: '| sprinkle | synonyms | coolify |'
  prefs: []
  type: TYPE_TB
- en: '| coolify | sprinkle | domainify |'
  prefs: []
  type: TYPE_TB
- en: '| domainify | coolify | available |'
  prefs: []
  type: TYPE_TB
- en: '| available | domainify | The same `Stdout` as `domainfinder` |'
  prefs: []
  type: TYPE_TB
- en: We then iterate over each command calling the `Start` method, which runs the
    program in the background (as opposed to the `Run` method, which will block our
    code until the subprogram exists which would beÂ no good since we will have to
    run five programs at the same time). If anything goes wrong, we bail with `log.Fatalln`;
    however, if the program starts successfully, we defer a call to kill the process.
    This helps us ensure the subprograms exit when our `main` function exits, which
    will be when the `domainfinder` program ends.
  prefs: []
  type: TYPE_NORMAL
- en: Once all the programs start running, we iterate over every command again and
    wait for it to finish. This is to ensure that `domainfinder` doesn't exit early
    and kill off all the subprograms too soon.
  prefs: []
  type: TYPE_NORMAL
- en: Run the `build.sh` or `build.bat` script again and notice that the `domainfinder`
    program has the same behavior as we have seen before, with a much more elegant
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the output from our programs when we type `clouds`;
    we have found quite a few available domain name options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![One program to rule them all](img/00059.jpeg)'
  prefs: []
  type: TYPE_IMG
