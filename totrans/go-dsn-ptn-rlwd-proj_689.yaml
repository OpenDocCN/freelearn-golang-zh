- en: The system design
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统设计
- en: 'Having a basic design sketched out is often useful, especially in distributed
    systems where many components will be communicating with each other in different
    ways. We don''t want to spend too long on this stage because our design is likely
    to evolve as we get stuck into the details, but we will look at a high-level outline
    so that we can discuss the constituents and how they fit together:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在分布式系统中，许多组件将以不同的方式相互通信，因此绘制一个基本的设计草图通常很有用。我们不想在这个阶段花费太多时间，因为我们的设计可能会随着我们深入细节而演变，但我们将查看一个高级概述，以便我们可以讨论组成部分及其如何组合在一起：
- en: '![The system design](img/00060.jpeg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![系统设计](img/00060.jpeg)'
- en: 'The preceding diagram shows the basic overview of the system we are going to
    build:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张图展示了我们将要构建的系统的基本概述：
- en: Twitter is the social media network we all know and love.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Twitter是我们都熟知并喜爱的社交媒体网络。
- en: Twitter's streaming API allows long-running connections where tweet data is
    streamed as quickly as possible.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Twitter的流式API允许建立长时间运行的连接，推文数据可以尽可能快地流式传输。
- en: '`twittervotes` is a program we will write that pulls the relevant tweet data
    via the Twitter API, decides what is being voted for (rather, which options are
    mentioned in the tweet body), and then pushes the vote into NSQ.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`twittervotes`是我们将要编写的程序，它通过Twitter API提取相关的推文数据，决定正在投票的内容（或者说，推文正文中提到的选项），然后将投票推送到NSQ。'
- en: NSQ is an open source, real-time distributed messaging platform designed to
    operate at scale, built and maintained by Bit.ly. NSQ carries the message across
    its instances, making it available to anyone who has expressed an interest in
    the vote data.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NSQ是一个开源的实时分布式消息平台，旨在大规模运行，由Bit.ly开发和维护。NSQ在其实例之间传递消息，使任何对投票数据表示兴趣的人都能访问。
- en: '`counter` is a program we will write that listens out for votes on the messaging
    queue and periodically saves the results in the MongoDB database. It receives
    the vote messages from NSQ and keeps an in-memory tally of the results, periodically
    pushing an update to persist the data.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`counter`是我们将要编写的程序，它监听消息队列中的投票，并定期将结果保存到MongoDB数据库中。它从NSQ接收投票消息，并保持内存中的结果计数，定期推送更新以持久化数据。'
- en: MongoDB is an open source document database designed to operate at scale.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MongoDB是一个开源的文档数据库，旨在大规模运行。
- en: '`web` is a web server program that will expose the live results that we will
    write in the next chapter.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`web`是一个网络服务器程序，它将公开我们在下一章中编写的实时结果。'
- en: It could be argued that a single Go program could be written that reads the
    tweets, counts the votes, and pushes them to a user interface, but such a solution,
    while being a great proof of concept, would be very limited in scale. In our design,
    any one of the components can be horizontally scaled as the demand for that particular
    capability increases. If we have relatively few polls but lots of people viewing
    the data, we can keep the `twittervotes` and `counter` instances down and add
    more `web` and MongoDB nodes or vice versa if the situation is reversed.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 可以争论说，可以编写一个单一的Go程序来读取推文、计数投票并将它们推送到用户界面，但这样的解决方案，虽然是一个很好的概念证明，但在规模上会非常有限。在我们的设计中，任何组件都可以随着对该特定功能的需求数量的增加而水平扩展。如果我们有相对较少的投票但很多人查看数据，我们可以保持`twittervotes`和`counter`实例的数量，并添加更多的`web`和MongoDB节点，反之亦然，如果情况相反。
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Another key advantage to our design is redundancy; since we can have many instances
    of our components working at the same time, if one of our boxes disappears (due
    to a system crash or a power cut, for example), the others can pick up the slack.
    Modern architectures often distribute such a system over the geographical expanse
    in order to protect from local natural disasters too. All of these options are
    available for use if we build our solution in this way.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设计的另一个关键优势是冗余；由于我们可以同时运行许多组件的实例，如果一个我们的盒子消失了（例如，由于系统崩溃或断电），其他可以填补空缺。现代架构通常将此类系统分布到地理范围，以防止局部自然灾害。如果我们以这种方式构建解决方案，所有这些选项都可以使用。
- en: We chose specific technologies in this chapter because of their links to Go
    (NSQ, for example, is written entirely in Go) and the availability of well-tested
    drivers and packages. Conceptually, however, you can drop in a variety of alternatives
    as you see fit.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中选择了特定的技术，因为它们与Go语言（例如，NSQ完全是用Go编写的）有联系，并且有经过良好测试的驱动程序和包可用。然而，从概念上讲，你可以根据需要添加各种替代方案。
