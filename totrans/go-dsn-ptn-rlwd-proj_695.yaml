- en: Reading votes from Twitter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In your `$GOPATH/src` folder, alongside other projects, create a new folder
    called `socialpoll` for this chapter. This folder won''t be a Go package or a
    program by itself, but it will contain our three component programs. Inside `socialpoll`,
    create a new folder called `twittervotes` and add the obligatory `main.go` template
    (this is important as `main` packages without a `main` function won''t compile):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Our `twittervotes` program is going to:'
  prefs: []
  type: TYPE_NORMAL
- en: Load all polls from the MongoDB database using `mgo` and collect all options
    from the `options` array in each document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open and maintain a connection to Twitter's streaming APIs looking for any mention
    of the options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Figure out which option is mentioned and push that option through to NSQ for
    each tweet that matches the filter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the connection to Twitter is dropped (which is common in long-running connections
    that are actually part of Twitter's streaming API specification) after a short
    delay (so that we do not bombard Twitter with connection requests), reconnect
    and continue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Periodically re-query MongoDB for the latest polls and refresh the connection
    to Twitter to make sure we are always looking out for the right options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gracefully stop itself when the user terminates the program by hitting *Ctrl
    + C*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
