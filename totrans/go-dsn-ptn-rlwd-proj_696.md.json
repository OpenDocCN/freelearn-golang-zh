["```go\n#!/bin/bash \nexport SP_TWITTER_KEY=yC2EDnaNrEhN5fd33g... \nexport SP_TWITTER_SECRET=6n0rToIpskCo1ob... \nexport SP_TWITTER_ACCESSTOKEN=2427-13677... \nexport SP_TWITTER_ACCESSSECRET=SpnZf336u... \n\n```", "```go\nSET SP_TWITTER_KEY=yC2EDnaNrEhN5fd33g... \nSET SP_TWITTER_SECRET=6n0rToIpskCo1ob... \nSET SP_TWITTER_ACCESSTOKEN=2427-13677... \nSET SP_TWITTER_ACCESSSECRET=SpnZf336u... \n\n```", "```go\nvar conn net.Conn \nfunc dial(netw, addr string) (net.Conn, error) { \n  if conn != nil { \n    conn.Close() \n    conn = nil \n  } \n  netc, err := net.DialTimeout(netw, addr, 5*time.Second) \n  if err != nil { \n    return nil, err \n  } \n  conn = netc \n  return netc, nil \n} \n\n```", "```go\nvar reader io.ReadCloser \nfunc closeConn() { \n  if conn != nil { \n    conn.Close() \n  } \n  if reader != nil { \n    reader.Close() \n  } \n} \n\n```", "```go\nvar ( \n  authClient *oauth.Client \n  creds *oauth.Credentials \n) \nfunc setupTwitterAuth() { \n  var ts struct { \n    ConsumerKey    string `env:\"SP_TWITTER_KEY,required\"` \n    ConsumerSecret string `env:\"SP_TWITTER_SECRET,required\"` \n    AccessToken    string `env:\"SP_TWITTER_ACCESSTOKEN,required\"` \n    AccessSecret   string `env:\"SP_TWITTER_ACCESSSECRET,required\"` \n  } \n  if err := envdecode.Decode(&ts); err != nil { \n    log.Fatalln(err) \n  } \n  creds = &oauth.Credentials{ \n    Token:  ts.AccessToken, \n    Secret: ts.AccessSecret, \n  } \n  authClient = &oauth.Client{ \n    Credentials: oauth.Credentials{ \n      Token:  ts.ConsumerKey, \n      Secret: ts.ConsumerSecret, \n    }, \n  } \n} \n\n```", "```go\nvar ( \n  authSetupOnce sync.Once \n  httpClient    *http.Client \n) \nfunc makeRequest(req *http.Request, params url.Values) (*http.Response, error) { \n  authSetupOnce.Do(func() { \n    setupTwitterAuth() \n    httpClient = &http.Client{ \n      Transport: &http.Transport{ \n        Dial: dial, \n      }, \n    } \n  }) \n  formEnc := params.Encode() \n  req.Header.Set(\"Content-Type\", \"application/x-www-form- urlencoded\") \n  req.Header.Set(\"Content-Length\", strconv.Itoa(len(formEnc))) \n  req.Header.Set(\"Authorization\",  authClient.AuthorizationHeader(creds, \n  \"POST\",   \n  req.URL, params)) \n  return httpClient.Do(req) \n} \n\n```"]