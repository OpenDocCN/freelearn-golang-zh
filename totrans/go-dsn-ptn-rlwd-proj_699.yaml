- en: Publishing to NSQ
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once our code successfully notices votes on Twitter and sends them down the
    `votes` channel, we need a way to publish them into an NSQ topic; after all, this
    is the point of the `twittervotes` program.
  prefs: []
  type: TYPE_NORMAL
- en: We will write a function called `publishVotes`, which will take the `votes`
    channel, this time of type `<-chan string` (a receive only channel), and publish
    each string that is received from it.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In our previous functions, the `votes` channel was of type `chan<- string`,
    but this time, it's of the type `<-chan string`. You might think this is a mistake
    or even that it means that we cannot use the same channel for both, but you would
    be wrong. The channel we create later will be made with `make(chan string)`, neither
    receive nor only send, and can act in both cases. The reason for using the `<-`
    operator on a channel in arguments is to make the intent of what the channel will
    be used for clear, or in the case where it is the return type, to prevent users
    from accidentally sending on channels intended for receiving or vice versa. The
    compiler will actually produce an error if they use such a channel incorrectly.
  prefs: []
  type: TYPE_NORMAL
- en: Once the `votes` channel is closed (this is how the external code will tell
    our function to stop working), we will stop publishing and send a signal down
    the returned stop signal channel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `publishVotes` function to `main.go`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Again, the first thing we do is create `stopchan`, which we later return, this
    time not deferring the signaling but doing it inline by sending `struct{}{}` down
    `stopchan`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The difference in how we handle `stopchan` is to show alternative options. Within
    one code base, you should pick a style you like and stick with it until a standard
    emerges within the community; in which case, we should all go with that. It is
    also possible to close `stopchan` rather than send anything down it, which will
    also unblock the code waiting on that channel. But once a channel is closed, it
    cannot be reopened.
  prefs: []
  type: TYPE_NORMAL
- en: We then create an NSQ producer by calling `NewProducer` and connecting to the
    default NSQ port on `localhost` using a default configuration. We start a goroutine,
    which uses another great built-in feature of the Go language that lets us continually
    pull values from a channel (in our case, the `votes` channel) just by doing a
    normal `for...range` operation on it. Whenever the channel has no values, execution
    will be blocked until one comes down the line. If the `votes` channel is closed,
    the `for` loop will exit.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To learn more about the power of channels in Go, it is highly recommended that
    you seek out blog posts and videos by John Graham-Cumming, in particular, one
    entitled *A Channel Compendium* that he presented at Gophercon 2014 and which
    contains a brief history of channels, including their origin (interestingly, John
    was also the guy who successfully petitioned the British government to officially
    apologize for its treatment of the late, great Alan Turing).
  prefs: []
  type: TYPE_NORMAL
- en: When the loop exits (after the `votes` channel is closed), the publisher is
    stopped, following which the `stopchan` signal is sent.Â Did anything stand-out
    as unusual in the `publishVotes` function? We are breaking a cardinal rule of
    Go by ignoring an error (assigning it to an underscore variables; therefore dismissing
    it). As an additional exercise, catch the error and deal with it in a way that
    seems suitable.
  prefs: []
  type: TYPE_NORMAL
