["```go\nvar stoplock sync.Mutex // protects stop \nstop := false \nstopChan := make(chan struct{}, 1) \nsignalChan := make(chan os.Signal, 1) \ngo func() {  \n  <-signalChan \n  stoplock.Lock() \n  stop = true \n  stoplock.Unlock() \n  log.Println(\"Stopping...\") \n  stopChan <- struct{}{} \n  closeConn() \n}() \nsignal.Notify(signalChan, syscall.SIGINT, syscall.SIGTERM) \n\n```", "```go\nif err := dialdb(); err != nil { \n  log.Fatalln(\"failed to dial MongoDB:\", err) \n} \ndefer closedb() \n\n```", "```go\n// start things \nvotes := make(chan string) // chan for votes \npublisherStoppedChan := publishVotes(votes) \ntwitterStoppedChan := startTwitterStream(stopChan, votes) \ngo func() { \n  for { \n    time.Sleep(1 * time.Minute) \n    closeConn() \n    stoplock.Lock() \n    if stop { \n      stoplock.Unlock() \n      return \n    } \n    stoplock.Unlock() \n  } \n}() \n<-twitterStoppedChan \nclose(votes) \n<-publisherStoppedChan \n\n```"]