["```go\nvar counts map[string]int \nvar countsLock sync.Mutex \n\n```", "```go\nlog.Println(\"Connecting to nsq...\") \nq, err := nsq.NewConsumer(\"votes\", \"counter\", nsq.NewConfig()) \nif err != nil { \n  fatal(err) \n  return \n} \n\n```", "```go\nq.AddHandler(nsq.HandlerFunc(func(m *nsq.Message) error { \n  countsLock.Lock() \n  defer countsLock.Unlock() \n  if counts == nil { \n    counts = make(map[string]int) \n  } \n  vote := string(m.Body) \n  counts[vote]++ \n  return nil \n})) \n\n```", "```go\nif err := q.ConnectToNSQLookupd(\"localhost:4161\");\n err !=nil { \n  fatal(err) \n  return \n} \n\n```"]