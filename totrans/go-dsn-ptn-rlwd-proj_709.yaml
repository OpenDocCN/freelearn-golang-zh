- en: Chapter 6.  Exposing Data and Functionality through a RESTful Data Web Service
    API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we built a service that reads tweets from Twitter,
    counts the hash tag votes, and stores the results in a MongoDB database. We also
    used the MongoDB shell to add polls and see the poll results. This approach is
    fine if we are the only ones using our solution, but it would be madness if we
    released our project and expected users to connect directly to our MongoDB instance
    in order to use the service we built.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, in this chapter, we are going to build a RESTful data service through
    which the data and functionality will be exposed. We will also put together a
    simple website that consumes the new API. Users may then either use our website
    to create and monitor polls or build their own application on top of the web services
    we release.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Code in this chapter depends on the code in [Chapter 5](part0174_split_000.html#55U1S1-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Chapter 5.  Building Distributed Systems and Working with Flexible Data"), *Building
    Distributed Systems and Working with Flexible Data*, so it is recommended that
    you complete that chapter first, especially since it covers setting up the environment
    that the code in this chapter runs on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, you will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: How wrapping `http.HandlerFunc` types can give us a simple but powerful pipeline
    of execution for our HTTP requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to safely share data between HTTP handlers using the `context` package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices for the writing of handlers responsible for exposing data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where small abstractions can allow us to write the simplest possible implementations
    now but leave room to improve them later without changing the interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How adding simple helper functions and types to our project will prevent us
    from (or at least defer) adding dependencies on external packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
