- en: Sharing data between handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Occasionally, we need to share a state between our middleware and handlers.
    Go 1.7 brought the `context` package into the standard library, which gives us,
    among other things, a way to share basic request-scoped data.
  prefs: []
  type: TYPE_NORMAL
- en: Every `http.Request` method comes with a `context.Context` object accessible
    via the `request.Context()` method, from which we can create new context objects.
    We can then call `request.WithContext()` to get a (cheap) shallow copied `http.Request`
    method that uses our new `Context` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a value, we can create a new context (based on the existing one from
    the request) via the `context.WithValue` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While you can technically store any type of data using this approach, it is
    only recommended that you store simple primitive types such as Strings and Integers
    and do not use it to inject dependencies or pointers to other objects that your
    handlers might need. Later in this chapter, we will explore patterns to access
    dependencies, such as a database connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'In middleware code, we can then use our new `ctx` object when we pass execution
    to the wrapped handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: It is worth exploring the documentation for the context package at [https://golang.org/pkg/context/](https://golang.org/pkg/context/)
    in order to find out what other features it provides.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to use this technique to allow our handlers to have access to an
    API key that is extracted and validated elsewhere.
  prefs: []
  type: TYPE_NORMAL
