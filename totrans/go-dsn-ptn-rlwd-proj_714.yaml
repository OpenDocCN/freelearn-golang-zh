- en: API keys
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most web APIs require clients to register an API key for their application,
    which they are asked to send along with every request. Such keys have many purposes,
    ranging from simply identifying which app the requests are coming from to addressing
    authorization concerns in situations where some apps are only able to do limited
    things based on what a user has allowed. While we don't actually need to implement
    API keys for our application, we are going to ask clients to provide one, which
    will allow us to add an implementation later, while keeping the interface constant.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to add our first `HandlerFunc` wrapper function called `withAPIKey`
    to the bottom of `main.go`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, our `withAPIKey` function both takes an `http.HandlerFunc` type
    as an argument and returns one; this is what we mean by wrapping in this context.
    The `withAPIKey` function relies on a number of other functions that we are yet
    to write, but you can clearly see what's going on. Our function immediately returns
    a new `http.HandlerFunc` type that performs a check for the `key` query parameter
    by calling `isValidAPIKey`. If the key is deemed invalid (by the return of `false`),
    we respond with an `invalid API key` error; otherwise, we put the key into the
    context and call the next handler. To use this wrapper, we simply pass an `http.HandlerFunc`
    type into this function in order to enable the `key` parameter check. Since it
    returns an `http.HandlerFunc` type too, the result can then be passed on to other
    wrappers or given directly to the `http.HandleFunc` function to actually register
    it as the handler for a particular path pattern.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add our `isValidAPIKey` function next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: For now, we are simply going to hardcode the API key as `abc123`; anything else
    will return `false` and therefore be considered invalid. Later, we can modify
    this function to consult a configuration file or database to check the authenticity
    of a key without affecting how we use the `isValidAPIKey` method or the `withAPIKey`
    wrapper.
  prefs: []
  type: TYPE_NORMAL
