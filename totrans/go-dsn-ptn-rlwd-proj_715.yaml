- en: Cross-origin resource sharing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The same-origin security policy mandates that AJAX requests in web browsers
    be allowed only for services hosted on the same domain, which would make our API
    fairly limited since we won''t necessarily be hosting all of the websites that
    use our web service. The **CORS** (**Cross-origin resource sharing**) technique
    circumnavigates the same-origin policy, allowing us to build a service capable
    of serving websites hosted on other domains. To do this, we simply have to set
    the `Access-Control-Allow-Origin` header in response to `*`. While we''re at it,
    since we''re going to use the `Location` header in our create poll call – we''ll
    allow this header to be accessible by the client too, which can be done by listing
    it in the `Access-Control-Expose-Headers` header. Add the following code to `main.go`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This is the simplest wrapper function yet; it just sets the appropriate header
    on the `ResponseWriter` type and calls the specified `http.HandlerFunc` type.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, we are handling CORS explicitly so we can understand exactly
    what is going on; for real production code, you should consider employing an open
    source solution, such as [https://github.com/fasterness/cors](https://github.com/fasterness/cors).
  prefs: []
  type: TYPE_NORMAL
