- en: Injecting dependencies
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖注入
- en: Now that we can be sure that a request has a valid API key and is CORS-compliant,
    we must consider how handlers will connect to the database. One option is to have
    each handler dial its own connection, but this isn't very **DRY** (**Don't Repeat
    Yourself**) and leaves room for potentially erroneous code, such as code that
    forgets to close a database session once it is finished with it. It also means
    that if we wanted to change how we connected to the database (perhaps we want
    to use a domain name instead of a hardcoded IP address), we might have to modify
    our code in many places, rather than one.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们可以确定请求有一个有效的API密钥并且是CORS兼容的，我们必须考虑处理程序将如何连接到数据库。一个选项是让每个处理程序自己拨号连接，但这并不是非常**DRY**（**不要重复自己**）并且留下了可能产生错误代码的空间，例如忘记在完成数据库会话后关闭数据库会话的代码。这也意味着如果我们想改变我们连接数据库的方式（也许我们想使用域名而不是硬编码的IP地址），我们可能不得不在许多地方修改我们的代码，而不是一个地方。
- en: Instead, we will create a new type that encapsulates all the dependencies for
    our handlers and construct it with a database connection in `main.go`.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们将创建一个新的类型，它封装了处理程序的所有依赖，并在 `main.go` 中使用数据库连接来构建它。
- en: 'Create a new type called `Server`:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '创建一个新的类型名为 `Server`:'
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Our handler functions will be methods of this server, which is how they will
    be able to access the database session.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的处理程序函数将是这个服务器的成员方法，这样它们就能访问数据库会话。
