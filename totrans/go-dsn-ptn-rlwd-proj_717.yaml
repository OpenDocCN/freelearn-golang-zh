- en: Responding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A big part of any API is responding to requests with a combination of status
    codes, data, errors, and sometimes headers – the `net/http` package makes all
    of this very easy to do. One option we have, which remains the best option for
    tiny projects or even the early stages of big projects, is to just build the response
    code directly inside the handler.
  prefs: []
  type: TYPE_NORMAL
- en: As the number of handlers grows, however, we will end up duplicating a lot of
    code and sprinkling representation decisions all over our project. A more scalable
    approach is to abstract the response code into helper functions.
  prefs: []
  type: TYPE_NORMAL
- en: For the first version of our API, we are going to speak only JSON, but we want
    the flexibility to add other representations later if we need to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file called `respond.go` and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: These two functions abstract the decoding and encoding of data from and to the
    `Request` and `ResponseWriter` objects, respectively. The decoder also closes
    the request body, which is recommended. Although we haven't added much functionality
    here, it means that we do not need to mention JSON anywhere else in our code,
    and if we decide to add support for other representations or switch to a binary
    protocol instead, we only need to touch these two functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we are going to add a few more helpers that will make responding even
    easier. In `respond.go`, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This function makes it easy to write the status code and some data to the `ResponseWriter`
    object using our `encodeBody` helper.
  prefs: []
  type: TYPE_NORMAL
- en: 'Handling errors is another important aspect that is worth abstracting. Add
    the following `respondErr` helper:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This method gives us an interface similar to the `respond` function, but the
    data written will be enveloped in an `error` object in order to make it clear
    that something went wrong. Finally, we can add an HTTP-error-specific helper that
    will generate the correct message for us using the `http.StatusText` function
    from the Go standard library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note that these functions are all dog food, which means that they use each other
    (as in, eating your own dog food), which is important since we want actual responding
    to happen in only one place for if (or more likely, when) we need to make changes.
  prefs: []
  type: TYPE_NORMAL
