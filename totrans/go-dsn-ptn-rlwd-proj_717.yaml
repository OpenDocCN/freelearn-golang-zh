- en: Responding
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应
- en: A big part of any API is responding to requests with a combination of status
    codes, data, errors, and sometimes headers – the `net/http` package makes all
    of this very easy to do. One option we have, which remains the best option for
    tiny projects or even the early stages of big projects, is to just build the response
    code directly inside the handler.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 任何API的一个重要部分是使用状态码、数据、错误以及有时是头部的组合来响应请求——“net/http”包使所有这些操作变得非常简单。我们有一个选项，对于小型项目或者大型项目的早期阶段来说，这仍然是一个最佳选项，那就是直接在处理器中构建响应代码。
- en: As the number of handlers grows, however, we will end up duplicating a lot of
    code and sprinkling representation decisions all over our project. A more scalable
    approach is to abstract the response code into helper functions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，随着处理器的数量增加，我们最终会在项目中大量重复代码，并将表示决策散布到各个角落。一个更可扩展的方法是将响应代码抽象成辅助函数。
- en: For the first version of our API, we are going to speak only JSON, but we want
    the flexibility to add other representations later if we need to.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们API的第一个版本，我们将只使用JSON进行通信，但我们希望有灵活性，以便在需要时添加其他表示形式。
- en: 'Create a new file called `respond.go` and add the following code:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `respond.go` 的新文件，并添加以下代码：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: These two functions abstract the decoding and encoding of data from and to the
    `Request` and `ResponseWriter` objects, respectively. The decoder also closes
    the request body, which is recommended. Although we haven't added much functionality
    here, it means that we do not need to mention JSON anywhere else in our code,
    and if we decide to add support for other representations or switch to a binary
    protocol instead, we only need to touch these two functions.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个函数分别抽象了从 `Request` 和 `ResponseWriter` 对象中解码和编码数据。解码器还会关闭请求体，这是推荐的。尽管我们在这里没有添加很多功能，但这意味着我们不需要在我们的代码的其他地方提及JSON，并且如果我们决定添加对其他表示形式的支持或切换到二进制协议，我们只需要修改这两个函数。
- en: 'Next, we are going to add a few more helpers that will make responding even
    easier. In `respond.go`, add the following code:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加一些额外的辅助函数，这将使响应变得更加容易。在 `respond.go` 中添加以下代码：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This function makes it easy to write the status code and some data to the `ResponseWriter`
    object using our `encodeBody` helper.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数使我们能够通过我们的 `encodeBody` 辅助函数轻松地将状态码和一些数据写入 `ResponseWriter` 对象。
- en: 'Handling errors is another important aspect that is worth abstracting. Add
    the following `respondErr` helper:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 处理错误是另一个值得抽象的重要方面。添加以下 `respondErr` 辅助函数：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This method gives us an interface similar to the `respond` function, but the
    data written will be enveloped in an `error` object in order to make it clear
    that something went wrong. Finally, we can add an HTTP-error-specific helper that
    will generate the correct message for us using the `http.StatusText` function
    from the Go standard library:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法为我们提供了一个类似于 `respond` 函数的接口，但写入的数据将被包裹在一个 `error` 对象中，以便清楚地表明出现了错误。最后，我们可以添加一个针对HTTP错误特定的辅助函数，该函数将使用Go标准库中的
    `http.StatusText` 函数为我们生成正确的消息：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that these functions are all dog food, which means that they use each other
    (as in, eating your own dog food), which is important since we want actual responding
    to happen in only one place for if (or more likely, when) we need to make changes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这些函数都是“狗粮”，这意味着它们相互使用（就像吃自己的狗粮一样），这对于我们希望在只有一个地方进行实际响应（或者更有可能，在需要更改时）来说非常重要。
