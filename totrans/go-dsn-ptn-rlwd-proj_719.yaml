- en: Serving our API with one function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A web service is nothing more than a simple Go program that binds to a specific
    HTTP address and port and serves requests, so we get to use all our command-line
    tool writing knowledge and techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We also want to ensure that our `main` function is as simple and modest as possible,
    which is always a goal of coding, especially in Go.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before writing our `main` function, let''s look at a few design goals of our
    API program:'
  prefs: []
  type: TYPE_NORMAL
- en: We should be able to specify the HTTP address and port to which our API listens
    and the address of the MongoDB instances without having to recompile the program
    (through command-line flags)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We want the program to gracefully shut down when we terminate it, allowing the
    in-flight requests (requests that are still being processed when the termination
    signal is sent to our program) to complete
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We want the program to log out status updates and report errors properly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Atop the `main.go` file, replace the `main` function placeholder with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This function is the entirety of our API `main` function. The first thing we
    do is specify two command-line flags, `addr` and `mongo`, with some sensible defaults
    and ask the `flag` package to parse them. We then attempt to dial the MongoDB
    database at the specified address. If we are unsuccessful, we abort with a call
    to `log.Fatalln`. Assuming the database is running and we are able to connect,
    we store the reference in the  `db` variable before deferring the closing of the
    connection. This ensures that our program properly disconnects and tidies up after
    itself when it ends.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We create our server and specify the database dependency. We are calling our
    server `s`, which some people think is a bad practice because it's difficult to
    read code referring to a single letter variable and know what it is. However,
    since the scope of this variable is so small, we can be sure that its use will
    be very near to its definition, removing the potential for confusion.
  prefs: []
  type: TYPE_NORMAL
- en: We then create a new `http.ServeMux` object, which is a request multiplexer
    provided by the Go standard library, and register a single handler for all requests
    that begin with the `/polls/` path. Note that the `handlePolls` handler is a method
    on our server, and this is how it will be able to access the database.
  prefs: []
  type: TYPE_NORMAL
