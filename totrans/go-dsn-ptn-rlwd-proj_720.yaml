- en: Using handler function wrappers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is when we call `HandleFunc` on the `ServeMux` handler that we are making
    use of our handler function wrappers with this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Since each function takes an `http.HandlerFunc` type as an argument and also
    returns one, we are able to chain the execution just by nesting the function calls,
    as we have done previously. So when a request comes in with a path prefix of `/polls/`,
    the program will take the following execution path:'
  prefs: []
  type: TYPE_NORMAL
- en: The `withCORS` function is called, which sets the appropriate header.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `withAPIKey` function is called next, which checks the request for an API
    key and aborts if it's invalid or else calls the next handler function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `handlePolls` function is then called, which may use the helper functions
    in `respond.go` to write a response to the client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execution goes back to `withAPIKey`, which exits.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execution finally goes back to `withCORS`, which exits.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
