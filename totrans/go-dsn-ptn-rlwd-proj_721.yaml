- en: Handling endpoints
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理端点
- en: The final piece of the puzzle is the `handlePolls` function, which will use
    the helpers to understand the incoming request and access the database and generate
    a meaningful response that will be sent back to the client. We also need to model
    the poll data that we were working with in the previous chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 拼图中的最后一部分是`handlePolls`函数，该函数将使用辅助工具来理解传入的请求、访问数据库并生成一个有意义的响应，该响应将被发送回客户端。我们还需要对上一章中我们处理过的投票数据进行建模。
- en: 'Create a new file called `polls.go` and add the following code:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`polls.go`的新文件，并添加以下代码：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, we define a structure called `poll`, which has five fields that in turn
    describe the polls being created and maintained by the code we wrote in the previous
    chapter. We have also added the `APIKey` field, which you probably wouldn't do
    in the real world but which will allow us to demonstrate how we extract the API
    key from the context. Each field also has a tag (two in the `ID` case), which
    allows us to provide some extra metadata.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了一个名为`poll`的结构，它有五个字段，这些字段反过来描述了我们在上一章中编写的代码创建和维护的投票。我们还添加了`APIKey`字段，你可能在现实世界中不会这样做，但它将允许我们演示如何从上下文中提取API密钥。每个字段都有一个标签（在`ID`的情况下有两个），这允许我们提供一些额外的元数据。
