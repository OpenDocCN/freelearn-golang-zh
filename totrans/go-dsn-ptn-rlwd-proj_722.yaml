- en: Using tags to add metadata to structs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Tags are just a string that follows a field definition within a `struct` type
    on the same line. We use the black tick character to denote literal strings, which
    means we are free to use double quotes within the tag string itself. The `reflect`
    package allows us to pull out the value associated with any key; in our case,
    both `bson` and `json` are examples of keys, and they are each key/value pair
    separated by a space character. Both the `encoding/json` and `gopkg.in/mgo.v2/bson`
    packages allow you to use tags to specify the field name that will be used with
    encoding and decoding (along with some other properties) rather than having it
    infer the values from the name of the fields themselves. We are using BSON to
    talk with the MongoDB database and JSON to talk to the client, so we can actually
    specify different views of the same `struct` type. For example, consider the ID
    field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The name of the field in Go is `ID`, the JSON field is `id`, and the BSON field
    is `_id`, which is the special identifier field used in MongoDB.
  prefs: []
  type: TYPE_NORMAL
