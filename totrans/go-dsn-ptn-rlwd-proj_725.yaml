- en: A web client that consumes the API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to put together an ultra simple web client that consumes the capabilities
    and data exposed through our API, allowing users to interact with the polling
    system we built in the previous chapter and earlier in this chapter. Our client
    will be made up of three web pages:'
  prefs: []
  type: TYPE_NORMAL
- en: An `index.html` page that shows all the polls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `view.html` page that shows the results of a specific poll
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `new.html` page that allows users to create new polls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a new folder called `web` alongside the `api` folder and add the following
    content to the `main.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: These few lines of Go code really highlight the beauty of the language and the
    Go standard library. They represent a complete, highly scalable, static website
    hosting program. The program takes an `addr` flag and uses the familiar `http.ServeMux`
    type to serve static files from a folder called `public`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Building the next few pages –while we're building the UI â€“consists of writing
    a lot of HTML and JavaScript code. Since this is not Go code, if you'd rather
    not type it all out, feel free to head over to the GitHub repository for this
    book and copy and paste it from [https://github.com/matryer/goblueprints](https://github.com/matryer/goblueprints).
    You are also free to include the latest versions of the Bootstrap and jQuery libraries
    as you see fit, but there may be implementation differences with subsequent versions.
  prefs: []
  type: TYPE_NORMAL
