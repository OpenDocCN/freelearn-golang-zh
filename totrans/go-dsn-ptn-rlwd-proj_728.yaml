- en: Showing the details of a poll
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The final page of our app we need to complete is the `view.html` page, where
    users can see the details and live results of the poll. Create a new file called
    `view.html` inside the `public` folder and add the following HTML code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This page is mostly similar to the other pages; it contains elements to present
    the title of the poll, the options, and a pie chart. We will be mashing up Google''s
    Visualization API with our API to present the results. Underneath the final `div`
    tag in `view.html` (and above the closing `body` tag), add the following `script`
    tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We include the dependencies we will need in order to power our page, jQuery
    and Bootstrap, and also the Google JavaScript API. The code loads the appropriate
    visualization libraries from Google and waits for the DOM elements to load before
    extracting the poll ID from the URL by splitting it on `poll=`. We then create
    a variable called `update` that represents a function responsible for generating
    the view of the page. This approach is taken to make it easy for us to use `window.setTimeout`
    in order to issue regular calls to update the view. Inside the `update` function,
    we use `$.get` to make a `GET` request to our `/polls/{id}` endpoint, replacing
    `{id}` with the actual ID we extracted from the URL earlier. Once the poll has
    loaded, we update the title on the page and iterate over the options to add them
    to the list. If there are results (remember, in the previous chapter, the `results`
    map was only added to the data as votes started being counted), we create a new
    `google.visualization.PieChart` object and build a `google.visualization.DataTable`
    object containing the results. Calling `draw` on the chart causes it to render
    the data and thus update the chart with the latest numbers. We then use `setTimeout`
    to tell our code to call `update` again in another second.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we bind to the `click` event of the `delete` button we added to our
    page, and after asking the user whether they are sure, make a `DELETE` request
    to the polls URL and then redirect them back to the home page. It is this request
    that will actually cause the `OPTIONS` request to be made first, asking for permission,
    which is why we added explicit support for it in our `handlePolls` function earlier.
  prefs: []
  type: TYPE_NORMAL
