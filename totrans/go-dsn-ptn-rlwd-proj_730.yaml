- en: Summary
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we exposed the data for our social polling solution through
    a highly scalable RESTful API and built a simple website that consumes the API
    to provide an intuitive way for users to interact with it. The website consists
    of static content only, with no server-side processing (since the API does the
    heavy lifting for us). This allows us to host the website very cheaply on static
    hosting sites, such as [bitballoon.com](https://www.bitballoon.com/), or distribute
    the files to content delivery networks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过一个高度可扩展的RESTful API公开了我们的社交投票解决方案的数据，并构建了一个简单的网站，该网站消费API以提供一种直观的方式供用户与之交互。该网站仅包含静态内容，没有服务器端处理（因为API为我们做了繁重的工作）。这使得我们能够在静态托管网站上以非常低廉的成本托管网站，例如[bitballoon.com](https://www.bitballoon.com/)，或者将文件分发到内容分发网络。
- en: Within our API service, we learned how to share data between handlers without
    breaking or obfuscating the handler pattern from the standard library. We also
    saw how writing wrapped handler functions allows us to build a pipeline of functionality
    in a very simple and intuitive way.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的API服务中，我们学习了如何在不妨碍或混淆标准库中的处理程序模式的情况下在处理程序之间共享数据。我们还看到了如何编写包装处理程序函数，这允许我们以非常简单直观的方式构建功能管道。
- en: We wrote some basic encoding and decoding functions that –while only simply
    wrapping their counterparts from the `encoding/json` package for now –could be
    improved later to support a range of different data representations without changing
    the internal interface to our code. We wrote a few simple helper functions that
    make responding to data requests easy while providing the same kind of abstraction
    that would allow us to evolve our API later.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写了一些基本的编码和解码函数，虽然目前它们只是简单地包装了`encoding/json`包中的对应函数，但以后可以改进以支持一系列不同的数据表示，而不必改变我们代码的内部接口。我们还编写了一些简单的辅助函数，使响应数据请求变得容易，同时提供了一种允许我们以后演进API的抽象。
- en: We saw how, for simple cases, switching to HTTP methods is an elegant way to
    support many functions for a single endpoint. We also saw how, with a few extra
    lines of code, we are able to build support for CORS in order to allow applications
    running on different domains to interact with our services –without the need for
    hacks such as JSONP.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了在简单情况下，切换到HTTP方法是如何以一种优雅的方式支持单个端点上的许多功能。我们也看到了通过添加几行额外的代码，我们能够构建对CORS的支持，以便允许运行在不同域上的应用程序与我们的服务交互——无需使用诸如JSONP之类的黑客手段。
- en: In the next chapter, we will evolve our API and web skills to build a brand
    new startup app called Meander. We'll also explore an interesting way of representing
    enumerators in a language that doesn't officially support them.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将演进我们的API和Web技能，以构建一个全新的初创应用程序，名为Meander。我们还将探索一种在官方不支持枚举器的语言中表示枚举器的方法。
