- en: Public views of Go structs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to control the public view of structs in Go, we need to invent a way
    to allow individual `journey` types to tell us how they want to be exposed. In
    the root `meander` folder, create a new file called `public.go` and add the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `Facade` interface exposes a single `Public` method, which will return the
    public view of a struct. The exported `Public` function takes any object and checks
    whether it implements the `Facade` interface (does it have a `Public() interface{}`
    method?); if it is implemented, it calls the method and returns the result otherwise,
    it just returns the original object untouched. This allows us to pass anything
    through the `Public` function before writing the result to the `ResponseWriter`
    object, allowing individual structs to control their public appearance.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Normally, single method interfaces such as our `Facade` are named after the
    method they describe, such as `Reader` and `Writer`. However, `Publicer` is just
    confusing, so I deliberately broke the rule.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s implement a `Public` method for our `j` type by adding the following
    code to `journeys.go`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The public view of our `j` type joins the `PlaceTypes` field into a single string
    separated by the pipe character as per our API design.
  prefs: []
  type: TYPE_NORMAL
- en: 'Head back to `cmd/meander/main.go` and replace the `respond` method with one
    that makes use of our new `Public` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we iterate over the data slice calling the `meander.Public` function
    for each item, building the results into a new slice of the same size. In the
    case of our `j` type, its `Public` method will be called to serve the public view
    of the data rather than the default view. In a terminal, navigate to the `cmd/meander`
    folder again and run `go run main.go` before hitting `http://localhost:8080/journeys`.
    Note that the same data has now changed to a new structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An alternative way of achieving the same result would be to use tags to control
    the field names, as we have done in previous chapters, and implement your own
    `[]string` type that provides a `MarshalJSON` method which tells the encoder how
    to marshal your type. Both are perfectly acceptable, but the `Facade` interface
    and `Public` method are probably more expressive (if someone reads the code, isn't
    it obvious what's going on?) and give us more control.
  prefs: []
  type: TYPE_NORMAL
