- en: Generating random recommendations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to obtain the places from which our code will randomly build up recommendations,
    we need to query the Google Places API. In the root `meander` folder, add the
    following `query.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This code defines the structures we will need in order to parse the JSON response
    from the Google Places API into usable objects.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Head over to the Google Places API documentation for an example of the response
    we are expecting. Refer to [http://developers.google.com/places/documentation/search](http://developers.google.com/places/documentation/search).
  prefs: []
  type: TYPE_NORMAL
- en: Most of the preceding code will be obvious, but it's worth noting that the `Place`
    type embeds the `googleGeometry` type, which allows us to represent the nested
    data as per the API while essentially flattening it in our code. We do this with
    `googleLocation` inside `googleGeometry`, which means that we will be able to
    access the `Lat` and `Lng` values directly on a `Place` object even though they're
    technically nested in other structures.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because we want to control how a `Place` object appears publically, let''s
    give this type the following `Public` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember to run `golint` on this code to see which comments need to be added
    to the exported items.
  prefs: []
  type: TYPE_NORMAL
