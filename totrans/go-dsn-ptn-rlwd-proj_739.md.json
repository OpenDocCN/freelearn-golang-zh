["```go\ntype Query struct { \n  Lat          float64 \n  Lng          float64 \n  Journey      []string \n  Radius       int \n  CostRangeStr string \n} \n\n```", "```go\nfunc (q *Query) find(types string) (*googleResponse, error) { \n  u :=  \"https://maps.googleapis.com/maps/api/place/nearbysearch/json\" \n  vals := make(url.Values) \n  vals.Set(\"location\", fmt.Sprintf(\"%g,%g\", q.Lat, q.Lng)) \n  vals.Set(\"radius\", fmt.Sprintf(\"%d\", q.Radius)) \n  vals.Set(\"types\", types) \n  vals.Set(\"key\", APIKey) \n  if len(q.CostRangeStr) > 0 { \n    r, err := ParseCostRange(q.CostRangeStr) \n    if err != nil { \n      return nil, err \n    } \n    vals.Set(\"minprice\", fmt.Sprintf(\"%d\", int(r.From)-1)) \n    vals.Set(\"maxprice\", fmt.Sprintf(\"%d\", int(r.To)-1)) \n  } \n  res, err := http.Get(u + \"?\" + vals.Encode()) \n  if err != nil { \n    return nil, err \n  } \n  defer res.Body.Close() \n  var response googleResponse \n  if err := json.NewDecoder(res.Body).Decode(&response); err != nil { \n    return nil, err \n  } \n  return &response, nil \n} \n\n```"]