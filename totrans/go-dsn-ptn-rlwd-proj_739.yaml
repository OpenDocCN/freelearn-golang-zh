- en: Querying the Google Places API
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查询 Google Places API
- en: 'Now that we are capable of representing the results of the API, we need a way
    to represent and initiate the actual query. Add the following structure to `query.go`:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们能够表示 API 的结果，我们需要一种方式来表示和初始化实际的查询。将以下结构添加到 `query.go` 文件中：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This structure contains all the information we will need in order to build
    up the query, all of which will actually come from the URL parameters in the requests
    from the client. Next, add the following `find` method, which will be responsible
    for making the actual request to Google''s servers:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此结构包含构建查询所需的所有信息，所有这些信息实际上都来自客户端请求的 URL 参数。接下来，添加以下 `find` 方法，该方法将负责向 Google
    服务器发出实际请求：
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: First, we build the request URL as per the Google Places API specification by
    appending the `url.Values` encoded string of the data for `lat`, `lng`, `radius`,
    and, of course, the `APIKey` values.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们根据 Google Places API 规范构建请求 URL，通过追加 `lat`、`lng`、`radius` 和当然，`APIKey`
    值的 `url.Values` 编码字符串。
- en: Note
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `url.Values` type is actually a `map[string][]string` type, which is why
    we use `make` rather than `new`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`url.Values` 类型实际上是一个 `map[string][]string` 类型，这就是为什么我们使用 `make` 而不是 `new`。'
- en: The `types` value we specify as an argument represents the kind of business
    to look for. If there is `CostRangeStr`, we parse it and set the `minprice` and
    `maxprice` values before finally calling `http.Get` to actually make the request.
    If the request is successful, we defer the closing of the response body and use
    a `json.Decoder` method to decode the JSON that comes back from the API into our
    `googleResponse` type.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指定的 `types` 值作为参数表示要查找的商家的类型。如果有 `CostRangeStr`，我们将其解析并设置 `minprice` 和 `maxprice`
    值，最后调用 `http.Get` 实际发出请求。如果请求成功，我们延迟关闭响应体，并使用 `json.Decoder` 方法将 API 返回的 JSON
    解码到我们的 `googleResponse` 类型中。
