- en: Querying the Google Places API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we are capable of representing the results of the API, we need a way
    to represent and initiate the actual query. Add the following structure to `query.go`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This structure contains all the information we will need in order to build
    up the query, all of which will actually come from the URL parameters in the requests
    from the client. Next, add the following `find` method, which will be responsible
    for making the actual request to Google''s servers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: First, we build the request URL as per the Google Places API specification by
    appending the `url.Values` encoded string of the data for `lat`, `lng`, `radius`,
    and, of course, the `APIKey` values.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `url.Values` type is actually a `map[string][]string` type, which is why
    we use `make` rather than `new`.
  prefs: []
  type: TYPE_NORMAL
- en: The `types` value we specify as an argument represents the kind of business
    to look for. If there is `CostRangeStr`, we parse it and set the `minprice` and
    `maxprice` values before finally calling `http.Get` to actually make the request.
    If the request is successful, we defer the closing of the response body and use
    a `json.Decoder` method to decode the JSON that comes back from the API into our
    `googleResponse` type.
  prefs: []
  type: TYPE_NORMAL
