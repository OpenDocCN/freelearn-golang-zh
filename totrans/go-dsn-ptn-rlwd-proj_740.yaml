- en: Building recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we need to write a method that will allow us to make many calls to find
    for the different steps in a journey. Underneath the `find` method, add the following
    `Run` method to the `Query` struct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The first thing we do is set the random seed to the current time in nanoseconds
    since January 1, 1970 UTC. This ensures that every time we call the `Run` method
    and use the `rand` package, the results will be different. If we don't do this,
    our code would suggest the same recommendations every time, which defeats the
    object.
  prefs: []
  type: TYPE_NORMAL
- en: Since we need to make many requests to Google and since we want to make sure
    this is as quick as possible we are going to run all the queries at the same time
    by making concurrent calls to our `Query.find` method. So next, we create `sync.WaitGroup` and
    a map to hold the selected places along with a `sync.Mutex` method to allow many
    goroutines to safely access the map concurrently.
  prefs: []
  type: TYPE_NORMAL
- en: We then iterate over each item in the `Journey` slice, which might be `bar`,
    `cafe`, or `movie_theater`. For each item, we add `1` to the `WaitGroup` object
    and start a goroutine. Inside the routine, we first defer the `w.Done` call, informing
    the `WaitGroup` object that this request has completed before calling our `find`
    method to make the actual request. Assuming no errors occurred and it was indeed
    able to find some places, we iterate over the results and build up a usable URL
    for any photos that might be present. According to the Google Places API, we are
    given a `photoreference` key, which we can use in another API call to get the
    actual image. To save our clients from having to have knowledge of the Google
    Places API at all, we build the complete URL for them.
  prefs: []
  type: TYPE_NORMAL
- en: We then lock the map locker and with a call to `rand.Intn`, pick one of the
    options at random and insert it into the right position in the `places` slice
    before unlocking `sync.Mutex`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we wait for all goroutines to complete with a call to `w.Wait` before
    returning the places.
  prefs: []
  type: TYPE_NORMAL
