["```go\nfunc cors(f http.HandlerFunc) http.HandlerFunc { \n  return func(w http.ResponseWriter, r *http.Request) { \n    w.Header().Set(\"Access-Control-Allow-Origin\", \"*\") \n    f(w, r) \n  } \n} \n\n```", "```go\nfunc main() { \n  meander.APIKey = \"YOUR_API_KEY\" \n  http.HandleFunc(\"/journeys\", cors(func(w http.ResponseWriter,\n  r *http.Request) \n  { \n    respond(w, r, meander.Journeys) \n  })) \n  http.HandleFunc(\"/recommendations\", cors(func(w http.ResponseWriter, \n  r *http.Request) { \n    q := &meander.Query{ \n      Journey: strings.Split(r.URL.Query().Get(\"journey\"), \"|\"), \n    } \n    var err error \n    q.Lat, err = strconv.ParseFloat(r.URL.Query().Get(\"lat\"), 64) \n    if err != nil { \n      http.Error(w, err.Error(), http.StatusBadRequest) \n      return \n    } \n    q.Lng, err = strconv.ParseFloat(r.URL.Query().Get(\"lng\"), 64) \n    if err != nil { \n      http.Error(w, err.Error(), http.StatusBadRequest) \n      return \n    } \n    q.Radius, err = strconv.Atoi(r.URL.Query().Get(\"radius\")) \n    if err != nil { \n      http.Error(w, err.Error(), http.StatusBadRequest) \n      return \n    } \n    q.CostRangeStr = r.URL.Query().Get(\"cost\") \n    places := q.Run() \n    respond(w, r, places) \n  })) \n  log.Println(\"serving meander API on :8080\") \n  http.ListenAndServe(\":8080\", http.DefaultServeMux) \n} \n\n```"]