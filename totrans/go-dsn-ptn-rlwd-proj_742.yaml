- en: CORS
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CORS
- en: The final piece of the first version of our API will be to implement CORS, as
    we did in the previous chapter. See if you can solve this problem yourself before
    reading on about the solution in the next section.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们API第一版最后的任务将是实现CORS，就像我们在上一章中做的那样。在你阅读下一节关于解决方案的说明之前，看看你是否能自己解决这个问题。
- en: Tip
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you are going to tackle this yourself, remember that your aim is to set the
    `Access-Control-Allow-Origin` response header to `*`. Also, consider the `http.HandlerFunc`
    wrapping we did in the previous chapter. The best place for this code is probably
    in the `cmd/meander` program, since that is what exposes the functionality through
    an HTTP endpoint.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算自己解决这个问题，请记住你的目标是设置`Access-Control-Allow-Origin`响应头为`*`。同时，考虑一下我们在上一章中使用的`http.HandlerFunc`包装。这段代码的最佳位置可能是在`cmd/meander`程序中，因为它是通过HTTP端点公开功能的地方。
- en: 'In `main.go`, add the following `cors` function:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main.go`中添加以下`cors`函数：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This familiar pattern takes in an `http.HandlerFunc` type and returns a new
    one that sets the appropriate header before calling the passed-in function. Now,
    we can modify our code to make sure that the `cors` function gets called for both
    of our endpoints. Update the appropriate lines in the `main` function:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这个熟悉的模式接受一个`http.HandlerFunc`类型，并返回一个新的函数，在调用传入的函数之前设置适当的头。现在，我们可以修改我们的代码，确保`cors`函数在我们的两个端点都被调用。更新`main`函数中的相应行：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, calls to our API will be allowed from any domain without a cross-origin
    error occurring.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对我们的API的调用将允许来自任何域，而不会发生跨域错误。
- en: Tip
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Can you see a way to smarten up the code by removing the multiple calls to `r.URL.Query()`?
    Perhaps do this once and cache the result in a local variable. Then, you can avoid
    parsing the query many times.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你能找到一种方法来使代码更智能，通过减少对`r.URL.Query()`的多次调用吗？也许你可以这样做一次，并将结果缓存到局部变量中。然后，你可以避免多次解析查询。
