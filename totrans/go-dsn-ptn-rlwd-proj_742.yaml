- en: CORS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The final piece of the first version of our API will be to implement CORS, as
    we did in the previous chapter. See if you can solve this problem yourself before
    reading on about the solution in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are going to tackle this yourself, remember that your aim is to set the
    `Access-Control-Allow-Origin` response header to `*`. Also, consider the `http.HandlerFunc`
    wrapping we did in the previous chapter. The best place for this code is probably
    in the `cmd/meander`Â program, since that is what exposes the functionality through
    an HTTP endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `main.go`, add the following `cors` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This familiar pattern takes in an `http.HandlerFunc` type and returns a new
    one that sets the appropriate header before calling the passed-in function. Now,
    we can modify our code to make sure that the `cors` function gets called for both
    of our endpoints. Update the appropriate lines in the `main` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now, calls to our API will be allowed from any domain without a cross-origin
    error occurring.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Can you see a way to smarten up the code by removing the multiple calls to `r.URL.Query()`?
    Perhaps do this once and cache the result in a local variable. Then, you can avoid
    parsing the query many times.
  prefs: []
  type: TYPE_NORMAL
