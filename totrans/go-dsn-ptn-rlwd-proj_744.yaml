- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we built an API that consumes and abstracts the Google Places
    API to provide a fun and interesting way of letting users plan their days and
    evenings.
  prefs: []
  type: TYPE_NORMAL
- en: We started by writing some simple and short user stories that described what
    we wanted to achieve at a really high level without trying to design the implementation
    up front. In order to parallelize the project, we agreed upon the meeting point
    of the project as the API design, and we built toward it (as would our partners).
  prefs: []
  type: TYPE_NORMAL
- en: We embedded data directly in the code, avoiding the need to investigate, design,
    and implement a data store in the early stages of a project. By caring about how
    that data is accessed (via the API endpoint) instead, we allowed our future selves
    to completely change how and where the data is stored without breaking any apps
    that have been written with our API.
  prefs: []
  type: TYPE_NORMAL
- en: We implemented the `Facade` interface, which allows our structs and other types
    to provide public representations of them without revealing messy or sensitive
    details about our implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Our foray into enumerators gave us a useful starting point to build enumerated
    types, even though there is no official support for them in the language. The
    `iota` keyword that we used lets us specify constants of our own numerical type,
    with incrementing values. The common `String` method that we implemented showed
    us how to make sure that our enumerated types don't become obscure numbers in
    our logs. At the same time, we also saw a real-world example of TDD and red/green
    programming, where we wrote unit tests that first fail but which we then go on
    to make pass by writing the implementation code.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to take a break from web services in order
    to build a backup tool for our code, where we'll explore how easy Go makes it
    for us to interact with the local filesystem.
  prefs: []
  type: TYPE_NORMAL
