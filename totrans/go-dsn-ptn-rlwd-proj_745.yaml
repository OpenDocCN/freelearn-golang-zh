- en: Chapter 8. Filesystem Backup
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章 文件系统备份
- en: There are many solutions that provide filesystem backup capabilities. These
    include everything from apps such as Dropbox, Box, and Carbonite to hardware solutions
    such as Apple's Time Machine, Seagate, or network-attached storage products, to
    name a few. Most consumer tools provide some key automatic functionality, along
    with an app or website for you to manage your policies and content. Often, especially
    for developers, these tools don't quite do the things we need them to. However,
    thanks to Go's standard library (which includes packages such as `ioutil` and
    `os`), we have everything we need to build a backup solution that behaves exactly
    the way we need it to.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多解决方案提供了文件系统备份功能。这些解决方案包括从Dropbox、Box和Carbonite等应用程序到苹果的Time Machine、Seagate或网络附加存储产品等硬件解决方案，仅举几例。大多数消费级工具提供了一些关键自动功能，以及一个应用程序或网站供您管理您的策略和内容。通常，尤其是对于开发者来说，这些工具并不完全符合我们的需求。然而，多亏了Go的标准库（包括`ioutil`和`os`等包），我们拥有了构建一个完全符合我们需求的备份解决方案所需的一切。
- en: For our next project, we will build a simple filesystem backup for our source
    code projects that archive specified folders and save a snapshot of them every
    time we make a change. The change could be when we tweak a file and save it, when
    we add new files and folders, or even when we delete a file. We want to be able
    to go back to any point in time to retrieve old files.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的下一个项目，我们将为我们的源代码项目构建一个简单的文件系统备份，该备份会存档指定的文件夹，并在每次我们进行更改时保存它们的快照。更改可能是当我们调整文件并保存它时，当我们添加新文件和文件夹时，甚至当我们删除文件时。我们希望能够回到任何时间点去检索旧文件。
- en: 'Specifically, in this chapter, you will learn about the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，在本章中，您将学习以下主题：
- en: How to structure projects that consist of packages and command-line tools
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何构建由包和命令行工具组成的项目的结构
- en: A pragmatic approach to persisting simple data across tool executions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种在工具执行之间持久化简单数据的方法论
- en: How the `os` package allows you to interact with a filesystem
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`os`包如何让您与文件系统交互'
- en: How to run code in an infinite timed loop while respecting *Ctrl + C*
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在尊重*Ctrl + C*的情况下运行无限定时循环中的代码
- en: How to use `filepath.Walk` to iterate over files and folders
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用`filepath.Walk`遍历文件和文件夹
- en: How to quickly determine whether the contents of a directory have changed
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何快速确定目录内容是否已更改
- en: How to use the `archive/zip` package to zip files
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用`archive/zip`包来压缩文件
- en: How to build tools that care about a combination of command-line flags and normal
    arguments
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何构建关注命令行标志和常规参数组合的工具
