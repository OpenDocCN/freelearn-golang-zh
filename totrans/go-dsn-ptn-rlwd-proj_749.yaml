- en: Considering obvious interfaces first
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the early things to think about when embarking on a new Go program is
    whether any interfaces stand out to you. We don't want to over-abstract or waste
    too much time upfront designing something that we know will change as we start
    to code, but that doesn't mean we shouldn't look for obvious concepts that are
    worth pulling out. If you're not sure, that is perfectly acceptable; you should
    write your code using concrete types and revisit potential abstractions after
    you have actually solved the problems.
  prefs: []
  type: TYPE_NORMAL
- en: However, since our code will archive files, the `Archiver` interface pops out
    as a candidate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new folder inside your `GOPATH/src` folderÂ called `backup`, and add
    the following `archiver.go` code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: An `Archiver` interface will specify a method called `Archive`, which takes
    source and destination paths and returns an error. Implementations of this interface
    will be responsible for archiving the source folder and storing it in the destination
    path.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Defining an interface up front is a nice way to get some concepts out of our
    heads and into the code; it doesn't mean that this interface can't change as we
    evolve our solution as long as we remember the power of simple interfaces. Also,
    remember that most of the I/O interfaces in the `io` package expose only a single
    method.
  prefs: []
  type: TYPE_NORMAL
- en: From the very beginning, we have made the case that while we are going to implement
    ZIP files as our archive format, we could easily swap this out later with another
    kind of `Archiver` format.
  prefs: []
  type: TYPE_NORMAL
