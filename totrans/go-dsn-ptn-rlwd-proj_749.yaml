- en: Considering obvious interfaces first
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 首先考虑明显的接口
- en: One of the early things to think about when embarking on a new Go program is
    whether any interfaces stand out to you. We don't want to over-abstract or waste
    too much time upfront designing something that we know will change as we start
    to code, but that doesn't mean we shouldn't look for obvious concepts that are
    worth pulling out. If you're not sure, that is perfectly acceptable; you should
    write your code using concrete types and revisit potential abstractions after
    you have actually solved the problems.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始一个新的Go程序时，早期需要考虑的一件事是是否有任何接口显得突出。我们不希望过度抽象或在前期的设计中浪费太多时间，因为我们知道在开始编码时，这些设计将会改变，但这并不意味着我们不应该寻找那些值得提取的明显概念。如果你不确定，这是完全可以接受的；你应该使用具体的类型编写代码，并在实际解决问题后重新审视潜在的抽象。
- en: However, since our code will archive files, the `Archiver` interface pops out
    as a candidate.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于我们的代码将存档文件，`Archiver`接口自然成为了一个候选者。
- en: 'Create a new folder inside your `GOPATH/src` folder called `backup`, and add
    the following `archiver.go` code:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`GOPATH/src`文件夹内创建一个新的文件夹，命名为`backup`，并添加以下`archiver.go`代码：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: An `Archiver` interface will specify a method called `Archive`, which takes
    source and destination paths and returns an error. Implementations of this interface
    will be responsible for archiving the source folder and storing it in the destination
    path.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`Archiver`接口将指定一个名为`Archive`的方法，该方法接受源路径和目标路径，并返回一个错误。该接口的实现将负责将源文件夹存档并存储在目标路径中。'
- en: Note
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Defining an interface up front is a nice way to get some concepts out of our
    heads and into the code; it doesn't mean that this interface can't change as we
    evolve our solution as long as we remember the power of simple interfaces. Also,
    remember that most of the I/O interfaces in the `io` package expose only a single
    method.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在一开始就定义一个接口是一个很好的方法，可以将一些概念从我们的脑海中提取出来并放入代码中；只要我们记得简单接口的力量，这个接口就可以随着我们解决方案的演变而改变。此外，记住`io`包中的大多数I/O接口只暴露一个方法。
- en: From the very beginning, we have made the case that while we are going to implement
    ZIP files as our archive format, we could easily swap this out later with another
    kind of `Archiver` format.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 从一开始，我们就已经提出，虽然我们打算将ZIP文件作为我们的存档格式实现，但我们很容易将其后来替换为另一种`Archiver`格式。
