["```go\ntype FileInfo interface { \n  Name() string       // base name of the file \n  Size() int64        // length in bytes for regular files;  \n                         system-dependent for others \n  Mode() FileMode     // file mode bits \n  ModTime() time.Time // modification time \n  IsDir() bool        // abbreviation for Mode().IsDir() \n  Sys() interface{}   // underlying data source (can return nil) \n} \n\n```", "```go\npackage backup \nimport ( \n  \"crypto/md5\" \n  \"fmt\" \n  \"io\" \n  \"os\" \n  \"path/filepath\" \n) \nfunc DirHash(path string) (string, error) { \n  hash := md5.New() \n  err := filepath.Walk(path, func(path string, info os.FileInfo, err error) \n  error { \n    if err != nil { \n      return err \n    } \n    io.WriteString(hash, path) \n    fmt.Fprintf(hash, \"%v\", info.IsDir()) \n    fmt.Fprintf(hash, \"%v\", info.ModTime()) \n    fmt.Fprintf(hash, \"%v\", info.Mode()) \n    fmt.Fprintf(hash, \"%v\", info.Name()) \n    fmt.Fprintf(hash, \"%v\", info.Size()) \n    return nil \n  }) \n  if err != nil { \n    return \"\", err \n  } \n  return fmt.Sprintf(\"%x\", hash.Sum(nil)), nil \n} \n\n```"]