- en: Has the filesystem changed?
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件系统是否已更改？
- en: 'One of the biggest problems our backup system has is deciding whether a folder
    has changed or not in a cross-platform, predictable, and reliable way. After all,
    there''s no point in creating a backup if nothing is different from the previous
    backup. A few things spring to mind when we think about this problem: should we
    just check the last modified date on the top-level folder? Should we use system
    notifications to be informed whenever a file we care about changes? There are
    problems with both of these approaches, and it turns out it''s not a simple problem
    to solve.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们备份系统面临的最大问题之一是决定一个文件夹是否在跨平台、可预测和可靠的方式下发生了变化。毕竟，如果与上一次备份没有任何不同，创建备份就没有意义。当我们思考这个问题时，会想到一些事情：我们是否只需检查顶级文件夹的最后修改日期？我们是否应该使用系统通知来告知我们关心的文件何时发生变化？这两种方法都存在问题，而且事实证明，这并不是一个简单的问题要解决。
- en: Tip
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'Check out the `fsnotify` project at [https://fsnotify.org](https://fsnotify.org)
    (project source: [https://github.com/fsnotify](https://github.com/fsnotify)).
    The authors are attempting to build a cross-platform package for subscription
    to filesystem events. At the time of writing this, the project is still in its
    infancy and it not a viable option for this chapter, but in the future, it could
    well become the standard solution for filesystem events.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 查看位于 [https://fsnotify.org](https://fsnotify.org) 的 `fsnotify` 项目（项目源：[https://github.com/fsnotify](https://github.com/fsnotify)）。作者们正在尝试构建一个跨平台的包，用于订阅文件系统事件。在撰写本文时，该项目仍处于起步阶段，并且不是本章的可行选项，但将来，它可能会成为文件系统事件的行业标准解决方案。
- en: We are, instead, going to generate an MD5 hash made up of all of the information
    that we care about when considering whether something has changed or not.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将生成一个MD5哈希，其中包含我们在考虑是否发生变化时关心的所有信息。
- en: 'Looking at the `os.FileInfo` type, we can see that we can find out a lot of
    information about a file or folder:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 观察到 `os.FileInfo` 类型，我们可以看到我们可以获取有关文件或文件夹的大量信息：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To ensure we are aware of a variety of changes to any file in a folder, the
    hash will be made up of the filename and path (so if they rename a file, the hash
    will be different), size (if a file changes size, it's obviously different), the
    last modified date, whether the item is a file or folder, and the file mode bits.
    Even though we won't be archiving the folders, we still care about their names
    and the tree structure of the folder.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们了解文件夹中任何文件的多种变化，我们将使用文件名和路径（因此如果他们重命名一个文件，哈希值将不同）、大小（如果文件大小发生变化，显然是不同的）、最后修改日期、项目是文件还是文件夹，以及文件模式位来生成哈希。即使我们不会存档文件夹，我们仍然关心它们的名称和文件夹的树状结构。
- en: 'Create a new file called `dirhash.go` and add the following function:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `dirhash.go` 的新文件，并添加以下函数：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We first create a new `hash.Hash` function that knows how to calculate MD5s
    before using `filepath.Walk` again to iterate over all of the files and folders
    inside the specified path directory. For each item, assuming there are no errors,
    we write the differential information to the hash generator using `io.WriteString`,
    which lets us write a string to `io.Writer` and `fmt.Fprintf`, which does the
    same but exposes formatting capabilities at the same time, allowing us to generate
    the default value format for each item using the `%v` format verb.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建一个新的 `hash.Hash` 函数，该函数知道如何计算MD5，然后再使用 `filepath.Walk` 再次遍历指定路径目录内的所有文件和文件夹。对于每个项目，假设没有错误，我们使用
    `io.WriteString` 将差异信息写入哈希生成器，这让我们可以将字符串写入 `io.Writer` 和 `fmt.Fprintf`，后者做的是同样的事情，但同时也暴露了格式化功能，使我们能够使用
    `%v` 格式说明符为每个项目生成默认值格式。
- en: Once each file has been processed, and assuming no errors occurred, we then
    use `fmt.Sprintf` to generate the result string. The `Sum` method in `hash.Hash`
    calculates the final hash value with the specified values appended. In our case,
    we do not want to append anything since we've already added all of the information
    we care about, so we just pass `nil`. The `%x` format verb indicates that we want
    the value to be represented in hex (base 16) with lowercase letters. This is the
    usual way of representing an MD5 hash.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦处理完每个文件，并且假设没有错误发生，我们然后使用 `fmt.Sprintf` 生成结果字符串。`hash.Hash` 中的 `Sum` 方法使用指定的值计算最终的哈希值。在我们的情况下，我们不想添加任何内容，因为我们已经添加了我们关心的所有信息，所以我们只传递
    `nil`。`%x` 格式说明符表示我们希望值以十六进制（基16）和小写字母表示。这是表示MD5哈希的常用方式。
