["```go\ntype Monitor struct { \n  Paths       map[string]string \n  Archiver    Archiver \n  Destination string \n} \n\n```", "```go\nfunc (m *Monitor) Now() (int, error) { \n  var counter int \n  for path, lastHash := range m.Paths { \n    newHash, err := DirHash(path) \n    if err != nil { \n      return counter, err \n    } \n    if newHash != lastHash { \n      err := m.act(path) \n      if err != nil { \n        return counter, err \n      } \n      m.Paths[path] = newHash // update the hash \n      counter++ \n    } \n  } \n  return counter, nil \n} \n\n```", "```go\nm.act undefined (type *Monitor has no field or method act) \n\n```", "```go\nfunc (m *Monitor) act(path string) error { \n  dirname := filepath.Base(path) \n  filename := fmt.Sprintf(\"%d.zip\", time.Now().UnixNano()) \n  return m.Archiver.Archive(path, filepath.Join(m.Destination,  dirname, filename)) \n} \n\n```", "```go\ntype Archiver interface { \n  DestFmt() string \n  Archive(src, dest string) error \n} \n\n```", "```go\nfunc (z *zipper) DestFmt() string { \n  return \"%d.zip\" \n} \n\n```", "```go\nfunc (m *Monitor) act(path string) error { \n  dirname := filepath.Base(path) \n  filename := fmt.Sprintf(m.Archiver.DestFmt(), time.Now().UnixNano()) \n  return m.Archiver.Archive(path, filepath.Join(m.Destination, dirname, \n  filename)) \n} \n\n```"]