- en: The user command-line tool
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户命令行工具
- en: The first of two tools we will build allows the user to add, list, and remove
    paths for the backup daemon tool (which we will write later). You can expose a
    web interface or even use the binding packages for the desktop user interface
    integration, but we are going to keep things simple and build ourselves a command-line
    tool.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要构建的两个工具中的第一个允许用户为备份守护进程工具（我们稍后会编写）添加、列出和删除路径。你可以公开一个Web界面，甚至可以使用桌面用户界面集成的绑定包，但我们打算保持简单，并构建一个命令行工具。
- en: Create a new folder called `cmds` inside the `backup` folder and create another
    `backup` folder inside that so you have `backup/cmds/backup`.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在`backup`文件夹内创建一个名为`cmds`的新文件夹，并在其中创建另一个`backup`文件夹，这样你就有`backup/cmds/backup`。
- en: 'Inside our new `backup` folder, add the following code to `main.go`:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的新`backup`文件夹内，向`main.go`文件添加以下代码：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We first define our `fatalErr` variable and defer the function that checks to
    ensure that value is `nil`. If it is not, it will print the error along with flag
    defaults and exit with a nonzero status code. We then define a flag called `db`
    that expects the path to the `filedb` database directory before parsing the flags
    and getting the remaining arguments and ensuring that there is at least one.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先定义了我们的`fatalErr`变量，并延迟执行检查该值是否为`nil`的函数。如果它不是`nil`，它将打印错误信息以及默认标志并退出时带有非零状态码。然后我们定义了一个名为`db`的标志，它期望在解析标志和获取剩余参数以及确保至少有一个参数之前，提供`filedb`数据库目录的路径。
