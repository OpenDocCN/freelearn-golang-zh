["```go\nbackup -db=/path/to/db add {path} [paths...]\n\n```", "```go\nbackup -db=/path/to/db remove {path} [paths...]\n\n```", "```go\nbackup -db=/path/to/db list\n\n```", "```go\nswitch strings.ToLower(args[0]) { \ncase \"list\": \ncase \"add\": \ncase \"remove\": \n} \n\n```", "```go\nvar path path \ncol.ForEach(func(i int, data []byte) bool { \n  err := json.Unmarshal(data, &path) \n  if err != nil { \n    fatalErr = err \n    return true \n  } \n  fmt.Printf(\"= %s\\n\", path) \n  return false \n}) \n\n```", "```go\nfunc (p path) String() string { \n  return fmt.Sprintf(\"%s [%s]\", p.Path, p.Hash) \n} \n\n```", "```go\nif len(args[1:]) == 0 { \n  fatalErr = errors.New(\"must specify path to add\") \n  return \n} \nfor _, p := range args[1:] { \n  path := &path{Path: p, Hash: \"Not yet archived\"} \n  if err := col.InsertJSON(path); err != nil { \n    fatalErr = err \n    return \n  } \n  fmt.Printf(\"+ %s\\n\", path) \n} \n\n```", "```go\nvar path path \ncol.RemoveEach(func(i int, data []byte) (bool, bool) { \n  err := json.Unmarshal(data, &path) \n  if err != nil { \n    fatalErr = err \n    return false, true \n  } \n  for _, p := range args[1:] { \n    if path.Path == p { \n      fmt.Printf(\"- %s\\n\", path) \n      return true, false \n    } \n  } \n  return false, false \n}) \n\n```"]