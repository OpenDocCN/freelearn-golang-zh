- en: Parsing arguments
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解析参数
- en: When we call `flag.Args` (as opposed to `os.Args`), we receive a slice of arguments
    excluding the flags. This allows us to mix flag arguments and non-flag arguments
    in the same tool.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用`flag.Args`（而不是`os.Args`）时，我们接收一个不包括标志的参数切片。这允许我们在同一个工具中混合标志参数和非标志参数。
- en: 'We want our tool to be able to be used in the following ways:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望我们的工具能够以下方式使用：
- en: 'To add a path:'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要添加一个路径：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To remove a path:'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要移除一个路径：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To list all paths:'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要列出所有路径：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To achieve this, since we have already dealt with flags, we must check the first
    (non-flag) argument.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现这一点，因为我们已经处理了标志，所以我们必须检查第一个（非标志）参数。
- en: 'Add the following code to the `main` function:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到`main`函数中：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, we simply switch on the first argument after setting it to lowercase (if
    the user types `backup LIST`, we still want it to work).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只需将第一个参数转换为小写（如果用户输入`backup LIST`，我们仍然希望它能够工作）。
- en: Listing the paths
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列出路径
- en: 'To list the paths in the database, we are going to use a `ForEach` method on
    the path''s `col` variable. Add the following code to the list case:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出数据库中的路径，我们将使用路径的`col`变量的`ForEach`方法。在列表情况中添加以下代码：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We pass in a callback function to `ForEach`, which will be called for every
    item in that collection. We then unmarshal it from JSON into our `path` type,
    and just print it out using `fmt.Printf`. We return `false` as per the `filedb`
    interface, which tells us that returning `true` would stop iterating and that
    we want to make sure we list them all.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向`ForEach`传递一个回调函数，该函数将为该集合中的每个项目被调用。然后我们将其从JSON反序列化为我们的`path`类型，并使用`fmt.Printf`打印出来。根据`filedb`接口，我们返回`false`，这意味着返回`true`将停止迭代，而我们想确保列出所有路径。
- en: String representations for your own types
  id: totrans-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 您自己的类型的字符串表示
- en: 'If you print structs in Go in this way, using the `%s` format verbs, you can
    get some messy results that are difficult for users to read. If, however, the
    type implements a `String()` string method, it will be used instead, and we can
    use this to control what gets printed. Below the path struct, add the following
    method:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在Go中以这种方式打印结构体，使用`%s`格式动词，可能会得到一些难以阅读的混乱结果。然而，如果类型实现了`String()`字符串方法，它将被使用，我们可以利用这一点来控制打印的内容。在路径结构体下面，添加以下方法：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This tells the `path` type how it should represent itself as a string.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉`path`类型它应该如何将自身表示为字符串。
- en: Adding paths
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加路径
- en: 'To add a path, or many paths, we are going to iterate over the remaining arguments
    and call the `InsertJSON` method for each one. Add the following code to the `add`
    case:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加一个路径或多个路径，我们将遍历剩余的参数并对每个参数调用`InsertJSON`方法。在`add`情况中添加以下代码：
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If the user hasn't specified any additional arguments, for example if they just
    called `backup add` without typing any paths, we will return a fatal error. Otherwise,
    we do the work and print out the path string (prefixed with a `+` symbol) to indicate
    that it was successfully added. By default, we'll set the hash to the `Not yet
    archived` string literal this is an invalid hash but serves the dual purposes
    of letting the user know that it hasn't yet been archived as well as indicating
    as such to our code (given that a hash of the folder will never equal that string).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户没有指定任何其他参数，例如，如果他们只是调用`backup add`而没有输入任何路径，我们将返回一个致命错误。否则，我们执行工作并打印出路径字符串（以`+`符号为前缀），以指示它已成功添加。默认情况下，我们将哈希设置为`尚未存档`字符串字面量，这是一个无效的哈希，但同时也起到让用户知道它尚未存档以及向我们的代码指示这一点的双重作用（因为文件夹的哈希永远不会等于该字符串）。
- en: Removing paths
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移除路径
- en: 'To remove a path, or many paths, we use the `RemoveEach` method for the path''s
    collection. Add the following code to the `remove` case:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要移除一个路径或多个路径，我们使用路径集合的`RemoveEach`方法。在`remove`情况中添加以下代码：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The callback function we provide to `RemoveEach` expects us to return two bool
    types: the first one indicates whether the item should be removed or not, and
    the second one indicates whether we should stop iterating or not.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供给`RemoveEach`的回调函数期望我们返回两个布尔类型：第一个表示项目是否应该被移除，第二个表示是否应该停止迭代。
