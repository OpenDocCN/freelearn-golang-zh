- en: Using our new tool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have completed our simple `backup` command-line tool. Let's look at it in
    action. Create a folder called `backupdata` inside `backup/cmds/backup`; this
    will become the `filedb` database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build the tool in a terminal by navigating to the `main.go` file and running
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If all is well, we can now add a path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the expected output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s add another path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now see the complete list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Our program should yield the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s remove `test3` in order to make sure the `remove` functionality is working:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This will take us back to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We are now able to interact with the `filedb` database in a way that makes sense
    for our use case. Next, we build the daemon program that will actually use our
    `backup` package to do the work.
  prefs: []
  type: TYPE_NORMAL
