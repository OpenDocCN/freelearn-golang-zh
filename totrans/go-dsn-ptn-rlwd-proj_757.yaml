- en: The daemon backup tool
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 守护进程备份工具
- en: The `backup` tool, which we will call `backupd`, will be responsible for periodically
    checking the paths listed in the `filedb` database, hashing the folders to see
    whether anything has changed, and using the `backup` package to actually perform
    the archiving of the folders that need it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将称之为`backupd`的`backup`工具将负责定期检查`filedb`数据库中列出的路径，对文件夹进行哈希处理以查看是否有任何变化，并使用`backup`包实际执行需要归档的文件夹的归档操作。
- en: 'Create a new folder called `backupd` alongside the `backup/cmds/backup` folder,
    and let''s jump right into handling the fatal errors and flags:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在`backup/cmds/backup`文件夹旁边创建一个名为`backupd`的新文件夹，然后让我们直接进入处理致命错误和标志：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You must be quite used to seeing this kind of code by now. We defer the handling
    of fatal errors before specifying three flags: `interval`, `archive`, and `db`.
    The `interval` flag represents the number of seconds between checks to see whether
    folders have changed, the `archive` flag is the path to the archive location where
    ZIP files will go, and the `db` flag is the path to the same `filedb` database
    that the `backup` command is interacting with. The usual call to `flag.Parse`
    sets the variables up and validates whether we''re ready to move on.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你可能已经非常习惯看到这种类型的代码了。我们在指定三个标志`interval`、`archive`和`db`之前，推迟处理致命错误。`interval`标志表示检查文件夹是否发生变化之间的秒数，`archive`标志是存档位置路径，ZIP文件将放入其中，而`db`标志是与`backup`命令交互的相同`filedb`数据库的路径。通常的`flag.Parse`调用设置变量并验证我们是否准备好继续操作。
- en: 'In order to check the hashes of the folders, we are going to need an instance
    of `Monitor` that we wrote earlier. Append the following code to the `main` function:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查文件夹的哈希值，我们需要一个我们之前编写的`Monitor`实例。将以下代码添加到`main`函数中：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, we create `backup.Monitor` using the `archive` value as the `Destination`
    type. We'll use the `backup.ZIP` archiver and create a map ready for it to store
    the paths and hashes internally. At the start of the daemon, we want to load the
    paths from the database so that it doesn't archive unnecessarily as we stop and
    start things.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`archive`值作为`Destination`类型创建`backup.Monitor`。我们将使用`backup.ZIP`归档程序并创建一个映射，以便它能够内部存储路径和哈希值。在守护进程启动时，我们希望从数据库中加载路径，这样它就不会在不必要的情况下进行归档，因为我们停止和启动某些操作。
- en: 'Add the following code to the `main` function:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到`main`函数中：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You have seen this code earlier too; it dials the database and creates an object
    that allows us to interact with the `paths` collection. If anything fails, we
    set `fatalErr` and return.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你之前也见过这段代码；它连接到数据库并创建一个对象，使我们能够与`paths`集合交互。如果任何操作失败，我们设置`fatalErr`并返回。
