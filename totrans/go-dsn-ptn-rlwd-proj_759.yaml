- en: Caching data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can now query all existing paths and update the `Paths` map, which is a useful
    technique to increase the speed of a program, especially given slow or disconnected
    data stores. By loading the data into a cache (in our case, the `Paths` map),
    we can access it at lightning speed without having to consult the files each time
    we need information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to the body of the `main` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Using the `ForEach` method again allows us to iterate over all the paths in
    the database. We unmarshal the JSON bytes into the same `path` structure as we
    used in our other program and set the values in the `Paths` map. Assuming that
    nothing goes wrong, we do a final check to make sure there is at least one path,
    and if not, we return with an error.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One limitation to our program is that it will not dynamically add paths once
    it has started. The daemon would need to be restarted. If this bothers you, you
    can always build in a mechanism that updates the `Paths` map periodically or uses
    some other kind of configuration management.
  prefs: []
  type: TYPE_NORMAL
