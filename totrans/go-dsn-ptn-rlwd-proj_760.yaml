- en: Infinite loops
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无限循环
- en: The next thing we need to do is perform a check on the hashes right away to
    see whether anything needs archiving before entering into an infinite timed loop
    where we perform the check again at regular, specified intervals.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来需要立即对哈希值进行检查，以确定在进入一个无限定时循环之前是否需要存档任何内容。在这个无限定时循环中，我们将定期、按指定的时间间隔再次执行检查。
- en: An infinite loop sounds like a bad idea; in fact, to some, it sounds like a
    bug. However, since we're talking about an infinite loop within this program,
    and since infinite loops can be easily broken with a simple `break` command, they're
    not as dramatic as they might sound. When we mix an infinite loop with a select
    statement that has no default case, we are able to run the code in a manageable
    way without gobbling up CPU cycles as we wait for something to happen. The execution
    will be blocked until one of the two channels receive data.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 无限循环听起来像是一个坏主意；实际上，对一些人来说，它听起来像是一个错误。然而，由于我们正在讨论程序内的无限循环，并且由于无限循环可以通过简单的`break`命令轻松中断，所以它们并不像听起来那么戏剧化。当我们把无限循环与一个没有默认情况的`select`语句混合时，我们能够以可管理的方式运行代码，而不会在等待某事发生时消耗CPU周期。执行将被阻塞，直到两个通道之一接收数据。
- en: 'In Go, to write an infinite loop is as simple as running this:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go中，编写无限循环就像运行以下代码一样简单：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The instructions inside the braces get executed over and over again, as quickly
    as the machine running the code can execute them. Again, this sounds like a bad
    plan unless you're careful about what you're asking it to do. In our case, we
    are immediately initiating a `select` case on the two channels that will block
    safely until one of the channels has something interesting to say.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 大括号内的指令会不断地被执行，速度取决于运行代码的机器。再次强调，除非你小心地处理你要求它做的事情，否则这听起来像是一个糟糕的计划。在我们的情况下，我们立即在两个通道上启动一个`select`情况，这将安全地阻塞，直到其中一个通道有有趣的东西要说。
- en: 'Add the following code:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 添加以下代码：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Of course, as responsible programmers, we care about what happens when the
    user terminates our programs. So after a call to the `check` method (which doesn''t
    yet exist), we make a signal channel and use `signal.Notify` to ask for the termination
    signal to be given to the channel rather than it being handled automatically.
    In our infinite `for` loop, we select two possibilities: either the `timer` channel
    sends a message or the termination signal channel sends a message. If it''s the
    `timer` channel message, we call `check` again; if it''s `signalChan`, we go about
    terminating the program; otherwise, we''ll loop back and wait.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，作为负责任的程序员，我们关心当用户终止我们的程序时会发生什么。因此，在调用`check`方法（该方法尚未存在）之后，我们创建一个信号通道，并使用`signal.Notify`请求将终止信号发送到通道，而不是自动处理。在我们的无限`for`循环中，我们选择两种可能性：要么`timer`通道发送消息，要么终止信号通道发送消息。如果是`timer`通道的消息，我们再次调用`check`；如果是`signalChan`，我们开始终止程序；否则，我们将循环回并等待。
- en: The `time.After` function returns a channel that will send a signal (actually,
    the current time) after the specified time has elapsed. Since we are using `flag.Duration`,
    we can pass this (deferenced via `*`) as the `time.Duration` argument directly
    into the function. Using `flag.Duration` also means that users can specify time
    durations in a human readable way, such as `10s` for 10 seconds or `1m` for a
    minute.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`time.After`函数返回一个通道，将在指定时间过后发送信号（实际上，是当前时间）。由于我们使用`flag.Duration`，我们可以直接将这个（通过`deferred`）作为`time.Duration`参数传递给函数。使用`flag.Duration`还意味着用户可以用人类可读的方式指定时间长度，例如`10s`代表10秒或`1m`代表一分钟。'
- en: Finally, we return from the main function, causing the deferred statements to
    execute, such as closing the database connection.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们从主函数返回，导致延迟语句执行，例如关闭数据库连接。
