- en: Summary
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we successfully built a very simple backup system for your
    code projects. You can see how simple it would be to extend or modify the behavior
    of these programs. The scope for potential problems that you could go on to solve
    is limitless.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们成功地为你构建了一个非常简单的代码项目备份系统。你可以看到扩展或修改这些程序的行为将多么简单。你可以继续解决的问题的潜在范围是无限的。
- en: Rather than having a local archive destination folder like we did in the previous
    section, imagine mounting a network storage device and using that instead. Suddenly,
    you have off-site (or at least off-machine) backups of these vital files. You
    can easily set a Dropbox folder as the archive destination, which would mean that
    not only do you get access to the snapshots yourself, but a copy is also stored
    in the cloud and can even be shared with other users.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们在上一节中使用的本地存档目标文件夹不同，想象一下挂载一个网络存储设备并使用它。突然之间，你有了这些重要文件的异地（或至少是离机）备份。你可以轻松地将Dropbox文件夹设置为存档目标，这意味着你不仅可以自己访问快照，而且一份副本也存储在云端，甚至可以与其他用户共享。
- en: Extending the `Archiver` interface to support `Restore` operations (which would
    just use the `encoding/zip` package to unzip the files) allows you to build tools
    that can peer inside the archives and access the changes of individual files,
    much like Time Machine on a Mac allows you to do. Indexing the files gives you
    the complete search across the entire history of your code, much like GitHub does.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 将`Archiver`接口扩展以支持`Restore`操作（这只需使用`encoding/zip`包解压文件）允许你构建可以深入存档并访问单个文件更改的工具，就像Mac上的时间机器允许你做的那样。对文件进行索引可以让你在整个代码历史中完成完整的搜索，就像GitHub所做的那样。
- en: Since the filenames are timestamps, you could have backupd retiring old archives
    to less active storage mediums or summarized the changes into a daily dump.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 由于文件名是时间戳，你可以让backupd将旧存档转移到不太活跃的存储介质，或者将更改总结成每日存档。
- en: Obviously, backup software exists, is well tested, and is used throughout the
    world, and it may be a smart move to focus on solving problems that haven't been
    solved yet. But when it requires such little effort to write small programs to
    get things done, it is often worth doing because of the control it gives you.
    When you write the code, you can get exactly what you want without compromise,
    and it's down to each individual to make that call.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，备份软件已经存在，经过良好测试，并在全球范围内使用，并且专注于解决尚未解决的问题可能是一个明智的选择。但是，当编写小程序来完成这些事情只需要很少的努力时，它通常值得去做，因为它给予你的控制力。当你编写代码时，你可以得到你想要的确切结果，而不需要妥协，这取决于每个个体做出这样的决定。
- en: 'Specifically, in this chapter, we explored how easy Go''s standard library
    makes it to interact with the filesystem: opening files for reading, creating
    new files, and making directories. The `os` package mixed in with the powerful
    types from the `io` package, blended further with capabilities such as `encoding/zip`
    and others, gives a clear example of how extremely simple Go interfaces can be
    composed to deliver very powerful results.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，在本章中，我们探讨了Go标准库如何使与文件系统的交互变得简单：打开文件进行读取、创建新文件以及创建目录。`os`包与`io`包中的强大类型混合使用，进一步与`encoding/zip`等能力结合，清楚地展示了Go接口如何被组合以实现非常强大的结果。
