- en: Modules in Google App Engine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A module is a Go package that can be versioned, updated, and managed independently.
    An app might have a single module, or it can be made up of many modules, each
    distinct but part of the same application with access to the same data and services.
    An application must have a default module even if it doesn't do much.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our application will be made up of the following modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Description** | **The module name** |'
  prefs: []
  type: TYPE_TB
- en: '| The obligatory default module | default |'
  prefs: []
  type: TYPE_TB
- en: '| An API package delivering RESTful JSON | api |'
  prefs: []
  type: TYPE_TB
- en: '| A static website serving HTML, CSS, and JavaScript that makes AJAX calls
    to the API module | web |'
  prefs: []
  type: TYPE_TB
- en: Each module will be a Go package and will, therefore, live inside its own folder.
  prefs: []
  type: TYPE_NORMAL
- en: Let's reorganize our project into modules by creating a new folder alongside
    the `api` folder called `default`.
  prefs: []
  type: TYPE_NORMAL
- en: We are not going to make our default module do anything other than use it for
    configuration, as we want our other modules to do all the meaningful work. But
    if we leave this folder empty, the Google App Engine SDK will complain that it
    has nothing to build.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `default` folder, add the following placeholder `main.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This file does nothing except allow our `default` module to exist
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It would have been nice for our package names to match the folders, but `default`
    is a reserved keyword in Go, so we have a good reason to break that rule.
  prefs: []
  type: TYPE_NORMAL
- en: The other module in our application will be called `web`, so create another
    folder alongside the `api` and `default` folders called `web`. In this chapter,
    we are only going to build the API for our application and cheat by downloading
    the web module.
  prefs: []
  type: TYPE_NORMAL
- en: Head over to the project home page at [https://github.com/matryer/goblueprints](https://github.com/matryer/goblueprints),
    access the content for **Second Edition**, and look for the download link for
    the *web components for* [Chapter 9](part0201_split_000.html#5VM122-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Chapter 9.  Building a Q&A Application for Google App Engine"), *Building a Q&A
    Application for Google App Engine* in the Downloads section of the `README` file.
    The ZIP file contains the source files for the web component, which should be
    unzipped and placed inside the `web` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, our application structure should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Specifying modules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To specify which module our `api` package will become, we must add a property
    to the `app.yaml` inside our **api** folder. Update it to include the `module`
    property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Since our default module will need to be deployed as well, we also need to
    add an `app.yaml` configuration file to it. Duplicate the `api/app.yaml` file
    inside `default/app.yaml`, changing the module to `default`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Routing to modules with dispatch.yaml
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to route traffic appropriately to our modules, we will create another
    configuration file called `dispatch.yaml`, which will let us map URL patterns
    to the modules.
  prefs: []
  type: TYPE_NORMAL
- en: We want all traffic beginning with the `/api/` path to be routed to the `api`
    module and everything else to the `web` module. As mentioned earlier, we won't
    expect our `default` module to handle any traffic, but it will have more utility
    later.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `answersapp` folder (alongside our module folders not inside any of
    the module folders), create a new file called `dispatch.yaml` with the following
    contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The same `application` property tells the Google App Engine SDK for Go which
    application we are referring to, and the `dispatch` section routes URLs to modules.
  prefs: []
  type: TYPE_NORMAL
