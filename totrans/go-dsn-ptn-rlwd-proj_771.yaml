- en: Modules in Google App Engine
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Google App Engine 中的模块
- en: A module is a Go package that can be versioned, updated, and managed independently.
    An app might have a single module, or it can be made up of many modules, each
    distinct but part of the same application with access to the same data and services.
    An application must have a default module even if it doesn't do much.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 模块是一个可以独立版本化、更新和管理的 Go 包。一个应用程序可能只有一个模块，或者它可以由许多模块组成，每个模块都是独立的，但又是同一应用程序的一部分，可以访问相同的数据和服务。即使应用程序没有做很多事情，它也必须有一个默认模块。
- en: 'Our application will be made up of the following modules:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序将由以下模块组成：
- en: '| **Description** | **The module name** |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| **描述** | **模块名称** |'
- en: '| The obligatory default module | default |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| 必要的默认模块 | default |'
- en: '| An API package delivering RESTful JSON | api |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| 提供RESTful JSON的API包 | api |'
- en: '| A static website serving HTML, CSS, and JavaScript that makes AJAX calls
    to the API module | web |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| 提供HTML、CSS和JavaScript的静态网站，并通过 AJAX 调用 API 模块 | web |'
- en: Each module will be a Go package and will, therefore, live inside its own folder.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模块都将是一个 Go 包，因此将存在于它自己的文件夹中。
- en: Let's reorganize our project into modules by creating a new folder alongside
    the `api` folder called `default`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将项目重新组织成模块，通过在 `api` 文件夹旁边创建一个新的文件夹名为 `default` 来实现。
- en: We are not going to make our default module do anything other than use it for
    configuration, as we want our other modules to do all the meaningful work. But
    if we leave this folder empty, the Google App Engine SDK will complain that it
    has nothing to build.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会让默认模块做任何其他事情，除了用于配置，因为我们希望其他模块完成所有有意义的工作。但是如果我们让这个文件夹为空，Google App Engine
    SDK 会抱怨它没有东西可以构建。
- en: 'Inside the `default` folder, add the following placeholder `main.go` file:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `default` 文件夹内，添加以下占位符 `main.go` 文件：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This file does nothing except allow our `default` module to exist
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件除了允许我们的 `default` 模块存在外，不做任何事情
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It would have been nice for our package names to match the folders, but `default`
    is a reserved keyword in Go, so we have a good reason to break that rule.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的包名与文件夹匹配会很好，但 `default` 是 Go 中的一个保留关键字，所以我们有很好的理由打破这个规则。
- en: The other module in our application will be called `web`, so create another
    folder alongside the `api` and `default` folders called `web`. In this chapter,
    we are only going to build the API for our application and cheat by downloading
    the web module.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序中的另一个模块将被称为 `web`，因此创建一个名为 `web` 的文件夹，位于 `api` 和 `default` 文件夹旁边。在本章中，我们只将构建应用程序的
    API，并通过下载 web 模块来作弊。
- en: Head over to the project home page at [https://github.com/matryer/goblueprints](https://github.com/matryer/goblueprints),
    access the content for **Second Edition**, and look for the download link for
    the *web components for* [Chapter 9](part0201_split_000.html#5VM122-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Chapter 9.  Building a Q&A Application for Google App Engine"), *Building a Q&A
    Application for Google App Engine* in the Downloads section of the `README` file.
    The ZIP file contains the source files for the web component, which should be
    unzipped and placed inside the `web` folder.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 前往项目主页 [https://github.com/matryer/goblueprints](https://github.com/matryer/goblueprints)，访问
    **第二版** 的内容，并在 `README` 文件的下载部分查找 [第 9 章](part0201_split_000.html#5VM122-9c484ed022e64a0fb0e1aebf8e05d4fd
    "第 9 章。为 Google App Engine 构建问答应用程序") 的 *web 组件下载链接*，即 *Building a Q&A Application
    for Google App Engine*。ZIP 文件包含 web 组件的源文件，应该解压并放置在 `web` 文件夹中。
- en: 'Now, our application structure should look like this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的应用程序结构应该看起来像这样：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Specifying modules
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定模块
- en: 'To specify which module our `api` package will become, we must add a property
    to the `app.yaml` inside our **api** folder. Update it to include the `module`
    property:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定我们的 `api` 包将成为哪个模块，我们必须在我们的 **api** 文件夹中的 `app.yaml` 中添加一个属性。更新它以包含 `module`
    属性：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Since our default module will need to be deployed as well, we also need to
    add an `app.yaml` configuration file to it. Duplicate the `api/app.yaml` file
    inside `default/app.yaml`, changing the module to `default`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的默认模块也需要部署，我们还需要向其中添加一个 `app.yaml` 配置文件。将 `api/app.yaml` 文件复制到 `default/app.yaml`
    中，将模块更改为 `default`：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Routing to modules with dispatch.yaml
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 dispatch.yaml 路由到模块
- en: In order to route traffic appropriately to our modules, we will create another
    configuration file called `dispatch.yaml`, which will let us map URL patterns
    to the modules.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将流量适当地路由到我们的模块，我们将创建另一个名为 `dispatch.yaml` 的配置文件，这将使我们能够将 URL 模式映射到模块。
- en: We want all traffic beginning with the `/api/` path to be routed to the `api`
    module and everything else to the `web` module. As mentioned earlier, we won't
    expect our `default` module to handle any traffic, but it will have more utility
    later.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望所有以`/api/`路径开始的流量都路由到`api`模块，其余所有流量都路由到`web`模块。如前所述，我们不会期望我们的`default`模块处理任何流量，但它在以后会有更多用途。
- en: 'In the `answersapp` folder (alongside our module folders not inside any of
    the module folders), create a new file called `dispatch.yaml` with the following
    contents:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在`answersapp`文件夹中（与我们的模块文件夹并列，不在任何模块文件夹内部），创建一个名为`dispatch.yaml`的新文件，内容如下：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The same `application` property tells the Google App Engine SDK for Go which
    application we are referring to, and the `dispatch` section routes URLs to modules.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的`application`属性告诉Google App Engine SDK for Go我们正在引用哪个应用程序，而`dispatch`部分则将URL路由到模块。
