- en: Entities and data access
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实体和数据访问
- en: To persist data in Google Cloud Datastore, we need a struct to represent each
    entity. These entity structures will be serialized and deserialized when we save
    and load data through the `datastore` API. We can add helper methods to perform
    the interactions with the data store, which is a nice way to keep such functionality
    physically close to the entities themselves. For example, we will model an answer
    with a struct called `Answer` and add a `Create` method that in turn calls the
    appropriate function from the `datastore` package. This prevents us from bloating
    our HTTP handlers with lots of data access code and allows us to keep them clean
    and simple instead.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Google Cloud Datastore中持久化数据，我们需要一个结构体来表示每个实体。这些实体结构体在通过`datastore`API保存和加载数据时将被序列化和反序列化。我们可以添加辅助方法来执行与数据存储的交互，这是一种将此类功能物理上靠近实体本身的好方法。例如，我们将使用名为`Answer`的结构体来模拟一个答案，并添加一个`Create`方法，该方法会调用`datastore`包中的适当函数。这可以防止我们的HTTP处理器因为大量的数据访问代码而变得臃肿，并允许我们保持它们的简洁和简单。
- en: One of the foundation blocks of our application is the concept of a question.
    A question can be asked by a user and answered by many. It will have a unique
    ID so that it is addressable (referable in a URL), and we'll store a timestamp
    of when it was created.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的基础块之一是问题的概念。一个问题可以被用户提出并由多人回答。它将有一个唯一的ID，以便它是可引用的（可以在URL中引用），我们还将存储创建时的时间戳。
- en: 'Create a new file inside `answersapp` called `questions.go` and add the following
    `struct` function:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在`answersapp`内部创建一个名为`questions.go`的新文件，并添加以下`struct`函数：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The structure describes a question in our application. Most of it will seem
    quite obvious, as we've done similar things in the previous chapters. The `UserCard`
    struct represents a denormalized `User` entity, both of which we'll add later.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 该结构描述了我们的应用程序中的一个问题。其中大部分将显得相当明显，因为我们已经在之前的章节中做过类似的事情。`UserCard`结构体表示一个非规范化的`User`实体，这两个实体我们将在稍后添加。
- en: Tip
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'You can import the `datastore` package in your Go project using this: `import
    "google.golang.org/appengine/datastore"`'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下方式在你的Go项目中导入`datastore`包：`import "google.golang.org/appengine/datastore"`
- en: It's worth spending a little time understanding the `datastore.Key` type.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 值得花点时间去理解`datastore.Key`类型。
