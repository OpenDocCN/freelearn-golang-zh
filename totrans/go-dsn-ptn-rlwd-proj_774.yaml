- en: Entities and data access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To persist data in Google Cloud Datastore, we need a struct to represent each
    entity. These entity structures will be serialized and deserialized when we save
    and load data through the `datastore` API. We can add helper methods to perform
    the interactions with the data store, which is a nice way to keep such functionality
    physically close to the entities themselves. For example, we will model an answer
    with a struct called `Answer` and add a `Create` method that in turn calls the
    appropriate function from the `datastore` package. This prevents us from bloating
    our HTTP handlers with lots of data access code and allows us to keep them clean
    and simple instead.
  prefs: []
  type: TYPE_NORMAL
- en: One of the foundation blocks of our application is the concept of a question.
    A question can be asked by a user and answered by many. It will have a unique
    ID so that it is addressable (referable in a URL), and we'll store a timestamp
    of when it was created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file inside `answersapp` called `questions.go` and add the following
    `struct` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The structure describes a question in our application. Most of it will seem
    quite obvious, as we've done similar things in the previous chapters. The `UserCard`
    struct represents a denormalized `User` entity, both of which we'll add later.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can import the `datastore` package in your Go project using this: `import
    "google.golang.org/appengine/datastore"`'
  prefs: []
  type: TYPE_NORMAL
- en: It's worth spending a little time understanding the `datastore.Key` type.
  prefs: []
  type: TYPE_NORMAL
