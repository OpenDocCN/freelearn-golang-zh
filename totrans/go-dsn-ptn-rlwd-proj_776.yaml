- en: Putting data into Google Cloud Datastore
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we save data into Datastore, we want to ensure that our question is
    valid. Add the following method underneath the Question struct definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `OK` function will return an error if something is wrong with the question,
    or else it will return `nil`. In this case, we just check to make sure the question
    has at least 10 characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'To persist this data in the data store, we are going to add a method to the
    `Question` struct itself. At the bottom of `questions.go`, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `Create` method takes a pointer to `Question` as the receiver, which is
    important because we want to make changes to the fields.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the receiver was `(q Question)` without `*`, we would get a copy of the question
    rather than a pointer to it, and any changes we made to it would only affect our
    local copy and not the original `Question` struct itself.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we do is use `log` (from the [https://godoc.org/google.golang.org/appengine/log](https://godoc.org/google.golang.org/appengine/log)Â package)
    to write a debug statement saying we are saving the question. When you run your
    code in a development environment, you will see this appear in the terminal; in
    production, it goes into a dedicated logging service provided by Google Cloud
    Platform.
  prefs: []
  type: TYPE_NORMAL
- en: If the key is `nil` (that means this is a new question), we assign an incomplete
    key to the field, which informs Datastore that we want it to generate a key for
    us. The three arguments we pass are `context.Context` (which we must pass to all
    datastore functions and methods), a string describing the kind of entity, and
    the parent key; in our case, this is `nil`.
  prefs: []
  type: TYPE_NORMAL
- en: Once we know there is a key in place, we call a method (which we will add later)
    to get or create `User` from an App Engine user and set it to the question and
    then set the `CTime` field (created time) to `time.Now`, timestamping the point
    at which the question was asked.
  prefs: []
  type: TYPE_NORMAL
- en: One we have our `Question` function in good shape, we call `datastore.Put` to
    actually place it inside the data store. As usual, the first argument is `context.Context`,
    followed by the question key and the question entity itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since Google Cloud Datastore treats keys as separate and distinct from entities,
    we have to do a little extra work if we want to keep them together in our own
    code. The `datastore.Put` method returns two arguments: the complete key and `error`.
    The key argument is actually useful because we''re sending in an incomplete key
    and asking the data store to create one for us, which it does during the put operation.
    If successful, it returns a new `datastore.Key` object to us, representing the
    completed key, which we then store in our `Key` field in the `Question` object.'
  prefs: []
  type: TYPE_NORMAL
- en: If all is well, we return `nil`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add another helper to update an existing question:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This method is very similar except that it doesn't set the `CTime` or `User`
    fields, as they will already have been set.
  prefs: []
  type: TYPE_NORMAL
