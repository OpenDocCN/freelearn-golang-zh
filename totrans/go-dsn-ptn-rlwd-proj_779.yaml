- en: Embedding denormalized data
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嵌入非规范化数据
- en: If you recall, our Question type doesn't take the author as `User`; rather,
    the type was `UserCard`. When we embed denormalized data into other entities,
    sometimes we will want them to look slightly different from the master entity.
    In our case, since we do not store the key in the `User` entity (remember the
    `Key` fields have `datastore:"-"`), we need to have a new type that stores the
    key.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还记得，我们的 `Question` 类型不将作者作为 `User`；相反，类型是 `UserCard`。当我们将非规范化数据嵌入到其他实体中时，有时我们希望它们看起来与主实体略有不同。在我们的例子中，由于我们没有在
    `User` 实体中存储键（记住 `Key` 字段有 `datastore:"-"`），我们需要有一个新的类型来存储键。
- en: 'At the bottom of `users.go`, add the `UserCard` struct and the associated helper
    method for `User`:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `users.go` 文件的底部，添加 `UserCard` 结构体及其关联的 `User` 辅助方法：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that `UserCard` doesn't specify a `datastore` tag, so the `Key` field will
    indeed be persisted in the data store. Our `Card()` helper function just builds
    and returns `UserCard` by copying the values of each field. This seems wasteful
    but offers great control, especially if you want embedded data to look very different
    from its original entity.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`UserCard` 没有指定 `datastore` 标签，因此 `Key` 字段确实会被持久化存储在数据存储中。我们的 `Card()` 辅助函数只是通过复制每个字段的值来构建并返回
    `UserCard`。这看起来有些浪费，但提供了极大的控制，尤其是当你希望嵌入的数据与其原始实体看起来非常不同时。
