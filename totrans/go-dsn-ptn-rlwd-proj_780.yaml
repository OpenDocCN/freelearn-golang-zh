- en: Transactions in Google Cloud Datastore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Transactions allow you to specify a series of changes to the data store and
    commit them as one. If any of the individual operations fails, the whole transaction
    will not be applied. This is extremely useful if you want to maintain counters
    or have multiple entities that depend on each other's state. During a transaction
    in Google Cloud Datastore, all entities that are read are locked (other code is
    prevented from making changes) until the transaction is complete, providing an
    additional sense of security and preventing data races.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you were building a bank (it seems crazy, but the guys at Monzo in London
    are indeed building a bank using Go), you might represent user accounts as an
    entity called `Account`. To transfer money from one account to another, you'd
    need to make sure the money was deducted from account A and deposited into account
    B as a single transaction. If either fails, people aren't going to be happy (to
    be fair, if the deduction operation failed, the owner of account A would probably
    be happy because B would get the money without it costing A anything).
  prefs: []
  type: TYPE_NORMAL
- en: To see where we are going to use transactions, let's first add model answers
    to the questions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file called `answers.go` and add the following struct and validation
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`Answer` is similar to a question, has `datastore.Key` (which will not be persisted),
    has `CTime` to capture the timestamp, and embeds `UserCard` (representing the
    person answering the question). It also has a `Score` integer field, which will
    go up and down as users vote on the answers.'
  prefs: []
  type: TYPE_NORMAL
