["```go\nfunc (a *Answer) Create(ctx context.Context, questionKey *datastore.Key) error { \n  a.Key = datastore.NewIncompleteKey(ctx, \"Answer\", questionKey) \n  user, err := UserFromAEUser(ctx) \n  if err != nil { \n    return err \n  } \n  a.User = user.Card() \n  a.CTime = time.Now() \n  err = datastore.RunInTransaction(ctx, func(ctx context.Context) error { \n    q, err := GetQuestion(ctx, questionKey) \n    if err != nil { \n      return err \n    } \n    err = a.Put(ctx) \n    if err != nil { \n      return err \n    } \n    q.AnswersCount++ \n    err = q.Update(ctx) \n    if err != nil { \n      return err \n    } \n    return nil \n  }, &datastore.TransactionOptions{XG: true}) \n  if err != nil { \n    return err \n  } \n  return nil \n} \n\n```", "```go\nfunc GetAnswer(ctx context.Context, answerKey *datastore.Key)  \n(*Answer, error) { \n  var answer Answer \n  err := datastore.Get(ctx, answerKey, &answer) \n  if err != nil { \n    return nil, err \n  } \n  answer.Key = answerKey \n  return &answer, nil \n} \n\n```", "```go\nfunc (a *Answer) Put(ctx context.Context) error { \n  var err error \n  a.Key, err = datastore.Put(ctx, a.Key, a) \n  if err != nil { \n    return err \n  } \n  return nil \n} \n\n```"]