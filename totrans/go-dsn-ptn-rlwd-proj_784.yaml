- en: Votes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 投票
- en: Now that we have modeled questions and answers in our application, it's time
    to think about how voting might work.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在我们的应用程序中建模了问题和答案，是时候考虑投票可能的工作方式了。
- en: 'Let''s design it a little:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微设计一下：
- en: Users vote answers up and down based on their opinion of them
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户根据他们对答案的看法进行上下投票
- en: Answers are ordered by their score so the best ones appear first
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 答案按其分数排序，因此最好的答案会首先出现
- en: Each person is allowed one vote per answer
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个人对每个答案只能投一票
- en: If a user votes again, they should replace their previous vote
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果用户再次投票，他们应该替换他们之前的投票
- en: We will make use of a few things we have learned so far in this chapter; transactions
    will help us ensure the correct score is calculated for answers, and we'll use
    predictable keys again to ensure that each person gets only one vote per answer.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将利用本章迄今为止学到的几个知识点；事务将帮助我们确保为答案计算正确的分数，我们还将再次使用可预测的键来确保每个人对每个答案只能投一票。
- en: We will first build a structure to represent each vote and use field tags to
    be a little more specific about how we want the data store to index our data.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将构建一个结构来表示每一票，并使用字段标签来更具体地说明我们希望数据存储如何索引我们的数据。
