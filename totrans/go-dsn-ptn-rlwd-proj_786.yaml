- en: Embedding a different view of entities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now it''s time to create our `Vote` structure, which we''ll do inside a new
    file called `votes.go`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A `Vote` structure contains many of our embeddable card types representing `Question`,
    `Answer` and `User` casting the vote. It also contains a `Score` integer, which
    will be either `1` or `-1` (depending on whether they voted up or down). We will
    also keep track of when they cast their vote (or last changed it) with the `MTime`
    `time.Time` field.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use pointers to the `*Card` types in the `Vote` struct if you like.
    This would save additional copies being made when if you pass the `Vote` object
    in and out of functions, but that would mean that any changes made inside these
    functions would affect the original data rather than just their local copy. In
    most situations, there isn't much of a performance benefit to using pointers and
    it might be considered simpler to omit them. This book deliberately mixes both
    approaches to show you how they work, but you should understand the implications
    before making a decision.
  prefs: []
  type: TYPE_NORMAL
- en: Like our `UserCard` method, we are going to add appropriate versions for questions
    and answers, but this time we are going to be more selective about which fields
    should be included and which should be left out.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `questions.go`, add the `QuestionCard` type and the associated helper method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `QuestionCard` type captures the `Question` string and who asked it (our
    `UserCard` method, again), but we are leaving out the `CTime` and `AnswersCount`
    fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add `AnswerCard` to `answers.go` next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, we are only capturing the `Answer` string and `User` and excluding
    `CTime` and `Score`.
  prefs: []
  type: TYPE_NORMAL
- en: Deciding which fields to capture and which to omit is entirely dependent on
    the user experience you wish to provide. We might decide that when we show a vote,
    we want to show the score of `Answer` at the time, or we might want to show the
    current score of `Answer` regardless of what it was at the time the vote was cast.
    Perhaps we want to send a push notification to the user who wrote the answer saying
    something like "Blanca has up-voted your answer to Ernesto's question it now has
    a score of 15", in which case we would need to grab the `Score` field too.
  prefs: []
  type: TYPE_NORMAL
