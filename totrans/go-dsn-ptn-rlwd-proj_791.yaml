- en: Optional features with type assertions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you use interface types in Go, you can perform type assertions to see whether
    the objects implement other interfaces, and since you can write interfaces inline,
    it is possible to very easily find out whether an object implements a specific
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'If `v` is `interface{}`, we can see whether it has the `OK` method using this
    pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If the `v` object implements the method described in the interface, `ok` will
    be `true` and `obj` will be an object on which the OK method can be called. Otherwise,
    `ok` will be false.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One problem with this approach is that it hides the secret functionality from
    users of the code, so you must either document the function very well in order
    to make it clear or perhaps promote the method to its own first-class interface
    and insist that all objects implement it. Remember that we must always seek clear
    code over clever code. As a side exercise, see whether you can add the interface
    and use it in the decode signature instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to add a function that will help us decode JSON request bodies
    and, optionally, validate the input. Create a new file called `http.go` and add
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The decode function takes `http.Request` and a destination value called `v`,
    which is where the data from the JSON will go. We check whether the `OK` method
    is implemented, and if it is, we call it. We expect `OK` to return nil if the
    object looks good; otherwise, we expect it to return an error that explains what
    is wrong. If we get an error, we'll return it and let the calling code deal with
    it.
  prefs: []
  type: TYPE_NORMAL
- en: If all is well, we return nil at the bottom of the function.
  prefs: []
  type: TYPE_NORMAL
