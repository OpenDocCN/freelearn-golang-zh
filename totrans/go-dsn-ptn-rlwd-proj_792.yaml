- en: Response helpers
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 响应辅助函数
- en: 'We are going to add a pair of helper functions that will make responding to
    API requests easy. Add the `respond` function to `http.go`:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加一对辅助函数，使响应API请求变得容易。将`respond`函数添加到`http.go`：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The respond method contains a `context`, `ResponseWriter`, `Request`, the object
    to respond with, and a status code. It encodes `v` into an internal buffer before
    setting the appropriate headers and writing the response.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`respond`方法包含一个`context`、`ResponseWriter`、`Request`、要响应的对象和状态码。它在设置适当的头部并写入响应之前，将`v`编码到内部缓冲区。'
- en: We are using a buffer here because it's possible that the encoding might fail.
    If it does so but has already started writing the response, the 200 OK header
    will be sent to the client, which is misleading. Instead, encoding to a buffer
    lets us be sure that completes without issue before deciding what status code
    to respond with.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用缓冲区，因为编码可能失败。如果编码失败但已经开始写入响应，则将发送200 OK头部到客户端，这是误导的。相反，将编码到缓冲区可以确保在决定响应的状态码之前，完成编码且没有问题。
- en: 'Now add the `respondErr` function at the bottom of `http.go`:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在`http.go`的底部添加`respondErr`函数：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This function writes `error` wrapped in a struct that embeds the error string
    as a field called `error`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将`error`封装在包含错误字符串作为名为`error`字段的struct中。
