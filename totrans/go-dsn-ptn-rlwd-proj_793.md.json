["```go\nfunc TestPathParams(t *testing.T) { \n  r, err := http.NewRequest(\"GET\", \"1/2/3/4/5\", nil) \n  if err != nil { \n    t.Errorf(\"NewRequest: %s\", err) \n  } \n  params := pathParams(r, \"one/two/three/four\") \n  if len(params) != 4 { \n    t.Errorf(\"expected 4 params but got %d: %v\", len(params), params) \n  } \n  for k, v := range map[string]string{ \n    \"one\":   \"1\", \n    \"two\":   \"2\", \n    \"three\": \"3\", \n    \"four\":  \"4\", \n  } { \n    if params[k] != v { \n      t.Errorf(\"%s: %s != %s\", k, params[k], v) \n    } \n  } \n  params = pathParams(r, \"one/two/three/four/five/six\") \n  if len(params) != 5 { \n    t.Errorf(\"expected 5 params but got %d: %v\", len(params), params) \n  } \n  for k, v := range map[string]string{ \n    \"one\":   \"1\", \n    \"two\":   \"2\", \n    \"three\": \"3\", \n    \"four\":  \"4\", \n    \"five\":  \"5\", \n  } { \n    if params[k] != v { \n      t.Errorf(\"%s: %s != %s\", k, params[k], v) \n    } \n  } \n} \n\n```", "```go\nfunc pathParams(r *http.Request,pattern string) map[string]string{ \n  params := map[string]string{} \n  pathSegs := strings.Split(strings.Trim(r.URL.Path, \"/\"), \"/\") \n  for i, seg := range strings.Split(strings.Trim(pattern, \"/\"), \"/\") { \n    if i > len(pathSegs)-1 { \n      return params \n    } \n    params[seg] = pathSegs[i] \n  } \n  return params \n} \n\n```", "```go\nquestions: questions\nid:        123\n\n```"]