- en: Parsing path parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some of our API endpoints will need to pull IDs out of the path string, but
    we don't want to add any dependencies to our project (such as an external router
    package); instead, we are going to write a simple function that will parse path
    parameters for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first write a test that will explain how we want our path parsing to
    work. Create a file called http_test.go and add the following unit test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We expect to be able to pass in a pattern and have a map returned that discovers
    the values from the path in `http.Request`.
  prefs: []
  type: TYPE_NORMAL
- en: Run the test (with `go test -v`) and note that it fails.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom of `http.go`, add the following implementation to make the test
    pass:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The function breaks the path from the specific `http.Request` and builds a
    map of the values with keys taken from breaking the pattern path. So for a pattern
    of `/questions/id` and a path of `/questions/123`, it would return the following
    map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Of course, we'd ignore the `questions` key, but `id` will be useful.
  prefs: []
  type: TYPE_NORMAL
