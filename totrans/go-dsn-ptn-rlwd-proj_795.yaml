- en: Context in Google App Engine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you remember, all of our calls to App Engine functions took a `context.Context`
    object as the first parameter, but what is that and how do we create one?
  prefs: []
  type: TYPE_NORMAL
- en: '`Context` is actually an interface that provides cancelation signals, execution
    deadlines, and request-scoped data throughout a stack of function calls across
    many components and API boundaries. The Google App Engine SDK for Go uses it throughout
    its APIs, the details of which are kept internal to the package, which means that
    we (as users of the SDK) don''t have to worry about it. This is a good goal for
    when you use Context in your own packages; ideally, the complexity should be kept
    internal and hidden.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can, and should, learn more about `Context` through various online resources,
    starting with the *Go Concurrency Patterns: Context* blog post at [https://blog.golang.org/context](https://blog.golang.org/context).'
  prefs: []
  type: TYPE_NORMAL
- en: To create a context suitable for App Engine calls, you use the `appengine.NewContext`
    function, which takes `http.Request` as an argument to which the context will
    belong.
  prefs: []
  type: TYPE_NORMAL
- en: 'Underneath the routing code we just added, let''s add the handler that will
    be responsible for creating a question, and we can see how we will create a new
    context for each request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We create `Context` and store it in the `ctx` variable, which has become somewhat
    an accepted pattern throughout the Go community. We then decode our Question (which,
    due to the `OK` method, will also validate it for us) before calling the `Create`
    helper method that we wrote earlier. Every step of the way, we pass our context
    along.
  prefs: []
  type: TYPE_NORMAL
- en: If anything goes wrong, we make a call out to our `respondErr` function, which
    will write out the response to the client before returning and exiting early from
    the function.
  prefs: []
  type: TYPE_NORMAL
- en: If all is well, we respond with `Question` and a `http.StatusCreated` status
    code (201).
  prefs: []
  type: TYPE_NORMAL
