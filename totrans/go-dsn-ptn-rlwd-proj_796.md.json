["```go\nfunc handleQuestionGet(w http.ResponseWriter, r *http.Request,\n questionID string) { \n  ctx := appengine.NewContext(r) \n  questionKey, err := datastore.DecodeKey(questionID) \n  if err != nil { \n    respondErr(ctx, w, r, err, http.StatusBadRequest) \n    return \n  } \n  question, err := GetQuestion(ctx, questionKey) \n  if err != nil { \n    if err == datastore.ErrNoSuchEntity { \n      respondErr(ctx, w, r, datastore.ErrNoSuchEntity,\n       http.StatusNotFound) \n      return \n    } \n    respondErr(ctx, w, r, err, http.StatusInternalServerError) \n    return \n  } \n  respond(ctx, w, r, question, http.StatusOK) \n} \n\n```", "```go\nfunc handleAnswers(w http.ResponseWriter, r *http.Request) { \n  switch r.Method { \n  case \"GET\": \n    handleAnswersGet(w, r) \n  case \"POST\": \n    handleAnswerCreate(w, r) \n  default: \n    http.NotFound(w, r) \n  } \n} \n\n```", "```go\nfunc handleAnswersGet(w http.ResponseWriter, r *http.Request) { \n  ctx := appengine.NewContext(r) \n  q := r.URL.Query() \n  questionIDStr := q.Get(\"question_id\") \n  questionKey, err := datastore.DecodeKey(questionIDStr) \n  if err != nil { \n    respondErr(ctx, w, r, err, http.StatusBadRequest) \n    return \n  } \n  answers, err := GetAnswers(ctx, questionKey) \n  if err != nil { \n    respondErr(ctx, w, r, err, http.StatusInternalServerError) \n    return \n  } \n  respond(ctx, w, r, answers, http.StatusOK) \n} \n\n```", "```go\n/api/answers?question_id=abc123 \n\n```", "```go\nfunc handleAnswerCreate(w http.ResponseWriter, r *http.Request) { \n  ctx := appengine.NewContext(r) \n  var newAnswer struct { \n    Answer \n    QuestionID string `json:\"question_id\"` \n  } \n  err := decode(r, &newAnswer) \n  if err != nil { \n    respondErr(ctx, w, r, err, http.StatusBadRequest) \n    return \n  } \n  questionKey, err := datastore.DecodeKey(newAnswer.QuestionID) \n  if err != nil { \n    respondErr(ctx, w, r, err, http.StatusBadRequest) \n    return \n  } \n  err = newAnswer.OK() \n  if err != nil { \n    respondErr(ctx, w, r, err, http.StatusBadRequest) \n    return \n  } \n  answer := newAnswer.Answer \n  user, err := UserFromAEUser(ctx) \n  if err != nil { \n    respondErr(ctx, w, r, err, http.StatusBadRequest) \n    return \n  } \n  answer.User = user.Card() \n  err = answer.Create(ctx, questionKey) \n  if err != nil { \n    respondErr(ctx, w, r, err, http.StatusInternalServerError) \n    return \n  } \n  respond(ctx, w, r, answer, http.StatusCreated) \n} \n\n```", "```go\nfunc handleVotes(w http.ResponseWriter, r *http.Request) { \n  if r.Method != \"POST\" { \n    http.NotFound(w, r) \n    return \n  } \n  handleVote(w, r) \n} \n\n```", "```go\nfunc validScore(score int) bool { \n  return score == -1 || score == 1 \n} \n\n```", "```go\nfunc validScore(score int) error { \n  if score != -1 && score != 1 { \n    return errors.New(\"invalid score\") \n  } \n  return nil \n} \n\n```", "```go\nfunc handleVote(w http.ResponseWriter, r *http.Request) { \n  ctx := appengine.NewContext(r) \n  var newVote struct { \n    AnswerID string `json:\"answer_id\"` \n    Score    int    `json:\"score\"` \n  } \n  err := decode(r, &newVote) \n  if err != nil { \n    respondErr(ctx, w, r, err, http.StatusBadRequest) \n    return \n  } \n  err = validScore(newVote.Score) \n  if err != nil { \n    respondErr(ctx, w, r, err, http.StatusBadRequest) \n    return \n  } \n  answerKey, err := datastore.DecodeKey(newVote.AnswerID) \n  if err != nil { \n    respondErr(ctx, w, r, errors.New(\"invalid answer_id\"), \n    http.StatusBadRequest) \n    return \n  } \n  vote, err := CastVote(ctx, answerKey, newVote.Score) \n  if err != nil { \n    respondErr(ctx, w, r, err, http.StatusInternalServerError) \n    return \n  } \n  respond(ctx, w, r, vote, http.StatusCreated) \n} \n\n```"]