- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we built a fully functional question and answer application
    for Google App Engine.
  prefs: []
  type: TYPE_NORMAL
- en: We learned how to use the Google App Engine SDK for Go to build and test our
    application locally before deploying it to the cloud, ready for our friends and
    family to use. The application is ready to scale if it suddenly starts getting
    a lot of traffic, and we can rely on the healthy quota to satisfy early traffic.
  prefs: []
  type: TYPE_NORMAL
- en: We explored how to model data in Go code, keep track of keys, and persist and
    query data in Google Cloud Datastore. We also explored strategies to denormalize
    such data in order to make it quicker to read back at scale. We saw how transactions
    can guarantee data integrity by ensuring that only one operation occurs at a particular
    point in time, allowing us to build reliable counters for the score of our answers.
    We used predictable data store keys to ensure that our users can only have one
    vote per answer, and we used incomplete keys when we wanted the data store to
    generate the keys for us.
  prefs: []
  type: TYPE_NORMAL
- en: A lot of the techniques explored in this chapter would apply to any kind of
    application that persists data and interacts over a RESTful JSON API so the skills
    are highly transferrable.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to explore modern software architecture by
    building a real micro-service using the Go Kit framework. There are a lot of benefits
    to building solutions using micro-services, and so they have become a very popular
    choice for large, distributed systems. Lots of companies are already running such
    architectures (mostly written in Go) in production, and we will look at how they
    do it.
  prefs: []
  type: TYPE_NORMAL
