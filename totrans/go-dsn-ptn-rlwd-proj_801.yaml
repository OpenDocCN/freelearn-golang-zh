- en: Summary
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we built a fully functional question and answer application
    for Google App Engine.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们为Google App Engine构建了一个功能齐全的问题和答案应用程序。
- en: We learned how to use the Google App Engine SDK for Go to build and test our
    application locally before deploying it to the cloud, ready for our friends and
    family to use. The application is ready to scale if it suddenly starts getting
    a lot of traffic, and we can rely on the healthy quota to satisfy early traffic.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何使用Google App Engine SDK for Go在本地构建和测试我们的应用程序，然后再将其部署到云端，以便我们的朋友和家人使用。如果应用程序突然开始获得大量流量，它已经准备好进行扩展，并且我们可以依赖健康的配额来满足早期流量。
- en: We explored how to model data in Go code, keep track of keys, and persist and
    query data in Google Cloud Datastore. We also explored strategies to denormalize
    such data in order to make it quicker to read back at scale. We saw how transactions
    can guarantee data integrity by ensuring that only one operation occurs at a particular
    point in time, allowing us to build reliable counters for the score of our answers.
    We used predictable data store keys to ensure that our users can only have one
    vote per answer, and we used incomplete keys when we wanted the data store to
    generate the keys for us.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们探讨了如何在Go代码中建模数据，跟踪键，以及在Google Cloud Datastore中持久化和查询数据。我们还探讨了如何通过使数据在特定时间点只发生一个操作来保证数据完整性，从而构建可靠的答案得分的计数器。我们使用可预测的数据存储键来确保用户对每个答案只能投一票，并在需要数据存储为我们生成键时使用不完整的键。
- en: A lot of the techniques explored in this chapter would apply to any kind of
    application that persists data and interacts over a RESTful JSON API so the skills
    are highly transferrable.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章探讨的许多技术都适用于任何需要持久化数据和通过RESTful JSON API交互的应用程序，因此这些技能具有很强的可迁移性。
- en: In the next chapter, we are going to explore modern software architecture by
    building a real micro-service using the Go Kit framework. There are a lot of benefits
    to building solutions using micro-services, and so they have become a very popular
    choice for large, distributed systems. Lots of companies are already running such
    architectures (mostly written in Go) in production, and we will look at how they
    do it.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过使用Go Kit框架构建一个真实的微服务来探索现代软件架构。使用微服务构建解决方案有很多好处，因此它们已经成为大型分布式系统的一个非常流行的选择。许多公司已经在生产中运行这样的架构（主要是用Go编写的），我们将看看他们是怎样做到的。
