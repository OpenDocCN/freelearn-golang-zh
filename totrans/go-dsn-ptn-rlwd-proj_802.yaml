- en: Chapter 10.  Micro-services in Go with the Go kit Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Micro-services** are discrete components working together to provide functionality
    and business logic for a larger application, usually communicating over a network
    protocol (such as HTTP/2 or some other binary transport) and distributed across
    many physical machines. Each component is isolated from the others, and they take
    in well-defined inputs and yield well-defined outputs. Multiple instances of the
    same service can run across many servers and traffic can be load balanced between
    them. If designed correctly, it is possible for an individual instance to fail
    without bringing down the whole system and for new instances to be spun up during
    runtime to help handle load spikes.'
  prefs: []
  type: TYPE_NORMAL
- en: Go kit (refer to [https://gokit.io](https://gokit.io)) is a distributed programming
    toolkit for the building of applications with a micro-service architecture founded
    by Peter Bourgon (`@peterbourgon` on Twitter) and now maintained by a slice of
    Gophers in the open. It aims to solve many of the foundational (and sometimes
    boring) aspects of building such systems as well as encouraging good design patterns,
    allowing you to focus on the business logic that makes up your product or service.
  prefs: []
  type: TYPE_NORMAL
- en: Go kit doesn't try to solve every problem from scratch; rather, it integrates
    with many popular related services to solve **SOA** (**service-oriented architecture**)
    problems, such as service discovery, metrics, monitoring, logging, load balancing,
    circuit breaking, and many other important aspects of correctly running micro-services
    at scale. As we build our service by hand using Go kit, you will notice that we
    will write a lot of boilerplate or scaffold code in order to get things working.
  prefs: []
  type: TYPE_NORMAL
- en: For smaller products and services with a small team of developers, you may well
    decide it is easier to just expose a simple JSON endpoint, but Go kit really shines
    for larger teams, building substantial systems with many different services, each
    being run tens or hundreds of times within the architecture. Having consistent
    logging, instrumentation, distributed tracing, and each item being similar to
    the next means running and maintaining such a system becomes significantly easier.
  prefs: []
  type: TYPE_NORMAL
- en: '*"Go kit is ultimately about encouraging good design practice within a service:
    SOLID design, or domain-driven-design, or the hexagonal architecture, etc. It''s
    not dogmatically any of those, but tries to make good design/software engineering
    tractable.” —Peter Bourgon*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this chapter, we are going to build some micro-services that address various
    security challenges (in a project called `vault`) –upon which we would be able
    to build further functionality. The business logic will be kept very simple, allowing
    us to focus on learning the principles around building micro-service systems.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are some alternatives to Go kit as a technology choice; most of them have
    a similar approach but with different priorities, syntax, and patterns. Ensure
    that you look around at other options before embarking on a project, but the principles
    you learn in this chapter will apply across the board.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, in this chapter, you will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: How to hand code a micro-service using Go kit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What gRPC is and how to use it to build servers and clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use Google's protocol buffers and associated tools to describe services
    and communicate in a highly efficient binary format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How endpoints in Go kit allow us to write a single service implementation and
    have it exposed via multiple transport protocols
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How Go kits-included subpackages help us solve lots of common problems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How Middleware lets us wrap endpoints to adapt their behavior without touching
    the implementation itself
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to describe method calls as requests and response messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to rate limit our services to protect from surges in traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A few other idiomatic Go tips and tricks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some lines of code in this chapter stretch over many lines; they are written
    with the overflowing content right-aligned on the next line, as shown in this
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The first three lines in the preceding snippet should be written as one line.
    Don't worry; the Go compiler will be kind enough to point out if you get this
    wrong.
  prefs: []
  type: TYPE_NORMAL
