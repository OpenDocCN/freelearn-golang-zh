- en: Introducing gRPC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many options when it comes to how our services will communicate with
    each other and how clients will communicate with the services, and Go kit doesn't
    care (rather, it doesn't mindâ€“it cares enough to provide implementations of many
    popular mechanisms). In fact, we are able to add multiple options for our users
    and let them decide which one they want to use. We will add support the familiar
    JSON over HTTP, but we are also going to introduce a new technology choice for
    APIs.
  prefs: []
  type: TYPE_NORMAL
- en: gRPC, short for Google's **Remote Procedure Call**, is an open source mechanism
    used to call code that is running remotely over a network. It uses HTTP/2 for
    transport and protocol buffers to represent the data that makes up services and
    messages.
  prefs: []
  type: TYPE_NORMAL
- en: An RPC service differs from RESTful web services because rather than making
    changes to data using well-defined HTTP standards, as you do with REST (`POST`
    to create something, `PUT` to update something, `DELETE` to delete something,
    and so on), you are triggering a remote function or method instead, passing in
    expected arguments and getting back one or more pieces of data in response.
  prefs: []
  type: TYPE_NORMAL
- en: 'To highlight the difference, imagine that we are creating a new user. In a
    RESTful world, we could make a request like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And we might get a response like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: RESTful calls represent queries or changes to the state of resources. In an
    RPC world, we would use generated code instead in order to make binary serialized
    procedure calls that feel much more like normal methods or functions in Go.
  prefs: []
  type: TYPE_NORMAL
- en: The only other key difference between a RESTful service and a gPRC service is
    that rather than JSON or XML, gPRC speaks a special format called **protocol buffers**.
  prefs: []
  type: TYPE_NORMAL
