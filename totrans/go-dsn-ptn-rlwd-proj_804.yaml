- en: Protocol buffers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Protocol buffers (called `protobuf` in code) are a binary serialization format
    that is very small and extremely quick to encode and decode. You describe data
    structures in an abstract way using a declarative mini language, and generate
    source code (in a variety of languages) to make reading and writing the data easy
    for users.
  prefs: []
  type: TYPE_NORMAL
- en: You can think of protocol buffers as a modern alternative to XML, except that
    the definition of the data structure is separated from the content, and the content
    is in a binary format rather than text.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s clear to see the benefits when you look at a real example. If we wanted
    to represent a person with a name in XML, we could write this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This takes up about 30 bytes (discounting whitespace). Let''s see how it would
    look in JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now we're down to 14 bytes, but the structure is still embedded in the content
    (the name field is spelled out along with the value).
  prefs: []
  type: TYPE_NORMAL
- en: 'The equivalent content in protocol buffers would only take five bytes. The
    following table shows each byte, along with the first five bytes of the XML and
    JSON representations for comparison. The **Description** row explains the meaning
    of the bytes in the **Content** row, which shows the protocol buffer bytes:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Byte** | **1** | **2** | **3** | **4** | **5** |'
  prefs: []
  type: TYPE_TB
- en: '| **Content** | 0a | 03 | 4d | 61 | 72 |'
  prefs: []
  type: TYPE_TB
- en: '| **Description** | Type (string) | Length (3) | M | A | T |'
  prefs: []
  type: TYPE_TB
- en: '| **XML** | < | p | e | r | s |'
  prefs: []
  type: TYPE_TB
- en: '| **JSON** | { | " | n | a | m |'
  prefs: []
  type: TYPE_TB
- en: The structure definition lives in a special `.proto` file, separate from the
    data.
  prefs: []
  type: TYPE_NORMAL
- en: There are still plenty of cases where XML or JSON would be a better choice than
    protocol buffers, and file size isn't the only measure when deciding a data format
    to use, but for fixed schema structures and remote procedure calls or for applications
    running at a truly massive scale, it's a popular choice for good reasons.
  prefs: []
  type: TYPE_NORMAL
