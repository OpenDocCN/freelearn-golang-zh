- en: Protocol buffers language
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To define our data structure, we are going to use the third version of the protocol
    buffers language, known as `proto3`.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder in your `$GOPATH` called `vault`, and a subfolder called
    `pb` inside that. The `pb` package is where our protocol buffer definition and
    the generated source code will live.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to define a service called `Vault`, which has two methods,Â `Hash`
    and `Validate`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `Hash` | Generate a secure hash for a given password. The hash can be stored
    instead of storing the password in plain text. |'
  prefs: []
  type: TYPE_TB
- en: '| `Validate` | Given a password and a previously generated hash, the Validate
    method will check to ensure that the password is correct. |'
  prefs: []
  type: TYPE_TB
- en: 'Each service call has a request and response pair, which we will define as
    well. Inside `pb`, insert the following code into a new file called `vault.proto`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Vertical whitespace has been removed to save paper, but you are free to add
    spaces between each block if you think it improves readability.
  prefs: []
  type: TYPE_NORMAL
- en: The first things we specify in our file are that we are using the `proto3` syntax
    and the name of the package for the generated source code is `pb`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `service` block defines `Vault` and the two methods-with `HashRequest`,
    `HashResponse`, `ValidateRequest`, and `ValidateResponse` messages defined underneath.
    The lines beginning with `rpc` inside the service block indicate that our service
    consists of two remote procedure calls: `Hash` and `Validate`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The fields inside a message take the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `type` is a string that describes the scalar value type, such as `string`,
    `bool`, `double`, `float`, `int32`, `int64`, and so on. The `name` is a human-readable
    string that describes the field, such as `hash` and `password`. The position is
    an integer that indicates where in the data stream that field appears. This is
    important because the content is a stream of bytes, and lining up the content
    to the definition is vital to being able to use the format. Additionally, if we
    were to add (or even rename) fields later (one of the key design features of protocol
    buffers), we could do so without breaking components that expect certain fields
    in a specific order; they would continue to work untouched, ignoring new data
    and just transparently passing it along.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a complete list of the supported types as well as a deep dive into the entire
    language, check out the documentation at [https://developers.google.com/protocol-buffers/docs/proto3](https://developers.google.com/protocol-buffers/docs/proto3).
  prefs: []
  type: TYPE_NORMAL
- en: Note that each method call has an associated request and response pair. These
    are the messages that will be sent over the network when the remote method is
    called.
  prefs: []
  type: TYPE_NORMAL
- en: Since the Hash method takes a single password string argument, the `HashRequest`
    object contains a single password string field. Like normal Go functions, the
    responses may contain an error, which is why both `HashResponse` and `ValidateResponse`
    have two fields. There is no dedicated `error` interface in proto3 like there
    is in Go, so we are going to turn the error into a string instead.
  prefs: []
  type: TYPE_NORMAL
