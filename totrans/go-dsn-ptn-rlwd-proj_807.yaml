- en: Generating Go code
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成 Go 代码
- en: 'Go doesn''t understand proto3 code, but luckily the protocol buffer compiler
    and Go plugin we installed earlier can translate it into something Go does understand:
    Go code.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Go 语言无法理解 proto3 代码，但幸运的是，我们之前安装的协议缓冲编译器和 Go 插件可以将它转换成 Go 语言可以理解的内容：Go 代码。
- en: 'In a terminal, navigate to the `pb` folder and run the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中，导航到 `pb` 文件夹并运行以下命令：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will generate a new file called `vault.pb.go`. Open the file and inspect
    its contents. It has done a lot of work for us, including defining the messages
    and even creating `VaultClient` and `VaultServer` types for us to use, which will
    allow us to consume and expose the service, respectively.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个名为 `vault.pb.go` 的新文件。打开该文件并检查其内容。它为我们做了很多工作，包括定义消息，甚至为我们创建了 `VaultClient`
    和 `VaultServer` 类型，以便我们使用，这将允许我们分别消费和暴露服务。
- en: Tip
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You are free to decode the rest of the generated code (the file descriptor looks
    especially interesting) if you are interested in the details. For now, we're going
    to trust that it works and use the `pb` package to build our service implementation.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对生成的代码的细节感兴趣，你可以自由地解码其余部分（文件描述符特别有趣）。现在，我们将相信它能够正常工作，并使用 `pb` 包来构建我们的服务实现。
