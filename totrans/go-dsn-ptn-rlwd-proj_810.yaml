- en: Constructors in Go
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Go 中的构造函数
- en: A **constructor** in other object-oriented languages is a special kind of function
    that creates instances of classes. It performs any initialization and takes in
    required arguments such as dependencies, among others. It is usually the only
    way to create an object in these languages, but it often has weird syntax or relies
    on naming conventions (such as the function name being the same as the class,
    for example).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他面向对象的语言中，**构造函数**是一种特殊的函数，用于创建类的实例。它执行任何初始化，并接受所需的参数，如依赖项等。通常，在这些语言中创建对象只有一种方式，但它往往具有奇怪的语法或依赖于命名约定（例如，函数名与类名相同）。
- en: Go doesn't have constructors; it's much simpler and just has functions, and
    since functions can return arguments, a constructor would just be a global function
    that returns a usable instance of a struct. The Go philosophy of simplicity drives
    these kinds of decisions for the language designers; rather than forcing people
    to have to learn about a new concept of constructing objects, developers only
    have to learn how functions work and they can build constructors with them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Go 没有构造函数；它更简单，只有函数，而且由于函数可以返回参数，构造函数就只是一个返回结构体可用实例的全局函数。Go 的简洁哲学驱使语言设计者做出这些决定；而不是强迫人们学习构建对象的新概念，开发者只需要学习函数的工作方式，就可以用它们构建构造函数。
- en: Even if we aren't doing any special work in the construction of an object (such
    as initializing fields, validating dependencies, and so on), it is sometimes worth
    adding a construction function anyway. In our case, we do not want to bloat the
    API by exposing the `vaultService` type since we already have our `Service` interface
    type exposed and are hiding it inside a constructor is a nice way to achieve this.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们在对象的构建过程中不做任何特殊的工作（例如初始化字段、验证依赖关系等），有时添加一个构建函数也是值得的。在我们的情况下，我们不希望通过暴露 `vaultService`
    类型来膨胀 API，因为我们已经公开了我们的 `Service` 接口类型，并且将它们隐藏在构造函数中是一种很好的实现方式。
- en: 'Underneath the `vaultService` struct definition, add the `NewService` function:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `vaultService` 结构定义下方添加 `NewService` 函数：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Not only does this prevent us from needing to expose our internals, but if in
    the future we do need to do more work to prepare the `vaultService` for use, we
    can also do it without changing the API and, therefore, without requiring the
    users of our package to change anything on their end, which is a big win for API
    design.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅这可以防止我们暴露内部实现，而且如果将来我们需要做更多的工作来准备 `vaultService` 以便使用，我们也可以在不更改 API 的情况下完成，因此不需要要求我们的包用户在他们的端进行任何更改，这对
    API 设计来说是一个很大的胜利。
