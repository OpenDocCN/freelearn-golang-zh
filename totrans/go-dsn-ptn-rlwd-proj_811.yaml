- en: Hashing and validating passwords with bcrypt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first method we will implement in our service is `Hash`. It will take a
    password and generate a hash. The resulting hash can then be passed (along with
    a password) to the `Validate` method later, which will either confirm or deny
    that the password is correct.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To learn more about the correct way to store passwords in applications, check
    out the Coda Hale blog post on the subject at [https://codahale.com/how-to-safely-store-a-password/](https://codahale.com/how-to-safely-store-a-password/).
  prefs: []
  type: TYPE_NORMAL
- en: The point of our service is to ensure that passwords never need to be stored
    in a database, since that's a security risk if anyone is ever able to get unauthorized
    access to the database. Instead, you can generate a one-way hash (it cannot be
    decoded) that can safely be stored, and when users attempt to authenticate, you
    can perform a check to see whether the password generates the same hash or not.
    If the hashes match, the passwords are the same; otherwise, they are not.
  prefs: []
  type: TYPE_NORMAL
- en: The `bcrypt` package provides methods that do this work for us in a secure and
    trustworthy way.
  prefs: []
  type: TYPE_NORMAL
- en: 'To `service.go`, add the `Hash` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Ensure that you import the appropriate `bcrypt` package (try `golang.org/x/crypto/bcrypt`).
    We are essentially wrapping the `GenerateFromPassword` function to generate the
    hash, which we then return provided no errors occurred.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the receiver in the `Hash` method is just `(vaultService)`; we don't
    capture the variable because there is no way we can store state on an empty `struct`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next up, let''s add the `Validate` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Similar to `Hash`, we are calling `bcrypt.CompareHashAndPassword` to determine
    (in a secure way) whether the password is correct or not. If an error is returned,
    it means that something is amiss and we return `false` indicating that. Otherwise,
    we return `true` when the password is valid.
  prefs: []
  type: TYPE_NORMAL
