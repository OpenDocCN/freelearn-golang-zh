- en: Hashing and validating passwords with bcrypt
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用bcrypt进行密码哈希和验证
- en: The first method we will implement in our service is `Hash`. It will take a
    password and generate a hash. The resulting hash can then be passed (along with
    a password) to the `Validate` method later, which will either confirm or deny
    that the password is correct.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的服务中实现的第一种方法是`Hash`。它将接受一个密码并生成一个哈希。生成的哈希可以随后（连同密码一起）传递给后续的`Validate`方法，该方法将确认或否认密码是否正确。
- en: Tip
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: To learn more about the correct way to store passwords in applications, check
    out the Coda Hale blog post on the subject at [https://codahale.com/how-to-safely-store-a-password/](https://codahale.com/how-to-safely-store-a-password/).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于在应用程序中正确存储密码的方法，请查看Coda Hale关于此主题的博客文章，链接为[https://codahale.com/how-to-safely-store-a-password/](https://codahale.com/how-to-safely-store-a-password/).
- en: The point of our service is to ensure that passwords never need to be stored
    in a database, since that's a security risk if anyone is ever able to get unauthorized
    access to the database. Instead, you can generate a one-way hash (it cannot be
    decoded) that can safely be stored, and when users attempt to authenticate, you
    can perform a check to see whether the password generates the same hash or not.
    If the hashes match, the passwords are the same; otherwise, they are not.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们服务的目的是确保密码永远不会需要存储在数据库中，因为如果有人能够未经授权访问数据库，那将是一个安全风险。相反，你可以生成一个单向哈希（无法解码），它可以安全地存储，当用户尝试进行身份验证时，你可以执行检查以查看密码是否生成相同的哈希。如果哈希匹配，则密码相同；否则，它们不同。
- en: The `bcrypt` package provides methods that do this work for us in a secure and
    trustworthy way.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`bcrypt`包提供了以安全和可信的方式为我们完成这项工作的方法。'
- en: 'To `service.go`, add the `Hash` method:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 将`Hash`方法添加到`service.go`中：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Ensure that you import the appropriate `bcrypt` package (try `golang.org/x/crypto/bcrypt`).
    We are essentially wrapping the `GenerateFromPassword` function to generate the
    hash, which we then return provided no errors occurred.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 确保导入适当的`bcrypt`包（尝试`golang.org/x/crypto/bcrypt`）。我们本质上是在包装`GenerateFromPassword`函数以生成哈希，然后在没有错误发生的情况下返回它。
- en: Note that the receiver in the `Hash` method is just `(vaultService)`; we don't
    capture the variable because there is no way we can store state on an empty `struct`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`Hash`方法中的接收者只是`(vaultService)`；我们没有捕获变量，因为没有方法可以在空的`struct`上存储状态。
- en: 'Next up, let''s add the `Validate` method:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们添加`Validate`方法：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Similar to `Hash`, we are calling `bcrypt.CompareHashAndPassword` to determine
    (in a secure way) whether the password is correct or not. If an error is returned,
    it means that something is amiss and we return `false` indicating that. Otherwise,
    we return `true` when the password is valid.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 与`Hash`类似，我们调用`bcrypt.CompareHashAndPassword`来确定（以安全的方式）密码是否正确。如果返回错误，则表示有问题，我们返回`false`表示。否则，当密码有效时，我们返回`true`。
