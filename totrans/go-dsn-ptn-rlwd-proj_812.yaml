- en: Modeling method calls with requests and responses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since our service will be exposed through various transport protocols, we will
    need a way to model the requests and responses in and out of our service. We will
    do this by adding a `struct` for each type of message our service will accept
    or return.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order for somebody to call the `Hash` method and then receive the hashed
    password as a response, we''ll need to add the following two structures to `service.go`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `hashRequest` type contains a single field, the password, and the `hashResponse`
    has the resulting hash and an `Err` string field in case something goes wrong.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To model remote method calls, you essentially create a `struct` for the incoming
    arguments and a `struct` for the return arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Before continuing, see whether you can model the same request/response pair
    for the `Validate` method. Look at the signature in the `Service` interface, examine
    the arguments it accepts, and think about what kind of responses it will need
    to make.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to add a helper method (of type `http.DecodeRequestFunc` from
    Go kit) that will be able to decode the JSON body of `http.Request` to `service.go`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The signature for `decodeHashRequest` is dictated by Go kit because it will
    later use it to decode HTTP requests on our behalf. In this function, we just
    use `json.Decoder` to unmarshal the JSON into our `hashRequest` type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will add the request and response structures as well as a decode helper
    function for the `Validate` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `validateRequest` struct takes both `Password` and `Hash` strings,
    since the signature has two input arguments and returns a response containing
    a `bool` datatype called `Valid` or `Err`.
  prefs: []
  type: TYPE_NORMAL
- en: The final thing we need to do is encode the response. In this case, we can write
    a single method to encode both theÂ `hashResponse` and `validateResponse` objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to `service.go`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Our `encodeResponse` method just asks `json.Encoder` to do the work for us.
    Note again that the signature is general since the `response` type is `interface{}`;
    this is because it's a Go kit mechanism for decoding to `http.ResponseWriter`.
  prefs: []
  type: TYPE_NORMAL
