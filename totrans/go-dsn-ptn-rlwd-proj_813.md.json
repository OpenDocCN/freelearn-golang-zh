["```go\ntype Endpoint func(ctx context.Context, request\n  interface{})  \n(response interface{}, err error) \n\n```", "```go\nfunc MakeHashEndpoint(srv Service) endpoint.Endpoint { \n  return func(ctx context.Context, request interface{})\n  (interface{}, error) { \n    req := request.(hashRequest) \n    v, err := srv.Hash(ctx, req.Password) \n    if err != nil { \n      return hashResponse{v, err.Error()}, nil \n    } \n    return hashResponse{v, \"\"}, nil \n  } \n} \n\n```", "```go\nfunc MakeValidateEndpoint(srv Service) endpoint.Endpoint { \n  return func(ctx context.Context, request interface{})\n  (interface{}, error) { \n    req := request.(validateRequest) \n    v, err := srv.Validate(ctx, req.Password, req.Hash) \n    if err != nil { \n      return validateResponse{false, err.Error()}, nil \n    } \n    return validateResponse{v, \"\"}, nil \n  } \n} \n\n```", "```go\ntype Endpoints struct { \n  HashEndpoint     endpoint.Endpoint \n  ValidateEndpoint endpoint.Endpoint \n} \n\n```", "```go\nfunc (e Endpoints) Hash(ctx context.Context, password\n  string) (string, error) { \n  req := hashRequest{Password: password} \n  resp, err := e.HashEndpoint(ctx, req) \n  if err != nil { \n    return \"\", err \n  } \n  hashResp := resp.(hashResponse) \n  if hashResp.Err != \"\" { \n    return \"\", errors.New(hashResp.Err) \n  } \n  return hashResp.Hash, nil \n} \n\n```", "```go\nfunc (e Endpoints) Validate(ctx context.Context, password,\n hash string) (bool, error) { \n  req := validateRequest{Password: password, Hash: hash} \n  resp, err := e.ValidateEndpoint(ctx, req) \n  if err != nil { \n    return false, err \n  } \n  validateResp := resp.(validateResponse) \n  if validateResp.Err != \"\" { \n    return false, errors.New(validateResp.Err) \n  } \n  return validateResp.Valid, nil \n} \n\n```"]