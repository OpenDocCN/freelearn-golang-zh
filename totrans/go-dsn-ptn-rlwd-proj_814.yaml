- en: An HTTP server in Go kit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The true value of Go kit becomes apparent when we create an HTTP server for
    our endpoints to hash and validate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file called `server_http.go` and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We are importing the `github.com/go-kit/kit/transport/http` package and (since
    we're also importing the `net/http` package) telling Go that we're going to explicitly
    refer to this package as `httptransport`.
  prefs: []
  type: TYPE_NORMAL
- en: We are using the `NewServeMux` function from the standard library to build `http.Handler`Â 
    interface with simple routing and mapping the `/hash` and `/validate` paths. We
    take the `Endpoints` object since we want our HTTP server to serve these endpoints,
    including any middleware that we will add later. Calling `httptransport.NewServer`
    is how we get Go kit to give us an HTTP handler for each endpoint. Like most functions,
    we pass in `context.Context` as the first argument, which will form the base context
    for each request. We also pass in the endpoint as well as the decoding and encoding
    functions that we wrote earlier so that the server knows how to unmarshal and
    marshal the JSON messages.
  prefs: []
  type: TYPE_NORMAL
