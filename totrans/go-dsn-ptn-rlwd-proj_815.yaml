- en: A gRPC server in Go kit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Adding a gPRC server using Go kit is almost as easy as adding a JSON/HTTP server,
    like we did in the last section. In our generated code (in the `pb` folder), we
    were given the following `pb.VaultServer` type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This type is very similar to our own `Service` interface, except that it takes
    in generated request and response classes rather than raw arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start by defining a type that will implement the preceding interface.
    Add the following code to a new file called `server_grpc.go`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note that you'll need to import `github.com/go-kit/kit/transport/grpc` as `grpctransport`,
    along with the generated `pb` package.
  prefs: []
  type: TYPE_NORMAL
- en: The `grpcServer` struct contains a field for each of the service endpoints,
    this time of type `grpctransport.Handler`. Then, we implement the methods of the
    interface, calling the `ServeGRPC` method on the appropriate handler. This method
    will actually serve requests by first decoding them, calling the appropriate endpoint
    function, getting the response, and encoding it and sending it back to the client
    who made the request.
  prefs: []
  type: TYPE_NORMAL
