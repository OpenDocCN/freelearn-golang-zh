["```go\nfunc EncodeGRPCHashRequest(ctx context.Context,\n  r interface{}) (interface{}, error) { \n  req := r.(hashRequest) \n  return &pb.HashRequest{Password: req.Password}, nil \n} \n\n```", "```go\nfunc DecodeGRPCHashRequest(ctx context.Context,\n r interface{}) (interface{}, error) { \n  req := r.(*pb.HashRequest) \n  return hashRequest{Password: req.Password}, nil \n} \nfunc EncodeGRPCHashResponse(ctx context.Context,\n r interface{}) (interface{}, error) { \n  res := r.(hashResponse) \n  return &pb.HashResponse{Hash: res.Hash, Err: res.Err},\n    nil \n} \nfunc DecodeGRPCHashResponse(ctx context.Context,\n r interface{}) (interface{}, error) { \n  res := r.(*pb.HashResponse) \n  return hashResponse{Hash: res.Hash, Err: res.Err}, nil \n} \nfunc EncodeGRPCValidateRequest(ctx context.Context,\n r interface{}) (interface{}, error) { \n  req := r.(validateRequest) \n  return &pb.ValidateRequest{Password: req.Password,\n    Hash: req.Hash}, nil \n} \nfunc DecodeGRPCValidateRequest(ctx context.Context,\n r interface{}) (interface{}, error) { \n  req := r.(*pb.ValidateRequest) \n  return validateRequest{Password: req.Password,\n    Hash: req.Hash}, nil \n} \nfunc EncodeGRPCValidateResponse(ctx context.Context,\n r interface{}) (interface{}, error) { \n  res := r.(validateResponse) \n  return &pb.ValidateResponse{Valid: res.Valid}, nil \n} \nfunc DecodeGRPCValidateResponse(ctx context.Context,\n r interface{}) (interface{}, error) { \n  res := r.(*pb.ValidateResponse) \n  return validateResponse{Valid: res.Valid}, nil \n} \n\n```", "```go\nfunc NewGRPCServer(ctx context.Context, endpoints\n Endpoints) pb.VaultServer { \n  return &grpcServer{ \n    hash: grpctransport.NewServer( \n      ctx, \n      endpoints.HashEndpoint, \n      DecodeGRPCHashRequest, \n      EncodeGRPCHashResponse, \n    ), \n    validate: grpctransport.NewServer( \n      ctx, \n      endpoints.ValidateEndpoint, \n      DecodeGRPCValidateRequest, \n      EncodeGRPCValidateResponse, \n    ), \n  } \n} \n\n```"]