- en: Translating from protocol buffer types to our types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You'll notice that we're using the request and response objects from the `pb`
    package, but remember that our own endpoints use the structures we added to `service.go`
    earlier. We are going to need a method for each type in order to translate to
    and from our own types.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There's a lot of repetitive typing coming up; feel free to copy and paste this
    from the GitHub repository at [https://github.com/matryer/goblueprints](https://github.com/matryer/goblueprints)
    to save your fingers. We're hand coding this manually because it's important to
    understand all the pieces that make up the service.
  prefs: []
  type: TYPE_NORMAL
- en: 'To `server_grpc.go`, add the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This function is an `EncodeRequestFunc` function defined by Go kit, and it is
    used to translate our own `hashRequest` type into a protocol buffer type that
    can be used to communicate with the client. It uses `interface{}` types because
    it's general, but in our case, we can be sure about the types so we cast the incoming
    request to `hashRequest` (our own type) and then build a new `pb.HashRequest`
    object using the appropriate fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to do this for both encoding and decoding requests and responses
    for both hash and validate endpoints. Add the following code to `server_grpc.go`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, there is a lot of boilerplate coding to do in order to get things
    working.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Code generation (not covered here) would have great application here, since
    the code is very predictable and self-similar.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final thing to do in order to get our gRPC server working is to provide
    a helper function to create an instance of our `grpcServer` structure. Underneath
    the `grpcServer` struct, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Like our HTTP server, we take in a base context and the actual `Endpoints` implementation
    that we are exposing via the gRPC server. We create and return a new instance
    of our `grpcServer` type, setting the handlers for both `hash` and `validate`
    by calling `grpctransport.NewServer`. We use our `endpoint.Endpoint` functions
    for our service and tell the service which of our encoding/decoding functions
    to use for each case.
  prefs: []
  type: TYPE_NORMAL
