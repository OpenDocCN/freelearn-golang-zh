- en: Running the gRPC server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is a little more work to do in order to run the gRPC server, but it is
    still pretty simple. We must create a low-level TCP network listener and serve
    the gRPC server over that. Add the following code to the main function body:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We make the TCP listener on the `gRPCAddr` endpoint specified, sending any errors
    down the `errChan` error channel. We use `vault.NewGRPCServer` to create the handler,
    again passing in the background context and the instance of `Endpoints` we are
    exposing.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note how both the JSON/HTTP server and the gRPC server are actually exposing
    the same serviceâ€“literally the same instance.
  prefs: []
  type: TYPE_NORMAL
- en: We then create a new gRPC server from Google's `grpc` package and register it
    using our own generated `pb` package via the `RegisterVaultServer` function.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `RegisterVaultService` function just calls `RegisterService` on our `grpcServer`
    but hides the internals of the service description that was automatically generated.
    If you look in `vault.pb.go` and search for the `RegisterVaultServer` function,
    you will see that it makes a reference to something like `&_Vault_serviceDesc`,
    which is the description of the service. Feel free to dig around the generated
    code; the metadata is especially interesting, but out of scope for this book.
  prefs: []
  type: TYPE_NORMAL
- en: We then ask the server to `Serve` itself, throwing any errors down the same
    error channel if they occur.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's out of scope for this chapter, but it is recommended that every service
    be delivered with **Transport Layer Security** (**TLS**), especially the ones
    dealing with passwords.
  prefs: []
  type: TYPE_NORMAL
