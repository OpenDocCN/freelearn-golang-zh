- en: Running the gRPC server
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行 gRPC 服务器
- en: 'There is a little more work to do in order to run the gRPC server, but it is
    still pretty simple. We must create a low-level TCP network listener and serve
    the gRPC server over that. Add the following code to the main function body:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 gRPC 服务器需要做一点额外的工作，但过程仍然相当简单。我们必须创建一个低级别的 TCP 网络监听器，并通过它来提供 gRPC 服务器。将以下代码添加到主函数体中：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We make the TCP listener on the `gRPCAddr` endpoint specified, sending any errors
    down the `errChan` error channel. We use `vault.NewGRPCServer` to create the handler,
    again passing in the background context and the instance of `Endpoints` we are
    exposing.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在指定的 `gRPCAddr` 端点创建 TCP 监听器，将任何错误发送到 `errChan` 错误通道。我们使用 `vault.NewGRPCServer`
    来创建处理器，再次传入后台上下文和我们公开的 `Endpoints` 实例。
- en: Tip
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note how both the JSON/HTTP server and the gRPC server are actually exposing
    the same service–literally the same instance.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到 JSON/HTTP 服务器和 gRPC 服务器实际上是在公开相同的服务——字面上是相同的实例。
- en: We then create a new gRPC server from Google's `grpc` package and register it
    using our own generated `pb` package via the `RegisterVaultServer` function.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用 Google 的 `grpc` 包创建一个新的 gRPC 服务器，并通过我们的自定义生成的 `pb` 包使用 `RegisterVaultServer`
    函数进行注册。
- en: Note
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `RegisterVaultService` function just calls `RegisterService` on our `grpcServer`
    but hides the internals of the service description that was automatically generated.
    If you look in `vault.pb.go` and search for the `RegisterVaultServer` function,
    you will see that it makes a reference to something like `&_Vault_serviceDesc`,
    which is the description of the service. Feel free to dig around the generated
    code; the metadata is especially interesting, but out of scope for this book.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`RegisterVaultService` 函数只是在我们的 `grpcServer` 上调用 `RegisterService`，但隐藏了自动生成的服务描述的内部细节。如果你在
    `vault.pb.go` 中搜索 `RegisterVaultServer` 函数，你会看到它引用了类似 `&_Vault_serviceDesc` 的内容，这是服务的描述。你可以自由地探索生成的代码；元数据特别有趣，但本书的范围不包括。'
- en: We then ask the server to `Serve` itself, throwing any errors down the same
    error channel if they occur.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们要求服务器自己 `Serve`，如果发生错误，将错误发送到相同的错误通道。
- en: Tip
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It's out of scope for this chapter, but it is recommended that every service
    be delivered with **Transport Layer Security** (**TLS**), especially the ones
    dealing with passwords.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这章的内容不包括，但建议每个服务都使用传输层安全性（**TLS**）进行交付，尤其是那些处理密码的服务。
