- en: Preventing a main function from terminating immediately
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we closed our main function here, it would immediately exit and terminate
    all of our servers. This is because everything we're doing that would prevent
    this is inside its own goroutine. To prevent this, we need a way to block the
    function at the end to wait until something tells the program to terminate.
  prefs: []
  type: TYPE_NORMAL
- en: Since we are using the `errChan` error channel for errors, this is a perfect
    candidate. We can just listen on this channel, which (while nothing has been sent
    down it) will block and allow the other goroutines to do their work. If something
    goes wrong (or if a termination signal is received), the `<-errChan` call will
    unblock and exit and all goroutines will be stopped.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom of the main function, add the final statement and closing block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When an error occurs, we'll just log it and exit with a nonzero code.
  prefs: []
  type: TYPE_NORMAL
