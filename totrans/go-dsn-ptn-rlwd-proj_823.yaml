- en: Building a gRPC client
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 gRPC 客户端
- en: Unlike JSON/HTTP services, gRPC services aren't easy for humans to interact
    with. They're really intended as machine-to-machine protocols, and so we must
    write a program if we wish to use them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 与 JSON/HTTP 服务不同，gRPC 服务并不容易让人与之交互。它们实际上是作为机器到机器的协议而设计的，因此如果我们想使用它们，就必须编写一个程序。
- en: To help us do this, we are first going to add a new package inside our vault
    service called `vault/client/grpc`. It will, given a gRPC client connection object
    that we get from Google's `grpc` package, provide an object that performs the
    appropriate calls, encoding and decoding, for us, all hidden behind our own `vault.Service`
    interface. So, we will be able to use the object as though it is just another
    implementation of our interface.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助我们完成这项任务，我们首先将在我们的保险库服务中添加一个新的包，名为 `vault/client/grpc`。它将提供一个对象，该对象在从谷歌的
    `grpc` 包获取的 gRPC 客户端连接对象的基础上执行适当的调用、编码和解码，所有这些操作都隐藏在我们的 `vault.Service` 接口之后。因此，我们将能够将这个对象当作我们接口的另一个实现来使用。
- en: Create new folders inside vault so that you have the path of `vault/client/grpc`.
    You can imagine adding other clients if you so wish, so this seems a good pattern
    to establish.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在保险库内部创建新的文件夹，以便你有 `vault/client/grpc` 的路径。如果你愿意，你可以想象添加其他客户端，因此这似乎是一个很好的模式来建立。
- en: 'Add the following code to a new `client.go` file:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到一个新的 `client.go` 文件中：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `grpctransport` package is referring to `github.com/go-kit/kit/transport/grpc`.
    This might feel familiar by now; we are making two new endpoints based on the
    specified connection, this time being explicit about the `Vault` service name
    and the endpoint names `Hash` and `Validate`. We pass in appropriate encoders
    and decoders from our vault package and empty response objects before wrapping
    them both in our `vault.Endpoints` structure that we added-the one that implements
    the `vault.Service` interface that just triggers the specified endpoints for us.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`grpctransport` 包引用的是 `github.com/go-kit/kit/transport/grpc`。现在这可能会让你感到熟悉；我们正在根据指定的连接创建两个新的端点，这次我们明确指定了
    `Vault` 服务名称和端点名称 `Hash` 和 `Validate`。我们从前端的 `vault` 包中传递适当的编码器和解码器以及空响应对象，然后将它们都包装在我们的
    `vault.Endpoints` 结构中，这是我们添加的结构——它实现了 `vault.Service` 接口，该接口为我们触发了指定的端点。'
