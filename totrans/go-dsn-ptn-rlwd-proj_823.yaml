- en: Building a gRPC client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unlike JSON/HTTP services, gRPC services aren't easy for humans to interact
    with. They're really intended as machine-to-machine protocols, and so we must
    write a program if we wish to use them.
  prefs: []
  type: TYPE_NORMAL
- en: To help us do this, we are first going to add a new package inside our vault
    service called `vault/client/grpc`. It will, given a gRPC client connection object
    that we get from Google's `grpc` package, provide an object that performs the
    appropriate calls, encoding and decoding, for us, all hidden behind our own `vault.Service`
    interface. So, we will be able to use the object as though it is just another
    implementation of our interface.
  prefs: []
  type: TYPE_NORMAL
- en: Create new folders inside vault so that you have the path of `vault/client/grpc`.
    You can imagine adding other clients if you so wish, so this seems a good pattern
    to establish.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to a new `client.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `grpctransport` package is referring to `github.com/go-kit/kit/transport/grpc`.
    This might feel familiar by now; we are making two new endpoints based on the
    specified connection, this time being explicit about the `Vault` service name
    and the endpoint names `Hash` and `Validate`. We pass in appropriate encoders
    and decoders from our vault package and empty response objects before wrapping
    them both in our `vault.Endpoints` structure that we added-the one that implements
    the `vault.Service` interface that just triggers the specified endpoints for us.
  prefs: []
  type: TYPE_NORMAL
