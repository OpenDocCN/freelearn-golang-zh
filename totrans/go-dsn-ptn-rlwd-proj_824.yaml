- en: A command-line tool to consume the service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we are going to write a command-line tool (or CLI-command-line
    interface), which will allow us to communicate with our service through the gRPC
    protocol. If we were writing another service in Go, we would use the vault client
    package in the same way as we will when we write our CLI tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our tool will let you access the services in a fluent way on the command line
    by separating commands and arguments with spaces such that we can hash a password
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We will be able to validate a password with a hash like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `cmd` folder, create a new folder called `vaultcli`. Add a main.go file
    and insert the following main function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Ensure that you import the `vault/client/grpc` package as `grpcclient` and `google.golang.org/grpc`
    as `grpc`. You'll also need to import the `vault` package.
  prefs: []
  type: TYPE_NORMAL
- en: We parse the flags and get a background context as usual before dialing the
    gRPC endpoint to establish a connection. If all is well, we defer the closing
    of the connection and create our vault service client using that connection. Remember
    that this object implements our `vault.Service` interface, so we can just call
    the methods as though they were normal Go methods, without worrying about the
    fact that communication is taking place over a network protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we start parsing the command-line arguments in order to decide which execution
    flow to take.
  prefs: []
  type: TYPE_NORMAL
