- en: A command-line tool to consume the service
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个用于消费服务的命令行工具
- en: In this section, we are going to write a command-line tool (or CLI-command-line
    interface), which will allow us to communicate with our service through the gRPC
    protocol. If we were writing another service in Go, we would use the vault client
    package in the same way as we will when we write our CLI tool.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将编写一个命令行工具（或CLI-命令行界面），它将允许我们通过gRPC协议与我们的服务进行通信。如果我们用Go编写另一个服务，我们会像编写CLI工具时那样使用vault客户端包。
- en: 'Our tool will let you access the services in a fluent way on the command line
    by separating commands and arguments with spaces such that we can hash a password
    like this:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的工具将允许您通过命令行以流畅的方式访问服务，通过空格分隔命令和参数，这样我们就可以像这样哈希密码：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We will be able to validate a password with a hash like this:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将能够使用如下哈希值验证密码：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the `cmd` folder, create a new folder called `vaultcli`. Add a main.go file
    and insert the following main function:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在`cmd`文件夹中，创建一个名为`vaultcli`的新文件夹。添加一个main.go文件，并插入以下主函数：
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Ensure that you import the `vault/client/grpc` package as `grpcclient` and `google.golang.org/grpc`
    as `grpc`. You'll also need to import the `vault` package.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您将`vault/client/grpc`包导入为`grpcclient`，将`google.golang.org/grpc`导入为`grpc`。您还需要导入`vault`包。
- en: We parse the flags and get a background context as usual before dialing the
    gRPC endpoint to establish a connection. If all is well, we defer the closing
    of the connection and create our vault service client using that connection. Remember
    that this object implements our `vault.Service` interface, so we can just call
    the methods as though they were normal Go methods, without worrying about the
    fact that communication is taking place over a network protocol.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用gRPC端点以建立连接之前，我们像往常一样解析标志并获取一个后台上下文。如果一切顺利，我们将延迟关闭连接，并使用该连接创建我们的vault服务客户端。记住，这个对象实现了我们的`vault.Service`接口，因此我们可以像调用普通Go方法一样调用这些方法，无需担心通信是在网络协议上进行的。
- en: Then, we start parsing the command-line arguments in order to decide which execution
    flow to take.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们开始解析命令行参数，以便决定采取哪种执行流程。
