- en: Parsing arguments in CLIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parsing arguments in command-line tools is very common, and there is a neat
    idiomatic way to do it in Go. The arguments are all available via the `os.Args`
    slice, or if you're using flags, the `flags.Args()` method (which gets arguments
    with flags stripped). We want to take each argument off the slice (from the beginning)
    and consume them in an order, which will help us decide which execution flow to
    take through the program. We're going to add a helper function called `pop`, which
    will return the first item, and the slice with the first item trimmed.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll write a quick unit test to ensure that our `pop` function is working
    as expected. If you would like to try and write the pop function yourself, then
    you should do that once the test is in place. Remember that you can run tests
    by navigating to the appropriate folder in a terminal and executing this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new file inside `vaultcli` called `main_test.go` and add the following
    test function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We expect each call to pop to yield the next item in the slice and empty arguments
    once the slice is empty.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom of `main.go`, add the `pop` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
