- en: Installing tools from the Go source code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install the tool, we just have to navigate to the `vaultcli` folder in a
    terminal and type this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Provided there are no errors, the package will be built and deployed to the
    `$GOPATH/bin` folder, which should already be listed in your `$PATH` environment
    variable. This means that the tool is ready for use just like a normal command
    in your terminal.
  prefs: []
  type: TYPE_NORMAL
- en: The name of the binary that is deployed will match the folder name, and this
    is why we have an additional folder inside the `cmd` folder even if we are only
    building a single command.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have installed the command, we can use it to test the gRPC server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Head over to `cmd/vaultd` and start the server (if it isn''t already running)
    by typing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In another terminal, let''s hash a password by typing this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the hash is returned. Now let''s validate this hash:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The hash may contain special characters that interfere with your terminal, so
    you should escape the string with quotes if required.
  prefs: []
  type: TYPE_NORMAL
- en: On a Mac, format the argument with `$'PASTE_HASH_HERE'` to properly escape it.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Windows, try surrounding the argument with exclamation points: `!PASTE_HASH_HERE!`.'
  prefs: []
  type: TYPE_NORMAL
- en: If you get the password right, you'll notice that you see the word `valid`;
    otherwise, you'll see `invalid`.
  prefs: []
  type: TYPE_NORMAL
