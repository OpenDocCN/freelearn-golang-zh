- en: Rate limiting with service middleware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have built a complete service, we are going to see how easy it is
    to add middleware to our endpoints in order to extend the service without touching
    the actual implementations themselves.
  prefs: []
  type: TYPE_NORMAL
- en: In real-world services, it is sensible to limit the number of requests it will
    attempt to handle so that the service doesn't get overwhelmed. This can happen
    if the process needs more memory than is available, or we might notice performance
    degradation if it eats up too much of the CPU. In a micro-service architecture,
    the strategy to solving these problems is to add another node and spread the load,
    which means that we want each individual instance to be rate limited.
  prefs: []
  type: TYPE_NORMAL
- en: Since we are providing the client, we should add rate limiting there, which
    would prevent too many requests from getting on the network. But it is also sensible
    to add rate limiting to the server in case many clients are trying to access the
    same services at the same time. Luckily, endpoints in Go kit are used for both
    the client and server, so we can use the same code to add middleware in both places.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to add a **Token Bucket**-based rate limiter, which you can read
    more about at [https://en.wikipedia.org/wiki/Token_bucket](https://en.wikipedia.org/wiki/Token_bucket).
    The guys at Juju have written a Go implementation that we can use by importing
    `github.com/juju/ratelimit`, and Go kit has middleware built for this very implementation,
    which will save us a lot of time and effort.
  prefs: []
  type: TYPE_NORMAL
- en: The general idea is that we have a bucket of tokens, and each request will need
    a token in order to do its work. If there are no tokens in the bucket, we have
    reached our limit and the request cannot be completed. Buckets refill over time
    at a specific interval.
  prefs: []
  type: TYPE_NORMAL
- en: 'Import `github.com/juju/ratelimit` and before we create our `hashEndpoint`,
    insert the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `NewBucket` function creates a new rate limiting bucket that will refill
    at a rate of one token per second, up to a maximum of five tokens. These numbers
    are pretty silly for our case, but we want to be able to reach our limits manually
    during the development.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the Go kit `ratelimit` package has the same name as the Juju one, we
    are going to need to import it with a different name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
