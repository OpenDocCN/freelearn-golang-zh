["```go\ntype Middleware func(Endpoint) Endpoint \n\n```", "```go\ntype Endpoint func(ctx context.Context, request\n  interface{}) (response interface{}, err error) \n\n```", "```go\nfunc NewTokenBucketLimiter(tb *ratelimit.Bucket)\n  endpoint.Middleware { \n  return func(next endpoint.Endpoint) endpoint.Endpoint { \n    return func(ctx context.Context, request interface{})\n    (interface{}, error) { \n      if tb.TakeAvailable(1) == 0 { \n        return nil, ErrLimited \n      } \n      return next(ctx, request) \n    } \n  } \n} \n\n```", "```go\ne := getEndpoint(srv) \n{ \n  e = getSomeMiddleware()(e) \n  e = getLoggingMiddleware(logger)(e) \n  e = getAnotherMiddleware(something)(e) \n} \n\n```", "```go\n  hashEndpoint := vault.MakeHashEndpoint(srv) \n  { \n    hashEndpoint = ratelimitkit.NewTokenBucketLimiter\n     (rlbucket)(hashEndpoint) \n  } \n  validateEndpoint := vault.MakeValidateEndpoint(srv) \n  { \n    validateEndpoint = ratelimitkit.NewTokenBucketLimiter\n     (rlbucket)(validateEndpoint) \n  } \n  endpoints := vault.Endpoints{ \n    HashEndpoint:     hashEndpoint, \n    ValidateEndpoint: validateEndpoint, \n  } \n\n```"]