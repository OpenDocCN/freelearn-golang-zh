- en: Graceful rate limiting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Rather than returning an error (which is a pretty harsh response), perhaps we
    would prefer the server to just hold onto our request and fulfill it when it can-called
    throttling. For this case, Go kit provides the `NewTokenBucketThrottler` middleware.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the middleware code to use this middleware function instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The first argument to `NewTokenBucketThrottler` is the same endpoint as earlier,
    but now we have added a second argument of `time.Sleep`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go kit allows us to customize the behavior by specifying what should happen
    when the delay needs to take place. In our case, we're passing `time.Sleep`, which
    is a function that will ask execution to pause for the specified amount of time.
    You could write your own function here if you wanted to do something different,
    but this works for now.
  prefs: []
  type: TYPE_NORMAL
- en: Now repeat the test from earlier, but this time, note that we never get an error-instead,
    the terminal will hang for a second until the request can be fulfilled.
  prefs: []
  type: TYPE_NORMAL
