- en: Summary
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We covered a lot through this chapter as we put together a real example of a
    micro-service. There is a lot of work involved without code generation, but the
    benefits for large teams and big micro-service architectures pay for the investment
    as you build self-similar, discrete components that make up the system.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过构建一个真实的微服务示例，涵盖了大量的内容。没有代码生成的工作量很大，但对于大型团队和大型微服务架构来说，构建自相似、离散的组件来构成系统的好处是值得投资的。
- en: We learned how gRPC and protocol buffers give us highly efficient transport
    communications between clients and servers. Using the `proto3` language, we defined
    our service, including messages, and used the tools to generate a Go package that
    provided the client and server code for us.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何使用gRPC和协议缓冲区在客户端和服务器之间提供高效的传输通信。使用`proto3`语言，我们定义了我们的服务，包括消息，并使用工具生成了一个Go包，为我们提供了客户端和服务器代码。
- en: We explored the fundamentals of Go kit and how we can use endpoints to describe
    the methods of our services. We let Go kit do the heavy lifting for us when it
    came to building HTTP and gRPC servers by making use of the packages included
    in the project. We saw how middleware functions let us easily adapt our endpoints
    to, among other things, rate limit the amount of traffic the server will have
    to handle.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们探讨了Go kit的基本原理以及我们如何使用端点来描述我们的服务方法。当涉及到构建HTTP和gRPC服务器时，我们让Go kit为我们做繁重的工作，通过利用项目中包含的包。我们看到了中间件函数如何让我们轻松地将端点适应，例如，限制服务器需要处理的数据流量量。
- en: We also learned about constructors in Go, a neat trick to parse incoming command-line
    arguments, and how to hash and validate passwords using the `bcrypt` package,
    which is a sensible approach that helps us avoid storing passwords at all.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了Go中的构造函数，这是一种解析传入命令行参数的巧妙技巧，以及如何使用`bcrypt`包来哈希和验证密码，这是一个明智的方法，帮助我们避免存储密码。
- en: There is a lot more to building micro-services, and it is recommended that you
    head over to the Go kit website at [https://gokit.io](https://gokit.io) or join
    the conversation on the `#go-kit` slack channel at gophers.slack.com to learn
    more.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 构建微服务还有很多内容，建议您访问Go kit网站[https://gokit.io](https://gokit.io)或加入gophers.slack.com上的`#go-kit`频道，了解更多信息。
- en: Now that we have built our Vault service, we need to think about our options
    in order to deploy it into the wild. In the next chapter, we'll package our micro-service
    into a Docker container and deploy it to Digital Ocean's cloud.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经构建了我们的Vault服务，我们需要考虑将其部署到野外的选项。在下一章中，我们将我们的微服务打包到Docker容器中，并部署到Digital
    Ocean的云平台。
