- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We covered a lot through this chapter as we put together a real example of a
    micro-service. There is a lot of work involved without code generation, but the
    benefits for large teams and big micro-service architectures pay for the investment
    as you build self-similar, discrete components that make up the system.
  prefs: []
  type: TYPE_NORMAL
- en: We learned how gRPC and protocol buffers give us highly efficient transport
    communications between clients and servers. Using the `proto3` language, we defined
    our service, including messages, and used the tools to generate a Go package that
    provided the client and server code for us.
  prefs: []
  type: TYPE_NORMAL
- en: We explored the fundamentals of Go kit and how we can use endpoints to describe
    the methods of our services. We let Go kit do the heavy lifting for us when it
    came to building HTTP and gRPC servers by making use of the packages included
    in the project. We saw how middleware functions let us easily adapt our endpoints
    to, among other things, rate limit the amount of traffic the server will have
    to handle.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned about constructors in Go, a neat trick to parse incoming command-line
    arguments, and how to hash and validate passwords using the `bcrypt` package,
    which is a sensible approach that helps us avoid storing passwords at all.
  prefs: []
  type: TYPE_NORMAL
- en: There is a lot more to building micro-services, and it is recommended that you
    head over to the Go kit website at [https://gokit.io](https://gokit.io) or join
    the conversation on the `#go-kit` slack channel at gophers.slack.com to learn
    more.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have built our Vault service, we need to think about our options
    in order to deploy it into the wild. In the next chapter, we'll package our micro-service
    into a Docker container and deploy it to Digital Ocean's cloud.
  prefs: []
  type: TYPE_NORMAL
