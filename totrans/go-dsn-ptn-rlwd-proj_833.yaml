- en: Chapter 11. Deploying Go Applications Using Docker
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章. 使用Docker部署Go应用程序
- en: Docker is an open source ecosystem (technology and range of associated services)
    that allows you to package applications into containers that are simple, lightweight,
    and portable; they will run in the same way regardless of which environment they
    run on. This is useful when you consider that our development environment (perhaps
    a Mac) is different from a production environment (such as a Linux server or even
    a cloud service) and that there is a large number of different places that we
    might want to deploy the same application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是一个开源生态系统（技术和一系列相关服务），它允许您将应用程序打包到简单、轻量级且可移植的容器中；无论它们在哪个环境中运行，它们都会以相同的方式运行。当你考虑到我们的开发环境（可能是一个Mac）与生产环境（如Linux服务器甚至云服务）不同，以及我们可能想要部署相同应用程序的大量不同位置时，这一点很有用。
- en: Most cloud platforms already support Docker, which makes it a great option to
    deploy our apps into the wild.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数云平台已经支持Docker，这使得它成为将我们的应用程序部署到野外的一个很好的选择。
- en: In [Chapter 9](part0201_split_000.html#5VM122-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Chapter 9.  Building a Q&A Application for Google App Engine"), *Building a Q&A
    Application for Google App Engine*, we built an application for Google App Engine.
    We would need to make significant changes to our code if we decided that we wanted
    to run our application on a different platform even if we forget about our use
    of Google Cloud Datastore. Building applications with a mind to deploying them
    within Docker containers gives us an additional level of flexibility.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第9章](part0201_split_000.html#5VM122-9c484ed022e64a0fb0e1aebf8e05d4fd "第9章.
    为Google App Engine构建问答应用程序")中，*为Google App Engine构建问答应用程序*，我们为Google App Engine构建了一个应用程序。如果我们决定想要在不同的平台上运行我们的应用程序，即使我们忘记了使用Google
    Cloud Datastore，我们也需要对我们的代码进行重大修改。以在Docker容器内部署应用程序为目的构建应用程序，给我们提供了一个额外的灵活性级别。
- en: Note
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Did you know that Docker itself was written in Go? See for yourself by browsing
    the source code at [https://github.com/docker/docker](https://github.com/docker/docker).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道Docker本身是用Go编写的吗？通过浏览[https://github.com/docker/docker](https://github.com/docker/docker)的源代码来亲自看看吧。
- en: 'In this chapter, you will learn:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习：
- en: How to write a simple Dockerfile to describe an application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何编写一个简单的Dockerfile来描述一个应用程序
- en: How to use the `docker` command to build the container
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用`docker`命令构建容器
- en: How to run Docker containers locally and terminate them
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在本地运行Docker容器并终止它们
- en: How to deploy Docker containers to Digital Ocean
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将Docker容器部署到Digital Ocean
- en: How to use the features in Digital Ocean to spin up instances that already have
    Docker preconfigured
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Digital Ocean中的功能来启动已经预配置了Docker的实例
- en: We are going to put the Vault service we created in [Chapter 10](part0213_split_000.html#6B47Q1-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Chapter 10.  Micro-services in Go with the Go kit Framework"), *Micro-services
    in Go with the Go kit Framework*, into a Docker image and deploy it to the cloud.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把在[第10章](part0213_split_000.html#6B47Q1-9c484ed022e64a0fb0e1aebf8e05d4fd
    "第10章. 使用Go kit框架的Go微服务")中创建的Vault服务，*使用Go kit框架的Go微服务*，放入Docker镜像并部署到云中。
