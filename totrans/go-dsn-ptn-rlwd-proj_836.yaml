- en: Dockerfile
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Dockerfile
- en: 'A Docker image is like a mini virtual machine. It contains everything that''s
    needed to run an application: the operating system the code will run on, any dependencies
    that our code might have (such as Go kit in the case of our Vault service), and
    the binaries of our application itself.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Docker镜像就像一个迷你虚拟机。它包含运行应用程序所需的一切：代码将运行的操作系统，我们的代码可能需要的任何依赖项（例如，在我们的Vault服务中是Go
    kit），以及我们应用程序本身的二进制文件。
- en: An image is described with `Dockerfile`; a text file containing a list of special
    commands that instruct Docker how to build the image. They are usually based on
    another container, which saves you from building up everything that might be needed
    in order to build and run Go applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Dockerfile`描述镜像；这是一个包含一系列特殊命令的文本文件，指示Docker如何构建镜像。它们通常基于另一个容器，这可以节省您构建和运行Go应用程序所需的所有可能内容。
- en: 'Inside the `vault` folder from the code we wrote in [Chapter 10](part0213_split_000.html#6B47Q1-9c484ed022e64a0fb0e1aebf8e05d4fd
    "Chapter 10.  Micro-services in Go with the Go kit Framework"), *Micro-services
    in Go with the Go kit Framework*, add a file called `Dockerfile` (note that this
    filename has no extension), containing the following code:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们[第10章](part0213_split_000.html#6B47Q1-9c484ed022e64a0fb0e1aebf8e05d4fd "第10章。使用Go
    kit框架的Go微服务")中编写的代码的`vault`文件夹内，添加一个名为`Dockerfile`的文件（注意，这个文件名没有扩展名），包含以下代码：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Each line in a  `Dockerfile` file represents a different command that is run
    while the image is being built. The following table describes each of the commands
    we have used:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`Dockerfile`文件中的每一行代表在构建镜像时运行的不同命令。以下表格描述了我们使用的每个命令：'
- en: '| **Command** | **Description** |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | **描述** |'
- en: '| `FROM` | The name of the image that this image will be based on. Single words,
    such as scratch, represent official Docker images hosted on Docker Hub. For more
    information on the scratch image, refer to `https://hub.docker.com/_/scratch/`.
    |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| `FROM` | 这个镜像将基于的镜像名称。单个单词，如scratch，代表托管在Docker Hub上的官方Docker镜像。有关scratch镜像的更多信息，请参阅`https://hub.docker.com/_/scratch/`。|'
- en: '| `ADD` | Copies files into the container. We are copying our `vaultd` binary
    and calling it `vaultd`. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| `ADD` | 将文件复制到容器中。我们正在复制我们的`vaultd`二进制文件，并将其命名为`vaultd`。|'
- en: '| `EXPOSE` | Exposes the list of ports; in our case, the Vault service binds
    to `:8080` and `:8081`. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| `EXPOSE` | 暴露端口列表；在我们的例子中，Vault服务绑定到`:8080`和`:8081`。|'
- en: '| `ENTRYPOINT` | The binary to run when the container is executed in our case,
    the `vaultd` binary, which will be put there by the previous call to go install.
    |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| `ENTRYPOINT` | 当容器执行时运行的二进制文件，在我们的例子中是`vaultd`二进制文件，它将由之前的`go install`调用放置在那里。|'
- en: '| `MAINTAINER` | Name and email of the person responsible for maintaining the
    Docker image. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| `MAINTAINER` | 维护Docker镜像的人的姓名和电子邮件地址。|'
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: For a complete list of the supported commands, consult the online Docker documentation
    at [https://docs.docker.com/engine/reference/builder/#dockerfile-reference](https://docs.docker.com/engine/reference/builder/#dockerfile-reference).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取支持的命令的完整列表，请查阅[https://docs.docker.com/engine/reference/builder/#dockerfile-reference](https://docs.docker.com/engine/reference/builder/#dockerfile-reference)上的在线Docker文档。
