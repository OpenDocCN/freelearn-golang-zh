- en: Building Go binaries for different architectures
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为不同架构构建 Go 可执行文件
- en: Go supports cross-complication, a mechanism by which we can build a binary on
    one machine (say, our Mac) targeted for a different operating system (such as
    Linux or Windows) and architecture. Docker containers are Linux-based; so, in
    order to deliver a binary that can run in that environment, we must first build
    one.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Go 支持交叉编译，这是一种机制，允许我们在一台机器（比如我们的 Mac）上构建一个针对不同操作系统（如 Linux 或 Windows）和架构的二进制文件。Docker
    容器是基于 Linux 的；因此，为了提供一个可以在该环境中运行的二进制文件，我们首先需要构建一个。
- en: 'In a terminal, navigate to the vault folder and run the following command:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中，导航到 vault 文件夹并运行以下命令：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We are essentially calling go build here but with a few extra bits and pieces
    to control the build process. `CGO_ENABLED` and `GOOS` are environment variables
    that go build will pay attention to, `-a` is a flag, and `./cmd/vaultd/` is the
    location of the command we want to build (in our case, the `vaultd` command we
    built in the previous chapter).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里实际上是在调用 go build，但增加了一些额外的参数来控制构建过程。`CGO_ENABLED` 和 `GOOS` 是 go build 会注意到的环境变量，`-a`
    是一个标志，而 `./cmd/vaultd/` 是我们想要构建的命令的位置（在我们的例子中，是我们在上一章中构建的 `vaultd` 命令）。
- en: The `CGO_ENABLED=0` indicates that we do not want cgo to be enabled. Since we
    are not binding to any C dependencies, we can reduce the size of our build by
    disabling this.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CGO_ENABLED=0` 表示我们不希望启用 cgo。由于我们没有绑定任何 C 依赖项，我们可以通过禁用这个选项来减小构建的大小。'
- en: '`GOOS` is short for Go Operating System and lets us specify which OS we are
    targeting, in our case, Linux. For a complete list of the available options, you
    can look directly in the Go source code by visiting [https://github.com/golang/go/blob/master/src/go/build/syslist.go](https://github.com/golang/go/blob/master/src/go/build/syslist.go).'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GOOS` 是 Go 操作系统的缩写，它允许我们指定我们正在针对哪个操作系统，在我们的例子中，是 Linux。要查看可用的完整选项列表，可以直接访问
    Go 源代码，通过访问 [https://github.com/golang/go/blob/master/src/go/build/syslist.go](https://github.com/golang/go/blob/master/src/go/build/syslist.go)。'
- en: After a short while, you'll notice that a new binary has appeared, called `vaultd`.
    If you're on a non-Linux machine, you won't be able to directly execute this but
    don't worry; it'll run inside our Docker container just fine.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 稍等片刻，你会注意到出现了一个新的二进制文件，名为 `vaultd`。如果你在非 Linux 机器上，你将无法直接执行这个文件，但不用担心；它将在我们的
    Docker 容器中正常运行。
