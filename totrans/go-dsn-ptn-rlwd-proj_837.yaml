- en: Building Go binaries for different architectures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go supports cross-complication, a mechanism by which we can build a binary on
    one machine (say, our Mac) targeted for a different operating system (such as
    Linux or Windows) and architecture. Docker containers are Linux-based; so, in
    order to deliver a binary that can run in that environment, we must first build
    one.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a terminal, navigate to the vault folder and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We are essentially calling go build here but with a few extra bits and pieces
    to control the build process. `CGO_ENABLED` and `GOOS` are environment variables
    that go build will pay attention to, `-a` is a flag, and `./cmd/vaultd/` is the
    location of the command we want to build (in our case, the `vaultd` command we
    built in the previous chapter).
  prefs: []
  type: TYPE_NORMAL
- en: The `CGO_ENABLED=0` indicates that we do not want cgo to be enabled. Since we
    are not binding to any C dependencies, we can reduce the size of our build by
    disabling this.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GOOS` is short for Go Operating System and lets us specify which OS we are
    targeting, in our case, Linux. For a complete list of the available options, you
    can look directly in the Go source code by visiting [https://github.com/golang/go/blob/master/src/go/build/syslist.go](https://github.com/golang/go/blob/master/src/go/build/syslist.go).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After a short while, you'll notice that a new binary has appeared, called `vaultd`.
    If you're on a non-Linux machine, you won't be able to directly execute this but
    don't worry; it'll run inside our Docker container just fine.
  prefs: []
  type: TYPE_NORMAL
