- en: Go tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An early decision made by the Go core team was that all Go code should look
    familiar and obvious to everybody who speaks Go rather than each code base requiring
    additional learning in order for new programmers to understand it or work on it.
    This is an especially sensible approach when you consider open source projects,
    some of which have hundreds of contributors coming and going all the time.
  prefs: []
  type: TYPE_NORMAL
- en: There is a range of tools that can assist us in achieving the high standards
    set by the Go core team, and we will look at some of the tools in action in this
    section.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your `GOPATH` location, create a new folder called `tooling` and create
    a new `main.go` file containing the following code verbatim:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The tight spaces and lack of indentation are deliberate as we are going to look
    at a very cool utility that comes with Go.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a terminal, navigate to your new folder and run this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At Gophercon 2014 in Denver, Colorado, most people learned that rather than
    pronouncing this little triad as *format* or *f, m, t*, it is actually pronounced
    as a word. Try saying it to yourself now: *fhumt*; it seems that computer programmers
    aren''t weird enough without speaking an alien language to each other too!'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will notice that this little tool has actually tweaked our code file to
    ensure that the layout (or format) of our program matches Go standards. The new
    version is much easier to read:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `go fmt` command cares about indentation, code blocks, unnecessary whitespace,
    unnecessary extra line feeds, and more. Formatting your code in this way is a
    great practice to ensure that your Go code looks like all other Go code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we are going to vet our program to make sure that we haven''t made any
    mistakes or decisions that might be confusing to our users; we can do this automatically
    with another great tool that we get for free:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for our little program points out an obvious and glaring mistake:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We are calling `return` at the top of our function and then trying to do other
    things. The `go vet` tool has noticed this and points out that we have unreachable
    code in our file.
  prefs: []
  type: TYPE_NORMAL
- en: It isn't just silly mistakes like this that `go vet` will catch; it will also
    look for subtler aspects of your program that will guide you toward writing the
    best Go code you can. For an up-to-date list of what the vet tool will report
    on, check out the documentation at [https://golang.org/cmd/vet/](https://golang.org/cmd/vet/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The final tool we will play with is called `goimports`, and it was written
    by Brad Fitzpatrick to automatically fix (add or remove) `import` statements for
    Go files. It is an error in Go to import a package and not use it, and obviously,
    trying to use a package without importing it won''t work either. The `goimports`
    tool will automatically rewrite our `import` statement based on the contents of
    our code file. First, let''s install `goimports` with this familiar command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Update your program to import some packages that we are not going to use and
    remove the `fmt` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'When we try to run our program by calling `go run main.go`, we will see that
    we get some errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'These errors tell us that we have imported packages that we are not using and
    missing the `fmt` package and that in order to continue, we need to make corrections.
    This is where `goimports` comes in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We are calling the `goimports` command with the `-w` write flag, which will
    save us the task of making corrections to all files ending with `.go`.
  prefs: []
  type: TYPE_NORMAL
- en: Have a look at your `main.go` file now, and note that the `net/http` and `sync`
    packages have been removed and the `fmt` package has been put back in.
  prefs: []
  type: TYPE_NORMAL
- en: You could argue that switching to a terminal to run these commands takes more
    time than just doing it manually, and you would probably be right in most cases,
    which is why it is highly recommended that you integrate the Go tools with your
    text editor.
  prefs: []
  type: TYPE_NORMAL
