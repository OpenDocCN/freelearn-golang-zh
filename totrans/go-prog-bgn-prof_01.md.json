["```go\npackage main\n// Import extra functionality from packages\nimport (\n  \"errors\"\n  \"fmt\"\n  \"log\"\n  \"math/rand\"\n  \"strconv\"\n  \"time\"\n)// Taken from: https://en.wiktionary.org/wiki/Hello_World#Translations\nvar helloList = []string{\n  \"Hello, world\",\n  \"Καλημέρα κόσμε\",\n  \"こんにちは世界\",\n  \"سلام دنیا‎\",\n  \"Привет, мир\",\n}\n```", "```go\nfunc main() {\n  // Seed random number generator using the current time\n  rand.NewSource(time.Now().UnixNano())\n  // Generate a random number in the range of out list\n  index := rand.Intn(len(helloList))\n  // Call a function and receive multiple return values\n  msg, err := hello(index)\n  // Handle any errors\n  if err != nil {\n    log.Fatal(err)\n  }\n  // Print our message to the console\n  fmt.Println(msg)\n}\n```", "```go\nfunc hello(index int) (string, error) {\n  if index < 0 || index > len(helloList)-1 {\n    // Create an error, convert the int type to a string\n    return \"\", errors.New(\"out of range: \" + strconv.Itoa(index))\n  }\n  return helloList[index], nil\n}\n```", "```go\npackage main\n```", "```go\n// Import extra functionality from packages\nimport (\n  \"errors\"\n  \"fmt\"\n  \"log\"\n  \"math/rand\"\n  \"strconv\"\n  \"time\"\n)\n```", "```go\n// Taken from: https://en.wiktionary.org/wiki/Hello_World#Translations\nvar helloList = []string{\n  \"Hello, world\",\n  \"Καλημέρα κόσμε\",\n  \"こんにちは世界\",\n  \"سلام دنیا‎\",\n  \"Привет, мир\",\n}\n```", "```go\nfunc main() {\n…\n}\n```", "```go\n  // Seed random number generator using the current time\n  rand.Seed(time.Now().UnixNano())\n  // Generate a random number in the range of out list\n  index := rand.Intn(len(helloList))\n```", "```go\npackage main\nimport (\n  \"fmt\"\n)\nfunc main() {\n  helloList := []string{\n    \"Hello, world\",\n    \"Καλημέρα κόσμε\",\n    \"こんにちは世界\",\n    \"سلام دنیا‎\",\n    \"Привет, мир\",\n  }\n  fmt.Println(len(helloList))\n  fmt.Println(helloList[len(helloList)-1])\n  fmt.Println(helloList[len(helloList)])\n}\n```", "```go\n  // Call a function and receive multiple return values\n  msg, err := hello(index)\n```", "```go\nfunc hello(index int) (string, error) {\n…\n}\n```", "```go\n  if index < 0 || index > len(helloList)-1 {\n    // Create an error, convert the int type to a string\n    return \"\", errors.New(\"out of range: \" + strconv.Itoa(index))\n  }\n  return helloList[index], nil\n```", "```go\n  // Handle any errors\n  if err != nil {\n    log.Fatal(err)\n  }\n```", "```go\n  // Print our message to the console\n  fmt.Println(msg)\n```", "```go\n    package main\n    ```", "```go\n    import (\n      \"fmt\"\n      \"math/rand\"\n      \"strings\"\n      \"time\"\n    )\n    ```", "```go\n    func main() {\n    ```", "```go\n      rand.Seed(time.Now().UnixNano())\n    ```", "```go\n      r := rand.Intn(5) + 1\n    ```", "```go\n      stars := strings.Repeat(\"*\", r)\n    ```", "```go\n      fmt.Println(stars)\n    }\n    ```", "```go\n    go run .\n    ```", "```go\nvar foo string = \"bar\"\n```", "```go\n    package main\n    ```", "```go\n    import (\n      \"fmt\"\n    )\n    ```", "```go\n    var foo string = \"bar\"\n    ```", "```go\n    func main() {\n    ```", "```go\n      var baz string = \"qux\"\n    ```", "```go\n      fmt.Println(foo, baz)\n    ```", "```go\n    }\n    ```", "```go\n    go run .\n    ```", "```go\nbar qux\n```", "```go\nvar (\n  <name1> <type1> = <value1>\n  <name2> <type2> = <value2>\n…\n  <nameN> <typeN> = <valueN>\n)\n```", "```go\n    package main\n    ```", "```go\n    import (\n      \"fmt\"\n      \"time\"\n    )\n    ```", "```go\n    var (\n    ```", "```go\n      Debug   bool   = false\n      LogLevel  string  = \"info\"\n      startUpTime time.Time = time.Now()\n    ```", "```go\n    )\n    ```", "```go\n    func main() {\n      fmt.Println(Debug, LogLevel, startUpTime)\n    }\n    ```", "```go\n    go run .\n    ```", "```go\n    package main\n    ```", "```go\n    import (\n      \"fmt\"\n      \"time\"\n    )\n    ```", "```go\n    var (\n    ```", "```go\n      Debug   bool\n    ```", "```go\n      LogLevel  = \"info\"\n      startUpTime = time.Now()\n    ```", "```go\n    )\n    ```", "```go\n    func main() {\n      fmt.Println(Debug, LogLevel, startUpTime)\n    }\n    ```", "```go\n    go run .\n    ```", "```go\npackage main\nimport \"math/rand\"\nfunc main() {\n  var seed = 1234456789\n  rand.NewSource(seed)\n}\n```", "```go\npackage main\nimport \"math/rand\"\nfunc main() {\n  var seed int64 = 1234456789\n  rand.NewSource(seed)\n}\n```", "```go\n    package main\n    ```", "```go\n    import (\n      \"fmt\"\n      \"time\"\n    )\n    ```", "```go\n    func main() {\n    ```", "```go\n      Debug := false\n      LogLevel := \"info\"\n      startUpTime := time.Now()\n    ```", "```go\n      fmt.Println(Debug, LogLevel, startUpTime)\n    }\n    ```", "```go\n    go run .\n    ```", "```go\npackage main\nimport (\n  \"fmt\"\n  \"time\"\n)\nfunc main() {\n  Debug, LogLevel, startUpTime := false, \"info\", time.Now()\n  fmt.Println(Debug, LogLevel, startUpTime)\n}\n```", "```go\n    package main\n    ```", "```go\n    import (\n      \"fmt\"\n      \"time\"\n    )\n    ```", "```go\n    func getConfig() (bool, string, time.Time) {\n    ```", "```go\n      return false, \"info\", time.Now()\n    ```", "```go\n    }\n    ```", "```go\n    func main() {\n    ```", "```go\n      Debug, LogLevel, startUpTime := getConfig()\n    ```", "```go\n      fmt.Println(Debug, LogLevel, startUpTime)\n    ```", "```go\n    }\n    ```", "```go\n    go run .\n    ```", "```go\nvar (\n  Debug bool\n  LogLevel string\n  startUpTime time.Time\n)\nDebug, LogLevel, startUpTime = getConfig()\n```", "```go\npackage main\nimport (\n  \"fmt\"\n  \"time\"\n)\nfunc getConfig() (bool, string, time.Time) {\n  return false, \"info\", time.Now()\n}\nfunc main() {\n  // Type only\n  var start, middle, end float32\n  fmt.Println(start, middle, end)\n  // Initial value mixed type\n  var name, left, right, top, bottom = \"one\", 1, 1.5, 2, 2.5\n  fmt.Println(name, left, right, top, bottom)\n  // works with functions also\n  var Debug, LogLevel, startUpTime = getConfig()\n  fmt.Println(Debug, LogLevel, startUpTime)\n}\n```", "```go\npackage main\nimport (\n  \"fmt\"\n  \"time\"\n)\nfunc main() {\n  デバッグ := false\n  日志级别 := \"info\"\n  ይጀምሩ := time.Now()\n  _A1_Μείγμα := \"\" \n\"\n  fmt.Println(デバッグ, 日志级别, ይጀምሩ, _A1_Μείγμα)\n}\n```", "```go\n    package main\n    ```", "```go\n    import \"fmt\"\n    ```", "```go\n    func main() {\n    ```", "```go\n      offset := 5\n    ```", "```go\n      fmt.Println(offset)\n    ```", "```go\n      offset = 10\n    ```", "```go\n      fmt.Println(offset)\n    }\n    ```", "```go\n    go run .\n    ```", "```go\n5\n10\n```", "```go\npackage main\nimport \"fmt\"\nvar defaultOffset = 10\nfunc main() {\n  offset := defaultOffset\n  fmt.Println(offset)\n  offset = offset + defaultOffset\n  fmt.Println(offset)\n}\n```", "```go\n10\n20\n```", "```go\n    package main\n    ```", "```go\n    import \"fmt\"\n    ```", "```go\n    func main() {\n    ```", "```go\n      query, limit, offset := \"bat\", 10, 0\n    ```", "```go\n      query, limit, offset = \"ball\", offset, 20\n    ```", "```go\n      fmt.Println(query, limit, offset)\n    }\n    ```", "```go\n    go run .\n    ```", "```go\nball 0 20\n```", "```go\n    package main\n    ```", "```go\n    import \"fmt\"\n    ```", "```go\n    func main() {\n    ```", "```go\n      // Main course\n      var total float64 = 2 * 13\n      fmt.Println(\"Sub :\", total)\n    ```", "```go\n      // Drinks\n      total = total + (4 * 2.25)\n      fmt.Println(\"Sub :\", total)\n    ```", "```go\n      // Discount\n      total = total - 5\n      fmt.Println(\"Sub :\", total)\n    ```", "```go\n      // 10% Tip\n      tip := total * 0.1\n      fmt.Println(\"Tip :\", tip)\n    ```", "```go\n      total = total + tip\n      fmt.Println(\"Total:\", total)\n    ```", "```go\n      // Split bill\n      split := total / 2\n      fmt.Println(\"Split:\", split)\n    ```", "```go\n      // Reward every 5th visit\n      visitCount := 24\n      visitCount = visitCount + 1\n    ```", "```go\n      remainder := visitCount % 5\n    ```", "```go\n      if remainder == 0 {\n    ```", "```go\n        fmt.Println(\"With this visit, you've earned a reward.\")\n      }\n    }\n    ```", "```go\n    go run .\n    ```", "```go\npackage main\nimport \"fmt\"\nfunc main() {\n  givenName := \"John\"\n  familyName := \"Smith\"\n  fullName := givenName + \" \" + familyName\n  fmt.Println(\"Hello,\", fullName)\n}\n```", "```go\nHello, John Smith\n```", "```go\n    package main\n    ```", "```go\n    import \"fmt\"\n    ```", "```go\n    func main() {\n    ```", "```go\n      count := 5\n    ```", "```go\n      count += 5\n      fmt.Println(count)\n    ```", "```go\n      count++\n      fmt.Println(count)\n    ```", "```go\n      count--\n      fmt.Println(count)\n    ```", "```go\n      count -= 5\n      fmt.Println(count)\n    ```", "```go\n      name := \"John\"\n    ```", "```go\n      name += \" Smith\"\n      fmt.Println(\"Hello,\", name)\n    ```", "```go\n    }\n    ```", "```go\n    go run .\n    ```", "```go\n    package main\n    ```", "```go\n    import \"fmt\"\n    ```", "```go\n    func main() {\n    ```", "```go\n      visits := 15\n    ```", "```go\n      fmt.Println(\"First visit   :\", visits == 1)\n    ```", "```go\n      fmt.Println(\"Return visit  :\", visits != 1)\n    ```", "```go\n      fmt.Println(\"Silver member :\", visits >= 10 && visits < 21)\n    ```", "```go\n      fmt.Println(\"Gold member   :\", visits > 20 && visits <= 30)\n    ```", "```go\n      fmt.Println(\"Platinum member :\", visits > 30)\n    ```", "```go\n    }\n    ```", "```go\n    go run .\n    ```", "```go\n    package main\n    ```", "```go\n    import (\n      \"fmt\"\n      \"time\"\n    )\n    ```", "```go\n    func main() {\n    ```", "```go\n      var count int\n      fmt.Printf(\"Count  : %#v \\n\", count)\n    ```", "```go\n      var discount float64\n      fmt.Printf(\"Discount : %#v \\n\", discount)\n    ```", "```go\n      var debug bool\n      fmt.Printf(\"Debug  : %#v \\n\", debug)\n    ```", "```go\n      var message string\n      fmt.Printf(\"Message : %#v \\n\", message)\n    ```", "```go\n      var emails []string\n      fmt.Printf(\"Emails : %#v \\n\", emails)\n    ```", "```go\n      var startTime time.Time\n      fmt.Printf(\"Start  : %#v \\n\", startTime)\n    ```", "```go\n    }\n    ```", "```go\n    go run .\n    ```", "```go\n    package main\n    ```", "```go\n    import (\n      \"fmt\"\n      \"time\"\n    )\n    ```", "```go\n    func main() {\n    ```", "```go\n      var count1 *int\n    ```", "```go\n      count2 := new(int)\n    ```", "```go\n      countTemp := 5\n    ```", "```go\n      count3 := &countTemp\n    ```", "```go\n      t := &time.Time{}\n    ```", "```go\n      fmt.Printf(\"count1: %#v\\n\", count1)\n      fmt.Printf(\"count2: %#v\\n\", count2)\n      fmt.Printf(\"count3: %#v\\n\", count3)\n      fmt.Printf(\"time : %#v\\n\", t)\n    ```", "```go\n    }\n    ```", "```go\n    go run .\n    ```", "```go\n    package main\n    ```", "```go\n    import (\n      \"fmt\"\n      \"time\"\n    )\n    ```", "```go\n    func main() {\n    ```", "```go\n      var count1 *int\n      count2 := new(int)\n      countTemp := 5\n      count3 := &countTemp\n      t := &time.Time{}\n    ```", "```go\n      if count1 != nil {\n        fmt.Printf(\"count1: %#v\\n\", *count1)\n      }\n      if count2 != nil {\n        fmt.Printf(\"count2: %#v\\n\", *count2)\n      }\n      if count3 != nil {\n        fmt.Printf(\"count3: %#v\\n\", *count3)\n      }\n    ```", "```go\n      if t != nil {\n    ```", "```go\n        fmt.Printf(\"time : %#v\\n\", *t)\n    ```", "```go\n        fmt.Printf(\"time : %#v\\n\", t.String())\n    ```", "```go\n      }\n    ```", "```go\n    }\n    ```", "```go\n    go run .\n    ```", "```go\n    package main\n    ```", "```go\n    import \"fmt\"\n    ```", "```go\n    func add5Value(count int) {\n    ```", "```go\n      count += 5\n    ```", "```go\n      fmt.Println(\"add5Value   :\", count)\n    ```", "```go\n    }\n    ```", "```go\n    func add5Point(count *int) {\n    ```", "```go\n      *count += 5\n    ```", "```go\n      fmt.Println(\"add5Point   :\", *count)\n    ```", "```go\n    }\n    ```", "```go\n    func main() {\n    ```", "```go\n      var count int\n    ```", "```go\n      add5Value(count)\n    ```", "```go\n      fmt.Println(\"add5Value post:\", count)\n    ```", "```go\n      add5Point(&count)\n    ```", "```go\n      fmt.Println(\"add5Point post:\", count)\n    ```", "```go\n    }\n    ```", "```go\n    go run .\n    ```", "```go\npackage main\nimport \"fmt\"\nfunc main() {\n  a, b := 5, 10\n  // call swap here\n  fmt.Println(a == 10, b == 5)\n}\nfunc swap(a *int, b *int) {\n  // swap the values here\n}\n```", "```go\ntrue true\n```", "```go\nconstant <name> <type> = <value>\nconstant (\n  <name1> <type1> = <value1>\n  <name2> <type2> = <value3>\n…\n  <nameN> <typeN> = <valueN>\n)\n```", "```go\n    package main\n    ```", "```go\n    import \"fmt\"\n    ```", "```go\n    const GlobalLimit = 100\n    ```", "```go\n    const MaxCacheSize int = 10 * GlobalLimit\n    ```", "```go\n    const (\n      CacheKeyBook = \"book_\"\n      CacheKeyCD = \"cd_\"\n    )\n    ```", "```go\n    var cache map[string]string\n    ```", "```go\n    func cacheGet(key string) string {\n      return cache[key]\n    }\n    ```", "```go\n    func cacheSet(key, val string) {\n    ```", "```go\n      if len(cache)+1 >= MaxCacheSize {\n        return\n      }\n      cache[key] = val\n    }\n    ```", "```go\n    func GetBook(isbn string) string {\n    ```", "```go\n      return cacheGet(CacheKeyBook + isbn)\n    }\n    ```", "```go\n    func SetBook(isbn string, name string) {\n    ```", "```go\n      cacheSet(CacheKeyBook+isbn, name)\n    }\n    ```", "```go\n    func GetCD(sku string) string {\n    ```", "```go\n      return cacheGet(CacheKeyCD + sku)\n    }\n    ```", "```go\n    func SetCD(sku string, title string) {\n    ```", "```go\n      cacheSet(CacheKeyCD+sku, title)\n    }\n    ```", "```go\n    func main() {\n    ```", "```go\n      cache = make(map[string]string)\n    ```", "```go\n      SetBook(\"1234-5678\", \"Get Ready To Go\")\n    ```", "```go\n      SetCD(\"1234-5678\", \"Get Ready To Go Audio Book\")\n    ```", "```go\n      fmt.Println(\"Book :\", GetBook(\"1234-5678\"))\n    ```", "```go\n      fmt.Println(\"CD :\", GetCD(\"1234-5678\"))\n    ```", "```go\n    }\n    ```", "```go\n    go run .\n    ```", "```go\n…\nconst (\n  Sunday  = 0\n  Monday  = 1\n  Tuesday = 2\n  Wednesday = 3\n  Thursday = 4\n  Friday  = 5\n  Saturday = 6\n)\n…\n```", "```go\n…\nconst (\n  Sunday = iota\n  Monday\n  Tuesday\n  Wednesday\n  Thursday\n  Friday\n  Saturday\n)\n…\n```", "```go\npackage main\nimport \"fmt\"\nvar level = \"pkg\"\nfunc main() {\n  fmt.Println(\"Main start :\", level)\n  if true {\n    fmt.Println(\"Block start :\", level)\n    funcA()\n  }\n}\nfunc funcA() {\n  fmt.Println(\"funcA start :\", level)\n}\n```", "```go\nMain start : pkg\nBlock start : pkg\nfuncA start : pkg\n```", "```go\npackage main\nimport \"fmt\"\nvar level = \"pkg\"\nfunc main() {\n  fmt.Println(\"Main start :\", level)\n  // Create a shadow variable\n  level := 42\n  if true {\n    fmt.Println(\"Block start :\", level)\n    funcA()\n  }\n  fmt.Println(\"Main end :\", level)\n}\nfunc funcA() {\n  fmt.Println(\"funcA start :\", level)\n}\n```", "```go\nMain start : pkg\nBlock start : 42\nfuncA start : pkg\nMain end : 42\n```", "```go\npackage main\nimport \"fmt\"\nfunc main() {\n  {\n    level := \"Nest 1\"\n    fmt.Println(\"Block end :\", level)\n  }\n  // Error: undefined: level\n  //fmt.Println(\"Main end  :\", level)\n}\n```", "```go\npackage main\nimport \"fmt\"\nfunc main() {\n  count := 5\n  if count > 5 {\n    message := \"Greater than 5\"\n  } else {\n    message := \"Not greater than 5\"\n  }\n  fmt.Println(message)\n}\n```", "```go\n    Not greater than 5\n    ```", "```go\npackage main\nimport \"fmt\"\nfunc main() {\n  count := 0\n  if count < 5 {\n    count := 10\n    count++\n  }\n  fmt.Println(count == 11)\n}\n```", "```go\nTrue\n```"]