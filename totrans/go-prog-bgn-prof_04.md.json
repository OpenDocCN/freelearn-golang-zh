["```go\n    package main\n    import \"fmt\"\n    ```", "```go\n    func defineArray() [10]int {\n      var arr [10]int\n      return arr\n    }\n    ```", "```go\n    func main() {\n      fmt.Printf(\"%#v\\n\", defineArray())\n    }\n    ```", "```go\n    go run .\n    ```", "```go\n[10]int{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}\n```", "```go\n    package main\n    import \"fmt\"\n    ```", "```go\n    func compArrays() (bool, bool, bool) {\n      var arr1 [5]int\n      arr2 := [5]int{0}\n      arr3 := [...]int{0, 0, 0, 0, 0}\n      arr4 := [9]int{0, 0, 0, 0, 9}\n    ```", "```go\n      return arr1 == arr2, arr1 == arr3, arr1 == arr4\n    }\n    ```", "```go\n    func main() {\n      comp1, comp2, comp3 := compArrays()\n      fmt.Println(\"[5]int == [5]int{0}       :\", comp1)\n      fmt.Println(\"[5]int == [...]int{0, 0, 0, 0, 0}:\", comp2)\n      fmt.Println(\"[5]int == [9]int{0, 0, 0, 0, 9} :\", comp3)\n    }\n    ```", "```go\n    go run .\n    ```", "```go\n      arr4 := [9]int{0, 0, 0, 0, 9}\n    ```", "```go\n      arr4 := [5]int{0, 0, 0, 0, 9}\n    ```", "```go\n      fmt.Println(\"[5]int == [9]int{0, 0, 0, 0, 9} :\", comp3)\n    ```", "```go\n      fmt.Println(\"[5]int == [5]int{0, 0, 0, 0, 9} :\", comp3)\n    ```", "```go\n    go run .\n    ```", "```go\n    package main\n    import \"fmt\"\n    ```", "```go\n    func compArrays() (bool, bool, [10]int) {\n      var arr1 [10]int\n      // set key 9 to value 0\n      arr2 := [...]int{9: 0}\n      // set key 0 to value 1, set key 9 to value 10,\n      // and set key 4 to value 5\n      arr3 := [10]int{1, 9: 10, 4: 5}\n    ```", "```go\n      return arr1 == arr2, arr1 == arr3, arr3\n    }\n    ```", "```go\n    func main() {\n      comp1, comp2, arr3 := compArrays()\n      fmt.Println(\"[10]int == [...]{9:0}       :\", comp1)\n      fmt.Println(\"[10]int == [10]int{1, 9: 10, 4: 5}}:\", comp2)\n      fmt.Println(\"arr3               :\", arr3)\n    }\n    ```", "```go\n    go run .\n    ```", "```go\n    package main\n    import \"fmt\"\n    ```", "```go\n    func message() string {\n      arr := [...]string{\n       \"ready\",\n       \"Get\",\n       \"Go\",\n       \"to\",\n      }\n    ```", "```go\n      return fmt.Sprintln(arr[1], arr[0], arr[3], arr[2])\n    }\n    ```", "```go\n    func main() {\n      fmt.Print(message())\n    }\n    ```", "```go\n    go run .\n    ```", "```go\nGet ready to Go\n```", "```go\n    package main\n    import \"fmt\"\n    ```", "```go\n    func message() string {\n      arr := [4]string{\"ready\", \"Get\", \"Go\", \"to\"}\n    ```", "```go\n      arr[1] = \"It’s\"\n      arr[0] = \"time\"\n    ```", "```go\n      return fmt.Sprintln(arr[1], arr[0], arr[3], arr[2])\n    }\n    ```", "```go\n    func main() {\n      fmt.Print(message())\n    }\n    ```", "```go\n    go run .\n    ```", "```go\nIt’s time to Go\n```", "```go\n    package main\n    import \"fmt\"\n    ```", "```go\n    func message() string {\n      m := \"\"\n      arr := [4]int{1,2,3,4}\n    ```", "```go\n      for i := 0; i < len(arr); i++ {\n    ```", "```go\n       arr[i] = arr[i] * arr[i]\n       m += fmt.Sprintf(\"%v: %v\\n\", i, arr[i])\n    ```", "```go\n      }\n      return m\n    }\n    ```", "```go\n    func main() {\n      fmt.Print(message())\n    }\n    ```", "```go\n    go run .\n    ```", "```go\n0: 1\n1: 4\n2: 9\n3: 16\n```", "```go\n    package main\n    import \"fmt\"\n    ```", "```go\n    func fillArray(arr [10]int) [10]int {\n      for i := 0; i < len(arr); i++ {\n       arr[i] = i + 1\n      }\n      return arr\n    }\n    ```", "```go\n    func opArray(arr [10]int) [10]int {\n      for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i] * arr[i]\n      }\n      return arr\n    }\n    ```", "```go\n    func main() {\n      var arr [10]int\n      arr = fillArray(arr)\n      arr = opArray(arr)\n      fmt.Println(arr)\n    }\n    ```", "```go\n    go run .\n    ```", "```go\n[1 4 9 16 25 36 49 64 81 100]\n```", "```go\n[1 2 3 4 5 6 7 8 9 10]\n```", "```go\n    package main\n    import (\n      \"fmt\"\n      \"os\"\n    )\n    ```", "```go\n    func getPassedArgs(minArgs int) []string {\n    ```", "```go\n      if len(os.Args) < minArgs {\n        fmt.Printf(\"At least %v arguments are needed\\n\", minArgs)\n        os.Exit(1)\n      }\n    ```", "```go\n      var args []string\n      for i := 1; i < len(os.Args); i++ {\n        args = append(args, os.Args[i])\n      }\n    ```", "```go\n      return args\n    }\n    ```", "```go\n    func findLongest(args []string) string {\n      var longest string\n      for i := 0; i < len(args); i++ {\n        if len(args[i]) > len(longest) {\n          longest = args[i]\n           }\n      }\n      return longest\n    }\n    ```", "```go\n    func main() {  \n     if longest := findLongest(getPassedArgs(3)); len(longest) > 0 {\n         fmt.Println(\"The longest word passed was:\", longest)\n      } else {\n        fmt.Println(\"There was an error\")\n        os.Exit(1)\n      }\n    }\n    ```", "```go\n    go run . Get ready to Go\n    ```", "```go\nThe longest word passed was: ready\n```", "```go\n    package main\n    import (\n      \"fmt\"\n      \"os\"\n    )\n    ```", "```go\n    func getPassedArgs() []string {\n      var args []string\n      for i := 1; i < len(os.Args); i++ {\n        args = append(args, os.Args[i])\n      }\n      return args\n    }\n    ```", "```go\n    func getLocales(extraLocales []string) []string {\n      var locales []string\n    ```", "```go\n      locales = append(locales, \"en_US\", \"fr_FR\")\n    ```", "```go\n      locales = append(locales, extraLocales...)\n    ```", "```go\n      return locales\n    }\n    ```", "```go\n    func main() {\n      locales := getLocales(getPassedArgs())\n      fmt.Println(\"Locales to use:\", locales)\n    }\n    ```", "```go\n    go run . fr_CN en_AU\n    ```", "```go\nLocales to use: [en_US fr_FR fr_CN en_AU]\n```", "```go\n    package main\n    import \"fmt\"\n    ```", "```go\n    func message() string {\n      s := []int{1, 2, 3, 4, 5, 6, 7, 8, 9}\n    ```", "```go\n      m := fmt.Sprintln(\"First :\", s[0], s[0:1], s[:1])\n    ```", "```go\n      m += fmt.Sprintln(\"Last  :\", s[len(s)-1], s[len(s)-1:len(s)], s[len(s)-1:])\n    ```", "```go\n      m += fmt.Sprintln(\"First 5 :\", s[:5])\n    ```", "```go\n      m += fmt.Sprintln(\"Last 4 :\", s[5:])\n    ```", "```go\n      m += fmt.Sprintln(\"Middle 5:\", s[2:7])\n    ```", "```go\n      return m\n    }\n    ```", "```go\n    func main() {\n      fmt.Print(message())\n    }\n    ```", "```go\n    go run .\n    ```", "```go\n    package main\n    import \"fmt\"\n    ```", "```go\n    func genSlices() ([]int, []int, []int) {\n    ```", "```go\n      var s1 []int\n    ```", "```go\n      s2 := make([]int, 10)\n    ```", "```go\n      s3 := make([]int, 10, 50)\n    ```", "```go\n      return s1, s2, s3\n    }\n    ```", "```go\n    func main() {\n      s1, s2, s3 := genSlices()\n      fmt.Printf(\"s1: len = %v cap = %v\\n\", len(s1), cap(s1))\n      fmt.Printf(\"s2: len = %v cap = %v\\n\", len(s2), cap(s2))\n      fmt.Printf(\"s3: len = %v cap = %v\\n\", len(s3), cap(s3))\n    }\n    ```", "```go\n    go run .\n    ```", "```go\n    package main\n    import \"fmt\"\n    ```", "```go\n    func linked() (int, int, int) {\n    ```", "```go\n      s1 := []int{1, 2, 3, 4, 5}\n    ```", "```go\n      s2 := s1\n    ```", "```go\n      s3 := s1[:]\n    ```", "```go\n      s1[3] = 99\n    ```", "```go\n      return s1[3], s2[3], s3[3]\n    }\n    ```", "```go\n    func noLink() (int, int) {\n    ```", "```go\n      s1 := []int{1, 2, 3, 4, 5}\n      s2 := s1\n    ```", "```go\n      s1 = append(s1, 6)\n    ```", "```go\n      s1[3] = 99\n      return s1[3], s2[3]\n    }\n    ```", "```go\n    func capLinked() (int, int) {\n    ```", "```go\n      s1 := make([]int, 5, 10)\n    ```", "```go\n      s1[0], s1[1], s1[2], s1[3], s1[4] = 1, 2, 3, 4, 5\n    ```", "```go\n      s2 := s1\n    ```", "```go\n      s1 = append(s1, 6)\n    ```", "```go\n      s1[3] = 99\n      return s1[3], s2[3]\n    }\n    ```", "```go\n    func capNoLink() (int, int) {\n      s1 := make([]int, 5, 10)\n      s1[0], s1[1], s1[2], s1[3], s1[4] = 1, 2, 3, 4, 5\n      s2 := s1\n      s1 = append(s1, []int{10: 11}...)\n      s1[3] = 99\n      return s1[3], s2[3]\n    }\n    ```", "```go\n    func copyNoLink() (int, int, int) {\n      s1 := []int{1, 2, 3, 4, 5}\n      s2 := make([]int, len(s1))\n      copied := copy(s2, s1)\n      s1[3] = 99\n      return s1[3], s2[3], copied\n    }\n    ```", "```go\n    func appendNoLink() (int, int) {\n      s1 := []int{1, 2, 3, 4, 5}\n      s2 := append([]int{}, s1...)\n      s1[3] = 99\n      return s1[3], s2[3]\n    }\n    ```", "```go\n    func main() {\n      l1, l2, l3 := linked()\n      fmt.Println(\"Linked   :\", l1, l2, l3)\n      nl1, nl2 := noLink()\n      fmt.Println(\"No Link   :\", nl1, nl2)\n      cl1, cl2 := capLinked()\n      fmt.Println(\"Cap Link  :\", cl1, cl2)\n      cnl1, cnl2 := capNoLink()\n      fmt.Println(\"Cap No Link :\", cnl1, cnl2)\n      copy1, copy2, copied := copyNoLink()\n      fmt.Print(\"Copy No Link: \", copy1, copy2)\n      fmt.Printf(\" (Number of elements copied %v)\\n\", copied)\n      a1, a2 := appendNoLink()\n      fmt.Println(\"Append No Link:\", a1, a2)\n    }\n    ```", "```go\n    go run .\n    ```", "```go\n  s1 := []int{1, 2, 3, 4, 5}\n  s2 := append(s1[:0:0], s1...)\n```", "```go\n    package main\n    import \"fmt\"\n    ```", "```go\n    func getUsers() map[string]string {\n    ```", "```go\n      users := map[string]string{\n        \"305\": \"Sue\",\n        \"204\": \"Bob\",\n        \"631\": \"Jake\",\n      }\n    ```", "```go\n      users[\"073\"] = \"Tracy\"\n    ```", "```go\n      return users\n    }\n    ```", "```go\n    func main() {\n      fmt.Println(\"Users:\", getUsers())\n    }\n    ```", "```go\n    go run .\n    ```", "```go\nUsers: map[073:Tracy 204:Bob 305:Sue 631:Jake]\n```", "```go\n    package main\n    import (\n      \"fmt\"\n      \"os\"\n    )\n    ```", "```go\n    func getUsers() map[string]string {\n    ```", "```go\n      return map[string]string{\n       \"305\": \"Sue\",\n       \"204\": \"Bob\",\n       \"631\": \"Jake\",\n       \"073\": \"Tracy\",\n      }\n    }\n    ```", "```go\n    func getUser(id string) (string, bool) {\n    ```", "```go\n      users := getUsers()\n    ```", "```go\n      user, exists := users[id]\n    ```", "```go\n      return user, exists\n    }\n    ```", "```go\n    func main() {\n    ```", "```go\n      if len(os.Args) < 2 {\n        fmt.Println(\"User ID not passed\")\n        os.Exit(1)\n      }\n    ```", "```go\n      userID := os.Args[1]\n      name, exists := getUser(userID)\n    ```", "```go\n      if !exists {\n        fmt.Printf(\"Passed user ID (%v) not found.\\nUsers:\\n\", userID)\n        for key, value := range getUsers() {\n          fmt.Println(\"  ID:\", key, \"Name:\", value)\n        }\n        os.Exit(1)\n      }\n    ```", "```go\n      fmt.Println(\"Name:\", name)\n    }\n    ```", "```go\n    go run . 123\n    ```", "```go\n    go run . 305\n    ```", "```go\nHi, Tracy\n```", "```go\n[Sunday Monday Tuesday Wednesday Thursday Friday Saturday]\n```", "```go\n    package main\n    import (\n      \"fmt\"\n      \"os\"\n    )\n    ```", "```go\n    var users = map[string]string{\n      \"305\": \"Sue\",\n      \"204\": \"Bob\",\n      \"631\": \"Jake\",\n      \"073\": \"Tracy\",\n    }\n    ```", "```go\n    func deleteUser(id string){\n      delete(users, id)\n    }\n    ```", "```go\n    func main() {\n      if len(os.Args) < 2 {\n        fmt.Println(\"User ID not passed\")\n        os.Exit(1)\n      }\n      userID := os.Args[1]\n      deleteUser(userID)\n      fmt.Println(\"Users:\", users)\n    }\n    ```", "```go\n    go run . 305\n    ```", "```go\nUsers: map[073:Tracy 204:Bob 631:Jake]\n```", "```go\n    Good\n    Good\n    Bad\n    Good\n    Good\n    ```", "```go\n[Good Good Good Good]\n```", "```go\n    package main\n    import \"fmt\"\n    ```", "```go\n    type id string\n    ```", "```go\n    func getIDs() (id, id, id) {\n    ```", "```go\n      var id1 id\n    ```", "```go\n      var id2 id = \"1234-5678\"\n    ```", "```go\n      var id3 id\n      id3 = \"1234-5678\"\n    ```", "```go\n      return id1, id2, id3\n    }\n    ```", "```go\n    func main() {\n      id1, id2, id3 := getIDs()\n      fmt.Println(\"id1 == id2    :\", id1 == id2)\n      fmt.Println(\"id2 == id3    :\", id2 == id3)\n    ```", "```go\n      fmt.Println(\"id2 == \\\"1234-5678\\\":\", string(id2) == \"1234-5678\")\n    }\n    ```", "```go\n    go run .\n    ```", "```go\ntype <name> struct {\n  <fieldName1> <type>\n  <fieldName2> <type>\n  …\n  <fieldNameN> <type>\n}\n```", "```go\n    package main\n    import \"fmt\"\n    ```", "```go\n    type user struct {\n    ```", "```go\n      name  string\n      age   int\n      balance float64\n      member bool\n    }\n    ```", "```go\n    func getUsers() []user {\n    ```", "```go\n      u1 := user{\n       name:  \"Tracy\",\n       age:   51,\n       balance: 98.43,\n       member: true,\n      }\n    ```", "```go\n      u2 := user{\n       age: 19,\n       name: \"Nick\",\n      }\n    ```", "```go\n      u3 := user{\n       \"Bob\",\n       25,\n       0,\n       false,\n      }\n    ```", "```go\n      var u4 user\n    ```", "```go\n      u4.name = \"Sue\"\n      u4.age = 31\n      u4.member = true\n      u4.balance = 17.09\n    ```", "```go\n      return []user{u1, u2, u3, u4}\n    }\n    ```", "```go\n    func main() {\n      users := getUsers()\n      for i := 0; i < len(users); i++ {\n       fmt.Printf(\"%v: %#v\\n\", i, users[i])\n      }\n    }\n    ```", "```go\n    go run .\n    ```", "```go\ntype <name> struct {\n  <fieldName1> <type>\n  <fieldName2> <type>\n  …\n  <fieldNameN> <type>\n}{\n  <value1>,\n  <value2>,\n  …\n  <valueN>,\n}\n```", "```go\n    package main\n    import \"fmt\"\n    ```", "```go\n    type point struct {\n      x int\n      y int\n    }\n    ```", "```go\n    func compare() (bool, bool) {\n    ```", "```go\n      point1 := struct {\n        x int\n        y int\n      }{\n        10,\n        10,\n      }\n    ```", "```go\n      point2 := struct {\n        x int\n        y int\n      }{}\n      point2.x = 10\n      point2.y = 5\n    ```", "```go\n      point3 := point{10, 10}\n    ```", "```go\n      return point1 == point2, point1 == point3\n    }\n    ```", "```go\n    func main() {\n      a, b := compare()\n      fmt.Println(\"point1 == point2:\", a)\n      fmt.Println(\"point1 == point3:\", b)\n    }\n    ```", "```go\n    go run .\n    ```", "```go\ntype <name> struct {\n  <Type>\n}\n```", "```go\n    package main\n    import \"fmt\"\n    ```", "```go\n    type name string\n    ```", "```go\n    type location struct {\n      x int\n      y int\n    }\n    ```", "```go\n    type size struct {\n      width int\n      height int\n    }\n    ```", "```go\n    type dot struct {\n      name\n      location\n      size\n    }\n    ```", "```go\n    func getDots() []dot {\n    ```", "```go\n      var dot1 dot\n    ```", "```go\n      dot2 := dot{}\n    ```", "```go\n      dot2.name = \"A\"\n    ```", "```go\n      dot2.x = 5\n      dot2.y = 6\n      dot2.width = 10\n      dot2.height = 20\n    ```", "```go\n      dot3 := dot{\n       name: \"B\",\n       location: location{\n         x: 13,\n         y: 27,\n       },\n       size: size{\n         width: 5,\n         height: 7,\n       },\n      }\n    ```", "```go\n      dot4 := dot{}\n      dot4.name = \"C\"\n      dot4.location.x = 101\n      dot4.location.y = 209\n      dot4.size.width = 87\n      dot4.size.height = 43\n    ```", "```go\n      return []dot{dot1, dot2, dot3, dot4}\n    }\n    ```", "```go\n    func main() {\n      dots := getDots()\n      for i := 0; i < len(dots); i++ {\n        fmt.Printf(\"dot%v: %#v\\n\", i+1, dots[i])\n      }\n    }\n    ```", "```go\n    go run .\n    ```", "```go\n    package main\n    import (\n      \"fmt\"\n      \"math\"\n    )\n    ```", "```go\n    func convert() string{\n    ```", "```go\n      var i8 int8 = math.MaxInt8\n      i := 128\n      f64 := 3.14\n    ```", "```go\n      m := fmt.Sprintf(\"int8  = %v > int64  = %v\\n\", i8, int64(i8))\n    ```", "```go\n      m += fmt.Sprintf(\"int   = %v > int8   = %v\\n\", i, int8(i))\n    ```", "```go\n      m += fmt.Sprintf(\"int8  = %v > float32 = %v\\n\", i8, float64(i8))\n    ```", "```go\n      m += fmt.Sprintf(\"float64 = %v > int   = %v\\n\", f64, int(f64))\n    ```", "```go\n      return m\n    }\n    ```", "```go\n    func main() {\n      fmt.Print(convert())\n    }\n    ```", "```go\n    go run .\n    ```", "```go\n// Print formats using the default formats for its operands and writes to standard output.\n// Spaces are added between operands when neither is a string.\n// It returns the number of bytes written and any write error encountered.\nfunc Print(a ...interface{}) (n int, err error) {\n  return Fprint(os.Stdout, a...)\n}\n```", "```go\n    package main\n    import (\n      \"errors\"\n      \"fmt\"\n    )\n    ```", "```go\n    func doubler(v interface{}) (string, error) {\n    ```", "```go\n      if i, ok := v.(int); ok {\n        return fmt.Sprint(i * 2), nil\n      }\n    ```", "```go\n      if s, ok := v.(string); ok {\n        return s + s, nil\n      }\n    ```", "```go\n      return \"\", errors.New(\"unsupported type passed\")\n    }\n    ```", "```go\n    func main() {\n      res, _ := doubler(5)\n      fmt.Println(\"5 :\", res)\n      res, _ = doubler(\"yum\")\n      fmt.Println(\"yum :\", res)\n      _, err := doubler(true)\n      fmt.Println(\"true:\", err)\n    }\n    ```", "```go\n    go run .\n    ```", "```go\nswitch <value> := <value>.(type) {\ncase <type>:\n  <statement>\ncase <type>, <type>:\n  <statement>\ndefault:\n  <statement>\n}\n```", "```go\n    package main\n    import (\n      \"errors\"\n      \"fmt\"\n    )\n    ```", "```go\n    func doubler(v interface{}) (string, error) {\n    ```", "```go\n      switch t := v.(type) {\n    ```", "```go\n      case string:\n       return t + t, nil\n      case bool:\n       if t {\n         return \"truetrue\", nil\n       }\n       return \"falsefalse\", nil\n    ```", "```go\n      case float32, float64:\n       if f, ok := t.(float64); ok {\n         return fmt.Sprint(f * 2), nil\n       }\n    ```", "```go\n      return fmt.Sprint(t.(float32) * 2), nil\n    ```", "```go\n      case int:\n       return fmt.Sprint(t * 2), nil\n      case int8:\n       return fmt.Sprint(t * 2), nil\n      case int16:\n       return fmt.Sprint(t * 2), nil\n      case int32:\n       return fmt.Sprint(t * 2), nil\n      case int64:\n       return fmt.Sprint(t * 2), nil\n      case uint:\n       return fmt.Sprint(t * 2), nil\n      case uint8:\n       return fmt.Sprint(t * 2), nil\n      case uint16:\n       return fmt.Sprint(t * 2), nil\n      case uint32:\n       return fmt.Sprint(t * 2), nil\n      case uint64:\n       return fmt.Sprint(t * 2), nil\n    ```", "```go\n      default:\n      return \"\", errors.New(\"unsupported type passed\")\n      }\n    }\n    ```", "```go\n    func main() {\n      res, _ := doubler(-5)\n      fmt.Println(\"-5 :\", res)\n      res, _ = doubler(5)\n      fmt.Println(\"5 :\", res)\n      res, _ = doubler(\"yum\")\n      fmt.Println(\"yum :\", res)\n      res, _ = doubler(true)\n      fmt.Println(\"true:\", res)\n      res, _ = doubler(float32(3.14))\n      fmt.Println(\"3.14:\", res)\n    }\n    ```", "```go\n    go run .\n    ```"]