["```go\npackage main\nimport (\n  \"fmt\"\n)\nfunc main() {\n  fmt.println(\"Enter your city:\")\n}\n```", "```go\nfmt.println(\"Enter your city:\")\ncannot refer to unexported name fmt.println\nundefined: fmt.println\n```", "```go\n    package main\n    import \"fmt\"\n    ```", "```go\n    func main() {\n      nums := []int{2, 4, 6, 8}\n    ```", "```go\n      total := 0\n      for i := 0; i <= 10; i++ {\n        total += nums[i]\n      }\n    ```", "```go\n      fmt.Println(\"Total: \", total)\n    }\n    ```", "```go\n    Total: 20\n    ```", "```go\n    go build main.go\n    ```", "```go\npackage main\nimport \"fmt\"\nfunc main() {\n  nums := []int{2, 4, 6, 8}\n  total := 0\n  for i := range nums {\n    total += nums[i]\n  }\n  fmt.Println(\"Total: \", total)\n}\n```", "```go\nTake the car\n```", "```go\n    package main\n    import \"fmt\"\n    ```", "```go\n    func main() {\n      km := 2\n      if km > 2 {\n        fmt.Println(\"Take the car\")\n      } else {\n        fmt.Println(\"Going to walk today\")\n      }\n    }\n    ```", "```go\n    go build main.go\n    ```", "```go\nGoing to walk today\n```", "```go\nfunc main() {\n  km := 2\n  if km >= 2 {\n    fmt.Println(\"Take the car\")\n  } else {\n    fmt.Println(\"Going to walk today\")\n  }\n}\n```", "```go\n//java\ntry {\n  // code\n}catch (exception e){\n  // block of code to handle the error\n}\n//python\ntry:\n  //code\nexcept:\n  //code\nelse:\n  try:\n  // code\n  except:\n  // code\nfinally:\n  //code\n```", "```go\nval, err := someFunc() err\nif err != nil{\n  return err\n}\nreturn nil\n```", "```go\n//https://golang.org/pkg/builtin/#error\ntype error interface {\n  Error() string\n}\n```", "```go\npackage main\nimport (\n  \"fmt\"\n  \"strconv\"\n)\nfunc main() {\n  v := \"10\"\n  if s, err := strconv.Atoi(v); err == nil {\n    fmt.Printf(\"%T, %v\\n\", s, s)\n  }else{\n    fmt.Println(err)\n  }\n  v = \"s2\"\n  s, err := strconv.Atoi(v)\n  if err != nil{\n    fmt.Println(s, err)\n  }\n}\n```", "```go\ntype errorString struct {\n    s string\n}\n```", "```go\npackage main\nimport (\n  \"errors\"\n  \"fmt\"\n)\nfunc main() {\n  es := errors.errorString{}\n  es.s = \"slacker\"\n  fmt.Println(es)\n}\n```", "```go\nfunc (e *errorString) Error() string {\n    return e.s\n}\n```", "```go\n// https://golang.org/src/errors/errors.go\n// New returns an error that formats as the given text.\nfunc New(text string) error {\n    return &errorString{text}\n}\n```", "```go\npackage main\nimport (\n    \"errors\"\n    \"fmt\"\n)\nfunc main() {\n     ErrBadData := errors.New(\"Some bad data\")\n     fmt.Printf(\"ErrBadData type: %T\", ErrBadData)\n}\n```", "```go\nvar (\n    ErrBodyNotAllowed = errors.New(\"http: request method or response status code does not allow body\")\n    ErrHijacked = errors.New(\"http: connection has been hijacked\")\n    ErrContentLength = errors.New(\"http: wrote more than the declared Content- Length\")\n    ErrWriteAfterFlush = errors.New(\"unused\")\n)\n```", "```go\n    package main\n    import (\n        \"errors\"\n        \"fmt\"\n    )\n    ```", "```go\n    var (\n         ErrHourlyRate = errors.New(\"invalid hourly rate\")\n         ErrHoursWorked = errors.New(\"invalid hours worked per week\")\n    )\n    ```", "```go\n    func main() {\n        pay, err := payDay(81, 50)\n        if err != nil {\n            fmt.Println(err)\n        }\n    }\n    ```", "```go\n        func payDay(hoursWorked, hourlyRate int) (int, error) {\n            if hourlyRate < 10 || hourlyRate > 75 {\n                return 0, ErrHourlyRate\n        }\n        if hoursWorked < 0 || hoursWorked > 80 {\n            return 0, ErrHoursWorked\n        }\n        if hoursWorked > 40 {\n            hoursOver := hoursWorked - 40\n            overTime := hoursOver * 2\n            regularPay := hoursWorked * hourlyRate\n            return regularPay + overTime, nil\n        }\n        return hoursWorked * hourlyRate, nil\n    }\n    ```", "```go\n    func payDay(hoursWorked, hourlyRate int) (int, error) {\n        if hourlyRate < 10 || hourlyRate > 75 {\n            return 0, ErrHourlyRate\n        }\n        return hoursWorked * hourlyRate, nil\n    }\n    ```", "```go\n    func payDay(hoursWorked, hourlyRate int) (int, error) {\n        if hourlyRate < 10 || hourlyRate > 75 {\n            return 0, ErrHourlyRate\n        }\n        if hoursWorked < 0 || hoursWorked > 80 {\n            return 0, ErrHoursWorked\n        }\n        return hoursWorked * hourlyRate, nil\n    }\n    ```", "```go\n    func payDay(hoursWorked, hourlyRate int) (int, error) {\n        if hourlyRate < 10 || hourlyRate > 75 {\n            return 0, ErrHourlyRate\n        }\n        if hoursWorked < 0 || hoursWorked > 80 {\n            return 0, ErrHoursWorked\n        }\n        if hoursWorked > 40 {\n            hoursOver := hoursWorked - 40\n            overTime := hoursOver * 2\n            regularPay := hoursWorked * hourlyRate\n            return regularPay + overTime, nil\n        }\n        return hoursWorked * hourlyRate, nil\n    }\n    ```", "```go\n    func main() {\n        pay, err := payDay(81, 50)\n        if err != nil {\n            fmt.Println(err)\n        }\n        pay, err = payDay(80, 5)\n        if err != nil {\n            fmt.Println(err)\n        }\n        pay, err = payDay(80, 50)\n        if err != nil {\n            fmt.Println(err)\n        }\n        fmt.Println(pay)\n    }\n    ```", "```go\n    go build main.go\n    ```", "```go\n    ./main\n    ```", "```go\nInvalid hours worked per week\nInvalid hourly rate\n4080\n```", "```go\npackage main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    nums := []int{1, 2, 3}\n    for i := 0; i <= 10; i++ {\n        fmt.Println(nums[i])\n    }\n}\n```", "```go\npackage main\nimport (\n    \"errors\"\n    \"fmt\"\n)\nfunc main() {\n    msg := \"good-bye\"\n     message(msg)\n     fmt.Println(\"This line will not get printed\")\n}\nfunc message(msg string) {\n    if msg == \"good-bye\" {\n        panic(errors.New(\"something went wrong\"))\n    }\n}\n```", "```go\nfunc test() {\n    n := func() {\n    fmt.Println(\"Defer in test\")\n    }\n    defer n()\n    msg := \"good-bye\"\n    message(msg)\n}\nfunc message(msg string) {\n    f := func() {\n    fmt.Println(\"Defer in message func\")\n}\n    defer f()\n    if msg == \"good-bye\" {\n    panic(errors.New(\"something went wrong\"))\n```", "```go\n    package main\n    import (\n        \"fmt\"\n        \"errors\"\n    )\n    var (\n        ErrHourlyRate = errors.New(\"invalid hourly rate\")\n        ErrHoursWorked = errors.New(\"invalid hours worked per week\")\n    )\n    ```", "```go\n    func main() {\n        pay := payDay(81, 50)\n        fmt.Println(pay)\n    }\n    ```", "```go\n    func payDay(hoursWorked, hourlyRate int) int {\n    ```", "```go\n    func payDay(hoursWorked, hourlyRate int) int {\n        report := func() {\n            fmt.Printf(\"HoursWorked: %d\\nHourldyRate: %d\\n\", hoursWorked, hourlyRate)\n        }\n        defer report()\n    }\n    ```", "```go\n        if hourlyRate < 10 || hourlyRate > 75 {\n            panic(ErrHourlyRate)\n        }\n        if hoursWorked < 0 || hoursWorked > 80 {\n            panic(ErrHoursWorked )\n        }\n        if hoursWorked > 40 {\n            hoursOver := hoursWorked – 40\n            overTime := hoursOver * 2\n            regularPay := hoursWorked * hourlyRate\n            return regularPay + overTime\n        }\n        return hoursWorked * hourlyRate\n    }\n    ```", "```go\n    go build main.go\n    ```", "```go\nfunc recover() interface{}\n```", "```go\nfunc main() {\n    a()\n    fmt.Println(\"This line will now get printed from main() function\")\n}\nfunc a() {\n    b(\"good-bye\")\n    fmt.Println(\"Back in function a()\")\n}\nfunc b(msg string) {\n    defer func() {\n        if r := recover(); r!= nil{\n            fmt.Println(\"error in func b()\", r)\n    }\n}()\n```", "```go\n    if msg == \"good-bye\" {\n        panic(errors.New(\"something went wrong\"))\n    }\n    ```", "```go\ndefer func() {\n    if r := recover(); r!= nil {\n        fmt.Println(\"error in func b()\", r)\n    }\n}()\n```", "```go\n    package main\n    import (\n        \"errors\"\n        \"fmt\"\n    )\n    var (\n        ErrHourlyRate = errors.New(\"invalid hourly rate\")\n        ErrHoursWorked = errors.New(\"invalid hours worked per week\")\n    )\n    ```", "```go\n    func main() {\n        pay := payDay(100, 25)\n        fmt.Println(pay)\n        pay = payDay(100, 200)\n        fmt.Println(pay)\n        pay = payDay(60, 25)\n        fmt.Println(pay)\n    }\n    ```", "```go\n    func payDay(hoursWorked, hourlyRate int) int {\n        defer func() {\n    ```", "```go\n            if r := recover(); r != nil {\n               if r == ErrHourlyRate {\n    ```", "```go\n                    fmt.Printf(\"hourly rate: %d\\nerr: %v\\n\\n\", hourlyRate, r)\n                }\n                if r == ErrHoursWorked {\n                    fmt.Printf(\"hours worked: %d\\nerr: %v\\n\\n\", hoursWorked, r)\n                }\n            }\n    ```", "```go\n            fmt.Printf(\"Pay was calculated based on:\\nhours worked: %d\\nhourly Rate: %d\\n\", hoursWorked, hourlyRate)\n        }()\n    ```", "```go\n        if hourlyRate < 10 || hourlyRate > 75 {\n            panic(ErrHourlyRate)\n        }\n        if hoursWorked < 0 || hoursWorked > 80 {\n             panic(ErrHoursWorked)\n        }\n        if hoursWorked > 40 {\n            hoursOver := hoursWorked - 40\n            overTime := hoursOver * 2\n            regularPay := hoursWorked * hourlyRate\n            return regularPay + overTime\n        }\n        return hoursWorked * hourlyRate\n    }\n    ```", "```go\n    go build main.go\n    ```", "```go\n    ./main\n    ```", "```go\n    var ErrExampleNotAllowd= errors.New(\"error example text\")\n    ```", "```go\nfunc readConfig() error {\n    _, err := readFile(\"file.txt\")\n    if err != nil {\n        return errors.Wrap(err, \"failed to read config file\")\n    }\n    return nil\n}\n```", "```go\nreturn fmt.Errorf(\"failed to read config file: %w\", err)\n```", "```go\ninvalid last name\ninvalid routing number\n```"]