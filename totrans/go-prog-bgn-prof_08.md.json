["```go\npackage main\nimport \"fmt\"\nfunc findMaxInt(nums []int) int {\n    if len(nums) == 0 {\n        return -1\n    }\n    max := nums[0]\n    for _, num := range nums {\n        if num > max {\n            max = num\n        }\n    }\n    return max\n}\nfunc main() {\n    max := findMaxInt([]int{1, 32, 5, 8, 10, 11})\n    fmt.Printf(\"max integer value: %v\\n\", max)\n}\n```", "```go\nfunc findMaxFloat(nums []float64) float64 {\n    if len(nums) == 0 {\n        return -1\n    }\n    max := nums[0]\n    for _, num := range nums {\n        if num > max {\n            max = num\n        }\n    }\n    return max\n}\n```", "```go\nfunc findMaxGeneric[Num int | float64](nums []Num) Num {\n    if len(nums) == 0 {\n        return -1\n    }\n    max := nums[0]\n    for _, num := range nums {\n        if num > max {\n            max = num\n        }\n    }\n    return max\n}\n```", "```go\nfunc findMaxGeneric[Num int | float64](nums []Num) Num {\n```", "```go\nmaxGenericInt := findMaxGeneric([]int{1, 32, 5, 8, 10, 11})\n```", "```go\nstring does not satisfy int | float64 (string missing in int | float64)\n```", "```go\nmin value: 1\n```", "```go\nmin value: 1.1\n```", "```go\n    package main\n    ```", "```go\n    import (\n      \"fmt\"\n    )\n    ```", "```go\n    type Number interface {\n        int | float64\n    }\n    ```", "```go\n    func findMaxGeneric[Num Number](nums []Num) Num {\n    ```", "```go\n        if len(nums) == 0 {\n            return -1\n        }\n    ```", "```go\n        max := nums[0]\n    ```", "```go\n        for _, num := range nums {\n    ```", "```go\n            if num > max {\n                max = num\n            }\n    ```", "```go\n        }\n    ```", "```go\n        return max\n    ```", "```go\n    }\n    ```", "```go\n    func main() {\n    ```", "```go\n        maxGenericInt := findMaxGeneric([]int{1, 32, 5, 8, 10, 11})\n        fmt.Printf(\"max generic int: %v\\n\", maxGenericInt)\n        maxGenericFloat := findMaxGeneric([]float64{1.1, 32.1, 5.1, 8.1, 10.1, 11.1})\n        fmt.Printf(\"max generic float: %v\\n\", maxGenericFloat)\n    ```", "```go\n    }\n    ```", "```go\nmax generic int: 32\nmax generic float: 32.1\n```", "```go\n    package main\n    ```", "```go\n    import (\n      \"fmt\"\n    )\n    ```", "```go\n    func FindLargestRanchStock[K comparable, V int | float64](m map[K]V) K {\n    ```", "```go\n        var stock V\n        var name K\n    ```", "```go\n        for k, v := range m {\n            if v > stock {\n                stock = v\n                name = k\n            }\n        }\n    ```", "```go\n        return name\n    ```", "```go\n    }\n    ```", "```go\n    func main() {\n    ```", "```go\n        animalStock := map[string]int{\n            \"Chicken\": 5,\n            \"Cattle\": 20,\n            \"Horses\": 4,\n         }\n        miscStock := map[string]float64{\n            \"Hay\": 5.5,\n            \"Feed\": 1.2,\n            \"Fertilizer\": 4.5,\n         }\n    ```", "```go\n        largestStockOnRanchInt := FindLargestRanchStock(animalStock)\n        fmt.Printf(\"The largest stocked item on the ranch is %s\\n\", largestStockOnRanchInt)\n        largestStockOnRanchFloat := FindLargestRanchStock(miscStock)\n        fmt.Printf(\"The largest stocked item on the ranch is %s\\n\", largestStockOnRanchFloat)\n    ```", "```go\n    }\n    ```", "```go\nThe largest stocked item on the ranch is Cattle\nThe largest stocked item on the ranch is Hay\n```", "```go\nlargestStockOnRanchInt := FindLargestRanchStock(animalStock)\n```", "```go\nlargestStockOnRanchInt := FindLargestRanchStock[string, int](animalStock)\n```"]