["```go\npackage <packageName>\n```", "```go\npackage strings\nimport (\n    \"unicode/utf8\"\n    \"unsafe\"\n)\ntype Builder struct {\n    addr *Builder // of receiver, to detect copies by value\n    buf []byte\n}\n// https://golang.org/src/strings/compare.go\npackage strings\nfunc Compare(a, b string) int {\n    if a == b {\n        return 0\n    }\n    if a < b {\n        return -1\n    }\n    return +1\n}\n```", "```go\npackage main\nimport (\n    \"strings\"\n    \"fmt\"\n)\nfunc main() {\n    str := \"found me\"\n    if strings.Contains(str, \"found\") {\n        fmt.Println(\"value found in str\")\n    }\n}\n```", "```go\nstrings.Contains(str, \"found\")\n```", "```go\n// https://golang.org/src/strings/strings.go\n// Contains reports whether substr is within s.\nfunc Contains(s, substr string) bool {\n    return Index(s, substr) >= 0\n}\n```", "```go\npackage main\nimport (\n    \"fmt\"\n    \"strings\"\n)\nfunc main() {\n    str := \"found me\"\n    slc := strings.explode(str, 3)\n    fmt.Println(slc)\n}\n```", "```go\n1  // https://golang.org/src/strings/strings.go\n2  // explode splits s into a slice of UTF-8 strings,\n3  // one string per Unicode character up to a maximum of n (n < 0 means no limit).\n4  // Invalid UTF-8 sequences become correct encodings of U+FFFD.\n5  func explode(s string, n int) []string {\n6      l := utf8.RuneCountInString(s)\n7      if n < 0 || n > l {\n8          n = l\n9      }\n10      a := make([]string, n)\n11      for i := 0; i < n-1; i++ {\n12          ch, size := utf8.DecodeRuneInString(s)\n13          a[i] = s[:size]\n14          s = s[size:]\n15          if ch == utf8.RuneError {\n16              a[i] = string(utf8.RuneError)\n```", "```go\nimport \"fmt\"\n```", "```go\npackage main\nimport (\n    f \"fmt\")\nfunc main() {\n    f.Println(\"Hello, Gophers\")\n```", "```go\n    f.Println(\"Hello, Gophers\")\n```", "```go\npackage main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    fmt.Println(\"Hello Gophers!\")\n}\n```", "```go\nHello Gophers!\n```", "```go\n    go mod init exercise10.01\n    ```", "```go\n    package shape\n    import \"fmt\"\n    ```", "```go\n    type Shape interface {\n        area() float64\n        name() string\n    }\n    type Triangle struct {\n        Base float64\n        Height float64\n    }\n    type Rectangle struct {\n        Length float64\n        Width float64\n    }\n    type Square struct {\n        Side float64\n    }\n    ```", "```go\n    func PrintShapeDetails(shapes ...Shape) {\n        for _, item := range shapes {\n            fmt.Printf(\"The area of %s is: %.2f\\n\", item.name(), item.area())\n        }\n    }\n    func (t Triangle) area() float64 {\n        return (t.Base * t.Height) / 2\n    }\n    func (t Triangle) name() string {\n        return \"Triangle\"\n    }\n    func (r Rectangle) area() float64 {\n        return r.Length * r.Width\n    }\n    func (r Rectangle) name() string {\n        return \"Rectangle\"\n    }\n    func (s Square) area() float64 {\n        return s.Side * s.Side\n    }\n    func (s Square) name() string {\n        return \"Square\"\n    }\n    ```", "```go\n    func PrintShapeDetails(shapes ...Shape) {\n        for _, item := range shapes {\n            fmt.Printf(\"The area of %s is: %.2f\\n\", item.name(), item.area())\n        }\n    }\n    ```", "```go\n    go build\n    ```", "```go\n    package main\n    ```", "```go\n    import  \"exercise10.01/pkg/shape\"\n    ```", "```go\n    func main() {\n        t := shape.Triangle{Base: 15.5, Height: 20.1}\n        r := shape.Rectangle{Length: 20, Width: 10}\n        s := shape.Square{Side: 10}\n    ```", "```go\n        shape.PrintShapeDetails(t, r, s)\n    }\n    ```", "```go\n    go build\n    ```", "```go\n    ./cmd\n    ```", "```go\nThe area of Triangle is: 155.78\nThe area of Rectangle is: 200.00\nThe area of Square is 100.00\n```", "```go\npackage main\nimport (\n    \"fmt\"\n)\nvar name = \"Gopher\"\nfunc init() {\n    fmt.Println(\"Hello,\", name)\n}\nfunc main() {\n    fmt.Println(\"Hello, main function\")\n}\n```", "```go\nHello, Gopher\nHello, main function\n```", "```go\nvar name = \"Gopher\"\n```", "```go\nfunc init() {\n    fmt.Println(\"Hello,\", name)\n}\n```", "```go\nfunc main() {\n    fmt.Println(\"Hello, main function\")\n}\n```", "```go\npackage main\nimport (\n    \"fmt\"\n)\nvar name = \"Gopher\"\nfunc init(age int) {\n    fmt.Println(\"Hello, \", name)\n}\nfunc main() {\n    fmt.Println(\"Hello, main function\")\n}\n```", "```go\n    package main\n    import \"fmt\"\n    ```", "```go\n    var budgetCategories = make(map[int]string)\n    ```", "```go\n    func init() {\n        fmt.Println(\"Initializing our budgetCategories\")\n        budgetCategories[1] = \"Car Insurance\"\n        budgetCategories[2] = \"Mortgage\"\n        budgetCategories[3] = \"Electricity\"\n        budgetCategories[4] = \"Retirement\"\n        budgetCategories[5] = \"Vacation\"\n        budgetCategories[7] = \"Groceries\"\n        budgetCategories[8] = \"Car Payment\"\n    }\n    ```", "```go\n    func main() {\n        for k, v := range budgetCategories {\n            fmt.Printf(\"key: %d, value: %s\\n\", k, v)\n        }\n    }\n    ```", "```go\nInitializing our budgetCategories\nkey: 5, value: Vacation\nkey: 7, value: Groceries\nkey: 8, value: Car Payment\nkey: 1, value: Car Insurance\nkey: 2, value: Mortgage\nkey: 3, value: Electricity\nkey: 4, value: Retirement\n```", "```go\npackage main\nimport (\n    \"fmt\"\n)\nvar name = \"Gopher\"\nfunc init() {\n    fmt.Println(\"Hello,\", name)\n}\nfunc init() {\n    fmt.Println(\"Second\")\n}\nfunc init() {\n    fmt.Println(\"Third\")\n}\nfunc main() {\n    fmt.Println(\"Hello, main function\")\n}\n```", "```go\nvar name = \"Gopher\"\n```", "```go\nfunc init() {\n    fmt.Println(\"Hello,\", name)\n}\n```", "```go\nfunc init() {\n    fmt.Println(\"Second\")\n}\n```", "```go\nfunc init() {\n    fmt.Println(\"Third\")\n}\n```", "```go\nfunc main() {\n    fmt.Println(\"Hello, main function\")\n}\n```", "```go\nHello, Gopher\nSecond\nThird\nHello, main function\n```", "```go\n    var budgetCategories = make(map[int]string)\n    var payeeToCategory = make(map[string]int)\n    ```", "```go\n    func init() {\n        fmt.Println(\"Initializing our budgetCategories\")\n        budgetCategories[1] = \"Car Insurance\"\n        budgetCategories[2] = \"Mortgage\"\n        budgetCategories[3] = \"Electricity\"\n        budgetCategories[4] = \"Retirement\"\n        budgetCategories[5] = \"Vacation\"\n        budgetCategories[7] = \"Groceries\"\n        budgetCategories[8] = \"Car Payment\"\n    }\n    ```", "```go\n    func main() {\n        fmt.Println(\"In main, printing payee to category\")\n        for k, v := range payeeToCategory {\n            fmt.Printf(\"Payee: %s, Category: %s\\n\", k, budgetCategories[v])\n        }\n    }\n    ```", "```go\nWelcome to the Employee Pay and Performance Review\n++++++++++++++++++++++++++++++++++++++++++++++++++\nInitializing variables\nEric Davis got a review rating of 2.80\nEric Davis got paid 84000.00 for the year\nMr. Boss got paid 160500.00 for the year\n```"]