["```go\npackage main\nimport (\n  \"fmt\"\n  \"time\"\n)\nfunc main(){\n  // this is where the code goes.\n}\n```", "```go\n  start := time.Now()\n  fmt.Println(\"The script has started at: \", start)\n  fmt.Println(\"Saving the world...\")\n  time.Sleep(2 * time.Second)\n  end := time.Now()\n  fmt.Println(\"The script has completed at: \", end)\n```", "```go\nThe script has started at: 2023-09-27 08:19:33.8358274 +0200 CEST m=+0.001998701\nSaving the world...\nThe script has completed at: 2023-09-27 08:19:35.8400169 +0200 CEST m=+2.006161301\n```", "```go\n  day := time.Now().Weekday()\n  hour := time.Now().Hour()\n  fmt.Println(\"Day: \", day, \"Hour: \", hour)\n  if day.String() == \"Monday\"{\n    if hour >= 1{\n      fmt.Println(\"Performing full blown test!\")\n    } else {\n      fmt.Println(\"Performing hit-n-run test!\")\n    }\n  } else { fmt.Println(\"Performing hit-n-run test!\")}\n```", "```go\nDay: Thursday Hour: 14\nPerforming hit-n-run test!\n```", "```go\nDay: Thursday Hour: 14\nPerforming full blown test!\n```", "```go\nApplication_Action_Year_Month_Day\n```", "```go\npackage main \nimport ( \n  \"fmt\" \n  \"strconv\" \n  \"time\" \n) \nfunc main() { \n  appName := \"HTTPCHECKER\" \n  action := \"BASIC\" \n  date := time.Now() \n  logFileName := appName + \"_\" + action + \"_\" + strconv.Itoa(date.Year()) + \"_\" + date.Month().String() + \"_\" + strconv.Itoa(date.Day()) + \".log\" \n  fmt.Println(\"The name of the logfile is \", logFileName) \n} \n```", "```go\nThe name of the logfile is: HTTPCHECKER_BASIC_2024_March_16.log\n```", "```go\nimport \"strconv\"\n```", "```go\n    package main\n    import \"time\"\n    import \"fmt\"\n    ```", "```go\n    func whatstheclock() string {\n      return time.Now().Format(time.ANSIC)\n    }\n    ```", "```go\n    func main(){\n      fmt.Println(whatstheclock())\n    }\n    ```", "```go\n    go run main.go\n    ```", "```go\n    Thu Oct 17 13:56:03 2023\n    ```", "```go\n  now := time.Now()\n  onlAafter, err := time.Parse(time.RFC3339,\"2020-11-01T22:08:41+00:00\")\n  if err != nil {\n    fmt.Println(err)\n  }\n  fmt.Println(now, onlyAfter)\n  fmt.Println(now.After(onlyAfter))\n  if now.After(onlyAfter){\n    fmt.Println(\"Executing actions!\")\n  } else {\n    fmt.Println(\"Now is not the time yet!!\")\n  }\n```", "```go\nNow is not the time yet!!\n```", "```go\nExecuting actions!\n```", "```go\n  now := time.Now()\n  nowToo := now\n  time.Sleep(2*time.Second)\n  later := time.Now()\n  if now.Equal(nowTtoo){\n    fmt.Println(\"The two time variables are equal!\")\n  } else {\n    fmt.Println(\"The two time variables are different!\")\n  }\n  if now.Equal(later) {\n    fmt.Println(\"The two time variables are equal!\")\n  }else{\n    fmt.Println(\"The two time variables are different!\")\n  }\n```", "```go\nThe two time variables are equal!\nThe two time variables are different!\n```", "```go\n  start := time.Now()\n  fmt.Println(\"The script started at: \", start)\n  sum := 0\n  for i := 1; i < 10000000000; i++ {\n    sum += i\n  }\n  end := time.Now()\n  duration := end.Sub(start)\n  fmt.Println(\"The script completed at: \", end)\n  fmt.Println(\"The task took\", duration.Hours(), \"hour(s) to complete!\")\n  fmt.Println(\"The task took\", duration.Minutes(), \"minutes(s) to complete!\")\n  fmt.Println(\"The task took\", duration.Seconds(), \"seconds(s) to complete!\")\n  fmt.Println(\"The task took\", duration.Nanoseconds(), \"nanosecond(s) to complete!\")\n```", "```go\n  deadlineSeconds := time.Duration((600 * 10) * time.Millisecond)\n  start := time.Now()\n  fmt.Println(\"Deadline for the transaction is\", deadlineSeconds)\n  fmt.Println(\"The transaction has started at:\", start)\n  sum := 0\n  for i := 1; i < 25000000000; i++ {\n    sum += i\n  }\n  end := time.Now()\n  duration := end.Sub(start)\n  transactionTime := time.Duration(duration.Nanoseconds()) * time.Nanosecond\n  fmt.Println(\"The transaction has completed at:\", end, duration)\n  if transactionTime <= deadlineSeconds{\n    fmt.Println(\"Performance is OK transaction completed in\", transactionTime)\n  } else{\n    fmt.Println(\"Performance problem, transaction completed in\", transactionTime,\"second(s)!\")\n  }\n```", "```go\n  timeToManipulate := time.Now()\n  toBeAdded := time.Duration(10 * time.Second)\n  fmt.Println(\"The original time:\", timeToManipulate)\n  fmt.Printf(\"%v duration later %v\", toBeAdded, timeToManipulate.Add(toBeAdded))\n```", "```go\nThe original time: 2023-10-18 08:49:53.1499273 +0200 CEST m=+0.001994601\n10s duration later: 2023-10-18 08:50:03.1499273 +0200 CEST m=+10.001994601\n```", "```go\ntoBeAdded := time.Duration(-10 * time.Minute)\n```", "```go\nThe original time: 2023-10-18 08:50:36.5950116 +0200 CEST m=+0.001994401\n-10m0s duration later: 2023-10-18 08:40:36.5950116 +0200 CEST m=+599.998005599\n```", "```go\n    package main\n    import (\n      \"time\"\n      \"fmt\"\n      \"strconv\"\n    )\n    ```", "```go\n    func elapsedTime(start time.Time, end time.Time) string {\n      elapsed := end.Sub(start)\n      hours := strconv.Itoa(int(elapsed.Hours()))\n      minutes := strconv.Itoa(int(elapsed.Minutes()))\n      seconds := strconv.Itoa(int(elapsed.Seconds()))\n      return \"The total execution time elapsed is: \" + hours + \" hour(s) and \" + minutes + \" minute(s) and \" + seconds + \" second(s)!\"\n    }\n    ```", "```go\n    func main(){\n      start := time.Now()\n      time.Sleep(2 * time.Second)\n      end := time.Now()\n      fmt.Println(elapsedTime(start, end))\n    }\n    ```", "```go\n    go run main.go\n    ```", "```go\nThe total execution time elapsed is: 0 hour(s) and 0 minute(s) and 2 second(s)!\n```", "```go\nThe transaction has started at: 2023-09-27 13:50:58.2715452 +0200 CEST m=+0.002992801\n```", "```go\nMon Jan 2 15:04:05 -0700 MST 2006\n0 1 2 3 4 5 6\n```", "```go\n  t1, err := time.Parse(time.RFC3339, \"2019-09-27T22:18:11+00:00\")\n  if err != nil {\n    fmt.Println(err)\n  }\n  t2, err := time.Parse(time.UnixDate, \"2019-09-27T22:18:11+00:00\")\n  if err != nil {\n    fmt.Println(err)\n  }\n  t3, err := time.Parse(time.ANSIC, \"2019-09-27T22:18:11+00:00\")\n  if err != nil {\n    fmt.Println(err)\n  }\n  fmt.Println(\"RFC3339:\", t1)\n  fmt.Println(\"UnixDate\", t2)\n  fmt.Println(\"ANSIC\", t3)\n```", "```go\nparsing time \"2019-09-27T22:18:11+00:00\" as \"Mon Jan _2 15:04:05 MST 2006\": cannot parse \"2019-09-27T22:18:11+00:00\" as \"Mon\"\nparsing time \"2019-09-27T22:18:11+00:00\" as \"Mon Jan _2 15:04:05 2006\": cannot parse \"2019-09-27T22:18:11+00:00\" as \"Mon\"\nRFC3339: 2019-09-27 22:18:11 +0000 +0000\nUnixDate 0001-01-01 00:00:00 +0000 UTC\nANSIC 0001-01-01 00:00:00 +0000 UTC\n```", "```go\ndate := time.Date(2019, 9, 27, 18, 50, 48, 324359102, time.UTC)\nfmt.Println(date)\n```", "```go\nfunc Date(year int, month Month, day, hour, min, sec, nsec int, loc *Location) Time\n```", "```go\n2019-09-27 18:50:48.324359102 +0000 UTC\n```", "```go\ndate := time.Date(2019, 9, 27, 18, 50, 48, 324359102, time.UTC)\nnext Date := date.AddDate(1, 2, 3)\nfmt.Println(next Date)\n```", "```go\n2020-11-30 18:50:48.324359102 +0000 UTC\n```", "```go\n  current := time.Now()\n  losAngeles, err := time.LoadLocation(\"America/Los_Angeles\")\n  if err != nil {\n    fmt.Println(err)\n  }\n  fmt.Println(\"The local current time is:\", current.Format(time.ANSIC))\n  fmt.Println(\"The time in Los Angeles is:\", current.In(losAngeles).Format(time.ANSIC))\n```", "```go\nThe local current time is: Fri Oct 18 08:14:48 2019\nThe time in Los Angeles is: Thu Oct 17 23:14:48 2019\n```", "```go\n    package main\n    import (\n      \"time\"\n      \"fmt\"\n    )\n    ```", "```go\n    func timeDiff(timezone string) (string, string) {\n      current := time.Now()\n      remoteZone, err := time.LoadLocation(timezone) \n      if err != nil {\n        fmt.Println(err)\n    }\n      remoteTime := current.In(remoteZone)\n      fmt.Println(\"The current time is:\", current.Format(time.ANSIC))\n      fmt.Println(\"The timezone:\", timezone,\"time is:\", remoteTime)\n      return current.Format(time.ANSIC), remoteTime.Format(time.ANSIC)\n    }\n    ```", "```go\n    func main(){\n      fmt.Println(timeDiff(\"America/Los_Angeles\"))\n    }\n    ```", "```go\n    go run main.go\n    ```", "```go\nThe current time is: Thu Oct 17 15:37:02 2023\nThe timezone: America/Los_Angeles time is: 2023-10-17 06:37:02.2440679 -0700 PDT\nThu Oct 17 15:37:02 2023 Thu Oct 17 06:37:02 2023\n```", "```go\n    15:32:30 2023/10/17\n    ```", "```go\n2:49:21 2023/1/31\n```", "```go\nThe execution took exactly 2.0016895 seconds!\n```", "```go\nThe current time: Thu Oct 17 15:16:48 2023\n6 hours, 6 minutes and 6 seconds from now the time will be: Thu Oct 17 21:22:54 2023\n```", "```go\nThe local current time is: Thu Oct 17 15:16:13 2023\nThe time in New York is: Thu Oct 17 09:16:13 2023\nThe time in Los Angeles is: Thu Oct 17 06:16:13 2023\n```"]