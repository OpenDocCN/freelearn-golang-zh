["```go\ngo mod init\n```", "```go\ngo get github.com/lib/pq\n```", "```go\npackage main\nimport \"fmt\"\nimport \"database/sql\"\nimport _ \"github.com/lib/pq\"\n// import _ <package name> is a special import statement that tells Go to import a package solely for its side effects.\n```", "```go\ndb, err := sql.Open(\"postgres\", \"user=postgres password=Start!123 host=127.0.0.1 port=5432 dbname=postgres sslmode=disable\")\n```", "```go\nif err != nil {\n  panic(err)\n}else{\n  fmt.Println(\"The connection to the DB was successfully initialized!\")\n}\n```", "```go\nconnectivity := db.Ping()\nif connectivity != nil{\n  panic(err)\n}else{\n  fmt.Println(\"Good to go!\")\n}\n```", "```go\ndb.Close()\n```", "```go\ndefer db.Close()\n```", "```go\nCREATE TABLE table_name (\n  column1 datatype constrain,\n  column2 datatype constrain,\n  column3 datatype constrain,\n  ....\n);\n```", "```go\nTRUNCATE TABLE table_name\n```", "```go\nDROP TABLE table_name\n```", "```go\npackage main\nimport (\n  \"fmt\"\n  \"database/sql\"\n_ \"github.com/lib/pq\"\n)\n```", "```go\nfunc main(){\n  db, err := sql.Open(\"postgres\", \"user=postgres password=Start!123 host=127.0.0.1 port=5432 dbname=postgres sslmode=disable\")\n  if err != nil {\n    panic(err)\n  }else{\n    fmt.Println(\"The connection to the DB was successfully initialized!\")\n  }\n  DBCreate := `\n  CREATE TABLE public.test (\n    id integer,\n    name character varying COLLATE pg_catalog.\"default\"\n  )\n  WITH (\n    OIDS = FALSE\n  )\n`\n  _, err = db.Exec(DBCreate),\n  if err != nil {\n    panic(err)\n  } else{\n    fmt.Println(\"The table was successfully created!\")\n  }\n  db.Close()\n```", "```go\n\"SELECT password FROM Auth WHERE username=<input from user>\"\n```", "```go\n\"SELECT password FROM Auth WHERE username=<input from user> OR '1'='1'\"\n```", "```go\npackage main\n................\n  insert, err := db.Prepare(\"INSERT INTO test VALUES ($1, $2)\")\n  if err != nil {\n    panic(err)\n  }\n  _, err = insert.Exec(2, \"second\")\n  if err != nil {\n    panic(err)\n  }\n  fmt.Println(\"The value was successfully inserted!\")\n  defer db.Close()\n}\n```", "```go\nThe connection to the DB was successfully initialized!\nThe value was successfully inserted!\n```", "```go\n    package main\n    import \"fmt\"\n    import \"database/sql\"\n    import _ \"github.com/lib/pq\"\n    func main(){\n    ```", "```go\n      var property string\n    ```", "```go\n      db, err := sql.Open(\"postgres\", \"user=postgres password=Start!123 host=127.0.0.1 port=5432 dbname=postgres sslmode=disable\")\n      if err != nil {\n        panic(err)\n      }else{\n        fmt.Println(\"The connection to the DB was successfully initialized!\")\n      }\n    ```", "```go\n      TableCreate := `\n    CREATE TABLE Number\n    (\n      Number integer NOT NULL,\n      Property text COLLATE pg_catalog.\"default\" NOT NULL\n    )\n    WITH (\n      OIDS = FALSE\n    )\n    TABLESPACE pg_default;\n    ALTER TABLE Number\n      OWNER to postgres;\n    `\n    ```", "```go\n      _, err = db.Exec(TableCreate)\n      if err != nil {\n        panic(err)\n      } else{\n        fmt.Println(\"The table called Numbers was successfully created!\")\n      }\n    ```", "```go\n      insert, insertErr := db.Prepare(\"INSERT INTO Number VALUES($1,$2)\")\n      if insertErr != nil{\n        panic(insertErr)\n      }\n      for i := 0; i < 100; i++ {\n        if i % 2 == 0{\n          prop = \"Even\"\n        }else{\n          prop = \"Odd\"\n        }\n        _, err = insert.Exec(i,prop)\n        if err != nil{\n          panic(err)\n        }else{\n          fmt.Println(\"The number:\",i,\"is:\",prop)\n        }\n      }\n      insert.Close()\n      fmt.Println(\"The numbers are ready.\")\n    ```", "```go\n      db.Close()\n    }\n    ```", "```go\npackage main\nimport \"fmt\"\nimport \"database/sql\"\nimport _ \"github.com/lib/pq\"\n```", "```go\nfunc main(){\n  var id int\n  var name string\n  db, err := sql.Open(\"postgres\", \"user=postgres password=Start!123 host=127.0.0.1 port=5432 dbname=postgres sslmode=disable\")\n  if err != nil {\n    panic(err)\n  }else{\n    fmt.Println(\"The connection to the DB was successfully initialized!\")\n  }\n  rows, err := db.Query(\"SELECT * FROM test\")\n  if err != nil {\n    panic(err)\n  }\n  for rows.Next() {\n    err := rows.Scan(&id, &name)\n    if err != nil {\n      panic(err)\n    }\n    fmt.Printf(\"Retrieved data from db: %d %s\\n\", id, name)\n  }\n  err = rows.Err()\n  if err != nil {\n    panic(err)\n  }\n  err = rows.Close()\n  if err != nil {\n    panic(err)\n  }\n  db.Close()\n}\n```", "```go\nThe connection to the DB was successfully initialized!\nRetrieved data from db: 2 second\n```", "```go\npackage main\nimport \"fmt\"\nimport \"database/sql\"\nimport _ \"github.com/lib/pq\"\n```", "```go\nfunc main(){\n  var name string\n  var id int\n  id = 2\n  db, err := sql.Open(\"postgres\", \"user=postgres password=Start!123 host=127.0.0.1 port=5432 dbname=postgres sslmode=disable\")\n  if err != nil {\n    panic(err)\n  }else{\n    fmt.Println(\"The connection to the DB was successfully initialized!\")\n  }\n  qryrow, err := db.Prepare(\"SELECT name FROM test WHERE id=$1\")\n  if err != nil{\n    panic(err)\n  }\n  err = qryrow.QueryRow(id).Scan(&name)\n  if err != nil {\n    panic(err)\n  }\n  fmt.Printf(\"The name with id %d is %s\", id, name)\n  err = qryrow.Close()\n  if err != nil {\n    panic(err)\n  }\n  db.Close()\n}\n```", "```go\nThe connection to the DB was successfully initialized!\nThe name with id 2 is second\n```", "```go\npackage main\nimport \"fmt\"\nimport \"database/sql\"\nimport _ \"github.com/lib/pq\"\n```", "```go\nfunc main(){\n  db, err := sql.Open(\"postgres\", \"user=postgres password=Start!123 host=127.0.0.1 port=5432 dbname=postgres sslmode=disable\")\n  if err != nil {\n    panic(err)\n  }else{\n    fmt.Println(\"The connection to the DB was successfully initialized!\")\n  }\n  UpdateStatement :=`\n  UPDATE test\n  SET name = $1\n  WHERE id = $2\n  `\n  updateResult, updateResultErr := db.Exec(updateStatement,\"well\",2)\n  if updateResultErr != nil {\n    panic(updateResultErr)\n  }\n  updatedRecords, updatedRecordsErr := updateResult.RowsAffected()\n  if updatedRecordsErr != nil {\n    panic(UpdatedRecordsErr)\n  }\n  fmt.Println(\"Number of records updated: \",UpdatedRecords)\n  db.Close()\n}\n```", "```go\nThe connection to the DB was successfully initialized!\nNumber of records updated: 1\n```", "```go\n12  DeleteStatement :=`\n13  DELETE FROM test\n14  WHERE id = $1\n15  `\n```", "```go\n  deleteResult, deleteResultErr := db.Exec(deleteStatement,2)\n  if deleteResultErr != nil {\n    panic(deleteResultErr)\n  }\n```", "```go\n  deletedRecords, deletedRecordsErr := deleteResult.RowsAffected()\n  if deletedRecordsErr != nil {\n    panic(deletedRecordsErr)\n  }\n  fmt.Println(\"Number of records deleted: \",deletedRecords)\n```", "```go\nThe connection to the DB was successfully initialized!\nNumber of records deleted: 1\n```", "```go\n    package main\n    import \"fmt\"\n    import \"database/sql\"\n    import _ \"github.com/lib/pq\"\n    import \"math/big\"\n    func main(){\n    ```", "```go\n      var number int64\n      var prop string\n      var primeSum int64\n      var newNumber int64\n    ```", "```go\n      db, err := sql.Open(\"postgres\", \"user=postgres password=Start!123 host=127.0.0.1 port=5432 dbname=postgres sslmode=disable\")\n      if err != nil {\n        panic(err)\n      }else{\n        fmt.Println(\"The connection to the DB was successfully initialized!\")\n      }\n    ```", "```go\n      allTheNumbers := \"SELECT * FROM Number\"\n      numbers, err := db.Prepare(allTheNumbers)\n      if err != nil {\n        panic(err)\n      }\n      primeSum = 0\n      result, err := numbers.Query()\n      fmt.Println(\"The list of prime numbers:\")\n      for result.Next(){\n        err = result.Scan(&number, &prop)\n        if err != nil{\n          panic(err)\n        }\n        if big.NewInt(number).ProbablyPrime(0) {\n          primeSum += number\n          fmt.Print(\" \",number)\n        }\n      }\n      err := numbers.Close()\n      if err != nil{\n        panic(err)\n      }\n    ```", "```go\n      fmt.Println(\"\\nThe total sum of prime numbers in this range is:\", primeSum)\n    ```", "```go\n      remove := \"DELETE FROM Number WHERE Property=$1\"\n      removeResult, err := db.Exec(remove,\"Even\")\n      if err != nil {\n        panic(err)\n      }\n      modifiedRecords, err := removeResult.RowsAffected()\n      fmt.Println(\"The number of rows removed:\",ModifiedRecords)\n      fmt.Println(\"Updating numbers...\")\n    ```", "```go\n      update := \"UPDATE Number SET Number=$1 WHERE Number=$2 AND Property=$3\"\n      allTheNumbers = \"SELECT * FROM Number\"\n      numbers, err = db.Prepare(allTheNumbers)\n      if err != nil {\n        panic(err)\n      }\n      result, err = numbers.Query()\n    for result.Next(){\n        err = result.Scan(&number, &prop)\n        if err != nil{\n          panic(err)\n        }\n        newNumber = number + primeSum\n        _, err = db.Exec(update,newNumber,number,prop)\n        if err != nil {\n          panic(err)\n        }\n      }\n      numbers.Close()\n      if err != nil{\n        panic(err)\n      }\n      fmt.Println(\"The execution is now complete...\")\n    ```", "```go\n      db.Close() \n      }\n    ```", "```go\nemptyTable, emptyTableErr := db.Exec(\"TRUNCATE TABLE test\")\nif emptyTableErr != nil {\n  panic(emptyTableErr)\n}\n```", "```go\ndropTable, dropTableErr := db.Exec(\"DROP TABLE test\")\nif dropTableErr != nil {\n  panic(dropTableErr)\n}\n```", "```go\nimport (\n  \"gorm.io/gorm\"\n  \"gorm.io/driver/postgres\"\n)\n```", "```go\ntype User struct {\n  gorm.Model\n  FirstName  string\n  LastName   string\n  Email      string\n}\n```", "```go\nconnection_string = \"user=postgres password=Start!123 host=127.0.0.1 port=5432 dbname=postgres sslmode=disable\"\ndb, err := gorm.Open(postgres.Open(connection_string), &gorm.Config{})\nif err != nil {\n   panic(\"failed to connect database\")\n}\n```", "```go\ndb.AutoMigrate(&User{})\n```", "```go\nu := &User{FirstName: \"John\", LastName: \"Smith\", Email: \"john.smith@gmail.com\"}\n```", "```go\ndb.Create(u)\n```", "```go\ndb.Create(&User{FirstName: \"John\", LastName: \"Doe\", Email: \"john.doe@gmail.com\"\ndb.Create(&User{FirstName: \"James\", LastName: \"Smith\", Email: \"james.smith@gmail.com\"})\n```", "```go\nvar user User\ndb.First(&user, 1)\n```", "```go\ndb.First(&user, \"last_name = ?\", \"Doe\")\n```", "```go\n\"last_name = ?\" and \"Doe\"\n```", "```go\ndb.First(&user, \"last_name = ? AND first_name= ?\", \"Smith\", \"James\")\n```", "```go\ndb.First(&user, &User{FirstName: \"James\", LastName: \"Smith\"})\n```", "```go\nvar users []User\ndb.Find(&users, &User{LastName: \"Smith\"})\n```", "```go\ntx := db.Find(&users, &User{LastName: \"Smith\"})\nif tx.Error != nil {\n  fmt.Println(tx.Error)\n}\n```"]