["```go\nServeHTTP(w http.ResponseWriter, r *http.Request)\n```", "```go\ntype MyHandler struct {}\nfunc(h MyHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {}\n```", "```go\nhttp.ListenAndServe(\":8080\", MyHandler{})\n```", "```go\nfunc(h MyHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n  _, err := w.Write([]byte(\"HI\"))\n  if err != nil {\n    log.Printf(\"an error occurred: %v\\n\", err)\n    w.WriteHeader(http.StatusInternalServerError)\n  }\n}\n```", "```go\nlog.Fatal(http.ListenAndServe(\":8080\", MyHandler{}))\n```", "```go\n    package main\n    ```", "```go\n    import (\n      \"log\"\n      \"net/http\"\n    )\n    ```", "```go\n    type hello struct{}\n    func(h hello) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n      msg := \"<h1>Hello World</h1>\"\n      w.Write([]byte(msg))\n    }\n    ```", "```go\n    func main() {\n      log.Fatal(http.ListenAndServe(\":8080\", hello{}))\n    }\n    ```", "```go\n    package main\n    import (\n      \"log\"\n      \"net/http\"\n    )\n    type hello struct{}\n    func(h hello) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n      msg := \"<h1>Hello World</h1>\"\n      w.Write([]byte(msg))\n    }\n    func main() {\n      log.Fatal(http.ListenAndServe(\":8080\", hello{}))\n    }\n    ```", "```go\n    go run .\n    ```", "```go\n    http://localhost:8080\n    ```", "```go\nhttp://localhost:8080\nhttp://localhost:8080/hello\nhttp://localhost:8080/chapter1\n```", "```go\nHandleFunc(pattern string, handler func(ResponseWriter, *Request))\n```", "```go\n    package main\n    import (\n      \"log\"\n      \"net/http\"\n    )\n    type hello struct{}\n      func(h hello) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n        msg := \"<h1>Hello World</h1\"\n        w.Write([]byte(msg))\n    }\n    ```", "```go\n    func main() {\n    ```", "```go\n      http.HandleFunc(\"/chapter1\", func(w http.ResponseWriter, r *http.Request) {\n        msg := \"Chapter 1\"\n        w.Write([]byte(msg))\n    })\n    ```", "```go\n        log.Fatal(http.ListenAndServe(\":8080\", hello{}))\n    }\n    ```", "```go\n    go run .\n    ```", "```go\nfunc main() {\n  http.HandleFunc(\"/chapter1\", func(w http.ResponseWriter, r *http.Request) {\n    msg := \"<h1>Chapter 1</h1>\"\n    w.Write([]byte(msg))\n})\n    http.Handle(\"/\", hello{})\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n```", "```go\nhttp.Handle(\"/\", hello{})\n```", "```go\n  http.HandleFunc(\"/chapter1\", func(w http.ResponseWriter, r *http.Request) {\n    msg := \"Chapter 1\"\n    w.Write([]byte(msg))\n})\n```", "```go\nServeHTTP(w http.ResponseWriter, r *http.Request)\n```", "```go\nhttp.HandleFunc(\n  \"/hello1\",\n  func(w http.ResponseWriter,\n  r *http.Request,\n){\n  msg := \"Hello there, this is function 1\"\n  w.Write([]byte(msg))\n})\nhttp.HandleFunc(\n  \"/hello2\",\n  func(w http.ResponseWriter,\n  r *http.Request,\n){\n  msg := \"Hello there, and now we are in function 2\"\n  w.Write([]byte(msg))\n})\n```", "```go\nfunc Hello(next http.HandlerFunc) http.HandlerFunc {\n  return func(w http.ResponseWriter, r *http.Request) {\n    msg := \"Hello there,\"\n    w.Write([]byte(msg))\n    next.ServeHTTP(w, r)\n  }\n}\n```", "```go\nfunc Hello(next http.HandlerFunc) http.HandlerFunc\n```", "```go\n  return func(w http.ResponseWriter, r *http.Request) {\n    msg := \"Hello there,\"\n    w.Write([]byte(msg))\n    next.ServeHTTP(w, r)\n  }\n```", "```go\nfunc Function1(w http.ResponseWriter,\n  r *http.Request,\n) {\n  msg := \" this is function 1\"\n  w.Write([]byte(msg))\n}\nfunc Function2(w http.ResponseWriter,\n  r *http.Request,\n) {\n  msg := \" and now we are in function 2\"\n  w.Write([]byte(msg))\n}\n```", "```go\npackage main\nimport (\n  \"log\"\n  \"net/http\"\n)\nfunc Hello(next http.HandlerFunc) http.HandlerFunc {\n  return func(w http.ResponseWriter, r *http.Request) {\n    msg := \"Hello there,\"\n    w.Write([]byte(msg))\n    next.ServeHTTP(w, r)\n  }\n}\nfunc Function1(w http.ResponseWriter,\n  r *http.Request,\n) {\n  msg := \" this is function 1\"\n  w.Write([]byte(msg))\n}\nfunc Function2(w http.ResponseWriter,\n  r *http.Request,\n) {\n  msg := \" and now we are in function 2\"\n  w.Write([]byte(msg))\n}\n```", "```go\nfunc main() {\n  http.HandleFunc(\n    \"/hello1\", Function1)\n  http.HandleFunc(\n    \"/hello2\", Function2)\n  log.Fatal(http.ListenAndServe(\":8085\", nil))\n}\n```", "```go\nfunc main() {\n  http.HandleFunc(\n    \"/hello1\", Hello(Function1))\n  http.HandleFunc(\n    \"/hello2\", Hello(Function2))\n  log.Fatal(http.ListenAndServe(\":8085\", nil))\n}\n```", "```go\nHello(Middleware2(Middleware3((Function2)))\n```", "```go\nhttp://localhost:8080\n```", "```go\nhttp://localhost:8080?name=john\n```", "```go\n    package main\n    ```", "```go\n    import (\n      \"fmt\"\n      \"log\"\n      \"net/http\"\n      \"strings\"\n    )\n    ```", "```go\n    func Hello(w http.ResponseWriter, r *http.Request) {\n    ```", "```go\n      vl := r.URL.Query()\n    ```", "```go\n      name, ok := vl[\"name\"]\n    ```", "```go\n      if !ok {\n        w.WriteHeader(400)\n        w.Write([]byte(\"Missing name\"))\n        return\n      }\n    ```", "```go\n      w.Write([]byte(fmt.Sprintf(\"Hello %s\", strings.Join(name, \",\"))))\n    }\n    ```", "```go\n    func main() {\n      http.HandleFunc(\"/\", Hello)\n      log.Fatal(http.ListenAndServe(\":8080\", nil))\n    }\n    ```", "```go\n{{name}}\n```", "```go\n{{if age}} Hello {{else}} bye {{end}}\n```", "```go\n{{.ID}}\n```", "```go\n    package main\n    import (\n      \"html/template\"\n      \"log\"\n      \"net/http\"\n      \"strconv\"\n      \"strings\"\n    )\n    ```", "```go\n    var tplStr = `\n    <html>\n      <h1>Customer {{.ID}}</h1>\n      {{if .ID }}\n       <p>Details:</p>\n       <ul>\n       {{if .Name}}<li>Name: {{.Name}}</li>{{end}}\n       {{if .Surname}}<li>Surname: {{.Surname}}</li>{{end}}\n       {{if .Age}}<li>Age: {{.Age}}</li>{{end}}\n       </ul>\n      {{else}}\n      <p>Data not available</p>\n      {{end}}\n    </html>\n    `\n    ```", "```go\n    type Customer struct {\n      ID int\n      Name string\n      Surname string\n      Age int\n    }\n    ```", "```go\n    func Hello(w http.ResponseWriter, r *http.Request) {\n      vl := r.URL.Query()\n    ```", "```go\n      cust := Customer{}\n    ```", "```go\n      id, ok := vl[\"id\"]\n      if ok {\n        cust.ID, _ = strconv.Atoi(strings.Join(id, \",\"))\n      }\n      name, ok := vl[\"name\"]\n      if ok {\n        cust.Name = strings.Join(name, \",\")\n      }\n      surname, ok := vl[\"surname\"]\n      if ok {\n        cust.Surname = strings.Join(surname, \",\")\n      }\n      age, ok := vl[\"age\"]\n      if ok {\n        cust.Age, _ = strconv.Atoi(strings.Join(age, \"\"))\n      }\n    ```", "```go\n        cust.Age, _ = strconv.Atoi(strings.Join(age, \"\"))\n    ```", "```go\n      tmpl, _ := template.New(\"test\").Parse(tplStr)\n    ```", "```go\n      tmpl.Execute(w, cust)\n    }\n    ```", "```go\n    func main() {\n      http.HandleFunc(\"/\", Hello)\n      log.Fatal(http.ListenAndServe(\":8080\", nil))\n    }\n    ```", "```go\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Welcome</title>\n    </head>\n    <body>\n      <h1>Hello World</h1>\n    </body>\n    </html>\n    ```", "```go\n    package main\n    import (\n      \"log\"\n      \"net/http\"\n    )\n    ```", "```go\n    func main() {\n    ```", "```go\n      http.HandleFunc(\"/\", func (w http.ResponseWriter, r *http.Request) {\n        http.ServeFile(w, r, \"./index.html\")\n      })\n    ```", "```go\n        http.ServeFile(w, r, \"./index.html\")\n    ```", "```go\n        log.Fatal(http.ListenAndServe(\":8080\", nil))\n    }\n    ```", "```go\n    go run main.go\n    ```", "```go\n        <h1>Hello World</h1>\n    ```", "```go\n        <h1>Hello Galaxy</h1>\n    ```", "```go\n<link rel=\"stylesheet\" href=\"file.css\">\n```", "```go\nhttp.FileServer(http.Dir(\"./public\"))\n```", "```go\nhttp://localhost:8080/public/myfile.css\n```", "```go\nhttp.StripPrefix(\n  \"/statics/\",\n  http.FileServer(http.Dir(\"./public\")),\n)\n```", "```go\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Welcome</title>\n      <link rel=\"stylesheet\" href=\"/statics/body.css\">\n      <link rel=\"stylesheet\" href=\"/statics/header.css\">\n      <link rel=\"stylesheet\" href=\"/statics/text.css\">\n    </head>\n    <body>\n      <h1>Hello World</h1>\n      <p>May I give you a warm welcome</p>\n    </body>\n    </html>\n    ```", "```go\n    header.css\n    h1 {\n      color: brown;\n    }\n    body.css\n    body {\n      background-color: beige;\n    }\n    text.css\n    p {\n      color: coral;\n    }\n    ```", "```go\n    package main\n    import (\n      \"log\"\n      \"net/http\"\n    )\n    func main() {\n      http.HandleFunc(\"/\", func (w http.ResponseWriter, r *http.Request) {\n        http.ServeFile(w, r, \"./index.html\")\n      })\n    ```", "```go\n      http.Handle(\n        \"/statics/\",\n        http.StripPrefix(\n        \"/statics/\",\n        http.FileServer(http.Dir(\"./public\")),\n      ),\n    )\n    ```", "```go\n      http.Dir(\"./statics\")\n    ```", "```go\n      log.Fatal(http.ListenAndServe(\":8080\", nil))\n    }\n    ```", "```go\n    go run main.go\n    ```", "```go\n    <link rel=\"stylesheet\" href=\"/statics/body.css\">\n    <link rel=\"stylesheet\" href=\"/statics/header.css\">\n    <link rel=\"stylesheet\" href=\"/statics/text.css\">\n    ```", "```go\nfunc ParseFiles(filenames ...string) (*Template, error)\n```", "```go\ntemplate.ParseFiles(\"mytemplate.html\")\n```", "```go\nmytemplate.html\n<h1>{{.Text}}</h1>\n```", "```go\npackage main\nimport (\n  \"html/template\"\n  \"log\"\n  \"net/http\"\n)\nfunc main() {\n  t, _ := template.ParseFiles(\"mytemplate.html\")\n  http.HandleFunc(\n    \"/hello1\", func(w http.ResponseWriter,\n      r *http.Request,\n    ) {\n      data := struct {\n        text string\n      }{\n        text: \"Hello there\",\n      }\n      t.Execute(w, data)\n    })\n  log.Fatal(http.ListenAndServe(\":8085\", nil))\n}\n```", "```go\npackage main\nimport (\n  _ \"embed\"\n  \"html/template\"\n  \"log\"\n  \"net/http\"\n)\n//go:embed mytemplate.html\nvar s string\nfunc main() {\n  t, _ := template.New(\"mytemplate\").Parse(s)\n  http.HandleFunc(\n    \"/hello1\", func(w http.ResponseWriter,\n      r *http.Request,\n    ) {\n      data := struct {\n        text string\n      }{\n        text: \"Hello there\",\n      }\n      t.Execute(w, data)\n    })\n  log.Fatal(http.ListenAndServe(\":8085\", nil))\n}\n```", "```go\n_ \"embed\"\n//go:embed mytemplate.html\nvar s string\nt, _ := template.New(\"mytemplate\").Parse(s)\n```"]