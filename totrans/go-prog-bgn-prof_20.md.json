["```go\ngo build -o name_of_the_binary_to_create source_file.go\n```", "```go\n    go mod init\n    go mod tidy\n    ```", "```go\n    package main\n    import \"fmt\"\n    func main() {\n      fmt.Println(\"Hello World\")\n    }\n    ```", "```go\n    go build -o hello_world main.go\n    ```", "```go\n    ./hello_world\n    ```", "```go\nHello World\n```", "```go\ngo run source_file.go\n```", "```go\n    go mod init\n    go mod tidy\n    ```", "```go\n    package main\n    import \"fmt\"\n    func main() {\n      fmt.Println(\"Hello Packt\")\n    }\n    ```", "```go\n    go run main.go\n    ```", "```go\nHello Packt\n```", "```go\n    go mod init\n    go mod tidy\n    ```", "```go\n    package main\n    import \"fmt\"\n    func main(){\n      firstVar := 1\n      secondVar := 2\n      fmt.Println(firstVar)\n      fmt.Println(secondVar)\n      fmt. Println(\"Hello Packt\")\n    }\n    ```", "```go\n    gofmt main.go\n    ```", "```go\n    gofmt -w main.go\n    ```", "```go\n    package main\n    import \"fmt\"\n    func main() {\n      firstVar := 1\n      secondVar := 2\n      fmt.Println(firstVar)\n      fmt.Println(secondVar)\n      fmt.Println(\"Hello Packt\")\n    }\n    ```", "```go\n    go mod init\n    go mod tidy\n    ```", "```go\n    package main\n    import (\n      \"net/http\"\n      \"fmt\"\n    )\n    func main() {\n      fmt.Println(\"Hello\")\n      log.Println(\"Packt\")\n    }\n    ```", "```go\n    goimports main.go\n    ```", "```go\n    goimports -w main.go\n    ```", "```go\n    package main\n    import (\n      \"fmt\"\n      \"log\"\n    )\n    func main() {\n      fmt.Println(\"Hello\")\n      log.Println(\"Packt\")\n    }\n    ```", "```go\n    go mod init\n    go mod tidy\n    ```", "```go\n    package main\n    import \"fmt\"\n    func main() {\n      helloString := \"Hello\"\n      packtString := \"Packt\"\n      jointString := fmt.Sprintf(\"%s\", helloString, packtString)\n      fmt.Println(jointString)\n    }\n    ```", "```go\n    go vet main.go\n    ```", "```go\n    package main\n    import \"fmt\"\n    func main() {\n      helloString := \"Hello\"\n      packtString := \"Packt\"\n      jointString := fmt.Sprintf(\"%s %s\", helloString, packtString)\n      fmt.Println(jointString)\n    }\n    ```", "```go\n    go vet main.go\n    ```", "```go\n    go run main.go\n    ```", "```go\nHello Packt\n```", "```go\n    go mod init\n    go mod tidy\n    ```", "```go\n    package main\n    import \"fmt\"\n    func main() {\n      finished := make(chan bool)\n      names := []string{\"Packt\"}\n      go func() {\n        names = append(names, \"Electric\")\n        names = append(names, \"Boogaloo\")\n        finished <- true\n      }()\n      for _, name := range names {\n        fmt.Println(name)\n      }\n      <-finished\n    }\n    ```", "```go\n    go run --race main.go\n    ```", "```go\nPackt\n==================\nWARNING: DATA RACE\nWrite at 0x00c0000aa000 by goroutine 6:\n  main.main.func1()\n      /Users/samcoyle/go/src/github.com/packt-book/Go-Programming---From-Beginner-to-Professional-Second-Edition-/Chapter20/Exercise20.06/main.go:10 +0xe0\nPrevious read at 0x00c0000aa000 by main goroutine:\n  main.main()\n      /Users/samcoyle/go/src/github.com/packt-book/Go-Programming---From-Beginner-to-Professional-Second-Edition-/Chapter20/Exercise20.06/main.go:14 +0x170\nGoroutine 6 (running) created at:\n  main.main()\n      /Users/samcoyle/go/src/github.com/packt-book/Go-Programming---From-Beginner-to-Professional-Second-Edition-/Chapter20/Exercise20.06/main.go:9 +0x168\n==================\nFound 1 data race(s)\nexit status 66\n```", "```go\n  names = append(names, \"Electric\")\n  for _, name := range names {\n```", "```go\n      <-finished\n      for _, name := range names {\n        fmt.Println(name)\n      }\n    ```", "```go\n    go run --race main.go\n    ```", "```go\n    Packt\n    Electric\n    Boogaloo\n    ```", "```go\n    package main\n    import \"fmt\"\n    func main() {\n      finished := make(chan bool)\n      names := []string{\"Packt\"}\n      go func() {\n        names = append(names, \"Electric\")\n        names = append(names, \"Boogaloo\")\n        finished <- true\n      }()\n      <-finished\n      for _, name := range names {\n        fmt.Println(name)\n      }\n    }\n    ```", "```go\n    go mod init\n    go mod tidy\n    ```", "```go\n    package main\n    import \"fmt\"\n    // Add returns the total of two integers added together\n    func Add(a, b int) int {\n      return a + b\n    }\n    // Multiply returns the total of one integer multiplied by the other\n    func Multiply(a, b int) int {\n      return a * b\n    }\n    func main() {\n      fmt.Println(Add(1, 1))\n      fmt.Println(Multiply(2, 2))\n    }\n    ```", "```go\n    go run main.go\n    ```", "```go\n    2\n    4\n    ```", "```go\n    go doc -all\n    ```", "```go\n    go mod init\n    go mod tidy\n    ```", "```go\n    package main\n    import (\n      \"fmt\"\n      \"log\"\n      \"net/http\"\n      \"github.com/gorilla/mux\"\n    )\n    func exampleHandler(w http.ResponseWriter, r *http.Request) {\n      w.WriteHeader(http.StatusOK)\n      fmt.Fprintf(w, \"Hello Packt\")\n    }\n    func main() {\n      r := mux.NewRouter()\n      r.HandleFunc(\"/\", exampleHandler)\n      log.Fatal(http.ListenAndServe(\":8888\", r))\n    }\n    ```", "```go\n    go run main.go\n    ```", "```go\n    main.go:8:2: no required module provides package github.com/gorilla/mux; to add it:\n       go get github.com/gorilla/mux\n    ```", "```go\n    go get github.com/gorilla/mux\n    ```", "```go\n    go run main.go\n    ```", "```go\npackage main\nimport (\n  \"log\"\n  \"fmt\"\n  \"github.com/gorilla/mux\"\n)\n// ExampleHandler handles the http requests sent to this webserver\nFunc ExampleHandler(w http.ResponseWriter, r *http.Request) {\n  w.WriteHeader(http.StatusOK)\n  fmt.Fprintf(w, \"Hello Packt\")\n  return\n  log.Println(\"completed\")\n}\nfunc main() {\n  r := mux.NewRouter()\n  r.HandleFunc(\"/\", ExampleHandler)\n  log.Fatal(http.ListenAndServe(\":8888\", r))\n}\n```"]