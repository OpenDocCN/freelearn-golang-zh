- en: '20'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '20'
- en: Using Go Tools
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Go 工具
- en: Overview
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: This chapter will teach you how to make use of the Go toolkit so that you can
    improve and build your code. It will also help you build and improve your code
    using Go tools and create binaries using `go build`. Furthermore, you’ll learn
    how to clean up library imports using `goimports`, detect suspicious constructs
    with `go vet`, and identify race conditions in your code using the Go race detector.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将教你如何利用 Go 工具来提高和构建你的代码。它还将帮助你使用 Go 工具构建和改进代码，并使用 `go build` 创建二进制文件。此外，你还将学习如何使用
    `goimports` 清理库导入，使用 `go vet` 检测可疑结构，以及使用 Go 竞态检测器识别代码中的竞态条件。
- en: By the end of this chapter, you will be able to run code with `go run`, format
    code with `gofmt`, automatically generate documentation using `go doc`, and download
    third-party packages using `go get`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够使用 `go run` 运行代码，使用 `gofmt` 格式化代码，使用 `go doc` 自动生成文档，以及使用 `go get`
    下载第三方包。
- en: Technical requirements
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, you’ll require Go version 1.21 or higher. The code for this
    chapter can be found at [https://github.com/PacktPublishing/Go-Programming-From-Beginner-to-Professional-Second-Edition-/tree/main/Chapter20](https://github.com/PacktPublishing/Go-Programming-From-Beginner-to-Professional-Second-Edition-/tree/main/Chapter20).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，你需要 Go 版本 1.21 或更高版本。本章的代码可以在[https://github.com/PacktPublishing/Go-Programming-From-Beginner-to-Professional-Second-Edition-/tree/main/Chapter20](https://github.com/PacktPublishing/Go-Programming-From-Beginner-to-Professional-Second-Edition-/tree/main/Chapter20)找到。
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In the previous chapters, you learned how to produce concurrent and well-tested
    code. Although Go makes the task of creating concurrent and tested code much easier
    compared to other languages, these tasks can be intrinsically complex. This is
    when learning to use tools to write better code that will simplify the complexity
    comes in handy.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，你学习了如何生成并发和经过良好测试的代码。虽然与其它语言相比，Go 使得创建并发和经过良好测试的代码任务变得更加容易，但这些任务本质上可能很复杂。这就是学习使用工具来编写更好的代码，从而简化复杂性的时候。
- en: In this chapter, you will learn about Go tools. Go comes with several tools
    to help you write better code. For example, in the previous chapters, you came
    across `go build`, which you used to build your code into an executable. You also
    came across `go test`, which you used to test your code. There are also a few
    more tools that help in different ways. For example, the `goimports` tool will
    check if you have all the import statements required for your code to work and
    if not, it will add them. It can also check if any of your import statements are
    no longer needed and remove them. While this seems like a very simple thing, it
    means you no longer need to worry about the imports and can instead focus on the
    code you are writing. Alternatively, you can use the Go race detector to find
    race conditions hidden in your code. This is an extremely valuable tool when you
    start writing concurrent code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解 Go 工具。Go 提供了几个工具来帮助你编写更好的代码。例如，在前面的章节中，你遇到了 `go build`，你用它来将代码构建成可执行文件。你还遇到了
    `go test`，你用它来测试你的代码。还有一些其他工具以不同的方式提供帮助。例如，`goimports` 工具将检查你是否有了使代码正常工作所需的所有导入语句，如果没有，它将添加它们。它还可以检查是否有任何导入语句不再需要，并删除它们。虽然这看起来很简单，但它意味着你不再需要担心导入，而可以专注于你正在编写的代码。或者，你可以使用
    Go 竞态检测器来查找代码中隐藏的竞态条件。当你开始编写并发代码时，这是一个极其宝贵的工具。
- en: The tools provided with the Go language are one of the reasons for its popularity.
    They provide a standard way to check code for formatting issues, mistakes, and
    race conditions, which is very useful when you are developing software in a professional
    setting. The exercises in this chapter provide practical examples of how to use
    these tools to improve your code.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Go 语言提供的工具是它受欢迎的原因之一。它们提供了一种标准方式来检查代码的格式问题、错误和竞态条件，这在专业环境中开发软件时非常有用。本章的练习提供了如何使用这些工具来改进代码的实际示例。
- en: The go build tool
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: go build 工具
- en: The `go build` tool takes Go source code and compiles it so that it can be executed.
    When creating software, you write code in a human-readable programming language.
    Then, the code needs to be translated into a machine-readable format so that it
    can be executed. This is done by a compiler that compiles the machine instructions
    from the source code. To do this with Go code, you can use `go build`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`go build`工具将Go源代码编译成可执行格式。在创建软件时，你用人类可读的编程语言编写代码。然后，代码需要被转换成机器可读的格式以便执行。这是通过编译器完成的，它将机器指令从源代码编译出来。要使用Go代码完成此操作，你可以使用`go
    build`。'
- en: Exercise 20.01 – using the go build tool
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习20.01 – 使用`go build`工具
- en: 'In this exercise, you will learn about the `go build` tool. This will take
    your Go source code and compile it into a binary. To use it, run the `go build`
    tool on the command line while using the `–o` flag to specify the output file
    or executable name:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将了解`go build`工具。这个工具会将你的Go源代码编译成一个二进制文件。要使用它，请在命令行上运行`go build`工具，并使用`–o`标志来指定输出文件或可执行文件名：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If the `–o` flag is omitted, the output file will be named by the package or
    folder that contains the source file.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果省略了`–o`标志，输出文件将使用包含源文件的包或文件夹命名。
- en: 'Let’s get started:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧：
- en: Create a new directory called `Exercise20.01`. Within that directory, create
    a new file called `main.go`.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Exercise20.01`的新目录。在该目录内，创建一个名为`main.go`的新文件。
- en: 'Run the following two commands to create the Go module for the exercise:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下两个命令来创建练习的Go模块：
- en: '[PRE1]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the following code to the file to create a simple `Hello` `World` program:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文件中，以创建一个简单的`Hello` `World`程序：
- en: '[PRE2]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To run the program, you need to open your Terminal and navigate to the directory
    that you created the `main.go` file in. Then, run the `go build` tool by writing
    the following:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行程序，你需要打开你的终端并导航到创建`main.go`文件的目录。然后，通过编写以下内容来运行`go build`工具：
- en: '[PRE3]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will create an executable called `hello_world` that you can execute the
    binary in by running it on the command line:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将创建一个名为`hello_world`的可执行文件，你可以通过在命令行上运行它来执行这个二进制文件：
- en: '[PRE4]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output will look as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this exercise, you used the `go build` tool to compile your code into a binary
    and execute it.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你使用了`go build`工具将你的代码编译成二进制文件并执行它。
- en: The go run tool
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`go run`工具'
- en: The `go run` tool is similar to `go build` in that it compiles your Go code.
    However, the subtle difference is that `go build` will output a binary file that
    you can execute, whereas the `go run` tool doesn’t create a binary file that you
    need to execute. It compiles the code and runs it in a single step, with no binary
    file output in the end. This can be useful if you want to quickly check that your
    code does what you expect it to do, without the need to create and run a binary
    file. This would be commonly used when you’re testing your code so that you can
    run it quickly without needing to create a binary to execute.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`go run`工具与`go build`类似，因为它也会编译Go代码。然而，细微的区别在于`go build`会输出一个二进制文件，你可以执行它，而`go
    run`工具不会创建一个需要执行的二进制文件。它将代码编译并运行，最终没有二进制文件输出。如果你想要快速检查代码是否按预期工作，而不需要创建和运行二进制文件，这很有用。这在测试代码时常用，这样你可以快速运行代码，而无需创建执行二进制文件。'
- en: Exercise 20.02 – using the go run tool
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习20.02 – 使用`go run`工具
- en: 'In this exercise, you will learn about the `go run` tool. This is used as a
    shortcut to compile and run your code in a single step, which is useful if you
    want to quickly check that your code works. To use it, run the `go run` tool on
    the command line in the following format:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将了解`go run`工具。这个工具可以用作编译和运行代码的单步快捷方式，如果你想要快速检查代码是否工作，这很有用。要使用它，请在命令行上按照以下格式运行`go
    run`工具：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Perform the following steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: Create a new directory called `Exercise20.02`. Within that directory, create
    a new file called `main.go`.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Exercise20.02`的新目录。在该目录内，创建一个名为`main.go`的新文件。
- en: 'Run the following two commands to create the Go module for this exercise:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下两个命令来创建这个练习的Go模块：
- en: '[PRE7]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add the following code to the file to create a simple `Hello` `Packt` program:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文件中，以创建一个简单的`Hello` `Packt`程序：
- en: '[PRE8]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, you can run the program using the `go` `run` tool:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以使用`go run`工具来运行程序：
- en: '[PRE9]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will execute the code and run it all in one step, giving you the following
    output:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这将执行代码并在一步中运行它，给出以下输出：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this exercise, you used the `go run` tool to compile and run a simple Go
    program in a single step. This is useful to quickly check whether your code does
    what you expect.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你使用了`go run`工具一次性编译和运行一个简单的Go程序。这有助于快速检查你的代码是否按预期工作。
- en: The gofmt tool
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: gofmt工具
- en: The `gofmt` tool is used to keep your code neat and consistently styled. When
    working on a large software project, an important but often overlooked factor
    is code style. Having a consistent code style throughout your project is important
    for readability. When you must read someone else’s code, or even your own code
    months after writing it, having it in a consistent style makes you focus on the
    logic without much effort. Having to parse differing styles when reading code
    is just one more thing to worry about and leads to mistakes. To overcome this
    issue, Go comes with a tool to automatically format your code in a consistent
    way called `gofmt`. This means that, across your project, and even across other
    Go projects that use the `gofmt` tool, the code will be consistent. So, it will
    fix the formatting of the code by correcting the spacing and indentation, as well
    as trying to align the sections of your code.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`gofmt`工具用于保持你的代码整洁和一致的风格。在大型软件项目中，一个重要但经常被忽视的因素是代码风格。在整个项目中保持一致的代码风格对于可读性很重要。当你必须阅读他人的代码，或者甚至几个月后阅读自己写的代码时，保持一致的样式可以使你无需太多努力就能专注于逻辑。在阅读代码时解析不同的样式只是又一件需要担心的事情，并可能导致错误。为了克服这个问题，Go自带了一个工具，可以自动以一致的方式格式化你的代码，称为`gofmt`。这意味着在你的项目以及使用`gofmt`工具的其他Go项目中，代码将保持一致。因此，它将通过纠正间距和缩进来修复代码的格式，并尝试对齐你的代码的各个部分。'
- en: Exercise 20.03 – using the gofmt tool
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习20.03 – 使用gofmt工具
- en: 'In this exercise, you’ll learn how to use the `gofmt` tool to format your code.
    When you run the `gofmt` tool, it will display how it thinks the file should look
    with the correct formatting, but it won’t change the file. If you would like `gofmt`
    to automatically change the file to the correct format, you can run `gofmt` with
    the `-w` option, which will update the file and save the changes. Let’s get started:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将学习如何使用`gofmt`工具格式化你的代码。当你运行`gofmt`工具时，它将显示它认为文件应该如何看起来，具有正确的格式，但它不会更改文件。如果你想让`gofmt`自动将文件更改为正确的格式，你可以使用带有`-w`选项的`gofmt`，这将更新文件并保存更改。让我们开始吧：
- en: Create a new directory called `Exercise20.03`. Within that directory, create
    a new Go file called `main.go`.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Exercise20.03`的新目录。在该目录中，创建一个名为`main.go`的新Go文件。
- en: 'Run the following two commands to create the Go module for this exercise:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下两个命令以创建此练习的Go模块：
- en: '[PRE11]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add the following code to the file to create a badly formatted `Hello` `Packt`
    program:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文件中，以创建一个格式错误的 `Hello` `Packt` 程序：
- en: '[PRE12]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, in your Terminal, run `gofmt` to see what the file will look like:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在你的终端中运行`gofmt`以查看文件将看起来如何：
- en: '[PRE13]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This will display how the file should be formatted to make it correct. Here
    is the expected output:'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将显示文件应该如何格式化才能使其正确。以下是预期的输出：
- en: '![Figure 20.1: Expected output from gofmt](img/B18621_20_1.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图20.1：gofmt的预期输出](img/B18621_20_1.jpg)'
- en: 'Figure 20.1: Expected output from gofmt'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.1：gofmt的预期输出
- en: However, this only shows the changes it would make; it doesn’t change the file.
    This is so that you can confirm you are happy with the changes it will make.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这仅显示它将做出的更改；它不会更改文件。这样做是为了你可以确认你对这些更改感到满意。
- en: 'To change the file and save those changes, you need to add the `-``w` option:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要更改文件并保存这些更改，你需要添加`-w`选项：
- en: '[PRE14]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This will update the file and save the changes. Then, when you look at the
    file, it should look like this:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将更新文件并保存更改。然后，当你查看文件时，它应该看起来像这样：
- en: '[PRE15]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You may observe that the badly formatted code has been realigned after using
    the `gofmt` tool. The spacing and indentation have been fixed, and the new line
    between `func` and `main()` has been removed.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会观察到，在`gofmt`工具使用后，格式错误的代码已经被重新对齐。间距和缩进已经被修复，`func`和`main()`之间的新行已经被删除。
- en: Note
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Many `gofmt` on your code when you save. It is worth researching how to do this
    with your chosen IDE so that the `gofmt` tool will run automatically and fix any
    spacing or indentation mistakes in your code.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在保存时对代码进行多次`gofmt`。值得研究如何使用你选择的IDE来做这件事，以便`gofmt`工具可以自动运行并修复代码中的任何间距或缩进错误。
- en: In this exercise, you used the `gofmt` tool to reformat a badly formatted file
    into a neat state. This can seem pointless and annoying when you first start coding.
    However, as your skills improve and you start working on larger projects, you
    will start to appreciate the importance of a neat and consistent code style.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你使用了 `gofmt` 工具将格式错误的文件重新格式化为整洁的状态。当你刚开始编码时，这可能会显得毫无意义且令人烦恼。然而，随着你的技能提高，并开始处理更大的项目时，你将开始欣赏整洁和一致代码风格的重要性。
- en: The goimports tool
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: goimports 工具
- en: Another useful tool that comes with Go is `goimports`, which automatically adds
    the imports that are needed in your file. A key part of software engineering is
    not reinventing the wheel and reusing other people’s code. In Go, you do this
    by importing the libraries at the start of your file, in the `import` section.
    It can, however, be tedious to add these imports each time you need to use them.
    You can also accidentally leave in unused imports, which can pose a security risk.
    A better way to do this is to use `goimports` to automatically add the imports
    for you. It will also remove unused imports and reorder the remaining imports
    into alphabetical order for better readability.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Go 附带的另一个有用工具是 `goimports`，它可以自动添加文件中需要的导入。软件工程的一个关键部分不是重新发明轮子，而是重用他人的代码。在 Go
    中，你通过在文件的 `import` 部分开始导入库来实现这一点。然而，每次需要使用这些导入时，添加它们可能会变得繁琐。你还可以不小心留下未使用的导入，这可能会带来安全风险。更好的方法是使用
    `goimports` 自动为你添加导入。它还会删除未使用的导入，并将剩余的导入按字母顺序重新排序，以提高可读性。
- en: Exercise 20.04 – using the goimports tool
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 20.04 – 使用 goimports 工具
- en: 'In this exercise, you will learn how to use `goimports` to manage the imports
    in a simple Go program. When you run the `goimports` tool, it will output how
    it thinks the file should look with the imports fixed. Alternatively, you can
    run `goimports` with the `-w` option, which automatically updates the imports
    in the file and saves the changes. Let’s get started:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将学习如何使用 `goimports` 来管理简单 Go 程序中的导入。当你运行 `goimports` 工具时，它将输出它认为文件应该如何看起来，导入已修复。或者，你可以使用
    `-w` 选项运行 `goimports`，这将自动更新文件中的导入并保存更改。让我们开始吧：
- en: Create a new directory called `Exercise20.04`. Within that directory, create
    a new file called `main.go`.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `Exercise20.04` 的新目录。在该目录中，创建一个名为 `main.go` 的新文件。
- en: 'Run the following two commands to create the Go module for this exercise:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下两个命令来为这个练习创建 Go 模块：
- en: '[PRE16]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Add the following code to the file to create a simple `Hello Packt` program
    with incorrect imports:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文件中，以创建一个具有错误导入的简单 `Hello Packt` 程序：
- en: '[PRE17]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You will notice that the `log` library has not been imported and that the `net/http`
    import is unused.
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你会注意到 `log` 库没有被导入，并且 `net/http` 导入未被使用。
- en: 'In your Terminal, run the `goimports` tool against your file to see how the
    imports change:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的终端中，运行 `goimports` 工具来查看导入如何变化：
- en: '[PRE18]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This will display the changes it would make to the file to correct it. Here
    is the expected output:'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将显示它将如何更改文件以进行修复。以下是预期的输出：
- en: '![Figure 20.2: Expected output for goimports](img/B18621_20_2.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图 20.2：goimports 的预期输出](img/B18621_20_2.jpg)'
- en: 'Figure 20.2: Expected output for goimports'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20.2：goimports 的预期输出
- en: This won’t have changed the file but shows what the file will be changed to.
    As you can see, the `net/http` import has been removed and the `log` import has
    been added.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这不会更改文件，但显示了文件将如何更改。如你所见，`net/http` 导入已被删除，而 `log` 导入已被添加。
- en: 'To write these changes to the file, add the `-``w` option:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将这些更改写入文件，请添加 `-w` 选项：
- en: '[PRE19]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This will update the file and make it look as follows:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将更新文件，使其看起来如下：
- en: '[PRE20]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In this exercise, you learned how to use the `goimports` tool. You can use this
    tool to detect incorrect and unused import statements and automatically correct
    them. Many IDEs come with a built-in way to turn on `goimports` so that when you
    save your file, it will automatically correct the imports for you.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你学习了如何使用 `goimports` 工具。你可以使用这个工具来检测不正确和未使用的导入语句，并自动修复它们。许多 IDE 都内置了开启
    `goimports` 的方式，这样当保存文件时，它会自动为你修复导入。
- en: The go vet tool
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: go vet 工具
- en: The `go vet` tool is used for static analysis of your Go code. While the Go
    compiler can find and inform you of mistakes you may have made, there are certain
    things it will miss. For this reason, the `go vet` tool was created. This might
    sound trivial, but some of these issues could go unnoticed for a long time after
    the code has been deployed, the most common of which is passing the wrong number
    of arguments when using the `Printf` function. It will also check for useless
    assignments, for example, if you set a variable and then never use that variable.
    Another particularly useful thing it detects is when a non-pointer interface is
    passed to an `unmarshal` function. The compiler won’t notice this as it is valid;
    however, the `unmarshal` function will be unable to write the data to the interface.
    This can be troublesome to debug but using the `go vet` tool allows you to catch
    it early and remediate the issue before it becomes a problem.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`go vet`工具用于对Go代码进行静态分析。虽然Go编译器可以找到并通知你你可能犯的错误，但它会错过某些事情。因此，创建了`go vet`工具。这听起来可能微不足道，但其中一些问题可能在代码部署后很长时间内才会被发现，其中最常见的是在使用`Printf`函数时传递错误的参数数量。它还会检查无用的赋值，例如，如果你设置了一个变量然后从未使用过这个变量。它还会检测当非指针接口传递给`unmarshal`函数时的情况。编译器不会注意到这一点，因为它是有效的；然而，`unmarshal`函数将无法将数据写入接口。这可能会在调试时造成麻烦，但使用`go
    vet`工具可以在问题成为问题之前及早捕捉并修复它。'
- en: Exercise 20.05 – using the go vet tool
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习20.05 – 使用go vet工具
- en: 'In this exercise, you will use the `go vet` tool to find a common mistake that’s
    made when using the `Printf` function. You will use it to detect when the wrong
    number of arguments are being passed to a `Printf` function. Let’s get started:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将使用`go vet`工具来查找在使用`Printf`函数时常见的错误。你将用它来检测传递给`Printf`函数的参数数量是否正确。让我们开始吧：
- en: 'Create a new directory called `Exercise20.05`. Within that directory, create
    a new go file called `main.go`:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名为`Exercise20.05`的新目录中，创建一个名为`main.go`的新go文件：
- en: 'Run the following two commands to create the Go module for this exercise:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下两个命令来为这个练习创建Go模块：
- en: '[PRE21]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add the following code to the file to create a simple `Hello` `Packt` program:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文件中，以创建一个简单的`Hello` `Packt`程序：
- en: '[PRE22]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As you can see, the `jointString` variable makes use of `fmt.Sprintf` to join
    two strings into one. However, the `%s` format string is incorrect and only formats
    one of the input strings. When you build this code, it will compile into a binary
    without any errors. However, when you run the program, the output will not be
    as expected. Luckily, the `go vet` tool was created for this exact reason.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如你所见，`jointString`变量使用了`fmt.Sprintf`将两个字符串合并为一个。然而，`%s`格式字符串是不正确的，并且只格式化了一个输入字符串。当你构建这段代码时，它将编译成一个二进制文件，没有任何错误。然而，当你运行程序时，输出将不会如预期。幸运的是，`go
    vet`工具正是为此而创建的。
- en: 'Run the `go vet` tool against the file you created:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对你创建的文件运行`go vet`工具：
- en: '[PRE23]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This will display any issues it finds in the code:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将显示它在代码中发现的任何问题：
- en: '![Figure 20.3: Expected output from go vet](img/B18621_20_3.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图20.3：go vet的预期输出](img/B18621_20_3.jpg)'
- en: 'Figure 20.3: Expected output from go vet'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.3：go vet的预期输出
- en: As you can see, `go vet` has identified an issue on line 9 of the file. The
    `Sprintf` call needs `1` argument, but we have given it `2`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`go vet`在文件的第9行识别到了一个问题。`Sprintf`调用需要`1`个参数，但我们给了它`2`个。
- en: 'Update the `Sprintf` call so that it can handle both arguments we want to send:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`Sprintf`调用，使其可以处理我们想要发送的两个参数：
- en: '[PRE24]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, you can run `go vet` again and check that there are no more issues:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以再次运行`go vet`并检查是否还有问题：
- en: '[PRE25]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: It should return nothing, letting you know the file has no more issues.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它应该返回空结果，让你知道文件没有更多的问题。
- en: 'Now, run the program:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，运行程序：
- en: '[PRE26]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Here’s the output after making the corrections in the string:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在对字符串进行修正后的输出如下：
- en: '[PRE27]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In this exercise, you learned how to use the `go vet` tool to detect issues
    that the compiler might miss. While this is a very basic example, `go vet` can
    detect mistakes such as passing a non-pointer to `unmarshal` functions or detecting
    unreachable code. You are encouraged to run `go vet` as part of your build process
    so that you can catch these issues before they make it into your program.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你学习了如何使用`go vet`工具来检测编译器可能遗漏的问题。虽然这是一个非常基础的例子，但`go vet`可以检测到像将非指针传递给`unmarshal`函数或检测到不可达代码这样的错误。你被鼓励将`go
    vet`作为构建过程的一部分来运行，以便在这些问题进入你的程序之前捕捉到它们。
- en: The Go race detector
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go竞争检测器
- en: The Go race detector was added to Go so that developers can detect race conditions.
    As we mentioned in [*Chapter 18*](B18621_18.xhtml#_idTextAnchor1862), *Concurrent
    Work*, you can use goroutines to run parts of your code concurrently. However,
    even experienced programmers might make a mistake that allows different goroutines
    to access the same resource at the same time. This is called a race condition.
    A race condition is problematic because one goroutine can edit the resource in
    the middle of another reading it, meaning the resource could be corrupted. While
    Go has made concurrency a first-class citizen in the language, the mechanisms
    for concurrent code do not prevent race conditions. Also, due to the inherent
    nature of concurrency, a race condition might stay hidden until long after your
    code has been deployed. This also means they tend to be transient, making them
    devilishly difficult to debug and fix. This is why the Go race detector was created.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Go的竞态条件检测器被添加到Go中，以便开发者可以检测竞态条件。正如我们在[*第18章*](B18621_18.xhtml#_idTextAnchor1862)中提到的，*并发工作*，你可以使用goroutines来并发运行代码的一部分。然而，即使是经验丰富的程序员也可能犯下错误，允许不同的goroutines同时访问相同的资源。这被称为竞态条件。竞态条件的问题在于一个goroutine可以在另一个goroutine读取资源的过程中修改资源，这意味着资源可能会被损坏。虽然Go已经将并发作为语言的第一等公民，但并发代码的机制并不能防止竞态条件。此外，由于并发的固有性质，竞态条件可能在你代码部署很久之后才会显现出来。这也意味着它们往往是瞬时的，这使得它们难以调试和修复。这就是为什么Go的竞态条件检测器被创建出来的原因。
- en: This tool works by using an algorithm that detects asynchronous memory access,
    but a drawback of this is that it can only do so when the code executes. So, you
    need to run the code to be able to detect race conditions. Luckily, it has been
    integrated into the Go toolchain, so we can use it to do this for us.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工具通过使用一个检测异步内存访问的算法来工作，但它的缺点是只能在代码执行时这样做。因此，你需要运行代码才能检测到竞态条件。幸运的是，它已经被集成到Go工具链中，因此我们可以用它来自动完成这项工作。
- en: Exercise 20.06 – using the Go race detector
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习20.06 – 使用Go竞态条件检测器
- en: 'In this exercise, you will create a basic program that contains a race condition.
    You will use the Go race detector on the program to find the race condition. You
    will learn how to identify where the problem lies and then learn ways to mitigate
    the race condition. Let’s get started:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将创建一个包含竞态条件的基本程序。你将使用Go竞态条件检测器来查找竞态条件。你将学习如何识别问题所在，然后学习减轻竞态条件的方法。让我们开始吧：
- en: Create a new directory called `Exercise20.06`. Within that directory, create
    a new file called `main.go`.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Exercise20.06`目录中创建一个新的目录。在该目录内，创建一个名为`main.go`的新文件。
- en: 'Run the following two commands to create the Go module for this exercise:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下两个命令来创建这个练习的Go模块：
- en: '[PRE28]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Add the following code to the file to create a simple program with race conditions:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文件中，以创建一个具有竞态条件的简单程序：
- en: '[PRE29]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: As you can see, there is an array called `names` with one item in it. A goroutine
    then starts appending more names to it. At the same time, the main goroutine is
    attempting to print out all the items in the array. So, both goroutines are accessing
    the same resource at the same time, which is a race condition.
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如你所见，有一个名为`names`的数组，里面有一个项目。然后一个goroutine开始向其中添加更多名字。同时，主goroutine正试图打印出数组中的所有项目。因此，这两个goroutines同时访问了相同的资源，这就是竞态条件。
- en: 'Run the preceding code with the `race` flag activated:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`race`标志激活运行前面的代码：
- en: '[PRE30]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Running this command will give us the following output:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令将给出以下输出：
- en: '[PRE31]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'In the output, you can see a warning, informing you about the race condition.
    It tells you that the same resource was read and written in the code on lines
    `main.go:10` and `main.go:15`, which look as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出中，你可以看到一个警告，告诉你有关竞态条件的信息。它告诉你代码在`main.go:10`和`main.go:15`行中读取并写入相同的资源，如下所示：
- en: '[PRE32]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: As you can see, in both cases, it is the `names` array that is being accessed,
    so that is where the problem lies. The reason this happens is that the program
    starts to print `names` before it waits for the `finished` channel.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在两种情况下，都是访问`names`数组，所以问题就出在这里。这种情况发生的原因是程序在等待`finished`通道之前就开始打印`names`。
- en: 'A solution could be to wait for the `finished` channel before printing the
    items:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一种解决方案是在打印项目之前等待`finished`通道：
- en: '[PRE33]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This means that the items will have all been added to the array before you
    start to print them out. You can confirm this solution by running the program
    again with the `--race` flag activated:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这意味着在开始打印之前，所有项目都将被添加到数组中。你可以通过再次运行程序并激活`--race`标志来确认这个解决方案：
- en: '[PRE34]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This should run the program as normal and show no race condition warnings.
    The expected output after the corrections have been made is as follows:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这应该会正常运行程序，不会显示竞争条件警告。修正后的预期输出如下：
- en: '[PRE35]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The final program with the race condition now fixed would look as follows:'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最终修复了竞争条件的程序将如下所示：
- en: '[PRE36]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: While the program in this exercise was quite simple, as was the solution, you
    are encouraged to return to [*Chapter 18*](B18621_18.xhtml#_idTextAnchor1862),
    *Concurrent Work*, and use the `--race` flag in the activities there. This will
    provide a better working example of how the Go race detector can help you.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个练习中的程序相当简单，解决方案也是如此，但鼓励你回到 [*第18章*](B18621_18.xhtml#_idTextAnchor1862)，*并发工作*，并使用那里的
    `--race` 标志。这将提供一个更好的示例，说明 Go 竞争检测器如何帮助你。
- en: Note
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The Go race detector is often used by professional software developers to confirm
    that their solution doesn’t contain any hidden race conditions.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Go 竞争检测器通常被专业软件开发者用来确认他们的解决方案中不包含任何隐藏的竞争条件。
- en: The go doc tool
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: go doc 工具
- en: The `go doc` tool is used to generate documentation for packages and functions
    in Go. An often neglected part of many software projects is their documentation.
    This is because it can be tedious to write and even more tedious to keep up to
    date. So, Go comes with a tool to automatically generate documentation for package
    declarations and functions in your code. You simply need to add comments to the
    start of functions and packages. Then, these will be picked up and combined with
    the function header.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`go doc` 工具用于为 Go 中的包和函数生成文档。许多软件项目的文档部分常常被忽视。这是因为编写文档可能很繁琐，而且保持其更新状态可能更加繁琐。因此，Go
    提供了一个工具来自动生成代码中包声明和函数的文档。你只需在函数和包的开始处添加注释。然后，这些注释将被提取并与函数头结合。'
- en: This can then be shared with others to help them understand how to use your
    code. To generate the documentation for a package and its function, you can use
    the `go doc` tool. Documentation like this helps when you are working on a large
    project and other people need to make use of your code. Often, in a professional
    setting, different teams will be working on different parts of a program; each
    team will need to communicate to the other teams about what functions are available
    in a package and how to call them. To do this, they could use `go doc` to generate
    the documentation for the code they’ve written and share it with other teams.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就可以与他人分享，帮助他们了解如何使用你的代码。要为包及其函数生成文档，你可以使用 `go doc` 工具。这种类型的文档在处理大型项目时非常有用，其他人们需要使用你的代码。通常，在专业环境中，不同的团队会负责程序的不同部分；每个团队都需要与其他团队沟通，了解包中可用的函数以及如何调用它们。为此，他们可以使用
    `go doc` 为他们编写的代码生成文档，并与其他团队共享。
- en: Exercise 20.07 – implementing the go doc tool
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 20.07 – 实现 go doc 工具
- en: 'In this exercise, you will learn about the `go doc` tool and how it can be
    used to generate documentation for your code. Let’s get started:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将了解 `go doc` 工具以及如何用它来生成代码的文档。让我们开始吧：
- en: Create a new directory called `Exercise20.07`. Within that directory, create
    a new file called `main.go`.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `Exercise20.07` 的新目录。在该目录内，创建一个名为 `main.go` 的新文件。
- en: 'Run the following two commands to create the Go module for this exercise:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下两个命令来为这个练习创建 Go 模块：
- en: '[PRE37]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Add the following code to the `main.go` file you created:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到你创建的 `main.go` 文件中：
- en: '[PRE38]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This creates a simple program that contains two functions: one called `Add`,
    which adds two numbers, and one called `Multiply`, which multiplies two numbers.'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这创建了一个简单的程序，其中包含两个函数：一个名为 `Add` 的函数，用于添加两个数字，另一个名为 `Multiply` 的函数，用于乘以两个数字。
- en: 'Run the following command to compile and execute the file:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令来编译和执行文件：
- en: '[PRE39]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The output will look as follows:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE40]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'You will notice that both functions have comments above them that begin with
    the name of the function. This is a Go convention to let you know that these comments
    can be used as documentation. What this means is that you can use the `go doc`
    tool to create documentation for the code. In the same directory as your `main.go`
    file, run the following:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会注意到，两个函数上方都有注释，注释以函数名称开头。这是 Go 的一个约定，让你知道这些注释可以用作文档。这意味着你可以使用 `go doc` 工具为代码创建文档。在
    `main.go` 文件所在的同一目录下运行以下命令：
- en: '[PRE41]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'This will generate documentation for the code and output it, as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为代码生成文档并输出如下：
- en: '![Figure 20.4: Expected output from go doc](img/B18621_20_4.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图 20.4：go doc的预期输出](img/B18621_20_4.jpg)'
- en: 'Figure 20.4: Expected output from go doc'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20.4：go doc的预期输出
- en: In this exercise, you learned how to use the `go doc` tool to generate documentation
    on the Go package you created, as well as its functions. You can use this for
    other packages you have created and share the documentation with others if they
    would like to make use of your code. If you would like to capture this documentation,
    you can use `godoc package/path >` `output.txt`.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你学习了如何使用`go doc`工具为你创建的Go包及其函数生成文档。你可以使用它为其他你创建的包生成文档，并与其他人共享，如果他们想使用你的代码。如果你想捕获这些文档，可以使用`godoc
    package/path >` `output.txt`。
- en: The go get tool
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: go get工具
- en: The `go get` tool allows you to download and use different libraries. While
    Go comes with a wide range of packages by default, it is dwarfed by the number
    of third-party packages that are available. These provide extra functionality
    that you can use in your code to enhance it. However, for your code to make use
    of these packages, you need to have them on your computer so that the compiler
    can include them when compiling your code. To download these packages, you can
    use the `go` `get` tool.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`go get`工具允许你下载和使用不同的库。虽然Go默认自带了一大批包，但与可用的第三方包数量相比，就显得微不足道了。这些包提供了额外的功能，你可以在代码中使用它们来增强代码。然而，为了让你的代码使用这些包，你需要在你的电脑上安装它们，以便编译器在编译你的代码时包含它们。要下载这些包，你可以使用`go
    get`工具。'
- en: Exercise 20.08 – implementing the go get tool
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 20.08 – 实现go get工具
- en: 'In this exercise, you will learn how to download a third-party package using
    `go get`. Let’s get started:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将学习如何使用`go get`下载第三方包。让我们开始吧：
- en: Create a new directory called `Exercise20.08`. Within that directory, create
    a new file called `main.go`.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名为`Exercise20.08`的新目录中创建一个新文件，命名为`main.go`。
- en: 'Run the following two commands to create the go module for this exercise:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下两个命令来为这个练习创建go模块：
- en: '[PRE42]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Add the following code to the `main.go` file you created:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到你创建的`main.go`文件中：
- en: '[PRE43]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'This is a simple web server that you can start by running the following command:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是一个简单的Web服务器，你可以通过运行以下命令来启动它：
- en: '[PRE44]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'However, the web server uses a third-party package called `mux`. In the import
    section, you will see that it has been imported from `github.com/gorilla/mux`.
    However, since we don’t have this package stored locally, an error will occur
    when we try to run the program:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然而，Web服务器使用了一个名为`mux`的第三方包。在导入部分，你会看到它是从`github.com/gorilla/mux`导入的。但由于我们没有在本地存储这个包，当我们尝试运行程序时会出现错误：
- en: '[PRE45]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'To get the third-party package, you can use `go get`. This will download it
    locally so that our Go code can make use of it:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取第三方包，你可以使用`go get`。这将本地下载它，以便我们的Go代码可以使用它：
- en: '[PRE46]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Now that you have downloaded the package, you can run the web server again:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你已经下载了包，你可以再次运行Web服务器：
- en: '[PRE47]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'This time, it should run without any errors:'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这次，它应该可以无错误地运行：
- en: '![Figure 20.5: Expected output when running the web server](img/B18621_20_5.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图 20.5：运行Web服务器时的预期输出](img/B18621_20_5.jpg)'
- en: 'Figure 20.5: Expected output when running the web server'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20.5：运行Web服务器时的预期输出
- en: 'While the web server is running, you can open `http://localhost:8888` in your
    web browser and check that it works:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当网络服务器正在运行时，你可以在你的网络浏览器中打开`http://localhost:8888`并检查它是否工作：
- en: '![Figure 20.6: Web server output when viewed in Firefox](img/B18621_20_6.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![图 20.6：在Firefox中查看时的Web服务器输出](img/B18621_20_6.jpg)'
- en: 'Figure 20.6: Web server output when viewed in Firefox'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20.6：在Firefox中查看时的Web服务器输出
- en: In this exercise, you learned how to download third-party packages using the
    `go get` tool. This allows the use of tools and packages beyond what comes as
    a standard package in Go.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你学习了如何使用`go get`工具下载第三方包。这允许使用Go标准包之外的工具和包。
- en: Activity 20.01 – using gofmt, goimport, go vet, and go get to correct a file
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 20.01 – 使用gofmt、goimport、go vet和go get来纠正文件
- en: 'Imagine that you are working on a project with poorly written code. The file
    contains a badly formatted file, missing imports, and a log message in the wrong
    place. You want to use the Go tools you’ve learned about in this chapter to correct
    the file and find any issues with it. In this activity, you will use `gofmt`,
    `goimport`, `go vet`, and `go get` to fix the file and find any issues within
    it. The steps for this activity are as follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你正在对一个编写糟糕的项目进行工作。该文件包含格式错误的文件、缺少导入和位置不当的日志消息。你希望使用本章中学习的Go工具来修正文件并找出其中的任何问题。在这个活动中，你将使用
    `gofmt`、`goimport`、`go vet` 和 `go get` 来修复文件并找出其中的任何问题。这个活动的步骤如下：
- en: Create a directory called `Activity20.01`.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `Activity20.01` 的目录。
- en: Create a file called `main.go`.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件。
- en: Add the Go module for your activity code.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的活动代码添加Go模块。
- en: Add the code from the `Activity20.01/example` directory to `main.go` so that
    you can correct and properly format it and install its dependencies.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Activity20.01/example` 目录中的代码添加到 `main.go` 中，以便你可以正确格式化并安装其依赖项。
- en: Fix any formatting issues.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修复任何格式问题。
- en: Fix any missing imports from `main.go`.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修复 `main.go` 中缺失的导入。
- en: Check for any issues the compiler may miss by using `go vet`.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `go vet` 检查编译器可能遗漏的任何问题。
- en: Ensure the third-party `gorilla/mux` package has been downloaded to your local
    computer.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保第三方 `gorilla/mux` 包已下载到你的本地计算机。
- en: 'Here is the expected output:'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是预期的输出：
- en: '![Figure 20.7: Expected output when running the code](img/B18621_20_7.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图20.7：运行代码时的预期输出](img/B18621_20_7.jpg)'
- en: 'Figure 20.7: Expected output when running the code'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.7：运行代码时的预期输出
- en: 'You can check that this worked by going to `http://localhost:8888` in your
    web browser:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在浏览器中访问 `http://localhost:8888` 来检查这是否成功：
- en: '![Figure 20.8: Expected output when accessing the web server through Firefox](img/B18621_20_8.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图20.8：通过Firefox访问Web服务器时的预期输出](img/B18621_20_8.jpg)'
- en: 'Figure 20.8: Expected output when accessing the web server through Firefox'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.8：通过Firefox访问Web服务器时的预期输出
- en: Note
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found in this book’s GitHub repository
    at [https://github.com/PacktPublishing/Go-Programming-From-Beginner-to-Professional-Second-Edition-/tree/main/Chapter20/Activity20.01](https://github.com/PacktPublishing/Go-Programming-From-Beginner-to-Professional-Second-Edition-/tree/main/Chapter20/Activity20.01).
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 本活动的解决方案可以在本书的GitHub仓库中找到：[https://github.com/PacktPublishing/Go-Programming-From-Beginner-to-Professional-Second-Edition-/tree/main/Chapter20/Activity20.01](https://github.com/PacktPublishing/Go-Programming-From-Beginner-to-Professional-Second-Edition-/tree/main/Chapter20/Activity20.01)。
- en: 'Here is the example code to correct:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是示例代码的修正：
- en: '[PRE48]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: You’ve now seen several of the Go tools in action in one coding exercise.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经在一次编码练习中看到了几个Go工具的实际应用。
- en: Summary
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Go tools are invaluable to a programmers when they’re writing code. In this
    chapter, you learned about `go build` and how to compile your code into executables.
    Then, you learned how consistent neat code is important when working on a project
    and how you can use `gofmt` to automatically neaten the code for you. This can
    be further improved with `goimports`, which can remove unnecessary imports for
    better security and automatically add imports you may have forgotten to add yourself.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序员编写代码时，Go工具是无价的。在本章中，你学习了 `go build` 以及如何将你的代码编译成可执行文件。然后，你学习了在项目开发中保持整洁代码的一致性为何很重要，以及你可以如何使用
    `gofmt` 自动美化代码。这可以通过 `goimports` 进一步改进，它可以删除不必要的导入以提高安全性，并自动添加你可能忘记添加的导入。
- en: After, you looked at `go vet` and how it can be used to help you find any mistakes
    that the compiler may have missed. You also learnt how to use the Go race detector
    to find race conditions hidden in your code. Then, you learned how to generate
    documentation for your code, which makes for easier collaboration when working
    on larger projects. Finally, you looked at downloading third-party packages using
    the `go get` tool, which allows you to make use of numerous Go packages that are
    available online to enhance your code.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，你了解了 `go vet` 以及它如何帮助你找到编译器可能遗漏的任何错误。你还学习了如何使用Go竞态检测器来找到代码中隐藏的竞态条件。然后，你学习了如何为你的代码生成文档，这有助于在处理大型项目时进行协作。最后，你了解了如何使用
    `go get` 工具下载第三方包，这允许你使用在线上可用的许多Go包来增强你的代码。
- en: In the next chapter, you will learn about running your Go code in the cloud,
    and considerations developers make when this occurs.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何在云中运行你的Go代码，以及开发者在这种情况下的考虑因素。
