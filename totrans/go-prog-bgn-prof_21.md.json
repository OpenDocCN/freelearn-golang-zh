["```go\n    go mod init\n    go mod tidy\n    ```", "```go\n    package main\n    import (\n      \"fmt\"\n      \"net/http\"\n      \"time\"\n      \"github.com/prometheus/client_golang/prometheus\"\n      \"github.com/prometheus/client_golang/prometheus/promhttp\"\n    )\n    ```", "```go\n    var (\n      healthzCounter = prometheus.NewCounter(prometheus.CounterOpts{\n        Name: \"healthz_calls_total\",\n        Help: \"Total number of calls to the healthz endpoint.\",\n      })\n    )\n    ```", "```go\n    func init() {\n      prometheus.MustRegister(healthzCounter)\n    }\n    ```", "```go\n    func main() {\n      http.HandleFunc(\"/healthz\", func(w http.ResponseWriter, r *http.Request) {\n        healthzCounter.Inc()\n        w.WriteHeader(http.StatusOK)\n        fmt.Println(\"Monitoring endpoint invoked! Counter was incremented!\")\n      })\n    ```", "```go\n      http.Handle(\"/metrics\", promhttp.Handler())\n    ```", "```go\n      server := &http.Server{\n        Addr: \":8080\",\n        ReadTimeout: 10 * time.Second,\n        WriteTimeout: 10 * time.Second,\n      }\n      fmt.Println(\"Server listening on port 8080...\")\n      if err := server.ListenAndServe(); err != nil {\n        fmt.Printf(\"Error starting server: %s\\n\", err)\n      }\n    }\n    ```", "```go\n    go build -o monitored_app main.go\n    ```", "```go\n    ./monitored_app\n    ```", "```go\nServer listening on port 8080...\n```", "```go\nMonitoring endpoint invoked! Counter was incremented!\nMonitoring endpoint invoked! Counter was incremented!\nMonitoring endpoint invoked! Counter was incremented!\n```", "```go\n...\n# HELP healthz_calls_total Total number of calls to the healthz endpoint.\n# TYPE healthz_calls_total counter\nhealthz_calls_total 3\n# HELP promhttp_metric_handler_requests_in_flight Current number of scrapes being served.\n# TYPE promhttp_metric_handler_requests_in_flight gauge\npromhttp_metric_handler_requests_in_flight 1\n# HELP promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code.\n# TYPE promhttp_metric_handler_requests_total counter\npromhttp_metric_handler_requests_total{code=\"200\"} 0\npromhttp_metric_handler_requests_total{code=\"500\"} 0\npromhttp_metric_handler_requests_total{code=\"503\"} 0\n```", "```go\nhealthz_calls_total 3\n```", "```go\n    go mod init\n    go mod tidy\n    ```", "```go\n    package main\n    import (\n      \"context\"\n      \"fmt\"\n      \"log\"\n      \"net/http\"\n      \"time\"\n      \"go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp\"\n      \"go.opentelemetry.io/otel\"\n      \"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n      \"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\"\n      \"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp\"\n      \"go.opentelemetry.io/otel/exporters/stdout/stdouttrace\"\n      sdktrace \"go.opentelemetry.io/otel/sdk/trace\"\n      \"go.opentelemetry.io/otel/trace\"\n      \"go.uber.org/zap\"\n    )\n    ```", "```go\n    func initTraceExporter(ctx context.Context) *otlptrace.Exporter {\n      traceExporter, err := otlptracegrpc.New(\n        ctx,\n        otlptracegrpc.WithEndpoint(\"http://localhost:4317),\n      )\n      if err != nil {\n        log.Fatalf(\"failed to create trace exporter: %v\", err)\n      }\n      return traceExporter\n    }\n    ```", "```go\n    func initLogExporter(ctx context.Context) *otlptrace.Exporter {\n      logExporter, err := otlptracehttp.New(\n        ctx,otlptracehttp.WithEndpoint(\"http://localhost:4318/v1/logs\"),\n      )\n      if err != nil {\n        log.Fatalf(\"failed to create log exporter: %v\", err)\n      }\n      return logExporter\n    }\n    ```", "```go\n    func initLogger() *zap.Logger {\n      logger, err := zap.NewProduction()\n      if err != nil {\n        log.Fatalf(\"failed to create logger: %v\", err)\n      }\n      return logger\n    }\n    ```", "```go\n    func initTracerProvider(traceExporter *otlptrace.Exporter) *sdktrace.TracerProvider {\n      exp, err := stdouttrace.New(stdouttrace.WithPrettyPrint())\n      if err != nil {\n        log.Println(\"failed to initialize stdouttrace exporter:\", err)\n      }\n      bsp := sdktrace.NewBatchSpanProcessor(exp)\n      tp := sdktrace.NewTracerProvider(\n        sdktrace.WithBatcher(traceExporter),\n        sdktrace.WithSpanProcessor(bsp),\n      )\n      return tp\n    }\n    ```", "```go\n    func handler(w http.ResponseWriter, r *http.Request){\n      ctx := r.Context()\n      span := trace.SpanFromContext(ctx)\n      defer span.End()\n      logger := zap.NewExample().Sugar()\n      logger.Infow(\"Received request\",\n        \"service\", \"exercise22.02\",\n        \"httpMethod\", r.Method,\n        \"httpURL\", r.URL.String(),\n        \"remoteAddr\", r.RemoteAddr,\n      )\n      w.WriteHeader(http.StatusOK)\n      fmt.Fprintf(w, \"Monitoring endpoint invoked!\")\n    }\n    ```", "```go\n    func main() {\n      ctx := context.Background()\n      traceExporter := initTraceExporter(ctx)\n      defer traceExporter.Shutdown(context.Background())\n      logExporter := initLogExporter(ctx)\n      defer logExporter.Shutdown(context.Background())\n      tp := initTracerProvider(traceExporter)\n      otel.SetTracerProvider(tp)\n      logger := initLogger()\n      defer logger.Sync()\n    ```", "```go\n      httpHandler := otelhttp.NewHandler(http.HandlerFunc(handler), \"HTTPServer\")\n      http.Handle(\"/\", httpHandler)\n      server := &http.Server{\n        Addr: \":8080\",\n        ReadTimeout: 10 * time.Second,\n        WriteTimeout: 10 * time.Second,\n      }\n      fmt.Println(\"Server listening on port 8080...\")\n      if err := server.ListenAndServe(); err != nil {\n        fmt.Printf(\"Error starting server: %s\\n\", err)\n      }\n    }\n    ```", "```go\n    go build -o monitored_app main.go\n    ```", "```go\n    ./monitored_app\n    ```", "```go\nServer listening on port 8080...\n```", "```go\nMonitoring endpoint invoked!\n```", "```go\n{\"level\":\"info\",\"msg\":\"Received request\",\"service\":\"exercise22.02\",\"httpMethod\":\"GET\",\"httpURL\":\"/healthz\",\"remoteAddr\":\"[::1]:51082\"}\n```", "```go\n    FROM golang:latest AS builder\n    ```", "```go\n    ENV CGO_ENABLED=0\n    ```", "```go\n    WORKDIR /app\n    ```", "```go\n    COPY go.mod go.sum ./\n    COPY main.go ./\n    RUN go mod download\n    ```", "```go\n    RUN go build -o monitored_app .\n    ```", "```go\n    FROM scratch\n    ```", "```go\n    COPY --from=builder /app/monitored_app /.\n    ```", "```go\n    EXPOSE 8080\n    ```", "```go\n    CMD [\"./monitored_app\"]\n    ```", "```go\n    docker build -t monitored-app .\n    ```", "```go\n    docker run -p 8080:8080 monitored-app\n    ```", "```go\nMonitoring endpoint invoked! Counter was incremented!\n```"]