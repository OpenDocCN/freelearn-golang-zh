- en: '16'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Printing log messages from a program can be an important tool for troubleshooting.
    Log messages tell you what is going on at any given moment, and provide much-needed
    contextual information when something goes wrong. Go standard library provides
    convenient packages to generate and manage log messages from programs. Here, we
    will look at using the `log` package, which can be used to generate text messages,
    and the `slog` package, which can be used to generate structured log messages
    from programs.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter contains the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the standard logger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing log messages
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling format
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing where to log
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the structured logger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging using the global logger
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing structured logs using different levels
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing log level at runtime
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using loggers with additional attributes
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing where to log
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding logging information from the context
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the standard logger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The standard library logger is defined in the `log` package. It is a simple
    logging library that can be used to print formatted log messages that show the
    progression of a program. For most practical purposes, the standard library logger
    functionality is too limited, but it can be a useful tool that requires minimal
    setup for proof-of-concepts and smaller programs. Use the structured logger `log/slog`
    package for any nontrivial project.
  prefs: []
  type: TYPE_NORMAL
- en: Writing log messages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The standard logger is a simple logging implementation to print diagnostic messages.
    It does not offer structured output or multiple log levels but can be useful for
    programs where log messages are geared toward the end users or developers.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can use the default logger to print log messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The above functions use a singleton instance of `log.Logger`, which can be obtained
    by `log.Default()`. In other words, calling `log.Println` is equivalent to calling
    `log.Default().Println`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also create a new logger, configure it, and pass it around:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Other than `log.Println` and `log.Printf`, you can use `log.Fatal` or `log.Panic`
    to stop a program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This will terminate the program with exit code `1` and output the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We can observe something similar with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This will panic and generate the output that follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Controlling format
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can control the output format of the logger using bit flags. You can also
    define a prefix for the subsequent log messages.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can create a new logger with a prefix as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This outputs the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also set the prefix of an existing logger:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The output fields and how they are printed are controlled by the flags. The
    `log.LstdFlags` tells the logger that the date and time of the log should also
    be written.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `log.Lshortfile` prints the file name and line number showing where the
    log statement is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `log.Llongfile` prints the full path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You can combine multiple flags using the bitwise `|` OR operator. The `log.Lmsgprefix`
    moves the prefix string (if one exists) to the beginning of the message from the
    beginning of the log line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Hereâ€™s the output::'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The following flags print the time and date in UTC, as well as the short file
    name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'prefix: 2024/09/18 05:10:34 main.go:23: This is a log message with with UTC
    time'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: logger := log.New(os.Stderr, "", log.LstdFlags)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: output, err := os.Create("log.txt")
  prefs: []
  type: TYPE_NORMAL
- en: if err != nil {
  prefs: []
  type: TYPE_NORMAL
- en: log.Fatal(err)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: defer output.Close()
  prefs: []
  type: TYPE_NORMAL
- en: logger.SetOutput(output)
  prefs: []
  type: TYPE_NORMAL
- en: logger.Println("This is a log message to log.txt")
  prefs: []
  type: TYPE_NORMAL
- en: logger.SetOutput(os.Stderr)
  prefs: []
  type: TYPE_NORMAL
- en: logger.Println("Message to log.txt was written")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: logger.SetOutput(io.Discard)
  prefs: []
  type: TYPE_NORMAL
- en: logger.Println("This message will not be logged")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: slog.Debug("This is a debug message")
  prefs: []
  type: TYPE_NORMAL
- en: slog.Info("This is an info message with an integer field", "arg", 42)
  prefs: []
  type: TYPE_NORMAL
- en: slog.Info("This is another info message with an integer field", slog.Int("arg",42))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: logger := slog.New(slog.NewJSONHandler(os.Stderr, &slog.HandlerOptions{
  prefs: []
  type: TYPE_NORMAL
- en: 'Level: slog.LevelDebug,'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: ))
  prefs: []
  type: TYPE_NORMAL
- en: slog.SetDefault(logger)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: handler:= slog.NewTextHandler(os.Stderr, &slog.HandlerOptions{
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Level: slog.LevelDebug,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '})'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: logger := slog.New(handler)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: logger.Debug("This is a debug message")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: logger.Info("This is an info message with an integer argument", "arg", 42)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: logger.Warn("This is a warning message with a string argument", "arg", "foo")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: // Checking if logging is enabled for a specific level
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if logger.Enabled(context.Background(), slog.LevelError) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: logger.Error("This is an error message", slog.String("arg", "foo"))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: level = new(slog.LevelVar)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: level.Set(slog.LevelError)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: handler:=slog.NewTextHandler(os.Stderr, &slog.HandlerOptions{
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Level: level,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '})'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: logger:=slog.New(handler)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: level.Set(slog.LevelDebug)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: // Now all loggers will start printing debug level messages
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: func HandlerA(w http.ResponseWriter, req *http.Request) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: reqId:=getRequestIdFromRequest(req)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: // Create a new logger with additional attributes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: logger:=slog.With(slog.String("handler", "a"),slog.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: String("reqId",reqId))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: logger.Debug("Start handling request")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: defer logger.Debug("Completed request")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: HandleRequest(logger, w,req)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '{"time":"2024-09-19T14:49:42.064787730-06:00","level":"DEBUG","msg":"Start
    handling request","handler":"a","reqId":"123"}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{"time":"2024-09-19T14:49:42.308187758-06:00","level":"DEBUG","msg":"This is
    a debug message","handler":"a","reqId":"123","key":"value"}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{"time":"2024-09-19T14:49:42.945674637-06:00","level":"DEBUG","msg":"Completed
    request","handler":"a","reqId":"123"}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: logger := slog.New(slog.NewTextHandler(os.Stderr, &slog.HandlerOptions{
  prefs: []
  type: TYPE_NORMAL
- en: 'Level: slog.LevelDebug,'
  prefs: []
  type: TYPE_NORMAL
- en: '}))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: type ContextIDHandler struct {
  prefs: []
  type: TYPE_NORMAL
- en: slog.Handler
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: func (h ContextIDHandler) Handle(ctx context.Context, r slog.Record) error {
  prefs: []
  type: TYPE_NORMAL
- en: // If the context has a string id, retrieve it and add it to the
  prefs: []
  type: TYPE_NORMAL
- en: // record
  prefs: []
  type: TYPE_NORMAL
- en: if id, ok := ctx.Value("id").(string); ok {
  prefs: []
  type: TYPE_NORMAL
- en: r.Add(slog.String("id", id))
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: return h.Handler.Handle(ctx, r)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: func Handler(w http.ResponseWriter, req *http.Request) {
  prefs: []
  type: TYPE_NORMAL
- en: logger.Debug(req.Context(),"Handler started")
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '{"time":"2024-09-19T15:02:12.163787730-06:00","level":"DEBUG","msg":"Handler
    started","id":"123"}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
