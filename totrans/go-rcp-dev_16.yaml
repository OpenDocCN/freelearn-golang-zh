- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Logging
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Printing log messages from a program can be an important tool for troubleshooting.
    Log messages tell you what is going on at any given moment, and provide much-needed
    contextual information when something goes wrong. Go standard library provides
    convenient packages to generate and manage log messages from programs. Here, we
    will look at using the `log` package, which can be used to generate text messages,
    and the `slog` package, which can be used to generate structured log messages
    from programs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter contains the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Using the standard logger
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing log messages
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling format
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing where to log
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the structured logger
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging using the global logger
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing structured logs using different levels
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing log level at runtime
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using loggers with additional attributes
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing where to log
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding logging information from the context
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the standard logger
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The standard library logger is defined in the `log` package. It is a simple
    logging library that can be used to print formatted log messages that show the
    progression of a program. For most practical purposes, the standard library logger
    functionality is too limited, but it can be a useful tool that requires minimal
    setup for proof-of-concepts and smaller programs. Use the structured logger `log/slog`
    package for any nontrivial project.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Writing log messages
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The standard logger is a simple logging implementation to print diagnostic messages.
    It does not offer structured output or multiple log levels but can be useful for
    programs where log messages are geared toward the end users or developers.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can use the default logger to print log messages:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here is the output:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The above functions use a singleton instance of `log.Logger`, which can be obtained
    by `log.Default()`. In other words, calling `log.Println` is equivalent to calling
    `log.Default().Println`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also create a new logger, configure it, and pass it around:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here is the output:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Other than `log.Println` and `log.Printf`, you can use `log.Fatal` or `log.Panic`
    to stop a program:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will terminate the program with exit code `1` and output the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can observe something similar with the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will panic and generate the output that follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Controlling format
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can control the output format of the logger using bit flags. You can also
    define a prefix for the subsequent log messages.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can create a new logger with a prefix as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This outputs the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can also set the prefix of an existing logger:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is the output:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The output fields and how they are printed are controlled by the flags. The
    `log.LstdFlags` tells the logger that the date and time of the log should also
    be written.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'The `log.Lshortfile` prints the file name and line number showing where the
    log statement is:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This gives the following output:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `log.Llongfile` prints the full path:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here is the output:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You can combine multiple flags using the bitwise `|` OR operator. The `log.Lmsgprefix`
    moves the prefix string (if one exists) to the beginning of the message from the
    beginning of the log line:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here’s the output::'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following flags print the time and date in UTC, as well as the short file
    name:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'prefix: 2024/09/18 05:10:34 main.go:23: This is a log message with with UTC
    time'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: logger := log.New(os.Stderr, "", log.LstdFlags)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: output, err := os.Create("log.txt")
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: if err != nil {
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: log.Fatal(err)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: defer output.Close()
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: logger.SetOutput(output)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: logger.Println("This is a log message to log.txt")
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: logger.SetOutput(os.Stderr)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: logger.Println("Message to log.txt was written")
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: logger.SetOutput(io.Discard)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: logger.Println("This message will not be logged")
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: slog.Debug("This is a debug message")
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: slog.Info("This is an info message with an integer field", "arg", 42)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: slog.Info("This is another info message with an integer field", slog.Int("arg",42))
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: logger := slog.New(slog.NewJSONHandler(os.Stderr, &slog.HandlerOptions{
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: 'Level: slog.LevelDebug,'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: ))
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: slog.SetDefault(logger)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: handler:= slog.NewTextHandler(os.Stderr, &slog.HandlerOptions{
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Level: slog.LevelDebug,'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '})'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: logger := slog.New(handler)
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: logger.Debug("This is a debug message")
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: logger.Info("This is an info message with an integer argument", "arg", 42)
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: logger.Warn("This is a warning message with a string argument", "arg", "foo")
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: // Checking if logging is enabled for a specific level
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if logger.Enabled(context.Background(), slog.LevelError) {
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: logger.Error("This is an error message", slog.String("arg", "foo"))
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: level = new(slog.LevelVar)
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: level.Set(slog.LevelError)
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: handler:=slog.NewTextHandler(os.Stderr, &slog.HandlerOptions{
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Level: level,'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '})'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: logger:=slog.New(handler)
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: level.Set(slog.LevelDebug)
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: // Now all loggers will start printing debug level messages
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: func HandlerA(w http.ResponseWriter, req *http.Request) {
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: reqId:=getRequestIdFromRequest(req)
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: // Create a new logger with additional attributes
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: logger:=slog.With(slog.String("handler", "a"),slog.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: String("reqId",reqId))
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: logger.Debug("Start handling request")
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: defer logger.Debug("Completed request")
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: HandleRequest(logger, w,req)
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '{"time":"2024-09-19T14:49:42.064787730-06:00","level":"DEBUG","msg":"Start
    handling request","handler":"a","reqId":"123"}'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{"time":"2024-09-19T14:49:42.308187758-06:00","level":"DEBUG","msg":"This is
    a debug message","handler":"a","reqId":"123","key":"value"}'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{"time":"2024-09-19T14:49:42.945674637-06:00","level":"DEBUG","msg":"Completed
    request","handler":"a","reqId":"123"}'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: logger := slog.New(slog.NewTextHandler(os.Stderr, &slog.HandlerOptions{
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'Level: slog.LevelDebug,'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '}))'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: type ContextIDHandler struct {
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: slog.Handler
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: func (h ContextIDHandler) Handle(ctx context.Context, r slog.Record) error {
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: // If the context has a string id, retrieve it and add it to the
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: // record
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: if id, ok := ctx.Value("id").(string); ok {
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: r.Add(slog.String("id", id))
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: return h.Handler.Handle(ctx, r)
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: func Handler(w http.ResponseWriter, req *http.Request) {
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: logger.Debug(req.Context(),"Handler started")
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: logger.Debug(req.Context(),"处理器启动")
- en: '...'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '[PRE41]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '{"time":"2024-09-19T15:02:12.163787730-06:00","level":"DEBUG","msg":"Handler
    started","id":"123"}'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '{"时间":"2024-09-19T15:02:12.163787730-06:00","级别":"DEBUG","信息":"处理器启动","ID":"123"}'
- en: '```'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
