["```go\npackage sort\nimport (\n  \"sort\"\n  \"time\"\n)\n// Sort times in ascending or descending order\nfunc SortTimes(input []time.Time, asc bool) []time.Time {\n  output := make([]time.Time, len(input))\n  copy(output, input)\n  if asc {\n    sort.Slice(output, func(i, j int) bool {\n      return output[i].Before(output[j])\n    })\n    return output\n  }\n  sort.Slice(output, func(i, j int) bool {\n    return output[j].Before(output[i])\n  })\n  return output\n}\n```", "```go\n    package sort\n    ```", "```go\n    func TestSortTimesAscending(t *testing.T) {\n        // 2.a Prepare input data\n        input := []time.Time{\n            time.Date(2023, 2, 1, 12, 8, 37, 0, time.Local),\n            time.Date(2021, 5, 6, 9, 48, 11, 0, time.Local),\n            time.Date(2022, 11, 13, 17, 13, 54, 0, time.Local),\n            time.Date(2022, 6, 23, 22, 29, 28, 0, time.Local),\n            time.Date(2023, 3, 17, 4, 5, 9, 0, time.Local),\n        }\n        // 2.b Call the function under test\n        output := SortTimes(input, true)\n        // 2.c Make sure the output is what is expected\n        for i := 1; i < len(output); i++ {\n            if !output[i-1].Before(output[i]) {\n                t.Error(\"Wrong order\")\n            }\n        }\n    }\n    ```", "```go\n    go test\n    PASS\n    ok  github.com/PacktPublishing/Go-Recipes-for-Developers/src/chp17/sorting/sort    0.001s\n    ```", "```go\n    go test <packageName>\n    go test ./<folder>\n    go test github.com/PacktPublishing/Go-Recipes-for-Developers/src/chp17/sorting/sort\n    ```", "```go\n    go test ./sorting\n    ```", "```go\n    go test ./...\n    ```", "```go\n    go test -run TestSortTimesAscending\n    go test -run ^TestSortTimesAscending$\n    ```", "```go\n    go test -run Ascending$\n    ```", "```go\n    func TestSortTimeAscending(t *testing.T) {\n      ...\n      t.Logf(\"Input: %v\",input)\n      output:=SortTimes(input,true)\n      t.Logf(\"Output: %v\", output)\n    ```", "```go\n    $ go test -v\n    === RUN   TestSortTimesAscending\n        sort_test.go:17: Input: [2023-02-01 12:08:37 -0700 MST 2021-05-06 09:48:11 -0600 MDT 2022-11-13 17:13:54 -0700 MST 2022-06-23 22:29:28 -0600 MDT 2023-03-17 04:05:09 -0600 MDT]\n        sort_test.go:19: Output: [2021-05-06 09:48:11 -0600 MDT 2022-06-23 22:29:28 -0600 MDT 2022-11-13 17:13:54 -0700 MST 2023-02-01 12:08:37 -0700 MST 2023-03-17 04:05:09 -0600 MDT]\n    --- PASS: TestSortTimesAscending (0.00s)\n    ```", "```go\n    func TestService(t *testing.T) {\n      if testing.Short() {\n        t.Skip(\"Service\")\n      }\n      ...\n    }\n    ```", "```go\n    $ go test -test.short -v\n    === RUN   TestService\n        service_test.go:15: Service\n    --- SKIP: TestService (0.00s)\n    === RUN   TestHandler\n    --- PASS: TestHandler (0.00s)\n    PASS\n    ```", "```go\npackage service\nimport (\n    \"encoding/json\"\n    \"io\"\n    \"net/http\"\n    \"time\"\n    \"github.com/PacktPublishing/Go-Recipes-for-Developers/src/chp17/\n    sorting/sort\"\n)\n// Common handler function for parsing the input, sorting, and \n// preparing the output\nfunc HandleSort(w http.ResponseWriter, req *http.Request, ascending bool) {\n    var input []time.Time\n    data, err := io.ReadAll(req.Body)\n    if err != nil {\n        http.Error(w, err.Error(), http.StatusBadRequest)\n        return\n    }\n    if err := json.Unmarshal(data, &input); err != nil {\n        http.Error(w, err.Error(), http.StatusBadRequest)\n        return\n    }\n    output := sort.SortTimes(input, ascending)\n    data, err = json.Marshal(output)\n    if err != nil {\n        http.Error(w, err.Error(), http.StatusInternalServerError)\n        return\n    }\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    w.Write(data)\n}\n// Prepares a multiplexer that handles POST /sort/asc and POST /sort/\n// desc endpoints\nfunc GetServeMux() *http.ServeMux {\n    mux := http.NewServeMux()\n    mux.HandleFunc(\"POST /sort/asc\", func(w http.ResponseWriter, req \n    *http.Request) {\n        HandleSort(w, req, true)\n    })\n    mux.HandleFunc(\"POST /sort/desc\", func(w http.ResponseWriter, req \n    *http.Request) {\n        HandleSort(w, req, false)\n    })\n    return mux\n}\n```", "```go\n    import (\n      \"net/http/httptest\"\n      \"testing\"\n      ...\n    )\n    ```", "```go\n    func TestService(t *testing.T) {\n      mux := GetServeMux()\n      server := httptest.NewServer(mux)\n      defer server.Close()\n    ```", "```go\n    rsp, err := http.Post(server.URL+\"/sort/asc\", \"application/json\", strings.NewReader(\"test\"))\n    if err != nil {\n      t.Error(err)\n      return\n    }\n    // Must return http error\n    if rsp.StatusCode/100 == 2 {\n      t.Errorf(\"Error was expected\")\n      return\n    }\n    ```", "```go\n    data, err := json.Marshal([]time.Time{\n      time.Date(2023, 2, 1, 12, 8, 37, 0, time.Local),\n      time.Date(2021, 5, 6, 9, 48, 11, 0, time.Local),\n      time.Date(2022, 11, 13, 17, 13, 54, 0, time.Local),\n      time.Date(2022, 6, 23, 22, 29, 28, 0, time.Local),\n      time.Date(2023, 3, 17, 4, 5, 9, 0, time.Local),\n    ))\n    if err != nil {\n      t.Error(err)\n      return\n    }\n    rsp, err = http.Post(server.URL+\"/sort/asc\", \"application/json\", bytes.NewReader(data))\n    if err != nil {\n      t.Error(err)\n      return\n    }\n    defer rsp.Body.Close()\n    if rsp.StatusCode != 200 {\n      t.Errorf(\"Expected status code 200, got %d\", rsp.StatusCode)\n      return\n    }\n    var output []time.Time\n    if err := json.NewDecoder(rsp.Body).Decode(&output); err != nil {\n      t.Error(err)\n      return\n    }\n    for i := 1; i < len(output); i++ {\n      if !output[i-1].Before(output[i]) {\n        t.Errorf(\"Wrong order\")\n      }\n    }\n    ```", "```go\n    func TestHandler(t *testing.T) {\n      w := httptest.NewRecorder()\n    ```", "```go\n    data, err := json.Marshal([]time.Time{\n      time.Date(2023, 2, 1, 12, 8, 37, 0, time.Local),\n      time.Date(2021, 5, 6, 9, 48, 11, 0, time.Local),\n      time.Date(2022, 11, 13, 17, 13, 54, 0, time.Local),\n      time.Date(2022, 6, 23, 22, 29, 28, 0, time.Local),\n      time.Date(2023, 3, 17, 4, 5, 9, 0, time.Local),\n    })\n    if err != nil {\n      t.Error(err)\n      return\n    }\n    req, _ := http.NewRequest(\"POST\", \"localhost/sort/asc\", bytes.NewReader(data))\n    req.Header.Set(\"Content-Type\", \"application/json\")\n    HandleSort(w, req, true)\n    ```", "```go\n    if w.Result().StatusCode != 200 {\n      t.Errorf(\"Expecting HTTP 200, got %d\", w.Result().StatusCode)\n      return\n    }\n    var output []time.Time\n    if err := json.NewDecoder(w.Result().Body).Decode(&output); err != nil {\n      t.Error(err)\n      return\n    }\n    for i := 1; i < len(output); i++ {\n      if !output[i-1].Before(output[i]) {\n        t.Errorf(\"Wrong order\")\n      }\n    }\n    ```", "```go\n    $ go test -cover\n    PASS\n    coverage: 76.2% of statements\n    ```", "```go\n    $ go test -coverprofile=cover.out\n    PASS\n    coverage: 76.2% of statements\n    $ go tool cover -html=cover.out\n    ```", "```go\n    func BenchmarkSortAscending(b *testing.B) {\n    ```", "```go\n    input := []time.Time{\n      time.Date(2023, 2, 1, 12, 8, 37, 0, time.Local),\n      time.Date(2021, 5, 6, 9, 48, 11, 0, time.Local),\n      time.Date(2022, 11, 13, 17, 13, 54, 0, time.Local),\n      time.Date(2022, 6, 23, 22, 29, 28, 0, time.Local),\n      time.Date(2023, 3, 17, 4, 5, 9, 0, time.Local),\n    }\n    ```", "```go\n    for i := 0; i < b.N; i++ {\n      SortTimes(input, true)\n    }\n    ```", "```go\n    func benchmarkSort(b *testing.B, nItems int, asc bool) {\n        input := make([]time.Time, nItems)\n        t := time.Now().UnixNano()\n        for i := 0; i < nItems; i++ {\n            input[i] = time.Unix(0, t-int64(i))\n        }\n        rand.Shuffle(len(input), func(i, j int) { input[i], input[j] \n        = input[j], input[i] })\n        for i := 0; i < b.N; i++ {\n            SortTimes(input, asc)\n        }\n    }\n    ```", "```go\n    func BenchmarkSort1000Ascending(b *testing.B)  { benchmarkSort(b, 1000, true) }\n    func BenchmarkSort100Ascending(b *testing.B)   { benchmarkSort(b, 100, true) }\n    func BenchmarkSort10Ascending(b *testing.B)    { benchmarkSort(b, 10, true) }\n    func BenchmarkSort1000Descending(b *testing.B) { benchmarkSort(b, 1000, false) }\n    func BenchmarkSort100Descending(b *testing.B)  { benchmarkSort(b, 100, false) }\n    func BenchmarkSort10Descending(b *testing.B)   { benchmarkSort(b, 10, false) }\n    ```", "```go\n    go test -bench=.\n    ```", "```go\n    go test -bench=1000\n    goos: linux\n    goarch: amd64\n    pkg: github.com/PacktPublishing/Go-Recipes-for-Developers/src/chp17/sorting/sort\n    cpu: AMD Ryzen 5 7530U with Radeon Graphics\n    BenchmarkSort1000Ascending-12             9753        105997 ns/op\n    BenchmarkSort1000Descending-12             9813        105192 ns/op\n    PASS\n    ```", "```go\n    $ go test -bench=1000Ascending --cpuprofile=profile\n    goos: linux\n    goarch: amd64\n    pkg: github.com/PacktPublishing/Go-Recipes-for-Developers/src/chp17/sorting/sort\n    cpu: AMD Ryzen 5 7530U with Radeon Graphics\n    BenchmarkSort1000Ascending-12           10000        106509 ns/op\n    ```", "```go\n    $ go tool pprof profile\n    File: sort.test\n    Type: cpu\n    ```", "```go\n    (pprof) top5\n    Showing nodes accounting for 780ms, 71.56% of 1090ms total\n    Showing top 5 nodes out of 47\n          flat  flat%   sum%        cum   cum%\n         250ms 22.94% 22.94%      360ms 33.03%  github.com/PacktPublishing/Go-Recipes-for-Developers/src/chp17/sorting/sort.SortTimes.func1\n         230ms 21.10% 44.04%      620ms 56.88%  sort.partition_func\n         120ms 11.01% 55.05%      120ms 11.01%  runtime.memmove\n          90ms  8.26% 63.30%      340ms 31.19%  internal/\n          reflectlite.Swapper.func9\n          90ms  8.26% 71.56%      230ms 21.10%  internal/\n          reflectlite.typedmemmove\n    ```", "```go\n    $ go test -bench=1000Ascending --memprofile=mem\n    goos: linux\n    goarch: amd64\n    pkg: github.com/PacktPublishing/Go-Recipes-for-Developers/src/chp17/sorting/sort\n    cpu: AMD Ryzen 5 7530U with Radeon Graphics\n    BenchmarkSort1000Ascending-12           10000        106509 ns/op\n    ```", "```go\n    $ go tool pprof mem\n    File: sort.test\n    Type: alloc_space\n    ```", "```go\n    pprof) top5\n    Showing nodes accounting for 493.37MB, 99.90% of 493.87MB total\n    Dropped 2 nodes (cum <= 2.47MB)\n          flat  flat%   sum%        cum   cum%\n      492.86MB 99.80% 99.80%   493.36MB 99.90%  github.com/PacktPublishing/Go-Recipes-for-Developers/src/chp17/sorting/sort.SortTimes\n        0.51MB   0.1% 99.90%   493.87MB   100%  github.com/PacktPublishing/Go-Recipes-for-Developers/src/chp17/sorting/sort.benchmarkSort\n             0     0% 99.90%   493.87MB   100%  github.com/PacktPublishing/Go-Recipes-for-Developers/src/chp17/sorting/sort.BenchmarkSort1000Ascending\n             0     0% 99.90%   493.87MB   100%  testing.(*B).launch\n             0     0% 99.90%   493.87MB   100%  testing.(*B).runN\n    ```"]