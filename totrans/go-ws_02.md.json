["```go\n    package main\n    import \"fmt\"\n    ```", "```go\n    func main() {\n    ```", "```go\n      input := 5\n    ```", "```go\n      if input%2 == 0 {\n    ```", "```go\n        fmt.Println(input, \"is even\")\n    ```", "```go\n      }\n    ```", "```go\n      if input%2 == 1 {\n        fmt.Println(input, \"is odd\")\n      }\n    ```", "```go\n    }\n    ```", "```go\n    go run main.go\n    ```", "```go\n    5 is odd\n    ```", "```go\n    package main\n    import \"fmt\"\n    ```", "```go\n    func main() {\n    ```", "```go\n      input := 4\n    ```", "```go\n      if input%2 == 0 {\n        fmt.Println(input, \"is even\")\n    ```", "```go\n      } else {\n        fmt.Println(input, \"is odd\")\n      }\n    ```", "```go\n    }\n    ```", "```go\n    go run main.go\n    ```", "```go\n    4 is even\n    ```", "```go\n    package main\n    import \"fmt\"\n    ```", "```go\n    func main() {\n    ```", "```go\n      input := -10\n    ```", "```go\n      if input < 0 {\n        fmt.Println(\"input can't be a negative number\")\n    ```", "```go\n      } else if input%2 == 0 {\n        fmt.Println(input, \"is even\")\n    ```", "```go\n      } else {\n        fmt.Println(input, \"is odd\")\n      }\n    }\n    ```", "```go\n    go run main.go\n    ```", "```go\n    input can't be a negative number\n    ```", "```go\n    E.g.: i := 0\n    ```", "```go\n    E.g.: i = (j * 10) == 40\n    ```", "```go\n    E.g.: i++\n    ```", "```go\n    package main\n    import (\n      \"errors\"\n      \"fmt\"\n    )\n    ```", "```go\n    func validate(input int) error {\n    ```", "```go\n      if input < 0 {\n        return errors.New(\"input can't be a negative number\")\n      } else if input > 100 {\n        return errors.New(\"input can't be over 100\")\n      } else if input%7 == 0 {\n        return errors.New(\"input can't be divisible by 7\")\n    ```", "```go\n      } else {\n        return nil\n      }\n    }\n    ```", "```go\n    func main() {\n    ```", "```go\n      input := 21\n    ```", "```go\n      if err := validate(input); err != nil {\n        fmt.Println(err)\n    }\n    ```", "```go\n     else if input%2 == 0 {\n        fmt.Println(input, \"is even\")\n      } else {\n        fmt.Println(input, \"is odd\")\n      }\n    }\n    ```", "```go\n    go run main.go\n    ```", "```go\n    input can't be divisible by 7\n    ```", "```go\nswitch <initial statement>; <expresion> {\ncase <expresion>:\n  <statements>\ncase <expresion>, <expresion>:\n  <statements>\ndefault: \n  <statements>\n}\n```", "```go\n    package main\n    ```", "```go\n    import (\n      \"fmt\"\n      \"time\"\n    )\n    ```", "```go\n    func main() {\n    ```", "```go\n      dayBorn := time.Monday\n    ```", "```go\n      switch dayBorn {\n    ```", "```go\n      case time.Monday:\n      fmt.Println(\"Monday's child is fair of face\")\n      case time.Tuesday:\n      fmt.Println(\"Tuesday's child is full of grace\")\n      case time.Wednesday:\n      fmt.Println(\"Wednesday's child is full of woe\")\n      case time.Thursday:\n      fmt.Println(\"Thursday's child has far to go\")\n      case time.Friday:\n      fmt.Println(\"Friday's child is loving and giving\")\n      case time.Saturday:\n      fmt.Println(\"Saturday's child works hard for a living\")\n      case time.Sunday:\n      fmt.Println(\"Sunday's child is bonny and blithe\")\n    ```", "```go\n      default:\n      fmt.Println(\"Error, day born not valid\")\n      }\n    ```", "```go\n    }\n    ```", "```go\n    go run main.go\n    ```", "```go\n    Monday's child is fair of face\n    ```", "```go\n    package main\n    ```", "```go\n    import (\n      \"fmt\"\n      \"time\"\n    )\n    ```", "```go\n    func main() {\n    ```", "```go\n      dayBorn := time.Sunday\n    ```", "```go\n      switch dayBorn {\n    ```", "```go\n      case time.Monday, time.Tuesday, time.Wednesday, time.Thursday, time.Friday:\n      fmt.Println(\"Born on a weekday\")\n    ```", "```go\n      case time.Saturday, time.Sunday:\n      fmt.Println(\"Born on the weekend\")\n    ```", "```go\n      default:\n      fmt.Println(\"Error, day born not valid\")\n      }\n    ```", "```go\n    }\n    ```", "```go\n    go run main.go\n    ```", "```go\n    Born on the weekend\n    ```", "```go\n    package main\n    ```", "```go\n    import (\n      \"fmt\"\n      \"time\"\n    )\n    ```", "```go\n    func main() {\n    ```", "```go\n    switch dayBorn := time.Sunday; {\n    ```", "```go\n      case dayBorn == time.Sunday || dayBorn == time.Saturday:\n      fmt.Println(\"Born on the weekend\")\n    ```", "```go\n      default:\n      fmt.Println(\"Born some other day\")\n      }\n    ```", "```go\n    }\n    ```", "```go\n    go run main.go\n    ```", "```go\n    Born on the weekend\n    ```", "```go\nfor <initial statement>; <condition>; <post statement> {\n  <statements>\n}\n```", "```go\nfor {\n  <statements>\n}\n```", "```go\nfor <condition> {\n  <statements>\n}\n```", "```go\nfor <key>, <value> := range <map> {\n  <statements>\n}\n```", "```go\n    package main\n    import \"fmt\"\n    ```", "```go\n    func main() {\n    ```", "```go\n      for i := 0; i < 5; i++ {\n    ```", "```go\n        fmt.Println(i)\n    ```", "```go\n      }\n    ```", "```go\n    }\n    ```", "```go\n    go run main.go\n    ```", "```go\n    0\n    1\n    2\n    3\n    4\n    ```", "```go\n    package main\n    import \"fmt\"\n    ```", "```go\n    func main() {\n    ```", "```go\n      names := []string{\"Jim\", \"Jane\", \"Joe\", \"June\"}\n    ```", "```go\n      for i := 0; i < len(names); i++ {\n    ```", "```go\n        fmt.Println(names[i])\n      }\n    }\n    ```", "```go\n    go run main.go\n    ```", "```go\n    Jim\n    Jane\n    Joe\n    June\n    ```", "```go\n    package main\n    import \"fmt\"\n    ```", "```go\n    func main() {\n    ```", "```go\n      config := map[string]string{\n      \"debug\":  \"1\",\n      \"logLevel\": \"warn\",\n      \"version\":  \"1.2.1\",\n      }\n    ```", "```go\n      for key, value := range config {\n    ```", "```go\n      fmt.Println(key, \"=\", value)\n    ```", "```go\n      }\n    }\n    ```", "```go\n    go run main.go\n    ```", "```go\n    debug = 1\n    logLevel = warn\n    version = 1.2.1\n    ```", "```go\n      words := map[string]int{\n      \"Gonna\": 3,\n      \"You\": 3,\n      \"Give\": 2,\n      \"Never\": 1,\n      \"Up\":  4,\n      }\n    ```", "```go\n    Most popular word: Up\n    With a count of  : 4\n    ```", "```go\n    package main\n    import (\n      \"fmt\"\n      \"math/rand\"\n    )\n    ```", "```go\n    func main() {\n    ```", "```go\n      for {\n    ```", "```go\n        r := rand.Intn(8)\n    ```", "```go\n        if r%3 == 0 {\n          fmt.Println(\"Skip\")\n          continue\n    ```", "```go\n        } else if r%2 == 0 {\n          fmt.Println(\"Stop\")\n          break\n        }\n    ```", "```go\n        fmt.Println(r)\n    ```", "```go\n      }\n    }\n    ```", "```go\n    go run main.go\n    ```", "```go\n    1\n    7\n    7\n    Skip\n    1\n    Skip\n    1\n    Stop\n    ```", "```go\n    nums[i], nums[i-1] = nums[i-1], nums[i]\n    ```", "```go\n    var nums2 []int\n    ```", "```go\n    nums2 = append(nums2, 1)\n    ```", "```go\n    Before: [5, 8, 2, 4, 0, 1, 3, 7, 9, 6]\n    After : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    ```"]