["```go\n    type Speaker interface{\n    Speak(message string) string\n    Greet() string\n    }\n    ```", "```go\n    type Reader interface{\n    Read(b []byte)(n int, err error)\n    }\n    ```", "```go\ntype Speaker interface {\n  Speak() string\n}\n```", "```go\n// https://golang.org/pkg/io/#Reader\ntype Reader interface {\n    Read(p []byte) (n int, err error)\n}\n```", "```go\n// https://golang.org/pkg/os/#FileInfo\ntype FileInfo interface {\n        Name() string       // base name of the file\n        Size() int64        // length in bytes for regular files; system-dependent for others\n        Mode() FileMode     // file mode bits\n        ModTime() time.Time // modification time\n        IsDir() bool        // abbreviation for Mode().IsDir()\n        Sys() interface{}   // underlying data source (can return nil)\n}\n```", "```go\nclass Dog implements Pet\n```", "```go\npackage main\nimport (\n  \"fmt\"\n)\ntype Speaker interface {\n  Speak() string\n}\ntype cat struct {\n}\nfunc main() {\n  c := cat{}\n  fmt.Println(c.Speak())\n  c.Greeting()\n}\nfunc (c cat) Speak() string {\n  return \"Purr Meow\"\n}\nfunc (c cat) Greeting() {\n  fmt.Println(\"Meow,Meow!!!!mmmeeeeoooowwww\")\n}\n```", "```go\ntype Speaker interface {\n  Speak() string\n}\n```", "```go\ntype cat struct {\n}\nfunc (c cat) Speak() string {\n  return \"Purr Meow\"\n}\n```", "```go\nPurr Meow\nMeow,Meow!!!!mmmeeeeoooowwww\n```", "```go\ntype Stringer interface {\n  String() string\n}\n```", "```go\npackage main\nimport (\n  \"fmt\"\n)\ntype Speaker interface {\n  Speak() string\n}\ntype cat struct {\n  name string\n  age  int\n}\nfunc main() {\n  c := cat{name: \"Oreo\", age:9}\n  fmt.Println(c.Speak())\n  fmt.Println(c)\n}\nfunc (c cat) Speak() string {\n  return \"Purr Meow\"\n}\nfunc (c cat) String() string {\n  return fmt.Sprintf(\"%v (%v years old)\", c.name, c.age)\n}\n```", "```go\n    package main\n    import (\n      \"fmt\"\n    )\n    ```", "```go\n    type Speaker interface {\n      Speak() string\n    }\n    ```", "```go\n    type person struct {\n      name      string\n      age       int\n      isMarried bool\n    }\n    ```", "```go\n    func main() {\n      p := person{name: \"Cailyn\", age: 44, isMarried: false}\n      fmt.Println(p.Speak())\n      fmt.Println(p)\n    }\n    ```", "```go\n    func (p person) String() string {\n      return fmt.Sprintf(\"%v (%v years old).\\nMarried status: %v \", p.name,     p.age, p.isMarried)\n    }\n    ```", "```go\n    func (p person) Speak() string {\n      return \"Hi my name is: \" + p.name\n    }\n    ```", "```go\n    Hi my name is Cailyn\n    Cailyn (44 years old).\n    Married status: false\n    ```", "```go\ntype Speaker interface {\n  Speak() string\n}\n```", "```go\npackage main\nimport (\n  \"fmt\"\n)\ntype Speaker interface {\n  Speak() string\n}\ntype cat struct {\n}\nfunc main() {\n  c := cat{}\n  fmt.Println(c.Speak())\n}\nfunc (c cat) Speak() string {\n  return \"Purr Meow\"\n}\n```", "```go\npackage main\nimport (\n  \"fmt\"\n)\ntype Speaker interface {\n  Speak() string\n}\ntype cat struct {\n}\nfunc main() {\n  c := cat{}\n  chatter(c)\n}\nfunc (c cat) Speak() string {\n  return \"Purr Meow\"\n}\nfunc chatter(s Speaker) {\n  fmt.Println(s.Speak())\n}\n```", "```go\npackage main\nimport (\n  \"fmt\"\n)\ntype Speaker interface {\n  Speak() string\n}\ntype cat struct {\n}\nfunc main() {\n  c := cat{}\n  catSpeak(c)\n}\nfunc (c cat) Speak() string {\n  return \"Purr Meow\"\n}\nfunc catSpeak(c cat) {\n  fmt.Println(c.Speak())\n}\n```", "```go\npackage main\nimport (\n  \"fmt\"\n)\ntype Speaker interface {\n  Speak() string\n}\ntype cat struct {\n}\ntype dog struct {\n}\ntype person struct {\n  name string\n}\nfunc main() {\n  c := cat{}\n  d := dog{}\n  p := person{name:\"Heather\"}\n  catSpeak(c)\n  dogSpeak(d)\n  personSpeak(p)\n}\nfunc (c cat) Speak() string {\n  return \"Purr Meow\"\n}\nfunc (d dog) Speak() string {\n  return \"Woof Woof\"\n}\nfunc (p person) Speak() string {\n  return \"Hi my name is \" + p.name +\".\"\n}\nfunc catSpeak(c cat) {\n  fmt.Println(c.Speak())\n}\nfunc dogSpeak(d dog) {\n  fmt.Println(d.Speak())\n}\nfunc personSpeak(p person) {\n  fmt.Println(p.Speak())\n}\n```", "```go\ntype cat struct {\n}\ntype dog struct {\n}\ntype person struct {\n  name string\n}\n```", "```go\nfunc (c cat) Speak() string {\n  return \"Purr Meow\"\n}\nfunc (d dog) Speak() string {\n  return \"Woof Woof\"\n}\nfunc (p person) Speak() string {\n  return \"Hi my name is \" + p.name +\".\"\n}\n```", "```go\nfunc main() {\n  c := cat{}\n  d := dog{}\n  p := person{name:\"Heather\"}\n  catSpeak(c)\n  dogSpeak(d)\n  personSpeak(p)\n}\n```", "```go\npackage main\nimport (\n  \"fmt\"\n)\ntype Speaker interface {\n  Speak() string\n}\ntype cat struct {\n}\ntype dog struct {\n}\ntype person struct {\n  name string\n}\nfunc main() {\n  c := cat{}\n  d := dog{}\n  p := person{name: \"Heather\"}\n  saySomething(c,d,p)\n}\nfunc saySomething(say ...Speaker) {\n  for _, s := range say {\n    fmt.Println(s.Speak())\n  }\n}\nfunc (c cat) Speak() string {\n  return \"Purr Meow\"\n}\nfunc (d dog) Speak() string {\n  return \"Woof Woof\"\n}\nfunc (p person) Speak() string {\n  return \"Hi my name is \" + p.name + \".\"\n}\n```", "```go\nfunc saySomething(say ...Speaker)\n```", "```go\nfunc saySomething(say ...Speaker) {\n  for _, s := range say {\n    fmt.Println(s.Speak())\n  }\n}\n```", "```go\nfunc main() {\n  c := cat{}\n  d := dog{}\n  p := person{name: \"Heather\"}\n  saySomething(c,d,p)\n}\n```", "```go\n    package main\n    import (\n      \"fmt\"\n    )\n    ```", "```go\n    type Shape interface {\n      Area() float64\n      Name() string\n    }\n    ```", "```go\n    type triangle struct {\n      base   float64\n      height float64\n    }\n    type rectangle struct {\n      length float64\n      width  float64\n    }\n    type square struct {\n      side float64\n    }\n    ```", "```go\n    func (t triangle) Area() float64 {\n      return (t.base * t.height) / 2\n    }\n    func (t triangle) Name() string {\n      return \"triangle\"\n    }\n    ```", "```go\n    func (r rectangle) Area() float64 {\n      return r.length * r.width\n    }\n    func (r rectangle) Name() string {\n      return \"rectangle\"\n    }\n    ```", "```go\n    func (s square) Area() float64 {\n      return s.side * s.side\n    }\n    func (s square) Name() string {\n      return \"square\"\n    }\n    ```", "```go\n    func printShapeDetails(shapes ...Shape) {\n      for _, item := range shapes {\n        fmt.Printf(\"The area of %s is: %.2f\\n\", item.Name(), item.Area())\n      }\n    }\n    ```", "```go\n    func main() {\n      t := triangle{base: 15.5, height: 20.1}\n      r := rectangle{length: 20, width: 10}\n      s := square{side: 10}\n      printShapeDetails(t, r, s)\n    }\n    }\n    ```", "```go\n    go build\n    ```", "```go\n    The area of triangle is: 155.78\n    The area of rectangle is: 200.00\n    The area of square is: 100.00\n    ```", "```go\nmain.go\n1  package main\n2  import (\n3    \"encoding/json\"\n4    \"fmt\"\n5    \"io\"\n6    \"strings\"\n7  )\n8  type Person struct {\n9    Name string `json:\"name\"`\n10   Age  int    `json:\"age\"`\n11 }\nThe full code is available at: https://packt.live/38teYHn\n```", "```go\n{Joe 18}\n{Jane 21}\n```", "```go\nfunc loadPerson2(s string) (Person, error) {\n  var p Person\n  err := json.NewDecoder(strings.NewReader(s)).Decode(&p)\n  if err != nil {\n  return p, err\n  }\n  return p, nil\n}\n```", "```go\nfunc loadPerson(r io.Reader) (Person, error) {\n  var p Person\n  err := json.NewDecoder(r).Decode(&p)\n  if err != nil {\n    return p, err\n  }\n  return p, err\n}\n```", "```go\np, err := loadPerson(strings.NewReader(s))\n```", "```go\nf, err := os.Open(\"data.json\")\nif err != nil {\n  fmt.Println(err)\n}\n```", "```go\nfunc someFunc() Speaker{} {\n// code\n}\n```", "```go\ninterface{}\n```", "```go\nmain.go\n1  package main\n2  import (\n3    \"fmt\"\n4  )\n5  type Speaker interface {\n6    Speak() string\n7  }\n8  type cat struct {\n9    name string\n10 }\nThe full code is available at: https://packt.live/34dVEdB\n```", "```go\n({oreo}, main.cat)\n({oreo}, main.cat)\n(99, int)\n(false, bool)\n(test, string)\n```", "```go\nfunc emptyDetails(s interface{}) {\n  fmt.Printf(\"(%v, %T)\\n\", i, i)\n}\n```", "```go\nfunc main() {\n  c := cat{name: \"oreo\"}\n  i := 99\n  b := false\n  str := \"test\"\n  catDetails(c)\n  emptyDetails(c)\n  emptyDetails(i)\n  emptyDetails(b)\n  emptyDetails(str)\n}\n```", "```go\npackage main\nimport (\n  \"fmt\"\n)\nfunc main() {\n  var str interface{} =\"some string\"\n  var i interface{} = 42\n  var b interface{} = true\n  fmt.Println(str)\n  fmt.Println(i)\n  fmt.Println(b)\n}\n```", "```go\nsome string\n42\ntrue\n```", "```go\npackage main\nimport (\n  \"fmt\"\n  \"strconv\"\n)\nfunc main() {\n  var str interface{} =\"some string\"\n  var i interface{} = 42\n  fmt.Println(strconv.Atoi(i))\n}\n```", "```go\nv := s.(T)\n```", "```go\npackage main\nimport (\n  \"fmt\"\n  \"strings\"\n)\nfunc main() {\n  var str interface{} =\"some string\"\n  v := str.(string)\n  fmt.Println(strings.Title(v))\n}\n```", "```go\nSome String\n```", "```go\npackage main\nimport (\n  \"fmt\"\n  \"strings\"\n)\nfunc main() {\n  var str interface{} = 49\n  v := str.(string)\n  fmt.Println(strings.Title(v))\n}\n```", "```go\npackage main\nimport (\n  \"fmt\"\n)\nfunc main() {\n  var str interface{} = \"the book club\"\n  v, isValid := str.(int)\n  fmt.Println(v, isValid)\n}\n```", "```go\nswitch v:= i.(type){\ncase S:\n  // code to act upon the type S\n}\n```", "```go\ni.(type)\n```", "```go\ncase S:\n```", "```go\nmain.go\n13 func typeExample(i []interface{}) {\n14   for _, x := range i {\n15     switch v := x.(type) {\n16     case int:\n17       fmt.Printf(\"%v is int\\n\", v)\n18     case string:\n19       fmt.Printf(\"%v is a string\\n\",v)\n20     case bool:\n21       fmt.Printf(\"a bool %v\\n\", v)\n22     default:\n23       fmt.Printf(\"Unknown type %T\\n\", v)\n24     }\n25   }\n26 }\nThe full code is available at: https://packt.live/38xWEwH\n```", "```go\nfunc main() {\n  c:=cat{name:\"oreo\"}\n  i := []interface{}{42, \"The book club\", true,c}\n  typeExample(i)\n}\n```", "```go\nfunc typeExample(i []interface{})\n```", "```go\n  for _, x := range i {\n    switch v := x.(type) {\n    case int:\n      fmt.Printf(\"%v is int\\n\", v)\n    case string:\n      fmt.Printf(\"%v is a string\\n\",v)\n    case bool:\n      fmt.Printf(\"a bool %v\\n\", v)\n    default:\n      fmt.Printf(\"Unknown type %T\\n\", v)\n    }\n  }\n```", "```go\n42 is int\nThe book club is string\na bool true\nUnknown type main.cat\n```", "```go\n    package main\n    import (\n      \"fmt\"\n    )\n    ```", "```go\n    type record struct {\n      key       string\n      valueType string\n      data      interface{}\n    }\n    ```", "```go\n    type person struct {\n      lastName  string\n      age       int\n      isMarried bool\n    }\n    ```", "```go\n    type animal struct {\n      name     string\n      category string\n    }\n    ```", "```go\n    func newRecord(key string, i interface{}) record {\n    ```", "```go\n      r := record{}\n      r.key = key\n      switch v := i.(type) {\n      case int:\n        r.valueType = \"int\"\n        r.data = v\n        return r\n      case bool:\n        r.valueType = \"bool\"\n        r.data = v\n        return r\n      case string:\n        r.valueType = \"string\"\n        r.data = v\n        return r\n      case person:\n        r.valueType = \"person\"\n        r.data = v\n        return r\n    ```", "```go\n      default:\n        r.valueType = \"unknown\"\n        r.data = v\n        return r\n      }\n    }\n    ```", "```go\n    func main() {\n      m := make(map[string]interface{})\n      a := animal{name: \"oreo\", category: \"cat\"}\n      p := person{lastName: \"Doe\", isMarried: false, age: 19}\n      m[\"person\"] = p\n      m[\"animal\"] = a\n      m[\"age\"] = 54\n      m[\"isMarried\"] = true\n      m[\"lastName\"] = \"Smith\"\n    ```", "```go\n      rs := []record{}\n      for k, v := range m {\n        r := newRecord(k, v)\n        rs = append(rs, r)\n      }\n    ```", "```go\n      for _, v := range rs {\n        fmt.Println(\"Key: \", v.key)\n        fmt.Println(\"Data: \", v.data)\n        fmt.Println(\"Type: \", v.valueType)\n        fmt.Println()\n      }\n    }\n    ```", "```go\n    Eric Davis got a review rating of 2.80\n    Eric Davis got paid 84000.00 for the year\n    Mr. Boss got paid 160500.00 for the year\n    ```"]