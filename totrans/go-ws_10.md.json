["```go\npackage main\nimport \"fmt\"\nimport \"time\"\nfunc main(){\n  //this is where the code goes.\n}\n```", "```go\n  start := time.Now()\n  fmt.Println(\"The script has started at: \",start)\n  fmt.Println(\"Saving the world...\")\n  time.Sleep(2 * time.Second)\n  end := time.Now()\n  fmt.Println(\"The script has completed at: \",end)\n```", "```go\nThe script has started at:  2019-09-27 08:19:33.8358274 +0200 CEST m=+0.001998701\nSaving the world...\nThe script has completed at:  2019-09-27 08:19:35.8400169 +0200 CEST m=+2.006161301\n```", "```go\n  Day := time.Now().Weekday()\n  Hour := time.Now().Hour()\n  fmt.Println(\"Day: \",Day, \"Hour: \",Hour)\n  if Day.String() == \"Monday\"{\n    if Hour >= 1{\n      fmt.Println(\"Performing full blown test!\")\n    }else{\n      fmt.Println(\"Performing hit-n-run test!\")\n    }\n  }else{ fmt.Println(\"Performing hit-n-run test!\")}\n```", "```go\nDay: Thursday Hour: 14\nPerforming hit-n-run test!\n```", "```go\nDay: Thursday Hour: 14\nPerforming full blown test!\n```", "```go\nApplication_Action_Year_Month_Day\n```", "```go\nimport \"strconv\"\nAppName := \"HTTPCHECKER\"\n  Action := \"BASIC\"\n  Date := time.Now()\n  LogFileName := AppName + \"_\" + Action + \"_\" + strconv.Itoa(Date.Year()) + \"_\" + Date.Month().String() + \"_\" + strconv.Itoa(Date.Day()) + \".log\"\n  fmt.Println(\"The name of the logfile is: \",LogFileName)\n}\n```", "```go\nThe name of the logfile is:  HTTPCHECKER_BASIC_2019_September_27.log\n```", "```go\nimport \"strconv\"\n```", "```go\n    package main\n    import \"time\"\n    import \"fmt\"\n    ```", "```go\n    func whatstheclock() string {\n      return time.Now().Format(time.ANSIC)\n    }\n    ```", "```go\n    func main(){\n      fmt.Println(whatstheclock())\n    }\n    ```", "```go\n    go run Chapter_10_Exercise_1.go\n    ```", "```go\n    Thu Oct 17 13:56:03 2019\n    ```", "```go\n  now := time.Now()\n  only_after, _ := time.Parse(time.RFC3339,\"2020-11-01T22:08:41+00:00\")\n  fmt.Println(now, only_after)\n  fmt.Println(now.After(only_after))\n  if now.After(only_after){\n    fmt.Println(\"Executing actions!\")\n  }else{\n    fmt.Println(\"Now is not the time yet!!\")\n  }\n```", "```go\nNow is not the time yet!!\n```", "```go\nExecuting actions!\n```", "```go\nnow := time.Now()\n  now_too := now\n  time.Sleep(2*time.Second)\n  later := time.Now()\n  if now.Equal(now_too){\n    fmt.Println(\"The two time variables are equal!\")\n  }else{\n    fmt.Println(\"The two time variables are different!\")\n  }\n  if now.Equal(later){\n    fmt.Println(\"The two time variables are equal!\")\n  }else{\n    fmt.Println(\"The two time variables are different!\")\n  }\n```", "```go\nThe two time variables are equal!\nThe two time variables are different!\n```", "```go\n  Start := time.Now()\n  fmt.Println(\"The script started at: \", Start)\n  sum := 0\n  for i := 1; i < 10000000000; i++ {\n      sum += i\n  }\n  End := time.Now()\n  Duration := End.Sub(Start)\n  fmt.Println(\"The script completed at: \", End)\n  fmt.Println(\"The task took\",Duration.Hours(), \"hour(s) to complete!\")\n  fmt.Println(\"The task took\",Duration.Minutes(), \"minutes(s) to complete!\")\n  fmt.Println(\"The task took\",Duration.Seconds(), \"seconds(s) to complete!\")\n  fmt.Println(\"The task took\",Duration.Nanoseconds(), \"nanosecond(s) to complete!\")\n```", "```go\n  deadline_seconds := time.Duration((600 * 10) * time.Millisecond)\n  Start := time.Now()\n  fmt.Println(\"Deadline for the transaction is  \",deadline_seconds)\n  fmt.Println(\"The transaction has started at: \", Start)\n  sum := 0\n  for i := 1; i < 25000000000; i++ {\n      sum += i\n  }\n  End := time.Now()\n  //Duration := time.Duration((End.Sub(Start)).Seconds() * time.Second)\n  Duration := End.Sub(Start)\n  TransactionTime := time.Duration(Duration.Nanoseconds()) * time.Nanosecond\n  fmt.Println(\"The transaction has completed at: \", End, Duration)\n  if TransactionTime <= deadline_seconds{\n    fmt.Println(\"Performance is OK transaction completed in\",TransactionTime)\n  }else{\n    fmt.Println(\"Performance problem, transaction completed in\",TransactionTime,\"second(s)!\")\n  }  \n```", "```go\n  TimeToManipulate := time.Now()\n  ToBeAdded := time.Duration(10 * time.Second)\n  fmt.Println(\"The original time:\",TimeToManipulate)\n  fmt.Println(ToBeAdded,\" duration later:\",TimeToManipulate.Add(ToBeAdded))\n```", "```go\nThe original time: 2019-10-18 08:49:53.1499273 +0200 CEST m=+0.001994601\n10s duration later: 2019-10-18 08:50:03.1499273 +0200 CEST m=+10.001994601\n```", "```go\nToBeAdded := time.Duration(-10 * time.Minute)\n```", "```go\nThe original time: 2019-10-18 08:50:36.5950116 +0200 CEST m=+0.001994401\n-10m0s duration later: 2019-10-18 08:40:36.5950116 +0200 CEST m=+599.998005599\n```", "```go\n    package main \n    import \"time\"\n    import \"fmt\"\n    import \"strconv\"\n    ```", "```go\n    func elapsedTime(start time.Time, end time.Time) string {\n      Elapsed := end.Sub(start)\n      Hours := strconv.Itoa(int(Elapsed.Hours()))\n      Minutes := strconv.Itoa(int(Elapsed.Minutes()))\n      Seconds := strconv.Itoa(int(Elapsed.Seconds()))\n      return \"The total execution time elapsed is: \" + Hours + \" hour(s) and \" +     Minutes + \" minute(s) and \" + Seconds + \" second(s)!\"\n    }\n    ```", "```go\n    func main(){\n      Start := time.Now()\n      time.Sleep(2 * time.Second)\n      End := time.Now()\n      fmt.Println(elapsedTime(Start,End))\n    }\n    ```", "```go\n    go run Chapter_10_Exercise_2.go\n    ```", "```go\n    The total execution time elapsed is: 0 hour(s) and 0 minute(s) and 2   second(s)!\n    ```", "```go\nThe transaction has started at:  2019-09-27 13:50:58.2715452 +0200 CEST   m=+0.002992801\n```", "```go\nMon Jan 2 15:04:05 -0700 MST 2006\n0      1     2   3   4   5      6\n```", "```go\n  t1, _ := time.Parse(time.RFC3339,\"2019-09-27T22:18:11+00:00\")\n  t2, _ := time.Parse(time.UnixDate,\"2019-09-27T22:18:11+00:00\")\n  t3, _ := time.Parse(time.ANSIC,\"2019-09-27T22:18:11+00:00\")\n  fmt.Println(\"RFC3339:\",t1)\n  fmt.Println(\"UnixDate\",t2)\n  fmt.Println(\"ANSIC\",t3)\n```", "```go\nRFC3339: 2019-19-27 22:18:11 +0000 +0000\nUnixDate 0001-01-01 00:00:00 +0000 UTC\nANSIC 0001-01-01 00:00:00 +0000 UTC\n```", "```go\ndate := time.Date(2019, 9, 27, 18, 50, 48, 324359102, time.UTC)\nfmt.Println(date)\n```", "```go\nfunc Date(year int, month Month, day, hour, min, sec, nsec int, loc *Location)   Time\n```", "```go\n2019-09-27 18:50:48.324359102 +0000 UTC\n```", "```go\ndate := time.Date(2019, 9, 27, 18, 50, 48, 324359102, time.UTC)\nnext_date := date.AddDate(1, 2, 3)\nfmt.Prinln(next_date)\n```", "```go\n2020-11-30 18:50:48.324359102 +0000 UTC\n```", "```go\nCurrent := time.Now()\n  Berlin, _ := time.LoadLocation(\"America/Los_Angeles\")\n  fmt.Println(\"The local current time is:\",Current.Format(time.ANSIC))\n  fmt.Println(\"The time in Berlin is: \",Current.In(Berlin).Format(time.ANSIC))\n```", "```go\nThe local current time is: Fri Oct 18 08:14:48 2019\nThe time in Berlin is: Thu Oct 17 23:14:48 2019\n```", "```go\n    package main\n    import \"time\"\n    import \"fmt\"\n    ```", "```go\n    func timeDiff(timezone string) (string, string)  {\n      Current := time.Now()\n      RemoteZone, _ := time.LoadLocation(timezone)\n      RemoteTime := Current.In(RemoteZone)\n      fmt.Println(\"The current time is: \",Current.Format(time.ANSIC))\n      fmt.Println(\"The timezone:\",timezone,\"time is:\",RemoteTime)\n      return Current.Format(time.ANSIC), RemoteTime.Format(time.ANSIC)\n    }\n    ```", "```go\n    func main(){\n      fmt.Println(timeDiff(\"America/Los_Angeles\"))\n    }\n    ```", "```go\n    go run Chapter_10_Exercise_3.go\n    ```", "```go\n    The current time is: Thu Oct 17 15:37:02 2019\n    The timezone: America/Los_Angeles time is: 2019-10-17 06:37:02.2440679 -0700   PDT\n    Thu Oct 17 15:37:02 2019 Thu Oct 17 06:37:02 2019\n    ```", "```go\n    15:32:30 2019/10/17\n    ```", "```go\n    2:49:21 2019/1/31\n    ```", "```go\n    The execution took exactly 2.0016895 seconds!\n    ```", "```go\n    The current time: Thu Oct 17 15:16:48 2019\n    6 hours, 6 minutes and 6 seconds from now the time will be:  Thu Oct 17   21:22:54 2019\n    ```", "```go\n    The local current time is: Thu Oct 17 15:16:13 2019\n    The time in New York is: Thu Oct 17 09:16:13 2019\n    The time in Los Angeles is: Thu Oct 17 06:16:13 2019\n    ```"]