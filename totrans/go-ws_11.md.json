["```go\n{\n\"firstname\":\"Captain\",\n\"lastname\":\"Marvel\"\n}\n<avenger>\n<firstname>Captain</firstname>\n<lastname>\"Marvel\"</lastname>\n</avenger>\n```", "```go\n    Example: {\"firstname\": \"Captain\"}\n    ```", "```go\n    Example: {\"age\": 32}\n    ```", "```go\n    Example: {\"hobbies\": [\"Go\", \"Saving Earth\", \"Shield\"]}\n    ```", "```go\n    Example: {\"ismarried\": false}\n    ```", "```go\n    Example: {\"middlename\": null}\n    ```", "```go\n    type person struct {\n      firstname string\n      middlename string\n      lastname string\n      age int\n      ismarried bool\n      hobbies []string\n    }\n    {\n      \"person\": {\n        \"firstname\": \"Captain\",\n        \"middlename\": null,\n        \"lastname\": \"Marvel\",\n        \"age\": 32,\n        \"ismarried\": false,\n        \"hobbies\": [\"Go\", \"Saving Earth\", \"Shield\"]\n      }\n    }\n    ```", "```go\nfunc Unmarshal(data []byte, v interface{}) error\n```", "```go\npackage main\nimport (\n  \"encoding/json\"\n  \"fmt\"\n)\ntype greeting struct {\n  Message string \n}\nfunc main() {\n  data := []byte(`\n  {\n  \"message\": \"Greetings fellow gopher!\"\n  }\n`)\n  var v greeting\n  err := json.Unmarshal(data, &v)\n  if err != nil {\n    fmt.Println(err)\n  }\n  fmt.Println(v.Message)\n}\n```", "```go\ntype greeting struct {\n  Message string \n}\n```", "```go\nfunc main() {\n  data := []byte(`\n  {\n  \"message\": \"Greetings fellow gopher!\"\n  }\n`)\n```", "```go\nvar g greeting\n```", "```go\n  err := json.Unmarshal(data, &v)\n  if err != nil {\n    fmt.Println(err)\n  }\n```", "```go\nfmt.Println(v.Message)\n```", "```go\nGreetings fellow gopher!\n```", "```go\ntype person struct {\n  LastName string `json:\"lname\"`\n}\n```", "```go\ntype person struct {\n  lastName string `json:\"lname\"`\n}\n```", "```go\npackage main\nimport (\n  \"encoding/json\"\n  \"fmt\"\n)\ntype greeting struct {\n  SomeMessage string `json:\"message\"`\n}\nfunc main() {\n  data := []byte(`\n  {\n  \"message\": \"Greetings fellow gopher!\"\n  }\n`)\n  var g greeting\n  err := json.Unmarshal(data, &g)\n  if err != nil {\n    fmt.Println(err)\n  }\n  fmt.Println(g.SomeMessage)\n}\n```", "```go\ntype greeting struct {\n  SomeMessage string `json:\"message\"`\n}\n```", "```go\nerr := json.Unmarshal(data, &g)\n```", "```go\nGreetings fellow gopher!\n```", "```go\npackage main\nimport (\n  \"encoding/json\"\n  \"fmt\"\n  \"os\"\n)\ntype greeting struct {\n  SomeMessage string `json:\"message\"`\n}\nfunc main() {\n  data := []byte(`\n  {\n  message\": \"Greetings fellow gopher!\"\n  }\n`)\n  if !json.Valid(data) {\n    fmt.Printf(\"JSON is not valid: %s\", data)\n    os.Exit(1)\n  }\n  //Code to perform the unmarshal\n}\n```", "```go\n{\n\"lname\": \"Smith\",\n  \"fname\": \"John\",\n  \"address\": {\n    \"street\": \"Sulphur Springs Rd\",\n      \"city\": \"Park City\",\n      \"state\": \"VA\",\n      \"zipcode\": 12345\n    }\n}\n```", "```go\npackage main\nimport (\n  \"encoding/json\"\n  \"fmt\"\n)\ntype person struct {\n  Lastname  string  `json:\"lname\"`\n  Firstname string  `json:\"fname\"`\n  Address   address `json:\"address\"`\n}\ntype address struct {\n  Street  string `json:\"street\"`\n  City    string `json:\"city\"`\n  State   string `json:\"state\"`\n  ZipCode int    `json:\"zipcode\"`\n}\nfunc main() {\n  data := []byte(`\n      {\n      \"lname\": \"Smith\",\n      \"fname\": \"John\",\n      \"address\": {\n        \"street\": \"Sulphur Springs Rd\",\n        \"city\": \"Park City\",\n        \"state\": \"VA\",\n        \"zipcode\": 12345\n      }\n    }\n  `)\n  var p person\n  err := json.Unmarshal(data, &p)\n  if err != nil {\n    fmt.Println(err)\n  }\n  fmt.Printf(\"%+v\",p)\n}\n```", "```go\ntype person struct {\n  Lastname  string  `json:\"lname\"`\n  Firstname string  `json:\"fname\"`\n  Address   address `json:\"address\"`\n}\n```", "```go\n  data := []byte(`\n      {\n      \"lname\": \"Smith\",\n      \"fname\": \"John\",\n      \"address\": {\n        \"street\": \"Sulphur Springs Rd\",\n        \"city\": \"Park City\",\n        \"state\": \"VA\",\n        \"zipcode\": 12345\n      }\n    }\n  `)\n```", "```go\nvar p person\n  err := json.Unmarshal(data, &p)\n```", "```go\n    package main\n    import (\n      \"encoding/json\"\n      \"fmt\"\n    )\n    ```", "```go\n    type student struct {\n      StudentId     int      `json:\"id\"`\n      LastName      string   `json:\"lname\"`\n      MiddleInitial string   `json:\"minitial\"`\n      FirstName     string   `json:\"fname\"`\n      IsEnrolled    bool     `json:\"enrolled\"`\n      Courses       []course `json:\"classes\"`\n    }\n    ```", "```go\n    type course struct {\n      Name   string `json:\"coursename\"`\n      Number int    `json:\"coursenum\"`\n      Hours  int    `json:\"coursehours\"`\n    }\n    ```", "```go\n    func main() {\n      }\n    ```", "```go\n      data := []byte(`\n        {\n          \"id\": 123,\n          \"lname\": \"Smith\",\n          \"minitial\": null,\n          \"fname\": \"John\",\n          \"enrolled\": true,\n          \"classes\": [{\n            \"coursename\": \"Intro to Golang\",\n            \"coursenum\": 101,\n            \"coursehours\": 4\n          },\n        {\n            \"coursename\": \"English Lit\",\n            \"coursenum\": 101,\n            \"coursehours\": 3\n          },\n        {\n            \"coursename\": \"World History\",\n            \"coursenum\": 101,\n            \"coursehours\": 3\n          }\n      ]\n        }\n      `)\n    ```", "```go\n      var s student\n    ```", "```go\n      err := json.Unmarshal(data, &s)\n      if err != nil {\n        fmt.Println(err)\n      }\n    ```", "```go\n      fmt.Println(s)\n    }\n    ```", "```go\n    go build\n    ```", "```go\nfunc Marshal(v interface{}) ([]byte, error)\n```", "```go\npackage main\nimport (\n  \"encoding/json\"\n  \"fmt\"\n)\ntype greeting struct {\n  SomeMessage string\n}\nfunc main() {\n  var v greeting\n  v.SomeMessage = \"Marshal me!\"\n  json, err := json.Marshal(v)\n  if err != nil {\n    fmt.Println(err)\n  }\n  fmt.Printf(\"%s\",json)\n}\n```", "```go\ntype greeting struct {\n  SomeMessage string\n}\n```", "```go\njson, err := json.Marshal(v)\n```", "```go\n{\"SomeMessage\":\"Marshal me!\"}\n```", "```go\npackage main\nimport (\n  \"encoding/json\"\n  \"fmt\"\n)\ntype book struct {\n  ISBN          string `json:\"isbn\"`\n  Title         string `json:\"title\"`\n  YearPublished int    `json:\"yearpub\"`\n  Author        string `json:\"author\"`\n  CoAuthor      string `json:\"coauthor\"`\n}\nfunc main() {\n  var b book\n  b.ISBN = \"9933HIST\"\n  b.Title = \"Greatest of all Books\"\n  b.Author = \"John Adams\"\n  json, err := json.Marshal(b)\n  if err != nil {\n    fmt.Println(err)\n  }\n  fmt.Printf(\"%s\", json)\n} \n```", "```go\n{\"isbn\":\"9933HIST\",\"title\":\"Greatest of all Books\",\"yearpub\":0,\"author\":\"John   Adams\",\"coauthor\":\"\"}\n```", "```go\npackage main\nimport (\n  \"encoding/json\"\n  \"fmt\"\n)\ntype book struct {\n  ISBN          string `json:\"isbn\"`\n  Title         string `json:\"title\"`\n  YearPublished int    `json:\"yearpub,omitempty\"`\n  Author        string `json:\"author\"`\n  CoAuthor      string `json:\"coauthor,omitempty\"`\n}\nfunc main() {\n  var b book\n  b.ISBN = \"9933HIST\"\n  b.Title = \"Greatest of all Books\"\n  b.Author = \"John Adams\"\n  json, err := json.Marshal(b)\n  if err != nil {\n    fmt.Println(err)\n  }\n  fmt.Printf(\"%s\", json)\n}\n```", "```go\n  YearPublished int    `json:\"yearpub,omitempty\"`\n  CoAuthor      string `json:\"coauthor,omitempty\"`\n```", "```go\n{\"isbn\":\"9933HIST\",\"title\":\"Greatest of all Books\",\"author\":\"John Adams\"}\n```", "```go\nYearPublished int    `json:\"yearpub, omitempty\"`\n```", "```go\n{\"isbn\":\"9933HIST\",\"title\":\"Greatest of all Books\",\"yearpub\":0,\"author\":\"John \n  Adams\"}\n```", "```go\npackage main\nimport (\n  \"encoding/json\"\n  \"fmt\"\n)\ntype book struct {\n  ISBN          string `json:\"isbn\"`\n  Title         string `json:\"title\"`\n  YearPublished int    `json:\",omitempty\"`\n  Author        string `json:\",omitempty\"`\n  CoAuthor      string `json:\"-\"`\n}\nfunc main() {\n  var b book\n  b.ISBN = \"9933HIST\"\n  b.Title = \"Greatest of all Books\"\n  b.Author = \"John Adams\"\n  b.CoAuthor =\"Can't see me\"\n  json, err := json.Marshal(b)\n  if err != nil {\n    fmt.Println(err)\n  }\n  fmt.Printf(\"%s\", json)\n}\n```", "```go\n  YearPublished int    `json:\",omitempty\"`\n  Author        string `json:\",omitempty\"`\n```", "```go\n    CoAuthor      string `json:\"-\"`\n    ```", "```go\n{\"isbn\":\"9933HIST\",\"title\":\"Greatest of all Books\",\"Author\":\"John Adams\"}\n```", "```go\nfunc MarshalIndent(v interface{}, prefix, indent string) ([]byte, error)\n```", "```go\npackage main\nimport (\n  \"encoding/json\"\n  \"fmt\" \n  \"os\"\n)\ntype person struct {\n  LastName  string  `json:\"lname\"`\n  FirstName string  `json:\"fname\"`\n  Address   address `json:\"address\"`\n}\ntype address struct {\n  Street  string `json:\"street\"`\n  City    string `json:\"city\"`\n  State   string `json:\"state\"`\n  ZipCode int    `json:\"zipcode\"`\n}\nfunc main() {\n  p := person{LastName: \"Vader\", FirstName: \"Darth\"} \n  p.Address.Street = \"Galaxy Far Away\" \n  p.Address.City= \"Dark Side\"\n  p.Address.State= \"Tatooine\"\n  p.Address.ZipCode =12345\n  noPrettyPrint, err := json.Marshal(p)\n  if err != nil {\n    fmt.Println(err)\n    os.Exit(1)\n  }\n  prettyPrint, err := json.MarshalIndent(p, \"\", \"    \")\n  if err != nil {\n    fmt.Println(err)\n    os.Exit(1)\n  }\n  fmt.Println(string(noPrettyPrint))\n  fmt.Println()\n  fmt.Println(string(prettyPrint))\n}\n```", "```go\ntype person struct {\n  LastName  string  `json:\"lname\"`\n  FirstName string  `json:\"fname\"`\n  Address   address `json:\"address\"`\n}\ntype address struct {\n  Street  string `json:\"street\"`\n  City    string `json:\"city\"`\n  State   string `json:\"state\"`\n  ZipCode int    `json:\"zipcode\"`\n}\n```", "```go\n  p := person{LastName: \"Vader\", FirstName: \"Darth\"} \n  p.Address.Street = \"Galaxy Far Away\" \n  p.Address.City= \"Dark Side\"\n  p.Address.State= \"Tatooine\"\n  p.Address.ZipCode =12345\n```", "```go\n  noPrettyPrint, err := json.Marshal(p)\n  if err != nil {\n    fmt.Println(err)\n    os.Exit(1)\n  }\n```", "```go\n  prettyPrint, err := json.MarshalIndent(p, \"\", \"    \")\n  if err != nil {\n    fmt.Println(err)\n    os.Exit(1)\n  }\n```", "```go\nfmt.Println(string(noPrettyPrint))\n```", "```go\n{\"lname\":\"Vader\",\"fname\":\"Darth\",\"address\":{\"street\":\"Galaxy Far   Away\",\"city\":\"Dark Side\",\"state\":\"Tatooine\",\"zipcode\":12345}}\n```", "```go\nfmt.Println(string(prettyPrint))\n```", "```go\n type student struct {\n  StudentId     int      `json:\"id\"`\n  LastName      string   `json:\"lname\"`\n  MiddleInitial string   `json:\"minitial\"`\n  FirstName     string   `json:\"fname\"`\n  IsEnrolled    bool     `json:\"enrolled\"`\n  Courses       []course `json:\"classes\"`\n}\n```", "```go\n    package main\n    import (\n      \"encoding/json\"\n      \"fmt\"\n      \"os\"\n    )\n    ```", "```go\n    type student struct {\n      StudentId     int      `json:\"id\"`\n      LastName      string   `json:\"lname\"`\n      MiddleInitial string   `json:\"mname,omitempty\"`\n      FirstName     string   `json:\"fname\"`\n      IsMarried     bool   `json:\"-\"`\n      IsEnrolled    bool     `json:\"enrolled,omitempty \"`\n      Courses       []course `json:\"classes\"`\n    }\n    ```", "```go\n    type course struct {\n      Name   string `json:\"coursename\"`\n      Number int    `json:\"coursenum\"`\n      Hours  int    `json:\"coursehours\"`\n    }\n    ```", "```go\n    func newStudent(studentID int, lastName, middleInitial, firstName string,\n      isMarried, isEnrolled bool) student {\n      s := student{StudentId: studentID,\n        LastName:      lastName,\n        MiddleInitial: middleInitial,\n        FirstName:     firstName,\n        IsMarried:     isMarried,\n        IsEnrolled:    isEnrolled,\n      }\n      return s\n    }\n    ```", "```go\n    func main() {\n    }\n    ```", "```go\n      s := newStudent(1, \"Williams\", \"s\", \"Felicia\", false, false)\n    ```", "```go\n      student1, err := json.MarshalIndent(s, \"\", \"\")\n      if err != nil {\n        fmt.Println(err)\n        os.Exit(1)\n      }\n    ```", "```go\n      fmt.Println(string(student1))\n      fmt.Println()\n    ```", "```go\n      s2 := newStudent(2, \"Washington\", \"\", \"Bill\", true, true)\n    ```", "```go\n      c := course{Name: \"World Lit\", Number: 101, Hours: 3}\n      s2.Courses = append(s2.Courses, c)\n      c = course{Name: \"Biology\", Number: 201, Hours: 4}\n      s2.Courses = append(s2.Courses, c)\n      c = course{Name: \"Intro to Go\", Number: 101, Hours: 4}\n      s2.Courses = append(s2.Courses, c)\n    ```", "```go\n      student2, err := json.MarshalIndent(s2, \"\", \"\")\n      if err != nil {\n        fmt.Println(err)\n        os.Exit(1)\n      }\n    ```", "```go\n      fmt.Println(string(student2))\n    }\n    ```", "```go\n    {\n        \"id\": 1,\n        \"lname\": \"Williams\",\n        \"mname\": \"S\",\n        \"fname\": \"Felicia\",\n        \"classes\": null\n    }\n    ```", "```go\n    {\n        \"id\": 2,\n        \"lname\": \"Washington\",\n        \"Fname\": \"Bill\",\n        \"IsEnrolled\": true,\n        \"classes\": [\n            {\n                \"coursename\": \"World Lit\",\n                \"coursenum\": 101,\n                \"coursehours\": 3\n            },\n            {\n                \"coursename\": \"Biology\",\n                \"coursenum\": 201,\n                \"coursehours\": 4\n            },\n            {\n                \"coursename\": \"Intro to Go\",\n                \"coursenum\": 101,\n                \"coursehours\": 4\n            }\n        ]\n    }\n    ```", "```go\npackage main\nimport (\n  \"encoding/json\"\n  \"fmt\"\n)\nfunc main() {\n  jsonData := []byte(`{\"checkNum\":123,\"amount\":200,\"category\":[\"gift\",\"clothing\"]}`)\n  var v interface{}\n  json.Unmarshal(jsonData, &v)\n  fmt.Println(v)\n}\n```", "```go\njsonData := []byte(`{\"checkNum\":123,\"amount\":200,\"category\":[\"gift\",\"clothing\"]}`)\n```", "```go\n  var v interface{}\n  json.Unmarshal(jsonData, &v)\n```", "```go\nmap[amount:200 category:[gift clothing] checkNum: 123]\n```", "```go\nv = map[string]interface{}{\n  \"amount\": 200,\n  \"category\": []interface{}{\n    \"gift\",\n    \"clothing\",\n  },\n  \"checkNum\":  123,\n}\n```", "```go\n    package main\n    import (\n      \"encoding/json\"\n      \"fmt\"\n      \"os\"\n    )\n    ```", "```go\n    func main() {\n      jsonData := []byte(`\n    {\n      \"id\": 2,\n      \"lname\": \"Washington\",\n      \"fname\": \"Bill\",\n      \"IsEnrolled\": true,\n      \"grades\":[100,76,93,50],\n      \"class\": \n        {\n          \"coursename\": \"World Lit\",\n          \"coursenum\": 101,\n          \"coursehours\": 3\n        }\n    }\n    `)\n    ```", "```go\n      if !json.Valid(jsonData) {\n        fmt.Printf(\"JSON is not valid: %s\", jsonData)\n        os.Exit(1)\n      }\n    ```", "```go\n      var v interface{}\n    ```", "```go\n      err := json.Unmarshal(jsonData, &v)\n      if err != nil {\n        fmt.Println(err)\n        os.Exit(1)\n      }\n    ```", "```go\n      data := v.(map[string]interface{})\n      for k, v := range data {\n        switch value := v.(type) {\n        case string:\n          fmt.Println(\"(string):\", k, value)\n        case float64:\n          fmt.Println(\"(float64):\", k, value)\n        case bool:\n          fmt.Println(\"(bool):\", k, value)\n        case []interface{}:\n          fmt.Println(\"(slice):\", k)\n          for i, j := range value {\n            fmt.Println(\"    \", i, j)\n          }\n        default:\n          fmt.Println( \"(unknown):\",k, value)\n          }\n      }\n    }\n    ```", "```go\n    go build\n    ```", "```go\n    package main\n    import (\n      \"bytes\"\n      \"encoding/gob\"\n      \"fmt\"\n      \"io\"\n      \"log\"\n    )\n    ```", "```go\n    type UserClient struct {\n      ID   string\n      Name string\n    }\n    ```", "```go\n    type TxClient struct {\n      ID          string\n      User        *UserClient\n      AccountFrom string\n      AccountTo   string\n      Amount      float64\n    }\n    ```", "```go\n    type UserServer struct {\n      ID string\n    }\n    ```", "```go\n    type TxServer struct {\n      ID          string\n      User        UserServer\n      AccountFrom string\n      AccountTo   string\n      Amount      *float32\n    }\n    ```", "```go\n    func main() {\n    ```", "```go\n      var net bytes.Buffer\n    ```", "```go\n      clientTx := &TxClient{\n        ID: \"123456789\",\n        User: &UserClient{\n          ID:   \"ABCDEF\",\n          Name: \"James\",\n        },\n        AccountFrom: \"Bob\",\n        AccountTo:   \"Jane\",\n        Amount:      9.99,\n      }\n    ```", "```go\n      enc := gob.NewEncoder(&net)\n    ```", "```go\n      if err := enc.Encode(clientTx); err != nil {\n        log.Fatal(\"error encoding: \", err)\n      }\n    ```", "```go\n      serverTx, err := sendToServer(&net)\n    ```", "```go\n      if err != nil {\n        log.Fatal(\"server error: \", err)\n      }\n    ```", "```go\n      fmt.Printf(\"%#v\\n\", serverTx)\n    ```", "```go\n    }\n    ```", "```go\n    func sendToServer(net io.Reader) (*TxServer, error) {\n    ```", "```go\n      tx := &TxServer{}\n    ```", "```go\n      dec := gob.NewDecoder(net)\n    ```", "```go\n      err := dec.Decode(tx)\n    ```", "```go\n      return tx, err\n    ```", "```go\n    }\n    ```", "```go\n    go build\n    ```", "```go\n      jsonData := []byte(`\n      {\n        \"username\" :\"blackhat\",\n        \"shipto\":  \n          {\n              \"street\": \"Sulphur Springs Rd\",\n              \"city\": \"Park City\",\n              \"state\": \"VA\",\n              \"zipcode\": 12345\n          },\n        \"order\":\n          {\n            \"paid\":false,\n            \"orderdetail\" : \n              [{\n                \"itemname\":\"A Guide to the World of zeros and ones\",\n                \"desc\": \"book\",\n                \"qty\": 3,\n                \"price\": 50\n              }]\n          }\n      }\n      `)\n    ```"]