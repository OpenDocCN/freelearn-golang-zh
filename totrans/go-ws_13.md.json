["```go\ngo get github.com/lib/pq\n```", "```go\npackage main\nimport \"fmt\"\nimport \"database/sql\"\nimport _ \"github.com/lib/pq\"\n```", "```go\ndb, err := sql.Open(\"postgres\", \"user=postgres password=Start!123 host=127.0.0.1 port=5432 dbname=postgres sslmode=disable\")\n```", "```go\nif err != nil {\n  panic(err)\n}else{\n  fmt.Println(\"The connection to the DB was successfully initialized!\")\n}\n```", "```go\nconnectivity := db.Ping()\nif connectivity != nil{\n  panic(err)\n}else{\n  fmt.Println(\"Good to go!\")\n}\n```", "```go\ndb.Close()\ndefer db.Close()\n```", "```go\nCREATE TABLE table_name (\n    column1 datatype constrain,\n    column2 datatype constrain,\n    column3 datatype constrain,\n    ....\n);\n```", "```go\nTRUNCATE TABLE table_name\n```", "```go\nDROP TABLE table_name\n```", "```go\npackage main\nimport \"fmt\"\nimport \"database/sql\"\nimport _ \"github.com/lib/pq\"\n```", "```go\nDBInit.go\n5  func main(){\n6    db, err := sql.Open(\"postgres\", \"user=postgres password=Start!123        host=127.0.0.1 port=5432 dbname=postgres sslmode=disable\")\n7    if err != nil {\n8      panic(err)\n9    }else{\n10     fmt.Println(\"The connection to the DB was successfully          initialized!\")\n11   }\n12 DBCreate := `\n13   CREATE TABLE public.test\n14   (\n15     id integer,\n16     name character varying COLLATE pg_catalog.\"default\"\n17   )\n18   WITH (\n19     OIDS = FALSE\n20   )\nThe full code is available at: https://packt.live/34Ovy15\n```", "```go\nThe connection to the DB was successfully initialized!\nThe table was successfully created!\n```", "```go\n\"SELECT password FROM Auth WHERE username=<input from user>\"\n```", "```go\n\"SELECT password FROM Auth WHERE username=<input  from user> OR '1'='1'\"\n```", "```go\npackage main\nimport \"fmt\"\nimport \"database/sql\"\nimport _ \"github.com/lib/pq\"\n```", "```go\nfunc main(){\ndb, err := sql.Open(\"postgres\", \"user=postgres password=Start!123 host=127.0.0.1 port=5432 dbname=postgres sslmode=disable\")\nif err != nil {\n  panic(err)\n}else{\n  fmt.Println(\"The connection to the DB was successfully initialized!\")\n}\ninsert, err := db.Prepare(\"INSERT INTO test VALUES ($1, $2)\")\nif err != nil {\n  panic(err)\n}\n_,err = insert.Exec(2,\"second\")\nif err != nil {\n  panic(err)\n} else{\n  fmt.Println(\"The value was successfully inserted!\")\n}\ndb.Close()\n}\n```", "```go\nThe connection to the DB was successfully initialized!\nThe vale was successfully inserted!\n```", "```go\n    package main\n    import \"fmt\"\n    import \"database/sql\"\n    import _ \"github.com/lib/pq\"\n    func main(){\n    }\n    ```", "```go\n    var prop string\n    ```", "```go\n    db, err := sql.Open(\"postgres\", \"user=postgres password=Start!123 host=127.0.0.1   port=5432 dbname=postgres sslmode=disable\")\n    if err != nil {\n      panic(err)\n    }else{\n      fmt.Println(\"The connection to the DB was successfully initialized!\")\n    }\n    ```", "```go\n    TableCreate := `\t\n    CREATE TABLE Number\n    (\n      Number integer NOT NULL,\n      Property text COLLATE pg_catalog.\"default\" NOT NULL\n    )\n    WITH (\n      OIDS = FALSE\n    )\n    TABLESPACE pg_default;\n    ALTER TABLE Number\n      OWNER to postgres;\n    `\n    ```", "```go\n    _,err = db.Exec(TableCreate)\n    if err != nil {\n      panic(err)\n    } else{\n      fmt.Println(\"The table called Messages was successfully created!\")\n    }\n    ```", "```go\n    insert, insertErr := db.Prepare(\"INSERT INTO Number VALUES($1,$2)\")\n    if insertErr != nil{\n      panic(insertErr)\n    }\n    for i := 0; i < 100; i++ {\n      if i % 2 == 0{\n           prop = \"Even\"\n      }else{\n        prop = \"Odd\"\n      }\n      _, err = insert.Exec(i,prop)\n      if err != nil{\n        panic(err)\n      }else{\n        fmt.Println(\"The number:\",i,\"is:\",prop)\n      }\n    }\n    insert.Close()\n    fmt.Println(\"The numbers are ready.\")\n    ```", "```go\n    db.Close()\n    ```", "```go\npackage main\nimport \"fmt\"\nimport \"database/sql\"\nimport _ \"github.com/lib/pq\"\n```", "```go\nfunc main(){\nvar id int\nvar name string\ndb, err := sql.Open(\"postgres\", \"user=postgres password=Start!123 host=127.0.0.1   port=5432 dbname=postgres sslmode=disable\")\nif err != nil {\n  panic(err)\n}else{\n  fmt.Println(\"The connection to the DB was successfully initialized!\")\n}\nrows, err := db.Query(\"SELECT * FROM test\")\nif err != nil {\n  panic(err)\n}\nfor rows.Next() {\n  err := rows.Scan(&id, &name)\n  if err != nil {\n    panic(err)\n  }\n  fmt.Println(id, name)\n}\nerr = rows.Err()\nif err != nil {\n  panic(err)\n}\nrows.Close()\ndb.Close()\n}\n```", "```go\nThe connection to the DB was successfully initialized!\n2 second\n```", "```go\nDBPrepare.go\n1  package main\n2  import \"fmt\"\n3  import \"database/sql\"\n4  import _ \"github.com/lib/pq\"\nThe full code is available at: https://packt.live/376LxJo\n```", "```go\nfunc main(){\nvar name string\nvar id int\nid = 2\ndb, err := sql.Open(\"postgres\", \"user=postgres password=Start!123 host=127.0.0.1   port=5432 dbname=postgres sslmode=disable\")\nif err != nil {\n  panic(err)\n}else{\n  fmt.Println(\"The connection to the DB was successfully initialized!\")\n}\nqryrow, err := db.Prepare(\"SELECT name FROM test WHERE id=$1\")\nif err != nil{\n  panic(err)\n}\nerr = qryrow.QueryRow(id).Scan(&name)\nif err != nil {\n  panic(err)\n}\nfmt.Println(\"The name column value is\",name,\"of the row with id=\",id)\nqryrow.Close()\ndb.Close()\n}\n```", "```go\nThe connection to the DB was successfully initialized!\nThe name column value is second of the row with id= 2\n```", "```go\npackage main\nimport \"fmt\"\nimport \"database/sql\"\nimport _ \"github.com/lib/pq\"\n```", "```go\nfunc main(){\ndb, err := sql.Open(\"postgres\", \"user=postgres password=Start!123 host=127.0.0.1 port=5432 dbname=postgres sslmode=disable\")\nif err != nil {\n  panic(err)\n}else{\n  fmt.Println(\"The connection to the DB was successfully initialized!\")\n}\nUpdateStatement :=`\nUPDATE test \nSET name = $1 \nWHERE id = $2\n`\nUpdateResult, UpdateResultErr := db.Exec(UpdateStatement,\"well\",2)\nif UpdateResultErr != nil {\n  panic(UpdateResultErr)\n}\nUpdatedRecords, UpdatedRecordsErr := UpdateResult.RowsAffected()\nif UpdatedRecordsErr != nil {\n  panic(UpdatedRecordsErr)\n}\nfmt.Println(\"Number of records updated:\",UpdatedRecords)\ndb.Close()\n}\n```", "```go\nThe connection to the DB was successfully initialized!\nNumber of records updated: 1\n```", "```go\nDBDelete.go\n12 DeleteStatement :=`\n13 DELETE FROM test \n14 WHERE id = $1\n15 `\nThe full code is available at: https://packt.live/371GoCy\n```", "```go\nDeleteResult, DeleteResultErr := db.Exec(DeleteStatement,2)\nif DeleteResultErr != nil {\n  panic(DeleteResultErr)\n}\n```", "```go\nDeletedRecords, DeletedRecordsErr := DeleteResult.RowsAffected()\nif DeletedRecordsErr != nil {\n  panic(DeletedRecordsErr)\n}\nfmt.Println(\"Number of records deleted:\",DeletedRecords)\n```", "```go\nThe connection to the DB was successfully initialized!\nNumber of records deleted: 1\n```", "```go\n    package main\n    import \"fmt\"\n    import \"database/sql\"\n    import _ \"github.com/lib/pq\"\n    import \"math/big\"\n    func main(){\n    }\n    ```", "```go\n    var number int64\n    var prop string\n    var primeSum int64\n    var newNumber int64\n    ```", "```go\n    db, err := sql.Open(\"postgres\", \"user=postgres password=Start!123 host=127.0.0.1   port=5432 dbname=postgres sslmode=disable\")\n    if err != nil {\n      panic(err)\n    }else{\n      fmt.Println(\"The connection to the DB was successfully initialized!\")\n    }\n    ```", "```go\n    AllTheNumbers := \"SELECT * FROM Number\"\n    Numbers, err := db.Prepare(AllTheNumbers)\n    if err != nil {\n      panic(err)\n    }\n    primeSum = 0\n    result, err := Numbers.Query()\n    fmt.Println(\"The list of prime numbers:\")\n    for result.Next(){\n        err = result.Scan(&number, &prop)\n        if err != nil{\n        panic(err)\n        }\n        if big.NewInt(number).ProbablyPrime(0) {\n          primeSum += number\n          fmt.Print(\" \",number)\n        }\n      }\n    Numbers.Close()\n    ```", "```go\n    fmt.Println(\"\\nThe total sum of prime numbers in this range is:\",primeSum)\n    ```", "```go\n    Remove := \"DELETE FROM Number WHERE Property=$1\"\n    removeResult, err := db.Exec(Remove,\"Even\")\n    if err != nil {\n      panic(err)\n    }\n    ModifiedRecords, err := removeResult.RowsAffected()\n    fmt.Println(\"The number of rows removed:\",ModifiedRecords)\n    fmt.Println(\"Updating numbers...\")\n    ```", "```go\n    Update := \"UPDATE Number SET Number=$1 WHERE Number=$2 AND Property=$3\"\n    AllTheNumbers = \"SELECT * FROM Number\"\n    Numbers, err = db.Prepare(AllTheNumbers)\n    if err != nil {\n      panic(err)\n    } \n    result, err = Numbers.Query()\n    for result.Next(){\n        err = result.Scan(&number, &prop)\n        if err != nil{\n        panic(err)\n        }\n        newNumber = number + primeSum\n        _, err = db.Exec(Update,newNumber,number,prop)\n        if err != nil {\n          panic(err)\n        }\n      }\n    Numbers.Close()\n    fmt.Println(\"The execution is now complete...\")\n    ```", "```go\n    db.Close()\n    ```", "```go\nEmptyTable, EmptyTableErr := db.Exec(\"TRUNCATE TABLE test\")\nif EmptyTableErr != nil {\n  panic(EmptyTableErr)\n}\n```", "```go\nDropTable, DropTableErr := db.Exec(\"DROP TABLE test\")\nif DropTableErr != nil {\n  panic(DropTableErr)\n}\n```"]