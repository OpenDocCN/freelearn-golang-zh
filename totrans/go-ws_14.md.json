["```go\n    package main\n    import (\n        \"io/ioutil\"\n        \"log\"\n        \"net/http\"\n    )\n    ```", "```go\n    func getDataAndReturnResponse() string {\n    ```", "```go\n        r, err := http.Get(\"https://www.google.com\")\n        if err != nil {\n            log.Fatal(err)\n        }\n    ```", "```go\n        defer r.Body.Close()\n        data, err := ioutil.ReadAll(r.Body)\n        if err != nil {\n            log.Fatal(err)\n        }\n    ```", "```go\n        return string(data)\n    }\n    ```", "```go\n    func getDataAndReturnResponse() string {\n        // send the GET request\n        r, err := http.Get(\"https://www.google.com\")\n        if err != nil {\n            log.Fatal(err)\n        }\n        // get data from the response body\n        defer r.Body.Close()\n        data, err := ioutil.ReadAll(r.Body)\n        if err != nil {\n            log.Fatal(err)\n        }\n        // return the response data\n        return string(data)\n    }\n    ```", "```go\n    func main() {\n        data := getDataAndReturnResponse()\n        log.Println(data)\n    }\n    ```", "```go\n    go run server.go\n    ```", "```go\n    package main\n    import (\n        \"log\"\n        \"net/http\"\n    )\n    type server struct{}\n    func (srv server) ServeHTTP(w http.ResponseWriter, r   *http.Request) {\n        msg := \"{\\\"message\\\": \\\"hello world\\\"}\"\n        w.Write([]byte(msg))\n    }\n    func main() {\n        log.Fatal(http.ListenAndServe(\":8080\", server{}))\n    }\n    ```", "```go\n    package main\n    import (\n        \"encoding/json\"\n        \"fmt\"\n        \"io/ioutil\"\n        \"log\"\n        \"net/http\"\n    )\n    ```", "```go\n    type messageData struct {\n        Message string `json:\"message\"`\n    }\n    ```", "```go\n    func getDataAndReturnResponse() messageData {\n    ```", "```go\n        r, err := http.Get(\"http://localhost:8080\")\n        if err != nil {\n            log.Fatal(err)\n        }\n        defer r.Body.Close()\n        data, err := ioutil.ReadAll(r.Body)\n        if err != nil {\n            log.Fatal(err)\n        }\n    ```", "```go\n        message := messageData{}\n        err = json.Unmarshal(data, &message)\n        if err != nil {\n            log.Fatal(err)\n        }\n    ```", "```go\n        return message\n    ```", "```go\n    func main() {\n        data := getDataAndReturnResponse()\n        fmt.Println(data.Message)\n    }\n    ```", "```go\n    go run server.go\n    ```", "```go\n    package main\n    import (\n        \"encoding/json\"\n        \"log\"\n        \"net/http\"\n    )\n    type server struct{}\n    type messageData struct {\n        Message string `json:\"message\"`\n    }\n    func (srv server) ServeHTTP(w http.ResponseWriter, r   *http.Request) {\n        jsonDecoder := json.NewDecoder(r.Body)\n        messageData := messageData{}\n        err := jsonDecoder.Decode(&messageData)\n        if err != nil {\n            log.Fatal(err)\n        }\n        jsonBytes, _ := json.Marshal(messageData)\n        log.Println(string(jsonBytes))\n        w.Write(jsonBytes)\n    }\n    func main() {\n        log.Fatal(http.ListenAndServe(\":8080\", server{}))\n    }\n    ```", "```go\n    package main\n    import (\n        \"bytes\"\n        \"encoding/json\"\n        \"fmt\"\n        \"io/ioutil\"\n        \"log\"\n        \"net/http\"\n    )\n    ```", "```go\n    type messageData struct {\n        Message string `json:\"message\"`\n    }\n    ```", "```go\n    func postDataAndReturnResponse(msg messageData) messageData {\n    ```", "```go\n        jsonBytes, _ := json.Marshal(msg)\n    ```", "```go\n        r, err := http.Post(\"http://localhost:8080\", \"application/json\", bytes.NewBuffer(jsonBytes))\n        if err != nil {\n            log.Fatal(err)\n        }\n    ```", "```go\n        defer r.Body.Close()\n        data, err := ioutil.ReadAll(r.Body)\n        if err != nil {\n            log.Fatal(err)\n        }\n        message := messageData{}\n        err = json.Unmarshal(data, &message)\n        if err != nil {\n            log.Fatal(err)\n        }\n        return message\n    ```", "```go\n    func main() {\n        msg := messageData{Message: \"Hi Server!\"}\n        data := postDataAndReturnResponse(msg)\n        fmt.Println(data.Message)\n    }\n    ```", "```go\n    server.go\n    9  func (srv server) ServeHTTP(w http.ResponseWriter, r      *http.Request) {\n    10     uploadedFile, uploadedFileHeader, err :=          r.FormFile(\"myFile\")\n    11     if err != nil {\n    12         log.Fatal(err)\n    13     }\n    14     defer uploadedFile.Close()\n    15     fileContent, err := ioutil.ReadAll(uploadedFile)\n    16     if err != nil {\n    17         log.Fatal(err)\n    18     }\n    The full code for this step is available at: https://packt.live/2SkeZHW\n    ```", "```go\n    package main\n    import (\n        \"bytes\"\n        \"fmt\"\n        \"io\"\n        \"io/ioutil\"\n        \"log\"\n        \"mime/multipart\"\n        \"net/http\"\n        \"os\"\n    )\n    ```", "```go\n    func postFileAndReturnResponse(filename string) string {\n    ```", "```go\n        fileDataBuffer := bytes.Buffer{}\n        multipartWritter := multipart.NewWriter(&fileDataBuffer)\n    ```", "```go\n        file, err := os.Open(filename)\n        if err != nil {\n            log.Fatal(err)\n        }\n    ```", "```go\n        formFile, err := multipartWritter.CreateFormFile(\"myFile\",       file.Name())\n        if err != nil {\n            log.Fatal(err)\n        }\n    ```", "```go\n        _, err = io.Copy(formFile, file)\n        if err != nil {\n            log.Fatal(err)\n        }\n        multipartWritter.Close()\n    ```", "```go\n        req, err := http.NewRequest(\"POST\",       \"http://localhost:8080\", &fileDataBuffer)\n        if err != nil {\n            log.Fatal(err)\n        }\n    ```", "```go\n        req.Header.Set(\"Content-Type\",       multipartWritter.FormDataContentType())\n    ```", "```go\n        response, err := http.DefaultClient.Do(req)\n        if err != nil {\n            log.Fatal(err)\n        }\n    ```", "```go\n        defer response.Body.Close()\n        data, err := ioutil.ReadAll(response.Body)\n        if err != nil {\n            log.Fatal(err)\n        }\n        return string(data)\n    ```", "```go\n    func main() {\n        data := postFileAndReturnResponse(\"./test.txt\")\n        fmt.Println(data)\n    }\n    ```", "```go\n    go run server.go\n    ```", "```go\n    go run server.go\n    ```", "```go\n    package main\n    import (\n        \"log\"\n        \"net/http\"\n        \"time\"\n    )\n    type server struct{}\n    func (srv server) ServeHTTP(w http.ResponseWriter, r   *http.Request) {\n        auth := r.Header.Get(\"Authorization\")\n        if auth != \"superSecretToken\" {\n            w.WriteHeader(http.StatusUnauthorized)\n            w.Write([]byte(\"Authorization token not recognized\"))\n            return\n        }\n        time.Sleep(10 * time.Second)\n        msg := \"hello client!\"\n        w.Write([]byte(msg))\n    }\n    func main() {\n        log.Fatal(http.ListenAndServe(\":8080\", server{}))\n    }\n    ```", "```go\n    package main\n    import (\n        \"fmt\"\n        \"io/ioutil\"\n        \"log\"\n        \"net/http\"\n        \"time\"\n    )\n    ```", "```go\n    func getDataWithCustomOptionsAndReturnResponse() string {\n    ```", "```go\n        client := http.Client{Timeout: 11 * time.Second}\n    ```", "```go\n        req, err := http.NewRequest(\"POST\",       \"http://localhost:8080\", nil)\n        if err != nil {\n            log.Fatal(err)\n        }\n    ```", "```go\n        req.Header.Set(\"Authorization\", \"superSecretToken\")\n    ```", "```go\n        resp, err := client.Do(req)\n        if err != nil {\n            log.Fatal(err)\n        }\n    ```", "```go\n        defer resp.Body.Close()\n        data, err := ioutil.ReadAll(resp.Body)\n        if err != nil {\n            log.Fatal(err)\n        }\n        return string(data)\n    ```", "```go\n    func main() {\n        data := getDataWithCustomOptionsAndReturnResponse()\n        fmt.Println(data)\n    }\n    ```", "```go\n    go run main.go\n    ```"]