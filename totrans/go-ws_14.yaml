- en: 14\. Using the Go HTTP Client
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14. 使用Go HTTP客户端
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: This chapter will equip you to use the Go HTTP client to talk to other systems
    over the internet.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将使你能够使用Go HTTP客户端通过互联网与其他系统进行通信。
- en: You will start by learning to use the HTTP client to get data from a web server
    and to send data to a web server. By the end of the chapter, you will be able
    to upload a file to a web server and experiment with a custom Go HTTP client to
    interact with web servers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你将首先学习如何使用HTTP客户端从Web服务器获取数据并向Web服务器发送数据。到本章结束时，你将能够将文件上传到Web服务器，并尝试使用自定义Go
    HTTP客户端与Web服务器交互。
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In the previous chapter, you looked at SQL and databases. You learned how to
    execute queries, how to create tables, how to insert data into tables and fetch
    data, how to update data, and how to delete data within a table.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了SQL和数据库。你学习了如何执行查询，如何创建表，如何向表中插入数据并获取数据，如何更新数据，以及如何在表中删除数据。
- en: In this chapter, you will learn about the Go HTTP client and how to use it.
    An HTTP client is something that is used to get data from or send data to a web
    server. Probably the most well-known example of an HTTP client is a web browser
    (such as Firefox). When you enter a web address into a web browser, it will have
    an HTTP client built in that sends a request to the server for data. The server
    will gather the data and send it back to the HTTP client, which will then display
    the web page in the browser. Similarly, when you fill out a form in a web browser,
    for example, when you log in to a website, the browser will use its HTTP client
    to send that form data to the server and then take appropriate action depending
    on the response.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习Go HTTP客户端及其使用方法。HTTP客户端是一种用于从或向Web服务器获取或发送数据的工具。最著名的HTTP客户端例子是网页浏览器（如Firefox）。当你在一个网页浏览器中输入一个网址时，它会内置一个HTTP客户端，该客户端会向服务器发送数据请求。服务器会收集数据并将其发送回HTTP客户端，然后客户端会在浏览器中显示网页。同样，当你在一个网页浏览器中填写表单时，例如登录一个网站，浏览器会使用其HTTP客户端将表单数据发送到服务器，并根据响应采取适当的行动。
- en: This chapter looks at how you can use the Go HTTP client to request data from
    a web server and send data to a server. You will examine the different ways you
    can use the HTTP client to interact with a web server and the various use cases
    for those interactions. The web browser example will be useful in explaining the
    different interactions. As part of this chapter, you will create your own Go programs
    that make use of the Go HTTP client to send and receive data from a web server.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将探讨如何使用Go HTTP客户端从Web服务器请求数据并向服务器发送数据。你将检查可以使用HTTP客户端与Web服务器交互的不同方式以及这些交互的各种用例。网页浏览器示例将有助于解释不同的交互。作为本章的一部分，你将创建自己的Go程序，利用Go
    HTTP客户端从Web服务器发送和接收数据。
- en: The Go HTTP Client and Its Uses
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go HTTP客户端及其用途
- en: The Go HTTP client is part of the Go standard library, specifically the `net/http`
    library. There are two main ways to use it. The first is to use the default HTTP
    client that is included in the `net/http` library. It's simple to use and allows
    you to get up and running quickly. The second way is to create your own HTTP client
    based on the default HTTP client. This allows you to customize the requests and
    various other things. It takes longer to configure, but it gives you much more
    freedom and control over the requests you send.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Go HTTP客户端是Go标准库的一部分，具体是`net/http`库。使用它主要有两种方式。第一种是使用`net/http`库中包含的默认HTTP客户端。它使用简单，可以让你快速开始。第二种方式是基于默认HTTP客户端创建自己的HTTP客户端。这允许你自定义请求和各种其他事情。配置起来需要更长的时间，但它给你提供了更多的自由和控制权，可以控制你发送的请求。
- en: When using an HTTP client, you can send different types of requests. While there
    are many types of requests, we will discuss the two main ones, the GET request
    and the POST request. For instance, if you wanted to retrieve data from a server,
    you would send a GET request. When you enter a web address in your web browser,
    it will send a GET request to the server at that address and then display the
    data it returns. If you wanted to send data to the server, you would send a POST
    request. If you wanted to log into a website, you would POST your login details
    to the server.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用HTTP客户端时，你可以发送不同类型的请求。虽然有许多类型的请求，但我们将讨论两种主要的请求，即GET请求和POST请求。例如，如果你想从服务器检索数据，你会发送一个GET请求。当你在你浏览器中输入一个网址时，它会向该地址的服务器发送一个GET请求，然后显示它返回的数据。如果你想向服务器发送数据，你会发送一个POST请求。如果你想登录到一个网站，你会将你的登录详情POST到服务器。
- en: In this chapter, there are a few exercises to teach you about the Go HTTP client.
    They will teach you how to request data from a server in various formats using
    GET requests. They will also teach you how to POST form data to a web server,
    similar to how a web browser would send a POST request when you log in to a website.
    These exercises will also show you how to upload a file to a web server and how
    to use a customized HTTP client to have more control over the requests you send.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，有一些练习教你关于Go HTTP客户端的知识。它们将教你如何使用GET请求以各种格式从服务器请求数据。它们还将教你如何将表单数据POST到Web服务器，类似于当你在网站上登录时，浏览器如何发送POST请求。这些练习还将向你展示如何将文件上传到Web服务器，以及如何使用自定义的HTTP客户端来对发送的请求有更多的控制。
- en: Sending a Request to a Server
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向服务器发送请求
- en: 'When you want to retrieve data from a web server, you send a GET request to
    the server. When sending a request, the URL will contain the information on the
    resource you want data from. The URL can be broken down into a few key parts.
    These include the protocol, the hostname, the URI, and the query parameters. The
    format of it looks like this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想从网络服务器检索数据时，你需要向服务器发送一个GET请求。在发送请求时，URL将包含你想要获取数据的资源信息。URL可以分解为几个关键部分。这包括协议、主机名、URI和查询参数。其格式看起来像这样：
- en: '![Figure 14.1: URL format breakdown'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.1：URL格式分解]'
- en: '](img/B14177_14_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B14177_14_01.jpg)'
- en: 'Figure 14.1: URL format breakdown'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.1：URL格式分解
- en: 'In this example:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中：
- en: The `Protocol` tells the client how to connect to the server. The two most common
    protocols are HTTP and HTTPS. In this example, we have used `https`.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`协议`告诉客户端如何连接到服务器。最常用的两种协议是HTTP和HTTPS。在这个例子中，我们使用了`https`。'
- en: The `Hostname` is the address of the server we want to connect to. In this example,
    it is `example.com`.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`主机名`是我们想要连接的服务器的地址。在这个例子中，它是`example.com`。'
- en: The `URI` is the `/downloads`.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`URI`是`/downloads`。'
- en: The `Query Parameters` tell the server of any additional information it needs.
    In this example, we have two parameters. These are `filter=latest` and `os=windows`.
    You will notice they are separated from the URI by `?`. This is so the server
    can parse them from the request. We join any additional parameters to the end
    of the URI with the `&` symbol, as seen with the `os` parameter.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`查询参数`告诉服务器它需要任何额外的信息。在这个例子中，我们有两个参数。这些是`filter=latest`和`os=windows`。你会注意到它们与URI由`?`分隔。这样服务器就可以从请求中解析它们。我们将任何额外的参数与URI的末尾通过`&`符号连接，就像`os`参数中看到的那样。'
- en: 'Exercise 14.01: Sending a Get Request to a Web Server Using the Go HTTP Client'
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习14.01：使用Go HTTP客户端向Web服务器发送GET请求
- en: 'In this exercise, you will be getting data from a web server and printing out
    that data. You will send a GET request to [https://www.google.com](https://www.google.com)
    and display the data the web server returns:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将从一个网络服务器获取数据并打印出这些数据。你将向[https://www.google.com](https://www.google.com)发送一个GET请求并显示服务器返回的数据：
- en: Note
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For this topic, you will need to have Go installed and GOPATH set up on your
    system. You will also need an IDE that you can use to edit `.go` files.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个主题，你需要在你的系统上安装Go并设置GOPATH。你还需要一个IDE，你可以用它来编辑`.go`文件。
- en: Open your IDE and create a new directory, `Exercise14.01`, on your GOPATH. Within
    that directory, create a new Go file called `main.go`.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的IDE，在你的GOPATH中创建一个新的目录`Exercise14.01`。在该目录内，创建一个新的Go文件，名为`main.go`。
- en: 'As this is a new program, you will want to set the package of the file to the
    `main()` function. Import the `net/http` library, the `log` library, and the `io/ioutil`
    library. Type the following code:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于这是一个新的程序，您可能希望将文件的包设置为 `main()` 函数。导入 `net/http` 库、`log` 库和 `io/ioutil` 库。输入以下代码：
- en: '[PRE0]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now that you have the package set up and the imports you need, you can start
    creating a function to get data from a web server. The function you are going
    to create will request data from a web server.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在您已经设置了包和所需的导入，可以开始创建一个从网络服务器获取数据的函数。您将要创建的函数将从网络服务器请求数据。
- en: 'Create a function that returns a string:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个返回字符串的函数：
- en: '[PRE1]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Within that function, you can then use the default Go HTTP Client to request
    data from a server. In this exercise, you will request data from [https://www.google.com](https://www.google.com).
    To request data from the web server, you use the `GET` function in the `http`
    library, which looks as follows:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在那个函数内部，您可以使用默认的 Go HTTP 客户端从服务器请求数据。在这个练习中，您将请求 [https://www.google.com](https://www.google.com)
    的数据。要从网络服务器请求数据，您使用 `http` 库中的 `GET` 函数，它看起来如下：
- en: '[PRE2]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The data the server sends back is contained within `r.Body`, so you just to
    read in that data. To read the data within `r.Body`, you can use the `ReadAll`
    function within the `io/ioutil` library. The two together would look like this:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器发送回的数据包含在 `r.Body` 中，所以您只需读取那些数据。要读取 `r.Body` 中的数据，您可以使用 `io/ioutil` 库中的
    `ReadAll` 函数。这两个函数组合起来将看起来像这样：
- en: '[PRE3]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After you have received the response from the server and read the data, you
    just need to return that data as a string, which looks like this:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您从服务器收到响应并读取数据后，只需将那些数据作为字符串返回，它看起来像这样：
- en: '[PRE4]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The function you have now created will now look like this:'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您现在创建的函数将看起来像这样：
- en: '[PRE5]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create a `main` function. Within the `main` function, call the `getDataAndReturnResponse`
    function and log the string it returns:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main` 函数。在 `main` 函数内部，调用 `getDataAndReturnResponse` 函数并记录它返回的字符串：
- en: '[PRE6]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To run the program, open your terminal and navigate to the directory that you
    created the `main.go` file in.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行程序，打开您的终端并导航到创建 `main.go` 文件的目录。
- en: 'Run `go run main.go` to compile and execute the file:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `go run main.go` 来编译和执行文件：
- en: '[PRE7]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The program will issue a GET request to [https://www.google.com](https://www.google.com)
    and log the response in your terminal.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 程序将向 [https://www.google.com](https://www.google.com) 发送 GET 请求，并在您的终端中记录响应。
- en: 'While it may look like gibberish, if you were to save that data to a file called
    `response.html` and open it in your web browser, it would resemble the Google
    home page. This is what your web browser will do under the hood when you open
    a web page. It will send a GET request to the server and then display the data
    it returns. If we do this manually, it will look as follows:'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然看起来像是乱码，但如果将那些数据保存到名为 `response.html` 的文件中，并在您的网页浏览器中打开它，它将类似于谷歌首页。这就是当您打开网页时，您的网页浏览器在底层所做的事情。它会向服务器发送一个
    GET 请求，然后显示它返回的数据。如果我们手动做这件事，它看起来会像这样：
- en: '![Figure 14.2: Request HTML response when viewed in Firefox'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.2：在 Firefox 中查看时请求 HTML 响应'
- en: '](img/B14177_14_02.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 B14177_14_02.jpg]'
- en: 'Figure 14.2: Request HTML response when viewed in Firefox'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.2：在 Firefox 中查看时请求 HTML 响应
- en: In this exercise, we saw how to send a GET request to a web server and get data
    back. You created a Go program that sent a request to [https://www.google.com](https://www.google.com)
    and got back the HTML data for the Google home page.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们看到了如何向网络服务器发送 GET 请求并获取数据。您创建了一个 Go 程序，向 [https://www.google.com](https://www.google.com)
    发送请求，并获取了谷歌首页的 HTML 数据。
- en: Structured Data
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结构化数据
- en: Once you have requested data from a server, the data returned can come in various
    formats. For example, if you send a request to `packtpub.com`, it will return
    HTML data for the Packt website. While HTML data is useful for displaying websites,
    it isn't ideal for sending machine-readable data. A common data type used in web
    APIs is JSON. JSON provides a good structure for data that is both machine-readable
    and human-readable. Later, you will learn how to parse JSON and make use of it
    using Go.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦从服务器请求数据，返回的数据可以以各种格式出现。例如，如果您向 `packtpub.com` 发送请求，它将返回 Packt 网站的 HTML 数据。虽然
    HTML 数据对于显示网站很有用，但它不是发送机器可读数据的理想选择。在 Web API 中常用的数据类型是 JSON。JSON 为机器可读和人类可读的数据提供了良好的结构。稍后，您将学习如何使用
    Go 解析 JSON 并利用它。
- en: 'Exercise 14.02: Using the HTTP Client with Structured Data'
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 14.02：使用结构化数据与 HTTP 客户端
- en: 'In this exercise, you will parse structured JSON data in Go. The server will
    return JSON data and you will use the `json.Unmarshal` function to parse the data
    and put it into a struct:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将使用Go解析结构化的JSON数据。服务器将返回JSON数据，你将使用`json.Unmarshal`函数来解析数据并将其放入结构体中：
- en: 'Create a new directory, `Exercise14.02`, on your GOPATH. Within that directory,
    create two more directories, `server` and `client`. Then, within the `server`
    directory, create a file called `server.go` and write the following code:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的GOPATH中创建一个新的目录，命名为`Exercise14.02`。在该目录内，再创建两个子目录，分别命名为`server`和`client`。然后，在`server`目录内创建一个名为`server.go`的文件，并写入以下代码：
- en: '[PRE8]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This creates a very basic web server that sends back JSON data. We will explain
    in more detail how this works in the next chapter. For now, we will just use it
    as an example.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这创建了一个非常基础的Web服务器，它发送回JSON数据。我们将在下一章中更详细地解释它是如何工作的。现在，我们只是将其作为一个例子。
- en: 'Once you have created the server, navigate to the client directory and create
    a file called `main.go`. Add `package main` and import the packages needed for
    the file:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦创建了服务器，导航到客户端目录并创建一个名为`main.go`的文件。添加`package main`并导入文件所需的包：
- en: '[PRE9]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, create a struct with a string parameter that can accept the response
    from the server. Then, add JSON metadata to it so it can be used to unmarshal
    the JSON `message` parameter:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建一个带有字符串参数的结构体，它可以接受来自服务器的响应。然后，向其中添加JSON元数据，以便它可以用于反序列化JSON `message`参数：
- en: '[PRE10]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, create a function that you can call to get and parse the data from the
    server. Use the struct you just created as the return value:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个你可以调用的函数，用于从服务器获取并解析数据。使用你刚刚创建的结构体作为返回值：
- en: '[PRE11]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When you run the web server, it will listen on `http://localhost:8080`. So,
    you need to send a GET request to that URL and then read the response body:'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当你运行Web服务器时，它将在`http://localhost:8080`上监听。因此，你需要向该URL发送GET请求，然后读取响应体：
- en: '[PRE12]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This time, however, you will parse the response instead of simply returning
    it. To do that, you create an instance of the struct you created, then pass it
    along with the response data to `json.Unmarshal`:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然而，这次你将解析响应而不是简单地返回它。为此，你创建了一个结构体实例，然后将它连同响应数据一起传递给`json.Unmarshal`：
- en: '[PRE13]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will populate the `message` variable with the data returned from the server.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将使用来自服务器的数据填充`message`变量。
- en: 'You then need to return the struct to complete the function:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，你需要返回结构体以完成函数：
- en: '[PRE14]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, call the function you just created from the `main()` function and
    log the message from the server:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，从`main()`函数中调用你刚刚创建的函数，并记录来自服务器的消息：
- en: '[PRE15]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To run this, you need to do two steps. The first is navigate to the `server`
    directory in your terminal and run the following command. This will start the
    web server:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行此程序，你需要执行两个步骤。第一步是在你的终端导航到`server`目录并运行以下命令。这将启动Web服务器：
- en: '[PRE16]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In a second terminal window, navigate to the `client` directory and run `go
    run main.go`. This will start the client and connect to the server. It should
    output the message from the server:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二个终端窗口中，导航到`client`目录并运行`go run main.go`。这将启动客户端并连接到服务器。它应该输出服务器的消息：
- en: '![Figure 14.3: Expected output'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.3：预期输出]'
- en: '](img/B14177_14_03.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片B14177_14_03.jpg]'
- en: 'Figure 14.3: Expected output'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.3：预期输出
- en: In this exercise, you sent a GET request to the server and got back structured
    data in JSON format. You then parsed that JSON data to get the message from it.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你向服务器发送了一个GET请求，并从它那里获取了结构化的JSON格式的数据。然后你解析了这些JSON数据以获取其中的消息。
- en: 'Activity 14.01: Requesting Data from a Web Server and Processing the Response'
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动十四点零一：从Web服务器请求数据并处理响应
- en: 'Imagine you are interacting with a web API. You send a GET request for data
    and get back an array of names. You need to count those names to find out how
    many of each you have. In this activity, you will do just that. You will send
    a GET request to the server, get back structured JSON data, parse the data, and
    count how many of each name you got back in the response:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在与一个Web API交互。你发送一个GET请求以获取数据，并返回一个包含名称的数组。你需要计数这些名称以找出你有多少个每种名称。在这个活动中，你将做这件事。你将向服务器发送GET请求，获取结构化的JSON数据，解析数据，并计算在响应中返回了多少个每种名称：
- en: Create a directory called `Activity14.01`.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Activity14.01`的目录。
- en: Create two sub-directories, one called `client` and another called `server`.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个子目录，一个命名为`client`，另一个命名为`server`。
- en: In the `server` directory, create a file called `server.go`.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`server`目录中，创建一个名为`server.go`的文件。
- en: Add the server code in `server.go`.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`server.go`中添加服务器代码。
- en: Start the server by calling `go run server.go` in the server directory.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在服务器目录中调用`go run server.go`来启动服务器。
- en: In the `client` directory, create a file called `main.go`.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`client`目录中创建一个名为`main.go`的文件。
- en: In `main.go`, add the necessary imports.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main.go`中添加必要的导入。
- en: Create structs to parse the response data.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建结构体以解析响应数据。
- en: Create a function called `getDataAndParseResponse` that returns two integers.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`getDataAndParseResponse`的函数，它返回两个整数。
- en: Send a `GET` request to the server.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向服务器发送一个`GET`请求。
- en: Parse the response into a struct.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将响应解析到结构体中。
- en: Loop through the struct and count the occurrences of the names `Electric` and
    `Boogaloo`.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历结构体并计算`Electric`和`Boogaloo`这两个名称的出现次数。
- en: Return the counts.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回计数。
- en: Print the counts.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印计数。
- en: 'The expected output is as follows:'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期的输出如下：
- en: '![Figure 14.4: Possible output'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.4：可能的输出'
- en: '](img/B14177_14_04.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14177_14_04.jpg)'
- en: 'Figure 14.4: Possible output'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.4：可能的输出
- en: Note
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found on page 752.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本活动的解决方案可以在第752页找到。
- en: In this activity, we have requested data from a web server and processed the
    data it returned using the Go HTTP client.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，我们已经从Web服务器请求数据，并使用Go HTTP客户端处理它返回的数据。
- en: Sending Data to a Server
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向服务器发送数据
- en: 'In addition to requesting data from a server, you will also want to send data
    to a server. The most common way of doing this is via a POST request. A POST request
    comes in two main parts: the URL and the body. The body of a POST request is where
    you put the data you want to send to the server. A common example of this is a
    login form. When we send a login request, we POST the body to the URL. The web
    server then checks that the login details within the body are correct and updates
    our login status. It responds to the request by telling the client whether it
    succeeded or not. In this chapter, you will learn how to send data to a server
    using a POST request.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 除了从服务器请求数据外，你还会想向服务器发送数据。最常见的方法是通过POST请求。POST请求由两个主要部分组成：URL和主体。POST请求的主体是你放置要发送到服务器的数据的地方。一个常见的例子是登录表单。当我们发送登录请求时，我们将主体POST到URL。Web服务器将检查主体中的登录详情是否正确，并更新我们的登录状态。它通过告诉客户端是否成功来响应请求。在本章中，你将学习如何使用POST请求向服务器发送数据。
- en: 'Exercise 14.03: Sending a Post Request to a Web Server Using the Go HTTP Client'
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习14.03：使用Go HTTP客户端向Web服务器发送POST请求
- en: 'In this exercise, you will send a POST request to a web server containing a
    message. The web server will then respond with the same message so you can confirm
    that it received it:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将向一个包含消息的Web服务器发送一个POST请求。Web服务器将随后以相同的消息响应，以便你可以确认它已接收：
- en: 'Create a new directory, `Exercise14.03`, on your GOPATH. Within that directory,
    create two more directories, `server` and `client`. Then, within the `server`
    directory, create a file called `server.go` and write the following code:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的GOPATH上创建一个新的目录，`Exercise14.03`。在该目录内，创建两个额外的目录，`server`和`client`。然后，在`server`目录内，创建一个名为`server.go`的文件，并写入以下代码：
- en: '[PRE17]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This creates a very basic web server that receives a JSON POST request and returns
    the message sent to it back to the client.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这创建了一个非常基本的Web服务器，它接收一个JSON POST请求并将发送给它的消息返回给客户端。
- en: 'Once you have the server created. Navigate to the client directory and create
    a file called `main.go`. Add `package main` and the imports needed for the file:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦创建了服务器，导航到客户端目录并创建一个名为`main.go`的文件。添加`package main`和文件所需的导入：
- en: '[PRE18]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, you need to create a struct for the data we want to send and receive.
    This will be the same as the struct used by the server to parse the request:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你需要创建一个结构体来发送和接收我们想要的数据。这将与服务器用于解析请求的结构体相同：
- en: '[PRE19]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You then need to create the function to POST the data to the server. It should
    accept a `messageData` struct parameter as well as return a `messageData` struct:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后你需要创建一个函数来将数据POST到服务器。它应该接受一个`messageData`结构体参数，并返回一个`messageData`结构体：
- en: '[PRE20]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To POST the data to the server, you need to marshal the struct into bytes that
    the client can send to the server. To do this, you can use the `json.Marshal`
    function:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将数据POST到服务器，你需要将结构体序列化为客户端可以发送到服务器的字节。为此，你可以使用`json.Marshal`函数：
- en: '[PRE21]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now that you have the bytes, you can use the `http.Post` function to send the
    POST request. Within the request, you just need to tell the function what URL
    to post to, what kind of data you are sending, and the data you want to send.
    In this case, the URL is `http://localhost:8080`. The content you are sending
    is `application/json` and the data is the `jsonBytes` variable you just created.
    Together, it looks like this:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你有了字节，你可以使用`http.Post`函数发送POST请求。在请求中，你只需告诉函数要发送到哪个URL，你发送的数据类型，以及你想要发送的数据。在这种情况下，URL是`http://localhost:8080`。你发送的内容是`application/json`，数据是刚刚创建的`jsonBytes`变量。结合起来，看起来是这样的：
- en: '[PRE22]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'After that, the rest of the function is the same as in the previous exercise.
    You read the response, parse out the data, and then return the data, which looks
    like this:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，函数的其余部分与上一个练习相同。你读取响应，解析数据，然后返回数据，看起来是这样的：
- en: '[PRE23]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then, you just need to call the `postDataAndReturnResponse` function from your
    `main` function. This time, however, you need to pass the message you want to
    send to the function. You just need to create an instance of the `messageData`
    struct and pass that to the function when you call it, which looks like this:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，你只需从你的`main`函数中调用`postDataAndReturnResponse`函数。然而，这次你需要将你想发送的消息传递给函数。你只需创建一个`messageData`结构的实例，并在调用函数时传递它，这看起来是这样的：
- en: '[PRE24]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To run this exercise, you need to carry out two steps. The first is to navigate
    to the `server` directory in your terminal and run `go run server.go`. This will
    start the web server. In a second terminal window, navigate to the `client` directory
    and run `go run main.go`. This will start the client and connect to the server.
    It should output the message from the server:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行这个练习，你需要执行两个步骤。第一步是导航到你的终端中的`server`目录并运行`go run server.go`。这将启动网络服务器。在第二个终端窗口中，导航到`client`目录并运行`go
    run main.go`。这将启动客户端并连接到服务器。它应该输出来自服务器的消息：
- en: '![Figure 14.5: Expected output'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.5：预期输出'
- en: '](img/B14177_14_05.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14177_14_05.jpg)'
- en: 'Figure 14.5: Expected output'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.5：预期输出
- en: In this exercise, you sent a POST request to the server. The server parsed the
    request and sent the same message back to you. If you change the message sent
    to the server, you should see the response from the server sending back the new
    message.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你向服务器发送了一个POST请求。服务器解析了请求，并将相同的信息发送回你。如果你更改发送给服务器的消息，你应该看到服务器发送回的新消息的响应。
- en: Uploading Files in a Post Request
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在POST请求中上传文件
- en: Another common example of data you might want to POST to a web server is a file
    from your local computer. This is how websites allow users to upload their photos
    and so on. As you can imagine, this is a little more complex than sending simple
    form data. To achieve this, the file needs to be read first, then wrapped in a
    format that the server can understand. It can then be sent in a POST request to
    the server in what's called a multipart form. You will learn how to read in a
    file and upload it to a server using Go.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想要POST到网络服务器的另一个常见数据示例是来自你本地计算机的文件。这就是网站允许用户上传他们的照片等的方式。正如你可以想象的那样，这比发送简单的表单数据要复杂一些。为了实现这一点，首先需要读取文件，然后将其包装成服务器可以理解的形式。然后，它可以作为一个多部分表单发送到服务器。你将学习如何使用Go读取文件并将其上传到服务器。
- en: 'Exercise 14.04: Uploading a File to a Web Server via a Post Request'
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习14.04：通过POST请求将文件上传到网络服务器
- en: 'In this exercise, you will read in a local file and then upload it to a web
    server. You can then check that the web server saved the file you uploaded:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将读取一个本地文件，然后将其上传到网络服务器。然后你可以检查网络服务器是否保存了你上传的文件：
- en: 'Create a new directory, `Exercise14.04`, on your GOPATH. Within that directory,
    create two more directories, `server` and `client`. Then, within the `server`
    directory, create a file called `server.go` and write the following code:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的GOPATH上创建一个新的目录，`Exercise14.04`。在该目录内，创建另外两个目录，`server`和`client`。然后，在`server`目录内，创建一个名为`server.go`的文件，并编写以下代码：
- en: '[PRE25]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This creates a very basic web server that receives a multipart form POST request
    and saves the file within the form.
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这创建了一个非常基本的网络服务器，它可以接收多部分表单POST请求并在表单内保存文件。
- en: 'Once you have created the server, navigate to the client directory and create
    a file called `main.go`. Add `package main` and the imports needed for the file:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你创建了服务器，导航到客户端目录并创建一个名为`main.go`的文件。添加`package main`和文件所需的导入：
- en: '[PRE26]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You then need to create a function to call that you will give a filename to.
    The function will read in the file, upload it to the server, and return the server''s
    response:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后你需要创建一个函数来调用，并将文件名提供给该函数。该函数将读取文件，将其上传到服务器，并返回服务器的响应：
- en: '[PRE27]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You need to create a buffer that you can write the file bytes to, then create
    a writer to allow bytes to write into it:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要创建一个缓冲区，可以将文件字节写入其中，然后创建一个写入器，以便字节可以写入其中：
- en: '[PRE28]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Open the file from your local computer using the following command:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令从你的本地计算机打开文件：
- en: '[PRE29]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Once you have opened the local file, you need to create a `formFile`. This
    wraps the file data in the right format to upload it to the server:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你打开了本地文件，你需要创建一个`formFile`。这会将文件数据包装在正确的格式中，以便上传到服务器：
- en: '[PRE30]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Copy the bytes from the local file into the form file, then close the form
    file writer so that it knows no more data will be added:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将本地文件的字节复制到表单文件中，然后关闭表单文件写入器，以便它知道不会再添加更多数据：
- en: '[PRE31]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Next, you need to create the POST request you want to send to the server. In
    the previous exercises, we used shortcut functions such as `http.Post`. However,
    in this exercise, we need more control over the data being sent. That means we''ll
    need to create an `http.Request`. In this case, you''re creating a POST request
    that you will send to `http://localhost:8080`. As we are uploading a file, the
    bytes buffer also needs to be included in the request. That looks as follows:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你需要创建要发送到服务器的POST请求。在前面的练习中，我们使用了如`http.Post`之类的快捷函数。然而，在这个练习中，我们需要对发送的数据有更多的控制。这意味着我们需要创建一个`http.Request`。在这种情况下，你正在创建一个将发送到`http://localhost:8080`的POST请求。由于我们正在上传文件，字节缓冲区也需要包含在请求中。它看起来如下所示：
- en: '[PRE32]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'You then need to set the `Content-Type` request header. This tells the server
    about the content of the file, so it knows how to handle the upload:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后你需要设置`Content-Type`请求头。这会告诉服务器文件的内容，以便它知道如何处理上传：
- en: '[PRE33]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Send the request as follows:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式发送请求：
- en: '[PRE34]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'After you have sent the request, we can read in the response and return the
    data within it:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你发送请求后，我们可以读取响应并返回其中的数据：
- en: '[PRE35]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Finally, you just need to call the `postFileAndReturnResponse` function and
    tell it what file to upload:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，你只需要调用`postFileAndReturnResponse`函数，并告诉它要上传的文件：
- en: '[PRE36]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'To run this, you need to carry out two steps. The first is to navigate to the
    `server` directory in your terminal and run `go run server.go`. This will start
    the web server:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行此命令，你需要执行两个步骤。第一步是在你的终端中导航到`server`目录并运行`go run server.go`。这将启动Web服务器：
- en: '[PRE37]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Next, in the `client` directory, create a file named `test.txt` and put a few
    lines of text in it.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`client`目录下创建一个名为`test.txt`的文件，并在其中放入几行文本。
- en: 'In a second terminal window, navigate to the `client` directory and run `go
    run main.go`. This will start the client and connect to the server:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二个终端窗口中，导航到`client`目录并运行`go run main.go`。这将启动客户端并连接到服务器：
- en: '[PRE38]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The client will then read in `test.txt` and upload it to the server. The client
    should give the following output:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端将读取`test.txt`并将其上传到服务器。客户端应该给出以下输出：
- en: '![Figure 14.6: Expected client output'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.6：预期的客户端输出'
- en: '](img/B14177_14_06.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14177_14_06.jpg)'
- en: 'Figure 14.6: Expected client output'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.6：预期的客户端输出
- en: 'Then, if you navigate to the `server` directory, you should see that the `test.txt`
    file has now appeared:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，如果你导航到`server`目录，你应该会看到`test.txt`文件已经出现：
- en: '![Figure 14.7: Expected client output'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.7：预期的客户端输出'
- en: '](img/B14177_14_07.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14177_14_07.jpg)'
- en: 'Figure 14.7: Expected client output'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.7：预期的客户端输出
- en: In this exercise, you sent a file to a web server using the Go HTTP client.
    You read in a file from disk, formatted it into a POST request, and sent the data
    to the server.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你使用Go HTTP客户端向Web服务器发送了一个文件。你从磁盘读取文件，将其格式化为POST请求，并将数据发送到服务器。
- en: Custom Request Headers
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义请求头
- en: Sometimes there is more to a request than simply requesting or sending data.
    This information is stored within the request headers. A very common example of
    this is authorization headers. When you log into a server, it will respond with
    an authorization token. In all future requests sent to the server, you would include
    this token in the request's headers so the server knows you are the one making
    the requests. You will learn how to add an authorization token to requests later.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，请求不仅仅是请求或发送数据。这些信息存储在请求头中。一个非常常见的例子是授权头。当你登录到服务器时，它将响应一个授权令牌。在所有未来发送到服务器的请求中，你都会在请求头中包含此令牌，以便服务器知道是你正在发起请求。你将在稍后学习如何将授权令牌添加到请求中。
- en: 'Exercise 14.05: Using Custom Headers and Options with the Go HTTP Client'
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习14.05：使用Go HTTP客户端的自定义头和选项
- en: 'In this exercise, you will create your own HTTP client and set custom options
    on it. You will also set an authorization token in the request headers, so the
    server knows it is you requesting the data:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将创建自己的HTTP客户端并设置自定义选项。您还将设置一个授权令牌在请求头中，以便服务器知道是您请求的数据：
- en: 'Create a new directory, `Exercise14.05`, on your GOPATH. Within that directory,
    create two more directories, `server` and `client`. Then, within the `server`
    directory, create a file called `server.go` and write the following code:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的GOPATH中创建一个新的目录，名为`Exercise14.05`。在该目录内，再创建两个目录，`server`和`client`。然后在`server`目录内，创建一个名为`server.go`的文件，并写入以下代码：
- en: '[PRE39]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This creates a very basic web server that receives a request, checks the authorization
    header is correct, waits 10 seconds, then sends back data.
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这创建了一个非常基础的Web服务器，它接收请求，检查授权头是否正确，等待10秒，然后发送回数据。
- en: 'Once you have created the server, navigate to the client directory and create
    a file called `main.go`. Add `package main` and the imports needed for the file:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦创建了服务器，导航到客户端目录并创建一个名为`main.go`的文件。添加`package main`和文件所需的导入：
- en: '[PRE40]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Then, you need to create a function that will create an HTTP client, set the
    timeout limitations, and set the authorization header:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您需要创建一个函数，该函数将创建HTTP客户端，设置超时限制，并设置授权头：
- en: '[PRE41]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'You need to create your own HTTP client and set the timeout to 11 seconds:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要创建自己的HTTP客户端并设置超时时间为11秒：
- en: '[PRE42]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'You also need to create a request to send it to the server. You should create
    a GET request with the URL `http://localhost:8080`. No data will be sent in this
    request, so the data can be set to nil. You can use the `http.NewRequest` function
    to do this:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还需要创建一个请求并发送到服务器。您应该创建一个带有URL `http://localhost:8080`的GET请求。此请求不会发送任何数据，因此数据可以设置为nil。您可以使用`http.NewRequest`函数来完成此操作：
- en: '[PRE43]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'If you look at the server code again, you will notice that it checks for the
    `Authorization` request header and it expects its value to be `superSecretToken`.
    So, you need to set the `Authorization` header in your request as well:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您再次查看服务器代码，您会注意到它检查`Authorization`请求头，并期望其值为`superSecretToken`。因此，您需要在您的请求中设置`Authorization`头：
- en: '[PRE44]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'You then get the client you created to do the request:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您接下来获取您创建的客户端来执行请求：
- en: '[PRE45]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Then, you need to read in the response from the server and return the data:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您需要读取来自服务器的响应并返回数据：
- en: '[PRE46]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Finally, you need to call the function you just created from the `main` function
    and log the data it returns:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，您需要从`main`函数中调用您刚刚创建的函数，并记录它返回的数据：
- en: '[PRE47]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: To run this exercise, you need to carry out two steps. The first is navigate
    to the `server` directory in your terminal and run `go run server.go`. This will
    start the web server.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行此练习，您需要执行两个步骤。第一步是导航到您的终端中的`server`目录并运行`go run server.go`。这将启动Web服务器。
- en: In a second terminal window, navigate to the directory you created the `client`
    in.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二个终端窗口中，导航到您创建`client`的目录。
- en: 'To execute the client, run the following command:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要执行客户端，请运行以下命令：
- en: '[PRE48]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'This will start the client and connect to the server. The client will send
    the request to the server and after 10 seconds it should output the following:'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将启动客户端并连接到服务器。客户端将向服务器发送请求，并在10秒后输出以下内容：
- en: '![Figure 14.8: Expected output'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图14.8：预期输出'
- en: '](img/B14177_14_08.jpg)'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B14177_14_08.jpg)'
- en: 'Figure 14.8: Expected output'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.8：预期输出
- en: Note
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Change the timeout settings in the client to be under 10 seconds and see what
    happens. You can also change or remove the authorization header on the request
    and see what happens.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 将客户端的超时设置改为低于10秒，并查看会发生什么。您还可以更改或删除请求上的授权头，并查看会发生什么。
- en: In this exercise, you learned how to add custom headers to a request. You learned
    about the common example of adding an authorization header, which is required
    by many APIs when you want to interact with them.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您学习了如何向请求添加自定义头。您学习了添加授权头的常见示例，这在您想要与许多API交互时是必需的。
- en: 'Activity 14.02: Sending Data to a Web Server and Checking Whether the Data
    Was Received Using POST and GET'
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动14.02：使用POST和GET向Web服务器发送数据并检查数据是否被接收
- en: Imagine you are interacting with a web API and you wish to send data to a web
    server. You then want to check whether the data was added. In this activity, you
    will do just that. You will send a POST request to the server, then request the
    data back using a GET request, parse the data, and print it out.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 想象你正在与一个网络API交互，并且你希望向网络服务器发送数据。然后你想要检查数据是否已添加。在这个活动中，你将做这件事。你将向服务器发送一个POST请求，然后使用GET请求请求数据，解析数据，并将其打印出来。
- en: 'Follow these steps to get the desired outcome:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤获取期望的结果：
- en: Create a directory called `Activity14.02`.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Activity14.02`的目录。
- en: Create two sub-directories, one called `client` and one called `server`.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个子目录，一个名为`client`，另一个名为`server`。
- en: In the `server` directory, create a file called `server.go`.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`server`目录下，创建一个名为`server.go`的文件。
- en: Add the server code to the `server.go` file.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将服务器代码添加到`server.go`文件中。
- en: Start the server by calling `go run server.go` in the server directory.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在服务器目录中调用`go run server.go`来启动服务器。
- en: In the `client` directory, create a file called `main.go`.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`client`目录下，创建一个名为`main.go`的文件。
- en: In `main.go`, add the necessary imports.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main.go`中添加必要的导入。
- en: Create structs to host the request data.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建结构体以存储请求数据。
- en: Create structs to parse the response data.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建结构体以解析响应数据。
- en: Create an `addNameAndParseResponse` function that posts a name to the server.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`addNameAndParseResponse`函数，将名字发送到服务器。
- en: Create a `getDataAndParseResponse` function that parses the server response.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`getDataAndParseResponse`函数，用于解析服务器响应。
- en: Send a POST request to the server, to add names.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向服务器发送POST请求，以添加名字。
- en: Send a GET request to the server.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向服务器发送GET请求。
- en: Parse the response into a struct.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将响应解析到结构体中。
- en: Loop through the struct and print the names.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历结构体并打印名字。
- en: 'This is the expected output:'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是预期的输出：
- en: '![Figure 14.9: Possible output'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.9：可能的输出'
- en: '](img/B14177_14_09.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B14177_14_09.jpg)'
- en: 'Figure 14.9: Possible output'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.9：可能的输出
- en: Note
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found on page 754.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这个活动的解决方案可以在第754页找到。
- en: In this activity, you saw how to send data to a web server using a POST request
    and then how to request data from the server to ensure it was updated using a
    GET request. Interacting with a server in this way is very common when programming
    professionally.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，你看到了如何使用POST请求向网络服务器发送数据，然后如何使用GET请求请求数据以确保它已更新。在专业编程中，以这种方式与服务器交互是非常常见的。
- en: Summary
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: HTTP clients are used to interact with web servers. They are used to send different
    types of requests to a server (for example, GET or POST requests) and then react
    to the response returned by the server. A web browser is a type of HTTP client
    that will send a GET request to a web server and display the HTML data it returns.
    In Go, you created your own HTTP client and did the same thing, sending a GET
    request to [https://www.google.com](https://www.google.com) and then logging the
    response returned by the server. You also learned about the components of a URL
    and that you can control what you request from a server by changing the URL.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP客户端用于与网络服务器交互。它们用于向服务器发送不同类型的请求（例如，GET或POST请求），然后对服务器返回的响应做出反应。网络浏览器是一种HTTP客户端，它将向网络服务器发送GET请求并显示它返回的HTML数据。在Go中，你创建了自定义的HTTP客户端并做了同样的事情，发送一个GET请求到[https://www.google.com](https://www.google.com)，然后记录服务器返回的响应。你还了解到URL的组成部分，以及你可以通过更改URL来控制从服务器请求的内容。
- en: 'There is also more to web servers than simply requesting HTML data. You learned
    that they can return structured data in the form of JSON, which can be parsed
    and used in your code. Data can also be sent to a server using POST requests,
    allowing you to send form data to a server. However, the data sent to a server
    isn''t limited to just form data: you can also upload files to a server using
    a POST request.'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 网络服务器不仅仅是请求HTML数据。你了解到它们可以以JSON的形式返回结构化数据，这些数据可以被解析并在你的代码中使用。数据也可以通过POST请求发送到服务器，允许你将表单数据发送到服务器。然而，发送到服务器的数据并不仅限于表单数据：你还可以使用POST请求上传文件到服务器。
- en: There are also ways to customize the requests you send. You learned about the
    common example of authorization, where you add a token to the header of HTTP requests
    so that a server can tell who is making that request.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 也有方法自定义你发送的请求。你了解到常见的例子是授权，你会在HTTP请求的头部添加一个令牌，这样服务器就可以知道是谁在发起这个请求。
- en: In this chapter, you used some basic web servers in the exercises. However,
    you didn't learn about the details of what they were doing. In the next chapter,
    you will learn about web servers in more detail.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你在练习中使用了某些基本的Web服务器。然而，你并没有学习到它们具体做了什么。在下一章中，你将更详细地了解Web服务器。
