["```go\nfunc GetCardNumber(db *sql.DB, userID string) (resp string, err error) {\n  query := `SELECT CARD_NUMBER FROM USER_DETAILS WHERE USER_ID = ` + userID\n  row := db.QueryRow(query)\n  switch err = row.Scan(&resp); err {\n  case sql.ErrNoRows:\n    return resp, fmt.Errorf(\"no rows returned\")\n  case nil:\n    return resp, err\n  default:\n    return resp, err\n  }\n  return\n}\n```", "```go\nquery := `SELECT CARD_NUMBER FROM USER_DETAILS WHERE USER_ID = 795001`\n```", "```go\n\"\" OR '1' == '1'\n```", "```go\n`SELECT CARD_NUMBER FROM USER_DETAILS WHERE USER_ID = \"\" OR '1' == '1'\n```", "```go\nfunc GetCardNumberSecure(db *sql.DB, userID string) (resp string, err error){\n  stmt, err := db.Prepare(`SELECT CARD_NUMBER FROM USER_DETAILS WHERE USER_ID =     ?`)\n  if err != nil {\n    return resp, err\n  }\n  defer stmt.Close()\n  row := stmt.QueryRow(userID)\n  switch err = row.Scan(&resp); err {\n  case sql.ErrNoRows:\n    return resp, fmt.Errorf(\"no rows returned\")\n  case nil:\n    return resp, err\n  default:\n    return resp, err}\n  }\n  return\n}\n```", "```go\nfunc listFiles(path string) (string, error) {\n  cmd := exec.Command(\"bash\", \"-c\", \"ls\"+path)\n  var out bytes.Buffer\n  cmd.Stdout = &out\n  err := cmd.Run()\n  if err != nil {\n    return \"\", err\n  }\n  return out.String(), nil\n}\n```", "```go\npackage command_injection\nimport \"testing\"\nfunc TestListFiles(t *testing.T) {\n  out, err := listFiles(\" .; cat /etc/hosts\")\n  if err != nil {\n    t.Error(err)\n  } else {\n    t.Log(out)\n  }\n}\n```", "```go\ngo test -v ./...\n```", "```go\n    package exercise1\n    import (\n      \"database/sql\"\n      \"fmt\"\n      \"strings\"\n    )\n    ```", "```go\n    func UpdatePhone(db *sql.DB, Id string, phone string) error {\n      var builder strings.Builder\n      builder.WriteString(\"UPDATE USER_DETAILS SET PHONE=\")\n      builder.WriteString(phone)\n      builder.WriteString(\" WHERE USER_ID=\")\n      builder.WriteString(Id)\n      fmt.Printf(\"Running query: %s\\n\", builder.String())\n      _, err := db.Exec(builder.String())\n      if err != nil {\n        return err\n      }\n      return nil\n    }\n    ```", "```go\n    ID: \"19853011 OR USER_ID=1007007\"\n    ```", "```go\n    injection.go\n    20 func UpdatePhoneSecure(db *sql.DB, Id string, phone string) error {\n    21   stmt, err := db.Prepare(`UPDATE USER_DETAILS SET PHONE=? WHERE        USER_ID=?`)\n    22   if err != nil {\n    23     return err\n    24   }\n    25   defer stmt.Close()\n    26   result, err := stmt.Exec(phone, Id)\n    27   if err != nil {\n    28     return err\n    29   }\n    The full code for this step is available at: https://packt.live/34QWP31\n    ```", "```go\n    func initializeDB(db *sql.DB) error {\n      _, err := db.Exec(`CREATE TABLE IF NOT EXISTS USER_DETAILS (USER_ID TEXT,     PHONE TEXT, ADDRESS TEXT)`)\n      if err != nil {\n        return err\n      }\n      stmt, err := db.Prepare(`INSERT INTO USER_DETAILS (USER_ID, PHONE,     ADDRESS) VALUES (?, ?, ?)`)\n      if err != nil {\n        return err\n      }\n      for _, user := range testData {\n        _, err := stmt.Exec(user.Id, user.CardNumber, user.Address)\n        if err != nil {\n          return err\n        }\n      }\n      return nil\n    }\n    ```", "```go\n    func tearDownDB(db *sql.DB) error {\n      _, err := db.Exec(\"DROP TABLE USER_DETAILS\")\n      if err != nil {\n        return err\n      }\n      return nil\n    }\n    ```", "```go\n    func getConnection() (*sql.DB, error) {\n      conn, err := sql.Open(\"sqlite3\", \"test.DB\")\n      if err != nil {\n        return nil, fmt.Errorf(\"could not open db connection %v\", err)\n      }\n      return conn, nil\n    }\n    ```", "```go\n    func TestMain(m *testing.M) {\n      var err error\n      db, err = getConnection()\n      if err != nil {\n        fmt.Println(err)\n        os.Exit(1)\n      }\n      err = initializeDB(db)\n      if err != nil {\n        fmt.Println(err)\n        os.Exit(1)\n      }\n      defer tearDownDB(db)\n      if m.Run() != 0 {\n        fmt.Println(\"error running tests\")\n        os.Exit(1)\n      }\n    }\n    ```", "```go\n    injection_test.go\n    77 func TestUpdatePhoneSecure(t *testing.T) {\n    78   var tests = []struct {\n    79     ID    string\n    80     Phone string\n    81     err   string\n    82   }{\n    83     {\n    84       ID:    \"1\",\n    85       Phone: \"1234\",\n    86       err:   \"\",\n    87     },\n    The full code for this step is available at: https://packt.live/34MEJze\n    ```", "```go\n    go test -v ./...\n    ```", "```go\n<html>\n  Hello World!\n</html>\n```", "```go\n    package main\n    import (\n      \"fmt\"\n      \"net/http\"\n      \"text/template\"\n    )\n    ```", "```go\n    var content = `<html>\n    <head>\n    <title>My Blog</title>\n    </head>\n    <body>\n      <h1>My Blog Site</h1>\n      <h2> Comments </h2>\n      {{.Comment}}\n      <formaction=\"/\" method=\"post\">\n        Add Comment:<input type=\"text\"name=\"input\">\n        <input type=\"submit\" value=\"Submit\">\n      </form>\n    </body>\n    </html>`\n    ```", "```go\n    type input struct {\n      Comment string\n    }\n    ```", "```go\n    func handler(w http.ResponseWriter, r *http.Request) {\n      var userInput = &input{\n        Comment: r.FormValue(\"input\"),\n      }\n      t := template.Must(template.New(\"test\").Parse(content))\n      err := t.Execute(w, userInput)\n      if err != nil {\n        fmt.Println(err)\n      }\n    }\n    ```", "```go\n    funcmain() {\n      http.HandleFunc(\"/\", handler)\n      http.ListenAndServe(\":8080\", nil)\n    }\n    ```", "```go\n    go run main.go\n    ```", "```go\n    <script>alert(\"Hello\")</script>\n    ```", "```go\n    package main\n    import (\n      \"fmt\"\n      \"net/http\"\n      \"html/template\"\n    )\n    ```", "```go\nSum(in []byte) []byte\n```", "```go\nSum256(data []byte) [Size]byte\n```", "```go\n    package main\n    import (\n      \"crypto/md5\"\n      \"crypto/sha256\"\n      \"crypto/sha512\"\n      \"fmt\"\n      \"golang.org/x/crypto/blake2b\"\n      \"golang.org/x/crypto/blake2s\"\n      \"golang.org/x/crypto/sha3\"\n    )\n    ```", "```go\n    func getHash(input string, hashType string) string {\n    ```", "```go\n      switch hashType {\n      case \"MD5\":\n        return fmt.Sprintf(\"%x\", md5.Sum([]byte(input)))\n      case \"SHA256\":\n        return fmt.Sprintf(\"%x\", sha256.Sum256([]byte(input)))\n      case \"SHA512\":\n        return fmt.Sprintf(\"%x\", sha512.Sum512([]byte(input)))\n      case \"SHA3_512\":\n        return fmt.Sprintf(\"%x\", sha3.Sum512([]byte(input)))\n      default:\n        return fmt.Sprintf(\"%x\", sha256.Sum256([]byte(input)))\n      }\n    }\n    ```", "```go\n      // from \"golang.org/x/crypto/blake2s\"\n      case \"BLAKE2s_256\":\n        return fmt.Sprintf(\"%x\", blake2s.Sum256([]byte(input)))\n      // from \"golang.org/x/crypto/blake2b\"\n      case \"BLAKE2b_512\":\n        return fmt.Sprintf(\"%x\", blake2b.Sum512([]byte(input)))\n     }\n    }\n    ```", "```go\n    func main() {\n      fmt.Println(\"MD5:\", getHash(\"Hello World!\", \"MD5\"))\n      fmt.Println(\"SHA256:\", getHash(\"Hello World!\", \"SHA256\"))\n      fmt.Println(\"SHA512:\", getHash(\"Hello World!\", \"SHA512\"))\n      fmt.Println(\"SHA3_512:\", getHash(\"Hello World!\", \"SHA3_512\"))\n      fmt.Println(\"BLAKE2s_256:\", getHash(\"Hello World!\", \"BLAKE2s_256\"))\n      fmt.Println(\"BLAKE2b_512:\", getHash(\"Hello World!\", \"BLAKE2b_512\"))\n    }\n    ```", "```go\n    go run main.go\n    ```", "```go\nSeal(dst, nonce, plaintext, additionalData []byte) []byte\n```", "```go\nfunc (g *gcm) Open(dst, nonce, ciphertext, data []byte) ([]byte, error)\n```", "```go\n    package main\n    import (\n      \"crypto/aes\"\n      \"crypto/cipher\"\n      \"crypto/rand\"\n      \"fmt\"\n    )\n    ```", "```go\n    func encrypt(data []byte, key string) (resp []byte, err error) {\n      block, err := aes.NewCipher([]byte(key))\n      if err != nil {\n        return resp, err\n      }\n    gcm, err := cipher.NewGCM(block)\n      if err != nil {\n        return resp, err\n      }\n      nonce := make([]byte, gcm.NonceSize())\n      if _, err := rand.Read(nonce); err != nil {\n        return resp, err\n      }\n      return gcm.Seal(dst, nonce, data, []byte(\"test\")), nil\n    }\n    ```", "```go\n    func decrypt(data []byte, key string) (resp []byte, err error) {\n      block, err := aes.NewCipher([]byte(key))\n      if err != nil {\n        return resp, err\n      }\n    gcm, err := cipher.NewGCM(block)\n      if err != nil {\n        return resp, err\n      }\n      ciphertext := data[gcm.NonceSize():]\n      nonce := data[:gcm.NonceSize()]\n      resp, err = gcm.Open(nil, nonce, ciphertext, []byte(\"test\"))\n      if err != nil {\n        return resp, fmt.Errorf(\"error decrypting data: %v\", err)\n      }\n      return resp, nil\n    }\n    ```", "```go\n    func main() {\n      const key = \"mysecurepassword\"\n      encrypted, err := encrypt([]byte(\"Hello World!\"), key)\n      if err != nil {\n        fmt.Println(err)\n      }\n    fmt.Println(\"Encrypted Text: \", string(encrypted))\n      decrypted, err := decrypt(encrypted, key)\n      if err != nil {\n        fmt.Println(err)\n      }\n      fmt.Println(\"Decrypted Text: \", string(decrypted))\n    }\n    ```", "```go\n    go run main.go\n    ```", "```go\nEncryptOAEP(hash hash.Hash,randomio.Reader,pub *PublicKey,msg []byte,label   []byte)([]byte,error)\n```", "```go\nDecryptOAEP(hash hash.Hash, random io.Reader, priv *PrivateKey, ciphertext   []byte, label []byte) ([]byte, error)\n```", "```go\nGenerateKey(random io.Reader, bits int) (*PrivateKey, error)\n```", "```go\n    package main\n    import (\n      \"crypto/rand\"\n      \"crypto/rsa\"\n      \"crypto/sha256\"\n      \"fmt\"\n      \"os\"\n    )\n    ```", "```go\n    func main() {\n    privateKey, err := rsa.GenerateKey(rand.Reader, 1024)\n      if err != nil {\n    fmt.Printf(\"error generating rsa key: %v\", err)\n      }\n    publicKey := privateKey.PublicKey\n    text := []byte(\"My Secret Text\")\n    ```", "```go\n      ciphertext, err := rsa.EncryptOAEP(sha256.New(), rand.Reader, &publicKey,     text, nil)\n      if err != nil {\n    fmt.Printf(\"error encrypting data: %v\", err)\n    os.Exit(1)\n      }\n    fmt.Println(\"Encrypted ciphertext: \", string(ciphertext)\n    ```", "```go\n    decrypted, err := rsa.DecryptOAEP(sha256.New(), rand.Reader, privateKey,   ciphertext, nil)\n      if err != nil {\n    fmt.Printf(\"error decrypting data: %v\", err)\n    os.Exit(1)\n      }\n      fmt.Println(\"Decrypted text: \", string(decrypted))\n    }\n    ```", "```go\n    go run main.go\n    ```", "```go\nfuncInt(rand io.Reader, max *big.Int) (n *big.Int, err error)\n```", "```go\n    package main\n    import (\n      \"crypto/rand\"\n      \"fmt\"\n      \"math/big\"\n      math \"math/rand\"\n    )\n    ```", "```go\n    func main() {\n      fmt.Println(\"Crypto random\")\n      for i := 1; i<=10; i++ {\n        data, _:= rand.Int(rand.Reader,big.NewInt(1000))\n        fmt.Println(data)\n      }\n    ```", "```go\n      fmt.Println(\"Math random\")\n      for i := 1; i<=10; i++ {\n        fmt.Println(math.Intn(1000))\n      }\n    }\n    ```", "```go\n    go run main.go\n    ```", "```go\n    package main\n    import (\n      \"crypto/rand\"\n      \"crypto/rsa\"\n      \"crypto/tls\"\n      \"crypto/x509\"\n      \"crypto/x509/pkix\"\n      \"encoding/pem\"\n      \"fmt\"\n      \"io/ioutil\"\n      \"math/big\"\n      \"net\"\n      \"net/http\"\n      \"os\"\n      \"time\"\n    )\n    ```", "```go\n    main.go\n    28 func generate() (cert []byte, privateKey []byte, err error) {\n    29   serialNumber, err := rand.Int(rand.Reader, big.NewInt(27))\n    30   if err != nil {\n    31     return cert, privateKey, err\n    32   }\n    33   notBefore := time.Now()\n    // Create Certificate template\n    34   ca := &x509.Certificate{\n    35     SerialNumber: serialNumber,\n    36     Subject: pkix.Name{\n    37       Organization: []string{\"example.com\"},\n    38     },\n    The full code for this step is available at: https://packt.live/34N7jjT\n    ```", "```go\n      rsaKey, err := rsa.GenerateKey(rand.Reader, 2048)\n      if err != nil {\n        return cert, privateKey, err\n      }\n    ```", "```go\n      DER, err := x509.CreateCertificate(rand.Reader, ca, ca, &rsaKey.PublicKey,     rsaKey)\n      if err != nil {\n        return cert, privateKey, err\n      }\n    ```", "```go\n      b := pem.Block{\n        Type:  \"CERTIFICATE\",\n        Bytes: DER,\n      }\n      cert = pem.EncodeToMemory(&b)\n      privateKey = pem.EncodeToMemory(\n        &pem.Block{\n          Type:  \"RSA PRIVATE KEY\",\n          Bytes: x509.MarshalPKCS1PrivateKey(rsaKey),\n        })\n      return cert, privateKey, nil\n    }\n    ```", "```go\n    func main() {\n      serverCert, serverKey, err := generate()\n      if err != nil {\n        fmt.Printf(\"error generating server certificate: %v\", err)\n        os.Exit(1)\n      }\n      fmt.Println(\"Server Certificate:\")\n      fmt.Printf(\"%s\\n\", serverCert)\n      fmt.Println(\"Server Key:\")\n      fmt.Printf(\"%s\\n\", serverKey)\n    }\n    ```", "```go\n    package main\n    import (\n        \"crypto/rand\"\n        \"crypto/rsa\"\n        \"crypto/tls\"\n        \"crypto/x509\"\n        \"crypto/x509/pkix\"\n        \"encoding/pem\"\n        \"fmt\"\n        \"io/ioutil\"\n        \"log\"\n        \"math/big\"\n        \"net\"\n        \"net/http\"\n        \"os\"\n        \"time\"\n    )\n    ```", "```go\n    main.go\n    117 func runServer(certFile string, key string, clientCert []byte) (err error) {\n    118   fmt.Println(\"starting HTTP server\")\n    119   http.HandleFunc(\"/\", hello)\n    120   server := &http.Server{\n    121     Addr:    \":443\",\n    122     Handler: nil,\n    123   }\n    124   cert, err := tls.LoadX509KeyPair(certFile, key)\n    125   if err != nil {\n    126     return err\n    127   }\n    The full code for this step is available at: https://packt.live/39hG58K\n    ```", "```go\n    func hello(w http.ResponseWriter, r *http.Request) {\n      fmt.Printf(\"%s: Ping\\n\", time.Now().Format(time.Stamp))\n      fmt.Fprintf(w, \"Pong\\n\")\n    }\n    ```", "```go\n    main.go\n    95  func client(caCert []byte, ClientCerttls.Certificate) (err error) {\n    96    certPool := x509.NewCertPool()\n    97    certPool.AppendCertsFromPEM(caCert)\n    98    client := &http.Client{\n    99      Transport: &http.Transport{\n    100       TLSClientConfig: &tls.Config{\n    101         RootCAs:      certPool,\n    102         Certificates: []tls.Certificate{ClientCert},\n    103       },\n    104     },\n    105   }\n    106   resp, err := client.Get(\"https://127.0.0.1:443\")\n    107   if err != nil {\n    108     return err\n    109   }\n    The full code for this step is available at: https://packt.live/2PS72Z2\n    ```", "```go\nmain.go\n18 func main() {\n19   serverCert, serverKey, err := generate()\n20   if err != nil {\n21     fmt.Printf(\"error generating server certificate: %v\", err)\n22     os.Exit(1)\n23   }\n24   ioutil.WriteFile(\"private.key\", serverKey, 0600)\n25   ioutil.WriteFile(\"cert.pem\", serverCert, 0777)\n26   clientCert, clientKey, err := generate()\n27   if err != nil {\n28     fmt.Printf(\"error generating client certificate: %v\", err)\n29     os.Exit(1)\n30   }\nThe full code for this step is available at: https://packt.live/2t0IXpW\n```", "```go\n$ cd../exercise8/\n$ go run main.go\nstarting HTTP server\nOct 17 22:22:28: Ping\nOct 17 22:22:28: Pong\nOct 17 22:22:31: Ping\nOct 17 22:22:31: Pong\n```", "```go\npackage main\nimport (\n  \"fmt\"\n  \"golang.org/x/crypto/bcrypt\"\n)\nfunc main() {\n  password := \"mysecretpassword\"\n  encrypted, _ := bcrypt.GenerateFromPassword([]byte(password), 10)\n  fmt.Println(\"Plain Text Password:\", password)\n  fmt.Println(\"Hashed Password:    \", string(encrypted))\n  err := bcrypt.CompareHashAndPassword([]byte(encrypted), []byte(password))\n  if err == nil {\n    fmt.Println(\"Password matched\")\n  }\n}\n```", "```go\n    generateCert(cn string, caCert *x509.Certificate, caPrivcrypto.PrivateKey)   (cert *x509.Certificate, privateKeycrypto.PrivateKey, err error)\n    ```", "```go\n    $ go run main.go\n    ca certificate generated successfully\n    leaf certificate generated successfully\n    leaf certificate successfully verified\n    ```"]