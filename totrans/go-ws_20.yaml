- en: Appendix
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录
- en: About
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于
- en: This section is included to assist the students to perform the activities present
    in the book. It includes detailed steps that are to be performed by the students
    to complete and achieve the objectives of the book.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包含以帮助学生执行书中现有的活动。它包括学生为完成和实现本书目标而要执行的详细步骤。
- en: 'Chapter 1: Variables and Operators'
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章：变量和运算符
- en: Activity 1.01 Defining and Printing
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动一.01 定义和打印
- en: '**Solution:**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: 'Define the package name:'
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义包名：
- en: '[PRE0]'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Import the required packages:'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入所需的包：
- en: '[PRE1]'
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a `main()` function:'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`main()`函数：
- en: '[PRE2]'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Declare and initialize a string variable for the given name:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明并初始化一个字符串变量用于给定名称：
- en: '[PRE3]'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Declare and initialize a string variable for the family name:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明并初始化一个字符串变量用于姓氏：
- en: '[PRE4]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Declare and initialize an `int` variable for `age`:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明并初始化一个`int`变量用于`age`：
- en: '[PRE5]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Declare and initialize a `bool` variable for `peanutAllergy`:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明并初始化一个`bool`变量用于`peanutAllergy`：
- en: '[PRE6]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Print each variable to the console:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将每个变量打印到控制台：
- en: '[PRE7]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Close the `main()` function:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭`main()`函数：
- en: '[PRE8]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following is the expected output:'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下为预期的输出：
- en: '![Figure 1.24: Expected output after assigning the variables'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.24：分配变量后的预期输出'
- en: '](img/B14177_01_24.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14177_01_24.jpg)'
- en: 'Figure 1.24: Expected output after assigning the variables'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.24：分配变量后的预期输出
- en: 'Activity 1.02: Pointer Value Swap'
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动一.02：指针值交换
- en: '**Solution:**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: 'Let''s start the exercise with the following code:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从以下代码开始练习：
- en: '[PRE9]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You need to get the pointers from `a` and `b` to pass to swap using `&`:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要从`a`和`b`获取指针以传递给`swap`使用`&`：
- en: '[PRE10]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You need to dereference the values first using `*`. You can swap without temporary
    values by using Go''s ability to do multiple assignments. The right-hand side
    resolves before the left-hand side does:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要首先使用`*`解引用值。您可以通过使用Go的多重赋值能力来交换值，而不需要临时变量。右侧在左侧之前解析：
- en: '[PRE11]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following is the expected output:'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下为预期的输出：
- en: '[PRE12]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Activity 1.03: Message Bug'
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动一.03：消息错误
- en: '**Solution:**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: 'Create `package` `main` and add the necessary imports:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`package` `main`并添加必要的导入：
- en: '[PRE13]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Define the `message` before the `if` statement:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`if`语句之前定义`message`：
- en: '[PRE14]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Define a `message` that would update the `message` in step 2:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个`message`，该`message`将在步骤2中更新：
- en: '[PRE15]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Define a `message` that would update the message in step 3:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个`message`，该`message`将在步骤3中更新：
- en: '[PRE16]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following is the expected output:'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下为预期的输出：
- en: '[PRE17]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Activity 1.04: Bad Count Bug'
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动一.04：坏计数错误
- en: '**Solution:**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: 'Let''s start the exercise with the following code:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从以下代码开始练习：
- en: '[PRE18]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The assignment here caused the preceding `count` to be shadowed:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此处的赋值导致前面的`count`被遮蔽：
- en: '[PRE19]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The following is the expected output:'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下为预期的输出：
- en: '[PRE20]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Chapter 2: Logic and Loops'
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章：逻辑和循环
- en: 'Activity 2.01: Implementing FizzBuzz'
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动二.01：实现FizzBuzz
- en: '**Solution:**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: 'Define `package` and include `import`:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`package`并包含`import`：
- en: '[PRE21]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create the `main` function:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`main`函数：
- en: '[PRE22]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create a `for` `i` loop that starts at 1 and loops until `i` gets to 99:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个从1开始，直到`i`达到99的`for`循环：
- en: '[PRE23]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Initialize a string variable that will hold the output:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个字符串变量，该变量将保存输出：
- en: '[PRE24]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Using module logic to check for divisibility, `if` `i` is divisible by 3, then
    add `"Fizz"` to the `out` string:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用模块逻辑检查可除性，如果`i`能被3整除，则将`"Fizz"`添加到`out`字符串中：
- en: '[PRE25]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If divisible by 5, add `"Buzz"` to the string:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果能被5整除，则将`"Buzz"`添加到字符串中：
- en: '[PRE26]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'If neither, convert the number to a string and then add it to the output string:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果都不是，将数字转换为字符串，然后添加到输出字符串中：
- en: '[PRE27]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Print the output variable:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印输出变量：
- en: '[PRE28]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Close the loop and `main`:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭循环和`main`：
- en: '[PRE29]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In the folder you create your code, run:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您创建代码的文件夹中运行：
- en: '[PRE30]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The expected output is as follows:'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期输出如下：
- en: '![Figure 2.03: The FizzBuzz output'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.03：FizzBuzz输出'
- en: '](img/B14177_02_03.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14177_02_03.jpg)'
- en: 'Figure 2.03: The FizzBuzz output'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.03：FizzBuzz输出
- en: 'Activity 2.02: Looping Over Map Data Using range'
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动二.02：使用`range`遍历Map数据
- en: '**Solution:**'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: 'Load the `main` package:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载`main`包：
- en: '[PRE31]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Import the `fmt` package:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`fmt`包：
- en: '[PRE32]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Create the `main` function:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`main`函数：
- en: '[PRE33]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Initialize the `words` map:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化`words`映射：
- en: '[PRE34]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Initialize the `topWord` variable to an empty string and the `topCount` variable
    to 0:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`topWord`变量初始化为空字符串，将`topCount`变量初始化为0：
- en: '[PRE35]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Create a `for` loop that uses `range` to get the key and value of each element:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个使用`range`获取每个元素键和值的`for`循环：
- en: '[PRE36]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Check whether the current `map` element has a larger count than the top count:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查当前`map`元素是否有比顶级计数更大的计数：
- en: '[PRE37]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'If it does, then update the top values with the values from the current element:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果是，则使用当前元素的值更新顶部值：
- en: '[PRE38]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Close the `if` statement:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭`if`语句：
- en: '[PRE39]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Close the loop:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭循环：
- en: '[PRE40]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'After the loop is done, you have your result. Print it to the console:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 循环完成后，你就有结果了。将其打印到控制台：
- en: '[PRE41]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'In the folder you created the code, run:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你创建的代码文件夹中运行：
- en: '[PRE42]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The following is the expected output displaying the most popular word with
    its count value:'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是将显示最常用词及其计数值的预期输出：
- en: '[PRE43]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Activity 2.03: Bubble Sort'
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动2.03：冒泡排序
- en: '**Solution:**'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'Define the package and add the imported package:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义包并添加导入的包：
- en: '[PRE44]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Create `main`:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`main`：
- en: '[PRE45]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Define a slice of integers and initialize it with unsorted numbers:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个整数切片并用未排序的数字初始化它：
- en: '[PRE46]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Print the slice before sorting it:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印排序前的切片：
- en: '[PRE47]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Create a `for` loop; in the `initial` statement, define a Boolean with the
    initial value of `true`. In the condition, check that Boolean. Leave the `post`
    statement empty:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`for`循环；在`initial`语句中，定义一个布尔值，其初始值为`true`。在条件中检查该布尔值。留空`post`语句：
- en: '[PRE48]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Set the Boolean variable to `false`:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将布尔变量设置为`false`：
- en: '[PRE49]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Create a nested `for` `i` loop that steps over the whole slice of `int` values.
    Start the loop from the second element:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个嵌套的`for` `i`循环，遍历整个`int`值的切片。从第二个元素开始循环：
- en: '[PRE50]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Check whether the previous element is bigger than the current element:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查前一个元素是否大于当前元素：
- en: '[PRE51]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'If the previous element is bigger, swap the values of the elements:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果前一个元素更大，则交换元素的值：
- en: '[PRE52]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Set our Boolean to `true` to indicate that we did a swap and we''ll need to
    keep going:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的布尔值设置为`true`以指示我们进行了交换，我们需要继续进行：
- en: '[PRE53]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Close the `if` statement and the two loops:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭`if`语句和两个循环：
- en: '[PRE54]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Print the now sorted slice and close `main`:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印现在排序好的切片并关闭`main`：
- en: '[PRE55]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'In the folder you create the code, run:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你创建的代码文件夹中运行：
- en: '[PRE56]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The following is the expected output:'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是将显示的预期输出：
- en: '[PRE57]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Chapter 3: Core Types'
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章：核心类型
- en: 'Activity 3.01: Sales Tax Calculator'
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动3.01：销售税计算器
- en: '**Solution:**'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: Create a new folder and add a `main.go` file.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的文件夹并添加一个`main.go`文件。
- en: 'In `main.go`, add the `main` package name to the top of the file:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main.go`中，将`main`包名添加到文件顶部：
- en: '[PRE58]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Now add the imports we''ll use in this file:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在添加我们将在此文件中使用的导入：
- en: '[PRE59]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Create a function that takes two floating-point arguments and returns a floating-point:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个函数，该函数接受两个浮点数参数并返回一个浮点数：
- en: '[PRE60]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Multiply the two arguments together and return the result:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个参数相乘并返回结果：
- en: '[PRE61]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Close the function:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭函数：
- en: '[PRE62]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Create the `main()` function:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`main()`函数：
- en: '[PRE63]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Declare a variable to be a floating-point:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个变量作为浮点数：
- en: '[PRE64]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Add `cake` to the `taxTotal`:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`cake`添加到`taxTotal`：
- en: '[PRE65]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Add `milk` to the `taxTotal`:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`milk`添加到`taxTotal`：
- en: '[PRE66]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Add `butter` to the `taxTotal`:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`butter`添加到`taxTotal`：
- en: '[PRE67]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Print the `taxTotal` to the console:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`taxTotal`打印到控制台：
- en: '[PRE68]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Close the `main()` function:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭`main()`函数：
- en: '[PRE69]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Save the file, and from within the folder you created run the following:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件，并在你创建的文件夹内运行以下命令：
- en: '[PRE70]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Running the preceding code shows the following output:'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行前面的代码会显示以下输出：
- en: '[PRE71]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Activity 3.02: Loan Calculator'
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动3.02：贷款计算器
- en: '**Solution:**'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'Define the package:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义包：
- en: '[PRE72]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Import the necessary packages:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入必要的包：
- en: '[PRE73]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Define constants for the scores and ratios:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义分数和比率的常量：
- en: '[PRE74]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Pre-define the errors:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 预定义错误：
- en: '[PRE75]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Create a function to check the loan details. This function will accept a `creditScore`,
    an `income`, a `loanAmount`, and a `loanTerm`, and return an error:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个检查贷款详情的函数。此函数将接受一个`creditScore`、一个`income`、一个`loanAmount`和一个`loanTerm`，并返回一个错误：
- en: '[PRE76]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Set a base `interest` rate:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个基本的`interest`利率：
- en: '[PRE77]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'A good `creditScore` gets a better rate:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 良好的`creditScore`可以得到更好的利率：
- en: '[PRE78]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Validate the `creditScore` and return an error if it''s bad:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证`creditScore`，如果它有问题则返回错误：
- en: '[PRE79]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Validate the `income` and return an error if it''s bad:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证`income`，如果它有问题则返回错误：
- en: '[PRE80]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Validate the `loanAmount` and return an error if it''s bad:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证`loanAmount`，如果它有问题则返回错误：
- en: '[PRE81]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Validate the `loanTerm` and return an error if it''s bad:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证`loanTerm`，如果它有问题则返回错误：
- en: '[PRE82]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Convert the interest rate into something we can use in calculations:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将利率转换为我们可以用于计算的形式：
- en: '[PRE83]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Calculate the payment by multiplying the `loanAmount` by the loan `rate`. Then
    divide that by the `loanTerm`. Now divide the `loanAmount` by the `loanTerm`.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将`loanAmount`乘以贷款`rate`来计算付款。然后将结果除以`loanTerm`。现在将`loanAmount`除以`loanTerm`。
- en: 'Finally, add those two amounts together:'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，将这两个金额相加：
- en: '[PRE84]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Calculate the total cost of the loan by multiplying the payments by the `loanTerm`
    and then subtracting the `loanAmount`:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将付款乘以 `loanTerm` 然后减去 `loanAmount` 来计算贷款的总成本：
- en: '[PRE85]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Declare a variable for `approval`:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个用于 `approval` 的变量：
- en: '[PRE86]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Add a condition to check that the income is more than the payment:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个条件来检查收入是否超过付款：
- en: '[PRE87]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Calculate the percentage of their `income` that will be taken up by the payment:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算他们收入中被支付的部分所占的百分比：
- en: '[PRE88]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'If they have a good `creditScore`, allow a higher ratio:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果他们的信用评分良好，允许更高的比率：
- en: '[PRE89]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Print out all the details of the application to the console:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序的所有详细信息打印到控制台：
- en: '[PRE90]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Return with no error and close the function:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无错误返回并关闭函数：
- en: '[PRE91]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Create the `main()` function:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `main()` 函数：
- en: '[PRE92]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Create an example that will be approved:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个将被批准的示例：
- en: '[PRE93]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Print out any errors, if found:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果发现任何错误，打印出来：
- en: '[PRE94]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Create an example that will be denied:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个将被拒绝的示例：
- en: '[PRE95]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Print out any errors, if found:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果发现任何错误，打印出来：
- en: '[PRE96]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Close the `main()` function:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭 `main()` 函数：
- en: '[PRE97]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'In the folder you wrote the code in, run the following:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编写代码的文件夹中运行以下命令：
- en: '[PRE98]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'Following is the expected output:'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是预期的输出：
- en: '![Figure 3.15: Output of loan calculator'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.15：贷款计算器输出'
- en: '](img/B14177_03_15.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14177_03_15.jpg)'
- en: 'Figure 3.15: Output of loan calculator'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.15：贷款计算器输出
- en: 'Chapter 4: Complex Types'
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章：复杂类型
- en: 'Activity 4.01: Filling an Array'
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 4.01：填充数组
- en: '**Solution:**'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: Create a new folder and add a file named `main.go` to it.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的文件夹并添加一个名为 `main.go` 的文件。
- en: 'In `main.go`, add the package and imports:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main.go` 中添加包和导入：
- en: '[PRE99]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Create a function that returns an array:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个返回数组的函数：
- en: '[PRE100]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'Define an array variable:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个数组变量：
- en: '[PRE101]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Use a `for i` loop to operate on each element of the array:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `for i` 循环对数组的每个元素进行操作：
- en: '[PRE102]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'Use `i`, plus a bit of math, to set the correct value:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `i` 和一些数学计算来设置正确的值：
- en: '[PRE103]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'Return the array variable and close the function:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回数组变量并关闭函数：
- en: '[PRE104]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'In the `main()` function, call the function and print the returned value to
    the console:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main()` 函数中调用函数并将返回值打印到控制台：
- en: '[PRE105]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Save the file. Then, in the folder you created in *step 1*, run the code using
    the following command:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。然后，在步骤 1 中创建的文件夹中，使用以下命令运行代码：
- en: '[PRE106]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Running the preceding code will produce the following output:'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行前面的代码会产生以下输出：
- en: '[PRE107]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Activity 4.02: Printing a User''s Name Based on User Input'
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 4.02：根据用户输入打印用户姓名
- en: '**Solution:**'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: Create a new folder and add a file named `main.go` to it.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的文件夹并添加一个名为 `main.go` 的文件。
- en: 'In `main.go`, add the package and imports:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main.go` 中添加包和导入：
- en: '[PRE108]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Define the `map` of user data:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义用户数据的 `map`：
- en: '[PRE109]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'Create a function that returns the user''s name and whether it exists:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个返回用户的姓名以及它是否存在函数：
- en: '[PRE110]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'In `main()` function, check the passed arguments. Call the function, print
    if there''s an error, and exit if the user doesn''t exist. Print a greeting to
    the user if they do exist:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main()` 函数中检查传入的参数。调用函数，如果有错误则打印，如果用户不存在则退出。如果用户存在，打印问候语：
- en: '[PRE111]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'Save the file. Then, in the folder you created in *step 1*, run the code using
    the following command:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。然后，在步骤 1 中创建的文件夹中，使用以下命令运行代码：
- en: '[PRE112]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'Running the preceding code produces the following output:'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行前面的代码会产生以下输出：
- en: '[PRE113]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'Activity 4.03: Creating a Locale Checker'
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 4.03：创建区域检查器
- en: '**Solution:**'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: Create a new folder and add a file named `main.go` to it.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的文件夹并添加一个名为 `main.go` 的文件。
- en: 'In `main.go`, add the package and imports:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main.go` 中添加包和导入：
- en: '[PRE114]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'Define a `locale` `struct` with a `language` and a `territory`, both of which
    will be strings:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个包含 `language` 和 `territory` 的 `locale` 结构体，这两个都将字符串：
- en: '[PRE115]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'Create a function that returns the test data:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个返回测试数据的函数：
- en: '[PRE116]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'Create a function that uses a passed local struct to check the sample data
    to see if a locale exists:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个函数，使用传入的本地结构体来检查样本数据中是否存在区域：
- en: '[PRE117]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'Create the `main()` function:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `main()` 函数：
- en: '[PRE118]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'Check that an argument has been passed:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查是否已传递参数：
- en: '[PRE119]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'Process the passed argument to make sure it''s in a valid format:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理传入的参数以确保其格式有效：
- en: '[PRE120]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'Create a local struct value using the passed argument data:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用传入的参数数据创建一个本地结构体值：
- en: '[PRE121]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'Call the function and print an error message if it doesn''t exist; otherwise,
    print that the locale is supported:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用函数，如果不存在则打印错误消息；否则，打印该区域受支持：
- en: '[PRE122]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'Save the file. Then, in the folder you created in *step 1*, run the code using
    the following command:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。然后，在步骤 1 中创建的文件夹中，使用以下命令运行代码：
- en: '[PRE123]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'Running the preceding code produces the following output:'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行前面的代码会产生以下输出：
- en: '![Figure 4.17: Locale checking result'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.17：区域检查结果]'
- en: '](img/B14177_04_17.jpg)'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片/B14177_04_17.jpg]'
- en: 'Figure 4.17: Locale checking result'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.17：区域检查结果
- en: 'Activity 4.04: Slicing the Week'
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 4.04：切片一周
- en: '**Solution:**'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: Create a new folder and add a file named `main.go` to it.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的文件夹，并向其中添加一个名为 `main.go` 的文件。
- en: 'In `main.go`, add the package and imports:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main.go` 中添加包和导入：
- en: '[PRE124]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'Create a function that returns a slice of strings:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个返回字符串切片的函数：
- en: '[PRE125]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'Define a slice and initialize it with the days of the week, starting on Monday:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个切片并用一周的天数初始化，从星期一开始：
- en: '[PRE126]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'Create a range that starts at index 6 and goes to the end of the slice. Then,
    create a slice range that starts at the beginning of the slice and goes up to
    index 6\. Use `append` to add the second range to the first range. Capture the
    value from append:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个从索引 6 开始到切片末尾的范围。然后，创建一个从切片开头开始到索引 6 的切片范围。使用 `append` 将第二个范围添加到第一个范围。捕获
    `append` 的值：
- en: '[PRE127]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'Return the result and close the function:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回结果并关闭函数：
- en: '[PRE128]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'In `main`, call the function and print the result to the console:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main` 中调用函数并将结果打印到控制台：
- en: '[PRE129]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'Save the file. Then, in the folder you created in *step 1*, run the code using
    the following command:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。然后，在你在 *步骤 1* 中创建的文件夹中，使用以下命令运行代码：
- en: '[PRE130]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'Running the preceding code produces the following output:'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行前面的代码将产生以下输出：
- en: '[PRE131]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'Activity 4.05: Removing an Element from a Slice'
  id: totrans-319
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 4.05：从切片中移除元素
- en: '**Solution:**'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: Create a new folder and add a file named `main.go` to it.
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的文件夹，并向其中添加一个名为 `main.go` 的文件。
- en: 'In `main.go`, add the package and imports:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main.go` 中添加包和导入：
- en: '[PRE132]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'Create a function that returns a slice of strings:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个返回字符串切片的函数：
- en: '[PRE133]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'Define a slice of strings with the `Good` and `Bad` data:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个包含 `Good` 和 `Bad` 数据的字符串切片：
- en: '[PRE134]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'Create a slice range from the beginning of the slice up until the `Bad` index.
    Create another slice range that starts from one index after the `Bad` data and
    goes until the end of the slice. Append the second slice to the first and capture
    the result:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从切片的开始创建一个范围直到 `Bad` 索引。创建另一个从 `Bad` 数据后一个索引开始直到切片末尾的范围。将第二个切片追加到第一个切片并捕获结果：
- en: '[PRE135]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'Return the slice and close the function:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回切片并关闭函数：
- en: '[PRE136]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'In `main`, call the function and print the result to the console:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main` 中调用函数并将结果打印到控制台：
- en: '[PRE137]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'Save the file. Then, in the folder you created in *step 1*, run the code using
    the following command:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。然后，在你在 *步骤 1* 中创建的文件夹中，使用以下命令运行代码：
- en: '[PRE138]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'The expected output is as follows:'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期的输出如下：
- en: '[PRE139]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'Activity 4.06: Type Checker'
  id: totrans-338
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 4.06：类型检查器
- en: '**Solution:**'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'Define the package:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义包：
- en: '[PRE140]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: 'Import the required libraries:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入所需的库：
- en: '[PRE141]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'Create a function that returns a slice of `interface{}` values. This will hold
    our example values:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个返回 `interface{}` 值切片的函数。这将包含我们的示例值：
- en: '[PRE142]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'Create a function that accepts a single `interface{}` value and returns a `string`:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个接受单个 `interface{}` 值并返回 `string` 的函数：
- en: '[PRE143]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: 'Use a type `switch`:'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用类型 `switch`：
- en: '[PRE144]'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'Add a `case` for all `int` types:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为所有 `int` 类型添加 `case`：
- en: '[PRE145]'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: 'Return a string that represents them:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回表示它们的字符串：
- en: '[PRE146]'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: 'Add a `case` for the floats and return a string for them:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为浮点数添加 `case` 并返回一个字符串：
- en: '[PRE147]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: 'Add a `case` for the Boolean type and return a string for it:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为布尔类型添加 `case` 并返回一个字符串：
- en: '[PRE148]'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 'Then, add a case for strings:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后为字符串添加一个 `case`：
- en: '[PRE149]'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'Add a default case that says you don''t know the type:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个默认 `case`，表示你不知道类型：
- en: '[PRE150]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'Close the `switch` statement and the function:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭 `switch` 语句和函数：
- en: '[PRE151]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'Create the `main()` function:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `main()` 函数：
- en: '[PRE152]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: 'Get the example data and assign it to a variable:'
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取示例数据并将其分配给一个变量：
- en: '[PRE153]'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: 'Use a `for i` loop to step over the example values one by one:'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `for i` 循环逐个遍历示例值：
- en: '[PRE154]'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'Pass each example value to the preceding function and print the result to the
    console:'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将每个示例值传递给前面的函数并将结果打印到控制台：
- en: '[PRE155]'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'Close the loop and the function:'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭循环并执行函数：
- en: '[PRE156]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'In the folder you created the code in, run the following command:'
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你创建代码的文件夹中，运行以下命令：
- en: '[PRE157]'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: 'Running the preceding code will produce the following output:'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行前面的代码将产生以下输出：
- en: '![Figure 4.18: Output displaying types'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.18：显示类型的输出]'
- en: '](img/B14177_04_18.jpg)'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片/B14177_04_18.jpg]'
- en: 'Figure 4.18: Output displaying types'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.18：显示类型的输出
- en: 'Chapter 5: Functions'
  id: totrans-380
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章：函数
- en: 'Activity 5.01: Calculating the Working Hours of Employees'
  id: totrans-381
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 5.01：计算员工的工时
- en: '**Solution:**'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'All directories and files should be created inside your `$GOPATH`:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 所有目录和文件都应该创建在你的 `$GOPATH` 内：
- en: Create a directory called `Activity5.01`.
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `Activity5.01` 的目录。
- en: Create a file called `main.go` inside `Activity5.01`.
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Activity5.01` 中创建一个名为 `main.go` 的文件。
- en: 'Inside `Activity5.01/main.go`, declare the `main` package and its imports:'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Activity5.01/main.go` 中，声明 `main` 包及其导入：
- en: '[PRE158]'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: 'Create a `Developer` type. Notice the `WorkWeek` is an array of `7`. This is
    because the week consists of 7 days and we use an array to ensure the fixed size:'
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `Developer` 类型。注意 `WorkWeek` 是一个包含 `7` 个元素的数组。这是因为一周有 7 天，我们使用数组来确保固定的大小：
- en: '[PRE159]'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: 'Create an `Employee` type:'
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `Employee` 类型：
- en: '[PRE160]'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: 'Create a `Weekday` of type `int`:'
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个类型为 `int` 的 `Weekday`：
- en: '[PRE161]'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: 'Create a constant of type `Weekday`. This is an enumeration of the weekdays:'
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个类型为 `Weekday` 的常量。这是一个工作日的枚举：
- en: '[PRE162]'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: 'In the `main()` function, include the following code; initialize `Developer`
    with the following details:'
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main()` 函数中，包括以下代码；用以下详细信息初始化 `Developer`：
- en: '[PRE163]'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: 'Next, call the `LogHours` method:'
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，调用 `LogHours` 方法：
- en: '[PRE164]'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: 'Print out the workweek and the hours worked for the week:'
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印出工作周和一周的工作时数：
- en: '[PRE165]'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: 'Create a `LogHours` method; it is a pointer receiver method. It takes as input
    a custom type called `Weekday` and an `int`. The method assigns the `WorkWeek`
    field to the day of the week for hours worked that day. `WorkWeek` is an array
    with a fixed size of `7`, because there are `7` days in a week:'
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `LogHours` 方法；它是一个指针接收器方法。它接受一个名为 `Weekday` 的自定义类型和一个 `int`。该方法将 `WorkWeek`
    字段赋给当天工作的小时数。`WorkWeek` 是一个大小为 `7` 的固定大小数组，因为一周有 `7` 天：
- en: '[PRE166]'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: 'Create a `HoursWorked` method that will return an `int`. The `HoursWorked`
    function ranges over `WorkWeek`, adding the hours for the day to `total`:'
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个返回 `int` 类型的 `HoursWorked` 方法。`HoursWorked` 函数遍历 `WorkWeek`，将每天的小时数加到 `total`
    上：
- en: '[PRE167]'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: 'The following is the expected output:'
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下为预期输出：
- en: '[PRE168]'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: 'Activity 5.02: Calculating Payable Amount for Employees Based on Working Hours'
  id: totrans-408
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 5.02：根据工作小时数计算员工的应付款项
- en: '**Solution:**'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: Create a directory called `Activity5.02`.
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `Activity5.02` 的目录。
- en: Create a file called `main.go()` in the directory in step 1.
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在步骤 1 中的目录中创建一个名为 `main.go()` 的文件。
- en: 'Copy the following code following into `Activity5.02/main.go`. This is the
    same code from steps 3-7 of *Activity5.01,* *Calculating the Working Hours of
    Employees*; see those steps for a description of the code:'
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码复制到 `Activity5.02/main.go` 中。这是与 *Activity5.01* 中步骤 3-7 相同的代码；请参阅那些步骤以了解代码的描述：
- en: '[PRE169]'
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: 'In the `main()` function, place the following code. Assign `x` to the return
    value of `nonLoggedHours()`. As you may recall, the return value is `func(int)int`.
    The following three prints pass a value to `x` `func`. Each time `x` `func` is
    called, it adds the value passed to the total:'
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main()` 函数中，放置以下代码。将 `x` 赋值为 `nonLoggedHours()` 的返回值。如您所回忆的，返回值是 `func(int)int`。以下三个
    `print` 语句将一个值传递给 `x` `func`。每次调用 `x` `func` 时，它都会将传递给运行总量的值相加：
- en: '[PRE170]'
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: 'The `LogHours` and `HoursWorked` remain unchanged:'
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LogHours` 和 `HoursWorked` 保持不变：'
- en: '[PRE171]'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: 'Create a method called `PayDay()` that returns an `int` and a `bool`. The method
    evaluates whether `HoursWorked` is greater than `40`. If it is, then it calculates
    `hoursOver` as overtime pay. It returns the total pay and `true` if the pay includes
    overtime:'
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `PayDay()` 的方法，它返回一个 `int` 和一个 `bool`。该方法评估 `HoursWorked` 是否大于 `40`。如果是，则计算
    `hoursOver` 作为加班费。如果工资包括加班费，则返回总工资和 `true`：
- en: '[PRE172]'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: 'Create a function called `nonLoggedHours()`. This is a function that has a
    return type of `func(int)int`. The function is a closure, it encloses the anonymous
    function. Each time the function is called, it adds the int that is passed into
    the running total and returns the total:'
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `nonLoggedHours()` 的函数。这是一个返回类型为 `func(int)int` 的函数。该函数是一个闭包，它封装了匿名函数。每次调用该函数时，它都会将传递给运行总量的整数相加，并返回总量：
- en: '[PRE173]'
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: Create a method called `PayDetails`. Inside the `PayDetails` method, it iterates
    over `d.WorkWeek`. It assigns the `i` value to the index of the slice and `v`
    to the value stored in the slice. The `i` switch is the index of the slice; it
    represents the day of the week. The `case` statement evaluates `i` and based on
    the value, it prints the day and the hours for that day.
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `PayDetails` 的方法。在 `PayDetails` 方法内部，它遍历 `d.WorkWeek`。它将 `i` 值赋给切片的索引，将
    `v` 赋给切片中存储的值。`i` switch 是切片的索引；它代表一周中的某一天。`case` 语句评估 `i` 的值，并根据该值打印出那一天和那一周的时数。
- en: The function also prints the hours worked for the week, the pay for the week,
    and if the pay was overtime pay.
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该函数还打印出一周的工作时数、一周的工资以及是否为加班费。
- en: The first `print` statement prints out the hours worked.
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个 `print` 语句打印出工作的小时数。
- en: '`pay` and `overtime` get assigned the values returned from `d.Payday()`.'
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pay` 和 `overtime` 被分配了从 `d.Payday()` 返回的值。'
- en: 'The following `pay` statements print out the pay, whether it was overtime,
    and a blank line:'
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下 `pay` 语句打印出工资、是否加班以及一个空行：
- en: '[PRE174]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: 'The results of this activity being run are as follows:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此活动的结果如下：
- en: '![Figure 5.14: Output for payable amount activity'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.14：可支付金额活动的输出'
- en: '](img/B14177_05_14.jpg)'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14177_05_14.jpg)'
- en: 'Figure 5.14: Output for payable amount activity'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.14：可支付金额活动的输出
- en: 'Chapter 6: Errors'
  id: totrans-432
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章：错误
- en: 'Activity 6.01: Creating a Custom Error Message for a Banking Application'
  id: totrans-433
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动六点零一：为银行应用程序创建自定义错误信息
- en: '**Solution:**'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: Create a directory called *Activity6.01* inside your `$GOPATH`.
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 `$GOPATH` 内创建一个名为 *Activity6.01* 的目录。
- en: Save a file inside of the directory created in *step 1* called `main.go`.
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 *步骤 1* 中创建的目录内保存一个名为 `main.go` 的文件。
- en: 'Define `package main` and import two packages, `errors` and `fmt`:'
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义 `package main` 并导入两个包，`errors` 和 `fmt`：
- en: '[PRE175]'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: 'Next, define our custom error that will return an error that displays `"invalid
    last name"`:'
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，定义我们的自定义错误，它将返回一个显示 `"invalid last name"` 的错误：
- en: '[PRE176]'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: 'We need one more custom error that will return an error that displays `"invalid
    routing number"`:'
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要一个自定义错误，它将返回一个显示 `"invalid routing number"` 的错误：
- en: '[PRE177]'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: 'In the `main()` function, we will print each of the errors:'
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main()` 函数中，我们将打印出每个错误：
- en: '[PRE178]'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: At the command line, navigate to the directory created in *step 1*.
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，导航到 *步骤 1* 中创建的目录。
- en: 'At the command line, type the following:'
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，输入以下内容：
- en: '[PRE179]'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: The `go build` command will compile your program and create an executable named
    after the directory you created in *step 1*.
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`go build` 命令将编译你的程序，并创建一个以你在 *步骤 1* 中创建的目录命名的可执行文件。'
- en: Type the name of the file created in *step 8* and hit *Enter* to run the executable.
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 *步骤 8* 中创建的文件名并按 *Enter* 运行可执行文件。
- en: 'The expected output is as follows:'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期输出如下：
- en: '[PRE180]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: 'Activity 6.02: Validating a Bank Customer''s Direct Deposit Submission'
  id: totrans-452
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动六点零二：验证银行客户直接存款提交
- en: '**Solution:**'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: Create a directory called *Activity6.02* inside `$GOPATH`.
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `$GOPATH` 内创建一个名为 *Activity6.02* 的目录。
- en: Save a file inside the directory created in *step 1* called `main.go`.
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 *步骤 1* 中创建的目录内保存一个名为 `main.go` 的文件。
- en: 'Define `package main` and add the following imports for this application:'
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义 `package main` 并为该应用程序添加以下导入：
- en: '[PRE181]'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: 'Define the struct and fields that are mentioned in the activity description:'
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义活动描述中提到的结构和字段：
- en: '[PRE182]'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: 'Define two errors that will be used by the `directDeposit` method later:'
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义两个错误，稍后将在 `directDeposit` 方法中使用：
- en: '[PRE183]'
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: 'In the `main()` function, assign a variable of the `directDeposit` type and
    set its fields:'
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main()` 函数中，分配一个 `directDeposit` 类型的变量并设置其字段：
- en: '[PRE184]'
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: 'Assign a variable named `err` to the `directDeposit`, `validateRoutingNumber`,
    and `validateLastName` methods. If an error is returned, print the error:'
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将名为 `err` 的变量分配给 `directDeposit`、`validateRoutingNumber` 和 `validateLastName`
    方法。如果返回错误，则打印错误：
- en: '[PRE185]'
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: 'Call the `report()` method to print out the field''s values:'
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用 `report()` 方法以打印出字段的值：
- en: '[PRE186]'
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: 'Create a method that is used to check whether `routingNumber` is less than
    100\. If that condition is `true`, it will return the custom error, `ErrInvalidRoutingNum`,
    else it will return `nil`:'
  id: totrans-468
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个方法，用于检查 `routingNumber` 是否小于 100。如果该条件为 `true`，则返回自定义错误 `ErrInvalidRoutingNum`，否则返回
    `nil`：
- en: '[PRE187]'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: 'Now we are going to add the `validateLastName` method. This method removes
    all trailing spaces from `lastName` and checks to see whether the `lastName` length
    equals zero. If the `lastName` length equals zero, the method will return the
    error, `ErrInvalidLasName`. If `lastName` is not equal to zero, then it will return
    `nil`:'
  id: totrans-470
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将添加 `validateLastName` 方法。此方法从 `lastName` 中删除所有尾随空格，并检查 `lastName` 的长度是否为零。如果
    `lastName` 的长度为零，则该方法将返回错误 `ErrInvalidLasName`。如果 `lastName` 不为零，则返回 `nil`：
- en: '[PRE188]'
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE188]'
- en: 'The next `report()` method will print each of the `directDeposit` field''s
    values:'
  id: totrans-472
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个 `report()` 方法将打印出每个 `directDeposit` 字段的值：
- en: '[PRE189]'
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE189]'
- en: At the command line, navigate to the directory created in *step 1*.
  id: totrans-474
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，导航到 *步骤 1* 中创建的目录。
- en: 'At the command line, type the following:'
  id: totrans-475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，输入以下内容：
- en: '[PRE190]'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: The `go build` command will compile your program and create an executable named
    after the directory you created in *step 1*.
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`go build` 命令将编译你的程序，并创建一个以你在 *步骤 1* 中创建的目录命名的可执行文件。'
- en: Type the name of the file created in *step 13* and hit *Enter* to run the executable.
  id: totrans-478
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 *步骤 13* 中创建的文件名并按 *Enter* 运行可执行文件。
- en: 'The expected output is as follows:'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期输出如下：
- en: '![Figure 6.14: Validating a bank customer''s direct deposit submission'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.14：验证银行客户的直接存款提交](img/B14177_06_14.jpg)'
- en: '](img/B14177_06_14.jpg)'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.14：验证银行客户的直接存款提交](img/B14177_06_14.jpg)'
- en: 'Figure 6.14: Validating a bank customer''s direct deposit submission'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.14：验证银行客户的直接存款提交
- en: 'Activity 6.03: Panic on Invalid Data Submission'
  id: totrans-483
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动第6.03：无效数据提交时的恐慌
- en: '**Solution:**'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: Navigate to the directory used in *step 1* of *Activity 6.02*, *Validating a
    Bank's Customers Direct Deposit Submission*.
  id: totrans-485
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到*活动6.02*的*步骤1*中使用的目录，*验证银行的客户直接存款提交*。
- en: 'Change the return `ErrInvalidRoutingNum` to panic with `ErrInvalidRoutingNum`
    passed to the `panic()` function:'
  id: totrans-486
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将返回的`ErrInvalidRoutingNum`改为使用`panic()`函数传递`ErrInvalidRoutingNum`来panic：
- en: '[PRE191]'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: At the command line, navigate to the directory used in *step 1*.
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，导航到*步骤1*中使用的目录。
- en: 'At the command line, type the following:'
  id: totrans-489
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，键入以下内容：
- en: '[PRE192]'
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE192]'
- en: The `go build` command will compile your program and create an executable named
    after the directory you used in *step 1*.
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`go build`命令将编译你的程序并创建一个以你在*步骤1*中使用的目录命名的可执行文件。'
- en: Type the name of the file created in *step 4* and hit *Enter* to run the executable.
  id: totrans-492
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 键入在*步骤4*中创建的文件名并按*Enter*键运行可执行文件。
- en: 'The expected output is as follows:'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期输出如下：
- en: '![Figure 6.15: Panic on invalid routing number'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.15：无效路由号码的panic'
- en: '](img/B14177_06_15.jpg)'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.15：无效路由号码的panic](img/B14177_06_15.jpg)'
- en: 'Figure 6.15: Panic on invalid routing number'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.15：无效路由号码的panic
- en: 'Activity 6.04: Preventing a Panic from Crashing the App'
  id: totrans-497
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动第6.04：防止panic崩溃应用程序
- en: '**Solution:**'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: Navigate to the directory used in *step 1* of *Activity 6.03*, *Panic on Invalid
    Data Submission*.
  id: totrans-499
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到*活动6.03*的*步骤1*中使用的目录，*无效数据提交时的恐慌*。
- en: Add a `defer` function to the `validateRoutingNumber` method.
  id: totrans-500
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`validateRoutingNumber`方法中添加一个`defer`函数。
- en: Inside the `defer` function, check for an error being returned from the `recover()`
    function.
  id: totrans-501
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`defer`函数中，检查是否有错误从`recover()`函数返回。
- en: If there is an error, print the error from the `recover()` function.
  id: totrans-502
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果有错误，从`recover()`函数中打印错误。
- en: 'The only change is adding a deferred function:'
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 唯一的改变是添加一个延迟函数：
- en: '[PRE193]'
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: At the command line, navigate to the directory used in *step 1*.
  id: totrans-505
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，导航到*步骤1*中使用的目录。
- en: 'At the command line, type the following:'
  id: totrans-506
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，键入以下内容：
- en: '[PRE194]'
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: The `go build` command will compile your program and create an executable named
    after the directory you used in *step 1*.
  id: totrans-508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`go build`命令将编译你的程序并创建一个以你在*步骤1*中使用的目录命名的可执行文件。'
- en: Type the name of the file created in *step 6* and hit *Enter* to run the executable.
  id: totrans-509
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在*步骤6*中创建的文件名中键入并按*Enter*键运行可执行文件。
- en: 'The expected output is as follows:'
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期输出如下：
- en: '![Figure 6.16: Recovering from panic on an invalid routing number'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.16：从无效路由号码的panic中恢复'
- en: '](img/B14177_06_16.jpg)'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.16：从无效路由号码的panic中恢复](img/B14177_06_16.jpg)'
- en: 'Figure 6.16: Recovering from panic on an invalid routing number'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.16：从无效路由号码的panic中恢复
- en: 'Chapter 7: Interfaces'
  id: totrans-514
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章：接口
- en: 'Activity 7.01: Calculating Pay and Performance Review'
  id: totrans-515
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动第7.01：计算工资和绩效评估
- en: '**Solution:**'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: Create a `main.go` file.
  id: totrans-517
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`main.go`文件。
- en: 'Inside the `main.go` file, we have a `main` package and we need to import the
    `errors`, `fmt`, and `os` packages:'
  id: totrans-518
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main.go`文件中，我们有一个`main`包，我们需要导入`errors`、`fmt`和`os`包：
- en: '[PRE195]'
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: 'Create the `Employee` struct as follows:'
  id: totrans-520
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式创建`Employee`结构体：
- en: '[PRE196]'
  id: totrans-521
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: 'Create the `Developer` struct. The `Developer` struct has the `Employee` struct
    embedded into it:'
  id: totrans-522
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`Developer`结构体。`Developer`结构体将`Employee`结构体嵌入其中：
- en: '[PRE197]'
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: 'Create the `Manager` struct; it will have the `Employee` struct embedded into
    it as well:'
  id: totrans-524
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`Manager`结构体；它也将`Employee`结构体嵌入其中：
- en: '[PRE198]'
  id: totrans-525
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: 'The `Pay` interface will be used by both the `Manager` and `Developer` types
    to calculate their pay:'
  id: totrans-526
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Pay`接口将由`Manager`和`Developer`类型使用来计算他们的工资：'
- en: '[PRE199]'
  id: totrans-527
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: 'Add a `FullName()` method to the `Developer` struct. This is used to concatenate
    the developer''s `FirstName` and `LastName` and return it:'
  id: totrans-528
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Developer`结构体中添加一个`FullName()`方法。这是用于连接开发者的`FirstName`和`LastName`并返回它的：
- en: '[PRE200]'
  id: totrans-529
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: Create the `Pay()` method for the developer that will implement the `Payer`
    interface.
  id: totrans-530
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为开发者创建一个实现`Payer`接口的`Pay()`方法。
- en: 'The `Developer` struct satisfies the `Payer` interface by having a method called
    `Pay` that returns a string and a float64\. The `Developer Pay()` method returns
    `fullName` of the developer and returns the year''s pay by calculating `Developer
    HourlRate * HoursWorkedInYear`:'
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Developer`结构体通过有一个返回字符串和float64的`Pay`方法来满足`Payer`接口。`Developer Pay()`方法返回开发者的`fullName`，并通过计算`Developer
    HourlRate * HoursWorkedInYear`来返回该年的工资：'
- en: '[PRE201]'
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: Create the `Pay()` method for the `Manager` struct that will implement the `Payer`
    interface.
  id: totrans-533
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`Manager`结构体创建一个`Pay()`方法，该方法将实现`Payer`接口。
- en: 'The `Manager` struct satisfies the `Payer{}` interface by having a method called
    `Pay()` that returns a string and a `float64`. The `Manager Pay` method returns
    `fullName` of the `Manager` struct and returns the year''s pay by calculating
    the `Manager` salary plus the `Manager` salary times the manager''s `CommissionRate`:'
  id: totrans-534
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Manager`结构体通过具有名为`Pay()`的方法来满足`Payer{}`接口，该方法返回一个字符串和一个`float64`。`Manager
    Pay`方法返回`Manager`结构体的`fullName`，并通过计算`Manager`工资加上`Manager`工资乘以经理的`CommissionRate`来返回当年的工资：'
- en: '[PRE202]'
  id: totrans-535
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: 'Create the `payDetails()` function, which accepts a `Payer{}` interface. It
    will call the `Pay()` method of the type that is passed in; the `Pay()` method
    is required for the `Payer` interface. Print `fullName` and `yearPay` that gets
    returned from the `Pay()` method:'
  id: totrans-536
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个接受`Payer{}`接口的`payDetails()`函数。它将调用传入类型的`Pay()`方法；`Pay()`方法是`Payer`接口所必需的。打印从`Pay()`方法返回的`fullName`和`yearPay`：
- en: '[PRE203]'
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: The `payDetails()` function accepts a `Payer{}` interface. It then prints `fullName`
    and `yearPay`, which get returned from the `Pay()` method.
  id: totrans-538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`payDetails()`函数接受一个`Payer{}`接口。然后它打印从`Pay()`方法返回的`fullName`和`yearPay`。'
- en: 'Inside the `main` function, we need to create a `Developer` type and `Manager`
    type and set their field values:'
  id: totrans-539
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main`函数内部，我们需要创建一个`Developer`类型和一个`Manager`类型，并设置它们的字段值：
- en: '[PRE204]'
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: Call `payDetails()` and pass the developer and manager as arguments. Since `Developer`
    and `Manager` both satisfy the `Payer{}` interface, we can pass them to the `payDetails()`
    function.
  id: totrans-541
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`payDetails()`并传递开发者和经理作为参数。由于`Developer`和`Manager`都满足`Payer{}`接口，我们可以将它们传递给`payDetails()`函数。
- en: 'In the `main` function, we initialize `d` as a struct literal of `Developer`
    and `m` as a struct literal of `Manager`:'
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`main`函数中，我们将`d`初始化为`Developer`结构字面量，将`m`初始化为`Manager`结构字面量：
- en: '[PRE205]'
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: 'We now need to create the data for the employee review for the developer. We
    will make a map with a key of string and an interface for the value. As you may
    recall, different managers can use a numeric value or a string value for the rating
    to be assigned to the category:'
  id: totrans-544
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要为开发者创建员工评审的数据。我们将创建一个以字符串为键、接口为值的映射。如您所回忆的那样，不同的经理可以为分类分配的评分使用数值或字符串值：
- en: '[PRE206]'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: 'For the review rating, we need to be able to convert the string rating for
    the category to an integer version of the category. We will create the `convertReviewToInt()`
    function to perform this conversion by using a `switch case` statement. The `switch`
    statement on the string looks at the different string versions of the rating and
    returns the integer version of the rating. If the string version of the rating
    is not found, the default clause is executed and returns an error:'
  id: totrans-546
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于评审评分，我们需要能够将分类的字符串评分转换为分类的整数版本。我们将创建一个名为`convertReviewToInt()`的函数来执行此转换，使用`switch
    case`语句。字符串上的`switch`语句检查评分的不同字符串版本，并返回评分的整数版本。如果评分的字符串版本未找到，则执行默认子句并返回一个错误：
- en: '[PRE207]'
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: We need to create a function called `OverallReview()` that accepts an interface
    and returns an integer and an error.
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们需要创建一个名为`OverallReview()`的函数，该函数接受一个接口并返回一个整数和一个错误。
- en: Recall that our review process provides strings and integers for the rating;
    that is why this function accepts an interface so that we can evaluate either
    type.
  id: totrans-549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 回想一下，我们的评审过程提供了字符串和整数作为评分；这就是为什么这个函数接受一个接口，这样我们就可以评估任何类型。
- en: We use the switch type code structure to determine the interface concrete type.
    The `v` variable gets assigned the concrete type of `i`.
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们使用`switch`类型代码结构来确定接口的具体类型。`v`变量被分配给`i`的具体类型。
- en: The only valid types for the rating are `int` and a `string`. Anything else
    is considered invalid and causes the default statement to be executed. The default
    statement will return an error if the type is not found in the `case` statements.
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 评分的有效类型只有`int`和字符串。任何其他类型都被视为无效，并导致执行默认语句。如果类型在`case`语句中未找到，则默认语句将返回一个错误。
- en: 'If the type is `int`, it will simply return it as an `int`. If the interface
    concrete type is a string, the code in the `case` `string` will execute. It will
    pass the string to the `convertReviewToInt(v)` function. This function, as explained
    earlier, will do a lookup of the string version of the rating and return the integer
    correspondent:'
  id: totrans-552
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果类型是`int`，它将直接返回一个`int`。如果接口的具体类型是字符串，则将执行`case` `string`中的代码。它将字符串传递给`convertReviewToInt(v)`函数。这个函数，如前所述，将查找评分的字符串版本并返回相应的整数：
- en: '[PRE208]'
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: 'Next, create the `ReviewRating()` method to perform the calculation for the
    developer rating. The `Developer` `ReviewRating()` method performs the calculation
    for the `Review`. It loops over the `d.Review` field that is of the `map[string]interface{}`
    type. It passes each interface value to the `OverallReview(v)` function to get
    the integer value of the rating. Each loop iteration adds that rating to a total
    variable. It then calculates the average of the review and prints the results.
    Here are the results of the performance rating:'
  id: totrans-554
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建`ReviewRating()`方法以执行开发者的评级计算。`Developer`的`ReviewRating()`方法执行`Review`的计算。它遍历`d.Review`字段，该字段是`map[string]interface{}`类型。它将每个interface值传递给`OverallReview(v)`函数以获取评级的整数值。每个循环迭代将那个评级加到总变量中。然后计算评级的平均值并打印结果。以下是性能评级的输出结果：
- en: '[PRE209]'
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: 'In the `main()` function, call `ReviewRating()` and print any errors:'
  id: totrans-556
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main()`函数中，调用`ReviewRating()`并打印任何错误：
- en: '[PRE210]'
  id: totrans-557
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: 'Next, call the `payDetails()` function for the `Developer` type and the `Manager`
    type:'
  id: totrans-558
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为`Developer`类型和`Manager`类型调用`payDetails()`函数：
- en: '[PRE211]'
  id: totrans-559
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: 'Build the program by running `go build` at the command line:'
  id: totrans-560
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在命令行中运行`go build`来构建程序：
- en: '[PRE212]'
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: Run the program by typing in the name of the executable at the command line.
  id: totrans-562
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在命令行中输入可执行文件名来运行程序。
- en: 'The expected output is as follows:'
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期输出如下：
- en: '[PRE213]'
  id: totrans-564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: 'Chapter 8: Packages'
  id: totrans-565
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章：包
- en: 'Activity 8.01: Creating a Function to Calculate Payroll and Performance Review'
  id: totrans-566
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动第8.01节：创建计算工资和绩效评估的函数
- en: '**Solution:**'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: 'All directories and files should be created inside of `$GOPATH`:'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 所有目录和文件都应该在`$GOPATH`内部创建：
- en: Create a directory called `Activity8.01`.
  id: totrans-569
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建名为`Activity8.01`的目录。
- en: Create a directory called `pay` and `payroll` inside `Activity8.01`.
  id: totrans-570
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Activity8.01`内部创建名为`pay`和`payroll`的目录。
- en: Create a file called `main.go` inside `Chapter08/Activity8.01/pay`.
  id: totrans-571
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Chapter08/Activity8.01/pay`内部创建名为`main.go`的文件。
- en: 'Create the following files: `developer.go`, `employee.go`, and `manager.go`
    inside `payroll`.'
  id: totrans-572
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下文件：在`payroll`内部创建`developer.go`、`employee.go`和`manager.go`。
- en: 'The directory structure and files should look similar to the following screenshot:![Figure
    8.16: Program directory structure'
  id: totrans-573
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目录结构和文件应该类似于以下截图：![图8.16：程序目录结构]
- en: '](img/B14177_08_16.jpg)'
  id: totrans-574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B14177_08_16.jpg]'
- en: 'Figure 8.16: Program directory structure'
  id: totrans-575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.16：程序目录结构
- en: 'Inside `Chapter08/Activity8.01/payroll/developer.go`, declare the package as
    `payroll`:'
  id: totrans-576
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Chapter08/Activity8.01/payroll/developer.go`内部，将包声明为`payroll`：
- en: '[PRE214]'
  id: totrans-577
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: The `Developer` type, and the following methods, `Pay()` and `ReviewRating()`,
    will all be exportable, so the first letter needs to be capitalized. This means
    that they are visible to other packages outside of `payroll`.
  id: totrans-578
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Developer`类型及其以下方法`Pay()`和`ReviewRating()`都将可导出，因此第一个字母需要大写。这意味着它们对`payroll`之外的其它包可见。'
- en: 'From [https://packt.live/2YNnfS6](https://packt.live/2YNnfS6), move the code
    that relates to the developer type and methods to the `Chapter08/Activity8.01/payroll/developer.go`
    file. It should look like the following code snippet:'
  id: totrans-579
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://packt.live/2YNnfS6](https://packt.live/2YNnfS6)，将关于开发者类型和方法的代码移动到`Chapter08/Activity8.01/payroll/developer.go`文件中。它应该看起来像以下代码片段：
- en: '[PRE215]'
  id: totrans-580
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: 'Inside `Chapter08/Activity8.01/payroll/employee.go`, declare the package as
    `payroll`:'
  id: totrans-581
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Chapter08/Activity8.01/payroll/employee.go`内部，将包声明为`payroll`：
- en: '[PRE216]'
  id: totrans-582
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: The `Employee` type, `Payer` interface, and its methods will all be exportable,
    so the first letter needs to be capitalized. This means that they are visible
    to other packages outside of `payroll`.
  id: totrans-583
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Employee`类型、`Payer`接口及其方法都将可导出，因此第一个字母需要大写。这意味着它们对`payroll`之外的其它包可见。'
- en: 'From [https://packt.live/2YNnfS6](https://packt.live/2YNnfS6), move the code
    that relates to the employee type and methods to `Chapter08/Activity8.01/payroll/employee.go
    file`. It should look like the following code snippet:'
  id: totrans-584
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://packt.live/2YNnfS6](https://packt.live/2YNnfS6)，将关于员工类型和方法的代码移动到`Chapter08/Activity8.01/payroll/employee.go`文件中。它应该看起来像以下代码片段：
- en: '[PRE217]'
  id: totrans-585
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE217]'
- en: 'Inside `Chapter08/Activity8.01/payroll/manager.go`, declare `package` as `payroll`:'
  id: totrans-586
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Chapter08/Activity8.01/payroll/manager.go`内部，将`package`声明为`payroll`：
- en: '[PRE218]'
  id: totrans-587
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE218]'
- en: In `manager.go`, the `Manager` type and its methods will be exportable. All
    the types and methods are exportable because the first letter is capitalized.
    This means that they are visible to other packages outside of `payroll`.
  id: totrans-588
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`manager.go`中，`Manager`类型及其方法将是可导出的。所有类型和方法都是可导出的，因为第一个字母是大写的。这意味着它们对`payroll`之外的其它包可见。
- en: 'From [https://packt.live/2YNnfS6](https://packt.live/2YNnfS6), move the code
    that relates to the employee type and methods to `Chapter08/Activity8.01/payroll/manager.go
    file`. It should look like the following code snippet:'
  id: totrans-589
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://packt.live/2YNnfS6](https://packt.live/2YNnfS6)，将关于员工类型和方法的代码移动到`Chapter08/Activity8.01/payroll/manager.go`文件。它应该看起来像以下代码片段：
- en: '[PRE219]'
  id: totrans-590
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE219]'
- en: 'The `developer.go`, `employee.go`, and `manager.go` files make up the `payroll`
    package. Even though the `payroll` package is split up between three files: `developer.go`,
    `employee.go`, and `manager.go`, they are all accessible across files in the `payroll`
    package. Every file in this directory belongs to the `payroll` package.'
  id: totrans-591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`developer.go`、`employee.go`和`manager.go`文件组成了`payroll`包。尽管`payroll`包被拆分成了三个文件：`developer.go`、`employee.go`和`manager.go`，但它们都可以在`payroll`包的文件中访问。这个目录中的每个文件都属于`payroll`包。'
- en: 'Next, in the `Chapter08/Activity8.01/pay/main.go` file, by looking at the `package`
    declaration, we can see this is an executable package. This is because any package
    that is the main package is an executable. We also know that since this is the
    main package, it will have a `main()` function:'
  id: totrans-592
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`Chapter08/Activity8.01/pay/main.go`文件中，通过查看`package`声明，我们可以看到这是一个可执行的包。这是因为任何作为主包的包都是可执行的。我们还知道，由于这是主包，它将有一个`main()`函数：
- en: '[PRE220]'
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE220]'
- en: 'We know from the initialization process that the packages will have their variables
    and `init()` functions initialized first. In the `import` declaration, we are
    importing our `payroll` package. The `payroll` package is also going to be aliased
    as `pr`:'
  id: totrans-594
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从初始化过程中我们知道，包将首先初始化它们的变量和`init()`函数。在`import`声明中，我们正在导入我们的`payroll`包。`payroll`包也将被别名为`pr`：
- en: '[PRE221]'
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE221]'
- en: 'The `main` package `employeeReview` variable will be initialized next, after
    the `import` items:'
  id: totrans-596
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`main`包的`employeeReview`变量将在`import`项之后初始化：'
- en: '[PRE222]'
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE222]'
- en: 'Next, create the `init()` function. It will run before the other functions
    in the `main` package. It will greet users with a message:'
  id: totrans-598
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建`init()`函数。它将在`main`包中的其他函数之前运行。它将用一条消息问候用户：
- en: '[PRE223]'
  id: totrans-599
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE223]'
- en: 'This is our second `init()` function in the `main` package and it will run
    next. It initializes the `employeeReview` variables to values that will be used
    in this package:'
  id: totrans-600
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是`main`包中的第二个`init()`函数，它将在下一个运行。它将`employeeReview`变量初始化为在这个包中将使用的值：
- en: '[PRE224]'
  id: totrans-601
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE224]'
- en: 'We now get to the `main()` function. Every main package has a `main()` function.
    This is the entry point to our executable:'
  id: totrans-602
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们来到了`main()`函数。每个主包都有一个`main()`函数。这是我们的可执行程序的入口点：
- en: '[PRE225]'
  id: totrans-603
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE225]'
- en: 'We alias our payroll in the `import` declaration with `pr`. We initialize our
    exportable `Developer` type through the `payroll` alias of `pr`. Since `Developer`
    in the `payroll` package is exportable, we will have visibility of it from the
    `main` package. This is also true for the `Employee` type:'
  id: totrans-604
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在`import`声明中将我们的`payroll`别名为`pr`。我们通过`pr`的`payroll`别名初始化可导出的`Developer`类型。由于`payroll`包中的`Developer`是可导出的，我们可以在`main`包中看到它。对于`Employee`类型也是如此：
- en: '[PRE226]'
  id: totrans-605
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE226]'
- en: 'We alias our payroll in the `import` declaration with `pr`. We initialize our
    exportable `Manager` type through the `payroll` alias of `pr`. Since `Manager`
    in the `payroll` package is exportable, we have visibility of it from the `main`
    package. This is also true for the `Employee` type:'
  id: totrans-606
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在`import`声明中将我们的`payroll`别名为`pr`。我们通过`pr`的`payroll`别名初始化可导出的`Manager`类型。由于`payroll`包中的`Manager`是可导出的，我们可以在`main`包中看到它。对于`Employee`类型也是如此：
- en: '[PRE227]'
  id: totrans-607
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE227]'
- en: 'The `Developer` method, `ReviewRating()` is also exportable. This allows us
    to call that method from the `payroll` package:'
  id: totrans-608
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Developer`方法，`ReviewRating()`也是可导出的。这允许我们从`payroll`包中调用该方法：'
- en: '[PRE228]'
  id: totrans-609
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE228]'
- en: 'The `PayDetails` function is exportable, and we can also invoke the function
    in the `payroll` package. We call it with the alias of `pr`:'
  id: totrans-610
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`PayDetails`函数是可导出的，我们也可以在`payroll`包中调用该函数。我们使用别名`pr`来调用它：'
- en: '[PRE229]'
  id: totrans-611
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE229]'
- en: At the command line, go to the `/Exercise8.01/Activity8.01/pay` directory structure.
  id: totrans-612
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，进入`/Exercise8.01/Activity8.01/pay`目录结构。
- en: 'At the command line, type the following:'
  id: totrans-613
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，输入以下内容：
- en: '[PRE230]'
  id: totrans-614
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE230]'
- en: The `go build` command will compile your program and create an executable named
    after the `dir` area.
  id: totrans-615
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go build`命令将编译你的程序并创建一个以`dir`区域命名的可执行文件。'
- en: 'Type the executable name and hit *Enter*:'
  id: totrans-616
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入可执行文件名并按*Enter*键：
- en: '[PRE231]'
  id: totrans-617
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE231]'
- en: 'The result should be as follows:'
  id: totrans-618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果应该是这样的：
- en: '[PRE232]'
  id: totrans-619
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE232]'
- en: 'Chapter 9: Basic Debugging'
  id: totrans-620
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章：基本调试
- en: 'Activity 9.01: Building a Program to Validate Social Security Numbers'
  id: totrans-621
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动第9.01：构建验证社会保险号码的程序
- en: '**Solution:**'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'All directories and files created should be within your `$GOPATH`:'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 所有创建的目录和文件都应该位于你的`$GOPATH`内：
- en: Create a directory called `Activity9.01` inside the `Chapter09` directory.
  id: totrans-624
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Chapter09` 目录下创建一个名为 `Activity9.01` 的目录。
- en: Create a file called `main.go` inside the `Chapter09/Activity9.01/` directory.
  id: totrans-625
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Chapter09/Activity9.01/` 目录下创建一个名为 `main.go` 的文件。
- en: Using Visual Studio Code, open the `main.go` file.
  id: totrans-626
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Visual Studio Code 打开 `main.go` 文件。
- en: Add the following code to `main.go`.
  id: totrans-627
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到 `main.go` 中。
- en: 'Here is the `main` function to build from:'
  id: totrans-628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是构建的 `main` 函数：
- en: '[PRE233]'
  id: totrans-629
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE233]'
- en: 'Add the following custom error types. The custom errors that we will be using
    to log in to our program. These custom errors will be returned by their respective
    functions. They will appear in the log where applicable:'
  id: totrans-630
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下自定义错误类型。我们将使用这些自定义错误记录到我们的程序中。这些自定义错误将由它们各自的功能返回。它们将在日志中适用的情况下出现：
- en: '[PRE234]'
  id: totrans-631
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE234]'
- en: 'Create a function that will check to see whether the SSN length is valid. If
    the length is not 9, return an error to include the details of which SSN caused
    the custom error, `ErrInvalidSSNLength`:'
  id: totrans-632
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个函数，用于检查 SSN 的长度是否有效。如果长度不是 9，则返回一个错误，包括导致自定义错误 `ErrInvalidSSNLength` 的 SSN
    详细信息：
- en: '[PRE235]'
  id: totrans-633
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE235]'
- en: 'Create a function that will check to see whether all the characters in the
    SSN are numbers. If the SSN is invalid, return an error to include the details
    of which SSN caused the custom error, `ErrInvalidSSNNumbers`:'
  id: totrans-634
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个函数，用于检查 SSN 中的所有字符是否都是数字。如果 SSN 无效，返回一个错误，包括导致自定义错误 `ErrInvalidSSNNumbers`
    的 SSN 详细信息：
- en: '[PRE236]'
  id: totrans-635
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE236]'
- en: 'Create a function that will check to see whether the SSN starts with 000\.
    If the SSN is invalid, return an error to include the details of which SSN caused
    the custom error, `ErrInvalidSSNPrefix`:'
  id: totrans-636
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个函数，用于检查 SSN 是否以 000 开头。如果 SSN 无效，返回一个错误，包括导致自定义错误 `ErrInvalidSSNPrefix`
    的 SSN 详细信息：
- en: '[PRE237]'
  id: totrans-637
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE237]'
- en: 'Create a function that will check that if the SSN starts with a 9, then the
    fourth digit of an SSN should be a 7 or a 9\. If the SSN is invalid, return an
    error to include the details of which SSN caused the custom error, `ErrInvalidSSNDigitPlace`:'
  id: totrans-638
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个函数，用于检查如果 SSN 以 9 开头，那么 SSN 的第四位数字应该是 7 或 9。如果 SSN 无效，返回一个错误，包括导致自定义错误 `ErrInvalidSSNDigitPlace`
    的 SSN 详细信息：
- en: '[PRE238]'
  id: totrans-639
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE238]'
- en: 'In the `main()` function, set the flags for our logging:'
  id: totrans-640
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main()` 函数中，设置我们的日志标志：
- en: '[PRE239]'
  id: totrans-641
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE239]'
- en: 'Initialize our `validateSSN` slice to contain various SSN numbers that we will
    be validating:'
  id: totrans-642
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化我们的 `validateSSN` 切片，包含我们将要验证的各种 SSN 号码：
- en: '[PRE240]'
  id: totrans-643
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE240]'
- en: 'Print the Go representation of the `validateSSN` variable using `%#v`:'
  id: totrans-644
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `%#v` 打印 `validateSSN` 变量的 Go 表示形式：
- en: '[PRE241]'
  id: totrans-645
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE241]'
- en: 'Next, create a `for` loop that will iterate over the slice of SSNs using a
    `range` clause:'
  id: totrans-646
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个 `for` 循环，使用 `range` 子句遍历 SSN 切片：
- en: '[PRE242]'
  id: totrans-647
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE242]'
- en: 'In the `for` loop, for each SSN, we want to print some details about the `ssn`.
    We want to print the current entry order of the SSN in the slice that we are validating
    using the `%d` verb. Finally, we need to print the total number of items in the
    slice using the `%d` verb:'
  id: totrans-648
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `for` 循环中，对于每个 SSN，我们想要打印一些关于 `ssn` 的详细信息。我们想要打印我们正在验证的切片中 SSN 的当前条目顺序，使用
    `%d` 修饰符。最后，我们需要使用 `%d` 修饰符打印切片中的项目总数：
- en: '[PRE243]'
  id: totrans-649
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE243]'
- en: 'Remove any dashes from our SSN:'
  id: totrans-650
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从我们的 SSN 中删除任何破折号：
- en: '[PRE244]'
  id: totrans-651
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE244]'
- en: 'Call each of the functions we are using for validating the SSN. Log the error
    that gets returned from the function:'
  id: totrans-652
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用我们用于验证 SSN 的每个函数。记录从函数返回的错误：
- en: '[PRE245]'
  id: totrans-653
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE245]'
- en: 'At the command line, change the directory using the following code:'
  id: totrans-654
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，使用以下代码更改目录：
- en: '[PRE246]'
  id: totrans-655
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE246]'
- en: 'In *Exercise 9.02*, *Printing Decimal, Binary, and Hex Values*, directory,
    type the following command:'
  id: totrans-656
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 *练习 9.02*，*打印十进制、二进制和十六进制值* 目录中，输入以下命令：
- en: '[PRE247]'
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE247]'
- en: Type the executable that was created from the `go build` command and press *Enter*.
  id: totrans-658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输入由 `go build` 命令创建的可执行文件，并按 *Enter* 键。
- en: 'The expected output is as follows:'
  id: totrans-659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期输出如下：
- en: '![Figure 9.15: Validating the SSN output'
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.15：验证 SSN 输出'
- en: '](img/B14177_09_14.jpg)'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B14177_09_14.jpg)'
- en: 'Figure 9.15: Validating the SSN output'
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.15：验证 SSN 输出
- en: 'Chapter 10: About Time'
  id: totrans-663
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 10 章：关于时间
- en: 'Activity 10.01: Formatting a Date According to User Requirements'
  id: totrans-664
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 10.01：根据用户要求格式化日期
- en: '**Solution:**'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'Create a file called `Chapter_10_Activity_1.go` and initialize it with the
    following code:'
  id: totrans-666
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `Chapter_10_Activity_1.go` 的文件，并使用以下代码初始化它：
- en: '[PRE248]'
  id: totrans-667
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE248]'
- en: 'Capture the following values: `date`, `day`, `month`, `year`, `hour`, `minute`,
    and `second`:'
  id: totrans-668
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 捕获以下值：`date`、`day`、`month`、`year`、`hour`、`minute` 和 `second`：
- en: '[PRE249]'
  id: totrans-669
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE249]'
- en: 'Print the concatenated output:'
  id: totrans-670
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印连接的输出：
- en: '[PRE250]'
  id: totrans-671
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE250]'
- en: 'The expected output is as follows (note that this depends on when you run the
    code):'
  id: totrans-672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期输出如下（请注意，这取决于你何时运行代码）：
- en: '[PRE251]'
  id: totrans-673
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE251]'
- en: 'Activity 10.02: Enforcing a Specific Format of Date and Time'
  id: totrans-674
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 10.02：强制执行日期和时间的特定格式
- en: '**Solution:**'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'Create a file called `Chapter_10_Activity_2.go` and initialize the script as
    follows:'
  id: totrans-676
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `Chapter_10_Activity_2.go` 的文件，并按以下方式初始化脚本：
- en: '[PRE252]'
  id: totrans-677
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE252]'
- en: 'Capture the following values: `date`, `day`, `month`, `year`, `hour`, `minute`,
    and `second`:'
  id: totrans-678
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 捕获以下值：`日期`、`日`、`月`、`年`、`时`、`分`和`秒`：
- en: '[PRE253]'
  id: totrans-679
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE253]'
- en: 'Print the concatenated output:'
  id: totrans-680
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印连接后的输出：
- en: '[PRE254]'
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE254]'
- en: 'The expected output is as follows:'
  id: totrans-682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期输出如下：
- en: '[PRE255]'
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE255]'
- en: 'Activity 10.03: Measuring Elapsed Time'
  id: totrans-684
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 10.03：测量经过的时间
- en: '**Solution:**'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'Create a file called `Chapter_10_Activity_3.go` and initialize it in the following
    way:'
  id: totrans-686
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `Chapter_10_Activity_3.go` 的文件，并按以下方式初始化：
- en: '[PRE256]'
  id: totrans-687
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE256]'
- en: 'Capture the `start` time of execution in a variable, and sleep for 2 seconds:'
  id: totrans-688
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在变量中捕获执行的开始时间，并暂停 2 秒：
- en: '[PRE257]'
  id: totrans-689
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE257]'
- en: 'Capture the end of execution in a variable and calculate the length:'
  id: totrans-690
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在变量中捕获执行的结束时间并计算长度：
- en: '[PRE258]'
  id: totrans-691
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE258]'
- en: 'Print out how long it took to execute `sleep`:'
  id: totrans-692
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印 `sleep` 执行所需的时间：
- en: '[PRE259]'
  id: totrans-693
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE259]'
- en: 'The expected output is as follows:'
  id: totrans-694
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期输出如下：
- en: '[PRE260]'
  id: totrans-695
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE260]'
- en: 'Activity 10.04: Calculating the Future Date and Time'
  id: totrans-696
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 10.04：计算未来的日期和时间
- en: '**Solution:**'
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'Create a file called `Chapter_10_Activity_4.go` and initialize it in the following
    way:'
  id: totrans-698
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `Chapter_10_Activity_4.go` 的文件，并按以下方式初始化：
- en: '[PRE261]'
  id: totrans-699
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE261]'
- en: 'Capture and print the `current` time:'
  id: totrans-700
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 捕获并打印 `当前` 时间：
- en: '[PRE262]'
  id: totrans-701
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE262]'
- en: 'Calculate the specified duration and create a variable called `Future`:'
  id: totrans-702
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算指定时长并创建一个名为 `Future` 的变量：
- en: '[PRE263]'
  id: totrans-703
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE263]'
- en: 'Print out the time value of `Future` in ANSIC format:'
  id: totrans-704
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以 ANSIC 格式打印 `Future` 的时间值：
- en: '[PRE264]'
  id: totrans-705
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE264]'
- en: 'The expected output is as follows:'
  id: totrans-706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期输出如下：
- en: '[PRE265]'
  id: totrans-707
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE265]'
- en: 'Activity 10.05: Printing the Local Time in Different Time Zones'
  id: totrans-708
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 10.05：在不同时区打印本地时间
- en: '**Solution:**'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'Create a file called `Chapter_10_Activity_5.go` and initialize it the following
    way:'
  id: totrans-710
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `Chapter_10_Activity_5.go` 的文件，并按以下方式初始化：
- en: '[PRE266]'
  id: totrans-711
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE266]'
- en: 'Capture the following values: `Current`, `NYtime`, and `LA`:'
  id: totrans-712
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 捕获以下值：`当前`、`纽约时间`和`洛杉矶时间`：
- en: '[PRE267]'
  id: totrans-713
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE267]'
- en: 'Print out the values with the following format:'
  id: totrans-714
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以以下格式打印值：
- en: '[PRE268]'
  id: totrans-715
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE268]'
- en: 'The expected output is as follows:'
  id: totrans-716
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期输出如下：
- en: '[PRE269]'
  id: totrans-717
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE269]'
- en: 'Chapter 11: Encoding and Decoding (JSON)'
  id: totrans-718
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章：编码和解码（JSON）
- en: 'Activity 11.01: Mimicking a Customer Order Using JSON'
  id: totrans-719
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 11.01：使用 JSON 模拟客户订单
- en: '**Solution:**'
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'All directories and files created need to be created within your `$GOPATH`:'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 所有创建的目录和文件都需要在您的 `$GOPATH` 内创建：
- en: Create a directory called `Activity11.01` within a directory called `Chapter11`.
  id: totrans-722
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名为 `Chapter11` 的目录内创建一个名为 `Activity11.01` 的目录。
- en: Create a file called `main.go` inside `Chapter11/Activity11.01`.
  id: totrans-723
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Chapter11/Activity11.01` 内创建一个名为 `main.go` 的文件。
- en: Using Visual Studio Code, open the newly created `main.go` file.
  id: totrans-724
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Visual Studio Code 打开新创建的 `main.go` 文件。
- en: 'Add the following package name and import statements:'
  id: totrans-725
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下包名和导入语句：
- en: '[PRE270]'
  id: totrans-726
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE270]'
- en: 'Add the following `customer` `struct` with the JSON tags set accordingly:'
  id: totrans-727
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下带有相应 JSON 标签的 `customer` `struct`：
- en: '[PRE271]'
  id: totrans-728
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE271]'
- en: 'Add the following `order` `struct` with the JSON tags set accordingly:'
  id: totrans-729
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下带有相应 JSON 标签的 `order` `struct`：
- en: '[PRE272]'
  id: totrans-730
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE272]'
- en: 'Add the following `item` `struct` with the JSON tags set accordingly:'
  id: totrans-731
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下带有相应 JSON 标签的 `item` `struct`：
- en: '[PRE273]'
  id: totrans-732
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE273]'
- en: 'Add the following `address` `struct` with the JSON tags set accordingly:'
  id: totrans-733
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下带有相应 JSON 标签的 `address` `struct`：
- en: '[PRE274]'
  id: totrans-734
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE274]'
- en: 'Create a method on the customer type called `Total()`. This method will calculate
    the `TotalPrice` of the `PurchaseOrder` for the customer type. The calculation
    is, for each item, `Quantity * price`:'
  id: totrans-735
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户类型上创建一个名为 `Total()` 的方法。此方法将计算客户类型 `PurchaseOrder` 的 `TotalPrice`。计算方式为，对于每个项目，`数量
    * 价格`：
- en: '[PRE275]'
  id: totrans-736
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE275]'
- en: 'Add a `main()` function with `jsonData []byte`:'
  id: totrans-737
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个带有 `jsonData []byte` 的 `main()` 函数：
- en: '[PRE276]'
  id: totrans-738
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE276]'
- en: 'Next, we need to validate that `jsonData` is valid JSON. If it is not, print
    a message and exit the application:'
  id: totrans-739
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要验证 `jsonData` 是否是有效的 JSON。如果不是，打印一条消息并退出应用程序：
- en: '[PRE277]'
  id: totrans-740
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE277]'
- en: 'Declare a variable of the customer type:'
  id: totrans-741
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个客户类型的变量：
- en: '[PRE278]'
  id: totrans-742
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE278]'
- en: 'Unmarshal `jsonData` into the customer variable. Check for any errors, and
    if there is an error, print the error and exit the application:'
  id: totrans-743
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `jsonData` 解码到客户变量中。检查是否有错误，如果有错误，打印错误并退出应用程序：
- en: '[PRE279]'
  id: totrans-744
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE279]'
- en: 'Declare a variable of the `item{}` type and set all the fields:'
  id: totrans-745
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个 `item{}` 类型的变量并设置所有字段：
- en: '[PRE280]'
  id: totrans-746
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE280]'
- en: 'Declare another variable of the `item{}` type and set all the fields, except
    for the `Description` field:'
  id: totrans-747
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明另一个 `item{}` 类型的变量并设置所有字段，除了 `Description` 字段：
- en: '[PRE281]'
  id: totrans-748
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE281]'
- en: 'Add the two newly created items to the customer order''s `OrderDetail`:'
  id: totrans-749
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个新创建的项目添加到客户订单的 `OrderDetail` 中：
- en: '[PRE282]'
  id: totrans-750
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE282]'
- en: 'Now that we have all of our items, we can now calculate the price by calling
    the `c.Total()` function:'
  id: totrans-751
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了所有项目，我们可以通过调用 `c.Total()` 函数来计算价格：
- en: '[PRE283]'
  id: totrans-752
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE283]'
- en: 'Set some `PurchaseOrder` fields:'
  id: totrans-753
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一些 `PurchaseOrder` 字段：
- en: '[PRE284]'
  id: totrans-754
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE284]'
- en: 'Marshal the customer into JSON. Properly set the indention so that the JSON
    can be easily read. Check for any errors and if there is an error, print the message,
    and then exit the application:'
  id: totrans-755
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将客户信息序列化为JSON。正确设置缩进，以便可以轻松阅读JSON。检查任何错误，如果有错误，打印消息，然后退出应用程序：
- en: '[PRE285]'
  id: totrans-756
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE285]'
- en: 'Print the JSON:'
  id: totrans-757
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印JSON：
- en: '[PRE286]'
  id: totrans-758
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE286]'
- en: 'Build the program by running `go build` at the command line:'
  id: totrans-759
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在命令行中运行`go build`来构建程序：
- en: '[PRE287]'
  id: totrans-760
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE287]'
- en: Run the executable by typing in the name of the executable and then hitting
    *Enter*.
  id: totrans-761
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入可执行文件名并按*Enter*键来运行可执行文件。
- en: 'The results are as follows:'
  id: totrans-762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Figure 11.22: Customer order printout'
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.22：客户订单打印输出'
- en: '](img/B14177_11_22.jpg)'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14177_11_22.jpg)'
- en: 'Figure 11.22: Customer order printout'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.22：客户订单打印输出
- en: 'Chapter 12: Files and Systems'
  id: totrans-766
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章：文件和系统
- en: 'Activity 12.01: Parsing Bank Transaction Files'
  id: totrans-767
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动十二点零一：解析银行交易文件
- en: '**Solution:**'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: All directories and files created should be inside your `$GOPATH`.
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: 所有创建的目录和文件都应该在您的`$GOPATH`内部。
- en: Create a `Chapter12/Activity12.01/` directory.
  id: totrans-770
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`Chapter12/Activity12.01/`目录。
- en: Inside `Chapter12/Activity12.01/`, create a `main.go` file.
  id: totrans-771
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Chapter12/Activity12.01/`内部创建一个`main.go`文件。
- en: 'Add the following code to the `main.go` file:'
  id: totrans-772
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`main.go`文件中：
- en: '[PRE288]'
  id: totrans-773
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE288]'
- en: 'Create budget category types for fuel, food, mortgage, repairs, insurance,
    utilities, and retirement:'
  id: totrans-774
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为燃料、食物、抵押贷款、维修、保险、公用事业和退休创建预算类别类型：
- en: '[PRE289]'
  id: totrans-775
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE289]'
- en: 'Create our custom error type for when the budget category cannot be found:'
  id: totrans-776
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建我们的自定义错误类型，当找不到预算类别时使用：
- en: '[PRE290]'
  id: totrans-777
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE290]'
- en: 'Create our `transaction` `struct` that will hold the data from our bank''s
    transaction file:'
  id: totrans-778
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建我们的`transaction` `struct`，它将存储我们银行交易文件中的数据：
- en: '[PRE291]'
  id: totrans-779
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE291]'
- en: 'Inside the `main()` function, we need to create two flags. The first flag to
    create is `bankFile`. The `bankFile` variable is the CSV transaction file. Define
    our flags for the `bankFile` variable. The flag type is a string. The CLI will
    have `-c`; this is used to store the location of the CSV `bankFile`. The default
    value is an empty string, so if the flag does not get set, the value for it will
    be an empty string. The `bankFile` variable is the address that stores the value
    of the flag:'
  id: totrans-780
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main()`函数内部，我们需要创建两个标志。第一个要创建的标志是`bankFile`。`bankFile`变量是CSV交易文件。为`bankFile`变量定义我们的标志。标志类型是字符串。CLI将使用`-c`；这是用于存储CSV
    `bankFile`位置的。默认值是空字符串，因此如果标志没有被设置，它的值将是空字符串。`bankFile`变量是存储标志值的地址：
- en: '[PRE292]'
  id: totrans-781
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE292]'
- en: 'The next flag will be for our `logFile`. This is the file that will be used
    for logging errors. Define our flags for the log file. The flag type is a string.
    The CLI will have `-l`; this is used to store the location of the `logFile` variable.
    The default value is an empty string, so if the flag does not get set, the value
    for it will be an empty string. The `logFile` variable is the address that stores
    the value of the flag:'
  id: totrans-782
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个标志将是我们的`logFile`。这是用于记录错误的文件。定义我们的日志文件标志。标志类型是字符串。CLI将使用`-l`；这是用于存储`logFile`变量位置的。默认值是空字符串，因此如果标志没有被设置，它的值将是空字符串。`logFile`变量是存储标志值的地址：
- en: '[PRE293]'
  id: totrans-783
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE293]'
- en: 'After defining the flags, you must call `flag.Parse()` to parse the command
    line into the defined flags. Calling `flag.Parse()` places the argument for `-value`
    into `*bankFile` and `*logFile`. Once you have called `flag.Parse()`, the flags
    will be available:'
  id: totrans-784
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在定义标志后，您必须调用`flag.Parse()`来将命令行解析到定义的标志中。调用`flag.Parse()`将`-value`的参数放入`*bankFile`和`*logFile`。一旦您调用了`flag.Parse()`，标志将可用：
- en: '[PRE294]'
  id: totrans-785
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE294]'
- en: 'Our `bankFile` variable is required, so we need to ensure it was provided.
    When we define our flags, we set the default value to an empty string. If the
    value of `*bankFile` is an empty string, we know that it was not properly set.
    If `*bankFile` was not provided, we print a message that the field is required
    along with the `usage` statement. Then, exit the program:'
  id: totrans-786
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的`bankFile`变量是必需的，因此我们需要确保它已被提供。当我们定义我们的标志时，我们将默认值设置为空字符串。如果`*bankFile`的值是空字符串，我们知道它没有被正确设置。如果没有提供`*bankFile`，我们打印一条消息，说明该字段是必需的，并带有`usage`语句。然后，退出程序：
- en: '[PRE295]'
  id: totrans-787
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE295]'
- en: 'If the CSV file was not provided, you should get the following message:![Figure
    12.23: The csvFile is required message'
  id: totrans-788
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有提供CSV文件，你应该得到以下消息：![图12.23：csvFile是必需的消息
- en: '](img/B14177_12_23.jpg)'
  id: totrans-789
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B14177_12_23.jpg)'
- en: 'Figure 12.23: The csvFile is required message'
  id: totrans-790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图12.23：csvFile是必需的消息
- en: 'The `logfile` variable is required and we need to ensure it was provided. Implement
    the same code you performed in the previous step except for `logfile`:'
  id: totrans-791
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`logfile`变量是必需的，我们需要确保它已被提供。实现与上一步相同的代码，除了`logfile`：'
- en: '[PRE296]'
  id: totrans-792
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE296]'
- en: Implement code to check and see whether the `bankFile` variable exists. We are
    calling `os.Stat()` on the `*bankFile` file to check to see whether it exists.
    The `os.Stat()` method will return a `FileInfo` if the file exists. If not, `FileInfo`
    will be `nil` and an error will be returned instead.
  id: totrans-793
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现代码以检查`bankFile`变量是否存在。我们正在对`*bankFile`文件调用`os.Stat()`来检查它是否存在。如果文件存在，`os.Stat()`方法将返回一个`FileInfo`。如果不存在，`FileInfo`将为`nil`，并返回错误。
- en: 'The `os.Stat()` method can return multiple errors. We must inspect the error
    to determine whether the error is due to the file not being there. The standard
    library provides `os.IsNotExist(error)`, which can be used to check to see whether
    the error is the result of the file not existing:'
  id: totrans-794
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`os.Stat()`方法可以返回多个错误。我们必须检查错误以确定错误是否是由于文件不存在。标准库提供了`os.IsNotExist(error)`，可以用来检查错误是否是由于文件不存在：'
- en: '[PRE297]'
  id: totrans-795
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE297]'
- en: 'Likewise, check to see whether the log file exists. If it does, we need to
    delete it:'
  id: totrans-796
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，检查日志文件是否存在。如果存在，我们需要删除它：
- en: '[PRE298]'
  id: totrans-797
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE298]'
- en: Next, open the `bankFile` variable. Upon opening `bankFile`, the `os.Open` function
    returns an `*os.File` type that satisfies the `io.Reader` interface, which will
    allow us to pass it to the next function.
  id: totrans-798
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开`bankFile`变量。在打开`bankFile`时，`os.Open`函数返回一个满足`io.Reader`接口的`*os.File`类型，这将允许我们将其传递给下一个函数。
- en: 'As always, check to see whether an error was returned. If so, display the error
    and exit the program:'
  id: totrans-799
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 和往常一样，检查是否有错误返回。如果有，显示错误并退出程序：
- en: '[PRE299]'
  id: totrans-800
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE299]'
- en: 'We will call the `parseBankFile()` function; this is where the bulk of the
    work occurs. It will transform the CSV file into our transaction struct. We then
    need to iterate over the slice of transactions and print the data from the transaction:'
  id: totrans-801
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将调用`parseBankFile()`函数；大部分工作都在这里完成。它将CSV文件转换为我们的交易结构体。然后我们需要遍历交易切片并打印交易数据：
- en: '[PRE300]'
  id: totrans-802
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE300]'
- en: 'Create a function called `parseBankFile(bankTransaction io.Reader, logFile
    string) []transaction`:'
  id: totrans-803
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`parseBankFile(bankTransaction io.Reader, logFile string) []transaction`的函数：
- en: '[PRE301]'
  id: totrans-804
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE301]'
- en: Create a reader for the CSV data. The `NewReader` method takes an argument of
    `io.Reader` and returns a type of `Reader` that is used to read the CSV data.
  id: totrans-805
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为CSV数据创建一个读取器。`NewReader`方法接受一个`io.Reader`类型的参数，并返回一个用于读取CSV数据的`Reader`类型。
- en: Create a variable of type slice of `transaction`.
  id: totrans-806
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个类型为切片的`transaction`变量。
- en: 'Create a variable to detect the header of the CSV file:'
  id: totrans-807
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个变量来检测CSV文件的标题：
- en: '[PRE302]'
  id: totrans-808
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE302]'
- en: Implement code that reads each record in one at a time in an infinite loop.
  id: totrans-809
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现代码，在无限循环中逐条读取每个记录。
- en: After each record we read, we check first to see whether it is the end of the
    file (`io.EOF`). We need to perform this check to allow us to break out of our
    infinite loop when it reaches the EOF.
  id: totrans-810
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在读取每条记录后，我们首先检查它是否是文件末尾（`io.EOF`）。我们需要执行此检查，以便在达到EOF时能够跳出无限循环。
- en: 'The `r.Read()` method reads one record; this is a slice of fields from the
    `r` variable. It returns that record as `[]string`:'
  id: totrans-811
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`r.Read()`方法读取一条记录；这是从`r`变量中获取的字段切片。它以`[]string`的形式返回该记录：'
- en: '[PRE303]'
  id: totrans-812
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE303]'
- en: 'We will use the `header` variable as a flag. When header fields are provided,
    they are typically the first row of the file. We do not need to process the column
    headers:'
  id: totrans-813
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用`header`变量作为标志。当提供标题字段时，它们通常是文件的第一行。我们不需要处理列标题：
- en: '[PRE304]'
  id: totrans-814
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE304]'
- en: 'Currently, our first loop iterates over the CSV file, but we also need a loop
    that iterates over each column in the record. The record is a slice of fields.
    `idx` is the position of the field in the slice:'
  id: totrans-815
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前，我们的第一个循环遍历CSV文件，但我们还需要一个循环来遍历记录中的每一列。记录是一个字段切片。`idx`是字段在切片中的位置：
- en: '[PRE305]'
  id: totrans-816
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE305]'
- en: 'We will use a `switch` statement on the `idx` (index) of the slice to identify
    the data that is stored at that position:'
  id: totrans-817
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在切片的`idx`（索引）上使用`switch`语句来识别存储在该位置的数据：
- en: '[PRE306]'
  id: totrans-818
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE306]'
- en: Data from the CSV file is in string format; we need to perform various conversions
    for the fields in the CSV file. The first field is the ID. We need to ensure that
    there are no trailing spaces in the field.
  id: totrans-819
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CSV文件中的数据是字符串格式；我们需要对CSV文件中的字段进行各种转换。第一个字段是ID。我们需要确保字段中没有尾随空格。
- en: 'We need to convert the field from a string to an `int`, since our struct is
    of the integer type for the `id` field:'
  id: totrans-820
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要将字段从字符串转换为`int`，因为我们的结构体中`id`字段的数据类型是整数：
- en: '[PRE307]'
  id: totrans-821
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE307]'
- en: 'The second index value is `1`. This column contains the data for the `payee`:'
  id: totrans-822
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个索引值是`1`。该列包含`payee`的数据：
- en: '[PRE308]'
  id: totrans-823
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE308]'
- en: The third index value is `2`. This column contains the data for the spent column
    in the `bankFile` file.
  id: totrans-824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第三个索引值是`2`。该列包含`bankFile`文件中支出列的数据。
- en: '`spent` is of the `float` type, so we are converting the `string` type from
    the `spent` column to a `float` type:'
  id: totrans-825
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`spent`是`float`类型，因此我们将`spent`列的`string`类型转换为`float`类型：'
- en: '[PRE309]'
  id: totrans-826
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE309]'
- en: The third index value is `3`. This column contains the data for the category
    provided by the bank.
  id: totrans-827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第三个索引值是`3`。此列包含银行提供的类别数据。
- en: We need to convert the CSV file category column to our `budgetCategory` type.
  id: totrans-828
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要将CSV文件的类别列转换为我们的`budgetCategory`类型。
- en: Inside the case statement for the category, we check for any errors returned
    from the `convertToBudgetCategory` function.
  id: totrans-829
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类别`case`语句中，我们检查`convertToBudgetCategory`函数返回的任何错误。
- en: 'If there is an error, we do not want to stop processing the CSV bank file,
    so we write the error to a log via the `writeErrorToLog` function:'
  id: totrans-830
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果有错误，我们不想停止处理CSV银行文件，因此我们通过`writeErrorToLog`函数将错误写入日志：
- en: '[PRE310]'
  id: totrans-831
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE310]'
- en: 'We are at the end of the loop for the fields in the record. We now need to
    append our transaction to the slice of transactions:'
  id: totrans-832
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经到达了记录中字段的循环末尾。现在我们需要将我们的交易添加到交易切片中：
- en: '[PRE311]'
  id: totrans-833
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '`header` was `true` at the start of the function; we will set it to `false`,
    which indicates that in the rest of the CSV file, we will be parsing the data
    and not the `header` information:'
  id: totrans-834
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`header`在函数开始时为`true`；我们将将其设置为`false`，这表示在CSV文件的其余部分，我们将解析数据而不是`header`信息：'
- en: '[PRE312]'
  id: totrans-835
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE312]'
- en: 'We have completed parsing the CSV file. We now need to return the slice of
    transactions:'
  id: totrans-836
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经完成了CSV文件的解析。现在我们需要返回交易切片：
- en: '[PRE313]'
  id: totrans-837
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE313]'
- en: Create a function named `convertToBudgetCategory(value string)(budgetCategory)`.
    This function is responsible for mapping the bank categories to our defined categories.
    If a category is not found, it will return the `ErrInvalidBudgetCategory` error.
  id: totrans-838
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`convertToBudgetCategory(value string)(budgetCategory)`的函数。此函数负责将银行类别映射到我们定义的类别。如果找不到类别，它将返回`ErrInvalidBudgetCategory`错误。
- en: 'Use a `switch` statement that evaluates each value. When it matches, return
    the respective `budgetCategory` type:'
  id: totrans-839
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用一个`switch`语句评估每个值。当它匹配时，返回相应的`budgetCategory`类型：
- en: '[PRE314]'
  id: totrans-840
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE314]'
- en: Create a `writeErrorToLog(msg string, err error, data string, logFile string)
    error` function. This function will write a message to the log file.
  id: totrans-841
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`writeErrorToLog(msg string, err error, data string, logFile string) error`函数。此函数将消息写入日志文件。
- en: 'Then, it will need to format the data about the error to include the `msg`,
    `error`, and the `data`:'
  id: totrans-842
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，它需要格式化有关错误的详细信息，包括`msg`、`error`和`data`：
- en: '[PRE315]'
  id: totrans-843
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE315]'
- en: 'Run the program:'
  id: totrans-844
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序：
- en: '[PRE316]'
  id: totrans-845
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE316]'
- en: 'Here is a possible output from the application:'
  id: totrans-846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是应用程序的一个可能的输出：
- en: '![Figure 12.24: Activity output'
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.24：活动输出'
- en: '](img/B14177_12_24.jpg)'
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B14177_12_24.jpg](img/B14177_12_24.jpg)'
- en: 'Figure 12.24: Activity output'
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.24：活动输出
- en: 'The possible contents of the `log.log` file are as follows:'
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: '`log.log`文件的可能内容如下：'
- en: '![Figure 12.25: The log.log content'
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.25：log.log内容'
- en: '](img/B14177_12_25.jpg)'
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B14177_12_25.jpg](img/B14177_12_25.jpg)'
- en: 'Figure 12.25: The log.log content'
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.25：log.log内容
- en: 'Chapter 13: SQL and Databases'
  id: totrans-854
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章：SQL和数据库
- en: 'Activity 13.1: Holding User Data in a Table'
  id: totrans-855
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动13.1：在表中存储用户数据
- en: '**Solution:**'
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'Initialize your script with the appropriate imports. Let''s call it `main.go`.
    Prepare an empty `main()` function:'
  id: totrans-857
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用适当的导入初始化你的脚本。让我们称它为`main.go`。准备一个空的`main()`函数：
- en: '[PRE317]'
  id: totrans-858
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE317]'
- en: 'Let''s define the `struct` that will hold the users:'
  id: totrans-859
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们定义一个将保存用户的`struct`：
- en: '[PRE318]'
  id: totrans-860
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE318]'
- en: 'Now the time has come to create two users:'
  id: totrans-861
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是创建两个用户的时候了：
- en: '[PRE319]'
  id: totrans-862
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE319]'
- en: 'Let''s open the connection to our `Postgres` server:'
  id: totrans-863
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们打开到我们的`Postgres`服务器的连接：
- en: '[PRE320]'
  id: totrans-864
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE320]'
- en: 'We should use the `Ping()` function to see whether the connectivity is OK:'
  id: totrans-865
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们应该使用`Ping()`函数来检查连接是否正常：
- en: '[PRE321]'
  id: totrans-866
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE321]'
- en: 'Now we can create a multiline string for our table:'
  id: totrans-867
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以为我们的表创建一个多行字符串：
- en: '[PRE322]'
  id: totrans-868
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE322]'
- en: 'Once the string is ready, we should create our table:'
  id: totrans-869
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦字符串准备就绪，我们应该创建我们的表：
- en: '[PRE323]'
  id: totrans-870
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE323]'
- en: 'With the `users` struct, we can construct a `for` loop to insert the users:'
  id: totrans-871
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`users`结构，我们可以构造一个`for`循环来插入用户：
- en: '[PRE324]'
  id: totrans-872
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE324]'
- en: 'Now with the users in the database, we can update the appropriate field:'
  id: totrans-873
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在有了数据库中的用户，我们可以更新相应的字段：
- en: '[PRE325]'
  id: totrans-874
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE325]'
- en: 'The last task is to remove the `user` with `ID=2`:'
  id: totrans-875
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后的任务是删除`ID=2`的`user`：
- en: '[PRE326]'
  id: totrans-876
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE326]'
- en: 'Since our job is done, we should close the connection to the database:'
  id: totrans-877
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们的工作已经完成，我们应该关闭到数据库的连接：
- en: '[PRE327]'
  id: totrans-878
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE327]'
- en: 'Upon successful completion, you should see the following output:'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: 成功完成后，你应该看到以下输出：
- en: '![Figure 13.10: Possible output'
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.10：可能的输出'
- en: '](img/B14177_13_10.jpg)'
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B14177_13_10.jpg](img/B14177_13_10.jpg)'
- en: 'Figure 13.10: Possible output'
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.10：可能的输出
- en: 'Activity 13.2: Finding Messages of Specific Users'
  id: totrans-883
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动13.2：查找特定用户的消息
- en: '**Solution:**'
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'Initialize your script with the appropriate imports. Let''s call it `main.go`.
    Prepare an empty `main()` function:'
  id: totrans-885
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用适当的导入初始化您的脚本。让我们称它为`main.go`。准备一个空的`main()`函数：
- en: '[PRE328]'
  id: totrans-886
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE328]'
- en: 'Let''s define a `struct` that will hold the messages we want to insert:'
  id: totrans-887
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们定义一个`struct`，它将保存我们想要插入的消息：
- en: '[PRE329]'
  id: totrans-888
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE329]'
- en: 'We will need four variables that will be used later:'
  id: totrans-889
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要四个变量，这些变量将在以后使用：
- en: '[PRE330]'
  id: totrans-890
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE330]'
- en: 'Create a `reader` function that will acquire the input from the user when the
    time comes:'
  id: totrans-891
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`reader`函数，当需要时将从用户那里获取输入：
- en: '[PRE331]'
  id: totrans-892
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE331]'
- en: 'Now, create the actual messages:'
  id: totrans-893
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建实际的消息：
- en: '[PRE332]'
  id: totrans-894
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE332]'
- en: 'Connect to the database:'
  id: totrans-895
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接到数据库：
- en: '[PRE333]'
  id: totrans-896
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE333]'
- en: 'Check the connectivity to the database:'
  id: totrans-897
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查数据库的连接性：
- en: '[PRE334]'
  id: totrans-898
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE334]'
- en: 'If the connection is fine, we can craft our table creation script:'
  id: totrans-899
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果连接正常，我们可以编写我们的表创建脚本：
- en: '[PRE335]'
  id: totrans-900
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE335]'
- en: 'Create the table to hold the messages:'
  id: totrans-901
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建用于存储消息的表：
- en: '[PRE336]'
  id: totrans-902
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE336]'
- en: 'Once the table is ready, insert the messages:'
  id: totrans-903
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦表就绪，插入消息：
- en: '[PRE337]'
  id: totrans-904
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE337]'
- en: 'Now that you have messages, you can ask for the user''s name to look for when
    filtering the messages:'
  id: totrans-905
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您有了消息，您可以询问用户想要在过滤消息时查找的名称：
- en: '[PRE338]'
  id: totrans-906
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE338]'
- en: 'The following query will give us the desired result:'
  id: totrans-907
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下查询将给出我们想要的结果：
- en: '[PRE339]'
  id: totrans-908
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE339]'
- en: 'Now execute the filter query and check how many records were returned:'
  id: totrans-909
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在执行过滤查询并检查返回了多少条记录：
- en: '[PRE340]'
  id: totrans-910
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE340]'
- en: 'Based on the number of results, print the appropriate messages:'
  id: totrans-911
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据结果数量，打印适当的消息：
- en: '[PRE341]'
  id: totrans-912
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE341]'
- en: 'Finally, close the database connection:'
  id: totrans-913
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，关闭数据库连接：
- en: '[PRE342]'
  id: totrans-914
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE342]'
- en: 'This should be the output, depending on how you fill your database with usernames
    and messages:'
  id: totrans-915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该是输出，具体取决于您如何用用户名和消息填充数据库：
- en: '![Figure 13.11: Expected output'
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.11：预期输出'
- en: '](img/B14177_13_09.jpg)'
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14177_13_09.jpg)'
- en: 'Figure 13.11: Expected output'
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.11：预期输出
- en: 'Chapter 14: Using the Go HTTP Client'
  id: totrans-919
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章：使用Go HTTP客户端
- en: 'Activity 14.01: Requesting Data from a Web Server and Processing the Response'
  id: totrans-920
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动14.01：从Web服务器请求数据并处理响应
- en: '**Solution:**'
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'Add the necessary imports:'
  id: totrans-922
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加必要的导入：
- en: '[PRE343]'
  id: totrans-923
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE343]'
- en: Here, `encoding/json` is used to parse the response and marshal it into the
    structs. `fmt` is used to print out the counts and `io/ioutil` is used to read
    in the response body. `log` is used if something goes wrong to output the error.
    `net/http` is what we use to do the GET request.
  id: totrans-924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，使用`encoding/json`解析响应并将其`Marshal`到`struct`中。使用`fmt`打印计数，使用`io/ioutil`读取响应正文。如果出现问题，使用`log`输出错误。`net/http`是我们用来进行GET请求的。
- en: 'Create structs to parse the data:'
  id: totrans-925
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建解析数据的`struct`：
- en: '[PRE344]'
  id: totrans-926
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE344]'
- en: 'Create a function called `getDataAndParseResponse()` that returns two integers:'
  id: totrans-927
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`getDataAndParseResponse`的函数，它返回两个整数：
- en: '[PRE345]'
  id: totrans-928
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE345]'
- en: 'Send a `GET` request to the server:'
  id: totrans-929
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向服务器发送`GET`请求：
- en: '[PRE346]'
  id: totrans-930
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE346]'
- en: 'Parse the response data:'
  id: totrans-931
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解析响应数据：
- en: '[PRE347]'
  id: totrans-932
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE347]'
- en: 'Loop through the names and count the occurrences of each:'
  id: totrans-933
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历名称并计算每个名称的出现次数：
- en: '[PRE348]'
  id: totrans-934
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE348]'
- en: 'Return the counts:'
  id: totrans-935
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回计数：
- en: '[PRE349]'
  id: totrans-936
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE349]'
- en: 'Print the counts:'
  id: totrans-937
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印计数：
- en: '[PRE350]'
  id: totrans-938
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE350]'
- en: 'Here is the code for the server of this activity:'
  id: totrans-939
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是此活动的服务器代码：
- en: '[PRE351]'
  id: totrans-940
  prefs: []
  type: TYPE_PRE
  zh: '[PRE351]'
- en: 'Add this code to the `server.go` file you created and run it. This will create
    a server you can connect your client to. Once you have created it, you should
    be able to run it and see a similar output to this:'
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: 将此代码添加到您创建的`server.go`文件中并运行它。这将创建一个您可以连接客户端的服务器。一旦创建，您应该能够运行它并看到与此类似的输出：
- en: '![Figure 14.10: Possible output'
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.10：可能的输出'
- en: '](img/B14177_14_10.jpg)'
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14177_14_10.jpg)'
- en: 'Figure 14.10: Possible output'
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.10：可能的输出
- en: 'Activity 14.02: Sending Data to a Web Server and Checking Whether the Data
    Was Received Using POST and GET'
  id: totrans-945
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动14.02：使用POST和GET向Web服务器发送数据并检查数据是否已接收
- en: '**Solution:**'
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'Add all the required imports:'
  id: totrans-947
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加所有必需的导入：
- en: '[PRE352]'
  id: totrans-948
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE352]'
- en: 'Create the structs needed to send requests and receive responses:'
  id: totrans-949
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建发送请求和接收响应所需的`struct`：
- en: '[PRE353]'
  id: totrans-950
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE353]'
- en: 'Create the `addNameAndParseResponse` function:'
  id: totrans-951
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`addNameAndParseResponse`函数：
- en: '[PRE354]'
  id: totrans-952
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE354]'
- en: 'Create a `name` struct, `Marshal` it to `json`, and POST it to the URL:'
  id: totrans-953
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`name`结构体，将其`Marshal`为`json`，然后将其POST到URL：
- en: '[PRE355]'
  id: totrans-954
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE355]'
- en: 'Parse the response from the POST request:'
  id: totrans-955
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解析POST请求的响应：
- en: '[PRE356]'
  id: totrans-956
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE356]'
- en: 'Check that the response returns OK:'
  id: totrans-957
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查响应是否返回OK：
- en: '[PRE357]'
  id: totrans-958
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE357]'
- en: 'Create the `getDataAndParseResponse` function:'
  id: totrans-959
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`getDataAndParseResponse`函数：
- en: '[PRE358]'
  id: totrans-960
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE358]'
- en: 'Send a GET request to the server and read the body:'
  id: totrans-961
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向服务器发送GET请求并读取正文：
- en: '[PRE359]'
  id: totrans-962
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE359]'
- en: 'Unmarshal the response into the `Names` struct and return the `names` array:'
  id: totrans-963
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将响应解包到`Names`结构体中并返回`names`数组：
- en: '[PRE360]'
  id: totrans-964
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE360]'
- en: 'Create a `main` function to add names, request the names from the server, and
    print them out:'
  id: totrans-965
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`main`函数以添加名称，从服务器请求名称并打印它们：
- en: '[PRE361]'
  id: totrans-966
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE361]'
- en: 'The server code is as follows:'
  id: totrans-967
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 服务器代码如下：
- en: '[PRE362]'
  id: totrans-968
  prefs: []
  type: TYPE_PRE
  zh: '[PRE362]'
- en: 'Start the server and run your client. The client''s output should be similar
    to the following:'
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
  zh: 启动服务器并运行您的客户端。客户端的输出应类似于以下内容：
- en: '![Figure 14.11: Possible output'
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.11：可能的输出'
- en: '](img/B14177_14_11.jpg)'
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.40：运行服务器第二次时的浏览器输出](img/B14177_15_40.jpg)'
- en: 'Figure 14.11: Possible output'
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.11：可能的输出
- en: 'Chapter 15: HTTP Servers'
  id: totrans-973
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第15章：HTTP服务器
- en: 'Activity 15.01: Adding a Page Counter to an HTML Page'
  id: totrans-974
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动十五.01：向HTML页面添加页面计数器
- en: '**Solution:**'
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'First, we import the necessary packages:'
  id: totrans-976
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们导入必要的包：
- en: '[PRE363]'
  id: totrans-977
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE363]'
- en: Here, "`net/http`" is the usual package for http communication, "`log`" is the
    package for logging (in this case to the standard output), and "`fmt`" is the
    package used to format input and output. This can be used to send messages to
    the standard output, but we use it here just as a message formatter.
  id: totrans-978
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，"`net/http`"是http通信的常用包，"`log`"是用于记录的包（在这种情况下是输出到标准输出），而"`fmt`"是用于格式化输入和输出的包。这可以用来向标准输出发送消息，但我们在这里只是将其用作消息格式化器。
- en: 'We define here a type called `PageWithCounter`, which represents our handler,
    can count visits, and has a heading and some content for the page. The counter
    will increase every time the page loads:'
  id: totrans-979
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在这里定义了一个名为`PageWithCounter`的类型，它代表我们的处理器，可以计数访问次数，并为页面提供标题和一些内容。每当页面加载时，计数器都会增加：
- en: '[PRE364]'
  id: totrans-980
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE364]'
- en: This is the standard handler function for any struct implementing the `http.Handler`
    interface. Note first the `*` in the method receiver. In this method, we want
    to modify a struct's attribute to increment the counter. In order to do so, we
    need to specify that our method is received by a pointer so that we modify the
    counter permanently. Without the pointer receiver, we would always see `1` in
    the page (you can try to modify this and see for yourself).
  id: totrans-981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是任何实现`http.Handler`接口的结构的标准处理器函数。首先注意方法接收器中的`*`。在这个方法中，我们想要修改一个结构的属性以增加计数器。为了做到这一点，我们需要指定我们的方法是通过指针接收的，这样我们就可以永久地修改计数器。如果没有指针接收器，我们总是会看到页面上的`1`（你可以尝试修改它并亲自看看）。
- en: 'Next, increase the counter, and then we format a string with some HTML tags.
    The `fmt.Sprintf` function injects the variables on the right in the place where
    the placeholders, `%s` and `%d`, are located. The first placeholder expects a
    string, while the second expects a number. After that, we write, as usual, the
    whole string as a slice of bytes in relation to the response:'
  id: totrans-982
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，增加计数器，然后我们使用一些HTML标签格式化一个字符串。`fmt.Sprintf`函数将右边的变量注入到占位符`%s`和`%d`所在的位置。第一个占位符期望一个字符串，而第二个期望一个数字。之后，我们像往常一样，将整个字符串作为一个字节数组写入响应中：
- en: '[PRE365]'
  id: totrans-983
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE365]'
- en: 'Here, we create the `main()` function and we set up three handlers, one with
    the heading `hello world` and some content, while the other two handlers represent
    the first two chapters of your book, so are instantiated accordingly. Note that
    the counter is not explicitly set since any integer will default to `0`, which
    is where our counter starts:'
  id: totrans-984
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们创建`main()`函数，并设置三个处理器，一个带有标题`hello world`和一些内容，而其他两个处理器代表你的书的头两章，因此相应地实例化。请注意，计数器没有明确设置，因为任何整数都将默认为`0`，这是我们的计数器开始的地方：
- en: '[PRE366]'
  id: totrans-985
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE366]'
- en: 'Add the three handlers to the routes, `/`, `/chapter1`, and `/chapter2`, setting
    them to use the handlers created previously. Note that we need to pass references
    with `&` as the `ServeHTTP` method has a pointer receiver:'
  id: totrans-986
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将三个处理器添加到路由中，`/`、`/chapter1`和`/chapter2`，设置它们使用之前创建的处理器。请注意，我们需要使用`&`传递引用，因为`ServeHTTP`方法有一个指针接收器：
- en: '[PRE367]'
  id: totrans-987
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE367]'
- en: 'Now, complete the code listening to a port:'
  id: totrans-988
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，完成监听端口的代码：
- en: '[PRE368]'
  id: totrans-989
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE368]'
- en: 'When you run the server, you should see the following:'
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行服务器时，你应该看到以下内容：
- en: '![Figure 15.39: Output on the browser when you run the server for the first
    time'
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.39：运行服务器第一次时的浏览器输出'
- en: '](img/B14177_15_39.jpg)'
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.41：首次访问chapter1页面时的浏览器输出](img/B14177_15_41.jpg)'
- en: 'Figure 15.39: Output on the browser when you run the server for the first time'
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.39：运行服务器第一次时的浏览器输出
- en: 'If you refresh the page, you should see the following:'
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你刷新页面，你应该看到以下内容：
- en: '![Figure 15.40: Output on the browser when you run the server for the second
    time'
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.40：运行服务器第二次时的浏览器输出'
- en: '](img/B14177_15_40.jpg)'
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.41：首次访问chapter1页面时的浏览器输出](img/B14177_15_41.jpg)'
- en: 'Figure 15.40: Output on the browser when you run the server for the second
    time'
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.40：运行服务器第二次时的浏览器输出
- en: 'Next, navigate to `chapter 1` by typing `localhost:8080/chapter1` in the address
    bar. You should be able to see something along the lines of the following:'
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过在地址栏中输入`localhost:8080/chapter1`来导航到`chapter 1`。你应该能看到以下内容：
- en: '![Figure 15.41: Output on the browser when you visit the chapter1 page for
    the first time'
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.41：首次访问chapter1页面时的浏览器输出'
- en: '](img/B14177_15_41.jpg)'
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.41：运行服务器第二次时的浏览器输出](img/B14177_15_41.jpg)'
- en: 'Figure 15.41: Output on the browser when you visit the chapter1 page for the
    first time'
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.41：首次访问chapter1页面时的浏览器输出
- en: 'Similarly, navigate to *chapter 2*, and you should be able to see the following
    increment in terms of the number of views:'
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，导航到 *第2章*，你应该能看到以下关于查看次数的增加：
- en: '![Figure 15.42: Output on the browser when you visit the chapter2 page for
    the first time'
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.42：当你第一次访问第2章页面时的浏览器输出'
- en: '](img/B14177_15_42.jpg)'
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14177_15_42.jpg)'
- en: 'Figure 15.42: Output on the browser when you visit the chapter2 page for the
    first time'
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.42：当你第一次访问第2章页面时的浏览器输出
- en: 'When you revisit *chapter 1*, you should see an increase in the number of views
    as follows:'
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
  zh: 当你再次访问 *第1章* 时，你应该看到查看次数的增加如下：
- en: '![Figure 15.43: Output on the browser when you visit the chapter1 page for
    the second time'
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.43：当你第二次访问第1章页面时的浏览器输出'
- en: '](img/B14177_15_43.jpg)'
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14177_15_43.jpg)'
- en: 'Figure 15.43: Output on the browser when you visit the chapter1 page for the
    second time'
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.43：当你第二次访问第1章页面时的浏览器输出
- en: 'Activity 15.02: Serving a Request with a JSON Payload'
  id: totrans-1010
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动15.02：使用JSON有效负载服务请求
- en: '**Solution:**'
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'Although your browser may show the JSON document differently, the full solution
    to this activity is as follows:'
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你的浏览器可能以不同的方式显示JSON文档，但此活动的完整解决方案如下：
- en: 'We create the package and add the necessary imports, where "`encoding/json`"
    is the one used for formatting our document as a JSON string:'
  id: totrans-1013
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建一个包并添加必要的导入，其中 "`encoding/json`" 是用于将文档格式化为JSON字符串的：
- en: '[PRE369]'
  id: totrans-1014
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE369]'
- en: 'We create the `PageWithCounter` struct, which looks exactly like the one in
    `Activity 1`. However, some JSON tags need to be added. These tags ensure that
    when converting the struct into a JSON string, the attributes assume a specific
    name. `Content` will become `content`, but `Heading` will become `title` and `Counter`
    will become `views`. Note that all the attributes are now capitalized. As you
    already know, capitalizing the attributes makes them exported, meaning that every
    other package can see, and hence use, them:'
  id: totrans-1015
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个 `PageWithCounter` 结构体，它看起来与 `活动1` 中的完全一样。然而，需要添加一些JSON标签。这些标签确保在将结构体转换为JSON字符串时，属性采用特定的名称。`Content`
    将变为 `content`，但 `Heading` 将变为 `title`，而 `Counter` 将变为 `views`。请注意，所有属性现在都是大写的。正如你所知，大写属性使它们成为导出的，这意味着其他任何包都可以看到并使用它们：
- en: '[PRE370]'
  id: totrans-1016
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE370]'
- en: 'We create the usual handler method to serve the page:'
  id: totrans-1017
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个常用的处理方法来服务页面：
- en: '[PRE371]'
  id: totrans-1018
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE371]'
- en: 'We increase the counter:'
  id: totrans-1019
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们增加计数器：
- en: '[PRE372]'
  id: totrans-1020
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE372]'
- en: 'Now, we marshal the struct itself, `h`, into JSON through the `json.Marshal`
    method, which returns an array of bytes representing the JSON document and an
    error. Here is where the exported attributes are important. The marshaling function
    could not otherwise see the attributes and could not convert them, resulting in
    a JSON string representing an empty document:'
  id: totrans-1021
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们通过 `json.Marshal` 方法将结构体本身 `h` 序列化为JSON，该方法返回表示JSON文档的字节数组和一个错误。在这里，导出属性很重要。如果没有这些属性，序列化函数将无法看到属性并无法转换它们，从而导致表示空文档的JSON字符串：
- en: '[PRE373]'
  id: totrans-1022
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE373]'
- en: 'We check for an error and, in case there is one, we write the code `400` to
    the response header. This means that you would not see the actual page in case
    of a marshaling error, but an error message:'
  id: totrans-1023
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们检查是否有错误，如果有，我们将代码 `400` 写入响应头。这意味着在序列化错误的情况下，你将看不到实际的页面，而是一个错误消息：
- en: '[PRE374]'
  id: totrans-1024
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE374]'
- en: 'Finally, if there is no error, we write the JSON-encoded struct to the response
    writer:'
  id: totrans-1025
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，如果没有错误，我们将JSON编码的结构体写入响应写入器：
- en: '[PRE375]'
  id: totrans-1026
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE375]'
- en: 'The remainder of the code is almost identical to that in *Activity 15.01*,
    the only difference being that the `PageWithCounter` structs are instantiated
    with capitalized attributes, given that they are now all exported:'
  id: totrans-1027
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码的其余部分几乎与 *活动15.01* 中的相同，唯一的区别在于 `PageWithCounter` 结构体实例化时具有大写属性，因为它们现在都是导出的：
- en: '[PRE376]'
  id: totrans-1028
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE376]'
- en: 'Running your server, you should see the following for the assigned routes:'
  id: totrans-1029
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行你的服务器，你应该能看到以下分配路由的输出：
- en: '![](img/B14177_15_44.jpg)'
  id: totrans-1030
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14177_15_44.jpg)'
- en: 'Figure 15.44: Expected output when the handler is /'
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.44：当处理程序为 / 时的预期输出
- en: '![](img/B14177_15_45.jpg)'
  id: totrans-1032
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14177_15_45.jpg)'
- en: 'Figure 15.45: Expected output when the handler is /chapter1'
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.45：当处理程序为 /chapter1 时的预期输出
- en: '![Figure 15.46: Expected output when the handler is /chapter2'
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.46：当处理程序为 /chapter2'
- en: '](img/B14177_15_46.jpg)'
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14177_15_46.jpg)'
- en: 'Figure 15.46: Expected output when the handler is /chapter2'
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.46：当处理程序为 /chapter2 时的预期输出
- en: 'Activity 15.03: External Template'
  id: totrans-1037
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动15.03：外部模板
- en: '**Solution:**'
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'Create an HTML file called `index.html`:'
  id: totrans-1039
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `index.html` 的 HTML 文件：
- en: '[PRE377]'
  id: totrans-1040
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE377]'
- en: 'In the body, now add the template tags for the header:'
  id: totrans-1041
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主体中，现在添加模板标签以用于标题：
- en: '[PRE378]'
  id: totrans-1042
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE378]'
- en: You can see that there is an `if` statement that displays the `Name` attribute
    if it is not empty, otherwise it displays the `visitor` string.
  id: totrans-1043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以看到有一个`if`语句，如果`Name`属性不为空，则显示`Name`属性，否则显示`visitor`字符串。
- en: 'Now, complete the HTML file with a welcome message and the closing tags:'
  id: totrans-1044
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，完成HTML文件，添加欢迎信息和结束标签：
- en: '[PRE379]'
  id: totrans-1045
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE379]'
- en: 'Now, create a `main.go` file and start adding the package and imports:'
  id: totrans-1046
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个`main.go`文件并开始添加包和导入：
- en: '[PRE380]'
  id: totrans-1047
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE380]'
- en: 'Now, create the `Visitor` struct, which is a struct used as a model for our
    template. It only includes the `Name` field, as this is the only thing we care
    about. Note that we have been using structs up to this point as they are safer,
    but you could pass a `map[string]string` to your templates directly and it would
    work. Structs, however, allow us to perform better sanitization. Write the following:'
  id: totrans-1048
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建`Visitor`结构体，这是一个用作模板模型的结构体。它只包含`Name`字段，因为这是我们唯一关心的东西。注意，到目前为止，我们一直在使用结构体，因为它们更安全，但你可以直接传递一个`map[string]string`到你的模板中，它也会工作。然而，结构体允许我们执行更好的清理。写下以下内容：
- en: '[PRE381]'
  id: totrans-1049
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE381]'
- en: 'Now, create a handler. This is just a struct holding a pointer to a template:'
  id: totrans-1050
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个处理程序。这是一个只包含模板指针的结构体：
- en: '[PRE382]'
  id: totrans-1051
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE382]'
- en: 'This now needs to implement the handler interface:'
  id: totrans-1052
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在需要实现处理程序接口：
- en: '[PRE383]'
  id: totrans-1053
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE383]'
- en: 'Now, we need to get the requests in the querystring, so write the following:'
  id: totrans-1054
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要从查询字符串中获取请求，所以写下以下内容：
- en: '[PRE384]'
  id: totrans-1055
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE384]'
- en: 'We now need to create a visitor for this request, so execute the following
    command:'
  id: totrans-1056
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要为这个请求创建一个访客，所以执行以下命令：
- en: '[PRE385]'
  id: totrans-1057
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE385]'
- en: 'If the name exists, then implode the content to have a string in case we have
    multiple names:'
  id: totrans-1058
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果名称存在，则将内容合并成一个字符串，以防我们有多重名称：
- en: '[PRE386]'
  id: totrans-1059
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE386]'
- en: 'Now, execute the template to get the full page and pass it to the response
    writer to serve the file template:'
  id: totrans-1060
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，执行模板以获取完整页面并将其传递给响应写入器以提供文件模板：
- en: '[PRE387]'
  id: totrans-1061
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE387]'
- en: 'Now, create a function to instantiate a new page with a specific template file,
    returning a `Hello` template pointer:'
  id: totrans-1062
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个函数来实例化一个新的页面，使用特定的模板文件，返回一个`Hello`模板指针：
- en: '[PRE388]'
  id: totrans-1063
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE388]'
- en: 'Parse the template and assign a variable to it:'
  id: totrans-1064
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解析模板并将其分配给变量：
- en: '[PRE389]'
  id: totrans-1065
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE389]'
- en: 'Return the `Hello` template with the template file set for it:'
  id: totrans-1066
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回设置有模板文件的`Hello`模板：
- en: '[PRE390]'
  id: totrans-1067
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE390]'
- en: 'Create the `main()` function to run:'
  id: totrans-1068
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`main()`函数以运行：
- en: '[PRE391]'
  id: totrans-1069
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE391]'
- en: 'Now, use the `NewHello` function to create a page for the `index.html` template:'
  id: totrans-1070
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用`NewHello`函数为`index.html`模板创建一个页面：
- en: '[PRE392]'
  id: totrans-1071
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE392]'
- en: 'Handle the base path with the instantiated template:'
  id: totrans-1072
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用实例化的模板处理基本路径：
- en: '[PRE393]'
  id: totrans-1073
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE393]'
- en: 'Run the server on your favorite port and exit in the event of an error:'
  id: totrans-1074
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你喜欢的端口上运行服务器，并在发生错误时退出：
- en: '[PRE394]'
  id: totrans-1075
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE394]'
- en: 'The output will be as follows:'
  id: totrans-1076
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 15.47: Anonymous visitor page'
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.47：匿名访客页面'
- en: '](img/B14177_15_47.jpg)'
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B14177_15_47.jpg](img/B14177_15_47.jpg)'
- en: 'Figure 15.47: Anonymous visitor page'
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.47：匿名访客页面
- en: 'And the visitor page including the name will look something like the following
    screenshot:'
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
  zh: 包含名称的访客页面看起来可能如下截图所示：
- en: '![Figure 15.48: Visitor page with the name "Will"'
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.48：名为“Will”的访客页面'
- en: '](img/B14177_15_48.jpg)'
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B14177_15_48.jpg](img/B14177_15_48.jpg)'
- en: 'Figure 15.48: Visitor page with the name "Will"'
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.48：名为“Will”的访客页面
- en: 'Chapter 16: Concurrent Work'
  id: totrans-1084
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第16章：并发工作
- en: 'Activity 16.01: Listing Numbers'
  id: totrans-1085
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动16.01：列出数字
- en: '**Solution:**'
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'Create the `main.go` file and import the necessary packages:'
  id: totrans-1087
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`main.go`文件并导入必要的包：
- en: '[PRE395]'
  id: totrans-1088
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE395]'
- en: 'Define a function called `sum()`, which will use a pointer to a string to hold
    the result:'
  id: totrans-1089
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为`sum()`的函数，它将使用指向字符串的指针来保存结果：
- en: '[PRE396]'
  id: totrans-1090
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE396]'
- en: 'Create then the `main()` function to perform the sums:'
  id: totrans-1091
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`main()`函数以执行求和操作：
- en: '[PRE397]'
  id: totrans-1092
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE397]'
- en: 'Let''s analyze the code in steps:'
  id: totrans-1093
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们分步骤分析代码：
- en: 'Let''s look at the `sum()` function:'
  id: totrans-1094
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们看看`sum()`函数：
- en: '[PRE398]'
  id: totrans-1095
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE398]'
- en: Here, we create a function whose signature contains a range, `from`, `to int`,
    and then a WaitGroup, a string pointer that is going to be used to modify the
    value of the shared string, and finally a pointer to a mutex to synchronize the
    work on the string. After that, we create a loop in the defined range.
  id: totrans-1096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们创建一个函数，其签名包含一个范围，`from`，`to int`，然后是一个WaitGroup，一个将要用来修改共享字符串值的字符串指针，最后是一个指向互斥锁的指针，用于同步对字符串的工作。之后，我们在定义的范围内创建一个循环。
- en: 'The next step is:'
  id: totrans-1097
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是：
- en: '[PRE399]'
  id: totrans-1098
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE399]'
- en: Here, we lock the execution and add the current value of `i` as string at the
    end of the current value of `s`. Then, we unlock the process and end the loop.
  id: totrans-1099
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们锁定执行并添加当前`i`的当前值作为字符串在`s`的当前值之后。然后，我们解锁进程并结束循环。
- en: 'At this point, we tell the WaitGroup that the routine has finished its computation
    and that it terminates here:'
  id: totrans-1100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一点上，我们告诉WaitGroup例程已完成其计算，并且在这里终止：
- en: '[PRE400]'
  id: totrans-1101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE400]'
- en: 'Next, we define the `main()` function:'
  id: totrans-1102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们定义`main()`函数：
- en: '[PRE401]'
  id: totrans-1103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE401]'
- en: We set a starting string to `""`, then we instantiate a `mutex` and a WaitGroup.
    The code is then pretty similar to what you've seen in the previous exercises,
    which is running the four Goroutines and logging the result.
  id: totrans-1104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将起始字符串设置为 `""`，然后实例化一个 `mutex` 和一个 WaitGroup。然后代码与你在之前的练习中看到的是类似的，即运行四个 Goroutines
    并记录结果。
- en: 'When you run your program you should see something like this:![Figure 16.5:
    First output when listing numbers'
  id: totrans-1105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你运行你的程序时，你应该看到类似这样的输出：![图16.5：列出数字时的第一次输出
- en: '](img/B14177_16_05.jpg)'
  id: totrans-1106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B14177_16_05.jpg)'
- en: 'Figure 16.5: First output when listing numbers'
  id: totrans-1107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.5：列出数字时的第一次输出
- en: 'However, if you run it again multiple times, you will see that most likely
    you will have a different result. This is due to concurrency because the order
    of execution by the machine is uncertain:'
  id: totrans-1108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然而，如果你再次多次运行它，你很可能会看到不同的结果。这是由于并发性，因为机器执行顺序的不确定性：
- en: '![Figure 16.6: Second attempt of listing numbers returns with a different order'
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图16.6：列出数字的第二次尝试以不同的顺序返回'
- en: '](img/B14177_16_06.jpg)'
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B14177_16_06.jpg)'
- en: 'Figure 16.6: Second attempt of listing numbers returns with a different order'
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.6：列出数字的第二次尝试以不同的顺序返回
- en: 'Activity 16.02: Source Files'
  id: totrans-1112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动16.02：源文件
- en: '**Solution:**'
  id: totrans-1113
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'Create the `main` package with the following imports:'
  id: totrans-1114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下导入创建 `main` 包：
- en: '[PRE402]'
  id: totrans-1115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE402]'
- en: 'Create the `source()` function to read numbers from a file and send them to
    a channel:'
  id: totrans-1116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `source()` 函数从文件中读取数字并将它们发送到通道：
- en: '[PRE403]'
  id: totrans-1117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE403]'
- en: 'Now create the `splitter()` function to receive the numbers and then send them
    to two different channels, one for `odd` numbers and one for `even` numbers:'
  id: totrans-1118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建一个 `splitter()` 函数来接收数字，然后将它们发送到两个不同的通道，一个用于 `odd`（奇数）数字，另一个用于 `even`（偶数）数字：
- en: '[PRE404]'
  id: totrans-1119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE404]'
- en: 'Now write a function to sum the numbers coming in and send the `sum` to an
    outbound channel:'
  id: totrans-1120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在编写一个函数来计算传入的数字的总和，并将 `sum` 发送到一个输出通道：
- en: '[PRE405]'
  id: totrans-1121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE405]'
- en: 'Now create a `merger()` function that will output the `sum` of the even and
    odd numbers:'
  id: totrans-1122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建一个 `merger()` 函数，该函数将输出偶数和奇数的总和：
- en: '[PRE406]'
  id: totrans-1123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE406]'
- en: 'Now create the `main()` function, where you initialize all the channels and
    call all the functions you created earlier in order to produce the `sum`:'
  id: totrans-1124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建一个 `main()` 函数，在其中初始化所有通道并调用你之前创建的所有函数，以生成 `sum`：
- en: '[PRE407]'
  id: totrans-1125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE407]'
- en: Let's analyze the code in a bit more detail.
  id: totrans-1126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们更详细地分析一下代码。
- en: 'In the `source` function, we have a filename for the input file to open, a
    channel to pipe messages in, and a WaitGroup to notify the end of the process.
    This function will run as two Goroutines, one per input file. Inside this function,
    we read from the file line by line. You should have already learned how to read
    from files, and there are several optimized ways to do that. Here, we just read
    line by line with:'
  id: totrans-1127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `source` 函数中，我们有一个用于打开输入文件的文件名，一个用于管道消息的通道，以及一个用于通知过程结束的 WaitGroup。此函数将以两个
    Goroutines 运行，每个输入文件一个。在这个函数内部，我们逐行读取文件。你应该已经学过如何从文件中读取，并且有几种优化的方法可以做到这一点。这里，我们只是逐行读取，使用
    `'\n'` 作为分隔符：
- en: '[PRE408]'
  id: totrans-1128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE408]'
- en: So, we are creating a buffered reader on the file `f` and then looping the `ReadString`
    function with the newline character `'\n'` as the delimiter. Be mindful that it
    has to be with single quotes and not `"\n"` because the delimiter is a character
    and not a string.
  id: totrans-1129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，我们在文件 `f` 上创建了一个缓冲读取器，然后使用带有换行符 `'\n'` 作为分隔符的 `ReadString` 函数进行循环。请注意，它必须使用单引号，而不是
    `"\n"`，因为分隔符是一个字符，而不是一个字符串。
- en: 'After that, we handle the errors, and if an end of file error (`EOF)` occurs,
    we just terminate the function. Note that if we don''t do this, the code just
    panics:'
  id: totrans-1130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们处理错误，如果发生文件结束错误 (`EOF`)，我们只需终止函数。注意，如果我们不这样做，代码就会崩溃：
- en: '[PRE409]'
  id: totrans-1131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE409]'
- en: 'We also need to strip the line so that we just have the number:'
  id: totrans-1132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要去除行尾，这样我们只剩下一个数字：
- en: '[PRE410]'
  id: totrans-1133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE410]'
- en: Here, we replace the last part of the string, `"\n"`, with an empty string.
    After that we convert the text to an integer and if it is not an integer, we panic
    again. At the end, we just pipe out the number and complete the function.
  id: totrans-1134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们将字符串的最后部分 `"\n"` 替换为一个空字符串。之后，我们将文本转换为整数，如果它不是一个整数，我们再次陷入恐慌。最后，我们只输出数字并完成函数。
- en: 'Next step is to create a splitting function:'
  id: totrans-1135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是创建一个拆分函数：
- en: '[PRE411]'
  id: totrans-1136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE411]'
- en: 'This function has a channel to get numbers from the sources and two channels
    to pipe numbers to; one for the even numbers and one for the odd numbers. A Waitgroup
    is used again to notify the main routine of completion. The purpose of this function
    is to split the numbers so we can loop over the channel:'
  id: totrans-1137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此函数有一个通道从源获取数字，两个通道用于将数字管道传输到；一个用于偶数，一个用于奇数。再次使用 Waitgroup 来通知主程序完成。此函数的目的是拆分数字，这样我们就可以遍历通道：
- en: '[PRE412]'
  id: totrans-1138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE412]'
- en: 'Inside the for loop, we can identify the odd and even numbers using `switch`:'
  id: totrans-1139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在for循环中，我们可以使用 `switch` 来识别奇数和偶数：
- en: '[PRE413]'
  id: totrans-1140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE413]'
- en: This code splits the numbers depending on the remainder of division by 2\. If
    the remainder is 0, the number is even and is piped to the even channel, odd otherwise.
  id: totrans-1141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此代码根据除以2的余数来分割数字。如果余数为0，则该数字是偶数，并将其通过偶数通道传输，否则为奇数。
- en: 'We close the channels to notify the next process in the line:'
  id: totrans-1142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们关闭通道以通知下一个过程：
- en: '[PRE414]'
  id: totrans-1143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE414]'
- en: 'We now have the splitter, but we need to sum the messages piped in, and this
    is done with a function that''s similar to what you''ve seen in the previous exercises:'
  id: totrans-1144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在有了分拆器，但我们需要对传输进来的消息进行求和，这通过一个与之前练习中看到类似的函数来完成：
- en: '[PRE415]'
  id: totrans-1145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE415]'
- en: 'At this point, we need to merge all the results, so we use a merger:'
  id: totrans-1146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到目前为止，我们需要合并所有结果，因此我们使用一个合并器：
- en: '[PRE416]'
  id: totrans-1147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE416]'
- en: This function holds the two channels for even and odd numbers, a Waitgroup to
    handle completion, and a name for the result file.
  id: totrans-1148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数包含偶数和奇数的两个通道，一个Waitgroup来处理完成，以及一个结果文件的名称。
- en: 'We then begin creating the `results.txt` file:'
  id: totrans-1149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们开始创建 `results.txt` 文件：
- en: '[PRE417]'
  id: totrans-1150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE417]'
- en: 'We loop over the two channels for odd and even numbers:'
  id: totrans-1151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们遍历奇数和偶数的两个通道：
- en: '[PRE418]'
  id: totrans-1152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE418]'
- en: 'And then we write the code to choose the channel based on the type of number:'
  id: totrans-1153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们编写代码来根据数字类型选择通道：
- en: '[PRE419]'
  id: totrans-1154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE419]'
- en: Writing to the file is done using the `Write` method, which in turn needs bytes.
    That way, we transform the string containing the type of numbers added (`odd`,
    `even`) and their sum into bytes.
  id: totrans-1155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 `Write` 方法将内容写入文件，该方法需要字节。这样，我们将包含添加的数字类型（`odd`，`even`）及其总和的字符串转换为字节。
- en: 'We now orchestrate everything in the main function:'
  id: totrans-1156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在在主函数中编排所有内容：
- en: '[PRE420]'
  id: totrans-1157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE420]'
- en: We used two Waitgroups here; one for the sources and one for the rest of the
    routines. You will see why soon.
  id: totrans-1158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在这里使用了两个Waitgroup；一个用于源，一个用于其他例程。你很快就会看到原因。
- en: 'Next, we create all the channels we need:'
  id: totrans-1159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们创建所有需要的通道：
- en: '[PRE421]'
  id: totrans-1160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE421]'
- en: '`out` is the channel used by the source functions to pipe the messages to the
    splitter, `odd` and `even` are the ones where the numbers are piped for being
    summed, and the last two are the ones holding a single number with the sum.'
  id: totrans-1161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`out` 是源函数用来将消息传输到分拆器的通道，`odd` 和 `even` 是将数字传输以进行求和的通道，最后两个通道包含单个数字及其总和。'
- en: 'We then start all the routines we need:'
  id: totrans-1162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们启动所有需要的例程：
- en: '[PRE422]'
  id: totrans-1163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE422]'
- en: 'We then wait for the routines to finish:'
  id: totrans-1164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们等待例程完成：
- en: '[PRE423]'
  id: totrans-1165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE423]'
- en: Please note that here, we could have used more than two files. You could have
    even used an arbitrary number of files. Hence, there is no way for the splitter
    to know how to terminate the execution, so we close the channel after the sources
    have finished piping numbers in.
  id: totrans-1166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，在这里，我们可以使用超过两个文件。甚至可以使用任意数量的文件。因此，分拆器无法知道如何终止执行，所以我们在源完成将数字传输到通道后关闭通道。
- en: 'After that, we have a second Waitgroup for the rest. Essentially, we need to
    keep all the routines running until the last sum has been added:'
  id: totrans-1167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们为剩余的例程添加第二个Waitgroup。本质上，我们需要保持所有例程运行，直到最后一个求和被添加：
- en: '[PRE424]'
  id: totrans-1168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE424]'
- en: While the files you can use as input can be different, use the following two
    files to test the output.
  id: totrans-1169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 虽然你可以用作输入的文件可能不同，但请使用以下两个文件来测试输出。
- en: '`input1.dat`'
  id: totrans-1170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`input1.dat`'
- en: '[PRE425]'
  id: totrans-1171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE425]'
- en: '`input2.dat`'
  id: totrans-1172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`input2.dat`'
- en: '[PRE426]'
  id: totrans-1173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE426]'
- en: Note the newline at the end of each file.
  id: totrans-1174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意每个文件末尾的换行符。
- en: 'Now that you have created the input file, run the following command:'
  id: totrans-1175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你已经创建了输入文件，运行以下命令：
- en: '[PRE427]'
  id: totrans-1176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE427]'
- en: You should see a file called `results.txt` with the following content.
  id: totrans-1177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该会看到一个名为 `results.txt` 的文件，其内容如下。
- en: '[PRE428]'
  id: totrans-1178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE428]'
- en: 'Chapter 17: Using Go Tools'
  id: totrans-1179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第17章：使用Go工具
- en: 'Activity 17.01: Using gofmt, goimport, go vet, and go get to Correct a File'
  id: totrans-1180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动17.01：使用gofmt、goimport、go vet和go get来修正文件
- en: '**Solution:**'
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'Run `gofmt` against the file to check for any formatting issues and see that
    they make sense:'
  id: totrans-1182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对文件运行 `gofmt` 以检查任何格式问题并确保它们有意义：
- en: '[PRE429]'
  id: totrans-1183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE429]'
- en: 'This should output a much neater-looking file, as follows:'
  id: totrans-1184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该输出一个看起来更整洁的文件，如下所示：
- en: '![Figure 17.11: Expected output from gofmt'
  id: totrans-1185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图17.11：gofmt的预期输出'
- en: '](img/B14177_17_11.jpg)'
  id: totrans-1186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图17.11：gofmt的预期输出'
- en: 'Figure 17.11: Expected output from gofmt'
  id: totrans-1187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图17.11：gofmt的预期输出
- en: 'Use the `-w` option on `gofmt` to make the changes to the file and save them:'
  id: totrans-1188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `gofmt` 的 `-w` 选项来更改文件并保存更改：
- en: '[PRE430]'
  id: totrans-1189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE430]'
- en: 'Check the imports are correct using `goimports`:'
  id: totrans-1190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `goimports` 检查导入是否正确：
- en: '[PRE431]'
  id: totrans-1191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE431]'
- en: 'Use `goimports` to fix the import statements in the file:'
  id: totrans-1192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `goimports` 来修复文件中的导入语句：
- en: '[PRE432]'
  id: totrans-1193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE432]'
- en: 'The final stage is to use `go vet` to check for any issues the compiler might
    miss. Run it against `main.go` to check for any issues:'
  id: totrans-1194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后的阶段是使用 `go vet` 来检查编译器可能遗漏的任何问题。运行它对 `main.go` 进行检查：
- en: '[PRE433]'
  id: totrans-1195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE433]'
- en: 'It will find an issue with unreachable code, as shown in the following output:![Figure
    17.12: Expected output from go vet'
  id: totrans-1196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它将发现一个不可达代码的问题，如下面的输出所示：![图 17.12：go vet 的预期输出](img/B14177_17_12.jpg)
- en: '](img/B14177_17_12.jpg)'
  id: totrans-1197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 17.12：go vet 的预期输出](img/B14177_17_12.jpg)'
- en: 'Figure 17.12: Expected output from go vet'
  id: totrans-1198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 17.12：go vet 的预期输出
- en: 'Correct the issue by moving the `log.Println("completed")` line so that it
    runs before the `return` statement:'
  id: totrans-1199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将 `log.Println("completed")` 行移动到 `return` 语句之前来纠正问题：
- en: '[PRE434]'
  id: totrans-1200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE434]'
- en: 'You should ensure that you have the third-party package downloaded by running
    `go get`:'
  id: totrans-1201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该确保通过运行 `go get` 命令下载了第三方包：
- en: '[PRE435]'
  id: totrans-1202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE435]'
- en: 'This will start the web server:![Figure 17.13: Expected output when running
    the code'
  id: totrans-1203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将启动 web 服务器：![图 17.13：运行代码时的预期输出](img/B14177_17_13.jpg)
- en: '](img/B14177_17_13.jpg)'
  id: totrans-1204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 17.13：通过 Firefox 访问 web 服务器时的预期输出](img/B14177_17_13.jpg)'
- en: 'Figure 17.13: Expected output when running the code'
  id: totrans-1205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 17.13：运行代码时的预期输出
- en: 'You can check whether it worked by going to `http://localhost:8888` in your
    web browser:'
  id: totrans-1206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过在浏览器中访问 `http://localhost:8888` 来检查它是否工作：
- en: '![Figure 17.14: Expected output when accessing the web server through Firefox'
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 17.14：通过 Firefox 访问 web 服务器时的预期输出](img/B14177_17_14.jpg)'
- en: '](img/B14177_17_14.jpg)'
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 17.14：预期输出](img/B14177_17_14.jpg)'
- en: 'Figure 17.14: Expected output when accessing the web server through Firefox'
  id: totrans-1209
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.13：通过 Firefox 访问 web 服务器时的预期输出
- en: 'Chapter 18: Security'
  id: totrans-1210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 18 章：安全
- en: 'Activity 18.01: Authenticating Users on the Application Using Hashed Passwords'
  id: totrans-1211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 18.01：使用散列密码在应用程序中验证用户
- en: '**Solution:**'
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: 'Create a `main.go` file and import the following packages:'
  id: totrans-1213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main.go` 文件，并导入以下包：
- en: '`crypto/sha512`: This package will provide the hashing required to encrypt
    the password.'
  id: totrans-1214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`crypto/sha512`：此包将提供加密密码所需的散列功能。'
- en: '`database/sql`: The database to store user details will be created using this
    package.'
  id: totrans-1215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`database/sql`：将使用此包创建用于存储用户详情的数据库。'
- en: '`github.com/mattn/go-sqlite3`: This is a third-party library used to create
    a `sqlite` instance for testing.'
  id: totrans-1216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`github.com/mattn/go-sqlite3`：这是一个用于创建 `sqlite` 实例进行测试的第三方库。'
- en: '[PRE436]'
  id: totrans-1217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE436]'
- en: 'Define a function called `getConnection()` to initialize a database connection:'
  id: totrans-1218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为 `getConnection()` 的函数来初始化数据库连接：
- en: '[PRE437]'
  id: totrans-1219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE437]'
- en: 'Define helper functions to set up and tear down the database:'
  id: totrans-1220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义辅助函数来设置和拆除数据库：
- en: '[PRE438]'
  id: totrans-1221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE438]'
- en: 'Define the `GetPassword()` function to retrieve a user password from the database:'
  id: totrans-1222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为 `GetPassword()` 的函数，用于从数据库中检索用户密码：
- en: '[PRE439]'
  id: totrans-1223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE439]'
- en: 'Define a function called `UpdatePassword()` to update the user password in
    the database with a hashed password:'
  id: totrans-1224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为 `UpdatePassword()` 的函数，用于使用散列密码在数据库中更新用户密码：
- en: '[PRE440]'
  id: totrans-1225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE440]'
- en: 'Write the `main()` function. In the `main()` function, you should set up a
    database connection and initialize the database with some test data. The `UpdatePassword()`
    function should be called to update the user password to a hashed password. The
    `GetPassword()` function should be called to verify the hashed password:'
  id: totrans-1226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写 `main()` 函数。在 `main()` 函数中，你应该设置数据库连接并使用一些测试数据初始化数据库。应调用 `UpdatePassword()`
    函数将用户密码更新为散列密码。应调用 `GetPassword()` 函数来验证散列密码：
- en: '[PRE441]'
  id: totrans-1227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE441]'
- en: 'Run the program using the following command:'
  id: totrans-1228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行程序：
- en: '[PRE442]'
  id: totrans-1229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE442]'
- en: You should get the following output.
  id: totrans-1230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该得到以下输出。
- en: '![Figure 18.13: Expected output'
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 18.13：预期输出](img/B14177_18_13.jpg)'
- en: '](img/B14177_18_13.jpg)'
  id: totrans-1232
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 18.13：预期输出](img/B14177_18_13.jpg)'
- en: 'Figure 18.13: Expected output'
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.13：预期输出
- en: In this activity, we have implemented a real-world scenario of storing and verifying
    user passwords with hashing. Should the database details be leaked, the hashed
    passwords, by themselves, will not be useful to the attacker.
  id: totrans-1234
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，我们实现了使用散列存储和验证用户密码的实际情况。如果数据库详细信息泄露，散列密码本身对攻击者将没有用处。
- en: 'Activity 18.02: Creating CA Signed Certificates Using Crypto Libraries'
  id: totrans-1235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 18.02：使用 Crypto 库创建 CA 签名的证书
- en: '**Solution**:'
  id: totrans-1236
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: 'Create a `main.go` file and import the following packages:'
  id: totrans-1237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.go` 的文件，并导入以下包：
- en: 'The crypto packages here will be used to generate and verify x509 certificates:'
  id: totrans-1238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里将使用 crypto 包来生成和验证 x509 证书：
- en: '[PRE443]'
  id: totrans-1239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE443]'
- en: 'Create a function called `generateCert()`, which returns an x509 certificate
    and its private key:'
  id: totrans-1240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `generateCert()` 的函数，该函数返回一个 x509 证书及其私钥：
- en: '[PRE444]'
  id: totrans-1241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE444]'
- en: 'Create the `main()` function to call the `generateCert()` function. This will
    generate a root certificate and a leaf certificate from the root certificate.
    Verify the leaf certificate:'
  id: totrans-1242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main()` 的函数来调用 `generateCert()` 函数。这将从一个根证书生成一个根证书和一个叶证书。验证叶证书：
- en: '[PRE445]'
  id: totrans-1243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE445]'
- en: 'Test the code by running `main.go` using the following command:'
  id: totrans-1244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行 `main.go` 来测试代码：
- en: '[PRE446]'
  id: totrans-1245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE446]'
- en: 'The output should appear as follows:'
  id: totrans-1246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '[PRE447]'
  id: totrans-1247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE447]'
- en: In this activity, we have generated x509 public key certificates. We have also
    seen how to use a root certificate to generate a leaf certificate. This can be
    handy when you are trying to implement your own PKI server.
  id: totrans-1248
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，我们生成了x509公钥证书。我们还看到了如何使用根证书生成叶证书。当你尝试实现自己的PKI服务器时，这可能会很有用。
- en: 'Chapter 19: Special Features'
  id: totrans-1249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第19章：特殊功能
- en: 'Activity 19.01: Defining Build Constraints Using Filenames'
  id: totrans-1250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动19.01：使用文件名定义构建约束
- en: '**Solution**:'
  id: totrans-1251
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: Create a directory called `custom`.
  id: totrans-1252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `custom` 的目录。
- en: Inside this directory, create a file called `print_darwin.go`.
  id: totrans-1253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此目录下创建一个名为 `print_darwin.go` 的文件。
- en: 'Define a function called `Print()`:'
  id: totrans-1254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为 `Print()` 的函数：
- en: '[PRE448]'
  id: totrans-1255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE448]'
- en: Create another file inside the `custom` directory called `print_386.go`.
  id: totrans-1256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `custom` 目录内创建另一个名为 `print_386.go` 的文件。
- en: 'Define a function inside this package called `Print()`:'
  id: totrans-1257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此包内定义一个名为 `Print()` 的函数：
- en: '[PRE449]'
  id: totrans-1258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE449]'
- en: 'Run the program using the following command:'
  id: totrans-1259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行程序：
- en: '[PRE450]'
  id: totrans-1260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE450]'
- en: 'You should see the following output:'
  id: totrans-1261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE451]'
  id: totrans-1262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE451]'
- en: 'Activity 19.02: Using Wildcard with Go Test'
  id: totrans-1263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动19.02：使用Go Test的通配符
- en: '**Solution**:'
  id: totrans-1264
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: 'Create a directory called `package1`:![Figure 19.5: Directory structure'
  id: totrans-1265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `package1` 的目录：![图19.5：目录结构
- en: '](img/B14177_19_05.jpg)'
  id: totrans-1266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B14177_19_05.jpg](img/B14177_19_05.jpg)'
- en: 'Figure 19.5: Directory structure'
  id: totrans-1267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图19.5：目录结构
- en: 'Create `run_test.go` in this directory with the following test cases defined:'
  id: totrans-1268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此目录下创建一个名为 `run_test.go` 的文件，并定义以下测试用例：
- en: '[PRE452]'
  id: totrans-1269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE452]'
- en: 'In the parent directory, create another directory called `package2`:![Figure
    19.6: Directory structure'
  id: totrans-1270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在父目录中，创建另一个名为 `package2` 的目录：![图19.6：目录结构
- en: '](img/B14177_19_06.jpg)'
  id: totrans-1271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B14177_19_06.jpg](img/B14177_19_06.jpg)'
- en: 'Figure 19.6: Directory structure'
  id: totrans-1272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图19.6：目录结构
- en: 'Create a file called `run_test.go` in this directory with the following content:'
  id: totrans-1273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此目录下创建一个名为 `run_test.go` 的文件，并包含以下内容：
- en: '[PRE453]'
  id: totrans-1274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE453]'
- en: 'Run all the test cases using the following command from the parent directory:'
  id: totrans-1275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令从父目录运行所有测试用例：
- en: '[PRE454]'
  id: totrans-1276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE454]'
- en: 'You should get the following output:'
  id: totrans-1277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 19.7: Recursive test with the wildcard pattern](img/B14177_19_07.jpg)'
  id: totrans-1278
  prefs: []
  type: TYPE_IMG
  zh: '![图19.7：使用通配符模式的递归测试](img/B14177_19_07.jpg)'
- en: 'Figure 19.7: Recursive test with the wildcard pattern'
  id: totrans-1279
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.7：使用通配符模式的递归测试
