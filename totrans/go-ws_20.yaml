- en: Appendix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: About
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section is included to assist the students to perform the activities present
    in the book. It includes detailed steps that are to be performed by the students
    to complete and achieve the objectives of the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 1: Variables and Operators'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Activity 1.01 Defining and Printing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the package name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import the required packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `main()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare and initialize a string variable for the given name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare and initialize a string variable for the family name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare and initialize an `int` variable for `age`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare and initialize a `bool` variable for `peanutAllergy`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print each variable to the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Close the `main()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is the expected output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.24: Expected output after assigning the variables'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14177_01_24.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.24: Expected output after assigning the variables'
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 1.02: Pointer Value Swap'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start the exercise with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You need to get the pointers from `a` and `b` to pass to swap using `&`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You need to dereference the values first using `*`. You can swap without temporary
    values by using Go''s ability to do multiple assignments. The right-hand side
    resolves before the left-hand side does:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is the expected output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 1.03: Message Bug'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create `package` `main` and add the necessary imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the `message` before the `if` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a `message` that would update the `message` in step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a `message` that would update the message in step 3:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is the expected output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 1.04: Bad Count Bug'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start the exercise with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The assignment here caused the preceding `count` to be shadowed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is the expected output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Chapter 2: Logic and Loops'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 2.01: Implementing FizzBuzz'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define `package` and include `import`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `main` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `for` `i` loop that starts at 1 and loops until `i` gets to 99:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize a string variable that will hold the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using module logic to check for divisibility, `if` `i` is divisible by 3, then
    add `"Fizz"` to the `out` string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If divisible by 5, add `"Buzz"` to the string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If neither, convert the number to a string and then add it to the output string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the output variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Close the loop and `main`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the folder you create your code, run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The expected output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.03: The FizzBuzz output'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14177_02_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.03: The FizzBuzz output'
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 2.02: Looping Over Map Data Using range'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Load the `main` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import the `fmt` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `main` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize the `words` map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize the `topWord` variable to an empty string and the `topCount` variable
    to 0:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `for` loop that uses `range` to get the key and value of each element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check whether the current `map` element has a larger count than the top count:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If it does, then update the top values with the values from the current element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Close the `if` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Close the loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the loop is done, you have your result. Print it to the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the folder you created the code, run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is the expected output displaying the most popular word with
    its count value:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 2.03: Bubble Sort'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the package and add the imported package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create `main`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a slice of integers and initialize it with unsorted numbers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the slice before sorting it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `for` loop; in the `initial` statement, define a Boolean with the
    initial value of `true`. In the condition, check that Boolean. Leave the `post`
    statement empty:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the Boolean variable to `false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a nested `for` `i` loop that steps over the whole slice of `int` values.
    Start the loop from the second element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check whether the previous element is bigger than the current element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the previous element is bigger, swap the values of the elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set our Boolean to `true` to indicate that we did a swap and we''ll need to
    keep going:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Close the `if` statement and the two loops:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the now sorted slice and close `main`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the folder you create the code, run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is the expected output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Chapter 3: Core Types'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 3.01: Sales Tax Calculator'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder and add a `main.go` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `main.go`, add the `main` package name to the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now add the imports we''ll use in this file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function that takes two floating-point arguments and returns a floating-point:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Multiply the two arguments together and return the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Close the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `main()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare a variable to be a floating-point:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `cake` to the `taxTotal`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `milk` to the `taxTotal`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `butter` to the `taxTotal`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the `taxTotal` to the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Close the `main()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the file, and from within the folder you created run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running the preceding code shows the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 3.02: Loan Calculator'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import the necessary packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define constants for the scores and ratios:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Pre-define the errors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function to check the loan details. This function will accept a `creditScore`,
    an `income`, a `loanAmount`, and a `loanTerm`, and return an error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set a base `interest` rate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A good `creditScore` gets a better rate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Validate the `creditScore` and return an error if it''s bad:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Validate the `income` and return an error if it''s bad:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Validate the `loanAmount` and return an error if it''s bad:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Validate the `loanTerm` and return an error if it''s bad:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Convert the interest rate into something we can use in calculations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Calculate the payment by multiplying the `loanAmount` by the loan `rate`. Then
    divide that by the `loanTerm`. Now divide the `loanAmount` by the `loanTerm`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, add those two amounts together:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calculate the total cost of the loan by multiplying the payments by the `loanTerm`
    and then subtracting the `loanAmount`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare a variable for `approval`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a condition to check that the income is more than the payment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calculate the percentage of their `income` that will be taken up by the payment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If they have a good `creditScore`, allow a higher ratio:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print out all the details of the application to the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Return with no error and close the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `main()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an example that will be approved:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print out any errors, if found:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an example that will be denied:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print out any errors, if found:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Close the `main()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the folder you wrote the code in, run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Following is the expected output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.15: Output of loan calculator'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14177_03_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.15: Output of loan calculator'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 4: Complex Types'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 4.01: Filling an Array'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder and add a file named `main.go` to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `main.go`, add the package and imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function that returns an array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define an array variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use a `for i` loop to operate on each element of the array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use `i`, plus a bit of math, to set the correct value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Return the array variable and close the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `main()` function, call the function and print the returned value to
    the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the file. Then, in the folder you created in *step 1*, run the code using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running the preceding code will produce the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 4.02: Printing a User''s Name Based on User Input'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder and add a file named `main.go` to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `main.go`, add the package and imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the `map` of user data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function that returns the user''s name and whether it exists:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `main()` function, check the passed arguments. Call the function, print
    if there''s an error, and exit if the user doesn''t exist. Print a greeting to
    the user if they do exist:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the file. Then, in the folder you created in *step 1*, run the code using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running the preceding code produces the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 4.03: Creating a Locale Checker'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder and add a file named `main.go` to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `main.go`, add the package and imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a `locale` `struct` with a `language` and a `territory`, both of which
    will be strings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function that returns the test data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function that uses a passed local struct to check the sample data
    to see if a locale exists:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `main()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check that an argument has been passed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Process the passed argument to make sure it''s in a valid format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a local struct value using the passed argument data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the function and print an error message if it doesn''t exist; otherwise,
    print that the locale is supported:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the file. Then, in the folder you created in *step 1*, run the code using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running the preceding code produces the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.17: Locale checking result'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14177_04_17.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.17: Locale checking result'
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 4.04: Slicing the Week'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder and add a file named `main.go` to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `main.go`, add the package and imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function that returns a slice of strings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a slice and initialize it with the days of the week, starting on Monday:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a range that starts at index 6 and goes to the end of the slice. Then,
    create a slice range that starts at the beginning of the slice and goes up to
    index 6\. Use `append` to add the second range to the first range. Capture the
    value from append:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Return the result and close the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `main`, call the function and print the result to the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the file. Then, in the folder you created in *step 1*, run the code using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running the preceding code produces the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 4.05: Removing an Element from a Slice'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder and add a file named `main.go` to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `main.go`, add the package and imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function that returns a slice of strings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a slice of strings with the `Good` and `Bad` data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a slice range from the beginning of the slice up until the `Bad` index.
    Create another slice range that starts from one index after the `Bad` data and
    goes until the end of the slice. Append the second slice to the first and capture
    the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Return the slice and close the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `main`, call the function and print the result to the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the file. Then, in the folder you created in *step 1*, run the code using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The expected output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 4.06: Type Checker'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import the required libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function that returns a slice of `interface{}` values. This will hold
    our example values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function that accepts a single `interface{}` value and returns a `string`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use a type `switch`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `case` for all `int` types:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Return a string that represents them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `case` for the floats and return a string for them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `case` for the Boolean type and return a string for it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add a case for strings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a default case that says you don''t know the type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Close the `switch` statement and the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `main()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the example data and assign it to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use a `for i` loop to step over the example values one by one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Pass each example value to the preceding function and print the result to the
    console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Close the loop and the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the folder you created the code in, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running the preceding code will produce the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.18: Output displaying types'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14177_04_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.18: Output displaying types'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 5: Functions'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 5.01: Calculating the Working Hours of Employees'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'All directories and files should be created inside your `$GOPATH`:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a directory called `Activity5.01`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a file called `main.go` inside `Activity5.01`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside `Activity5.01/main.go`, declare the `main` package and its imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `Developer` type. Notice the `WorkWeek` is an array of `7`. This is
    because the week consists of 7 days and we use an array to ensure the fixed size:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an `Employee` type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `Weekday` of type `int`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a constant of type `Weekday`. This is an enumeration of the weekdays:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `main()` function, include the following code; initialize `Developer`
    with the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, call the `LogHours` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print out the workweek and the hours worked for the week:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `LogHours` method; it is a pointer receiver method. It takes as input
    a custom type called `Weekday` and an `int`. The method assigns the `WorkWeek`
    field to the day of the week for hours worked that day. `WorkWeek` is an array
    with a fixed size of `7`, because there are `7` days in a week:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `HoursWorked` method that will return an `int`. The `HoursWorked`
    function ranges over `WorkWeek`, adding the hours for the day to `total`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is the expected output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 5.02: Calculating Payable Amount for Employees Based on Working Hours'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a directory called `Activity5.02`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a file called `main.go()` in the directory in step 1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the following code following into `Activity5.02/main.go`. This is the
    same code from steps 3-7 of *Activity5.01,* *Calculating the Working Hours of
    Employees*; see those steps for a description of the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `main()` function, place the following code. Assign `x` to the return
    value of `nonLoggedHours()`. As you may recall, the return value is `func(int)int`.
    The following three prints pass a value to `x` `func`. Each time `x` `func` is
    called, it adds the value passed to the total:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `LogHours` and `HoursWorked` remain unchanged:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a method called `PayDay()` that returns an `int` and a `bool`. The method
    evaluates whether `HoursWorked` is greater than `40`. If it is, then it calculates
    `hoursOver` as overtime pay. It returns the total pay and `true` if the pay includes
    overtime:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function called `nonLoggedHours()`. This is a function that has a
    return type of `func(int)int`. The function is a closure, it encloses the anonymous
    function. Each time the function is called, it adds the int that is passed into
    the running total and returns the total:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a method called `PayDetails`. Inside the `PayDetails` method, it iterates
    over `d.WorkWeek`. It assigns the `i` value to the index of the slice and `v`
    to the value stored in the slice. The `i` switch is the index of the slice; it
    represents the day of the week. The `case` statement evaluates `i` and based on
    the value, it prints the day and the hours for that day.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The function also prints the hours worked for the week, the pay for the week,
    and if the pay was overtime pay.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first `print` statement prints out the hours worked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pay` and `overtime` get assigned the values returned from `d.Payday()`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following `pay` statements print out the pay, whether it was overtime,
    and a blank line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: 'The results of this activity being run are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.14: Output for payable amount activity'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14177_05_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.14: Output for payable amount activity'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 6: Errors'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 6.01: Creating a Custom Error Message for a Banking Application'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a directory called *Activity6.01* inside your `$GOPATH`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save a file inside of the directory created in *step 1* called `main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define `package main` and import two packages, `errors` and `fmt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, define our custom error that will return an error that displays `"invalid
    last name"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need one more custom error that will return an error that displays `"invalid
    routing number"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `main()` function, we will print each of the errors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: At the command line, navigate to the directory created in *step 1*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the command line, type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `go build` command will compile your program and create an executable named
    after the directory you created in *step 1*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Type the name of the file created in *step 8* and hit *Enter* to run the executable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The expected output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 6.02: Validating a Bank Customer''s Direct Deposit Submission'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a directory called *Activity6.02* inside `$GOPATH`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save a file inside the directory created in *step 1* called `main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define `package main` and add the following imports for this application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the struct and fields that are mentioned in the activity description:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define two errors that will be used by the `directDeposit` method later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `main()` function, assign a variable of the `directDeposit` type and
    set its fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Assign a variable named `err` to the `directDeposit`, `validateRoutingNumber`,
    and `validateLastName` methods. If an error is returned, print the error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `report()` method to print out the field''s values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a method that is used to check whether `routingNumber` is less than
    100\. If that condition is `true`, it will return the custom error, `ErrInvalidRoutingNum`,
    else it will return `nil`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we are going to add the `validateLastName` method. This method removes
    all trailing spaces from `lastName` and checks to see whether the `lastName` length
    equals zero. If the `lastName` length equals zero, the method will return the
    error, `ErrInvalidLasName`. If `lastName` is not equal to zero, then it will return
    `nil`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next `report()` method will print each of the `directDeposit` field''s
    values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: At the command line, navigate to the directory created in *step 1*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the command line, type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `go build` command will compile your program and create an executable named
    after the directory you created in *step 1*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Type the name of the file created in *step 13* and hit *Enter* to run the executable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The expected output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.14: Validating a bank customer''s direct deposit submission'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14177_06_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.14: Validating a bank customer''s direct deposit submission'
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 6.03: Panic on Invalid Data Submission'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the directory used in *step 1* of *Activity 6.02*, *Validating a
    Bank's Customers Direct Deposit Submission*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the return `ErrInvalidRoutingNum` to panic with `ErrInvalidRoutingNum`
    passed to the `panic()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: At the command line, navigate to the directory used in *step 1*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the command line, type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `go build` command will compile your program and create an executable named
    after the directory you used in *step 1*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Type the name of the file created in *step 4* and hit *Enter* to run the executable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The expected output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.15: Panic on invalid routing number'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14177_06_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.15: Panic on invalid routing number'
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 6.04: Preventing a Panic from Crashing the App'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the directory used in *step 1* of *Activity 6.03*, *Panic on Invalid
    Data Submission*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `defer` function to the `validateRoutingNumber` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `defer` function, check for an error being returned from the `recover()`
    function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If there is an error, print the error from the `recover()` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The only change is adding a deferred function:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: At the command line, navigate to the directory used in *step 1*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the command line, type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `go build` command will compile your program and create an executable named
    after the directory you used in *step 1*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Type the name of the file created in *step 6* and hit *Enter* to run the executable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The expected output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.16: Recovering from panic on an invalid routing number'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14177_06_16.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.16: Recovering from panic on an invalid routing number'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 7: Interfaces'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 7.01: Calculating Pay and Performance Review'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `main.go` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the `main.go` file, we have a `main` package and we need to import the
    `errors`, `fmt`, and `os` packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `Employee` struct as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `Developer` struct. The `Developer` struct has the `Employee` struct
    embedded into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `Manager` struct; it will have the `Employee` struct embedded into
    it as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `Pay` interface will be used by both the `Manager` and `Developer` types
    to calculate their pay:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `FullName()` method to the `Developer` struct. This is used to concatenate
    the developer''s `FirstName` and `LastName` and return it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the `Pay()` method for the developer that will implement the `Payer`
    interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `Developer` struct satisfies the `Payer` interface by having a method called
    `Pay` that returns a string and a float64\. The `Developer Pay()` method returns
    `fullName` of the developer and returns the year''s pay by calculating `Developer
    HourlRate * HoursWorkedInYear`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the `Pay()` method for the `Manager` struct that will implement the `Payer`
    interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `Manager` struct satisfies the `Payer{}` interface by having a method called
    `Pay()` that returns a string and a `float64`. The `Manager Pay` method returns
    `fullName` of the `Manager` struct and returns the year''s pay by calculating
    the `Manager` salary plus the `Manager` salary times the manager''s `CommissionRate`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `payDetails()` function, which accepts a `Payer{}` interface. It
    will call the `Pay()` method of the type that is passed in; the `Pay()` method
    is required for the `Payer` interface. Print `fullName` and `yearPay` that gets
    returned from the `Pay()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `payDetails()` function accepts a `Payer{}` interface. It then prints `fullName`
    and `yearPay`, which get returned from the `Pay()` method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Inside the `main` function, we need to create a `Developer` type and `Manager`
    type and set their field values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Call `payDetails()` and pass the developer and manager as arguments. Since `Developer`
    and `Manager` both satisfy the `Payer{}` interface, we can pass them to the `payDetails()`
    function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `main` function, we initialize `d` as a struct literal of `Developer`
    and `m` as a struct literal of `Manager`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now need to create the data for the employee review for the developer. We
    will make a map with a key of string and an interface for the value. As you may
    recall, different managers can use a numeric value or a string value for the rating
    to be assigned to the category:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the review rating, we need to be able to convert the string rating for
    the category to an integer version of the category. We will create the `convertReviewToInt()`
    function to perform this conversion by using a `switch case` statement. The `switch`
    statement on the string looks at the different string versions of the rating and
    returns the integer version of the rating. If the string version of the rating
    is not found, the default clause is executed and returns an error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We need to create a function called `OverallReview()` that accepts an interface
    and returns an integer and an error.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Recall that our review process provides strings and integers for the rating;
    that is why this function accepts an interface so that we can evaluate either
    type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We use the switch type code structure to determine the interface concrete type.
    The `v` variable gets assigned the concrete type of `i`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The only valid types for the rating are `int` and a `string`. Anything else
    is considered invalid and causes the default statement to be executed. The default
    statement will return an error if the type is not found in the `case` statements.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If the type is `int`, it will simply return it as an `int`. If the interface
    concrete type is a string, the code in the `case` `string` will execute. It will
    pass the string to the `convertReviewToInt(v)` function. This function, as explained
    earlier, will do a lookup of the string version of the rating and return the integer
    correspondent:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the `ReviewRating()` method to perform the calculation for the
    developer rating. The `Developer` `ReviewRating()` method performs the calculation
    for the `Review`. It loops over the `d.Review` field that is of the `map[string]interface{}`
    type. It passes each interface value to the `OverallReview(v)` function to get
    the integer value of the rating. Each loop iteration adds that rating to a total
    variable. It then calculates the average of the review and prints the results.
    Here are the results of the performance rating:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `main()` function, call `ReviewRating()` and print any errors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, call the `payDetails()` function for the `Developer` type and the `Manager`
    type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build the program by running `go build` at the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the program by typing in the name of the executable at the command line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The expected output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: 'Chapter 8: Packages'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 8.01: Creating a Function to Calculate Payroll and Performance Review'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'All directories and files should be created inside of `$GOPATH`:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a directory called `Activity8.01`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a directory called `pay` and `payroll` inside `Activity8.01`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a file called `main.go` inside `Chapter08/Activity8.01/pay`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the following files: `developer.go`, `employee.go`, and `manager.go`
    inside `payroll`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The directory structure and files should look similar to the following screenshot:![Figure
    8.16: Program directory structure'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B14177_08_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.16: Program directory structure'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Inside `Chapter08/Activity8.01/payroll/developer.go`, declare the package as
    `payroll`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Developer` type, and the following methods, `Pay()` and `ReviewRating()`,
    will all be exportable, so the first letter needs to be capitalized. This means
    that they are visible to other packages outside of `payroll`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From [https://packt.live/2YNnfS6](https://packt.live/2YNnfS6), move the code
    that relates to the developer type and methods to the `Chapter08/Activity8.01/payroll/developer.go`
    file. It should look like the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside `Chapter08/Activity8.01/payroll/employee.go`, declare the package as
    `payroll`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Employee` type, `Payer` interface, and its methods will all be exportable,
    so the first letter needs to be capitalized. This means that they are visible
    to other packages outside of `payroll`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From [https://packt.live/2YNnfS6](https://packt.live/2YNnfS6), move the code
    that relates to the employee type and methods to `Chapter08/Activity8.01/payroll/employee.go
    file`. It should look like the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE217]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside `Chapter08/Activity8.01/payroll/manager.go`, declare `package` as `payroll`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE218]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In `manager.go`, the `Manager` type and its methods will be exportable. All
    the types and methods are exportable because the first letter is capitalized.
    This means that they are visible to other packages outside of `payroll`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From [https://packt.live/2YNnfS6](https://packt.live/2YNnfS6), move the code
    that relates to the employee type and methods to `Chapter08/Activity8.01/payroll/manager.go
    file`. It should look like the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `developer.go`, `employee.go`, and `manager.go` files make up the `payroll`
    package. Even though the `payroll` package is split up between three files: `developer.go`,
    `employee.go`, and `manager.go`, they are all accessible across files in the `payroll`
    package. Every file in this directory belongs to the `payroll` package.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, in the `Chapter08/Activity8.01/pay/main.go` file, by looking at the `package`
    declaration, we can see this is an executable package. This is because any package
    that is the main package is an executable. We also know that since this is the
    main package, it will have a `main()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We know from the initialization process that the packages will have their variables
    and `init()` functions initialized first. In the `import` declaration, we are
    importing our `payroll` package. The `payroll` package is also going to be aliased
    as `pr`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `main` package `employeeReview` variable will be initialized next, after
    the `import` items:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the `init()` function. It will run before the other functions
    in the `main` package. It will greet users with a message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE223]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is our second `init()` function in the `main` package and it will run
    next. It initializes the `employeeReview` variables to values that will be used
    in this package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now get to the `main()` function. Every main package has a `main()` function.
    This is the entry point to our executable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We alias our payroll in the `import` declaration with `pr`. We initialize our
    exportable `Developer` type through the `payroll` alias of `pr`. Since `Developer`
    in the `payroll` package is exportable, we will have visibility of it from the
    `main` package. This is also true for the `Employee` type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE226]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We alias our payroll in the `import` declaration with `pr`. We initialize our
    exportable `Manager` type through the `payroll` alias of `pr`. Since `Manager`
    in the `payroll` package is exportable, we have visibility of it from the `main`
    package. This is also true for the `Employee` type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `Developer` method, `ReviewRating()` is also exportable. This allows us
    to call that method from the `payroll` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `PayDetails` function is exportable, and we can also invoke the function
    in the `payroll` package. We call it with the alias of `pr`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE229]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: At the command line, go to the `/Exercise8.01/Activity8.01/pay` directory structure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the command line, type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE230]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `go build` command will compile your program and create an executable named
    after the `dir` area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the executable name and hit *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE231]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The result should be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE232]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Chapter 9: Basic Debugging'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 9.01: Building a Program to Validate Social Security Numbers'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'All directories and files created should be within your `$GOPATH`:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a directory called `Activity9.01` inside the `Chapter09` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a file called `main.go` inside the `Chapter09/Activity9.01/` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using Visual Studio Code, open the `main.go` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the following code to `main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is the `main` function to build from:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE233]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following custom error types. The custom errors that we will be using
    to log in to our program. These custom errors will be returned by their respective
    functions. They will appear in the log where applicable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE234]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function that will check to see whether the SSN length is valid. If
    the length is not 9, return an error to include the details of which SSN caused
    the custom error, `ErrInvalidSSNLength`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE235]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function that will check to see whether all the characters in the
    SSN are numbers. If the SSN is invalid, return an error to include the details
    of which SSN caused the custom error, `ErrInvalidSSNNumbers`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE236]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function that will check to see whether the SSN starts with 000\.
    If the SSN is invalid, return an error to include the details of which SSN caused
    the custom error, `ErrInvalidSSNPrefix`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE237]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function that will check that if the SSN starts with a 9, then the
    fourth digit of an SSN should be a 7 or a 9\. If the SSN is invalid, return an
    error to include the details of which SSN caused the custom error, `ErrInvalidSSNDigitPlace`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `main()` function, set the flags for our logging:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE239]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize our `validateSSN` slice to contain various SSN numbers that we will
    be validating:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE240]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the Go representation of the `validateSSN` variable using `%#v`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE241]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create a `for` loop that will iterate over the slice of SSNs using a
    `range` clause:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `for` loop, for each SSN, we want to print some details about the `ssn`.
    We want to print the current entry order of the SSN in the slice that we are validating
    using the `%d` verb. Finally, we need to print the total number of items in the
    slice using the `%d` verb:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE243]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove any dashes from our SSN:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call each of the functions we are using for validating the SSN. Log the error
    that gets returned from the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE245]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the command line, change the directory using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE246]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In *Exercise 9.02*, *Printing Decimal, Binary, and Hex Values*, directory,
    type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE247]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Type the executable that was created from the `go build` command and press *Enter*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The expected output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.15: Validating the SSN output'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14177_09_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.15: Validating the SSN output'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 10: About Time'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 10.01: Formatting a Date According to User Requirements'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `Chapter_10_Activity_1.go` and initialize it with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE248]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Capture the following values: `date`, `day`, `month`, `year`, `hour`, `minute`,
    and `second`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE249]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the concatenated output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE250]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The expected output is as follows (note that this depends on when you run the
    code):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE251]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 10.02: Enforcing a Specific Format of Date and Time'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `Chapter_10_Activity_2.go` and initialize the script as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE252]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Capture the following values: `date`, `day`, `month`, `year`, `hour`, `minute`,
    and `second`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE253]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the concatenated output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE254]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The expected output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE255]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 10.03: Measuring Elapsed Time'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `Chapter_10_Activity_3.go` and initialize it in the following
    way:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE256]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Capture the `start` time of execution in a variable, and sleep for 2 seconds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE257]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Capture the end of execution in a variable and calculate the length:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE258]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print out how long it took to execute `sleep`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE259]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The expected output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE260]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 10.04: Calculating the Future Date and Time'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `Chapter_10_Activity_4.go` and initialize it in the following
    way:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE261]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Capture and print the `current` time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE262]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calculate the specified duration and create a variable called `Future`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE263]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print out the time value of `Future` in ANSIC format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE264]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The expected output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE265]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 10.05: Printing the Local Time in Different Time Zones'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `Chapter_10_Activity_5.go` and initialize it the following
    way:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE266]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Capture the following values: `Current`, `NYtime`, and `LA`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE267]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print out the values with the following format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE268]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The expected output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE269]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Chapter 11: Encoding and Decoding (JSON)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 11.01: Mimicking a Customer Order Using JSON'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'All directories and files created need to be created within your `$GOPATH`:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a directory called `Activity11.01` within a directory called `Chapter11`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a file called `main.go` inside `Chapter11/Activity11.01`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using Visual Studio Code, open the newly created `main.go` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following package name and import statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE270]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following `customer` `struct` with the JSON tags set accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE271]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following `order` `struct` with the JSON tags set accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE272]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following `item` `struct` with the JSON tags set accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE273]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following `address` `struct` with the JSON tags set accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE274]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a method on the customer type called `Total()`. This method will calculate
    the `TotalPrice` of the `PurchaseOrder` for the customer type. The calculation
    is, for each item, `Quantity * price`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE275]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `main()` function with `jsonData []byte`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE276]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to validate that `jsonData` is valid JSON. If it is not, print
    a message and exit the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE277]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare a variable of the customer type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE278]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Unmarshal `jsonData` into the customer variable. Check for any errors, and
    if there is an error, print the error and exit the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE279]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare a variable of the `item{}` type and set all the fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE280]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare another variable of the `item{}` type and set all the fields, except
    for the `Description` field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE281]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the two newly created items to the customer order''s `OrderDetail`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE282]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we have all of our items, we can now calculate the price by calling
    the `c.Total()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE283]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set some `PurchaseOrder` fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE284]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Marshal the customer into JSON. Properly set the indention so that the JSON
    can be easily read. Check for any errors and if there is an error, print the message,
    and then exit the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE285]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the JSON:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE286]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build the program by running `go build` at the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE287]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the executable by typing in the name of the executable and then hitting
    *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The results are as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.22: Customer order printout'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14177_11_22.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 11.22: Customer order printout'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 12: Files and Systems'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 12.01: Parsing Bank Transaction Files'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: All directories and files created should be inside your `$GOPATH`.
  prefs: []
  type: TYPE_NORMAL
- en: Create a `Chapter12/Activity12.01/` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside `Chapter12/Activity12.01/`, create a `main.go` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the `main.go` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE288]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create budget category types for fuel, food, mortgage, repairs, insurance,
    utilities, and retirement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE289]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create our custom error type for when the budget category cannot be found:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE290]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create our `transaction` `struct` that will hold the data from our bank''s
    transaction file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE291]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `main()` function, we need to create two flags. The first flag to
    create is `bankFile`. The `bankFile` variable is the CSV transaction file. Define
    our flags for the `bankFile` variable. The flag type is a string. The CLI will
    have `-c`; this is used to store the location of the CSV `bankFile`. The default
    value is an empty string, so if the flag does not get set, the value for it will
    be an empty string. The `bankFile` variable is the address that stores the value
    of the flag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE292]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next flag will be for our `logFile`. This is the file that will be used
    for logging errors. Define our flags for the log file. The flag type is a string.
    The CLI will have `-l`; this is used to store the location of the `logFile` variable.
    The default value is an empty string, so if the flag does not get set, the value
    for it will be an empty string. The `logFile` variable is the address that stores
    the value of the flag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE293]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After defining the flags, you must call `flag.Parse()` to parse the command
    line into the defined flags. Calling `flag.Parse()` places the argument for `-value`
    into `*bankFile` and `*logFile`. Once you have called `flag.Parse()`, the flags
    will be available:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE294]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our `bankFile` variable is required, so we need to ensure it was provided.
    When we define our flags, we set the default value to an empty string. If the
    value of `*bankFile` is an empty string, we know that it was not properly set.
    If `*bankFile` was not provided, we print a message that the field is required
    along with the `usage` statement. Then, exit the program:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE295]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the CSV file was not provided, you should get the following message:![Figure
    12.23: The csvFile is required message'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B14177_12_23.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 12.23: The csvFile is required message'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `logfile` variable is required and we need to ensure it was provided. Implement
    the same code you performed in the previous step except for `logfile`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE296]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Implement code to check and see whether the `bankFile` variable exists. We are
    calling `os.Stat()` on the `*bankFile` file to check to see whether it exists.
    The `os.Stat()` method will return a `FileInfo` if the file exists. If not, `FileInfo`
    will be `nil` and an error will be returned instead.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `os.Stat()` method can return multiple errors. We must inspect the error
    to determine whether the error is due to the file not being there. The standard
    library provides `os.IsNotExist(error)`, which can be used to check to see whether
    the error is the result of the file not existing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE297]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Likewise, check to see whether the log file exists. If it does, we need to
    delete it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE298]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, open the `bankFile` variable. Upon opening `bankFile`, the `os.Open` function
    returns an `*os.File` type that satisfies the `io.Reader` interface, which will
    allow us to pass it to the next function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As always, check to see whether an error was returned. If so, display the error
    and exit the program:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE299]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will call the `parseBankFile()` function; this is where the bulk of the
    work occurs. It will transform the CSV file into our transaction struct. We then
    need to iterate over the slice of transactions and print the data from the transaction:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE300]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function called `parseBankFile(bankTransaction io.Reader, logFile
    string) []transaction`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE301]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a reader for the CSV data. The `NewReader` method takes an argument of
    `io.Reader` and returns a type of `Reader` that is used to read the CSV data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a variable of type slice of `transaction`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a variable to detect the header of the CSV file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE302]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Implement code that reads each record in one at a time in an infinite loop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After each record we read, we check first to see whether it is the end of the
    file (`io.EOF`). We need to perform this check to allow us to break out of our
    infinite loop when it reaches the EOF.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `r.Read()` method reads one record; this is a slice of fields from the
    `r` variable. It returns that record as `[]string`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE303]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will use the `header` variable as a flag. When header fields are provided,
    they are typically the first row of the file. We do not need to process the column
    headers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE304]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Currently, our first loop iterates over the CSV file, but we also need a loop
    that iterates over each column in the record. The record is a slice of fields.
    `idx` is the position of the field in the slice:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE305]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will use a `switch` statement on the `idx` (index) of the slice to identify
    the data that is stored at that position:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE306]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Data from the CSV file is in string format; we need to perform various conversions
    for the fields in the CSV file. The first field is the ID. We need to ensure that
    there are no trailing spaces in the field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to convert the field from a string to an `int`, since our struct is
    of the integer type for the `id` field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE307]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The second index value is `1`. This column contains the data for the `payee`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE308]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The third index value is `2`. This column contains the data for the spent column
    in the `bankFile` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`spent` is of the `float` type, so we are converting the `string` type from
    the `spent` column to a `float` type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE309]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The third index value is `3`. This column contains the data for the category
    provided by the bank.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We need to convert the CSV file category column to our `budgetCategory` type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the case statement for the category, we check for any errors returned
    from the `convertToBudgetCategory` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If there is an error, we do not want to stop processing the CSV bank file,
    so we write the error to a log via the `writeErrorToLog` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE310]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We are at the end of the loop for the fields in the record. We now need to
    append our transaction to the slice of transactions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE311]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`header` was `true` at the start of the function; we will set it to `false`,
    which indicates that in the rest of the CSV file, we will be parsing the data
    and not the `header` information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE312]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We have completed parsing the CSV file. We now need to return the slice of
    transactions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE313]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a function named `convertToBudgetCategory(value string)(budgetCategory)`.
    This function is responsible for mapping the bank categories to our defined categories.
    If a category is not found, it will return the `ErrInvalidBudgetCategory` error.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use a `switch` statement that evaluates each value. When it matches, return
    the respective `budgetCategory` type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE314]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a `writeErrorToLog(msg string, err error, data string, logFile string)
    error` function. This function will write a message to the log file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, it will need to format the data about the error to include the `msg`,
    `error`, and the `data`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE315]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the program:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE316]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is a possible output from the application:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 12.24: Activity output'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14177_12_24.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.24: Activity output'
  prefs: []
  type: TYPE_NORMAL
- en: 'The possible contents of the `log.log` file are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.25: The log.log content'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14177_12_25.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.25: The log.log content'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 13: SQL and Databases'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 13.1: Holding User Data in a Table'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Initialize your script with the appropriate imports. Let''s call it `main.go`.
    Prepare an empty `main()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE317]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s define the `struct` that will hold the users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE318]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now the time has come to create two users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE319]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s open the connection to our `Postgres` server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE320]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We should use the `Ping()` function to see whether the connectivity is OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE321]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we can create a multiline string for our table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE322]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the string is ready, we should create our table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE323]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the `users` struct, we can construct a `for` loop to insert the users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE324]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now with the users in the database, we can update the appropriate field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE325]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last task is to remove the `user` with `ID=2`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE326]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Since our job is done, we should close the connection to the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE327]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Upon successful completion, you should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.10: Possible output'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14177_13_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.10: Possible output'
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 13.2: Finding Messages of Specific Users'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Initialize your script with the appropriate imports. Let''s call it `main.go`.
    Prepare an empty `main()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE328]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s define a `struct` that will hold the messages we want to insert:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE329]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will need four variables that will be used later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE330]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `reader` function that will acquire the input from the user when the
    time comes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE331]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create the actual messages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE332]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Connect to the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE333]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the connectivity to the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE334]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the connection is fine, we can craft our table creation script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE335]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the table to hold the messages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE336]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the table is ready, insert the messages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE337]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that you have messages, you can ask for the user''s name to look for when
    filtering the messages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE338]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following query will give us the desired result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE339]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now execute the filter query and check how many records were returned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE340]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Based on the number of results, print the appropriate messages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE341]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, close the database connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE342]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should be the output, depending on how you fill your database with usernames
    and messages:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.11: Expected output'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14177_13_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.11: Expected output'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 14: Using the Go HTTP Client'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 14.01: Requesting Data from a Web Server and Processing the Response'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the necessary imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE343]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, `encoding/json` is used to parse the response and marshal it into the
    structs. `fmt` is used to print out the counts and `io/ioutil` is used to read
    in the response body. `log` is used if something goes wrong to output the error.
    `net/http` is what we use to do the GET request.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create structs to parse the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE344]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function called `getDataAndParseResponse()` that returns two integers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE345]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Send a `GET` request to the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE346]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Parse the response data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE347]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Loop through the names and count the occurrences of each:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE348]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Return the counts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE349]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the counts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE350]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is the code for the server of this activity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE351]'
  prefs: []
  type: TYPE_PRE
- en: 'Add this code to the `server.go` file you created and run it. This will create
    a server you can connect your client to. Once you have created it, you should
    be able to run it and see a similar output to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.10: Possible output'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14177_14_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.10: Possible output'
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 14.02: Sending Data to a Web Server and Checking Whether the Data
    Was Received Using POST and GET'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add all the required imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE352]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the structs needed to send requests and receive responses:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE353]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `addNameAndParseResponse` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE354]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `name` struct, `Marshal` it to `json`, and POST it to the URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE355]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Parse the response from the POST request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE356]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check that the response returns OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE357]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `getDataAndParseResponse` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE358]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Send a GET request to the server and read the body:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE359]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Unmarshal the response into the `Names` struct and return the `names` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE360]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `main` function to add names, request the names from the server, and
    print them out:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE361]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The server code is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE362]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the server and run your client. The client''s output should be similar
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.11: Possible output'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14177_14_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.11: Possible output'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 15: HTTP Servers'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 15.01: Adding a Page Counter to an HTML Page'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we import the necessary packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE363]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, "`net/http`" is the usual package for http communication, "`log`" is the
    package for logging (in this case to the standard output), and "`fmt`" is the
    package used to format input and output. This can be used to send messages to
    the standard output, but we use it here just as a message formatter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We define here a type called `PageWithCounter`, which represents our handler,
    can count visits, and has a heading and some content for the page. The counter
    will increase every time the page loads:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE364]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is the standard handler function for any struct implementing the `http.Handler`
    interface. Note first the `*` in the method receiver. In this method, we want
    to modify a struct's attribute to increment the counter. In order to do so, we
    need to specify that our method is received by a pointer so that we modify the
    counter permanently. Without the pointer receiver, we would always see `1` in
    the page (you can try to modify this and see for yourself).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, increase the counter, and then we format a string with some HTML tags.
    The `fmt.Sprintf` function injects the variables on the right in the place where
    the placeholders, `%s` and `%d`, are located. The first placeholder expects a
    string, while the second expects a number. After that, we write, as usual, the
    whole string as a slice of bytes in relation to the response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE365]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, we create the `main()` function and we set up three handlers, one with
    the heading `hello world` and some content, while the other two handlers represent
    the first two chapters of your book, so are instantiated accordingly. Note that
    the counter is not explicitly set since any integer will default to `0`, which
    is where our counter starts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE366]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the three handlers to the routes, `/`, `/chapter1`, and `/chapter2`, setting
    them to use the handlers created previously. Note that we need to pass references
    with `&` as the `ServeHTTP` method has a pointer receiver:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE367]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, complete the code listening to a port:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE368]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you run the server, you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.39: Output on the browser when you run the server for the first
    time'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14177_15_39.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.39: Output on the browser when you run the server for the first time'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you refresh the page, you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.40: Output on the browser when you run the server for the second
    time'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14177_15_40.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.40: Output on the browser when you run the server for the second
    time'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, navigate to `chapter 1` by typing `localhost:8080/chapter1` in the address
    bar. You should be able to see something along the lines of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.41: Output on the browser when you visit the chapter1 page for
    the first time'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14177_15_41.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.41: Output on the browser when you visit the chapter1 page for the
    first time'
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, navigate to *chapter 2*, and you should be able to see the following
    increment in terms of the number of views:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.42: Output on the browser when you visit the chapter2 page for
    the first time'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14177_15_42.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.42: Output on the browser when you visit the chapter2 page for the
    first time'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you revisit *chapter 1*, you should see an increase in the number of views
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.43: Output on the browser when you visit the chapter1 page for
    the second time'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14177_15_43.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.43: Output on the browser when you visit the chapter1 page for the
    second time'
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 15.02: Serving a Request with a JSON Payload'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Although your browser may show the JSON document differently, the full solution
    to this activity is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We create the package and add the necessary imports, where "`encoding/json`"
    is the one used for formatting our document as a JSON string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE369]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We create the `PageWithCounter` struct, which looks exactly like the one in
    `Activity 1`. However, some JSON tags need to be added. These tags ensure that
    when converting the struct into a JSON string, the attributes assume a specific
    name. `Content` will become `content`, but `Heading` will become `title` and `Counter`
    will become `views`. Note that all the attributes are now capitalized. As you
    already know, capitalizing the attributes makes them exported, meaning that every
    other package can see, and hence use, them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE370]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We create the usual handler method to serve the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE371]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We increase the counter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE372]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we marshal the struct itself, `h`, into JSON through the `json.Marshal`
    method, which returns an array of bytes representing the JSON document and an
    error. Here is where the exported attributes are important. The marshaling function
    could not otherwise see the attributes and could not convert them, resulting in
    a JSON string representing an empty document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE373]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We check for an error and, in case there is one, we write the code `400` to
    the response header. This means that you would not see the actual page in case
    of a marshaling error, but an error message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE374]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, if there is no error, we write the JSON-encoded struct to the response
    writer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE375]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The remainder of the code is almost identical to that in *Activity 15.01*,
    the only difference being that the `PageWithCounter` structs are instantiated
    with capitalized attributes, given that they are now all exported:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE376]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running your server, you should see the following for the assigned routes:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B14177_15_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.44: Expected output when the handler is /'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B14177_15_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.45: Expected output when the handler is /chapter1'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.46: Expected output when the handler is /chapter2'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14177_15_46.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.46: Expected output when the handler is /chapter2'
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 15.03: External Template'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an HTML file called `index.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE377]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the body, now add the template tags for the header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE378]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can see that there is an `if` statement that displays the `Name` attribute
    if it is not empty, otherwise it displays the `visitor` string.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, complete the HTML file with a welcome message and the closing tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE379]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create a `main.go` file and start adding the package and imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE380]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create the `Visitor` struct, which is a struct used as a model for our
    template. It only includes the `Name` field, as this is the only thing we care
    about. Note that we have been using structs up to this point as they are safer,
    but you could pass a `map[string]string` to your templates directly and it would
    work. Structs, however, allow us to perform better sanitization. Write the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE381]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create a handler. This is just a struct holding a pointer to a template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE382]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This now needs to implement the handler interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE383]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we need to get the requests in the querystring, so write the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE384]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now need to create a visitor for this request, so execute the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE385]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the name exists, then implode the content to have a string in case we have
    multiple names:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE386]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, execute the template to get the full page and pass it to the response
    writer to serve the file template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE387]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create a function to instantiate a new page with a specific template file,
    returning a `Hello` template pointer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE388]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Parse the template and assign a variable to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE389]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Return the `Hello` template with the template file set for it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE390]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `main()` function to run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE391]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, use the `NewHello` function to create a page for the `index.html` template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE392]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Handle the base path with the instantiated template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE393]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the server on your favorite port and exit in the event of an error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE394]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 15.47: Anonymous visitor page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14177_15_47.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.47: Anonymous visitor page'
  prefs: []
  type: TYPE_NORMAL
- en: 'And the visitor page including the name will look something like the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.48: Visitor page with the name "Will"'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14177_15_48.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.48: Visitor page with the name "Will"'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 16: Concurrent Work'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 16.01: Listing Numbers'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `main.go` file and import the necessary packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE395]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a function called `sum()`, which will use a pointer to a string to hold
    the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE396]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create then the `main()` function to perform the sums:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE397]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s analyze the code in steps:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s look at the `sum()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE398]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we create a function whose signature contains a range, `from`, `to int`,
    and then a WaitGroup, a string pointer that is going to be used to modify the
    value of the shared string, and finally a pointer to a mutex to synchronize the
    work on the string. After that, we create a loop in the defined range.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The next step is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE399]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we lock the execution and add the current value of `i` as string at the
    end of the current value of `s`. Then, we unlock the process and end the loop.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'At this point, we tell the WaitGroup that the routine has finished its computation
    and that it terminates here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE400]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we define the `main()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE401]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We set a starting string to `""`, then we instantiate a `mutex` and a WaitGroup.
    The code is then pretty similar to what you've seen in the previous exercises,
    which is running the four Goroutines and logging the result.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When you run your program you should see something like this:![Figure 16.5:
    First output when listing numbers'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B14177_16_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 16.5: First output when listing numbers'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'However, if you run it again multiple times, you will see that most likely
    you will have a different result. This is due to concurrency because the order
    of execution by the machine is uncertain:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.6: Second attempt of listing numbers returns with a different order'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14177_16_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 16.6: Second attempt of listing numbers returns with a different order'
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 16.02: Source Files'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `main` package with the following imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE402]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `source()` function to read numbers from a file and send them to
    a channel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE403]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now create the `splitter()` function to receive the numbers and then send them
    to two different channels, one for `odd` numbers and one for `even` numbers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE404]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now write a function to sum the numbers coming in and send the `sum` to an
    outbound channel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE405]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now create a `merger()` function that will output the `sum` of the even and
    odd numbers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE406]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now create the `main()` function, where you initialize all the channels and
    call all the functions you created earlier in order to produce the `sum`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE407]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let's analyze the code in a bit more detail.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `source` function, we have a filename for the input file to open, a
    channel to pipe messages in, and a WaitGroup to notify the end of the process.
    This function will run as two Goroutines, one per input file. Inside this function,
    we read from the file line by line. You should have already learned how to read
    from files, and there are several optimized ways to do that. Here, we just read
    line by line with:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE408]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: So, we are creating a buffered reader on the file `f` and then looping the `ReadString`
    function with the newline character `'\n'` as the delimiter. Be mindful that it
    has to be with single quotes and not `"\n"` because the delimiter is a character
    and not a string.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After that, we handle the errors, and if an end of file error (`EOF)` occurs,
    we just terminate the function. Note that if we don''t do this, the code just
    panics:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE409]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also need to strip the line so that we just have the number:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE410]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we replace the last part of the string, `"\n"`, with an empty string.
    After that we convert the text to an integer and if it is not an integer, we panic
    again. At the end, we just pipe out the number and complete the function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next step is to create a splitting function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE411]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This function has a channel to get numbers from the sources and two channels
    to pipe numbers to; one for the even numbers and one for the odd numbers. A Waitgroup
    is used again to notify the main routine of completion. The purpose of this function
    is to split the numbers so we can loop over the channel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE412]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the for loop, we can identify the odd and even numbers using `switch`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE413]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code splits the numbers depending on the remainder of division by 2\. If
    the remainder is 0, the number is even and is piped to the even channel, odd otherwise.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We close the channels to notify the next process in the line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE414]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now have the splitter, but we need to sum the messages piped in, and this
    is done with a function that''s similar to what you''ve seen in the previous exercises:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE415]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At this point, we need to merge all the results, so we use a merger:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE416]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This function holds the two channels for even and odd numbers, a Waitgroup to
    handle completion, and a name for the result file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We then begin creating the `results.txt` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE417]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We loop over the two channels for odd and even numbers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE418]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And then we write the code to choose the channel based on the type of number:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE419]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Writing to the file is done using the `Write` method, which in turn needs bytes.
    That way, we transform the string containing the type of numbers added (`odd`,
    `even`) and their sum into bytes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We now orchestrate everything in the main function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE420]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We used two Waitgroups here; one for the sources and one for the rest of the
    routines. You will see why soon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we create all the channels we need:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE421]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`out` is the channel used by the source functions to pipe the messages to the
    splitter, `odd` and `even` are the ones where the numbers are piped for being
    summed, and the last two are the ones holding a single number with the sum.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We then start all the routines we need:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE422]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We then wait for the routines to finish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE423]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Please note that here, we could have used more than two files. You could have
    even used an arbitrary number of files. Hence, there is no way for the splitter
    to know how to terminate the execution, so we close the channel after the sources
    have finished piping numbers in.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After that, we have a second Waitgroup for the rest. Essentially, we need to
    keep all the routines running until the last sum has been added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE424]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: While the files you can use as input can be different, use the following two
    files to test the output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`input1.dat`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE425]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`input2.dat`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE426]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note the newline at the end of each file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now that you have created the input file, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE427]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should see a file called `results.txt` with the following content.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE428]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Chapter 17: Using Go Tools'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 17.01: Using gofmt, goimport, go vet, and go get to Correct a File'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run `gofmt` against the file to check for any formatting issues and see that
    they make sense:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE429]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should output a much neater-looking file, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 17.11: Expected output from gofmt'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B14177_17_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 17.11: Expected output from gofmt'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Use the `-w` option on `gofmt` to make the changes to the file and save them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE430]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the imports are correct using `goimports`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE431]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use `goimports` to fix the import statements in the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE432]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The final stage is to use `go vet` to check for any issues the compiler might
    miss. Run it against `main.go` to check for any issues:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE433]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It will find an issue with unreachable code, as shown in the following output:![Figure
    17.12: Expected output from go vet'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B14177_17_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 17.12: Expected output from go vet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Correct the issue by moving the `log.Println("completed")` line so that it
    runs before the `return` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE434]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should ensure that you have the third-party package downloaded by running
    `go get`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE435]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will start the web server:![Figure 17.13: Expected output when running
    the code'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B14177_17_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 17.13: Expected output when running the code'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can check whether it worked by going to `http://localhost:8888` in your
    web browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.14: Expected output when accessing the web server through Firefox'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14177_17_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.14: Expected output when accessing the web server through Firefox'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 18: Security'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 18.01: Authenticating Users on the Application Using Hashed Passwords'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `main.go` file and import the following packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`crypto/sha512`: This package will provide the hashing required to encrypt
    the password.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`database/sql`: The database to store user details will be created using this
    package.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`github.com/mattn/go-sqlite3`: This is a third-party library used to create
    a `sqlite` instance for testing.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE436]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a function called `getConnection()` to initialize a database connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE437]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define helper functions to set up and tear down the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE438]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the `GetPassword()` function to retrieve a user password from the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE439]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a function called `UpdatePassword()` to update the user password in
    the database with a hashed password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE440]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write the `main()` function. In the `main()` function, you should set up a
    database connection and initialize the database with some test data. The `UpdatePassword()`
    function should be called to update the user password to a hashed password. The
    `GetPassword()` function should be called to verify the hashed password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE441]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the program using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE442]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should get the following output.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 18.13: Expected output'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14177_18_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 18.13: Expected output'
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, we have implemented a real-world scenario of storing and verifying
    user passwords with hashing. Should the database details be leaked, the hashed
    passwords, by themselves, will not be useful to the attacker.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 18.02: Creating CA Signed Certificates Using Crypto Libraries'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `main.go` file and import the following packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The crypto packages here will be used to generate and verify x509 certificates:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE443]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function called `generateCert()`, which returns an x509 certificate
    and its private key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE444]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `main()` function to call the `generateCert()` function. This will
    generate a root certificate and a leaf certificate from the root certificate.
    Verify the leaf certificate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE445]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Test the code by running `main.go` using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE446]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output should appear as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE447]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this activity, we have generated x509 public key certificates. We have also
    seen how to use a root certificate to generate a leaf certificate. This can be
    handy when you are trying to implement your own PKI server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 19: Special Features'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 19.01: Defining Build Constraints Using Filenames'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a directory called `custom`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside this directory, create a file called `print_darwin.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define a function called `Print()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE448]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create another file inside the `custom` directory called `print_386.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define a function inside this package called `Print()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE449]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the program using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE450]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE451]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 19.02: Using Wildcard with Go Test'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a directory called `package1`:![Figure 19.5: Directory structure'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B14177_19_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 19.5: Directory structure'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create `run_test.go` in this directory with the following test cases defined:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE452]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the parent directory, create another directory called `package2`:![Figure
    19.6: Directory structure'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B14177_19_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 19.6: Directory structure'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a file called `run_test.go` in this directory with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE453]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run all the test cases using the following command from the parent directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE454]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 19.7: Recursive test with the wildcard pattern](img/B14177_19_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.7: Recursive test with the wildcard pattern'
  prefs: []
  type: TYPE_NORMAL
