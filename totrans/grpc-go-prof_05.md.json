["```go\n$ mkdir chapter5\n$ cp -R chapter4/* chapter5\n```", "```go\n$ cd chapter5\n$ rm -rf proto/dummy\n$ rm -rf bazel-*\n```", "```go\nsyntax = \"proto3\";\npackage todo.v1;\nimport \"google/protobuf/timestamp.proto\";\noption go_package = \"github.com/PacktPublishing/\n  gRPC-Go-for-Professionals/proto/todo/v1\";\nmessage Task {\n  uint64 id = 1;\n  string description = 2;\n  bool done = 3;\n  google.protobuf.Timestamp due_date = 4;\n}\n```", "```go\nmessage AddTaskRequest {\n  string description = 1;\n  google.protobuf.Timestamp due_date = 2;\n}\nmessage AddTaskResponse {\n  uint64 id = 1;\n}\nservice TodoService {\n  rpc AddTask(AddTaskRequest) returns (AddTaskResponse);\n}\n```", "```go\n$ protoc --go_out=. \\\n         --go_opt=paths=source_relative \\\n         --go-grpc_out=. \\\n         --go-grpc_opt=paths=source_relative \\\n           proto/todo/v1/*.proto\n```", "```go\nproto/todo/v1/\n├── todo.pb.go\n├── todo.proto\n└── todo_grpc.pb.go\n```", "```go\ntype Task struct {\n  Id uint64\n  Description string\n  Done bool\n  DueDate *timestamppb.Timestamp\n}\ntype AddTaskRequest struct {\n  Description string\n  DueDate *timestamppb.Timestamp\n}\ntype AddTaskResponse struct {\n  Id uint64\n}\n```", "```go\ntype TodoServiceClient interface {\n  AddTask(ctx context.Context, in *AddTaskRequest, opts\n    ...grpc.CallOption) (*AddTaskResponse, error)\n}\ntype TodoServiceServer interface {\n  AddTask(context.Context, *AddTaskRequest)\n    (*AddTaskResponse, error)\n  mustEmbedUnimplementedTodoServiceServer()\n}\n```", "```go\nfunc RegisterTodoServiceServer(s grpc.ServiceRegistrar, srv\n  TodoServiceServer)\n```", "```go\nfunc (UnimplementedTodoServiceServer) AddTask\n  (context.Context, *AddTaskRequest) (*AddTaskResponse,\n    error) {\n  return nil, status.Errorf(codes.Unimplemented, \"method\n    AddTask not implemented\")\n}\n```", "```go\npackage main\nimport (\n  pb \"github.com/PacktPublishing/gRPC-Go-for-Professionals/proto/    todo/v1\"\n)\ntype server struct {\n  d db\n  pb.UnimplementedTodoServiceServer\n}\n```", "```go\npackage main\nimport \"time\"\ntype db interface {\n  addTask(description string, dueDate time.Time) (uint64,\n    error)\n}\n```", "```go\npackage main\nimport (\n  \"time\"\n  pb \"github.com/PacktPublishing/gRPC-Go-for-Professionals/\n    proto/todo/v1\"\n  \"google.golang.org/protobuf/types/known/timestamppb\"\n)\ntype inMemoryDb struct {\n  tasks []*pb.Task\n}\nfunc New() db {\n  return &inMemoryDb{}\n}\nfunc (d *inMemoryDb) addTask(description string, dueDate\n  time.Time) (uint64, error) {\n  nextId := uint64(len(d.tasks) + 1)\n  task := &pb.Task{\n    Id: nextId,\n    Description: description,\n    DueDate: timestamppb.New(dueDate),\n  }\n\n  d.tasks = append(d.tasks, task)\n  return nextId, nil\n}\n```", "```go\n//go:build in_memory_db\n//...\ntype inMemoryDb struct\nfunc New() db\n```", "```go\n//go:build mongodb\n//...\ntype mongoDb struct\nfunc New() db\n```", "```go\nimport pb \"github.com/PacktPublishing/gRPC-Go-for-Professionals/\n    proto/todo/v1\"\n//...\ns := grpc.NewServer(opts...)\npb.RegisterTodoServiceServer(s, &server{\n  d: New(),\n})\ndefer s.Stop()\n```", "```go\nAddTask(context.Context, *AddTaskRequest)\n  (*AddTaskResponse, error)\n```", "```go\nfunc (s *server) AddTask(_ context.Context, in\n  *pb.AddTaskRequest) (*pb.AddTaskResponse, error) {\n}\n```", "```go\npackage main\nimport (\n  \"context\"\n  pb \"github.com/PacktPublishing/gRPC-Go-for-Professionals/proto/    todo/v1\"\n)\nfunc (s *server) AddTask(_ context.Context, in\n  *pb.AddTaskRequest) (*pb.AddTaskResponse, error) {\n  id, _ := s.d.addTask(in.Description, in.DueDate.AsTime())\n  return &pb.AddTaskResponse{Id: id}, nil\n}\n```", "```go\nimport  (\n  //...\n  google.golang.org/protobuf/types/known/timestamppb\n  pb \"github.com/PacktPublishing/gRPC-Go-for-Professionals/\n  proto/todo/v1\"\n  //...\n)\nfunc addTask(c pb.TodoServiceClient, description string,\n  dueDate time.Time) uint64 {\n}\n```", "```go\nfunc addTask(c pb.TodoServiceClient, description string,\n  dueDate time.Time) uint64 {\n  req := &pb.AddTaskRequest{\n    Description: description,\n    DueDate: timestamppb.New(dueDate),\n  }\n  res, err := c.AddTask(context.Background(), req)\n  //...\n}\n```", "```go\nfunc addTask(c pb.TodoServiceClient, description string,\n  dueDate time.Time) uint64 {\n  //...\n  if err != nil {\n    panic(err)\n  }\n  fmt.Printf(\"added task: %d\\n\", res.Id)\n  return res.Id\n}\n```", "```go\nconn, err := grpc.Dial(addr, opts...)\nif err != nil {\n  log.Fatalf(\"did not connect: %v\", err)\n}\nc := pb.NewTodoServiceClient(conn)\nfmt.Println(\"--------ADD--------\")\ndueDate := time.Now().Add(5 * time.Second)\naddTask(c, \"This is a task\", dueDate)\nfmt.Println(\"-------------------\")\ndefer func(conn *grpc.ClientConn) {\n  /*...*/}(conn)\n```", "```go\n$ go run ./server 0.0.0.0:50051\nlistening at 0.0.0.0:50051\n```", "```go\n$ go run ./client 0.0.0.0:50051\n--------ADD--------\nadded task: 1\n-------------------\n```", "```go\n$ bazel run //:gazelle\n```", "```go\n$ bazel run //server:server 0.0.0.0:50051\nlistening at 0.0.0.0:50051\n```", "```go\n$ bazel run //client:client 0.0.0.0:50051\n--------ADD--------\nadded task: 1\n-------------------\n```", "```go\nmessage ListTasksRequest {\n}\nmessage ListTasksResponse {\n  Task task = 1;\n  bool overdue = 2;\n}\nservice TodoService {\n  //...\n  rpc ListTasks(ListTasksRequest) returns (stream ListTasksResponse);\n}\n```", "```go\ntype db interface {\n  //...\n  getTasks(f func(interface{}) error) error\n}\n```", "```go\nfunc (d *inMemoryDb) getTasks(f func(interface{}) error)\n  error {\n  for _, task := range d.tasks {\n    if err := f(task); err != nil {\n      return err\n    }\n  }\n  return nil\n}\n```", "```go\n$ protoc --go_out=. \\\n         --go_opt=paths=source_relative \\\n         --go-grpc_out=. \\\n         --go-grpc_opt=paths=source_relative \\\n         proto/todo/v1/*.proto\n```", "```go\ntype TodoServiceServer interface {\n  //...\n  ListTasks(*ListTasksRequest, TodoService_ListTasksServer)\n    error\n  //...\n}\n```", "```go\ntype TodoService_ListTasksServer interface {\n  Send(*ListTasksResponse) error\n  grpc.ServerStream\n}\n```", "```go\nfunc (s *server) ListTasks(req *pb.ListTasksRequest, stream\n  pb.TodoService_ListTasksServer) error\n```", "```go\nfunc (s *server) ListTasks(req *pb.ListTasksRequest, stream\n  pb.TodoService_ListTasksServer) error {\n  return s.d.getTasks(func(t interface{}) error {\n    task := t.(*pb.Task)\n    overdue := task.DueDate != nil && !task.Done &&\n      task.DueDate.AsTime().Before(time.Now().UTC())\n    err := stream.Send(&pb.ListTasksResponse{\n      Task: task,\n      Overdue: overdue,\n    })\n    return err\n  })\n}\n```", "```go\nListTasks(ctx context.Context, in *ListTasksRequest, opts\n...grpc.CallOption) (TodoService_ListTasksClient, error)\n```", "```go\ntype TodoService_ListTasksClient interface {\n  Recv() (*ListTasksResponse, error)\n  grpc.ClientStream\n}\n```", "```go\nfunc printTasks(c pb.TodoServiceClient) {\n  req := &pb.ListTasksRequest{}\n  stream, err := c.ListTasks(context.Background(), req)\n  if err != nil {\n    log.Fatalf(\"unexpected error: %v\", err)\n  }\n  for {\n    res, err := stream.Recv()\n    if err == io.EOF {\n      break\n    }\n    if err != nil {\n      log.Fatalf(\"unexpected error: %v\", err)\n    }\n    fmt.Println(res.Task.String(), \"overdue: \",\n       res.Overdue)\n  }\n}\n```", "```go\nfmt.Println(\"--------ADD--------\")\n//...\nfmt.Println(\"--------LIST-------\")\nprintTasks(c)\nfmt.Println(\"-------------------\")\n```", "```go\n$ go run ./server 0.0.0.0:50051\nlistening at 0.0.0.0:50051\n```", "```go\n$ go run ./client 0.0.0.0:50051\n//...\n--------LIST-------\nid:1 description:\"This is a task\" due_date:\n  {seconds:1680158076 nanos:574914000} overdue: false\n-------------------\n```", "```go\nrpc ListTasks(ListTasksRequest) returns (stream ListTasksResponse);\n```", "```go\nmessage UpdateTasksRequest {\n  Task task = 1;\n}\nmessage UpdateTasksResponse {\n}\nservice TodoService {\n  //...\n  rpc UpdateTasks(stream UpdateTasksRequest) returns\n    (UpdateTasksResponse);\n}\n```", "```go\ntype db interface {\n  //...\n  updateTask(id uint64, description string, dueDate\n    time.Time, done bool) error\n}\n```", "```go\nfunc (d *inMemoryDb) updateTask(id uint64, description\n  string, dueDate time.Time, done bool) error {\n  for i, task := range d.tasks {\n    if task.Id == id {\n      t := d.tasks[i]\n      t.Description = description\n      t.DueDate = timestamppb.New(dueDate)\n      t.Done = done\n      return nil\n    }\n  }\n  return fmt.Errorf(\"task with id %d not found\", id)\n}\n```", "```go\n$ protoc --go_out=. \\\n         --go_opt=paths=source_relative \\\n         --go-grpc_out=. \\\n         --go-grpc_opt=paths=source_relative \\\n         proto/todo/v1/*.proto\n```", "```go\ntype TodoServiceServer interface {\n  //...\n  UpdateTasks(TodoService_UpdateTasksServer) error\n  //...\n}\n```", "```go\ntype TodoService_UpdateTasksServer interface {\n  SendAndClose(*UpdateTasksResponse) error\n  Recv() (*UpdateTasksRequest, error)\n  grpc.ServerStream\n}\n```", "```go\nfunc (s *server) UpdateTasks(stream pb.TodoService\n  _UpdateTasksServer) error {\n  for {\n    req, err := stream.Recv()\n    if err == io.EOF {\n      return stream.SendAndClose(&pb.UpdateTasksResponse{})\n    }\n    if err != nil {\n      return err\n    }\n    s.d.updateTask(\n      req.Task.Id,\n      req.Task.Description,\n      req.Task.DueDate.AsTime(),\n      req.Task.Done,\n    )\n  }\n}\n```", "```go\nUpdateTasks(ctx context.Context, opts ...grpc.CallOption)\n  (TodoService_UpdateTasksClient, error)\n```", "```go\ntype TodoService_UpdateTasksClient interface {\n  Send(*UpdateTasksRequest) error\n  CloseAndRecv() (*UpdateTasksResponse, error)\n  grpc.ClientStream\n}\n```", "```go\nfunc updateTasks(c pb.TodoServiceClient, reqs\n...*pb.UpdateTasksRequest) {\n  stream, err := c.UpdateTasks(context.Background())\n  if err != nil {\n    log.Fatalf(\"unexpected error: %v\", err)\n  }\n  for _, req := range reqs {\n    err := stream.Send(req)\n    if err != nil {\n      return\n    }\n    if err != nil {\n      log.Fatalf(\"unexpected error: %v\", err)\n    }\n    if req.Task != nil {\n      fmt.Printf(\"updated task with id: %d\\n\", req.Task.Id)\n    }\n  }\n  if _, err = stream.CloseAndRecv(); err != nil {\n    log.Fatalf(\"unexpected error: %v\", err)\n  }\n}\n```", "```go\naddTask(c, \"This is a task\", dueDate)\n```", "```go\nid1 := addTask(c, \"This is a task\", dueDate)\nid2 := addTask(c, \"This is another task\", dueDate)\nid3 := addTask(c, \"And yet another task\", dueDate)\n```", "```go\n[]*pb.UpdateTasksRequest{\n  {Task: &pb.Task{Id: id1, Description: \"A better name for\n    the task\"}},\n  {Task: &pb.Task{Id: id2, DueDate: timestamppb.New\n    (dueDate.Add(5 * time.Hour))}},\n  {Task: &pb.Task{Id: id3, Done: true}},\n}\n```", "```go\nfmt.Println(\"-------UPDATE------\")\nupdateTasks(c, []*pb.UpdateTasksRequest{\n  {Task: &pb.Task{Id: id1, Description: \"A better name for\n    the task\"}},\n  {Task: &pb.Task{Id: id2, DueDate: timestamppb.New\n    (dueDate.Add(5 * time.Hour))}},\n  {Task: &pb.Task{Id: id3, Done: true}},\n}...)\nprintTasks(c)\nfmt.Println(\"-------------------\")\n```", "```go\n$ go run ./server 0.0.0.0:50051\nlistening at 0.0.0.0:50051\n```", "```go\n$ go run ./client 0.0.0.0:50051\n//...\n-------UPDATE------\nupdated task with id: 1\nupdated task with id: 2\nupdated task with id: 3\nid:1  description:\"A better name for the task\"  due_date:{}\nid:2  due_date:{seconds:1680267768  nanos:127075000}\nid:3  done:true  due_date:{}\n-------------------\n```", "```go\nmessage DeleteTasksRequest {\n  uint64 id = 1;\n}\nmessage DeleteTasksResponse {\n}\nservice TodoService {\n  //...\n  rpc DeleteTasks(stream DeleteTasksRequest) returns\n    (stream DeleteTasksResponse);\n}\n```", "```go\ntype db interface {\n  //...\n  deleteTask(id uint64) error\n}\n```", "```go\nfunc (d *inMemoryDb) deleteTask(id uint64) error {\n  for i, task := range d.tasks {\n    if task.Id == id {\n      d.tasks = append(d.tasks[:i], d.tasks[i+1:]...)\n      return nil\n    }\n  }\n  return fmt.Errorf(\"task with id %d not found\", id)\n}\n```", "```go\n$ protoc --go_out=. \\\n         --go_opt=paths=source_relative \\\n         --go-grpc_out=. \\\n         --go-grpc_opt=paths=source_relative \\\n         proto/todo/v1/*.proto\n```", "```go\nDeleteTasks(TodoService_DeleteTasksServer) error\n```", "```go\ntype TodoService_DeleteTasksServer interface {\n  Send(*DeleteTasksResponse) error\n  Recv() (*DeleteTasksRequest, error)\n  grpc.ServerStream\n}\n```", "```go\nfunc (s *server) DeleteTasks(stream\n  pb.TodoService_DeleteTasksServer) error {\n  for {\n    req, err := stream.Recv()\n    if err == io.EOF {\n      return nil\n    }\n    if err != nil {\n      return err\n    }\n    s.d.deleteTask(req.Id)\n    stream.Send(&pb.DeleteTasksResponse{})\n  }\n}\n```", "```go\nDeleteTasks(ctx context.Context, opts ...grpc.CallOption)\n  (TodoService_DeleteTasksClient, error)\n```", "```go\ntype TodoService_DeleteTasksClient interface {\n  Send(*DeleteTasksRequest) error\n  Recv() (*DeleteTasksResponse, error)\n  grpc.ClientStream\n}\n```", "```go\nfunc deleteTasks(c pb.TodoServiceClient, reqs\n...*pb.DeleteTasksRequest) {\n  stream, err := c.DeleteTasks(context.Background())\n  if err != nil {\n    log.Fatalf(\"unexpected error: %v\", err)\n  }\n  waitc := make(chan struct{})\n  go func() {\n    for {\n      _, err := stream.Recv()\n      if err == io.EOF {\n        close(waitc)\n        break\n      }\n      if err != nil {\n        log.Fatalf(\"error while receiving: %v\\n\", err)\n      }\n      log.Println(\"deleted tasks\")\n    }\n  }()\n  for _, req := range reqs {\n    if err := stream.Send(req); err != nil {\n      return\n    }\n  }\n  if err := stream.CloseSend(); err != nil {\n    return\n  }\n  <-waitc\n}\n```", "```go\nfmt.Println(\"-------DELETE------\")\ndeleteTasks(c, []*pb.DeleteTasksRequest{\n  {Id: id1},\n  {Id: id2},\n  {Id: id3},\n}...)\nprintTasks(c)\nfmt.Println(\"-------------------\")\n```", "```go\n$ go run ./server 0.0.0.0:50051\nlistening at 0.0.0.0:50051\n```", "```go\n$ go run ./client 0.0.0.0:50051\n//...\n-------DELETE------\n2023/03/31 18:54:21 deleted tasks\n2023/03/31 18:54:21 deleted tasks\n2023/03/31 18:54:21 deleted tasks\n-------------------\n```"]