["```go\ngo somefunction()\n```", "```go\npackage main\n\nimport (\n \"fmt\"\n \"time\"\n)\n\nfunc runSomeLoop(n int) {\n for i := 0; i < n; i++ {\n fmt.Println(\"Printing:\", i)\n }\n}\nfunc main() {\n go runSomeLoop(10)\n //block the main goroutine for 2 seconds\n time.Sleep(2 * time.Second)\n fmt.Println(\"Hello, playground\")\n}\n```", "```go\nPrinting: 0 \nPrinting: 1 \nPrinting: 2 \nPrinting: 3 \nPrinting: 4 \nPrinting: 5 \nPrinting: 6 \nPrinting: 7 \nPrinting: 8 \nPrinting: 9 \nHello, playground\n```", "```go\npackage main\n\nimport (\n  \"fmt\"\n)\n\nfunc runSomeLoop(n int) {\n  for i := 0; i < n; i++ {\n    fmt.Println(\"Printing:\", i)\n  }\n}\nfunc main() {\n  go runSomeLoop(10)\n  fmt.Println(\"Hello, playground\")\n}\n```", "```go\nHello, playground\n```", "```go\nmyChannel := make(chan int)\n```", "```go\n//myIntValue will host the value received from the channel\nmyIntValue := <-myChannel\n```", "```go\nmyChannel <- 4\n```", "```go\npackage main\n\nimport (\n  \"fmt\"\n  \"time\"\n)\n\nfunc runLoopSend(n int, ch chan int) {\n  for i := 0; i < n; i++ {\n    ch <- i\n  }\n  close(ch)\n}\n\nfunc runLoopReceive(ch chan int) {\n  for {\n    i, ok := <-ch\n    if !ok {\n      break\n    }\n    fmt.Println(\"Received value:\", i)\n  }\n}\n\nfunc main() {\n  myChannel := make(chan int)\n  go runLoopSend(10, myChannel)\n  go runLoopReceive(myChannel)\n  time.Sleep(2 * time.Second)\n}\n```", "```go\nReceived value: 0\nReceived value: 1\nReceived value: 2\nReceived value: 3\nReceived value: 4\nReceived value: 5\nReceived value: 6\nReceived value: 7\nReceived value: 8\nReceived value: 9 \n```", "```go\nclose(ch)\n```", "```go\ni, ok := <-ch\n```", "```go\n  for {\n    i, ok := <-ch\n    if !ok {\n      break\n    }\n    fmt.Println(\"Received value:\", i)\n  }\n```", "```go\n  for i := range ch {\n    fmt.Println(\"Received value:\", i)\n  }\n```", "```go\nReceived value: 0\nReceived value: 1\nReceived value: 2\nReceived value: 3\nReceived value: 4\nReceived value: 5\nReceived value: 6\nReceived value: 7\nReceived value: 8\nReceived value: 9\n```", "```go\nmyBufferedChannel := make(chan int,10)\n```", "```go\nmyBufferedChannel <- 10\n```", "```go\nx := <-myBufferedChannel\n```", "```go\n    select {\n        case i := <-ch:\n          fmt.Println(\"Received value:\", i)\n        case <-time.After(1 * time.Second):\n          fmt.Println(\"timed out\")\n    }\n```", "```go\n    select {\n        case i := <-ch1:\n          fmt.Println(\"Received value on channel ch1:\", i)\n        case ch2 <- 10:\n          fmt.Println(\"Sent value of 10 to channel ch2\")\n        case <-time.After(1 * time.Second):\n          fmt.Println(\"timed out\")\n    }\n```", "```go\n    select {\n        case i := <-ch1:\n          fmt.Println(\"Received value on channel ch1:\", i)\n        case ch2 <- 10:\n          fmt.Println(\"Sent value of 10 to channel ch2\")\n        default:\n          fmt.Println(\"No channel is ready\")\n    }\n```", "```go\nvar myMutex = &sync.Mutex{}\n```", "```go\nmyMutex.Lock()\nmyMap[1] = 100\nmyMutex.Unlock()\n```", "```go\nvar myRWMutex = &sync.RWMutex{}\n```", "```go\nmyRWMutex.RLock()\nfmt.Println(myMap[1])\nmyRWMutex.RUnlock()\n```", "```go\nmyRWMutex.Lock()\nmyMap[2] = 200\nmyRWMutex.Unlock()\n```", "```go\npackage main\n\nimport (\n  \"fmt\"\n  \"time\"\n)\n\nfunc runLoopSend(n int, ch chan int) {\n  for i := 0; i < n; i++ {\n    ch <- i\n  }\n  close(ch)\n}\n\nfunc runLoopReceive(ch chan int) {\n  for {\n    i, ok := <-ch\n    if !ok {\n      break\n    }\n    fmt.Println(\"Received value:\", i)\n  }\n}\n\nfunc main() {\n  myChannel := make(chan int)\n  go runLoopSend(10, myChannel)\n  go runLoopReceive(myChannel)\n  time.Sleep(2 * time.Second)\n}\n```", "```go\npackage main\n\nimport (\n  \"fmt\"\n  \"sync\"\n)\n\n// Create a global waitgroup:\nvar wg = &sync.WaitGroup{}\n\nfunc main() {\n  myChannel := make(chan int)\n  //Increment the wait group internal counter by 2\n  wg.Add(2)\n  go runLoopSend(10, myChannel)\n  go runLoopReceive(myChannel)\n  //Wait till the wait group counter is 0\n  wg.Wait()\n}\n\nfunc runLoopSend(n int, ch chan int) {\n  //Ensure that the wait group counter decrements by one after //our function exits\n  defer wg.Done()\n  for i := 0; i < n; i++ {\n    ch <- i\n  }\n  close(ch)\n}\n\nfunc runLoopReceive(ch chan int) {\n  //Ensure that the wait group counter decrements after our  //function exits\n  defer wg.Done()\n  for {\n    i, ok := <-ch\n    if !ok {\n      break\n    }\n    fmt.Println(\"Received value:\", i)\n  }\n}\n```", "```go\ndefer wg.Done()\n```", "```go\nReceived value: 0\nReceived value: 1\nReceived value: 2\nReceived value: 3\nReceived value: 4\nReceived value: 5\nReceived value: 6\nReceived value: 7\nReceived value: 8\nReceived value: 9\n```"]