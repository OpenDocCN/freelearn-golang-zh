- en: Frontend with React.js
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React.js的前端
- en: In this chapter, we'll take the first step and learn about the upper half of
    the full stack, which is the frontend. To properly build any software product,
    you need to have sufficient practical knowledge to build a good-looking user interface.
    This is vital for building a software product that other people enjoy using.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将迈出第一步，了解全栈的上半部分，即前端。为了正确构建任何软件产品，你需要有足够的实践经验来构建一个美观的用户界面。这对于构建其他人乐于使用的软件产品至关重要。
- en: We'll discuss the powerful React framework, which is one of the most popular
    frontend frameworks on the market today. React allows you to build dynamic websites
    that can respond to data changes in real time. This allows you to build websites
    that are responsive and intelligent. Most of the popular websites on the internet
    today are built with React. We'll be covering React from a very practical point
    of view, so we will dive head-on into how to write React apps, instead of tackling
    theoretical or side topics.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论强大的React框架，它是目前市场上最受欢迎的前端框架之一。React允许你构建能够实时响应数据变化的动态网站。这使得你可以构建响应式和智能的网站。今天互联网上大多数流行的网站都是用React构建的。我们将从非常实用的角度来介绍React，因此我们将直接深入探讨如何编写React应用程序，而不是处理理论或相关主题。
- en: 'In this chapter, we''ll discuss the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: How to construct React applications
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何构建React应用程序
- en: Installing React
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装React
- en: JSX and React elements
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSX和React元素
- en: React components
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React组件
- en: Props
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性
- en: States
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态
- en: React developer tools
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React开发者工具
- en: Prerequisites and technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 先决条件和技术要求
- en: The React framework simply consists of a collection of JavaScript modules that
    we can use to build beautiful, responsive UIs. Because of that, you need some
    JavaScript knowledge to follow this chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: React框架简单来说就是一组我们可以用来构建美观、响应式UI的JavaScript模块。正因为如此，你需要一些JavaScript知识来理解本章内容。
- en: A very good resource to get re-introduced to JavaScript can be found at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常好的资源，可以帮助你重新熟悉JavaScript，可以在 [https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript) 找到。
- en: In this chapter, we'll be primarily using ES6, which can simply be considered
    the new version of JavaScript.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将主要使用ES6，这可以简单地被认为是JavaScript的新版本。
- en: 'There are four core features of ES6 that we''ll come across in this chapter:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将遇到ES6的四个核心特性：
- en: '**Classes**: A class can be considered as a *special function* in JavaScript,
    where you can define internal methods. For more information, please visit [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes).'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类**：在JavaScript中，类可以被看作是一个*特殊函数*，在其中你可以定义内部方法。更多信息，请访问 [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)。'
- en: '**Arrow functions**: An arrow function is JavaScript''s version of an anonymous
    function. For more information, please visit [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**箭头函数**：箭头函数是JavaScript的匿名函数版本。更多信息，请访问 [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions)。'
- en: '**The** `let` **keyword**: The `let` keyword is used to declare a block scope local
    variable. For more information, please visit [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let).'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**let** **关键字**：`let` 关键字用于声明块作用域局部变量。更多信息，请访问 [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let)。'
- en: '**The** `const` **keyword**: The `const` keyword is used to declare local scope
    variables that are constant and cannot change from their initial value. For more
    information, please visit [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const).'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**const** **关键字**：`const` 关键字用于声明局部作用域的常量变量，其初始值不能改变。更多信息，请访问 [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const)。'
- en: The GoMusic project
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GoMusic项目
- en: In this chapter, we'll leverage the power of React to build a products page
    for the GoMusic store. The GoMusic store is the main full stack project that we'll
    be building throughout this book, and it is basically an online store of musical
    instruments. The frontend will be built with React, whereas the backend will be
    built with Go.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将利用React的力量为GoMusic商店构建一个产品页面。GoMusic商店是我们将在整本书中构建的主要全栈项目，它基本上是一个乐器在线商店。前端将使用React构建，而后端将使用Go构建。
- en: 'Here is the product page we''re building today:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们今天正在构建的产品页面：
- en: '![](img/42570f36-5716-480d-aa15-884886a5549a.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/42570f36-5716-480d-aa15-884886a5549a.png)'
- en: We'll follow a step-by-step approach to building this page. This web page will
    not be ordinary. We'll make use of the powerful React development tools to update
    this page in real time whenever we make a change. To further demonstrate the capabilities
    of React and its tools, the web page will rely on a JSON file, which will contain
    information about the images, the names, the prices, and the descriptions of the
    musical instruments we are trying to sell. Whenever we update the JSON file, the
    web page will automatically update with the new information in the JSON file.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将采用逐步的方法来构建这个页面。这个网页将不会是普通的。我们将利用强大的React开发工具，在每次我们做出更改时实时更新这个页面。为了进一步展示React及其工具的能力，这个网页将依赖于一个JSON文件，该文件将包含我们试图出售的乐器信息，包括图片、名称、价格和描述。每次我们更新JSON文件时，网页将自动使用JSON文件中的新信息进行更新。
- en: To build the GoMusic website, we require Node.js and **Node Package Manager**
    (**npm**), which we will see in the following section.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建GoMusic网站，我们需要Node.js和**节点包管理器**（**npm**），我们将在下一节中看到。
- en: Node.js and the npm
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js和npm
- en: We'll also be using the npm. The npm is a very popular package that hosts almost
    all well-known Node.js and JavaScript packages. We need the npm to install React
    as well as the helper tools we will be using to build our React applications.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用npm。npm是一个非常流行的包，它托管了几乎所有知名的Node.js和JavaScript包。我们需要npm来安装React以及我们将用于构建React应用程序的辅助工具。
- en: The npm typically gets distributed with Node.js. So, if you already have a recent
    version of Node.js installed on your computer, the npm should be there as well.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: npm通常与Node.js一起分发。所以，如果你已经在你的计算机上安装了较新的Node.js版本，npm也应该在那里。
- en: If you don't have Node.js already installed, please go to [https://nodejs.org/en/](https://nodejs.org/en/) to
    install Node.js on your computer. Make sure that you have the latest versions
    of the tools involved. So, if you have Node, but it's an older version, go ahead
    and update it to a newer version.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有安装Node.js，请访问[https://nodejs.org/en/](https://nodejs.org/en/)在你的计算机上安装Node.js。确保你有涉及工具的最新版本。所以，如果你有Node，但它是旧版本，请继续将其更新到新版本。
- en: You can find more information about npm installation at [https://www.npmjs.com/get-npm](https://www.npmjs.com/get-npm).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://www.npmjs.com/get-npm](https://www.npmjs.com/get-npm)找到有关npm安装的更多信息。
- en: Let's take a look at HTML, CSS and Bootstrap in the next section.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一节中看看HTML、CSS和Bootstrap。
- en: HTML, CSS, and Bootstrap
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML、CSS和Bootstrap
- en: This chapter focuses primarily on React and it assumes familiarity with frontend
    basics such as HTML and CSS.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要关注React，并假设读者熟悉前端基础知识，如HTML和CSS。
- en: Some basic knowledge of HTML and CSS should be enough for you to understand
    this chapter. HTML is the language that's used to build web pages, whereas CSS
    is the language that's used to style web pages (add colors and so on).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对HTML和CSS有一些基本了解应该足以让你理解这一章。HTML是用于构建网页的语言，而CSS是用于美化网页的语言（添加颜色等）。
- en: If you were exposed to HTML and CSS in the past, that should be enough. However,
    if you prefer to explore HTML more before you proceed, check out [https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML).
    For exploring CSS, this link is a great resource: [https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS](https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前接触过HTML和CSS，那就足够了。然而，如果你在继续之前更喜欢更深入地探索HTML，请查看[https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML)。对于探索CSS，这个链接是一个很好的资源：[https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS](https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS)。
- en: We will utilize the powerful Bootstrap 4 framework to build our frontend views,
    so familiarity with Bootstrap will help in this chapter as well.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将利用强大的 Bootstrap 4 框架来构建我们的前端视图，因此熟悉 Bootstrap 也会有助于本章的学习。
- en: You can find information regarding Bootstrap at [https://getbootstrap.com/docs/4.1/getting-started/introduction/](https://getbootstrap.com/docs/4.1/getting-started/introduction/).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://getbootstrap.com/docs/4.1/getting-started/introduction/](https://getbootstrap.com/docs/4.1/getting-started/introduction/)
    找到有关 Bootstrap 的信息。
- en: One of the most practical ways to get started with Bootstrap is to use their
    startup template, which can be found here: [https://getbootstrap.com/docs/4.1/getting-started/introduction/#starter-template](https://getbootstrap.com/docs/4.1/getting-started/introduction/#starter-template).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用 Bootstrap 的一种最实用的方法是使用他们的启动模板，你可以在 [https://getbootstrap.com/docs/4.1/getting-started/introduction/#starter-template](https://getbootstrap.com/docs/4.1/getting-started/introduction/#starter-template)
    找到它。
- en: Project code
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目代码
- en: There is a GitHub repository for the code that we'll cover in this project,
    you can find it at [https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Go/tree/master/Chapter04](https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Go/tree/master/Chapter04).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本项目我们将涵盖的代码，有一个 GitHub 仓库，你可以在 [https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Go/tree/master/Chapter04](https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Go/tree/master/Chapter04)
    找到它。
- en: Let's take a look at the React framework in the next section.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一节中看看 React 框架。
- en: The React framework
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React 框架
- en: React (or React.js) is a JavaScript library for building web user interfaces;
    it was first released by Facebook in 2013, and has grown exponentially in popularity
    since then. The library is currently being maintained by Facebook, Instagram,
    as well as a passionate community. React can build performant and interactive
    websites.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: React (或 React.js) 是一个用于构建网页用户界面的 JavaScript 库；它于 2013 年首次由 Facebook 发布，自那时以来其受欢迎程度呈指数级增长。该库目前由
    Facebook、Instagram 以及一个充满热情的社区维护。React 可以构建性能优异且交互性强的网站。
- en: In the next section we see how to construct React applications.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到如何构建 React 应用程序。
- en: How to construct React applications
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何构建 React 应用程序
- en: To understand and build applications in React, you must first understand how
    the library works, and the pieces that work together to compose your React application.
    In this section, we'll explain the sequence of steps you need to follow to build
    a React application.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解和构建 React 应用程序，你必须首先了解库的工作原理以及协同工作以组成你的 React 应用程序的各个部分。在本节中，我们将解释你需要遵循的步骤序列来构建一个
    React 应用程序。
- en: 'Here is the simplest way to explain how to build a React app:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是解释如何构建 React 应用的最简单方法：
- en: 'Create *React elements* for your application:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的应用程序创建 *React 元素*：
- en: An element is one of the most basic building blocks in React. It represents
    a piece of visual user interface, such as an image, a line with bold font, or
    a button.
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素是 React 中最基本的构建块之一。它代表了一块视觉用户界面，例如一张图片、带有粗体字的线条或一个按钮。
- en: You create an element by employing a mixture of JSX, CSS, and JavaScript.
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以通过混合 JSX、CSS 和 JavaScript 来创建一个元素。
- en: 'Wrap your *elements* with React components:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 React 组件包裹你的 *元素*：
- en: A component is simply a JavaScript class or a function that is composed of React
    elements.
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件简单来说就是一个由 React 元素组成的 JavaScript 类或函数。
- en: A React application is mostly a number of React components that exchange data.
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 React 应用程序主要是由多个交换数据的 React 组件组成的。
- en: An example of a component would be a single product card from our products page:![](img/27cc65bb-a900-45f1-8a8f-53c579ca85ae.png)
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个组件的例子可以是来自我们产品页面上的单个产品卡片！[](img/27cc65bb-a900-45f1-8a8f-53c579ca85ae.png)
- en: 'Use *props* to pass data between your React components:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 *props* 在你的 React 组件之间传递数据：
- en: A prop allows one component to send data to another component
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Prop 允许一个组件向另一个组件发送数据。
- en: In our project, props is how we pass the product image, name, prices, and description
    to the product card component
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的项目中，我们通过 props 将产品图片、名称、价格和描述传递给产品卡片组件。
- en: 'Use *state* to manage and change data inside your React components:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 *state* 来管理和更改你 React 组件内部的数据：
- en: Unlike a prop, a React `state` object is internal to your React component
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 prop 不同，React 的 `state` 对象是 React 组件内部的。
- en: Whenever the data in your `state` object changes, the React library re-renders
    the parts of your application that were affected by the data change
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你的 `state` 对象中的数据发生变化时，React 库会重新渲染受数据变化影响的应用程序部分。
- en: In our project, the `state` object is what changes whenever new products are
    added to our product page
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的项目中，`state` 对象是每当新产品添加到我们的产品页面时发生变化的。
- en: In the next section we will set up our React project.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将设置我们的 React 项目。
- en: Setting up the project
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置项目
- en: It's time to set up our React project. In this section, we'll install the tools
    that are needed to get our project ready to start writing a React application.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候设置我们的 React 项目了。在本节中，我们将安装启动项目所需的工具。
- en: Installing React
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 React
- en: Now, we need to install React. Fortunately, this step was made simple by the
    introduction of a powerful tool called Create React App. This tool bundles a number
    of features that allow us to create new React apps, construct them in real-time,
    and then build them so that they're ready for production.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要安装 React。幸运的是，通过引入一个名为 Create React App 的强大工具，这一步变得简单。这个工具捆绑了许多功能，允许我们创建新的
    React 应用程序，实时构建它们，然后构建它们以便它们可以用于生产。
- en: 'The tool can be retrieved through the npm package manager. To install the tool,
    you need to run the following command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具可以通过 npm 软件包管理器获取。要安装工具，您需要运行以下命令：
- en: '[PRE0]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This command will install the tool globally, which will allow you to use the
    tool from anywhere.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将在全局范围内安装工具，这将允许您从任何地方使用该工具。
- en: 'Now, in the Terminal, go to the folder where you want your tool to run. To
    create a new React app in that folder, run the following command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在终端中，转到您希望工具运行的位置。要创建该文件夹中的新 React 应用程序，请运行以下命令：
- en: '[PRE1]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Make sure you have the latest version of Node and npm installed in order to
    avoid errors.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已安装最新版本的 Node 和 npm，以避免错误。
- en: This will create a brand new application called `first-react-tutorial`, under
    a new folder with the same name.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为 `first-react-tutorial` 的新应用程序，位于一个同名的新文件夹下。
- en: 'Once the app is created, we are ready to write some code. But first, let''s
    see how this new app looks; navigate to the app folder, and then run the `npm
    start` script. Here is how it looks:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了应用程序，我们就准备好编写一些代码了。但首先，让我们看看这个新应用程序的外观；导航到应用程序文件夹，然后运行 `npm start` 脚本。以下是它的样子：
- en: '[PRE2]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will run your brand new React app on local port `3000`, it should also
    open a browser to view the new app, and the URL will be `http://localhost:3000`*.*
    Here is how a vanilla React app looks*:*
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在本地端口 `3000` 上运行您的新 React 应用程序，它也应该打开一个浏览器来查看新应用程序，URL 将是 `http://localhost:3000`。以下是一个纯
    React 应用程序的外观：
- en: '![](img/d1381dd4-f3ff-4a3b-86e8-518cc3a6cb75.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d1381dd4-f3ff-4a3b-86e8-518cc3a6cb75.png)'
- en: Let's prepare the new project in the next section.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，让我们准备新的项目。
- en: Preparing the new project
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备新项目
- en: 'The React app that gets generated using the Create React App tool comes with
    a lot of features. For the purpose of this chapter, we only need to write a simple
    React app; here is how the generated app folder structure looks:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Create React App 工具生成的 React 应用程序包含了许多功能。为了本章的目的，我们只需要编写一个简单的 React 应用程序；以下是生成应用程序文件夹结构的样子：
- en: '![](img/7fe07c5c-7faa-44d7-ba09-bfb881a3beab.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7fe07c5c-7faa-44d7-ba09-bfb881a3beab.png)'
- en: 'In this chapter, we''ll mainly focus on building a simple React app, so we
    don''t need some of the fancy features that come with the generated app. To simplify
    things, let''s delete all the files and folders inside the `src` folder of the
    generated app. After that, let''s just create a single empty JavaScript file called
    `index.js`. Here is how this will look:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将主要关注构建一个简单的 React 应用程序，因此我们不需要一些与生成应用程序一起提供的花哨功能。为了简化问题，让我们删除生成应用程序
    `src` 文件夹内的所有文件和文件夹。之后，让我们只创建一个名为 `index.js` 的单个空 JavaScript 文件。以下是它的样子：
- en: '![](img/b1066469-be92-49e8-ba8a-cba43a375c53.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b1066469-be92-49e8-ba8a-cba43a375c53.png)'
- en: 'Perfect—now, we are ready to write our simple products page. The first step
    is to include Boostrap in our HTML so that we can make use of Bootstrap''s powerful
    styling. If you open the `public` folder, you will find an `index.html` file.
    This file contains some initial HTML that you can use in your React app. We''ll
    modify this HTML file a bit to integrate Bootstrap, and we''ll also include a
    `div` with an ID called `root`. Here''s how `index.html` should look after the
    changes:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 完美——现在，我们准备好编写我们的简单产品页面了。第一步是将 Bootstrap 包含到我们的 HTML 中，这样我们就可以利用 Bootstrap 强大的样式。如果您打开
    `public` 文件夹，您将找到一个 `index.html` 文件。此文件包含一些初始 HTML，您可以在您的 React 应用程序中使用它。我们将稍微修改此
    HTML 文件以集成 Bootstrap，并且我们还将包含一个 ID 为 `root` 的 `div`。以下是修改后的 `index.html` 应该看起来像这样：
- en: '[PRE3]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can just copy the preceding code and paste it into the `index.html` file
    inside your `public` folder.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以直接复制前面的代码并将其粘贴到 `public` 文件夹内的 `index.html` 文件中。
- en: The next step is to put the musical instrument's images in your project. You
    can download the images from this project's GitHub page: [https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Go/tree/master/Chapter04/public/img](https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Go/tree/master/Chapter04/public/img).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将乐器的图片放入您的项目中。您可以从本项目的GitHub页面下载图片：[https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Go/tree/master/Chapter04/public/img](https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Go/tree/master/Chapter04/public/img)。
- en: Go ahead and create a new folder called `img` inside your `public` folder; copy
    all the images to that folder.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的`public`文件夹内创建一个名为`img`的新文件夹；将所有图片复制到该文件夹中。
- en: 'The next step is to create a JSON file that describes each musical instrument
    that we would like to show on the product page. As we mentioned previously, our
    React app will rely on this JSON file to figure out which products to view. The
    file is called `cards.json`, and here is what we should put there initially:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建一个JSON文件，描述我们希望在产品页面上显示的每个乐器。正如我们之前提到的，我们的React应用程序将依赖于这个JSON文件来确定要查看哪些产品。该文件名为`cards.json`，以下是我们应该最初放入的内容：
- en: '[PRE4]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, our `public` folder should look like this:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的`public`文件夹应该看起来像这样：
- en: '![](img/f290eb24-ea70-44f0-8fcf-189c3ebe9c73.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f290eb24-ea70-44f0-8fcf-189c3ebe9c73.png)'
- en: Let's take a look at JSX and React elements in the next section.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一节中看看JSX和React元素。
- en: JSX and React elements
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSX和React元素
- en: JSX can be defined as an extension for JavaScript that looks a whole lot like
    HTML. JSX can be used in React to create React elements. Basically, if you know
    HTML, you know JSX! In React docs, React elements are simply defined as a description
    of what you want to see on the screen.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: JSX可以被定义为类似于HTML的JavaScript扩展。JSX可以在React中用于创建React元素。基本上，如果您知道HTML，您就知道了JSX！在React文档中，React元素被简单地定义为屏幕上想要看到的内容的描述。
- en: React actually does not require JSX to work—you can replace JSX with some vanilla
    JavaScript. However, JSX is recommended when developing React applications, and
    is embraced by the vast majority of the React community. Let's look at some examples.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: React实际上并不需要JSX来工作——您可以用一些纯JavaScript替换JSX。然而，当开发React应用程序时，推荐使用JSX，并且它被React社区的绝大多数人所接受。让我们看看一些例子。
- en: Remember the Buy button from the products page?
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 记得产品页面上的购买按钮吗？
- en: '![](img/7e81287c-6562-45b4-a504-53801f88c4bd.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7e81287c-6562-45b4-a504-53801f88c4bd.png)'
- en: 'This button is a visual element that we can describe with JSX, as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这个按钮是一个我们可以用JSX描述的视觉元素，如下所示：
- en: '[PRE5]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can see that JSX looks similar to HTML. The only major difference between
    the two that we'll note in this chapter is the fact that in JSX, we use the `className` keyword
    instead of `class` when we define the class name that our element belongs to. In
    the preceding code snippet, I made use of Bootstrap's CSS to style my element.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到JSX看起来与HTML相似。在本章中，我们将注意到的两个主要区别之一是，在JSX中，当我们定义元素所属的类名时，我们使用`className`关键字而不是`class`。在前面的代码片段中，我使用了Bootstrap的CSS来设置我的元素的样式。
- en: Another difference between JSX and HTML is that JSX makes use of the camel-case
    naming convention. For example, the `tabindex` HTML property becomes `tabIndex`
    in JSX.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: JSX与HTML之间的另一个区别是JSX使用了驼峰式命名约定。例如，HTML中的`tabindex`属性在JSX中变为`tabIndex`。
- en: The Bootstrap button component can be found at [https://getbootstrap.com/docs/4.1/components/buttons/](https://getbootstrap.com/docs/4.1/components/buttons/).
    The `href` attribute doesn't point to a real link because we are only building
    the frontend piece.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap按钮组件可以在[https://getbootstrap.com/docs/4.1/components/buttons/](https://getbootstrap.com/docs/4.1/components/buttons/)找到。`href`属性并不指向一个真实的链接，因为我们只构建前端部分。
- en: 'Because JSX is a JavaScript extension, you can integrate it in your JavaScript
    code with ease. For example, you can simply do this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 由于JSX是JavaScript的扩展，您可以轻松地将它集成到JavaScript代码中。例如，您可以简单地这样做：
- en: '[PRE6]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can embed JavaScript code inside JSX by using curly brackets. For example,
    we can do something like this:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用花括号在JSX中嵌入JavaScript代码。例如，我们可以这样做：
- en: '[PRE7]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Or, you can do something like the following code snippet:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以像以下代码片段那样做：
- en: '[PRE8]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'An element can have children, similar to how we would think of HTML elements.
    For example, here is an example of a parent `div` element that includes the button
    element as a child:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一个元素可以有子元素，就像我们会想到HTML元素一样。例如，以下是一个包含按钮元素的父`div`元素的示例：
- en: '[PRE9]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'React elements are cheap to create since they are just plain objects. To render
    a React element into the **Document Object Model** (**DOM**), we use `ReactDOM.render
    ()`, as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 React 元素只是普通的对象，因此它们易于创建。要将 React 元素渲染到 **文档对象模型** (**DOM**) 中，我们使用 `ReactDOM.render()`，如下所示：
- en: '[PRE10]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The preceding code will render the button element into a root DOM node.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码会将按钮元素渲染到根 DOM 节点。
- en: 'Now, we have enough information to build one of our product cards using JSX.
    As a reminder, here is what a product card looks like:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有了足够的信息来使用 JSX 构建我们的产品卡片。作为提醒，以下是产品卡片的样子：
- en: '![](img/64502737-fd89-4188-817e-7c9293d5aabd.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/64502737-fd89-4188-817e-7c9293d5aabd.png)'
- en: 'Let''s assume that we already have the product information as variables, as
    follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经有了产品信息作为变量，如下所示：
- en: '[PRE11]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'With this information at our disposal, here is how we can write a React element
    in JSX to represent a product card:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 利用我们手头的信息，以下是我们在 JSX 中如何编写一个 React 元素来表示产品卡片：
- en: '[PRE12]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Except for the use of `className` instead of `class`, and the use of curly brackets, `{}`,
    to host the JavaScript code, the preceding code looks exactly like a piece of
    HTML code. We simply built a `div` element with several children.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用 `className` 而不是 `class`，以及使用花括号 `{}` 来承载 JavaScript 代码之外，前面的代码看起来就像一段 HTML
    代码。我们只是简单地构建了一个带有几个子元素的 `div` 元素。
- en: In the preceding code snippet, we used `div` tags, an `img` tag, an `h4` tag,
    and an `a` tag to build our React element. All of those tags are well-known HTML
    tags that any frontend developer would probably encounter every day.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们使用了 `div` 标签、一个 `img` 标签、一个 `h4` 标签和一个 `a` 标签来构建我们的 React 元素。所有这些标签都是任何前端开发者可能每天都会遇到的熟悉的
    HTML 标签。
- en: For styling, I used the power of Bootstrap to make our product card look beautiful.
    We used Bootstrap's grid system to ensure that the card will be positioned nicely
    on the browser's screen.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 对于样式，我使用了 Bootstrap 的力量来使我们的产品卡片看起来很漂亮。我们使用了 Bootstrap 的网格系统来确保卡片在浏览器屏幕上的位置合适。
- en: We also utilized Boostrap's wonderful card component, which can be found here: [https://getbootstrap.com/docs/4.1/components/card/](https://getbootstrap.com/docs/4.1/components/card/).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用了 Boostrap 的出色卡片组件，可以在以下位置找到：[https://getbootstrap.com/docs/4.1/components/card/](https://getbootstrap.com/docs/4.1/components/card/)。
- en: All of the images were obtained from [https://www.pexels.com](https://www.pexels.com),
    which offers free images to use in your project.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 所有图片都是从 [https://www.pexels.com](https://www.pexels.com) 获得的，该网站提供免费图片供你在项目中使用。
- en: Let's take a look at React components in the next section.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一节中看看 React 组件。
- en: React components
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React 组件
- en: After constructing the elements that represent your visual views, you will need
    to wrap them with React components to be able to properly use them in your React
    project.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建代表你视觉视图的元素之后，你需要用 React 组件将它们包裹起来，以便能够在你的 React 项目中正确使用它们。
- en: 'A React component is typically composed of the following:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 React 组件通常由以下部分组成：
- en: React elements, which we discussed in the *JSX and React elements* section
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在 *JSX 和 React 元素* 部分讨论过的 React 元素
- en: Props, which we will discuss in the *Props* section
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Props，我们将在 *Props* 部分讨论
- en: State, which we will discuss in the *State* section
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: State，我们将在 *State* 部分讨论
- en: Before we jump into props and state, let's cover some basics. A component is
    typically written as a JavaScript class or a function. Let's write a simple component
    to get a feeling for what they are really about.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入探讨 props 和 state 之前，让我们先了解一些基础知识。一个组件通常被编写为一个 JavaScript 类或函数。让我们编写一个简单的组件来感受它们到底是什么。
- en: 'Remember the card element we covered in the *JSX and React elements* section?
    Here is how it looked:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 记得我们在 *JSX 和 React 元素* 部分提到的卡片元素吗？下面是它的样子：
- en: '[PRE13]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In a React production app, we need to write a component that hosts this element.
    Here is how the React component will look:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个 React 生产应用中，我们需要编写一个组件来承载这个元素。以下是 React 组件的样子：
- en: '[PRE14]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In our project's `src` folder, copy the preceding code to `index.js`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们项目的 `src` 文件夹中，将前面的代码复制到 `index.js`。
- en: 'Now, let''s inspect the preceding code. Here is what you need to know:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们检查前面的代码。以下是你需要知道的信息：
- en: A React component is a JavaScript class that inherits the `React.Component`
    type
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 React 组件是一个继承自 `React.Component` 类型的 JavaScript 类。
- en: The most important method in a React component class is `render()`, since this
    method returns the React element that your component produces
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 React 组件类中，最重要的方法是 `render()`，因为这个方法返回你的组件生成的 React 元素。
- en: A component name starts with an uppercase letter, which is why `Card` started
    with *C* instead of *c*
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件名称以大写字母开头，这就是为什么 `Card` 以 *C* 开头而不是 *c*。
- en: You might be wondering why a component name has to start with an uppercase letter.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道为什么组件名称必须以大写字母开头。
- en: It's because in React, once you create a component, you can use it as a DOM
    tag in JSX. So to differentiate between a native DOM tag, such as `div`, and a
    component DOM tag, such as `Card`, we use upper case as the first letter for components.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为在React中，一旦你创建了一个组件，你就可以在JSX中使用它作为一个DOM标签。所以为了区分原生DOM标签，例如`div`，和组件DOM标签，例如`Card`，我们使用大写字母作为组件的首字母。
- en: 'Because you can use components as DOM tags in JSX, you can render them with
    `reactDOM.render()`, as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你可以在JSX中使用组件作为DOM标签，你可以使用`reactDOM.render()`来渲染它们，如下所示：
- en: '[PRE15]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding code will render our component under the `root` `div` of our HTML
    document.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将在我们的HTML文档的`root` `div`下渲染我们的组件。
- en: Let's take a look at the design of the React application in the next section.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一节中看看React应用程序的设计。
- en: React application design
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React应用程序设计
- en: Now that we understand components, it's time to discuss how to design a React
    application with the power of components. A React application is composed of a
    number of components that talk to each other. There should be a main container
    component, which acts as an entry point to other components. The React community
    recommends against writing components that inherit from other components. Instead,
    the community recommends composition to be used. So, whenever we talk about parent
    and child components, we don't mean that child components inherit the parent component's
    classes, we just mean that the parent component contains one or more of the child
    components.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了组件，是时候讨论如何利用组件的力量来设计一个React应用程序了。一个React应用程序由多个相互通信的组件组成。应该有一个主要容器组件，它作为其他组件的入口点。React社区建议不要编写继承自其他组件的组件。相反，社区建议使用组合。所以，当我们谈论父组件和子组件时，我们并不是说子组件继承父组件的类，我们只是说父组件包含一个或多个子组件。
- en: Composition means that all of your component classes should inherit from `React.Component`,
    and then the parent component renders child components to build your web application.
    This is best explained by an example.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 组合意味着你的所有组件类都应该继承自`React.Component`，然后父组件渲染子组件来构建你的Web应用程序。这最好通过一个例子来解释。
- en: 'For our product page, the proper design would involve two components: a `CardContainer`
    component, which will host the list of product cards we are trying to view, and
    a `Card` component, which will represent a single product card.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的产品页面，合适的设计将涉及两个组件：一个`CardContainer`组件，它将托管我们试图查看的产品卡片列表，以及一个`Card`组件，它将代表单个产品卡片。
- en: 'The `CardContainer` component is the parent, and the `Card` components are
    the children:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`CardContainer`组件是父组件，而`Card`组件是子组件：'
- en: '![](img/b9be7f46-5d36-4f6f-9d2a-92c0a22b57e2.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b9be7f46-5d36-4f6f-9d2a-92c0a22b57e2.png)'
- en: Both objects will inherit from `React.Component`. The `CardContainer` component
    will render a list of `Card` components to build the product page that supports
    multiple products. However, before we dive into the code for `CardContainer`,
    we need to understand how the `CardContainer` will pass the musical instrument
    product data to `Card`, which is what the next section will address.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个对象都将继承自`React.Component`。`CardContainer`组件将渲染一系列`Card`组件来构建支持多个产品的产品页面。然而，在我们深入到`CardContainer`的代码之前，我们需要了解`CardContainer`将如何将乐器产品数据传递给`Card`，这正是下一节将要解决的问题。
- en: Let's look at props and state in the next sections.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看下一节中的props和state。
- en: Props
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Props
- en: So, this all looks good. However, in reality, since we have multiple products
    and not just one, we need a list of `Card` components, and not just one. It doesn't
    make sense to hardcode this component multiple times to correspond to each product.
    So, instead, we want to write the card component once. The `CardContainer` component
    we discussed in the *React application design* section should pass the product
    information to the `Card` component. So, we basically have a parent component
    that needs to pass some information to a child component.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这一切看起来都很不错。然而，在现实中，由于我们有多个产品而不是一个，我们需要一个`Card`组件的列表，而不仅仅是一个。将此组件硬编码多次以对应每个产品是没有意义的。因此，我们希望只编写一次卡片组件。我们在*React应用程序设计*部分讨论的`CardContainer`组件应该将产品信息传递给`Card`组件。所以，我们基本上有一个需要向子组件传递一些信息的父组件。
- en: 'You might wonder: why do we need the `CardContainer` component to pass data
    to the `Card` component, and not have the `Card` component look for its own data?
    The answer is simple: it was found that the best design for React applications
    is to have data state handled at the uppermost parent component where the data
    makes sense, then pieces of the data get passed down to smaller child components
    as needed. This design allows the child components to be in sync with one another,
    and in sync with their parents.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想知道：为什么我们需要`CardContainer`组件将数据传递给`Card`组件，而不是让`Card`组件自己查找数据？答案是简单的：发现React应用的最佳设计是在数据有意义的最高层父组件中处理数据状态，然后根据需要将数据片段传递给较小的子组件。这种设计允许子组件相互同步，并与它们的父组件同步。
- en: In our application, the uppermost component where all the product's information
    data should be handled is `CardContainer`, whereas the smaller child components
    that only need access to individual product information is handled in the `Card`
    components. In the world of React, this passing of data from parent component
    to child components is done using the `props` object. Props simply stands for
    properties.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用中，处理所有产品信息数据的最高层组件是`CardContainer`，而只需要访问单个产品信息的较小子组件由`Card`组件处理。在React的世界里，这种从父组件到子组件的数据传递是通过`props`对象完成的。`Props`简单来说就是属性。
- en: 'To access the properties within any React component, we just need to call `this.props`.
    Let''s assume that the product information was already passed to our `Card` component
    using props. Here is how the `Card` code will now look:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问任何React组件内的属性，我们只需调用`this.props`。假设产品信息已经通过props传递给了我们的`Card`组件。下面是`Card`代码现在的样子：
- en: '[PRE16]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding code, we simply accessed the `props` object through `this.props`,
    and since we assumed that the product information was already passed to us through
    props, the `props` object had all the information that we needed.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们简单地通过`this.props`访问了`props`对象，并且因为我们假设产品信息已经通过props传递给了我们，所以`props`对象包含了我们所需的所有信息。
- en: 'So, now comes the important question: how was the information passed from the
    parent component (`CardContainer`, in our case) to the child components (`Card`,
    in our case) using props?'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在来回答一个重要的问题：信息是如何通过props从父组件（在我们的例子中是`CardContainer`）传递到子组件（在我们的例子中是`Card`）的？
- en: 'The answer is quite simple; since a component name becomes a DOM tag in JSX,
    we can simply represent a component in JSX, as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 答案相当简单；由于组件名称在JSX中成为DOM标签，我们可以在JSX中简单地表示一个组件，如下所示：
- en: '[PRE17]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the preceding code, we utilized JSX to create a React element that represents
    a single product card component. The element tag name is `Card`, whereas the props
    are passed as attributes in JSX. If you look at the `Card` component code that
    we covered right before this, you will find that the names of the props correspond
    to the attribute names we passed within the React element that we created previously.
    In other words, the props were `img`, `alt`, `productName`, `price`, and `desc`.
    Those were the same names as the attributes in the preceding React element.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用了JSX创建了一个代表单个产品卡片组件的React元素。元素标签名是`Card`，而props作为属性传递到JSX中。如果你看看我们在这之前覆盖的`Card`组件代码，你会发现props的名称与我们之前在创建的React元素中传递的属性名称相对应。换句话说，props是`img`、`alt`、`productName`、`price`和`desc`。这些名称与前面React元素中的属性名称相同。
- en: 'So, let''s create a very simple `CardContainer` component that hosts only two
    cards, and see how this looks. Based on what we know so far, to create a React
    component, you need to do the following:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们创建一个非常简单的`CardContainer`组件，它只包含两个卡片，看看效果如何。根据我们目前所知，要创建一个React组件，你需要做以下事情：
- en: Create a class that inherits from `React.Component`
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个继承自`React.Component`的类
- en: Override the `render()` method of `React.Component`
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 覆盖`React.Component`的`render()`方法
- en: 'Here is how the code looks:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是代码的样式：
- en: '[PRE18]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'There are two important things that we need to cover from the preceding code:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码中，我们需要涵盖两个重要的问题：
- en: We put the two cards inside a parent `div` element. This is important because
    the `render()` method needs to return a single React element.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将两个卡片放在一个父`div`元素中。这很重要，因为`render()`方法需要返回一个单一的React元素。
- en: We added a `key` attribute, even though it was not part of the `Card` component.
    The key property is a reserved property in React. Keys are important to use when
    working with lists of elements. Keys must be unique for each item. A key only
    needs to be unique on an item, compared to its sibling items. In our case, we
    have a list of cards, so that's why we used the `key` prop. React uses keys to
    figure out which items would need to get re-rendered, and which items stayed the
    same. A React component cannot access the `key` property through the `props` object.
    React monitors whether keys get added, removed, or changed. Then, it makes decisions
    on which components need to get re-rendered, and which components don't need to
    be touched.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使它不是 `Card` 组件的一部分，我们也添加了一个 `key` 属性。在 React 中，`key` 属性是一个保留属性。在使用元素列表时，`key`
    属性非常重要。每个项目都必须有唯一的 `key`。与它的同级项目相比，`key` 只需要在项目上是唯一的。在我们的例子中，我们有一个卡片列表，所以我们使用了
    `key` prop。React 使用 `key` 来确定哪些项目需要重新渲染，哪些项目保持不变。React 组件不能通过 `props` 对象访问 `key`
    属性。React 监控 `key` 是否被添加、删除或更改。然后，它决定哪些组件需要重新渲染，哪些组件不需要被修改。
- en: 'The `render()` method in the preceding code can actually get refactored further:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码中的 `render()` 方法实际上还可以进一步重构：
- en: '[PRE19]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the preceding code, we still hardcode the product card information for simplicity,
    but this time we use JavaScript's `map()` method to create a list of React elements.
    We then include our elements inside a parent `div` element, and return it as the
    result of our `render()` method.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们为了简单起见仍然硬编码了产品卡片信息，但这次我们使用了 JavaScript 的 `map()` 方法来创建一个 React 元素列表。然后我们将这些元素包含在一个父
    `div` 元素中，并将其作为 `render()` 方法的返回结果。
- en: 'The preceding code can actually get refactored even further, since it''s a
    bit verbose to assign every single attribute with a value from a card item. Instead,
    React supports the following syntax:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码实际上还可以进一步重构，因为它需要从卡片项中为每个属性赋值，这有点冗长。相反，React 支持以下语法：
- en: '[PRE20]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the preceding syntax, we just used `...` to pass all the properties of a
    card item to a `Card` component. This code works because the properties of the
    card object have the same names as the properties that are expected through the
    `props` object by the `Card` component. We still explicitly assigned the `key`
    attribute, because the `Card` object didn't have a `key` property—it had an `id`
    property instead.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的语法中，我们只是使用了 `...` 来将卡片项的所有属性传递给 `Card` 组件。这段代码之所以能工作，是因为卡片对象的属性名与 `Card`
    组件通过 `props` 对象期望的属性名相同。我们仍然显式地分配了 `key` 属性，因为 `Card` 对象没有 `key` 属性——它有一个 `id`
    属性。
- en: 'The `CardContainer` component becomes the entry component to our product page,
    instead of the `Card` component. This means that we should render `CardContainer`
    instead of `Card` under the `root` div of our HTML document:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`CardContainer` 组件变成了我们产品页面的入口组件，而不是 `Card` 组件。这意味着我们应该在我们的 HTML 文档的 `root`
    div 下渲染 `CardContainer` 而不是 `Card`：'
- en: '[PRE21]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: State
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 状态
- en: The last major topic we need to cover in regards to the React library is the
    `state` object. We already learned that we use the `props` objects to pass data
    from one component to another. However, we can't just hardcode our data in a production-level
    application like we did in the *Props* section. The musical instruments' product
    information needs to be obtained from somewhere, and not hardcoded in our React
    code. In a real application, the data should come from a server-side API. However,
    for the purpose of this chapter, we'll obtain the product information from a JSON
    file called `cards.json`. In React, our application data needs to live inside
    the `state` object.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在 React 库中，我们需要讨论的最后一个重要主题是 `state` 对象。我们已经了解到我们使用 `props` 对象从一个组件传递数据到另一个组件。然而，我们不能像在
    *Props* 部分那样在生产级应用中硬编码我们的数据。乐器产品的信息需要从某处获取，而不是硬编码在我们的 React 代码中。在实际应用中，数据应该来自服务器端
    API。然而，为了本章的目的，我们将从名为 `cards.json` 的 JSON 文件中获取产品信息。在 React 中，我们的应用程序数据需要存储在 `state`
    对象中。
- en: Let's take a look at how to initialize and set our `state` object in the next
    section.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在下一节中初始化和设置我们的 `state` 对象。
- en: Initializing the state object
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化状态对象
- en: 'The `state` object should be initialized at the constructor of the React component
    class that needs this state. For our product page, the data we need to store is
    simply the product information. Here is us initializing the `state` object:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: React 组件类的构造函数中应该初始化需要此状态的 `state` 对象。对于我们的产品页面，我们需要存储的数据仅仅是产品信息。以下是我们的初始化 `state`
    对象的示例：
- en: '[PRE22]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: A constructor for a component object expects `props` as an argument, so the
    first thing we need to do is pass `props` to the parent `React.Component` object.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 组件对象的构造函数期望`props`作为参数，所以我们需要做的第一件事是将`props`传递给父`React.Component`对象。
- en: The second step is to initialize the `state` object of our component. `state`
    objects are internal to our components, so the `state` object we initialize here
    is not shared with other components. Our `state` object will contain a list called
    `cards`, and is where we will store our musical instrument product card list.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步是初始化我们的组件的`state`对象。`state`对象是组件内部的，因此我们在这里初始化的`state`对象不会与其他组件共享。我们的`state`对象将包含一个名为`cards`的列表，我们将在这里存储我们的乐器产品卡片列表。
- en: Setting our state
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置我们的状态
- en: 'The next obvious step is to set our `state` object with a list of product cards.
    To set data in a React `state` object, we must use a method called `setState()`,
    which belongs to our component object. Here is an example of us setting our `state`
    object with the information of two product cards:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个明显的步骤是用产品卡片列表设置我们的`state`对象。要在React的`state`对象中设置数据，我们必须使用一个称为`setState()`的方法，它属于我们的组件对象。以下是我们使用两个产品卡片的信息设置我们的`state`对象的例子：
- en: '[PRE23]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The `render()` method of our `CardContainer` component will need to change
    to look like this:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`CardContainer`组件的`render()`方法需要改变，如下所示：
- en: '[PRE24]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the preceding code, we did two main things:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们做了两件主要的事情：
- en: Obtained the product card information from our `state` object
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从我们的`state`对象中获取了产品卡片信息
- en: Added some extra styling using the Bootstrap framework to make our product page
    look better
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Bootstrap框架添加了一些额外的样式，使我们的产品页面看起来更好
- en: 'Obviously, we are still hardcoding our product data inside our component code,
    which is not right. As we mentioned earlier, our list of product card data needs
    to be in a file called `cards.json`, which we created in the *Preparing the new
    project* section. We need to add some code to grab data from this file, and then
    change the state accordingly. We will use the `fetch()` method, which is common
    in modern browsers, to obtain the contents of the `cards.json` file, and then
    we''ll populate the state with the obtained data:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们还在组件代码中硬编码我们的产品数据，这是不正确的。正如我们之前提到的，我们的产品卡片数据列表需要放在一个名为`cards.json`的文件中，我们在*准备新项目*部分创建了它。我们需要添加一些代码来从该文件中获取数据，然后相应地更改状态。我们将使用现代浏览器中常见的`fetch()`方法来获取`cards.json`文件的內容，然后我们将使用获取到的数据填充状态：
- en: '[PRE25]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The preceding code is more than enough to fill up our `state` object. In a real
    production app, we would fetch an API address instead of a local file. But where
    should we put that code?
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码已经足够填充我们的`state`对象。在一个真正的生产应用中，我们会获取一个API地址而不是本地文件。但我们应该把代码放在哪里？
- en: 'In React components, there are some life cycle methods that are supported.
    A life cycle method is a method that gets called whenever component life cycle
    events occur. An example of a component life cycle event is when the component
    gets mounted into the tree—the method that gets called whenever this event happens
    is called `componentDidMount()`. When you override this method, any code you write
    there will get executed whenever your component mounts. It is advised to write
    initialization code that involves loading data from remote locations in `componentDidMount()`.
    In our case, we are not really loading data from a remote location, since the
    `card.json` file is local to our app, however in a real production application,
    the data will live remotely. So, let''s just write our initialization code inside
    `componentDidMount()` with the understanding that `fetch()` will need to change
    in the future to grab the data from a remote API:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在React组件中，有一些生命周期方法是被支持的。生命周期方法是在组件生命周期事件发生时被调用的方法。一个组件生命周期事件的例子是当组件被挂载到树中时——每当这个事件发生时被调用的方法称为`componentDidMount()`。当你重写这个方法时，你在这里写的任何代码都会在组件挂载时执行。建议在`componentDidMount()`中编写涉及从远程位置加载数据的初始化代码。在我们的例子中，我们实际上并没有从远程位置加载数据，因为`card.json`文件位于我们的应用中，然而在一个真正的生产应用中，数据将存在于远程位置。所以，让我们在`componentDidMount()`中编写我们的初始化代码，并理解`fetch()`将来需要改变以从远程API获取数据：
- en: '[PRE26]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Perfect—this was the last piece of code we needed to finish up our `CardContainer`
    component. Here is how the entire class looks:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 完美——这是我们完成`CardContainer`组件所需的最后一部分代码。下面是这个类的完整样子：
- en: '[PRE27]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We have covered enough ground to learn how to build a working application in
    React.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经覆盖了足够的内容，可以学习如何在React中构建一个工作的应用。
- en: Developer tools
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发者工具
- en: The React community is indeed a very passionate one. Facebook has released a
    bunch of tools that can be used to debug and troubleshoot React apps; you can
    find the repository for the dev tools at [https://github.com/facebook/react-devtools](https://github.com/facebook/react-devtools).
    The dev tools are available as a Chrome extension, a Firefox extension, or as
    a standalone app.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: React 社区确实是一个非常热情的社区。Facebook 已经发布了一系列可用于调试和排查 React 应用的工具；你可以在[https://github.com/facebook/react-devtools](https://github.com/facebook/react-devtools)找到开发工具的仓库。这些开发工具可以作为
    Chrome 扩展、Firefox 扩展或独立应用程序使用。
- en: For the purpose of this chapter, we'll have a brief look at the Chrome extension,
    which you can find at [https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本章的目的，我们将简要介绍 Chrome 扩展，你可以在[https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi)找到它。
- en: 'Once you install the Chrome React Developer Tools extension, you can run it
    from Chrome''s developer tools:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你安装了 Chrome React 开发者工具扩展，你就可以从 Chrome 的开发者工具中运行它：
- en: '![](img/91af201e-ebb8-4184-95f4-00c5acb48f46.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](img/91af201e-ebb8-4184-95f4-00c5acb48f46.png)'
- en: 'Once you open Chrome''s developer tools, you will find a React tab in your
    developer tools pane:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你打开 Chrome 的开发者工具，你将在你的开发者工具面板中找到一个 React 选项卡：
- en: '![](img/eead50c4-e5ad-4a2d-8d61-c6bc0377c69f.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eead50c4-e5ad-4a2d-8d61-c6bc0377c69f.png)'
- en: You will find your React components in this window. The entry to the React component
    to our product page was `CardContainer`, as shown in the preceding screenshot.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在该窗口中找到你的 React 组件。React 组件进入我们的产品页面是 `CardContainer`，如前一张截图所示。
- en: 'For each component that''s exposed through the dev tools, you can dive deeper
    into the children components and their properties:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 对于通过开发工具暴露的每个组件，你可以深入了解子组件及其属性：
- en: '![](img/c1d1fef8-8de7-4dfe-ab95-f124c681d20a.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c1d1fef8-8de7-4dfe-ab95-f124c681d20a.png)'
- en: This will allow you to further inspect your React app and troubleshoot it properly,
    without much complexity. I advise that you take a moment to try out the dev tools
    for yourself and explore what they can do.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许你进一步检查你的 React 应用程序并正确地排查问题，而不会带来太多复杂性。我建议你花点时间亲自尝试一下开发工具并探索它们能做什么。
- en: Summary
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to design and build a working React application.
    We covered all the key pieces that make React work, such as React elements, components,
    props, and states. We also learned about JSX and how similar it is to HTML. Once
    you learn React, you will find it a very enjoyable framework to build web products
    with. There is a reason why it is so popular with developers worldwide.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何设计和构建一个可工作的 React 应用程序。我们涵盖了使 React 运作的所有关键部分，例如 React 元素、组件、props
    和状态。我们还了解了 JSX 以及它与 HTML 的相似之处。一旦你学会了 React，你会发现它是一个非常令人愉快的框架，可以用来构建网络产品。这也是为什么它在全球开发者中如此受欢迎的原因。
- en: In the next chapter, we'll utilize the knowledge we gained here to build the
    frontend of our GoMusic website.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将利用在这里获得的知识来构建 GoMusic 网站的前端。
- en: Questions
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is React?
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 React？
- en: What is JSX?
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JSX 是什么？
- en: What is a React element?
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 React 元素？
- en: What are props?
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 props？
- en: What is a React state?
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 React 状态？
- en: What is a React component?
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 React 组件？
- en: What are the two things you should do inside a component constructor?
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件构造函数内部你应该做哪两件事？
- en: What is the most important method in a React component class?
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 React 组件类中最重要的方法是什么？
- en: What does a life cycle method mean?
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生命周期方法是什么意思？
- en: What is a `key` property, and why is it important?
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`key` 属性是什么，为什么它很重要？'
- en: Further reading
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For more information regarding what was covered in this chapter, you can check
    out the following links:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 关于本章涵盖的内容的更多信息，你可以查看以下链接：
- en: '**React website**: [https://reactjs.org/](https://reactjs.org/)'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**React 网站**：[https://reactjs.org/](https://reactjs.org/)'
- en: '**React docs**: [https://reactjs.org/docs/hello-world.html](https://reactjs.org/docs/hello-world.html)'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**React 文档**：[https://reactjs.org/docs/hello-world.html](https://reactjs.org/docs/hello-world.html)'
- en: '**React tutorial**: [https://reactjs.org/tutorial/tutorial.html](https://reactjs.org/tutorial/tutorial.html)'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**React 教程**：[https://reactjs.org/tutorial/tutorial.html](https://reactjs.org/tutorial/tutorial.html)'
