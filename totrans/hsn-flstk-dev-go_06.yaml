- en: Frontend with React.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll take the first step and learn about the upper half of
    the full stack, which is the frontend. To properly build any software product,
    you need to have sufficient practical knowledge to build a good-looking user interface.
    This is vital for building a software product that other people enjoy using.
  prefs: []
  type: TYPE_NORMAL
- en: We'll discuss the powerful React framework, which is one of the most popular
    frontend frameworks on the market today. React allows you to build dynamic websites
    that can respond to data changes in real time. This allows you to build websites
    that are responsive and intelligent. Most of the popular websites on the internet
    today are built with React. We'll be covering React from a very practical point
    of view, so we will dive head-on into how to write React apps, instead of tackling
    theoretical or side topics.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to construct React applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing React
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSX and React elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Props
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: States
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React developer tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prerequisites and technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The React framework simply consists of a collection of JavaScript modules that
    we can use to build beautiful, responsive UIs. Because of that, you need some
    JavaScript knowledge to follow this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: A very good resource to get re-introduced to JavaScript can be found at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript).
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll be primarily using ES6, which can simply be considered
    the new version of JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four core features of ES6 that we''ll come across in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Classes**: A class can be considered as a *special function* in JavaScript,
    where you can define internal methods. For more information, please visit [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Arrow functions**: An arrow function is JavaScript''s version of an anonymous
    function. For more information, please visit [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The** `let` **keyword**: The `let` keyword is used to declare a block scope local
    variable. For more information, please visit [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The** `const` **keyword**: The `const` keyword is used to declare local scope
    variables that are constant and cannot change from their initial value. For more
    information, please visit [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The GoMusic project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll leverage the power of React to build a products page
    for the GoMusic store. The GoMusic store is the main full stack project that we'll
    be building throughout this book, and it is basically an online store of musical
    instruments. The frontend will be built with React, whereas the backend will be
    built with Go.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the product page we''re building today:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/42570f36-5716-480d-aa15-884886a5549a.png)'
  prefs: []
  type: TYPE_IMG
- en: We'll follow a step-by-step approach to building this page. This web page will
    not be ordinary. We'll make use of the powerful React development tools to update
    this page in real time whenever we make a change. To further demonstrate the capabilities
    of React and its tools, the web page will rely on a JSON file, which will contain
    information about the images, the names, the prices, and the descriptions of the
    musical instruments we are trying to sell. Whenever we update the JSON file, the
    web page will automatically update with the new information in the JSON file.
  prefs: []
  type: TYPE_NORMAL
- en: To build the GoMusic website, we require Node.js and **Node Package Manager**
    (**npm**), which we will see in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js and the npm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll also be using the npm. The npm is a very popular package that hosts almost
    all well-known Node.js and JavaScript packages. We need the npm to install React
    as well as the helper tools we will be using to build our React applications.
  prefs: []
  type: TYPE_NORMAL
- en: The npm typically gets distributed with Node.js. So, if you already have a recent
    version of Node.js installed on your computer, the npm should be there as well.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't have Node.js already installed, please go to [https://nodejs.org/en/](https://nodejs.org/en/) to
    install Node.js on your computer. Make sure that you have the latest versions
    of the tools involved. So, if you have Node, but it's an older version, go ahead
    and update it to a newer version.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about npm installation at [https://www.npmjs.com/get-npm](https://www.npmjs.com/get-npm).
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at HTML, CSS and Bootstrap in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: HTML, CSS, and Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter focuses primarily on React and it assumes familiarity with frontend
    basics such as HTML and CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Some basic knowledge of HTML and CSS should be enough for you to understand
    this chapter. HTML is the language that's used to build web pages, whereas CSS
    is the language that's used to style web pages (add colors and so on).
  prefs: []
  type: TYPE_NORMAL
- en: If you were exposed to HTML and CSS in the past, that should be enough. However,
    if you prefer to explore HTML more before you proceed, check out [https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML).
    For exploring CSS, this link is a great resource: [https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS](https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS).
  prefs: []
  type: TYPE_NORMAL
- en: We will utilize the powerful Bootstrap 4 framework to build our frontend views,
    so familiarity with Bootstrap will help in this chapter as well.
  prefs: []
  type: TYPE_NORMAL
- en: You can find information regarding Bootstrap at [https://getbootstrap.com/docs/4.1/getting-started/introduction/](https://getbootstrap.com/docs/4.1/getting-started/introduction/).
  prefs: []
  type: TYPE_NORMAL
- en: One of the most practical ways to get started with Bootstrap is to use their
    startup template, which can be found here: [https://getbootstrap.com/docs/4.1/getting-started/introduction/#starter-template](https://getbootstrap.com/docs/4.1/getting-started/introduction/#starter-template).
  prefs: []
  type: TYPE_NORMAL
- en: Project code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a GitHub repository for the code that we'll cover in this project,
    you can find it at [https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Go/tree/master/Chapter04](https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Go/tree/master/Chapter04).
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at the React framework in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The React framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React (or React.js) is a JavaScript library for building web user interfaces;
    it was first released by Facebook in 2013, and has grown exponentially in popularity
    since then. The library is currently being maintained by Facebook, Instagram,
    as well as a passionate community. React can build performant and interactive
    websites.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section we see how to construct React applications.
  prefs: []
  type: TYPE_NORMAL
- en: How to construct React applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To understand and build applications in React, you must first understand how
    the library works, and the pieces that work together to compose your React application.
    In this section, we'll explain the sequence of steps you need to follow to build
    a React application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the simplest way to explain how to build a React app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create *React elements* for your application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An element is one of the most basic building blocks in React. It represents
    a piece of visual user interface, such as an image, a line with bold font, or
    a button.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You create an element by employing a mixture of JSX, CSS, and JavaScript.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Wrap your *elements* with React components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A component is simply a JavaScript class or a function that is composed of React
    elements.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A React application is mostly a number of React components that exchange data.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: An example of a component would be a single product card from our products page:![](img/27cc65bb-a900-45f1-8a8f-53c579ca85ae.png)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use *props* to pass data between your React components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A prop allows one component to send data to another component
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In our project, props is how we pass the product image, name, prices, and description
    to the product card component
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use *state* to manage and change data inside your React components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unlike a prop, a React `state` object is internal to your React component
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Whenever the data in your `state` object changes, the React library re-renders
    the parts of your application that were affected by the data change
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In our project, the `state` object is what changes whenever new products are
    added to our product page
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section we will set up our React project.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's time to set up our React project. In this section, we'll install the tools
    that are needed to get our project ready to start writing a React application.
  prefs: []
  type: TYPE_NORMAL
- en: Installing React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we need to install React. Fortunately, this step was made simple by the
    introduction of a powerful tool called Create React App. This tool bundles a number
    of features that allow us to create new React apps, construct them in real-time,
    and then build them so that they're ready for production.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tool can be retrieved through the npm package manager. To install the tool,
    you need to run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This command will install the tool globally, which will allow you to use the
    tool from anywhere.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in the Terminal, go to the folder where you want your tool to run. To
    create a new React app in that folder, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Make sure you have the latest version of Node and npm installed in order to
    avoid errors.
  prefs: []
  type: TYPE_NORMAL
- en: This will create a brand new application called `first-react-tutorial`, under
    a new folder with the same name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the app is created, we are ready to write some code. But first, let''s
    see how this new app looks; navigate to the app folder, and then run the `npm
    start` script. Here is how it looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will run your brand new React app on local port `3000`, it should also
    open a browser to view the new app, and the URL will be `http://localhost:3000`*.*
    Here is how a vanilla React app looks*:*
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d1381dd4-f3ff-4a3b-86e8-518cc3a6cb75.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's prepare the new project in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the new project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The React app that gets generated using the Create React App tool comes with
    a lot of features. For the purpose of this chapter, we only need to write a simple
    React app; here is how the generated app folder structure looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7fe07c5c-7faa-44d7-ba09-bfb881a3beab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this chapter, we''ll mainly focus on building a simple React app, so we
    don''t need some of the fancy features that come with the generated app. To simplify
    things, let''s delete all the files and folders inside the `src` folder of the
    generated app. After that, let''s just create a single empty JavaScript file called
    `index.js`. Here is how this will look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b1066469-be92-49e8-ba8a-cba43a375c53.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Perfect—now, we are ready to write our simple products page. The first step
    is to include Boostrap in our HTML so that we can make use of Bootstrap''s powerful
    styling. If you open the `public` folder, you will find an `index.html` file.
    This file contains some initial HTML that you can use in your React app. We''ll
    modify this HTML file a bit to integrate Bootstrap, and we''ll also include a
    `div` with an ID called `root`. Here''s how `index.html` should look after the
    changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You can just copy the preceding code and paste it into the `index.html` file
    inside your `public` folder.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to put the musical instrument's images in your project. You
    can download the images from this project's GitHub page: [https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Go/tree/master/Chapter04/public/img](https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Go/tree/master/Chapter04/public/img).
  prefs: []
  type: TYPE_NORMAL
- en: Go ahead and create a new folder called `img` inside your `public` folder; copy
    all the images to that folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to create a JSON file that describes each musical instrument
    that we would like to show on the product page. As we mentioned previously, our
    React app will rely on this JSON file to figure out which products to view. The
    file is called `cards.json`, and here is what we should put there initially:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, our `public` folder should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f290eb24-ea70-44f0-8fcf-189c3ebe9c73.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's take a look at JSX and React elements in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: JSX and React elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JSX can be defined as an extension for JavaScript that looks a whole lot like
    HTML. JSX can be used in React to create React elements. Basically, if you know
    HTML, you know JSX! In React docs, React elements are simply defined as a description
    of what you want to see on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: React actually does not require JSX to work—you can replace JSX with some vanilla
    JavaScript. However, JSX is recommended when developing React applications, and
    is embraced by the vast majority of the React community. Let's look at some examples.
  prefs: []
  type: TYPE_NORMAL
- en: Remember the Buy button from the products page?
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7e81287c-6562-45b4-a504-53801f88c4bd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This button is a visual element that we can describe with JSX, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You can see that JSX looks similar to HTML. The only major difference between
    the two that we'll note in this chapter is the fact that in JSX, we use the `className` keyword
    instead of `class` when we define the class name that our element belongs to. In
    the preceding code snippet, I made use of Bootstrap's CSS to style my element.
  prefs: []
  type: TYPE_NORMAL
- en: Another difference between JSX and HTML is that JSX makes use of the camel-case
    naming convention. For example, the `tabindex` HTML property becomes `tabIndex`
    in JSX.
  prefs: []
  type: TYPE_NORMAL
- en: The Bootstrap button component can be found at [https://getbootstrap.com/docs/4.1/components/buttons/](https://getbootstrap.com/docs/4.1/components/buttons/).
    The `href` attribute doesn't point to a real link because we are only building
    the frontend piece.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because JSX is a JavaScript extension, you can integrate it in your JavaScript
    code with ease. For example, you can simply do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You can embed JavaScript code inside JSX by using curly brackets. For example,
    we can do something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, you can do something like the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'An element can have children, similar to how we would think of HTML elements.
    For example, here is an example of a parent `div` element that includes the button
    element as a child:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'React elements are cheap to create since they are just plain objects. To render
    a React element into the **Document Object Model** (**DOM**), we use `ReactDOM.render
    ()`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will render the button element into a root DOM node.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we have enough information to build one of our product cards using JSX.
    As a reminder, here is what a product card looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/64502737-fd89-4188-817e-7c9293d5aabd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s assume that we already have the product information as variables, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'With this information at our disposal, here is how we can write a React element
    in JSX to represent a product card:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Except for the use of `className` instead of `class`, and the use of curly brackets, `{}`,
    to host the JavaScript code, the preceding code looks exactly like a piece of
    HTML code. We simply built a `div` element with several children.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding code snippet, we used `div` tags, an `img` tag, an `h4` tag,
    and an `a` tag to build our React element. All of those tags are well-known HTML
    tags that any frontend developer would probably encounter every day.
  prefs: []
  type: TYPE_NORMAL
- en: For styling, I used the power of Bootstrap to make our product card look beautiful.
    We used Bootstrap's grid system to ensure that the card will be positioned nicely
    on the browser's screen.
  prefs: []
  type: TYPE_NORMAL
- en: We also utilized Boostrap's wonderful card component, which can be found here: [https://getbootstrap.com/docs/4.1/components/card/](https://getbootstrap.com/docs/4.1/components/card/).
  prefs: []
  type: TYPE_NORMAL
- en: All of the images were obtained from [https://www.pexels.com](https://www.pexels.com),
    which offers free images to use in your project.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at React components in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: React components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After constructing the elements that represent your visual views, you will need
    to wrap them with React components to be able to properly use them in your React
    project.
  prefs: []
  type: TYPE_NORMAL
- en: 'A React component is typically composed of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: React elements, which we discussed in the *JSX and React elements* section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Props, which we will discuss in the *Props* section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: State, which we will discuss in the *State* section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we jump into props and state, let's cover some basics. A component is
    typically written as a JavaScript class or a function. Let's write a simple component
    to get a feeling for what they are really about.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember the card element we covered in the *JSX and React elements* section?
    Here is how it looked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In a React production app, we need to write a component that hosts this element.
    Here is how the React component will look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In our project's `src` folder, copy the preceding code to `index.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s inspect the preceding code. Here is what you need to know:'
  prefs: []
  type: TYPE_NORMAL
- en: A React component is a JavaScript class that inherits the `React.Component`
    type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The most important method in a React component class is `render()`, since this
    method returns the React element that your component produces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A component name starts with an uppercase letter, which is why `Card` started
    with *C* instead of *c*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You might be wondering why a component name has to start with an uppercase letter.
  prefs: []
  type: TYPE_NORMAL
- en: It's because in React, once you create a component, you can use it as a DOM
    tag in JSX. So to differentiate between a native DOM tag, such as `div`, and a
    component DOM tag, such as `Card`, we use upper case as the first letter for components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because you can use components as DOM tags in JSX, you can render them with
    `reactDOM.render()`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will render our component under the `root` `div` of our HTML
    document.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at the design of the React application in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: React application design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we understand components, it's time to discuss how to design a React
    application with the power of components. A React application is composed of a
    number of components that talk to each other. There should be a main container
    component, which acts as an entry point to other components. The React community
    recommends against writing components that inherit from other components. Instead,
    the community recommends composition to be used. So, whenever we talk about parent
    and child components, we don't mean that child components inherit the parent component's
    classes, we just mean that the parent component contains one or more of the child
    components.
  prefs: []
  type: TYPE_NORMAL
- en: Composition means that all of your component classes should inherit from `React.Component`,
    and then the parent component renders child components to build your web application.
    This is best explained by an example.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our product page, the proper design would involve two components: a `CardContainer`
    component, which will host the list of product cards we are trying to view, and
    a `Card` component, which will represent a single product card.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `CardContainer` component is the parent, and the `Card` components are
    the children:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b9be7f46-5d36-4f6f-9d2a-92c0a22b57e2.png)'
  prefs: []
  type: TYPE_IMG
- en: Both objects will inherit from `React.Component`. The `CardContainer` component
    will render a list of `Card` components to build the product page that supports
    multiple products. However, before we dive into the code for `CardContainer`,
    we need to understand how the `CardContainer` will pass the musical instrument
    product data to `Card`, which is what the next section will address.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at props and state in the next sections.
  prefs: []
  type: TYPE_NORMAL
- en: Props
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, this all looks good. However, in reality, since we have multiple products
    and not just one, we need a list of `Card` components, and not just one. It doesn't
    make sense to hardcode this component multiple times to correspond to each product.
    So, instead, we want to write the card component once. The `CardContainer` component
    we discussed in the *React application design* section should pass the product
    information to the `Card` component. So, we basically have a parent component
    that needs to pass some information to a child component.
  prefs: []
  type: TYPE_NORMAL
- en: 'You might wonder: why do we need the `CardContainer` component to pass data
    to the `Card` component, and not have the `Card` component look for its own data?
    The answer is simple: it was found that the best design for React applications
    is to have data state handled at the uppermost parent component where the data
    makes sense, then pieces of the data get passed down to smaller child components
    as needed. This design allows the child components to be in sync with one another,
    and in sync with their parents.'
  prefs: []
  type: TYPE_NORMAL
- en: In our application, the uppermost component where all the product's information
    data should be handled is `CardContainer`, whereas the smaller child components
    that only need access to individual product information is handled in the `Card`
    components. In the world of React, this passing of data from parent component
    to child components is done using the `props` object. Props simply stands for
    properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the properties within any React component, we just need to call `this.props`.
    Let''s assume that the product information was already passed to our `Card` component
    using props. Here is how the `Card` code will now look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we simply accessed the `props` object through `this.props`,
    and since we assumed that the product information was already passed to us through
    props, the `props` object had all the information that we needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, now comes the important question: how was the information passed from the
    parent component (`CardContainer`, in our case) to the child components (`Card`,
    in our case) using props?'
  prefs: []
  type: TYPE_NORMAL
- en: 'The answer is quite simple; since a component name becomes a DOM tag in JSX,
    we can simply represent a component in JSX, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we utilized JSX to create a React element that represents
    a single product card component. The element tag name is `Card`, whereas the props
    are passed as attributes in JSX. If you look at the `Card` component code that
    we covered right before this, you will find that the names of the props correspond
    to the attribute names we passed within the React element that we created previously.
    In other words, the props were `img`, `alt`, `productName`, `price`, and `desc`.
    Those were the same names as the attributes in the preceding React element.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s create a very simple `CardContainer` component that hosts only two
    cards, and see how this looks. Based on what we know so far, to create a React
    component, you need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a class that inherits from `React.Component`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Override the `render()` method of `React.Component`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is how the code looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'There are two important things that we need to cover from the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: We put the two cards inside a parent `div` element. This is important because
    the `render()` method needs to return a single React element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We added a `key` attribute, even though it was not part of the `Card` component.
    The key property is a reserved property in React. Keys are important to use when
    working with lists of elements. Keys must be unique for each item. A key only
    needs to be unique on an item, compared to its sibling items. In our case, we
    have a list of cards, so that's why we used the `key` prop. React uses keys to
    figure out which items would need to get re-rendered, and which items stayed the
    same. A React component cannot access the `key` property through the `props` object.
    React monitors whether keys get added, removed, or changed. Then, it makes decisions
    on which components need to get re-rendered, and which components don't need to
    be touched.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `render()` method in the preceding code can actually get refactored further:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we still hardcode the product card information for simplicity,
    but this time we use JavaScript's `map()` method to create a list of React elements.
    We then include our elements inside a parent `div` element, and return it as the
    result of our `render()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding code can actually get refactored even further, since it''s a
    bit verbose to assign every single attribute with a value from a card item. Instead,
    React supports the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding syntax, we just used `...` to pass all the properties of a
    card item to a `Card` component. This code works because the properties of the
    card object have the same names as the properties that are expected through the
    `props` object by the `Card` component. We still explicitly assigned the `key`
    attribute, because the `Card` object didn't have a `key` property—it had an `id`
    property instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `CardContainer` component becomes the entry component to our product page,
    instead of the `Card` component. This means that we should render `CardContainer`
    instead of `Card` under the `root` div of our HTML document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: State
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last major topic we need to cover in regards to the React library is the
    `state` object. We already learned that we use the `props` objects to pass data
    from one component to another. However, we can't just hardcode our data in a production-level
    application like we did in the *Props* section. The musical instruments' product
    information needs to be obtained from somewhere, and not hardcoded in our React
    code. In a real application, the data should come from a server-side API. However,
    for the purpose of this chapter, we'll obtain the product information from a JSON
    file called `cards.json`. In React, our application data needs to live inside
    the `state` object.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at how to initialize and set our `state` object in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing the state object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `state` object should be initialized at the constructor of the React component
    class that needs this state. For our product page, the data we need to store is
    simply the product information. Here is us initializing the `state` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: A constructor for a component object expects `props` as an argument, so the
    first thing we need to do is pass `props` to the parent `React.Component` object.
  prefs: []
  type: TYPE_NORMAL
- en: The second step is to initialize the `state` object of our component. `state`
    objects are internal to our components, so the `state` object we initialize here
    is not shared with other components. Our `state` object will contain a list called
    `cards`, and is where we will store our musical instrument product card list.
  prefs: []
  type: TYPE_NORMAL
- en: Setting our state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next obvious step is to set our `state` object with a list of product cards.
    To set data in a React `state` object, we must use a method called `setState()`,
    which belongs to our component object. Here is an example of us setting our `state`
    object with the information of two product cards:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The `render()` method of our `CardContainer` component will need to change
    to look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we did two main things:'
  prefs: []
  type: TYPE_NORMAL
- en: Obtained the product card information from our `state` object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added some extra styling using the Bootstrap framework to make our product page
    look better
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Obviously, we are still hardcoding our product data inside our component code,
    which is not right. As we mentioned earlier, our list of product card data needs
    to be in a file called `cards.json`, which we created in the *Preparing the new
    project* section. We need to add some code to grab data from this file, and then
    change the state accordingly. We will use the `fetch()` method, which is common
    in modern browsers, to obtain the contents of the `cards.json` file, and then
    we''ll populate the state with the obtained data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is more than enough to fill up our `state` object. In a real
    production app, we would fetch an API address instead of a local file. But where
    should we put that code?
  prefs: []
  type: TYPE_NORMAL
- en: 'In React components, there are some life cycle methods that are supported.
    A life cycle method is a method that gets called whenever component life cycle
    events occur. An example of a component life cycle event is when the component
    gets mounted into the tree—the method that gets called whenever this event happens
    is called `componentDidMount()`. When you override this method, any code you write
    there will get executed whenever your component mounts. It is advised to write
    initialization code that involves loading data from remote locations in `componentDidMount()`.
    In our case, we are not really loading data from a remote location, since the
    `card.json` file is local to our app, however in a real production application,
    the data will live remotely. So, let''s just write our initialization code inside
    `componentDidMount()` with the understanding that `fetch()` will need to change
    in the future to grab the data from a remote API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Perfect—this was the last piece of code we needed to finish up our `CardContainer`
    component. Here is how the entire class looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: We have covered enough ground to learn how to build a working application in
    React.
  prefs: []
  type: TYPE_NORMAL
- en: Developer tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The React community is indeed a very passionate one. Facebook has released a
    bunch of tools that can be used to debug and troubleshoot React apps; you can
    find the repository for the dev tools at [https://github.com/facebook/react-devtools](https://github.com/facebook/react-devtools).
    The dev tools are available as a Chrome extension, a Firefox extension, or as
    a standalone app.
  prefs: []
  type: TYPE_NORMAL
- en: For the purpose of this chapter, we'll have a brief look at the Chrome extension,
    which you can find at [https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you install the Chrome React Developer Tools extension, you can run it
    from Chrome''s developer tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/91af201e-ebb8-4184-95f4-00c5acb48f46.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you open Chrome''s developer tools, you will find a React tab in your
    developer tools pane:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eead50c4-e5ad-4a2d-8d61-c6bc0377c69f.png)'
  prefs: []
  type: TYPE_IMG
- en: You will find your React components in this window. The entry to the React component
    to our product page was `CardContainer`, as shown in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'For each component that''s exposed through the dev tools, you can dive deeper
    into the children components and their properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c1d1fef8-8de7-4dfe-ab95-f124c681d20a.png)'
  prefs: []
  type: TYPE_IMG
- en: This will allow you to further inspect your React app and troubleshoot it properly,
    without much complexity. I advise that you take a moment to try out the dev tools
    for yourself and explore what they can do.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to design and build a working React application.
    We covered all the key pieces that make React work, such as React elements, components,
    props, and states. We also learned about JSX and how similar it is to HTML. Once
    you learn React, you will find it a very enjoyable framework to build web products
    with. There is a reason why it is so popular with developers worldwide.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll utilize the knowledge we gained here to build the
    frontend of our GoMusic website.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is React?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is JSX?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a React element?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are props?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a React state?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a React component?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the two things you should do inside a component constructor?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the most important method in a React component class?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does a life cycle method mean?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a `key` property, and why is it important?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information regarding what was covered in this chapter, you can check
    out the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '**React website**: [https://reactjs.org/](https://reactjs.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**React docs**: [https://reactjs.org/docs/hello-world.html](https://reactjs.org/docs/hello-world.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**React tutorial**: [https://reactjs.org/tutorial/tutorial.html](https://reactjs.org/tutorial/tutorial.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
