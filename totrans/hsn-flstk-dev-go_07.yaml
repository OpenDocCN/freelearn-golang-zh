- en: Building a Frontend for GoMusic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s now time to build the first major piece of the project of this book.
    As mentioned in [Chapter 4](e875a3eb-c517-4246-8233-cc681f6c3356.xhtml), *Frontend
    with React.js*, we''ll be building an online store for musical instruments, which
    we will name GoMusic. In this chapter, we''ll build most of the frontend of the
    online store by utilizing the impressive power of the React framework. Our GoMusic
    store will support the fundamental features of any online store:'
  prefs: []
  type: TYPE_NORMAL
- en: Users should be able to buy any product they like.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users should have access to a promotional page, which provides current sales
    and promotions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users should be able to create their own accounts, and sign into them for a
    more personalized experience.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the three main components of our frontend that we will be
    learning about in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Main pages, which all users of our web application should see
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modal dialog windows, which help with buying products, accounts creation, and
    signing in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User pages, which show a personalized page for the logged-in user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Writing non-trivial React applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating credit card services with our frontend with Stripe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing modal windows in our code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing routes in our code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prerequisites and technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 4](e875a3eb-c517-4246-8233-cc681f6c3356.xhtml), *Frontend with React.js*,
    we covered the foundations of how to build a React.js application, so read it
    before attempting to follow along with this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The requirements are the same for this chapter. Here is a quick recap of the
    required knowledge and tools:'
  prefs: []
  type: TYPE_NORMAL
- en: npm.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The React framework.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Create React App tool, which you can simply install using the following
    command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The Bootstrap framework.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowledge of ES6, HTML, and CSS. In this chapter, we will use HTML forms in
    more than one component.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code and files for this chapter can be found in GitHub: [https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Go/tree/master/Chapter05](https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Go/tree/master/Chapter05).
  prefs: []
  type: TYPE_NORMAL
- en: Building GoMusic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now it''s time to build our online store. Our first step is to use the Create
    React App tool to create a new React application. Open your Terminal, navigate
    to the folder where you would like the GoMusic application to live, then run the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This command will create a new folder, called `gomusic`, which will contain
    a skeleton React application waiting to be constructed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now navigate to your `gomusic` folder using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside, you''ll find three folders: `node_modules`, `public`, and `src`. Before
    we start writing our application, we''ll need to remove some files from the `src`
    folder.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Delete the following files from the `src` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '`app.css`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.css`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logo.svg`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we'll need to go the `public` folder. To make things simpler, replace
    the contents of your `public` folder with those found at our project's GitHub
    page: [https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Go/tree/master/Chapter05/public](https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Go/tree/master/Chapter05/public).
  prefs: []
  type: TYPE_NORMAL
- en: The contents of the GitHub page contain images that we'll be using in our project,
    the JSON files that will describe our data, as well as the modified HTML file,
    which will include support for jQuery and the Bootstrap frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll take a look at the main pages in our application.
  prefs: []
  type: TYPE_NORMAL
- en: Main pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The main pages of our GoMusic application are the pages that all users should
    see, whether they are logged into their GoMusic accounts or not. There are three
    main pages:'
  prefs: []
  type: TYPE_NORMAL
- en: The products page, which is our Home page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Promotions page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The About page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first page is the products page. Here is how it looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb61c556-8d60-44ee-8a41-d2795df9169f.png)'
  prefs: []
  type: TYPE_IMG
- en: As shown in the preceding screenshot, we will support a navigational menu that
    will allow us to navigate between the three main pages. The Home option will host
    the products page, which all users should see.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second page is our Promotions page, which should look very similar to the
    Home page, except that it will show less products with lower prices. The prices
    in this page should show up in red to emphasize the sale:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6e20430b-b2e4-4116-bf7a-8b7bf3f1a330.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The third page is our About page, which should just show some information about
    the GoMusic store:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a4c77508-5609-4b60-8292-8a46ff6ff9b7.png)'
  prefs: []
  type: TYPE_IMG
- en: You probably also noticed the Sign in option at the rightmost edge of our navigational
    menu; this option will open up a modal dialog window, which will allow our users
    to create accounts and sign in. We'll be covering the modal dialog windows in
    the *Modal dialog windows and handling credit cards* section. For each of our
    main pages, we'll create a React component to represent it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the following files in the `src` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Navigations.js`: This file will host the code for the navigational menu component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ProductCards.js`: This file will host the code for the Home and Promotions
    page components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`About.js`: This file will host the code for the About page component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's start with the navigational menu component.
  prefs: []
  type: TYPE_NORMAL
- en: The navigational menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first component that we need to build to connect all our main pages together
    would be the navigational menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4508412b-cda0-4f01-ae30-ff0e00e0766d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the React framework, in order to build a functioning navigational menu with
    ease, we need to make use of the power of a package called `react-router-dom`.
    To install this package, open your Terminal, then run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Once the package is installed, we can make use of it in our code. Now, let's
    open up the `Navigation.js` file and start writing some code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need to do is to import the packages that we need to build
    our menu. We''ll utilize two packages:'
  prefs: []
  type: TYPE_NORMAL
- en: The `react` package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `react-router-dom` package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will need to export a class called `NavLink` from `react-router-dom`. The `NavLink` class
    is a React component that we can use in our code in order to create links that
    can navigate to other React components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to create a new React component called `Navigation`. Here''s
    how it looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside our new component, we''ll need to override the `render()` method, as
    mentioned in [Chapter 4](e875a3eb-c517-4246-8233-cc681f6c3356.xhtml), *Frontend
    with React.js*, in order to write the view of the component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside our `render()` method, we''ll make use of the Bootstrap framework in
    combination with the `NavLink` component that we imported, in order to build our
    navigational menu. Here is how the code inside the `render()` method should look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The code makes use of the Bootstrap framework to style and build the navigation
    bar. Also, when the **Sign in** button gets clicked, we invoke a function called
    `showModalWindow()`, which is expected to get passed to us as a React prop. The
    job of this function is to show the Sign in modal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Perfect: with the preceding code out of the way, we now have a functional component
    that can be utilized to show the navigational menu.  We will explore this function
    in the *The user page navigational menu* section.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at the Products and Promotions page in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The Products and Promotions pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s move to writing the product''s page component. The code is similar
    to the products page that we wrote in [Chapter 4](e875a3eb-c517-4246-8233-cc681f6c3356.xhtml), *Frontend
    with React.js*. Let''s open the `ProductsCards.js` file, then write the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code represents a single product card component. It makes use
    of Bootstrap to style our card.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code is almost the same as the product cards we built in [Chapter 4](e875a3eb-c517-4246-8233-cc681f6c3356.xhtml), *Frontend
    with React.js*, except for few differences:'
  prefs: []
  type: TYPE_NORMAL
- en: We changed the Buy button color to green by making use of Bootstrap's `.btn-success`
    class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We added an option to change the Price color through a variable called `priceColor`; the
    variable looks at a prop called `promo`. If `promo` is true, we'll use a red color;
    if the `promo` prop is false, we'll use the black color.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Buy button here opens up a modal window by calling the `showBuyModal()`
    function. We will discuss the modal windows in more detail in the *Modal dialog
    windows and handling credit cards* section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code will produce two flavors of a product card based on the value of the `promo` prop.
    If the `promo` prop is false, the product card will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4cdf3f6f-514c-4f0b-88ed-66ddf67c6dc5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If the `promo` prop is true, the product card will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e85115e3-357f-40f8-9cf1-f2123ce54c91.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next thing we need to write in the `ProductsCards.js` file is the `CardContainer`
    component. This component will be responsible for showing the product cards together
    in one page. Here is our card container in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/64afa655-7a21-4362-b87a-36f8f5f0f608.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s create the component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The component should look very similar to the one we wrote in [Chapter 4](e875a3eb-c517-4246-8233-cc681f6c3356.xhtml), *Frontend
    with React.js*. The next step is to write the constructor of our component. This
    component will rely on a `state` object where the card''s information is stored.
    Here is how the constructor should look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'As per [Chapter 4](e875a3eb-c517-4246-8233-cc681f6c3356.xhtml), *Frontend with
    React.js*, we put the card''s information in a file called `cards.json`, which
    should now exist in our `public` folder. The file contains a JSON array of objects,
    where each object contains data about one card, such as ID, image, description,
    prices, and product name. Here is sample data from the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the `public` folder of GoMusic, we also added a file called `promos.json`,
    which hosts data about sales and promotions. The data in `promos.json` is in the
    same data format as `cards.json`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, with the `CardContainer` constructor out of the way, we need to override
    the `componentDidMount()` method, in order to write the code to obtain the card
    data from either `cards.json`, or `promos.json`. When showing the main products
    page, we''ll obtain our product card''s data from `cards.json`. Whereas, when
    showing the promos and sales page, we''ll obtain our product card''s data from
    `promos.json`. Since the source of the card data is not unique, we''ll use a prop
    for this purpose. Let''s call the prop `location`. Here is how the code will look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we utilized the popular `fetch()` method to retrieve
    data from the address stored in `this.props.location`. If we are viewing the main
    products page, the value of location will be `cards.json`. If we are viewing the
    Promotions page, the value of location will be `promos.json`. Once we retrieve
    the card data, we'll store it in the `state` object of our `CardContainer` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let''s write the `render()` method of our `CardContainer` method.
    We will get the product cards from our component''s `state` object, then feed
    the product cards'' data as props to our `Card` components. Here is how the code
    will look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We also pass the `showBuyModal` prop to the card component; this prop represents
    the function that we will implement in the *Creating a parent StripeProvider component*
    section to open the buy modal window. The `showBuyModal` function will be expected
    to take the product ID represented as the card, as well as the selling price of
    the product, as input.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding code is very similar to the `CardContainer` code we wrote in [Chapter
    4](e875a3eb-c517-4246-8233-cc681f6c3356.xhtml), *Frontend with React.js*. The
    only addition is that we now also pass a `promo` prop to the `Card` component.
    The `promo` prop lets us know whether the product card in question is a promotion.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at the About page in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The About page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s add an About page. Here''s how it will look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/94e17a90-408f-4205-85a1-e1aa85de6785.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s navigate to the `src` folder in our project. Create a new file called
    `About.js`. We''ll start by importing the `react` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Next, we need to write a React component. Typically, we'd create a new class
    that would inherit from `React.Component`. However, we'll explore a different
    coding style that would be better suited to the About page.
  prefs: []
  type: TYPE_NORMAL
- en: 'For simpler components, where a full class is not needed, we simply use what
    is known as *functional components*.  Here is how the `About` component would
    look when written as a functional component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: A functional component is just a function that takes a props object as an argument.
    The function returns a JSX object that represents the view that we would like
    the component to show. The preceding code is equivalent to writing a class that
    inherits from `React.Component`, then overriding the `render()` method to return
    our view.
  prefs: []
  type: TYPE_NORMAL
- en: 'In more recent versions of React, a functional component can support a `state`
    object, through a feature known as React *Hooks*. A React Hook gives you the ability
    to initialize and utilize a state in a functional component. Here is a simple
    example of a `state` counter from the React documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We do not use React Hooks in our code here. However, if you are curious about
    the feature, you can explore it by visiting [https://reactjs.org/docs/hooks-intro.html](https://reactjs.org/docs/hooks-intro.html).
  prefs: []
  type: TYPE_NORMAL
- en: Before we move to the next section, it's worth mentioning that the `Card` component
    could have been written as a functional component as well, since it was relatively
    simple, and didn't need a constructor or any special logic beyond the `render()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's talk about how to build dialog windows in our React app.
  prefs: []
  type: TYPE_NORMAL
- en: Modal dialog windows and handling credit cards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now it''s time to cover the modal windows in our website. A modal window is
    a small temporary window that is overlaid on your main website. There are two
    main modal windows that we need to build:'
  prefs: []
  type: TYPE_NORMAL
- en: The Buy Item modal window
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Sign in modal window
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Buy Item modal window outline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start with the Buy Item modal window. This modal window should show
    up when a user clicks on the Buy button of a product card; in other words, when
    you click on the Buybutton:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6cb99759-1151-4091-a709-4d76298a110d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the Buy button is clicked, the following modal window should appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00abbfb0-a09d-4210-860b-a2e95e38c0c6.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the modal is basically a smaller window that showed up over
    our main website. It allows the user to input some important data before going
    back to the main website. Modal windows are very powerful tools in any modern
    website, so let's start writing one. The modal window we are building today needs
    to be capable of taking credit card information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start writing code, we''ll need to install an important package called
    `reactstrap`. This package exposes features offered by the bootstrap framework
    through React components; it has a very handy `Modal` component that we can use
    to build reactive modal windows. Let''s run the following command from our favorite
    Terminal. The command can be executed from the project''s main folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The first step is to go to the `src` folder, then create a new file called `modalwindows.js`.
    This file is where we will write all of our modal windows. Next, let''s import
    the React library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We then import the modal-related components from the `reactstrap` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we are starting with the Buy Item modal window, let''s write a React
    component called `BuyModalWindow`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We use the `export` keyword here, because this class will need to be exported
    to other files. Again, we will make use of the power of the Bootstrap frontend
    framework to build our modal window. When we wrote our `Card` component, we designed
    our `Buy` button to open a modal window with the `#buy` ID. So, here is our `#buy`
    modal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we built a React component that encapsulates a nice modal
    window with a green header, a Close button, and an empty body. The `Credit card
    form` code is not included yet; we'll get to that in the *Credit card handling
    with React and Stripe* section. The code makes use of the `Modal` component, which
    is provided by the `reactstrap` package. The `reactstrap` package also provides
    a `ModalHeader` component for us to specify how the modal header will look, as
    well as a `ModalBody` component to define the body of our modal window.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Modal` component hosts two very important React props that we need to
    address:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The** `isOpen` **prop**: A Boolean that needs to be set to true when we need
    the modal to show up, otherwise the value is false'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The** `toggle` **prop**: A callback function that is used to toggle the value
    of `isOpen` when needed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s do a quick tweak to our code first. Since the `BuyModalWindow` component
    doesn''t include any other methods besides the `render()` method, we can write
    it as a functional component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Perfect, now let's fill the empty body of our modal window. We need to write
    a `Credit card form` to be the body of our modal window.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section we'll take a look at credit card handling for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Credit card handling with React and Stripe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The idea of building a form that just takes credit card information might sound
    simple at first. However, the process involves more than just building a bunch
    of text boxes. In production environments, we need to be able to validate the
    information being entered to the credit card, and we need to figure out a secure
    way to handle credit card data. Since credit card information is extremely sensitive,
    we cannot treat it simply like any other piece of data.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, there are several services out there that you can use to handle credit
    cards in your frontend code. In this chapter, we'll make use of Stripe ([https://stripe.com/](https://stripe.com/)),
    which is one of the most popular services for handling payments with credit cards.
    Like almost any other web service in a production environment, you would need
    to visit its website, create an account, and get an API key to use in your product
    code. With Stripe, the registration also involves providing your business bank
    account so that they can deposit money into your account.
  prefs: []
  type: TYPE_NORMAL
- en: However, they also provide some test API keys that we can utilize for development
    and initial testing, which is what we'll be utilizing today.
  prefs: []
  type: TYPE_NORMAL
- en: Stripe helps with every step involved in charging credit cards in your application.
    Stripe validates credit cards, charges them with the approved amounts you provide,
    and then puts that money in your business bank account.
  prefs: []
  type: TYPE_NORMAL
- en: In order to fully integrate Stripe or almost any other payment service with
    your code, you need to write code at the frontend and the backend. In this chapter,
    we'll be covering most of the code needed at the frontend. We'll be visiting this
    topic again at a later chapter when working on the backend, in order to write
    the full integration. Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Due to the huge popularity of the React frontend framework, Stripe provides
    special React libraries and APIs that we can use to design visual elements that
    can take credit card data. These visual elements are known as React Stripe elements
    ([https://github.com/stripe/react-stripe-elements](https://github.com/stripe/react-stripe-elements)).
  prefs: []
  type: TYPE_NORMAL
- en: 'React Stripe elements provide the following functionalities:'
  prefs: []
  type: TYPE_NORMAL
- en: They provide some UI elements that can take credit card data, such as credit
    card numbers, expiry dates, CVC numbers, and ZIP codes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They can do advanced validation on the data entered. For example, for credit
    card fields, they can tell whether a Master Card or Visa is being entered.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After Stripe elements accept the data provided to them, they give you a token
    ID that represents the credit card in question and you can then enter this token
    ID in the backend to use the card in your application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perfect. So, now that we have enough background about Stripe, let's start writing
    some code.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of steps that you must cover in your code in order to properly
    integrate credit card handling with your frontend code:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a React component to host your `Credit card form` code. Let's call it
    the `child`React component; you'll see very shortly why it's a `child` component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside that component, make use of the Stripe elements, which are just some
    React components provided by Stripe in order to build the credit card input fields.
    These fields are simply the text boxes that take credit card information, such
    as the credit card number and expiry date.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside this `child` component, write the code to submit the validated credit
    card token to the backend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create another React component. This component will act as a parent to the
    React component that hosted the Stripe elements. The parent React component will
    need to do the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Host a stripe component that processes Stripe's API key, also known as `StripeProvider`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside the `StripeProvider` component, you need to host the `child` React component.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Before you can host the `child` React component, you need to inject itwith special
    Stripe code that wraps it with Stripe props and functions. The method to inject
    a component with Stripe code is called `injectStripe`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's implement the preceding steps one by one.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a child React component to host Stripe elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we need to install the Stripe react packages. In the Terminal, we need
    to navigate to our `gomusic` project folder, then run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Next, let's visit the `index.html` file located at `frontend/public/index.html`.
    Then, right before the HTML closing tag, which is the line right before `</head>`,
    type `<script src="img/"></script>`. This will ensure the Stripe code will be
    loaded when the end user loads our GoMusic application in their browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s write some code. Inside our `src` folder, let''s create new file
    called `CreditCards.js`. We start by importing the packages that we need for our
    incoming code to work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Time to write our `child` React component, which will host our credit card
    form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'In order for our code to be as realistic as possible, we need to adhere to
    the three states associated with processing a credit card:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Initial status**: No cards have been processed yet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Success status**: Card has been processed and succeeded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Failed status**: Card has been processed but failed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is the code to represent these three states:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s write three methods to represent the three states:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'These three methods will be called based on our current status. We need to
    save our current state in our React `state` object so that we can retrieve it
    at any time inside our component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The status will change based on the success or failure of the credit card transaction.
    It''s time to write the `render()` method of our React component. Our `render()`
    method will simply look at our current status by inspecting `this.state.status`,
    then based on the status, it will render the appropriate view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'What''s left is to write the code for the three render methods. Let''s start
    with the most complex, which is `renderCreditCardInformation()`. This is where
    we''ll use the Stripe element components. Here is the view that this method needs
    to produce:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d3426980-6d5b-4a93-b980-63684bfd9f9b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We''ll start by writing the JSX elements that represent the **Use Saved Card?** button
    at the beginning as well as the **Remember Card?** checkbox close to the end.
    We''ll write those elements separately because later we''ll need to hide them
    from users who are not logged in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we again used the Bootstrap framework to design the button
    and the checkbox.
  prefs: []
  type: TYPE_NORMAL
- en: Making use of Stripe elements to handle credit card information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now it''s time to design the user interface for the credit card payment information.
    Here is the piece that we need to build:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1501a47b-6104-4012-ab65-a2d5ccd7c68d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The most interesting part is the Card Information field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4fd4e940-f530-4ad4-8d1b-d760a3aa288d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is where we''ll make use of the Stripe elements components, in order to
    integrate Stripe''s UI and validation with our user interface. If you recall,
    there is a package called `CardElement` that we imported at the beginning of our
    `CreditCards.js` file. `CardElement` is nothing but a React component that is
    provided by Stripe in order to build credit card field UIs in your React applications.
    This is our Stripe element that we''ll be using in our code. We can simply utilize
    it through JSX like any other component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Stripe elements components support a prop called `style`, which allows you
    to define how the style of the element should look. The `style` prop takes a JavaScript
    object that defines how the style should look for the Stripe element. The following
    code shows a `style` object that looks right at home with the Bootstrap framework
    visually:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'For our card''s Stripe element to take the preceding `style` object, we just
    need to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Perfect. Now let''s build the rest of our `renderCreditCardInformation()` method.
    With the Stripe card element out of the way, we need to build the HTML form that
    will host the Stripe card element along with the Name On Card field in our credit
    card pay modal window. Here is the JSX code for the UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code only shows an HTML form that hosts the Name On Card as well
    as the card element visual component. We also made use of a method called `handleInputChange()`,
    which triggers when we input the Name On Card field. This method changes the `state`
    object of our component based on the new Name On Card value of our HTML form.
    This is the recommended React way to handle forms—create state to correspond to
    your HTML form values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s time to write the full code for the credit card information window, including
    the **Remember Card?** and **Use Saved Card?** options. Here''s how the full `renderCreditCardInformation()`
    method should look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code makes use of our `remembercardcheck` and `usersavedcard` elements.
    We also assume that there is a method called `handleSubmit`, which will get triggered
    when our HTML form gets submitted. The `handleSubmit` method will be discussed
    in the *Submitting a credit card token to the backend* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perfect. Now let''s write up the remaining methods in our `CreditCardForm`
    component: `renderSuccess()` and `renderFailure()`. We''ll start with `renderSuccess()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/34404de7-ddde-47be-81c1-2f6c07ae7e22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The code is simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is linked to the Buy modal window through the `toggle` method,
    which will get passed to our component here as a prop. As mentioned, the `toggle`
    method can be used to open or close a modal window. Since the modal window will
    be open when this code gets executed, the modal window will close once the **Ok**
    button is pressed. The full syntax for the `toggle` method will be defined later
    in our code, specifically when we cover the main code in the `App.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s how the `renderFailure()` method looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a1b2f258-b9f6-4ef1-b8ed-2118438c0208.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The code for the preceding UI looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Submitting a credit card token to the backend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let's go back to the `handleSubmit()` method, which should trigger whenever
    the credit card HTML form submits. When you make use of a Stripe element component,
    it not only validates the credit card information, but it also returns a `token`
    object that represents the credit card entered. This `token` object is what you'll
    use in the backend to charge this card.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `handleSubmit()` method code needs to take care of a number of things:'
  prefs: []
  type: TYPE_NORMAL
- en: Retrieve the token that corresponds to the credit card entered
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Send the token to our backend server
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Render a success or a failure state based on the outcome
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here''s how the code will look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'If you look closely at the preceding code, you will notice that we made use
    of a method called `this.props.stripe.createToken()`, which we assumed is embedded
    in our props, in order to retrieve the credit card token:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The method is called `createToken()`. We passed the Name On Card value as an
    argument (which was stored in our `state` object). The `createToken()` method
    can only be available if we inject our React component with Stripe code. We will
    see how to do that in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: We also made use of JavaScript's `fetch()` method, in order to send an HTTP `POST`
    request to relative URL. The `POST` request will include our Stripe token ID as
    well as the type of operation of the request. We pass an operation type here because
    I would like to use this request in the future to either take money from a card
    or save a card for later use. We'll be talking more about the other end of the
    `POST` request when it's time to cover the backend code.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a parent StripeProvider component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next step is to create a parent component to host our `CreditCardForm`
    component.  Here is what we need to do:'
  prefs: []
  type: TYPE_NORMAL
- en: Inject our `CreditCardForm` component with the Stripe API code. This is done
    using the `injectStripe()`method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide our Stripe API key to our component. This is done using the `StripeProvider`
    React component, which is provided by Stripe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Host the `CreditCardForm` component inside our parent component. This is done
    using the `Elements` component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will make much more sense when we see the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code should exist in our `CreditCards.js` file, which also contained
    our `CreditCardForm` component code. We also passed the operation as a prop, which
    we then later used when we submitted the credit card request to our backend. Also
    notice `export default` at the beginning of our `CreditCardInformation` component
    definition. This is because we will be importing and using this component in other
    files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we''ve followed all the steps to write a credit card form that can
    integrate with Stripe, it''s time to go back to our buy modal window to embed
    the credit card form in it. Our buy modal window existed in the `modalwindows.js`
    file. As a reminder, here is the code that we covered earlier for the buy modal
    window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'First we need to import the `CreditCardInformation` component to our `modalwindows.js`.
    So, we need to add this line to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'All that we need to do now is to embed our `CreditCardInformation` component
    in the modal body:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: And with that, we are done with the Buy modal window. Now let's move to the
    Sign in window.
  prefs: []
  type: TYPE_NORMAL
- en: The Sign in and Register modal windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we jump into the code, let''s first explore how the Sign in and Register
    modal windows should look. Click on the Sign in button in our navigation bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7d54c8e8-b16c-4608-8d7a-99789cee34bf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following modal window should appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4b24d1a4-8e05-477c-9980-a887c6689b72.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we click on the **New User? Register** link, the modal window should expand
    to show the registration form for new users:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e291409c-aadb-47df-8973-3e5b5a8e081c.png)'
  prefs: []
  type: TYPE_IMG
- en: In order to build those modal windows correctly, we need to cover how to properly
    handle forms with multiple inputs in the React framework.
  prefs: []
  type: TYPE_NORMAL
- en: Handling forms in the React framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the React framework relies on being in control of your frontend state,
    forms represent a challenge to this vision. This is because, in HTML forms, each
    input field handles its own state based on the user input. Let's say we have a
    text box and the user makes some changes to it; the text box will change its state
    based on what the user enters. In React however, it is preferred that any state
    change should be handled in the `state` object using the `setState()` method.
    There are multiple ways to handle forms in React.
  prefs: []
  type: TYPE_NORMAL
- en: We'll make use of various ways of handling HTML forms. React encourages what
    is known as the *controlled components* approach, which simply means that you
    design your component in a way such that your `state` object becomes the single
    source of truth.
  prefs: []
  type: TYPE_NORMAL
- en: 'But how? The answer is simple:'
  prefs: []
  type: TYPE_NORMAL
- en: You monitor your HTML form input fields inside your component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Whenever a form input field changes, you change your `state` object to hold
    the new value of the form input field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your `state` object now will hold the latest values of your form input.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Sign in page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start with the Sign in page. As a reminder, here''s how it looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/17659113-d417-44df-b35f-ddbf96456bf6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is basically a form with two text input fields, a button, a link, and
    some labels. The first step is to create a React component to host the Sign in
    form. In the `modalwindows.js` file, let''s create a new component called `SignInForm`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to create a `state` object in our component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Our `state` object currently hosts a single field called `errormessage`. Whenever
    the sign-in process fails, we'll fill up the `errormessage` field with the error
    message that occurred.
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, we need to bind two methods: one to handle form submission and
    one to handle form input change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Now it''s time to write our `render()` method. The `render()` method will need
    to perform the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Show the Sign in form, collect the user input, then submit the form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show an error message if the sign in failed, then enable the user to sign in
    again
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is how the code will look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'There are some important points that we need to cover from the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: For each input element, there is an attribute called `name`. This attribute
    is used to identify each input element. This is important because when we set
    our `state` object to reflect the value on each input, we need to identify the
    input name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also for each input element, there is an attribute called `onChange`. This attribute
    is how we call our `handleChange()` method whenever a user inputs data on our
    HTML form.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end of our form, if the user decides to click on the New user? Register link,
    we call a method called `handleNewUser()`, which is passed to us by the component
    props. We'll cover this method in the next section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s talk about the `handleChange()` method, which will populate our `state`
    object with the data that the user inputs into the HTML Sign in form. For that,
    we''ll use a modern JavaScript feature called *computed property name*. Here is
    how the code looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we made use of the `name` property of the event target,
    which corresponds to the name attributes that we assigned in the HTML form. After
    the user inputs the username and the password, our `state` object will end up
    looking like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The last piece in our `SignInForm` would be the `handleSubmit()` method. We''ll
    cover this method in more detail when it''s time to cover the backend in [Chapter
    6](d2dd4c31-a063-4318-bf78-9657870c6582.xhtml), *RESTful Web APIs in Go with the
    Gin Framework*. So, for now, here''s a filler for the `handleSubmit()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: The Registration form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next form we need to cover is the Registration form. As a reminder, here
    is how it looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d343d0df-f59f-47a5-84d4-9edbd66f584c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This form will be in the same file as the Sign in form, which was `modalwindows.js`.
    The code for the Registration form will be very similar to the code we just covered
    for the Sign in form. The difference is that the form for Registration has some
    more fields than the Sign In form, otherwise the code is very similar. Here is
    the code for the Registration form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Perfect! With this out of the way, we have finished the Sign in form as well
    as the Registration form. We just need to write the containing modal window code
    that will host either the Sign in form or the Registration form. The modal window
    will need to achieve the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Show the Sign in form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the user clicks on the New User? Register option, the Registration form should
    appear
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s create a new React component in the `modalwindows.js` file and call
    it `SignInModalWindow`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'To design this component properly, we need to think about the fact that this
    component has two modes—specifically, whether it should show the Sign in page
    for existing users, or show the new Registration page for new users. In the world
    of React, we need to make use of our `state` object, in order to keep track of
    whether we are showing the Sign in page or the Registration page. The initial
    state would be to show the Sign in page, then if the user clicks on the New User?
    Register link, we change our state to the Registration page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, besides initializing our `state` object, we also bounded
    a method called `handleNewUser()`. This method is what we''ll call when a user
    clicks on the New User? Register link to load the Registration form instead of
    the Sign in page. This method should change the value of our `state` object to
    reflect the fact that we need to now load the Registration form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: This sounds good. However, the New User? Register link existed in the `SignInForm`
    React component, so how do we call the `handleNewUser()` method here from our
    `SignInForm` component?
  prefs: []
  type: TYPE_NORMAL
- en: 'The answer is simple: we pass the method as a prop to `SignInForm`, and then
    `SignInForm` calls the method whenever the New User? Register link is clicked.
    If you go back a few pages, you will find that we did indeed link the New User?
    Register link in the `SignInForm` React component to a function prop called `handleNewUser()`,
    which gets called whenever the link is clicked. At the time, we said that we''ll
    cover this prop in a little bit, and here we are.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now the remaining piece of the `SignInModalWindow` component is the required
    `render()` method, which will sum up what we need to do. Here is what the `render()`
    method needs to do:'
  prefs: []
  type: TYPE_NORMAL
- en: Check the `state` object. If it shows that we need to show the Registration
    form, load the Registration form component, `RegistrationForm`, otherwise keep `SignInForm`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the `SignInForm`, pass the `handleNewUser()` method as a prop. This is a
    common design pattern in the React world.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load the modal window code. As usual, we'll make use of the powerful Bootstrap
    framework to style our form.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Include either `SignInForm` or `RegistrationForm` in the modal window, based
    on what our `state` object dictates:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: In the next section, we'll take a look at the user pages in our application.
  prefs: []
  type: TYPE_NORMAL
- en: User pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s now time to discuss the user page—what should the user see once they
    sign into our application? Here is what they should see:'
  prefs: []
  type: TYPE_NORMAL
- en: Their name in the navigation menu, with an option to Sign out
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list of their existing orders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's explore how this looks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The navigation menu should change to look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/719e047f-ed89-4239-90e0-23152f243adc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It now allows to navigate to a page called My Orders, which will show the user''s
    previous orders. The other difference is that instead of a Sign In button, we
    now see a Welcome <username> drop-down button. When you click on it, the following
    option should appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/32e2bae0-adc6-4bb4-92a4-5c66f2a8c691.png)'
  prefs: []
  type: TYPE_IMG
- en: This is the Sign Out button, which the user will need to click on to sign out
    of their session.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s have a look at the My Orders page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a09e6c10-70e1-4a3f-8c54-37d621e7cb11.png)'
  prefs: []
  type: TYPE_IMG
- en: It's a relatively simple page that shows a list of the user's existing orders.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's write some code for the orders page.
  prefs: []
  type: TYPE_NORMAL
- en: The orders page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start with writing the React component that represent the My Orders page.
    There are two components involved with the My Orders page:'
  prefs: []
  type: TYPE_NORMAL
- en: A single order card component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A parent container component that hosts all the order card components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s begin with the single order card component. Here is how it looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/661e5576-7fa9-4548-90e1-69390398b78c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a new file called `orders.js` inside the `src` folder. In there, we''ll
    write our new components. At the top of the file, we need to import React:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'For the single order card component, let''s call it simply `Order`. This component
    will be simple. Since it will be contained within a parent container component,
    we can assume that all the order information is passed as props. Also, since we
    don''t need to create any special methods, let''s make it a functional component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: As always, the Bootstrap framework makes styling our component a breeze.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s move to the orders container parent component. This one will be
    a bit more complex because we need to store our orders in the `state` object of
    the component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'The orders list needs to come from the backend part of our application. Because
    of that, the `state` object should change based on the interaction with the backend
    of our application. Let''s not worry about that part for now because we''ll have
    to cover it when designing the backend of our application in [Chapter 6](d2dd4c31-a063-4318-bf78-9657870c6582.xhtml),
    *RESTful Web APIs in Go with the Gin Framework*. For now, let''s jump into the
    `render()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is simple. We go through the orders in our `state` object,
    then load an `Order` component for each order object that we have. Remember here
    that when we are dealing with lists, we should use the `key` prop for the React
    framework to properly handle changes in the list, as mentioned in [Chapter 4](e875a3eb-c517-4246-8233-cc681f6c3356.xhtml),
    *Frontend with React.js*.
  prefs: []
  type: TYPE_NORMAL
- en: If you look at the GitHub code for this chapter, you'll notice that I actually
    fetch the orders data from a static file, in order to update the `orders` list
    in the `state` object. This is temporary, since I need some data to show how the
    visuals will look.
  prefs: []
  type: TYPE_NORMAL
- en: The user page navigational menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's go back to the `navigation.js` file that was in our `src` folder. We already
    wrote a `Navigation` React component there in the *The navigational menu* section,
    which included the default navigation menu if the user is not logged in. We now
    need to add the pieces that should show up when a user is logged in. The first
    step is to write a new method, called `buildLoggedInMenu()`, which will show the
    Welcome <user> drop-down button, as well as the sign out option.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `Navigation` React component, let''s add the new method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: The method makes use of JSX with Bootstrap in order to build our drop-down button
    and sign out option. We assume that the username is passed to us as a prop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we''ll need to modify the `render()` method in order to change the navigation
    menu when a user is logged in. We''ll assume a prop is passed to us that specifies
    whether the user is logged in. The modified `render()` method also needs a new
    navigational link to point to the My Orders page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we assumed a prop had been passed to us that tells us
    whether the user is logged in (`this.props.user.loggedin`). If the user is logged
    in, we do two things:'
  prefs: []
  type: TYPE_NORMAL
- en: Call the `buildLoggedInMenu()` method to load the user drop-down button at the
    end of the navigation menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a link to a path called `/myorders`. This link will connect to the `OrderContainer`
    component. We'll cover how to connect this link to a React component in the next
    section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Putting it all together – routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We now need to write the React component that connects all the preceding components
    together. You are probably thinking that we already wrote the navigation menu—shouldn''t
    that link everything together? The simple answer is: not yet. In the navigation
    menu component, we made use of links to point to other pages. However, we did
    not connect those links to actual react components; the `/about` link needs to
    connect to the `About` React component, the `/myorders` link needs to connect
    to the `OrderContainer` React component, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: We used a React component called `NavLink` in order to create our links. `NavLink`
    was obtained from the `react-router-dom` package, which we installed in the *The
    navigational menu* section. The `NavLink` component is the first step to connect
    links to React components, while the second step is another type called `BrowserRouter`.
    Let's see that in action.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file called `App.js`; it should exist in our `src` folder. This
    file will host a component that will act as the entry point for all our other
    components. Because of that, we need to import all the major components that we
    have created so far in here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to import a few components from the `react-router-dom` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s write our new component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Since this component will have access to all the other components, we need
    to store global information here. One of the most important pieces of information
    for our application is whether the user is signed in, because this effects how
    our application pages look. Because of that, the `state` object of this component
    needs to reflect whether a user is logged in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Let's not worry about how this state is populated for now, because this will
    need to be covered when we write the backend part of our application. For the
    time being, let's focus on how to connect each `NavLink` to a React component.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three steps involved:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a component of the `BrowserRouter` type. In our case, we just named it `Router`
    for simplicity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside `BrowserRouter`, put all the instances `NavLink`. In our case, all of
    our `NavLink` instances are in the `Navigation` component; we imported the `Navigation`
    component here as `Nav` for simplicity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside `BrowserRouter`, use the `Route` component that we imported from the
    `react-router-dom` package to link a URL path to the React component. Each URL
    path will correspond to a `NavLink` path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The preceding steps can be hosted in our `render()` method. Here is how this
    code looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code implements the three steps that we covered earlier. It also
    includes `SignInModalWindow` and `BuyModalWindow`. Either modal window will only
    show up if the user activates them.
  prefs: []
  type: TYPE_NORMAL
- en: 'We used two different ways to connect a `NavLink` instance to a React component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If a component needs a prop as an input, we use `render`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'If a component does not need a prop as an input, we can use the `Route` component:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'In order for the routing concepts to sync, let''s look at what happened with
    the `About` React component:'
  prefs: []
  type: TYPE_NORMAL
- en: In our navigational menu component (`Navigation` at `Navigation.js`), we used
    the `NavLink` type that we obtained from `react-router-dom` to create a path called
    `/about:<NavLink className="nav-item nav-link" to="/about">About</NavLink>`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In our `App` component, we linked the `/about` path to the `About` React component:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Now, we need to define the `toggle` methods and show methods for the buy and
    the sign-in modal windows. The `show` methods are basically the methods to call
    in order to show the buy or sign-in modal windows. The most straightforward way
    to do this is to use a `state` object of our component to specify whether the
    modal windows should be on or off. Our application is designed so that only one
    modal window should be open at a time, which is why we'll control their open/closed
    state from our `App` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by exploring the `show` methods for the buy and sign-in modal
    windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: The code, in both cases, will clone our `state` object, while adding and setting
    a Boolean field that indicates that the target modal window should be on. In case
    of the sign-in modal window, the Boolean field will be called `showSignInModal`,
    whereas, in the case of the buy modal window, the Boolean field will be called
    `showBuyModal`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s look at the `toggle` methods for the sign in and the buy modal
    windows. As mentioned, the `toggle` method is used to toggle the state of the
    modal window. In our case, we just need to reverse the value of the `state` Boolean
    fields that represent whether our modal windows are open:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'The constructor for our `App` component needs to bind the new methods that
    we added for them to be used in our code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to pass the new methods to the components that need them as prop
    objects. We also need to pass the `state.showSignInModal` and `state.showBuyModal`
    flags, because that''s how our modal window components will know whether a modal
    window should be visible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: There are two remaining code pieces to be covered in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first piece is to make the `App` component exportable because this component
    will become the entry point for all our other components. At the end of the `App.js`
    file, let''s add this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'The second piece of code we need to write is to link the `App` React component
    to the `root` element of our template HTML code. Create a file called `index.js`,
    where we add this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: This code makes use of the tools that are loaded with the Create React App tool.
  prefs: []
  type: TYPE_NORMAL
- en: Perfect! With this last piece of code out of the way, our chapter is done.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter took a practical deep dive into how to build a proper frontend
    application using the React framework. We covered several topics as we built our
    application, such as routing, handling credit cards and forms, and typical React
    framework design approaches. You should have enough knowledge at this point to
    build non-trivial applications in the React framework.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll switch topics and revisit Go. We'll start to cover
    how to build the backend for our GoMusic application, by introducing the Go open
    source framework, Gin.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is `react-router-dom`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is `NavLink`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is Stripe?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we handle credit cards in React?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a controlled component?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is `BrowserRouter`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are Stripe elements?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the `injectStripe()` method?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we handle routing in React?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information on the topics covered in this chapter, check out the following
    links:'
  prefs: []
  type: TYPE_NORMAL
- en: '**React router package**: [https://reacttraining.com/react-router/ ](https://reacttraining.com/react-router/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stripe**: [https://stripe.com/](https://stripe.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stripe React elements**: [https://stripe.com/docs/recipes/elements-react](https://stripe.com/docs/recipes/elements-react)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Handling forms in React**: [https://reactjs.org/docs/forms.html](https://reactjs.org/docs/forms.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
