["```go\npackage models\n```", "```go\ntype Product struct{\n  Image string `json:\"img\"`\n  ImagAlt string `json:\"imgalt\"`\n  Price float64 `json:\"price\"`\n  Promotion float64 `json:\"promotion\"`\n  ProductName string `json:\"productname\"`\n  Description string `json:\"desc\"`\n}\n```", "```go\n{\n     \"img\": \"/path/to/img.jpeg\",\n     \"imgalt\": \"image alt\",\n     \"price\": 100,\n     \"promotion\":80,\n     \"productname\": \"guitar\",\n     \"desc\": \"A black guitar with with amazing sounds!!\"\n}\n```", "```go\ntype Customer struct {\n  FirstName string `json:\"firstname\"`\n  LastName string `json:\"lastname\"`\n  Email string `json:\"email\"`\n  LoggedIn bool `json:\"loggedin\"`\n}\n```", "```go\ntype Order struct{\n  Product\n  Customer\n  CustomerID int `json:\"customer_id\"`\n  ProductID int `json:\"product_id\"`\n  Price float64 `json:\"sell_price\"`\n  PurchaseDate time.Time `json:\"purchase_date\"`\n}\n```", "```go\npackage dblayer\n\nimport (\n  \"github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Go/Chapter06/backend/src/models\"\n)\n```", "```go\ntype DBLayer interface{\n  GetAllProducts() ([]models.Product, error)\n  GetPromos() ([]models.Product, error)\n  GetCustomerByName(string, string) (models.Customer, error)\n  GetCustomerByID(int) (models.Customer, error)\n  GetProduct(uint) (models.Product, error)\n  AddUser(models.Customer) (models.Customer, error)\n  SignInUser(username, password string) (models.Customer, error)\n  SignOutUserById(int) error\n  GetCustomerOrdersByID(int) ([]models.Order, error)\n}\n```", "```go\ngo get -u github.com/gin-gonic/gin\n```", "```go\npackage rest\n\nimport (\n  \"github.com/gin-gonic/gin\"\n)\n```", "```go\nfunc RunAPI(address string) error{\n}\n```", "```go\nfunc RunAPI(address string) error{\n    r := gin.Default()\n}\n```", "```go\nfunc RunAPI(address string) error{\n    r := gin.Default()\n r.GET(\"/relativepath/to/url\", func(c *gin.Context) {\n //take action\n })\n}\n```", "```go\n//get products\n  r.GET(\"/products\",func(c *gin.Context) {\n      //return a list of all products to the client\n    }\n )\n```", "```go\n//get promos\n  r.GET(\"/promos\",func(c *gin.Context) {\n      //return a list of all promotions to the client\n    } \n  )\n```", "```go\n//post user sign in\n  r.POST(\"/users/signin\", func(c *gin.Context) {\n      //sign in a user\n    } \n  )\n//add user\nr.POST(\"/users\",func(c *gin.Context){\n        //add a user\n    }\n)\n```", "```go\n//post user sign out\n /*\n  In the path below, our relative url needs to include the user id\n  Since the id will differ based on the user, the Gin framework allows us to include a wildcard. In Gin, the wildcard will take the form ':id' to indicate that we are expecting a parameter here with the name 'id'\n*/\n  r.POST(\"/user/:id/signout\",func(c *gin.Context) {\n      //sign out a user with the provided id\n    } \n  )\n```", "```go\n//get user orders\n  r.GET(\"/user/:id/orders\", func(c *gin.Context) {\n      //get all orders belonging to the provided user id\n    } \n  )\n```", "```go\n//post purchase charge\n  r.POST(\"/users/charge\", func(c *gin.Context) {\n      //charge credit card for user\n    } \n  )\n```", "```go\npackage rest\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"net/http\"\n  \"strconv\"\n\n  \"github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Go/Chapter06/backend/src/dblayer\"\n  \"github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Go/Chapter06/backend/src/models\"\n  \"github.com/gin-gonic/gin\"\n)\n```", "```go\n type HandlerInterface interface {\n  GetProducts(c *gin.Context)\n  GetPromos(c *gin.Context)\n  AddUser(c *gin.Context)\n  SignIn(c *gin.Context)\n  SignOut(c *gin.Context)\n  GetOrders(c *gin.Context)\n  Charge(c *gin.Context)\n}\n```", "```go\ntype Handler struct{\n    db dblayer.DBLayer\n}\n```", "```go\nfunc NewHandler() (*Handler, error) {\n  //This creates a new pointer to the Handler object\n  return new(Handler), nil\n}\n```", "```go\nfunc (h *Handler) GetProducts(c *gin.Context) {\n}\n```", "```go\nfunc (h *Handler) GetProducts(c *gin.Context) {\n  if h.db == nil {\n    return\n  }\n  products, err := h.db.GetAllProducts()\n}\n```", "```go\nfunc (h *Handler) GetProducts(c *gin.Context) {\n  if h.db == nil {\n    return\n  }\n  products, err := h.db.GetAllProducts()\n  if err != nil {\n /*\n First argument is the http status code, whereas the second argument is the body of the request\n */\n c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\n    return\n  }\n}\n```", "```go\nfunc (h *Handler) GetProducts(c *gin.Context) {\n  if h.db == nil {\n    return\n  }\n  products, err := h.db.GetAllProducts()\n  if err != nil {\n    c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\n    return\n  }\n c.JSON(http.StatusOK, products)\n}\n```", "```go\nfunc (h *Handler) GetPromos(c *gin.Context) {\n  if h.db == nil {\n    return\n  }\n promos, err := h.db.GetPromos()\n  if err != nil {\n    c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\n    return\n  }\n c.JSON(http.StatusOK, promos)\n}\n```", "```go\nfunc (h *Handler) SignIn(c *gin.Context) {\n  if h.db == nil {\n    return\n  }\n  var customer models.Customer\n err := c.ShouldBindJSON(&customer)\n}\n```", "```go\nfunc (h *Handler) SignIn(c *gin.Context) {\n  if h.db == nil {\n    return\n  }\n  var customer models.Customer\n  err := c.ShouldBindJSON(&customer)\n  if err != nil {\n    c.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n    return\n  }\n  customer,err = h.db.SignInUser(customer)\n  if err != nil {\n    c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\n    return\n  }\n  c.JSON(http.StatusOK, customer)\n}\n```", "```go\n\nfunc (h *Handler) AddUser(c *gin.Context) {\n  if h.db == nil {\n    return\n  }\n  var customer models.Customer\n  err := c.ShouldBindJSON(&customer)\n  if err != nil {\n    c.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n    return\n  }\n  customer,err = h.db.AddUser(customer)\n  if err != nil {\n    c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\n    return\n  }\n  c.JSON(http.StatusOK, customer)\n}\n```", "```go\nfunc (h *Handler) SignOut(c *gin.Context) {\n  if h.db == nil {\n    return\n  }\n  p := c.Param(\"id\")\n  // p is of type string, we need to convert it to an integer type\n  id,err := strconv.Atoi(p)\n  if err != nil {\n    c.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n    return\n  }\n}\n```", "```go\nfunc (h *Handler) SignOut(c *gin.Context) {\n  if h.db == nil {\n    return\n  }\n  p := c.Param(\"id\")\n  id, err := strconv.Atoi(p)\n  if err != nil {\n    c.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n    return\n  }\n\n  err = h.db.SignOutUserById(id)\n  if err != nil {\n    c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\n    return\n  }\n}\n```", "```go\nfunc (h *Handler) GetOrders(c *gin.Context) {\n  if h.db == nil {\n    return\n  }\n  // get id parameter\n  p := c.Param(\"id\")\n  // convert the string 'p' to integer 'id'\n  id, err := strconv.Atoi(p)\n  if err != nil {\n    c.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n    return\n  }\n  // call the database layer method to get orders from id\n  orders, err := h.db.GetCustomerOrdersByID(id)\n  if err != nil {\n    c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\n    return\n  }\n  c.JSON(http.StatusOK, orders)\n}\n```", "```go\nfunc (h *Handler) Charge(c *gin.Context) {\n  if h.db == nil {\n    return\n  }\n}\n```", "```go\nfunc RunAPI(address string) error {\n  //Get gin's default engine\n  r := gin.Default()\n  //Define a handler\n  h, _ := NewHandler()\n  //get products\n  r.GET(\"/products\", h.GetProducts)\n  //get promos\n  r.GET(\"/promos\", h.GetPromos)\n  //post user sign in\n  r.POST(\"/users/signin\", h.SignIn)\n  //add a user\n  r.POST(\"/users\",h.AddUser)\n  //post user sign out\n  r.POST(\"/user/:id/signout\", h.SignOut)\n  //get user orders\n  r.GET(\"/user/:id/orders\", h.GetOrders)\n  //post purchase charge\n  r.POST(\"/users/charge\", h.Charge)\n  //run the server\n  return r.Run(address)\n}\n```", "```go\nfunc RunAPI(address string,h HandlerInterface) error {\n  //Get gin's default engine\n  r := gin.Default()\n  //get products\n  r.GET(\"/products\", h.GetProducts)\n  //get promos\n  r.GET(\"/promos\", h.GetPromos)\n  /*\n    //post user sign in\n    r.POST(\"/user/signin\", h.SignIn)\n    //post user sign out\n    r.POST(\"/user/:id/signout\", h.SignOut)\n    //get user orders\n    r.GET(\"/user/:id/orders\", h.GetOrders)\n    //post purchase charge\n    r.POST(\"/user/charge\", h.Charge)\n  */\n\n  userGroup := r.Group(\"/user\")\n  {\n    userGroup.POST(\"/:id/signout\", h.SignOut)\n    userGroup.GET(\"/:id/orders\", h.GetOrders)\n  }\n\n  usersGroup := r.Group(\"/users\")\n  {\n    usersGroup.POST(\"/charge\", h.Charge)\n    usersGroup.POST(\"/signin\", h.SignIn)\n    usersGroup.POST(\"\", h.AddUser)\n  }\n\n  return r.Run(address)\n}\n```", "```go\nfunc RunAPIWithHandler(address string,h HandlerInterface) error{\n    //our code\n}\n```", "```go\nfunc RunAPI(address string) error {\n  h, err := NewHandler()\n  if err != nil {\n    return err\n  }\n  return RunAPIWithHandler(address, h)\n}\n```", "```go\nfunc main() {\n  log.Println(\"Main log....\")\n  log.Fatal(rest.RunAPI(\"127.0.0.1:8000\"))\n}\n```", "```go\n\"proxy\": \"http://127.0.0.1:8000/\"\n```"]