["```go\nfunc (h *Handler) GetProducts(c *gin.Context) {\n  if h.db == nil {\n    c.JSON(http.StatusInternalServerError, gin.H{\"error\": \"server database error\"})\n    return\n  }\n  products, err := h.db.GetAllProducts()\n  if err != nil {\n    c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\n    return\n  }\n  fmt.Printf(\"Found %d products\\n\", len(products))\n  c.JSON(http.StatusOK, products)\n}\n```", "```go\ntype DBLayer interface {\n  GetAllProducts() ([]models.Product, error)\n  GetPromos() ([]models.Product, error)\n  GetCustomerByName(string, string) (models.Customer, error)\n  GetCustomerByID(int) (models.Customer, error)\n  GetProduct(int) (models.Product, error)\n  AddUser(models.Customer) (models.Customer, error)\n  SignInUser(username, password string) (models.Customer, error)\n  SignOutUserById(int) error\n  GetCustomerOrdersByID(int) ([]models.Order, error)\n  AddOrder(models.Order) error\n  GetCreditCardCID(int) (string, error)\n  SaveCreditCardForCustomer(int, string) error\n}\n```", "```go\npackage dblayer\n\nimport (\n  \"encoding/json\"\n  \"fmt\"\n  \"strings\"\n\n  \"github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Go/tree/master/Chapter08/backend/src/models\"\n)\n\ntype MockDBLayer struct {\n err error\n products []models.Product\n customers []models.Customer\n orders []models.Order\n} \n```", "```go\nfunc NewMockDBLayer(products []models.Product, customers []models.Customer, orders []models.Order) *MockDBLayer {\n  return &MockDBLayer{\n    products: products,\n    customers: customers,\n    orders: orders,\n  }\n}\n```", "```go\nfunc NewMockDBLayerWithData() *MockDBLayer {\n  PRODUCTS := `[\n    {\n        \"ID\": 1,\n        \"CreatedAt\": \"2018-08-14T07:54:19Z\",\n        \"UpdatedAt\": \"2019-01-11T00:28:40Z\",\n        \"DeletedAt\": null,\n        \"img\": \"img/strings.png\",\n        \"small_img\": \"img/img-small/strings.png\",\n        \"imgalt\": \"string\",\n        \"price\": 100,\n        \"promotion\": 0,\n        \"productname\": \"Strings\",\n        \"Description\": \"\"\n    },\n    {\n        \"ID\": 2,\n        \"CreatedAt\": \"2018-08-14T07:54:20Z\",\n        \"UpdatedAt\": \"2019-01-11T00:29:11Z\",\n        \"DeletedAt\": null,\n        \"img\": \"img/redguitar.jpeg\",\n        \"small_img\": \"img/img-small/redguitar.jpeg\",\n        \"imgalt\": \"redg\",\n        \"price\": 299,\n        \"promotion\": 240,\n        \"productname\": \"Red Guitar\",\n        \"Description\": \"\"\n    },\n    {\n        \"ID\": 3,\n        \"CreatedAt\": \"2018-08-14T07:54:20Z\",\n        \"UpdatedAt\": \"2019-01-11T22:05:42Z\",\n        \"DeletedAt\": null,\n        \"img\": \"img/drums.jpg\",\n        \"small_img\": \"img/img-small/drums.jpg\",\n        \"imgalt\": \"drums\",\n        \"price\": 17000,\n        \"promotion\": 0,\n        \"productname\": \"Drums\",\n        \"Description\": \"\"\n    },\n    {\n        \"ID\": 4,\n        \"CreatedAt\": \"2018-08-14T07:54:20Z\",\n        \"UpdatedAt\": \"2019-01-11T00:29:53Z\",\n        \"DeletedAt\": null,\n        \"img\": \"img/flute.jpeg\",\n        \"small_img\": \"img/img-small/flute.jpeg\",\n        \"imgalt\": \"flute\",\n        \"price\": 210,\n        \"promotion\": 190,\n        \"productname\": \"Flute\",\n        \"Description\": \"\"\n    },\n    {\n        \"ID\": 5,\n        \"CreatedAt\": \"2018-08-14T07:54:20Z\",\n        \"UpdatedAt\": \"2019-01-11T00:30:12Z\",\n        \"DeletedAt\": null,\n        \"img\": \"img/blackguitar.jpeg\",\n        \"small_img\": \"img/img-small/blackguitar.jpeg\",\n        \"imgalt\": \"Black guitar\",\n        \"price\": 200,\n        \"promotion\": 0,\n        \"productname\": \"Black Guitar\",\n        \"Description\": \"\"\n    },\n    {\n        \"ID\": 6,\n        \"CreatedAt\": \"2018-08-14T07:54:20Z\",\n        \"UpdatedAt\": \"2019-01-11T00:30:35Z\",\n        \"DeletedAt\": null,\n        \"img\": \"img/saxophone.jpeg\",\n        \"small_img\": \"img/img-small/saxophone.jpeg\",\n        \"imgalt\": \"Saxophone\",\n        \"price\": 1000,\n        \"promotion\": 980,\n        \"productname\": \"Saxophone\",\n        \"Description\": \"\"\n    }\n]\n`\n\n  ORDERS := `[\n  {\n      \"ID\": 1,\n      \"CreatedAt\": \"2018-12-29T23:35:36Z\",\n      \"UpdatedAt\": \"2018-12-29T23:35:36Z\",\n      \"DeletedAt\": null,\n      \"img\": \"\",\n      \"small_img\": \"\",\n      \"imgalt\": \"\",\n      \"price\": 0,\n      \"promotion\": 0,\n      \"productname\": \"\",\n      \"Description\": \"\",\n      \"name\": \"\",\n      \"firstname\": \"\",\n      \"lastname\": \"\",\n      \"email\": \"\",\n      \"password\": \"\",\n      \"loggedin\": false,\n      \"orders\": null,\n      \"customer_id\": 1,\n      \"product_id\": 1,\n      \"sell_price\": 90,\n      \"purchase_date\": \"2018-12-29T23:34:32Z\"\n  },\n  {\n      \"ID\": 2,\n      \"CreatedAt\": \"2018-12-29T23:35:48Z\",\n      \"UpdatedAt\": \"2018-12-29T23:35:48Z\",\n      \"DeletedAt\": null,\n      \"img\": \"\",\n      \"small_img\": \"\",\n      \"imgalt\": \"\",\n      \"price\": 0,\n      \"promotion\": 0,\n      \"productname\": \"\",\n      \"Description\": \"\",\n      \"name\": \"\",\n      \"firstname\": \"\",\n      \"lastname\": \"\",\n      \"email\": \"\",\n      \"password\": \"\",\n      \"loggedin\": false,\n      \"orders\": null,\n      \"customer_id\": 1,\n      \"product_id\": 2,\n      \"sell_price\": 299,\n      \"purchase_date\": \"2018-12-29T23:34:53Z\"\n  },\n  {\n      \"ID\": 3,\n      \"CreatedAt\": \"2018-12-29T23:35:57Z\",\n      \"UpdatedAt\": \"2018-12-29T23:35:57Z\",\n      \"DeletedAt\": null,\n      \"img\": \"\",\n      \"small_img\": \"\",\n      \"imgalt\": \"\",\n      \"price\": 0,\n      \"promotion\": 0,\n      \"productname\": \"\",\n      \"Description\": \"\",\n      \"name\": \"\",\n      \"firstname\": \"\",\n      \"lastname\": \"\",\n      \"email\": \"\",\n      \"password\": \"\",\n      \"loggedin\": false,\n      \"orders\": null,\n      \"customer_id\": 1,\n      \"product_id\": 3,\n      \"sell_price\": 16000,\n      \"purchase_date\": \"2018-12-29T23:35:05Z\"\n  },\n  {\n      \"ID\": 4,\n      \"CreatedAt\": \"2018-12-29T23:36:18Z\",\n      \"UpdatedAt\": \"2018-12-29T23:36:18Z\",\n      \"DeletedAt\": null,\n      \"img\": \"\",\n      \"small_img\": \"\",\n      \"imgalt\": \"\",\n      \"price\": 0,\n      \"promotion\": 0,\n      \"productname\": \"\",\n      \"Description\": \"\",\n      \"name\": \"\",\n      \"firstname\": \"\",\n      \"lastname\": \"\",\n      \"email\": \"\",\n      \"password\": \"\",\n      \"loggedin\": false,\n      \"orders\": null,\n      \"customer_id\": 2,\n      \"product_id\": 1,\n      \"sell_price\": 95,\n      \"purchase_date\": \"2018-12-29T23:36:18Z\"\n  },\n  {\n      \"ID\": 5,\n      \"CreatedAt\": \"2018-12-29T23:36:39Z\",\n      \"UpdatedAt\": \"2018-12-29T23:36:39Z\",\n      \"DeletedAt\": null,\n      \"img\": \"\",\n      \"small_img\": \"\",\n      \"imgalt\": \"\",\n      \"price\": 0,\n      \"promotion\": 0,\n      \"productname\": \"\",\n      \"Description\": \"\",\n      \"name\": \"\",\n      \"firstname\": \"\",\n      \"lastname\": \"\",\n      \"email\": \"\",\n      \"password\": \"\",\n      \"loggedin\": false,\n      \"orders\": null,\n      \"customer_id\": 2,\n      \"product_id\": 2,\n      \"sell_price\": 299,\n      \"purchase_date\": \"2018-12-29T23:36:39Z\"\n  },\n  {\n      \"ID\": 6,\n      \"CreatedAt\": \"2018-12-29T23:38:13Z\",\n      \"UpdatedAt\": \"2018-12-29T23:38:13Z\",\n      \"DeletedAt\": null,\n      \"img\": \"\",\n      \"small_img\": \"\",\n      \"imgalt\": \"\",\n      \"price\": 0,\n      \"promotion\": 0,\n      \"productname\": \"\",\n      \"Description\": \"\",\n      \"name\": \"\",\n      \"firstname\": \"\",\n      \"lastname\": \"\",\n      \"email\": \"\",\n      \"password\": \"\",\n      \"loggedin\": false,\n      \"orders\": null,\n      \"customer_id\": 2,\n      \"product_id\": 4,\n      \"sell_price\": 205,\n      \"purchase_date\": \"2018-12-29T23:37:01Z\"\n  },\n  {\n      \"ID\": 7,\n      \"CreatedAt\": \"2018-12-29T23:38:19Z\",\n      \"UpdatedAt\": \"2018-12-29T23:38:19Z\",\n      \"DeletedAt\": null,\n      \"img\": \"\",\n      \"small_img\": \"\",\n      \"imgalt\": \"\",\n      \"price\": 0,\n      \"promotion\": 0,\n      \"productname\": \"\",\n      \"Description\": \"\",\n      \"name\": \"\",\n      \"firstname\": \"\",\n      \"lastname\": \"\",\n      \"email\": \"\",\n      \"password\": \"\",\n      \"loggedin\": false,\n      \"orders\": null,\n      \"customer_id\": 3,\n      \"product_id\": 4,\n      \"sell_price\": 210,\n      \"purchase_date\": \"2018-12-29T23:37:28Z\"\n  },\n  {\n      \"ID\": 8,\n      \"CreatedAt\": \"2018-12-29T23:38:28Z\",\n      \"UpdatedAt\": \"2018-12-29T23:38:28Z\",\n      \"DeletedAt\": null,\n      \"img\": \"\",\n      \"small_img\": \"\",\n      \"imgalt\": \"\",\n      \"price\": 0,\n      \"promotion\": 0,\n      \"productname\": \"\",\n      \"Description\": \"\",\n      \"name\": \"\",\n      \"firstname\": \"\",\n      \"lastname\": \"\",\n      \"email\": \"\",\n      \"password\": \"\",\n      \"loggedin\": false,\n      \"orders\": null,\n      \"customer_id\": 3,\n      \"product_id\": 5,\n      \"sell_price\": 200,\n      \"purchase_date\": \"2018-12-29T23:37:41Z\"\n  },\n  {\n      \"ID\": 9,\n      \"CreatedAt\": \"2018-12-29T23:38:32Z\",\n      \"UpdatedAt\": \"2018-12-29T23:38:32Z\",\n      \"DeletedAt\": null,\n      \"img\": \"\",\n      \"small_img\": \"\",\n      \"imgalt\": \"\",\n      \"price\": 0,\n      \"promotion\": 0,\n      \"productname\": \"\",\n      \"Description\": \"\",\n      \"name\": \"\",\n      \"firstname\": \"\",\n      \"lastname\": \"\",\n      \"email\": \"\",\n      \"password\": \"\",\n      \"loggedin\": false,\n      \"orders\": null,\n      \"customer_id\": 3,\n      \"product_id\": 6,\n      \"sell_price\": 1000,\n      \"purchase_date\": \"2018-12-29T23:37:54Z\"\n  },\n  {\n      \"ID\": 10,\n      \"CreatedAt\": \"2019-01-13T00:44:55Z\",\n      \"UpdatedAt\": \"2019-01-13T00:44:55Z\",\n      \"DeletedAt\": null,\n      \"img\": \"\",\n      \"small_img\": \"\",\n      \"imgalt\": \"\",\n      \"price\": 0,\n      \"promotion\": 0,\n      \"productname\": \"\",\n      \"Description\": \"\",\n      \"name\": \"\",\n      \"firstname\": \"\",\n      \"lastname\": \"\",\n      \"email\": \"\",\n      \"password\": \"\",\n      \"loggedin\": false,\n      \"orders\": null,\n      \"customer_id\": 19,\n      \"product_id\": 6,\n      \"sell_price\": 1000,\n      \"purchase_date\": \"2018-12-29T23:37:54Z\"\n  },\n  {\n      \"ID\": 11,\n      \"CreatedAt\": \"2019-01-14T06:03:08Z\",\n      \"UpdatedAt\": \"2019-01-14T06:03:08Z\",\n      \"DeletedAt\": null,\n      \"img\": \"\",\n      \"small_img\": \"\",\n      \"imgalt\": \"\",\n      \"price\": 0,\n      \"promotion\": 0,\n      \"productname\": \"\",\n      \"Description\": \"\",\n      \"name\": \"\",\n      \"firstname\": \"\",\n      \"lastname\": \"\",\n      \"email\": \"\",\n      \"password\": \"\",\n      \"loggedin\": false,\n      \"orders\": null,\n      \"customer_id\": 1,\n      \"product_id\": 3,\n      \"sell_price\": 17000,\n      \"purchase_date\": \"0001-01-01T00:00:00Z\"\n  }\n]\n`\n  CUSTOMERS := `[\n  {\n      \"ID\": 1,\n      \"CreatedAt\": \"2018-08-14T07:52:54Z\",\n      \"UpdatedAt\": \"2019-01-13T22:00:45Z\",\n      \"DeletedAt\": null,\n      \"name\": \"\",\n      \"firstname\": \"Mal\",\n      \"lastname\": \"Zein\",\n      \"email\": \"mal.zein@email.com\",\n      \"password\": \"$2a$10$ZeZI4pPPlQg89zfOOyQmiuKW9Z7pO9/KvG7OfdgjPAZF0Vz9D8fhC\",\n      \"loggedin\": true,\n      \"orders\": null\n  },\n  {\n      \"ID\": 2,\n      \"CreatedAt\": \"2018-08-14T07:52:55Z\",\n      \"UpdatedAt\": \"2019-01-12T22:39:01Z\",\n      \"DeletedAt\": null,\n      \"name\": \"\",\n      \"firstname\": \"River\",\n      \"lastname\": \"Sam\",\n      \"email\": \"river.sam@email.com\",\n      \"password\": \"$2a$10$mNbCLmfCAc0.4crDg3V3fe0iO1yr03aRfE7Rr3vdfKMGVnnzovCZq\",\n      \"loggedin\": false,\n      \"orders\": null\n  },\n  {\n      \"ID\": 3,\n      \"CreatedAt\": \"2018-08-14T07:52:55Z\",\n      \"UpdatedAt\": \"2019-01-13T21:56:05Z\",\n      \"DeletedAt\": null,\n      \"name\": \"\",\n      \"firstname\": \"Jayne\",\n      \"lastname\": \"Ra\",\n      \"email\": \"jayne.ra@email.com\",\n      \"password\": \"$2a$10$ZeZI4pPPlQg89zfOOyQmiuKW9Z7pO9/KvG7OfdgjPAZF0Vz9D8fhC\",\n      \"loggedin\": false,\n      \"orders\": null\n  },\n  {\n      \"ID\": 19,\n      \"CreatedAt\": \"2019-01-13T08:43:44Z\",\n      \"UpdatedAt\": \"2019-01-13T15:12:25Z\",\n      \"DeletedAt\": null,\n      \"name\": \"\",\n      \"firstname\": \"John\",\n      \"lastname\": \"Doe\",\n      \"email\": \"john.doe@bla.com\",\n      \"password\": \"$2a$10$T4c8rmpbgKrUA0sIqtHCaO0g2XGWWxFY4IGWkkpVQOD/iuBrwKrZu\",\n      \"loggedin\": false,\n      \"orders\": null\n  }\n]\n`\n  var products []models.Product\n  var customers []models.Customer\n  var orders []models.Order\n  json.Unmarshal([]byte(PRODUCTS), &products)\n  json.Unmarshal([]byte(CUSTOMERS), &customers)\n  json.Unmarshal([]byte(ORDERS), &orders)\n  return NewMockDBLayer(products, customers, orders)\n}\n```", "```go\nfunc (mock *MockDBLayer) GetMockProductData() []models.Product {\n  return mock.products\n}\n\nfunc (mock *MockDBLayer) GetMockCustomersData() []models.Customer {\n  return mock.customers\n}\n\nfunc (mock *MockDBLayer) GetMockOrdersData() []models.Order {\n  return mock.orders\n}\n```", "```go\nfunc (mock *MockDBLayer) SetError(err error) {\n  mock.err = err\n}\n```", "```go\nfunc (mock *MockDBLayer) GetAllProducts() ([]models.Product, error) {\n  //Should we return an error?\n  if mock.err != nil {\n    return nil, mock.err\n  }\n  //return products list\n  return mock.products, nil\n}\n```", "```go\nfunc (mock *MockDBLayer) GetPromos() ([]models.Product, error) {\n  if mock.err != nil {\n    return nil, mock.err\n  }\n  promos := []models.Product{}\n  for _, product := range mock.products {\n    if product.Promotion > 0 {\n      promos = append(promos, product)\n    }\n  }\n  return promos, nil\n}\n```", "```go\nfunc (mock *MockDBLayer) GetProduct(id int) (models.Product, error) {\n  result := models.Product{}\n  if mock.err != nil {\n    return result, mock.err\n  }\n  for _, product := range mock.products {\n    if product.ID == uint(id) {\n      return product, nil\n    }\n  }\n  return result, fmt.Errorf(\"Could not find product with id %d\", id)\n}\n```", "```go\nfunc (mock *MockDBLayer) GetCustomerByName(first, last string) (models.Customer, error) {\n  result := models.Customer{}\n  if mock.err != nil {\n    return result, mock.err\n  }\n  for _, customer := range mock.customers {\n    if strings.EqualFold(customer.FirstName, first) && strings.EqualFold(customer.LastName, last) {\n      return customer, nil\n    }\n  }\n  return result, fmt.Errorf(\"Could not find user %s %s\", first, last)\n}\n```", "```go\n\nfunc (mock *MockDBLayer) GetCustomerByID(id int) (models.Customer, error) {\n  result := models.Customer{}\n  if mock.err != nil {\n    return result, mock.err\n  }\n\n  for _, customer := range mock.customers {\n    if customer.ID == uint(id) {\n      return customer, nil\n    }\n  }\n  return result, fmt.Errorf(\"Could not find user with id %d\", id)\n}\n```", "```go\nfunc(mock *MockDBLayer) AddUser(customer models.Customer) (models.Customer, error){\n  if mock.err != nil {\n    return models.Customer{}, mock.err\n  }\n  mock.customers = append(mock.customers, customer)\n  return customer, nil\n}\n```", "```go\nfunc (mock *MockDBLayer) SignInUser(email, password string) (models.Customer, error) {\n  if mock.err != nil {\n    return models.Customer{}, mock.err\n  }\n  for _, customer := range mock.customers {\n    if strings.EqualFold(email, customer.Email) && customer.Pass == password {\n      customer.LoggedIn = true\n      return customer, nil\n    }\n  }\n  return models.Customer{}, fmt.Errorf(\"Could not sign in user %s\", email)\n}\n```", "```go\nfunc (mock *MockDBLayer) SignOutUserById(id int) error {\n  if mock.err != nil {\n    return mock.err\n  }\n  for _, customer := range mock.customers {\n    if customer.ID == uint(id) {\n      customer.LoggedIn = false\n      return nil\n    }\n  }\n  return fmt.Errorf(\"Could not sign out user %d\", id)\n}\n```", "```go\nfunc (mock *MockDBLayer) GetCustomerOrdersByID(id int) ([]models.Order, error) {\n  if mock.err != nil {\n    return nil, mock.err\n  }\n  for _, customer := range mock.customers {\n    if customer.ID == uint(id) {\n      return customer.Orders, nil\n    }\n  }\n  return nil, fmt.Errorf(\"Could not find customer id %d\", id)\n}\n```", "```go\nfunc (mock *MockDBLayer) AddOrder(order models.Order) error {\n  if mock.err != nil {\n    return mock.err\n  }\n  mock.orders = append(mock.orders, order)\n  for _, customer := range mock.customers {\n    if customer.ID == uint(order.CustomerID) {\n      customer.Orders = append(customer.Orders, order)\n      return nil\n    }\n  }\n  return fmt.Errorf(\"Could not find customer id %d for order\", order.CustomerID)\n}\n```", "```go\n\n//The credit card related mock methods will need more work. They are out of scope of this chapter.\nfunc (mock *MockDBLayer) GetCreditCardCID(id int) (string, error) {\n  if mock.err != nil {\n    return \"\", mock.err\n  }\n  return \"\", nil\n}\n\nfunc (mock *MockDBLayer) SaveCreditCardForCustomer(int, string) error {\n  if mock.err != nil {\n    return mock.err\n  }\n  return nil\n}\n```", "```go\ngo test <Your_Package_Path>\n```", "```go\ngo test github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Go/tree/master/Chapter08/backend/src/rest\n```", "```go\npackage rest\n```", "```go\nfunc TestHandler_GetProducts(t *testing.T) {\n}\n```", "```go\nfunc TestHandler_GetProducts(t *testing.T) {\n  // Switch to test mode so you don't get such noisy output\n  gin.SetMode(gin.TestMode)\n}\n```", "```go\nfunc TestHandler_GetProducts(t *testing.T) {\n  // Switch to test mode so you don't get such noisy output\n  gin.SetMode(gin.TestMode)\n  mockdbLayer := dblayer.NewMockDBLayerWithData()\n}\n```", "```go\nfunc TestHandler_GetProducts(t *testing.T) {\n  // Switch to test mode so you don't get such noisy output\n  gin.SetMode(gin.TestMode)\n  mockdbLayer := dblayer.NewMockDBLayerWithData()\n  h := NewHandlerWithDB(mockdbLayer)\n const productsURL string = \"/products\"\n}\n```", "```go\ntests := []struct {\n    name string\n    inErr error\n    outStatusCode int\n    expectedRespBody interface{}\n  }{\n    }\n```", "```go\n type errMSG struct {\n    Error string `json:\"error\"`\n  }\n```", "```go\n tests := []struct {\n    name string\n    inErr error\n    outStatusCode int\n    expectedRespBody interface{}\n  }{\n {\n \"getproductsnoerrors\",\n nil,\n http.StatusOK,\n mockdbLayer.GetMockProductData(),\n },\n {\n \"getproductswitherror\",\n errors.New(\"get products error\"),\n http.StatusInternalServerError,\n errMSG{Error: \"get products error\"},\n },\n  }\n```", "```go\nt.Run(name string,f func(t *T))bool\n```", "```go\n for _, tt := range tests {\n    t.Run(tt.name, func(t *testing.T) {\n        //run our sub-test\n    }\n}\n```", "```go\n for _, tt := range tests {\n    t.Run(tt.name, func(t *testing.T) {\n      //set the input error\n      mockdbLayer.SetError(tt.inErr)\n    }\n}\n```", "```go\n//Create a test request\nreq := httptest.NewRequest(http.MethodGet, productsURL, nil)    \n```", "```go\n//create an http response recorder\nw := httptest.NewRecorder()\n```", "```go\nGetProducts(c *gin.Context)\n```", "```go\n//create an http response recorder  \nw := httptest.NewRecorder()\n\n//create a fresh gin engine object from the response recorder, we will ignore the context value\n_, engine := gin.CreateTestContext(w)\n```", "```go\n//configure the get request\n engine.GET(productsURL, h.GetProducts)\n```", "```go\n//serve the request\n engine.ServeHTTP(w, req)\n```", "```go\n//test the output\nresponse := w.Result()\n```", "```go\nif response.StatusCode != tt.outStatusCode {\n        t.Errorf(\"Received Status code %d does not match expected status code %d\", response.StatusCode, tt.outStatusCode)\n }\n```", "```go\n/*\nSince we don't know the data type to expect from the http response, we'll use interface{} as the type \n*/      \nvar respBody interface{}      \n//If an error was injected, then the response should decode to an error message type     \n if tt.inErr != nil {\n        var errmsg errMSG\n        json.NewDecoder(response.Body).Decode(&errmsg)\n        //Assign decoded error message to respBody\n        respBody = errmsg      \n} else {\n        //If an error was not injected, the response should decode to a slice of products data types\n        products := []models.Product{}\n        json.NewDecoder(response.Body).Decode(&products)\n        //Assign decoded products list to respBody\n        respBody = products      \n}\n```", "```go\nif !reflect.DeepEqual(respBody, tt.expectedRespBody) {\n       t.Errorf(\"Received HTTP response body %+v does not match expected HTTP response Body %+v\", respBody, tt.expectedRespBody)\n }\n```", "```go\nfunc TestHandler_GetProducts(t *testing.T) {\n  // Switch to test mode so you don't get such noisy output\n  gin.SetMode(gin.TestMode)\n  mockdbLayer := dblayer.NewMockDBLayerWithData()\n  h := NewHandlerWithDB(mockdbLayer)\n  const productsURL string = \"/products\"\n  type errMSG struct {\n    Error string `json:\"error\"`\n  }\n // Use table driven testing\n  tests := []struct {\n    name string\n    inErr error\n    outStatusCode int\n    expectedRespBody interface{}\n  }{\n    {\n      \"getproductsnoerrors\",\n      nil,\n      http.StatusOK,\n      mockdbLayer.GetMockProductData(),\n    },\n    {\n      \"getproductswitherror\",\n      errors.New(\"get products error\"),\n      http.StatusInternalServerError,\n      errMSG{Error: \"get products error\"},\n    },\n  }\n  for _, tt := range tests {\n    t.Run(tt.name, func(t *testing.T) {\n      //set the input error\n      mockdbLayer.SetError(tt.inErr)\n      //Create a test request\n      req := httptest.NewRequest(http.MethodGet, productsURL, nil)\n      //create an http response recorder\n      w := httptest.NewRecorder()\n      //create a fresh gin context and gin engine object from the response recorder\n      _, engine := gin.CreateTestContext(w)\n\n      //configure the get request\n      engine.GET(productsURL, h.GetProducts)\n      //serve the request\n      engine.ServeHTTP(w, req)\n\n      //test the output\n      response := w.Result()\n      if response.StatusCode != tt.outStatusCode {\n        t.Errorf(\"Received Status code %d does not match expected status code %d\", response.StatusCode, tt.outStatusCode)\n      }\n      //Since we don't know the data type to expect from the http response, we'll use interface{} as the type \n      var respBody interface{}\n      //If an error was injected, then the response should decode to an error message type\n      if tt.inErr != nil {\n        var errmsg errMSG\n        json.NewDecoder(response.Body).Decode(&errmsg)\n        respBody = errmsg\n      } else {\n        //If an error was not injected, the response should decode to a slice of products data types\n        products := []models.Product{}\n        json.NewDecoder(response.Body).Decode(&products)\n        respBody = products\n      }\n\n      if !reflect.DeepEqual(respBody, tt.expectedRespBody) {\n        t.Errorf(\"Received HTTP response body %+v does not match expected HTTP response Body %+v\", respBody, tt.expectedRespBody)\n      }\n    })\n  }\n}\n```", "```go\nfor _, tt := range tests {\n    t.Run(tt.name, func(t *testing.T) {\n            t.Parallel()\n            //your concurrent code\n    }\n}\n```", "```go\nPASS\nok github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Go/tree/master/Chapter08/backend/src/rest 0.891s\n```", "```go\nc:\\Programming_Projects\\GoProjects\\src\\github.com\\PacktPublishing\\Hands-On-Full-Stack-Development-with-Go\\8-Testing-and-benchmarking\\backend\\src\\rest>go test -v\n=== RUN TestHandler_GetProducts\n=== RUN TestHandler_GetProducts/getproductsnoerrors\n=== RUN TestHandler_GetProducts/getproductswitherror\n--- PASS: TestHandler_GetProducts (0.00s)\n --- PASS: TestHandler_GetProducts/getproductsnoerrors (0.00s)\n --- PASS: TestHandler_GetProducts/getproductswitherror (0.00s)\nPASS\nok github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Go/8-Testing-and-benchmarking/backend/src/rest 1.083s\n```", "```go\nfunc hashPassword(s *string) error {\n  if s == nil {\n    return errors.New(\"Reference provided for hashing password is nil\")\n  }\n  //converd password string to byte slice\n  sBytes := []byte(*s)\n  //Obtain hashed password\n  hashedBytes, err := bcrypt.GenerateFromPassword(sBytes, bcrypt.DefaultCost)\n  if err != nil {\n    return err\n  }\n  //update password string with the hashed version\n  *s = string(hashedBytes[:])\n  return nil\n}\n```", "```go\npackage dblayer\n\nimport \"testing\"\n```", "```go\nfunc BenchmarkHashPassword(b *testing.B) {\n}\n```", "```go\nfunc BenchmarkHashPassword(b *testing.B) {\n  text := \"A String to be Hashed\"\n}\n```", "```go\nfunc BenchmarkHashPassword(b *testing.B) {\n text := \"A String to be Hashed\"\n for i := 0; i < b.N; i++ {\n hashPassword(&text)\n }\n}\n```", "```go\ngo test -bench .\n```", "```go\ngo test -bench HashPassword\n```", "```go\ngoos: windows\ngoarch: amd64\npkg: github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Go/8-Testing-and-benchmarking/backend/src/dblayer\nBenchmarkHashPassword-8 20 69609530 ns/op\nPASS\nok github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Go/8-Testing-and-benchmarking/backend/src/dblayer 1.797s\n```", "```go\nfunc BenchmarkHashPassword(b *testing.B) {\n text := \"A String to be Hashed\"\n  for i := 0; i < b.N; i++ {\n\n    hashPassword(&text)\n  }\n}\n```", "```go\nfunc BenchMarkSomeFunction(b *testing.B){\n    someHeavyInitialization()\n    b.ResetTimer()\n    for i:=0;i<b.N;b++{\n        SomeFunction()\n    }\n}\nb.Run(name string, f func(b *testing.B))\n```", "```go\nb.RunParallel(func(pb *testing.PB){\n    for pb.Next(){\n        //your code\n    }\n})\n```"]