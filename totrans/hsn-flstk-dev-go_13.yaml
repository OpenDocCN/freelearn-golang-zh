- en: Where to Go from Here?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Welcome to the final chapter of our book. In this book, we covered many practical
    topics on how to develop full stack web software with the powerful Go language.
    In this chapter, we''ll shed some light on topics the reader should explore to
    in order to enhance their skills and take their knowledge to the next level. We''ll
    focus on two topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Cloud-native applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The React Native framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud-native applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cloud-native applications are an important topic for people looking to take
    their applications to the point of being infinitely scalable to growing user needs
    and expanding data loads. **Cloud-native applications** can be defined as applications
    built to run on a distributed and scalable infrastructure. They are expected to
    always be available, reliable, capable of getting updates in real time, and not
    crumble under pressure. They typically rely on redundancy, load balancing, and
    various other techniques to achieve their objectives. The topic is not trivial
    by any measure. In fact, entire books have been dedicated to how to build cloud-native
    applications. In this section, we'll cover some key technologies utilized in the
    construction of cloud-native applications.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud-native applications are not always deployed to a *cloud*, such as AWS
    or Azure. They could be deployed to an organization's internal infrastructure
    that supports scalability.
  prefs: []
  type: TYPE_NORMAL
- en: In the next sections. we'll take a look at microservices, container, serverless
    applications and continuous delivery which are some of the important concepts
    of cloud-native applications
  prefs: []
  type: TYPE_NORMAL
- en: Microservices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microservice is a very popular concept in modern software. It's the idea of
    dividing your application's tasks into small self-contained software services.
    So, instead of having a large application that covers a wide array of tasks, you
    utilize a microservice for each task. Microservices allow your application to
    be very scalable.
  prefs: []
  type: TYPE_NORMAL
- en: The concept of microservice is the opposite of the concept of a monolithic application,
    which is the kind of application where all the tasks are coded together.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a monolithic application that represents an event booking
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dadb8d6f-94cf-46f6-b070-1989832752e1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And here is how a microservice application represents the same event booking
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1ea40d49-7a48-4a49-a15c-00cbde9f8fce.png)'
  prefs: []
  type: TYPE_IMG
- en: Each block in the preceding diagram represents a microservice that is tasked with
    one specific task.
  prefs: []
  type: TYPE_NORMAL
- en: You can spread your microservices over multiple server nodes, achieving load
    balancing on multiple systems. You can make your microservices redundant, so that
    if one service goes down, another one picks up the work as if nothing happened.
    This redundancy can also be very useful when deploying patches and updates to
    your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example diagram of our microservices now supporting redundancy to
    ensure the application will always be available. If one of the services goes down
    due to maintenance, or system crashes, the other service will take over:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca3c1d2a-0f63-4261-aa62-bfbfbcfe5cb5.png)'
  prefs: []
  type: TYPE_IMG
- en: Even though microservices offer tons of scalability and flexibility in an application,
    they can be challenging to maintain in the long run, especially if your architecture
    grows to hundreds or thousands of microservices. Some special monitoring tools
    will be needed to ensure they are properly maintained and looked after.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll discuss the concept of containers.
  prefs: []
  type: TYPE_NORMAL
- en: Containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Containers technology is a relatively new technology. However, it has grown
    in popularity to the point that it has become a key piece of infrastructure software
    in the world of cloud-native applications. Containers allow you to surround your
    software with an isolated user space or a *container*.
  prefs: []
  type: TYPE_NORMAL
- en: Containers are very useful in deploying and running scalable microservices because
    they allow your microservices to run in an isolated space that contains all the
    microservice configurations, environmental variables, dependencies, runtimes,
    and any other files or settings needed for the service.
  prefs: []
  type: TYPE_NORMAL
- en: Containers allow software developers to deploy isolated services in the same
    server nodes, ensuring that your services are run unaffected by any other services
    on the same node. Containers also allow developers to deploy a microservice with
    everything the microservice needs to run in one go through a container image.
    Containers are not only used for microservices; they can also be used in any piece
    of software that can benefit from being in a container, such as database engines.
    For example, using a container image to deploy MySQL is a popular approach to
    deploying and running MySQL with relative ease. One of the most popular container
    technologies nowadays is Docker ([https://www.docker.com](https://www.docker.com)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of some containers running on a server node:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b986775a-cdd3-4c8b-9b5c-803da94c5d3f.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's take a look at serverless applications in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Serverless applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Serverless applications are another relatively new technology in the world of
    cloud-native applications. They are mostly used for tasks that don't need to run
    continuously. To properly understand the concept of serverless applications, let's
    go through an example.
  prefs: []
  type: TYPE_NORMAL
- en: Consider Amazon's AWS Lambda service ([https://aws.amazon.com/lambda/](https://aws.amazon.com/lambda/)),
    which is utilized by numerous applications worldwide. In order to perform a specific
    task, the service allows users to request a function to run remotely. So, in other
    words, you ask AWS Lambda to run some code for you. After the code is executed,
    the output is returned to you. No stateful data is maintained. The code or function
    that runs on Lambda is provided by you.
  prefs: []
  type: TYPE_NORMAL
- en: Serverless applications make use of services such as AWS Lambda in order to
    run intermittent tasks that are not expected to run all the time. This provides
    scalability for your application, because it relieves the need to maintain software
    services just to execute temporary tasks. Services such as AWS Lambda are also
    known as **FaaS** (**function as a service**).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example application where some services are substituted by functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e640cba7-34b4-4099-a8df-61ef0a472ff0.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's take a look at continuous delivery in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous delivery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuous delivery is the idea that software should be released in fast and
    short cycles, as opposed to longer and slow ones. Continuous delivery allows organizations
    to effectively and continuously improve their software by being able to release
    improvements and fixes all the time.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous delivery is not just about using software tools; it also involves
    a way of thinking that the entire organization needs to adhere to. There needs
    to be a process where any additions to the software can be quickly built, tested,
    and deployed/delivered.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous delivery proved to be very practical and effective for organizations
    running cloud-native applications because it allows incremental and fast improvements,
    as opposed to huge step changes that can break the software in production. It
    is important to automate the process as much as possible in order to gain the
    most benefits.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a glimpse at the popular React Native framework for building mobile
    apps in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: React Native
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, we covered how to design and write a React app from the ground
    up. This is a very powerful skill in modern software. React is currently being
    used to power some of the most popular websites on the internet. Another powerful
    advantage of learning React.js is the fact that your skills could be utilized
    to build cross-platform mobile applications through React Native.
  prefs: []
  type: TYPE_NORMAL
- en: What is React Native?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React Native ([https://facebook.github.io/react-native/](https://facebook.github.io/react-native/))
    is an open source project developed by Facebook. It makes use of the features
    of the React.js framework to build cross-platform mobile applications that can
    run on Android or iOS. React Native is very popular, and is currently being used
    by organizations big and small to build practical mobile apps.
  prefs: []
  type: TYPE_NORMAL
- en: One major advantage of React Native is that almost all the code you write would
    work on both Android and iOS devices. This means that you only have to worry about
    a single code base for almost your entire application. Another major advantage
    is that React Native uses native APIs for the targeted platform. This is why mobile
    applications written in React Native tend to have better performance than applications
    written by other JavaScript mobile frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll take a look at some of the differences between React.js
    and React Native.
  prefs: []
  type: TYPE_NORMAL
- en: React.js versus React Native
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though both frameworks are named React, there are some differences between
    the two. Let's first cover the similarities, and then we'll go over some of the
    differences
  prefs: []
  type: TYPE_NORMAL
- en: Similarities between React.js and React Native
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some of the similarities between React.js and React Native:'
  prefs: []
  type: TYPE_NORMAL
- en: They both use JavaScript ES6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They both rely on React components, involving the `render()` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They both rely on React elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They both use JSX to build visual elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Differences between React.js and React Native
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some of the differences between React.js and React Native:'
  prefs: []
  type: TYPE_NORMAL
- en: React Native has its own special JSX syntax to build UI components. By default,
    it does not make use of CSS and HTML like React.js.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React Native relies on some special libraries to interface with mobile devices.
    For example, you need to use React-Native-specific packages to write code around
    a phone camera or accelerometer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying React Native apps is a different experience to deploying React.js,
    since the deployment into mobile device with all its app rules.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Expo ([https://expo.io/](https://expo.io/)) is a very popular free and open
    source toolchain that allows users to build React Native mobile applications with
    relative ease. It provides an SDK that exposes important features such as camera
    access, filesystems, and push notifications.  Expo is the best place to start,
    when you are building React Native applications as a beginner.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered a number of very popular and modern technologies.
    Cloud-native applications are very popular nowadays, especially with the growing
    need to build reliable, scalable applications.
  prefs: []
  type: TYPE_NORMAL
- en: React Native is a key framework for building performant, cross-platform mobile
    applications. It makes use of the principles and architecture of the powerful
    React framework to achieve that.
  prefs: []
  type: TYPE_NORMAL
- en: We hope you enjoyed the learning journey with us in this book, we wish you all
    the best in building full stack applications in Go.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are cloud-native applications?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is it necessary to deploy cloud-native applications to the cloud?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are microservices?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are containers?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is Docker?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are serverless applications?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is React Native?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is Expo?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
