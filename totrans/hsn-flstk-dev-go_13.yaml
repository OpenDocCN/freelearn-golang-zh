- en: Where to Go from Here?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来去哪里？
- en: 'Welcome to the final chapter of our book. In this book, we covered many practical
    topics on how to develop full stack web software with the powerful Go language.
    In this chapter, we''ll shed some light on topics the reader should explore to
    in order to enhance their skills and take their knowledge to the next level. We''ll
    focus on two topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到本书的最后一章。在这本书中，我们介绍了如何使用强大的 Go 语言开发全栈 Web 软件的大量实用主题。在这一章中，我们将探讨读者应该探索的一些主题，以提升他们的技能并将他们的知识提升到新的水平。我们将重点关注两个主题：
- en: Cloud-native applications
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云原生应用程序
- en: The React Native framework
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React Native 框架
- en: Cloud-native applications
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云原生应用程序
- en: Cloud-native applications are an important topic for people looking to take
    their applications to the point of being infinitely scalable to growing user needs
    and expanding data loads. **Cloud-native applications** can be defined as applications
    built to run on a distributed and scalable infrastructure. They are expected to
    always be available, reliable, capable of getting updates in real time, and not
    crumble under pressure. They typically rely on redundancy, load balancing, and
    various other techniques to achieve their objectives. The topic is not trivial
    by any measure. In fact, entire books have been dedicated to how to build cloud-native
    applications. In this section, we'll cover some key technologies utilized in the
    construction of cloud-native applications.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对于希望将应用程序扩展到无限可扩展以适应不断增长的用户需求和扩展的数据负载的人来说，云原生应用程序是一个重要的话题。**云原生应用程序**可以定义为在分布式和可扩展的基础设施上运行的应用程序。它们预计始终可用、可靠、能够实时更新，并且不会在压力下崩溃。它们通常依赖于冗余、负载均衡和各种其他技术来实现其目标。这个话题绝非微不足道。事实上，整本书都致力于如何构建云原生应用程序。在本节中，我们将介绍在构建云原生应用程序中使用的某些关键技术。
- en: Cloud-native applications are not always deployed to a *cloud*, such as AWS
    or Azure. They could be deployed to an organization's internal infrastructure
    that supports scalability.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生应用程序并不总是部署到**云**中，如 AWS 或 Azure。它们也可以部署到支持可扩展性的组织内部基础设施上。
- en: In the next sections. we'll take a look at microservices, container, serverless
    applications and continuous delivery which are some of the important concepts
    of cloud-native applications
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将探讨微服务、容器、无服务器应用程序和持续交付，这些都是云原生应用程序的重要概念。
- en: Microservices
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务
- en: Microservice is a very popular concept in modern software. It's the idea of
    dividing your application's tasks into small self-contained software services.
    So, instead of having a large application that covers a wide array of tasks, you
    utilize a microservice for each task. Microservices allow your application to
    be very scalable.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务是现代软件中一个非常流行的概念。它是指将你的应用程序的任务划分为小型自包含的软件服务。因此，而不是拥有一个涵盖广泛任务的大型应用程序，你可以为每个任务使用一个微服务。微服务使得你的应用程序非常可扩展。
- en: The concept of microservice is the opposite of the concept of a monolithic application,
    which is the kind of application where all the tasks are coded together.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务的概念与单体应用程序的概念相反，后者是一种所有任务都编码在一起的应用程序。
- en: 'Here is an example of a monolithic application that represents an event booking
    application:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个表示事件预订应用程序的单体应用程序的例子：
- en: '![](img/dadb8d6f-94cf-46f6-b070-1989832752e1.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dadb8d6f-94cf-46f6-b070-1989832752e1.png)'
- en: 'And here is how a microservice application represents the same event booking
    application:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何用微服务应用程序表示相同的事件预订应用程序：
- en: '![](img/1ea40d49-7a48-4a49-a15c-00cbde9f8fce.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1ea40d49-7a48-4a49-a15c-00cbde9f8fce.png)'
- en: Each block in the preceding diagram represents a microservice that is tasked with
    one specific task.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 前面图中的每个块代表一个负责一项特定任务的微服务。
- en: You can spread your microservices over multiple server nodes, achieving load
    balancing on multiple systems. You can make your microservices redundant, so that
    if one service goes down, another one picks up the work as if nothing happened.
    This redundancy can also be very useful when deploying patches and updates to
    your application.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将你的微服务分散到多个服务器节点上，在多个系统上实现负载均衡。你可以使你的微服务冗余，这样如果某个服务宕机，另一个服务就会接管工作，就像什么都没发生一样。这种冗余在部署补丁和更新到你的应用程序时也非常有用。
- en: 'Here is an example diagram of our microservices now supporting redundancy to
    ensure the application will always be available. If one of the services goes down
    due to maintenance, or system crashes, the other service will take over:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们现在支持的冗余示例图，以确保应用程序始终可用。如果一个服务因维护或系统崩溃而关闭，另一个服务将接管：
- en: '![](img/ca3c1d2a-0f63-4261-aa62-bfbfbcfe5cb5.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca3c1d2a-0f63-4261-aa62-bfbfbcfe5cb5.png)'
- en: Even though microservices offer tons of scalability and flexibility in an application,
    they can be challenging to maintain in the long run, especially if your architecture
    grows to hundreds or thousands of microservices. Some special monitoring tools
    will be needed to ensure they are properly maintained and looked after.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管微服务在应用程序中提供了大量的可扩展性和灵活性，但它们在长期维护中可能会变得具有挑战性，特别是如果你的架构扩展到数百或数千个微服务。将需要一些特殊的监控工具来确保它们得到适当的维护和照顾。
- en: In the next section, we'll discuss the concept of containers.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论容器概念。
- en: Containers
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器
- en: Containers technology is a relatively new technology. However, it has grown
    in popularity to the point that it has become a key piece of infrastructure software
    in the world of cloud-native applications. Containers allow you to surround your
    software with an isolated user space or a *container*.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 容器技术是一种相对较新的技术。然而，它已经变得非常受欢迎，以至于它已经成为云原生应用世界中关键的基础设施软件的一部分。容器允许你用隔离的用户空间或一个*容器*来包围你的软件。
- en: Containers are very useful in deploying and running scalable microservices because
    they allow your microservices to run in an isolated space that contains all the
    microservice configurations, environmental variables, dependencies, runtimes,
    and any other files or settings needed for the service.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 容器在部署和运行可扩展的微服务中非常有用，因为它们允许你的微服务在一个包含所有微服务配置、环境变量、依赖项、运行时以及服务所需的任何其他文件或设置的隔离空间中运行。
- en: Containers allow software developers to deploy isolated services in the same
    server nodes, ensuring that your services are run unaffected by any other services
    on the same node. Containers also allow developers to deploy a microservice with
    everything the microservice needs to run in one go through a container image.
    Containers are not only used for microservices; they can also be used in any piece
    of software that can benefit from being in a container, such as database engines.
    For example, using a container image to deploy MySQL is a popular approach to
    deploying and running MySQL with relative ease. One of the most popular container
    technologies nowadays is Docker ([https://www.docker.com](https://www.docker.com)).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 容器允许软件开发者在同一服务器节点上部署隔离的服务，确保你的服务不受同一节点上其他服务的任何影响。容器还允许开发者通过容器镜像一次性部署一个包含微服务运行所需所有内容的微服务。容器不仅用于微服务；它们还可以用于任何可以从容器中受益的软件，例如数据库引擎。例如，使用容器镜像部署MySQL是部署和运行MySQL的一种流行方法，相对容易。目前最受欢迎的容器技术之一是Docker([https://www.docker.com](https://www.docker.com))。
- en: 'Here is an example of some containers running on a server node:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个在服务器节点上运行的一些容器的例子：
- en: '![](img/b986775a-cdd3-4c8b-9b5c-803da94c5d3f.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b986775a-cdd3-4c8b-9b5c-803da94c5d3f.png)'
- en: Let's take a look at serverless applications in the next section.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一节中看看无服务器应用程序。
- en: Serverless applications
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器应用程序
- en: Serverless applications are another relatively new technology in the world of
    cloud-native applications. They are mostly used for tasks that don't need to run
    continuously. To properly understand the concept of serverless applications, let's
    go through an example.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器应用程序是云原生应用世界中另一种相对较新的技术。它们主要用于不需要持续运行的任务。为了正确理解无服务器应用程序的概念，让我们通过一个例子来探讨。
- en: Consider Amazon's AWS Lambda service ([https://aws.amazon.com/lambda/](https://aws.amazon.com/lambda/)),
    which is utilized by numerous applications worldwide. In order to perform a specific
    task, the service allows users to request a function to run remotely. So, in other
    words, you ask AWS Lambda to run some code for you. After the code is executed,
    the output is returned to you. No stateful data is maintained. The code or function
    that runs on Lambda is provided by you.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑亚马逊的AWS Lambda服务([https://aws.amazon.com/lambda/](https://aws.amazon.com/lambda/))，该服务被全球众多应用程序使用。为了执行特定任务，该服务允许用户请求在远程运行一个函数。换句话说，你要求AWS
    Lambda为你运行一些代码。代码执行后，输出会返回给你。不维护任何有状态的数据。在Lambda上运行的代码或函数由你提供。
- en: Serverless applications make use of services such as AWS Lambda in order to
    run intermittent tasks that are not expected to run all the time. This provides
    scalability for your application, because it relieves the need to maintain software
    services just to execute temporary tasks. Services such as AWS Lambda are also
    known as **FaaS** (**function as a service**).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器应用程序利用 AWS Lambda 等服务来运行间歇性任务，这些任务不是一直都需要运行。这为你的应用程序提供了可伸缩性，因为它减轻了仅为了执行临时任务而维护软件服务的需求。AWS
    Lambda 等服务也被称为 **FaaS**（**函数即服务**）。
- en: 'Here is an example application where some services are substituted by functions:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个示例应用程序，其中一些服务被函数所替代：
- en: '![](img/e640cba7-34b4-4099-a8df-61ef0a472ff0.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e640cba7-34b4-4099-a8df-61ef0a472ff0.png)'
- en: Let's take a look at continuous delivery in the next section.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一节中看看持续交付。
- en: Continuous delivery
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续交付
- en: Continuous delivery is the idea that software should be released in fast and
    short cycles, as opposed to longer and slow ones. Continuous delivery allows organizations
    to effectively and continuously improve their software by being able to release
    improvements and fixes all the time.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付是一种理念，即软件应快速且频繁地以短周期发布，而不是以更长和更慢的周期发布。持续交付允许组织通过能够随时发布改进和修复来有效地持续改进其软件。
- en: Continuous delivery is not just about using software tools; it also involves
    a way of thinking that the entire organization needs to adhere to. There needs
    to be a process where any additions to the software can be quickly built, tested,
    and deployed/delivered.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付不仅仅是使用软件工具；它还涉及整个组织都需要遵守的一种思维方式。需要有一个流程，任何对软件的添加都可以快速构建、测试和部署/交付。
- en: Continuous delivery proved to be very practical and effective for organizations
    running cloud-native applications because it allows incremental and fast improvements,
    as opposed to huge step changes that can break the software in production. It
    is important to automate the process as much as possible in order to gain the
    most benefits.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付对于运行云原生应用程序的组织来说非常实用且有效，因为它允许增量且快速的改进，而不是可能导致生产环境中软件崩溃的巨大步骤变化。尽可能自动化流程以获得最大利益是很重要的。
- en: Let's take a glimpse at the popular React Native framework for building mobile
    apps in the next section.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一节中简要了解一下流行的 React Native 框架，用于构建移动应用程序。
- en: React Native
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React Native
- en: In this book, we covered how to design and write a React app from the ground
    up. This is a very powerful skill in modern software. React is currently being
    used to power some of the most popular websites on the internet. Another powerful
    advantage of learning React.js is the fact that your skills could be utilized
    to build cross-platform mobile applications through React Native.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们介绍了如何从头开始设计和编写一个 React 应用程序。这是现代软件中一个非常强大的技能。React 目前正在被用于驱动互联网上一些最受欢迎的网站。学习
    React.js 的另一个强大优势是，你的技能可以通过 React Native 来构建跨平台移动应用程序。
- en: What is React Native?
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 React Native？
- en: React Native ([https://facebook.github.io/react-native/](https://facebook.github.io/react-native/))
    is an open source project developed by Facebook. It makes use of the features
    of the React.js framework to build cross-platform mobile applications that can
    run on Android or iOS. React Native is very popular, and is currently being used
    by organizations big and small to build practical mobile apps.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: React Native ([https://facebook.github.io/react-native/](https://facebook.github.io/react-native/))
    是由 Facebook 开发的一个开源项目。它利用 React.js 框架的功能来构建可以在 Android 或 iOS 上运行的跨平台移动应用程序。React
    Native 非常受欢迎，目前被大小组织用于构建实用的移动应用程序。
- en: One major advantage of React Native is that almost all the code you write would
    work on both Android and iOS devices. This means that you only have to worry about
    a single code base for almost your entire application. Another major advantage
    is that React Native uses native APIs for the targeted platform. This is why mobile
    applications written in React Native tend to have better performance than applications
    written by other JavaScript mobile frameworks.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: React Native 的一大优势是，你编写的几乎所有代码都可以在 Android 和 iOS 设备上运行。这意味着你几乎只需要关注你整个应用程序的单一代码库。另一个主要优势是，React
    Native 使用目标平台的本地 API。这就是为什么用 React Native 编写的移动应用程序通常比用其他 JavaScript 移动框架编写的应用程序性能更好。
- en: In the next section, we'll take a look at some of the differences between React.js
    and React Native.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨 React.js 和 React Native 之间的一些区别。
- en: React.js versus React Native
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React.js 与 React Native 的比较
- en: Even though both frameworks are named React, there are some differences between
    the two. Let's first cover the similarities, and then we'll go over some of the
    differences
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这两个框架都命名为 React，但它们之间还是有一些区别。让我们首先了解它们的相似之处，然后我们将讨论一些不同之处。
- en: Similarities between React.js and React Native
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React.js 和 React Native 之间的相似之处
- en: 'Here are some of the similarities between React.js and React Native:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 React.js 和 React Native 之间的一些相似之处：
- en: They both use JavaScript ES6
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们都使用 JavaScript ES6
- en: They both rely on React components, involving the `render()` method
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们都依赖于 React 组件，包括 `render()` 方法
- en: They both rely on React elements
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们都依赖于 React 元素
- en: They both use JSX to build visual elements
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们都使用 JSX 来构建视觉元素
- en: Differences between React.js and React Native
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React.js 和 React Native 之间的区别
- en: 'Here are some of the differences between React.js and React Native:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 React.js 和 React Native 之间的一些区别：
- en: React Native has its own special JSX syntax to build UI components. By default,
    it does not make use of CSS and HTML like React.js.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React Native 有自己特殊的 JSX 语法来构建 UI 组件。默认情况下，它不像 React.js 那样使用 CSS 和 HTML。
- en: React Native relies on some special libraries to interface with mobile devices.
    For example, you need to use React-Native-specific packages to write code around
    a phone camera or accelerometer.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React Native 依赖于一些特殊的库来与移动设备接口。例如，你需要使用 React-Native 特定的包来编写围绕手机相机或加速度传感器的代码。
- en: Deploying React Native apps is a different experience to deploying React.js,
    since the deployment into mobile device with all its app rules.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署 React Native 应用程序与部署 React.js 的体验不同，因为需要将应用程序及其所有应用规则部署到移动设备上。
- en: Expo
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Expo
- en: Expo ([https://expo.io/](https://expo.io/)) is a very popular free and open
    source toolchain that allows users to build React Native mobile applications with
    relative ease. It provides an SDK that exposes important features such as camera
    access, filesystems, and push notifications.  Expo is the best place to start,
    when you are building React Native applications as a beginner.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Expo ([https://expo.io/](https://expo.io/)) 是一个非常受欢迎的免费开源工具链，它允许用户相对容易地构建 React
    Native 移动应用程序。它提供了一个 SDK，可以暴露重要的功能，如相机访问、文件系统以及推送通知。当你作为一个初学者构建 React Native 应用程序时，Expo
    是一个最佳的起点。
- en: Summary
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered a number of very popular and modern technologies.
    Cloud-native applications are very popular nowadays, especially with the growing
    need to build reliable, scalable applications.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了一些非常流行和现代的技术。云原生应用程序现在非常受欢迎，尤其是在构建可靠、可扩展应用程序的需求不断增长的情况下。
- en: React Native is a key framework for building performant, cross-platform mobile
    applications. It makes use of the principles and architecture of the powerful
    React framework to achieve that.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: React Native 是构建高性能、跨平台移动应用程序的关键框架。它利用了强大的 React 框架的原则和架构来实现这一点。
- en: We hope you enjoyed the learning journey with us in this book, we wish you all
    the best in building full stack applications in Go.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望您在这本书的学习之旅中与我们一同享受，我们祝愿您在构建 Go 全栈应用程序时一切顺利。
- en: Questions
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are cloud-native applications?
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 云原生应用程序是什么？
- en: Is it necessary to deploy cloud-native applications to the cloud?
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是否有必要将云原生应用程序部署到云端？
- en: What are microservices?
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 微服务是什么？
- en: What are containers?
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 容器是什么？
- en: What is Docker?
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker 是什么？
- en: What are serverless applications?
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无服务器应用程序是什么？
- en: What is React Native?
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: React Native 是什么？
- en: What is Expo?
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Expo 是什么？
