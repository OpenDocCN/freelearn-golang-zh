- en: Getting Started with Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book will help you on your Go programming journey, especially when you
    begin to actively develop applications with Go. This chapter addresses the most
    common problems that new Go developers, as well as people working with other languages,
    face in their daily programming. I hope you enjoy the book and find it useful.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Go binaries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A quick look at the Go language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Go binaries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's get started with Go. In this section, we will learn how to install Go
    binaries and briefly take a look at the Go language.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the Go binaries, the first thing to do is to navigate to the following
    link: [https://golang.org/doc/install](https://golang.org/doc/install); you can
    also access it if you search for it directly in Google. You''ll find a step-by-step
    guide to installing Go on different platforms and operating systems. If you click
    on Download Go, it will take you to the Downloads page, where you can find various
    binary formats.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll find MSI for Windows, Linux, and macOS, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cc1f0180-dd8d-4c29-88bf-3e936a68fed2.png)'
  prefs: []
  type: TYPE_IMG
- en: I'll be using macOS, but you'll find the steps similar with other platforms
    as well. Let's go ahead with the download.
  prefs: []
  type: TYPE_NORMAL
- en: 'The installer is basically a step-by-step wizard; you can just run it and keep
    clicking Continue until the installation is complete. After you''ve installed
    it, you may want to do one more thing, and that is, set your environment variable.
    Furthermore, you will have to set up your workspace. You''ll have three folders,
    `bin`, `pkg`, and `src`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ad693586-b8d7-4898-b568-296ea7bd9c88.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `src` folder is where you put your source files, the `pkg` folder is where Go
    stores your object files, and the `bin` folder is where the binaries, which are
    the actual executables, are stored. Moving ahead, I''m going to be using my shell
    and you need to set a couple of environment variables by using `export`. You can
    also use profile files to set your environment variable. If you check the following
    screenshot, you can see the path `$PATH:/usr/local/go/bin`, and this is where
    my Go binaries are located:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a05dd85f-116b-482c-83c9-2b17140c83d1.png)'
  prefs: []
  type: TYPE_IMG
- en: So, when I run the `Go` command, it will automatically find where the Go program
    is located.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we set the `GOPATH`. The `GOPATH` is basically where your Go workspace
    is located. The workspace, if you remember, contains three folders, `pkg`, `src`,
    and `bin`. `GoProject` is the parent folder of that structure. The last is `$GOPATH/bin`,
    which is used when you want your terminal to find the installed Go binaries. Just
    make sure that you're adding these three things and saving this file before restarting
    your terminal. Then, you will be good to Go!
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also find out how to set environment variables for a Go path by clicking
    the link, shown in the following screenshot, which is on the same page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ece31944-4fa2-4491-8969-1db2b04813f2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You''ll find instructions for different operating systems. For instance, for
    Unix-based systems, you can use `~/.bash_profile` or, depending on which shell
    you''re using, you can use various profile files. In mine, I use the profile as
    seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2ec25741-dc7c-4fb6-b138-7fcda340d3f4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For Windows, following installation, and once you have your Go workspace, follow
    the instructions given and you are pretty much good to Go. The instructions will
    look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1ee9027a-dde7-4abd-88ee-598e7c11adc4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The quickest way to test whether you have Go installed is to just type in `go`,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ae4661b5-6535-46c1-8ed7-1e5ca5c58cf2.png)'
  prefs: []
  type: TYPE_IMG
- en: It will bring up the help tutorial, and you can see the available commands and
    which version of code you have by using the Go version.
  prefs: []
  type: TYPE_NORMAL
- en: That's how you can easily set up your Go environment. In the next section, we
    will take a quick look at the Go language itself.
  prefs: []
  type: TYPE_NORMAL
- en: A quick look at the Go language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''re going to take a quick look at the Go programming language.
    Go is an expressive, concise, and clean language; it has concurrency mechanisms,
    and this helps programmers to write programs that get the most out of multi-core
    and networking machines. It also compiles quickly to machine code and has the
    convenience of garbage collection and the power of runtime reflection. It is a
    statically typed-in, compiled language, but, for most, it feels like a dynamically
    typed and interpreted language. All right then! Let''s look at the syntax of Go
    by navigating to [https://tour.golang.org/welcome/1](https://tour.golang.org/welcome/1);
    this is a good starting point for those who want to learn Go syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0531d92f-0fa8-49d2-b0a5-5fe4de42171d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'OK, So if you look at the syntax in the screenshot, and if you come from languages
    such as Java and C#, or C and C++, you may find the syntax a little bit different.
    For instance, if you look at the return type, instead of defining the type, you
    actually define the return types at the end of your function. We also have a main
    function, which is the entry point of our application, similar to many other programming
    languages, and if you look at the context shown in the following screenshot, you
    can see that we have packages, variables, and functions, and flow control statements:  `for`,
    `if...else`, and types such as `struct`, `slices`, and `maps`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2aff032d-e205-49a6-a873-da00529d102e.png)'
  prefs: []
  type: TYPE_IMG
- en: If you want to create a class, such as structure, you can use a struct type
    and combine it with a pointer. Additionally, it has methods and interfaces and
    concurrency, but it doesn't have generics.
  prefs: []
  type: TYPE_NORMAL
- en: Having said that, I will also talk about the tools that I'm going to be using
    throughout this book. There are a couple of tools available in **GoLand**. GoLand
    is a relatively new IDE by JetBrains. We will be using GoLand throughout the book.
    You can easily create new projects and give them a name and choose the SDK, which
    is Go 1.9\. You can also add new files or new packages, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can define your configurations, and build your Go, by typing your entry
    file, as shown in the following screenshot. You can then run  `main.go` and click OK:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ef4f11d9-cb81-44f4-a70b-f72f7bcf9fdf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, pressing *Ctrl *+ *r* will build your project, as can be seen in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c3e1bc05-93d5-4ec2-95ae-1da7786c8ce7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Before I conclude this chapter, let me quickly show you an example that uses
    just the terminal. I''m going to use the  `touch` command to create the `main.go`
    file and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can run it by using the `go run main.go` command and you will get the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed40c885-8935-47d5-8781-bf553c172e2f.png)'
  prefs: []
  type: TYPE_IMG
- en: You can save it and then run it. So, this is how you can use the terminal to
    quickly write Go code and run it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to install Go binaries and taken a brief
    look at the Go language. We have learned how to write Go code and run it using
    just the terminal. We have also looked at the tools that are going to be used
    throughout all chapters and what other tools can be used to develop Go applications.
    We are now ready to move on to the next chapter, where we will see some recipes
    for manipulating string values.
  prefs: []
  type: TYPE_NORMAL
