- en: Manipulating String Values
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作字符串值
- en: We now have an overview of what this book will take us through. We know how
    to install Go binaries and write Go code and run it using just the terminal. In
    this chapter, we're going to learn some recipes for manipulating string values,
    such as trimming spaces from beginning and end of a string, extracting sub strings,
    replacing parts of a string, escaping characters in a string value, and capitalizing
    string values.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在对这个书籍将带我们走向的内容有一个概述。我们知道如何安装 Go 二进制文件并编写 Go 代码，仅使用终端运行它。在本章中，我们将学习一些操作字符串值的食谱，例如从字符串的开始和结束处删除空格、提取子字符串、替换字符串的一部分、在字符串值中转义字符以及将字符串值大写。
- en: Trimming spaces from the beginning and end of a string
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从字符串的开始和结束处删除空格
- en: Let's start with trimming spaces from the beginning and end of a string. There
    are many reasons why you may want to remove spaces from the beginning and end
    of a string; for instance, if you were accepting some values such as first name,
    you usually don't require any spaces at the end or at the beginning of that string
    value.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从从字符串的开始和结束处删除空格开始。你可能有很多原因想要从字符串的开始和结束处删除空格；例如，如果你接受一些值，如名字，你通常不需要在该字符串值的开始或结束处有空格。
- en: 'So, let''s go ahead with our project and see how we can carry out this process
    in Go language. So, you have to add a new project for trimming spaces and have
    the `main.go` file that we''re going to put our code in and then we''re just going
    to run it; your screen should look something like this:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们继续我们的项目，看看我们如何在 Go 语言中执行此过程。所以，你必须添加一个新的项目用于删除空格，并有一个 `main.go` 文件，我们将把代码放入其中，然后我们只需运行它；你的屏幕应该看起来像这样：
- en: '![](img/d928383e-79c9-4b4c-9ae3-36e489d22922.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d928383e-79c9-4b4c-9ae3-36e489d22922.png)'
- en: 'To begin, let''s imagine that we have a string variable that has some spaces
    in it:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们想象我们有一个包含一些空格的字符串变量：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the preceding code snippet, `/t` is for tab and we have some space after
    it. There is *hello World* and some more space. I have put this string value to
    the console with its length property. The `len` function will give us the length
    of the greetings string, indicating the number of characters in that string. Let''s
    run this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，`/t` 表示制表符，并且在其后有一些空格。有 *hello World* 和一些更多的空格。我已经将这个字符串值及其长度属性放入控制台。`len`
    函数将给出问候字符串的长度，表示该字符串中的字符数。让我们运行这个：
- en: '![](img/5cf1f06e-2e5f-4398-abbc-932f34a332f8.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5cf1f06e-2e5f-4398-abbc-932f34a332f8.png)'
- en: As you can see from the screenshot, it has 15 characters, including the tab
    and the spaces and the rest of the string.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如截图所示，它有15个字符，包括制表符、空格以及字符串的其余部分。
- en: 'Now, let''s go ahead and trim the spaces from the variable. We have `strings.TrimSpace`,
    which returns another string, as shown in the following screenshot:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续并从变量中删除空格。我们有 `strings.TrimSpace`，它返回另一个字符串，如下面的截图所示：
- en: '![](img/d5b7429f-3f3d-4967-bd9f-ac7e9f16f587.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d5b7429f-3f3d-4967-bd9f-ac7e9f16f587.png)'
- en: 'We can then capture the string within a variable. Check the following code:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以随后将字符串捕获到变量中。查看以下代码：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output for the preceding code is as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出如下：
- en: '![](img/61ab38f8-1c83-447e-ae87-23c8c64c4d78.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/61ab38f8-1c83-447e-ae87-23c8c64c4d78.png)'
- en: Voila! As you see, our spaces from the beginning and end, including the tab,
    are gone and now we have 12 characters here. That's how you trim spaces in Go.
    In the next section, we are going to see how we can extract sub-strings from a
    string value.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！正如你所见，我们的开始和结束处的空格，包括制表符，都消失了，现在我们这里有12个字符。这就是在 Go 中删除空格的方法。在下一节中，我们将看到如何从字符串值中提取子字符串。
- en: Extracting sub-strings from a string value
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从字符串值中提取子字符串
- en: In this section, you will learn how to extract sub-strings from a string value.
    String in Go language is effectively a read-only slice of bytes, which means that
    you can perform any slice operation on a string as well. Let's go to our editor
    and see how we can proceed with it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将学习如何从字符串值中提取子字符串。在 Go 语言中，字符串实际上是一个只读的字节切片，这意味着你可以在字符串上执行任何切片操作。让我们打开我们的编辑器，看看我们如何进行。
- en: 'In the editor, add a new file and name it `main.go`. You have to change the
    Package to `main` and add a new function called `main`. This `main` function will
    be the entry point of our example. So, let''s imagine we have a string value as
    follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑器中，添加一个新文件并将其命名为 `main.go`。你必须将包名改为 `main` 并添加一个名为 `main` 的新函数。这个 `main`
    函数将是我们的示例的入口点。所以，让我们想象我们有一个如下所示的字符串值：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'I want to remove the word *Mars* and the word *and* from the string and extract
    just the *Hello, World* part of it. This can be done as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我想从字符串中删除单词 *Mars* 和 *and*，并提取仅包含 *Hello, World* 的部分。可以这样做：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The index starts from a 0, since it is slice.  The output of the preceding
    code is as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 索引从0开始，因为它是一个切片。前面代码的输出如下：
- en: '![](img/4112dafd-57f4-4f89-85fe-baf862ef351d.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4112dafd-57f4-4f89-85fe-baf862ef351d.png)'
- en: As you can see, we only extracted the *Hello, World* part of the whole phrase.
    It will still work without a zero in the index. If we only want the *World* and
    *Mars* part of this string, the index can be [6:].
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们只提取了整个短语中的 *Hello, World* 部分。即使索引中没有零，它仍然会工作。如果我们只想得到字符串中的 *World* 和
    *Mars* 部分，索引可以是 [6:]。
- en: That's how you extract sub-strings from a string value. In our next video, we're
    going to see how we can replace a part of a string with another string.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是如何从字符串值中提取子字符串。在我们的下一个视频中，我们将看到如何将字符串的一部分替换为另一个字符串。
- en: Replacing parts of a string
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 替换字符串的一部分
- en: In this section, we're going to see how we can quickly replace a part of a string
    with another value. When it comes to string manipulation in Go language, you will
    find a lot of utility methods under the strings package. Herein, we are going
    to use the same package for replacing a part of the string with another value.
    Let's go back to our editor and see how we can commence this process.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何快速将字符串的一部分替换为另一个值。当涉及到 Go 语言的字符串操作时，你将在 strings 包下找到很多实用方法。在这里，我们将使用相同的包来替换字符串的一部分。让我们回到我们的编辑器，看看我们如何开始这个过程。
- en: 'So, I''m going to have a `helloWorld` variable and we''re going to replace
    *World* with *Mars*. Check the following code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我将有一个 `helloWorld` 变量，我们将把 *World* 替换为 *Mars*。请查看以下代码：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following screenshot will explain the code that we just looked at:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图将解释我们刚才看到的代码：
- en: '![](img/5814b177-4e26-4d61-a5d1-8fd981a31820.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5814b177-4e26-4d61-a5d1-8fd981a31820.png)'
- en: As shown in the screenshot, we're going to use `strings` package and it has
    a  `replace` function and it accepts the variable that we're going to search as
    the first parameter, which is *Hello,  World*. The old string would be the things
    in the string that we want to replace, which is *World*. The new string would
    be *Mars*, and number of repetitions that we want to apply to this replacement
    would be '1'.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如截图所示，我们将使用 `strings` 包，它有一个 `replace` 函数，它接受我们将要搜索的变量作为第一个参数，即 *Hello, World*。旧字符串是我们想要替换的字符串中的内容，即
    *World*。新字符串将是 *Mars*，我们想要应用到此替换的重复次数是 '1'。
- en: 'If you look at it, the signature of this method returns another string and
    we''re going to assign it to another variable, in this case `helloMars`. Thus,
    you will see the following output:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你观察一下，这个方法的签名返回另一个字符串，我们将将其分配给另一个变量，在这个例子中是 `helloMars`。因此，你会看到以下输出：
- en: '![](img/5dbd4c75-dc8b-4889-a38b-a6eaf0bfd9fb.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5dbd4c75-dc8b-4889-a38b-a6eaf0bfd9fb.png)'
- en: As you can see, we've replaced *World* with *Mars*.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们已经将 *World* 替换为 *Mars*。
- en: 'Now, let''s imagine that we have multiple instances of *World* in the sentence
    and you use the following code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们假设句子中有多个 *World* 实例，并且你使用了以下代码：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'So, if you have a strength value like that, using 1 will not help. It''ll only
    replace the first occurrence of the word *World* with *Mars* but the rest of it
    will still remain as *World,* as seen in the following screenshot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你有一个那样的强度值，使用1将不会有所帮助。它只会替换单词 *World* 的第一个出现为 *Mars*，但其余部分仍然保持为 *World*，如以下截图所示：
- en: '![](img/25508dbe-50fe-4367-b3de-a25ecc622bd8.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/25508dbe-50fe-4367-b3de-a25ecc622bd8.png)'
- en: 'Thus, you can replace as many instances of *World* as you like by changing
    the number of repetitions. For instance, if you would want to replace the first
    two instances of *World* with *Mars*, the number of repetitions would be 2, and
    so on and so forth. If you want to replace all instances of *World* with *Mars*,
    one quick and easy way would be to use minus one, and that effectively tells Go
    to replace any instance of the World within that string that you can find with
    the word *Mars*. Let''s run the following code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你可以通过更改重复次数来替换 *World* 的任意多个实例。例如，如果你想将 *World* 的前两个实例替换为 *Mars*，重复次数将是2，依此类推。如果你想将
    *World* 的所有实例替换为 *Mars*，一种快速简单的方法是使用负一，这实际上告诉 Go 将字符串中可以找到的任何 *World* 实例替换为单词
    *Mars*。让我们运行以下代码：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The preceding code will give the following output:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将给出以下输出：
- en: '![](img/16d3d73a-73e5-425a-8429-6c109e3165a5.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/16d3d73a-73e5-425a-8429-6c109e3165a5.png)'
- en: Now, all instances of world have been replaced by the word *Mars*. The Go strings
    package gives you a lot of other options, and, as you have seen, replacement of
    a string is really easy. In our next section, we're going to see how we can escape
    characters in strings.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有的 "world" 实例都已被替换为单词 *Mars*。Go 的字符串包提供了许多其他选项，而且正如你所见，替换字符串实际上非常简单。在我们接下来的部分，我们将看到如何字符串中转义字符。
- en: Escaping characters in a string
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串中的转义字符
- en: In this section, we're going to see how to escape special characters in string
    values. Similar to many other languages in the market today, Go treats certain
    characters in a special way. For instance, if Go sees \t characters in a string
    value, it will treat them as a tab character instead. Also, without escaping it,
    you cannot have double quotes within a double quote, and right now we're going
    to see how to escape them in order to properly show those characters to our output.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何在字符串值中转义特殊字符。与市场上许多其他语言类似，Go 会以特殊方式处理某些字符。例如，如果 Go 在字符串值中看到 `\t`
    字符，它将它们视为制表符。另外，如果不进行转义，你无法在双引号内使用双引号，现在我们将看到如何转义它们以正确地显示这些字符。
- en: As always, we will have our `main.go` file and the `main` function. So let's
    check an example that is similar to the previous one.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如往常一样，我们将有我们的 `main.go` 文件和 `main` 函数。所以让我们检查一个与上一个类似的例子。
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'So, if I want to include double quotes around the term Tarik, I can do it,
    but, as you can see, it gives me a compile time error, as shown in the following
    screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果我想在 Tarik 这个词周围包含双引号，我可以做到，但正如你所见，它给了我一个编译时错误，如下面的屏幕截图所示：
- en: '![](img/ba60f272-bc4b-4602-a2a7-32053c00cb32.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ba60f272-bc4b-4602-a2a7-32053c00cb32.png)'
- en: 'So, let''s fix this. All I need to do is use `\`. So, anytime you want to escape
    a special character, you escape it with a `\`. So, let''s go ahead and add it
    to our console:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们修复这个问题。我需要做的只是使用 `\`。所以，每次你想转义一个特殊字符时，你都用 `\` 来转义它。所以，让我们继续并把它添加到我们的控制台：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output for the the preceding code will be as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出将如下所示：
- en: '![](img/08b1ad84-c990-4a17-aed7-62879f0a4566.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/08b1ad84-c990-4a17-aed7-62879f0a4566.png)'
- en: All right! As you can see, it says Hello World, this is "Tarik.", but Tarik
    is within two double quotes as desired.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧！正如你所见，它写着 Hello World，这是 "Tarik."，但 Tarik 正如预期的那样被包含在两个双引号内。
- en: 'Now, there are other problems as well. Let''s imagine that I want to, for some
    reason, output `\t` without the double quotes:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，还有其他问题。让我们假设，出于某种原因，我想在不使用双引号的情况下输出 `\t`：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'It looks good to go and, since we don''t see any compile time error, we can
    go ahead and run it. The following output is obtained:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来一切正常，并且由于我们没有看到任何编译时错误，我们可以继续运行它。以下是我们得到的结果：
- en: '![](img/13045bfc-e96b-4df1-895d-1ffc2ea35d43.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/13045bfc-e96b-4df1-895d-1ffc2ea35d43.png)'
- en: 'As you can see, `\t` does not appear in the console; in fact, I see a big tab
    because this is a special character; `\t` means tab. There are other special characters
    like that, for instance `\n`, which means new line. So, let''s try and run the
    following code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，`\t` 没有出现在控制台中；实际上，我看到一个大制表符，因为这是一个特殊字符；`\t` 表示制表符。还有其他类似的特殊字符，例如 `\n`，它表示换行符。所以，让我们尝试运行以下代码：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The preceding code will give the following output:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将给出以下输出：
- en: '![](img/6efe8ca7-17d6-4ca7-93b5-a8bdaec6d69f.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6efe8ca7-17d6-4ca7-93b5-a8bdaec6d69f.png)'
- en: 'As you can see, `Hello again`, instead of being on the same line, is put on
    a new line. If I remove `/n` and run the code again, the hello again will be back
    to the same line and we''ll also have a big space because of the special character
    `\t`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，`Hello again` 并不是在同一行，而是被放置在了新的一行。如果我移除 `/n` 并再次运行代码，"hello again" 将会回到同一行，并且由于特殊字符
    `\t` 的存在，我们还会看到一个大的空格：
- en: '![](img/4257ff60-42f1-4acc-ace5-4714afc05243.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4257ff60-42f1-4acc-ace5-4714afc05243.png)'
- en: 'So, how can we escape the `\t`?  Let''s see what happens if we include another
    `\` and run the following code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何转义 `\t`？让我们看看如果我们包含另一个 `\` 并运行以下代码会发生什么：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As you can see in the following screenshot, we now have the \t within the string
    value and Go does not treat it as a special character any more:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 正如以下屏幕截图所示，我们现在在字符串值中有 `\t`，而 Go 不再将其视为特殊字符：
- en: '![](img/dc5f9031-2a97-42f3-b989-105a8b825d3d.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dc5f9031-2a97-42f3-b989-105a8b825d3d.png)'
- en: That's how you use escape characters in Go. In our next section, we're going
    to see how to capitalize string values easily.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你在 Go 中使用转义字符的方法。在我们接下来的部分，我们将看到如何轻松地将字符串值转换为大写。
- en: Capitalizing string values
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串值的大写
- en: In this section, we're going to see how to capitalize words in Go. There are
    various ways in which you might want to capitalize words in a sentence; for instance,
    you may want to capitalize all the letters in the sentence or just the first letters
    of all the words and we're going to see how to do it.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何在 Go 中将单词大写。你可能想要以各种方式在句子中将单词大写；例如，你可能想要将句子中的所有字母都大写，或者只将所有单词的首字母大写，我们将看到如何实现这一点。
- en: 'Let''s go back to our editor. The first few steps remain the same as followed
    while trimming spaces from the beginning and end of a string. However, here, we
    have a variable that has "hello world, how are you today", and we want to capitalize
    just the first letters of all the words in this sentence. So, the strings package,
    which we''ve seen before in our previous section, has a function called `title`
    and the signature of this method, too, returns another string that we can assign
    to another variable, which is `HelloWorldtitle`. To proceed, we will have to run
    the, code just described:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到我们的编辑器。最初的几个步骤与从字符串的开始和结束处修剪空格时遵循的步骤相同。然而，这里我们有一个变量包含 "hello world, how
    are you today"，而我们只想将这个句子中所有单词的首字母大写。所以，我们在之前章节中已经见过的字符串包有一个名为 `title` 的函数，这个方法的签名也返回另一个字符串，我们可以将其分配给另一个变量，即
    `HelloWorldtitle`。为了继续，我们必须运行刚才描述的代码：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The preceding code will give the following output:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将给出以下输出：
- en: '![](img/2c064635-37d6-4fc4-bb17-d4adf025420b.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2c064635-37d6-4fc4-bb17-d4adf025420b.png)'
- en: 'As you can see, the code has resulted in the capitalization of all the first
    letters of the sentence. Now, if we want to capitalize all the letters in this
    sentence, we will have to run the following code with the new `ToUpper` function:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，代码已经将句子的所有首字母大写了。现在，如果我们想将这个句子中的所有字母都大写，我们必须使用新的 `ToUpper` 函数运行以下代码：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you do print `Ln`, it actually prints that string in a new line, whereas
    if you do not print, it doesn''t do that. The code that we just saw will give
    the following output:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打印 `Ln`，它实际上会在新的一行中打印那个字符串，而如果你不打印，它就不会这样做。我们刚才看到的代码将给出以下输出：
- en: '![](img/c2e4a283-6ac9-40e3-8556-d4c302a7f66d.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c2e4a283-6ac9-40e3-8556-d4c302a7f66d.png)'
- en: This is all about capitalizing string values!
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都是关于大写字符串值！
- en: Summary
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to trim spaces from the beginning and end of
    strings, how to extract sub-strings from a string value, how to replace parts
    of a string, how to escape characters in a string, and how to capitalize string
    values. With this, we have finished learning about string manipulation. The next
    chapter will describe how to carry out type conversions among various types and
    we're going to start off with converting pool to a string value.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何从字符串的开始和结束处修剪空格，如何从字符串值中提取子字符串，如何替换字符串的一部分，如何转义字符串中的字符，以及如何大写字符串值。至此，我们已经完成了关于字符串操作的学习。下一章将描述如何在各种类型之间执行类型转换，我们将从将池转换为字符串值开始。
