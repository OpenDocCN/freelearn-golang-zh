- en: Manipulating String Values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now have an overview of what this book will take us through. We know how
    to install Go binaries and write Go code and run it using just the terminal. In
    this chapter, we're going to learn some recipes for manipulating string values,
    such as trimming spaces from beginning and end of a string, extracting sub strings,
    replacing parts of a string, escaping characters in a string value, and capitalizing
    string values.
  prefs: []
  type: TYPE_NORMAL
- en: Trimming spaces from the beginning and end of a string
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start with trimming spaces from the beginning and end of a string. There
    are many reasons why you may want to remove spaces from the beginning and end
    of a string; for instance, if you were accepting some values such as first name,
    you usually don't require any spaces at the end or at the beginning of that string
    value.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s go ahead with our project and see how we can carry out this process
    in Go language. So, you have to add a new project for trimming spaces and have
    the `main.go` file that we''re going to put our code in and then we''re just going
    to run it; your screen should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d928383e-79c9-4b4c-9ae3-36e489d22922.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To begin, let''s imagine that we have a string variable that has some spaces
    in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code snippet, `/t` is for tab and we have some space after
    it. There is *hello World* and some more space. I have put this string value to
    the console with its length property. The `len` function will give us the length
    of the greetings string, indicating the number of characters in that string. Let''s
    run this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5cf1f06e-2e5f-4398-abbc-932f34a332f8.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see from the screenshot, it has 15 characters, including the tab
    and the spaces and the rest of the string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s go ahead and trim the spaces from the variable. We have `strings.TrimSpace`,
    which returns another string, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d5b7429f-3f3d-4967-bd9f-ac7e9f16f587.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can then capture the string within a variable. Check the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for the preceding code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/61ab38f8-1c83-447e-ae87-23c8c64c4d78.png)'
  prefs: []
  type: TYPE_IMG
- en: Voila! As you see, our spaces from the beginning and end, including the tab,
    are gone and now we have 12 characters here. That's how you trim spaces in Go.
    In the next section, we are going to see how we can extract sub-strings from a
    string value.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting sub-strings from a string value
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn how to extract sub-strings from a string value.
    String in Go language is effectively a read-only slice of bytes, which means that
    you can perform any slice operation on a string as well. Let's go to our editor
    and see how we can proceed with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the editor, add a new file and name it `main.go`. You have to change the
    Package to `main` and add a new function called `main`. This `main` function will
    be the entry point of our example. So, let''s imagine we have a string value as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'I want to remove the word *Mars* and the word *and* from the string and extract
    just the *Hello, World* part of it. This can be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The index starts from a 0, since it is slice.  The output of the preceding
    code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4112dafd-57f4-4f89-85fe-baf862ef351d.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we only extracted the *Hello, World* part of the whole phrase.
    It will still work without a zero in the index. If we only want the *World* and
    *Mars* part of this string, the index can be [6:].
  prefs: []
  type: TYPE_NORMAL
- en: That's how you extract sub-strings from a string value. In our next video, we're
    going to see how we can replace a part of a string with another string.
  prefs: []
  type: TYPE_NORMAL
- en: Replacing parts of a string
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to see how we can quickly replace a part of a string
    with another value. When it comes to string manipulation in Go language, you will
    find a lot of utility methods under the strings package. Herein, we are going
    to use the same package for replacing a part of the string with another value.
    Let's go back to our editor and see how we can commence this process.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, I''m going to have a `helloWorld` variable and we''re going to replace
    *World* with *Mars*. Check the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot will explain the code that we just looked at:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5814b177-4e26-4d61-a5d1-8fd981a31820.png)'
  prefs: []
  type: TYPE_IMG
- en: As shown in the screenshot, we're going to use `strings` package and it has
    a  `replace` function and it accepts the variable that we're going to search as
    the first parameter, which is *Hello,  World*. The old string would be the things
    in the string that we want to replace, which is *World*. The new string would
    be *Mars*, and number of repetitions that we want to apply to this replacement
    would be '1'.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look at it, the signature of this method returns another string and
    we''re going to assign it to another variable, in this case `helloMars`. Thus,
    you will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5dbd4c75-dc8b-4889-a38b-a6eaf0bfd9fb.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we've replaced *World* with *Mars*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s imagine that we have multiple instances of *World* in the sentence
    and you use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'So, if you have a strength value like that, using 1 will not help. It''ll only
    replace the first occurrence of the word *World* with *Mars* but the rest of it
    will still remain as *World,* as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/25508dbe-50fe-4367-b3de-a25ecc622bd8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Thus, you can replace as many instances of *World* as you like by changing
    the number of repetitions. For instance, if you would want to replace the first
    two instances of *World* with *Mars*, the number of repetitions would be 2, and
    so on and so forth. If you want to replace all instances of *World* with *Mars*,
    one quick and easy way would be to use minus one, and that effectively tells Go
    to replace any instance of the World within that string that you can find with
    the word *Mars*. Let''s run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will give the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/16d3d73a-73e5-425a-8429-6c109e3165a5.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, all instances of world have been replaced by the word *Mars*. The Go strings
    package gives you a lot of other options, and, as you have seen, replacement of
    a string is really easy. In our next section, we're going to see how we can escape
    characters in strings.
  prefs: []
  type: TYPE_NORMAL
- en: Escaping characters in a string
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to see how to escape special characters in string
    values. Similar to many other languages in the market today, Go treats certain
    characters in a special way. For instance, if Go sees \t characters in a string
    value, it will treat them as a tab character instead. Also, without escaping it,
    you cannot have double quotes within a double quote, and right now we're going
    to see how to escape them in order to properly show those characters to our output.
  prefs: []
  type: TYPE_NORMAL
- en: As always, we will have our `main.go` file and the `main` function. So let's
    check an example that is similar to the previous one.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'So, if I want to include double quotes around the term Tarik, I can do it,
    but, as you can see, it gives me a compile time error, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ba60f272-bc4b-4602-a2a7-32053c00cb32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So, let''s fix this. All I need to do is use `\`. So, anytime you want to escape
    a special character, you escape it with a `\`. So, let''s go ahead and add it
    to our console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for the the preceding code will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/08b1ad84-c990-4a17-aed7-62879f0a4566.png)'
  prefs: []
  type: TYPE_IMG
- en: All right! As you can see, it says Hello World, this is "Tarik.", but Tarik
    is within two double quotes as desired.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, there are other problems as well. Let''s imagine that I want to, for some
    reason, output `\t` without the double quotes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'It looks good to go and, since we don''t see any compile time error, we can
    go ahead and run it. The following output is obtained:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/13045bfc-e96b-4df1-895d-1ffc2ea35d43.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, `\t` does not appear in the console; in fact, I see a big tab
    because this is a special character; `\t` means tab. There are other special characters
    like that, for instance `\n`, which means new line. So, let''s try and run the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will give the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6efe8ca7-17d6-4ca7-93b5-a8bdaec6d69f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, `Hello again`, instead of being on the same line, is put on
    a new line. If I remove `/n` and run the code again, the hello again will be back
    to the same line and we''ll also have a big space because of the special character
    `\t`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4257ff60-42f1-4acc-ace5-4714afc05243.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So, how can we escape the `\t`?  Let''s see what happens if we include another
    `\` and run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the following screenshot, we now have the \t within the string
    value and Go does not treat it as a special character any more:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc5f9031-2a97-42f3-b989-105a8b825d3d.png)'
  prefs: []
  type: TYPE_IMG
- en: That's how you use escape characters in Go. In our next section, we're going
    to see how to capitalize string values easily.
  prefs: []
  type: TYPE_NORMAL
- en: Capitalizing string values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to see how to capitalize words in Go. There are
    various ways in which you might want to capitalize words in a sentence; for instance,
    you may want to capitalize all the letters in the sentence or just the first letters
    of all the words and we're going to see how to do it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go back to our editor. The first few steps remain the same as followed
    while trimming spaces from the beginning and end of a string. However, here, we
    have a variable that has "hello world, how are you today", and we want to capitalize
    just the first letters of all the words in this sentence. So, the strings package,
    which we''ve seen before in our previous section, has a function called `title`
    and the signature of this method, too, returns another string that we can assign
    to another variable, which is `HelloWorldtitle`. To proceed, we will have to run
    the, code just described:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will give the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2c064635-37d6-4fc4-bb17-d4adf025420b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the code has resulted in the capitalization of all the first
    letters of the sentence. Now, if we want to capitalize all the letters in this
    sentence, we will have to run the following code with the new `ToUpper` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If you do print `Ln`, it actually prints that string in a new line, whereas
    if you do not print, it doesn''t do that. The code that we just saw will give
    the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c2e4a283-6ac9-40e3-8556-d4c302a7f66d.png)'
  prefs: []
  type: TYPE_IMG
- en: This is all about capitalizing string values!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to trim spaces from the beginning and end of
    strings, how to extract sub-strings from a string value, how to replace parts
    of a string, how to escape characters in a string, and how to capitalize string
    values. With this, we have finished learning about string manipulation. The next
    chapter will describe how to carry out type conversions among various types and
    we're going to start off with converting pool to a string value.
  prefs: []
  type: TYPE_NORMAL
