- en: Type Conversions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Converting types from one to the other is a very common operation during daily
    programming activities, and therefore knowing how to do so is very important.
    In this chapter, we will go through some practical examples to learn how to convert
    one type into another effortlessly.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Trimming spaces from the beginning and end of strings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extracting substrings from string values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replacing parts of a string
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Escaping characters in strings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capitalizing string values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting a Boolean into a String
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re going to start off with learning how to convert a `Boolean` value into
    a `String` value:'
  prefs: []
  type: TYPE_NORMAL
- en: In our editor, after creating a new file, `main.go`, and the `main` function,
    as always, let's consider a variable called `isNew`, which is a Boolean. Hence
    the value will be `true`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So, let''s say that we want to print it out to our console with a message.
    Check the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2a36f4ec-b575-4739-9391-88b78d5af789.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we encounter a compile-time error. Thus, you cannot use the
    `+` operator and we need to convert the `isNew` Boolean value to its string representation.
  prefs: []
  type: TYPE_NORMAL
- en: Let's use the `stringconvert` package, which has various string conversion functions,
    of which, we're going to use `FormatBool`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Taking a `Boolean` value returns every string representation of it, and in
    this case, it''s `isNew`. If you look at the signature, you''ll see that it returns
    true or false based on the value of the Boolean value passed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4f96132a-3597-4cc1-babf-3aaab03d088c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So, let''s add `isNewStr`, run it and check the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/31306e10-e0bd-45eb-9e23-3bc257ac874e.png)'
  prefs: []
  type: TYPE_IMG
- en: There is another way of printing such values to the console and it is called
    `Printf`. It can actually format various types to the console. For instance, we
    can use the special characters that we went over previously.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we won't use `isNewStr` for `Printf` because now we can use any type
    and it will find a default representation to string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moreover, Go does not accept unused variables and unused packages, and hence,
    we are going to comment `isNewStr := strconv.FormatBool(isNew)` out and remove
    `isNewStr` too. Now, we can run the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following output is obtained:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0c29abd4-91fa-4719-b8da-074263400aec.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, we get the same message as before, and that is how you can easily convert
    a `Boolean` type to a `String`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next section, we're going to see how to convert integer and float values
    into a string.
  prefs: []
  type: TYPE_NORMAL
- en: Converting integer and float values into a string
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to learn how to convert integer and float values
    into string values. At first, this may seem a little complex, but after this section
    you will feel comfortable enough to work with those conversions. So let's go back
    to our editor and see how we can do it.
  prefs: []
  type: TYPE_NORMAL
- en: Converting an integer value into a string value
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start with converting an integer value into a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: Under the string conversion package, which is `strconv`, we have a bunch of
    functions that we can use for these conversions; one of these functions is `FormatInt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So let's go ahead and use base 10\. You can have different bases, such as 16,
    10, and 24.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you look at the signature, you'll see that it returns a string.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the code will not work exactly the way we want, but we''re going to see
    why and we''re going to fix it. The following output is obtained when you run
    the code that has been previously described:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9d422335-6dc0-4b37-bb25-fbb001f9bf1c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we know that it accepts integer type 64; let''s modify the code and run
    it again to obtain an output as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6070c681-1066-4311-a206-99eb0050f9e8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We get `100` as a string value back to our console. You may not want to do
    this all the time, and hence here''s the code that you can run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We have used a different function that automatically converts integers to ASCII.
    On running the code, we obtain the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6257ebe3-8da2-41da-96e5-1a5d0fc65b4b.png)'
  prefs: []
  type: TYPE_IMG
- en: Converting a float value into a string value
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s move on to the second conversion, which is turning a float value into
    a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: Herein, we will have another number for `numberFloat`, for instance `23445221.1223`,
    and we will learn to convert this into a shrink value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will consider another function, which is `FormatFloat`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So, let''s go ahead and look at the signature:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/10f21884-0e44-4085-9269-2327420941ea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first thing that it expects us to do is pass a float `64`, (we have float
    `32` as well); they are `bitSizes` and represent how big the float can be. We
    have the format (`fmt`) for which we can use various letters, such as *E*, *F*,
    or *G;* for instance, *G* is for large exponents, and *F* is for no exponent.
    We have precision, which basically tells us how far we want to go with using the
    numbers after the dot, and the bit size is float `32` or float `64`. We can add
    all of these entities according to the requirements of the situation. Hence, you
    can run the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code will be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fe413dfc-1525-4d59-b22c-6982f974ae04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s play with the precision a little bit more; if we change it to `3`, you''ll
    get the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2708bbac-f0b8-405c-80b9-b3efb9d4a79b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The output only shows three characters or three numbers after the dot. If you
    don''t know exactly how many digits are required after the dot, you can set the
    precision as `-1` and the output will display all of the digits after the dot;
    for example, check the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will give us the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/02dec563-88af-4cdb-af5d-5d004f37e6da.png)'
  prefs: []
  type: TYPE_IMG
- en: So, that's why you may want to use a precision of `-1` when you want to show
    everything but don't know the exact number of digits after the dot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is how you can carry out the conversion of integer and float values into
    string values in Go. In our next section, we're going to see how to parse string
    values to Boolean values.
  prefs: []
  type: TYPE_NORMAL
- en: Parsing string values to Boolean values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''re going to see how to convert a string value into a Boolean
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in our editor, we''re going to have a variable name `isNew`, and this is
    going to be a string value and is a true value. We''re going to use a package
    called `strconv`, which has `ParseBool`. It returns two things: one is the Boolean
    value and the other is an error. So, let''s check the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You should check whether an error is not nil. This will mean that an error occurred
    and we will have to handle it. For example, we're just going to output some failure
    message, that is, `failed`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it's not nil in other languages, but it's nil here, then we're going to have
    to check the `isNew` Boolean. If it looks fine, we're going to write `IsNew` to
    the output, or `Not new`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On running the code, you obtain the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5c0f7e46-e726-41dc-99ee-1d0285df5de1.png)'
  prefs: []
  type: TYPE_IMG
- en: As you see, it passed and didn't throw an exception. If `true` is changed to
    `false`, we will obtain an output of `Not new`. Of course, the `ParseBool` method
    is flexible enough to accept various string values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you look at the signature in the following screenshot, you''ll see `T`,
    `TRUE`, `true`, and so on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/345064b0-4eec-4638-9a0e-4e585f023edf.png)'
  prefs: []
  type: TYPE_IMG
- en: If we type `1` instead of `true`, the output will still be `IsNew`; if we type
    `0`, `F`, or `f`, it'll translate to `false`, and output `Not new`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s see what happens if we pass in `J`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The code will output the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f9d95a80-0719-46aa-9a36-b0b8cecec456.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the output will be `failed`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In our next section, we're going to show you how to parse string values to integer
    and float types.
  prefs: []
  type: TYPE_NORMAL
- en: Parsing string values to integer and float types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to see how to parse string values to integer and
    float types.
  prefs: []
  type: TYPE_NORMAL
- en: Parsing string values to integer types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s imagine that we have a variable called `number`, which has `2` as a
    string. We''re going to use `strconv.ParseInt` and it returns two variables: the
    first one is the actual integer that we are expecting and the other is the return
    variable that arises if any error occurs during conversion.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look at the signature, you''ll see that it returns integer `64` and
    an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1e2ad662-0146-481c-b80f-3a604a7ebedf.png)'
  prefs: []
  type: TYPE_IMG
- en: So, the first thing we can do is check whether any error occurred during conversion;
    if it is not nil, we can understand that something happened and we'll type `Error
    happened`.
  prefs: []
  type: TYPE_NORMAL
- en: There's no `try...catch` in Go, so you always have to do error checking if you
    want to write resilient code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, for `if` checking, we can give `Success` as an output if the number is
    `2`. Now, let''s run the described code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for the code will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e0ecf78-6533-42a9-af26-04c200d74fc7.png)'
  prefs: []
  type: TYPE_IMG
- en: The conversion was successful. You can also try 64-bit, which gives the same
    results. All right! That was conversion from a string into an integer.
  prefs: []
  type: TYPE_NORMAL
- en: Parsing string values to float numbers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s check the parsing of string values to float numbers. To begin,
    we are going to use the same code that we used for parsing string values to float
    numbers with only minor modifications. The code after the modification will be
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: On running the code, it returns a `Success` message. That means our conversion
    was successful and we successfully got our `2.2` out of our `ParseFloat` method.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we're going to learn how to convert a byte array into a
    string.
  prefs: []
  type: TYPE_NORMAL
- en: Converting a byte array into a string
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''re going to learn how to convert a byte array into a string:'
  prefs: []
  type: TYPE_NORMAL
- en: The most important thing you need to know about this tutorial is that in Go,
    string variables are just a slice of bytes. Therefore, it is really easy to convert
    a byte array into a string value and a string value into a byte array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how we can start this. Imagine that you have a `helloWorldByte`
    array; currently, it is a literal byte array, but you can derive it from any stream,
    such as a network or a file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We also have the string construct, which makes it really easy to convert a byte
    array into a string representation of it. We are going to use `fmt.Println` for
    the string representation of this `helloWorldByte` and run the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So, let''s run the code and check the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3c225bfd-6b53-484e-a845-38d678d1bda5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, we converted the whole byte array into a string representation
     really simply. You can do the same thing by using a byte instead, if you want
    to convert a string into a byte array. Let''s actually do it really quickly. Check
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'After we run the code, we get an output as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7e6ed7ac-7149-469a-a900-6d6c172fa19e.png)'
  prefs: []
  type: TYPE_IMG
- en: Converting a byte array into a string concludes [Chapter 3](c1a19cb8-ee26-4a5d-9a09-9600315fbb8d.xhtml), *Type
    Conversions*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered trimming spaces from the beginning and end of strings,
    extracting substrings from string values, replacing parts of a string, escaping
    characters in strings, and capitalizing string values. In [Chapter 4](472b270e-b033-4093-9c12-1521893be2ab.xhtml),
    *Date and Time*, we're going to look at recipes for dates and times, and we're
    going to start off by learning how to find out today's date and time.
  prefs: []
  type: TYPE_NORMAL
