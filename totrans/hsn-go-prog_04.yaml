- en: Date and Time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to learn how to work with dates and times in
    the Go programming language. You will learn how to do basic operations on `DateTime`
    values such as finding the difference between two dates, getting today''s date,
    doing simple arithmetic operations on `DateTime` values, and parsing dates from
    string values. We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Finding today's date and time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding and subtracting from a date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding the difference between two dates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parsing dates and times from strings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding today's date and time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to learn how to find today''s date and time.
    We can use `time.Now` to get today''s date, and it imports a `time` package, and
    `time` returns a `time` type, and so we are going to assign this to another variable
    and use the `String` function. The following code will help you understand better:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for the preceding code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eb811292-5437-4c8a-9ece-790933beab03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, we get a big string here that has everything, and we can, of
    course, format that to our needs. For instance, I can add the `current.Format` function
    and a predefined layout as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output to the code shown in the preceding screenshot is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0db48887-4277-48e0-a361-5e40c9af55bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the previous screenshot, you will see today''s date. You can also have the
    time and date together by bypassing the layout `snf` , mentioning the format of
    the output (`YYYY-MM-DD hh:mm:ss`) that you want, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'On running the code mentioned in the preceding screenshot, we get the following
    output with the year, month, and day, and the time information as well. This can
    be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec22743f-6643-4cdc-8eae-03e05f815e6f.png)'
  prefs: []
  type: TYPE_IMG
- en: So, that's how you can simply get today's date, and format it in various ways,
    in the Go language. In our next section, we're going to learn how to add or subtract
    from date values.
  prefs: []
  type: TYPE_NORMAL
- en: Adding and subtracting from a date
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to learn how to add and subtract from a date value.
  prefs: []
  type: TYPE_NORMAL
- en: Adding to the date
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s go ahead and learn how to add one month to the current date. But before
    doing that, we''ll need to know the current date. You can do this by following
    the procedure that we learned in our previous section. Consider that I got 8th August
    (`2018-08-08 09:35:16.2687997 +0530 IST m=+0.003951601`) as the output and we
    have to add one more month to this value. By using the `AddDate` function on the  `time`
    type, we can add as many years, months, and days as we want, since it accepts
    three parameters. This is how the entire code will look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'So, looking at the following screenshot of the output, you will notice that
    we have successfully added one extra month to August by passing the value `1`
    to the second parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3a6073c4-66a5-42d8-ba0f-fb758ab84dbe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can carry out the same procedure to add years. You can change the `years:` parameter
    to `1` and have `2018` changed to `2019` in the output. This can be seen in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5b6c8f00-2155-4c1a-96bb-9a670bebc1e8.png)'
  prefs: []
  type: TYPE_IMG
- en: That's pretty much how you add to date values.
  prefs: []
  type: TYPE_NORMAL
- en: Subtracting from the date
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The second thing we are going to learn is how to subtract dates from a current
    date. As you can see in the following line of code, we have used the `Sub` method
    because it accepts another `time` type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead, we are going to use `AddDate` and pass a negative value to the parameter.
    So, let''s assign it to another variable and run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for the following code will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d3c6bec3-33f8-4673-ac4b-5de57621287d.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we obtained `2018` by subtracting `1` from `2019`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, consider that you need to add time instead of months or years. To go ahead,
    we have to use `Add`, which has `duration`, which is the amount of time that you
    want to add.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, let''s imagine that we want to add 10 minutes. Check the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The code returns another type or value, which is the `time` type, and if you
    look at the output, shown here, we added 10 minutes to the September date:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/88deb3f1-dc61-49e1-9cee-11d9c9c745f2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, if I look at the output, we can see that we added `10` minutes and so `10:10:24`
    has changed to `10:20:24`. If I change `Minute` to `Hour`, and run the code, we
    will see that we added `10` hours from the September date, which can be seen in
    the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We will be getting the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f1dbdcea-0904-4ee5-9f49-e16905899147.png)'
  prefs: []
  type: TYPE_IMG
- en: So, that's basically how you do time adding. In our next section, we are going
    to see how to find the difference between two date values.
  prefs: []
  type: TYPE_NORMAL
- en: Finding the difference between two dates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to learn how to find the difference between two
    dates. Let''s imagine that we have two dates, as shown in the following code block,
    and you will see that the signature of this method is self-explanatory. So, all
    we have to do is use the following code for the subtract method which subtracts
    the first date from the second one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, before we run the code and obtain the output, if you check the signature,
    you will see that the method returns `Duration` instead of the `Time` type between
    the dates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/80ae7ed8-0d3e-454b-86a8-9718e3375118.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Getting back to running our code, you''ll see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/324aafb5-1f42-491c-bb2d-fc30f89e9b59.png)'
  prefs: []
  type: TYPE_IMG
- en: This is how you simply find the difference between two dates. In our next section,
    we're going to learn how to parse dates and times from a given string.
  prefs: []
  type: TYPE_NORMAL
- en: Parsing dates and times from strings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to learn how to parse dates and times from strings.
    This section will conclude our chapter. When you parse dates and times from a
    string, you need two things:  the first is layout and the second item is the actual
    string that you want to parse. So, let's imagine that we have a variable that
    holds the `str := "2018-08-08T11:45:26.371Z"` string value.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order for Go to understand this, you need to provide a `layout` attribute.
    A `layout` attribute basically describes how your string `DateTime` looks; it
    starts with a year, followed by a month, and day, and then the time. As always,
    the `time` package provides us with various utility functions that we can use
    to play with the date and time. The `Parse` method returns two things, one is
    the parse date and the other one is an error. If anything happens during parsing,
    an error can be thrown and we can check the error and see what went wrong, otherwise
    we will just output the string representation of the time now and the time we
    parsed. So, let''s run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The output to the code we ran is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3a1c2d95-5493-4519-8444-610368de885d.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we captured exactly what we were trying to parse as a date. This
    is how you do the parsing in Go.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter,  we have learned how to find the current date and time, how
    to add to and subtract from dates, how to find the difference between two dates,
    and how to parse dates and times from strings. In the next chapter, you will learn
    how to work with maps and arrays in the Go language. You will see practical examples
    for manipulating and iterating arrays, merging arrays and maps, and testing whether
    a key is present in a map.
  prefs: []
  type: TYPE_NORMAL
