- en: Files and Directories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the last chapter, you learned how to deal with errors and logging. In this
    chapter, we are going to see recipes for working with files and directories in
    the Go language. You will also learn about parsing and using various formats such
    a XML, YAML, and JSON. This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Checking the existence of a file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading the entire content of a text file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing to a file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating temporary files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Counting lines in a file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading a particular line in a file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparing the contents of two files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting a file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copying or moving a file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Renaming files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting a directory and its contents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing all the files under a directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking the existence of a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to start off by checking the existence of a file. So, to begin,
    let's create a file by clicking on New | File and naming it `log.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start checking whether the file exists, we are going to be using the `os.Stat`
    package. It returns two values: the first one is the file info and the second
    one is the error. We don''t need the file information but just the error itself
    because we are going to check the error to see whether the file exists. If the
    error is `nil` (no error occurs), then the file exists. Check out the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'On running the preceding code, you''ll obtain the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1b6a4608-dc38-45fd-81c2-2a7fcde62f49.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To check whether the file exists in an opposite way, we just type `os.IsNotExist()` and
    pass the `err` that we captured and print it to the console. Check out the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'On running the preceding code, we will get the same output saying `Log.txt
    file exists`. Now, let''s try to run the same code, but we delete the `log.txt`
    file this time. You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3f4015dc-873e-4739-878f-bcc035a86f58.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see that now the output displays `Log.txt file does not exist` and that's
    how you can easily check whether a file exists. In our next section, we're going
    to see how to read the entire contents of a file.
  prefs: []
  type: TYPE_NORMAL
- en: Reading the entire contents of a text file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''re going to see how to read the entire contents of a file.
    We will create a new file called `names` and I have a bunch of names, for instance,
    `Tarik`, `Guney`, `Michael`, `John`, and `Montana`. We are going to read this
    file. We''re going to use the `io` utility package that provides a read file function
    and it accepts the path of the file, that is, `names.txt`. It returns two things:
    the actual content of the file and errors. If no error occurs, we''re going to
    convert the `contentBytes` to a `string` representation first. Now let''s write
    the content to the console using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'On running the code in the terminal by using `go run main.go` command, you''ll
    obtain the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0c58474b-7b23-4b89-9a69-29121a73758b.png)'
  prefs: []
  type: TYPE_IMG
- en: Thus, you can see that we have read all the names from the file. That's how
    you can easily read the entire content of a file into your memory.
  prefs: []
  type: TYPE_NORMAL
- en: In our next section, we're going to see how to write to a file.
  prefs: []
  type: TYPE_NORMAL
- en: Writing to a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''re going to see how to write to a file. Similar to reading
    a file, we''re going to use the `ioutil` package. We will use the `ioutil.WriteFile`
    function and it accepts three parameters. The first parameter is the name of the
    file that we''re going to write into, the second one is the data that we want
    to write, and the last one is the file permissions. The advantage here is that
    if the file does not exist, then `WriteFile` will create the file with the permissions
    given through the `perm` parameter, and if the file order exists, then it will
    truncate the file before writing. We are going to go ahead and write something
    to our file and since our file does not exist yet, it will create a new file for
    us. We are going to write `Hello, World`, which is a `string` parameter and we''re
    going to convert it to a `byte` array before being able to pass it into the `WriteFile`.
    The name of the file will be `hello_world` and the second parameter will be the
    byte representation of the `hello` variable. This will return an error. If it''s
    not `nil`, it means something happened. Let''s check the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'On running the code, you''ll see that no error occurs and that our `hello_world`
    file exists. If you open the file, you''ll see `Hello, World` has been written
    in all the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e95a2f11-50ae-4abe-964a-7769cdef2f44.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we run the code again with a different `string` and `Hello, World Again`
    you will see that the previous content was wiped out and replaced with the new
    content, which is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fca14fb8-c3bb-44ec-a633-e81e0859989c.png)'
  prefs: []
  type: TYPE_IMG
- en: That's basically how you write into a file. In our next section, we're going
    to see how to create temporary files.
  prefs: []
  type: TYPE_NORMAL
- en: Creating temporary files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''re going to see how to create a temporary file. Let''s
    also have a variable that contains a string called `helloWorld := "Hello, World"`.
    We''re going to use `ioutil` package and it provides the `TempFile()` method.
    The first parameter is directory; if you don''t pass anything to it, it will use
    its default temporary directory, which we will be using in this case, and the
    second one is to give a prefix to your temporary file, which will be `hello_world_temp`.
    It returns two things: the first one is the temporary file that is created and
    the second one is the error (`err`). Now, if any error occurs, then we are going
    to panic and we''ll throw the error as the message.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you''re done with the temporary file, what''s recommended is you remove
    the file, and we can use the `defer` function where we have a `os.Remove()` method.
    You just have to provide the name of the file and it will find it and remove it.
    Now we''re going to write the `helloWorld` into our file. Let''s check the code
    now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'On running the preceding code, you''ll obtain the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8a87c71d-62b3-4fca-b709-b271a2b0377f.png)'
  prefs: []
  type: TYPE_IMG
- en: The path is where our file is located and the selected part is the name of our
    file, which is a temporary file and, of course, this file is deleted. If it was
    not deleted, we would have seen it in that location. Now, we are not going to
    delete the file this time just by commenting the `deferos.Remove(file.Name())` line
    from the preceding code block and running it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Furthermore, we''ll open the file and by using the terminal, we will just display
    the content of that file with the `less` command (in Linux) and the `more <` command
    (in Windows) as shown in the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/350448fe-4fe4-4618-8ed6-f1f6c76d2676.png)'
  prefs: []
  type: TYPE_IMG
- en: If you look at the preceding screenshot, you'll see that `Hello, World` is present
    there.
  prefs: []
  type: TYPE_NORMAL
- en: That's how you can create a temporary file in Go.
  prefs: []
  type: TYPE_NORMAL
- en: In our next section, we're going to see how to count the lines of a file.
  prefs: []
  type: TYPE_NORMAL
- en: Counting lines in a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''re going to see how to count the lines of a file. Consider
    that we have a file and it has a bunch of names in each line, and we have to count
    how many lines there are in the file. First, we will open our file using the `os.Open`
    package and the name of our file will be `names.txt`. It returns an error, but
    for this example, we''re not going to care about the error because we know that
    the file exists. So, I''m going to use a file scanner to scan the file. We have
    the `bufio.NewScanner` package that has the new scanner and it accepts a reader
    so we can pass the file. The line count will start from `0` and we are going to
    do this for `fileScanner.scan`. Thus, as long as it scans, it will increment the
    line count. Finally, we''re going to write the number of the line to the console.
    Of course, when everything is done, we will use the `defer file.Close()` function.
    Let''s check the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'When you run the preceding code, you''ll get the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/745e2305-90c6-48b5-9b06-24c3d98ca5f7.png)'
  prefs: []
  type: TYPE_IMG
- en: The output printed out `5`, and you can confirm it by going to the file and
    manually counting it too.
  prefs: []
  type: TYPE_NORMAL
- en: In our next section, we're going to see how to read a particular line in a file.
  prefs: []
  type: TYPE_NORMAL
- en: Reading a particular line in a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''re going to see how to read a particular line in a file.
    We have a file called `names.txt` and it has a bunch of names in it in each line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95227ee6-4354-4493-bb79-bd20b3e0b606.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We want to read only the third line from the file. Check out the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To begin with, we will have a `ReadLine()` function that accepts line numbers
    and returns a string. First, we are going to open the file using the `os.Open()`
    function, and second we are going to use `fileScanner`. We will then pass the
    file, and the line count that we''re going to use will start from `0`. If the
    line count equals the line number that is given to us, then we will return the
    file `scanner.txt`; otherwise, we are going to increment the counter. Finally,
    we are going to use the `defer file.Close()` function. On running the preceding
    code, you''ll obtain the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4fa59ff5-ddd9-4385-960f-94f8e33941dc.png)'
  prefs: []
  type: TYPE_IMG
- en: Thus, it returns `john`, which is on the third line as you start counting `0`.
    You can change the index and start with `1` if you want it to be more aligned
    with what people expect when they count lines in a file. That's how you can easily
    get a particular line from a file.
  prefs: []
  type: TYPE_NORMAL
- en: In our next section, we are going to see how to compare the contents of two
    files.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing the contents of two files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''re going to see how to compare contents of the two files.
    First, we are going to create two text files, having the same content, to compare,
    `one.txt` and `two.txt`. We are going to use the `ioutil` package to read the
    file into memory; as always, we will make sure that there is no error when we
    import the first file, and if there''s an error, we simply will panic. We''re
    also going to import the second file. There is a very easy way of checking whether
    these two files have the same content (are equal), which is by using the `Equal`
    function defined under the `byte` package. Check out the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'On running the preceding code, you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/af24c517-9553-4d45-bbbf-fb54e3e25a01.png)'
  prefs: []
  type: TYPE_IMG
- en: The output is `true`, which means that the content of the files was equal. If
    you change the content in one file and run the same code again, the output is
    `false`. That's how you check whether the content in two different files is the
    same or not.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we are going to learn how to delete a file using the Go
    language.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''re going to see how to delete a file in Go. Deleting a
    file is one of the easiest operations in Go because the `os` package provides
    a function called `Remove()` that allows you to remove any file. So, to begin,
    we will create a new file and name it `new.txt`. The following screenshot will
    show the folder structure after the `new.txt` is created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/85fe0208-841b-4aff-90e9-3ee20c9afb3e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We are going to see how to remove the `new.txt` file. The `Remove()` function
    accepts the path of your file. It returns an error if something happens and we''re
    going to `catch` that error and panic if it is not `nil`. Check out the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s run the code and check the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0a6265c5-edb4-4ed5-b9d4-50f5c0c35887.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can see that the `new.txt` file has disappeared and we have successfully
    deleted the file. So, what I''m going to do is go ahead and run this and, as you
    saw, the `new.txt` file disappeared. Let''s run this again and see what type of
    panic we''ll get and what error message you will see when you try to remove a
    file that does not exist in the first place:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3f26b6bf-03fe-4ca6-a365-28dc4e283b6d.png)'
  prefs: []
  type: TYPE_IMG
- en: Alright, this is how you can easily delete a file in Go. In our next section,
    we're going to see how to copy or move a file.
  prefs: []
  type: TYPE_NORMAL
- en: Copying or moving a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''re going to see how to copy or move a file. There are
    various ways you can do this and some of them depend on the operating system you''re
    going to use. However, we''re going to see the easiest way of copying or moving
    a file without depending on the operating system too much. First of all, we''ll
    add a file that we''re going to copy and name it `original.txt` and add some content
    that has `Hello, World` in it. Then, we are going to open the file by using `os.Open()`,
    which will return two things, original, which is our file, and an error. If there
    is no error, we''re going to continue and carry out a `defer` and then close the
    file. Furthermore, we are going to use `os.Create()` and create a new file at
    the same location, which will also return an error. Now the easiest thing to do
    is to use `io.Copy()`. Thus, the code will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'On running the code, we see that `copy.txt` appears and, on opening it, we
    can see `Hello, World` in it that has been copied from the  `original.txt` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/54b81394-f01b-4afb-ba56-8b01b8257960.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s check how to move a file. First, we will create a new folder called
    `target` and copy `original.txt` into `target`, and delete the `original.txt`
    file that is placed outside the `target` folder. To do this, `original_copy, err2
    := os.Create("copy.txt")` will change to `original_copy, err2 := os.Create("target/original.txt")`.
    If you see the following screenshot, you''ll notice that the `original.txt` file
    has been copied under the `target` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/adc1d602-be2b-4525-8097-0be21234491b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can now delete the outside `original.txt` file. Add the following two lines
    of code at the end of the `main` function in the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'On running the preceding code, you''ll obtain the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a7d9ea9e-8779-4bd6-b9a1-467be9e39726.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the code effectively moved the `original.txt` file by moving
    and deleting the file. That's how you can simply copy and move files in Go.
  prefs: []
  type: TYPE_NORMAL
- en: In our next section, we're going to see how we can easily rename files in Go.
  prefs: []
  type: TYPE_NORMAL
- en: Renaming files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''re going to see how to rename files in Go. First of all,
    we''re going to create a new file and name it `old.txt` and the folder structure
    will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/60b9bac7-c0df-439b-8862-7e32ab5867bf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We are going to change the name of this file to `new.txt`. To do this, the
    easiest way is to use the `os` package that provides a `Rename()` function. The
    function accepts the old path, which is `old.txt`, and a new path, which is `new.txt`.
    Let''s check the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'On running the code, you can see in the following screenshot that the name
    `old.txt` has been changed to `new.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1b7e6add-0928-4b42-91c5-51bd0843ad74.png)'
  prefs: []
  type: TYPE_IMG
- en: So, that's basically how we can rename our files in Go.
  prefs: []
  type: TYPE_NORMAL
- en: In our next section, we're going to see how to delete a directory and all of
    its contents.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a directory and its contents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''re going to see how to delete a directory and its contents.
    We are going to use the `os` package and it provides two functions, `Remove()`
    and `RemoveAll()`. We will check both these functions. First, we will create a
    new directory called `hello` and keep it empty, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/06f763ca-9e82-4c16-9470-64388339dd92.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As mentioned earlier, we are going to use the `os` package and it accepts either
    a file or a directory. We''re going to pass a directory, which always returns
    an error if something happens. We will have to check whether this error is not
    `nil`. Check out the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run the code, you''ll obtain the following folder structure as output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b9cd3c16-0a56-4800-8e83-e986b2723d47.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you compare the two output screenshots, you can see that we have effectively
    removed our `hello` directory. However, if there''s a file (say `world.txt`) in
    the directory, that is, the directory is not empty and you run the same code,
    the directory will not be deleted and the following message will be displayed
    if there''s a file in the `hello` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/137c35c3-58be-4eea-928e-467a30bde069.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, there is an option to delete the file as well as the directory. We can
    use the `RemoveAll()` function that we spoke about at the beginning of the section.
    To do this, just change the `err := os.Remove("hello")` to `err := os.RemoveAll("hello")` from
    the preceding code.
  prefs: []
  type: TYPE_NORMAL
- en: 'On running the preceding code, you''ll find that you have successfully deleted
    both the file and the directory and you will be viewing the following folder structure
    again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d2ffbd3c-0af5-4b86-af53-c543117243f7.png)'
  prefs: []
  type: TYPE_IMG
- en: In our next section, we're going to see how to list all the files under a directory.
  prefs: []
  type: TYPE_NORMAL
- en: Listing all the files under a directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to see how to list all the files under a directory.
    We will create a new directory called `hello` comprising three files; namely, `jupiter.txt`,
    `mars.txt`, and `world.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e8b0a22-d83b-425f-9296-8c09a188fccc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'What we are going to do is read all the files and output their names to the
    console. We are going to use the `ioutil.ReadDir` package and pass in `hello`,
    which is the name of our directory. This will return two types of things: two
    files and an error. We will check whether the error is not `nil` and print out
    the content by using panic. We will also use the `for` loop to iterate over the
    files. Check out the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You get the following output if you run the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d2ee0c53-9b60-48ec-8b1d-c7e90ab11019.png)'
  prefs: []
  type: TYPE_IMG
- en: That's how you can simply list all the files under your directory.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to work with files and directories in an operating
    system. You also learned parsing and using various formats such a XML, YAML, and
    JSON. In the next chapter, we're going to learn recipes about concurrency, and
    we're going to start by running multiple functions concurrently.
  prefs: []
  type: TYPE_NORMAL
