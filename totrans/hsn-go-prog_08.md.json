["```go\nimport (\n  \"fmt\"\n  \"time\"\n)\n\nfunc main() {\n\n  names := []string{\"tarik\", \"john\", \"michael\", \"jessica\"}\n\n  for _, name := range names {\n   time.Sleep(1 * time.Second)\n   fmt.Println(name)\n  }\nages := []int{1, 2, 3, 4, 5}\n  for _, age:= range ages {\n    time.Sleep(1 * time.Second)\n    fmt.Println(age)\n  }\n}\n```", "```go\npackage main\n\nimport (\n  \"fmt\"\n  \"time\"\n)\nfunc main() {\n\n  go func() {\n    names := []string{\"tarik\", \"john\", \"michael\", \"jessica\"}\n\n    for _, name := range names {\n      time.Sleep(1 * time.Second)\n      fmt.Println(name)\n    }\n  }()\n\n  go func(){\n    ages := []int{1, 2, 3, 4, 5}\n    for _, age:= range ages {\n      time.Sleep(1 * time.Second)\n      fmt.Println(age)\n    }\n  }()\n  time.Sleep(10*time.Second)\n}\n```", "```go\npackage main\n\nimport (\n    \"time\"\n  \"fmt\"\n)\n\nfunc main() {\n\n  nameChannel := make(chan string)\n\n  go func() {\n    names := []string{\"tarik\", \"john\", \"michael\", \"jessica\"}\n\n    for _, name := range names {\n    time.Sleep(1 * time.Second)\n      //fmt.Println(name)\n    nameChannel <- name\n    }\n  }()\n\n  for data:= range nameChannel{\n    fmt.Println(data)\n  }\n}\n```", "```go\npackage main\n\nimport (\n    \"time\"\n  \"fmt\"\n)\n\nfunc main() {\n\n  nameChannel := make(chan string)\n\n  go func() {\n    names := []string{\"tarik\", \"john\", \"michael\", \"jessica\"}\n\n    for _, name := range names {\n    time.Sleep(1 * time.Second)\n      //fmt.Println(name)\n    nameChannel <- name\n    }\n    close(nameChannel)\n    //nameChannel <- \"\"\n  }()\n\n  for data:= range nameChannel{\n    fmt.Println(data)\n\n    }\n\n  //<-nameChannel\n}\n```", "```go\npackage main\n\nimport (\n  \"fmt\"\n  \"time\"\n)\n\nfunc main() {\n  nameChannel := make(chan string)\n  go func() {\n    names := []string{\"tarik\", \"john\", \"michael\", \"jessica\"}\n    for _, name := range names {\n      time.Sleep(1 * time.Second)\n      fmt.Println(name)\n    }\n    nameChannel <- \"\"\n  }()\n  <-nameChannel\n}\n```", "```go\npackage main\nimport \"fmt\"\nfunc main(){\n  nameChannel := make(chan string)\n  done := make(chan string)\n  go func(){\n    names := []string {\"tarik\", \"michael\", \"gopi\", \"jessica\"}\n    for _, name := range names {\n      // doing some operation\n      fmt.Println(\"Processing the first stage of: \" + name)\n      nameChannel <- name\n    }\n    close(nameChannel)\n  }()\n  go func(){\n    for name := range nameChannel{\n      fmt.Println(\"Processing the second stage of: \" + name)\n    }\n    done <- \"\"\n  }()\n  <-done\n}\n```", "```go\npackage main\nimport \"fmt\"\nfunc main(){\n  nameChannel := make(chan string, 5)\n  done := make(chan string)\n  go func(){\n    names := []string {\"tarik\", \"michael\", \"gopi\", \"jessica\"}\n    for _, name := range names {\n      // doing some operation\n      fmt.Println(\"Processing the first stage of: \" + name)\n      nameChannel <- name\n    }\n    close(nameChannel)\n  }()\n  go func(){\n    for name := range nameChannel{\n      fmt.Println(\"Processing the second stage of: \" + name)\n    }\n    done <- \"\"\n  }()\n  <-done\n}\n```", "```go\npackage main\n\nimport (\n  \"fmt\"\n  )\n\nfunc main() {\n  for i := 0; i < 10; i++ {\n    go func(){\n      fmt.Println(\"Hello World\")\n    }()\n  }\n}\n```", "```go\npackage main\n\nimport (\n  \"fmt\"\n  \"time\"\n)\n\nfunc main() {\n  for i := 0; i < 10; i++ {\n   go func(){\n      fmt.Println(\"Hello World\")\n    }()\n  }\n\n  time.Sleep(10*time.Second)\n}\n\n```", "```go\npackage main\nimport (\n  \"fmt\"\n  \"sync\"\n)\n\nfunc main() {\n  var wg sync.WaitGroup\n  for i := 0; i < 10; i++ {\n    wg.Add(1)\n    go func(){\n      fmt.Println(\"Hello World\")\n      wg.Done()\n    }()\n  }\n  wg.Wait()\n}\n```", "```go\npackage main\nimport (\n  \"time\"\n  \"fmt\"\n)\nfunc main() {\n  channel1 := make(chan string)\n  channel2 := make(chan string)\n  go func(){\n    time.Sleep(1*time.Second)\n    channel1 <- \"Hello from channel1\"\n  }()\n  go func(){\n    time.Sleep(1 * time.Second)\n    channel2 <- \"Hello from channel2\"\n  }()\n  var result string\n  select {\n  case result = <-channel1:\n    fmt.Println(result)\n  case result = <-channel2:\n    fmt.Println(result)\n  }\n}\n```", "```go\npackage main\nimport (\n \"time\"\n \"fmt\"\n)\nfunc main() {\n channel1 := make(chan string)\n channel2 := make(chan string)\ngo func(){\n time.Sleep(1*time.Second)\n channel1 <- \"Hello from channel1\"\n }()\ngo func(){\n time.Sleep(1 * time.Second)\n channel2 <- \"Hello from channel2\"\n }()\nvar result string\n for {\n select {\n case result = <-channel1:\n fmt.Println(result)\n case result = <-channel2:\n fmt.Println(result)\n }\n case <-quit:\n return\n }\n}\n```"]