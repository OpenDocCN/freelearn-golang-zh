- en: Concurrency
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the most powerful things about Go is its concurrency with APIs. In this
    chapter, you will learn how to make use of concurrency constructs in the Go language.
    We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Running multiple functions concurrently
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing data between concurrently running functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Waiting for all concurrent functions to finish
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting the results of concurrent functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running multiple functions concurrently
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's begin with running multiple functions concurrently.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the code in the following block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see from the preceding code that there are two different lists; each
    list has items that have taken at least a second to finish, but for practice purposes,
    we''re not going to have any actual code but just `fmt.Println`. We have added
    `time.Sleep` for a second within each iteration. As seen in the preceding code,
    we first process the names and then the ages. One thing you can notice is that
    they''re not really dependent on each other; they''re actually two different works.
    So, let''s go ahead and run this and see what that it like on our console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/721b22d0-b2f7-4f4b-a57f-5a724a78e8cf.png)'
  prefs: []
  type: TYPE_IMG
- en: If you observe the process of the output, you will see that each line of output
    waits a second before delivering the next. You'll see that they're actually sequential
    pieces of code even though they do not depend on each other. We'll have to wait
    for the loop to finish before we can continue to the second `for` loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can make this process more scalable and efficient by using concurrent patterns.
    For this, we are going to use Go routines in Go. Go routines are more lightweight
    than threads, and, unlike threads, they give the control back voluntarily instead
    of preemptively. You''ll know more about what exactly I mean as we go further
    along. Check the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we have converted the code to independent pieces of functionality
    into Go routines, using the Go keyword and an anonymous function. We have done
    the same thing for ages as well. On running the code, you will obtain the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5e34080c-da13-44f9-8bae-8c9aefd3ebb9.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, instead of the output showing up sequentially as before, it
    shows up randomly. This means that both the loops are processed concurrently.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we remove `time.Sleep` (comment it out using `//`), we will not see any
    result on the console. This is because the main application is also run under
    a Go routine and that means we have three Go routines: the two that we typed and
    one that is the entire main application. The problem, as mentioned before, is
    that Go routines give control back to other Go routines voluntarily instead of
    preemptively. This means that when you use `time.Sleep`, the control will be given
    to other Go routines and our system will work properly.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, what happens if we use `1` second instead of `10` seconds, as seen in
    our last screenshot with code? You will not obtain any output. This is because
    `1` second is not enough for all the Go routines to finish the task. Once the
    main Go routine is done with its process, it shuts off the entire application
    and does not give enough time for other Go routines to complete. There is a way
    of handling this situation, where we have another construct called channels. So,
    for simplicity, we will remove the second Go routine and use the channels now.
    Check the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'When you run the preceding code, you will get an exception as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0fac42a1-dd9c-4212-b301-4fe2103f88c3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The reason for this exception is that when you''ve finished with a channel,
    you need to close it, otherwise the `for` loop will keep waiting and waiting.
    However, because your Go routine is finished with that channel, the loop will
    go into a deadlock and stop your application. So, one way to close a channel is
    by adding the following line of code that is highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'When a channel is closed, the loop will terminate. So, let''s go ahead and
    run this and check the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6f1d0e64-646b-4cb4-ae45-044c555a6f24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you see, we didn''t get any exception here, and everything looks fine. If
    you don''t care about the result, and if you want to use our first approach, you
    can use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'What we did is write everything to the console and, once the loop was finished,
    it set `nameChannel`. Moreover, in this scenario, we wait until we get some data
    from the name channel, and therefore we don''t terminate the application. Once
    we get some data from the name channel, we read it and we don''t really assign
    it to anything. When the `main` Go routine proceeds to the next line, there is
    no code there and hence the `main` function is exited. Therefore, our application
    is closed. You will obtain the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bc660bd9-45d1-4133-9054-387c8f3783c3.png)'
  prefs: []
  type: TYPE_IMG
- en: That's how you can use channels and functions to do concurrent operations. Before
    we conclude, let's reiterate one point about channels. If a channel is empty and
    you try to read it, it will block its Go routine. Once it is filled, we can read
    something from it; we read the data and continue. The reason why the `main` Go
    routine could not be exited is because we didn't send any value to it before,
    and this is much more effective than using a timer, as we did in our previous
    example.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we're going to see how to pass data between concurrently
    running functions.
  prefs: []
  type: TYPE_NORMAL
- en: Passing data between concurrently running functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to see how to pass data between Go routines. Imagine
    that we have two Go routines. The first Go routine performs some actions on the
    data and hands the data to another Go routine, which performs the second processing
    stage on that data. Now, we need a way to pass data between the first Go routine
    and the second one. As you can see, we may need some synchronization between the
    two Go routines because the second Go routine will have to wait until the second
    Go routine provides some data to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, we are going to use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you look at the code, you can see that we have used a channel again: `nameChannel`.
    Since we need to access `nameChannel` from the two Go routines, we have to declare
    it within the `main` function. In the first Go routine, we are going to pass some
    data to `nameChannel`, which is `name`. The `name` variable is the string array
    that has some data and comes from the first Go routine. In the second Go routine,
    we are going to use `nameChannel` and we are going to read it as it is filled.
    Moreover, we will have to use another Go routine just to signal to the main Go
    routine to indicate that all the Go routines are finished (`done := make(chan
    string)`). We also have to terminate the application to avoid any deadlocks, using
    the `close` function. When the channel is closed, the `for` loop will be terminated,
    and the Go routine will send some data into the `done` variable. Then, our main
    Go routine will read it and proceed to the next line, exit out of the `main` function,
    and our application will be done. This was the unbuffered channel; that is, you
    can send single data that has to be read and emptied before you send more data
    to it, otherwise it will be blocked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another way to do this is by using the buffered channel for improved performance.
    A slight modification in the preceding code will help us. We are going to add
    the integer `5`, which means you can send five pieces of data into `nameChannel`
    without waiting. Check the modified code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'So, for instance, it will send some data and it will not wait because there
    will still be four places left. Thus, it will go to the second iteration and it
    will send some data into it until the count goes to `5`. The good thing is that
    while we send data to the name channel, we also read data from it. The following
    will be the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/36126b7a-c835-4f54-94fe-13a491a92433.png)'
  prefs: []
  type: TYPE_IMG
- en: This is how you can pass data between multiple Go routines. In our next section,
    we are going to see how to wait for all the concurrent functions to complete.
  prefs: []
  type: TYPE_NORMAL
- en: Waiting for all concurrent functions to finish
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''re going to see how to wait for all concurrent functions
    to finish. Consider that we have a piece of code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Imagine we want to create multiple Go routines within a loop. In this case,
    let's say we want to have 10 Go routines plus the main Go routine, so 11 Go routines
    in total. If you run the code shown in the previous screenshot, you will find
    no output.
  prefs: []
  type: TYPE_NORMAL
- en: 'One way to wait for all these Go routines to complete so that we can show something
    to the console is to use `time.Sleep`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'On running the preceding code, you will obtain the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8297efd4-819f-4e5c-a987-9c80373f5477.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, you have obtained an output, but the problem with this approach is that
    you usually don''t know how much time is needed for all the Go routines to complete;
    therefore, you can''t really predict the time. So what we can do is use something
    that is provided by the Go library itself and that is `sync.WaitGroup`. As its
    name suggests, it''s basically a group of waits that you can use to wait for all
    the Go routines to finish. Check the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'So, here, for each iteration, we can add a new item to our wait group, which
    will be `1` in this case. So we''ll basically increment the number of waits in
    this `WaitGroup` by `1`. When a Go routine is done, it will be signaled using
    `wg.Done()`, and that will basically reduce the number of waits in the group by
    `1`. Moreover, `wg.Wait` will block our main Go routine until all of our Go routines
    are finished. On running the code, we will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aa31888d-52ee-44f6-91d9-ca023b519084.png)'
  prefs: []
  type: TYPE_IMG
- en: This is how you can simply wait for all the Go routines to complete in your
    application properly. In the next section, we're going to see how to select the
    results of concurrent functions as they are returned.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting the results of concurrent functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to see how to select the results of concurrent
    rank functions as they are returned. Consider that we have two Go routines in
    our `main` function that are basically setting their own channels: `channel1`
    and `channel2`. Let''s say that we want to read whatever comes first and then
    continue to the next line. For this, Go provides a built-in construct that is
    called `select`, and `select` basically waits for a channel to be filled and looks
    like a `switch` statement. So, let''s go ahead and see what that looks like now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: So, you just say `select` and you say, for instance, `channel1`,  and when `channel1`
    is ready, we will do something like create a `result` variable of type `string`.
    So, here, I'm going to assign the value of `channel1` to the `result` variable
    which will be printed to the console using `Println`. In the second case, if it
    is not `channel1` but `channel2` that is ready to be read, then we're going to
    read it instead into our `result` variable. The `select` statement will will not
    use both case here; so, for instance, if `channel1` and `channel2` are ready at
    the same time, then the `select` statement will just choose one of them randomly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since `channel1` was ready, we got `Hello` from `channel1` as the output. If
    we run the code again, we get `channel2`, as you can see from the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0b00762b-54ca-44c7-bc7a-1e2acbeeb215.png)'
  prefs: []
  type: TYPE_IMG
- en: Thus, you can easily see the randomness in the output provided. This is how
    it works.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, there may be some instances where you need to wait multiple times. In
    such cases, you can use loops:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Imagine that you're writing something that has to wait constantly for some incoming
    data, and as the data is coming in, you want to write it to the console. Or it
    may be that you want to do some operations on those. In this case, you can wait
    for them in an infinite loop. If you want to get out of this loop, you can read
    another channel, such as `quit`. If `quit` is already present, then you can just
    break out of this loop or if it's a function, you can use return and that will
    `return` out of the function as well.
  prefs: []
  type: TYPE_NORMAL
- en: So, this is how you can easily read data coming from multiple functions in Go.
    This concludes our concurrency chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to make use of concurrency constructs in the
    Go language. In the next chapter, we're going to learn system programming and
    we're going to start off with catching signals. You will also learn how to process
    command line arguments using Go.
  prefs: []
  type: TYPE_NORMAL
