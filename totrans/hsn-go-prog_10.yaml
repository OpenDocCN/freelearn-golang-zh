- en: Web Programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to see effective recipes that will involve interactions
    with the internet, such as downloading a web page, creating our own sample web
    servers, and handling HTTP requests. The following topics will be covered in this
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Downloading a web page from the internet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading files from the internet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a simple web server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a simple file server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading a web page from the internet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start with how to download a web page from the internet. We are going
    to start with defining our URL, which will be `golang.org`, and we're going to
    use the `net/http` package to get the content of this URL. This will return two
    things: `response` and `error`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you quickly look at the documentation here, you see that it issues a `get`
    request to specify the URL and it also returns some of the HTTP code based on
    the response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d909cb08-295c-439b-af79-f3866d0cb9ab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Check the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If an `err` happens, we''re going to call `panic`, and hence we type `panic
    (err)`, in which we provide `err` as its parameter. When everything is done, we
    will have to close the body. Let''s proceed and run this code in our terminal
    to get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8a36631-cf93-440a-8db9-b78e26e097f9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can, it is a byte array and we''re going to change it to `string`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If we now run the code, we obtain the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c6ab87be-0d78-4cac-8e38-616190c03278.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we have this HTML source code printing out to our console, and that is how
    you can simply download a web page from the internet using Go. In the next section,
    we're going to see how to download files from the internet.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading files from the internet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to see how to download files from the internet.
    For this, we are going to take an example of downloading an image. We are going
    to type the URL of the image, which the logo of Go. Check the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we've used the `http.Get()` method here. If our `err` is not
    `nil`, we've typed `panic(err)` and we are going to exit the `defer response.Body.Close()`
    function. Before our function exits, we're going to close the body of the `out`
    response. So, the first thing we have to do is create a new file so that we can
    copy the content of the image to the file. If the error is not `nil` again, we're
    going to panic and will be using `io.Copy()`. We're just going to write that image
    downloading to the console is successful.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s proceed and run the code to check the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/94973b74-b647-4d5c-86f1-caf0685edd5e.png)'
  prefs: []
  type: TYPE_IMG
- en: Voilà! The download is successful. That's how you can download images or any
    type of files from the internet using Golang. In our next section, we're going
    to see how to create a simple web server.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple web server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''re going to see how to create a simple web server in Go.
    It is really easy to create a simple web server in Go due to the built-in API.
    To begin, we are going to use the `net/http` package. A `net/http` package has
    the `HandleFunc()` method, which means that it will accept two things. The first
    is the path of the URL, and the second is the function that you want to handle
    incoming requests with. Check the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'As long as your method signature satisfies the `func sayHello(w http.ResponseWriter,
    r *http.Request){}` type of method, it will be accepted by our `HandleFunc()`.
    We will use `sayHello` as our function and it''ll return two things, firstly,
    `http.ResponseWriter`, while the second thing is the request itself as the pointer. Since
    it''s going to be a hello server, we''re just going to write some data back to
    our response and, for that, we will be using our response writer. Since we have
    to listen to a specific port, we are going to use `http.ListenAndServe.` Moreover,
    we have used `5050`; you can choose any port as long as it is available. We have
    also added `nil` to the function, which returns an error if something unexpected
    happens, and, if the error is not `nil`, we''re going to panic. So let''s go ahead
    and run the code and try to access the path using our browser. We will have to
    run our `main.go` file first and Allow it so that we can access it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eed6ce6f-ab3a-4e7e-a584-3c92e775e1f3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once this is done, we will have to open up a browser tab and try to access
    `http://localhost:5050/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc59fd06-831f-46e1-a02a-adf91ec78b5d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will clearly see `Hello, world`. Now, let''s do one more quick sample with
    a query string or URL parameters. We are going to modify the method so we can
    decide which planet we want to say "hello" to. Check the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We have this URL that has a query function. We are going to read the query
    string, also known as a URL parameter called `planet`, and we''ll assign its value
    to a variable. We have to stop our current server and run it again. Upon opening
    `http://localhost:5050/`, we don''t see the name of any planet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/461d784c-b1ac-4d40-8e1a-0664640afe10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Thus, you can change the URL to `http://localhost:5050/?planet=World` and try
    again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/67a486bf-1522-4966-b843-27ec0350b526.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Voilà! Now let''s try the same with the planet `Jupiter`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/27f1716d-9d3e-48be-b596-e38d5c0b9b67.png)'
  prefs: []
  type: TYPE_IMG
- en: This is how we can quickly create your own web server in Go.
  prefs: []
  type: TYPE_NORMAL
- en: In our next section, we're going to see how to create a simple file server.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple file server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''re going to see how to create a simple file server. The
    main idea behind a file server is to serve static files, such as images, or CSS
    files, or JavaScript files, and, in our code, we''re going to see how to do this.
    Check the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have used the HTTP handle, and this `Handle` is different
    from `handleFunc` and accepts a handler interface as a second parameter; the first
    parameter is `pattern`. We are going to use a special API called `FileServer`
    and it will work as a file server here; we will add a location (image directory,
    `./images`) in the server to serve the static files.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, what''s going to happen is that when the request hits the route path, a
    file server will serve the requests and it will give static files under the location `http.Dir("./images"`).
    We are going to use `http.ListenAndServe(":5050", nil)`, as in the previous section.
    Furthermore, as mentioned in the previous section, we are going to run the server,
    allow permissions, and type `localhost:5050` in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9c575d28-4f9a-40a2-9864-88e9dfd401fa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can see the list of our files on the location and, if we click gopher_aviator.png,
    it gives us the image from that location:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c22b7ec3-826f-4255-a72c-9fcfb0f2b318.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we go back and click the other one (gopher.png), it''ll display the following
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c3328254-7f79-4b7a-bcab-d50ddc07141b.png)'
  prefs: []
  type: TYPE_IMG
- en: Alternatively, you can comment out `http.Handle("/", http.FileServer(http.Dir("./images")))` from
    the preceding code and replace `nil` with the location. If you follow the same
    procedure, as we did previously, and check the browser, it will still give us
    those two images properly, and this is how you can create a simple file server
    in Go.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about downloading a web page from the internet,
    downloading files from the internet, creating a simple web server, and creating
    a simple file server. The next chapter will take you through recipes explaining
    how to read, update, delete, and create data on relational databases with Go.
  prefs: []
  type: TYPE_NORMAL
