- en: Relational Databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go can work with various relational databases, including SQL Server, MySQL,
    Postgres SQL, and SQLite. In this chapter, we are going to use SQLite. SQLite
    might be slightly more limited compared to other more advanced database engines,
    but for our examples it is pretty much sufficient. In this section, you will learn
    how to read, update, delete, and create data in relational databases with Go.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Reading data from databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inserting data into databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating data in databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting data from databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading data from databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s begin with learning how to read data from SQL databases. Before we begin,
    we will have to create a database called `personal.db`. We are going to use a
    DB browser for SQLite that allows us to create new SQLite databases, edit them,
    add new records, and so on. You can find more information about the tool and download
    it from [http://sqlitebrowser.org/](http://sqlitebrowser.org/). It is a free tool
    and it works with Windows, macOS, and Linux. Let''s begin with an example. Check
    out the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4804cbdd-9529-4acd-8415-238e5a1e039e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, we have just one table, called `profile`. Working on this table will
    be sufficient for us to learn how to interact with the SQLite database, and then
    you can use the same techniques to interact with MySQL or SQL Server. If you check
    the screenshot, you can see that we have three records and four columns: `ProfileId`,
    `FirstName`, `LastName`, and `Age`. The `FirstName` and `LastName` columns are
    a string, or text, the `Age` column is a number, and the `ProfileId` is our primary
    key; it is also an integer column. So, let''s go ahead and create our own struct
    and the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s go through the explanation of the code. We''ve used the struct
    type to map data that comes from the SQL database to our in-memory objects. We
    need to import two packages: the first one is the SQL database, and the second
    one is `go-sqlite3`. We''re going to do an empty or blank import, which will automatically
    remove the SQL database import, but that''s alright since we''re going to import
    it again later. The reason why we are doing a blank import is that if there''s
    initialization code in this package, it will still be executed. This package registers
    itself as the underlying SQL driver, so we will still be using the SQL database
    package as our API, but that API will be using the `go-sqlite3` package behind
    the scenes to interact with our database, and, as you will see, database interaction
    in Go is pretty straightforward. So, the first thing we''re going to do is open
    the database. When we use the SQL package, you''ll see that it automatically imports
    our SQL database.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Furthermore, we are going to use a SQLite driver, which is SQLite version 3,
    and we will also specify where our database is located. The data source name may
    change, based on what type of database you use; it might be a URL, but in our
    case, it''s a file, since SQLite works with data files. So, we will type `./personal.db`.
    We have also added the error check utility function so that we don''t have to
    keep checking for errors all the time. We can just say `checkError` and the error
    will be checked. We''re going to use a DB query to query our database and that
    returns two things: one of them is rows and the other one is an error. The database
    query basically accepts a SQL query here. We are also going to use a `for` loop,
    `rows.next`, to iterate each row and rows.scan to get the value out of each row.
    It is important to respect the order of your columns as they come from the profile
    database; if you need a different order, you can specify it at the `*` shown here:
    `"select * from Profile"`. I usually recommend to explicitly specify each of the
    rows instead of using a wildcard (`*`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will get the following output when you run this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/112ced21-a8bd-430d-ba41-14272b0e6d12.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we were able to capture our database records (`ProfileId`, `FirstName`,
    `LastName`, and `Age`) in the table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s quickly look at how we can carry out filtering. So, we''re going
    to be using the `where` clause, and, if you know SQL, the `where` clause is used
    for filtering. We are going to filter by `ProfileId`. Take a look at the signature
    of this method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f67969c6-7a82-4a01-8f9d-0c64c60dea4d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The second parameter in the signature is the arguments for the placeholders,
    and since it is a very attic function, you can provide as many arguments as possible
    as long as you have matching placeholders. We are going to add `2`, as you can
    see in the following code snippet; you can also use a variable name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s go ahead and run the modified code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'On running the preceding code, you''ll obtain the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a3411988-482a-453b-aa9b-b445f4cc9296.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So, we get our second record from the database. You can also do multiple `where`
    clauses, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You will obtain the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c4af8c54-aa5e-4c4d-80c3-1fd5ed25d560.png)'
  prefs: []
  type: TYPE_IMG
- en: Perfect! That is the record that we were expecting. That's how you can easily
    query a SQL database in Go.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we're going to see how to insert data into a SQLite database.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting data into databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''re going to see how to insert data into a database. We
    will be using the code that we developed in our previous section, and adding a
    new piece of code that will insert data into our `personal.db` database. We are
    going to add `statement` and `err`, and use `insert`Â statement to add names to
    our `Profile` table. We are going to specify which columns we want to insert the
    data into, but we are not going to specify `ProfileId` since it is the primary
    key of the table. We will type `FirstName`, `LastName`, and `Age`, and the values
    will just be placeholders. We will also use `statement.Exec` and provide the values
    for the placeholders, for example, `Jessica`, `McArthur`, and `30`. Here is the
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output for the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f0584f29-c29b-4bdc-9d43-c929eae10005.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, our ID is `5`, the first name is `Jessica`, the last name is
    `McArthur`, and the age is `30`. That's how you can simply insert data into a
    database using Go.
  prefs: []
  type: TYPE_NORMAL
- en: In our next section, we're going to see how to update existing data in a database.
  prefs: []
  type: TYPE_NORMAL
- en: Updating data in databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to see how to update existing data in a database.
    We're going to use the same code that we developed in the previous section, but
    we will be changing a few fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll use an `update` statement in SQL. So, the following fields will be changed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we update our profile record, we''re going to list all the records in
    our `profile` table. If you remember our previous section, the last record has
    the profile ID `5`, and we''re going to change that. The last line of the output
    in the previous section was `{5 Jessica McArthur 30}`, and we are now going to
    change the first name for our updated code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run the code, you''ll find the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b9727fa1-5b6d-4862-a433-6f60dd117e5a.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see that we've successfully changed the name `Jessica` to `Martha`.
    That's how you can simply do an update in Go.
  prefs: []
  type: TYPE_NORMAL
- en: In our next section, we're going to see how to delete data from a database.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting data from databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''re going to see how to delete data from a database. We''ll
    still use the old code that we developed in the previous section and make some
    minor changes to it. Check out the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4237cc24-17c1-4c5e-a800-341420149aca.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, to delete data, say row `3` in this case, you will have to make certain
    changes to the code. We will make minor modifications in the code with `statement`,
    `err`, and `statement.Exec`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, to achieve what we want, we are going to use the following modified code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that we''ve used `db.Prepareand`. We''ve provided the lead from
    `profile`, where `ProfileId` is a placeholder. We have also used `statement.Exec`
    and that will execute with the arguments; it''s important that the number of arguments
    matches the number of placeholders that you put in your code. Let''s run the code
    and check the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50f32c0e-51e7-4e18-bfba-d73f8d292e7a.png)'
  prefs: []
  type: TYPE_IMG
- en: Thus, if you compare the two outputs, you can see that we have successfully
    deleted the third entry and now we have only `4` entries, with the third entry
    having been deleted. That's how you can simply delete data from a database.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That pretty much concludes our book. You will have learned quite a lot about
    Go, and now you can effectively use this knowledge in various scenarios. You can
    now overcome the most common challenges faced by developers by following the concise
    and easy recipes included in this book. All the best!
  prefs: []
  type: TYPE_NORMAL
