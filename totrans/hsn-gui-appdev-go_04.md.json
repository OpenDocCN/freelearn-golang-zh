["```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello World!\")\n}\n```", "```go\npackage main\n\nimport \"testing\"\n\nfunc TestLogic(t *testing.T) {\n    if true == false {\n        t.Error(\"It's illogical\")\n    }\n}\n```", "```go\n// +build linux,!386\n\npackage myapp\n```", "```go\n// +build darwin,coolstuff\n\npackage myapp\n```", "```go\npackage main\n\n/*\n#include <stdio.h>\n#include <stdlib.h>\n\nvoid print_hello(const char *name) {\n    printf(\"Hello %s!\\n\", name);\n}\n*/\nimport \"C\"\nimport \"unsafe\"\n\nfunc main() {\n    cName := C.CString(\"World\")\n    C.print_hello(cName)\n    C.free(unsafe.Pointer(cName))\n}\n```", "```go\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc tick(message string) {\n    for i := 0; i < 5; i++ {\n        time.Sleep(10 * time.Millisecond)\n        fmt.Println(message)\n    }\n}\n\nfunc main() {\n    go tick(\"goroutine\")\n    tick(\"function\")\n}\n```", "```go\npackage main\n\nimport \"fmt\"\n\nfunc say(words string, to chan string) {\n    fmt.Println(\"Speaking:\", words)\n    to <- words\n}\n\nfunc talk(to chan string) {\n    say(\"Hello\", to)\n    say(\"Everyone\", to)\n    say(\"My name is...\", to)\n    fmt.Println(\"Never mind\")\n}\n\nfunc listen(to chan string) {\n    heard := <-to\n    fmt.Println(\"I heard:\", heard)}\n\nfunc main() {\n    chat := make(chan string)\n\n    go talk(chat)\n\n    listen(chat)\n    listen(chat)\n    fmt.Println(\"Bye\")\n}\n```", "```go\ngo func() {\n    for {\n        config := <-configManager\n        myWidget.applyConfiguration(config)}\n}()\n```", "```go\npackage main\n\nimport \"fmt\"\n\nfunc square(c, quit chan int) {\n    sq := 2\n    for {\n        select {\n        case c <- sq:\n            sq*=sq\n        case <-quit:\n            fmt.Println(\"quitting\")\n            return\n        }\n    }\n}\n\nfunc main() {\n    c := make(chan int)\n    quit := make(chan int)\n    go square(c, quit)\n\n    func() {\n        for i := 0; i < 5; i++ {\n            fmt.Println(\"Square\", <-c)\n        }\n        quit <- 1\n    }()\n}\n```", "```go\npackage main\n\nimport \"fmt\"\n\nfunc download(file string, c chan int) {\n    fmt.Println(\"Downloading\", file)\n\n    c <- 10\n    c <- 40\n    c <- 65\n    c <- 100\n\n    close(c)\n}\n\nfunc main() {\n    c := make(chan int)\n    go download(\"myfile.jpg\", c)\n\n    for i := range c {\n        fmt.Printf(\"Progress %d%%...\\n\", i)\n    }\n    fmt.Println(\"Download complete\")\n}\n```", "```go\nvar vals map[string]string\nvar lock sync.Mutex\n\nfunc Get(key string) string {\n    lock.Lock()\n    defer lock.Unlock()\n    return vals[key]\n}\n\nfunc Set(key, value string) {\n    lock.Lock()\n    vals[key] = value\n    lock.Unlock()\n}\n```", "```go\nfunc Download(url string, group *sync.WaitGroup) {\n    group.Add(1)\n    http.Get(url)\n    group.Done()\n}\n\nfunc main() {\n    ...\n    var group sync.WaitGroup\n    go download(\"http://example.com/image1.png\", group)\n    go download(\"http://example.com/image2.png\", group)\n    group.Wait()\n    fmt.Println(\"Done\")\n    ...\n}\n```", "```go\nvar instance *myStruct\nvar once sync.Once\n\nfunc GetInstance() *myStruct {\n    once.Do(func() {\n        instance = &myStruct{}\n    })\n\n    return instance\n}\n```", "```go\npackage main\n\nimport \"encoding/json\"\nimport \"fmt\"\nimport \"io/ioutil\"\nimport \"net/http\"\n\ntype Person struct {\n    Title     string `json:\"title,omitempty\"`\n    Firstname string `json:\"firstname\"`\n    Surname   string `json:\"surname\"`\n\n    Username string `json:\"username\"`\n    Password string `json:\"-\"`\n}\n\nfunc readFromURL(url string) ([]byte, error) {\n    var body []byte\n    resp, err := http.Get(url)\n    if err != nil {\n        return body, err\n    }\n\n    defer resp.Body.Close()\n    return ioutil.ReadAll(resp.Body)\n}\n\nfunc main() {\n    person := &Person{\n        \"\",\n        \"John\",\n        \"Doe\",\n        \"someuser\",\n        \"somepassword\",\n    }\n    fmt.Println(\"Struct:\", person)\n\n    data, _ := json.MarshalIndent(person, \"\", \"  \")\n    fmt.Println(\"JSON:\", string(data))\n\n    fmt.Println(\"Downloading...\")\n    data, _ = readFromURL(\"http://echo.jsontest.com/title/Sir/\" +\n        \"firstname/Anthony/surname/Other/username/anon123/\")\n    fmt.Println(\"Download:\", string(data))\n\n    person = &Person{}\n    json.Unmarshal(data, person)\n    fmt.Println(\"Decoded:\", person)\n}\n```"]