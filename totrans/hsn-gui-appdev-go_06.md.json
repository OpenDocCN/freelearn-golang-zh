["```go\npackage main\n\nimport (\n   \"github.com/lxn/walk\"\n   . \"github.com/lxn/walk/declarative\"\n)\n\nfunc main() {\n   MainWindow{\n      Title: \"Hello\",\n      Layout: VBox{},\n      Children: []Widget{\n         Label{Text: \"Hello World!\"},\n         PushButton{\n            Text: \"Quit\",\n            OnClicked: func() {\n               walk.App().Exit(0)\n            },\n         },\n      },\n   }.Run()\n}\n```", "```go\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<assembly  manifestVersion=\"1.0\" >\n   <assemblyIdentity version=\"1.0.0.0\" processorArchitecture=\"*\" name=\"HelloWorld\" type=\"win32\"/>\n   <dependency>\n      <dependentAssembly>\n         <assemblyIdentity type=\"win32\" name=\"Microsoft.Windows.Common-Controls\" version=\"6.0.0.0\" processorArchitecture=\"*\" publicKeyToken=\"6595b64144ccf1df\" language=\"*\"/>\n      </dependentAssembly>\n   </dependency>\n   <asmv3:application>\n      <asmv3:windowsSettings >\n         <dpiAware>true</dpiAware>\n      </asmv3:windowsSettings>\n   </asmv3:application>\n</assembly>\n```", "```go\npackage main\n\nimport (\n   \"log\"\n\n   \"github.com/lxn/walk\"\n)\n\nvar marginSize = 9\n\nfunc buildWindow() (*walk.MainWindow, error) {\n   win, err := walk.NewMainWindowWithName(\"Hello\")\n   if err != nil {\n      return nil, err\n   }\n   layout := walk.NewVBoxLayout()\n   layout.SetMargins(walk.Margins{marginSize, marginSize, marginSize, marginSize})\n   layout.SetSpacing(marginSize)\n   win.SetLayout(layout)\n\n   label, err := walk.NewLabel(win)\n   if err != nil {\n      return win, err\n   }\n   label.SetText(\"Hello World!\")\n\n   button, err := walk.NewPushButton(win)\n   if err != nil {\n      return win, err\n   }\n   button.SetText(\"Quit\")\n   button.Clicked().Attach(func() {\n      walk.App().Exit(0)\n   })\n\n   return win, nil\n}\n\nfunc main() {\n   win, err := buildWindow()\n   if err != nil {\n      log.Fatalln(err)\n   }\n\n   win.SetVisible(true)\n   win.Run()\n}\n```", "```go\npackage main\n\nimport (\n   \"fmt\"\n\n   \"github.com/lxn/walk\"\n   . \"github.com/lxn/walk/declarative\"\n)\n\nfunc main() {\n   var message *walk.Label\n   var userName *walk.TextEdit\n\n   MainWindow{\n      Title: \"Hello\",\n      Layout: VBox{},\n      Children: []Widget{\n         Label{\n            AssignTo: &message,\n            Text: \"Hello World!\",\n         },\n         TextEdit{\n            AssignTo: &userName,\n            OnTextChanged: func() {\n               welcome := fmt.Sprintf(\"Hello %s!\", userName.Text())\n               message.SetText(welcome)\n            },\n         },\n         PushButton{\n            Text: \"Quit\",\n            OnClicked: func() {\n               walk.App().Exit(0)\n            },\n         },\n      },\n   }.Run()\n}\n```", "```go\nMainWindow{\n   Title:   \"GoMail\",\n   Layout:  HBox{},\n   MinSize: Size{600, 400},\n   Children: []Widget{\n      HSplitter{\n         Children: []Widget{\n            TreeView{},\n            Composite{\n               Layout: Grid{Columns: 3},\n               Children: []Widget{\n                  Label{\n                     Text:       \"subject\",\n                     Font:       Font{Bold: true},\n                     ColumnSpan: 3,\n                  },\n                  Label{\n                     Text: \"From\",\n                     Font: Font{Bold: true},\n                  },\n                  Label{\n                     Text:       \"email\",\n                     ColumnSpan: 2,\n                  },\n                  Label{\n                     Text: \"To\",\n                     Font: Font{Bold: true},\n                  },\n                  Label{\n                     Text:       \"email\",\n                     ColumnSpan: 2,\n                  },\n                  Label{\n                     Text: \"Date\",\n                     Font: Font{Bold: true},\n                  },\n                  Label{\n                     Text:       \"email\",\n                     ColumnSpan: 2,\n                  },\n                  TextEdit{\n                     Text:       \"email content\",\n                     ReadOnly:   true,\n                     ColumnSpan: 3,\n                  },\n               },\n            },\n         },\n      },\n   },\n}\n```", "```go\nDialog{\n   Title:   \"New GoMail\",\n   Layout:  Grid{Columns: 3},\n   MinSize: Size{400, 320},\n   Children: []Widget{\n      Composite{\n         Layout: Grid{Columns: 3},\n         Children: []Widget{\n            LineEdit{\n               Text:       \"subject\",\n               Font:       Font{Bold: true},\n               ColumnSpan: 3,\n            },\n            Label{\n               Text: \"To\",\n               Font: Font{Bold: true},\n            },\n            LineEdit{\n               Text:       \"email\",\n               ColumnSpan: 2,\n            },\n            TextEdit{\n               Text:       \"email content\",\n               ColumnSpan: 3,\n            },\n            Composite{\n               Layout:     HBox{},\n               ColumnSpan: 3,\n               Children: []Widget{\n                  HSpacer{},\n                  PushButton{Text: \"Cancel\"},\n                  PushButton{Text: \"Send\"},\n               },\n            },\n   },\n}\n```", "```go\nMenuItems: []MenuItem{\n   Menu{\n      Text: \"File\",\n      Items: []MenuItem{\n         Action{\n            Text: \"New\",\n         },\n         Action{\n            Text: \"Reply\",\n         },\n         Action{\n            Text: \"Reply All\",\n         },\n         Separator{},\n         Action{\n            Text: \"Delete\",\n         },\n         Separator{},\n         Action{\n            Text: \"Quit\",\n         },\n      },\n   },\n   Menu{\n      Text:  \"Edit\",\n      Items: []MenuItem{\n         Action{\n            Text: \"Cut\",\n         },\n         Action{\n            Text: \"Copy\",\n         },\n         Action{\n            Text: \"Paste\",\n         },\n      },\n   },\n   Menu{\n      Text: \"Help\",\n   },\n},\n```", "```go\nToolBar: ToolBar{\n   Items: []MenuItem{\n      Action{\n         Text: \"New\",\n      },\n\n// full listing omitted but is available in the book's example code\n\n   },\n   ButtonStyle: ToolBarButtonTextOnly,\n},\n```", "```go\nOnTriggered: func() {\n   walk.App().Exit(0)\n},\n```", "```go\nAssignTo:  &window,\n```", "```go\nOnTriggered: func() {\n   NewCompose().Run(window)\n},\n```", "```go\nDefaultButton: &send,\nCancelButton:  &cancel,\n```", "```go\nOnClicked: func() {\n   dialog.Cancel()\n},\n```", "```go\ntype EmailMessage struct {\n   Subject, Content string\n   To, From         Email\n   Date             time.Time\n}\n```", "```go\ntype EmailClientModel struct {\n   Server *client.EmailServer\n\n   root walk.TreeItem\n\n   itemsResetPublisher  walk.TreeItemEventPublisher\n   itemChangedPublisher walk.TreeItemEventPublisher\n}\n\n// TreeModel methods omitted - see full code listing\n\nfunc (e *EmailClientModel) SetServer(s *client.EmailServer) {\n   e.Server = s\n\n   e.root = NewInboxList(s.ListMessages())\n   e.itemsResetPublisher.Publish(e.root)\n}\n\nfunc NewEmailClientModel() *EmailClientModel{\n   return &EmailClientModel{}\n}\n```", "```go\ntype EmailModel struct {\n   email  *client.EmailMessage\n   parent walk.TreeItem\n}\n\n// TreeItem functions omitted - see full code listing\n```", "```go\ntype InboxList struct {\n   emails []walk.TreeItem\n}\n\nfunc (i *InboxList) Text() string {\n   return \"Inbox\"\n}\n\nfunc NewInboxList(l []*client.EmailMessage) *InboxList {\n   list := &InboxList{}\n\n   for _, item := range l {\n      list.emails = append(list.emails, &EmailModel{item, list})\n   }\n\n   return list\n}\n```", "```go\nemailDetail *walk.DataBinder\n```", "```go\nDataBinder: DataBinder{\n   AssignTo: &emailDetail,\n   DataSource: model.Server.CurrentMessage(),\n},\n```", "```go\nText:       Bind(\"Subject\"),\n```", "```go\nText:       Bind(\"DateString\"),\n```", "```go\nfunc (g *GoMailUIBrowse) SetMessage(email *client.EmailMessage) {\n   g.emailDetail.SetDataSource(email)\n   g.emailDetail.Reset()\n}\n```", "```go\nemailList *walk.TreeView\n\nTreeView{\n   AssignTo: &g.emailList,\n   Model: model,\n   OnCurrentItemChanged: func() {\n      item := g.emailList.CurrentItem()\n\n      if email, ok := item.(*EmailModel); ok {\n         g.SetMessage(email.email)\n      }\n   },\n},\n```", "```go\nmodel := NewEmailClientModel()\nmodel.SetServer(client.NewTestServer())\n```", "```go\nfunc (g *GoMailUIBrowse) incomingEmail(email *client.EmailMessage, model *EmailClientModel) {\n   g.window.Synchronize(func() {\n      model.AddEmail(email)\n   })\n}\n```", "```go\nfunc (e *EmailClientModel) AddEmail(email *client.EmailMessage) {\n   e.root.Add(email)\n   e.itemsResetPublisher.Publish(e.root)\n}\n```", "```go\nfunc (i *InboxList) Add(email *client.EmailMessage) {\n   i.emails = append(i.emails, &EmailModel{email, i})\n}\n```", "```go\nserver := client.NewTestServer()\nmodel.SetServer(server)\n\ngo func() {\n   incoming := server.Incoming()\n   for email = range incoming {\n      g.incomingEmail(email, model)\n   }\n}()\n```", "```go\n// +build windows\n\npackage main\n\n...\n```", "```go\n// +build !windows\n\npackage main\n\nimport \"log\"\n\nfunc NewMailUIBrowse() {\n   log.Fatalln(\"GoMail with Walk only works on windows\")\n}\n```", "```go\npackage main\n\nfunc main() {\n   NewMailUIBrowse()\n}\n```"]