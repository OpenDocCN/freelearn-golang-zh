["```go\npackage main\n\nimport \"github.com/andlabs/ui\"\n\nfunc main() {\n        err := ui.Main(func() {\n                window := ui.NewWindow(\"Hello\", 100, 50, false)\n                window.SetMargined(true)\n                window.OnClosing(func(*ui.Window) bool {\n                        ui.Quit()\n                        return true\n                })\n\n                button := ui.NewButton(\"Quit\")\n                button.OnClicked(func(*ui.Button) {\n                        ui.Quit()\n                })\n                box := ui.NewVerticalBox()\n                box.Append(ui.NewLabel(\"Hello World!\"), false)\n                box.Append(button, false)\n\n                window.SetChild(box)\n                window.Show()\n        })\n        if err != nil {\n                panic(err)\n        }\n}\n```", "```go\n/*\nvoid onMenuNewClicked(uiMenuItem *item, uiWindow *w, void *data) {\n   void menuNewClicked(void);\n   menuNewClicked();\n}\n\nint onQuit(void *data) {\n   return 1;\n}\n\nvoid loadMenu() {\n   uiMenu *menu;\n   uiMenuItem *item;\n\n   menu = uiNewMenu(\"File\");\n   item = uiMenuAppendItem(menu, \"New\");\n   uiMenuItemOnClicked(item, onMenuNewClicked, NULL);\n   uiMenuAppendSeparator(menu);\n   item = uiMenuAppendQuitItem(menu);\n   uiOnShouldQuit(onQuit, NULL);\n\n   menu = uiNewMenu(\"Help\");\n   item = uiMenuAppendItem(menu, \"About\");\n}\n*/\nimport \"C\"\n```", "```go\nfunc (areaHandler) Draw(a *ui.Area, dp *ui.AreaDrawParams) {\n   p := ui.NewPath(ui.Winding)\n   p.NewFigure(10, 10)\n   p.LineTo(dp.ClipWidth - 10, 10)\n   p.LineTo(dp.ClipWidth - 10, dp.ClipHeight - 10)\n   p.LineTo(10, dp.ClipHeight - 10)\n   p.CloseFigure()\n   p.End()\n\n   dp.Context.Fill(p, &ui.Brush{Type:ui.Solid, R:.75, G:.25, B:0, A:1})\n   dp.Context.Stroke(p, &ui.Brush{Type:ui.Solid, R:.25, G:.25, B:.75, A:.5},\n      &ui.StrokeParams{Thickness: 4, Dashes: []float64{10, 6}, Cap:ui.RoundCap})\n   p.Free()\n}\n```", "```go\nfunc main() {\n   err := ui.Main(func() {\n      window := ui.NewWindow(\"Draw\", 200, 150, false)\n      window.SetMargined(false)\n      window.OnClosing(func(*ui.Window) bool {\n         ui.Quit()\n         return true\n      })\n\n      handler := new(areaHandler)\n      box := ui.NewVerticalBox()\n      box.Append(ui.NewArea(handler), true)\n\n      window.SetChild(box)\n      window.Show()\n   })\n   if err != nil {\n      panic(err)\n   }\n}\n```", "```go\nwindow := ui.NewWindow(\"GoMail\", 600, 400, false)\nwindow.SetMargined(true)\nwindow.OnClosing(func(*ui.Window) bool {\n   ui.Quit()\n   return true\n})\n\nlist := ui.NewVerticalBox()\nlist.Append(ui.NewLabel(\"email1\"), false)\nlist.Append(ui.NewLabel(\"email2\"), false)\ninbox := ui.NewGroup(\"Inbox\")\ninbox.SetChild(list)\n\nsubject := ui.NewLabel(\"subject\")\ncontent := ui.NewLabel(\"content\")\nlabels := ui.NewVerticalBox()\nlabels.Append(ui.NewLabel(\"From \"), false)\nlabels.Append(ui.NewLabel(\"To \"), false)\nlabels.Append(ui.NewLabel(\"Date \"), false)\n\nvalues := ui.NewVerticalBox()\nfrom := ui.NewLabel(\"email\")\nvalues.Append(from, false)\nto := ui.NewLabel(\"email\")\nvalues.Append(to, false)\ndate := ui.NewLabel(\"date\")\nvalues.Append(date, false)\n\nmeta := ui.NewHorizontalBox()\nmeta.SetPadded(true)\nmeta.Append(labels, false)\nmeta.Append(values, true)\n\ndetail := ui.NewVerticalBox()\ndetail.SetPadded(true)\ndetail.Append(subject, false)\ndetail.Append(meta, false)\ndetail.Append(ui.NewHorizontalSeparator(), false)\ndetail.Append(content, true)\n\ncontent := ui.NewHorizontalBox()\ncontent.SetPadded(true)\ncontent.Append(inbox, false)\ncontent.Append(ui.NewVerticalSeparator(), false)\ncontent.Append(detail, true)\n\nwindow.SetChild(content)\nwindow.Show()\n```", "```go\nwindow := ui.NewWindow(\"New GoMail\", 400, 320, false)\nwindow.SetMargined(true)\nwindow.OnClosing(func(*ui.Window) bool {\n   return true\n})\n\nsubject := ui.NewEntry()\nsubject.SetText(\"subject\")\n\ntoBox := ui.NewHorizontalBox()\ntoBox.setPadded(true)\ntoBox.Append(ui.NewLabel(\"To\"), false)\nto := ui.NewEntry()\nto.SetText(\"email\")\ntoBox.Append(to, true)\n\ncontent := ui.NewEntry()\ncontent.SetText(\"email content\")\n\nbuttonBox := ui.NewHorizontalBox()\nbuttonBox.SetPadded(true)\nbuttonBox.Append(ui.NewLabel(\"\"), true)\nbuttonBox.Append(ui.NewButton(\"Cancel\"), false)\nbuttonBox.Append(ui.NewButton(\"Send\"), false)\n\nlayout := ui.NewVerticalBox()\nlayout.SetPadded(true)\nlayout.Append(subject, false)\nlayout.Append(toBox, false)\nlayout.Append(content, true)\nlayout.Append(buttonBox, false)\n\nwindow.SetChild(layout)\nwindow.Show()\n```", "```go\ntoolbar := ui.NewHorizontalBox()\ntoolbar.Append(ui.NewButton(\"New\"), false)\ntoolbar.Append(ui.NewButton(\"Reply\"), false)\ntoolbar.Append(ui.NewButton(\"Reply All\"), false)\n\ntoolbar.Append(ui.NewLabel(\" \"), false)\ntoolbar.Append(ui.NewVerticalSeparator(), false)\ntoolbar.Append(ui.NewLabel(\" \"), false)\ntoolbar.Append(ui.NewButton(\"Delete\"), false)\ntoolbar.Append(ui.NewLabel(\" \"), false)\ntoolbar.Append(ui.NewVerticalSeparator(), false)\ntoolbar.Append(ui.NewLabel(\" \"), false)\n\ntoolbar.Append(ui.NewButton(\"Cut\"), false)\ntoolbar.Append(ui.NewButton(\"Copy\"), false)\ntoolbar.Append(ui.NewButton(\"Paste\"), false)\n```", "```go\nlayout := ui.NewVerticalBox()\nlayout.SetPadding(true)\nlayout.Append(buildToolbar(), false)\nlayout.Append(content, true)\n\nwindow.SetChild(layout)\n```", "```go\nfunc (m *mainUI) setEmail(e *client.EmailMessage) {\n   m.subject.SetText(e.Subject)\n   m.to.SetText(e.ToEmailString())\n   m.from.SetText(e.FromEmailString())\n   m.date.SetText(e.DateString())\n   m.content.SetText(e.Content)\n}\n```", "```go\nfunc (m *mainUI) listEmails(list []*client.EmailMessage) {\n   for _, email := range list {\n      item := ui.NewButton(email.Subject)\n      captured := email\n      item.OnClicked(func(*ui.Button) {\n         m.SetEmail(captured)\n      })\n      m.list.Append(item, false)\n   }\n}\n```", "```go\nfunc main() {\n   server := client.NewTestServer()\n   err := ui.Main(func() {\n      main := new(mainUI)\n      window := main.buildUI()\n\n      main.listEmails(server.ListMessages())\n      main.setEmail(server.CurrentMessage())\n      window.Show()\n   })\n   if err != nil {\n      panic(err)\n   }\n}\n```", "```go\ncompose := ui.NewButton(\"New\")\ncompose.OnClicked(func(*ui.Button) {\n   compose := &composeUI{}\n   compose.buildUI().Show()\n})\n```", "```go\nfunc (c *composeUI) createMessage() *client.EmailMessage {\n   email := &client.EmailMessage{}\n\n   email.Subject = c.subject.Text()\n   email.To = client.Email(c.to.Text())\n   email.Content = c.content.Text()\n   email.Date = time.Now()\n\n   return email\n}\n```", "```go\ncancel := ui.NewButton(\"Cancel\")\ncancel.OnClicked(func(*ui.Button) {\n   window.Hide()\n})\nbuttonBox.Append(cancel, false)\nsend := ui.NewButton(\"Send\")\nsend.OnClicked(func(*ui.Button) {\n   email := c.createMessage()\n   c.server.Send(email)\n\n   window.Hide()\n})\nbuttonBox.Append(send, false)\n```", "```go\nui.QueueMain(func () {\n   label.SetText(\"background\")\n})\n```", "```go\nfunc (m *mainUI) incomingEmail(email *client.EmailMessage) {\n   ui.QueueMain(func() {\n      m.appendEmail(email)\n   })\n}\n```", "```go\ngo func() {\n   incoming := server.Incoming()\n   for email := range incoming {\n      main.incomingEmail(email)\n   }\n}()\n```", "```go\nbutton := layoutQuit()\n```", "```go\n// +build !darwin\n\npackage main\n\nimport \"github.com/andlabs/ui\"\n\nfunc layoutQuit() ui.Control {\n   button := ui.NewButton(\"Exit\")\n   button.OnClicked(func(*ui.Button) \n   {\n      ui.Quit()\n   })\n\n   return button\n}\n```", "```go\npackage main\n\nimport \"github.com/andlabs/ui\"\n\nfunc layoutQuit() ui.Control {\n   button := ui.NewButton(\"Quit\")\n   button.OnClicked(func(*ui.Button) {\n      ui.Quit()\n   })\n\n   box := ui.NewHorizontalBox()\n   box.Append(ui.NewLabel(\"\"), true)\n   box.Append(button, false)\n\n   return box\n}\n```"]