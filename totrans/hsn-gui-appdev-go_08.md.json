["```go\npacman -S mingw-w64-x86_64-gtk2\n```", "```go\npackage main\n\nimport \"github.com/mattn/go-gtk/gtk\"\n\nfunc main() {\n   gtk.Init(nil)\n   window := gtk.NewWindow(gtk.WINDOW_TOPLEVEL)\n   window.SetTitle(\"Hello\")\n\n   quit := gtk.NewButton()\n   quit.SetLabel(\"Quit\")\n   quit.Clicked(func() {\n      gtk.MainQuit()\n   })\n\n   vbox := gtk.NewVBox(false, 3)\n   vbox.Add(gtk.NewLabel(\"Hello World!\"))\n   vbox.Add(quit)\n\n   window.Add(vbox)\n   window.SetBorderWidth(3)\n   window.ShowAll()\n   gtk.Main()\n}\n```", "```go\nwindow.Connect(\"destroy\", func() {\n   gtk.MainQuit()\n})\n```", "```go\nwindow.Connect(\"destroy\", gtk.MainQuit)\n```", "```go\nfunc (v *Button) Clicked(onclick interface{}, datas ...interface{}) int {\n   return v.Connect(\"clicked\", onclick, datas...)\n}\n```", "```go\nbutton := gtk.NewButton()\nbutton.SetLabel(label)\nbutton.Clicked(clicked, button)\n```", "```go\nfunc clicked(ctx *glib.CallbackContext) {\n   button := ctx.Data().(*gtk.Button)\n   log.Println(\"Button clicked was:\", button.GetLabel())\n}\n```", "```go\npackage main\n\nimport \"github.com/mattn/go-gtk/gtk\"\n\nconst padding = 3\n\nfunc main() {\n   gtk.Init(nil)\n   window := gtk.NewWindow(gtk.WINDOW_TOPLEVEL)\n   window.SetTitle(\"GoMail\")\n   window.Connect(\"destroy\", func() {\n      gtk.MainQuit()\n   })\n\n   list := gtk.NewTreeView()\n   list.AppendColumn(gtk.NewTreeViewColumnWithAttributes(\"Inbox\", gtk.NewCellRendererText(), \"text\", 0))\n   meta := gtk.NewHBox(false, padding)\n\n   labels := gtk.NewVBox(true, padding)\n   labels.Add(gtk.NewLabel(\"To\"))\n   labels.Add(gtk.NewLabel(\"From\"))\n   labels.Add(gtk.NewLabel(\"Date\"))\n   values := gtk.NewVBox(true, padding)\n   values.Add(gtk.NewLabel(\"email\"))\n   values.Add(gtk.NewLabel(\"email\"))\n   values.Add(gtk.NewLabel(\"date\"))\n   meta.Add(labels)\n   meta.Add(values)\n\n   content := gtk.NewTextView()\n   content.GetBuffer().SetText(\"email content\")\n   content.SetEditable(false)\n\n   detail := gtk.NewVBox(false, padding)\n   detail.PackStart(gtk.NewLabel(\"subject\"), false, true, 0)\n   detail.PackStart(meta, false, true, 0)\n   detail.Add(content)\n\n   split := gtk.NewHPaned()\n   split.Add1(list)\n   split.Add2(detail)\n\n   vbox := gtk.NewVBox(false, padding)\n   vbox.PackStart(buildMenu(), false, true, 0)\n   vbox.PackStart(buildToolbar(), false, true, 0)\n   vbox.Add(split)\n\n   window.Add(vbox)\n   window.SetBorderWidth(padding)\n   window.Resize(600, 400)\n   window.ShowAll()\n   gtk.Main()\n}\n```", "```go\n   model := gtk.NewListStore(gtk.TYPE_STRING)\n   list.SetModel(model)\n\n   var iter gtk.TreeIter\n   model.Append(&iter)\n   model.SetValue(&iter, 0, \"email1\")\n   model.Append(&iter)\n   model.SetValue(&iter, 0, \"email2\")\n```", "```go\n   toolbar := gtk.NewToolbar()\n   toolbar.SetStyle(gtk.TOOLBAR_BOTH)\n   item := gtk.NewToolButtonFromStock(gtk.STOCK_NEW)\n   item.OnClicked(showCompose)\n   toolbar.Add(item)\n```", "```go\nmenubar := gtk.NewMenuBar()\nfileMenu := gtk.NewMenuItemWithLabel(\"File\")\n\nmenu := gtk.NewMenu()\nitem := gtk.NewMenuItemWithLabel(\"New\")\nitem.Connect(\"activate\", showCompose)\nmenu.Append(item)\n\nfileMenu.SetSubmenu(menu)\nmenubar.Append(fileMenu)\n```", "```go\nfunc buildCompose() {\n   window := gtk.NewWindow(gtk.WINDOW_TOPLEVEL)\n   window.SetTitle(\"New GoMail\")\n   window.Connect(\"destroy\", func() {\n      window.Destroy()\n   })\n\n   vbox := gtk.NewVBox(false, padding)\n   subject := gtk.NewEntry()\n   subject.SetText(\"subject\")\n   vbox.PackStart(subject, false, true, 0)\n   toBox := gtk.NewHBox(false, padding)\n   toBox.PackStart(gtk.NewLabel(\"To\"), false, true, 0)\n   email := gtk.NewEntry()\n   email.SetText(\"email\")\n   toBox.Add(email)\n   vbox.PackStart(toBox, false, true, 0)\n\n   content := gtk.NewTextView()\n   content.GetBuffer().SetText(\"email content\")\n   content.SetEditable(true)\n   vbox.Add(content)\n\n   buttonBox := gtk.NewHBox(false, padding)\n   buttonBox.PackEnd(gtk.NewButtonWithLabel(\"Cancel\"), false, true, 0)\n   buttonBox.PackEnd(gtk.NewButtonWithLabel(\"Send\"), false, true, 0)\n   vbox.PackEnd(buttonBox, false, true, 0)\n\n   window.Add(vbox)\n   window.SetBorderWidth(padding)\n   window.Resize(400, 320)\n   window.ShowAll()\n}\n```", "```go\nfunc main() {\n   server := client.NewTestServer()\n   main := new(mainUI)\n   main.showMain(server)\n   main.setEmail(server.CurrentMessage())\n\n   gtk.Main()\n}\n```", "```go\nfunc (m *mainUI) setEmail(message *client.EmailMessage) {\n   m.subject.SetText(message.Subject)\n   m.to.SetText(message.ToEmailString())\n   m.from.SetText(message.FromEmailString())\n   m.date.SetText(message.DateString())\n\n   m.content.GetBuffer().SetText(message.Content)\n}\n```", "```go\nfunc (m *mainUI) prependEmail(message *client.EmailMessage) {\n   m.listModel.Prepend(&m.listIter)\n   m.listModel.SetValue(&m.listIter, 0, message.Subject)\n}\n```", "```go\nfunc (m *mainUI) Select(selection *gtk.TreeSelection, model *gtk.TreeModel, path *gtk.TreePath, selected bool) bool {\n   if selected { // already selected, just return\n      return true\n   }\n\n   row := path.GetIndices()[0]\n   email := m.server.ListMessages()[row]\n\n   m.setEmail(email)\n   return true\n}\n```", "```go\nvar selecter gtk.GtkTreeSelecter\nselecter = mainUI\nlist.GetSelection().SetSelectFunction(&selecter)\n```", "```go\nglib.ThreadInit(nil)\ngdk.ThreadsInit()\ngdk.ThreadsEnter()\ngtk.Init(nil)\n```", "```go\n   go func() {\n      for email := range server.Incoming() {   \ngdk.ThreadsEnter()\n         main.prependEmail(email)\n         gdk.ThreadsLeave()\n      }\n   }()\n```"]