["```go\npackage main\n\nimport (\n   \"os\"\n\n   \"github.com/therecipe/qt/widgets\"\n)\n\nfunc main() {\n   app := widgets.NewQApplication(len(os.Args), os.Args)\n\n   window := widgets.NewQMainWindow(nil, 0)\n   window.SetWindowTitle(\"Hello World\")\n\n   widget := widgets.NewQWidget(window, 0)\n   widget.SetLayout(widgets.NewQVBoxLayout())\n   window.SetCentralWidget(widget)\n\n   label := widgets.NewQLabel2(\"Hello World!\", window, 0)\n   widget.Layout().AddWidget(label)\n\n   button := widgets.NewQPushButton2(\"Quit\", window)\n   button.ConnectClicked(func(bool) {\n      app.QuitDefault()\n   })\n   widget.Layout().AddWidget(button)\n\n   window.Show()\n   widgets.QApplication_Exec()\n}\n```", "```go\ns.ConnectMySignal(\n   func(msg string) {\n      log.Println(\"Signalled message\", msg)\n   }\n)\n```", "```go\npackage main\n\nimport (\n   \"github.com/therecipe/qt/core\"\n   \"github.com/therecipe/qt/gui\"\n   \"github.com/therecipe/qt/widgets\"\n   \"os\"\n)\n\nfunc buildMenu() *widgets.QMenuBar {\n   menu := widgets.NewQMenuBar(nil)\n\n   file := widgets.NewQMenu2(\"File\", menu)\n   ...\n   menu.AddMenu(file)\n\n   ...\n\n   return menu\n}\n```", "```go\nfunc buildToolbar() *widgets.QToolBar {\n   toolbar := widgets.NewQToolBar(\"tools\", nil)\n   toolbar.SetToolButtonStyle(core.Qt__ToolButtonTextUnderIcon)\n   toolbar.AddAction2(gui.QIcon_FromTheme2(\"document-new\", nil), \"New\")\n\n   ...\n\n   return toolbar\n}\n```", "```go\nfunc main() {\n   widgets.NewQApplication(len(os.Args), os.Args)\n\n   window := widgets.NewQMainWindow(nil, 0)\n   window.SetWindowTitle(\"GoMail\")\n\n   widget := widgets.NewQWidget(window, 0)\n   widget.SetLayout(widgets.NewQVBoxLayout())\n   window.SetMinimumSize2(600, 400)\n   window.SetCentralWidget(widget)\n\n   window.SetMenuBar(buildMenu())\n   widget.Layout().AddWidget(buildToolbar())\n\n   list := widgets.NewQTreeView(window)\n   list.SetModel(core.NewQStringListModel2([]string{\"email1\", \"email2\"}, widget))\n\n   detail := widgets.NewQWidget(window, 0)\n   form := widgets.NewQFormLayout(detail)\n   detail.SetLayout(form)\n   form.AddRow5(widgets.NewQLabel2(\"subject\", detail, 0))\n   form.AddRow3(\"From\", widgets.NewQLabel2(\"email\", detail, 0))\n   form.AddRow3(\"To\", widgets.NewQLabel2(\"email\", detail, 0))\n   form.AddRow3(\"Date\", widgets.NewQLabel2(\"date\", detail, 0))\n   form.AddRow5(widgets.NewQLabel2(\"content\", detail, 0))\n\n   splitter := widgets.NewQSplitter(window)\n   splitter.AddWidget(list)\n   splitter.AddWidget(detail)\n   widget.Layout().AddWidget(splitter)\n\n   window.Show()\n   widgets.QApplication_Exec()\n}\n```", "```go\npackage main\n\nimport \"github.com/therecipe/qt/widgets\"\n\nfunc showCompose() {\n   dialog := widgets.NewQDialog(nil, 0)\n   dialog.SetModal(false)\n   dialog.SetWindowTitle(\"New GoMail\")\n\n   form := widgets.NewQFormLayout(dialog)\n   dialog.SetLayout(form)\n   dialog.SetMinimumSize2(400, 320)\n\n   form.AddRow5(widgets.NewQLineEdit2(\"subject\", dialog))\n   form.AddRow3(\"To\", widgets.NewQLineEdit2(\"email\", dialog))\n   form.AddRow5(widgets.NewQTextEdit2(\"content\", dialog))\n\n   buttons := widgets.NewQWidget(dialog, 0)\n   buttons.SetLayout(widgets.NewQHBoxLayout())\n   buttons.Layout().AddItem(widgets.NewQSpacerItem(0, 0, widgets.QSizePolicy__Expanding, 0))\n   buttons.Layout().AddWidget(widgets.NewQPushButton2(\"Cancel\", buttons))\n   send := widgets.NewQPushButton2(\"Send\", buttons)\n   send.SetDefault(true)\n   buttons.Layout().AddWidget(send)\n   form.AddRow5(buttons)\n\n   dialog.Show()\n}\n```", "```go\nfunc (m *mainUI) setMessage(message *client.EmailMessage) {\n   m.subject.SetText(message.Subject)\n   m.to.SetText(message.ToEmailString())\n   m.from.SetText(message.FromEmailString())\n   m.date.SetText(message.DateString())\n\n   m.content.SetText(message.Content)\n}\n```", "```go\nlist.ConnectSelectionChanged(func(selected *core.QItemSelection, _ *core.QItemSelection) {\n   if len(selected.Indexes()) == 0 {\n      return\n   }\n\n   row := selected.Indexes()[0].Row()\n   m.setMessage(m.server.ListMessages()[row])\n})\n```", "```go\nnew := file.AddAction(\"New\")\nnew.ConnectTriggered(func(_ bool){showCompose()})\n```", "```go\nsend.ConnectClicked(func(_ bool) {\n   email := c.createEmail()\n   c.server.Send(email)\n   c.dialog.Close()\n})\n```", "```go\ncore.QObject\n_ func(message *client.EmailMessage) `signal:\"newMail\"`\n```", "```go\nmain := NewMainUI(nil)\n```", "```go\nmain.ConnectNewMail(main.prependEmail)\ngo func() {\n   for email := range main.server.Incoming() {\n      main.NewMail(email)\n   }\n}()\n```"]