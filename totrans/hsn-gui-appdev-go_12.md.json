["```go\npackage main\n\nimport \"runtime\"\nimport \"github.com/go-gl/glfw/v3.2/glfw\"\nimport \"github.com/go-gl/gl/v3.2-core/gl\"\n\nfunc init() {\n   runtime.LockOSThread()\n}\n\nfunc main() {\n   glfw.Init()\n   win, _ := glfw.CreateWindow(120, 80, \"Hello World\", nil, nil)\n   win.MakeContextCurrent()\n   gl.Init()\n\n   ...\n}\n```", "```go\nimport \"github.com/golang-ui/nuklear/nk\"\n\nfunc main() {\n   ...\n\n   ctx := nk.NkPlatformInit(win, nk.PlatformInstallCallbacks)\n   atlas := nk.NewFontAtlas()\n   nk.NkFontStashBegin(&atlas)\n   font := nk.NkFontAtlasAddDefault(atlas, 14, nil)\n   nk.NkFontStashEnd()\n   nk.NkStyleSetFont(ctx, font.Handle())\n\n   ...\n}\n```", "```go\nimport \"time\"\n\nfunc main() {\n   ...\n\n   quit := make(chan struct{}, 1)\n   ticker := time.NewTicker(time.Second / 30)\n   for {\n      select {\n      case < -quit:\n         nk.NkPlatformShutdown()\n         glfw.Terminate()\n         ticker.Stop()\n         return\n      case<-ticker.C:\n         if win.ShouldClose() {\n            close(quit)\n            continue\n         }\n         glfw.PollEvents()\n         draw(win, ctx)\n      }\n   }\n}\n```", "```go\nconst pad = 8\n\nfunc draw(win *glfw.Window, ctx *nk.Context) {\n   // Define GUI\n   nk.NkPlatformNewFrame()\n   width, height := win.GetSize()\n   bounds := nk.NkRect(0, 0, float32(width), float32(height))\n   update := nk.NkBegin(ctx, \"\", bounds, nk.WindowNoScrollbar)\n\n   if update > 0 {\n      cellWidth := int32(width-pad*2)\n      cellHeight := float32(height-pad*2) / 2.0\n      nk.NkLayoutRowStatic(ctx, cellHeight, cellWidth, 1)\n      {\n         nk.NkLabel(ctx, \"Hello World!\", nk.TextCentered)\n      }\n      nk.NkLayoutRowStatic(ctx, cellHeight, cellWidth, 1)\n      {\n         if nk.NkButtonLabel(ctx, \"Quit\") > 0 {\n            win.SetShouldClose(true)\n         }\n      }\n   }\n   nk.NkEnd(ctx)\n\n   ...\n}\n```", "```go\nfunc draw(win *glfw.Window, ctx *nk.Context) {\n   ...\n\n   // Draw to viewport\n   gl.Viewport(0, 0, int32(width), int32(height))\n   gl.Clear(gl.COLOR_BUFFER_BIT)\n   gl.ClearColor(0x10, 0x10, 0x10, 0xff)\n   nk.NkPlatformRender(nk.AntiAliasingOn, 4096, 1024)\n   win.SwapBuffers()\n}\n```", "```go\n   glEnable(GL_TEXTURE_2D);\n   media.skin = image_load(\"../skins/gwen.png\");\n   media.check = nk_subimage_id(media.skin, 512,512, nk_rect(464,32,15,15));\n   media.check_cursor = nk_subimage_id(media.skin, 512,512, nk_rect(450,34,11,11));\n\n   ...\n```", "```go\n {struct nk_style_toggle *toggle;\n toggle = &ctx.style.checkbox;\n toggle->normal = nk_style_item_image(media.check);\n toggle->hover = nk_style_item_image(media.check);\n toggle->active = nk_style_item_image(media.check);\n toggle->cursor_normal = nk_style_item_image(media.check_cursor);\n toggle->cursor_hover = nk_style_item_image(media.check_cursor);\n toggle->text_normal = nk_rgb(95,95,95);\n toggle->text_hover = nk_rgb(95,95,95);\n toggle->text_active = nk_rgb(95,95,95);}\n```", "```go\nnk.NkPlatformRender(nk.AntiAliasingOn, 512 * 1024, 128 * 1024)\n```", "```go\nfunc draw(win *glfw.Window, ctx *nk.Context) {\n   nk.NkPlatformNewFrame()\n   width, height := win.GetSize()\n   bounds := nk.NkRect(0, 0, float32(width), float32(height))\n   update := nk.NkBegin(ctx, \"\", bounds, nk.WindowNoScrollbar)\n\n   if update > 0 {\n      drawLayout(win, ctx, height)\n   }\n   nk.NkEnd(ctx)\n\n   gl.Viewport(0, 0, int32(width), int32(height))\n   gl.Clear(gl.COLOR_BUFFER_BIT)\n   gl.ClearColor(0x10, 0x10, 0x10, 0xff)\n   nk.NkPlatformRender(nk.AntiAliasingOn, 512 * 1024, 128 * 1024)\n}\n```", "```go\nfunc drawLayout(win *glfw.Window, ctx *nk.Context, height int) {\n   toolbarHeight := float32(36)\n   nk.NkLayoutRowDynamic(ctx, toolbarHeight, 1)\n   nk.NkLabel(ctx, \"Toolbar\", nk.TextAlignLeft)\n\n   nk.NkLayoutRowTemplateBegin(ctx, float32(height)-toolbarHeight)\n   nk.NkLayoutRowTemplatePushStatic(ctx, 80)\n   nk.NkLayoutRowTemplatePushVariable(ctx, 320)\n   nk.NkLayoutRowTemplateEnd(ctx)\n\n   nk.NkGroupBegin(ctx, \"Inbox\", 1)\n   nk.NkLayoutRowDynamic(ctx,0, 1)\n   nk.NkLabel(ctx, \"Item1\", nk.TextAlignLeft)\n   nk.NkLabel(ctx, \"Item2\", nk.TextAlignLeft)\n   nk.NkLabel(ctx, \"Item3\", nk.TextAlignLeft)\n   nk.NkGroupEnd(ctx)\n\n   ...\n```", "```go\n   ...\n\n   nk.NkGroupBegin(ctx, \"Content\", 1)\n   nk.NkLayoutRowDynamic(ctx,0, 1)\n   nk.NkLabel(ctx, \"Subject\", nk.TextAlignLeft)\n   nk.NkLayoutRowTemplateBegin(ctx, 0)\n   nk.NkLayoutRowTemplatePushStatic(ctx, 50)\n   nk.NkLayoutRowTemplatePushVariable(ctx, 320)\n   nk.NkLayoutRowTemplateEnd(ctx)\n   nk.NkLabel(ctx, \"From\", nk.TextAlignRight)\n   nk.NkLabel(ctx, \"email\", nk.TextAlignLeft)\n   nk.NkLabel(ctx, \"To\", nk.TextAlignRight)\n   nk.NkLabel(ctx, \"email\", nk.TextAlignLeft)\n   nk.NkLabel(ctx, \"Date\", nk.TextAlignRight)\n   nk.NkLabel(ctx, \"date\", nk.TextAlignLeft)\n   nk.NkLayoutRowDynamic(ctx,0, 1)\n   nk.NkLabel(ctx, \"Content\", nk.TextAlignLeft)\n   nk.NkGroupEnd(ctx)\n}\n```", "```go\nvar composeSubject = make([]byte, 512, 512)\nvar composeEmail = make([]byte, 512, 512)\nvar composeContent = make([]byte, 4096, 4096)\n```", "```go\ncopy(composeSubject[:], \"subject\")\ncopy(composeEmail[:], \"email\")\ncopy(composeContent[:], \"content\")\n```", "```go\nfunc drawComposeLayout(ctx *nk.Context, height int) {\n   nk.NkLayoutRowDynamic(ctx,0, 1)\n   nk.NkEditStringZeroTerminated(ctx, nk.EditBox|nk.EditSelectable|nk.EditClipboard,\n      composeSubject, int32(len(composeSubject)), nil)\n   nk.NkLayoutRowTemplateBegin(ctx, 0)\n   nk.NkLayoutRowTemplatePushStatic(ctx, 25)\n   nk.NkLayoutRowTemplatePushVariable(ctx, 320)\n   nk.NkLayoutRowTemplateEnd(ctx)\n   nk.NkLabel(ctx, \"To\", nk.TextAlignRight)\n   nk.NkEditStringZeroTerminated(ctx, nk.EditBox|nk.EditSelectable|nk.EditClipboard,\n      composeEmail, int32(len(composeEmail)), nil)\n   nk.NkLayoutRowDynamic(ctx, float32(height-114), 1)\n   nk.NkEditStringZeroTerminated(ctx, nk.EditBox|nk.EditSelectable|nk.EditClipboard,\n      composeContent, int32(len(composeContent)), nil)\n\n   ...\n```", "```go\n   ...\n\n   nk.NkLayoutRowTemplateBegin(ctx, 0)\n   nk.NkLayoutRowTemplatePushVariable(ctx, 234)\n   nk.NkLayoutRowTemplatePushStatic(ctx, 64)\n   nk.NkLayoutRowTemplatePushStatic(ctx, 64)\n   nk.NkLayoutRowTemplateEnd(ctx)\n   nk.NkLabel(ctx, \"\", nk.TextAlignLeft)\n   nk.NkButtonLabel(ctx, \"Cancel\")\n   nk.NkButtonLabel(ctx, \"Send\")\n}\n```", "```go\n   nk.NkMenubarBegin(ctx)\n   nk.NkLayoutRowBegin(ctx, nk.LayoutStaticRow, 25, 3)\n   nk.NkLayoutRowPush(ctx, 45)\n   if nk.NkMenuBeginLabel(ctx, \"File\", nk.TextAlignLeft, nk.NkVec2(120, 200)) > 0 {\n      nk.NkLayoutRowDynamic(ctx, 25, 1)\n      nk.NkMenuItemLabel(ctx, \"New\", nk.TextAlignLeft)\n      if nk.NkMenuItemLabel(ctx, \"Quit\", nk.TextAlignLeft) > 0 {\n         win.SetShouldClose(true)\n      }\n\n      nk.NkMenuEnd(ctx)\n   }\n\n   ...\n```", "```go\n   ...\n\n   toolbarHeight := float32(24)\n   nk.NkLayoutRowStatic(ctx, toolbarHeight, 78, 7)\n   nk.NkButtonLabel(ctx, \"New\")\n   nk.NkButtonLabel(ctx, \"Reply\")\n   nk.NkButtonLabel(ctx, \"Reply All\")\n\n   nk.NkButtonLabel(ctx, \"Delete\")\n\n   nk.NkButtonLabel(ctx, \"Cut\")\n   nk.NkButtonLabel(ctx, \"Copy\")\n   nk.NkButtonLabel(ctx, \"Paste\")\n\n   ...\n```", "```go\nimport \"github.com/PacktPublishing/Hands-On-GUI-Application-Development-in-Go/client\"\n\nvar server = client.NewTestServer()\nvar current = server.CurrentMessage()\n```", "```go\nnk.NkGroupBegin(ctx, \"Inbox\", 1)\nnk.NkLayoutRowDynamic(ctx,0, 1)\nfor _, email := range server.ListMessages() {\n   nk.NkLabel(ctx, email.Subject, nk.TextAlignLeft)\n}\nnk.NkGroupEnd(ctx)\n```", "```go\n   nk.NkLabel(ctx, ui.current.Subject, nk.TextAlignLeft)\n   ...\n   nk.NkLabel(ctx, \"From\", nk.TextAlignRight)\n   nk.NkLabel(ctx, string(ui.current.From), nk.TextAlignLeft)\n   nk.NkLabel(ctx, \"To\", nk.TextAlignRight)\n   nk.NkLabel(ctx, string(ui.current.To), nk.TextAlignLeft)\n   nk.NkLabel(ctx, \"Date\", nk.TextAlignRight)\n   nk.NkLabel(ctx, ui.current.DateString(), nk.TextAlignLeft)\n   ...\n   nk.NkLabel(ctx, ui.current.Content, nk.TextAlignLeft)\n```", "```go\n   if nk.NkMenuItemLabel(ctx, \"Quit\", nk.TextAlignLeft) > 0 {\n      win.SetShouldClose(true)\n   }\n```", "```go\n   if nk.NkButtonLabel(ctx, \"New\") > 0 {\n      compose = newComposeUI(this)\n   }\n```", "```go\n   ...\n   nk.NkEnd(ctx)\n\n   if compose != nil {\n      drawCompose(ctx)\n   }\n\n   ...\n```", "```go\nfunc (ui *mainUI) drawCompose(ctx *nk.Context) {\n   bounds := nk.NkRect(20, 20, 400, 320)\n   update := nk.NkBegin(ctx, \"Compose\", bounds, nk.WindowNoScrollbar | nk.WindowBorder | nk.WindowTitle | nk.WindowMovable | nk.WindowMinimizable)\n\n   if update > 0 {\n      compose.drawLayout(ctx, 296)\n   }\n\n   nk.NkEnd(ctx)\n}\n```", "```go\n   for _, email := range ui.server.ListMessages() {\n      var selected int32\n      if email == ui.current {\n         selected = 1\n      }\n      if nk.NkSelectableLabel(ctx, email.Subject, nk.TextAlignLeft, &selected) > 0 {\n         ui.current = email\n      }\n   }\n```"]