["```go\npackage main\n\nimport \"fyne.io/fyne/app\"\nimport \"fyne.io/fyne/widget\"\n\nfunc main() {\n   app := app.New()\n\n   win := app.NewWindow(\"Hello World\")\n   win.SetContent(widget.NewVBox(\n      widget.NewLabel(\"Hello World!\"),\n      widget.NewButton(\"Quit\", func() {\n         app.Quit()\n      }),\n   ))\n\n   win.ShowAndRun()\n}\n```", "```go\nimport \"fyne.io/fyne/app\"\n\nfunc main() {\n   mailApp := app.New()\n   browse := mailApp.NewWindow(\"GoMail\")\n\n   ...\n}\n```", "```go\nimport \"fyne.io/fyne/widget\"\n\nfunc main() {\n   ...\n\n   toolbar := widget.NewToolbar()\n   list := widget.NewGroup(\"Inbox\",\n      widget.NewLabel(\"Item1\"),\n      widget.NewLabel(\"Item2\"),\n      widget.NewLabel(\"Item3\"),\n   )\n   content := widget.NewLabel(\"Content\")\n   subject := widget.NewLabel(\"subject\")\n   subject.TextStyle = fyne.TextStyle{Bold:true}\n\n   meta := widget.NewForm()\n   meta.Append(\"To\", widget.NewLabel(\"email\"))\n   meta.Append(\"From\", widget.NewLabel(\"email\"))\n   meta.Append(\"Date\", widget.NewLabel(\"date\"))\n\n   ...\n}\n```", "```go\nimport \"fyne.io/fyne\"\nimport \"fyne.io/fyne/layout\"\n\nfunc main() {\n   ...\n\n   box := widget.NewVBox(meta, content)\n   detail := fyne.NewContainerWithLayout(\n      layout.NewBorderLayout(subject, nil, box, nil),\n      subject, box)\n   container := fyne.NewContainerWithLayout(\n      layout.NewBorderLayout(toolbar, nil, list, nil),\n      toolbar, list, detail)\n\n   ...\n}\n```", "```go\n   ...\n\n   browse.SetContent(container)\n   browse.Resize(fyne.NewSize(600, 400))\n   browse.ShowAndRun()\n}\n```", "```go\nfunc ShowCompose(app fyne.App) {\n   compose := app.NewWindow(\"GoMail Compose\")\n\n   ...\n}\n```", "```go\nfunc ShowCompose(app fyne.App) {\n   ...\n\n   subject := widget.NewEntry()\n   subject.SetPlaceHolder(\"subject\")\n   toLabel := widget.NewLabel(\"To\")\n   to := widget.NewEntry()\n   to.SetPlaceHolder(\"email\")\n\n   message := widget.NewMultiLineEntry()\n   message.SetPlaceHolder(\"content\")\n\n   send := widget.NewButton(\"Send\", func() {})\n   send.Style = widget.PrimaryButton\n   buttons := widget.NewHBox(\n      layout.NewSpacer(),\n      widget.NewButton(\"Cancel\", func() {\n         compose.Close()\n      }),\n      send)\n\n   ...\n}\n```", "```go\nfunc ShowCompose(app fyne.App) {\n   ...\n\n   top := fyne.NewContainerWithLayout(\n      layout.NewBorderLayout(subject, nil, toLabel, nil),\n      subject, toLabel, to)\n\n   content := fyne.NewContainerWithLayout(\n      layout.NewBorderLayout(top, buttons, nil, nil),\n      top, message, buttons)\n\n   compose.SetContent(content)\n   compose.Resize(fyne.NewSize(400, 320))\n   compose.Show()\n}\n```", "```go\nfunc buildToolbar(app fyne.App) *widget.Toolbar {\n   return widget.NewToolbar(\n      widget.NewToolbarAction(theme.MailComposeIcon(), func() {\n         ShowCompose(app)\n      }),\n      widget.NewToolbarAction(theme.MailReplyIcon(), func() {\n      }),\n      widget.NewToolbarAction(theme.MailReplyAllIcon(), func() {\n      }),\n      widget.NewToolbarSeparator(),\n      widget.NewToolbarAction(theme.DeleteIcon(), func() {\n      }),\n      widget.NewToolbarAction(theme.CutIcon(), func() {\n      }),\n      widget.NewToolbarAction(theme.CopyIcon(), func() {\n      }),\n      widget.NewToolbarAction(theme.PasteIcon(), func() {\n      }),\n   )\n}\n```", "```go\n\nfunc setMessage(email *client.EmailMessage) {\n   subject.SetText(email.Subject)\n\n   to.SetText(email.ToEmailString())\n   from.SetText(email.FromEmailString())\n   date.SetText(email.DateString())\n\n   content.SetText(email.Content)\n}\n```", "```go\nfunc addEmail(email *client.EmailMessage) fyne.CanvasObject {\n   return widget.NewButton(email.Subject, func() {\n      setMessage(email)\n   })\n}\n```", "```go\nlist := widget.NewGroup(\"Inbox\")\nfor _, email := range server.ListMessages() {\n   list.Append(addEmail(email))\n}\n```", "```go\nsend := widget.NewButton(\"Send\", func() {\n   email := client.NewMessage(subject.Text, content.Text,\n      client.Email(to.Text), \"\", time.Now())\n   server.Send(email)\n   compose.Close()\n})\nsend.Style = widget.PrimaryButton\nbuttons := widget.NewHBox(\n   layout.NewSpacer(),\n   widget.NewButton(\"Cancel\", func() {\n      compose.Close()\n   }),\n   send)\n```", "```go\ngo func() {\n   for email := range server.Incoming() {\n      list.Prepend(addEmail(email))\n   }\n}()\n```", "```go\nimport (\n   \"fyne.io/fyne\"\n   \"fyne.io/fyne/app\"\n   \"fyne.io/fyne/canvas\"\n   \"fyne.io/fyne/layout\"\n   \"fyne.io/fyne/theme\"\n   \"fyne.io/fyne/widget\"\n)\n```", "```go\nfunc main() {\n   imageApp := app.New()\n   win := imageApp.NewWindow(\"GoImages\")\n\n   ...\n}\n```", "```go\nfunc main() {\n   ...\n\n   navBar := widget.NewToolbar(\n      widget.NewToolbarAction(theme.NavigateBackIcon(), func() {}),\n      widget.NewToolbarSpacer(),\n      widget.NewToolbarAction(theme.NavigateNextIcon(), func() {}))\n   fileList := widget.NewGroup(\"directory\",\n      widget.NewLabel(\"Image 1\"),\n      widget.NewLabel(\"Image 2\"),\n      widget.NewLabel(\"Image 3\"))\n   image := canvas.NewImageFromFile(\"shiny-hall.jpg\")\n\n   ...\n}\n```", "```go\nfunc main() {\n   ...\n\n   container := fyne.NewContainerWithLayout(\n      layout.NewBorderLayout(navBar, nil, fileList, nil),\n      navBar, fileList, image,\n   )\n\n   ...\n}\n```", "```go\nfunc main() {\n   ...\n\n   win.SetContent(container)\n   win.Resize(fyne.NewSize(640, 480))\n\n   win.ShowAndRun()\n}\n```", "```go\ntype toolbarLabel struct {\n}\n\nfunc (t *toolbarLabel) ToolbarObject() fyne.CanvasObject {\n   return widget.NewLabel(\"filename\")\n}\n```", "```go\nfunc previousImage() {}\n\nfunc nextImage() {}\n```", "```go\nnavBar := widget.NewToolbar(\n   widget.NewToolbarAction(theme.NavigateBackIcon(), previousImage),\n   widget.NewToolbarSpacer(),\n   &toolbarLabel{},\n   widget.NewToolbarSpacer(),\n   widget.NewToolbarAction(theme.NavigateNextIcon(), nextImage))\n```", "```go\nfileList := widget.NewGroup(\"directory\",\n   makeRow(\"shiny-hall.jpg\"),\n   makeRow(\"shiny-hall.jpg\"),\n   makeRow(\"shiny-hall.jpg\"))\n```", "```go\nfunc makeRow(text string, file string) fyne.CanvasObject {\n   preview := canvas.NewImageFromFile(file)\n   iconHeight := theme.IconInlineSize()\n   preview.SetMinSize(fyne.NewSize(int(float32(iconHeight)*1.5), iconHeight))\n\n   return widget.NewHBox(preview, widget.NewLabel(text))\n}\n```", "```go\nfunc checkerColor(x, y, _, _ int) color.Color {\n   xr := x/10\n   yr := y/10\n\n   if xr%2 == yr%2 {\n      return color.RGBA{0xc0, 0xc0, 0xc0, 0xff}\n   } else {\n      return color.RGBA{0x99, 0x99, 0x99, 0xff}\n   }\n}\n```", "```go\ncheckers := canvas.NewRasterWithPixels(checkerColor)\n```", "```go\nimage := canvas.NewImageFromFile(\"shiny-hall.jpg\")\nimage.FillMode = canvas.ImageFillContain\n```", "```go\ncontainer := fyne.NewContainerWithLayout(\n   layout.NewBorderLayout(navBar, nil, fileList, nil),\n   navBar, fileList, checkers, image,\n)\n```", "```go\nvar images []string\nvar index int\n\nvar image *canvas.Image\nvar label *widget.Label\n\nfunc previousImage() {\n   if index == 0 {\n      return\n   }\n\n   chooseImage(index-1)\n}\n\nfunc nextImage() {\n   if index == len(images)-1 {\n      return\n   }\n\n   chooseImage(index+1)\n}\n```", "```go\nfunc chooseImage(id int) {\n   path := images[id]\n   label.SetText(filepath.Base(path))\n   image.File = path\n   canvas.Refresh(image)\n   index = id\n}\n```", "```go\nfunc makeRow(id int, path string) fyne.CanvasObject {\n   filename := filepath.Base(path)\n   button := widget.NewButton(filename, func() {\n      chooseImage(id)\n   })\n\n   preview := canvas.NewImageFromFile(path)\n   iconHeight := button.MinSize().Height\n   preview.SetMinSize(fyne.NewSize(int(float32(iconHeight)*1.5),\n      iconHeight))\n\n   return fyne.NewContainerWithLayout(\n      layout.NewBorderLayout(nil, nil, preview, nil),\n      preview, button)\n}\n```", "```go\nfunc makeList(dir string) *widget.Group {\n   files := getImageList(dir)\n   group := widget.NewGroup(filepath.Base(dir))\n\n   for idx, name := range files {\n      path := filepath.Join(dir, name)\n      images = append(images, path)\n\n      group.Append(makeRow(idx, path))\n   }\n\n   return group\n}\n```", "```go\nfileList := makeList(dirpath)\n```", "```go\nfunc parseArgs() string {\n   dir, _ := os.Getwd()\n\n   flag.Usage = func() {\n      fmt.Println(\"goimages takes a single, optional, directory parameter\")\n   }\n   flag.Parse()\n\n   if len(flag.Args()) > 1 {\n      flag.Usage()\n      os.Exit(2)\n   } else if len(flag.Args()) == 1 {\n      dir = flag.Args()[0]\n\n      if _, err := ioutil.ReadDir(dir); os.IsNotExist(err) {\n         fmt.Println(\"Directory\", dir, \"does not exist or could not be read\")\n         os.Exit(1)\n      }\n   }\n\n   return dir\n}\n```", "```go\ntype asyncImage struct {\n   path   string\n   image  *canvas.Image\n   pixels image.Image\n}\n\nfunc (a *asyncImage) load() {\n   if a.path == \"\" {\n      return\n   }\n   reader, err := os.Open(a.path)\n   if err != nil {\n      log.Fatal(err)\n   }\n   defer reader.Close()\n\n   a.pixels, _, err = image.Decode(reader)\n   if err != nil {\n      log.Fatal(err)\n   }\n\n   canvas.Refresh(a.image)\n}\n\nfunc (a *asyncImage) loadPath(path string) {\n   a.path = path\n   go a.load()\n}\n```", "```go\n\nfunc (a *asyncImage) ColorModel() color.Model {\n   if a.pixels == nil {\n      return color.RGBAModel\n   }\n\n   return a.pixels.ColorModel()\n}\n\nfunc (a *asyncImage) Bounds() image.Rectangle {\n   if a.pixels == nil {\n      return image.ZR\n   }\n\n   return a.pixels.Bounds()\n}\n\nfunc (a *asyncImage) At(x, y int) color.Color {\n   if a.pixels == nil {\n      return color.Transparent\n   }\n\n   return a.pixels.At(x, y)\n}\n```", "```go\nfunc newAsyncImage(path string) *asyncImage {\n   async := &asyncImage{}\n   async.image = canvas.NewImageFromImage(async)\n   async.loadPath(path)\n\n   return async\n}\n```", "```go\nfunc chooseImage(id int) {\n   path := images[id]\n   label.SetText(filepath.Base(path))\n   async.loadPath(path)\n   index = id\n}\n```"]