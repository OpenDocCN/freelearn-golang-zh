["```go\npackage main\n\nimport (\n   \"testing\"\n\n   \"fyne.io/fyne/test\"\n\n   \"github.com/PacktPublishing/Hands-On-GUI-Application-Development-in-Go/client\"\n   \"github.com/stretchr/testify/assert\"\n)\n```", "```go\nfunc TestCompose_Send(t *testing.T) {\n   server := client.NewTestServer()\n   compose := newCompose(test.NewApp(), server)\n   ui := compose.loadUI()\n\n   pending := len(server.Outbox)\n   closed := false\n   ui.SetOnClosed(func() {\n      closed = true\n   })\n   address := \"test@example.com\"\n   test.Type(compose.to, address)\n\n   ...\n}\n```", "```go\nfunc TestCompose_Send(t *testing.T) {\n   ...\n\n   test.Tap(compose.send)\n   assert.True(t, closed)\n   assert.Equal(t, pending + 1, len(server.Outbox))\n\n   email := server.Outbox[len(server.Outbox)-1]\n   assert.Equal(t, address, email.ToEmailString())\n}\n```", "```go\ntype Storage interface {\n   Read(name string) string\n   Write(name, content string)\n}\n```", "```go\nfunc runApp(storage Storage) {\n   log.Println(\"Writing README.txt\")\n   storage.Write(\"README.txt\", \"overwrite\")\n\n   log.Println(\"Reading README.txt\")\n   log.Println(storage.Read(\"README.txt\"))\n}\n\nfunc main() {\n   runApp(NewPermanentStorage())\n}\n```", "```go\ntype testStorage struct {\n   items map[string]string\n}\n\nfunc (t *testStorage) Read(name string) string {\n   return t.items[name]\n}\n\nfunc (t *testStorage) Write(name, content string) {\n   t.items[name] = content\n}\n\nfunc newTestStorage() Storage {\n   store := &testStorage{}\n   store.items = make(map[string]string)\n   return store\n}\n```", "```go\nimport (\n   \"testing\"\n\n   \"github.com/stretchr/testify/assert\"\n)\n\nfunc TestMain_RunApp(t *testing.T) {\n   testStore := newTestStorage()\n   runApp(testStore)\n\n   newFile := testStore.Read(\"README.txt\")\n   assert.Equal(t, \"overwrite\", newFile)\n}\n```", "```go\npackage main\n\nimport (\n   \"log\"\n   \"os/exec\"\n)\n\nfunc notify(title, content string) {\n   cmd := exec.Command(\"osascript\", \"-e\", \"display notification \\\"\"+content+\n      \"\\\" with title \\\"\"+title+\"\\\"\")\n   err := cmd.Run()\n\n   if err != nil {\n      log.Printf(\"Error showing notification: %v\", err)\n   }\n}\n```", "```go\n// +build !darwin\n\npackage main\n\nimport \"log\"\n\nfunc notify(title, content string) {\n   log.Println(\"Notifications not supported\")\n}\n```", "```go\npackage main\n\nfunc main() {\n   notify(\"Email\", \"A new email arrived\")\n}\n```"]