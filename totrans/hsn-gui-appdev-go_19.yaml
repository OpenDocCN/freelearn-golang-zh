- en: Installation Details
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In preparation for running the code examples in this book, you will need to
    have both the Go compiler and a C compiler installed (to support Cgo). If either
    of these are not set up, this appendix will guide you through the installation.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a relatively new programming language, Go doesn't come pre-installed on many
    operating systems. This section steps through setting it up for any readers who
    haven't already done so.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Configuring a development environment for Windows can be complicated as there
    aren't many tools installed by default. Due to this, there are many options for
    setting up using external tools and packages (such as MSYS, MinGW, and Ubuntu
    Subsystem) but exploring these is out of the scope of this book. Thankfully, it's
    possible to start developing Go applications without the need for many additional
    development tools.
  prefs: []
  type: TYPE_NORMAL
- en: Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firstly, if you haven't already done so, you need to download and install Git.
    The download is available at [https://git-scm.com/download/win](https://git-scm.com/download/win),
    and it should start automatically when you visit that page. Run the file that's
    downloaded, and the setup will start (if a notice says this isn't verified then
    tap the Install Anyway button). The default options should work for most users—make
    sure that Use Git from the Windows Command Prompt is selected to avoid more work
    later on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once this is completed, open a Command Prompt window (search for `cmd` from
    the Start menu if you don''t have a shortcut) and type `git --version`—you should
    see something like the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4d1fd39f-a4a4-4519-a9df-d98d87365e9b.png)'
  prefs: []
  type: TYPE_IMG
- en: Testing Git is installed by checking the version
  prefs: []
  type: TYPE_NORMAL
- en: Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, you should install Go—that can be found at [https://golang.org/dl/](https://golang.org/dl/).
    On this page, choose the featured Microsoft Windows download (the name will end
    in `.msi`). As with the Git installation, you'll need to run the downloaded file
    and possibly confirm that you would like to continue installing an unverified
    program. Once again, the default values should be suitable—if you change any of
    the configuration, make sure to update the following lines appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once that installer has finished, return to your Command Prompt and type `go
    version`, which should output the version number and quit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1b596249-a041-4687-b221-73b9c57de843.png)'
  prefs: []
  type: TYPE_IMG
- en: Testing Go is installed by checking the version
  prefs: []
  type: TYPE_NORMAL
- en: Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If the preceding installations succeeded, then your environment should be correctly
    configured. If you made some changes during the installation, you may need to
    make some adjustments to your environment configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/14d3b3ab-60f7-44e1-b3bd-c786b96e6a9e.png)'
  prefs: []
  type: TYPE_IMG
- en: Checking that our %GOPATH%/bin appears in %PATH%
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding output, you can see that `Git\bin`, `Go\bin`, and `%GOPATH%`
    are included in your `%PATH%` environment for finding executable files. If this
    isn't the case, you may need to log out or reboot for the settings to take effect.
  prefs: []
  type: TYPE_NORMAL
- en: Apple macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many developer tools (including Git) are installed as part of the `XCode` package.
    If you haven't already installed Xcode for other development work, you can download
    it for free from the Mac App Store. Once installed, you should also set up the
    command-line tools—to do this go to the Xcode menu and select Preferences, then
    Downloads and Install Command Line Tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''re unsure about whether or not you''ve installed these already, then
    open the Terminal application and execute `xcode-select`—if installed, that will
    execute normally, and if not, you''ll be prompted to run the installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8d47d251-9ea6-4264-b7be-914242ce89eb.png)'
  prefs: []
  type: TYPE_IMG
- en: The installation dialog window if developer tools are not installed
  prefs: []
  type: TYPE_NORMAL
- en: In addition to these tools, you'll need to install Go. You can get the download
    package from [https://golang.org/dl/](https://golang.org/dl/)—tap the featured
    download link for Apple macOS and run the installer package that downloads. You
    may need to close any open Terminal windows to update your environment variables.
  prefs: []
  type: TYPE_NORMAL
- en: Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting up the prerequisite software on Linux should only require installing
    the correct packages for your distribution. The `git` package will provide the
    source control tools and the Go language should be in the `go` or `golang` package.
    Installing these will provide the necessary commands to run the examples in this
    book. You may need to add `~/go/bin` to your `PATH` environment variable to be
    able to run tools that Go installs later.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Cgo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use most of the libraries and functionality explored in this book, you'll
    also need to use Cgo (the built-in Go to C language bridge). Cgo requires the
    availability of a C compiler and some related tools depending on the operating
    system. This section outlines how to set them up.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For Cgo to function on Windows, you'll need to have the `gcc` (or compatible)
    compiler installed. If Visual Studio is already installed, then you may have a
    C compiler. For those who don't, this section steps through configuring a build
    environment on the command line. The easiest way to get up and running (in my
    experience) is to download and install MSYS2 (a software distribution) and build
    a platform for Windows. Using MSYS2, we can install the `mingw-w64` packages,
    which provide an updated distribution of the *gcc for Windows* project named **mingw**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the installer from [www.msys2.org/](http://www.msys2.org/)—choose
    either the 32 bit (i686) or 64 bit (x86_64) versions, depending on your computer
    architecture. Once downloaded, run this installer, which will download the basic
    packages to your computer, including the package manager (pacman). Once complete,
    it''ll launch the MSYS Command Prompt, which will be used for any projects requiring
    Cgo. You''ll need to update the `PATH` environment variable to use the existing
    Go and Git installations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b34100c7-321f-4b38-9d67-6de9eeae4aef.png)'
  prefs: []
  type: TYPE_IMG
- en: An MSYS console provides access to many additional packages
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have the command line set up, the package manager is used to install
    a C compiler and toolchain as well as `pkg-config` (which is used by Cgo to find
    packages):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once complete, you''ll be able to execute `gcc` and `pkg-config` from the MSYS
    command line—these tools are essential for a working Cgo setup. The following
    output may display an error, but it shows that the tools are found:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1ef8d36a-cb59-4686-83cc-46ee04506484.png)'
  prefs: []
  type: TYPE_IMG
- en: Pacman on MSYS provides the packages we need
  prefs: []
  type: TYPE_NORMAL
- en: Apple macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To enable Cgo support on macOS, you''ll need the development tools included
    with the Xcode distribution. If you''ve done development work on your Macintosh
    computer before, or if you followed the previous instructions for installing Git
    tools, you''ll already have this installed. If you''ve installed Xcode but not
    used the command-line tools before, then you can install these from a Terminal
    window with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cgo on Linux requires the presence of `gcc`, which is often installed by other
    packages in a Linux environment. If executing `gcc` from a Terminal yields an
    error such as `gcc: command not found`, then you''ll need to install the `gcc` package
    from your system''s package manager.'
  prefs: []
  type: TYPE_NORMAL
