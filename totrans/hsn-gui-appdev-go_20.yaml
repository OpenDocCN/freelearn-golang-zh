- en: Cross Compiler Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When building applications that need access to native APIs, we can use CGo.
    Although not much harder for regular development, this does make cross compiling
    much more complicated. For every target platform you want to build for, there
    must be a C compiler that knows how to create native binary files. This appendix
    outlines the steps required to set up cross compilation targets for each combination
    referenced earlier in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Most Go applications don't require this setup for cross compiling as the Go
    compiler is designed to build for all supported platforms. Additional steps, such
    as those following, will be required if the resulting applications (or the toolkits
    they use) are linking to operating system libraries through CGo.
  prefs: []
  type: TYPE_NORMAL
- en: Cross compiling for macOS with CGo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When cross compiling for macOS, it's necessary to install the SDK (Software
    Development Kit) from Apple as well as a suitable compiler. The instructions for
    Windows (using MSYS2—described in the previous [Appendix](a0605c81-4926-45d1-b90c-63047f1e2b76.xhtml), *Installation
    Details*) and Linux are almost identical; the main work is to install the macOS
    SDK.
  prefs: []
  type: TYPE_NORMAL
- en: To macOS from Linux or Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To prepare for cross compilation to Darwin, we must install the macOS SDK and
    a build toolchain that can use it. The easiest way to do this is with the *osxcross* project. This
    example shows how to download and install the SDK and tools to build for macOS
    without using a Macintosh computer. This illustration uses Linux but the process
    is the same for Windows developers using MSYS2 or Cygwin Command Prompts.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll be using `clang` rather than `gcc` as it''s more portable by design.
    For this process to work, you''ll need to have `clang`, `cmake`, and `libxml2-dev`
    installed using your package manager:'
  prefs: []
  type: TYPE_NORMAL
- en: On Linux use: `pacman -S clang cmake libxml2-dev` (or `apt-get` or `yum`, depending
    on your distribution)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On Windows use: `pacman -S mingw-w64-x86_64-clang mingw-w64-x86_64-cmake mingw-w64-x86_64-libxml2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we need to download the macOS SDK, which is bundled with Xcode. If you
    don't already have an Apple developer account, you'll need to sign up and agree
    to their terms and conditions. Using this account, log in to the download site
    at [https://developer.apple.com/download/more/?name=Xcode%207.3](https://developer.apple.com/download/more/?name=Xcode%207.3) and
    download `XCode.dmg` (7.3.1 is recommended for osxcross).
  prefs: []
  type: TYPE_NORMAL
- en: Then, we can install the osxcross tool—start by downloading it with `git clone
    https://github.com/tpoechtrager/osxcross.git` and then change into the downloaded
    directory. Using these tools, we extract the macOS SDK from the downloaded `Xcode.dmg`
    file using the package tool provided, `./tools/gen_sdk_package_darling_dmg.sh
    <path to Xcode.dmg>`. The resulting `MacOSX10.11.sdk.tar.xz` file should be copied
    into the `tarballs/` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we build the osxcross compiler extension by executing `./build.sh`.
    Following this, there should be a new directory named `target/bin/`, which you
    should add to your `PATH` environment variable. The compiler can now be used in
    CGo builds by setting the environment variable, `CC=o32-clang`. More details about
    this process and how to adapt it for other platforms are available on the osxcross
    project website at [https://github.com/tpoechtrager/osxcross](https://github.com/tpoechtrager/osxcross).
  prefs: []
  type: TYPE_NORMAL
- en: Cross compiling for Windows with CGo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building for Windows from another platform requires an installation of the `mingw`
    toolchain (similar to that which we installed on Windows to support CGo). This
    should be available in your package manager with a name similar to `mingw-w64-clang`
    or `w64-mingw`, but if not, you can install directly using the instructions at [https://github.com/tpoechtrager/wclang](https://github.com/tpoechtrager/wclang).
  prefs: []
  type: TYPE_NORMAL
- en: To Windows from macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To install the packages on macOS, it's recommended to use the Homebrew package
    manager. You probably already have this installed from earlier chapters in this
    book (for example, when setting up the GTK+ library), but if not, you can download
    it from [https://brew.sh](https://brew.sh). Once Homebrew is set up, the compiler
    package is installed using `brew install mingw-w64`.
  prefs: []
  type: TYPE_NORMAL
- en: Once installed, the compiler can be used with CGo by setting `CC=x86_64-w64-mingw32-gcc` (for
    the C toolchain) and `CXX=x86_64-w64-mingw32-g++` (for C++ requirements).
  prefs: []
  type: TYPE_NORMAL
- en: To Windows from Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing on Linux should just require finding the correct package in your
    distribution's listing. For example, for Debian or Ubuntu, you would execute `sudo
    apt-get install gcc-mingw-w64`.
  prefs: []
  type: TYPE_NORMAL
- en: Once installed, the compiler can be used with CGo by setting `CC=x86_64-w64-mingw32-gcc` (for
    the C toolchain) and `CXX=x86_64-w64-mingw32-g++` (for C++ requirements).
  prefs: []
  type: TYPE_NORMAL
- en: Cross compiling for Linux with CGo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To cross compile for Linux, we'll need a GCC or compatible compiler that can
    build Linux binary files. On macOS, the easiest platform to use is musl-cross
    (musl has many other advantages that you can read more about at [www.etalabs.net/compare_libcs.html](http://www.etalabs.net/compare_libcs.html)).
    On Windows, the `linux-gcc` package will be suitable. Let's work through the steps
    for each of these.
  prefs: []
  type: TYPE_NORMAL
- en: To Linux from macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install the dependencies for cross compiling for Linux, we''ll use the Homebrew
    package manager again—see the previous sections or [https://brew.sh/](https://brew.sh/)
    for installation instructions. Using Homebrew, we''ll install the appropriate
    packages by opening a Terminal and executing the following commands (the `HOMEBREW_BUILD_FROM_SOURCE` variable
    works around an issue with musl-cross depending on potentially old versions of
    libraries):'
  prefs: []
  type: TYPE_NORMAL
- en: '`export HOMEBREW_BUILD_FROM_SOURCE=1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`brew install FiloSottile/musl-cross/musl-cross`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the installation is complete (this may take some time as it's building
    a complete compiler toolchain from source), you should be able to build for Linux.
    To do so, you'll need to set the environment variables, `CC=x86_64-linux-musl-gcc` and `CXX=x86_64-linux-musl-g++`.
  prefs: []
  type: TYPE_NORMAL
- en: To Linux from Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using MSYS2 as earlier, we can install the `gcc` package to provide cross compilation
    for Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After the installation has completed, we can tell our Go compiler to use `gcc`
    by setting the environment variable `CC=gcc`. Compilation should now succeed following
    the instructions in your current example, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: It's possible, at this point, that you may see additional errors due to missing
    headers. To fix this, you'll need to search for, and install, the required libraries.
    If, for example, your error stated that SDL couldn't be found then you would use
    `pacman -Ss sdl` to search for the right package to install. If you can't find
    an appropriate package, you may need to install Cygwin [www.cygwin.com/](https://www.cygwin.com/)
    (as it has a larger package library) or Windows subsystem for Linux [docs.microsoft.com/en-us/windows/wsl/](https://docs.microsoft.com/en-us/windows/wsl/)
    (as that brings a full Linux distribution to your Windows desktop).
  prefs: []
  type: TYPE_NORMAL
