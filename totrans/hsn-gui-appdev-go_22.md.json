["```go\nfunc setupService() *gmail.Service {\n   b, err := ioutil.ReadFile(\"credentials.json\")\n   if err != nil {\n      log.Fatalf(\"Unable to read client secret file: %v\", err)\n   }\n\n   config, err := google.ConfigFromJSON(b, gmail.GmailReadonlyScope,\n      gmail.GmailComposeScope)\n   if err != nil {\n      log.Fatalf(\"Unable to parse client secret file to config: %v\", err)\n   }\n   client := getClient(config)\n\n   srv, err := gmail.New(client)\n   if err != nil {\n      log.Fatalf(\"Unable to retrieve Gmail client: %v\", err)\n   }\n\n   return srv\n}\n```", "```go\nfunc downloadMessages(srv *gmail.Service) {\n   req := srv.Users.Messages.List(user)\n   req.LabelIds(\"INBOX\")\n   resp, err := req.Do()\n   if err != nil {\n      log.Fatalf(\"Unable to retrieve Inbox items: %v\", err)\n   }\n\n   var emails []*EmailMessage\n   for _, message := range resp.Messages {\n      email := downloadMessage(srv, message)\n      emails = append(emails, email)\n   }\n}\n```", "```go\nfunc downloadMessage(srv *gmail.Service, message *gmail.Message) *EmailMessage {\n   mail, err := srv.Users.Messages.Get(user, message.Id).Do()\n   if err != nil {\n      log.Fatalf(\"Unable to retrieve message payload: %v\", err)\n   }\n\n   var subject string\n   var to, from Email\n   var date time.Time\n\n   content := decodeBody(mail.Payload)\n   for _, header := range mail.Payload.Headers {\n      switch header.Name {\n      case \"Subject\":\n         subject = header.Value\n      case \"To\":\n         to = Email(header.Value)\n      case \"From\":\n         from = Email(header.Value)\n      case \"Date\":\n         value := strings.Replace(header.Value, \"(UTC)\", \"\", -1)\n         date, err = time.Parse(\"Mon, _2 Jan 2006 15:04:05 -0700\",\n            strings.TrimSpace(value))\n         if err != nil {\n            log.Println(\"Error: Could not parse date\", value)\n            date = time.Now()\n         } else {\n            log.Println(\"date\", header.Value)\n         }\n      }\n   }\n\n   return NewMessage(subject, content, to, from, date)\n}\n```", "```go\nfunc decodeBody(payload *gmail.MessagePart) string {\n   data := payload.Body.Data\n   if data == \"\" {\n      data = payload.Parts[0].Body.Data\n   }\n   content, err := base64.StdEncoding.DecodeString(data)\n   if err != nil {\n      fmt.Println(\"Failed to decode body\", err)\n   }\n\n   return string(content)\n}\n```", "```go\nfunc (g *gMailServer) Send(email *EmailMessage) {\n   email.From = \"YOUR EMAIL ADDRESS\"\n   email.Date = time.Now()\n\n   data := email.ToGMailEncoding()\n   msg := &gmail.Message{Raw:data}\n\n   srv.Users.Messages.Send(user, msg).Do()\n}\n```", "```go\ng.history = uint64(math.Max(float64(g.history), float64(mail.HistoryId)))\n```", "```go\nfunc (g *gMailServer) downloadNewMessages(srv *gmail.Service) []*EmailMessage{\n   req := srv.Users.History.List(g.user)\n   req.StartHistoryId(g.history)\n   req.LabelId(\"INBOX\")\n   resp, err := req.Do()\n   if err != nil {\n      log.Fatalf(\"Unable to retrieve Inbox items: %v\", err)\n   }\n\n   var emails []*EmailMessage\n   for _, history := range resp.History {\n      for _, message := range history.Messages {\n         email := downloadMessage(srv, message)\n         emails = append(emails, email)\n      }\n   }\n\n   return emails\n}\n```", "```go\nfunc (g *gMailServer) Incoming() chan *EmailMessage {\n   in := make(chan *EmailMessage)\n\n   go func() {\n      for {\n         time.Sleep(10 * time.Second)\n\n         for _, email := range downloadNewMessages(srv) {\n            g.emails = append([]*EmailMessage{email}, g.emails...)\n            in <- email\n         }\n      }\n   }()\n\n   return in\n}\n```"]