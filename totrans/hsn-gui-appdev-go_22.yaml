- en: Connecting GoMail to a Real Email Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In many chapters of this book, we've explored ways of building a Go-based email
    application called **GoMail**. All of these examples have used a dummy email server—some
    code in the `client` package, which allows us to build the GUI portions of a mail
    client without needing to manage server communication. In this final appendix,
    we step through adding code to connect to a real email server.
  prefs: []
  type: TYPE_NORMAL
- en: Building on the exploration in [Chapter 12](7d70ada3-8bc9-4c54-b15d-8707e43fc0ce.xhtml), *Concurrency,
    Networking, and Cloud Services* (particularly the authentication—*OAuth 2.0* example),
    we'll use the Gmail public API and the built-in capabilities of the Go language
    to bring this together.
  prefs: []
  type: TYPE_NORMAL
- en: Download Gmail credentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 12](https://cdp.packtpub.com/hands_on_gui_application_development_in_go/wp-admin/post.php?post=709&action=edit#post_35), *Concurrency,
    Networking, and Cloud Services*, we wrote the OAuth2 handlers and Gmail integration
    using only the standard library. For this final code exploration, we'll use the
    helpful library that Google has created for interacting with Gmail servers. To
    use this library, we need the client credentials in a different format (`credentials.json`).
    To access this, log in to your Google account and go to the Go quickstart page
    at [https://developers.google.com/gmail/api/quickstart/go](https://developers.google.com/gmail/api/quickstart/go).
    Once here, you'll need to click on ENABLE THE GMAIL API and then DOWNLOAD CLIENT
    CONFIGURATION. This will download the `credentials.json` file that we'll need
    to initialize the library in the next section, *Creating server provider*.
  prefs: []
  type: TYPE_NORMAL
- en: Once you've downloaded the credentials file, you'll need to install the two
    required libraries using `go get -u google.golang.org/api/gmail/v1` and `go get
    -u golang.org/x/oauth2/google`. You're then ready to add the code to connect to
    Gmail and access your emails.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a server provider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following code outlines the contents of the `gmail.go` file that's available
    in the `client` package of the repository for this book. If you want to jump straight
    to trying out this functionality, then simply copy your `credentials.json` file
    to the current directory and skip to the next section, *Update an example to use
    Gmail*.
  prefs: []
  type: TYPE_NORMAL
- en: We start by adding the necessary OAuth2 setup and token storage by copying the
    `getClient()`, `getTokenFromWeb()`, `tokenFromFile()`, and `saveToken()` functions
    from Google's Gmail quickstart Go file at [github.com/gsuitedevs/go-samples/blob/master/gmail/quickstart/quickstart.go](https://github.com/gsuitedevs/go-samples/blob/master/gmail/quickstart/quickstart.go).
    These are very similar to the OAuth2 code that was created before but works better
    with the Google libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading inbox messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we need to set up the client from the credentials file that has been
    saved (in the current directory). We add a new function to parse the data, set
    up the authentication, and configure `*gmail.Service` using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The service returned from this function will be used for each subsequent call
    to the Gmail API as it contains the authentication configuration and credentials.
    Next, we need to prepare the email list by downloading all of the messages in
    the user''s inbox. The `INBOX` LabelID is used to filter messages that haven''t
    been archived. This function requests the message list and iterates through the
    metadata to initiate the full download of each message. For a full implementation,
    we would need to add paging support (the response contains `nextPageToken`, which
    indicates when more data is available), but this example will handle up to 100
    messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To download each individual message, we need to implement the `downloadMessage()`
    function referenced previously. For the specified message, we download the full
    content using the Gmail Go API. From the resulting data, we extract the information
    we need from the message headers. As well as parsing the `Date` header, we need
    to decode the message body, which is in a serialized, Base64 encoded format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `decodeBody()` function is as shown in the following. For plain text emails,
    the content is in the `Body.Data` field. For multi-part messages (where the body
    is empty), we access the first of the multiple parts and decode that instead.
    Decoding the Base64 content is handled by the standard library decoder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The final step in preparing this code is to complete the `EmailServer` interface
    methods. The `ListMessages()` function will return the result of `downloadMessages()`,
    and we can set up `CurrentMessage()` to return the email at the top of the list.
    Full implementation is in this book's code repository.
  prefs: []
  type: TYPE_NORMAL
- en: Sending messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To send a message, we have to package up the data in a raw format to send through
    the API. We''ll re-use the `ToGMailEncoding()` function from the `Post` example
    in [Chapter 12](7d70ada3-8bc9-4c54-b15d-8707e43fc0ce.xhtml), *Concurrency, Networking,
    and Cloud Services*. Before encoding the email, we set an appropriate "From" email address
    (be sure to use the email address of the account you are signed in with or a registered
    alias) and the current date for the time of sending. After encoding, we set the
    data to the `Raw` field of a `gmail.Message` type and pass it to the Gmail `Send()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This minimal code will be enough to implement sending a message. All of the
    hard work has been done by the earlier setup code—which provided the `srv` object.
  prefs: []
  type: TYPE_NORMAL
- en: Listening for new messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Although Google provides the ability to use push messaging, the setup is very
    complicated—so instead, we''ll poll for new messages. Every 10 seconds, we should
    download any new messages that have arrived. To do this, we can use the history
    API, which returns any messages that appeared after a specific point in history
    (set using `StartHistoryId()`). `HistoryId` is a chronological number that marks
    the order that messages arrived in. Before we can use the history API, we need
    to have a valid `HistoryId`—we can do this by adding the following line to the `downloadMessage()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have a point in history to query from, we need a new function that
    can download any messages since this point in time. The following code is similar
    to `downloadMessages()` in the preceding code but will only download new messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To complete the functionality, we update our `Incoming()` method so that it
    sets up the channel and starts a thread to poll for new messages. Every `10` seconds,
    we''ll download any new messages that have appeared and pass each to the `in`
    channel that was created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The complete code can be found in the `client` package of this book's code repository.
    Let's look at how to use this new email server in our previous examples.
  prefs: []
  type: TYPE_NORMAL
- en: Updating an example to use Gmail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In any one of the GoMail example apps, you'll need to edit the main server setup
    in `main.go`. Replace the server initiation by changing `client.NewTestServer()`
    to `client.NewGMailServer()`. With the `credentials.json` file in place, running
    this new code will obtain a connection to your Gmail account for reading and sending
    emails. Note that, for this example, you'll need to run from the command line
    and follow the OAuth2 setup steps. To make a better user experience, you can provide
    a more sophisticated implementation of the `getTokenFromWeb()` function.
  prefs: []
  type: TYPE_NORMAL
