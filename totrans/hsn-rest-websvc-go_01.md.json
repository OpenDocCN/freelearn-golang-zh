["```go\nPOST /Books HTTP/1.1\nHost: www.example.org\nContent-Type: application/soap+xml; charset=utf-8\nContent-Length: 299\nSOAPAction: \"https://www.w3.org/2003/05/soap-envelope\"\n\n<?xml version=\"1.0\"?>\n<soap:Envelope  >\n  <soap:Header>\n  </soap:Header>\n  <soap:Body>\n    <m:GetBook>\n      <m:BookName>Alice in the wonderland</m:BookName>\n    </m:GetBook>\n  </soap:Body>\n</soap:Envelope>\n```", "```go\n/v1/books/?category=fiction&publish_date=2017\n```", "```go\n{\"name\" : \"Lord of the rings\", \"year\": 1954, \"author\" : \"J. R. R. Tolkien\"}\n```", "```go\n/v1/books/1256\n```", "```go\n{\"name\" : \"Lord of the rings\", \"year\": 1955, \"author\" : \"J. R. R. Tolkien\"}\n```", "```go\n/v1/books/1256\n```", "```go\n{\"isbn\" : \"0618640150\"}\n```", "```go\nmkdir /home/user/workspace\nexport GOPATH=/home/user/workspace\n```", "```go\ngo get -u -v github.com/gorilla/mux\n```", "```go\n go install github.com/user/project \n```", "```go\nmkdir -p $GOPATH/src/github.com/git-user/chapter1/mirrorFinder\n```", "```go\ntouch $GOPATH/src/github.com/git-user/chapter1/mirrorFinder/main.go\n```", "```go\nmkdir $GOPATH/src/github.com/git-user/chapter1/mirrors\n```", "```go\ngithub.com \\\n-- git-user \\\n    -- chapter1 \n       -- mirrorFinder \\\n           -- main.go\n       -- mirrors \\\n           -- data.go\n```", "```go\npackage mirrors\n\n// MirrorList is list of Debian mirror sites\nvar MirrorList = [...]string{\n  \"http://ftp.am.debian.org/debian/\", \"http://ftp.au.debian.org/debian/\",\n  \"http://ftp.at.debian.org/debian/\", \"http://ftp.by.debian.org/debian/\",\n  \"http://ftp.be.debian.org/debian/\", \"http://ftp.br.debian.org/debian/\",\n  \"http://ftp.bg.debian.org/debian/\", \"http://ftp.ca.debian.org/debian/\",\n  \"http://ftp.cl.debian.org/debian/\", \"http://ftp2.cn.debian.org/debian/\",\n  \"http://ftp.cn.debian.org/debian/\", \"http://ftp.hr.debian.org/debian/\",\n  \"http://ftp.cz.debian.org/debian/\", \"http://ftp.dk.debian.org/debian/\",\n  \"http://ftp.sv.debian.org/debian/\", \"http://ftp.ee.debian.org/debian/\",\n  \"http://ftp.fr.debian.org/debian/\", \"http://ftp2.de.debian.org/debian/\",\n  \"http://ftp.de.debian.org/debian/\", \"http://ftp.gr.debian.org/debian/\",\n  \"http://ftp.hk.debian.org/debian/\", \"http://ftp.hu.debian.org/debian/\",\n  \"http://ftp.is.debian.org/debian/\", \"http://ftp.it.debian.org/debian/\",\n  \"http://ftp.jp.debian.org/debian/\", \"http://ftp.kr.debian.org/debian/\",\n  \"http://ftp.lt.debian.org/debian/\", \"http://ftp.mx.debian.org/debian/\",\n  \"http://ftp.md.debian.org/debian/\", \"http://ftp.nl.debian.org/debian/\",\n  \"http://ftp.nc.debian.org/debian/\", \"http://ftp.nz.debian.org/debian/\",\n  \"http://ftp.no.debian.org/debian/\", \"http://ftp.pl.debian.org/debian/\",\n  \"http://ftp.pt.debian.org/debian/\", \"http://ftp.ro.debian.org/debian/\",\n  \"http://ftp.ru.debian.org/debian/\", \"http://ftp.sg.debian.org/debian/\",\n  \"http://ftp.sk.debian.org/debian/\", \"http://ftp.si.debian.org/debian/\",\n  \"http://ftp.es.debian.org/debian/\", \"http://ftp.fi.debian.org/debian/\",\n  \"http://ftp.se.debian.org/debian/\", \"http://ftp.ch.debian.org/debian/\",\n  \"http://ftp.tw.debian.org/debian/\", \"http://ftp.tr.debian.org/debian/\",\n  \"http://ftp.uk.debian.org/debian/\", \"http://ftp.us.debian.org/debian/\",\n}\n```", "```go\nimport (\n  \"encoding/json\"\n  \"fmt\"\n  \"log\"\n  \"net/http\"\n  \"time\"\n\n  \"github.com/git-user/chapter1/mirrors\"\n)\n\ntype response struct {\n  FastestURL string `json:\"fastest_url\"`\n  Latency time.Duration `json:\"latency\"`\n}\n\nfunc main() {\n  http.HandleFunc(\"/fastest-mirror\", func(w http.ResponseWriter,\n  r *http.Request) {\n    response := findFastest(mirrors.MirrorList)\n    respJSON, _ := json.Marshal(response)\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    w.Write(respJSON)\n  })\n  port := \":8000\"\n  server := &http.Server{\n    Addr: port,\n    ReadTimeout: 10 * time.Second,\n    WriteTimeout: 10 * time.Second,\n    MaxHeaderBytes: 1 << 20,\n  }\n  fmt.Printf(\"Starting server on port %sn\", port)\n  log.Fatal(server.ListenAndServe())\n}\n```", "```go\nfunc findFastest(urls []string) response {\n  urlChan := make(chan string)\n  latencyChan := make(chan time.Duration)\n\n  for _, url := range urls {\n    mirrorURL := url\n    go func() {\n      start := time.Now()\n      _, err := http.Get(mirrorURL + \"/README\")\n      latency := time.Now().Sub(start) / time.Millisecond\n      if err == nil {\n        urlChan <- mirrorURL\n        latencyChan <- latency\n      }\n    }()\n  }\n  return response{<-urlChan, <-latencyChan}\n}\n```", "```go\ngo install github.com/git-user/chapter1/mirrorFinder\n```", "```go\n$GOPATH/bin/mirrorFinder\n```", "```go\ncurl -i -X GET \"http://localhost:8000/fastest-mirror\" # Valid request\n```", "```go\nHTTP/1.1 200 OK\nContent-Type: application/json\nDate: Wed, 27 Mar 2019 23:13:42 GMT\nContent-Length: 64\n\n{\"fastest_url\":\"http://ftp.sk.debian.org/debian/\",\"latency\":230}\n```", "```go\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"Mirror Finder Service\",\n    \"description\": \"API service for finding the fastest mirror from the\n     list of given mirror sites\",\n    \"version\": \"0.1.1\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server[Staging/Production are different\n       from this]\"\n    }\n  ],\n  \"paths\": {\n    \"/fastest-mirror\": {\n      \"get\": {\n        \"summary\": \"Returns a fastest mirror site.\",\n        \"description\": \"This call returns data of fastest reachable mirror\n         site\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"A JSON object of details\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"fastest_mirror\": {\n                      \"type\": \"string\"\n                    },\n                    \"latency\": {\n                      \"type\": \"integer\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```", "```go\ndocker pull swaggerapi/swagger-ui\n```", "```go\ndocker run --rm -p 80:8080 -e SWAGGER_JSON=/app/openapi.json -v $GOPATH/github.com/git-user/chapter1:/app swaggerapi/swagger-ui\n```"]