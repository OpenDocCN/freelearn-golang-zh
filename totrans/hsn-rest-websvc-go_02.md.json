["```go\ntouch -p $GOPATH/src/github.com/git-user/chapter2/healthCheck/main.go\n```", "```go\npackage main\n\nimport (\n \"io\"\n  \"log\"\n  \"net/http\"\n  \"time\"\n)\n\n// HealthCheck API returns date time to client\nfunc HealthCheck(w http.ResponseWriter, req *http.Request) {\n  currentTime := time.Now()\n  io.WriteString(w, currentTime.String())\n}\n\nfunc main() {\n  http.HandleFunc(\"/health\", HealthCheck)\n  log.Fatal(http.ListenAndServe(\":8000\", nil))\n}\n```", "```go\ngo run $GOPATH/src/github.com/git-user/chapter2/healthCheck/main.go \n```", "```go\ncurl -X GET http://localhost:8000/health\n```", "```go\n2019-04-10 17:54:05.450783 +0200 CEST m=+6.612810181\n```", "```go\ntouch -p $GOPATH/src/github.com/git-user/chapter2/uuidGenerator/main.go\n```", "```go\nimport (\n  \"crypto/rand\"\n  \"fmt\"\n)\n\n// UUID is a custom multiplexer\ntype UUID struct {\n}\n\nfunc (p *UUID) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n  if r.URL.Path == \"/\" {\n    giveRandomUUID(w, r)\n    return\n  }\n  http.NotFound(w, r)\n  return\n}\n\nfunc giveRandomUUID(w http.ResponseWriter, r *http.Request) {\n c := 10\n  b := make([]byte, c)\n  _, err := rand.Read(b)\n  if err != nil {\n    panic(err)\n  }\n  fmt.Fprintf(w, fmt.Sprintf(\"%x\", b))\n}\n```", "```go\npackage main\n\nimport (\n  \"net/http\"\n)\n\nfunc main() {\n  mux := &UUID{}\n  http.ListenAndServe(\":8000\", mux)\n}\n```", "```go\ngo run $GOPATH/src/github.com/git-user/chapter2/uuidGenerator/main.go\n```", "```go\ncurl -X GET http://localhost:8000/\n```", "```go\n544f5519592ac25bb2c0\n```", "```go\nnewMux := http.NewServeMux()\n\nnewMux.HandleFunc(\"/randomFloat\", func(w http.ResponseWriter,\nr *http.Request) {\n fmt.Fprintln(w, rand.Float64())\n})\n\nnewMux.HandleFunc(\"/randomInt\", func(w http.ResponseWriter, \nr *http.Request) {\n fmt.Fprintln(w, rand.Int(100))\n})\n```", "```go\ntouch -p $GOPATH/src/github.com/git-user/chapter2/multipleHandlers/main.go \n```", "```go\npackage main\n\nimport (\n    \"fmt\"\n    \"math/rand\"\n    \"net/http\"\n)\n\nfunc main() {\n    newMux := http.NewServeMux()\n    newMux.HandleFunc(\"/randomFloat\", func(w http.ResponseWriter,\n    r *http.Request) {\n        fmt.Fprintln(w, rand.Float64())\n    })\n    newMux.HandleFunc(\"/randomInt\", func(w http.ResponseWriter,\n    r *http.Request) {\n        fmt.Fprintln(w, rand.Intn(100))\n    })\n    http.ListenAndServe(\":8000\", newMux)\n}\n```", "```go\ngo run $GOPATH/src/github.com/git-user/chapter2/multipleHandlers/main.go\n```", "```go\ncurl -X GET http://localhost:8000/randomFloat\ncurl -X GET http://localhost:8000/randomInt\n```", "```go\n0.6046602879796196\n87\n```", "```go\ngo get github.com/julienschmidt/httprouter\n```", "```go\nimport \"github.com/julienschmidt/httprouter\"\n```", "```go\n// arguments... means an array of strings unpacked as arguments\n// in Go\ncmd := exec.Command(command, arguments...)\n```", "```go\nout, err := cmd.Output()\n```", "```go\ntouch -p $GOPATH/src/github.com/git-user/chapter2/httprouterExample/main.go\n```", "```go\npackage main\n\nimport (\n  \"fmt\"\n  \"io\"\n  \"log\"\n  \"net/http\"\n  \"os/exec\"\n\n  \"github.com/julienschmidt/httprouter\"\n)\n\nfunc main() {\n  router := httprouter.New()\n  router.GET(\"/api/v1/go-version\", goVersion)\n  router.GET(\"/api/v1/show-file/:name\", getFileContent)\n  log.Fatal(http.ListenAndServe(\":8000\", router))\n}\n```", "```go\nfunc getCommandOutput(command string, arguments ...string) string {\n  out, _ := exec.Command(command, arguments...).Output()\n  return string(out)\n}\n\nfunc goVersion(w http.ResponseWriter, r *http.Request, params httprouter.Params) {\n  response := getCommandOutput(\"/usr/local/go/bin/go\", \"version\")\n  io.WriteString(w, response)\n  return\n}\n\nfunc getFileContent(w http.ResponseWriter, r *http.Request, params httprouter.Params) {\n  fmt.Fprintf(w, getCommandOutput(\"/bin/cat\", params.ByName(\"name\")))\n}\n```", "```go\nLorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu.\n```", "```go\nΟἱ δὲ Φοίνιϰες οὗτοι οἱ σὺν Κάδμῳ ἀπιϰόμενοι.. ἐσήγαγον διδασϰάλια ἐς τοὺς ῞Ελληνας ϰαὶ δὴ ϰαὶ γράμματα, οὐϰ ἐόντα πρὶν ῞Ελλησι ὡς ἐμοὶ δοϰέειν, πρῶτα μὲν τοῖσι ϰαὶ ἅπαντες χρέωνται Φοίνιϰες· μετὰ δὲ χρόνου προβαίνοντος ἅμα τῇ ϕωνῇ μετέβαλον ϰαὶ τὸν ϱυϑμὸν τῶν γραμμάτων. Περιοίϰεον δέ σϕεας τὰ πολλὰ τῶν χώρων τοῦτον τὸν χρόνον ῾Ελλήνων ῎Ιωνες· οἳ παραλαβόντες διδαχῇ παρὰ τῶν Φοινίϰων τὰ γράμματα, μεταρρυϑμίσαντές σϕεων ὀλίγα ἐχρέωντο, χρεώμενοι δὲ ἐϕάτισαν, ὥσπερ ϰαὶ τὸ δίϰαιον ἔϕερε ἐσαγαγόντων Φοινίϰων ἐς τὴν ῾Ελλάδα, ϕοινιϰήια ϰεϰλῆσϑαι.\n```", "```go\ngo run $GOPATH/src/github.com/git-user/chapter2/httprouterExample/main.go\n```", "```go\ncurl -X GET http://localhost:8000/api/v1/go-version\n```", "```go\ngo version go1.13.5 darwin/amd64\n```", "```go\ncurl -X GET http://localhost:8000/api/v1/show-file/greek.txt\n```", "```go\nΟἱ δὲ Φοίνιϰες οὗτοι οἱ σὺν Κάδμῳ ἀπιϰόμενοι.. ἐσήγαγον διδασϰάλια ἐς τοὺς ῞Ελληνας ϰαὶ δὴ ϰαὶ γράμματα, οὐϰ ἐόντα πρὶν ῞Ελλησι ὡς ἐμοὶ δοϰέειν, πρῶτα μὲν τοῖσι ϰαὶ ἅπαντες χρέωνται Φοίνιϰες· μετὰ δὲ χρόνου προβαίνοντος ἅμα τῇ ϕωνῇ μετέβαλον ϰαὶ τὸν ϱυϑμὸν τῶν γραμμάτων. Περιοίϰεον δέ σϕεας τὰ πολλὰ τῶν χώρων τοῦτον τὸν χρόνον ῾Ελλήνων ῎Ιωνες· οἳ παραλαβόντες διδαχῇ παρὰ τῶν Φοινίϰων τὰ γράμματα, μεταρρυϑμίσαντές σϕεων ὀλίγα ἐχρέωντο, χρεώμενοι δὲ ἐϕάτισαν, ὥσπερ ϰαὶ τὸ δίϰαιον ἔϕερε ἐσαγαγόντων Φοινίϰων ἐς τὴν ῾Ελλάδα, ϕοινιϰήια ϰεϰλῆσϑαι.\n```", "```go\n/static/*\n```", "```go\nmkdir -p /users/git-user/static\n```", "```go\ntouch -p $GOPATH/src/github.com/git-user/chapter2/fileServer/main.go\n```", "```go\npackage main\n\nimport (\n  \"log\"\n  \"net/http\"\n\n  \"github.com/julienschmidt/httprouter\"\n)\n\nfunc main() {\n  router := httprouter.New()\n  // Mapping to methods is possible with HttpRouter\n  router.ServeFiles(\"/static/*filepath\", \n   http.Dir(\"/Users/git-user/static\"))\n  log.Fatal(http.ListenAndServe(\":8000\", router))\n}\n\n```", "```go\ngo run $GOPATH/src/github.com/git-user/chapter2/fileServer/main.go\n```", "```go\nhttp://localhost:8000/static/latin.txt\n```", "```go\nLorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. \n```", "```go\ngo get -u github.com/gorilla/mux\n```", "```go\nexport GOPATH=~/go\n```", "```go\nPATH=\"$GOPATH/bin:$PATH\"\n```", "```go\nvi ~/.profile\n(or)\nvi ~/.zshrc \n```", "```go\nimport \"github.com/gorilla/mux\"\n```", "```go\nhttps://example.org/articles/books/123\n```", "```go\ntouch -p $GOPATH/src/github.com/git-user/chapter2/muxRouter/main.go\n```", "```go\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"net/http\"\n  \"time\"\n\n  \"github.com/gorilla/mux\"\n)\n\nfunc ArticleHandler(w http.ResponseWriter, r *http.Request) {\n  vars := mux.Vars(r)\n  w.WriteHeader(http.StatusOK)\n  fmt.Fprintf(w, \"Category is: %v\\n\", vars[\"category\"])\n  fmt.Fprintf(w, \"ID is: %v\\n\", vars[\"id\"])\n}\n\nfunc main() {\n  r := mux.NewRouter()\n  r.HandleFunc(\"/articles/{category}/{id:[0-9]+}\", ArticleHandler)\n  srv := &http.Server{\n    Handler: r,\n    Addr: \"127.0.0.1:8000\",\n    WriteTimeout: 15 * time.Second,\n    ReadTimeout: 15 * time.Second,\n  }\n  log.Fatal(srv.ListenAndServe())\n}\n```", "```go\ngo run $GOPATH/src/github.com/git-user/chapter2/muxRouter/main.go\n```", "```go\ncurl http://localhost:8000/articles/books/123 Category is: books ID is: 123\n```", "```go\nhttp://localhost:8000/articles?id=123&category=books\n```", "```go\n// Add this in your main program\nr := mux.NewRouter()\nr.HandleFunc(\"/articles\", QueryHandler)\n```", "```go\n// QueryHandler handles the given query parameters\nfunc QueryHandler(w http.ResponseWriter, r *http.Request) {\n  queryParams := r.URL.Query()\n  w.WriteHeader(http.StatusOK)\n  fmt.Fprintf(w, \"Got parameter id:%s!\\n\", queryParams[\"id\"][0])\n  fmt.Fprintf(w, \"Got parameter category:%s!\", queryParams[\"category\"][0])\n}\n```", "```go\ngo run $GOPATH/src/github.com/git-user/chapter2/queryParameters/main.go\n```", "```go\ncurl -X GET http://localhost:8000/articles\\?id\\=1345\\&category\\=birds\n```", "```go\nGot parameter id:1345! \nGot parameter category:birds!\n```", "```go\nr.HandlerFunc(\"/articles/{category}/{id:[0-9]+}\", ArticleHandler).\n  Name(\"articleRoute\")\n```", "```go\nurl, err := r.Get(\"articleRoute\").URL(\"category\", \"books\", \"id\", \"123\")\nfmt.Printf(url.Path) // prints /articles/books/123\n```", "```go\nr.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"/tmp/static\"))))\n```", "```go\nr.StrictSlash(true)\nr.Path(\"/articles/\").Handler(ArticleHandler)\n```", "```go\nr.UseEncodedPath()\nr.NewRoute().Path(\"/category/id\")\n```", "```go\nhttp://localhost:8000/books/2\n```", "```go\nhttp://localhost:8000/books%2F2\n```", "```go\nusername := r.Form.Get(\"id\")\npassword := r.Form.Get(\"category\")\nsql := \"SELECT * FROM article WHERE id='\" + username + \"' AND category='\" + password + \"'\"\nDb.Exec(sql)\n```", "```go\n?category=books&id=10 ORDER BY 10--\n```", "```go\nUnknown column '10' in 'order clause'\n```"]