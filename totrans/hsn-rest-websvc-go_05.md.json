["```go\n{\n  _id: 5,\n  name: 'Star Trek',\n  year: 2009,\n  directors: ['J.J. Abrams'],\n  writers: ['Roberto Orci', 'Alex Kurtzman'],\n  boxOffice: {\n     budget:150000000,\n     gross:257704099\n  }\n}\n```", "```go\nsudo apt-get update\nsudo apt-get install -y mongodb\n```", "```go\nsystemctl start mongod\n```", "```go\nbrew tap mongodb/brew\nbrew install mongodb-community \n```", "```go\nmkdir -p /data/db\n```", "```go\nchown -R `id -un` /data/db\n```", "```go\nsystemctl stop mongod\n```", "```go\nmongod\n```", "```go\nmongo\n```", "```go\n> show databases\n\nadmin   0.000GB\nconfig  0.000GB\nlocal   0.000GB\ntest    0.000GB\n```", "```go\n> use appDB\n```", "```go\n> db.movies.insertOne({ _id: 5, name: 'Star Trek', year: 2009, directors: ['J.J. Abrams'], writers: ['Roberto Orci', 'Alex Kurtzman'], boxOffice: { budget:150000000, gross:257704099 } } )\n{ \n \"acknowledged\" : true,\n \"insertedId\" : 5 \n}\n```", "```go\n> db.movies.insertOne({ name: 'The Dark Knight ', year: 2008, directors: ['Christopher Nolan'], writers: ['Jonathan Nolan', 'Christopher Nolan'], boxOffice: { budget:185000000, gross:533316061 } } )\n{ \n \"acknowledged\" : true,\n \"insertedId\" : ObjectId(\"59574125bf7a73d140d5ba4a\")\n}\n```", "```go\n> db.movies.find()\n\n{ \"_id\" : 5, \"name\" : \"Star Trek\", \"year\" : 2009, \"directors\" : [ \"J.J. Abrams\" ], \"writers\" : [ \"Roberto Orci\", \"Alex Kurtzman\" ], \"boxOffice\" : { \"budget\" : 150000000, \"gross\" : 257704099 } }\n{ \"_id\" : ObjectId(\"59574125bf7a73d140d5ba4a\"), \"name\" : \"The Dark Knight \", \"year\" : 2008, \"directors\" : [ \"Christopher Nolan\" ], \"writers\" : [ \"Jonathan Nolan\", \"Christopher Nolan\" ], \"boxOffice\" : { \"budget\" : 185000000, \"gross\" : 533316061 } }\n```", "```go\n> db.movies.findOne()\n\n{ \"_id\" : 5, \"name\" : \"Star Trek\", \"year\" : 2009, \"directors\" : [ \"J.J. Abrams\" ], \"writers\" : [ \"Roberto Orci\", \"Alex Kurtzman\" ], \"boxOffice\" : { \"budget\" : 150000000, \"gross\" : 257704099 }}\n```", "```go\n> db.movies.find({year: {$eq: 2008}})\n\n{ \"_id\" : ObjectId(\"59574125bf7a73d140d5ba4a\"), \"name\" : \"The Dark Knight \", \"year\" : 2008, \"directors\" : [ \"Christopher Nolan\" ], \"writers\" : [ \"Jonathan Nolan\", \"Christopher Nolan\" ], \"boxOffice\" : { \"budget\" : 185000000, \"gross\" : 533316061 } }\n```", "```go\n{year: {$eq: 2008}}\n```", "```go\nSELECT * FROM movies WHERE year=2008;\n```", "```go\n> db.movies.find({year: 2008})\n```", "```go\n> db.movies.find({'boxOffice.budget': {$gt: 150000000}})\n\n{ \"_id\" : ObjectId(\"59574125bf7a73d140d5ba4a\"), \"name\" : \"The Dark Knight \", \"year\" : 2008, \"directors\" : [ \"Christopher Nolan\" ], \"writers\" : [ \"Jonathan Nolan\", \"Christopher Nolan\" ], \"boxOffice\" : { \"budget\" : 185000000, \"gross\" : 533316061 } }\n```", "```go\n> db.movies.find({'boxOffice.budget': {$gt: 150000000}, year: 2009})\n```", "```go\n> db.movies.find({$or: [{'boxOffice.budget': {$gt: 150000000}}, {year: 2009}]})\n\n{ \"_id\" : 5, \"name\" : \"Star Trek\", \"year\" : 2009, \"directors\" : [ \"J.J. Abrams\" ], \"writers\" : [ \"Roberto Orci\", \"Alex Kurtzman\" ], \"boxOffice\" : { \"budget\" : 150000000, \"gross\" : 257704099 } }\n{ \"_id\" : ObjectId(\"59574125bf7a73d140d5ba4a\"), \"name\" : \"The Dark Knight \", \"year\" : 2008, \"directors\" : [ \"Christopher Nolan\" ], \"writers\" : [ \"Jonathan Nolan\", \"Christopher Nolan\" ], \"boxOffice\" : { \"budget\" : 185000000, \"gross\" : 533316061 } }\n```", "```go\ndb.movies.update(CRITERIA, SET)\n```", "```go\ndb.movies.update({\"_id\": 5}, {$set: {\"boxOffice.budget\": 200000000}})\n```", "```go\n> db.movies.deleteOne({\"_id\": ObjectId(\"59574125bf7a73d140d5ba4a\")})\n{ \"acknowledged\" : true, \"deletedCount\" : 1 }\n```", "```go\nmkdir $GOPATH/src/github.com/git-user/chapter5/intro\n```", "```go\ndep init\n```", "```go\ndep ensure -add \"go.mongodb.org/mongo-driver/mongo@~1.0.0\"\n```", "```go\ntouch $GOPATH/src/github.com/git-user/chapter5/intro/main.go\n```", "```go\n// Movie holds a movie data\ntype Movie struct {\n  Name string `bson:\"name\"`\n  Year string `bson:\"year\"`\n  Directors []string `bson:\"directors\"`\n  Writers []string `bson:\"writers\"`\n  BoxOffice `bson:\"boxOffice\"`\n}\n\n// BoxOffice is nested in Movie\ntype BoxOffice struct {\n  Budget uint64 `bson:\"budget\"`\n  Gross uint64 `bson:\"gross\"`\n}\n```", "```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n  \"log\"\n\n  \"go.mongodb.org/mongo-driver/mongo\"\n  \"go.mongodb.org/mongo-driver/mongo/options\"\n  \"gopkg.in/mgo.v2/bson\"\n)\n```", "```go\nclientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\nclient, err := mongo.Connect(context.TODO(), clientOptions)\n\nif err != nil {\n  panic(err)\n}\n\nerr = client.Ping(context.TODO(), nil)\n\nif err != nil {\n  log.Fatal(err)\n}\n\nfmt.Println(\"Connected to MongoDB successfully\")\ncollection := client.Database(\"appDB\").Collection(\"movies\")\n```", "```go\n  // Create a movie\n  darkNight := Movie{\n    Name: \"The Dark Knight\",\n    Year: \"2008\",\n    Directors: []string{\"Christopher Nolan\"},\n    Writers: []string{\"Jonathan Nolan\", \"Christopher Nolan\"},\n    BoxOffice: BoxOffice{\n      Budget: 185000000,\n      Gross: 533316061,\n    },\n  }\n\n  // Insert a document into MongoDB\n  _, err := collection.InsertOne(context.TODO(), darkNight)\n\n  if err != nil {\n    log.Fatal(err)\n  }\n```", "```go\n  queryResult := &Movie{}\n  // bson.M is used for building map for filter query\n  filter := bson.M{\"boxOffice.budget\": bson.M{\"$gt\": 150000000}}\n  result = collection.FindOne(context.TODO(), filter)\n  err = result.Decode(queryResult)\n\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  fmt.Println(\"Movie:\", queryResult)\n```", "```go\n  err = client.Disconnect(context.TODO())\n  if err != nil {\n    panic(err)\n  }\n  fmt.Println(\"Disconnected from MongoDB\")\n```", "```go\ngo run $GOPATH/src/github.com/git-user/chapter5/intro/main.go\n```", "```go\nConnected to MongoDB successfully\nMovie: &{ObjectID(\"5cfd106733090c1e34713c43\")}\nDisconnected from MongoDB\n```", "```go\nmkdir $GOPATH/src/github.com/git-user/chapter5/movieAPI\n```", "```go\ntouch $GOPATH/src/github.com/git-user/chapter5/movieAPI/main.go\n```", "```go\ntype DB struct {\n  collection *mongo.Collection\n}\n\ntype Movie struct {\n  ID interface{} `json:\"id\" bson:\"_id,omitempty\"`\n  Name string `json:\"name\" bson:\"name\"`\n  Year string `json:\"year\" bson:\"year\"`\n  Directors []string `json:\"directors\" bson:\"directors\"`\n  Writers []string `json:\"writers\" bson:\"writers\"`\n  BoxOffice BoxOffice `json:\"boxOffice\" bson:\"boxOffice\"`\n}\n\ntype BoxOffice struct {\n  Budget uint64 `json:\"budget\" bson:\"budget\"`\n  Gross uint64 `json:\"gross\" bson:\"gross\"`\n}\n```", "```go\n  ...\n  \"go.mongodb.org/mongo-driver/bson/primitive\"\n\n  \"go.mongodb.org/mongo-driver/bson\"\n\n  \"github.com/gorilla/mux\"\n  \"go.mongodb.org/mongo-driver/mongo\"\n  \"go.mongodb.org/mongo-driver/mongo/options\"\n```", "```go\nfunc main() {\n  clientOptions := \n    options.Client().ApplyURI(\"mongodb://localhost:27017\")\n  client, err := mongo.Connect(context.TODO(), clientOptions)\n  if err != nil {\n    panic(err)\n  }\n  defer client.Disconnect(context.TODO())\n\n  collection := client.Database(\"appDB\").Collection(\"movies\")\n  db := &DB{collection: collection}\n  ...\n}\n```", "```go\n  r := mux.NewRouter()\n  r.HandleFunc(\"/v1/movies/{id:[a-zA-Z0-9]*}\",\n   db.GetMovie).Methods(\"GET\")\n  r.HandleFunc(\"/v1/movies\", db.PostMovie).Methods(\"POST\")\n```", "```go\n  srv := &http.Server{\n    Handler: r,\n    Addr: \"127.0.0.1:8000\",\n    WriteTimeout: 15 * time.Second,\n    ReadTimeout: 15 * time.Second,\n  }\n  log.Fatal(srv.ListenAndServe())\n}\n```", "```go\n// GetMovie fetches a movie with a given ID\nfunc (db *DB) GetMovie(w http.ResponseWriter, r *http.Request) {\n  vars := mux.Vars(r)\n  var movie Movie\n  objectID, _ := primitive.ObjectIDFromHex(vars[\"id\"])\n  filter := bson.M{\"_id\": objectID}\n  err := db.collection.FindOne(context.TODO(),\n   filter).Decode(&movie)\n\n  if err != nil {\n    w.WriteHeader(http.StatusInternalServerError)\n    w.Write([]byte(err.Error()))\n  } else {\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    response, _ := json.Marshal(movie)\n    w.WriteHeader(http.StatusOK)\n    w.Write(response)\n  }\n}\n```", "```go\n// PostMovie adds a new movie to our MongoDB collection\nfunc (db *DB) PostMovie(w http.ResponseWriter, r *http.Request) {\n  var movie Movie\n  postBody, _ := ioutil.ReadAll(r.Body)\n  json.Unmarshal(postBody, &movie)\n\n  result, err := db.collection.InsertOne(context.TODO(), movie)\n  if err != nil {\n    w.WriteHeader(http.StatusInternalServerError)\n    w.Write([]byte(err.Error()))\n  } else {\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    response, _ := json.Marshal(result)\n    w.WriteHeader(http.StatusOK)\n    w.Write(response)\n  }\n}\n```", "```go\ngo run $GOPATH/src/github.com/git-user/chapter5/movieAPI/main.go\n```", "```go\ncurl -X POST \\\n http://localhost:8000/v1/movies \\\n -H 'cache-control: no-cache' \\\n -H 'content-type: application/json' \\\n -d '{ \"name\" : \"The Dark Knight\", \"year\" : \"2008\", \"directors\" : [ \"Christopher Nolan\" ], \"writers\" : [ \"Jonathan Nolan\", \"Christopher Nolan\" ], \"boxOffice\" : { \"budget\" : 185000000, \"gross\" : 533316061 }\n}'\n```", "```go\n{\"InsertedID\":\"5cfd6cf0c281945c6cfefaab\"}\n```", "```go\ncurl -X GET http://localhost:8000/v1/movies/5cfd6cf0c281945c6cfefaab\n```", "```go\n{\"id\":\"5cfd6cf0c281945c6cfefaab\",\"name\":\"The Dark Knight\",\"year\":\"2008\",\"directors\":[\"Christopher Nolan\"],\"writers\":[\"Jonathan Nolan\",\"Christopher Nolan\"],\"boxOffice\":{\"budget\":185000000,\"gross\":533316061}}\n```", "```go\n// UpdateMovie modifies the data of given resource\nfunc (db *DB) UpdateMovie(w http.ResponseWriter, r *http.Request) {\n  vars := mux.Vars(r)\n  var movie Movie\n  putBody, _ := ioutil.ReadAll(r.Body)\n  json.Unmarshal(putBody, &movie)\n\n  objectID, _ := primitive.ObjectIDFromHex(vars[\"id\"])\n  filter := bson.M{\"_id\": objectID}\n  update := bson.M{\"$set\": &movie}\n  _, err := db.collection.UpdateOne(context.TODO(), filter, update)\n  ...\n}\n```", "```go\n// DeleteMovie removes the data from the db\nfunc (db *DB) DeleteMovie(w http.ResponseWriter, r *http.Request) {\n  vars := mux.Vars(r)\n  objectID, _ := primitive.ObjectIDFromHex(vars[\"id\"])\n  filter := bson.M{\"_id\": objectID}\n\n  _, err := db.collection.DeleteOne(context.TODO(), filter)\n  ...\n}\n```", "```go\nr.HandleFunc(\"/v1/movies/{id:[a-zA-Z0-9]*}\", db.UpdateMovie).Methods(\"PUT\")\nr.HandleFunc(\"/v1/movies/{id:[a-zA-Z0-9]*}\", db.DeleteMovie).Methods(\"DELETE\")\n```", "```go\n> db.movies.insertOne({ name: 'Star Trek',   year: 2009,   directors: ['J.J. Abrams'],   writers: ['Roberto Orci', 'Alex Kurtzman'],   boxOffice: {      budget:150000000,      gross:257704099   } } )\n{ \n \"acknowledged\" : true,\n \"insertedId\" : ObjectId(\"595a6cc01226e5fdf52026a1\")\n}\n```", "```go\n> db.movies.insertOne({ name: 'The Dark Knight ', year: 2008, directors: ['Christopher Nolan'], writers: ['Jonathan Nolan', 'Christopher Nolan'], boxOffice: { budget:185000000, gross:533316061 } } )\n{ \n \"acknowledged\" : true,\n \"insertedId\" : ObjectId(\"59603d3b0f41ead96110cf4f\")\n}\n```", "```go\ndb.movies.createIndex({year: 1})\n```", "```go\n> db.movies.find({year: {$lt: 2010}})\n{ \"_id\" : ObjectId(\"5957397f4e5c31eb7a9ed48f\"), \"name\" : \"Star Trek\", \"year\" : 2009, \"directors\" : [ \"J.J. Abrams\" ], \"writers\" : [ \"Roberto Orci\", \"Alex Kurtzman\" ], \"boxOffice\" : { \"budget\" : 150000000, \"gross\" : 257704099 } }\n{ \"_id\" : ObjectId(\"59603d3b0f41ead96110cf4f\"), \"name\" : \"The Dark Knight \", \"year\" : 2008, \"directors\" : [ \"Christopher Nolan\" ], \"writers\" : [ \"Jonathan Nolan\", \"Christopher Nolan\" ], \"boxOffice\" : { \"budget\" : 185000000, \"gross\" : 533316061 } }\n```", "```go\n{\n  _id: ObjectId(\"5cfe142a7ba402aacb71f710\"),\n  first_name: \"Philip\",\n  last_name: \"Zorn\",\n  address: {\n    type: \"work\"\n    street: \"241 Indian Spring St\",\n    city: \"Pittsburg\",\n    state: \"California\",\n    pincode: 94565,\n    country: \"USA\"\n  },\n  \"phone\": \"(xxx) yyy-zzzz\"\n}\n```", "```go\n{\n  _id: ObjectId(\"5cfe142a7ba402aacb71f706\"),\n  first_name: \"Max\",\n  last_name: \"Charles\",\n  address: {\n    type: \"home\"\n    street: \"Ludwig Str. 5\",\n    city: \"Ansbach\",\n    state: \"Bayern\",\n    pincode: 91522,\n    country: \"Deutschland\"\n  },\n  \"phone\": \"xx-yyyyyy-zzzzz\"\n}\n\n```", "```go\n{\n  _id: ObjectId(\"5cfe15607ba402aacb71f711\"),\n  dimensions: {\n    width: 21,\n    height: 12\n  },\n  weight: 10,\n  is_damaged: false,\n  status: \"In transit\"\n}\n```", "```go\n{\n  _id: ObjectId(\"5cfe162a7ba402aacb71f713\"),\n  initiated_on: ISODate(\"2019-06-10T08:38:30.894Z\"),\n  successful_on: ISODate(\"2019-06-10T08:39:06.894Z\").\n  merchant_id: 112543,\n  mode_of_payment: \"paypal\",\n  payment_details: {\n    transaction_token: \"dfghjvbsclka76asdadn89\"\n  }\n}\n```", "```go\n{\n  _id: ObjectId(\"5cfe1a4e7ba402aacb71f714\"),\n  name: \"PHL International\",\n  carrier_code: 988,\n  is_partner: true\n}\n```", "```go\n{\n  _id: ObjectId(\"5cfe162a7ba402aacb71f712\"),\n  sender: ObjectId(\"5cfe142a7ba402aacb71f710\"),\n  receiver: ObjectId(\"5cfe142a7ba402aacb71f706\"),\n  package: ObjectId(\"5cfe15607ba402aacb71f711\"),\n  payment: ObjectId(\"5cfe162a7ba402aacb71f713\"),\n  carrier: ObjectId(\"5cfe1a4e7ba402aacb71f714\"),\n  promised_on: ISODate(\"2019-07-15T08:54:11.694Z\")\n}\n```"]