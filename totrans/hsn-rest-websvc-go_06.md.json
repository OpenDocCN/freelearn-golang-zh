["```go\nsyntax 'proto3';\n\nmessage NetworkInterface {\n  int index = 1;\n  int mtu = 2;\n  string name = 3;\n  string hardwareaddr = 4;\n}\n```", "```go\n{\n   \"networkInterface\": {\n       \"index\" : 0,\n       \"mtu\" : 68,\n       \"name\": \"eth0\",\n       \"hardwareAddr\": \"00:A0:C9:14:C8:29\"\n   }\n}\n```", "```go\nsyntax 'proto3';\n\nmessage Schedule{\n  enum Days{\n     SUNDAY = 0;\n     MONDAY = 1;\n     TUESDAY = 2;\n     WEDNESDAY = 3;\n     THURSDAY = 4;\n     FRIDAY = 5;\n     SATURDAY = 6;\n  }\n}\n```", "```go\nenum EnumAllowingAlias {\n  option allow_alias = true;\n  UNKNOWN = 0;\n  STARTED = 1;\n  RUNNING = 1;\n}\n```", "```go\nmessage Site{\n   string url = 1;\n   int latency = 2;\n   repeated string proxies = 3;\n}\n```", "```go\n{\n  \"site\": {\n      \"url\": \"https://example.org\",\n      \"latency\": \"5ms\",\n      \"proxies\": [\n        {\"url\": \"https://example-proxy-1.org\", \"latency\": \"6ms\"},\n        {\"url\": \"https://example-proxy-2.org\", \"latency\": \"4ms\"}\n      ]\n  }\n}\n```", "```go\nmessage Site {\n string url = 1;\n int latency = 2;\n repeated Proxy proxies = 3;\n}\n\nmessage Proxy {\n string url = 1;\n int latency = 2;\n}\n```", "```go\nbrew install protobuf\n```", "```go\n# Make sure you grab the latest version\ncurl -OL https://github.com/protocolbuffers/protobuf/releases/download/\nv3.11.3/protoc-3.11.3-linux-x86_64.zip\n# Unzip\nunzip protoc-3.11.3-linux-x86_64.zip -d protoc3\n# Move only protoc* to /usr/bin/\nsudo mv protoc3/bin/protoc /usr/bin/protoc\n```", "```go\nmkdir -r $GOPATH/src/github.com/git-user/chapter6/protobufs\n```", "```go\nsyntax = \"proto3\";\npackage protofiles;\n\nmessage Person {\n  string name = 1;\n  int32 id = 2; // Unique ID number for this person.\n  string email = 3;\n\n  enum PhoneType {\n    MOBILE = 0;\n    HOME = 1;\n    WORK = 2;\n  }\n\n  message PhoneNumber {\n    string number = 1;\n    PhoneType type = 2;\n  }\n\n  repeated PhoneNumber phones = 4;\n}\n\n// Our address book file is just one of these.\nmessage AddressBook {\n  repeated Person people = 1;\n}\n```", "```go\npackage protofiles;\n```", "```go\nprotoc --go_out=. *.proto\n```", "```go\n[16:20:27] git-user:protofiles git:(master*) $ ls -l\ntotal 24\n-rw-r--r-- 1 naren staff 5657 Jul 15 16:20 person.pb.go\n-rw-r--r--@ 1 naren staff 433 Jul 15 15:58 person.proto\n```", "```go\n....\ntype Person_PhoneType int32\n\nconst (\n  Person_MOBILE Person_PhoneType = 0\n  Person_HOME Person_PhoneType = 1\n  Person_WORK Person_PhoneType = 2\n)\n\nvar Person_PhoneType_name = map[int32]string{\n  0: \"MOBILE\",\n  1: \"HOME\",\n  2: \"WORK\",\n}\nvar Person_PhoneType_value = map[string]int32{\n  \"MOBILE\": 0,\n  \"HOME\": 1,\n  \"WORK\": 2,\n}\n.....\n```", "```go\ntouch -p $GOPATH/src/github.com/git-user/chapter6/protobufs/basicExample/main.go\n```", "```go\ngo get github.com/golang/protobuf/proto\n```", "```go\npackage main\n\nimport (\n  \"fmt\"\n\n  \"github.com/golang/protobuf/proto\"\n  pb \"github.com/git-user/chapter6/protobufs/protofiles\"\n)\n\nfunc main() {\n  p := &pb.Person{\n    Id: 1234,\n    Name: \"Roger F\",\n    Email: \"rf@example.com\",\n    Phones: []*pb.Person_PhoneNumber{\n      {Number: \"555-4321\", Type: pb.Person_HOME},\n    },\n  }\n\n  p1 := &pb.Person{}\n  body, _ := proto.Marshal(p)\n  _ = proto.Unmarshal(body, p1)\n  fmt.Println(\"Original struct loaded from proto file:\", p, \"\\n\")\n  fmt.Println(\"Marshalled proto data: \", body, \"\\n\")\n  fmt.Println(\"Unmarshalled struct: \", p1)\n}\n```", "```go\ngo run $GOPATH/src/github.com/git-user/chapter6/protobufs/basicExample/main.go\n Original struct loaded from proto file: name:\"Roger F\" id:1234 email:\"rf@example.com\" phones:<number:\"555-4321\" type:HOME >\n\nMarshaled proto data: [10 7 82 111 103 101 114 32 70 16 210 9 26 14 114 102 64 101 120 97 109 112 108 101 46 99 111 109 34 12 10 8 53 53 53 45 52 51 50 49 16 1]\n\nUnmarshaled struct: name:\"Roger F\" id:1234 email:\"rf@example.com\" phones:<number:\"555-4321\" type:HOME >\n```", "```go\ntouch -p $GOPATH/src/github.com/narenaryan/chapter6/protobufs/jsonExample/main.go\n```", "```go\npackage main\n\nimport (\n  \"fmt\"\n\n  \"encoding/json\"\n  pb \"github.com/git-user/chapter6/protobufs/protofiles\"\n)\n\nfunc main() {\n  p := &pb.Person{\n    Id: 1234,\n    Name: \"Roger F\",\n    Email: \"rf@example.com\",\n    Phones: []*pb.Person_PhoneNumber{\n      {Number: \"555-4321\", Type: pb.Person_HOME},\n    },\n  }\n  body, _ := json.Marshal(p)\n  fmt.Println(string(body))\n}\n```", "```go\ngo run $GOPATH/src/github.com/git-user/chapter6/protobufs/jsonExample/main.go\n\n{\"name\":\"Roger F\",\"id\":1234,\"email\":\"rf@example.com\",\"phones\":[{\"number\":\"555-4321\",\"type\":1}]}\n```", "```go\ngo get google.golang.org/grpc\ngo get -u github.com/golang/protobuf/protoc-gen-go\n```", "```go\nmkdir -r $GOPATH/src/github.com/git-user/chapter6/grpcExample\nmkdir -r $GOPATH/src/github.com/git-user/chapter6/grpcExample/protofiles\n```", "```go\ntouch -p $GOPATH/src/github.com/git-user/chapter6/grpcExample/protofiles/transaction.proto\n```", "```go\nsyntax = \"proto3\";\npackage protofiles;\n\nmessage TransactionRequest {\n   string from = 1;\n   string to = 2;\n   float amount = 3;\n}\n\nmessage TransactionResponse {\n  bool confirmation = 1;\n}\n\nservice MoneyTransaction {\n    rpc MakeTransaction(TransactionRequest) returns (TransactionResponse) {}\n}\n```", "```go\nprotoc -I protofiles/ protofiles/transaction.proto --go_out=plugins=grpc:protofiles\n```", "```go\nls protofiles\n-rw-r--r-- 1 git-user staff 6215 Jan 16 17:28 transaction.pb.go\n-rw-r--r-- 1 git-user staff 294 Jan 16 17:28 transaction.proto\n```", "```go\nmkdir grpcServer grpcClient\n```", "```go\nimport (\n   ...\n   pb \"github.com/git-user/chapter6/grpcExample/protofiles\"\n  \"golang.org/x/net/context\"\n  \"google.golang.org/grpc\"\n  \"google.golang.org/grpc/reflection\"\n)\n```", "```go\n// server is used to create MoneyTransactionServer.\ntype server struct{}\n\n// MakeTransaction implements MoneyTransactionServer.MakeTransaction\nfunc (s *server) MakeTransaction(ctx context.Context, in *pb.TransactionRequest) (*pb.TransactionResponse, error) {\n  // Use in.Amount, in.From, in.To and perform transaction logic\n  return &pb.TransactionResponse{Confirmation: true}, nil\n}\n```", "```go\nrpc MakeTransaction(TransactionRequest) returns (TransactionResponse) {}\n```", "```go\nconst (\n    port = \":50051\"\n)\n\nfunc main() {\n  lis, err := net.Listen(\"tcp\", port)\n  ...\n  s := grpc.NewServer()\n  pb.RegisterMoneyTransactionServer(s, &server{})\n  reflection.Register(s)\n  if err := s.Serve(lis); err != nil {\n    log.Fatalf(\"Failed to serve: %v\", err)\n  }\n}\n```", "```go\npackage main\n\nimport (\n  \"log\"\n\n  pb \"github.com/git-user/chapter6/grpcExample/protofiles\"\n  \"golang.org/x/net/context\"\n  \"google.golang.org/grpc\"\n)\n\nconst (\n  address = \"localhost:50051\"\n)\n\nfunc main() {\n  // Set up a connection to the server.\n  conn, err := grpc.Dial(address, grpc.WithInsecure())\n  ...\n  // Create a client\n  c := pb.NewMoneyTransactionClient(conn)\n\n  from := \"1234\"\n  to := \"5678\"\n  amount := float32(1250.75)\n\n  // Make a server request.\n  r, err := c.MakeTransaction(context.Background(),\n  &pb.TransactionRequest{From: from,\n    To: to, Amount: amount})\n  ...\n}\n```", "```go\n&pb.TransactionRequest{From: from, To: to, Amount: amount}\n```", "```go\ngo run $GOPATH/src/github.com/git-user/chapter6/grpcExample/grpcServer/\nserver.go\n```", "```go\ngo run $GOPATH/src/github.com/git-user/chapter6/grpcExample/grpcClient/\nclient.go\n```", "```go\n2020/01/10 19:13:16 Transaction confirmed: true\n```", "```go\n2020/01/10 19:13:16 Amount: 1250.750000, From A/c:1234, To A/c:5678\n```", "```go\nmkdir -r $GOPATH/src/github.com/git-user/chapter6/serverPush\nmkdir -r $GOPATH/src/github.com/git-user/chapter6/serverPush/\nprotofiles\n```", "```go\nsyntax = \"proto3\";\npackage protofiles;\n\nmessage TransactionRequest {\n   string from = 1;\n   string to = 2;\n   float amount = 3;\n}\n\nmessage TransactionResponse {\n  string status = 1;\n  int32 step = 2;\n  string description = 3;\n}\n\nservice MoneyTransaction {\n    rpc MakeTransaction(TransactionRequest) returns (stream\n     TransactionResponse) {}\n}\n```", "```go\nrpc MakeTransaction(TransactionRequest) returns (stream TransactionResponse) {}\n```", "```go\nprotoc -I protofiles/ protofiles/transaction.proto \n --go_out=plugins=grpc:protofiles\n```", "```go\nmkdir $GOPATH/src/github.com/git-user/chapter6/serverPush/\ngrpcServer\ntouch $GOPATH/src/github.com/git-user/chapter6/serverPush/\ngrpcServer/server.go\n```", "```go\nconst (\n  port = \":50051\"\n  noOfSteps = 3\n)\n\n// MakeTransaction implements MoneyTransactionServer.MakeTransaction\nfunc (s *server) MakeTransaction(in *pb.TransactionRequest, stream pb.MoneyTransaction_MakeTransactionServer) error {\n  log.Printf(\"Got request for money transfer....\")\n  log.Printf(\"Amount: $%f, From A/c:%s, To A/c:%s\", in.Amount,\n   in.From, in.To)\n  // Send streams here\n  for i := 0; i < noOfSteps; i++ {\n    time.Sleep(time.Second * 2)\n    // Once task is done, send the successful message\n    // back to the client\n    if err := stream.Send(&pb.TransactionResponse{Status: \"good\",\n      Step: int32(i),\n      Description: fmt.Sprintf(\"Performing step %d\",\n       int32(i))}); err != nil {\n      log.Fatalf(\"%v.Send(%v) = %v\", stream, \"status\", err)\n    }\n  }\n  log.Printf(\"Successfully transferred amount $%v from %v to %v\",\n   in.Amount, in.From, in.To)\n  return nil\n}\n```", "```go\nstream.Send()\n```", "```go\nmkdir $GOPATH/src/github.com/git-user/chapter6/serverPush/\ngrpcClient\ntouch $GOPATH/src/github.com/git-user/chapter6/serverPush/\ngrpcClient/cilent.go\n```", "```go\n// ReceiveStream listens to the stream contents and use them\nfunc ReceiveStream(client pb.MoneyTransactionClient,\n request *pb.TransactionRequest) {\n  log.Println(\"Started listening to the server stream!\")\n  stream, err := client.MakeTransaction(context.Background(),\n   request)\n  if err != nil {\n    log.Fatalf(\"%v.MakeTransaction(_) = _, %v\", client, err)\n  }\n  // Listen to the stream of messages\n  for {\n    response, err := stream.Recv()\n    if err == io.EOF {\n      // If there are no more messages, get out of loop\n      break\n    }\n    if err != nil {\n      log.Fatalf(\"%v.MakeTransaction(_) = _, %v\", client, err)\n    }\n    log.Printf(\"Status: %v, Operation: %v\", response.Status,\n     response.Description)\n  }\n}\n```", "```go\ngo run $GOPATH/src/github.com/git-user/chapter6/serverPush/\ngrpcServer/server.go\n```", "```go\ngo run $GOPATH/src/github.com/git-user/chapter6/serverPush/\ngrpcClient/client.go\n```", "```go\n2019/06/10 20:43:53 Started listening to the server stream!\n2019/06/10 20:43:55 Status: good, Operation: Performing step 0\n2019/06/10 20:43:57 Status: good, Operation: Performing step 1\n2019/06/10 20:43:59 Status: good, Operation: Performing step 2\n```", "```go\n2017/07/16 15:08:15 Got request for money Transfer....\n2017/07/16 15:08:15 Amount: $1250.750000, From A/c:1234, To A/c:5678\n2017/07/16 15:08:21 Successfully transferred amount $1250.75 from 1234 to 5678\n```"]