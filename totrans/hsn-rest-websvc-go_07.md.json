["```go\ndocker pull postgres:10.8\n```", "```go\ndocker images\n```", "```go\ndocker run --name postgres-local -p 5432:5432 -v ~/.postgres-data:/var/lib/postgresql/data  -e POSTGRES_PASSWORD=YOUR_PASSWORD -d postgres:10.8\n```", "```go\nsudo su postgres\n```", "```go\npsql\n```", "```go\ndocker exec -i -t postgres-local-1 psql -U postgres\n```", "```go\n\\du - List roles\n```", "```go\npostgres  | Superuser, Create role, Create DB, Replication, Bypass RLS\n```", "```go\nCREATE ROLE git-user with LOGIN PASSWORD 'YOUR_PASSWORD'; # Caution: Choose strong password here \n```", "```go\nALTER USER gituser CREATEDB, CREATEROLE;\n```", "```go\nDROP ROLE git-user;\n```", "```go\nCREATE DATABASE mydb;\n```", "```go\nCREATE TABLE products (\n    product_no integer,\n    name text,\n    price numeric\n);\n```", "```go\nINSERT INTO products VALUES (1, 'Rice', 5.99);\n```", "```go\nUPDATE products SET price = 10 WHERE price = 5.99;\n```", "```go\nDELETE FROM products WHERE price = 5.99;\n```", "```go\ngo get github.com/lib/pq\n```", "```go\ntouch -p $GOPATH/src/github.com/git-user/chapter7/basicExample\n```", "```go\ndep init\ndep ensure --add github.com/lib/pq\n```", "```go\nCREATE DATABASE mydb;\n```", "```go\nmkdir $GOPATH/src/github.com/git-user/chapter7/basicExample/helper\n```", "```go\npackage helper\n\nimport (\n  \"database/sql\"\n  \"fmt\"\n  \"log\"\n\n  _ \"github.com/lib/pq\" // sql behavior modified\n)\n```", "```go\nconst (\n  host = \"127.0.0.1\"\n  port = 5432\n  user = \"git-user\"\n  password = \"YOUR_PASSWORD\"\n  dbname = \"mydb\"\n)\n```", "```go\nfunc InitDB() (*sql.DB, error) {\n    var connectionString = fmt.Sprintf(\"host=%s port=%d user=%s \"+\n        \"password=%s dbname=%s sslmode=disable\",\n        host, port, user, password, dbname)\n\n    var err error\n    db, err := sql.Open(\"postgres\", connectionString)\n\n    if err != nil {\n        return nil, err\n    }\n\n    stmt, err := db.Prepare(\"CREATE TABLE IF NOT EXISTS web_url(ID SERIAL PRIMARY KEY, URL TEXT NOT NULL);\")\n\n    if err != nil {\n        return nil, err\n    }\n\n    _, err = stmt.Exec()\n\n    if err != nil {\n        return nil, err\n    }\n\n    return db, nil\n}\n```", "```go\nmkdir $GOPATH/src/github.com/git-user/chapter7/basicExample/main.go\n```", "```go\npackage main\n\nimport (\n    \"log\"\n\n    \"github.com/git-user/chapter7/basicExample/helper\"\n)\n\nfunc main() {\n    _, err := helper.InitDB()\n    if err != nil {\n        log.Println(err)\n    }\n\n    log.Println(\"Database tables are successfully initialized.\")\n}\n```", "```go\ngo run main.go\n\n2020/02/13 22:15:34 Database tables are successfully initialized.\n```", "```go\n\\c mydb \\dt\n```", "```go\nYou are now connected to database \"mydb\" as user \"postgres\".\n List of relations\n Schema | Name | Type | Owner\n--------+---------+-------+-------\n public | web_url | table | user\n(1 row)\n```", "```go\nmkdir $GOPATH/src/github.com/git-user/chapter7/base62Example\n```", "```go\nmkdir $GOPATH/src/github.com/git-user/chapter7/base62Example/base62 touch $GOPATH/src/github.com/git-user/chapter7/base62Example/base62\n/encodeutils.go\n```", "```go\npackage base62\n\nimport (\n     \"math\"\n     \"strings\"\n)\n\nconst base = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nconst b = 62\n\n// Function encodes the given database ID to a base62 string\nfunc ToBase62(num int) string{\n    r := num % b\n    res := string(base[r])\n    div := num / b\n    q := int(math.Floor(float64(div)))\n\n    for q != 0 {\n        r = q % b\n        temp := q / b\n        q = int(math.Floor(float64(temp)))\n        res = string(base[int(r)]) + res\n    }\n\n    return string(res)\n}\n\n// Function decodes a given base62 string to database ID\nfunc ToBase10(str string) int{\n    res := 0\n    for _, r := range str {\n        res = (b * res) + strings.Index(base, string(r))\n    }\n    return res\n}\n```", "```go\nvi $GOPATH/src/github.com/git-user/chapter7/base62Example/base62/usebase62.go\n```", "```go\npackage main\n\nimport (\n  \"log\"\n\n  \"github.com/git-user/chapter7/base62Example/base62\"\n)\n\nfunc main() {\n  x := 100\n  base62String := base62.ToBase62(x)\n  log.Println(base62String)\n  normalNumber := base62.ToBase10(base62String)\n  log.Println(normalNumber)\n}\n```", "```go\ngo run usebase62.go\n```", "```go\n2020/02/14 21:24:43 1C\n2020/02/14 21:24:43 100\n```", "```go\nurlshortener\n├── main.go\n├── helper\n│   └── models.go\n└── utils\n └── encodeutils.go\n\n2 directories, 3 files\n```", "```go\ntype DBClient struct {\n  db *sql.DB\n}\n\ntype Record struct {\n  ID int `json:\"id\"`\n  URL string `json:\"url\"`\n}\n```", "```go\nfunc main() {\n  db, err := models.InitDB()\n  if err != nil {\n    panic(err)\n  }\n  dbclient := &DBClient{db: db}\n  if err != nil {\n    panic(err)\n  }\n  defer db.Close()\n  // Create a new router\n  r := mux.NewRouter()\n  // Attach an elegant path with handler\n  r.HandleFunc(\"/v1/short/{encoded_string:[a-zA-Z0-9]*}\",\n   dbclient.GetOriginalURL).Methods(\"GET\")\n  r.HandleFunc(\"/v1/short\",\n   dbclient.GenerateShortURL).Methods(\"POST\")\n  srv := &http.Server{\n    Handler: r,\n    Addr: \"127.0.0.1:8000\",\n    // Good practice: enforce timeouts for servers you create!\n    WriteTimeout: 15 * time.Second,\n    ReadTimeout: 15 * time.Second,\n  }\n  log.Fatal(srv.ListenAndServe())\n}\n```", "```go\n// GenerateShortURL adds URL to DB and gives back shortened string\nfunc (driver *DBClient) GenerateShortURL(w http.ResponseWriter,\nr *http.Request) {\n    var id int\n    var record Record\n    postBody, _ := ioutil.ReadAll(r.Body)\n    err := json.Unmarshal(postBody, &record)\n    err = driver.db.QueryRow(\"INSERT INTO web_url(url)\n     VALUES($1) RETURNING id\", record.URL).Scan(&id)\n    responseMap := map[string]string{\"encoded_string\":\n     base62.ToBase62(id)}\n\n    if err != nil {\n        w.WriteHeader(http.StatusInternalServerError)\n        w.Write([]byte(err.Error()))\n    } else {\n        w.WriteHeader(http.StatusOK)\n        w.Header().Set(\"Content-Type\", \"application/json\")\n        response, _ := json.Marshal(responseMap)\n        w.Write(response)\n    }\n}\n```", "```go\n// GetOriginalURL fetches the original URL for the given encoded(short) string\nfunc (driver *DBClient) GetOriginalURL(w http.ResponseWriter,\nr *http.Request) {\n    var url string\n    vars := mux.Vars(r)\n    // Get ID from base62 string\n    id := base62.ToBase10(vars[\"encoded_string\"])\n    err := driver.db.QueryRow(\"SELECT url FROM web_url\n     WHERE id = $1\", id).Scan(&url)\n    // Handle response details\n    if err != nil {\n        w.WriteHeader(http.StatusInternalServerError)\n        w.Write([]byte(err.Error()))\n    } else {\n        w.WriteHeader(http.StatusOK)\n        w.Header().Set(\"Content-Type\", \"application/json\")\n        responseMap := map[string]interface{}{\"url\": url}\n        response, _ := json.Marshal(responseMap)\n        w.Write(response)\n    }\n}\n```", "```go\ngo run $GOPATH/src/github.com/git-user/chapter7/urlshortener/main.go\n```", "```go\ngo install $GOPATH/src/github.com/git-user/chapter7/urlshortener/main.go\n```", "```go\n./urlshortener\n```", "```go\ncurl -X POST \\\n http://localhost:8000/v1/short \\\n -H 'cache-control: no-cache' \\\n -H 'content-type: application/json' \\\n -d '{\n \"url\": \"https://www.packtpub.com/eu/game-development/unreal-engine-4-shaders-and-effects-cookbook\"\n}'\n```", "```go\n{\n  \"encoded_string\": \"1\"\n}\n```", "```go\ncurl -X GET http://localhost:8000/v1/short/1\n```", "```go\n{\n\"url\":\"https://www.packtpub.com/eu/game-development/unreal-engine-4-shaders-and-effects-cookbook\"\n}\n```", "```go\nmkdir jsonstore\nmkdir jsonstore/helper\ntouch jsonstore/helper/models.go\n```", "```go\ndep init\ndep ensure --add \"github.com/gorilla/mux\" \"github.com/jinzhu/gorm\" \"github.com/lib/pq\"\n```", "```go\npackage helper\n\nimport (\n  \"github.com/jinzhu/gorm\"\n  _ \"github.com/lib/pq\"\n)\n\ntype Shipment struct {\n  gorm.Model\n  Packages []Package\n  Data string `sql:\"type:JSONB NOT NULL DEFAULT '{}'::JSONB\" json:\"-\"`\n}\n\ntype Package struct {\n  gorm.Model\n  Data string `sql:\"type:JSONB NOT NULL DEFAULT '{}'::JSONB\"`\n}\n\n// GORM creates tables with plural names.\n// Use this to suppress it\nfunc (Shipment) TableName() string {\n  return \"Shipment\"\n}\n\nfunc (Package) TableName() string {\n  return \"Package\"\n}\n\n```", "```go\nfunc InitDB() (*gorm.DB, error) {\n  var err error\n  db, err := gorm.Open(\"postgres\",\n   \"postgres://git-user:YOUR_PASSWORD@\n   localhost/mydb?sslmode=disable\")\n  if err != nil {\n    return nil, err\n  }\n  db.AutoMigrate(&Shipment{}, &Package{})\n  return db, nil\n}\n```", "```go\ntouch jsonstore/main.go\n```", "```go\ntype DBClient struct {\n    db *gorm.DB\n}\n\nfunc main(){\n  ...\n  db, err := models.InitDB()\n  dbclient := &DBClient{db: db}\n\n  r.HandleFunc(\"/v1/package/{id:[a-zA-Z0-9]*}\",\n   dbclient.GetPackage).Methods(\"GET\")\n  r.HandleFunc(\"/v1/package\",\n   dbclient.PostPackage).Methods(\"POST\")\n  r.HandleFunc(\"/v1/package\",\n   dbclient.GetPackagesbyWeight).Methods(\"GET\")\n  ...\n}\n```", "```go\n// PostPackage saves the package information\nfunc (driver *DBClient) PostPackage(w http.ResponseWriter,\n r *http.Request) {\n  var Package = models.Package{}\n  postBody, _ := ioutil.ReadAll(r.Body)\n  Package.Data = string(postBody)\n  driver.db.Save(&Package)\n  responseMap := map[string]interface{}{\"id\": Package.ID}\n  w.Header().Set(\"Content-Type\", \"application/json\")\n  response, _ := json.Marshal(responseMap)\n  w.Write(response)\n}\n```", "```go\ndriver.db.Save(&Package)\n```", "```go\ntype PackageResponse struct {\n    Package helper.Package `json:\"Package\"`\n}\n\n// GetPackage fetches the original URL for the given\n// encoded(short) string\nfunc (driver *DBClient) GetPackage(w http.ResponseWriter,\nr *http.Request) {\n  var Package = models.Package{}\n  vars := mux.Vars(r)\n\n  driver.db.First(&Package, vars[\"id\"])\n  var PackageData interface{}\n\n  json.Unmarshal([]byte(Package.Data), &PackageData)\n  var response = PackageResponse{Package: Package}\n  w.WriteHeader(http.StatusOK)\n  w.Header().Set(\"Content-Type\", \"application/json\")\n  respJSON, _ := json.Marshal(response)\n  w.Write(respJSON)\n}\n```", "```go\ndriver.db.First(&Package, vars[\"id\"])\n```", "```go\n// GetPackagesbyWeight fetches all packages with given weight\nfunc (driver *DBClient) GetPackagesbyWeight(w http.ResponseWriter, r *http.Request) {\n  var packages []models.Package\n  weight := r.FormValue(\"weight\")\n  // Handle response details\n  var query = \"select * from \\\"Package\\\" where data->>'weight'=?\"\n  driver.db.Raw(query, weight).Scan(&packages)\n  w.WriteHeader(http.StatusOK)\n  w.Header().Set(\"Content-Type\", \"application/json\")\n  respJSON, _ := json.Marshal(packages)\n  w.Write(respJSON)\n}\n```", "```go\ngo run jsonstore/main.go\n```", "```go\ncurl -X POST \\\n  http://localhost:8000/v1/package \\\n  -H 'cache-control: no-cache' \\\n  -H 'content-type: application/json' \\\n  -d '{\n      \"dimensions\": {\n       \"width\": 21,\n        \"height\": 12\n      },\n      \"weight\": 10,\n      \"is_damaged\": false,\n      \"status\": \"In transit\"\n     }'\n```", "```go\n{\n  \"id\": 1\n}\n```", "```go\ncurl -X GET http://localhost:8000/v1/package/1 \n```", "```go\n{\"Package\":{\"ID\":1,\"CreatedAt\":\"2020-02-15T11:14:52.859073Z\",\"UpdatedAt\":\"2020-02-15T11:14:52.859073Z\",\"DeletedAt\":null,\"Data\":\"{\\\"status\\\": \\\"In transit\\\", \\\"weight\\\": 10, \\\"dimensions\\\": {\\\"width\\\": 21, \\\"height\\\": 12}, \\\"is_damaged\\\": false}\"}}\n```", "```go\ncurl -X GET 'http://localhost:8000/v1/package?weight=10'\n```", "```go\n[{\"ID\":1,\"CreatedAt\":\"2020-02-15T11:14:52.859073Z\",\"UpdatedAt\":\"2020-02-15T11:14:52.859073Z\",\"DeletedAt\":null,\"Data\":\"{\\\"status\\\": \\\"In transit\\\", \\\"weight\\\": 10, \\\"dimensions\\\": {\\\"width\\\": 21, \\\"height\\\": 12}, \\\"is_damaged\\\": false}\"}]\n```"]