["```go\n{\n  'product': 'shoe',\n  'cost': '20$',\n  'link': 'http://example-product/1',\n  'image': 'http://example-image.com'\n  'shipping_address': 'some_square, Germany'\n}\n```", "```go\n{\n  'product': 'shoe',\n  'cost': '20$',\n  'link': 'http://example-product/1',\n  'image': 'http://example-image.com'\n  'related_products': ['sports_band']\n}\n```", "```go\n{\n  \"login\": \"octocat\",\n  \"id\": 1,\n  \"node_id\": \"MDQ6VXNlcjE=\",\n  \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n  \"gravatar_id\": \"\",\n  \"url\": \"https://api.github.com/users/octocat\",\n  \"html_url\": \"https://github.com/octocat\",\n  \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n  \"following_url\":\n    \"https://api.github.com/users/octocat/following{/other_user}\",\n  \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n  \"starred_url\":\n    \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n  \"subscriptions_url\":\n    \"https://api.github.com/users/octocat/subscriptions\",\n  \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n  \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n  \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n  \"received_events_url\":\n    \"https://api.github.com/users/octocat/received_events\",\n  \"type\": \"User\",\n  \"site_admin\": false,\n  \"name\": \"monalisa octocat\",\n  \"company\": \"GitHub\",\n  \"blog\": \"https://github.com/blog\",\n  \"location\": \"San Francisco\",\n  \"email\": \"octocat@github.com\",\n  \"hireable\": false,\n  \"bio\": \"There once was...\",\n  \"public_repos\": 2,\n  \"public_gists\": 1,\n  \"followers\": 20,\n  \"following\": 0,\n  \"created_at\": \"2008-01-14T04:33:35Z\",\n  \"updated_at\": \"2008-01-14T04:33:35Z\",\n  \"private_gists\": 81,\n  \"total_private_repos\": 100,\n  \"owned_private_repos\": 100,\n  \"disk_usage\": 10000,\n  \"collaborators\": 8,\n  \"two_factor_authentication\": true,\n  \"plan\": {\n    \"name\": \"Medium\",\n    \"space\": 400,\n    \"private_repos\": 20,\n    \"collaborators\": 0\n  }\n}\n```", "```go\n\"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n```", "```go\ntype Query {\n  user: Person\n}\n\ntype Person {\n  name: String,\n  address: [Address]\n}\n\ntype Address {\n  city: String,\n  street: String,\n  postalCode: Float\n}\n```", "```go\n{\n  user {\n    name\n    address {\n      city\n      street\n      postalCode\n    }\n  }\n}\n```", "```go\n{\n  \"data\": {\n    \"user\": {\n      \"name\": \"alice\",\n      \"address\": [{\n        \"city\": \"Munich\",\n        \"street\": \"Marianplatz\",\n        \"postalCode\": \"80331\"\n      }]\n    }\n  }\n}\n```", "```go\n{\n  user {\n    name\n  }\n}\n```", "```go\n{\n  \"data\": {\n    \"user\": {\n      \"name\": \"alice\"\n    }\n  }\n}\n```", "```go\ntype Query {\n  user: Person\n}\n```", "```go\ntype Person {\n name: String,\n address: [Address]\n}\n```", "```go\ntype Person {\n  name: String,\n  address: [Address]\n}\n```", "```go\ntype Person {\n  name: String!,\n  address: [Address]\n}\n```", "```go\naddress: [Address]!\n```", "```go\naddress: [Address!]!\n```", "```go\ntype Query {\n  vehicle: Vehicle\n}\n\nenum Vehicle {\n  Car\n  Bus\n}\n\ntype Car {\n  name: String,\n  wheels: Int\n}\n\ntype Bus {\n  name: String,\n  wheels: Int\n}\n```", "```go\n{\n  user {\n    name\n    address {\n      street\n    }\n  }\n}\n```", "```go\n{\n  user {\n    name(name: \"alice\")\n    address {\n      city\n      street\n    }\n  }\n}\n```", "```go\n{\n  user(name: \"alice\"){\n    name\n    address(city: \"Munich\") {\n     city \n     street\n   }\n}\n```", "```go\ntype Query {\n  counter: Count\n}\n\ntype Count {\n  id: Int\n  value: Int\n}\n```", "```go\n{\n  counter(id: \"250\") {\n    value\n  }\n}\n```", "```go\n{\n  \"data\": {\n    \"counter\": {\n      \"value\": 1  \n    }\n  }\n}\n```", "```go\ninput CounterInput {\n  value: Int\n}\n```", "```go\ntype Mutation {\n  updateCounter(id: Int!, input: CounterInput)\n}\n```", "```go\ninput CounterInput {\n  value: Int\n}\n\ntype Query {\n  getCounter(id: Int!): Count\n}\n\ntype Count {\n  id: Int\n  value: Int\n}\n\ntype Mutation {\n  updateCounter(id: Int!, input: CounterInput)\n}\n```", "```go\nmutation {\n  updateCounter(id: \"250\", CounterInput: {value: 2}) {\n    id\n    value\n  }\n}\n```", "```go\ndep ensure -add github.com/machinebox/graphql\n```", "```go\nmkdir -p $GOPATH/src/github.com/git-user/chapter10/graphqlClient touch $GOPATH/src/github.com/git-user/chapter10/graphqlClient/main.go\n```", "```go\npackage main\n\nimport (\n    \"context\"\n    \"log\"\n    \"os\"\n\n    \"github.com/machinebox/graphql\"\n)\n```", "```go\ndep init\ndep ensure -add github.com/machinebox/graphql\n```", "```go\n{\n  \"data\": {\n    \"license\": {\n      \"name\": \"string\",\n      \"description\": \"string\"\n    }\n  }\n}\n```", "```go\n// Response of API\ntype Response struct {\n    License struct {\n        Name        string `json:\"name\"`\n        Description string `json:\"description\"`\n    } `json:\"license\"`\n}\n```", "```go\nfunc main() {\n    // create a client (safe to share across requests)\n    client := graphql.NewClient(\"https://api.github.com/graphql\")\n\n    // make a request to GitHub API\n    req := graphql.NewRequest(`\n        query {\n            license(key: \"apache-2.0\") {\n                name\n                description\n            }\n        }\n    `)\n    // Next code goes here....\n}\n```", "```go\nAuthorization: 'bearer' + personal_access_token\n```", "```go\n    var GithubToken = os.Getenv(\"GITHUB_TOKEN\")\n    req.Header.Add(\"Authorization\", \"bearer \"+GithubToken)\n```", "```go\n    // define a Context for the request\n    ctx := context.Background()\n\n    // run it and capture the response\n    var respData Response\n    if err := client.Run(ctx, req, &respData); err != nil {\n        log.Fatal(err)\n    }\n    log.Println(respData.License.Description)\n```", "```go\ngo run github.com/git-user/chapter10/graphqlClient/main.go\n```", "```go\n2019/12/15 23:16:25 A permissive license whose main conditions require preservation of copyright and license notices. Contributors provide an express grant of patent rights. Licensed works, modifications, and larger works may be distributed under different terms and without source code.\n```", "```go\nquery {\n  players {\n    highScore\n    id\n    isOnline\n    levelsUnlocked\n  }\n}\n```", "```go\nmkdir -p $GOPATH/src/github.com/git-user/chapter10/graphqlServer touch $GOPATH/src/github.com/git-user/chapter10/graphqlServer/\nmain.go\n```", "```go\ndep init\ndep ensure -add \"github.com/graphql-go/graphql\"\ndep ensure -add \"github.com/graphql-go/handler\"\n```", "```go\nimport (\n    \"net/http\"\n\n    \"github.com/graphql-go/graphql\"\n    \"github.com/graphql-go/handler\"\n)\n```", "```go\n// Player holds player response\ntype Player struct {\n    ID             int      `json:\"int\"`\n    Name           string   `json:\"name\"`\n    HighScore      int      `json:\"highScore\"`\n    IsOnline       bool     `json:\"isOnline\"`\n    Location       string   `json:\"location\"`\n    LevelsUnlocked []string `json:\"levelsUnlocked\"`\n}\n\nvar players = []Player{\n    Player{ID: 123, Name: \"Pablo\", HighScore: 1100, IsOnline: true,\n     Location: \"Italy\"},\n    Player{ID: 230, Name: \"Dora\", HighScore: 2100, IsOnline: false,\n     Location: \"Germany\"},\n}\n```", "```go\nvar playerObject = graphql.NewObject(\n    graphql.ObjectConfig{\n        Name: \"Player\",\n        Fields: graphql.Fields{\n            \"id\": &graphql.Field{\n                Type: graphql.Int,\n            },\n            \"name\": &graphql.Field{\n                Type: graphql.String,\n            },\n            \"highScore\": &graphql.Field{\n                Type: graphql.String,\n            },\n            \"isOnline\": &graphql.Field{\n                Type: graphql.Boolean,\n            },\n            \"location\": &graphql.Field{\n                Type: graphql.String,\n            },\n            \"levelsUnlocked\": &graphql.Field{\n                Type: graphql.NewList(graphql.String),\n            },\n        },\n    },\n)\n```", "```go\nfunc main() {\n    // Schema\n    fields := graphql.Fields{\n        \"players\": &graphql.Field{\n            Type:        graphql.NewList(playerObject),\n            Description: \"All players\",\n            Resolve: func(p graphql.ResolveParams) (interface{},\n             error) {\n                return players, nil\n            },\n        },\n    }\n    rootQuery := graphql.ObjectConfig{Name: \"RootQuery\",\n     Fields: fields}\n    schemaConfig := graphql.SchemaConfig{Query:\n     graphql.NewObject(rootQuery)}\n    schema, _ := graphql.NewSchema(schemaConfig)\n    ...\n}\n```", "```go\n    h := handler.New(&handler.Config{\n        Schema:   &schema,\n        Pretty:   true,\n        GraphiQL: true,\n    })\n\n    http.Handle(\"/graphql\", h)\n    http.ListenAndServe(\":8000\", nil)\n```", "```go\ngo run $GOPATH/src/github.com/git-user/chapter10/graphqlServer/\nmain.go\n```", "```go\nquery {\n  players {\n    highScore\n    id\n    isOnline\n    levelsUnlocked\n  }\n}\n```", "```go\n{\n  \"data\": {\n    \"players\": [\n      {\n        \"highScore\": \"1100\",\n        \"id\": 123,\n        \"isOnline\": true,\n        \"levelsUnlocked\": []\n      },\n      {\n        \"highScore\": \"2100\",\n        \"id\": 230,\n        \"isOnline\": false,\n        \"levelsUnlocked\": []\n      }\n    ]\n  }\n}\n```"]