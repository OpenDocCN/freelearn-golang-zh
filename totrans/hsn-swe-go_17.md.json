["```go\n# Incrementing a statsd counter \necho \"requests:1|c\" | nc statsd.local 8125\n\n# Incrementing a graphite counter \necho \"requests 1 `date +%s`\" | nc graphite.local 2003\n```", "```go\nstatic_configs:\n - targets:\n - \"host1\"\n - \"host2\"\n labels:\n service: \"my-service\"\n```", "```go\nfile_sd_configs:\n - files:\n - config.yaml\n refresh_interval: \"5m\"\n```", "```go\nec2_sd_configs:\n # omitted: EC2 access keys (see prometheus documentation)\n relabel_configs:\n - source_labels: [\"__meta_ec2_tag_scrape\"]\n regex: \"true\"\n action: \"keep\"\n```", "```go\nkubernetes_sd_configs:\n # omitted: credentials and endpoints for accessing k8s (see prometheus documentation)\n - role: endpoints\n relabel_configs:\n - source_labels: [\"__meta_kubernetes_service_annotation_**prometheus_scrape**\"]\n action: \"keep\"\n regex: \"true\"\n```", "```go\ngo get -u github.com/prometheus/client_golang/prometheus/...\n```", "```go\nnumReqs := promauto.NewCounter(prometheus.CounterOpts{\n Name: \"app_reqs_total\",\n Help: \"The total number of incoming requests\",\n})\n\n// Increment the counter.\nnumReqs.Inc()\n\n// Add a value to the counter.\nnumReqs.Add(42)\n```", "```go\nqueueLen := promauto.NewGauge(prometheus.GaugeOpts{\n Name: \"app_queue_len_total\",\n Help: \"Total number of items in the queue.\",\n})\n\n// Add items to the queue\nqueueLen.Inc()\nqueueLen.Add(42)\n\n// Remove items from the queue\nqueueLen.Sub(42)\nqueueLen.Dec()\n```", "```go\nreqTimes := promauto.NewHistogram(prometheus.HistogramOpts{\n Name:    \"app_response_times\",\n Help:    \"Distribution of application response times.\",\n Buckets: prometheus.LinearBuckets(0, 100, 20),\n})\n\n// Record a response time of 100ms\nreqTimes.Observe(100)\n```", "```go\nregCountVec := promauto.NewCounterVec(\n prometheus.CounterOpts{\n Name: \"app_registrations_total\",\n Help: \"Total number of registrations by A/B test layout.\",\n },\n []string{\"layout\"},\n)\n\nregCountVec.WithLabelValues(\"a\").Inc()\n```", "```go\nfunc main() {\n // Create a prometheus counter to keep track of ping requests.\n numPings := promauto.NewCounter(prometheus.CounterOpts{\n Name: \"pingapp_pings_total\",\n Help: \"The total number of incoming ping requests\",\n })\n\n http.Handle(\"/metrics\", promhttp.Handler())\n http.Handle(\"/ping\", http.HandlerFunc(func(w http.ResponseWriter, _ *http.Request) {\n numPings.Inc()\n w.Write([]byte(\"pong!\\n\"))\n }))\n\n log.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n```", "```go\ndocker run -d \\\n  -p 3000:3000 \\\n  --name=grafana \\\n  -e \"GF_SECURITY_ADMIN_USER=admin\" \\\n  -e \"GF_SECURITY_ADMIN_PASSWORD=secret\" \\\n  grafana/grafana\n```", "```go\n# prometheus.yml\n\nglobal:\n scrape_interval:     15s\n\nrule_files:\n - 'alerts/*.yml'\n```", "```go\ngroups:\n- name: example\n rules:\n - alert: InstanceDown\n expr: up == 0\n for: 5m\n labels:\n severity: page\n annotations:\n playbook: \"https://sre.linkrus.com/playbooks/instance-down\"\n```", "```go\nsource_match:\n [ <labelname>: <labelvalue>, ... ]\nsource_match_re:\n [ <labelname>: <regex>, ... ]\n\ntarget_match:\n [ <labelname>: <labelvalue>, ... ]\ntarget_match_re:\n [ <labelname>: <regex>, ... ]\n\n[ equal: '[' <labelname>, ... ']' ]\n```", "```go\ninhibit_rules:\n - source_match:\n alertname: Weekend\n target_match_re:\n alertname: '*'\n```", "```go\nname: <string>\nemail_configs:\n [ - <email_config>, ... ]\npagerduty_configs:\n [ - <pagerduty_config>, ... ]\nslack_configs:\n [ - <slack_config>, ... ]\nopsgenie_configs:\n [ - <opsgenie_config>, ... ]\nwebhook_configs:\n [ - <webhook_config>, ... ]\n# omitted for brevity: configs for additional integrations\n```", "```go\nroute:\n receiver: 'default'\n # All alerts that do not match the following child routes\n # will remain at the root node and be dispatched to 'default-receiver'.\n routes:\n - receiver: 'page-SRE-on-call'\n match_re:\n service: cockroachdb|cassandra\n - receiver: 'notify-ops-channel-on-slack'\n group_by: [environment]\n match:\n team: backend\n\nreceivers:\n # omitted: receiver definitions\n```"]