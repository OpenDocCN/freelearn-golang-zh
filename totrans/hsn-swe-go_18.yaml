- en: Epilogue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, I would like to congratulate you on completing this book and
    extend to you a big thanks for taking the time to read every single chapter up
    to the very end. I sincerely hope that you had as much pleasure reading this book
    as I had writing it and that you can take some of the principles and concepts
    that we discussed through these pages and apply them to your current and future
    Go projects.
  prefs: []
  type: TYPE_NORMAL
- en: Having said that, I have a small favor to ask of you. Should you locate any
    errors either in the content of this book or the accompanying code, please don't
    hesitate to reach out and let me know. What's more, I would certainly love hearing
    your thoughts on the topics that were addressed in this book! You can contact
    me either via Packt Publishing or through this book's GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are up to the challenge, here is a list with a few interesting ideas
    that you can try next to further your understanding of both this book''s material
    and its accompanying code:'
  prefs: []
  type: TYPE_NORMAL
- en: Support crawling for dynamic pages that render their content with the help of
    JavaScript frameworks such as React, Vue, and so on. Add a headless browser to
    the mix so that the crawler can execute JavaScript code and process the content
    of the rendered page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduce the impact of the crawler component on remote servers. Modify the link
    submission page of the frontend so that webmasters can specify a preferred time
    window for crawling a particular domain. Then, update the crawler implementation
    to take this information into account when scheduling the refresh interval for
    each individual link.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the crawler to recognize and honor the contents of `robots.txt` files
    when deciding whether to crawl links from a particular domain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Leverage the `bspgraph` package from [Chapter 8](c505ec2d-0bd8-4edd-97e1-d06de2b326a5.xhtml),
    *Graph-Based Data Processing*,Â to implement other popular graph-based algorithms
    and then execute them in a distributed fashion by switching your code so that
    it uses the `dbspgraph` package from [Chapter 12](67abdf43-7d4c-4bff-a17e-b23d0a900759.xhtml),
    *Building Distributed Graph-Processing Systems*. If you are unsure of where to
    start, try implementing one of the following algorithms:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check whether a graph is bipartite.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Determine whether a graph contains a Hamiltonian cycle.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Detect whether a directed graph contains cycles.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add support for checkpoints to the `dbspgraph` package's implementation. After
    a configurable number of super-steps, the master node should ask every worker
    to create a checkpoint of their current state. If a worker crashes, the master
    should then instruct workers to load their state from the last known checkpoint,
    redistribute the UUID ranges among the remaining workers, and resume the execution
    of the computation job.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
