["```go\ntype ContentProvider interface {\n Content() string\n}\n\ntype ECDADocumentSigner struct {//...}\n\nfunc (s ECDADocumentSigner) Sign(pk *ecdsa.PrivateKey, contentProvider ContentProvider) (string, error) { //... }\n```", "```go\ntype Processor interface {\n Process(context.Context, Payload) (Payload, error)\n}\n```", "```go\nfunc makeErrorLoggingProcessor(proc Processor, logger *logrus.Logger) Processor {\n return ProcessorFunc(func(ctx context.Context, p Payload) (Payload, error) {\n out, err := proc.Process(ctx, p)\n if err != nil {\n logger.Error(err)\n }\n return out, err\n })\n}\n```", "```go\ntype MinInt64Aggregator struct {\n mu       sync.Mutex\n minValue *int64\n}\nfunc (a *MinInt64Aggregator) Aggregate(v interface{}) {\n a.mu.Lock()\n if intV := v.(int64); a.minValue == nil || intV < *a.minValue {\n a.minValue = &intV\n }\n a.mu.Unlock()\n}\nfunc (a *MinInt64Aggregator) Set(v interface{}) {\n a.mu.Lock()\n intV := v.(int64)\n a.minValue = &intV\n a.mu.Unlock()\n}\nfunc (a *MinInt64Aggregator) Get() interface{} {\n a.mu.Lock()\n defer a.mu.Unlock()\n if a.minValue == nil {\n return nil\n }\n return *a.minValue\n}\nfunc (a *MinInt64Aggregator) Delta() interface{} { return a.Get() }\nfunc (a *MinInt64Aggregator) Type() string { return \"MinInt64Aggregator\" }\n```"]