["```go\ngo get -u github.com/go-sql-driver/mysql\n```", "```go\nvar arr = [5]int {1,2,4,5,6}\n```", "```go\nvar i int\nfor i=0; i< len(arr); i++ {\n    fmt.Println(\"printing elements \",arr[i]\n}\n```", "```go\nvar value int\nfor i, value = range arr{\n    fmt.Println(\" range \",value)\n}\n```", "```go\nfor _, value = range arr{\n    fmt.Println(\"blank range\",value)\n}\n```", "```go\ngo run arrays.go\n```", "```go\nvar slice = []int{1,3,5,6}\nslice = append(slice, 8)\nfmt.Println(“Capacity”, cap(slice))\nfmt.Println(“Length”, len(slice))\n```", "```go\ngo run basic_slice.go\n```", "```go\n//twiceValue method given slice of int type\nfunc twiceValue(slice []int) {\n      var i int\n      var value int\nfor i, value = range  slice {\n      slice[i] = 2*value\n   }\n    }\n// main method\nfunc main() {\n    var slice = []int{1,3,5,6}\n    twiceValue(slice)\n    var i int\n    for i=0; i< len(slice); i++ {\n        fmt.Println(“new slice value”, slice[i])\n}\n}\n```", "```go\ngo run slices.go\n```", "```go\n//main package has examples shown\n// in Go Data Structures and algorithms book\npackage main\n// importing fmt package\nimport (\n \"fmt\"\n)\n// main method\nfunc main() {\n  var TwoDArray [8][8]int\n   TwoDArray[3][6] = 18\n  TwoDArray[7][4] = 3\n   fmt.Println(TwoDArray)\n}\n```", "```go\ngo run twodarray.go\n```", "```go\n// in Go Data Structures and algorithms book\npackage main\n// importing fmt package\nimport (\n \"fmt\"\n)\n// main method\nfunc main() {\n   var rows int\n   var cols int\n   rows = 7\n   cols = 9\n   var twodslices = make([][]int, rows)\n   var i int\n   for i = range twodslices {\n      twodslices[i] = make([]int,cols)\n   }\n    fmt.Println(twodslices)\n}\n```", "```go\ngo run twodslices.go\n```", "```go\nvar arr = [] int{5,6,7,8,9}\nvar slic1 = arr[: 3]\nfmt.Println(\"slice1\",slic1)\nvar slic2 = arr[1:5]\nfmt.Println(\"slice2\",slic2)\nvar slic3 = append(slic2, 12)\nfmt.Println(\"slice3\",slic3)\n```", "```go\ngo run append_slice.go\n```", "```go\nvar languages = map[int]string {\n     3: “English”,\n      4: “French”,\n       5: “Spanish”\n}\n```", "```go\nvar products = make(map[int]string)\nproducts[1] = “chair”\nproducts[2] = “table”\n```", "```go\nvar i int\nvar value string\nfor i, value = range languages {\n   fmt.Println(\"language\",i, “:\",value)\n}\nfmt.Println(\"product with key 2\",products[2])\n```", "```go\nfmt.Println(products[2])\ndelete(products,”chair”) \nfmt.Println(\"products\",products)\n```", "```go\ngo run maps.go\n```", "```go\n//main package has examples shown\n// in Hands-On Data Structures and algorithms with Go book\npackage main\n\n// importing fmt,database/sql, net/http, text/template package\nimport (\n    \"fmt\"\n    \"database/sql\"\n    _ \"github.com/go-sql-driver/mysql\"\n)\n\n// Customer Class\ntype Customer struct {\n    CustomerId int\n    CustomerName string\n    SSN string\n}\n// GetConnection method which returns sql.DB\nfunc GetConnection() (database *sql.DB) {\n    databaseDriver := \"mysql\"\n    databaseUser := \"newuser\"\n    databasePass := \"newuser\"\n    databaseName := \"crm\"\n    database, error := sql.Open(databaseDriver, databaseUser+\":\"+databasePass+\"@/\"+databaseName)\n    if error != nil {\n        panic(error.Error())\n    }\n    return database\n}\n// GetCustomers method returns Customer Array\nfunc GetCustomers() []Customer {\n    var database *sql.DB\n    database = GetConnection()\n\n    var error error\n    var rows *sql.Rows\n    rows, error = database.Query(\"SELECT * FROM Customer ORDER BY Customerid DESC\")\n    if error != nil {\n        panic(error.Error())\n    }\n    var customer Customer\n    customer = Customer{}\n\n    var customers []Customer\n    customers= []Customer{}\n    for rows.Next() {\n        var customerId int\n        var customerName string\n        var ssn string\n        error = rows.Scan(&customerId, &customerName, &ssn)\n        if error != nil {\n            panic(error.Error())\n        }\n        customer.CustomerId = customerId\n        customer.CustomerName = customerName\n        customer.SSN = ssn\n        customers = append(customers, customer)\n    }\n\n    defer database.Close()\n\n    return customers\n}\n\n//main method\nfunc main() {\n\n     var customers []Customer\n    customers = GetCustomers()\n    fmt.Println(\"Customers\",customers)\n\n}\n\n```", "```go\ngo run database_operations.go\n```", "```go\n// InsertCustomer method with parameter customer\nfunc InsertCustomer(customer Customer) {\n     var database *sql.DB\n     database= GetConnection()\n\n      var error error\n      var insert *sql.Stmt\n      insert,error = database.Prepare(\"INSERT INTO CUSTOMER(CustomerName,SSN) VALUES(?,?)\")\n          if error != nil {\n              panic(error.Error())\n          }\n          insert.Exec(customer.CustomerName,customer.SSN)\n\n      defer database.Close()\n\n}\n```", "```go\n//main method\nfunc main() {\n     var customers []Customer\n    customers = GetCustomers()\n    fmt.Println(\"Before Insert\",customers)\n    var customer Customer\n    customer.CustomerName = \"Arnie Smith\"\n    customer.SSN = \"2386343\"\n    InsertCustomer(customer)\n    customers = GetCustomers()\n    fmt.Println(\"After Insert\",customers)\n    }\n```", "```go\ngo run database_operations.go\n```", "```go\n// Update Customer method with parameter customer\nfunc UpdateCustomer(customer Customer){\n     var database *sql.DB\n     database= GetConnection()\n     var error error\n      var update *sql.Stmt\n      update,error = database.Prepare(\"UPDATE CUSTOMER SET CustomerName=?, SSN=? WHERE CustomerId=?\")\n          if error != nil {\n           panic(error.Error())\n          } \n      update.Exec(customer.CustomerName,customer.SSN,customer.CustomerId)\ndefer database.Close()\n}\n// main method\nfunc main() {\n    var customers []Customer\n    customers = GetCustomers()\n   fmt.Println(\"Before Update\",customers)\n   var customer Customer\n    customer.CustomerName = \"George Thompson\"\n    customer.SSN = \"23233432\"\n    customer.CustomerId = 5\n    UpdateCustomer(customer)\n    customers = GetCustomers()\n    fmt.Println(\"After Update\",customers)\n}\n```", "```go\ngo run database_operations.go\n```", "```go\n// Delete Customer method with parameter customer\nfunc deleteCustomer(customer Customer){\n     var database *sql.DB\n     database= GetConnection()\n     var error error\n      var delete *sql.Stmt\n      delete,error = database.Prepare(\"DELETE FROM Customer WHERE Customerid=?\")\n          if error != nil {\n             panic(error.Error())\n         }\n          delete.Exec(customer.CustomerId)\n      defer database.Close()\n}\n// main method\nfunc main() {\n     var customers []Customer\n    customers = GetCustomers()\n    fmt.Println(\"Before Delete\",customers)\n  var customer Customer\n  customer.CustomerName = \"George Thompson\"\n  customer.SSN = \"23233432\"\n  customer.CustomerId = 5\n    deleteCustomer(customer)\n    customers = GetCustomers()\n    fmt.Println(\"After Delete\",customers)\n}\n```", "```go\ngo run database_operations.go\n```", "```go\n//main package has examples shown\n// in Hands-On Data Structures and algorithms with Go book\npackage main\n// importing fmt, database/sql, net/http, text/template package\nimport (\n    \"net/http\"\n    \"text/template\"\n    \"log\")\n// Home method renders the main.html\nfunc Home(writer http.ResponseWriter, reader *http.Request) {\n    var template_html *template.Template\n    template_html = template.Must(template.ParseFiles(\"main.html\"))\n    template_html.Execute(writer,nil)\n}\n// main method\nfunc main() {\n    log.Println(\"Server started on: http://localhost:8000\")\n    http.HandleFunc(\"/\", Home)\n    http.ListenAndServe(\":8000\", nil)\n}\n```", "```go\n<html>\n    <body>\n        <p> Welcome to Web Forms</p>\n    </body>\n</html>\n```", "```go\ngo run webforms.go\n```", "```go\n//main package has examples shown\n// in Hands-On Data Structures and algorithms with Go book\npackage main\n// importing fmt,database/sql, net/http, text/template package\nimport (\n   \"database/sql\"\n    _ \"github.com/go-sql-driver/mysql\"\n)\n// Customer Class\ntype Customer struct {\n    CustomerId    int\n    CustomerName  string\n    SSN string\n}\n//  GetConnection method  which returns sql.DB\nfunc GetConnection() (database *sql.DB) {\n    databaseDriver := \"mysql\"\n    databaseUser := \"newuser\"\n    databasePass := \"newuser\"\n    databaseName := “crm\"\n    database, error := sql.Open(databaseDriver, databaseUser+”:\"+databasePass+\"@/\"+databaseName)\n    if error != nil {\n        panic(error.Error())\n    }\n    return database\n}\n\n```", "```go\n//GetCustomerById with parameter customerId returns Customer\nfunc GetCustomerById(customerId int) Customer {\n  var database *sql.DB\n  database = GetConnection()\n  var error error\n  var rows *sql.Rows\n  rows, error = database.Query(\"SELECT * FROM Customer WHERE CustomerId=?\",customerId)\n  if error != nil {\n      panic(error.Error())\n  }\n  var customer Customer\n  customer = Customer{}\n    for rows.Next() {\n        var customerId int\n        var customerName string\n        var SSN  string\n        error = rows.Scan(&customerId, &customerName, &SSN)\n        if error != nil {\n           panic(error.Error())\n        }\n        customer.CustomerId = customerId\n        customer.CustomerName = customerName\n       customer.SSN = SSN\n    }\n```", "```go\n    defer database.Close()\n    return customer\n}\n// GetCustomers method returns Customer Array\nfunc GetCustomers() []Customer {\n    var database *sql.DB\n    database = GetConnection()\n    var error error\n    var rows *sql.Rows\n    rows, error = database.Query(\"SELECT * FROM Customer ORDER BY Customerid DESC\")\n    if error != nil {\n       panic(error.Error())\n    }\n   var customer Customer\n    customer = Customer{}\n    var customers []Customer\n    customers= []Customer{}\n   for rows.Next() {\n       var customerId int\n        var customerName string\n       var ssn string\n        error = rows.Scan(&customerId, &customerName, &ssn)\n        if error != nil {\n            panic(error.Error())\n        }\n        customer.CustomerId = customerId\n        customer.CustomerName = customerName\n        customer.SSN = ssn\n        customers = append(customers, customer)\n    }\n   defer database.Close()\n    return customers\n}\n\n```", "```go\n// InsertCustomer method with parameter customer\nfunc InsertCustomer(customer Customer) {\n     var database *sql.DB\n     database= GetConnection()\n     var error error\n      var insert *sql.Stmt\n     insert,error = database.Prepare(\"INSERT INTO CUSTOMER(CustomerName,SSN) VALUES(?,?)\")\n          if error != nil {\n              panic(error.Error())\n         }\n     insert.Exec(customer.CustomerName,customer.SSN)\n      defer database.Close()\n}\n```", "```go\n// Update Customer method with parameter customer\nfunc UpdateCustomer(customer Customer) {\n     var database *sql.DB\n     database= GetConnection()\n     var error error\n      var update *sql.Stmt\n      update,error = database.Prepare(\"UPDATE CUSTOMER SET CustomerName=?, SSN=? WHERE CustomerId=?\")\n          if error != nil {\n              panic(error.Error())\n          }\n          update.Exec(customer.CustomerName,customer.SSN,customer.CustomerId)\n     defer database.Close()\n}\n\n```", "```go\n// Delete Customer method with parameter customer\nfunc DeleteCustomer(customer Customer) {\n     var database *sql.DB\n     database= GetConnection()\n      var error error\n      var delete *sql.Stmt\n      delete,error = database.Prepare(\"DELETE FROM Customer WHERE Customerid=?\")\n          if error != nil {\n              panic(error.Error())\n          }\n          delete.Exec(customer.CustomerId)\n     defer database.Close()\n}\n```", "```go\n\n//main package has examples shown\n// in Hands-On Data Structures and algorithms with Go book\npackage main\n\n// importing fmt,database/sql, net/http, text/template package\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"text/template\"\n    \"log\"\n)\n\nvar template_html = template.Must(template.ParseGlob(\"templates/*\"))\n\n// Home - execute Template\nfunc Home(writer http.ResponseWriter, request *http.Request) {\n    var customers []Customer\n    customers = GetCustomers()\n    log.Println(customers)\n    template_html.ExecuteTemplate(writer,\"Home\",customers)\n\n}\n\n```", "```go\n// Create - execute Template\nfunc Create(writer http.ResponseWriter, request *http.Request) {\n\n    template_html.ExecuteTemplate(writer,\"Create\",nil)\n}\n```", "```go\n// Insert - execute template\nfunc Insert(writer http.ResponseWriter, request *http.Request) {\n\n    var customer Customer\n    customer.CustomerName = request.FormValue(\"customername\")\n    customer.SSN = request.FormValue(\"ssn\")\n    InsertCustomer(customer)\n    var customers []Customer\n    customers = GetCustomers()\n    template_html.ExecuteTemplate(writer,\"Home\",customers)\n\n}\n```", "```go\n// Alter - execute template\nfunc Alter(writer http.ResponseWriter, request *http.Request) {\n\n    var customer Customer\n    var customerId int\n    var customerIdStr string\n    customerIdStr = request.FormValue(\"id\")\n    fmt.Sscanf(customerIdStr, \"%d\", &customerId)\n    customer.CustomerId = customerId\n    customer.CustomerName = request.FormValue(\"customername\")\n    customer.SSN = request.FormValue(\"ssn\")\n    UpdateCustomer(customer)\n    var customers []Customer\n    customers = GetCustomers()\n    template_html.ExecuteTemplate(writer,\"Home\",customers)\n\n}\n\n```", "```go\n// Update - execute template\nfunc Update(writer http.ResponseWriter, request *http.Request) {\n\n  var customerId int\n  var customerIdStr string\n  customerIdStr = request.FormValue(\"id\")\n  fmt.Sscanf(customerIdStr, \"%d\", &customerId)\n  var customer Customer\n  customer = GetCustomerById(customerId)\n\n    template_html.ExecuteTemplate(writer,\"Update\",customer)\n\n}\n```", "```go\n// Delete - execute Template\nfunc Delete(writer http.ResponseWriter, request *http.Request) {\n  var customerId int\n  var customerIdStr string\n  customerIdStr = request.FormValue(\"id\")\n  fmt.Sscanf(customerIdStr, \"%d\", &customerId)\n  var customer Customer\n  customer = GetCustomerById(customerId)\n   DeleteCustomer(customer)\n   var customers []Customer\n   customers = GetCustomers()\n  template_html.ExecuteTemplate(writer,\"Home\",customers)\n\n}\n// View - execute Template\nfunc View(writer http.ResponseWriter, request *http.Request) {\n    var customerId int\n    var customerIdStr string\n    customerIdStr = request.FormValue(\"id\")\n    fmt.Sscanf(customerIdStr, \"%d\", &customerId)\n    var customer Customer\n    customer = GetCustomerById(customerId)\n    fmt.Println(customer)\n    var customers []Customer\n    customers= []Customer{customer}\n    customers.append(customer)\n    template_html.ExecuteTemplate(writer,\"View\",customers)\n\n}\n\n```", "```go\n// main method\nfunc main() {\n    log.Println(\"Server started on: http://localhost:8000\")\n    http.HandleFunc(\"/\", Home)\n    http.HandleFunc(\"/alter\", Alter)\n    http.HandleFunc(\"/create\", Create)\n    http.HandleFunc(\"/update\", Update)\n    http.HandleFunc(\"/view\", View)\n    http.HandleFunc(\"/insert\", Insert)\n    http.HandleFunc(\"/delete\", Delete)\n    http.ListenAndServe(\":8000\", nil)\n}\n```", "```go\n{{ define \"Header\" }}\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>CRM</title>\n        <meta charset=\"UTF-8\" />\n    </head>\n    <body>\n        <h1>Customer Management – CRM</h1>   \n{{ end }}\n```", "```go\n{{ define \"Footer\" }}\n    </body>\n  </html>\n{{ end }}\n```", "```go\n{{ define \"Menu\" }}\n<a href=\"/\">Home</a> |<a href=\"/create\">Create Customer</a>\n{{ end }}\n```", "```go\n{{ define \"Create\" }}\n  {{ template \"Header\" }}\n  {{ template \"Menu\"  }}\n  <br>\n    <h1>Create Customer</h1>\n  <br>\n  <br>\n  <form method=\"post\" action=\"/insert\">\n    Customer Name: <input type=\"text\" name=\"customername\" placeholder=\"customername\" autofocus/>\n    <br>\n    <br>\n    SSN: <input type=\"text\" name=\"ssn\" placeholder=\"ssn\"/>\n    <br>\n    <br>\n    <input type=\"submit\" value=\"Create Customer\"/>\n   </form>\n{{ template \"Footer\" }}\n{{ end }}\n```", "```go\n{{ define \"Update\" }}\n  {{ template \"Header\" }}\n    {{ template \"Menu\" }}\n<br>\n<h1>Update Customer</h1>\n    <br>\n    <br>\n  <form method=\"post\" action=\"/alter\">\n    <input type=\"hidden\" name=\"id\" value=\"{{ .CustomerId }}\" />\n    Customer Name: <input type=\"text\" name=\"customername\" placeholder=\"customername\" value=\"{{ .CustomerName }}\" autofocus>\n    <br>\n    <br>\n    SSN: <input type=\"text\" name=\"ssn\" value=\"{{ .SSN }}\" placeholder=\"ssn\"/>\n    <br>\n    <br>\n    <input type=\"submit\" value=\"Update Customer\"/>\n   </form>\n{{ template \"Footer\" }}\n{{ end }}\n```", "```go\n{{ define \"View\" }}\n  {{ template \"Header\" }}\n  {{ template \"Menu\"  }}\n    <br>\n       <h1>View Customer</h1>\n      <br>\n      <br>\n<table border=\"1\">\n<tr>\n<td>CustomerId</td>\n<td>CustomerName</td>\n<td>SSN</td>\n<td>Update</td>\n<td>Delete</td>\n</tr>\n{{ if . }}\n       {{ range . }}\n<tr>\n<td>{{ .CustomerId }}</td>\n<td>{{ .CustomerName }}</td>\n<td>{{ .SSN }}</td>\n<td><a href=\"/delete?id={{.CustomerId}}\" onclick=\"return confirm('Are you sure you want to delete?');\">Delete</a> </td>\n<td><a href=\"/update?id={{.CustomerId}}\">Update</a> </td>\n</tr>\n{{ end }}\n     {{ end }}\n</table>\n{{ template \"Footer\" }}\n{{ end }}\n```", "```go\ngo run crm_app.go crm_database_operations.go\n```"]