- en: Getting Started with Go for Data Structures and Algorithms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go语言数据结构和算法入门
- en: The Go programming language has been rapidly adopted by developers for building
    web applications. With its impressive performance and ease of development, Go
    enjoys the support of a wide variety of open source frameworks for building scalable
    and highly performant web services and apps. The migration to Golang has taken
    place mainly because of its fast, lightweight, and inbuilt concurrency features.
    This brings with it the need to learn data structures and algorithms with this
    growing language.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Go编程语言已被开发者迅速采用，用于构建Web应用程序。凭借其令人印象深刻的性能和易于开发的特点，Go拥有广泛的开放源代码框架支持，用于构建可扩展且高性能的Web服务和应用程序。迁移到Golang主要是由于其快速、轻量级和内置的并发特性。这也带来了学习与这种日益增长的语言相关的数据结构和算法的需求。
- en: In data structures, a collection of elements of a single type is called an **array**.
    **Slices** are similar to arrays except that they have unusual properties. Slice
    operations such as enlarging a slice using `append` and `copy` methods, assigning
    parts of a slice, appending a slice, and appending a part of a slice are presented
    with code samples. Database operations and CRUD web forms are the scenarios in
    which Go data structures and algorithms are demonstrated.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据结构中，单一类型的元素集合被称为**数组**。**切片**与数组类似，但它们具有一些不寻常的特性。使用`append`和`copy`方法扩大切片、分配切片的一部分、追加切片以及追加切片的一部分等切片操作将通过代码示例进行展示。数据库操作和CRUD网络表单是展示Go语言数据结构和算法的场景。
- en: 'In this chapter, we will discuss the following Go language-specific data structures:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下Go语言特定的数据结构：
- en: Arrays
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组
- en: Slices
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切片
- en: Two-dimensional slices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二维切片
- en: Maps
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maps
- en: Database operations
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库操作
- en: Variadic functions
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可变参数函数
- en: CRUD web forms
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CRUD网络表单
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Install Go Version 1.10 at [https://golang.org/doc/install](https://golang.org/doc/install),
    depending on your operating system.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的操作系统，在[https://golang.org/doc/install](https://golang.org/doc/install)安装Go版本1.10。
- en: The code files for this chapter can be found at the following GitHub URL: [https://github.com/PacktPublishing/Learn-Data-Structures-and-Algorithms-with-Golang/tree/master/Chapter02](https://github.com/PacktPublishing/Learn-Data-Structures-and-Algorithms-with-Golang/tree/master/Chapter02).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在以下GitHub URL找到：[https://github.com/PacktPublishing/Learn-Data-Structures-and-Algorithms-with-Golang/tree/master/Chapter02](https://github.com/PacktPublishing/Learn-Data-Structures-and-Algorithms-with-Golang/tree/master/Chapter02)。
- en: In this chapter, database operations require the `github.com/go-sql-driver/mysql` package.
    In addition to this, MySQL (4.1+) needs to be installed from [https://dev.mysql.com/downloads/mysql/](https://dev.mysql.com/downloads/mysql/).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，数据库操作需要`github.com/go-sql-driver/mysql`包。此外，还需要从[https://dev.mysql.com/downloads/mysql/](https://dev.mysql.com/downloads/mysql/)安装MySQL（4.1+）。
- en: 'Run the following command:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Arrays
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组
- en: 'Arrays are the most famous data structures in different programming languages.
    Different data types can be handled as elements in arrays such as `int`, `float32`,
    `double`, and others. The following code snippet shows the initialization of an
    array (`arrays.go`):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 数组是不同编程语言中最著名的数據結構。不同的數據類型可以作为数组的元素，例如`int`、`float32`、`double`等。以下代码片段展示了数组的初始化（`arrays.go`）：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'An array''s size can be found with the `len()` function. A `for` loop is used
    for accessing all the elements in an array, as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的尺寸可以通过`len()`函数找到。使用`for`循环可以访问数组中的所有元素，如下所示：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the following code snippet, the `range` keyword is explained in detail.
    The `range` keyword can be used to access the index and `value` for each element:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码片段中，将详细解释`range`关键字。`range`关键字可以用来访问每个元素的索引和值：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `_` blank identifier is used if the index is ignored. The following code shows
    how a `_` blank identifier can be used:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果忽略索引，可以使用`_`空标识符。以下代码展示了如何使用`_`空标识符：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run the following command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following screenshot displays the output:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了输出：
- en: '![](img/330f0c1d-abc6-4519-8d37-bb4fd24af58d.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/330f0c1d-abc6-4519-8d37-bb4fd24af58d.png)'
- en: Go arrays are not dynamic but have a fixed size. To add more elements than the
    size, a bigger array needs to be created and all the elements of the old one need
    to be copied. An array is passed as a value through functions by copying the array.
    Passing a big array to a function might be a performance issue.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Go 数组不是动态的，但有固定的大小。要添加比大小更多的元素，需要创建一个更大的数组，并将旧数组中的所有元素复制过来。数组通过复制数组作为值通过函数传递。传递大数组到函数可能会成为性能问题。
- en: Now that we have covered what arrays are, let's take a look at slices in the
    next section.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经了解了数组是什么，那么让我们在下一节看看切片。
- en: Slices
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 切片
- en: '**Go Slice** is an abstraction over **Go Array**. Multiple data elements of
    the same type are allowed by Go arrays. The definition of variables that can hold
    several data elements of the same type are allowed by Go Array, but it does not
    have any provision of inbuilt methods to increase its size in Go. This shortcoming
    is taken care of by Slices. A Go slice can be appended to elements after the capacity
    has reached its size. Slices are dynamic and can double the current capacity in
    order to add more elements.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**Go 切片**是**Go 数组**的抽象。Go 数组允许存储多个相同类型的数据元素。Go 数组允许定义可以存储多个相同类型数据元素的变量，但在 Go
    中没有提供任何内置方法来增加其大小。这个缺点由切片来弥补。Go 切片可以在容量达到其大小时追加元素。切片是动态的，并且可以将其当前容量加倍以添加更多元素。'
- en: Let's take a look at the `len` function in the next section.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看下一节中的 `len` 函数。
- en: The len function
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`len` 函数'
- en: 'The `len()` function gives the current length of `slice`, and the capacity
    of `slice` can be obtained using the `cap()` function. The following code sample
    shows the basic slice creation and appending a slice (`basic_slice.go`):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`len()` 函数给出 `slice` 的当前长度，而 `slice` 的容量可以通过使用 `cap()` 函数获得。以下代码示例显示了基本的切片创建和追加切片
    (`basic_slice.go`):'
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Run the following command to execute the preceding code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以执行前面的代码：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following screenshot displays the output:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了输出：
- en: '![](img/495b4e43-85bf-4eb5-991d-f061c30a3313.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/495b4e43-85bf-4eb5-991d-f061c30a3313.png)'
- en: Let's take a look at the `slice` function in the next section.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看下一节中的 `slice` 函数。
- en: Slice function
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 切片函数
- en: 'Slices are passed by referring to functions. Big slices can be passed to functions
    without impacting performance. Passing a slice as a reference to a function is
    demonstrated in the code as follows (`slices.go`):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '切片是通过引用传递给函数的。大切片可以传递给函数而不影响性能。在代码中，以下是如何将切片作为引用传递给函数的示例 (`slices.go`):'
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Run the following command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following screenshot displays the output:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了输出：
- en: '![](img/2e58fe8f-0186-4866-9e9d-b0e255611dae.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2e58fe8f-0186-4866-9e9d-b0e255611dae.png)'
- en: Now that we know what slices are, let's move on to two-dimensional slices in
    the next section.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经知道了切片是什么，那么让我们继续到下一节学习二维切片。
- en: Two-dimensional slices
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二维切片
- en: Two-dimensional slices are descriptors of a two-dimensional array. A two-dimensional
    slice is a contiguous section of an array that is stored away from the slice itself.
    It holds references to an underlying array. A two-dimensional slice will be an
    array of arrays, while the capacity of a slice can be increased by creating a
    new slice and copying the contents of the initial slice into the new one. This
    is also referred to as a **slice of slices**. The following is an example of a
    two-dimensional array. A 2D array is created and the array elements are initialized
    with values.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 二维切片是二维数组的描述符。二维切片是一个数组中连续的部分，它存储在切片本身之外。它持有对底层数组的引用。二维切片将是一个数组的数组，而切片的容量可以通过创建一个新的切片并将初始切片的内容复制到新切片中来增加。这也被称为**切片的切片**。以下是一个二维数组的示例。创建了一个二维数组，并将数组元素初始化为值。
- en: '`twodarray.go` is the code exhibit that''s presented in the following code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`twodarray.go` 是以下代码中展示的代码示例：'
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Run the following command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following screenshot displays the output:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了输出：
- en: '![](img/976abe39-0b19-4060-8eba-9daa74a989e5.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/976abe39-0b19-4060-8eba-9daa74a989e5.png)'
- en: 'For dynamic allocation, we use slice of slices. In the following code, slice
    of slices is explained as two-dimensional slices—`twodslices.go`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于动态分配，我们使用切片的切片。在以下代码中，切片的切片被解释为二维切片——`twodslices.go`：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Run the following commands:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following screenshot displays the output:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了输出：
- en: '![](img/c3661528-c819-4507-8520-ef05b45c5253.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c3661528-c819-4507-8520-ef05b45c5253.png)'
- en: 'The `append` method on the slice is used to append new elements to the slice.
    If the slice capacity has reached the size of the underlying array, then append
    increases the size by creating a new underlying array and adding the new element. `slic1`
    is a sub slice of `arr` starting from zero to 3 (excluded), while `slic2` is a
    sub slice of `arr` starting from 1 (inclusive) to 5 (excluded). In the following
    snippet, the `append` method calls on `slic2` to add a new `12` element (`append_slice.go`):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在切片上使用的`append`方法用于向切片追加新元素。如果切片容量已达到底层数组的大小，则追加通过创建一个新的底层数组并添加新元素来增加大小。`slic1`是`arr`从0开始到3（不包括）的子切片，而`slic2`是`arr`从1（包括）到5（不包括）的子切片。在以下代码片段中，`append`方法在`slic2`上调用以添加新的`12`元素（`append_slice.go`）：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Run the following commands:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following screenshot displays the output:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了输出：
- en: '![](img/1b3add4e-785a-4427-94d8-c451c0feec23.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1b3add4e-785a-4427-94d8-c451c0feec23.png)'
- en: Now that we have covered what two-dimensional slices are, let's take a look
    at maps in the next section.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经涵盖了二维切片的内容，让我们在下一节中看看映射。
- en: Maps
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 映射
- en: 'Maps are used to keep track of keys that are types, such as integers, strings,
    float, double, pointers, interfaces, structs, and arrays. The values can be of
    different types. In the following example, the language of the map type with a
    key integer and a value string is created (`maps.go`):'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 映射用于跟踪键类型，如整数、字符串、浮点数、双精度浮点数、指针、接口、结构体和数组。值可以是不同类型。在以下示例中，创建了一个具有整数键和字符串值的映射类型语言（`maps.go`）：
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Maps can be created using the `make` method, specifying the key type and the
    value type. Products of a map type with a key integer and value string are shown
    in the following code snippet:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`make`方法创建映射，指定键类型和值类型。以下代码片段显示了具有整数键和字符串值的映射类型的产物：
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'A `for` loop is used for iterating through the map. The languages map is iterated
    as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环用于遍历映射。语言映射的遍历方式如下：'
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Retrieving value and deleting slice operations using the products map is shown
    in the following code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用产品映射检索值和删除切片操作如下所示：
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Run the following commands:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE20]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following screenshot displays the output:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了输出：
- en: '![](img/43eebf3d-f947-4d71-92f7-108c4b02b74c.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/43eebf3d-f947-4d71-92f7-108c4b02b74c.png)'
- en: Now that we've covered maps, let's move on to database operations.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经涵盖了映射，让我们继续到数据库操作。
- en: Database operations
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库操作
- en: In this section, we will take a look at some of database operations using appropriate
    examples.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过适当的示例查看一些数据库操作。
- en: Let's start with the `GetCustomer` method in the next section.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从下一节的`GetCustomer`方法开始。
- en: The GetCustomer method
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`GetCustomer`方法'
- en: 'The `GetCustomer` method retrieves the `Customer` data from the database. To
    start with, the `create` database operation is shown in the following example. `Customer`
    is the table with the `Customerid`, `CustomerName`, and `SSN` attributes. The `GetConnection` method
    returns the database connection, which is used to query the database. The query
    then returns the rows from the database table. In the following code, database
    operations are explained in detail (`database_operations.go`):'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`GetCustomer`方法从数据库中检索`Customer`数据。首先，以下示例显示了`create`数据库操作。`Customer`是具有`Customerid`、`CustomerName`和`SSN`属性的表。`GetConnection`方法返回数据库连接，用于查询数据库。查询然后返回数据库表中的行。以下代码详细解释了数据库操作（`database_operations.go`）：'
- en: '[PRE21]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Run the following commands:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The following screenshot displays the output:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了输出：
- en: '![](img/62f97a29-0f24-46e4-96dd-9cde2102f9af.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/62f97a29-0f24-46e4-96dd-9cde2102f9af.png)'
- en: Let's take a look at the `InsertCustomer` method in the next section.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下下一节中的`InsertCustomer`方法。
- en: The InsertCustomer method
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`InsertCustomer`方法'
- en: 'The `INSERT` operation is as follows. The `InsertCustomer` method takes the
    `Customer` parameter and creates a prepared statement for the `INSERT` statement.
    The statement is used to execute the insertion of customer rows into the table,
    as shown in the following snippet:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`INSERT`操作如下。`InsertCustomer`方法接受`Customer`参数并创建一个用于`INSERT`语句的预处理语句。该语句用于将客户行插入到表中，如下面的代码片段所示：'
- en: '[PRE23]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Let's take a look at the variadic functions in the next section.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一节中看看可变参数函数。
- en: Variadic functions
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可变参数函数
- en: A function in which we pass an infinite number of arguments, instead of passing
    them one at a time, is called a variadic function. The type of the final parameter
    is preceded by an ellipsis (...), while declaring a variadic function; this shows
    us that the function might be called with any number of arguments of this type.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数，我们传递无限数量的参数，而不是一次传递一个，称为可变参数函数。最终参数的类型前面有一个省略号 (...), 在声明可变参数函数时；这表明该函数可以带有任何数量的此类参数。
- en: 'Variadic functions can be invoked with a variable number of parameters. `fmt.Println`
    is a common variadic function, as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 可变参数函数可以用可变数量的参数调用。`fmt.Println` 是一个常见的可变参数函数，如下所示：
- en: '[PRE24]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Run the following commands:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE25]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The following screenshot displays the output:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了输出：
- en: '![](img/9f6c143f-b52f-4e9d-8914-eef2a81aa9d8.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9f6c143f-b52f-4e9d-8914-eef2a81aa9d8.png)'
- en: Let's start the `update` operation in the next section.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一节开始 `update` 操作。
- en: The update operation
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新操作
- en: 'The `update` operation is as follows. The `UpdateCustomer` method takes the
    `Customer` parameter and creates a prepared statement for the `UPDATE` statement.
    The statement is used to update a customer row in the table:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`update` 操作如下。`UpdateCustomer` 方法接收 `Customer` 参数并创建一个用于 `UPDATE` 语句的预处理语句。该语句用于在表中更新一行客户数据：'
- en: '[PRE26]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Run the following commands:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE27]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The following screenshot displays the output:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了输出：
- en: '![](img/8e13fd88-1ac6-41aa-b556-aad717a0f976.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8e13fd88-1ac6-41aa-b556-aad717a0f976.png)'
- en: Let's take a look at the `delete` operation in the next section.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下下一节中的 `delete` 操作。
- en: The delete operation
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除操作
- en: 'The `delete` operation is as follows. The `DeleteCustomer` method takes the
    `Customer` parameter and creates a prepared statement for the `DELETE` statement.
    The statement is used to execute the deletion of a customer row in the table:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`delete` 操作如下。`DeleteCustomer` 方法接收 `Customer` 参数并创建一个用于 `DELETE` 语句的预处理语句。该语句用于在表中删除一行客户数据：'
- en: '[PRE28]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Run the following commands:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE29]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The following screenshot displays the output:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了输出：
- en: '![](img/780cc346-b9e8-4eb6-aee9-e3f122519c17.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/780cc346-b9e8-4eb6-aee9-e3f122519c17.png)'
- en: Now that we are done with variadic functions, let's go ahead and look at CRUD
    web forms in the next section.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了可变参数函数的讨论，让我们继续在下一节查看 CRUD 网页表单。
- en: CRUD web forms
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CRUD 网页表单
- en: In this section, we will explain web forms using basic examples, showing you
    how to perform various actions.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过基本示例解释网页表单，展示如何执行各种操作。
- en: 'To start a basic HTML page with the Go `net/http` package, the web forms example
    is as follows (`webforms.go`). This has a welcome greeting in `main.html`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Go 的 `net/http` 包启动一个基本的 HTML 页面，以下是一个网页表单示例 (`webforms.go`)。在 `main.html`
    中有一个欢迎问候语：
- en: '[PRE30]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The code for `main.html` is as follows**:**
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`main.html` 的代码如下**：'
- en: '[PRE31]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Run the following commands:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE32]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The following screenshot displays the output:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了输出：
- en: '![](img/7572a7d3-8656-4eff-8792-4081b580d509.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7572a7d3-8656-4eff-8792-4081b580d509.png)'
- en: 'The web browser output is shown in the following screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了网页浏览器的输出：
- en: '![](img/5f8fa924-d1a5-4fd0-90ea-fe55a5a86688.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5f8fa924-d1a5-4fd0-90ea-fe55a5a86688.png)'
- en: 'The CRM application is built with web forms as an example to demonstrate CRUD operations.
    We can use the database operations we built in the previous section. In the following
    code, the `crm` database operations are presented. The `crm` database operations
    consist of CRUD methods such as `CREATE`, `READ`, `UPDATE`, and `DELETE` customer
    operations. The `GetConnection` method retrieves the database connection for performing
    the database operations (`crm_database_operations.go`):'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 以网页表单为例构建的 CRM 应用程序用于演示 CRUD 操作。我们可以使用上一节中构建的数据库操作。以下代码展示了 `crm` 数据库操作。`crm`
    数据库操作包括 CRUD 方法，如 `CREATE`、`READ`、`UPDATE` 和 `DELETE` 客户操作。`GetConnection` 方法检索用于执行数据库操作的数据库连接
    (`crm_database_operations.go`)：
- en: '[PRE33]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'As shown in the following code, the `GetCustomerById` method takes the `customerId`
    parameter to look up in the customer database. The `GetCustomerById` method returns
    the customer object:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下代码所示，`GetCustomerById` 方法接收 `customerId` 参数以在客户数据库中查找。`GetCustomerById` 方法返回客户对象：
- en: '[PRE34]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Now that we have covered CRUD web forms, let's move on to `defer` and `panic`
    in the next section.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经涵盖了 CRUD 网页表单，让我们在下一节继续探讨 `defer` 和 `panic`。
- en: The defer and panic statements
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 延迟和 panic 语句
- en: 'The `defer` statement defers the execution of the function until the surrounding
    function returns. The `panic` function stops the current flow and control. Deferred
    functions are executed normally after the `panic` call. In the following code
    example, the `defer` call gets executed even when the `panic` call is invoked:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`defer` 语句将函数的执行推迟到周围函数返回。`panic` 函数停止当前流程和控制。在 `panic` 调用之后，延迟的函数会正常执行。在以下代码示例中，即使调用了
    `panic` 调用，`defer` 调用也会执行：'
- en: '[PRE35]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Let's take a look at the `InsertCustomer`, `UpdateCustomer`, and `DeleteCustomer`
    methods in the following sections.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下章节中的 `InsertCustomer`、`UpdateCustomer` 和 `DeleteCustomer` 方法。
- en: The InsertCustomer method
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: InsertCustomer 方法
- en: 'In the following code, the `InsertCustomer` method takes `customer` as a parameter
    to execute the SQL statement for inserting into the `CUSTOMER` table:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，`InsertCustomer` 方法将 `customer` 作为参数来执行插入到 `CUSTOMER` 表的 SQL 语句：
- en: '[PRE36]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The UpdateCustomer method
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UpdateCustomer 方法
- en: 'The `UpdateCustomer` method prepares the `UPDATE` statement by passing the
    `CustomerName` and `SSN` from the `customer` object; this is shown in the following
    code:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`UpdateCustomer` 方法通过传递 `CustomerName` 和 `SSN` 从 `customer` 对象来准备 `UPDATE`
    语句；如下面的代码所示：'
- en: '[PRE37]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The DeleteCustomer method
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DeleteCustomer 方法
- en: 'The `DeleteCustomer` method deletes the customer that''s passed by executing
    the `DELETE` statement:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`DeleteCustomer` 方法通过执行 `DELETE` 语句来删除传递的客户：'
- en: '[PRE38]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Let's take a look at the CRM web application in the next section.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下下一节中的 CRM 网络应用程序。
- en: CRM web application
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CRM 网络应用程序
- en: 'The CRM web application is shown as follows, with various web paths handled.
    The CRM application code is shown in the following code. The `Home` function executes
    the `Home` template with the writer parameter and the customers array (`crm_app.go`):'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示，CRM 网络应用程序处理了各种网络路径。CRM 应用程序代码如下。`Home` 函数使用 writer 参数和客户数组执行 `Home` 模板（`crm_app.go`）：
- en: '[PRE39]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Let's take a look at the `Create`, `Insert`, `Alter`, `Update`, and `Delete`
    functions, as well as the `main` method in the following sections.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下章节中的 `Create`、`Insert`、`Alter`、`Update` 和 `Delete` 函数，以及 `main` 方法。
- en: The Create function
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Create 函数
- en: 'As shown in the following code, the `Create` function takes the `writer` and
    `request` parameters to render the `Create` template:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下代码所示，`Create` 函数接受 `writer` 和 `request` 参数来渲染 `Create` 模板：
- en: '[PRE40]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The Insert function
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Insert 函数
- en: 'The `Insert` function invokes the `GetCustomers` method to get an array of
    `customers` and renders the `Home` template with the `writer` and `customers`
    arrays as parameters by invoking the `ExecuteTemplate` method. This is shown in
    the following code:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`Insert` 函数调用 `GetCustomers` 方法获取 `customers` 数组，并通过调用 `ExecuteTemplate` 方法，使用
    `writer` 和 `customers` 数组作为参数来渲染 `Home` 模板。这如下面的代码所示：'
- en: '[PRE41]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The Alter function
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Alter 函数
- en: 'The following code shows how the `Alter` function renders the `Home` template
    by invoking the `ExecuteTemplate` method with the `writer` and `customers` arrays
    as parameters:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了 `Alter` 函数如何通过使用 `writer` 和 `customers` 数组作为参数调用 `ExecuteTemplate` 方法来渲染
    `Home` 模板：
- en: '[PRE42]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The Update function
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Update 函数
- en: 'The `Update` function invokes the `ExecuteTemplate` method with `writer` and
    `customer` looked up by `id`. The `ExecuteTemplate` method renders the `UPDATE` template:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`Update` 函数使用 `writer` 和通过 `id` 查找的 `customer` 调用 `ExecuteTemplate` 方法。`ExecuteTemplate`
    方法渲染 `UPDATE` 模板：'
- en: '[PRE43]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The Delete function
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Delete 函数
- en: 'The `Delete` method renders the `Home` template after deleting the customer
    that''s found by the `GetCustomerById` method. The `View` method renders the `View`
    template after finding the customer by invoking the `GetCustomerById` method:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`Delete` 方法在通过 `GetCustomerById` 方法找到客户后渲染 `Home` 模板。`View` 方法在通过调用 `GetCustomerById`
    方法找到客户后渲染 `View` 模板：'
- en: '[PRE44]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The main method
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`main` 方法'
- en: 'The main method handles the `Home`, `Alter`, `Create`, `Update`, `View`, `Insert`,
    and `Delete` functions with different aliases for lookup and renders the templates
    appropriately. `HttpServer` listens to port `8000` and waits for template alias
    invocation:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`main` 方法处理 `Home`、`Alter`、`Create`、`Update`、`View`、`Insert` 和 `Delete` 函数，并使用不同的别名进行查找，并适当地渲染模板。`HttpServer`
    监听端口 `8000` 并等待模板别名的调用：'
- en: '[PRE45]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Let's take a look at the `Header`, `Footer`, `Menu`, `Create`, `Update`, and
    `View` templates in the following sections.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下章节中的 `Header`、`Footer`、`Menu`、`Create`、`Update` 和 `View` 模板。
- en: The Header template
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Header 模板
- en: 'The `Header` template has the HTML `head` and `body` defined in the code snippet,
    as follows. The TITLE tag of the web page is set to `CRM` and the web page has
    `Customer Management – CRM` as content (`Header.tmpl`):'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`Header` 模板在以下代码片段中定义了 HTML 的 `head` 和 `body` 部分，如下所示。网页的标题标签设置为 `CRM`，网页内容为
    `Customer Management – CRM`（`Header.tmpl`）：'
- en: '[PRE46]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The Footer template
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Footer` 模板'
- en: 'The `Footer` template has the HTML and BODY close tags defined. The `Footer`
    template is presented in the following code snippet (`Footer.tmpl`):'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`Footer` 模板定义了 HTML 和 BODY 的关闭标签。以下代码片段展示了 `Footer` 模板（`Footer.tmpl`）：'
- en: '[PRE47]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The Menu template
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 菜单模板
- en: 'The `Menu` template has the links defined for `Home` and `Create Customer`,
    as shown in the following code (`Menu.tmpl`):'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`Menu` 模板定义了 `Home` 和 `Create Customer` 的链接，以下代码展示了该模板（`Menu.tmpl`）：'
- en: '[PRE48]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The Create template
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模板
- en: 'The `Create` template consists of `Header`, `Menu`, and `Footer` templates.
    The form to create customer fields is found in the `create` template. This form
    is submitted to a web path—`/insert`, as shown in the following code snippet (`Create.tmpl`):'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`Create` 模板由 `Header`、`Menu` 和 `Footer` 模板组成。创建客户字段的表单位于 `create` 模板中。此表单提交到网络路径—`/insert`，以下代码片段展示了该模板（`Create.tmpl`）：'
- en: '[PRE49]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The Update template
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新模板
- en: 'The `Update` template consists of the `Header`, `Menu`, and `Footer` templates,
    as follows. The form to update customer fields is found in the `Update` template.
    This form is submitted to a web path, `/alter` (`Update.tmpl`):'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`Update` 模板由 `Header`、`Menu` 和 `Footer` 模板组成，如下所示。更新客户字段的表单位于 `Update` 模板中。此表单提交到网络路径
    `/alter`（`Update.tmpl`）：'
- en: '[PRE50]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The View template
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`View` 模板'
- en: 'The `View` template consists of `Header`, `Menu`, and `Footer` templates. The
    form to view the customer fields is found in the `View` template, which is presented
    in code as follows (`View.tmpl`):'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`View` 模板由 `Header`、`Menu` 和 `Footer` 模板组成。查看客户字段的表单位于 `View` 模板中，以下代码展示了该模板（`View.tmpl`）：'
- en: '[PRE51]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Run the following commands:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令：
- en: '[PRE52]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The following screenshot displays the output:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了输出：
- en: '![](img/42cf8e4a-b8fc-41c6-8a63-a925ab54ad52.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/42cf8e4a-b8fc-41c6-8a63-a925ab54ad52.png)'
- en: 'The web browser output is shown in the following screenshot:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了网络浏览器的输出：
- en: '![](img/56f7db84-25cd-48c4-bd64-daf73ecf98da.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/56f7db84-25cd-48c4-bd64-daf73ecf98da.png)'
- en: Summary
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter introduced database operations and web forms. Now, you will be
    able to build web applications that can store data in databases. Arrays, slices,
    two-dimensional slices, and maps were covered with code samples. Array methods
    such as `len`, iterating through an array using `for`, and `range` were explained
    in this chapter using code snippets. Two-dimensional arrays and slice of slices
    were discussed in the *Slices* section.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了数据库操作和网络表单。现在，你将能够构建可以存储数据库数据的网络应用程序。本章通过代码示例涵盖了数组、切片、二维切片和地图。本章使用代码片段解释了数组方法，如
    `len`、使用 `for` 迭代数组和使用 `range`。在 *切片* 部分讨论了二维数组和切片的切片。
- en: Maps were explained with various scenarios such as adding keys and values, as
    well as retrieving and deleting values. Maps of different types, such as strings
    and integers, were also discussed in this chapter. Furthermore, variadic functions,
    deferred function calls, and panic and recover operations were demonstrated in
    the *Database operations* and *CRUD web forms *sections.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 使用各种场景解释了地图，例如添加键和值，以及检索和删除值。本章还讨论了不同类型的地图，如字符串和整数。此外，在 `数据库操作` 和 `CRUD 网络表单`
    部分演示了可变参数函数、延迟函数调用和恐慌与恢复操作（*数据库操作* 和 *CRUD 网络表单* 部分）。
- en: The CRM application was built as a web application with data persisted in the
    MySQL database. Database operations for adding, deleting, updating, and retrieving
    data were shown in code snippets. In addition, web forms for creating, updating,
    deleting, and viewing customer data were presented using web forms with templates.
    MySQL driver and its installation details were provided in the *Technical requirements*
    section of this chapter. How to create a web application using Go was demonstrated
    with execution details.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: CRM 应用程序被构建为一个网络应用程序，数据持久化在 MySQL 数据库中。代码片段展示了添加、删除、更新和检索数据的数据库操作。此外，使用模板的网络表单展示了创建、更新、删除和查看客户数据。本章
    *技术要求* 部分提供了 MySQL 驱动及其安装细节。本章通过执行细节演示了如何使用 Go 创建网络应用程序。
- en: The next chapter will have topics related to linear data structures such as
    lists, sets, tuples, and stacks.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将涉及与线性数据结构相关的主题，如列表、集合、元组和栈。
- en: Questions
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the name of the method to get the size of an array?
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取数组大小的方法叫什么？
- en: How do you find the capacity of the slice?
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何找到切片的容量？
- en: How do you initialize the 2D slice of a string type?
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何初始化字符串类型的二维切片？
- en: How do you add an element to the slice?
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何向切片中添加一个元素？
- en: Using code, can you demonstrate how to create a map of key strings and value
    strings? Initialize the map with keys and values in the code, iterate them in
    a loop, and print the keys and values in the code.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用代码，你能演示如何创建一个键为字符串、值为字符串的映射吗？在代码中初始化映射的键和值，在循环中迭代它们，并在代码中打印键和值。
- en: How do you delete a value in a map?
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何在映射中删除一个值？
- en: What parameters are required for getting a database connection?
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取数据库连接需要哪些参数？
- en: Which `sql.Rows` class method makes it possible to read the attributes of the
    entity in a table?
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个`sql.Rows`类方法使得在表中读取实体的属性成为可能？
- en: What does `defer` do when a database connection is closed?
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当数据库连接关闭时，`defer`做了什么？
- en: Which method allows the `sql.DB` class to create a prepared statement?
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个方法允许`sql.DB`类创建一个预处理语句？
- en: Further reading
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To read more about arrays, maps and slices, the following links are recommended:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解更多关于数组、映射和切片的信息，以下链接推荐阅读：
- en: '*Learning Go Data Structures and Algorithms [Video]*, by Gustavo Chaín'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《学习Go数据结构和算法 [视频]*》，作者 Gustavo Chaín'
- en: '*Mastering Go*, by Mihalis Tsoukalos'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*精通Go*，作者 Mihalis Tsoukalos'
