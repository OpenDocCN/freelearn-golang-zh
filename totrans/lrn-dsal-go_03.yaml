- en: Getting Started with Go for Data Structures and Algorithms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Go programming language has been rapidly adopted by developers for building
    web applications. With its impressive performance and ease of development, Go
    enjoys the support of a wide variety of open source frameworks for building scalable
    and highly performant web services and apps. The migration to Golang has taken
    place mainly because of its fast, lightweight, and inbuilt concurrency features.
    This brings with it the need to learn data structures and algorithms with this
    growing language.
  prefs: []
  type: TYPE_NORMAL
- en: In data structures, a collection of elements of a single type is called an **array**.
    **Slices** are similar to arrays except that they have unusual properties. Slice
    operations such as enlarging a slice using `append` and `copy` methods, assigning
    parts of a slice, appending a slice, and appending a part of a slice are presented
    with code samples. Database operations and CRUD web forms are the scenarios in
    which Go data structures and algorithms are demonstrated.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following Go language-specific data structures:'
  prefs: []
  type: TYPE_NORMAL
- en: Arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two-dimensional slices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Database operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Variadic functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CRUD web forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Install Go Version 1.10 at [https://golang.org/doc/install](https://golang.org/doc/install),
    depending on your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: The code files for this chapter can be found at the following GitHub URL: [https://github.com/PacktPublishing/Learn-Data-Structures-and-Algorithms-with-Golang/tree/master/Chapter02](https://github.com/PacktPublishing/Learn-Data-Structures-and-Algorithms-with-Golang/tree/master/Chapter02).
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, database operations require the `github.com/go-sql-driver/mysql` package.
    In addition to this, MySQL (4.1+) needs to be installed from [https://dev.mysql.com/downloads/mysql/](https://dev.mysql.com/downloads/mysql/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Arrays are the most famous data structures in different programming languages.
    Different data types can be handled as elements in arrays such as `int`, `float32`,
    `double`, and others. The following code snippet shows the initialization of an
    array (`arrays.go`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'An array''s size can be found with the `len()` function. A `for` loop is used
    for accessing all the elements in an array, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following code snippet, the `range` keyword is explained in detail.
    The `range` keyword can be used to access the index and `value` for each element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `_` blank identifier is used if the index is ignored. The following code shows
    how a `_` blank identifier can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot displays the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/330f0c1d-abc6-4519-8d37-bb4fd24af58d.png)'
  prefs: []
  type: TYPE_IMG
- en: Go arrays are not dynamic but have a fixed size. To add more elements than the
    size, a bigger array needs to be created and all the elements of the old one need
    to be copied. An array is passed as a value through functions by copying the array.
    Passing a big array to a function might be a performance issue.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have covered what arrays are, let's take a look at slices in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Slices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Go Slice** is an abstraction over **Go Array**. Multiple data elements of
    the same type are allowed by Go arrays. The definition of variables that can hold
    several data elements of the same type are allowed by Go Array, but it does not
    have any provision of inbuilt methods to increase its size in Go. This shortcoming
    is taken care of by Slices. A Go slice can be appended to elements after the capacity
    has reached its size. Slices are dynamic and can double the current capacity in
    order to add more elements.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at the `len` function in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The len function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `len()` function gives the current length of `slice`, and the capacity
    of `slice` can be obtained using the `cap()` function. The following code sample
    shows the basic slice creation and appending a slice (`basic_slice.go`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot displays the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/495b4e43-85bf-4eb5-991d-f061c30a3313.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's take a look at the `slice` function in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Slice function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Slices are passed by referring to functions. Big slices can be passed to functions
    without impacting performance. Passing a slice as a reference to a function is
    demonstrated in the code as follows (`slices.go`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot displays the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2e58fe8f-0186-4866-9e9d-b0e255611dae.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we know what slices are, let's move on to two-dimensional slices in
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Two-dimensional slices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Two-dimensional slices are descriptors of a two-dimensional array. A two-dimensional
    slice is a contiguous section of an array that is stored away from the slice itself.
    It holds references to an underlying array. A two-dimensional slice will be an
    array of arrays, while the capacity of a slice can be increased by creating a
    new slice and copying the contents of the initial slice into the new one. This
    is also referred to as a **slice of slices**. The following is an example of a
    two-dimensional array. A 2D array is created and the array elements are initialized
    with values.
  prefs: []
  type: TYPE_NORMAL
- en: '`twodarray.go` is the code exhibit that''s presented in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot displays the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/976abe39-0b19-4060-8eba-9daa74a989e5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For dynamic allocation, we use slice of slices. In the following code, slice
    of slices is explained as two-dimensional slices—`twodslices.go`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot displays the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c3661528-c819-4507-8520-ef05b45c5253.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `append` method on the slice is used to append new elements to the slice.
    If the slice capacity has reached the size of the underlying array, then append
    increases the size by creating a new underlying array and adding the new element. `slic1`
    is a sub slice of `arr` starting from zero to 3 (excluded), while `slic2` is a
    sub slice of `arr` starting from 1 (inclusive) to 5 (excluded). In the following
    snippet, the `append` method calls on `slic2` to add a new `12` element (`append_slice.go`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot displays the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1b3add4e-785a-4427-94d8-c451c0feec23.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have covered what two-dimensional slices are, let's take a look
    at maps in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Maps are used to keep track of keys that are types, such as integers, strings,
    float, double, pointers, interfaces, structs, and arrays. The values can be of
    different types. In the following example, the language of the map type with a
    key integer and a value string is created (`maps.go`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Maps can be created using the `make` method, specifying the key type and the
    value type. Products of a map type with a key integer and value string are shown
    in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'A `for` loop is used for iterating through the map. The languages map is iterated
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Retrieving value and deleting slice operations using the products map is shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot displays the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/43eebf3d-f947-4d71-92f7-108c4b02b74c.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we've covered maps, let's move on to database operations.
  prefs: []
  type: TYPE_NORMAL
- en: Database operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will take a look at some of database operations using appropriate
    examples.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start with the `GetCustomer` method in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The GetCustomer method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `GetCustomer` method retrieves the `Customer` data from the database. To
    start with, the `create` database operation is shown in the following example. `Customer`
    is the table with the `Customerid`, `CustomerName`, and `SSN` attributes. The `GetConnection` method
    returns the database connection, which is used to query the database. The query
    then returns the rows from the database table. In the following code, database
    operations are explained in detail (`database_operations.go`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot displays the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/62f97a29-0f24-46e4-96dd-9cde2102f9af.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's take a look at the `InsertCustomer` method in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The InsertCustomer method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `INSERT` operation is as follows. The `InsertCustomer` method takes the
    `Customer` parameter and creates a prepared statement for the `INSERT` statement.
    The statement is used to execute the insertion of customer rows into the table,
    as shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Let's take a look at the variadic functions in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Variadic functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A function in which we pass an infinite number of arguments, instead of passing
    them one at a time, is called a variadic function. The type of the final parameter
    is preceded by an ellipsis (...), while declaring a variadic function; this shows
    us that the function might be called with any number of arguments of this type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Variadic functions can be invoked with a variable number of parameters. `fmt.Println`
    is a common variadic function, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot displays the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9f6c143f-b52f-4e9d-8914-eef2a81aa9d8.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's start the `update` operation in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The update operation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `update` operation is as follows. The `UpdateCustomer` method takes the
    `Customer` parameter and creates a prepared statement for the `UPDATE` statement.
    The statement is used to update a customer row in the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot displays the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8e13fd88-1ac6-41aa-b556-aad717a0f976.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's take a look at the `delete` operation in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The delete operation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `delete` operation is as follows. The `DeleteCustomer` method takes the
    `Customer` parameter and creates a prepared statement for the `DELETE` statement.
    The statement is used to execute the deletion of a customer row in the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot displays the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/780cc346-b9e8-4eb6-aee9-e3f122519c17.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we are done with variadic functions, let's go ahead and look at CRUD
    web forms in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: CRUD web forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will explain web forms using basic examples, showing you
    how to perform various actions.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a basic HTML page with the Go `net/http` package, the web forms example
    is as follows (`webforms.go`). This has a welcome greeting in `main.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The code for `main.html` is as follows**:**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot displays the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7572a7d3-8656-4eff-8792-4081b580d509.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The web browser output is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f8fa924-d1a5-4fd0-90ea-fe55a5a86688.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The CRM application is built with web forms as an example to demonstrate CRUD operations.
    We can use the database operations we built in the previous section. In the following
    code, the `crm` database operations are presented. The `crm` database operations
    consist of CRUD methods such as `CREATE`, `READ`, `UPDATE`, and `DELETE` customer
    operations. The `GetConnection` method retrieves the database connection for performing
    the database operations (`crm_database_operations.go`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'As shown in the following code, the `GetCustomerById` method takes the `customerId`
    parameter to look up in the customer database. The `GetCustomerById` method returns
    the customer object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have covered CRUD web forms, let's move on to `defer` and `panic`
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The defer and panic statements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `defer` statement defers the execution of the function until the surrounding
    function returns. The `panic` function stops the current flow and control. Deferred
    functions are executed normally after the `panic` call. In the following code
    example, the `defer` call gets executed even when the `panic` call is invoked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Let's take a look at the `InsertCustomer`, `UpdateCustomer`, and `DeleteCustomer`
    methods in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: The InsertCustomer method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following code, the `InsertCustomer` method takes `customer` as a parameter
    to execute the SQL statement for inserting into the `CUSTOMER` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The UpdateCustomer method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `UpdateCustomer` method prepares the `UPDATE` statement by passing the
    `CustomerName` and `SSN` from the `customer` object; this is shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The DeleteCustomer method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `DeleteCustomer` method deletes the customer that''s passed by executing
    the `DELETE` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Let's take a look at the CRM web application in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: CRM web application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The CRM web application is shown as follows, with various web paths handled.
    The CRM application code is shown in the following code. The `Home` function executes
    the `Home` template with the writer parameter and the customers array (`crm_app.go`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Let's take a look at the `Create`, `Insert`, `Alter`, `Update`, and `Delete`
    functions, as well as the `main` method in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: The Create function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As shown in the following code, the `Create` function takes the `writer` and
    `request` parameters to render the `Create` template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The Insert function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Insert` function invokes the `GetCustomers` method to get an array of
    `customers` and renders the `Home` template with the `writer` and `customers`
    arrays as parameters by invoking the `ExecuteTemplate` method. This is shown in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The Alter function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following code shows how the `Alter` function renders the `Home` template
    by invoking the `ExecuteTemplate` method with the `writer` and `customers` arrays
    as parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The Update function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Update` function invokes the `ExecuteTemplate` method with `writer` and
    `customer` looked up by `id`. The `ExecuteTemplate` method renders the `UPDATE` template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The Delete function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Delete` method renders the `Home` template after deleting the customer
    that''s found by the `GetCustomerById` method. The `View` method renders the `View`
    template after finding the customer by invoking the `GetCustomerById` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The main method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The main method handles the `Home`, `Alter`, `Create`, `Update`, `View`, `Insert`,
    and `Delete` functions with different aliases for lookup and renders the templates
    appropriately. `HttpServer` listens to port `8000` and waits for template alias
    invocation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Let's take a look at the `Header`, `Footer`, `Menu`, `Create`, `Update`, and
    `View` templates in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: The Header template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Header` template has the HTML `head` and `body` defined in the code snippet,
    as follows. The TITLE tag of the web page is set to `CRM` and the web page has
    `Customer Management – CRM` as content (`Header.tmpl`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: The Footer template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Footer` template has the HTML and BODY close tags defined. The `Footer`
    template is presented in the following code snippet (`Footer.tmpl`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The Menu template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Menu` template has the links defined for `Home` and `Create Customer`,
    as shown in the following code (`Menu.tmpl`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: The Create template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Create` template consists of `Header`, `Menu`, and `Footer` templates.
    The form to create customer fields is found in the `create` template. This form
    is submitted to a web path—`/insert`, as shown in the following code snippet (`Create.tmpl`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: The Update template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Update` template consists of the `Header`, `Menu`, and `Footer` templates,
    as follows. The form to update customer fields is found in the `Update` template.
    This form is submitted to a web path, `/alter` (`Update.tmpl`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The View template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `View` template consists of `Header`, `Menu`, and `Footer` templates. The
    form to view the customer fields is found in the `View` template, which is presented
    in code as follows (`View.tmpl`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot displays the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/42cf8e4a-b8fc-41c6-8a63-a925ab54ad52.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The web browser output is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/56f7db84-25cd-48c4-bd64-daf73ecf98da.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduced database operations and web forms. Now, you will be
    able to build web applications that can store data in databases. Arrays, slices,
    two-dimensional slices, and maps were covered with code samples. Array methods
    such as `len`, iterating through an array using `for`, and `range` were explained
    in this chapter using code snippets. Two-dimensional arrays and slice of slices
    were discussed in the *Slices* section.
  prefs: []
  type: TYPE_NORMAL
- en: Maps were explained with various scenarios such as adding keys and values, as
    well as retrieving and deleting values. Maps of different types, such as strings
    and integers, were also discussed in this chapter. Furthermore, variadic functions,
    deferred function calls, and panic and recover operations were demonstrated in
    the *Database operations* and *CRUD web forms *sections.
  prefs: []
  type: TYPE_NORMAL
- en: The CRM application was built as a web application with data persisted in the
    MySQL database. Database operations for adding, deleting, updating, and retrieving
    data were shown in code snippets. In addition, web forms for creating, updating,
    deleting, and viewing customer data were presented using web forms with templates.
    MySQL driver and its installation details were provided in the *Technical requirements*
    section of this chapter. How to create a web application using Go was demonstrated
    with execution details.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will have topics related to linear data structures such as
    lists, sets, tuples, and stacks.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the name of the method to get the size of an array?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you find the capacity of the slice?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you initialize the 2D slice of a string type?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you add an element to the slice?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using code, can you demonstrate how to create a map of key strings and value
    strings? Initialize the map with keys and values in the code, iterate them in
    a loop, and print the keys and values in the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you delete a value in a map?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What parameters are required for getting a database connection?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which `sql.Rows` class method makes it possible to read the attributes of the
    entity in a table?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does `defer` do when a database connection is closed?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which method allows the `sql.DB` class to create a prepared statement?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To read more about arrays, maps and slices, the following links are recommended:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Learning Go Data Structures and Algorithms [Video]*, by Gustavo Chaín'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Mastering Go*, by Mihalis Tsoukalos'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
