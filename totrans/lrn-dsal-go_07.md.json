["```go\nvar arr = [4][5] int{\n    {4,5,7,8,9},\n    {1,2,4,5,6},\n    {9,10,11,12,14},\n    {3,5,6,8,9}\n}\n```", "```go\nvar value int = arr[2][3]\n```", "```go\nvar matrix = [1][3] int{\n    {1, 2, 3}\n}\n```", "```go\ngo run row_matrix.go\n```", "```go\nvar matrix = [4][1] int{\n    {1},\n    {2},\n    {3},\n    {4}\n}\n```", "```go\ngo run column_matrix.go\n```", "```go\nvar matrix = [3][3] int{\n    {1,0,0},\n    {1,1,0},\n    {2,1,1}\n}\n```", "```go\ngo run lower_triangular.go\n```", "```go\nvar matrix = [3][3] int{\n    {1,2,3},\n    {0,1,4},\n    {0,0,1}\n}\n```", "```go\ngo run upper_triangular.go\n```", "```go\nvar matrix = [3][3] int{\n    {0,0,0},\n    {0,0,0},\n    {0,0,0}\n}\n```", "```go\ngo run null_matrix.go\n```", "```go\n///main package has examples shown\n// in Go Data Structures and algorithms book\npackage main\n\n// importing fmt package\nimport (\n    \"fmt\"\n)\n// identity method \nfunc Identity(order int) [][]float64 {\nvar matrix [][]float64\n    matrix = make([][]float64, order)\nvar i int\n    for i = 0; i < order; i++ {\nvar temp []float64\n        temp = make([]float64, order)\n        temp[i] = 1\n        matrix[i] = temp\n    }\n    return matrix\n}\n// main method \nfunc main() {\n    fmt.Println(Identity(4))\n}\n```", "```go\ngo run identity_matrix.go\n```", "```go\nvar matrix1 = [2][2] int{\n    {4,5},\n    {1,2}\n}\nvar matrix2 = [2][2] int{\n    {6,7},\n    {3,4}\n}\n```", "```go\n// add method\nfunc add(matrix1 [2][2]int, matrix2 [2][2]int) [2][2]int {\n    var m int\n    var l int\n    var sum [2][2]int\n    for l = 0; l < 2; l++ {\n        for m=0; m <2; m++ {\n            sum[l][m] = matrix1[l][m] +matrix2[l][m]\n        }\n    }\n    return sum\n}\n```", "```go\nvar sum [2][2]int \nsum = add(matrix1, matrix2)\n```", "```go\n// subtract method\nfunc subtract(matrix1 [2][2]int, matrix2 [2][2]int) [2][2]int {\n    var m int\n    var l int\n    var difference [2][2]int\n    for l = 0; l < 2; l++ {\n        for m=0; m <2; m++ {\n            difference[l][m] = matrix1[l][m] -matrix2[l][m]\n        }\n    }\n    return difference\n}\n```", "```go\nvar difference [2][2]int\ndifference = subtract(matrix1, matrix2)\n```", "```go\n// multiply method\nfunc multiply(matrix1 [2][2]int, matrix2 [2][2]int) [2][2]int {\n     var m int\n    var l int\n    var n int\n    var product [2][2]int\n    for l = 0; l < 2; l++ {\n        for m=0; m <2; m++ {\n            var productSum int = 0\n            for n=0; n< 2; n++ {\n                productSum = productSum + matrix1[l][n]*matrix2[n][m]\n            }\n            product[l][m] = productSum;\n        }\n    }\n    return product\n}\n```", "```go\nvar product [2][2]int\nproduct = multiply(matrix1, matrix2)\n```", "```go\n// transpose method\nfunc transpose(matrix1 [2][2]int) [2][2]int {\n    var m intvar l int\n    var transMatrix [2][2]int\n    for l = 0; l < 2; l++ {\n        for m=0; m <2; m++ {\n            transMatrix[l][m] = matrix1[m][l]\n        }\n    }\n    return transMatrix\n}\n```", "```go\n// determinant method\nfunc determinant(matrix1 [2][2]int) float32 {\n    var m int\n    var l int\n    var det float32\n    det = det + ( (matrix1[0][0]*matrix1[1][1])-(matrix1[0][1]*matrix1[1][0]));\n    return det\n}\n```", "```go\n//inverse method\nfunc inverse(matrix [2][2]int) [][]float64 {\n  var det float64\n  det = determinant(matrix)\n  var invmatrix float64\n\n  invmatrix[0][0] = matrix[1][1]/det\n  invmatrix[0][1] = -1*matrix[0][1]/det\n  invmatrix[1][0] = -1*matrix[1][0]/det\n  invmatrix[1][1] = matrix[0][0]/det\n  return invmatrix\n}\n\n```", "```go\ngo run twodmatrix.go\n```", "```go\n///main package has examples shown\n// in Go Data Structures and algorithms book\npackage main\n// importing fmt package\nimport (\n    \"fmt\"\n)\n//prints the matrix in zig-zag fashion\nfunc PrintZigZag(n int) []int {\n    var zigzag []int\n    zigzag = make([]int, n*n)\n    var i int\n    i = 0\n    var m int\n    m = n * 2\n    var  p int\n    for p = 1; p <= m; p++ {\n        var x int\n        x = p - n\n        if x < 0 {\n           x = 0\n        }\n        var y int\n        y = p - 1\n        if y > n-1 {\n            y = n - 1\n       }\n       var j int\n       j = m - p\n        if j > p {\n            j = p\n        }\n        var k int\n        for k = 0; k < j; k++ {\n           if p&1 == 0 {\n               zigzag[(x+k)*n+y-k] = i\n           } else {\n               zigzag[(y-k)*n+x+k] = i\n            }\n           i++\n        }\n   }\n   return zigzag\n}\n```", "```go\n// main method\nfunc main() {\n  var n int    \n  n = 5\n  var length int\n    length = 2\n    var i int\n    var sketch int\n    for i, sketch = range PrintZigZag(n) {\n       fmt.Printf(\"%*d \", length, sketch)\n        if i%n == n-1 {\n            fmt.Println(\"\")\n       }\n   }\n}\n```", "```go\ngo run zigzagmatrix.go\n```", "```go\n///main package has examples shown\n// in Go Data Structures and algorithms book\npackage main\n// importing fmt package\nimport (\n    \"fmt\"\n)\n//PrintSpiral method\nfunc PrintSpiral(n int) []int {\n\n    var left int\n    var top int\n    var right int\n    var bottom int\n\n    left =0\n    top =0\n    right = n-1\n    bottom = n-1\n    var size int\n    size = n * n\n    var s []int\n    s = make([]int, size)\n\n    var i int\n    i = 0\n    for left < right {\n\n        var c int\n        for c = left; c <= right; c++ {\n            s[top*n+c] = i\n            i++\n        }\n        top++\n\n        var r int\n        for r = top; r <= bottom; r++ {\n            s[r*n+right] = i\n            i++\n        }\n        right--\n        if top == bottom {\n            break\n        }\n\n        for c = right; c >= left; c-- {\n            s[bottom*n+c] = i\n            i++\n        }\n        bottom--\n\n        for r = bottom; r >= top; r-- {\n            s[r*n+left] = i\n            i++\n        }\n        left++\n    }\n\n    s[top*n+left] = i\n\n    return s\n}\n```", "```go\nfunc main() {\n   var n int\n    n = 5\n  var length int\n    length = 2\n    var i int\n    var sketch int\n    for i, sketch = range PrintSpiral(n) {\n        fmt.Printf(\"%*d \", length, sketch)\n        if i%n == n-1 {\n            fmt.Println(\"\")\n        }\n    }\n}\n```", "```go\ngo run spiralmatrix.go\n```", "```go\n\n///main package has examples shown\n// in Go Data Structures and algorithms book\npackage main\n\n// importing fmt package\nimport (\n    \"fmt\"\n)\n//changeMatrix method\nfunc changeMatrix(matrix [3][3]int) [3][3]int {\n   var i int\n   var j int\n   var Rows [3]int\n   var Columns [3]int\n\n   var matrixChanged [3][3]int\n\n   for i=0; i<3; i++{\n     for j=0; j < 3; j++{\n         if matrix[i][j]==1 {\n            Rows[i] =1\n            Columns[j] =1\n         }\n\n      }\n    }\n\n   for i=0; i<3; i++ {\n    for j=0; j<3; j++{\n      if Rows[i]==1 || Columns[j]==1{\n      matrixChanged[i][j] = 1\n      }\n\n     }\n  }\n\n  return matrixChanged\n\n}\n```", "```go\n//printMatrix method\nfunc printMatrix(matrix [3][3]int) {\n   var i int\n   var j int\n   //var k int\n   for i=0; i < 3; i++ {\n\n     for j=0; j < 3; j++ {\n\n          fmt.Printf(\"%d\",matrix[i][j])\n\n     }\n     fmt.Printf(\"\\n\")\n   }\n\n}\n```", "```go\n//main method\nfunc main() {\n\n var matrix = [3][3] int {{1,0,0},{0,0,0},{0,0,0}}\n\n printMatrix(matrix)\n\n matrix = changeMatrix(matrix)\n\n printMatrix(matrix)\n\n}\n```", "```go\ngo run boolean_matrix.go\n```", "```go\n///main package has examples shown\n// in Go Data Structures and algorithms book\npackage main\n\n// importing fmt package\nimport (\n    \"fmt\"\n    \"math/rand\"\n)\n//main method\nfunc main() {\n\nvar threedarray [2][2][2]int\n\nvar i int\n\nvar j int\n\nvar k int\n\nfor i=0; i < 2; i++ {\n\n   for j=0; j < 2; j++ {\n\n     for k=0; k < 2; k++ {\n\n         threedarray[i][j][k] = rand.Intn(3)\n     }\n   }\n}\n\n fmt.Println(threedarray)\n}\n```", "```go\ngo run multidarray.go\n```", "```go\nvar array [3][3][3]int\nvar i int\nvar j int\nvar k int\nfor i=0; i < 3; i++ {\n   for j=0; j < 3; j++ {\n     for k=0; k < 3; k++ {\n\n         array[i][j][k] = rand.Intn(3)\n     }\n   }\n}\n```", "```go\n   for j=0; j < 3; j++ {\n     for k=0; k < 3; k++ {\n         fmt.Printf(\"%d \",array[0][j][k])\n     }\n     fmt.Printf(\"\\n\")\n   }\n```", "```go\n   for j=0; j < 3; j++ {\n        for k=0; k < 3; k++ {\n            fmt.Printf(\"%d \",array[1][j][k])\n        }\n        fmt.Printf(\"\\n\")\n      }\n```", "```go\nfor j=0; j < 3; j++ {\n           for k=0; k < 3; k++ {\n               fmt.Printf(\"%d \",array[2][j][k])\n           }\n           fmt.Printf(\"\\n\")\n         }\n```", "```go\ngo run tensor.go\n```"]