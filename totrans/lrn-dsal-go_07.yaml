- en: Homogeneous Data Structures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Homogeneous data structures** contain similar types of data, such as integers
    or double values. Homogeneous data structures are used in matrices, as well as
    tensor and vector mathematics. **T****ensors** are mathematical structures for
    scalars and vectors. A first-rank tensor is a **vecto****r**. A vector consists
    of a row or a column. A tensor with zero rank is a **scalar**. A **matrix** is
    a two-dimensional cluster of numbers. They are all used in scientific analysis.'
  prefs: []
  type: TYPE_NORMAL
- en: Tensors are used in material science. They are used in mathematics, physics,
    mechanics, electrodynamics, and general relativity. Machine learning solutions
    utilize a tensor data structure. A tensor has properties such as position, shape,
    and a static size.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following homogeneous data structures:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Two-dimensional arrays**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multi-dimensional arrays**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following scenarios are shown to demonstrate the usage of two-dimensional
    and multi-dimensional arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: Matrix representation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiplication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Addition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subtraction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determinant calculation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inversion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transposition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Install Go Version 1.10 from [https://golang.org/doc/install](https://golang.org/doc/install) for
    your OS.
  prefs: []
  type: TYPE_NORMAL
- en: The GitHub URL for the code in this chapter is as follows: [https://github.com/PacktPublishing/Learn-Data-Structures-and-Algorithms-with-Golang/tree/master/Chapter05](https://github.com/PacktPublishing/Learn-Data-Structures-and-Algorithms-with-Golang/tree/master/Chapter05)[.](https://github.com/PacktPublishing/Learn-Data-Structures-and-Algorithms-with-Go/tree/master/Chapter05)
  prefs: []
  type: TYPE_NORMAL
- en: Two-dimensional arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Two-dimensional arrays were presented briefly in [Chapter 2](de6f0788-c24d-4008-8371-3dab33f7d52d.xhtml),
    *Getting Started with Go for Data Structures and Algorithms*. To recap, for dynamic
    allocation, we use **slice of slices**, which is a two-dimensional array. A two-dimensional
    array, is a list of single-dimensional arrays. Every element in a two-dimensional
    array `arr`, is identified as `arr[i][j]`, where `arr` is the name of the array
    and *i* and *j* represent rows and columns, and their values ranging from 0 to
    *m* and 0 to *n*, respectively. Traversing a two-dimensional array is of *O*(*m***n*)
    complexity.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code shows how to initialize an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'An element in a two-dimensional array is accessed with a row index and column
    index. In the following example, the array''s value in row `2` and column `3`
    is retrieved as an integer value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Arrays can store a sequential collection of data elements of the same type.
    Homogeneous data structure arrays consist of contiguous memory address locations.
  prefs: []
  type: TYPE_NORMAL
- en: Two-dimensional matrices are modeled as two-dimensional arrays. A scalar is
    an element of a field that defines a vector space. A matrix can be multiplied
    by a scalar. You can divide a matrix by any non-zero real number.
  prefs: []
  type: TYPE_NORMAL
- en: The order of a matrix is the number of rows, *m,* by the number of columns, *n*.
    A matrix with rows *m* and columns *n* is referred to as an ***m* x *n* matrix**.
    There are multiple types of matrices, such as a **row matrix**, **column matrix**,
    **triangular matrix**, **null matrix**, and **zero matrix**; let's discuss them
    in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Row matrix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A row matrix is a 1 x *m* matrix consisting of a single row of *m* elements,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the `row_matrix.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2f9687b9-06c3-4b42-a3f7-ffd2392f609f.png)'
  prefs: []
  type: TYPE_IMG
- en: The next section talks about the **column matrix** data structure.
  prefs: []
  type: TYPE_NORMAL
- en: Column matrix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A column matrix is an *m* x 1 matrix that has a single column of *m* elements.
    The following code snippet shows how to create a column matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the `column_matrix.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/abd1a58a-d831-4557-9e46-b3e60297d85b.png)'
  prefs: []
  type: TYPE_IMG
- en: The next section talks about the lower triangular matrix data structure.
  prefs: []
  type: TYPE_NORMAL
- en: Lower triangular matrix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A **lower triangular matrix** consists of elements that have a value of zero
    above the main diagonal. The following code snippet shows how to create a lower
    triangular matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the `lower_triangular.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f7ccad7-6401-4647-b9b7-60c55eeeeb3c.png)'
  prefs: []
  type: TYPE_IMG
- en: The next section talks about the upper triangular matrix data structure.
  prefs: []
  type: TYPE_NORMAL
- en: Upper triangular matrix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An upper triangular matrix consists of elements with a value of zero below
    the main diagonal. The following code creates an upper triangular matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the `upper_triangular.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/357ff9ba-4cba-4315-9034-3ca7985e674b.png)'
  prefs: []
  type: TYPE_IMG
- en: The next section talks about the **null matrix data** structure.
  prefs: []
  type: TYPE_NORMAL
- en: Null matrix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A null or a zero matrix is a matrix entirely consisting of zero values, as
    shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the `null_matrix.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/47672921-2339-4082-b72e-8fff96f65d86.png)'
  prefs: []
  type: TYPE_IMG
- en: The next section talks about the **identity matrix** data structure.
  prefs: []
  type: TYPE_NORMAL
- en: Identity matrix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An identity matrix is a unit matrix with ones are on the main diagonal and
    zeros are elsewhere. The following code snippet creates an identity matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the preceding code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a7fdb6ec-375a-45b3-9738-a8eabaa78704.png)'
  prefs: []
  type: TYPE_IMG
- en: The next section talks about the **symmetric matrix** data structure.
  prefs: []
  type: TYPE_NORMAL
- en: Symmetric matrix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A symmetric matrix is a matrix whose transpose is equal to itself. Symmetric
    matrices include other types of matrices such as **antimetric**, **centrosymmetric**,
    **circulant**, **covariance**, **coxeter**, **hankel**, **hilbert**, **persymmetric**,
    **skew-symmetric**, and **toeplitz matrices**. A **negative matrix** is a matrix
    in which each element is a negative number.
  prefs: []
  type: TYPE_NORMAL
- en: Basic 2D matrix operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at the basic operations on the **two-dimensional
    matrix**. Let's start with initializing the matrices.
  prefs: []
  type: TYPE_NORMAL
- en: '`matrix1` and `matrix2` are initialized in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The `add`, `subtract`, `multiply`, `transpose`, and `inversion` operations are
    presented in the next few sections. For this section, please refer to the `binary_search_tree.go` file.
  prefs: []
  type: TYPE_NORMAL
- en: The add method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `add` method adds the elements of two 2 x 2 matrices. The following code
    returns the created matrix by adding the two matrices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The sum between the two matrices is the result of calling the `add` method.
    The parameters that are passed are the matrices to be added, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The example output of the add method is as follows. Adding `matrix1` and `matrix2`
    gives a **sum matrix**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/36681494-54f1-4470-9eeb-bfe69980a716.png)'
  prefs: []
  type: TYPE_IMG
- en: The subtract method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `subtract` method subtracts the elements of two 2 x 2 matrices. The `subtract`
    method in the following snippet subtracts the elements of `matrix1` and `matrix2`.
    This method returns the resulting matrix after subtraction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The difference between two matrices is the result of calling the `subtract`
    method. The parameters that are passed are the matrices to be subtracted, as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The example output of the `subtract` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/88b6698c-2f6d-43ad-ae65-ab5c19a4e979.png)'
  prefs: []
  type: TYPE_IMG
- en: The multiply method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `multiply` method multiplies the elements of two 2 x 2 matrices. The multiplication
    of two matrices, `matrix1` and `matrix2`, is shown in the following snippet. The
    matrix that''s generated after the multiplication is returned by the `multiply`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The product of two matrices is calculated using the `multiply` method in the
    following code snippet, which takes the two matrices as parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The example output of the multiply method is as follows. The product of `matrix1`
    and `matrix2` is the **product matrix**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e6aeb89d-aa6b-4974-93b5-17a8dec6924f.png)'
  prefs: []
  type: TYPE_IMG
- en: The transpose method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The transpose of a matrix is achieved using the `transpose` method. This method
    takes the matrix as a parameter and returns the transposed matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The determinant method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `determinant` method calculates the determinant of the matrix. The `determinant`
    method in the following code snippet calculates the `determinant` value of a matrix.
    The method takes the matrix and returns a `float32` value, which is the `determinant`
    of the matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The inverse method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `inverse` method returns the inverse of the matrix, which is passed as
    a parameter. This is shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the `twodmatrix.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/569641bd-9213-4189-bc35-c9095f503a2d.png)'
  prefs: []
  type: TYPE_IMG
- en: The next section talks about the zig-zag matrix data structure.
  prefs: []
  type: TYPE_NORMAL
- en: Zig-zag matrix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A zig-zag matrix is a square arrangement of *n *x *n* integers. The integers
    are arranged on anti-diagonals in sequentially increasing order. The following
    code explains how to create a zig-zag matrix and also how to traverse it. The `PrintZigZag`
    method creates the matrix in a zig-zag fashion with the elements in a sequentially
    increasing order. The method takes the integer `n` as a parameter and returns
    the integer array, which is the zig-zag matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The `main` method invokes the `PrintZigZag` method, which takes the parameter
    `n` and prints the matrix first from left to right, then from right to left for
    the second level, and so on. The number of integers is `5` and the field width
    is `2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the `zigzagmatrix.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/286e2673-9acd-4a14-aa1b-199347d09999.png)'
  prefs: []
  type: TYPE_IMG
- en: The next section talks about the spiral matrix data structure.
  prefs: []
  type: TYPE_NORMAL
- en: Spiral matrix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A spiral matrix is an arrangement of *n *x *n* integers in which integers are
    arranged spirally in sequentially increasing order. A spiral matrix is an **old
    toy algorithm**. The spiral order is maintained using four loops, one for each
    corner of the matrix. The `PrintSpiral` method in the following code snippet creates
    a matrix with elements arranged spirally in increasing order. The method takes
    a parameter, `n`, and returns an integer array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following code snippet, the `main` method invokes the `PrintSpiral`
    method, which takes the integer `n` and prints the integer values of the matrix spirally.
    The values returned from the `PrintSpiral` method are printed as fields with a
    width of `2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the `spiralmatrix.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cd70d982-4619-41a7-bb9e-ba7cf9527f44.png)'
  prefs: []
  type: TYPE_IMG
- en: The next section talks about the **Boolean matrix** data structure.
  prefs: []
  type: TYPE_NORMAL
- en: Boolean matrix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A Boolean matrix is a matrix that consists of elements in the *m*^(th )row
    and the *n*^(th )column with a value of 1. A matrix can be modified to be a Boolean
    matrix by making the values in the *m*^(th )row and the *n*^(th) column equal
    to 1. In the following code, the Boolean matrix transformation and print methods
    are shown in detail. The `changeMatrix` method transforms the input matrix in
    to a Boolean matrix by changing the row and column values from 0 to 1 if the cell
    value is 1\. The method takes the input matrix as the parameter and returns the
    changed matrix, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The example output of the change matrix method is shown the following screenshot.
    The elements with 1 in the row or column are checked and the row elements are
    updated to 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1ecb4abc-25cf-43c0-b6ab-c6f1eb3e8fb2.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's take a look at the `printMatrix` method and the `main` method.
  prefs: []
  type: TYPE_NORMAL
- en: The printMatrix method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following code snippet, the `printMatrix` method takes the input matrix
    and prints the matrix values by row and traverses the columns for every row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The main method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `main` method in the following code snippet invokes the `changeMatrix` method
    after initializing the matrix. The changed matrix is printed after the invocation
    of the `changeMatrix` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the `boolean_matrix.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/67aaa4cd-3f80-448e-b66d-4e8894a8f59a.png)'
  prefs: []
  type: TYPE_IMG
- en: The next section talks about multi-dimensional arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Multi-dimensional arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An **array** is a homogeneous collection of data elements. An array''s indexes
    range from index 0 to index *m*-1, where *m* is the fixed length of the array.
    An array with multiple dimensions is an array of an array. The following code
    initializes a multi-dimensional array. A three-dimensional array is printed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the preceding code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e0cccfc-bba3-4058-812e-7ea3a5d323e1.png)'
  prefs: []
  type: TYPE_IMG
- en: The next section talks about **tensor** data structures.
  prefs: []
  type: TYPE_NORMAL
- en: Tensors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A tensor is a multi-dimensional array of components that are spatial coordinates. Tensors
    are used extensively in physics and biological studies in topics such as electromagnetism
    and diffusion tensor imaging. William Rowan Hamilton was the first to come up
    with the term *tensor*. Tensors play a basic role in abstract algebra and algebraic
    topology.
  prefs: []
  type: TYPE_NORMAL
- en: The tensor order is the sum of the order of its arguments, plus the order of
    the result tensor. For example, an inertia matrix is a second-order tensor. Spinors
    are also multi-dimensional arrays, but the values of their elements change via
    coordinate transformations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The initialization of a tensor is shown here. The array is initialized with
    integer values ranging from 0 to 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Unfolding a tensor is done along the first dimension. Rearranging the tensor
    mode''s *n* vectors is referred to as mode *n*-unfolding of a tensor. 0-mode unfolding
    of a tensor array is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '1-mode unfolding of a tensor array is shown here. The array''s first dimension
    index is set to 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The 2-mode unfolding of a tensor array is shown here. The array''s first dimension
    row index is set to 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the `tensor.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/83e23b7a-2bc8-4b85-adde-cf4290930718.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered homogeneous data structures such as two-dimensional arrays
    and multi-dimensional arrays. Matrix operations such as sum, subtraction, multiplication,
    inverse, and determinant have been explained with code examples. Spiral matrices,
    zig-zag matrices, and Boolean matrices have been explained using two-dimensional
    arrays. Tensors and operations such as folding were also covered.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, heterogeneous data structures such as linked lists, ordered
    lists, and unordered lists will be covered.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is 2-mode unfolding of a tensor array?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a two-dimensional array of strings and initialize it. Print the strings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give an example of a multi-dimensional array and traverse through it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For a 3 x 3 matrix, write code that calculates the determinant of the matrix.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a transpose of a 3 x 3 matrix?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a zig-zag matrix?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write code with an example of a spiral matrix.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which dimension is typically unfolded for tensor arrays?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you define a Boolean matrix?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose two 3 x 3 matrices and find the product of the matrices.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following books are recommended if you want to learn more about arrays,
    matrices, and tensors:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Advanced Data Structures*, by Peter Brass'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Dynamic Data Structures: Lists, Stacks, Queues, and Trees*, by Bogdan Patrut,
    and Tiberiu Socaciu'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Data structures and Algorithms: An Easy Introduction*, by Rudolph Russell'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
