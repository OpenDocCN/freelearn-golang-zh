- en: Heterogeneous Data Structures
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异构数据结构
- en: '**Heterogeneous data structures** are data structures that contain diverse
    types of data, such as integers, doubles, and floats. **Linked lists** and **ordered
    lists** are good examples of these data structures. They are used for memory management.
    A linked list is a chain of elements that are associated together by means of
    pointers. Each element''s pointer links to the following item, which connects
    the chain together. Linked lists don''t have to take up a block of memory. The
    memory that they utilize can be allocated dynamically. It comprises a progression
    of nodes, which are the components of the list. Ordered lists and unordered lists
    from HTML are shown to demonstrate the usage of lists and storage management.
    We will cover linked lists, ordered lists, and unordered lists in this chapter
    and show the implementation of their methods with appropriate examples. This chapter
    covers the following heterogeneous data structures:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**异构数据结构**是包含多种类型数据的数据结构，例如整数、双精度浮点数和浮点数。**链表**和**有序列表**是这些数据结构的良好示例。它们用于内存管理。链表是由指针关联的元素链。每个元素的指针链接到下一个项目，从而将链连接在一起。链表不必占用一块内存。它们使用的内存可以动态分配。它由一系列节点组成，这些节点是列表的组成部分。为了展示列表和存储管理，展示了HTML中的有序列表和无序列表。我们将在本章中介绍链表、有序列表和无序列表，并使用适当的示例展示它们的实现方法。本章涵盖了以下异构数据结构：'
- en: Linked lists
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链表
- en: Ordered lists
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有序列表
- en: Unordered lists
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无序列表
- en: We covered singly linked lists and doubly linked lists with code examples in
    [Chapter 3](6fc91a59-40ee-4183-8d13-2bbda917bf43.xhtml), *Linear Data Structures*.
    Circular-linked lists were covered in [Chapter 4](8fef9c62-c4b9-460b-965a-0a0da1fbd72e.xhtml),
    *Non-Linear Data Structures*.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第3章](6fc91a59-40ee-4183-8d13-2bbda917bf43.xhtml)中通过代码示例介绍了单链表和双链表，*线性数据结构*。循环链表在[第4章](8fef9c62-c4b9-460b-965a-0a0da1fbd72e.xhtml)中介绍，*非线性数据结构*。
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Install Go Version 1.10 for your OS from the following link: [https://golang.org/doc/install](https://golang.org/doc/install).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下链接安装适用于您的操作系统的Go版本1.10：[https://golang.org/doc/install](https://golang.org/doc/install)。
- en: 'The GitHub URL for the code in this chapter is as follows: [https://github.com/PacktPublishing/Learn-Data-Structures-and-Algorithms-with-Golang/tree/master/Chapter06](https://github.com/PacktPublishing/Learn-Data-Structures-and-Algorithms-with-Golang/tree/master/Chapter06).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章代码的GitHub URL如下：[https://github.com/PacktPublishing/Learn-Data-Structures-and-Algorithms-with-Golang/tree/master/Chapter06](https://github.com/PacktPublishing/Learn-Data-Structures-and-Algorithms-with-Golang/tree/master/Chapter06)。
- en: Linked lists
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链表
- en: A linked list is a linear collection of elements with information. The linked
    list shrinks or expands based on whether the components are to be included or
    removed. This list can be small or enormous, yet, regardless of the size, the
    elements that make it up are straightforward. Linked lists were covered in [Chapter
    3](6fc91a59-40ee-4183-8d13-2bbda917bf43.xhtml), *Linear Data Structures*. They
    consume more memory than arrays. Reverse traversing is a problem for singly linked
    lists because a singly linked list points to the next node forward. The next section
    explains how to reverse a singly linked list with a code example.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 链表是由具有信息的元素组成的线性集合。链表根据是否包含或删除组件而收缩或扩展。这个列表可以很小或很大，但无论大小，组成它的元素都是简单的。链表在[第3章](6fc91a59-40ee-4183-8d13-2bbda917bf43.xhtml)中介绍，*线性数据结构*。它们比数组消耗更多的内存。对于单链表来说，反向遍历是一个问题，因为单链表指向下一个节点是向前。下一节将解释如何通过代码示例来反转单链表。
- en: Singly, doubly, and circular-linked lists will be covered in this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 单链表、双链表和循环链表将在本章中介绍。
- en: Singly linked lists
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单链表
- en: A singly linked list is a dynamic data structure in which addition and removal
    operations are easy; this is because it's a dynamic data structure and not fixed.
    Stack and queue data structures are implemented with linked lists. More memory
    is consumed when elements are dynamically added because dynamic data structures
    aren't fixed. Random retrieval is not possible with a singly linked list because
    you will need to traverse the nodes for a positioned node. Insertion into a singly
    linked list can be at the beginning or end of the list, and after a specified
    node. Deletion can happen at the beginning or end of the list and after a specified
    node.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 单链表是一种动态数据结构，其中添加和删除操作很容易；这是因为它是动态数据结构，不是固定的。栈和队列数据结构是用链表实现的。当动态添加元素时，会消耗更多内存，因为动态数据结构不是固定的。单链表不支持随机检索，因为您需要遍历节点以定位节点。单链表中的插入可以在列表的开始或结束处，以及指定节点之后。删除可以在列表的开始或结束处以及指定节点之后进行。
- en: Reversing a singly linked list is shown in this section. The methods that are
    explained in this section are a part of the `linked_list.go` file that's provided
    in the code bundle.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本节展示了如何反转单链表。本节中解释的方法是代码包中提供的 `linked_list.go` 文件的一部分。
- en: 'The `Node` class is defined in this snippet with a node pointer, `nextNode`,
    and a `rune` property:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码片段中定义了 `Node` 类，具有节点指针 `nextNode` 和 `rune` 属性：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The methods of singly linked lists are discussed in the following sections.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分将讨论单链表的方法。
- en: The CreateLinkedList method
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建链表方法
- en: 'The `CreateLinkedList` method creates a linked list of runes from *a* to *z*:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`CreateLinkedList` 方法创建从 *a* 到 *z* 的 runes 链表：'
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The example output for the `CreateLinkedList` method is shown as follows. The
    `headNode` is created with a value of `97`. The linked list is created with nodes
    starting from *a* to *z*:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为 `CreateLinkedList` 方法的示例输出。`headNode` 以值 `97` 创建。链表以从 *a* 到 *z* 的节点创建：
- en: '![](img/b0cdefbf-90ea-4233-90ee-8803f732a136.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b0cdefbf-90ea-4233-90ee-8803f732a136.png)'
- en: The ReverseLinkedList method
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逆序链表方法
- en: The `ReverseLinkedList` function takes a node pointer, `nodeList`, and returns
    a node pointer to a reversed linked list.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`ReverseLinkedList` 函数接受一个节点指针 `nodeList` 并返回一个指向反转链表的节点指针。'
- en: 'The following code snippet shows how the linked list is reversed:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了如何反转链表：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The example output for the reverse linked list method is as follows. The method
    takes the parameter of a linked string starting from *a* to *z*. The reversed
    list is from *z* to *a* nodes:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为逆序链表方法的示例输出。该方法接受从 *a* 到 *z* 的链字符串参数。反转后的列表是从 *z* 到 *a* 的节点：
- en: '![](img/3bb6ef63-efff-4bb7-af86-b74b96a4383b.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3bb6ef63-efff-4bb7-af86-b74b96a4383b.png)'
- en: The main method
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主方法
- en: 'The `main` method creates the linked list, and prints the linked list and the
    reversed list in string format:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`main` 方法创建链表，并以字符串格式打印链表和反转后的链表：'
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Run the following command to execute the `linked_list.go` file:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令以运行 `linked_list.go` 文件：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is the output:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出：
- en: '![](img/470312f7-84ce-4342-a8f2-a8698ae84c96.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/470312f7-84ce-4342-a8f2-a8698ae84c96.png)'
- en: The next section talks about the doubly linked list data structure.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分将讨论双向链表数据结构。
- en: Doubly linked lists
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 双向链表
- en: 'A doubly linked list is a data structure that consists of nodes that have links
    to the previous and the next nodes. Doubly linked lists were presented with code
    examples in [Chapter 3](6fc91a59-40ee-4183-8d13-2bbda917bf43.xhtml), *Linear Data
    Structures*. Lists in Go are implemented as doubly linked lists. The elements
    `14` and `1` are pushed backward and forward, respectively. The elements `6` and
    `5` are inserted before and after. The doubly linked list is iterated and the
    elements are printed. The code in this section shows how lists can be used:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 双向链表是一种由具有指向前一个和下一个节点的节点组成的数据结构。在 [第 3 章](6fc91a59-40ee-4183-8d13-2bbda917bf43.xhtml)
    *线性数据结构* 中展示了双向链表的代码示例。Go 中的列表实现为双向链表。元素 `14` 和 `1` 分别向后和向前推送。元素 `6` 和 `5` 分别插入到前后。双向链表被迭代，并打印出元素。本节中的代码展示了如何使用列表：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Run the following command to execute the `double_linked_list.go` file:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令以运行 `double_linked_list.go` 文件：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is the output:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出：
- en: '![](img/739f2e88-cbac-424a-9179-47eed8d052dd.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/739f2e88-cbac-424a-9179-47eed8d052dd.png)'
- en: The next section talks about the circular-linked list data structure.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分将讨论循环链表数据结构。
- en: Circular-linked lists
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 循环链表
- en: A circular-linked list is a collection of nodes in which the last node is connected
    to the first node. Circular-linked lists were briefly covered in [Chapter 4](8fef9c62-c4b9-460b-965a-0a0da1fbd72e.xhtml),
    *Non-Linear Data Structures*. Circular-linked lists are used to create a circular
    queue.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 循环链表是一系列节点集合，其中最后一个节点连接到第一个节点。循环链表在 [第 4 章](8fef9c62-c4b9-460b-965a-0a0da1fbd72e.xhtml)
    中简要介绍，*非线性数据结构*。循环链表用于创建循环队列。
- en: In the following section, a circular queue struct is defined and implemented.
    The methods that are explained in this section are part of the `circular_queue.go`
    file given in the code bundle.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下章节中，定义并实现了循环队列结构。本节中解释的方法是代码包中给出的 `circular_queue.go` 文件的一部分。
- en: The CircularQueue class
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`CircularQueue` 类'
- en: 'The `CircularQueue` class has `size`, `head`, and last integer properties,
    as well as a `nodes` array. The class is defined in the following code snippet:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`CircularQueue` 类具有 `size`、`head` 和 `last` 整数属性，以及一个 `nodes` 数组。该类在以下代码片段中定义：'
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let's discuss the different methods of the `CircularQueue` class in the following
    sections.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在以下章节中讨论 `CircularQueue` 类的不同方法。
- en: The NewQueue method
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`NewQueue` 方法'
- en: 'The `NewQueue` method creates a new instance of the circular queue. The `NewQueue`
    function takes the `num` parameter, which is the `size` of the queue. The function
    returns the circular queue of nodes, as shown in the following code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`NewQueue` 方法创建循环队列的新实例。`NewQueue` 函数接受 `num` 参数，它是队列的 `size`。函数返回节点组成的循环队列，如下面的代码所示：'
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The IsUnUsed method
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`IsUnUsed` 方法'
- en: 'The `IsUnUsed` method of the `CircularQueue` class in the following snippet
    checks whether `head` is equal to the `last` node and returns `true` if so; otherwise,
    it returns `false`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码片段中，`CircularQueue` 类的 `IsUnUsed` 方法检查 `head` 是否等于 `last` 节点，如果是则返回 `true`；否则返回
    `false`：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The IsComplete method
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`IsComplete` 方法'
- en: 'The `IsComplete` function of the `CircularQueue` class returns `true` if the
    head node''s position is the same as the `last` node position `+1`; otherwise,
    it returns `false`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`CircularQueue` 类的 `IsComplete` 方法如果头节点位置与 `last` 节点位置 `+1` 相同则返回 `true`；否则返回
    `false`：'
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The Add method
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Add` 方法'
- en: 'This method adds the given element to the circular queue. In the following
    code snippet, the `Add` method takes an `element` parameter of the interface type
    and adds the `element` to the circular queue:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将给定的元素添加到循环队列中。在以下代码片段中，`Add` 方法接受接口类型的 `element` 参数并将 `element` 添加到循环队列中：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The example output for the `Add` method is as follows. The `Add` method takes
    the `element` with value `1` and updates the queue:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`Add` 方法的示例输出如下。`Add` 方法接受值为 `1` 的 `element` 并更新队列：'
- en: '![](img/f45f8c07-94c3-4b2e-b82a-ddd2959856b9.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f45f8c07-94c3-4b2e-b82a-ddd2959856b9.png)'
- en: The MoveOneStep method
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`MoveOneStep` 方法'
- en: 'The `MoveOnestep` method moves the `element` one step forward in the circular
    queue. The `MoveOneStep` method takes the `element` parameter of the interface
    type and moves the `head` node to position two after setting the `element` as
    the `head` node:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`MoveOneStep` 方法将 `element` 在循环队列中向前移动一步。`MoveOneStep` 方法接受接口类型的 `element`
    参数，并将 `element` 设置为 `head` 节点后，将 `head` 节点移动到位置二：'
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The main method
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`main` 方法'
- en: 'The `main` method creates the queue and adds elements to the circular queue:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`main` 方法创建队列并向循环队列添加元素：'
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Run the following command to execute the `circular_queue.go` file:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以执行 `circular_queue.go` 文件：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This is the output:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出：
- en: '![](img/197897a4-e8f2-495b-aa5c-ac10056470ea.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/197897a4-e8f2-495b-aa5c-ac10056470ea.png)'
- en: In the following sections, ordered lists and unordered lists are explained with
    code examples.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下章节中，将使用代码示例解释有序列表和无序列表。
- en: Ordered lists
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有序列表
- en: 'Lists in Go can be sorted in two ways:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Go 中的列表可以按两种方式排序：
- en: '**Ordered list**: By creating a group of methods for the slice data type and
    calling `sort`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有序列表**：通过为切片数据类型创建一组方法并调用 `sort`'
- en: '**Unordered list**: The other way is to invoke `sort.Slice` with a custom `less`
    function'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无序列表**：另一种方式是调用 `sort.Slice` 并使用自定义的 `less` 函数'
- en: The only difference between an ordered list and an unordered list is that, in
    an ordered list, the order in which the items are displayed is mandatory.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 有序列表和无序列表之间的唯一区别是，在有序列表中，显示项目顺序是强制性的。
- en: 'An ordered list in HTML starts with an `<ol>` tag. Each item in the list is
    written in `<li>` tags. Here''s an example:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 中的有序列表以 `<ol>` 标签开始。列表中的每个项目都写在 `<li>` 标签中。以下是一个示例：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'An example of an ordered list using Golang is shown in the following code snippet.
    The `Employee` class has `Name`, `ID`, `SSN`, and `Age` properties:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了使用Golang的有序列表示例。`Employee`类具有`Name`、`ID`、`SSN`和`Age`属性：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The methods that are explained in the following sections are a part of the `linked_list.go`
    file that's provided in the code bundle.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下章节中解释的方法是代码包中提供的`linked_list.go`文件的一部分。
- en: The ToString method
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`ToString`方法'
- en: 'The `ToString` method of the `Employee` class returns a `string` version of
    employee. The `string` version consists of a comma-separated `Name`, `Age`, `ID`,
    and `SSN`. This is shown in the following code snippet:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`Employee`类的`ToString`方法返回员工的字符串版本。字符串版本由逗号分隔的`Name`、`Age`、`ID`和`SSN`组成。以下代码片段展示了这一点：'
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The SortByAge type
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`SortByAge`类型'
- en: 'The `SortByAge` method sorts the elements concerned by `Age`. The `SortByAge`
    interface operates on the `Employee` array. This is shown in the following code
    snippet:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`SortByAge`方法根据`Age`对相关元素进行排序。`SortByAge`接口在`Employee`数组上操作。以下代码片段展示了这一点：'
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `main` method initializes the employees array and sorts the array by age:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`main`方法初始化员工数组并按年龄对数组进行排序：'
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Run the following command to execute the `sort_slice.go` snippet:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令以运行`sort_slice.go`代码片段：
- en: '[PRE20]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This is the output:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '![](img/7d2d550f-95c1-4a1f-a6d4-ac7ac60d99c0.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7d2d550f-95c1-4a1f-a6d4-ac7ac60d99c0.png)'
- en: 'An ordered list is sorted using the sort criteria as follows. The `sort_keys.go`
    code snippet shows how things are sorted by various criteria, such as `name`,
    `mass`, and `distance`. The `Mass` and `Miles` units are defined as `float64`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下排序标准对有序列表进行排序。`sort_keys.go`代码片段展示了如何根据各种标准对事物进行排序，例如`name`、`mass`和`distance`。`Mass`和`Miles`单位定义为`float64`：
- en: '[PRE21]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The next section talks about the `Thing` struct definition.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分将讨论`Thing`结构定义。
- en: The Thing class
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Thing`类'
- en: 'A `Thing` class is defined in the following code with `name`, `mass`, `distance`,
    `meltingpoint`, and `freezingpoint` properties:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码定义了一个具有`name`、`mass`、`distance`、`meltingpoint`和`freezingpoint`属性的`Thing`类：
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The next section talks about the `ByFactor` function type.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分将讨论`ByFactor`函数类型的实现。
- en: The ByFactor function type
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`ByFactor`函数类型'
- en: '`ByFactor` is a type of `less` function. The following code snippet shows the
    `ByFactor` type:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`ByFactor`是一种`less`函数类型。以下代码片段展示了`ByFactor`类型：'
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The Sort method
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Sort`方法'
- en: 'The `Sort` method is a function with the `byFactor` parameter, as shown here:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`Sort`方法是一个具有`byFactor`参数的函数，如下所示：'
- en: '[PRE24]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Thing sorter class
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Thing`排序器类'
- en: 'The `Thing` sorter sorts the elements by their properties. The `ThingSorter`
    class has an array of things and a `byFactor` method:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`Thing`排序器根据其属性对元素进行排序。`ThingSorter`类有一个事物数组和一个`byFactor`方法：'
- en: '[PRE25]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The next section talks about the implementation of the `len`, `swap`, and `less`
    methods.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分将讨论`len`、`swap`和`less`方法的实现。
- en: The len, swap, and less methods
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`len`、`swap`和`less`方法'
- en: 'The `sort.Interface` has the `len`, `swap`, and `less` methods, as shown in
    the following code:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`sort.Interface`具有`len`、`swap`和`less`方法，如下所示：'
- en: '[PRE26]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The main method
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`main`方法'
- en: 'The `main` method creates things and initializes them with values. This method
    shows things that are sorted by `mass`, `distance`, and `name` in decreasing order
    of distance:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`main`方法创建事物并使用值初始化它们。此方法展示了按距离降序排序的按`mass`、`distance`和`name`排序的事物：'
- en: '[PRE27]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Run the following command to execute the `sort_keys.go` file:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令以运行`sort_keys.go`文件：
- en: '[PRE28]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This is the output:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '![](img/c9e68ee3-c36f-4e06-8873-ab5c31ce0e4c.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c9e68ee3-c36f-4e06-8873-ab5c31ce0e4c.png)'
- en: The next section talks about the `struct` data structure.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分将讨论`struct`数据结构。
- en: The struct type
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`struct`类型'
- en: 'A `struct` type (class) can be sorted using different sets of multiple fields.
    In the `sort_multi_keys.go` code, we show how to sort `struct` types. A class
    called `Commit` consists of the `username`, `lang`, and `numlines` properties.
    `username` is a string, `lang` is a string, and `numlines` is an integer. In the
    following code, the `Commit` class is sorted by commits and lines:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用不同的多字段集对`struct`类型（类）进行排序。在`sort_multi_keys.go`代码中，我们展示了如何对`struct`类型进行排序。一个名为`Commit`的类由`username`、`lang`和`numlines`属性组成。`username`是一个字符串，`lang`是一个字符串，`numlines`是一个整数。以下代码中，`Commit`类根据提交和行数进行排序：
- en: '[PRE29]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In the next section, the implementation of the `multiSorter` class is discussed.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，将讨论`multiSorter`类的实现。
- en: The multiSorter class
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`multiSorter`类'
- en: 'The `multiSorter` class consists of the commits and `lessFunction` array properties.
    The `multiSorter` class implements the `Sort` interface to sort the commits, as
    shown in the following code:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`multiSorter`类包含提交和`lessFunction`数组属性。`multiSorter`类实现了`Sort`接口以对提交进行排序，如下面的代码所示：'
- en: '[PRE30]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The different methods of the `multiSorter` class are discussed in the following
    sections.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分将讨论`multiSorter`类的不同方法。
- en: The Sort method
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: The Sort method
- en: 'In the following code snippet, the `Sort` method of `multiSorter` sorts the
    `Commits` array by invoking `sort.Sort` and passing the `multiSorter` argument:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码片段中，`multiSorter`的`Sort`方法通过调用`sort.Sort`并传递`multiSorter`参数来对`Commits`数组进行排序：
- en: '[PRE31]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The OrderBy method
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OrderBy方法
- en: 'The `OrderedBy` method takes the `less` function and returns `multiSorter`.
    The `multisorter` instance is initialized by the `less` function, as shown in
    the following code snippet:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`OrderedBy`方法接收`less`函数并返回`multiSorter`。`multisorter`实例由`less`函数初始化，如下面的代码片段所示：'
- en: '[PRE32]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The len method
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: The len method
- en: 'The `len` method of the `multiSorter` class returns the length of the `Commits`
    array. The `Commits` array is a property of `multiSorter`:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`multiSorter`类的`len`方法返回`Commits`数组的长度。`Commits`数组是`multiSorter`的一个属性：'
- en: '[PRE33]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The Swap method
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: The Swap method
- en: 'The `Swap` method of `multiSorter` takes the integers `i` and `j` as input.
    This method swaps the array elements at index `i` and `j`:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`multiSorter`的`Swap`方法接收整数`i`和`j`作为输入。此方法交换索引`i`和`j`处的数组元素：'
- en: '[PRE34]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The less method
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: less方法
- en: 'The `Less` method of the `multiSorter` class takes the integers *i* and *j*
    and compares the element at index *i* to the element at index *j*:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`multiSorter`类的`Less`方法接收整数*i*和*j*，并比较索引*i*处的元素与索引*j*处的元素：'
- en: '[PRE35]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The main method
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: The main method
- en: 'The `main` method creates a `Commit` array and initializes the array with values.
    Functions are created for sorting by `user`, `language`, and `lines`. `OrderedBy`
    returns a `multiSorter`, and its `sort` method is called by `user`, `language`,
    `increasingLines`, and `decreasingLines`:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`main`方法创建一个`Commit`数组并用值初始化数组。创建了按`user`、`language`和`lines`排序的函数。`OrderedBy`返回一个`multiSorter`，其`sort`方法被`user`、`language`、`increasingLines`和`decreasingLines`调用：'
- en: '[PRE36]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Run the following command to execute the `sort_multi_keys.go` file:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以执行`sort_multi_keys.go`文件：
- en: '[PRE37]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This is the output:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出：
- en: '![](img/0ec44582-206b-4021-a45d-2a802f5e9e0d.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0ec44582-206b-4021-a45d-2a802f5e9e0d.png)'
- en: The next section talks about the HTML unordered list data structure.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分将讨论HTML无序列表数据结构。
- en: Unordered lists
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无序列表
- en: An **unordered list** is implemented as a linked list. In an unordered list,
    the relative positions of items in contiguous memory don't need to be maintained.
    The values will be placed in a random fashion.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 一个**无序列表**被实现为一个链表。在一个无序列表中，不需要维护连续内存中项的相对位置。值将以随机方式放置。
- en: 'An unordered list starts with a `<ul>` tag in HTML 5.0\. Each list item is
    coded with `<li>` tags. Here''s an example:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 无序列表在HTML 5.0中以`<ul>`标签开始。每个列表项用`<li>`标签编码。以下是一个示例：
- en: '[PRE38]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The following is an example of an unordered list in Golang. The `Node` class
    has a property and a `nextNode` pointer, as shown in the following code. The linked
    list will have a set of nodes with a property attribute. The unordered list is
    presented in the script called `unordered_list.go`:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在Golang中的无序列表示例。`Node`类有一个属性和一个`nextNode`指针，如下面的代码所示。链表将有一组具有属性属性的节点。无序列表在名为`unordered_list.go`的脚本中呈现：
- en: '[PRE39]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The next section talks about the `UnOrderedList` class implementation.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分将讨论`UnOrderedList`类的实现。
- en: The UnOrderedList class
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UnOrderedList类
- en: 'The unordered list consists of elements that are not ordered by numbers. An
    `UnOrderedList` class has a `headNode` pointer as the property. Traversing to
    the next node from the head node, you can iterate through the linked list:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 无序列表由未按数字排序的元素组成。一个`UnOrderedList`类有一个`headNode`指针作为属性。从头节点遍历到下一个节点，你可以遍历链表：
- en: '[PRE40]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The next section discusses the `AddtoHead` method and the `IterateList` method
    of the `UnOrderedList` struct.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分将讨论`UnOrderedList`结构体的`AddtoHead`方法和`IterateList`方法。
- en: The AddtoHead method
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AddtoHead方法
- en: 'The `AddtoHead` method adds the node to the head of the unordered list. The
    `AddToHead` method of the `UnOrderedList` class has a property parameter that''s
    an integer. It will make the `headNode` point to a new node created with `property`,
    and the `nextNode` points to the current `headNode` of the unordered list:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`AddtoHead`方法将节点添加到无序列表的头部。`UnOrderedList`类的`AddToHead`方法有一个整数类型的属性参数。它将使`headNode`指向使用`property`创建的新节点，而`nextNode`指向无序列表的当前`headNode`：'
- en: '[PRE41]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The IterateList method
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`IterateList`方法'
- en: 'The `IterateList` method of the `UnOrderedList` class prints the node property
    of the nodes in the list. This is shown in the following code:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`UnOrderedList`类的`IterateList`方法打印列表中节点的属性。以下代码展示了这一点：'
- en: '[PRE42]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The main method
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主方法
- en: 'The `main` method creates an instance of a linked list, and integer properties
    `1`, `3`, `5`, and `7` are added to the head of the linked list. The linked list''s
    `headNode` property is printed after the elements are added:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`main`方法创建了一个链表实例，并将整数属性`1`、`3`、`5`和`7`添加到链表的头部。在添加元素后，打印链表的`headNode`属性：'
- en: '[PRE43]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Run the following command to execute the `unordered_list.go` file from the
    code bundle:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以执行代码包中的`unordered_list.go`文件：
- en: '[PRE44]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'This is the output:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出：
- en: '![](img/894d2d88-9112-4419-9d15-73aaffd77641.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/894d2d88-9112-4419-9d15-73aaffd77641.png)'
- en: Summary
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter covered heterogeneous data structures such as ordered lists and
    unordered lists with code examples. The *Ordered lists* section covered sorting
    slices by single key, multiple keys, and `sort.Slice`. Slices are sorted by making
    the array of struct elements implement the `sort.Sort` interface. Unordered lists
    were described as linked lists with values that are not ordered.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 本章通过代码示例介绍了异构数据结构，如有序列表和无序列表。在*有序列表*部分，介绍了通过单个键、多个键和`sort.Slice`对切片进行排序。切片通过使结构体元素的数组实现`sort.Sort`接口来进行排序。无序列表被描述为具有无序值的链表。
- en: The next chapter will cover dynamic data structures such as **dictionaries**,
    **TreeSets**, **sequences**, **synchronized TreeSets**, and **mutable TreeSets**.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将介绍动态数据结构，如**字典**、**TreeSets**、**序列**、**同步TreeSets**和**可变TreeSets**。
- en: Questions
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which method of the `sort.Sort` interface returns the size of the elements to
    be sorted?
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`sort.Sort`接口的哪个方法返回要排序的元素的大小？'
- en: Which function needs to be passed to the `sort.Slice` method to sort a slice?
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要将哪个函数传递给`sort.Slice`方法以对切片进行排序？
- en: What does the `swap` method do to the elements at the *i* and *j* indices?
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`swap`方法对索引`*i*`和`*j*`处的元素做了什么？'
- en: What is the default order for sorting elements using `sort.Sort`?
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`sort.Sort`对元素进行排序的默认顺序是什么？
- en: How do you implement ascending and descending sorting with `sort.Slice`?
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何使用`sort.Slice`实现升序和降序排序？
- en: How do you sort an array and keep the original order of the elements?
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何对一个数组进行排序并保持元素的原始顺序？
- en: Which interface is used to reverse the order of the data?
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个接口用于反转数据的顺序？
- en: Show an example of sorting a slice.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展示一个对切片进行排序的示例。
- en: Which method is called to add elements to an unordered list?
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个方法用于向无序列表添加元素？
- en: Write a code example of an unordered list of floats.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个浮点数无序列表的代码示例。
- en: Further reading
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following books are recommended if you want to know more about heterogeneous
    data structures:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于异构数据结构的信息，以下书籍推荐：
- en: '*Design Patterns*, by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《设计模式》*，作者：Erich Gamma, Richard Helm, Ralph Johnson, 和 John Vlissides'
- en: '*Introduction to Algorithms – Third Edition*, by Thomas H. Cormen, Charles
    E. Leiserson, Ronald L. Rivest, and Clifford Stein'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《算法导论（第三版）》*，作者：Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest,
    和 Clifford Stein'
- en: '*Data structures and Algorithms: An Easy Introduction*, by Rudolph Russell'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《数据结构与算法：简易入门》*，作者：Rudolph Russell'
