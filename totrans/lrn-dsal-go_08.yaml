- en: Heterogeneous Data Structures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Heterogeneous data structures** are data structures that contain diverse
    types of data, such as integers, doubles, and floats. **Linked lists** and **ordered
    lists** are good examples of these data structures. They are used for memory management.
    A linked list is a chain of elements that are associated together by means of
    pointers. Each element''s pointer links to the following item, which connects
    the chain together. Linked lists don''t have to take up a block of memory. The
    memory that they utilize can be allocated dynamically. It comprises a progression
    of nodes, which are the components of the list. Ordered lists and unordered lists
    from HTML are shown to demonstrate the usage of lists and storage management.
    We will cover linked lists, ordered lists, and unordered lists in this chapter
    and show the implementation of their methods with appropriate examples. This chapter
    covers the following heterogeneous data structures:'
  prefs: []
  type: TYPE_NORMAL
- en: Linked lists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ordered lists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unordered lists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We covered singly linked lists and doubly linked lists with code examples in
    [Chapter 3](6fc91a59-40ee-4183-8d13-2bbda917bf43.xhtml), *Linear Data Structures*.
    Circular-linked lists were covered in [Chapter 4](8fef9c62-c4b9-460b-965a-0a0da1fbd72e.xhtml),
    *Non-Linear Data Structures*.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Install Go Version 1.10 for your OS from the following link: [https://golang.org/doc/install](https://golang.org/doc/install).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The GitHub URL for the code in this chapter is as follows: [https://github.com/PacktPublishing/Learn-Data-Structures-and-Algorithms-with-Golang/tree/master/Chapter06](https://github.com/PacktPublishing/Learn-Data-Structures-and-Algorithms-with-Golang/tree/master/Chapter06).'
  prefs: []
  type: TYPE_NORMAL
- en: Linked lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A linked list is a linear collection of elements with information. The linked
    list shrinks or expands based on whether the components are to be included or
    removed. This list can be small or enormous, yet, regardless of the size, the
    elements that make it up are straightforward. Linked lists were covered in [Chapter
    3](6fc91a59-40ee-4183-8d13-2bbda917bf43.xhtml), *Linear Data Structures*. They
    consume more memory than arrays. Reverse traversing is a problem for singly linked
    lists because a singly linked list points to the next node forward. The next section
    explains how to reverse a singly linked list with a code example.
  prefs: []
  type: TYPE_NORMAL
- en: Singly, doubly, and circular-linked lists will be covered in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Singly linked lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A singly linked list is a dynamic data structure in which addition and removal
    operations are easy; this is because it's a dynamic data structure and not fixed.
    Stack and queue data structures are implemented with linked lists. More memory
    is consumed when elements are dynamically added because dynamic data structures
    aren't fixed. Random retrieval is not possible with a singly linked list because
    you will need to traverse the nodes for a positioned node. Insertion into a singly
    linked list can be at the beginning or end of the list, and after a specified
    node. Deletion can happen at the beginning or end of the list and after a specified
    node.
  prefs: []
  type: TYPE_NORMAL
- en: Reversing a singly linked list is shown in this section. The methods that are
    explained in this section are a part of the `linked_list.go` file that's provided
    in the code bundle.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Node` class is defined in this snippet with a node pointer, `nextNode`,
    and a `rune` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The methods of singly linked lists are discussed in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: The CreateLinkedList method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `CreateLinkedList` method creates a linked list of runes from *a* to *z*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The example output for the `CreateLinkedList` method is shown as follows. The
    `headNode` is created with a value of `97`. The linked list is created with nodes
    starting from *a* to *z*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b0cdefbf-90ea-4233-90ee-8803f732a136.png)'
  prefs: []
  type: TYPE_IMG
- en: The ReverseLinkedList method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `ReverseLinkedList` function takes a node pointer, `nodeList`, and returns
    a node pointer to a reversed linked list.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet shows how the linked list is reversed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The example output for the reverse linked list method is as follows. The method
    takes the parameter of a linked string starting from *a* to *z*. The reversed
    list is from *z* to *a* nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3bb6ef63-efff-4bb7-af86-b74b96a4383b.png)'
  prefs: []
  type: TYPE_IMG
- en: The main method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `main` method creates the linked list, and prints the linked list and the
    reversed list in string format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the `linked_list.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/470312f7-84ce-4342-a8f2-a8698ae84c96.png)'
  prefs: []
  type: TYPE_IMG
- en: The next section talks about the doubly linked list data structure.
  prefs: []
  type: TYPE_NORMAL
- en: Doubly linked lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A doubly linked list is a data structure that consists of nodes that have links
    to the previous and the next nodes. Doubly linked lists were presented with code
    examples in [Chapter 3](6fc91a59-40ee-4183-8d13-2bbda917bf43.xhtml), *Linear Data
    Structures*. Lists in Go are implemented as doubly linked lists. The elements
    `14` and `1` are pushed backward and forward, respectively. The elements `6` and
    `5` are inserted before and after. The doubly linked list is iterated and the
    elements are printed. The code in this section shows how lists can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the `double_linked_list.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/739f2e88-cbac-424a-9179-47eed8d052dd.png)'
  prefs: []
  type: TYPE_IMG
- en: The next section talks about the circular-linked list data structure.
  prefs: []
  type: TYPE_NORMAL
- en: Circular-linked lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A circular-linked list is a collection of nodes in which the last node is connected
    to the first node. Circular-linked lists were briefly covered in [Chapter 4](8fef9c62-c4b9-460b-965a-0a0da1fbd72e.xhtml),
    *Non-Linear Data Structures*. Circular-linked lists are used to create a circular
    queue.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, a circular queue struct is defined and implemented.
    The methods that are explained in this section are part of the `circular_queue.go`
    file given in the code bundle.
  prefs: []
  type: TYPE_NORMAL
- en: The CircularQueue class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `CircularQueue` class has `size`, `head`, and last integer properties,
    as well as a `nodes` array. The class is defined in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Let's discuss the different methods of the `CircularQueue` class in the following
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: The NewQueue method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `NewQueue` method creates a new instance of the circular queue. The `NewQueue`
    function takes the `num` parameter, which is the `size` of the queue. The function
    returns the circular queue of nodes, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The IsUnUsed method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `IsUnUsed` method of the `CircularQueue` class in the following snippet
    checks whether `head` is equal to the `last` node and returns `true` if so; otherwise,
    it returns `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The IsComplete method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `IsComplete` function of the `CircularQueue` class returns `true` if the
    head node''s position is the same as the `last` node position `+1`; otherwise,
    it returns `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The Add method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This method adds the given element to the circular queue. In the following
    code snippet, the `Add` method takes an `element` parameter of the interface type
    and adds the `element` to the circular queue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The example output for the `Add` method is as follows. The `Add` method takes
    the `element` with value `1` and updates the queue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f45f8c07-94c3-4b2e-b82a-ddd2959856b9.png)'
  prefs: []
  type: TYPE_IMG
- en: The MoveOneStep method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `MoveOnestep` method moves the `element` one step forward in the circular
    queue. The `MoveOneStep` method takes the `element` parameter of the interface
    type and moves the `head` node to position two after setting the `element` as
    the `head` node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The main method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `main` method creates the queue and adds elements to the circular queue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the `circular_queue.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/197897a4-e8f2-495b-aa5c-ac10056470ea.png)'
  prefs: []
  type: TYPE_IMG
- en: In the following sections, ordered lists and unordered lists are explained with
    code examples.
  prefs: []
  type: TYPE_NORMAL
- en: Ordered lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Lists in Go can be sorted in two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ordered list**: By creating a group of methods for the slice data type and
    calling `sort`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unordered list**: The other way is to invoke `sort.Slice` with a custom `less`
    function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The only difference between an ordered list and an unordered list is that, in
    an ordered list, the order in which the items are displayed is mandatory.
  prefs: []
  type: TYPE_NORMAL
- en: 'An ordered list in HTML starts with an `<ol>` tag. Each item in the list is
    written in `<li>` tags. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'An example of an ordered list using Golang is shown in the following code snippet.
    The `Employee` class has `Name`, `ID`, `SSN`, and `Age` properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The methods that are explained in the following sections are a part of the `linked_list.go`
    file that's provided in the code bundle.
  prefs: []
  type: TYPE_NORMAL
- en: The ToString method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `ToString` method of the `Employee` class returns a `string` version of
    employee. The `string` version consists of a comma-separated `Name`, `Age`, `ID`,
    and `SSN`. This is shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The SortByAge type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `SortByAge` method sorts the elements concerned by `Age`. The `SortByAge`
    interface operates on the `Employee` array. This is shown in the following code
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The `main` method initializes the employees array and sorts the array by age:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the `sort_slice.go` snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7d2d550f-95c1-4a1f-a6d4-ac7ac60d99c0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'An ordered list is sorted using the sort criteria as follows. The `sort_keys.go`
    code snippet shows how things are sorted by various criteria, such as `name`,
    `mass`, and `distance`. The `Mass` and `Miles` units are defined as `float64`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The next section talks about the `Thing` struct definition.
  prefs: []
  type: TYPE_NORMAL
- en: The Thing class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A `Thing` class is defined in the following code with `name`, `mass`, `distance`,
    `meltingpoint`, and `freezingpoint` properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The next section talks about the `ByFactor` function type.
  prefs: []
  type: TYPE_NORMAL
- en: The ByFactor function type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`ByFactor` is a type of `less` function. The following code snippet shows the
    `ByFactor` type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The Sort method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Sort` method is a function with the `byFactor` parameter, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Thing sorter class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Thing` sorter sorts the elements by their properties. The `ThingSorter`
    class has an array of things and a `byFactor` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The next section talks about the implementation of the `len`, `swap`, and `less`
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: The len, swap, and less methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `sort.Interface` has the `len`, `swap`, and `less` methods, as shown in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The main method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `main` method creates things and initializes them with values. This method
    shows things that are sorted by `mass`, `distance`, and `name` in decreasing order
    of distance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the `sort_keys.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c9e68ee3-c36f-4e06-8873-ab5c31ce0e4c.png)'
  prefs: []
  type: TYPE_IMG
- en: The next section talks about the `struct` data structure.
  prefs: []
  type: TYPE_NORMAL
- en: The struct type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A `struct` type (class) can be sorted using different sets of multiple fields.
    In the `sort_multi_keys.go` code, we show how to sort `struct` types. A class
    called `Commit` consists of the `username`, `lang`, and `numlines` properties.
    `username` is a string, `lang` is a string, and `numlines` is an integer. In the
    following code, the `Commit` class is sorted by commits and lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: In the next section, the implementation of the `multiSorter` class is discussed.
  prefs: []
  type: TYPE_NORMAL
- en: The multiSorter class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `multiSorter` class consists of the commits and `lessFunction` array properties.
    The `multiSorter` class implements the `Sort` interface to sort the commits, as
    shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The different methods of the `multiSorter` class are discussed in the following
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: The Sort method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following code snippet, the `Sort` method of `multiSorter` sorts the
    `Commits` array by invoking `sort.Sort` and passing the `multiSorter` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The OrderBy method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `OrderedBy` method takes the `less` function and returns `multiSorter`.
    The `multisorter` instance is initialized by the `less` function, as shown in
    the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The len method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `len` method of the `multiSorter` class returns the length of the `Commits`
    array. The `Commits` array is a property of `multiSorter`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The Swap method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Swap` method of `multiSorter` takes the integers `i` and `j` as input.
    This method swaps the array elements at index `i` and `j`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The less method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Less` method of the `multiSorter` class takes the integers *i* and *j*
    and compares the element at index *i* to the element at index *j*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The main method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `main` method creates a `Commit` array and initializes the array with values.
    Functions are created for sorting by `user`, `language`, and `lines`. `OrderedBy`
    returns a `multiSorter`, and its `sort` method is called by `user`, `language`,
    `increasingLines`, and `decreasingLines`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the `sort_multi_keys.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0ec44582-206b-4021-a45d-2a802f5e9e0d.png)'
  prefs: []
  type: TYPE_IMG
- en: The next section talks about the HTML unordered list data structure.
  prefs: []
  type: TYPE_NORMAL
- en: Unordered lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An **unordered list** is implemented as a linked list. In an unordered list,
    the relative positions of items in contiguous memory don't need to be maintained.
    The values will be placed in a random fashion.
  prefs: []
  type: TYPE_NORMAL
- en: 'An unordered list starts with a `<ul>` tag in HTML 5.0\. Each list item is
    coded with `<li>` tags. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is an example of an unordered list in Golang. The `Node` class
    has a property and a `nextNode` pointer, as shown in the following code. The linked
    list will have a set of nodes with a property attribute. The unordered list is
    presented in the script called `unordered_list.go`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The next section talks about the `UnOrderedList` class implementation.
  prefs: []
  type: TYPE_NORMAL
- en: The UnOrderedList class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The unordered list consists of elements that are not ordered by numbers. An
    `UnOrderedList` class has a `headNode` pointer as the property. Traversing to
    the next node from the head node, you can iterate through the linked list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The next section discusses the `AddtoHead` method and the `IterateList` method
    of the `UnOrderedList` struct.
  prefs: []
  type: TYPE_NORMAL
- en: The AddtoHead method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `AddtoHead` method adds the node to the head of the unordered list. The
    `AddToHead` method of the `UnOrderedList` class has a property parameter that''s
    an integer. It will make the `headNode` point to a new node created with `property`,
    and the `nextNode` points to the current `headNode` of the unordered list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The IterateList method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `IterateList` method of the `UnOrderedList` class prints the node property
    of the nodes in the list. This is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The main method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `main` method creates an instance of a linked list, and integer properties
    `1`, `3`, `5`, and `7` are added to the head of the linked list. The linked list''s
    `headNode` property is printed after the elements are added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the `unordered_list.go` file from the
    code bundle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/894d2d88-9112-4419-9d15-73aaffd77641.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered heterogeneous data structures such as ordered lists and
    unordered lists with code examples. The *Ordered lists* section covered sorting
    slices by single key, multiple keys, and `sort.Slice`. Slices are sorted by making
    the array of struct elements implement the `sort.Sort` interface. Unordered lists
    were described as linked lists with values that are not ordered.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will cover dynamic data structures such as **dictionaries**,
    **TreeSets**, **sequences**, **synchronized TreeSets**, and **mutable TreeSets**.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which method of the `sort.Sort` interface returns the size of the elements to
    be sorted?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which function needs to be passed to the `sort.Slice` method to sort a slice?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the `swap` method do to the elements at the *i* and *j* indices?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the default order for sorting elements using `sort.Sort`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you implement ascending and descending sorting with `sort.Slice`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you sort an array and keep the original order of the elements?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which interface is used to reverse the order of the data?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Show an example of sorting a slice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which method is called to add elements to an unordered list?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a code example of an unordered list of floats.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following books are recommended if you want to know more about heterogeneous
    data structures:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Design Patterns*, by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Introduction to Algorithms – Third Edition*, by Thomas H. Cormen, Charles
    E. Leiserson, Ronald L. Rivest, and Clifford Stein'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Data structures and Algorithms: An Easy Introduction*, by Rudolph Russell'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
