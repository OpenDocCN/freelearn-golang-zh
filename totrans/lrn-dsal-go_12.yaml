- en: Network and Sparse Matrix Representation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A **sparse matrix** is a matrix in which most of the values are zero. The ratio
    of zero values to non-zero values is known as the **sparsity**. An estimation
    of a matrix''s sparsity can be helpful when creating hypotheses about the availability
    of networks. Extensive big sparse matrices are commonly used in machine learning
    and natural language parsing. It is computationally costly to work with them.
    Recommendation engines use them for representing products inside a catalog. Computer
    vision uses sparse matrices and network data structures when working with pictures
    that contain sections with dark pixels. Network and sparse matrix data structures
    are also used in social graphs and map layouts. In this chapter, we will cover
    the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Network representations using graphs:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Social network representation
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Map layouts
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowledge graphs
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Sparse matrix representation using a list of lists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A social graph that connects people is implemented in this chapter, and a code
    example shows how the graph can be traversed. Map layouts are explained with geographic
    locations with latitude and longitude. Knowledge graphs are explained via the
    use of a car and its parts.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Install Go version 1.10 from [https://golang.org/doc/install](https://golang.org/doc/install)
    [for your OS.](https://golang.org/doc/install)
  prefs: []
  type: TYPE_NORMAL
- en: The GitHub URL for the code in this chapter is as follows: [https://github.com/PacktPublishing/Learn-Data-Structures-and-Algorithms-with-Golang/tree/master/Chapter09](https://github.com/PacktPublishing/Learn-Data-Structures-and-Algorithms-with-Golang/tree/master/Chapter09).
  prefs: []
  type: TYPE_NORMAL
- en: Network representation using graphs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A graph is a representation of a set of objects that''s connected by links.
    The links connect vertices, which are points. The basic operations on a graph
    are the addition and removal of links and vertices. These are some different types
    of graphs:'
  prefs: []
  type: TYPE_NORMAL
- en: Directed graph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-directed graph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connected graph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-connected graph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple graph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi-graph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An **adjacency list** consists of adjacent vertices of a graph that have objects
    or records. An adjacency matrix consists of source and destination vertices. An
    incidence matrix is a two-dimensional Boolean matrix. The matrix has rows of vertices
    and columns that represent the links (edges).
  prefs: []
  type: TYPE_NORMAL
- en: 'Network representation using a graph is shown in the following code. A social
    graph consists of an array of links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `Link` struct is defined and implemented in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The Link class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Link` class consists of the `vertex1` and `vertex2` vertices and the `LinkWeight`
    integer property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The next section talks about the implementation of the different `Link` class
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: The NewSocialGraph method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `NewSocialGraph` function creates a social graph given `num`, which is
    the size of the graph. `Size` is the number of links in the graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The AddLink method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `AddLink` method adds the link between two vertices. The `AddLink` method
    of a social graph takes `vertex1`, `vertex2`, and `weight` as parameters. The
    method adds the link from `vertex1` to `vertex2`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The PrintLinks method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `PrintLinks` method of the `SocialGraph` class prints the links from `vertex
    = 0` and all the links in the graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The main method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `main` method creates a social graph by invoking the `NewSocialGraph` method.
    The links from `0` to `1`, `0` to `2`, `1` to `3`, and `2` to `4` are added to
    the social graph. The links are printed using the `printLinks` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the `social_graph.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/effb0aaf-b05a-4467-8e5b-fbcf04d942ce.png)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we will take a look at the unit test for the social graph
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, we have written a unit test for the social graph method. The code is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the preceding code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e4bba5d-e61f-4e72-8e1f-1458188f7f3d.png)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, a social network representation will be implemented with
    code examples. The preceding graph will be enhanced with nodes. Each node will
    represent a social entity.
  prefs: []
  type: TYPE_NORMAL
- en: Representing a social network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **social network** consists of social links that contain social entities such
    as people, friends, discussions, shares, beliefs, trust, and likes. This graph
    is used to represent the social network.
  prefs: []
  type: TYPE_NORMAL
- en: 'Metrics related to the proximity of entities can be calculated based on the
    graph. Social graphs consist of graph nodes and links, which are maps with a key
    name and multiple keys names, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The different social network methods are explained and implemented in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: The NewSocialGraph method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `NewSocialGraph` method returns a social graph consisting of nil-valued
    `GraphNodes` and `Links`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The AddEntity method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `AddEntity` method adds the entity to the social graph. The `AddEntity`
    method of the `SocialGraph` class takes `name` as a parameter and returns `true`
    if it is added to the social graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The AddLink method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `AddLink` method of the `SocialGraph` class takes `name1` and `name2` as parameters.
    This method creates the entities if the named entities do not exist and creates
    a link between the entities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The PrintLinks method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `PrintLinks` method of the `SocialGraph` class prints the links adjacent
    to the `root` and all the links, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The main method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `main` method creates a social graph. The entities, such as `john`, `per`,
    and `cynthia`, are created and linked with the root node. The friends, such as
    `mayo`, `lorrie`, and `ellie`, are created and linked with `john` and `per`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the `social_graph_example.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4956347c-552c-48f2-a367-11f5dc04b25b.png)'
  prefs: []
  type: TYPE_IMG
- en: The next section talks about the **map layout** implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Map layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A map layout is a geographical visualization of locations that are linked together.
    The nodes in the graph of a map consist of geo-based information. The node will
    have information such as the name of the location, latitude, and longitude. Maps
    are laid out in different scales. Cartographic design is referred to as map creation
    using geographic information.
  prefs: []
  type: TYPE_NORMAL
- en: 'A map layout is shown in the following code snippet. The `Place` class consists
    of `Name`, `Latitude`, and `Longitude` properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The next section talks about the `MapLayout` class.
  prefs: []
  type: TYPE_NORMAL
- en: The MapLayout class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `MapLayout` class consists of `GraphNodes` and `Links`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The different `MapLayout` methods are explained and implemented in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: The NewMapLayout method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `NewMapLayout` method creates a `MapLayout`. The `MapLayout` has `GraphNodes`
    and links maps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The AddPlace method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `AddPlace` method of the `MapLayout` class takes place as a parameter and
    returns `true` if the place exists. If the place does not exist, then a graph
    node with a new place key is created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The AddLink method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `AddLink` method of the `MapLayout` class takes the places as parameters
    and links them together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The PrintLinks method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `PrintLinks` method of `MapLayout` prints the places and the links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The main method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the `main` method, the map layout is created by invoking the `NewMapLayout`
    method. Places are instantiated and added to the map layout. Then, the links are
    added between places:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the `map_layout.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/14daeead-8574-4dcb-8d7b-91c09f4f8b98.png)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we will take a look at the unit test for the `NewMapLayout`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A unit test for the `MapLayout` class''s `NewMapLayout` method is shown in
    the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the preceding code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/122e9e5b-efa0-450d-8333-4386b4a3bf0a.png)'
  prefs: []
  type: TYPE_IMG
- en: The next section talks about implementing a **knowledge graph**.
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge graphs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A knowledge graph is a network representation of entities, items, and users
    as nodes. The nodes interact with one another via links or edges. Knowledge graphs
    are widely used because they are schema less. These data structures are used to
    represent knowledge in the form of graphs, and the nodes have textual information.
    Knowledge graphs are created by using item, entity, and user nodes and linking
    them with edges.
  prefs: []
  type: TYPE_NORMAL
- en: 'An **ontology** consists of a knowledge graph of information nodes. The reasoner
    derives knowledge from knowledge graphs. A knowledge graph consists of classes,
    slots, and facets, which are ontological terms. In the following code, a knowledge
    graph consisting of a car''s bill of materials is explained. The `Class` type
    consists of a name, which is a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The next section talks about the `knowledge graph` class.
  prefs: []
  type: TYPE_NORMAL
- en: The KnowledgeGraph class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `KnowledgeGraph` class consists of `GraphNodes` and links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The different knowledge graph methods are explained and implemented in the following
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: The NewKnowledgeGraph method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `NewKnowledgeGraph` method creates a knowledge graph, which consists of
    `GraphNodes` and `Links` maps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The AddClass method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `AddClass` method of the `KnowledgeGraph` class takes `class` as a parameter and
    returns `true` if the class exists. If the class does not exist, a `GraphNode`
    is created with `class` as a key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The AddLink method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `AddLink` method of the `KnowledgeGraph` class takes `class1` and `class2` as parameters,
    and a link is created between these classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The PrintLinks method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `PrintLinks` method of the `KnowledgeGraph` class prints the links and
    nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The main method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `main` method creates the knowledge graph, and the classes are instantiated.
    The links between the classes are created and printed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the `knowledge_catalog.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/de4512d6-2274-45fe-a0aa-43fbadda3cb9.png)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we will take a look at the unit test for the `NewKnowledgeGraph`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `NewKnowledgeGraph` method is unit tested in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the preceding code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fa19e9a4-6010-4051-ad30-f51104b0c638.png)'
  prefs: []
  type: TYPE_IMG
- en: The next section talks about the representation of the **sparse matrix**.
  prefs: []
  type: TYPE_NORMAL
- en: Sparse matrix representation using a list of lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A sparse matrix is a two-dimensional list of *m* rows and *n* columns. The shape
    of a matrix is *m* x *n* if it consists of *m* rows and *n* columns. Sparse matrices
    are used for solving large-scale problems that do not require dense matrices.
    For example, partial differential equations are solved by using the **finite element
    method** (**FEM**). Tuples of a sparse matrix are non-zero elements of the matrix.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code, a sparse matrix is modeled as a list of lists. A sparse
    matrix consists of cells that are a list of lists. Each cell has properties such
    as `Row`, `Column`, and `Value`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The next section talks about the `SparseMatrix` class.
  prefs: []
  type: TYPE_NORMAL
- en: SparseMatrix class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`SparseMatrix` has a `cells` array and `shape`, which is an integer array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: In the next section, the different `Sparse` methods of the `SparseMatrix` struct
    are implemented.
  prefs: []
  type: TYPE_NORMAL
- en: The Shape method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Shape` method of the `SparseMatrix` class returns the `shape` array elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The NumNonZero method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `NumNonZero` method finds the cells with non-zero elements. The `NumNonZero`
    method of the `SparseMatrix` class returns the size of the cells array in `sparseMatrix`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The LessThan method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `LessThan` method compares the list of lists rows and columns and checks
    whether the row is less than `i` and that the column is less than `j`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The Equal method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Equal` method checks whether the list of lists rows and columns are equal
    to `i` and `j`, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The GetValue method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `GetValue` method of the `SparseMatrix` class returns the value of the
    cell whose row and column equal `i` and `j`, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The SetValue method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `SetValue` method of the `SparseMatrix` class sets the value of the cell
    with the row and column equal to `i` and `j`, respectively, as the parameter value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The NewSparseMatrix method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `NewSparseMatrix` method takes the `m` and `n` as parameters and returns
    the initialized matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The main method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `main` method creates the sparse matrix by invoking the `NewSparseMatrix`
    method. The values are set in cells (`1`, `1`) and (`1`, `3`). The sparse matrix
    and the number of non-zero cells are printed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the `sparse_matrix.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ee13443f-9fff-483b-847c-9087caeaf52c.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered how to present networks and sparse matrices using graphs
    and a list of lists, respectively. Social network representation, map layouts,
    and knowledge graphs were discussed in detail with code examples. The different
    sparse matrix methods were also implemented with the appropriate code.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, algorithms such as garbage collection, cache management,
    and space allocation will be presented with code examples and an efficiency analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What data structure is used to represent a set of linked objects?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a two-dimensional matrix with Boolean values called?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Give a code example for a network representation using a graph.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which metrics can be calculated from a social graph?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a cartographic design?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Give an example of a knowledge graph and define the class, slots, and facets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the applications of sparse matrices?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Define a list of lists and write a code sample.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a map layout?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What different operations can be performed using graphs?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following books are recommended if you want to know more about graphs and
    list of lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Design Patterns*, by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Introduction to Algorithms – Third Edition*, by Thomas H. Cormen, Charles
    E. Leiserson, Ronald L. Rivest, and Clifford Stein'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Data structures and Algorithms: An Easy Introduction*, by Rudolph Russell'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
