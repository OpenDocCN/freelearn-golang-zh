- en: Network and Sparse Matrix Representation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络和稀疏矩阵表示
- en: 'A **sparse matrix** is a matrix in which most of the values are zero. The ratio
    of zero values to non-zero values is known as the **sparsity**. An estimation
    of a matrix''s sparsity can be helpful when creating hypotheses about the availability
    of networks. Extensive big sparse matrices are commonly used in machine learning
    and natural language parsing. It is computationally costly to work with them.
    Recommendation engines use them for representing products inside a catalog. Computer
    vision uses sparse matrices and network data structures when working with pictures
    that contain sections with dark pixels. Network and sparse matrix data structures
    are also used in social graphs and map layouts. In this chapter, we will cover
    the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**稀疏矩阵**是一种大部分值都是零的矩阵。零值与非零值的比率称为**稀疏度**。在创建关于网络可用性的假设时，对矩阵稀疏度的估计可能是有帮助的。在机器学习和自然语言解析中，广泛使用大量的稀疏矩阵。处理它们在计算上代价高昂。推荐引擎使用它们来表示目录内的产品。计算机视觉在处理包含暗像素区域的图片时使用稀疏矩阵和网络数据结构。网络和稀疏矩阵数据结构也用于社交图和地图布局。在本章中，我们将涵盖以下主题：'
- en: 'Network representations using graphs:'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用图表示的网络
- en: Social network representation
  id: totrans-3
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社交网络表示
- en: Map layouts
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地图布局
- en: Knowledge graphs
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 知识图
- en: Sparse matrix representation using a list of lists
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用列表的列表表示稀疏矩阵
- en: A social graph that connects people is implemented in this chapter, and a code
    example shows how the graph can be traversed. Map layouts are explained with geographic
    locations with latitude and longitude. Knowledge graphs are explained via the
    use of a car and its parts.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章实现了连接人们的社交图，并有一个代码示例展示了如何遍历该图。地图布局通过纬度和经度表示的地理位置进行解释。通过使用汽车及其部件来解释知识图。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Install Go version 1.10 from [https://golang.org/doc/install](https://golang.org/doc/install)
    [for your OS.](https://golang.org/doc/install)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 从 [https://golang.org/doc/install](https://golang.org/doc/install) [为您的操作系统安装
    Go 版本 1.10。](https://golang.org/doc/install)
- en: The GitHub URL for the code in this chapter is as follows: [https://github.com/PacktPublishing/Learn-Data-Structures-and-Algorithms-with-Golang/tree/master/Chapter09](https://github.com/PacktPublishing/Learn-Data-Structures-and-Algorithms-with-Golang/tree/master/Chapter09).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中代码的 GitHub URL 如下所示：[https://github.com/PacktPublishing/Learn-Data-Structures-and-Algorithms-with-Golang/tree/master/Chapter09](https://github.com/PacktPublishing/Learn-Data-Structures-and-Algorithms-with-Golang/tree/master/Chapter09)。
- en: Network representation using graphs
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用图表示的网络
- en: 'A graph is a representation of a set of objects that''s connected by links.
    The links connect vertices, which are points. The basic operations on a graph
    are the addition and removal of links and vertices. These are some different types
    of graphs:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图是一种通过链接连接对象集的表示。链接连接顶点，即点。图上的基本操作是链接和顶点的添加和删除。以下是一些不同类型的图：
- en: Directed graph
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有向图
- en: Non-directed graph
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无向图
- en: Connected graph
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接图
- en: Non-connected graph
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非连接图
- en: Simple graph
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单图
- en: Multi-graph
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多图
- en: An **adjacency list** consists of adjacent vertices of a graph that have objects
    or records. An adjacency matrix consists of source and destination vertices. An
    incidence matrix is a two-dimensional Boolean matrix. The matrix has rows of vertices
    and columns that represent the links (edges).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**邻接表**由具有对象或记录的图的相邻顶点组成。邻接矩阵由源顶点和目标顶点组成。关联矩阵是一个二维布尔矩阵。矩阵有顶点行和表示链接（边）的列。'
- en: 'Network representation using a graph is shown in the following code. A social
    graph consists of an array of links:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码展示了使用图表示的网络。社交图由链接数组组成：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `Link` struct is defined and implemented in the next section.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中定义和实现了 `Link` 结构体。
- en: The Link class
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链接类
- en: 'The `Link` class consists of the `vertex1` and `vertex2` vertices and the `LinkWeight`
    integer property:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`Link` 类由 `vertex1` 和 `vertex2` 顶点以及 `LinkWeight` 整数属性组成：'
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The next section talks about the implementation of the different `Link` class
    methods.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将讨论不同 `Link` 类方法的实现。
- en: The NewSocialGraph method
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`NewSocialGraph` 方法'
- en: 'The `NewSocialGraph` function creates a social graph given `num`, which is
    the size of the graph. `Size` is the number of links in the graph:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`NewSocialGraph` 函数根据 `num` 创建社交图，其中 `num` 是图的尺寸。`Size` 是图中的链接数量：'
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The AddLink method
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加链接方法
- en: 'The `AddLink` method adds the link between two vertices. The `AddLink` method
    of a social graph takes `vertex1`, `vertex2`, and `weight` as parameters. The
    method adds the link from `vertex1` to `vertex2`, as shown in the following code:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`AddLink` 方法在两个顶点之间添加链接。社交图的 `AddLink` 方法接受 `vertex1`、`vertex2` 和 `weight`
    作为参数。该方法从 `vertex1` 到 `vertex2` 添加链接，如下面的代码所示：'
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The PrintLinks method
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PrintLinks 方法
- en: 'The `PrintLinks` method of the `SocialGraph` class prints the links from `vertex
    = 0` and all the links in the graph:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`SocialGraph` 类的 `PrintLinks` 方法打印从 `vertex = 0` 出发的链接以及图中的所有链接：'
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The main method
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: main 方法
- en: 'The `main` method creates a social graph by invoking the `NewSocialGraph` method.
    The links from `0` to `1`, `0` to `2`, `1` to `3`, and `2` to `4` are added to
    the social graph. The links are printed using the `printLinks` method:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`main` 方法通过调用 `NewSocialGraph` 方法创建社交图。将 `0` 到 `1`、`0` 到 `2`、`1` 到 `3` 和 `2`
    到 `4` 的链接添加到社交图中。使用 `printLinks` 方法打印链接：'
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Run the following command to execute the `social_graph.go` file:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令以运行 `social_graph.go` 文件：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output is as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/effb0aaf-b05a-4467-8e5b-fbcf04d942ce.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/effb0aaf-b05a-4467-8e5b-fbcf04d942ce.png)'
- en: In the next section, we will take a look at the unit test for the social graph
    method.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将查看社交图方法的单元测试。
- en: Test
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试
- en: 'Here, we have written a unit test for the social graph method. The code is
    as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们为社交图方法编写了一个单元测试。代码如下：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Run the following command to execute the preceding code snippet:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令以运行前面的代码片段：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output is as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/4e4bba5d-e61f-4e72-8e1f-1458188f7f3d.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4e4bba5d-e61f-4e72-8e1f-1458188f7f3d.png)'
- en: In the next section, a social network representation will be implemented with
    code examples. The preceding graph will be enhanced with nodes. Each node will
    represent a social entity.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，将使用代码示例实现一个社交网络表示。前述图将增强节点。每个节点将代表一个社交实体。
- en: Representing a social network
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表示社交网络
- en: A **social network** consists of social links that contain social entities such
    as people, friends, discussions, shares, beliefs, trust, and likes. This graph
    is used to represent the social network.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**社交网络**由包含如人、朋友、讨论、分享、信仰、信任和喜好等社交实体的社交链接组成。此图用于表示社交网络。'
- en: 'Metrics related to the proximity of entities can be calculated based on the
    graph. Social graphs consist of graph nodes and links, which are maps with a key
    name and multiple keys names, respectively:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 可以根据图计算与实体邻近度相关的指标。社交图由图节点和链接组成，分别对应具有键名和多个键名的映射：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The different social network methods are explained and implemented in the next
    section.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将解释并实现不同的社交网络方法。
- en: The NewSocialGraph method
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NewSocialGraph 方法
- en: 'The `NewSocialGraph` method returns a social graph consisting of nil-valued
    `GraphNodes` and `Links`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`NewSocialGraph` 方法返回一个由 nil 值的 `GraphNodes` 和 `Links` 组成的社交图：'
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The AddEntity method
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AddEntity 方法
- en: 'The `AddEntity` method adds the entity to the social graph. The `AddEntity`
    method of the `SocialGraph` class takes `name` as a parameter and returns `true`
    if it is added to the social graph:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: AddEntity 方法将实体添加到社交图中。`SocialGraph` 类的 `AddEntity` 方法接受 `name` 作为参数，如果它被添加到社交图中则返回
    `true`：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The AddLink method
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AddLink 方法
- en: 'The `AddLink` method of the `SocialGraph` class takes `name1` and `name2` as parameters.
    This method creates the entities if the named entities do not exist and creates
    a link between the entities:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`SocialGraph` 类的 `AddLink` 方法接受 `name1` 和 `name2` 作为参数。如果命名的实体不存在，此方法将创建实体并在实体之间创建链接：'
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The PrintLinks method
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PrintLinks 方法
- en: 'The `PrintLinks` method of the `SocialGraph` class prints the links adjacent
    to the `root` and all the links, as shown in the following code snippet:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`SocialGraph` 类的 `PrintLinks` 方法打印与 `root` 相邻的链接以及所有链接，如下面的代码片段所示：'
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The main method
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: main 方法
- en: 'The `main` method creates a social graph. The entities, such as `john`, `per`,
    and `cynthia`, are created and linked with the root node. The friends, such as
    `mayo`, `lorrie`, and `ellie`, are created and linked with `john` and `per`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`main` 方法创建一个社交图。创建实体，如 `john`、`per` 和 `cynthia`，并将它们与根节点链接起来。创建朋友，如 `mayo`、`lorrie`
    和 `ellie`，并将它们与 `john` 和 `per` 链接起来：'
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Run the following command to execute the `social_graph_example.go` file:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令以运行 `social_graph_example.go` 文件：
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output is as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/4956347c-552c-48f2-a367-11f5dc04b25b.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4956347c-552c-48f2-a367-11f5dc04b25b.png)'
- en: The next section talks about the **map layout** implementation.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将讨论 **地图布局** 的实现。
- en: Map layouts
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地图布局
- en: A map layout is a geographical visualization of locations that are linked together.
    The nodes in the graph of a map consist of geo-based information. The node will
    have information such as the name of the location, latitude, and longitude. Maps
    are laid out in different scales. Cartographic design is referred to as map creation
    using geographic information.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 地图布局是相互连接的地点的地理可视化。地图的图中的节点由基于地理的信息组成。节点将包含诸如地点名称、纬度和经度等信息。地图以不同的比例展开。地图创建被称为使用地理信息的制图设计。
- en: 'A map layout is shown in the following code snippet. The `Place` class consists
    of `Name`, `Latitude`, and `Longitude` properties:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段显示了地图布局。`Place` 类包含 `Name`、`Latitude` 和 `Longitude` 属性：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The next section talks about the `MapLayout` class.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分将讨论 `MapLayout` 类。
- en: The MapLayout class
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`MapLayout` 类'
- en: 'The `MapLayout` class consists of `GraphNodes` and `Links`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`MapLayout` 类由 `GraphNodes` 和 `Links` 组成：'
- en: '[PRE17]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The different `MapLayout` methods are explained and implemented in the next
    section.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分将解释并实现不同的 `MapLayout` 方法。
- en: The NewMapLayout method
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: The NewMapLayout method
- en: 'The `NewMapLayout` method creates a `MapLayout`. The `MapLayout` has `GraphNodes`
    and links maps:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`NewMapLayout` 方法创建一个 `MapLayout`。`MapLayout` 有 `GraphNodes` 和链接映射：'
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The AddPlace method
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: The AddPlace method
- en: 'The `AddPlace` method of the `MapLayout` class takes place as a parameter and
    returns `true` if the place exists. If the place does not exist, then a graph
    node with a new place key is created:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`MapLayout` 类的 `AddPlace` 方法接受地点作为参数，如果地点存在则返回 `true`。如果地点不存在，则创建一个新的具有新地点键的图节点：'
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The AddLink method
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: The AddLink method
- en: 'The `AddLink` method of the `MapLayout` class takes the places as parameters
    and links them together:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`MapLayout` 类的 `AddLink` 方法接受地点作为参数并将它们连接起来：'
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The PrintLinks method
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: The PrintLinks method
- en: 'The `PrintLinks` method of `MapLayout` prints the places and the links:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`PrintLinks` 方法打印地点和链接：'
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The main method
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: The main method
- en: 'In the `main` method, the map layout is created by invoking the `NewMapLayout`
    method. Places are instantiated and added to the map layout. Then, the links are
    added between places:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `main` 方法中，通过调用 `NewMapLayout` 方法创建地图布局。实例化地点并将其添加到地图布局中。然后，在地点之间添加链接：
- en: '[PRE22]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Run the following command to execute the `map_layout.go` file:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以执行 `map_layout.go` 文件：
- en: '[PRE23]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The output is as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/14daeead-8574-4dcb-8d7b-91c09f4f8b98.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/14daeead-8574-4dcb-8d7b-91c09f4f8b98.png)'
- en: In the next section, we will take a look at the unit test for the `NewMapLayout`
    method.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个部分，我们将查看 `NewMapLayout` 方法的单元测试。
- en: Test
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试
- en: 'A unit test for the `MapLayout` class''s `NewMapLayout` method is shown in
    the following code snippet:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了 `MapLayout` 类的 `NewMapLayout` 方法的单元测试：
- en: '[PRE24]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Run the following command to execute the preceding code snippet:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以执行前面的代码片段：
- en: '[PRE25]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The output is as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/122e9e5b-efa0-450d-8333-4386b4a3bf0a.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/122e9e5b-efa0-450d-8333-4386b4a3bf0a.png)'
- en: The next section talks about implementing a **knowledge graph**.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分将讨论实现**知识图谱**。
- en: Knowledge graphs
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 知识图谱
- en: A knowledge graph is a network representation of entities, items, and users
    as nodes. The nodes interact with one another via links or edges. Knowledge graphs
    are widely used because they are schema less. These data structures are used to
    represent knowledge in the form of graphs, and the nodes have textual information.
    Knowledge graphs are created by using item, entity, and user nodes and linking
    them with edges.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 知识图谱是实体、物品和用户作为节点的网络表示。节点通过链接或边相互交互。知识图谱因其无模式性而被广泛使用。这些数据结构用于以图形形式表示知识，节点包含文本信息。知识图谱通过使用项目、实体和用户节点并通过边将它们连接起来创建。
- en: 'An **ontology** consists of a knowledge graph of information nodes. The reasoner
    derives knowledge from knowledge graphs. A knowledge graph consists of classes,
    slots, and facets, which are ontological terms. In the following code, a knowledge
    graph consisting of a car''s bill of materials is explained. The `Class` type
    consists of a name, which is a string:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**本体**由信息节点构成的知识图谱。推理器从知识图谱中推导出知识。知识图谱由类、槽位和方面组成，这些是本体术语。在以下代码中，一个由汽车物料清单构成的知识图谱被解释。`Class`
    类型包含一个名称，它是一个字符串：'
- en: '[PRE26]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The next section talks about the `knowledge graph` class.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分将讨论 `knowledge graph` 类。
- en: The KnowledgeGraph class
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`KnowledgeGraph` 类'
- en: 'The `KnowledgeGraph` class consists of `GraphNodes` and links:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`KnowledgeGraph` 类由 `GraphNodes` 和链接组成：'
- en: '[PRE27]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The different knowledge graph methods are explained and implemented in the following
    sections.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 以下各节解释并实现了不同的知识图谱方法。
- en: The NewKnowledgeGraph method
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`NewKnowledgeGraph` 方法'
- en: 'The `NewKnowledgeGraph` method creates a knowledge graph, which consists of
    `GraphNodes` and `Links` maps:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`NewKnowledgeGraph` 方法创建一个知识图谱，它由 `GraphNodes` 和 `Links` 映射组成。'
- en: '[PRE28]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The AddClass method
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`AddClass` 方法'
- en: 'The `AddClass` method of the `KnowledgeGraph` class takes `class` as a parameter and
    returns `true` if the class exists. If the class does not exist, a `GraphNode`
    is created with `class` as a key:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`KnowledgeGraph` 类的 `AddClass` 方法接受 `class` 作为参数，如果类存在则返回 `true`。如果类不存在，则创建一个以
    `class` 为键的 `GraphNode`：'
- en: '[PRE29]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The AddLink method
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`AddLink` 方法'
- en: 'The `AddLink` method of the `KnowledgeGraph` class takes `class1` and `class2` as parameters,
    and a link is created between these classes:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`KnowledgeGraph` 类的 `AddLink` 方法接受 `class1` 和 `class2` 作为参数，并在这些类之间创建链接：'
- en: '[PRE30]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The PrintLinks method
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`PrintLinks` 方法'
- en: 'The `PrintLinks` method of the `KnowledgeGraph` class prints the links and
    nodes:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`KnowledgeGraph` 类的 `PrintLinks` 方法打印链接和节点：'
- en: '[PRE31]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The main method
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`main` 方法'
- en: 'The `main` method creates the knowledge graph, and the classes are instantiated.
    The links between the classes are created and printed:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`main` 方法创建知识图谱，并实例化类。创建并打印类之间的链接：'
- en: '[PRE32]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Run the following command to execute the `knowledge_catalog.go` file:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令以运行 `knowledge_catalog.go` 文件：
- en: '[PRE33]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The output is as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/de4512d6-2274-45fe-a0aa-43fbadda3cb9.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/de4512d6-2274-45fe-a0aa-43fbadda3cb9.png)'
- en: In the next section, we will take a look at the unit test for the `NewKnowledgeGraph`
    method.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将查看 `NewKnowledgeGraph` 方法的单元测试。
- en: Test
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试
- en: 'The `NewKnowledgeGraph` method is unit tested in the following code snippet:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段对 `NewKnowledgeGraph` 方法进行了单元测试：
- en: '[PRE34]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Run the following command to execute the preceding code snippet:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令以运行前面的代码片段：
- en: '[PRE35]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The output is as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/fa19e9a4-6010-4051-ad30-f51104b0c638.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fa19e9a4-6010-4051-ad30-f51104b0c638.png)'
- en: The next section talks about the representation of the **sparse matrix**.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节讨论稀疏矩阵的表示。
- en: Sparse matrix representation using a list of lists
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用列表的列表表示稀疏矩阵
- en: A sparse matrix is a two-dimensional list of *m* rows and *n* columns. The shape
    of a matrix is *m* x *n* if it consists of *m* rows and *n* columns. Sparse matrices
    are used for solving large-scale problems that do not require dense matrices.
    For example, partial differential equations are solved by using the **finite element
    method** (**FEM**). Tuples of a sparse matrix are non-zero elements of the matrix.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 稀疏矩阵是一个由 *m* 行和 *n* 列组成的二维列表。如果矩阵由 *m* 行和 *n* 列组成，则其形状为 *m* x *n*。稀疏矩阵用于解决不需要密集矩阵的大规模问题。例如，通过使用**有限元方法**（**FEM**）求解偏微分方程。稀疏矩阵的元组是矩阵的非零元素。
- en: 'In the following code, a sparse matrix is modeled as a list of lists. A sparse
    matrix consists of cells that are a list of lists. Each cell has properties such
    as `Row`, `Column`, and `Value`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，稀疏矩阵被建模为一个列表的列表。稀疏矩阵由一系列列表的列表组成。每个单元格具有 `Row`、`Column` 和 `Value` 等属性：
- en: '[PRE36]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The next section talks about the `SparseMatrix` class.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将讨论 `SparseMatrix` 类。
- en: SparseMatrix class
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`SparseMatrix` 类'
- en: '`SparseMatrix` has a `cells` array and `shape`, which is an integer array:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`SparseMatrix` 有一个 `cells` 数组和 `shape`，它是一个整数数组：'
- en: '[PRE37]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: In the next section, the different `Sparse` methods of the `SparseMatrix` struct
    are implemented.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，将实现 `SparseMatrix` 结构的不同 `Sparse` 方法。
- en: The Shape method
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Shape` 方法'
- en: 'The `Shape` method of the `SparseMatrix` class returns the `shape` array elements:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`SparseMatrix` 类的 `Shape` 方法返回 `shape` 数组元素：'
- en: '[PRE38]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The NumNonZero method
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`NumNonZero` 方法'
- en: 'The `NumNonZero` method finds the cells with non-zero elements. The `NumNonZero`
    method of the `SparseMatrix` class returns the size of the cells array in `sparseMatrix`:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`NumNonZero` 方法找到具有非零元素的单元格。`SparseMatrix` 类的 `NumNonZero` 方法返回 `sparseMatrix`
    中 `cells` 数组的大小：'
- en: '[PRE39]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The LessThan method
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`LessThan` 方法'
- en: 'The `LessThan` method compares the list of lists rows and columns and checks
    whether the row is less than `i` and that the column is less than `j`:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`LessThan` 方法比较列表的行和列，并检查行是否小于 `i` 以及列是否小于 `j`：'
- en: '[PRE40]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The Equal method
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Equal` 方法'
- en: 'The `Equal` method checks whether the list of lists rows and columns are equal
    to `i` and `j`, respectively:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`Equal` 方法检查列表的列表行和列是否分别等于 `i` 和 `j`：'
- en: '[PRE41]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The GetValue method
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`GetValue` 方法'
- en: 'The `GetValue` method of the `SparseMatrix` class returns the value of the
    cell whose row and column equal `i` and `j`, respectively:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`SparseMatrix`类的`GetValue`方法返回行和列分别等于`i`和`j`的单元格的值：'
- en: '[PRE42]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The SetValue method
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`SetValue`方法'
- en: 'The `SetValue` method of the `SparseMatrix` class sets the value of the cell
    with the row and column equal to `i` and `j`, respectively, as the parameter value:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`SparseMatrix`类的`SetValue`方法将行和列等于`i`和`j`的单元格的值设置为参数值：'
- en: '[PRE43]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The NewSparseMatrix method
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新的稀疏矩阵方法
- en: 'The `NewSparseMatrix` method takes the `m` and `n` as parameters and returns
    the initialized matrix:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`NewSparseMatrix`方法接受`m`和`n`作为参数，并返回初始化后的矩阵：'
- en: '[PRE44]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The main method
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主要方法
- en: 'The `main` method creates the sparse matrix by invoking the `NewSparseMatrix`
    method. The values are set in cells (`1`, `1`) and (`1`, `3`). The sparse matrix
    and the number of non-zero cells are printed:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`main`方法通过调用`NewSparseMatrix`方法创建稀疏矩阵。值设置在单元格(`1`, `1`)和(`1`, `3`)中。打印出稀疏矩阵和非零单元格的数量：'
- en: '[PRE45]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Run the following command to execute the `sparse_matrix.go` file:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以执行`sparse_matrix.go`文件：
- en: '[PRE46]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The output is as follows:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/ee13443f-9fff-483b-847c-9087caeaf52c.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ee13443f-9fff-483b-847c-9087caeaf52c.png)'
- en: Summary
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter covered how to present networks and sparse matrices using graphs
    and a list of lists, respectively. Social network representation, map layouts,
    and knowledge graphs were discussed in detail with code examples. The different
    sparse matrix methods were also implemented with the appropriate code.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了如何分别使用图和列表的列表来表示网络和稀疏矩阵。详细讨论了社交网络表示、地图布局和知识图，并提供了代码示例。还实现了不同的稀疏矩阵方法，并附有相应的代码。
- en: In the next chapter, algorithms such as garbage collection, cache management,
    and space allocation will be presented with code examples and an efficiency analysis.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，将通过代码示例和效率分析介绍垃圾回收、缓存管理和空间分配等算法。
- en: Questions
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What data structure is used to represent a set of linked objects?
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于表示一组链接对象的什么数据结构？
- en: What is a two-dimensional matrix with Boolean values called?
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有布尔值的二维矩阵叫什么？
- en: Give a code example for a network representation using a graph.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用图表示网络的一个代码示例。
- en: Which metrics can be calculated from a social graph?
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以从社交图中计算出哪些度量？
- en: What is a cartographic design?
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是制图设计？
- en: Give an example of a knowledge graph and define the class, slots, and facets.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供一个知识图的示例并定义类、槽位和面。
- en: What are the applications of sparse matrices?
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 稀疏矩阵有哪些应用？
- en: Define a list of lists and write a code sample.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义一个列表的列表并编写一个代码示例。
- en: What is a map layout?
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是地图布局？
- en: What different operations can be performed using graphs?
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用图执行哪些不同的操作？
- en: Further reading
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following books are recommended if you want to know more about graphs and
    list of lists:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于图和列表的书籍，以下几本书推荐：
- en: '*Design Patterns*, by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《设计模式》*，作者：艾里克·伽玛、理查德·赫尔姆、拉尔夫·约翰逊和约翰·弗利斯'
- en: '*Introduction to Algorithms – Third Edition*, by Thomas H. Cormen, Charles
    E. Leiserson, Ronald L. Rivest, and Clifford Stein'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《算法导论 第3版》*，作者：托马斯·H·科莫恩、查尔斯·E·莱伊森森、罗纳德·L·里维斯和克利福德·斯坦'
- en: '*Data structures and Algorithms: An Easy Introduction*, by Rudolph Russell'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《数据结构和算法：简单入门》*，作者：鲁道夫·拉塞尔'
