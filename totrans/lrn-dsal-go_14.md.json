["```go\n//main package has examples shown\n// in Go Data Structures and algorithms book\npackage main\n\n// importing errors, log and time packages\nimport (\n    \"errors\"\n    \"log\"\n    \"time\"\n)\n\n// delayTimeOut method\nfunc delayTimeOut(channel chan interface{}, timeOut time.Duration) (interface{}, error) {\n    log.Printf(\"delayTimeOut enter\")\n    defer log.Printf(\"delayTimeOut exit\")\n    var data interface{}\n    select {\n        case <-time.After(timeOut):\n        return nil, errors.New(\"delayTimeOut time out\")\n        case data = <-channel:\n        return data, nil\n    }\n}\n\n//main method\nfunc main() {\n    channel := make(chan interface{})\n    go func() {\n        var err error\n        var data interface{}\n        data, err = delayTimeOut(channel, time.Second)\n        if err != nil {\n            log.Printf(\"error %v\", err)\n            return\n        }\n        log.Printf(\"data %v\", data)\n    }()\n    channel <- struct{}{}\n    time.Sleep(time.Second * 2)\n    go func() {\n        var err error\n        var data interface{}\n        data, err = delayTimeOut(channel, time.Second)\n        if err != nil {\n            log.Printf(\"error %v\", err)\n            return\n        }\n        log.Printf(\"data %v\", data)\n    }()\n    time.Sleep(time.Second * 2)\n}\n```", "```go\ngo run chan_timeout.go\n```", "```go\n//main package has examples shown\n// in Go Data Structures and algorithms book\npackage main\n\n// importing errors,context,log and time packages\n\nimport (\n  \"errors\"\n  \"golang.org/x/net/context\"\n  \"log\"\n  \"time\"\n)\n\n// main method\nfunc main() {\n\n  var delay time.Duration\n\n  delay = time.Millisecond\n\n  var cancel context.CancelFunc\n\n  var contex context.Context\n\n  contex, cancel = context.WithTimeout(context.Background(), delay)\n\n  go func(context.Context) {\n    <-contex.Done()\n    log.Printf(\"contex done\")\n  }(contex)\n\n  _ = cancel\n\n  time.Sleep(delay * 2)\n\n  log.Printf(\"contex end %v\", contex.Err())\n\n  channel := make(chan struct{})\n\n  var err error\n  go func(chan struct{}) {\n    select {\n    case <-time.After(delay):\n      err = errors.New(\"ch delay\")\n    case <-channel:\n    }\n    log.Printf(\"channel done\")\n  }(channel)\n\n  time.Sleep(delay * 2)\n\n  log.Printf(\"channel end %v\", err)\n}\n```", "```go\ngo run context.go\n```", "```go\n//main package has examples shown\n// in Go Data Structures and algorithms book\npackage main\n\n// importing fmt and errors packages\n\nimport(\n  \"fmt\"\n  \"errors\"\n\n)\n\n//First Func method\nfunc FirstFunc(v interface{}) (interface{}, error) {\n  var ok bool\n\n  if !ok {\n    return nil, errors.New(\"false error\")\n  }\n  return v, nil\n}\n\n//SecondFunc method\nfunc SecondFunc() {\n  defer func() {\n    var err interface{}\n    if err = recover(); err != nil {\n      fmt.Println(\"recovering error \", err)\n    }\n  }()\n  var v interface{}\n  v = struct{}{}\n  var err error\n  if _, err = FirstFunc(v); err != nil {\n    panic(err)\n  }\n\n  fmt.Println(\"The error never happen\")\n}\n\n//main method\nfunc main() {\n  SecondFunc()\n  fmt.Println(\"The execution ended\")\n}\n```", "```go\ngo run handling_error.go\n```", "```go\n//main package has examples shown\n//in Go Data Structures and algorithms book\npackage main\n\n//importing path, runtime, fmt, log and time packages\n\nimport(\n  \"path\"\n  \"runtime\"\n  \"fmt\"\n  \"log\"\n  \"time\"\n)\n\n//checkPoint method\nfunc checkPoint() string {\n    pc, file, line, _ := runtime.Caller(1)\n    return fmt.Sprintf(\"\\033[31m%v %s %s %d\\x1b[0m\", time.Now(),\n      runtime.FuncForPC(pc).Name(), path.Base(file), line)\n}\n\n//method1\nfunc method1(){\n  fmt.Println(checkPoint())\n}\n\n//main method\nfunc main() {\n\n  log.SetFlags(log.LstdFlags | log.Lshortfile)\n\n  log.Println(\"logging the time and flags\")\n\n  method1()\n\n}\n```", "```go\ngo run log_linenumber.go\n```", "```go\ngo build -gcflags=\"-S -N\" \n\n```", "```go\ngo build -x \n```", "```go\ngo test -race \n```", "```go\ngo test -run=method1 \n```", "```go\ngo get -u \n```", "```go\ngo get -d \n```", "```go\ngo get -t \n```", "```go\ngo list -f \n```", "```go\nexport GOROOT=/opt/go1.7.1\n```", "```go\nexport PATH=$GOROOT/bin:$PATH\n```", "```go\nexport GOPATH=$HOME/go\n```", "```go\nexport PATH=$GOPATH/bin:$PATH\n```", "```go\n//main package has examples shown\n// in Go Data Structures and algorithms book\npackage main\n\n// importing testing packages\n\nimport (\n  \"testing\"\n)\n\nfunc TestAddition(test *testing.T) {\n\n  cases := []struct{ integer1 , integer2 , resultSum int }{\n    {1, 1, 2},\n    {1, -1, 0},\n    {1, 0, 1},\n    {0, 0, 0},\n    {3, 2, 1},\n  }\n\n  for _, cas := range cases {\n    var sum int\n    var expected int\n    sum = cas.integer1 + cas.integer2\n    expected = cas.resultSum\n    if sum != expected {\n      test.Errorf(\"%d + %d = %d, expected %d\", cas.integer1, cas.integer2, sum, expected)\n    }\n  }\n\n}\n```", "```go\ngo test -run TestAddition -v\n```", "```go\nimport \"fmt\"\nimport ft \"fmt\"\nimport . \"fmt\"\n```"]