- en: Next Steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this appendix, we share the reader's learning outcomes from this book. The
    code repository links and key takeaways are presented. References are included
    for the latest data structures and algorithms. Tips and techniques are provided
    to help you keep yourself up to date with the latest on data structures and algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Install Go version 1.10 from [https://golang.org/doc/install](https://golang.org/doc/install),
    being sure to choose the correct version for your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: The GitHub repository for the code in this appendix can be found here: [https://github.com/PacktPublishing/Learn-Data-Structures-and-Algorithms-with-Golang/tree/master/Appendix](https://github.com/PacktPublishing/Learn-Data-Structures-and-Algorithms-with-Golang/tree/master/Appendix).
  prefs: []
  type: TYPE_NORMAL
- en: Learning outcomes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The learning outcomes from this book are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Improve a web or mobile application's performance using the correct data structures
    and algorithms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand how an algorithm solves a problem and how the correct data structure
    is chosen for a problem.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enumerate the various solutions to a problem and identify algorithms and data
    structures after doing a cost/benefit analysis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get a grasp of the various techniques for writing pseudocode for an algorithm,
    allowing you to ace white-boarding sessions and interview assignments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discover the pitfalls in selecting data structures and algorithms by predicting
    how fast and efficient an algorithm or data structure is.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following section, the key takeaway points, papers, and articles to be
    referred to, along with tips and techniques, are discussed.
  prefs: []
  type: TYPE_NORMAL
- en: Key takeaways
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The key takeaways for the reader are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: How to choose the correct algorithm and data structures for a problem.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to compare the complexity and data structures of different algorithms for
    code performance and efficiency.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to apply best practices to improve and increase the performance of an application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Real-world problems, solutions, and best practices associated with web and mobile
    software solutions are provided in the book as code examples.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, papers and articles are provided as further reading for each
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 1 – Data Structures and Algorithms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following articles are related to data structures and algorithms:'
  prefs: []
  type: TYPE_NORMAL
- en: '*The complete guide to Go Data Structures* ([https://flaviocopes.com/golang-data-structures/](https://flaviocopes.com/golang-data-structures/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Data Structure and Algorithms* ([http://www.golangprograms.com/data-structure-and-algorithms.html](http://www.golangprograms.com/data-structure-and-algorithms.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Data structures in Go: Stacks and queues* ([https://ieftimov.com/golang-datastructures-stacks-queues](https://ieftimov.com/golang-datastructures-stacks-queues))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following papers are related to data structures and algorithms:'
  prefs: []
  type: TYPE_NORMAL
- en: '*THE REPRESENTATION OF ALGORITHMS – DTIC* ([https://apps.dtic.mil/dtic/tr/fulltext/u2/697026.pdf](https://apps.dtic.mil/dtic/tr/fulltext/u2/697026.pdf))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*ON THE COMPUTATIONAL COMPLEXITY OF ALGORITHMS* ([https://fi.ort.edu.uy/innovaportal/file/20124/1/60-hartmanis_stearns_complexity_of_algorithms.pdf](https://fi.ort.edu.uy/innovaportal/file/20124/1/60-hartmanis_stearns_complexity_of_algorithms.pdf))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Analysis and Performance of Divide and Conquer Methodology* ([http://ijarcet.org/wp-content/uploads/IJARCET-VOL-6-ISSUE-8-1295-1298.pdf](http://ijarcet.org/wp-content/uploads/IJARCET-VOL-6-ISSUE-8-1295-1298.pdf))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 2 – Getting Started with Go for Data Structures and Algorithms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following articles are related to the content in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Go – Data structures* ([https://golanglibs.com/category/data-structures](https://golanglibs.com/category/data-structures))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Applied – Go Algorithms and Data Structures* ([https://appliedgo.net/domains/algorithms-and-data-structures/](https://appliedgo.net/domains/algorithms-and-data-structures/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Effective Go* ([https://golang.org/doc/effective_go.html](https://golang.org/doc/effective_go.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 3 – Linear Data Structures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following articles are related to linear data structures:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Data Structures for Beginners: Arrays, HashMaps, and Lists* ([https://adrianmejia.com/blog/2018/04/28/data-structures-time-complexity-for-beginners-arrays-hashmaps-linked-lists-stacks-queues-tutorial/](https://adrianmejia.com/blog/2018/04/28/data-structures-time-complexity-for-beginners-arrays-hashmaps-linked-lists-stacks-queues-tutorial/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Stack - Array Implementation* ([https://www.cs.bu.edu/teaching/c/stack/array/](https://www.cs.bu.edu/teaching/c/stack/array/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following papers are related to linear data structures:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Linear-Space Data Structures for Range Mode Query in Arrays* ([https://cs.au.dk/~larsen/papers/linear_mode.pdf](https://cs.au.dk/~larsen/papers/linear_mode.pdf))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*RESEARCH PAPER ON STACK AND QUEUE* ([http://www.ijirt.org/master/publishedpaper/IJIRT101357_PAPER.pdf](http://www.ijirt.org/master/publishedpaper/IJIRT101357_PAPER.pdf))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Linear Data Structures for Fast Ray-Shooting amidst Convex Polyhedra (*[http://www.cs.tau.ac.il/~haimk/papers/ray.pdf](http://www.cs.tau.ac.il/~haimk/papers/ray.pdf))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 4 – Non-Linear Data Structures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following articles are related to non-linear data structures:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Overview of non-linear data structures (*[https://medium.com/@ankitkulhari/overview-of-non-linear-data-structures-40cb441f6d7](https://medium.com/@ankitkulhari/overview-of-non-linear-data-structures-40cb441f6d7))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Non-linear Data Structures (*[http://euler.vcsu.edu:7000/9647/](http://euler.vcsu.edu:7000/9647/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*What Is Forest Data Structure?* ([https://magoosh.com/data-science/what-is-forest-data-structure/](https://magoosh.com/data-science/what-is-forest-data-structure/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Tree Data Structure* ([http://www.cs.cmu.edu/~clo/www/CMU/DataStructures/Lessons/lesson4_1.htm](http://www.cs.cmu.edu/~clo/www/CMU/DataStructures/Lessons/lesson4_1.htm))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following papers are related to non-linear data structures:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Y-Trees: An extending non-linear data structure for better organization of
    large-sized data* ([https://ieeexplore.ieee.org/document/8234528](https://ieeexplore.ieee.org/document/8234528))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*A Shape Analysis for Non-linear Data Structures* ([https://link.springer.com/chapter/10.1007/978-3-642-15769-1_13](https://link.springer.com/chapter/10.1007/978-3-642-15769-1_13))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Representation of Nonlinear Data Surfaces* ([https://www.semanticscholar.org/paper/Representation-of-Nonlinear-Data-Surfaces-Olsen-Fukunaga/f4f4812532ba427658ecc83d772637c076780acf](https://www.semanticscholar.org/paper/Representation-of-Nonlinear-Data-Surfaces-Olsen-Fukunaga/f4f4812532ba427658ecc83d772637c076780acf))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 5 – Homogeneous Data Structures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following articles are related to homogeneous data structures:'
  prefs: []
  type: TYPE_NORMAL
- en: '*USING MATRICES IN GO(LANG)* ([http://connor-johnson.com/2014/06/21/using-matrices-in-golang/](http://connor-johnson.com/2014/06/21/using-matrices-in-golang/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Golang: Linear algebra and matrix calculation example* ([https://www.socketloop.com/tutorials/golang-linear-algebra-and-matrix-calculation-example](https://www.socketloop.com/tutorials/golang-linear-algebra-and-matrix-calculation-example))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Gonum Tutorial: Linear Algebra in Go* ([https://medium.com/wireless-registry-engineering/gonum-tutorial-linear-algebra-in-go-21ef136fc2d7](https://medium.com/wireless-registry-engineering/gonum-tutorial-linear-algebra-in-go-21ef136fc2d7))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Matrix Multiplication in Golang (3x3 matrices)* ([https://repl.it/@hygull/Matrix-multiplication-in-Golang2-matrices-of-order-3x3](https://repl.it/@hygull/Matrix-multiplication-in-Golang2-matrices-of-order-3x3))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 6 – Heterogeneous Data Structures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following articles are related to heterogeneous data structures:'
  prefs: []
  type: TYPE_NORMAL
- en: Heterogeneous Arrays ([https://gist.github.com/cslarsen/5256744](https://gist.github.com/cslarsen/5256744))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*OL (Ordered List)* ([https://www.w3.org/MarkUp/html3/seqlists.html](https://www.w3.org/MarkUp/html3/seqlists.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Large Ordered Lists* ([https://www.aerospike.com/docs/guide/llist.html](https://www.aerospike.com/docs/guide/llist.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Implementing an Ordered List* ([https://bradfieldcs.com/algos/lists/implementing-an-ordered-list/](https://bradfieldcs.com/algos/lists/implementing-an-ordered-list/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 7 – Dynamic Data Structures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following articles are related to dynamic data structures:'
  prefs: []
  type: TYPE_NORMAL
- en: '*The complete guide to Go Data Structures* ([https://flaviocopes.com/golang-data-structures/](https://flaviocopes.com/golang-data-structures/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*DATA STRUCTURE AND ALGORITHMS* ([http://www.golangprograms.com/data-structure-and-algorithms.html](http://www.golangprograms.com/data-structure-and-algorithms.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Data structures in Go: Stacks and queues* ([https://ieftimov.com/golang-datastructures-stacks-queues](https://ieftimov.com/golang-datastructures-stacks-queues))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following papers are related to dynamic data structures:'
  prefs: []
  type: TYPE_NORMAL
- en: '*THE REPRESENTATION OF ALGORITHMS – DTIC* ([https://apps.dtic.mil/dtic/tr/fulltext/u2/697026.pdf](https://apps.dtic.mil/dtic/tr/fulltext/u2/697026.pdf))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*ON THE COMPUTATIONAL COMPLEXITY OF ALGORITHMS* ([https://fi.ort.edu.uy/innovaportal/file/20124/1/60-hartmanis_stearns_complexity_of_algorithms.pdf](https://fi.ort.edu.uy/innovaportal/file/20124/1/60-hartmanis_stearns_complexity_of_algorithms.pdf))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Analysis and Performance of Divide and Conquer Methodology* ([http://ijarcet.org/wp-content/uploads/IJARCET-VOL-6-ISSUE-8-1295-1298.pdf](http://ijarcet.org/wp-content/uploads/IJARCET-VOL-6-ISSUE-8-1295-1298.pdf))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 8 – Classic Algorithms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following articles are related to classic algorithms:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Sorting Algorithms Primer* ([https://hackernoon.com/sorting-algorithms-primer-374b83f3ba09](https://hackernoon.com/sorting-algorithms-primer-374b83f3ba09))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Depth-First Search* ([https://medium.com/@g789872001darren/gogoalgorithm-1-depth-first-search-582eeb58f23a](https://medium.com/@g789872001darren/gogoalgorithm-1-depth-first-search-582eeb58f23a))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Hashing in Go (Golang vs Python)* ([https://medium.com/@vworri/hashing-in-go-golang-vs-python-b7bc1194e967](https://medium.com/@vworri/hashing-in-go-golang-vs-python-b7bc1194e967))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Iterative vs Recursive vs Tail-Recursive in Golang* ([https://medium.com/@felipedutratine/iterative-vs-recursive-vs-tail-recursive-in-golang-c196ca5fd489](https://medium.com/@felipedutratine/iterative-vs-recursive-vs-tail-recursive-in-golang-c196ca5fd489))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following papers are related to classic algorithms:'
  prefs: []
  type: TYPE_NORMAL
- en: '*A Mathematical Modeling of Pure, Recursive Algorithms* ([https://www.researchgate.net/publication/220810107_A_Mathematical_Modeling_of_Pure_Recursive_Algorithms](https://www.researchgate.net/publication/220810107_A_Mathematical_Modeling_of_Pure_Recursive_Algorithms))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Recursive algorithms for estimation of hidden Markov models and autoregressive
    models with Markov regime* ([https://ieeexplore.ieee.org/document/979322](https://ieeexplore.ieee.org/document/979322))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Recursive algorithms for approximating probabilities in graphical models*
    ([https://papers.nips.cc/paper/1316-recursive-algorithms-for-approximating-probabilities-in-graphical-models.pdf](https://papers.nips.cc/paper/1316-recursive-algorithms-for-approximating-probabilities-in-graphical-models.pdf))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 9 – Network and Sparse Matrix Representation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following articles are related to network and sparse matrix representation:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Equations Are Graphs* ([http://gopherdata.io/post/deeplearning_in_go_part_1/](http://gopherdata.io/post/deeplearning_in_go_part_1/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*From Theory To Practice: Representing Graphs* ([https://medium.com/basecs/from-theory-to-practice-representing-graphs-cfd782c5be38](https://medium.com/basecs/from-theory-to-practice-representing-graphs-cfd782c5be38))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Go Data Structures: Graph* ([https://flaviocopes.com/golang-data-structure-graph/](https://flaviocopes.com/golang-data-structure-graph/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following papers are related to network and sparse matrix representation:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Representation Learning on Graphs: Methods and Application*s ([https://www-cs.stanford.edu/people/jure/pubs/graphrepresentation-ieee17.pdf](https://www-cs.stanford.edu/people/jure/pubs/graphrepresentation-ieee17.pdf))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*An overview on network diagrams: Graph-based representation* ([https://www.researchgate.net/publication/308049492_An_overview_on_network_diagrams_Graph-based_representation](https://www.researchgate.net/publication/308049492_An_overview_on_network_diagrams_Graph-based_representation))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Design principles for origin-destination flow maps* ([https://pdfs.semanticscholar.org/587a/730b11a4b3878142bd4995f80dc969bc5982.pdf](https://pdfs.semanticscholar.org/587a/730b11a4b3878142bd4995f80dc969bc5982.pdf))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 9](24ba8e45-ed5d-4a9e-aeb7-0608f6fb3d7c.xhtml), *Network and Sparse
    Matrix Representation*, use cases from real-life applications were presented. Learning
    how the network data structure and sparse matrices are applied in different domains,
    such as airlines, banking, medical, pharma, telecoms, and supply chains, is a
    good next step for the reader.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 10 – Memory Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following articles are related to memory management:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Getting to Go: The Journey of Go''s Garbage Collector* ([https://blog.golang.org/ismmkeynote](https://blog.golang.org/ismmkeynote))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Modern garbage collection* ([https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e](https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Go Lang: Memory Management and Garbage Collection* ([https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/](https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following papers are related to memory management:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Analysis of the Go runtime scheduler* ([http://www.cs.columbia.edu/~aho/cs6998/reports/12-12-11_DeshpandeSponslerWeiss_GO.pdf](http://www.cs.columbia.edu/~aho/cs6998/reports/12-12-11_DeshpandeSponslerWeiss_GO.pdf))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Simple Generational Garbage Collection and Fast Allocation* ([http://www.cs.ucsb.edu/~ckrintz/racelab/gc/papers/appel88simplegen.pdf](http://www.cs.ucsb.edu/~ckrintz/racelab/gc/papers/appel88simplegen.pdf))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*A Time- and SpaceEfficient Garbage Compaction Algorithm* ([http://www.cs.ucsb.edu/~ckrintz/racelab/gc/papers/morris-compaction.pdf](http://www.cs.ucsb.edu/~ckrintz/racelab/gc/papers/morris-compaction.pdf))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The different tips and tricks to be used in Go data structures and algorithm
    are discussed in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To keep updated on Go, you can subscribe to these forums and blogs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Gopherize: [https://gopherize.me/?fromhttp=true](https://gopherize.me/?fromhttp=true)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Golang Weekly: [https://golangweekly.com/issues/240 ](https://golangweekly.com/issues/240)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Gopher Conference: [https://www.gophercon.com/ ](https://www.gophercon.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Groups: [https://groups.google.com/forum/m/#!newtopic/golang-dev ](https://groups.google.com/forum/m/#!newtopic/golang-dev)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Slack Groups: [https://techbeacon.com/46-slack-groups-developers ](https://techbeacon.com/46-slack-groups-developers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stack Overflow: [http://stackoverflow.com/questions/tagged/go ](http://stackoverflow.com/questions/tagged/go)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dave Cheney's Resources for New Go Programmers: [https://dave.cheney.net/resources-for-new-go-programmers ](https://dave.cheney.net/resources-for-new-go-programmers)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following section contains tips for writing good code in Go.
  prefs: []
  type: TYPE_NORMAL
- en: Using channel with a timeout interval
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The software program that connects to resources can be set with timeouts. Channels
    are used for implementing timeouts. You can configure a channel with a timeout
    interval as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the preceding code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e09cbcdd-6b2f-4812-afe3-9a8ee22e0934.png)'
  prefs: []
  type: TYPE_IMG
- en: Using context instead of channel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Contexts can be implemented in functions executed in Go routines. Contexts
    are used instead of channel in the code for passing information between processes.
    The following code snippet shows the usage of context:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the preceding code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/08507fc9-d6ed-4fbb-868b-ecae6d443878.png)'
  prefs: []
  type: TYPE_IMG
- en: Panic, defer, and recover
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Panic, defer, and recover are used to handle complex errors. The last returned
    variable in a function is used as an error. The following code snippet is an example
    of this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the preceding code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/de1cf143-95a4-4471-9672-dd0fc70b5726.png)'
  prefs: []
  type: TYPE_IMG
- en: The following link contain some useful tips and techniques for writing Go code: [https://golang.org/doc/effective_go.html](https://golang.org/doc/effective_go.html).
  prefs: []
  type: TYPE_NORMAL
- en: Logging with the line number
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While logging, you can log with the line number and the method name. The following
    code snippet shows how logging can be executed with the line number and the method
    name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the preceding code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d0a4894-36b3-4832-9a1a-c2e7cef2a4b1.png)'
  prefs: []
  type: TYPE_IMG
- en: Go tool usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Go tool compiler can be invoked with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The list options command syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To test the race conditions, you can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Running a test method by name can be done using the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To update your version of Go, you can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Copying can be done with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To get depths, you can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To get a list of software, you can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Go environment variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `GOROOT` variable can be configured as an environment variable with this
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The `PATH` variable can be configured as an environment variable with this
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The `GOPATH` variable can be configured as an environment variable with this
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The `GOPATH` variable can be configured in the `PATH` variable with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Test table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tests are driven by a test table. The following code snippet shows how a test
    table can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to execute the preceding code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f05e3f71-a69a-4f34-b9be-82b16add32dc.png)'
  prefs: []
  type: TYPE_IMG
- en: Importing packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can import packages with the following statements. Here, we show three
    different syntactical options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
