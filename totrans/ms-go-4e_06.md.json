["```go\n$ go run aPackage.go\ngo run: cannot run non-main package \n```", "```go\n$ go get github.com/spf13/cobra \n```", "```go\n$ tree ~/go -L 3\n/Users/mtsouk/go\n├── bin\n│   ├── benchstat\n│   ├── client\n│   ├── cobra\n│   ├── dlv\n│   ├── dlv-dap\n│   ├── fillstruct\n│   ├── go-outline\n│   ├── go-symbols\n│   ├── gocode\n│   ├── gocode-gomod\n│   ├── godef\n│   ├── godoc\n│   ├── godoctor\n│   ├── golint\n│   ├── gomodifytags\n│   ├── gopkgs\n│   ├── goplay\n│   ├── gopls\n│   ├── gorename\n│   ├── goreturns\n│   ├── gotests\n│   ├── guru\n│   ├── impl\n│   └── staticcheck\n├── pkg\n│   ├── darwin_amd64\n│   │   └── github.com\n│   └── sumdb\n│       └── sum.golang.org\n└── src\n    ├── document\n    │   └── document.go\n    ├── github.com\n    │   ├── agext\n    │   ├── apparentlymart\n    │   ├── fsnotify\n    │   ├── hashicorp\n    │   ├── mactsouk\n    │   ├── magiconair\n    │   ├── mitchellh\n    │   ├── pelletier\n    │   ├── spf13\n    │   ├── subosito\n    │   └── zclconf\n    ├── golang.org\n    │   └── x\n    └── gopkg.in\n        ├── ini.v1\n        └── yaml.v2\n26 directories, 25 files \n```", "```go\n$ go get -v github.com/spf13/viper\ngithub.com/spf13/viper (download)\n...\ngithub.com/spf13/afero (download)\nget \"golang.org/x/text/transform\": found meta tag get.metaImport{Prefix:\"golang.org/x/text\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/text\"} at //golang.org/x/text/transform?go-get=1\nget \"golang.org/x/text/transform\": verifying non-authoritative meta tag\n...\ngithub.com/fsnotify/fsnotify\ngithub.com/spf13/viper \n```", "```go\npackage main\nimport \"fmt\"\nfunc doubleSquare(x int) (int, int) {\n    return x * 2, x * x\n} \n```", "```go\n// Sorting from smaller to bigger value\nfunc sortTwo(x, y int) (int, int) {\n    if x > y {\n        return y, x\n    }\n    return x, y\n} \n```", "```go\nfunc main() {\n    n := 10\n    d, s := doubleSquare(n) \n```", "```go\n fmt.Println(\"Double of\", n, \"is\", d)\n    fmt.Println(\"Square of\", n, \"is\", s)\n    // An anonymous function\n    anF := func(param int) int {\n        return param * param\n    } \n```", "```go\n fmt.Println(\"anF of\", n, \"is\", anF(n))\n    fmt.Println(sortTwo(1, -3))\n    fmt.Println(sortTwo(-1, 0))\n} \n```", "```go\nDouble of 10 is 20\nSquare of 10 is 100\nanF of 10 is 100\n-3 1\n-1 0 \n```", "```go\nfunc minMax(x, y int) (min, max int) {\n    if x > y {\n        min = y\n        max = x\n        return min, max \n```", "```go\n }\n    min = x\n    max = y\n    return\n} \n```", "```go\n$ go run namedReturn.go 1 -2\n-2 1\n-2 1 \n```", "```go\npackage main\nimport (\n    \"fmt\"\n\"sort\"\n)\ntype Grades struct {\n    Name    string\n    Surname string\n    Grade   int\n}\nfunc main() {\n    data := []Grades{{\"J.\", \"Lewis\", 10}, {\"M.\", \"Tsoukalos\", 7},\n        {\"D.\", \"Tsoukalos\", 8}, {\"J.\", \"Lewis\", 9}}\n    isSorted := sort.SliceIsSorted(data, func(i, j int) bool {\n        return data[i].Grade < data[j].Grade\n    }) \n```", "```go\n if isSorted {\n        fmt.Println(\"It is sorted!\")\n    } else {\n        fmt.Println(\"It is NOT sorted!\")\n    }\n    sort.Slice(data,\n        func(i, j int) bool { return data[i].Grade < data[j].Grade })\n    fmt.Println(\"By Grade:\", data)\n} \n```", "```go\nIt is NOT sorted!\nBy Grade: [{M. Tsoukalos 7} {D. Tsoukalos 8} {J. Lewis 9} {J. Lewis 10}] \n```", "```go\npackage main\nimport \"fmt\"\nfunc funRet(i int) func(int) int {\n    if i < 0 {\n        return func(k int) int {\n            k = -k\n            return k + k\n        }\n    }\n    return func(k int) int {\n        return k * k\n    }\n} \n```", "```go\nfunc main() {\n    n := 10\n    i := funRet(n)\n    j := funRet(-4) \n```", "```go\n fmt.Printf(\"%T\\n\", i)\n    fmt.Printf(\"%T %v\\n\", j, j)\n    fmt.Println(\"j\", j, j(-5)) \n```", "```go\n // Same input parameter but DIFFERENT\n// anonymous functions assigned to i and j\n    fmt.Println(i(10))\n    fmt.Println(j(10))\n} \n```", "```go\nfunc(int) int\nfunc(int) int 0x100d446c0\nj 0x100d446c0 10\n100\n-20 \n```", "```go\nempty := make([]interface{}, len(os.Args[1:]))\nfor i, v := range os.Args {\n    empty[i] = v\n} \n```", "```go\npackage main\nimport (\n    \"fmt\"\n\"os\"\n) \n```", "```go\nfunc addFloats(message string, s ...float64) float64 { \n```", "```go\n fmt.Println(message)\n    sum := float64(0)\n    for _, a := range s {\n        sum = sum + a\n    } \n```", "```go\n s[0] = -1000\nreturn sum\n} \n```", "```go\nfunc everything(input ...interface{}) {\n    fmt.Println(input)\n} \n```", "```go\nfunc main() {\n    sum := addFloats(\"Adding numbers...\", 1.1, 2.12, 3.14, 4, 5, -1, 10) \n```", "```go\n fmt.Println(\"Sum:\", sum)\n    s := []float64{1.1, 2.12, 3.14} \n```", "```go\n sum = addFloats(\"Adding numbers...\", s...)\n    fmt.Println(\"Sum:\", sum)\n    everything(s) \n```", "```go\n // Cannot directly pass []string as []interface{}\n// You have to convert it first!\n    empty := make([]interface{}, len(os.Args[1:])) \n```", "```go\n for i, v := range os.Args[1:] {\n        empty[i] = v\n    }\n    everything(empty...) \n```", "```go\n arguments := os.Args[1:]\n    empty = make([]interface{}, len(arguments))\n    for i := range arguments {\n        empty[i] = arguments[i]\n    } \n```", "```go\n everything(empty...)\n    str := []string{\"One\", \"Two\", \"Three\"}\n    everything(str, str, str)\n} \n```", "```go\n$ go run variadic.go\nAdding numbers...\nSum: 24.36\nAdding numbers...\nSum: 6.36\n[[-1000 2.12 3.14]]\n[]\n[]\n[[One Two Three] [One Two Three] [One Two Three]] \n```", "```go\npackage main\nimport (\n    \"fmt\"\n)\nfunc d1() {\n    for i := 3; i > 0; i-- {\n        defer fmt.Print(i, \" \")\n    }\n} \n```", "```go\nfunc d2() {\n    for i := 3; i > 0; i-- {\n        defer func() {\n            fmt.Print(i, \" \")\n        }()\n    }\n    fmt.Println()\n} \n```", "```go\nfunc d3() {\n    for i := 3; i > 0; i-- {\n        defer func(n int) {\n            fmt.Print(n, \" \")\n        }(i)\n    }\n} \n```", "```go\nfunc main() {\n    d1()\n    d2()\n    fmt.Println()\n    d3()\n    fmt.Println()\n} \n```", "```go\n$ go run defer.go\n1 2 3\n0 0 0\n1 2 3 \n```", "```go\n$ go build -o sqlite06.a sqlite06.go \n```", "```go\n$ file sqlite06.a\nsqlite06.a: current ar archive\nThe sqlite06.a file is an ar archive. \n```", "```go\n$ git clone git@github.com:mactsouk/sqlite06.git \n```", "```go\n$ ls ~/go/pkg/mod/github.com/mattn\ngo-sqlite3@v1.14.22 \n```", "```go\npackage main\nimport (\n    \"database/sql\"\n\"fmt\"\n\"os\"\n    _ \"github.com/mattn/go-sqlite3\"\n)\nfunc main() {\n    // Connect or Create an SQLite database\n    db, err := sql.Open(\"sqlite3\", \"test.db\")\n    if err != nil {\n        fmt.Println(\"Error connecting:\", err)\n        return\n    }\n    defer db.Close() \n```", "```go\n var version string\n    err = db.QueryRow(\"SELECT SQLITE_VERSION()\").Scan(&version)\n    if err != nil {\n        fmt.Println(\"Version:\", err)\n        return\n    }\n    fmt.Println(\"SQLite3 version:\", version)\nos.Remove(\"test.db\")\n} \n```", "```go\n$ go run testSQLite.go\nSQLite3 version: 3.42.0 \n```", "```go\npackage main\nimport (\n    \"database/sql\"\n\"fmt\"\n\"os\"\n\"strconv\"\n\"time\"\n    _ \"github.com/mattn/go-sqlite3\"\n)\nvar dbname = \"ch06.db\"\nfunc insertData(db *sql.DB, dsc string) error {\n    cT := time.Now().Format(time.RFC1123)\n    stmt, err := db.Prepare(\"INSERT INTO book VALUES(NULL,?,?);\")\n    if err != nil {\n        fmt.Println(\"Insert data table:\", err)\n        return err\n    }\n    _, err = stmt.Exec(cT, dsc)\n    if err != nil {\n        fmt.Println(\"Insert data table:\", err)\n        return err\n    }\n    return nil\n} \n```", "```go\nfunc selectData(db *sql.DB, n int) error {\n    rows, err := **db.Query(****\"SELECT * from book WHERE id > ? \"****, n)**\nif err != nil {\n        fmt.Println(\"Select:\", err)\n        return err\n    }\n    defer rows.Close()\n    for **rows.Next()** {\n        var id int\nvar dt string\nvar description string\n        err = rows.Scan(&id, &dt, &description)\n        if err != nil {\n            fmt.Println(\"Row:\", err)\n            return err\n        }\n        date, err := time.Parse(time.RFC1123, dt)\n        if err != nil {\n            fmt.Println(\"Date:\", err)\n            return err\n        }\n        fmt.Printf(\"%d %s %s\\n\", id, date, description)\n    }\n    return nil\n} \n```", "```go\nfunc main() {\n    // Delete database file\n    os.Remove(dbname)\n    // Connect and Create the SQLite database\n    db, err := sql.Open(\"sqlite3\", dbname)\n    if err != nil {\n        fmt.Println(\"Error connecting:\", err)\n        return\n    }\n    defer db.Close()\n    // Create a table\nconst create string = `\n    CREATE TABLE IF NOT EXISTS book (\n      id INTEGER NOT NULL PRIMARY KEY,\n      time TEXT NOT NULL,\n      description TEXT);`\n    _, err = db.Exec(create)\n    if err != nil {\n        fmt.Println(\"Create table:\", err)\n        return\n    } \n```", "```go\n // Insert 10 rows to the book table\nfor i := 1; i < 11; i = i + 1 {\n        dsc := \"Description: \" + strconv.Itoa(i)\n        err = insertData(db, dsc)\n        if err != nil {\n            fmt.Println(\"Insert data:\", err)\n        }\n    }\n    // Select multiple rows\n    err = selectData(db, 5)\n    if err != nil {\n        fmt.Println(\"Select:\", err)\n    } \n```", "```go\n time.Sleep(time.Second)\n    // Update data\n    cT := time.Now().Format(time.RFC1123)\n    db.Exec(\"UPDATE book SET time = ? WHERE id > ?\", cT, 7)\n    // Select multiple rows\n    err = selectData(db, 8)\n    if err != nil {\n        fmt.Println(\"Select:\", err)\n        return\n    }\n    // Delete data\n    stmt, err := db.Prepare(\"DELETE from book where id = ?\")\n    _, err = stmt.Exec(8)\n    if err != nil {\n        fmt.Println(\"Delete:\", err)\n        return\n    } \n```", "```go\n // Select multiple rows\n    err = selectData(db, 7)\n    if err != nil {\n        fmt.Println(\"Select:\", err)\n        return\n    }\n    // Count rows in table\n    query, err := db.Query(\"SELECT count(*) as count from book\")\n    if err != nil {\n        fmt.Println(\"Select:\", err)\n        return\n    }\n    defer query.Close()\n    count := -100\nfor query.Next() {\n        _ = query.Scan(&count)\n    }\n    fmt.Println(\"count(*):\", count)\n} \n```", "```go\n$ go mod init\ngo: creating new go.mod: module github.com/mactsouk/mGo4th/ch06/connectSQLite3\ngo: to add module requirements and sums:\n    go mod tidy\n$ go mod tidy\ngo: finding module for package github.com/mattn/go-sqlite3\ngo: found github.com/mattn/go-sqlite3 in github.com/mattn/go-sqlite3 v1.14.17 \n```", "```go\n$ go run connectSQLite3.go\n6 2023-08-16 21:12:00 +0300 EEST Description: 6\n7 2023-08-16 21:12:00 +0300 EEST Description: 7\n8 2023-08-16 21:12:00 +0300 EEST Description: 8\n9 2023-08-16 21:12:00 +0300 EEST Description: 9\n10 2023-08-16 21:12:00 +0300 EEST Description: 10\n9 2023-08-16 21:12:01 +0300 EEST Description: 9\n10 2023-08-16 21:12:01 +0300 EEST Description: 10\n9 2023-08-16 21:12:01 +0300 EEST Description: 9\n10 2023-08-16 21:12:01 +0300 EEST Description: 10\ncount(*): 9 \n```", "```go\npackage sqlite06\nimport (\n    \"database/sql\"\n\"errors\"\n\"fmt\"\n\"strings\"\n    _ \"github.com/mattn/go-sqlite3\"\n)\nvar (\n    Filename = \"\"\n) \n```", "```go\ntype User struct {\n    ID       int\n    Username string\n}\ntype Userdata struct {\n    ID          int\n    Name        string\n    Surname     string\n    Description string\n} \n```", "```go\ntype Userdata struct {\n    ID          int\n    Username    string\n    Name        string\n    Surname     string\n    Description string\n} \n```", "```go\nfunc openConnection() (*sql.DB, error) {\n    db, err := sql.Open(\"sqlite3\", Filename)\n    if err != nil {\n        return nil, err\n    }\n    return db, nil\n} \n```", "```go\n// The function returns the User ID of the username\n// -1 if the user does not exist\nfunc exists(username string) int {\n    username = strings.ToLower(username)\n    db, err := openConnection()\n    if err != nil {\n        fmt.Println(err)\n        return -1\n    }\n    defer db.Close()\n    userID := -1\n    statement := fmt.Sprintf(`SELECT ID FROM Users where Username = '%s'`, username)\n    rows, err := db.Query(statement)\n    defer rows.Close() \n```", "```go\n for rows.Next() {\n        var id int\n        err = rows.Scan(&id)\n        if err != nil {\n            fmt.Println(\"exists() Scan\", err)\n            return -1\n        }\n        userID = id\n    } \n```", "```go\n return userID\n} \n```", "```go\n// AddUser adds a new user to the database\n// Returns new User ID\n// -1 if there was an error\nfunc AddUser(d Userdata) int {\n    d.Username = strings.ToLower(d.Username)\n    db, err := openConnection()\n    if err != nil {\n        fmt.Println(err)\n        return -1\n    }\n    defer db.Close() \n```", "```go\n userID := exists(d.Username)\n    if userID != -1 {\n        fmt.Println(\"User already exists:\", d.Username)\n        return -1\n    }\n    insertStatement := `INSERT INTO Users values (NULL,?)` \n```", "```go\n _, err = db.Exec(insertStatement, d.Username)\n    if err != nil {\n        fmt.Println(err)\n        return -1\n    } \n```", "```go\n userID = exists(d.Username)\n    if userID == -1 {\nreturn userID\n    } \n```", "```go\n insertStatement = `INSERT INTO Userdata values (?, ?, ?, ?)`\n    _, err = db.Exec(insertStatement, userID, d.Name, d.Surname, d.Description)\n    if err != nil {\n        fmt.Println(\"db.Exec()\", err)\n        return -1\n    }\n    return userID\n} \n```", "```go\nfunc DeleteUser(id int) error {\n    db, err := openConnection()\n    if err != nil {\n        return err\n    }\n    defer db.Close()\nstatement := fmt.Sprintf(`SELECT Username FROM Users WHERE ID = %d`, id)\n    rows, err := db.Query(statement)\n    defer rows.Close()\n    var username string\nfor rows.Next() {\n        **err = rows.Scan(&username)**\nif err != nil {\n            return err\n        }\n    }\nif **exists(username) != id** {\n        return fmt.Errorf(\"User with ID %d does not exist\", id)\n    } \n```", "```go\n // Delete from Userdata\n    deleteStatement := `DELETE FROM Userdata WHERE UserID = ?`\n    _, err = db.Exec(deleteStatement, id)\n    if err != nil {\n        return err\n    }\n    // Delete from Users\n    deleteStatement = `DELETE from Users where ID = ?`\n    _, err = db.Exec(deleteStatement, id)\n    if err != nil {\n        return err\n    }\n    return nil\n} \n```", "```go\nfunc ListUsers() ([]Userdata, error) {\n    Data := []Userdata{}\n    db, err := openConnection()\n    if err != nil {\n        return nil, err\n    }\n    defer db.Close() \n```", "```go\n rows, err := db.Query(`SELECT ID, Username, Name, Surname, Description FROM Users, Userdata WHERE Users.ID = Userdata.UserID`)\n    defer rows.Close()\n    if err != nil {\n        return Data, err\n    } \n```", "```go\n for rows.Next() {\n        var id int\nvar username string\nvar name string\nvar surname string\nvar desc string\n        err = rows.Scan(&id, &username, &name, &surname, &desc)\n        temp := Userdata{ID: id, Username: username, Name: name, Surname: surname, Description: desc} \n```", "```go\n Data = append(Data, temp)\n        if err != nil {\n            return nil, err\n        }\n    }\n    return Data, nil\n} \n```", "```go\nfunc UpdateUser(d Userdata) error {\n    db, err := openConnection()\n    if err != nil {\n        return err\n    }\n    defer db.Close()\n    userID := exists(d.Username)\n    if userID == -1 {\n        return errors.New(\"User does not exist\")\n    } \n```", "```go\nd.ID = userID\n    updateStatement := `UPDATE Userdata set Name = ?, Surname = ?, Description = ? where UserID = ?`\n    _, err = db.Exec(updateStatement, d.Name, d.Surname, d.Description, d.ID)\nif err != nil {\n        return err\n    }\n    return nil\n} \n```", "```go\n$ go mod init\ngo: creating new go.mod: module github.com/mactsouk/sqlite06\ngo: to add module requirements and sums:\n    go mod tidy \n```", "```go\n$ go mod tidy\ngo: finding module for package github.com/mattn/go-sqlite3\ngo: found github.com/mattn/go-sqlite3 in github.com/mattn/go-sqlite3 v1.14.17 \n```", "```go\npackage main\nimport (\n    \"fmt\"\n\"math/rand\"\n\"strings\"\n\"time\"\n\"github.com/mactsouk/sqlite06\"\n) \n```", "```go\nvar MIN = 0\nvar MAX = 26\nfunc random(min, max int) int {\n    return rand.Intn(max-min) + min\n}\nfunc getString(length int64) string {\n    startChar := \"A\"\n    temp := \"\"\nvar i int64 = 1\nfor {\n        myRand := random(MIN, MAX)\n        newChar := string(startChar[0] + byte(myRand))\n        temp = temp + newChar\n        if i == length {\n            break\n        }\n        i++\n    }\n    return temp\n} \n```", "```go\nfunc main() {\n    sqlite06.Filename = \"ch06.db\"\n    data, err := sqlite06.ListUsers()\n    if err != nil {\n        fmt.Println(\"ListUsers():\", err)\n        return\n    }\n    if len(data) != 0 {\n        for _, v := range data {\n            fmt.Println(v)\n        }\n    } \n```", "```go\n SEED := time.Now().Unix()\n    rand.Seed(SEED)\n    random_username := strings.ToLower(getString(5))\n    t := sqlite06.Userdata{\n        Username:    random_username,\n        Name:        \"Mihalis\",\n        Surname:     \"Tsoukalos\",\n        Description: \"This is me!\"}\n    fmt.Println(\"Adding username:\", random_username)\n    id := sqlite06.AddUser(t)\n    if id == -1 {\n        fmt.Println(\"There was an error adding user\", t.Username)\n    } \n```", "```go\n err = sqlite06.DeleteUser(id)\n    if err != nil {\n        fmt.Println(err)\n    } else {\n        fmt.Println(\"User with ID\", id, \"deleted!\")\n    }\n    // Trying to delete the same user again!\n    err = sqlite06.DeleteUser(id)\n    if err != nil {\n        fmt.Println(err)\n    } \n```", "```go\n random_username = strings.ToLower(getString(5))\n    random_name := getString(7)\n    random_surname := getString(10)\n    dsc := time.Now().Format(time.RFC1123)\n    t = sqlite06.Userdata{\n        Username:    random_username,\n        Name:        random_name,\n        Surname:     random_surname,\n        Description: dsc}\n    id = sqlite06.AddUser(t)\n    if id == -1 {\n        fmt.Println(\"There was an error adding user\", t.Username)\n    }\n    dsc = time.Now().Format(time.RFC1123)\n    t.Description = dsc\n    err = sqlite06.UpdateUser(t)\n    if err != nil {\n        fmt.Println(err)\n    }\n} \n```", "```go\n$ sqlite3 ch06.db\nSQLite version 3.39.5 2022-10-14 20:58:05\nEnter \".help\" for usage hints.\nsqlite> .read createTables.sql \n```", "```go\nDROP TABLE IF EXISTS Users;\nDROP TABLE IF EXISTS Userdata;\nCREATE TABLE Users (\n    ID INTEGER PRIMARY KEY,\n    Username TEXT\n);\nCREATE TABLE Userdata (\n    UserID INTEGER NOT NULL,\n    Name TEXT,\n    Surname TEXT,\n    Description TEXT\n); \n```", "```go\n$ sqlite3 ch06.db\nSQLite version 3.39.5 2022-10-14 20:58:05\nEnter \".help\" for usage hints.\nsqlite> .tables\nUserdata  Users\nsqlite> .schema\nCREATE TABLE Users (\n    ID INTEGER PRIMARY KEY,\n    Username TEXT\n);\nCREATE TABLE Userdata (\n    UserID INTEGER NOT NULL,\n    Name TEXT,\n    Surname TEXT,\n    Description TEXT\n); \n```", "```go\n$ go mod init\ngo: creating new go.mod: module github.com/mactsouk/mGo4th/ch06/usePackage\ngo: to add module requirements and sums:\n    go mod tidy\n$ go mod tidy\ngo: finding module for package github.com/mactsouk/sqlite06\ngo: downloading github.com/mactsouk/sqlite06 v0.0.0-20230817125241-55d77b17637d\ngo: found github.com/mactsouk/sqlite06 in github.com/mactsouk/sqlite06 v0.0.0-20230817125241-55d77b17637d\ngo: finding module for package github.com/mattn/go-sqlite3\ngo: found github.com/mattn/go-sqlite3 in github.com/mattn/go-sqlite3 v1.14.17 \n```", "```go\n$ go run sqliteGo.go\nAdding username: yzpon\nUser with ID 1 deleted!\nUser with ID 1 does not exist\n$ go run sqliteGo.go\n{1 vjyps AWJTWCI YIXXXQHSQA Thu, 17 Aug 2023 23:26:40 EEST}\nAdding username: cqrxf\nUser with ID 2 deleted!\nUser with ID 2 does not exist \n```", "```go\n/*\nThe package works on 2 tables on an SQLite database.\nThe names of the tables are:\n    * Users\n    * Userdata\nThe definitions of the tables are:\n    CREATE TABLE Users (\n        ID INTEGER PRIMARY KEY,\n        Username TEXT\n    );\n    CREATE TABLE Userdata (\n        UserID INTEGER NOT NULL,\n        Name TEXT,\n        Surname TEXT,\n        Description TEXT\n    );\n    This is rendered as code\nThis is not rendered as code\n*/\npackage document \n```", "```go\n// BUG(1): Function ListUsers() not working as expected\n// BUG(2): Function AddUser() is too slow \n```", "```go\nimport (\n    \"database/sql\"\n\"errors\"\n\"fmt\"\n\"strings\"\n    _ \"github.com/mattn/go-sqlite3\"\n) \n```", "```go\n/*\nThis global variable holds the SQLite3 database filepath\n    Filename: In the filepath to the database file\n*/\nvar (\n    Filename = \"\"\n) \n```", "```go\n// The Userdata structure is for holding full user data\n// from the Userdata table and the Username from the\n// Users table\ntype Userdata struct {\n    ID          int\n    Username    string\n    Name        string\n    Surname     string\n    Description string\n} \n```", "```go\n// openConnection() is for opening the SQLite3 connection\n// in order to be used by the other functions of the package.\nfunc openConnection() (*sql.DB, error) {\n} \n```", "```go\n// The function returns the User ID of the username\n// -1 if the user does not exist\nfunc exists(username string) int {\n} \n```", "```go\n// AddUser adds a new user to the database\n//\n// Returns new User ID\n// -1 if there was an error\nfunc AddUser(d Userdata) int {\n}\n/*\nDeleteUser deletes an existing user if the user exists.\nIt requires the User ID of the user to be deleted.\n*/\nfunc DeleteUser(id int) error {\n} \n```", "```go\n// ListUsers() lists all users in the database.\n//\n// Returns a slice of Userdata to the calling function.\nfunc ListUsers() ([]Userdata, error) {\n    // Data holds the records returned by the SQL query\n    Data := []Userdata{}\n} \n```", "```go\n/*\nUpdateUser() is for updating an existing user\ngiven a Userdata structure.\nThe user ID of the user to be updated is found\ninside the function.\n*/\nfunc UpdateUser(d Userdata) error {\n} \n```", "```go\n$ go doc document.go\npackage document // import \"command-line-arguments\"\nThe package works on 2 tables on an SQLite database.\nThe names of the tables are:\n  - Users\n  - Userdata\nThe definitions of the tables are:\n        CREATE TABLE Users (\n            ID INTEGER PRIMARY KEY,\n            Username TEXT\n        );\n        CREATE TABLE Userdata (\n            UserID INTEGER NOT NULL,\n            Name TEXT,\n            Surname TEXT,\n            Description TEXT\n        );\n        This is rendered as code\nThis is not rendered as code\nvar Filename = \"\"\nfunc AddUser(d Userdata) int\nfunc DeleteUser(id int) error\nfunc UpdateUser(d Userdata) error\ntype Userdata struct{ ... }\n    func ListUsers() ([]Userdata, error)\nBUG: Function ListUsers() not working as expected\nBUG: Function AddUser() is too slow \n```", "```go\n$ go doc document.go ListUsers\npackage document // import \"command-line-arguments\"\nfunc ListUsers() ([]Userdata, error)\n    ListUsers() lists all users in the database.\n    Returns a slice of Userdata to the calling function. \n```", "```go\n$ mkdir ws\n$ cd ws\n$ cp -r ~/go/src/github.com/mactsouk/sqlite06 .\n$ cd sqlite06\n$ rm go.mod go.sum\n$ go mod init\n$ go mod tidy\n$ cd .. \n```", "```go\n$ mkdir util\n$ cp ~/go/src/github.com/mactsouk/mGo4th/ch06/usePackage/sqliteGo.go .\n$ cd util\n$ go mod init\n$ go mod tidy\n$ cd .. \n```", "```go\n$ go work use ./util\n$ cat go.work\ngo 1.21.0\nuse ./util \n```", "```go\n$ go work use ./sqlite06\n$ cat go.work\ngo 1.21.0\nuse (\n    ./sqlite06\n    ./util\n)\n$ \n```", "```go\nreplace github.com/mactsouk/sqlite06 => ./sqlite06 \n```", "```go\n$ go run ./util/sqliteGo.go\nConnection string: &{{{} {} 0} {ch06.db 0x14000072020} {{} {} 0} {0 0} [] map[] 0 0 0x1400001c120 false map[] map[] 0 0 0 0 <nil> 0 0 0 0 0x1001512d0} \n```", "```go\n$ docker version\nClient:\n Version:           24.0.5\n API version:       1.43\n Go version:        go1.20.6\n Git commit:        ced0996600\n Built:             Wed Jul 26 21:44:58 2023\n OS/Arch:           linux/amd64\n Context:           default\nServer:\n Engine:\n  Version:          24.0.5\n  API version:      1.43 (minimum version 1.12)\n  Go version:       go1.20.6\n  Git commit:       a61e2b4c9c\n  Built:            Wed Jul 26 21:44:58 2023\n  OS/Arch:          linux/amd64\n  Experimental:     false\n containerd:\n  Version:          v1.7.2\n  GitCommit:        0cae528dd6cb557f7201036e9f43420650207b58.m\n runc:\n  Version:          1.1.9\n  GitCommit:\n docker-init:\n  Version:          0.19.0\n  GitCommit:        de40ad0 \n```", "```go\npackage main\nimport (\n    \"fmt\"\n\"os\"\n)\nvar VERSION string \n```", "```go\nfunc main() {\n    if len(os.Args) == 2 {\n        if os.Args[1] == \"version\" {\n            fmt.Println(\"Version:\", VERSION)\n        }\n    }\n} \n```", "```go\n$ export VERSION=$(git rev-list -1 HEAD)\n$ go build -ldflags \"-X main.VERSION=$VERSION\" gitVersion.go \n```", "```go\n$ export VERSION=$(git rev-list -1 HEAD) && go build -ldflags \"-X main.VERSION=$VERSION\" gitVersion.go \n```", "```go\n$ ./gitVersion version\nVersion: 4dc3d6b5fd030bf7075ed26f9ab471e8835a8a77 \n```"]