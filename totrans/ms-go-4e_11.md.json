["```go\nconst (\n    MethodGet     = \"GET\"\n    MethodHead    = \"HEAD\"\n    MethodPost    = \"POST\"\n    MethodPut     = \"PUT\"\n    MethodPatch   = \"PATCH\" // RFC 5789\n    MethodDelete  = \"DELETE\"\n    MethodConnect = \"CONNECT\"\n    MethodOptions = \"OPTIONS\"\n    MethodTrace   = \"TRACE\"\n) \n```", "```go\npackage main\nimport (\n    \"encoding/json\"\n\"fmt\"\n\"io\"\n\"log\"\n\"net/http\"\n\"os\"\n\"time\"\n)\ntype User struct {\n    Username string `json:\"user\"`\n    Password string `json:\"password\"`\n} \n```", "```go\nvar user User \n```", "```go\n// PORT is where the web server listens to\nvar PORT = \":1234\" \n```", "```go\n// DATA is the map that holds User records\nvar DATA = make(map[string]string) \n```", "```go\nfunc defaultHandler(w http.ResponseWriter, r *http.Request) {\n    log.Println(\"Serving:\", r.URL.Path, \"from\", r.Host)\n    w.WriteHeader(http.StatusNotFound)\n    body := \"Thanks for visiting!\\n\"\n    fmt.Fprintf(w, \"%s\", body)\n} \n```", "```go\nfunc timeHandler(w http.ResponseWriter, r *http.Request) {\n    log.Println(\"Serving:\", r.URL.Path, \"from\", r.Host)\n    t := time.Now().Format(time.RFC1123)\n    body := \"The current time is: \" + t + \"\\n\"\n    fmt.Fprintf(w, \"%s\", body)\n} \n```", "```go\nfunc addHandler(w http.ResponseWriter, r *http.Request) {\n    log.Println(\"Serving:\", r.URL.Path, \"from\", r.Host, r.Method)\n    if r.Method != http.MethodPost {\n        fmt.Fprintf(w, \"%s\\n\", \"Method not allowed!\")\n        http.Error(w, \"Error:\", http.StatusMethodNotAllowed)\n        return\n    } \n```", "```go\n d, err := io.ReadAll(r.Body)\n    if err != nil {\n        http.Error(w, \"Error:\", http.StatusBadRequest)\n        return\n    } \n```", "```go\n err = json.Unmarshal(d, &user)\n    if err != nil {\n        log.Println(err)\n        http.Error(w, \"Error:\", http.StatusBadRequest)\n        return\n    } \n```", "```go\n if user.Username == \"\" {\n        http.Error(w, \"Error:\", http.StatusBadRequest)\n        return\n    }\n    DATA[user.Username] = user.Password\n    log.Println(DATA)\n    w.WriteHeader(http.StatusCreated)\n} \n```", "```go\nfunc getHandler(w http.ResponseWriter, r *http.Request) {\n    log.Println(\"Serving:\", r.URL.Path, \"from\", r.Host, r.Method)\n    if r.Method != http.MethodGet {\n        http.Error(w, \"Error:\", http.StatusMethodNotAllowed)\n        fmt.Fprintf(w, \"%s\\n\", \"Method not allowed!\")\n        return\n    } \n```", "```go\n d, err := io.ReadAll(r.Body)\n    if err != nil {\n        http.Error(w, \"ReadAll - Error\", http.StatusBadRequest)\n        return\n    } \n```", "```go\n err = json.Unmarshal(d, &user)\n    if err != nil {\n        log.Println(err)\n        http.Error(w, \"Unmarshal - Error\", http.StatusBadRequest)\n        return\n    }\n    fmt.Println(user) \n```", "```go\n _, ok := DATA[user.Username]\n    if ok && user.Username != \"\" {\n        log.Println(\"Found!\")\n        w.WriteHeader(http.StatusOK)\n        fmt.Fprintf(w, \"%s\\n\", d) \n```", "```go\n } else {\n        log.Println(\"Not found!\")\n        w.WriteHeader(http.StatusNotFound)\n        http.Error(w, \"Map - Resource not found!\", http.StatusNotFound)\n    }\n    return\n} \n```", "```go\nfunc deleteHandler(w http.ResponseWriter, r *http.Request) {\n    log.Println(\"Serving:\", r.URL.Path, \"from\", r.Host, r.Method)\n    if r.Method != http.MethodDelete {\n        fmt.Fprintf(w, \"%s\\n\", \"Method not allowed!\")\n        http.Error(w, \"Error:\", http.StatusMethodNotAllowed)\n        return\n    } \n```", "```go\n d, err := io.ReadAll(r.Body)\n    if err != nil {\n        http.Error(w, \"ReadAll - Error\", http.StatusBadRequest)\n        return\n    } \n```", "```go\n err = json.Unmarshal(d, &user)\n    if err != nil {\n        log.Println(err)\n        http.Error(w, \"Unmarshal - Error\", http.StatusBadRequest)\n        return\n    }\n    log.Println(user) \n```", "```go\n _, ok := DATA[user.Username]\n    if ok && user.Username != \"\" {\n        if user.Password == DATA[user.Username] { \n```", "```go\n delete(DATA, user.Username)\n            w.WriteHeader(http.StatusOK)\n            fmt.Fprintf(w, \"%s\\n\", d)\n            log.Println(DATA)\n        }\n    } else {\n        log.Println(\"User\", user.Username, \"Not found!\")\n        w.WriteHeader(http.StatusNotFound)\n        http.Error(w, \"Resource not found!\", http.StatusNotFound)\n    }\n    return\n}\nfunc main() {\n    arguments := os.Args\n    if len(arguments) != 1 {\n        PORT = \":\" + arguments[1]\n    } \n```", "```go\n mux := http.NewServeMux()\n    s := &http.Server{\n        Addr:         PORT,\n        Handler:      mux,\n        IdleTimeout:  10 * time.Second,\n        ReadTimeout:  time.Second,\n        WriteTimeout: time.Second,\n    } \n```", "```go\n mux.Handle(\"/time\", http.HandlerFunc(timeHandler))\n    mux.Handle(\"/add\", http.HandlerFunc(addHandler))\n    mux.Handle(\"/get\", http.HandlerFunc(getHandler))\n    mux.Handle(\"/delete\", http.HandlerFunc(deleteHandler))\n    mux.Handle(\"/\", http.HandlerFunc(defaultHandler)) \n```", "```go\n fmt.Println(\"Ready to serve at\", PORT)\n    err := s.ListenAndServe()\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n} \n```", "```go\n$ curl localhost:1234/\nThanks for visiting! \n```", "```go\n$ curl -H 'Content-Type: application/json' -d '{\"user\": \"mtsouk\", \"password\" : \"admin\"}' http://localhost:1234/add -v\n*   Trying ::1...\n* TCP_NODELAY set\n* Connected to localhost (::1) port 1234 (#0) \n```", "```go\n> POST /add HTTP/1.1\n> Host: localhost:1234\n> User-Agent: curl/7.64.1\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 40 \n```", "```go\n>\n< HTTP/1.1 200 OK\n< Date: Sat, 28 Oct 2023 19:56:45 GMT\n< Content-Length: 0 \n```", "```go\n<\n* Connection #0 to host localhost left intact \n```", "```go\n$ curl -H 'Content-Type: application/json' -d '{\"user\": \"mtsouk\", \"password\" : \"admin\"}' http://localhost:1234/add \n```", "```go\n$ curl -H 'Content-Type: application/json' -d '{\"user\": \"mihalis\", \"password\" : \"admin\"}' http://localhost:1234/add \n```", "```go\n$ curl -H -d '{\"user\": \"admin\"}' http://localhost:1234/add\ncurl: (3) URL using bad/illegal format or missing URL\nError:\nMethod not allowed! \n```", "```go\n$ curl -H 'Content-Type: application/json' -d '{\"user\": \"admin\", \"password\": \"admin\"}' http://localhost:1234/get\nError:\nMethod not allowed! \n```", "```go\n$ curl -X GET -H 'Content-Type: application/json' -d '{\"user\": \"admin\", \"password\" : \"admin\"}' http://localhost:1234/get\nMap - Resource not found!\n$ curl -X GET -H 'Content-Type: application/json' -d '{\"user\": \"mtsouk\", \"password\" : \"admin\"}' http://localhost:1234/get\n{\"user\": \"mtsouk\", \"password\" : \"admin\"} \n```", "```go\n$ curl -H 'Content-Type: application/json' -d '{\"user\": \"mtsouk\", \"password\" : \"admin\"}' http://localhost:1234/delete -X DELETE\n{\"user\": \"mtsouk\", \"password\" : \"admin\"} \n```", "```go\n$ go run rServer.go\nReady to serve at :1234\n2023/10/28 22:56:36 Serving: / from localhost:1234\n2023/10/28 22:56:45 Serving: /add from localhost:1234 POST\n2023/10/28 22:56:45 map[mtsouk:admin]\n2023/10/28 22:57:44 Serving: /add from localhost:1234 POST\n2023/10/28 22:57:44 map[mtsouk:admin]\n2023/10/28 22:59:29 Serving: /add from localhost:1234 POST\n2023/10/28 22:59:29 map[mihalis:admin mtsouk:admin]\n2023/10/28 22:59:47 Serving: /add from localhost:1234 GET\n2023/10/28 23:00:08 Serving: /get from localhost:1234 POST\n2023/10/28 23:00:17 Serving: /get from localhost:1234 GET\n{admin admin}\n2023/10/28 23:00:17 Not found!\n2023/10/28 23:00:32 Serving: /get from localhost:1234 GET\n{mtsouk admin}\n2023/10/28 23:00:32 Found!\n2023/10/28 23:00:45 Serving: /delete from localhost:1234 DELETE\n2023/10/28 23:00:45 {mtsouk admin}\n2023/10/28 23:00:45 map[mihalis:admin]\n2023/10/28 23:00:45 After: map[mihalis:admin] \n```", "```go\npackage main\nimport (\n    \"bytes\"\n\"encoding/json\"\n\"fmt\"\n\"io\"\n\"net/http\"\n\"os\"\n\"time\"\n)\ntype User struct {\n    Username string `json:\"user\"`\n    Password string `json:\"password\"`\n} \n```", "```go\nvar u1 = User{\"admin\", \"admin\"}\nvar u2 = User{\"tsoukalos\", \"pass\"}\nvar u3 = User{\"\", \"pass\"} \n```", "```go\nconst addEndPoint = \"/add\"\nconst getEndPoint = \"/get\"\nconst deleteEndPoint = \"/delete\"\nconst timeEndPoint = \"/time\" \n```", "```go\nfunc deleteEndpoint(server string, user User) int {\n    userMarshall, err := json.Marshal(user)\n    if err != nil {\n        fmt.Println(\"Error in req: \", err)\n        return http.StatusInternalServerError\n    }\n    u := bytes.NewReader(userMarshall)\n    req, err := http.NewRequest(http.MethodDelete, server+deleteEndPoint, u) \n```", "```go\n if err != nil {\n        fmt.Println(\"Error in req: \", err)\n        return http.StatusBadRequest\n    }\n    req.Header.Set(\"Content-Type\", \"application/json\") \n```", "```go\n c := &http.Client{\n        Timeout: 15 * time.Second,\n    }\n    resp, err := c.Do(req) \n```", "```go\n if err != nil {\n        fmt.Println(\"Error:\", err)\n    }\n    defer resp.Body.Close()\n    if resp == nil {\n        return http.StatusBadRequest\n    }\n    data, err := io.ReadAll(resp.Body)\n    fmt.Print(\"/delete returned: \", string(data)) \n```", "```go\n if err != nil {\n        fmt.Println(\"Error:\", err)\n    }\n    return resp.StatusCode\n} \n```", "```go\nfunc getEndpoint(server string, user User) int {\n    userMarshall, err := json.Marshal(user)\n    if err != nil {\n        fmt.Println(\"Error in unmarshalling: \", err)\n        return http.StatusBadRequest\n    }\n    u := bytes.NewReader(userMarshall)\n    req, err := http.NewRequest(http.MethodGet, server+getEndPoint, u) \n```", "```go\n if err != nil {\n        fmt.Println(\"Error in req: \", err)\n        return http.StatusBadRequest\n    }\n    req.Header.Set(\"Content-Type\", \"application/json\") \n```", "```go\n c := &http.Client{\n        Timeout: 15 * time.Second,\n    } \n```", "```go\n resp, err := c.Do(req)\n    if err != nil {\n        fmt.Println(\"Error:\", err)\n    }\n    defer resp.Body.Close()\n    if resp == nil {\n        return resp.StatusCode\n    } \n```", "```go\n data, err := io.ReadAll(resp.Body)\n    fmt.Print(\"/get returned: \", string(data))\n    if err != nil {\n        fmt.Println(\"Error:\", err)\n    }\n    return resp.StatusCode\n} \n```", "```go\nfunc addEndpoint(server string, user User) int {\n    userMarshall, err := json.Marshal(user)\n    if err != nil {\n        fmt.Println(\"Error in unmarshalling: \", err)\n        return http.StatusBadRequest\n    }\n    u := bytes.NewReader(userMarshall)\n    req, err := http.NewRequest(\"POST\", server+addEndPoint, u) \n```", "```go\n if err != nil {\n        fmt.Println(\"Error in req: \", err)\n        return http.StatusBadRequest\n    }\n    req.Header.Set(\"Content-Type\", \"application/json\") \n```", "```go\n c := &http.Client{\n        Timeout: 15 * time.Second,\n    } \n```", "```go\n resp, err := c.Do(req)\n     if resp == nil || (resp.StatusCode == http.StatusNotFound) {\n        return resp.StatusCode\n    }\n    defer resp.Body.Close()\n    return resp.StatusCode\n} \n```", "```go\nfunc timeEndpoint(server string) (int, string) {\n    req, err := http.NewRequest(http.MethodPost, server+timeEndPoint, nil) \n```", "```go\n if err != nil {\n        fmt.Println(\"Error in req: \", err)\n        return http.StatusBadRequest, \"\"\n    }\n    c := &http.Client{\n        Timeout: 15 * time.Second,\n    } \n```", "```go\n resp, err := c.Do(req)\n    if resp == nil || (resp.StatusCode == http.StatusNotFound) {\n        return resp.StatusCode, \"\"\n    }\n    defer resp.Body.Close()\n    data, _ := io.ReadAll(resp.Body)\n    return resp.StatusCode, string(data)\n} \n```", "```go\nfunc slashEndpoint(server, URL string) (int, string) {\n    req, err := http.NewRequest(MethodPost, server+URL, nil) \n```", "```go\n if err != nil {\n        fmt.Println(\"Error in req: \", err)\n        return http.StatusBadRequest, \"\"\n    }\n    c := &http.Client{\n        Timeout: 15 * time.Second,\n    } \n```", "```go\n resp, err := c.Do(req)\n    if resp == nil {\n        return resp.StatusCode, \"\"\n    }\n    defer resp.Body.Close()\n    data, _ := io.ReadAll(resp.Body)\n    return resp.StatusCode, string(data)\n} \n```", "```go\nfunc main() {\n    if len(os.Args) != 2 {\n        fmt.Println(\"Wrong number of arguments!\")\n        fmt.Println(\"Need: Server URL\")\n        return\n    }\n    server := os.Args[1] \n```", "```go\n fmt.Println(\"/add\")\n    httpCode := addEndpoint(server, u1)\n    if HTTPcode != http.StatusOK {\n        fmt.Println(\"u1 Return code:\", httpCode)\n    } else {\n        fmt.Println(\"u1 Data added:\", u1, httpCode)\n    }\n    httpCode = addEndpoint(server, u2)\n    if httpCode != http.StatusOK {\n        fmt.Println(\"u2 Return code:\", httpCode)\n    } else {\n        fmt.Println(\"u2 Data added:\", u2, httpCode)\n    }\n    httpCode = addEndpoint(server, u3)\n    if httpCode != http.StatusOK {\n        fmt.Println(\"u3 Return code:\", httpCode)\n    } else {\n        fmt.Println(\"u3 Data added:\", u3, httpCode)\n    } \n```", "```go\n fmt.Println(\"/get\")\n    httpCode = getEndpoint(server, u1)\n    fmt.Println(\"/get u1 return code:\", httpCode)\n    httpCode = getEndpoint(server, u2)\n    fmt.Println(\"/get u2 return code:\", httpCode)\n    httpCode = getEndpoint(server, u3)\n    fmt.Println(\"/get u3 return code:\", httpCode) \n```", "```go\n fmt.Println(\"/delete\")\n    httpCode = deleteEndpoint(server, u1)\n    fmt.Println(\"/delete u1 return code:\", httpCode)\n    httpCode = deleteEndpoint(server, u1)\n    fmt.Println(\"/delete u1 return code:\", httpCode)\n    httpCode = deleteEndpoint(server, u2)\n    fmt.Println(\"/delete u2 return code:\", httpCode)\n    httpCode = deleteEndpoint(server, u3)\n    fmt.Println(\"/delete u3 return code:\", httpCode) \n```", "```go\n fmt.Println(\"/time\")\n    httpCode, myTime := timeEndpoint(server)\n    fmt.Print(\"/time returned: \", httpCode, \" \", myTime)\n    time.Sleep(time.Second)\n    httpCode, myTime = timeEndpoint(server)\n    fmt.Print(\"/time returned: \", httpCode, \" \", myTime) \n```", "```go\n fmt.Println(\"/\")\n    URL := \"/\"\n    httpCode, response := slashEndpoint(server, URL)\n    fmt.Print(\"/ returned: \", httpCode, \" with response: \", response)\n    fmt.Println(\"/what\")\n    URL = \"/what\"\n    httpCode, response = slashEndpoint(server, URL)\n    fmt.Print(URL, \" returned: \", httpCode, \" with response: \", response)\n} \n```", "```go\n$ go run rClient.go http://localhost:1234\n/add\nu1 Data added: {admin admin} 200\nu2 Data added: {tsoukalos pass} 200\nu3 Return code: 400 \n```", "```go\n/get\n/get returned: {\"user\":\"admin\",\"password\":\"admin\"}\n/get u1 return code: 200\n/get returned: {\"user\":\"tsoukalos\",\"password\":\"pass\"}\n/get u2 return code: 200\n/get returned: Map - Resource not found!\n/get u3 return code: 404 \n```", "```go\n/delete\n/delete returned: {\"user\":\"admin\",\"password\":\"admin\"}\n/delete u1 return code: 200\n/delete returned: Delete - Resource not found!\n/delete u1 return code: 404\n/delete returned: {\"user\":\"tsoukalos\",\"password\":\"pass\"}\n/delete u2 return code: 200\n/delete returned: Delete - Resource not found!\n/delete u3 return code: 404 \n```", "```go\n/time\n/time returned: 200 The current time is: Sat, 28 Oct 2023 23:03:39 EEST\n/time returned: 200 The current time is: Sat, 28 Oct 2023 23:03:40 EEST \n```", "```go\n/\n/ returned: 404 with response: Thanks for visiting!\n/what\n/what returned: 404 swith response: Thanks for visiting! \n```", "```go\ndeleteMux := mux.Methods(http.MethodDelete).Subrouter()\ndeleteMux.HandleFunc(\"/username/{id:[0-9]+}\", handlers.DeleteHandler) \n```", "```go\nDROP TABLE IF EXISTS users;\nCREATE TABLE users (\n    UserID INTEGER PRIMARY KEY,\n    username TEXT NOT NULL,\n    password TEXT NOT NULL,\n    lastlogin INTEGER,\n    admin INTEGER,\n    active INTEGER\n);\nINSERT INTO users (username, password, lastlogin, admin, active) VALUES ('admin', 'admin', 1620922454, 1, 1); \n```", "```go\n$ sqlite3 REST.db\nSQLite version 3.39.5 2022-10-14 20:58:05\nEnter \".help\" for usage hints.\nsqlite> .read create_db.sql \n```", "```go\n$ sqlite3 REST.db\nSQLite version 3.39.5 2022-10-14 20:58:05\nEnter \".help\" for usage hints.\nsqlite> .schema\nCREATE TABLE users (\n    UserID INTEGER PRIMARY KEY,\n    username TEXT NOT NULL,\n    password TEXT NOT NULL,\n    lastlogin INTEGER,\n    admin INTEGER,\n    active INTEGER\n);\nsqlite> select * from users;\n1|admin|admin|1620922454|1|1 \n```", "```go\nfunc OpenConnection() *sql.DB {\n    db, err := sql.Open(\"sqlite3\", Filename)\n    if err != nil {\n        fmt.Println(\"Error connecting:\", err)\n        return nil\n    }\n    return db\n} \n```", "```go\nfunc DeleteUser(ID int) bool {\n    db := OpenConnection()\n    if db == nil {\n        log.Println(\"Cannot connect to SQLite3!\")\n        return false\n    }\n    defer db.Close() \n```", "```go\n t := FindUserID(ID)\n    if t.ID == 0 {\n        log.Println(\"User\", ID, \"does not exist.\")\n        return false\n    } \n```", "```go\n stmt, err := db.Prepare(\"DELETE FROM users WHERE UserID = $1\")\n    if err != nil {\n        log.Println(\"DeleteUser:\", err)\n        return false\n    } \n```", "```go\n _, err = stmt.Exec(ID)\n    if err != nil {\n        log.Println(\"DeleteUser:\", err)\n        return false\n    }\n    return true\n} \n```", "```go\nfunc ListAllUsers() []User {\n    db := OpenConnection()\n    if db == nil {\n        fmt.Println(\"Cannot connect to SQLite3!\")\n        return []User{}\n    }\n    defer db.Close()\n    rows, err := db.Query(\"SELECT * FROM users \\n\")\n    if err != nil {\n        log.Println(err)\n        return []User{}\n    } \n```", "```go\n all := []User{}\n    var c1 int\nvar c2, c3 string\nvar c4 int64\nvar c5, c6 int\nfor rows.Next() {\n        err = rows.Scan(&c1, &c2, &c3, &c4, &c5, &c6)\n        if err != nil {\n            log.Println(err)\n            return []User{}\n        } \n```", "```go\n temp := User{c1, c2, c3, c4, c5, c6}\n        all = append(all, temp)\n    }\n    log.Println(\"All:\", all)\n    return all\n} \n```", "```go\nfunc IsUserValid(u User) bool {\n    db := OpenConnection()\n    if db == nil {\n        fmt.Println(\"Cannot connect to SQLite3!\")\n        return false\n    }\n    defer db.Close() \n```", "```go\n rows, err := db.Query(\"SELECT * FROM users WHERE username = $1 \\n\", u.Username)\n    if err != nil {\n        log.Println(err)\n        return false\n    } \n```", "```go\n temp := User{}\n    var c1 int\nvar c2, c3 string\nvar c4 int64\nvar c5, c6 int \n```", "```go\n // If there exist multiple users with the same username,\n// we will get the FIRST ONE only.\nfor rows.Next() {\n        err = rows.Scan(&c1, &c2, &c3, &c4, &c5, &c6)\n        if err != nil {\n            log.Println(err)\n            return false\n        }\n        temp = User{c1, c2, c3, c4, c5, c6}\n    } \n```", "```go\n if u.Username == temp.Username && u.Password == temp.Password {\n        return true\n    } \n```", "```go\n return false\n} \n```", "```go\n rMux.NotFoundHandler = http.HandlerFunc(DefaultHandler) \n```", "```go\n notAllowed := notAllowedHandler{}\n    rMux.MethodNotAllowedHandler = notAllowed \n```", "```go\n rMux.HandleFunc(\"/time\", TimeHandler) \n```", "```go\n // Define Handler Functions\n// Register GET\n    getMux := rMux.Methods(http.MethodGet).Subrouter()\n    getMux.HandleFunc(\"/getall\", GetAllHandler)\n    getMux.HandleFunc(\"/getid/{username}\", GetIDHandler)\n    getMux.HandleFunc(\"/logged\", LoggedUsersHandler)\n    getMux.HandleFunc(\"/username/{id:[0-9]+}\", GetUserDataHandler) \n```", "```go\n // Register PUT\n// Update User\n    putMux := rMux.Methods(http.MethodPut).Subrouter()\n    putMux.HandleFunc(\"/update\", UpdateHandler) \n```", "```go\n // Register POST\n// Add User + Login + Logout\n    postMux := rMux.Methods(http.MethodPost).Subrouter()\n    postMux.HandleFunc(\"/add\", AddHandler)\n    postMux.HandleFunc(\"/login\", LoginHandler)\n    postMux.HandleFunc(\"/logout\", LogoutHandler) \n```", "```go\n // Register DELETE\n// Delete User\n    deleteMux := rMux.Methods(http.MethodDelete).Subrouter()\n    deleteMux.HandleFunc(\"/username/{id:[0-9]+}\", DeleteHandler) \n```", "```go\n go func() {\n        log.Println(\"Listening to\", PORT)\n        err := s.ListenAndServe()\n        if err != nil {\n            log.Printf(\"Error starting server: %s\\n\", err)\n            return\n        }\n    }() \n```", "```go\n sigs := make(chan os.Signal, 1)\n    signal.Notify(sigs, os.Interrupt)\n    sig := <-sigs\n    log.Println(\"Quitting after signal:\", sig)\n    time.Sleep(5 * time.Second)\n    s.Shutdown(nil) \n```", "```go\n// AddHandler is for adding a new user\nfunc AddHandler(rw http.ResponseWriter, r *http.Request) {\n    log.Println(\"AddHandler Serving:\", r.URL.Path, \"from\", r.Host)\n    d, err := io.ReadAll(r.Body)\n    if err != nil {\n        rw.WriteHeader(http.StatusBadRequest)\n        log.Println(err)\n        return\n    } \n```", "```go\n if len(d) == 0 {\n        rw.WriteHeader(http.StatusBadRequest)\n        log.Println(\"No input!\")\n        return\n    } \n```", "```go\n // We read two structures as an array:\n// 1\\. The user issuing the command\n// 2\\. The user to be added\n    users := []User{}\n    err = json.Unmarshal(d, &users)\n    if err != nil {\n        log.Println(err)\n        rw.WriteHeader(http.StatusBadRequest)\n        return\n    } \n```", "```go\n log.Println(users)\n    if !IsUserAdmin(users[0]) {\n        log.Println(\"Issued by non-admin user:\", users[0].Username)\n        rw.WriteHeader(http.StatusBadRequest)\n        return\n    } \n```", "```go\n result := InsertUser(users[1])\n    if !result {\n        rw.WriteHeader(http.StatusBadRequest)\n    }\n} \n```", "```go\n// GetAllHandler is for getting all data from the user database\nfunc GetAllHandler(rw http.ResponseWriter, r *http.Request) {\n    log.Println(\"GetAllHandler Serving:\", r.URL.Path, \"from\", r.Host)\n    d, err := io.ReadAll(r.Body)\n    if err != nil {\n        rw.WriteHeader(http.StatusBadRequest)\n        log.Println(err)\n        return\n    } \n```", "```go\n if len(d) == 0 {\n        rw.WriteHeader(http.StatusBadRequest)\n        log.Println(\"No input!\")\n        return\n    }\n    user := User{}\n    err = json.Unmarshal(d, &user)\n    if err != nil {\n        log.Println(err)\n        rw.WriteHeader(http.StatusBadRequest)\n        return\n    } \n```", "```go\n if !IsUserAdmin(user) {\n        log.Println(\"User\", user, \"is not an admin!\")\n        rw.WriteHeader(http.StatusBadRequest)\n        return\n    } \n```", "```go\n err = SliceToJSON(ListAllUsers(), rw)\n    if err != nil {\n        log.Println(err)\n        rw.WriteHeader(http.StatusBadRequest)\n        return\n    }\n} \n```", "```go\n$ curl localhost:1234/time\nThe current time is: Mon, 30 Oct 2023 19:38:21 EET \n```", "```go\n$ curl localhost:1234/\n/ is not supported. Thanks for visiting!\n$ curl localhost:1234/doesNotExist\n/doesNotExist is not supported. Thanks for visiting! \n```", "```go\n$ curl -s -X PUT -H 'Content-Type: application/json' localhost:1234/getall\nMethod not allowed! \n```", "```go\n$ curl -s -X GET -H 'Content-Type: application/json' -d '{\"username\": \"admin\", \"password\" : \"justChanged\"}' localhost:1234/getall\n[{\"id\":1,\"username\":\"admin\",\"password\":\"justChanged\",\"lastlogin\":1620922454,\"admin\":1,\"active\":1},{\"id\":2,\"username\":\"\",\"password\":\"admin\",\"lastlogin\":0,\"admin\":0,\"active\":0},{\"id\":3,\"username\":\"mihalis\",\"password\":\"admin\",\"lastlogin\":0,\"admin\":0,\"active\":0},{\"id\":4,\"username\":\"newUser\",\"password\":\"aPass\",\"lastlogin\":0,\"admin\":0,\"active\":0}] \n```", "```go\n$ curl -X GET -H 'Content-Type: application/json' -d '{\"username\": \"admin\", \"password\" : \"justChanged\"}' localhost:1234/logged\n[{\"id\":1,\"username\":\"admin\",\"password\":\"justChanged\",\"lastlogin\":1620922454,\"admin\":1,\"active\":1}] \n```", "```go\n$ curl -X GET -H 'Content-Type: application/json' -d '{\"username\": \"admin\", \"password\" : \"justChanged\"}' localhost:1234/username/3\n{\"id\":3,\"username\":\"mihalis\",\"password\":\"admin\",\"lastlogin\":0,\"admin\":0,\"active\":0} \n```", "```go\n$ curl -X GET -H 'Content-Type: application/json' -d '{\"username\": \"admin\", \"password\" : \"justChanged\"}' localhost:1234/getid/mihalis\n{\"id\":3,\"username\":\"mihalis\",\"password\":\"admin\",\"lastlogin\":0,\"admin\":0,\"active\":0} \n```", "```go\n$ curl -X POST -H 'Content-Type: application/json' -d '[{\"username\": \"admin\", \"password\" : \"justChanged\", \"admin\":1}, {\"username\": \"packt\", \"password\" : \"admin\", \"admin\":0} ]' localhost:1234/add \n```", "```go\n$ curl -X POST -H 'Content-Type: application/json' -d '{\"username\": \"packt\", \"password\" : \"admin\"}' localhost:1234/login \n```", "```go\n$ curl -X POST -H 'Content-Type: application/json' -d '{\"username\": \"packt\", \"password\" : \"admin\"}' localhost:1234/logout \n```", "```go\n$ curl -X PUT -H 'Content-Type: application/json' -d '[{\"username\": \"admin\", \"password\" : \"admin\", \"admin\":1}, {\"username\": \"admin\", \"password\" : \"justChanged\", \"admin\":1} ]' localhost:1234/update \n```", "```go\n$ curl -X PUT -H 'Content-Type: application/json' -d '[{\"Username\":\"packt\",\"Password\":\"admin\"}, {\"username\": \"admin\", \"password\" : \"justChanged\", \"admin\":1} ]' localhost:1234/update \n```", "```go\n$ curl -X DELETE -H 'Content-Type: application/json' -d '{\"username\": \"admin\", \"password\" : \"justChanged\"}' localhost:1234/username/4 -v \n```", "```go\n$ cd ~/go/src/github.com/mactsouk/mGo4th/ch11\n$ mkdir client\n$ cd client\n$ go mod init\n$ ~/go/bin/cobra init\n$ go mod tidy\n$ go run main.go \n```", "```go\n$ ~/go/bin/cobra add add\n$ ~/go/bin/cobra add delete\n$ ~/go/bin/cobra add list\n$ ~/go/bin/cobra add logged\n$ ~/go/bin/cobra add login\n$ ~/go/bin/cobra add logout\n$ ~/go/bin/cobra add search\n$ ~/go/bin/cobra add getid\n$ ~/go/bin/cobra add time\n$ ~/go/bin/cobra add update \n```", "```go\nvar SERVER string\nvar PORT string\nvar data string\nvar username string\nvar password string \n```", "```go\ntype User struct {\n    ID        int `json:\"id\"`\n    Username  string `json:\"username\"`\n    Password  string `json:\"password\"`\n    LastLogin int64 `json:\"lastlogin\"`\n    Admin     int `json:\"admin\"`\n    Active    int `json:\"active\"`\n} \n```", "```go\nfunc init() {\n    rootCmd.PersistentFlags().StringVarP(&username, \"username\", \"u\", \"username\", \"The username\")\n    rootCmd.PersistentFlags().StringVarP(&password, \"password\", \"p\", \"admin\", \"The password\")\n    rootCmd.PersistentFlags().StringVarP(&data, \"data\", \"d\", \"{}\", \"JSON Record\")\n    rootCmd.PersistentFlags().StringVarP(&SERVER, \"server\", \"s\", \"http://localhost\", \"RESTful server hostname\")\n    rootCmd.PersistentFlags().StringVarP(&PORT, \"port\", \"P\", \":1234\", \"Port of RESTful Server\")\n} \n```", "```go\nvar listCmd = &cobra.Command{\n    Use:   \"list\",\n    Short: \"List all available users\",\n    Long:  `The list command lists all available users.`, \n```", "```go\n Run: func(cmd *cobra.Command, args []string) {\n        endpoint := \"/getall\"\n        user := User{Username: username, Password: password} \n```", "```go\n // bytes.Buffer is both a Reader and a Writer\n        buf := new(bytes.Buffer)\n        err := user.ToJSON(buf)\n        if err != nil {\n            fmt.Println(\"JSON:\", err)\n\n            os.Exit(1)\n        } \n```", "```go\n req, err := http.NewRequest(http.MethodGet,\n                               SERVER+PORT+endpoint, buf)\n        if err != nil {\n            fmt.Println(\"GetAll – Error in req: \", err)\n            return\n        }\n        req.Header.Set(\"Content-Type\", \"application/json\") \n```", "```go\n c := &http.Client{\n            Timeout: 15 * time.Second,\n        }\n        resp, err := c.Do(req)\n        if err != nil {\n            fmt.Println(\"Do:\", err)\n            return\n        } \n```", "```go\n if resp.StatusCode != http.StatusOK {\n            fmt.Println(resp)\n            return\n        } \n```", "```go\n users := []User{}\n        SliceFromJSON(&users, resp.Body)\n        if err != nil {\n            fmt.Println(err)\n            return\n        }\n        data, err := PrettyJSON(users)\n        if err != nil {\n            fmt.Println(err)\n            return\n        }\n        fmt.Print(data)\n    },\n} \n```", "```go\nvar addCmd = &cobra.Command{\n    Use:   \"add\",\n    Short: \"Add a new user\",\n    Long:  `Add a new user to the system.`,\n    Run: func(cmd *cobra.Command, args []string) {\n        endpoint := \"/add\"\n        u1 := User{Username: username, Password: password} \n```", "```go\n // Convert data string to User Structure\nvar u2 User\n        err := json.Unmarshal([]byte(data), &u2)\n        if err != nil {\n            fmt.Println(\"Unmarshal:\", err)\n\n            os.Exit(1)\n        } \n```", "```go\n users := []User{}\n        users = append(users, u1)\n        users = append(users, u2) \n```", "```go\n buf := new(bytes.Buffer)\n        err = SliceToJSON(users, buf)\n        if err != nil {\n            fmt.Println(\"JSON:\", err)\n            return\n        } \n```", "```go\n req, err := http.NewRequest(http.MethodPost,\n                                    SERVER+PORT+endpoint, buf)\n        if err != nil {\n            fmt.Println(\"GetAll – Error in req: \", err)\n            return\n        }\n        req.Header.Set(\"Content-Type\", \"application/json\")\n        c := &http.Client{\n            Timeout: 15 * time.Second,\n        }\n        resp, err := c.Do(req)\n        if err != nil {\n            fmt.Println(\"Do:\", err)\n            return\n        } \n```", "```go\n if resp.StatusCode != http.StatusOK {\n            fmt.Println(\"Status code:\", resp.Status)\n        }\n        fmt.Println(\"User\", u2.Username, \"added.\")\n        }\n    },\n} \n```", "```go\n$ ./rest-cli time\nThe current time is: Wed, 01 Nov 2023 07:37:49 EET \n```", "```go\n$ ./rest-cli list -u admin -p admin\n[\n    {\n        \"id\": 3,\n        \"username\": \"mihalis\",\n        \"password\": \"admin\",\n        \"lastlogin\": 0,\n        \"admin\": 0,\n        \"active\": 0\n    } \n```", "```go\n$ ./rest-cli logged -u admin -p notPass\n&{400 Bad Request 400 HTTP/1.1 1 1 map[Content-Length:[0] Date:[Wed, 01 Nov 2023 05:39:38 GMT]] 0x14000204020 0 [] false false map[] 0x14000132c00 <nil>} \n```", "```go\n$ ./rest-cli add -u admin -p admin --data '{\"Username\":\"newUser\", \"Password\":\"aPass\"}'\nUser newUser added. \n```", "```go\n$ ./rest-cli add -u admin -p admin --data '{\"Username\":\"newUser\", \"Password\":\"aPass\"}'\nStatus code: 400 Bad Request \n```", "```go\n$ ./rest-cli getid -u admin -p admin --data '{\"Username\":\"newUser\"}'\nUser newUser has ID: 4\n$ ./rest-cli delete -u admin -p admin --data '{\"ID\":4}'\nUser with ID 4 deleted. \n```"]