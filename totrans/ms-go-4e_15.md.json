["```go\n src := rand.NewSource(seed)\n    r := rand.New(src)\n    for i := 0; i < times; i++ {\n        fmt.Println(r.Uint64())\n    } \n```", "```go\n$ go run randSeed.go 1\nUsing seed: 1\n5577006791947779410\n8674665223082153551\n$ go run randSeed.go 1\nUsing seed: 1\n5577006791947779410\n8674665223082153551 \n```", "```go\npackage main\nimport (\n    \"fmt\"\n\"sync\"\n\"time\"\n)\nvar x = 0\nfunc initializeValue() {\n    x = 5\n} \n```", "```go\nfunc main() {\n    function := sync.OnceFunc(initializeValue)\n    for i := 0; i < 10; i++ {\n        go function()\n    }\n    time.Sleep(time.Second)\n    for i := 0; i < 10; i++ {\n        x = x + 1\n    }\n    fmt.Printf(\"x = %d\\n\", x)\n    for i := 0; i < 10; i++ {\n        go function()\n    }\n    time.Sleep(time.Second)\n    fmt.Printf(\"x = %d\\n\", x)\n} \n```", "```go\n$ go run syncOnce.go\nx = 15\nx = 15 \n```", "```go\nfunc main() {\n    m := map[string]int{\"One\": 1}\n    m[\"Two\"] = 2\n    fmt.Println(\"Before clear:\", m)\n    clear(m)\n    fmt.Println(\"After clear:\", m)\n    s := make([]int, 0, 10)\n    for i := 0; i < 5; i++ {\n        s = append(s, i)\n    }\n    fmt.Println(\"Before clear:\", s, len(s), cap(s))\n    clear(s)\n    fmt.Println(\"After clear:\", s, len(s), cap(s))\n} \n```", "```go\n$ go run clr.go\nBefore clear: map[One:1 Two:2]\nAfter clear: map[]\nBefore clear: [0 1 2 3 4] 5 10\nAfter clear: [0 0 0 0 0] 5 10 \n```", "```go\nfunc main() {\n    s1 := []int{1, 2}\n    s2 := []int{-1, -2}\n    s3 := []int{10, 20}\n    conCat := slices.Concat(s1, s2, s3)\n    fmt.Println(conCat) \n```", "```go\n v1 := []int{-1, 1, 2, 3, 4}\n    fmt.Println(\"v1:\", v1)\n    v2 := slices.Delete(v1, 1, 3)\n    fmt.Println(\"v1:\", v1)\n    fmt.Println(\"v2:\", v2)\n} \n```", "```go\n$ go run sliceChanges.go\n[1 2 -1 -2 10 20]\nv1: [-1 1 2 3 4]\nv1: [-1 3 4 0 0]\nv2: [-1 3 4] \n```", "```go\nfunc main() {\n    for x := range 5 {\n        fmt.Print(\" \", x)\n    }\n    fmt.Println() \n```", "```go\n values := []int{1, 2, 3, 4, 5}\n    for _, val := range values {\n        go func() {\n            fmt.Printf(\"%d \", val)\n        }()\n    }\n    time.Sleep(time.Second)\n    fmt.Println()\n} \n```", "```go\n$ go run changesForLoops.go\n 0 1 2 3 4\n5 3 4 1 2 \n```", "```go\npackage main\nimport (\n    \"fmt\"\n\"math/rand/v2\"\n)\nfunc Read(p []byte) (n int, err error) {\n    for i := 0; i < len(p); {\n        val := rand.Uint64()\n        for j := 0; j < 8 && i < len(p); j++ {\n            p[i] = byte(val & 0xff)\n            val >>= 8\n            i++\n        }\n    }\n    return len(p), nil\n} \n```", "```go\nfunc main() {\n    str := make([]byte, 3)\n    nChar, err := Read(str)\n    if err != nil {\n        fmt.Println(\"Error:\", err)\n    } else {\n        fmt.Printf(\"Read %d random bytes\\n\", nChar)\n        fmt.Printf(\"The 3 random bytes are: %v\\n\", str)\n    } \n```", "```go\n var max int = 100\n    n := rand.N(max)\n    fmt.Println(\"integer n =\", n)\n    var uMax uint = 100\n    uN := rand.N(uMax)\n    fmt.Println(\"unsigned int uN =\", uN)\n} \n```", "```go\n$ go run randv2.go\nRead 3 random bytes\nThe 3 random bytes are: [71 215 175]\ninteger n = 0\nunsigned int uN = 2 \n```"]