- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Changes in Recent Go Versions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is about the changes introduced in the latest Go versions.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will see what has changed about the random number generation capabilities
    of Go. More specifically, we will talk about `rand.Seed()`.
  prefs: []
  type: TYPE_NORMAL
- en: The remainder of the chapter is about Go 1.21 and Go 1.22, which at the time
    of writing are the latest Go versions. **We should not forget that a programming
    language is also a piece of software developed by programmers**. Therefore, programming
    languages and compilers are being improved all the time with new functionality,
    better code generation, code optimizations, and faster operation. We close this
    chapter by discussing the most important improvements introduced in Go versions
    1.21 and 1.22.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: About `rand.Seed()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is new in Go 1.21?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is new in Go 1.22?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first section discusses the `rand.Seed()` function and why it is not necessary
    to use it, starting from Go version 1.20.
  prefs: []
  type: TYPE_NORMAL
- en: About rand.Seed()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As of Go 1.20, there is no reason for calling `rand.Seed()` using a random value
    to initiate the random number generator. However, using `rand.Seed()` is not going
    to break existing code. To get a specific sequence of numbers, it is recommended
    to call `New(NewSource(seed))` instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is illustrated in `ch15/randSeed.go`—the relevant Go code is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `rand.NewSource()` call returns a new (pseudo) random source based on the
    given seed. Therefore, if called with the same seed, it is going to return the
    same sequence of values. The `rand.New()` call returns a new `*rand.Rand` variable,
    which is what generates the (pseudo) random values. Due to the call to `Uint64()`,
    we are generating unsigned `int64` values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running `randSeed.go` produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The next section introduces the changes introduced with Go 1.21.
  prefs: []
  type: TYPE_NORMAL
- en: What is new in Go 1.21?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to talk about two new features that came with
    Go 1.21: The `sync.OnceFunc()` function of the standard library and the built-in
    function `clear`, which deletes or zeroes out all elements of a map, a slice,
    or a *type parameter* type.'
  prefs: []
  type: TYPE_NORMAL
- en: We are going to begin with the `sync.OnceFunc()` function.
  prefs: []
  type: TYPE_NORMAL
- en: The sync.OnceFunc() function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `sync.OnceFunc()` function is a helper function of the `sync` package. Its
    full signature is `func OnceFunc(f func()) func()`, which means that it accepts
    a function as a parameter and returns another function. In more detail, `sync.OnceFunc()`
    returns a function that invokes function `f` **only once**—the important detail
    here is the *only once*.
  prefs: []
  type: TYPE_NORMAL
- en: 'This might look unclear now but the presented code, which is saved as `syncOnce.go`,
    is going to shed some light on the use of `sync.OnceFunc()`. The code of `syncOnce.go`
    is presented in two parts. The first part is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `initializeValue()` function is used for initializing the value of the `x`
    global variable. Let us make certain that `initializeValue()` gets executed only
    once.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second part comes with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `sync.OnceFunc(initializeValue)` call is used for making sure that `initializeValue()`
    is going to be executed only once, despite the fact that `function()` is executed
    multiple times. In other words, we make sure that `initializeValue()` is going
    to be executed **by the first goroutine only**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running `syncOnce.go` produces the next output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The output shows that the value of the `x` variable has been initialized only
    once. This means that `sync.OnceFunc()` might be used for initializing variables,
    connections, or files with the assurance that the initialization process is going
    to be executed only once.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it is time to learn about the `clear` function.
  prefs: []
  type: TYPE_NORMAL
- en: The clear function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this subsection, we are going to present the use of the `clear` function
    when working with maps and arrays. When used on a map object, `clear()` clears
    all the elements of the map object. When used on a slice object, `clear()` resets
    all the elements of the slice to the zero value of its data type while keeping
    the same slice length and capacity—this is totally different from what happens
    with a map object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The name of the relevant program is `clr.go`—the important Go code is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code, we create a map variable named `m` and a slice variable
    named `s`. After putting some data in them, we call the `clear()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running `clr.go` produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: So, what has just happened? After calling `clear()`, `m` is an empty map and
    `s` is a slice with the same length and capacity as before with all its elements
    reset to the zero element of its data type, which is `int`.
  prefs: []
  type: TYPE_NORMAL
- en: The next section presents the most important changes introduced in Go 1.22.
  prefs: []
  type: TYPE_NORMAL
- en: What is new in Go 1.22?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While finishing the writing of this book, Go 1.22 was officially released. In
    this section, we are going to present the most interesting new features and improvements
    of Go 1.22\.
  prefs: []
  type: TYPE_NORMAL
- en: There is no more sharing in the variables of loops.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions that shrink the size of a slice (`Delete()`, `DeleteFunc()`, `Compact()`,
    `CompactFunc()`, and `Replace()`) now zero the elements between the new length
    and the old length.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is an updated version of `math/rand`, which is called `math/rand/v2`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep in mind that in Go 1.22 the HTTP routing capabilities of the standard library
    are improved. In practice, this means that the patterns used by `net/http.ServeMux`
    have been enhanced to accept methods and wildcards. You can find more about that
    at [https://pkg.go.dev/net/http@master#ServeMux](https://pkg.go.dev/net/http@master#ServeMux).
  prefs: []
  type: TYPE_NORMAL
- en: We’ll begin by presenting the changes in the `slices` package.
  prefs: []
  type: TYPE_NORMAL
- en: Changes in slices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apart from the changes in the functions that shrink the size of a slice, there
    is also the addition of `slices.Concat()`, which **concatenates multiple slices**.
    All these are illustrated in `sliceChanges.go`. The code of the `main()` function
    is presented in two parts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code of the first part of `sliceChanges.go` is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code, we use `slices.Concat()` to concatenate three slices.
  prefs: []
  type: TYPE_NORMAL
- en: 'The rest of `sliceChanges.go` contains the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As mentioned earlier, `slices.Delete()` zeros the deleted elements of the slice
    that is given as its parameter, and returns a slice without the deleted slice
    elements—so `v1` has the same length as before but `v2` is smaller in length.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running `sliceChanges.go` produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The first line shows the contents of the concatenated slice (`conCat`). The
    second line contains the initial version of `v1`, whereas the third line shows
    the contents of `v1` after the call to `slices.Delete()`. The last line contains
    the return value of `slices.Delete()` as stored in the `v2` slice.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we are going to look at the changes in `for` loops.
  prefs: []
  type: TYPE_NORMAL
- en: Changes in for loops
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Go 1.22 introduced some changes in `for` loops, which we are going to present
    in this subsection using `changesForLoops.go`. The code of the `main()` function
    of `changesForLoops.go` is going to be presented in two parts. The first part
    is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: So, starting with Go 1.22, `for` loops can range over integers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last part of `changesForLoops.go` is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: So, starting with Go 1.22, each time the `for` loop is executed, **a new variable
    is allocated**. This means that there is no more sharing of loop variables, which
    means that it is safe to use a loop variable inside a goroutine without having
    to worry about race conditions.
  prefs: []
  type: TYPE_NORMAL
- en: This also means that `ch08/goClosure.go` is not going to have any issues with
    its execution. However, writing clear code is always considered a good practice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running `changesForLoops.go` produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The first line of output shows that loops can range over integers. The second
    line of output verifies that each goroutine that is created with the help of the
    `for` loop uses a different, separate copy of the loop variable.
  prefs: []
  type: TYPE_NORMAL
- en: Last, we present the new capabilities of the updated version of the `math/rand`
    package.
  prefs: []
  type: TYPE_NORMAL
- en: The math/rand/v2 package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Go 1.22 introduced an update to the `math/rand` package named `math/rand/v2`.
    The capabilities of this package are illustrated in `randv2.go`, which is presented
    in three parts. The first part of `randv2.go` is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: One of the most important changes is the deprecation of the `Read()` method
    from `math/rand`. However, a custom `Read()` function is implemented using the
    `Uint64()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second part comes with the next code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In this part, we call the previously implemented `Read()` to get 3 random bytes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last part of `randv2.go` contains the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: There is the introduction of generic functions that work for any integer type.
    In the previous code, we use `rand.N()` to get an `int` value as well as a `uint`
    value. The parameter of `rand.N()` is what specifies the type of value that it
    is going to return.
  prefs: []
  type: TYPE_NORMAL
- en: '`rand.N()` also works for time durations as `time.Duration` is based on `int64`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Running `randv2.go` with Go 1.22 or newer produces the following kind of output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This subsection concludes this chapter, which is also the last chapter of this
    book! Thank you for reading the entire book and thank you for choosing my book
    to learn Go!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter of the book, we presented the interesting and important
    changes introduced in Go 1.21 and Go 1.22 in order to have a clearer understanding
    of how the Go language keeps improving and evolving.
  prefs: []
  type: TYPE_NORMAL
- en: So, what does the future look like for Go developers? In short, it looks wonderful!
    You should already be enjoying programming in Go, and you should continue to do
    so as the language evolves. If you want to know about the latest and greatest
    of Go, you should definitely visit the official GitHub page of the Go team at
    [https://github.com/golang](https://github.com/golang).
  prefs: []
  type: TYPE_NORMAL
- en: Go helps you to create great software! So, go and create great software! And
    remember that **we are most productive when we are enjoying what we do!**
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Try to do the following exercises:'
  prefs: []
  type: TYPE_NORMAL
- en: Make the necessary changes to `./ch02/genPass.go` to remove the call to `rand.Seed()`
    and replace it with `rand.New(rand.NewSource(seed))`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similarly, make the necessary changes to `./ch02/randomNumbers.go` to replace
    the call to `rand.Seed()` with `rand.New(rand.NewSource(seed))`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Rob Pike—What We Got Right, What We Got Wrong talk from GopherConAU 2023: [https://www.youtube.com/watch?v=yE5Tpp2BSGw](https://www.youtube.com/watch?v=yE5Tpp2BSGw)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Meet the authors of Go: [https://youtu.be/3yghHvvZQmA](https://youtu.be/3yghHvvZQmA)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is a video of Brian Kernighan interviewing Ken Thompson—not directly related
    to Go: [https://youtu.be/EY6q5dv_B-o](https://youtu.be/EY6q5dv_B-o)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Brian Kernighan on successful language design—not directly related to Go: [https://youtu.be/Sg4U4r_AgJU](https://youtu.be/Sg4U4r_AgJU)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Brian Kernighan: UNIX, C, AWK, AMPL, and Go Programming from the Lex Fridman
    Podcast: [https://youtu.be/O9upVbGSBFo](https://youtu.be/O9upVbGSBFo)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Go 1.21 release notes: [https://go.dev/doc/go1.21](https://go.dev/doc/go1.21)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Go 1.22 release notes: [https://go.dev/doc/go1.22](https://go.dev/doc/go1.22
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A note from the author**'
  prefs: []
  type: TYPE_NORMAL
- en: Being a good programmer is hard, but it can be done. Keep improving and—who
    knows—you might become famous and have a movie made about you!
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading this book. Feel free to contact me with suggestions, questions,
    or maybe ideas for other books!
  prefs: []
  type: TYPE_NORMAL
- en: '*Soli Deo gloria*'
  prefs: []
  type: TYPE_NORMAL
- en: Join our community on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussions with the authors and other
    readers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://discord.gg/FzuQbc8zd6](https://discord.gg/FzuQbc8zd6 )'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](img/QR_Code2286825896190168453.png)](https://discord.gg/FzuQbc8zd6 )'
  prefs: []
  type: TYPE_NORMAL
