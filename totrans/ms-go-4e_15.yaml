- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Changes in Recent Go Versions
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 近期 Go 版本的变化
- en: This chapter is about the changes introduced in the latest Go versions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于最新 Go 版本引入的变化。
- en: First, we will see what has changed about the random number generation capabilities
    of Go. More specifically, we will talk about `rand.Seed()`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将看到 Go 的随机数生成能力发生了哪些变化。更具体地说，我们将讨论 `rand.Seed()`。
- en: The remainder of the chapter is about Go 1.21 and Go 1.22, which at the time
    of writing are the latest Go versions. **We should not forget that a programming
    language is also a piece of software developed by programmers**. Therefore, programming
    languages and compilers are being improved all the time with new functionality,
    better code generation, code optimizations, and faster operation. We close this
    chapter by discussing the most important improvements introduced in Go versions
    1.21 and 1.22.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的剩余部分将讨论 Go 1.21 和 Go 1.22，在撰写本文时，它们是最新版本的 Go。**我们不应忘记，编程语言也是程序员开发的软件的一部分**。因此，编程语言和编译器一直在不断改进，以提供新的功能、更好的代码生成、代码优化和更快的运行速度。我们通过讨论
    Go 版本 1.21 和 1.22 中引入的最重要改进来结束本章。
- en: 'We will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: About `rand.Seed()`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 `rand.Seed()`
- en: What is new in Go 1.21?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 1.21 的新特性是什么？
- en: What is new in Go 1.22?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 1.22 的新特性是什么？
- en: The first section discusses the `rand.Seed()` function and why it is not necessary
    to use it, starting from Go version 1.20.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分讨论了 `rand.Seed()` 函数以及为什么从 Go 版本 1.20 开始不再需要使用它。
- en: About rand.Seed()
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于 `rand.Seed()`
- en: As of Go 1.20, there is no reason for calling `rand.Seed()` using a random value
    to initiate the random number generator. However, using `rand.Seed()` is not going
    to break existing code. To get a specific sequence of numbers, it is recommended
    to call `New(NewSource(seed))` instead.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 截至 Go 1.20 版本，使用随机值调用 `rand.Seed()` 来初始化随机数生成器已经没有理由了。然而，使用 `rand.Seed()` 并不会破坏现有的代码。为了获得特定的数字序列，建议调用
    `New(NewSource(seed))`。
- en: 'This is illustrated in `ch15/randSeed.go`—the relevant Go code is the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这在 `ch15/randSeed.go` 中得到了说明——相关的 Go 代码如下：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `rand.NewSource()` call returns a new (pseudo) random source based on the
    given seed. Therefore, if called with the same seed, it is going to return the
    same sequence of values. The `rand.New()` call returns a new `*rand.Rand` variable,
    which is what generates the (pseudo) random values. Due to the call to `Uint64()`,
    we are generating unsigned `int64` values.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`rand.NewSource()` 调用基于给定的种子返回一个新的（伪）随机源。因此，如果使用相同的种子调用，它将返回相同的值序列。`rand.New()`
    调用返回一个新的 `*rand.Rand` 变量，它是生成（伪）随机值的东西。由于调用了 `Uint64()`，我们正在生成无符号的 `int64` 值。'
- en: 'Running `randSeed.go` produces the following output:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `randSeed.go` 产生以下输出：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The next section introduces the changes introduced with Go 1.21.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 下一部分介绍了 Go 1.21 引入的变化。
- en: What is new in Go 1.21?
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go 1.21 的新特性是什么？
- en: 'In this section, we are going to talk about two new features that came with
    Go 1.21: The `sync.OnceFunc()` function of the standard library and the built-in
    function `clear`, which deletes or zeroes out all elements of a map, a slice,
    or a *type parameter* type.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论 Go 1.21 带来的两个新特性：标准库中的 `sync.OnceFunc()` 函数和内置函数 `clear`，后者用于删除或清零映射、切片或
    *类型参数* 类型的所有元素。
- en: We are going to begin with the `sync.OnceFunc()` function.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从 `sync.OnceFunc()` 函数开始介绍。
- en: The sync.OnceFunc() function
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`sync.OnceFunc()` 函数'
- en: The `sync.OnceFunc()` function is a helper function of the `sync` package. Its
    full signature is `func OnceFunc(f func()) func()`, which means that it accepts
    a function as a parameter and returns another function. In more detail, `sync.OnceFunc()`
    returns a function that invokes function `f` **only once**—the important detail
    here is the *only once*.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`sync.OnceFunc()` 函数是 `sync` 包的一个辅助函数。它的完整签名是 `func OnceFunc(f func()) func()`，这意味着它接受一个函数作为参数并返回另一个函数。更详细地说，`sync.OnceFunc()`
    返回一个函数，该函数只调用一次函数 `f`——这里的重要细节是 *只调用一次*。'
- en: 'This might look unclear now but the presented code, which is saved as `syncOnce.go`,
    is going to shed some light on the use of `sync.OnceFunc()`. The code of `syncOnce.go`
    is presented in two parts. The first part is the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这可能看起来不太清楚，但保存为 `syncOnce.go` 的代码将有助于说明 `sync.OnceFunc()` 的使用。`syncOnce.go`
    的代码分为两部分。第一部分如下：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `initializeValue()` function is used for initializing the value of the `x`
    global variable. Let us make certain that `initializeValue()` gets executed only
    once.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`initializeValue()` 函数用于初始化全局变量 `x` 的值。让我们确保 `initializeValue()` 只执行一次。'
- en: 'The second part comes with the following code:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 第二部分包含以下代码：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `sync.OnceFunc(initializeValue)` call is used for making sure that `initializeValue()`
    is going to be executed only once, despite the fact that `function()` is executed
    multiple times. In other words, we make sure that `initializeValue()` is going
    to be executed **by the first goroutine only**.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`sync.OnceFunc(initializeValue)`调用用于确保`initializeValue()`只被执行一次，尽管`function()`多次执行。换句话说，我们确保`initializeValue()`只由第一个goroutine执行。'
- en: 'Running `syncOnce.go` produces the next output:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`syncOnce.go`会产生以下输出：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The output shows that the value of the `x` variable has been initialized only
    once. This means that `sync.OnceFunc()` might be used for initializing variables,
    connections, or files with the assurance that the initialization process is going
    to be executed only once.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示`x`变量的值只初始化了一次。这意味着`sync.OnceFunc()`可以用于初始化变量、连接或文件，并确保初始化过程只执行一次。
- en: Now, it is time to learn about the `clear` function.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候学习`clear`函数了。
- en: The clear function
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清除函数
- en: In this subsection, we are going to present the use of the `clear` function
    when working with maps and arrays. When used on a map object, `clear()` clears
    all the elements of the map object. When used on a slice object, `clear()` resets
    all the elements of the slice to the zero value of its data type while keeping
    the same slice length and capacity—this is totally different from what happens
    with a map object.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，我们将介绍在处理map和数组时使用`clear`函数的用法。当用于map对象时，`clear()`会清除map对象的所有元素。当用于slice对象时，`clear()`会将slice的所有元素重置为其数据类型的零值，同时保持相同的slice长度和容量——这与map对象发生的情况完全不同。
- en: 'The name of the relevant program is `clr.go`—the important Go code is the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 相关程序的名称是`clr.go`——重要的Go代码如下：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the previous code, we create a map variable named `m` and a slice variable
    named `s`. After putting some data in them, we call the `clear()` function.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的代码中，我们创建了一个名为`m`的map变量和一个名为`s`的slice变量。在向它们中添加一些数据后，我们调用`clear()`函数。
- en: 'Running `clr.go` produces the following output:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`clr.go`会产生以下输出：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: So, what has just happened? After calling `clear()`, `m` is an empty map and
    `s` is a slice with the same length and capacity as before with all its elements
    reset to the zero element of its data type, which is `int`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，刚才发生了什么？在调用`clear()`之后，`m`是一个空的map，而`s`是一个与之前相同长度和容量的slice，其所有元素都重置为其数据类型的零值，即`int`。
- en: The next section presents the most important changes introduced in Go 1.22.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将介绍Go 1.22中引入的最重要变化。
- en: What is new in Go 1.22?
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go 1.22的新特性是什么？
- en: While finishing the writing of this book, Go 1.22 was officially released. In
    this section, we are going to present the most interesting new features and improvements
    of Go 1.22\.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成本书的写作过程中，Go 1.22版本正式发布。在本节中，我们将介绍Go 1.22版本中最有趣的新特性和改进。
- en: There is no more sharing in the variables of loops.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环变量中不再有共享。
- en: Functions that shrink the size of a slice (`Delete()`, `DeleteFunc()`, `Compact()`,
    `CompactFunc()`, and `Replace()`) now zero the elements between the new length
    and the old length.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩小切片大小的函数（`Delete()`、`DeleteFunc()`、`Compact()`、`CompactFunc()`和`Replace()`）现在将新长度和旧长度之间的元素置零。
- en: There is an updated version of `math/rand`, which is called `math/rand/v2`.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`math/rand`有一个更新版本，称为`math/rand/v2`。'
- en: Keep in mind that in Go 1.22 the HTTP routing capabilities of the standard library
    are improved. In practice, this means that the patterns used by `net/http.ServeMux`
    have been enhanced to accept methods and wildcards. You can find more about that
    at [https://pkg.go.dev/net/http@master#ServeMux](https://pkg.go.dev/net/http@master#ServeMux).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在Go 1.22中，标准库的HTTP路由功能得到了改进。在实践中，这意味着`net/http.ServeMux`使用的模式已经增强，可以接受方法和通配符。更多关于这个的信息可以在[https://pkg.go.dev/net/http@master#ServeMux](https://pkg.go.dev/net/http@master#ServeMux)找到。
- en: We’ll begin by presenting the changes in the `slices` package.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先介绍`slices`包中的变化。
- en: Changes in slices
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 切片的变化
- en: Apart from the changes in the functions that shrink the size of a slice, there
    is also the addition of `slices.Concat()`, which **concatenates multiple slices**.
    All these are illustrated in `sliceChanges.go`. The code of the `main()` function
    is presented in two parts.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 除了缩小切片大小的函数的变化之外，还增加了`slices.Concat()`，它**连接多个切片**。所有这些都在`sliceChanges.go`中展示。`main()`函数的代码分为两部分。
- en: 'The code of the first part of `sliceChanges.go` is the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`sliceChanges.go` 的第一部分代码如下：'
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the previous code, we use `slices.Concat()` to concatenate three slices.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用 `slices.Concat()` 连接三个切片。
- en: 'The rest of `sliceChanges.go` contains the following code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`sliceChanges.go` 的其余部分包含以下代码：'
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As mentioned earlier, `slices.Delete()` zeros the deleted elements of the slice
    that is given as its parameter, and returns a slice without the deleted slice
    elements—so `v1` has the same length as before but `v2` is smaller in length.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`slices.Delete()` 将其参数指定的切片中删除的元素置零，并返回一个不包含删除切片元素的切片——因此 `v1` 的长度与之前相同，但
    `v2` 的长度更小。
- en: 'Running `sliceChanges.go` produces the following output:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `sliceChanges.go` 产生以下输出：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The first line shows the contents of the concatenated slice (`conCat`). The
    second line contains the initial version of `v1`, whereas the third line shows
    the contents of `v1` after the call to `slices.Delete()`. The last line contains
    the return value of `slices.Delete()` as stored in the `v2` slice.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行显示了连接切片 (`conCat`) 的内容。第二行包含 `v1` 的初始版本，而第三行显示了调用 `slices.Delete()` 后 `v1`
    的内容。最后一行包含存储在 `v2` 切片中的 `slices.Delete()` 的返回值。
- en: Next, we are going to look at the changes in `for` loops.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将查看 `for` 循环中的变化。
- en: Changes in for loops
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`for` 循环中的变化'
- en: 'Go 1.22 introduced some changes in `for` loops, which we are going to present
    in this subsection using `changesForLoops.go`. The code of the `main()` function
    of `changesForLoops.go` is going to be presented in two parts. The first part
    is the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Go 1.22 在 `for` 循环中引入了一些变化，我们将使用 `changesForLoops.go` 在本小节中展示这些变化。`changesForLoops.go`
    中 `main()` 函数的代码将分为两部分。第一部分如下：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: So, starting with Go 1.22, `for` loops can range over integers.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，从 Go 1.22 开始，`for` 循环可以遍历整数。
- en: 'The last part of `changesForLoops.go` is the following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`changesForLoops.go` 的最后一部分如下：'
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: So, starting with Go 1.22, each time the `for` loop is executed, **a new variable
    is allocated**. This means that there is no more sharing of loop variables, which
    means that it is safe to use a loop variable inside a goroutine without having
    to worry about race conditions.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，从 Go 1.22 开始，每次执行 `for` 循环时，都会**分配一个新的变量**。这意味着不再共享循环变量，这意味着可以在 goroutine
    内使用循环变量而无需担心竞态条件。
- en: This also means that `ch08/goClosure.go` is not going to have any issues with
    its execution. However, writing clear code is always considered a good practice.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这也意味着 `ch08/goClosure.go` 在执行时不会遇到任何问题。然而，编写清晰的代码始终被视为一种良好的实践。
- en: 'Running `changesForLoops.go` produces the following output:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `changesForLoops.go` 产生以下输出：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The first line of output shows that loops can range over integers. The second
    line of output verifies that each goroutine that is created with the help of the
    `for` loop uses a different, separate copy of the loop variable.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的第一行显示循环可以遍历整数。第二行输出验证了每个通过 `for` 循环创建的 goroutine 都使用不同的、独立的循环变量副本。
- en: Last, we present the new capabilities of the updated version of the `math/rand`
    package.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们展示了 `math/rand` 包更新版本的新功能。
- en: The math/rand/v2 package
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`math/rand/v2` 包'
- en: 'Go 1.22 introduced an update to the `math/rand` package named `math/rand/v2`.
    The capabilities of this package are illustrated in `randv2.go`, which is presented
    in three parts. The first part of `randv2.go` is the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Go 1.22 引入了对 `math/rand` 包的更新，名为 `math/rand/v2`。此包的功能在 `randv2.go` 中展示，分为三个部分。`randv2.go`
    的第一部分如下：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: One of the most important changes is the deprecation of the `Read()` method
    from `math/rand`. However, a custom `Read()` function is implemented using the
    `Uint64()` method.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 其中最重要的变化之一是 `math/rand` 中 `Read()` 方法的弃用。然而，使用 `Uint64()` 方法实现了一个自定义的 `Read()`
    函数。
- en: 'The second part comes with the next code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 第二部分包含以下代码：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In this part, we call the previously implemented `Read()` to get 3 random bytes.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分中，我们调用之前实现的 `Read()` 来获取 3 个随机字节。
- en: 'The last part of `randv2.go` contains the following code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`randv2.go` 的最后一部分包含以下代码：'
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: There is the introduction of generic functions that work for any integer type.
    In the previous code, we use `rand.N()` to get an `int` value as well as a `uint`
    value. The parameter of `rand.N()` is what specifies the type of value that it
    is going to return.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这里引入了适用于任何整数类型的泛型函数。在之前的代码中，我们使用 `rand.N()` 获取 `int` 值以及 `uint` 值。`rand.N()`
    的参数指定了它将要返回的值的类型。
- en: '`rand.N()` also works for time durations as `time.Duration` is based on `int64`.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`rand.N()` 也可以用于时间长度，因为 `time.Duration` 是基于 `int64` 的。'
- en: 'Running `randv2.go` with Go 1.22 or newer produces the following kind of output:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Go 1.22 或更高版本运行 `randv2.go` 会产生以下类型的输出：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This subsection concludes this chapter, which is also the last chapter of this
    book! Thank you for reading the entire book and thank you for choosing my book
    to learn Go!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 本小节总结了本章内容，这也是本书的最后一章！感谢您阅读整本书，感谢您选择我的书来学习 Go！
- en: Summary
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this final chapter of the book, we presented the interesting and important
    changes introduced in Go 1.21 and Go 1.22 in order to have a clearer understanding
    of how the Go language keeps improving and evolving.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的最后一章，我们介绍了 Go 1.21 和 Go 1.22 中引入的有趣且重要的变化，以便更清晰地了解 Go 语言是如何不断改进和演变的。
- en: So, what does the future look like for Go developers? In short, it looks wonderful!
    You should already be enjoying programming in Go, and you should continue to do
    so as the language evolves. If you want to know about the latest and greatest
    of Go, you should definitely visit the official GitHub page of the Go team at
    [https://github.com/golang](https://github.com/golang).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，Go 开发者的未来看起来如何？简而言之，看起来非常美好！你应该已经享受在 Go 中编程，随着语言的演变，你应该继续这样做。如果你想了解 Go 的最新和最伟大之处，你绝对应该访问
    Go 团队的官方 GitHub 页面 [https://github.com/golang](https://github.com/golang)。
- en: Go helps you to create great software! So, go and create great software! And
    remember that **we are most productive when we are enjoying what we do!**
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Go 帮助你创建出色的软件！所以，去创建出色的软件！记住，**当我们享受我们所做的事情时，我们最有效率**！
- en: Exercises
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'Try to do the following exercises:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试以下练习：
- en: Make the necessary changes to `./ch02/genPass.go` to remove the call to `rand.Seed()`
    and replace it with `rand.New(rand.NewSource(seed))`.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `./ch02/genPass.go` 中的 `rand.Seed()` 调用改为 `rand.New(rand.NewSource(seed))`
    以进行必要的更改。
- en: Similarly, make the necessary changes to `./ch02/randomNumbers.go` to replace
    the call to `rand.Seed()` with `rand.New(rand.NewSource(seed))`.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类似地，将 `./ch02/randomNumbers.go` 中的 `rand.Seed()` 调用替换为 `rand.New(rand.NewSource(seed))`
    以进行必要的更改。
- en: Additional resources
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他资源
- en: 'Rob Pike—What We Got Right, What We Got Wrong talk from GopherConAU 2023: [https://www.youtube.com/watch?v=yE5Tpp2BSGw](https://www.youtube.com/watch?v=yE5Tpp2BSGw)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 罗布·派克——GopherConAU 2023 的“我们做对了什么，做错了什么”演讲：[https://www.youtube.com/watch?v=yE5Tpp2BSGw](https://www.youtube.com/watch?v=yE5Tpp2BSGw)
- en: 'Meet the authors of Go: [https://youtu.be/3yghHvvZQmA](https://youtu.be/3yghHvvZQmA)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认识 Go 的作者：[https://youtu.be/3yghHvvZQmA](https://youtu.be/3yghHvvZQmA)
- en: 'This is a video of Brian Kernighan interviewing Ken Thompson—not directly related
    to Go: [https://youtu.be/EY6q5dv_B-o](https://youtu.be/EY6q5dv_B-o)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一段布莱恩·肯尼根采访肯·汤普森的视频——与 Go 语言无直接关系：[https://youtu.be/EY6q5dv_B-o](https://youtu.be/EY6q5dv_B-o)
- en: 'Brian Kernighan on successful language design—not directly related to Go: [https://youtu.be/Sg4U4r_AgJU](https://youtu.be/Sg4U4r_AgJU)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布莱恩·肯尼根关于成功语言设计的讨论——与 Go 语言无直接关系：[https://youtu.be/Sg4U4r_AgJU](https://youtu.be/Sg4U4r_AgJU)
- en: 'Brian Kernighan: UNIX, C, AWK, AMPL, and Go Programming from the Lex Fridman
    Podcast: [https://youtu.be/O9upVbGSBFo](https://youtu.be/O9upVbGSBFo)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布莱恩·肯尼根：来自 Lex Fridman播客的 UNIX、C、AWK、AMPL 和 Go 编程：[https://youtu.be/O9upVbGSBFo](https://youtu.be/O9upVbGSBFo)
- en: 'Go 1.21 release notes: [https://go.dev/doc/go1.21](https://go.dev/doc/go1.21)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 1.21 发布说明：[https://go.dev/doc/go1.21](https://go.dev/doc/go1.21)
- en: 'Go 1.22 release notes: [https://go.dev/doc/go1.22](https://go.dev/doc/go1.22
    )'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 1.22 发布说明：[https://go.dev/doc/go1.22](https://go.dev/doc/go1.22)
- en: '**A note from the author**'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**作者的话**'
- en: Being a good programmer is hard, but it can be done. Keep improving and—who
    knows—you might become famous and have a movie made about you!
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 成为一名优秀的程序员很困难，但这是可以做到的。持续进步，谁知道呢——你可能会成名，甚至有关于你的电影！
- en: Thank you for reading this book. Feel free to contact me with suggestions, questions,
    or maybe ideas for other books!
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您阅读这本书。请随时与我联系，提出建议、问题或可能的其他书籍的想法！
- en: '*Soli Deo gloria*'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '*荣耀归主*'
- en: Join our community on Discord
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区
- en: 'Join our community’s Discord space for discussions with the authors and other
    readers:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们社区的 Discord 空间，与作者和其他读者进行讨论：
- en: '[https://discord.gg/FzuQbc8zd6](https://discord.gg/FzuQbc8zd6 )'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://discord.gg/FzuQbc8zd6](https://discord.gg/FzuQbc8zd6)'
- en: '[![](img/QR_Code2286825896190168453.png)](https://discord.gg/FzuQbc8zd6 )'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/QR_Code2286825896190168453.png)](https://discord.gg/FzuQbc8zd6)'
