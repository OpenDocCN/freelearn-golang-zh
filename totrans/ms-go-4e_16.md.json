["```go\npackage main\nimport (\n    \"fmt\"\n\"runtime\"\n\"time\"\n) \n```", "```go\nfunc printStats(mem runtime.MemStats) {\n    runtime.ReadMemStats(&mem)\n    fmt.Println(\"mem.Alloc:\", mem.Alloc)\n    fmt.Println(\"mem.TotalAlloc:\", mem.TotalAlloc)\n    fmt.Println(\"mem.HeapAlloc:\", mem.HeapAlloc)\n    fmt.Println(\"mem.NumGC:\", mem.NumGC, \"\\n\")\n} \n```", "```go\nfunc main() {\n    var mem runtime.MemStats\n    printStats(mem)\n    for i := 0; i < 10; i++ {\n        s := make([]byte, 50000000)\n        if s == nil {\n            fmt.Println(\"Operation failed!\")\n        }\n    }\n    printStats(mem) \n```", "```go\n for i := 0; i < 10; i++ {\n        s := make([]byte, 100000000)\n        if s == nil {\n            fmt.Println(\"Operation failed!\")\n        }\n        time.Sleep(5 * time.Second)\n    }\n    printStats(mem)\n} \n```", "```go\n$ go run gColl.go\nmem.Alloc: 114960\nmem.TotalAlloc: 114960\nmem.HeapAlloc: 114960\nmem.NumGC: 0\nmem.Alloc: 50123152\nmem.TotalAlloc: 500163016\nmem.HeapAlloc: 50123152\nmem.NumGC: 9\nmem.Alloc: 121472\nmem.TotalAlloc: 1500246248\nmem.HeapAlloc: 121472\nmem.NumGC: 20 \n```", "```go\n$ GODEBUG=gctrace=1 go run gColl.go\ngc 1 @0.004s 2%: 0.008+0.34+0.042 ms clock, 0.081+0.063/0.51/0.18+0.42 ms cpu, 3->3->0 MB, 4 MB goal, 0 MB stacks, 0 MB globals, 10 P\ngc 2 @0.009s 3%: 0.097+0.93+0.049 ms clock, 0.97+0.20/1.0/0.84+0.49 ms cpu, 3->3->1 MB, 4 MB goal, 0 MB stacks, 0 MB globals, 10 P\n.\n.\n.\ngc 18 @35.101s 0%: 0.13+0.15+0.009 ms clock, 1.3+0/0.22/0.007+0.095 ms cpu, 95->95->0 MB, 95 MB goal, 0 MB stacks, 0 MB globals, 10 P\ngc 19 @40.107s 0%: 0.091+0.38+0.011 ms clock, 0.91+0/0.54/0+0.11 ms cpu, 95->95->0 MB, 95 MB goal, 0 MB stacks, 0 MB globals, 10 P\ngc 20 @45.111s 0%: 0.095+0.26+0.009 ms clock, 0.95+0/0.38/0+0.092 ms cpu, 95->95->0 MB, 95 MB goal, 0 MB stacks, 0 MB globals, 10 P\nmem.Alloc: 121200\nmem.TotalAlloc: 1500245792\nmem.HeapAlloc: 121200\nmem.NumGC: 20 \n```", "```go\ngc 20 @45.111s 0%: 0.095+0.26+0.009 ms clock, 0.95+0/0.38/0+0.092 ms cpu, 95->95->0 MB, 95 MB goal, 0 MB stacks, 0 MB globals, 10 P \n```", "```go\npackage main\nimport (\n    \"runtime\"\n)\ntype data struct {\n    i, j int\n}\nfunc main() {\n    var N = 80000000\nvar structure []data\n    for i := 0; i < N; i++ {\n        value := int(i)\n        structure = append(structure, data{value, value})\n    }\n    runtime.GC()\n    _ = structure[0]\n} \n```", "```go\npackage main\nimport (\n    \"runtime\"\n)\nfunc main() {\n    var N = 80000000\n    myMap := make(map[int]*int)\n    for i := 0; i < N; i++ {\n        value := int(i)\n        myMap[value] = &value\n    }\n    runtime.GC()\n    _ = myMap[0]\n} \n```", "```go\nfunc main() {\n    var N = 80000000\n    myMap := make(map[int]int)\n    for i := 0; i < N; i++ {\n        value := int(i)\n        myMap[value] = value\n    }\n    runtime.GC()\n    _ = myMap[0]\n} \n```", "```go\nfunc main() {\n    var N = 80000000\n    split := make([]map[int]int, 2000)\n    for i := range split {\n        split[i] = make(map[int]int)\n    }\n    for i := 0; i < N; i++ {\n        value := int(i)\n        split[i%2000][value] = value\n    }\n    runtime.GC()\n    _ = split[0][0]\n} \n```", "```go\n$ time go run sliceGC.go\ngo run sliceGC.go  0.61s user 0.52s system 92% cpu 1.222 total\n$ time go run mapStar.go\ngo run mapStar.go  23.86s user 1.02s system 176% cpu 14.107 total\n$ time go run mapNoStar.go\ngo run mapNoStar.go  10.01s user 0.53s system 98% cpu 10.701 total\n$ time go run mapSplit.go\ngo run mapSplit.go  11.22s user 0.44s system 100% cpu 11.641 total \n```"]