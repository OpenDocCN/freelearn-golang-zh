- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Introduction to Microservices
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务简介
- en: In this chapter, you will be introduced to **microservices** and the motivation
    behind them. You will understand the key benefits and common issues of the microservice
    architecture model and learn when to use it, as well as getting some microservice
    development best practices. This knowledge will help you establish a solid foundation
    for reading the next chapters and give you some ideas on what challenges you may
    face with microservices in the future.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解**微服务**及其背后的动机。你将了解微服务架构模型的关键优点和常见问题，并学习何时使用它，以及一些微服务开发的最佳实践。这些知识将帮助你为阅读下一章节打下坚实的基础，并给你一些关于未来可能面临的微服务挑战的想法。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is a microservice?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是微服务？
- en: Motivation to use microservices
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用微服务的动机
- en: Pros and cons of microservices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务的优缺点
- en: When to use microservice architecture
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 何时使用微服务架构
- en: Role of Go in microservice development
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go在微服务开发中的作用
- en: What is a microservice?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是微服务？
- en: Companies worldwide have used the **microservice architecture model** so widely
    that it has almost become a default way of software development. Those companies
    have tens, hundreds, and even thousands of microservices at their disposal.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 全世界的企业广泛使用了**微服务架构模型**，以至于它几乎已经成为软件开发的一种默认方式。这些公司拥有成百上千的微服务可供使用。
- en: So, what exactly is the microservice model?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，微服务模型究竟是什么呢？
- en: The microservice architecture model is organizing an application as a collection
    of services, called microservices, each of which is further responsible for a
    certain part of application logic, usually defined by a particular business capability.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务架构模型是将应用程序组织为一系列服务，称为微服务，每个微服务进一步负责应用程序逻辑的某个部分，通常由特定的业务能力定义。
- en: As an example, consider an online marketplace application. The application may
    have multiple features, including search, shopping cart, payments, order history,
    and many more. Each feature can be so different that the code may (and, in certain
    cases, should) be completely independent of the rest of the application. In this
    example, search and payments technically have nothing in common. In the microservice
    architecture model, each component would be an independent service playing its
    own role in the system.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑一个在线市场应用程序。该应用程序可能具有多个功能，包括搜索、购物车、支付、订单历史记录等。每个功能可能都如此不同，以至于代码可能（在某些情况下，应该）与应用程序的其他部分完全独立。在这个例子中，搜索和支付在技术上没有任何共同之处。在微服务架构模型中，每个组件都是一个独立的服务，在系统中扮演着自己的角色。
- en: Organizing each part of the application as a separate service is not necessarily
    a requirement. As with any architecture model or any aspect of software development,
    engineers need to be careful with choosing a particular approach or solution –
    doing an initial analysis and understanding the solution under the given conditions.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 将应用程序的每一部分组织为独立的服务并不是一个必要条件。与任何架构模型或软件开发方面的任何方面一样，工程师在选择特定的方法或解决方案时需要谨慎——进行初步分析和理解在给定条件下的解决方案。
- en: Before we proceed to the key benefits and downsides of microservices, let's
    see what challenges you could face when the application is not separated into
    multiple services.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续讨论微服务的关键优点和缺点之前，让我们看看当应用程序没有分成多个服务时，你可能会面临哪些挑战。
- en: Motivation to use microservices
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用微服务的动机
- en: In order to understand the motivation behind using the microservice architecture,
    it is very important to see the opposite approach – when the application is built
    and executed as a single program. Such applications are called **monolithic applications**
    or **monoliths**.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解使用微服务架构背后的动机，非常重要的一点是看到相反的方法——当应用程序作为一个单一程序构建和执行时。这样的应用程序被称为**单体应用程序**或**单体**。
- en: 'Monolithic architecture is, in most ways, the simplest model to implement since
    it does not involve splitting the application into multiple parts that need to
    coordinate with each other. This can provide you with major advantages in many
    cases, such as the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 单体架构在大多数情况下是最简单的实现模型，因为它不涉及将应用程序分割成需要相互协调的多个部分。这可以在许多情况下为你提供主要优势，例如以下内容：
- en: '**Small code base**: Splitting an application into multiple independent parts
    may significantly increase the size of the code base by introducing extra logic
    required for communication between the components.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**小的代码库**：将应用程序分割成多个独立部分可能会通过引入组件之间通信所需的额外逻辑，显著增加代码库的大小。'
- en: '**Application logic is still loosely defined**: It is very common that parts
    of the application or the entire system go through major structural or logical
    changes, especially at the very early stages of development. This might be caused
    by a sudden change of requirements, priorities, changes in the business model,
    or a different approach to development. During the early stages of development,
    iterating fast can be critical not only to the development process, but also to
    the entire company.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序逻辑仍然定义松散**：应用程序或整个系统在开发初期经历重大的结构或逻辑变化是非常常见的。这可能是由于需求、优先级、商业模式的变化，或开发方法的不同。在开发初期，快速迭代不仅对开发过程至关重要，对整个公司也是如此。'
- en: '**Narrow scope of the application**: Not every service requires a decomposition
    and division into separate parts. Consider a service for generating random passwords
    – it has a single logical feature and, in most cases, it would be unnecessary
    to split it into multiple parts.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序范围狭窄**：并非每个服务都需要分解和分割成单独的部分。考虑一个生成随机密码的服务——它只有一个逻辑功能，在大多数情况下，将其分割成多个部分是不必要的。'
- en: 'In all of the preceding cases, monolithic architecture would be a better fit
    for the application. However, at some point, services get too big to remain monolithic.
    Developers start experiencing the following issues:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有上述情况下，单体架构可能更适合该应用程序。然而，在某个时刻，服务变得太大，无法保持单体结构。开发者开始遇到以下问题：
- en: '**Large application size and slow deployments**: At a certain point, an application
    can become so big that it can take minutes or even hours to build, start, or deploy.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大型应用程序和缓慢的部署**：在某个时刻，应用程序可能变得如此之大，以至于构建、启动或部署可能需要几分钟甚至几小时。'
- en: '**Inability to deploy a particular part of the application independently**:
    Not being able to replace a part of a large application can easily become a bottleneck,
    slowing down the development and release process.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无法独立部署应用程序的特定部分**：无法替换大型应用程序的一部分，很容易成为瓶颈，减缓开发和发布过程。'
- en: '**Higher blast radius**: If there is a bug in a certain function or library
    widely used across the application code, it is going to affect all parts of the
    system at once, potentially causing major issues.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更大的影响范围**：如果某个广泛用于应用程序代码的函数或库中存在一个错误，它将一次性影响系统的所有部分，可能造成重大问题。'
- en: '**Vertical scalability bottleneck**: The more logic the application has, the
    more resources it needs in order to run. At a certain point, it can get hard or
    impossible to scale the application up even further, given the possible limits
    on CPU and RAM.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**垂直扩展瓶颈**：应用程序的逻辑越多，运行它所需的资源就越多。在某个时刻，考虑到CPU和RAM的限制，可能很难甚至不可能进一步扩展应用程序。'
- en: '**Interference**: Certain parts of the application can heavily load CPU, I/O,
    or RAM, causing delays for the rest of the system.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**干扰**：应用程序的某些部分可能会大量占用CPU、I/O或RAM，导致系统其他部分的延迟。'
- en: '**Unwanted dependencies between components**: Having the entire application
    represented as a single executable leaves room for unnecessary dependencies between
    the components. Imagine a developer refactoring a code base, and making a change
    suddenly affects some important parts of the system, such as payments. Having
    more isolation between the components gives more protection against such issues.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组件之间的不必要依赖性**：将整个应用程序表示为单个可执行文件，会在组件之间留下不必要的依赖性空间。想象一下，一个开发者正在重构代码库，突然一个改动影响了系统的某些重要部分，比如支付系统。组件之间有更多的隔离性，可以提供更多的保护，防止这类问题发生。'
- en: '**Security**: A possible security issue in the application may result in unauthorized
    access to all components at once.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：应用程序中可能存在的安全漏洞可能导致所有组件同时被未经授权访问。'
- en: 'In addition to the possible issues we just described, different components
    may have different requirements, such as the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们刚才描述的可能问题之外，不同的组件可能有不同的需求，如下所示：
- en: '**Resources and hardware requirements**: Certain components are more CPU-intensive
    or memory-intensive and may perform I/O operations at a higher rate. Separating
    such components may reduce the load on the entire system, increasing system availability
    and reducing latency.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源和硬件要求**：某些组件可能更依赖于CPU或内存，并且可能以更高的速率执行I/O操作。将此类组件分离可能减少整个系统的负载，提高系统可用性并减少延迟。'
- en: '**Deployment cadence**: Some parts of the system mostly remain unchanged while
    others require multiple deployments per day.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署节奏**：系统的某些部分可能基本保持不变，而其他部分可能每天需要多次部署。'
- en: '**Deployment monitoring and automated testing**: Certain components may require
    stricter checks and monitoring and can be subject to slower deployments due to
    multi-step rollouts.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署监控和自动化测试**：某些组件可能需要更严格的检查和监控，并且可能因为多步骤部署而需要更慢的部署。'
- en: '**Technologies or programming languages**: It is not uncommon that different
    parts of the system can be written in different programming languages or use fundamentally
    different technologies, libraries, and frameworks.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**技术或编程语言**：系统的一部分可以编写在不同的编程语言中，或使用根本不同的技术、库和框架，这种情况并不少见。'
- en: '**Independent APIs**: Components may provide fully independent APIs.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**独立的API**：组件可能提供完全独立的API。'
- en: '**Code review process**: Some components may be subject to a stricter code
    review process and additional requirements.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码审查流程**：某些组件可能需要更严格的代码审查流程和额外的要求。'
- en: '**Security**: Components may have different security requirements and may require
    additional isolation from the rest of the application for security reasons.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：组件可能具有不同的安全要求，并且可能需要出于安全原因从应用程序的其他部分进行额外的隔离。'
- en: '**Compliance**: Some parts of the system may be subject to stricter compliance
    requirements. For example, handling **personally identifiable information** (**PII**)
    for users from a certain region can put stricter requirements on the entire system.
    Logical separation of such components helps to reduce the scope of work required
    to keep the system compliant.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合规性**：系统的某些部分可能受到更严格的合规性要求。例如，处理来自特定地区的用户的**个人身份信息**（**PII**）可能对整个系统提出更严格的要求。此类组件的逻辑分离有助于减少保持系统合规所需的工作范围。'
- en: With all the preceding issues described, we can see that at a certain point
    monolithic applications can become too big for a *one-size-fits-all* model. As
    the application grows, certain parts of it may start becoming independent and
    have different requirements, benefiting from a logical separation from the rest
    of the application.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在描述了所有上述问题之后，我们可以看到，在某个点上，单体应用程序可能变得太大，无法适应“一刀切”的模式。随着应用程序的增长，其某些部分可能开始变得独立，并具有不同的要求，从逻辑上将其与其他应用程序部分分离是有益的。
- en: In the next section, we are going to see how splitting the application into
    microservices can solve the aforementioned problems and which aspects of it you
    should be careful with.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到如何通过将应用程序拆分为微服务来解决上述问题，以及你应该注意哪些方面。
- en: Pros and cons of microservices
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务的优缺点
- en: In order to understand how to get the best results from using microservices
    and which issues to be aware of, let's review the pros and cons of the microservice
    model.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解如何从使用微服务中获得最佳结果以及需要注意哪些问题，让我们回顾一下微服务模型的优缺点。
- en: Benefits of microservices
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微服务的优势
- en: As previously described, different application components may have fundamentally
    different requirements and at certain points diverge so much that it would be
    beneficial to separate them. In this case, microservice architecture provides
    a clear solution by decoupling the parts of the system.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，不同的应用程序组件可能具有根本不同的要求，并在某些点上差异如此之大，以至于将它们分开是有益的。在这种情况下，微服务架构通过解耦系统的各个部分提供了一个明确的解决方案。
- en: 'Microservices provide the following benefits to developers:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务为开发者提供了以下好处：
- en: '**Faster compilation and build time**: Faster build and compilation time may
    play a key role in speeding up all development processes.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更快的编译和构建时间**：更快的构建和编译时间可能在加快所有开发过程中发挥关键作用。'
- en: '**Faster deployments, lower deployable size**: When each part of the system
    is deployed separately, the deployable size can get so significantly smaller that
    individual deployments can take just a fraction of the time compared to monolithic
    applications.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更快的部署，更小的部署大小**：当系统的每个部分分别部署时，部署大小可以显著减小，以至于单个部署的时间只需是单体应用程序的一小部分。'
- en: '**Custom deployment cadence**: The microservice model solves the problem of
    following a custom deployment schedule. Each service can be deployed independently
    and follow its own schedule.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义部署节奏**：微服务模型解决了遵循自定义部署计划的问题。每个服务都可以独立部署并遵循自己的计划。'
- en: '**Custom deployment monitoring**: Some services can perform more critical roles
    in the system than others and may require more fine-grained monitoring and extra
    checks.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义部署监控**：一些服务在系统中可能比其他服务扮演更关键的角色，可能需要更细粒度的监控和额外的检查。'
- en: '**Independent and configurable automated testing**: Services may be configured
    to perform different automated tests as a part of the build and deployment pipeline.
    Additionally, the scope of checks can be reduced for individual microservices,
    that is, we don''t need to perform tests for the entire application, which may
    take longer.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**独立和可配置的自动化测试**：服务可以配置为在构建和部署管道中执行不同的自动化测试。此外，可以减少对单个微服务的检查范围，也就是说，我们不需要对整个应用程序进行测试，这可能需要更长的时间。'
- en: '**Cross-language support**: It is no longer required to run an application
    as a single executable, so it is possible to implement different parts of the
    system using different technologies, finding the best fit for each problem.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨语言支持**：不再需要将应用程序作为一个单一的可执行文件运行，因此可以使用不同的技术实现系统的不同部分，为每个问题找到最佳匹配。'
- en: '**Simpler APIs**: Fine-grained APIs are one of the key aspects of microservice
    development and having clear and efficient APIs helps to enforce the right composition
    of the system.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更简单的APIs**：细粒度的API是微服务开发的关键方面之一，拥有清晰高效的API有助于确保系统的正确组成。'
- en: '**Horizontal scaling**: Microservices are easier and often cheaper to scale
    horizontally. Monolithic applications are usually resource-heavy and running them
    on numerous instances could be quite expensive due to high hardware requirements.
    Microservices, however, can be scaled independently. So, if a particular part
    of the system requires running on hundreds or thousands of servers, other parts
    don''t need to follow the same requirements.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**水平扩展**：微服务更容易且通常更便宜地进行水平扩展。单体应用程序通常资源密集，由于硬件要求高，在多个实例上运行可能会非常昂贵。然而，微服务可以独立扩展。因此，如果系统的某个部分需要在数百或数千个服务器上运行，其他部分不需要遵循相同的要求。'
- en: '**Hardware flexibility**: Splitting an application often means reducing the
    hardware requirements for most parts of the system. It provides more flexibility
    in choosing the hardware or cloud providers to execute applications.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**硬件灵活性**：拆分应用程序通常意味着减少系统大部分的硬件要求。这为选择硬件或云提供商以执行应用程序提供了更多的灵活性。'
- en: '**Fault isolation**: Service decoupling provides an efficient safety mechanism
    to prevent major issues on partial system failures.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**故障隔离**：服务解耦提供了一个有效的安全机制，以防止部分系统故障时出现重大问题。'
- en: '**Understandability**: Services are easier to understand and maintain due to
    lower code base sizes.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可理解性**：由于代码库规模较小，服务更容易理解和维护。'
- en: '**Cost optimization**: Running most application components on lower-grade instances
    compared to expensive high-resource monolithic instances may result in significant
    cost savings for the company.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本优化**：与昂贵的资源密集型单体实例相比，在低级实例上运行大多数应用程序组件可能会为公司节省显著的成本。'
- en: '**Distributed development**: Removing the coupling between the components helps
    achieve more independence in code development, which can play an important role
    in distributed teams.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分布式开发**：去除组件之间的耦合有助于在代码开发中实现更多的独立性，这在分布式团队中可以发挥重要作用。'
- en: '**Ease of refactoring**: In general, it is much easier to perform refactoring
    for microservices due to the lower scope of changes and independent release and
    testing processes, which helps detect possible issues and reduce the scope of
    failures.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重构的便捷性**：一般来说，由于变更范围较小以及独立的发布和测试流程，对微服务进行重构要容易得多，这有助于检测可能的问题并减少故障的范围。'
- en: '**Technological freedom**: With microservice architecture, it is much easier
    to switch to new technologies given that each service is smaller in size and is
    structurally independent of the others. This can play a key role in companies
    with an open and experimental development culture, helping find the right solutions
    for particular problems and keep their technological stack up to date.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**技术自由度**：在微服务架构中，由于每个服务规模较小且在结构上相互独立，因此切换到新技术变得更加容易。这对于具有开放和实验性开发文化的公司来说可以发挥关键作用，帮助它们找到特定问题的正确解决方案，并保持其技术栈的更新。'
- en: '**Independent decision-making**: Developers are free to choose programming
    languages, libraries, and tools that fit their needs the best. This does not,
    however, imply that there should be no standardization, but it is often highly
    beneficial to achieve a certain degree of freedom for distributed decision-making.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**独立决策**：开发者可以自由选择最适合他们需求的编程语言、库和工具。然而，这并不意味着不应该有标准化，但通常在实现分布式决策的一定程度的自由度方面非常有益。'
- en: '**Removing unnecessary dependencies**: It is easy to miss detecting unwanted
    dependencies between the components of a monolithic application given the tighter
    coupling of the components. Microservice architecture helps you notice unwanted
    dependencies between components and restricts the use of certain services to particular
    parts of the application.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移除不必要的依赖**：由于组件之间的耦合更加紧密，因此在单体应用程序的组件之间很容易忽略检测到不想要的依赖。微服务架构有助于您注意到组件之间的不想要的依赖，并限制某些服务仅用于应用程序的特定部分。'
- en: As we can see, microservices bring a high degree of flexibility and help to
    achieve a higher level of independence between the components. These aspects may
    be instrumental to the success of a large development team, allowing them to build
    and maintain independent components separately. However, any model comes at its
    own cost, and in the next section, we are going to see the challenges you could
    face with a collection of microservices.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，微服务带来了高度的灵活性，并有助于在组件之间实现更高的独立性。这些方面对于大型开发团队的成功可能至关重要，允许他们分别构建和维护独立的组件。然而，任何模型都有其自身的成本，在下一节中，我们将看到在微服务集合中可能会遇到的挑战。
- en: Common issues of microservices
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微服务的常见问题
- en: 'As with any solution, microservice architecture has its own issues and limitations.
    Some issues with microservice architecture include the following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何解决方案一样，微服务架构有其自身的问题和局限性。微服务架构的一些问题包括以下内容：
- en: '**Higher resource overhead**: When an application consists of multiple components,
    instead of sharing the same process space, there is a need to communicate between
    the components that involve higher network use. This puts more load on the entire
    system and increases traffic, latency, and I/O usage. In addition, the total CPU
    and RAM are also higher due to the extra overhead of running each component separately.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更高的资源开销**：当一个应用程序由多个组件组成时，由于这些组件不共享相同的进程空间，因此需要在这些涉及更高网络使用的组件之间进行通信。这给整个系统增加了更多的负载，并增加了流量、延迟和I/O使用。此外，由于每个组件单独运行带来的额外开销，总的CPU和RAM也会更高。'
- en: '**Debugging difficulty**: Troubleshooting and debugging are often more difficult
    when you deal with multiple services. For example, if multiple services process
    a request that fails, a developer needs to access the logs of multiple services
    in order to understand what caused the failure.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试难度**：当处理多个服务时，故障排除和调试通常会更加困难。例如，如果多个服务处理一个失败请求，开发者需要访问多个服务的日志以了解导致失败的原因。'
- en: '**Integration testing**: Separating a system requires building a large set
    of integration tests and other automated checks that would monitor the compatibility
    and availability of each component.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成测试**：分离一个系统需要构建大量集成测试和其他自动化检查，以监控每个组件的兼容性和可用性。'
- en: '**Consistency and transactions**: In microservice applications, the data is
    often scattered across the system. While this helps to separate the independent
    parts of the application, it makes it harder to do transactional and atomic changes
    in the system.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致性和事务性**：在微服务应用程序中，数据通常分散在整个系统中。虽然这有助于分离应用程序的独立部分，但它使得在系统中进行事务性和原子性更改变得更加困难。'
- en: '**Divergence**: Different services may use different versions of libraries,
    which may include incompatible or outdated ones. Divergence makes it harder to
    perform system upgrades and resolve various issues, including software vulnerability
    fixes.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发散性**：不同的服务可能使用不同版本的库，这其中包括不兼容或过时的版本。发散性使得进行系统升级和解决各种问题（包括软件漏洞修复）变得更加困难。'
- en: '**Tech debt addressability**: It is much harder to address tech debt in a distributed
    system where each component is owned by a different team.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**技术债务的可解决性**：在一个由不同团队拥有的每个组件的分布式系统中解决技术债务要困难得多。'
- en: '**Observability**: Managing multiple applications brings additional challenges
    in collecting and using the system events and messages, including logs, traces,
    and metrics. Developers need to make sure all such signals are collected for all
    applications and are available for analysis, including all necessary contextual
    information to debug any issues and locate the root cause of the issue among the
    target services.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可观察性**：管理多个应用程序会带来额外的挑战，包括收集和使用系统事件和消息，如日志、跟踪和指标。开发者需要确保所有这些信号都被收集，并且对所有应用程序都是可用的，包括所有必要的上下文信息，以便调试任何问题并定位问题的根本原因。'
- en: '**Possible duplication, overlapping functionality**: In a highly distributed
    development environment, it is not uncommon to have multiple components performing
    similar roles in the system. It is important to set clear boundaries within the
    system and decide in advance which particular roles the components are assigned.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可能的重复，功能重叠**：在高度分布式开发环境中，系统中有多个组件执行类似角色的情况并不少见。在系统中设定清晰的边界并提前决定组件分配的具体角色是很重要的。'
- en: '**Ownership and accountability**: Ownership becomes a major aspect of the development
    process when there are many different teams maintaining and developing independent
    components. It is crucial to define clear ownership contracts to address the development
    requests, security and support issues, and all other types of maintenance work.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**所有权和责任**：当有多个不同的团队维护和开发独立组件时，所有权成为开发过程中的一个重要方面。定义明确的所有权合同来解决开发请求、安全和支持问题以及所有其他类型的维护工作至关重要。'
- en: As we have just illustrated, the microservice model comes at a cost and you
    should expect that you will need to solve all these challenges at a certain point.
    Being aware of the possible challenges and being proactive in solving them is
    the key to success – the benefits that we have described earlier can easily outweigh
    the possible issues.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们刚才所展示的，微服务模型是有代价的，你应该预期在某个时刻你需要解决所有这些挑战。意识到可能遇到的挑战并在解决它们方面采取主动是成功的关键——我们之前描述的好处可以轻易地超过可能的问题。
- en: In the next section, we are going to summarize when to use the microservices
    and learn some best practices for working with them.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将总结何时使用微服务，并学习一些与微服务一起工作的最佳实践。
- en: When to use microservice architecture
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时使用微服务架构
- en: 'We have covered the benefits and common issues of microservices, providing
    a good overview of the applicability of using the microservice architecture model
    in the application. Let''s summarize the key points of using the microservice
    model, which are the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经涵盖了微服务的优势和常见问题，提供了使用微服务架构模型在应用程序中应用的良好概述。让我们总结使用微服务模型的关键点，如下所示：
- en: '**Don''t introduce microservices too early**: Don''t use the microservice architecture
    too early if the product is loosely defined or can go through significant changes.
    Even when developers know the exact purpose of the system, there are high chances
    of various changes in the early stages of the development process. Starting from
    a monolithic application – and splitting it over time once there are clearly defined
    business capabilities and boundaries – helps reduce the amount of work and establish
    the right interfaces between the components.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要过早引入微服务**：如果产品定义不明确或可能经历重大变化，不要过早使用微服务架构。即使开发者知道系统的确切目的，在开发过程的早期阶段也可能会出现各种变化。从一个单体应用程序开始——一旦有明确定义的业务能力和边界，再逐步拆分——有助于减少工作量并建立组件之间的正确接口。'
- en: '**No size fits all**: Each company is unique and the final decision should
    depend on many factors, including the size of the team, its distribution, and
    geography. A small local team may be comfortable working with a monolithic application,
    whereas a geographically distributed team may highly benefit from splitting the
    application into multiple microservices to achieve higher flexibility.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**没有一种大小适合所有人**: 每家公司都是独特的，最终的决定应该取决于许多因素，包括团队的大小、分布和地理位置。一个小的本地团队可能对使用单体应用程序感到舒适，而一个地理上分布的团队可能高度受益于将应用程序拆分为多个微服务，以实现更高的灵活性。'
- en: 'Additionally, let''s summarize the best practices of using the microservice
    architecture model for applications, which are the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，让我们总结一下使用微服务架构模型的最佳实践，以下是一些：
- en: '**Design for failure**: In a microservice architecture, there are many interactions
    between the components, most of which are happening via remote calls and events.
    This increases the chance of various failures, including network timeouts, client
    errors, and many more. Build the system thinking of every possible failure scenario
    and different ways to proceed with it.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设计容错性**: 在微服务架构中，组件之间存在许多交互，其中大部分是通过远程调用和事件发生的。这增加了各种失败的可能性，包括网络超时、客户端错误等等。构建系统时，要考虑到每一个可能的失败场景以及处理这些场景的不同方式。'
- en: '**Embrace automation**: Having more independent components requires much stricter
    checks in order to achieve stable integration between the services. Investing
    in solid automation is absolutely necessary in order to achieve a high degree
    of reliability and ensure all changes are safe to be deployed.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拥抱自动化**: 拥有更多独立组件需要更严格的检查，以便在服务之间实现稳定的集成。投资于坚实的自动化是绝对必要的，以实现高度的可靠性并确保所有更改都是安全部署的。'
- en: '**Don''t ship hierarchy**: It is a relatively common practice to split the
    application into services based on the organizational structure, where each team
    may be responsible for its own service. This model works well if the organizational
    structure perfectly aligns with the business capabilities of the microservices,
    but quite often this is not the case. Instead of using a service-per-team model,
    try to define the clear domains and business capabilities around which the code
    is structured and see how the components interact with each other. It is not easy
    to achieve perfect composition, but you will be highly rewarded for it.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要发货层次结构**: 根据组织结构将应用程序拆分为服务是一种相对常见的做法，其中每个团队可能负责其自己的服务。如果组织结构与微服务的业务能力完美匹配，这种模式效果很好，但这种情况并不常见。与其使用按团队划分的服务模式，不如尝试定义清晰的领域和业务能力，这些领域和业务能力是代码结构的基础，并观察组件之间是如何相互作用的。实现完美的组合并不容易，但你会为此得到丰厚的回报。'
- en: '**Invest in integration testing**: Make sure you have comprehensive tests for
    the integrations between your microservices performing automatically.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**投资于集成测试**: 确保你对微服务之间的集成进行全面的测试，并且这些测试是自动执行的。'
- en: '**Keep backward compatibility in mind**: Always remember to keep your changes
    backward compatible to ensure that new changes are safe to deploy. Additionally,
    use techniques such as versioning, which we are going to cover in the next chapter
    of the book.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**考虑向后兼容性**: 总是记得保持你的更改向后兼容，以确保新的更改是安全部署的。此外，使用诸如版本控制等技术，这些技术我们将在本书的下一章中介绍。'
- en: At this point, we have covered the key aspects of microservice development,
    and you have learned its benefits and the challenges you may face. Before we proceed
    to the next chapter, let's cover one more topic to ensure we are ready for the
    journey into microservice development. Let's get familiar with the Go programming
    language and its role in microservice development.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经涵盖了微服务开发的关键方面，你也学习了它的好处以及你可能会面临的挑战。在我们进入下一章之前，让我们再讨论一个话题，以确保我们为微服务开发的旅程做好准备。让我们熟悉Go编程语言及其在微服务开发中的作用。
- en: Role of Go in microservice development
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go在微服务开发中的作用
- en: Over the last decade, the **Go** programming language has become one of the
    most popular languages for application development. There have been many factors
    contributing to its success, including its simplicity, ease of writing network
    applications, and an ability to easily develop parallel and concurrent applications.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的十年中，Go编程语言已经成为应用开发中最受欢迎的语言之一。许多因素促成了它的成功，包括其简洁性、编写网络应用的简便性以及轻松开发并行和并发应用的能力。
- en: Additionally, the larger developer community has played a key role in raising
    its popularity across all types of developers. The Go community is welcoming to
    everybody, from people just starting their journeys into programming to seasoned
    experts with decades of experience building different types of applications.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，更大的开发者社区在提高其所有类型开发者中的知名度方面发挥了关键作用。Go 社区对所有编程初学者和拥有几十年不同类型应用程序构建经验的资深专家都持开放态度。
- en: The Go standard library provides a set of packages that can often be enough
    for building a complete web application or an entire service, sometimes without
    even requiring any external dependencies. Many developers have been fascinated
    by the ease of writing applications and tools performing network calls, data serialization
    and encoding, file processing, and many other types of common operations.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Go 的标准库提供了一套包，通常足以构建完整的网络应用程序或整个服务，有时甚至不需要任何外部依赖。许多开发者都对编写应用程序和工具的简便性着迷，这些工具可以执行网络调用、数据序列化和编码、文件处理以及许多其他类型的常见操作。
- en: This simplicity, paired with fast and efficient compilation into native binaries
    as well as rich tooling, made it one of the primary languages for writing web
    tools and services. The high adoption of the Go language for web service development
    made it one of the primary choices for writing microservices across the industry.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这种简单性，加上快速高效的编译成原生二进制文件以及丰富的工具集，使得 Go 成为编写网络工具和服务的首选语言之一。Go 语言在开发网络服务方面的高采用率，使其成为行业内编写微服务的主要选择之一。
- en: 'The biggest advantages of Go for microservice development include the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Go 在微服务开发中的最大优势包括以下内容：
- en: '**Smooth learning curve**: As one of the critical aspects of application development
    in growing teams, the simplicity of the Go language helps reduce the onboarding
    time for new, inexperienced developers.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**学习曲线平缓**：作为增长团队中应用程序开发的关键方面之一，Go 语言的简单性有助于缩短新、缺乏经验的开发者的入职时间。'
- en: '**Explicit error handling**: While being a hot topic in the Go community, error
    handling in Go encourages explicit handling of all application errors. It aligns
    with one of the key principles of microservice development of designing applications
    for failure.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显式错误处理**：虽然错误处理在 Go 社区是一个热门话题，但 Go 中的错误处理鼓励显式处理所有应用程序错误。这与微服务开发的一个关键原则——设计应用程序以应对故障——相一致。'
- en: '**Useful standard library**: The Go standard library includes lots of packages
    that can be used in production-grade systems without requiring external solutions.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有用的标准库**：Go 的标准库包含许多可以在生产级系统中使用而无需外部解决方案的包。'
- en: '**Community support**: The Go community is among the biggest in the industry
    and the most popular libraries get enough support and maintenance.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**社区支持**：Go 社区是行业内最大的之一，最受欢迎的库得到了足够的支持和维护。'
- en: '**Ease of writing concurrent code**: Concurrent calls are very common in microservice
    application logic - microservices often call multiple other services and combine
    their results. Writing concurrent code in **Golang** can be a fairly trivial task
    when utilizing the built-in sync package and core language features, such as channels
    and Goroutines.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编写并发代码的易用性**：在微服务应用程序逻辑中，并发调用非常常见——微服务通常调用多个其他服务并合并它们的结果。利用内置的 sync 包和核心语言特性，如通道和
    Goroutines，在 **Golang** 中编写并发代码可以是一项相当简单的工作。'
- en: The growth of the Go community has increased the rate of development of additional
    libraries for the language and resulted in the creation of the entire ecosystem
    of tools, powering application logging, debugging, and implementations of all
    widely used networking protocols and standards. The community keeps growing and
    the rate of new releases is only accelerating.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Go 社区的增长加速了该语言额外库的开发速度，并导致了整个工具生态系统的创建，这些工具支持应用程序日志记录、调试以及所有广泛使用的网络协议和标准的实现。社区持续增长，新版本发布的速度也在不断加快。
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have discussed the key aspects of the microservice development model, including
    the motivation to use it, the common benefits, and the possible challenges. You
    have learned that the microservice model brings many advantages, helping you achieve
    a higher degree of flexibility. It also comes with its own costs, which often
    include additional complexity and a lack of uniformness in the system. Microservice
    architecture requires you to think about these problems proactively in order to
    address them before they become big issues.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了微服务开发模型的关键方面，包括使用它的动机、常见的好处以及可能遇到的挑战。您已经了解到微服务模型带来了许多优势，帮助您实现更高的灵活性。但它也伴随着自己的成本，这通常包括额外的复杂性和系统中的不统一性。微服务架构要求您积极思考这些问题，以便在它们成为大问题之前解决它们。
- en: In the next chapter, we are going to start our journey into microservice development
    with the Go language. You will learn the important basics of the Go programming
    language and we will scaffold our microservices, which we are going to improve
    throughout the rest of the book.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始使用Go语言进入微服务开发的旅程。您将学习Go编程语言的重要基础知识，我们将搭建我们的微服务，这些微服务将在本书的其余部分得到改进。
- en: Further reading
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '**A collection of resources on microservice development**: https://microservices.io/'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微服务开发资源集合**: https://microservices.io/'
- en: '**Overview of the microservice architecture model**: https://martinfowler.com/articles/microservices.html'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微服务架构模型概述**: https://martinfowler.com/articles/microservices.html'
- en: '**15 best practices for building microservices**: https://www.bmc.com/blogs/microservices-best-practices/'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建微服务的15个最佳实践**: https://www.bmc.com/blogs/microservices-best-practices/'
- en: 'Part 2: Foundation'
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分：基础
- en: This part covers the foundational aspects of Go microservice development, such
    as service discovery, data serialization, synchronous and asynchronous communication,
    deployment, and testing. You will learn how to scaffold Go microservices, establish
    communication between them, store service data, and implement service APIs, as
    well as many other important aspects of microservice development.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分涵盖了Go微服务开发的基础方面，例如服务发现、数据序列化、同步和异步通信、部署和测试。您将学习如何搭建Go微服务，建立它们之间的通信，存储服务数据，以及实现服务API，以及微服务开发的其他许多重要方面。
- en: 'This part contains the following chapters:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 2*](B18865_02.xhtml#_idTextAnchor027)*, Scaffolding a Go Microservice*'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第二章*](B18865_02.xhtml#_idTextAnchor027)*，搭建Go微服务*'
- en: '[*Chapter 3*](B18865_03.xhtml#_idTextAnchor051)*, Service Discovery*'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第三章*](B18865_03.xhtml#_idTextAnchor051)*，服务发现*'
- en: '[*Chapter 4*](B18865_04.xhtml#_idTextAnchor067)*,* Serialization'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第四章*](B18865_04.xhtml#_idTextAnchor067)*，序列化'
- en: '[*Chapter 5*](B18865_05.xhtml#_idTextAnchor076), Synchronous Communication'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第五章*](B18865_05.xhtml#_idTextAnchor076)，同步通信'
- en: '[*Chapter 6*](B18865_06.xhtml#_idTextAnchor088), Asynchronous Communication'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第六章*](B18865_06.xhtml#_idTextAnchor088)，异步通信'
- en: '[*Chapter 7*](B18865_07.xhtml#_idTextAnchor102), Storing Service Data'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第七章*](B18865_07.xhtml#_idTextAnchor102)，存储服务数据'
- en: '[*Chapter 8*](B18865_08.xhtml#_idTextAnchor109), Deployment with Kubernetes'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第八章*](B18865_08.xhtml#_idTextAnchor109)，使用Kubernetes进行部署'
- en: '[*Chapter 9*](B18865_09.xhtml#_idTextAnchor124), Unit and Integration Testing'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第九章*](B18865_09.xhtml#_idTextAnchor124)，单元和集成测试'
