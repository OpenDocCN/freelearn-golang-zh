["```go\n    // ErrNotFound is returned when the record is not found.\n    ```", "```go\n    var ErrNotFound = errors.New(\"not found\")\n    ```", "```go\n    return errors.New(\"user not found\")\n    ```", "```go\n    var errUserNotFound = errors.New(\"user not found\")\n    ```", "```go\n    if err != nil {\n    ```", "```go\n        return fmt.Errorf(\"upload failed: %w\", err)\n    ```", "```go\n    }\n    ```", "```go\n    if errors.Is(err, ErrNotFound) {\n    ```", "```go\n        // err or some error it wraps is ErrNotFound.\n    ```", "```go\n    }\n    ```", "```go\nvar e *QueryError\nif errors.As(err, &e) {\n    // err has *QueryError type.\n}\n```", "```go\ncmd/\ncmd/main.go\n```", "```go\ncmd/\ncmd/indexer/main.go\ncmd/crawler/main.go\n```", "```go\ngo mod init movieexample.com\n```", "```go\npackage model\n// Metadata defines the movie metadata.\ntype Metadata struct {\n    ID          string `json:\"id\"`\n    Title       string `json:\"title\"`\n    Description string `json:\"description\"`\n    Director    string `json:\"director\"`\n}\n```", "```go\npackage repository\nimport \"errors\"\n// ErrNotFound is returned when a requested record is not // found.\nvar ErrNotFound = errors.New(\"not found\")\n```", "```go\npackage memory\nimport (\n    \"context\"\n    \"sync\"\n    \"movieexample.com/metadata/internal/repository\"\n    \"movieexample.com/metadata/pkg/model\"\n)\n// Repository defines a memory movie metadata repository.\ntype Repository struct {\n    sync.RWMutex\n    data map[string]*model.Metadata\n}\n// New creates a new memory repository.\nfunc New() *Repository {\n    return &Repository{data: map[string]*model.Metadata{}}\n}\n// Get retrieves movie metadata for by movie id.\nfunc (r *Repository) Get(_ context.Context, id string) (*model.Metadata, error) {\n    r.RLock()\n    defer r.RUnlock()\n    m, ok := r.data[id]\n    if !ok {\n         return nil, repository.ErrNotFound\n    }\n    return m, nil\n}\n// Put adds movie metadata for a given movie id.\nfunc (r *Repository) Put(_ context.Context, id string, metadata *model.Metadata) error {\n    r.Lock()\n    defer r.Unlock()\n    r.data[id] = metadata\n    return nil\n}\n```", "```go\npackage metadata\nimport (\n    \"context\"\n    \"errors\"\n    \"movieexample.com/metadata/internal/repository\"\n    \"movieexample.com/metadata/pkg/model\"\n)\n// ErrNotFound is returned when a requested record is not // found.\nvar ErrNotFound = errors.New(\"not found\")\ntype metadataRepository interface {\n    Get(ctx context.Context, id string) (*model.Metadata, error)\n}\n// Controller defines a metadata service controller.\ntype Controller struct {\n    repo metadataRepository\n}\n// New creates a metadata service controller.\nfunc New(repo metadataRepository) *Controller {\n    return &Controller{repo}\n}\n// Get returns movie metadata by id.\nfunc (c *Controller) Get(ctx context.Context, id string) (*model.Metadata, error) {\n    res, err := c.repo.Get(ctx, id)\n    if err != nil && errors.Is(err, repository.ErrNotFound) {\n        return nil, ErrNotFound\n    }\n    return res, err\n}\n```", "```go\npackage http\nimport (\n    \"encoding/json\"\n    \"errors\"\n    \"log\"\n    \"net/http\"\n    \"movieexample.com/metadata/internal/controller/metadata\"\n    \"movieexample.com/metadata/internal/repository\"\n)\n// Handler defines a movie metadata HTTP handler.\ntype Handler struct {\n    ctrl *metadata.Controller\n}\n// New creates a new movie metadata HTTP handler.\nfunc New(ctrl *metadata.Controller) *Handler {\n    return &Handler{ctrl}\n}\n```", "```go\n// GetMetadata handles GET /metadata requests.\nfunc (h *Handler) GetMetadata(w http.ResponseWriter, req *http.Request) {\n    id := req.FormValue(\"id\")\n    if id == \"\" {\n        w.WriteHeader(http.StatusBadRequest)\n        return\n    }\n    ctx := req.Context()\n    m, err := h.ctrl.Get(ctx, id)\n    if err != nil && errors.Is(err, repository.ErrNotFound) {\n        w.WriteHeader(http.StatusNotFound)\n        return\n    } else if err != nil {\n        log.Printf(\"Repository get error: %v\\n\", err)\n        w.WriteHeader(http.StatusInternalServerError)\n        return\n    }\n    if err := json.NewEncoder(w).Encode(m); err != nil {\n        log.Printf(\"Response encode error: %v\\n\", err)\n    }\n}\n```", "```go\npackage main\nimport (\n    \"log\"\n    \"net/http\"\n    \"movieexample.com/metadata/internal/controller/metadata\"\n    httphandler \"movieexample.com/metadata/internal/handler/http\"\n    \"movieexample.com/metadata/internal/repository/memory\"\n)\nfunc main() {\n    log.Println(\"Starting the movie metadata service\")\n    repo := memory.New()\n    ctrl := metadata.New(repo)\n    h := httphandler.New(ctrl)\n    http.Handle(\"/metadata\", http.HandlerFunc(h.GetMetadata))\n    if err := http.ListenAndServe(\":8081\", nil); err != nil {\n        panic(err)\n    }\n}\n```", "```go\npackage model\n// RecordID defines a record id. Together with RecordType\n// identifies unique records across all types.\ntype RecordID string\n// RecordType defines a record type. Together with RecordID\n// identifies unique records across all types.\ntype RecordType string\n// Existing record types.\nconst (\n    RecordTypeMovie = RecordType(\"movie\")\n)\n// UserID defines a user id.\ntype UserID string\n// RatingValue defines a value of a rating record.\ntype RatingValue int\n// Rating defines an individual rating created by a user for  // some record.\ntype Rating struct {\n    RecordID   string      `json:\"recordId\"`\n    RecordType string      `json:\"recordType\"`\n    UserID     UserID      `json:\"userId\"`\n    Value      RatingValue `json:\"value\"`\n}\n```", "```go\npackage memory\nimport (\n    \"context\"\n    \"movieexample.com/rating/internal/repository\"\n    \"movieexample.com/rating/pkg/model\"\n)\n// Repository defines a rating repository.\ntype Repository struct {\n    data map[model.RecordType]map[model.RecordID][]model.Rating\n}\n// New creates a new memory repository.\nfunc New() *Repository {\n    return &Repository{map[model.RecordType]map[model.RecordID][]model.Rating{}}\n}\n```", "```go\n// Get retrieves all ratings for a given record.\nfunc (r *Repository) Get(ctx context.Context, recordID model.RecordID, recordType model.RecordType) ([]model.Rating, error) {\n    if _, ok := r.data[recordType]; !ok {\n        return nil, repository.ErrNotFound\n    }\n    if ratings, ok := r.data[recordType][recordID]; !ok || len(ratings) == 0 {\n        return nil, repository.ErrNotFound\n    }\n    return r.data[recordType][recordID], nil\n}\n```", "```go\n// Put adds a rating for a given record.\nfunc (r *Repository) Put(ctx context.Context, recordID model.RecordID, recordType model.RecordType, rating *model.Rating) error {\n    if _, ok := r.data[recordType]; !ok {\n        r.data[recordType] = map[model.RecordID][]model.Rating{}\n    }\n    r.data[recordType][recordID] =\nappend(r.data[recordType][recordID], *rating)\n    return nil\n}\n```", "```go\npackage rating\nimport (\n    \"context\"\n    \"errors\"\n    \"movieexample.com/rating/internal/repository\"\n    \"movieexample.com/rating/pkg/model\"\n)\n// ErrNotFound is returned when no ratings are found for a\n// record.\nvar ErrNotFound = errors.New(\"ratings not found for a record\")\ntype ratingRepository interface {\n    Get(ctx context.Context, recordID model.RecordID, recordType model.RecordType) ([]model.Rating, error)\n    Put(ctx context.Context, recordID model.RecordID, recordType model.RecordType, rating *model.Rating) error\n}\n// Controller defines a rating service controller.\ntype Controller struct {\n    repo ratingRepository\n}\n// New creates a rating service controller.\nfunc New(repo ratingRepository) *Controller {\n    return &Controller{repo}\n}\n```", "```go\n// GetAggregatedRating returns the aggregated rating for a\n// record or ErrNotFound if there are no ratings for it.\nfunc (c *Controller) GetAggregatedRating(ctx context.Context, recordID model.RecordID, recordType model.RecordType) (float64, error) {\n    ratings, err := c.repo.Get(ctx, recordID, recordType)\n    if err != nil && err == repository.ErrNotFound {\n        return 0, ErrNotFound\n    } else if err != nil {\n        return 0, err\n    }\n    sum := float64(0)\n    for _, r := range ratings {\n        sum += float64(r.Value)\n    }\n    return sum / float64(len(ratings)), nil\n}\n// PutRating writes a rating for a given record.\nfunc (c *Controller) PutRating(ctx context.Context, recordID model.RecordID, recordType model.RecordType, rating *model.Rating) error {\n    return c.repo.Put(ctx, recordID, recordType, rating)\n}\n```", "```go\npackage http\nimport (\n    \"encoding/json\"\n    \"errors\"\n    \"log\"\n    \"net/http\"\n    \"strconv\"\n    \"movieexample.com/rating/internal/controller\"\n    \"movieexample.com/rating/pkg/model\"\n)\n// Handler defines a rating service controller.\ntype Handler struct {\n    ctrl *rating.Controller\n}\n// New creates a new rating service HTTP handler.\nfunc New(ctrl *rating.Controller) *Handler {\n    return &Handler{ctrl}\n}\n```", "```go\n// Handle handles PUT and GET /rating requests.\nfunc (h *Handler) Handle(w http.ResponseWriter, req *http.Request) {\n    recordID := model.RecordID(req.FormValue(\"id\"))\n    if recordID == \"\" {\n        w.WriteHeader(http.StatusBadRequest)\n        return\n    }\n    recordType := model.RecordType(req.FormValue(\"type\"))\n    if recordType == \"\" {\n        w.WriteHeader(http.StatusBadRequest)\n        return\n    }\n    switch req.Method {\n    case http.MethodGet:\n        v, err := h.ctrl.GetAggregatedRating(req.Context(), recordID, recordType)\n        if err != nil && errors.Is(err, rating.ErrNotFound) {\n            w.WriteHeader(http.StatusNotFound)\n            return\n        }\n        if err := json.NewEncoder(w).Encode(v); err != nil {\n            log.Printf(\"Response encode error: %v\\n\", err)\n        }\n    case http.MethodPut:\n        userID := model.UserID(req.FormValue(\"userId\"))\n        v, err := strconv.ParseFloat(req.FormValue(\"value\"), 64)\n        if err != nil {\n            w.WriteHeader(http.StatusBadRequest)\n            return\n        }\n        if err := h.ctrl.PutRating(req.Context(), recordID, recordType, &model.Rating{UserID: userID, Value: model.RatingValue(v)}); err != nil {\n            log.Printf(\"Repository put error: %v\\n\", err)\n            w.WriteHeader(http.StatusInternalServerError)\n        }\n    default:\n        w.WriteHeader(http.StatusBadRequest)\n    }\n}\n```", "```go\npackage main\nimport (\n    \"log\"\n    \"net/http\"\n    \"movieexample.com/rating/internal/controller/rating\"\n    httphandler \"movieexample.com/rating/internal/handler/http\"\n    \"movieexample.com/rating/internal/repository/memory\"\n)\nfunc main() {\n    log.Println(\"Starting the rating service\")\n    repo := memory.New()\n    ctrl := rating.New(repo)\n    h := httphandler.New(ctrl)\n    http.Handle(\"/rating\", http.HandlerFunc(h.Handle))\n    if err := http.ListenAndServe(\":8082\", nil); err != nil {\n        panic(err)\n    }\n}\n```", "```go\npackage model\nimport \"movieexample.com/metadata/pkg/model\"\n// MovieDetails includes movie metadata its aggregated\n// rating.\ntype MovieDetails struct {\n    Rating   *float64    `json:\"rating,omitEmpty\"`\n    Metadata model.Metadata `json:\"metadata`\n}\n```", "```go\npackage gateway\nimport \"errors\"\n// ErrNotFound is returned when the data is not found.\nvar ErrNotFound = errors.New(\"not found\")\n```", "```go\npackage http\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"net/http\"\n    \"movieexample.com/metadata/pkg/model\"\n    \"movieexample.com/movie/internal/gateway\"\n)\n// Gateway defines a movie metadata HTTP gateway.\ntype Gateway struct {\n    addr string\n}\n// New creates a new HTTP gateway for a movie metadata\n// service.\nfunc New(addr string) *Gateway {\n    return &Gateway{addr}\n}\n```", "```go\n// Get gets movie metadata by a movie id.\nfunc (g *Gateway) Get(ctx context.Context, id string) (*model.Metadata, error) {\n    req, err := http.NewRequest(http.MethodGet, g.addr+\"/metadata\", nil)\n    if err != nil {\n        return nil, err\n    }\n    req = req.WithContext(ctx)\n    values := req.URL.Query()\n    values.Add(\"id\", id)\n    req.URL.RawQuery = values.Encode()\n    resp, err := http.DefaultClient.Do(req)\n    if err != nil {\n        return nil, err\n    }\n    defer resp.Body.Close()\n    if resp.StatusCode == http.StatusNotFound {\n        return nil, gateway.ErrNotFound\n    } else if resp.StatusCode/100 != 2 {\n        return nil, fmt.Errorf(\"non-2xx response: %v\", resp)\n    }\n    var v *model.Metadata\n    if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {\n        return nil, err\n    }\n    return v, nil\n}\n```", "```go\npackage http\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"net/http\"\n    \"movieexample.com/movie/internal/gateway\"\n    \"movieexample.com/rating/pkg/model\"\n)\n// Gateway defines an HTTP gateway for a rating service.\ntype Gateway struct {\n    addr string\n}\n// New creates a new HTTP gateway for a rating service.\nfunc New(addr string) *Gateway {\n    return &Gateway{addr}\n}\n```", "```go\n// GetAggregatedRating returns the aggregated rating for a\n// record or ErrNotFound if there are no ratings for it.\nfunc (g *Gateway) GetAggregatedRating(ctx context.Context, recordID model.RecordID, recordType model.RecordType) (float64, error) {\n    req, err := http.NewRequest(http.MethodGet, g.addr+\"/rating\", nil)\n    if err != nil {\n        return 0, err\n    }\n    req = req.WithContext(ctx)\n    values := req.URL.Query()\n    values.Add(\"id\", string(recordID))\n    values.Add(\"type\", fmt.Sprintf(\"%v\", recordType))\n    req.URL.RawQuery = values.Encode()\n    resp, err := http.DefaultClient.Do(req)\n    if err != nil {\n        return 0, err\n    }\n    defer resp.Body.Close()\n    if resp.StatusCode == http.StatusNotFound {\n        return 0, gateway.ErrNotFound\n    } else if resp.StatusCode/100 != 2 {\n        return 0, fmt.Errorf(\"non-2xx response: %v\", resp)\n    }\n    var v float64\n    if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {\n        return 0, err\n    }\n    return v, nil\n}\n```", "```go\n// PutRating writes a rating.\nfunc (g *Gateway) PutRating(ctx context.Context, recordID model.RecordID, recordType model.RecordType, rating *model.Rating) error {\n    req, err := http.NewRequest(http.MethodPut, g.addr+\"/rating\", nil)\n    if err != nil {\n        return err\n    }\n    req = req.WithContext(ctx)\n    values := req.URL.Query()\n    values.Add(\"id\", string(recordID))\n    values.Add(\"type\", fmt.Sprintf(\"%v\", recordType))\n    values.Add(\"userId\", string(rating.UserID))\n    values.Add(\"value\", fmt.Sprintf(\"%v\", rating.Value))\n    req.URL.RawQuery = values.Encode()\n    resp, err := http.DefaultClient.Do(req)\n    if err != nil {\n        return err\n    }\n    defer resp.Body.Close()\n    if resp.StatusCode/100 != 2 {\n        return fmt.Errorf(\"non-2xx response: %v\", resp)\n    }\n    return nil\n}\n```", "```go\npackage movie\nimport (\n    \"context\"\n    \"errors\"\n    metadatamodel \"movieexample.com/metadata/pkg/model\"\n    \"movieexample.com/movie/internal/gateway\"\n    \"movieexample.com/movie/pkg/model\"\n    ratingmodel \"movieexample.com/rating/pkg/model\"\n)\n// ErrNotFound is returned when the movie metadata is not\n// found.\nvar ErrNotFound = errors.New(\"movie metadata not found\")\n```", "```go\ntype ratingGateway interface {\n    GetAggregatedRating(ctx context.Context, recordID ratingmodel.RecordID, recordType ratingmodel.RecordType) (float64, error)\n    PutRating(ctx context.Context, recordID ratingmodel.RecordID, recordType ratingmodel.RecordType, rating *ratingmodel.Rating) error\n}\ntype metadataGateway interface {\n    Get(ctx context.Context, id string) (*metadatamodel.Metadata, error)\n}\n```", "```go\n// Controller defines a movie service controller.\ntype Controller struct {\n    ratingGateway   ratingGateway\n    metadataGateway metadataGateway\n}\n// New creates a new movie service controller.\nfunc New(ratingGateway ratingGateway, metadataGateway metadataGateway) *Controller {\n    return &Controller{ratingGateway, metadataGateway}\n}\n```", "```go\n// Get returns the movie details including the aggregated\n// rating and movie metadata.\n// Get returns the movie details including the aggregated rating and movie metadata.\nfunc (c *Controller) Get(ctx context.Context, id string) (*model.MovieDetails, error) {\n    metadata, err := c.metadataGateway.Get(ctx, id)\n    if err != nil && errors.Is(err, gateway.ErrNotFound) {\n        return nil, ErrNotFound\n    } else if err != nil {\n        return nil, err\n    }\n    details := &model.MovieDetails{Metadata: *metadata}\n    rating, err := c.ratingGateway.GetAggregatedRating(ctx, ratingmodel.RecordID(id), ratingmodel.RecordTypeMovie)\n    if err != nil && !errors.Is(err, gateway.ErrNotFound) {\n        // Just proceed in this case, it's ok not to have ratings yet.\n    } else if err != nil {\n        return nil, err\n    } else {\n        details.Rating = &rating\n    }\n    return details, nil\n}\n```", "```go\npackage http\nimport (\n    \"encoding/json\"\n    \"errors\"\n    \"log\"\n    \"net/http\"\n    \"movieexample.com/movie/internal/controller/movie\"\n)\n// Handler defines a movie handler.\ntype Handler struct {\n    ctrl *movie.Controller\n}\n// New creates a new movie HTTP handler.\nfunc New(ctrl *movie.Controller) *Handler {\n     return &Handler{ctrl}\n}\n// GetMovieDetails handles GET /movie requests.\nfunc (h *Handler) GetMovieDetails(w http.ResponseWriter, req *http.Request) {\n    id := req.FormValue(\"id\")\n    details, err := h.ctrl.Get(req.Context(), id)\n    if err != nil && errors.Is(err, movie.ErrNotFound) {\n        w.WriteHeader(http.StatusNotFound)\n        return\n    } else if err != nil {\n        log.Printf(\"Repository get error: %v\\n\", err)\n        w.WriteHeader(http.StatusInternalServerError)\n        return\n    }\n    if err := json.NewEncoder(w).Encode(details); err != nil {\n        log.Printf(\"Response encode error: %v\\n\", err)\n    }\n}\n```", "```go\npackage main\nimport (\n    \"log\"\n    \"net/http\"\n    \"movieexample.com/movie/internal/controller/movie\"\n    metadatagateway \"movieexample.com/movie/internal/gateway/metadata/http\"\n    ratinggateway \"movieexample.com/movie/internal/gateway/rating/http\"\n    httphandler \"movieexample.com/movie/internal/handler/http\"\n)\nfunc main() {\n    log.Println(\"Starting the movie service\")\n    metadataGateway := metadatagateway.New(\"localhost:8081\")\n    ratingGateway := ratinggateway.New(\"localhost:8082\")\n    ctrl := movie.New(ratingGateway, metadataGateway)\n    h := httphandler.New(ctrl)\n    http.Handle(\"/movie\", http.HandlerFunc(h.GetMovieDetails))\n    if err := http.ListenAndServe(\":8083\", nil); err != nil {\n        panic(err)\n    }\n}\n```", "```go\ngo run *.go\n```", "```go\ncurl localhost:8081?id=1\n```", "```go\ncurl localhost:8082?id=1&type=2\n```", "```go\ncurl localhost:8083?id=1\n```"]