["```go\nfunc Service(string, string) ([]*consul.ServiceEntry, *consul.QueryMeta, error)\n```", "```go\n// registry defines a service registry.\ntype Registry interface {\n    // Register creates a service instance record in the registry.\n    Register(ctx context.Context, instanceID string, serviceName string, hostPort string) error\n    // Deregister removes a service instance record from the registry.\n    Deregister(ctx context.Context, instanceID string, serviceName string) error\n    // ServiceAddresses returns the list of addresses of active instances of the given service.\n    ServiceAddresses(ctx context.Context, serviceID string) ([]string, error)\n    // ReportHealthyState is a push mechanism for reporting healthy state to the registry.\n    ReportHealthyState(instanceID string, serviceName string) error\n}\n```", "```go\npackage discovery\nimport (\n    \"context\"\n    \"errors\"\n    \"fmt\"\n    \"math/rand\"\n    \"time\"\n)\n// Registry defines a service registry.\ntype Registry interface {\n    // Register creates a service instance record in the\n    // registry.\n    Register(ctx context.Context, instanceID string, serviceName string, hostPort string) error\n    // Deregister removes a service insttance record from\n    // the registry.\n    Deregister(ctx context.Context, instanceID string, serviceName string) error\n    // ServiceAddresses returns the list of addresses of\n    // active instances of the given service.\n    ServiceAddresses(ctx context.Context, serviceID string) ([]string, error)\n    // ReportHealthyState is a push mechanism for reporting\n    // healthy state to the registry.\n    ReportHealthyState(instanceID string, serviceName string) error\n}\n// ErrNotFound is returned when no service addresses are\n// found.\nvar ErrNotFound = errors.New(\"no service addresses found\")\n// GenerateInstanceID generates a pseudo-random service\n// instance identifier, using a service name\n// suffixed by dash and a random number.\nfunc GenerateInstanceID(serviceName string) string {\n    return fmt.Sprintf(\"%s-%d\", serviceName, rand.New(rand.NewSource(time.Now().UnixNano())).Int())\n}\n```", "```go\n    package memory\n    ```", "```go\n    import (\n    ```", "```go\n        \"context\"\n    ```", "```go\n        \"errors\"\n    ```", "```go\n        \"net\"\n    ```", "```go\n        \"sync\"\n    ```", "```go\n        \"time\"\n    ```", "```go\n        \"movieexample.com/pkg/discovery\"\n    ```", "```go\n    )\n    ```", "```go\n    type serviceName string\n    ```", "```go\n    type instanceID string\n    ```", "```go\n    // Registry defines an in-memory service registry.\n    ```", "```go\n    type Registry struct {\n    ```", "```go\n        sync.RWMutex\n    ```", "```go\n        serviceAddrs map[serviceName]map[instanceID]*serviceInstance\n    ```", "```go\n    }\n    ```", "```go\n    type serviceInstance struct {\n    ```", "```go\n        hostPort   string\n    ```", "```go\n        lastActive time.Time\n    ```", "```go\n    }\n    ```", "```go\n    // NewRegistry creates a new in-memory service\n    ```", "```go\n    // registry instance.\n    ```", "```go\n    func NewRegistry() *Registry {\n    ```", "```go\n        return &Registry{serviceAddrs: map[serviceName]map[instanceID]*serviceInstance{}}\n    ```", "```go\n    }\n    ```", "```go\n    // Register creates a service record in the registry.\n    ```", "```go\n    func (r *Registry) Register(ctx context.Context, instanceID string, serviceName string, hostPort string) error {\n    ```", "```go\n        r.Lock()\n    ```", "```go\n        defer r.Unlock()\n    ```", "```go\n        if _, ok := r.serviceAddrs[serviceName]; !ok {\n    ```", "```go\n            r.serviceAddrs[serviceName] = map[string]*serviceInstance{}\n    ```", "```go\n        }\n    ```", "```go\n        r.serviceAddrs[serviceName][instanceID] = &serviceInstance{hostPort: hostPort, lastActive: time.Now()}\n    ```", "```go\n        return nil\n    ```", "```go\n    }\n    ```", "```go\n    // Deregister removes a service record from the\n    ```", "```go\n    // registry.\n    ```", "```go\n    func (r *Registry) Deregister(ctx context.Context, instanceID string, serviceName string) error {\n    ```", "```go\n        r.Lock()\n    ```", "```go\n        defer r.Unlock()\n    ```", "```go\n        if _, ok := r.serviceAddrs[serviceName]; !ok {\n    ```", "```go\n            return nil\n    ```", "```go\n        }\n    ```", "```go\n        delete(r.serviceAddrs[serviceName], instanceID)\n    ```", "```go\n        return nil\n    ```", "```go\n    }\n    ```", "```go\n    // ReportHealthyState is a push mechanism for\n    ```", "```go\n    // reporting healthy state to the registry.\n    ```", "```go\n    func (r *Registry) ReportHealthyState(instanceID string, serviceName string) error {\n    ```", "```go\n        r.Lock()\n    ```", "```go\n        defer r.Unlock()\n    ```", "```go\n        if _, ok := r.serviceAddrs[serviceName]; !ok {\n    ```", "```go\n            return errors.New(\"service is not registered yet\")\n    ```", "```go\n        }\n    ```", "```go\n        if _, ok := r.serviceAddrs[serviceName][instanceID]; !ok {\n    ```", "```go\n            return errors.New(\"service instance is not registered yet\")\n    ```", "```go\n        }\n    ```", "```go\n        r.serviceAddrs[serviceName][instanceID].lastActive = time.Now()\n    ```", "```go\n        return nil\n    ```", "```go\n    }\n    ```", "```go\n    // ServiceAddresses returns the list of addresses of\n    ```", "```go\n    // active instances of the given service.\n    ```", "```go\n    func (r *Registry) ServiceAddresses(ctx context.Context, serviceName string) ([]string, error) {\n    ```", "```go\n        r.RLock()\n    ```", "```go\n        defer r.RUnlock()\n    ```", "```go\n        if len(r.serviceAddrs[serviceName]) == 0 {\n    ```", "```go\n            return nil, discovery.ErrNotFound\n    ```", "```go\n        }\n    ```", "```go\n        var res []string\n    ```", "```go\n        for _, i := range r.serviceAddrs[serviceName] {\n    ```", "```go\n            if i.lastActive.Before(time.Now().Add(-5 * time.Second)) {\n    ```", "```go\n                continue\n    ```", "```go\n            }\n    ```", "```go\n            res = append(res, i.hostPort)\n    ```", "```go\n        }\n    ```", "```go\n        return res, nil\n    ```", "```go\n    }\n    ```", "```go\n     package consul\n    ```", "```go\n    import (\n    ```", "```go\n        \"context\"\n    ```", "```go\n        \"errors\"\n    ```", "```go\n        \"fmt\"\n    ```", "```go\n        \"strconv\"\n    ```", "```go\n        \"strings\"\n    ```", "```go\n        consul \"github.com/hashicorp/consul/api\"\n    ```", "```go\n        \"movieexample.com/pkg/discovery\"\n    ```", "```go\n    )\n    ```", "```go\n    // Registry defines a Consul-based service regisry.\n    ```", "```go\n    type Registry struct {\n    ```", "```go\n        client *consul.Client\n    ```", "```go\n    }\n    ```", "```go\n    // NewRegistry creates a new Consul-based service\n    ```", "```go\n    // registry instance.\n    ```", "```go\n    func NewRegistry(addr string) (*Registry, error) {\n    ```", "```go\n        config := consul.DefaultConfig()\n    ```", "```go\n        config.Address = addr\n    ```", "```go\n        client, err := consul.NewClient(config)\n    ```", "```go\n        if err != nil {\n    ```", "```go\n            return nil, err\n    ```", "```go\n        }\n    ```", "```go\n        return &Registry{client: client}, nil\n    ```", "```go\n    }\n    ```", "```go\n     // Register creates a service record in the registry.\n    ```", "```go\n    func (r *Registry) Register(ctx context.Context, instanceID string, serviceName string, hostPort string) error {\n    ```", "```go\n        parts := strings.Split(hostPort, \":\")\n    ```", "```go\n        if len(parts) != 2 {\n    ```", "```go\n            return errors.New(\"hostPort must be in a form of <host>:<port>, example: localhost:8081\")\n    ```", "```go\n        }\n    ```", "```go\n        port, err := strconv.Atoi(parts[1])\n    ```", "```go\n        if err != nil {\n    ```", "```go\n            return err\n    ```", "```go\n        }\n    ```", "```go\n        return r.client.Agent().ServiceRegister(&consul.AgentServiceRegistration{\n    ```", "```go\n            Address: parts[0],\n    ```", "```go\n            ID:      instanceID,\n    ```", "```go\n            Name:    serviceName,\n    ```", "```go\n            Port:    port,\n    ```", "```go\n            Check:   &consul.AgentServiceCheck{CheckID: instanceID, TTL: \"5s\"},\n    ```", "```go\n        })\n    ```", "```go\n    }\n    ```", "```go\n    // Deregister removes a service record from the\n    ```", "```go\n    // registry.\n    ```", "```go\n    func (r *Registry) Deregister(ctx context.Context, instanceID string, _ string) error {\n    ```", "```go\n        return r.client.Agent().ServiceDeregister(instanceID)\n    ```", "```go\n    }\n    ```", "```go\n    // ServiceAddresses returns the list of addresses of\n    ```", "```go\n    // active instances of the given service.\n    ```", "```go\n    func (r *Registry) ServiceAddresses(ctx context.Context, serviceName string) ([]string, error) {\n    ```", "```go\n        entries, _, err := r.client.Health().Service(serviceName, \"\", true, nil)\n    ```", "```go\n        if err != nil {\n    ```", "```go\n            return nil, err\n    ```", "```go\n        } else if len(entries) == 0 {\n    ```", "```go\n            return nil, discovery.ErrNotFound\n    ```", "```go\n        }\n    ```", "```go\n        var res []string\n    ```", "```go\n        for _, e := range entries {\n    ```", "```go\n            res = append(res, res = append(res, fmt.Sprintf(\"%s:%d\", e.Service.Address, e.Service.Port)))\n    ```", "```go\n        }\n    ```", "```go\n        return res, nil\n    ```", "```go\n    }\n    ```", "```go\n    // ReportHealthyState is a push mechanism for\n    ```", "```go\n    // reporting healthy state to the registry.\n    ```", "```go\n    func (r *Registry) ReportHealthyState(instanceID string, _ string) error {\n    ```", "```go\n        return r.client.Agent().PassTTL(instanceID, \"\")\n    ```", "```go\n    }\n    ```", "```go\n    type Gateway struct {\n    ```", "```go\n        registry discovery.Registry\n    ```", "```go\n    }\n    ```", "```go\n    func New(registry discovery.Registry) *Gateway {\n    ```", "```go\n        return &Gateway{registry}\n    ```", "```go\n    }\n    ```", "```go\n    func (g *Gateway) Get(ctx context.Context, id string) (*model.Metadata, error) {\n    ```", "```go\n        addrs, err := g.registry.ServiceAddresses(ctx, \"metadata\")\n    ```", "```go\n        if err != nil {\n    ```", "```go\n            return nil, err\n    ```", "```go\n        }\n    ```", "```go\n        url := \"http://\" + addrs[rand.Intn(len(addrs))] + \"/metadata\"\n    ```", "```go\n        log.Printf(\"Calling metadata service. Request: GET \" + url)\n    ```", "```go\n        req, err := http.NewRequest(http.MethodGet, url, nil)\n    ```", "```go\n    const serviceName = \"metadata\"\n    ```", "```go\n    func main() {\n    ```", "```go\n        var port int\n    ```", "```go\n        flag.IntVar(&port, \"port\", 8081, \"API handler port\")\n    ```", "```go\n        flag.Parse()\n    ```", "```go\n        log.Printf(\"Starting the metadata service on port %d\", port)\n    ```", "```go\n        registry, err := consul.NewRegistry(\"localhost:8500\")\n    ```", "```go\n        if err != nil {\n    ```", "```go\n            panic(err)\n    ```", "```go\n        }\n    ```", "```go\n        ctx := context.Background()\n    ```", "```go\n        instanceID := discovery.GenerateInstanceID(serviceName)\n    ```", "```go\n        if err := registry.Register(ctx, instanceID, serviceName, fmt.Sprintf(\"localhost:%d\", port)); err != nil {\n    ```", "```go\n            panic(err)\n    ```", "```go\n        }\n    ```", "```go\n        go func() {\n    ```", "```go\n            for {\n    ```", "```go\n                if err := registry.ReportHealthyState(instanceID, serviceName); err != nil {\n    ```", "```go\n                    log.Println(\"Failed to report healthy state: \" + err.Error())\n    ```", "```go\n                }\n    ```", "```go\n                time.Sleep(1 * time.Second)\n    ```", "```go\n            }\n    ```", "```go\n        }()\n    ```", "```go\n        defer registry.Deregister(ctx, instanceID, serviceName)\n    ```", "```go\n        repo := memory.New()\n    ```", "```go\n        svc := metadata.New(repo)\n    ```", "```go\n        h := httphandler.New(svc)\n    ```", "```go\n        http.Handle(\"/metadata\", http.HandlerFunc(h.GetMetadataByID))\n    ```", "```go\n        if err := http.ListenAndServe(fmt.Sprintf(\":%d\", port), nil); err != nil {\n    ```", "```go\n            panic(err)\n    ```", "```go\n        }\n    ```", "```go\n    }\n    ```", "```go\n    func main() {\n    ```", "```go\n        var port int\n    ```", "```go\n        flag.IntVar(&port, \"port\", 8082, \"API handler port\")\n    ```", "```go\n        flag.Parse()\n    ```", "```go\n        log.Printf(\"Starting the rating service on port %d\", port)\n    ```", "```go\n        registry, err := consul.NewRegistry(\"localhost:8500\")\n    ```", "```go\n        if err != nil {\n    ```", "```go\n            panic(err)\n    ```", "```go\n        }\n    ```", "```go\n        ctx := context.Background()\n    ```", "```go\n        instanceID := discovery.GenerateInstanceID(serviceName)\n    ```", "```go\n        if err := registry.Register(ctx, instanceID, serviceName, fmt.Sprintf(\"localhost:%d\", port)); err != nil {\n    ```", "```go\n            panic(err)\n    ```", "```go\n        }\n    ```", "```go\n        go func() {\n    ```", "```go\n            for {\n    ```", "```go\n                if err := registry.ReportHealthyState(instanceID, serviceName); err != nil {\n    ```", "```go\n                    log.Println(\"Failed to report healthy state: \" + err.Error())\n    ```", "```go\n                }\n    ```", "```go\n                time.Sleep(1 * time.Second)\n    ```", "```go\n            }\n    ```", "```go\n        }()\n    ```", "```go\n        defer registry.Deregister(ctx, instanceID, serviceName)\n    ```", "```go\n        repo := memory.New()\n    ```", "```go\n        svc := controller.New(repo)\n    ```", "```go\n        h := httphandler.New(svc)\n    ```", "```go\n        http.Handle(\"/rating\", http.HandlerFunc(h.Handle))\n    ```", "```go\n        if err := http.ListenAndServe(fmt.Sprintf(\":%d\", port), nil); err != nil {\n    ```", "```go\n            panic(err)\n    ```", "```go\n        }\n    ```", "```go\n    }\n    ```", "```go\n     func main() {\n    ```", "```go\n        var port int\n    ```", "```go\n        flag.IntVar(&port, \"port\", 8083, \"API handler port\")\n    ```", "```go\n        flag.Parse()\n    ```", "```go\n        log.Printf(\"Starting the movie service on port %d\", port)\n    ```", "```go\n        registry, err := consul.NewRegistry(\"localhost:8500\")\n    ```", "```go\n        if err != nil {\n    ```", "```go\n            panic(err)\n    ```", "```go\n        }\n    ```", "```go\n        ctx := context.Background()\n    ```", "```go\n        instanceID := discovery.GenerateInstanceID(serviceName)\n    ```", "```go\n        if err := registry.Register(ctx, instanceID, serviceName, fmt.Sprintf(\"localhost:%d\", port)); err != nil {\n    ```", "```go\n            panic(err)\n    ```", "```go\n        }\n    ```", "```go\n        go func() {\n    ```", "```go\n            for {\n    ```", "```go\n                if err := registry.ReportHealthyState(instanceID, serviceName); err != nil {\n    ```", "```go\n                    log.Println(\"Failed to report healthy state: \" + err.Error())\n    ```", "```go\n                }\n    ```", "```go\n                time.Sleep(1 * time.Second)\n    ```", "```go\n            }\n    ```", "```go\n        }()\n    ```", "```go\n        defer registry.Deregister(ctx, instanceID, serviceName)\n    ```", "```go\n        metadataGateway := metadatagateway.New(registry)\n    ```", "```go\n        ratingGateway := ratinggateway.New(registry)\n    ```", "```go\n        svc := movie.New(ratingGateway, metadataGateway)\n    ```", "```go\n        h := httphandler.New(svc)\n    ```", "```go\n        http.Handle(\"/movie\", http.HandlerFunc(h.GetMovieDetails))\n    ```", "```go\n        if err := http.ListenAndServe(fmt.Sprintf(\":%d\", port), nil); err != nil {\n    ```", "```go\n            panic(err)\n    ```", "```go\n        }\n    ```", "```go\n    }\n    ```", "```go\ndocker run -d -p 8500:8500 -p 8600:8600/udp --name=dev-consul consul agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0\n```", "```go\ngo run *.go\n```", "```go\ngo run *.go --port <PORT>\n```", "```go\ncurl -v localhost:8083/movie?id=1\n```", "```go\n    2022/06/08 13:37:42 Calling metadata service. Request: GET http://localhost:8081/metadata\n    ```"]