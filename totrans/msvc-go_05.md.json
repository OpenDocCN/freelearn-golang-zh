["```go\ngo install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest \nexport PATH=\"$PATH:$(go env GOPATH)/bin\" \n```", "```go\nif err := json.NewEncoder(w).Encode(details); err != nil {\n    log.Printf(\"Response encode error: %v\\n\", err)\n}\n```", "```go\nservice MetadataService {\n  Metadata get(1: string id)\n}\n```", "```go\nservice MetadataService {\n    rpc GetMetadata(GetMetadataRequest) returns (GetMetadataResponse);\n    rpc PutMetadata(PutMetadataRequest) returns (PutMetadataResponse);\n}\n\nmessage GetMetadataRequest {\n    string movie_id = 1;\n}\n\nmessage GetMetadataResponse {\n    Metadata metadata = 1;\n}\n```", "```go\nservice RatingService {\n    rpc GetAggregatedRating(GetAggregatedRatingRequest) returns (GetAggregatedRatingResponse);\n    rpc PutRating(PutRatingRequest) returns (PutRatingResponse);\n}\n\nmessage GetAggregatedRatingRequest {\n    string record_id = 1;\n    int32 record_type = 2;\n}\n\nmessage GetAggregatedRatingResponse {\n    double rating_value = 1;\n}\n\nmessage PutRatingRequest {\n    string user_id = 1;\n    string record_id = 2;\n    int32 record_type = 3;\n    int32 rating_value = 4;\n}\n\nmessage PutRatingResponse {\n}\n```", "```go\nservice MovieService {\n    rpc GetMovieDetails(GetMovieDetailsRequest) returns (GetMovieDetailsResponse);\n}\n\nmessage GetMovieDetailsRequest {\n    string movie_id = 1;\n}\n\nmessage GetMovieDetailsResponse {\n    MovieDetails movie_details = 1;\n}\n```", "```go\nprotoc -I=api --go_out=. --go-grpc_out=. movie.proto  \n```", "```go\ntype MetadataServiceClient interface {\n    GetMetadata(ctx context.Context, in *GetMetadataRequest, opts ...grpc.CallOption) (*GetMetadataResponse, error)\n}\n\ntype metadataServiceClient struct {\n    cc grpc.ClientConnInterface\n}\n\nfunc NewMetadataServiceClient(cc grpc.ClientConnInterface) MetadataServiceClient {\n    return &metadataServiceClient{cc}\n}\nfunc (c *metadataServiceClient) GetMetadata(ctx context.Context, in *GetMetadataRequest, opts ...grpc.CallOption) (*GetMetadataResponse, error) {\n    out := new(GetMetadataResponse)\n    err := c.cc.Invoke(ctx, \"/MetadataService/GetMetadata\", in, out, opts...)\n    if err != nil {\n        return nil, err\n    }\n    return out, nil\n}\n```", "```go\ntype MetadataServiceServer interface {\n    GetMetadata(context.Context, *GetMetadataRequest) (*GetMetadataResponse, error)\n    mustEmbedUnimplementedMetadataServiceServer()\n}\nfunc RegisterMetadataServiceServer(s grpc.ServiceRegistrar, srv MetadataServiceServer) {\ns.RegisterService(&MetadataService_ServiceDesc, srv)\n}\n```", "```go\npackage model\n\nimport (\n    \"movieexample.com/gen\"\n)\n\n// MetadataToProto converts a Metadata struct into a \n// generated proto counterpart.\nfunc MetadataToProto(m *Metadata) *gen.Metadata {\n    return &gen.Metadata{\n        Id:          m.ID,\n        Title:       m.Title,\n        Description: m.Description,\n        Director:    m.Director,\n    }\n}\n\n// MetadataFromProto converts a generated proto counterpart \n// into a Metadata struct.\nfunc MetadataFromProto(m *gen.Metadata) *Metadata {\n    return &Metadata{\n        ID:          m.Id,\n        Title:       m.Title,\n        Description: m.Description,\n        Director:    m.Director,\n    }\n}\n```", "```go\npackage grpc\n\nimport (\n    \"context\"\n    \"errors\"\n\n    \"google.golang.org/grpc/codes\"\n    \"google.golang.org/grpc/status\"\n    \"movieexample.com/gen\"\n    \"movieexample.com/metadata/internal/controller\"\n    \"movieexample.com/metadata/internal/repository\"\n    \"movieexample.com/metadata/pkg/model\"\n)\n\n// Handler defines a movie metadata gRPC handler.\ntype Handler struct {\n    gen.UnimplementedMetadataServiceServer\n    svc *controller.MetadataService\n}\n\n// New creates a new movie metadata gRPC handler.\nfunc New(ctrl *metadata.Controller) *Handler {\n    return &Handler{ctrl: ctrl}\n}\n```", "```go\n// GetMetadataByID returns movie metadata by id.\nfunc (h *Handler) GetMetadata(ctx context.Context, req *gen.GetMetadataRequest) (*gen.GetMetadataResponse, error) {\n    if req == nil || req.MovieId == \"\" {\n        return nil, status.Errorf(codes.InvalidArgument, \"nil req or empty id\")\n    }\n    m, err := h.svc.Get(ctx, req.MovieId)\n    if err != nil && errors.Is(err, controller.ErrNotFound) {\n        return nil, status.Errorf(codes.NotFound, err.Error())\n    } else if err != nil {\n        return nil, status.Errorf(codes.Internal, err.Error())\n    }\n    return &gen.GetMetadataResponse{Metadata: model.MetadataToProto(m)}, nil\n}\n```", "```go\npackage main\n\nimport (\n    \"context\"\n    \"flag\"\n    \"fmt\"\n    \"log\"\n    \"net\"\n    \"time\"\n\n    \"google.golang.org/grpc\"\n    \"movieexample.com/gen\"\n    \"movieexample.com/metadata/internal/controller\"\n    grpchandler \"movieexample.com/metadata/internal/handler/grpc\"\n    \"movieexample.com/metadata/internal/repository/memory\"\n    \"movieexample.com/metadata/pkg/model\"\n)\n\nfunc main() {\n    log.Println(\"Starting the movie metadata service\")\n    repo := memory.New()\n    svc := controller.New(repo)\n    h := grpchandler.New(svc)\n    lis, err := net.Listen(\"tcp\", \"localhost:8081\")\n    if err != nil {\n        log.Fatalf(\"failed to listen: %v\", err)\n    }\n    srv := grpc.NewServer()\n    gen.RegisterMetadataServiceServer(srv, h)\n    srv.Serve(lis)\n}\n```", "```go\npackage grpc\n\nimport (\n    \"context\"\n    \"errors\"\n\n    \"google.golang.org/grpc/codes\"\n    \"google.golang.org/grpc/status\"\n    \"movieexample.com/gen\"\n    \"movieexample.com/rating/internal/controller\"\n    \"movieexample.com/rating/pkg/model\"\n)\n\n// Handler defines a gRPC rating API handler.\ntype Handler struct {\n    gen.UnimplementedRatingServiceServer\n    svc *controller.RatingService\n}\n\n// New creates a new movie metadata gRPC handler.\nfunc New(svc *controller.RatingService) *Handler {\n    return &Handler{ctrl: ctrl}\n}\n```", "```go\n// GetAggregatedRating returns the aggregated rating for a \n// record.\nfunc (h *Handler) GetAggregatedRating(ctx context.Context, req *gen.GetAggregatedRatingRequest) (*gen.GetAggregatedRatingResponse, error) {\n    if req == nil || req.RecordId == \"\" || req.RecordType == \"\" {\n        return nil, status.Errorf(codes.InvalidArgument, \"nil req or empty id\")\n    }\n    v, err := h.svc.GetAggregatedRating(ctx, model.RecordID(req.RecordId), model.RecordType(req.RecordType))\n    if err != nil && errors.Is(err, controller.ErrNotFound) {\n        return nil, status.Errorf(codes.NotFound, err.Error())\n    } else if err != nil {\n        return nil, status.Errorf(codes.Internal, err.Error())\n    }\n    return &gen.GetAggregatedRatingResponse{RatingValue: v}, nil\n}\n```", "```go\n// PutRating writes a rating for a given record.\nfunc (h *Handler) PutRating(ctx context.Context, req *gen.PutRatingRequest) (*gen.PutRatingResponse, error) {\n    if req == nil || req.RecordId == \"\" || req.UserId == \"\" {\n        return nil, status.Errorf(codes.InvalidArgument, \"nil req or empty user id or record id\")\n    }\n    if err := h.svc.PutRating(ctx, model.RecordID(req.RecordId), model.RecordType(req.RecordType), &model.Rating{UserID: model.UserID(req.UserId), Value: model.RatingValue(req.RatingValue)}); err != nil {\n        return nil, err\n    }\n    return &gen.PutRatingResponse{}, nil\n}\n```", "```go\npackage main\n\nimport (\n    \"log\"\n    \"net\"\n\n    \"google.golang.org/grpc\"\n    \"movieexample.com/gen\"\n    \"movieexample.com/rating/internal/controller\"\n    grpchandler \"movieexample.com/rating/internal/handler/grpc\"\n    \"movieexample.com/rating/internal/repository/memory\"\n)\n\nfunc main() {\n    log.Println(\"Starting the rating service\")\n    repo := memory.New()\n    svc := controller.New(repo)\n    h := grpchandler.New(svc)\n    lis, err := net.Listen(\"tcp\", \"localhost:8082\")\n    if err != nil {\n        log.Fatalf(\"failed to listen: %v\", err)\n    }\n    srv := grpc.NewServer()\n    gen.RegisterRatingServiceServer(srv, h)\n    srv.Serve(lis)\n}\n```", "```go\npackage grpcutil\nimport (\n    \"context\"\n    \"math/rand\"\n    \"pkg/discovery\"\n    \"google.golang.org/grpc\"\n    \"google.golang.org/grpc/credentials/insecure\"\n    \"movieexample.com/pkg/discovery\"\n)\n// ServiceConnection attempts to select a random service \n// instance and returns a gRPC connection to it.\nfunc ServiceConnection(ctx context.Context, serviceName string, registry discovery.Registry) (*grpc.ClientConn, error) {\n    addrs, err := registry.ServiceAddresses(ctx, serviceName)\n    if err != nil {\n        return nil, err\n    }\n    return grpc.Dial(addrs[rand.Intn(len(addrs))], grpc.WithTransportCredentials(insecure.NewCredentials()))\n}\n```", "```go\npackage grpc\n\nimport (\n    \"context\"\n    \"google.golang.org/grpc\"\n    \"movieexample.com/gen\"\n    \"movieexample.com/internal/grpcutil\"\n    \"movieexample.com/metadata/pkg/model\"\n    \"movieexample.com/pkg/discovery\"\n)\n\n// Gateway defines a movie metadata gRPC gateway.\ntype Gateway struct {\n    registry discovery.Registry\n}\n\n// New creates a new gRPC gateway for a movie metadata \n// service.\nfunc New(registry discovery.Registry) *Gateway {\n    return &Gateway{registry}\n}\n```", "```go\n// Get returns movie metadata by a movie id.\nfunc (g *Gateway) Get(ctx context.Context, id string) (*model.Metadata, error) {\n    conn, err := grpcutil.ServiceConnection(ctx, \"metadata\", g.registry)\n    if err != nil {\n        return nil, err\n    }\n    defer conn.Close()\n    client := gen.NewMetadataServiceClient(conn)\n    resp, err := client.GetMetadataByID(ctx, &gen.GetMetadataByIDRequest{MovieId: id})\n    if err != nil {\n        return nil, err\n    }\n    return model.MetadataFromProto(resp.Metadata), nil\n}\n```", "```go\npackage grpc\n\nimport (\n    \"context\"\n    \"pkg/discovery\"\n    \"rating/pkg/model\"\n\n    \"google.golang.org/grpc\"\n    \"movieexample.com/internal/grpcutil\"\n    \"movieexample.com/gen\"\n)\n\n// Gateway defines an gRPC gateway for a rating service.\ntype Gateway struct {\n    registry discovery.Registry\n}\n\n// New creates a new gRPC gateway for a rating service.\nfunc New(registry discovery.Registry) *Gateway {\n    return &Gateway{registry}\n}\n```", "```go\n// GetAggregatedRating returns the aggregated rating for a \n// record or ErrNotFound if there are no ratings for it.\nfunc (g *Gateway) GetAggregatedRating(ctx context.Context, recordID model.RecordID, recordType model.RecordType) (float64, error) {\n    conn, err := grpcutil.ServiceConnection(ctx, \"rating\", g.registry)\n    if err != nil {\n        return 0, err\n    }\n    defer conn.Close()\n    client := gen.NewRatingServiceClient(conn)\n    resp, err := client.GetAggregatedRating(ctx, &gen.GetAggregatedRatingRequest{RecordId: string(recordID), RecordType: string(recordType)})\n    if err != nil {\n        return 0, err\n    }\n    return resp.RatingValue, nil\n}\n```", "```go\npackage main\n\nimport (\n    \"context\"\n    \"log\"\n    \"net\"\n\n    \"google.golang.org/grpc\"\n    \"movieexample.com/gen\"\n    \"movieexample.com/movie/internal/controller\"\n    metadatagateway \"movieexample.com/movie/internal/gateway/metadata/grpc\"\n    ratinggateway \"movieexample.com/movie/internal/gateway/rating/grpc\"\n    grpchandler \"movieexample.com/movie/internal/handler/grpc\"\n\"movieexample.com/pkg/discovery/static\"\n)\nfunc main() {\n    log.Println(\"Starting the movie service\")\n    registry := static.NewRegistry(map[string][]string{\n        \"metadata\": {\"localhost:8081\"},\n        \"rating\":   {\"localhost:8082\"},\n        \"movie\":    {\"localhost:8083\"},\n    })\n    ctx := context.Background()\n    if err := registry.Register(ctx, \"movie\", \"localhost:8083\"); err != nil {\n        panic(err)\n    }\n    defer registry.Deregister(ctx, \"movie\")\n    metadataGateway := metadatagateway.New(registry)\n    ratingGateway := ratinggateway.New(registry)\n    svc := controller.New(ratingGateway, metadataGateway)\n    h := grpchandler.New(svc)\n    lis, err := net.Listen(\"tcp\", \"localhost:8083\")\n    if err != nil {\n        log.Fatalf(\"failed to listen: %v\", err)\n    }\n    srv := grpc.NewServer()\n    gen.RegisterMovieServiceServer(srv, h)\n    srv.Serve(lis)\n}\n```"]