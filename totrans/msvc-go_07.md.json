["```go\nSELECT * FROM movies WHERE director = \"Ben Miles\"\n```", "```go\nSELECT * FROM ratings r INNER JOIN movies m ON r.record_id = m.id WHERE r.record_type = \"movie\" AND m.director = \"Ben Miles\"\n```", "```go\ndocker run --name movieexample_db -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=movieexample -p 3306:3306 -d mysql:latest\n```", "```go\ndocker ps\n```", "```go\nCREATE TABLE IF NOT EXISTS movies (id VARCHAR(255), title VARCHAR(255), description TEXT, director VARCHAR(255));\nCREATE TABLE IF NOT EXISTS ratings (record_id VARCHAR(255), record_type VARCHAR(255), user_id VARCHAR(255), value INT);\n```", "```go\ndocker exec -i movieexample_db mysql movieexample -h localhost -P 3306 --protocol=tcp -uroot -ppassword < schema/schema.sql\n```", "```go\ndocker exec -i movieexample_db mysql movieexample -h localhost -P 3306 --protocol=tcp -uroot -ppassword -e \"SHOW tables\"\n```", "```go\nTables_in_movieexample\nmovies\nratings\n```", "```go\npackage mysql\nimport (\n    \"context\"\n    \"database/sql\"\n    \"metadata/pkg/model\"\n    _ \"github.com/go-sql-driver/mysql\"\n    \"movieexample.com/metadata/internal/repository\"\n    \"movieexample.com/metadata/pkg/model\"\n)\n// Repository defines a MySQL-based movie matadata repository.\ntype Repository struct {\n    db *sql.DB\n}\n// New creates a new MySQL-based repository.\nfunc New() (*Repository, error) {\n    db, err := sql.Open(\"mysql\", \"root:password@/movieexample\")\n    if err != nil {\n        return nil, err\n    }\n    return &Repository{db}, nil\n}\n```", "```go\n_ \"github.com/go-sql-driver/mysql\"\n```", "```go\n// Get retrieves movie metadata for by movie id.\nfunc (r *Repository) Get(ctx context.Context, id string) (*model.Metadata, error) {\n    var title, description, director string\n    row := r.db.QueryRowContext(ctx, \"SELECT title, description, director FROM movies WHERE id = ?\", id)\n    if err := row.Scan(&title, &description, &director); err != nil {\n        if err == sql.ErrNoRows {\n            return nil, repository.ErrNotFound\n        }\n        return nil, err\n    }\n    return &model.Metadata{\n        ID:          id,\n        Title:       title,\n        Description: description,\n        Director:    director,\n    }, nil\n}\n// Put adds movie metadata for a given movie id.\nfunc (r *Repository) Put(ctx context.Context, id string, metadata *model.Metadata) error {\n    _, err := r.db.ExecContext(ctx, \"INSERT INTO movies (id, title, description, director) VALUES (?, ?, ?, ?)\",\n        id, metadata.Title, metadata.Description, metadata.Director)\n    return err\n}\n```", "```go\npackage mysql\nimport (\n    \"context\"\n    \"database/sql\"\n    \"rating/pkg/model\"\n    _ \"github.com/go-sql-driver/mysql\"\n    \"movieexample.com/rating/internal/repository\"\n    \"movieexample.com/rating/pkg/model\"\n)\n// Repository defines a MySQL-based rating repository.\ntype Repository struct {\n    db *sql.DB\n}\n// New creates a new MySQL-based rating repository.\nfunc New() (*Repository, error) {\n    db, err := sql.Open(\"mysql\", \"root:password@/movieexample\")\n    if err != nil {\n        return nil, err\n    }\n    return &Repository{db}, nil\n}\n```", "```go\n// Get retrieves all ratings for a given record.\nfunc (r *Repository) Get(ctx context.Context, recordID model.RecordID, recordType model.RecordType) ([]model.Rating, error) {\n    rows, err := r.db.QueryContext(ctx, \"SELECT user_id, value FROM ratings WHERE record_id = ? AND record_type = ?\", recordID, recordType)\n    if err != nil {\n        return nil, err\n    }\n    defer rows.Close()\n    var res []model.Rating\n    for rows.Next() {\n        var userID string\n        var value int32\n        if err := rows.Scan(&userID, &value); err != nil {\n            return nil, err\n        }\n        res = append(res, model.Rating{\n            UserID: model.UserID(userID),\n            Value:  model.RatingValue(value),\n        })\n    }\n    if len(res) == 0 {\n        return nil, repository.ErrNotFound\n    }\n    return res, nil\n}\n// Put adds a rating for a given record.\nfunc (r *Repository) Put(ctx context.Context, recordID model.RecordID, recordType model.RecordType, rating *model.Rating) error {\n    _, err := r.db.ExecContext(ctx, \"INSERT INTO ratings (record_id, record_type, user_id, value) VALUES (?, ?, ?, ?)\",\n        recordID, recordType, rating.UserID, rating.Value)\n    return err\n}\n```", "```go\ngo mod tidy\n```", "```go\nrepo := memory.New()\n```", "```go\nrepo := mysql.New()\nif err != nil {\n    panic(err)\n}\n```", "```go\ngo run *.go\n```", "```go\ngrpcurl -plaintext -d '{\"record_id\":\"1\", \"record_type\": \"movie\"}' localhost:8082 RatingService/GetAggregatedRating\n```", "```go\nERROR:\n  Code: NotFound\n  Message: ratings not found for a record\n```", "```go\ngrpcurl -plaintext -d '{\"record_id\":\"1\", \"record_type\": \"movie\", \"user_id\": \"alex\", \"rating_value\": 5}' localhost:8082 RatingService/PutRating\n```", "```go\ngrpcurl -plaintext -d '{\"record_id\":\"1\", \"record_type\": \"movie\"}' localhost:8082 RatingService/GetAggregatedRating\n```", "```go\n{\n  \"ratingValue\": 5\n}\n```"]