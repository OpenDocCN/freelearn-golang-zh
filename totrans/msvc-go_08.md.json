["```go\nmysql:\n  database: ratings\nkafka:\n  topic: ratings\n```", "```go\n    lis, err := net.Listen(\"tcp\", fmt.Sprintf(\"localhost:%v\", port))\n    ```", "```go\n    api:\n    ```", "```go\n      port: 8081\n    ```", "```go\n    package main\n    ```", "```go\n    type serviceConfig struct {\n    ```", "```go\n      APIConfig apiConfig `yaml:\"api\"`\n    ```", "```go\n    }\n    ```", "```go\n    type apiConfig struct {\n    ```", "```go\n      Port string `yaml:\"port\"`\n    ```", "```go\n    }\n    ```", "```go\n    api:\n    ```", "```go\n      port: 8081\n    ```", "```go\n    log.Println(\"Starting the movie metadata service\")\n    ```", "```go\n    f, err := os.Open(\"base.yaml\")\n    ```", "```go\n    if err != nil {\n    ```", "```go\n        panic(err)\n    ```", "```go\n    }\n    ```", "```go\n    defer f.Close()\n    ```", "```go\n    var cfg serviceConfig\n    ```", "```go\n    if err := yaml.NewDecoder(f).Decode(&cfg); err != nil {\n    ```", "```go\n        panic(err)\n    ```", "```go\n    }\n    ```", "```go\nlis, err := net.Listen(\"tcp\", fmt.Sprintf(\"localhost:%d\", cfg.     APIConfig.Port))\n```", "```go\ngo mod tidy\n```", "```go\nFROM alpine:latest\n\nCOPY main .\nCOPY configs/. . EXPOSE 8081\nCMD [\"/main\"]\n```", "```go\nGOOS=linux go build -o main cmd/*.go\n```", "```go\ndocker build -t metadata .\n```", "```go\ndocker build -t rating .\n```", "```go\ndocker build -t movie .\n```", "```go\ndocker run -p 8081:8081 -it metadata\ndocker run -p 8082:8082 -it rating\ndocker run -p 8083:8083 -it movie\n```", "```go\ndocker tag metadata <Your Docker username>/metadata:1.0.0\ndocker push <Your Docker username>/metadata:1.0.0\ndocker tag metadata <Your Docker username>/rating:1.0.0\ndocker push <Your Docker username>/rating:1.0.0\ndocker tag metadata <Your Docker username>/movie:1.0.0\ndocker push <Your Docker username>/movie:1.0.0\n```", "```go\n    apiVersion: apps/v1\n    ```", "```go\n    kind: Deployment\n    ```", "```go\n    metadata:\n    ```", "```go\n      name: metadata\n    ```", "```go\n    spec:\n    ```", "```go\n      replicas: 2\n    ```", "```go\n      selector:\n    ```", "```go\n        matchLabels:\n    ```", "```go\n          app: metadata\n    ```", "```go\n      template:\n    ```", "```go\n        metadata:\n    ```", "```go\n          labels:\n    ```", "```go\n            app: metadata\n    ```", "```go\n        spec:\n    ```", "```go\n          containers:\n    ```", "```go\n          - name: metadata\n    ```", "```go\n            image: microservices-with-go/metadata:1.0.0 \n    ```", "```go\n            imagePullPolicy: IfNotPresent\n    ```", "```go\n            ports:\n    ```", "```go\n              - containerPort: 8081\n    ```", "```go\n    apiVersion: apps/v1\n    ```", "```go\n    kind: Deployment\n    ```", "```go\n    metadata:\n    ```", "```go\n      name: rating\n    ```", "```go\n    spec:\n    ```", "```go\n      replicas: 2\n    ```", "```go\n      selector:\n    ```", "```go\n        matchLabels:\n    ```", "```go\n          app: rating\n    ```", "```go\n      template:\n    ```", "```go\n        metadata:\n    ```", "```go\n          labels:\n    ```", "```go\n            app: rating\n    ```", "```go\n        spec:\n    ```", "```go\n          containers:\n    ```", "```go\n          - name: rating\n    ```", "```go\n            image: <Your Docker username>/rating:1.0.3\n    ```", "```go\n            imagePullPolicy: IfNotPresent\n    ```", "```go\n            ports:\n    ```", "```go\n              - containerPort: 8082\n    ```", "```go\n    apiVersion: apps/v1\n    ```", "```go\n    kind: Deployment\n    ```", "```go\n    metadata:\n    ```", "```go\n      name: movie\n    ```", "```go\n    spec:\n    ```", "```go\n      replicas: 2\n    ```", "```go\n      selector:\n    ```", "```go\n        matchLabels:\n    ```", "```go\n          app: movie\n    ```", "```go\n      template:\n    ```", "```go\n        metadata:\n    ```", "```go\n          labels:\n    ```", "```go\n            app: movie\n    ```", "```go\n        spec:\n    ```", "```go\n          containers:\n    ```", "```go\n          - name: movie\n    ```", "```go\n            image: ashuiskov/movie:1.0.0\n    ```", "```go\n            imagePullPolicy: IfNotPresent\n    ```", "```go\n            ports:\n    ```", "```go\n              - containerPort: 8083\n    ```", "```go\nminikube start\n```", "```go\nkubectl apply -f kubernetes-deployment.yml \n```", "```go\nkubectl get deployments\n```", "```go\nNAME       READY   UP-TO-DATE   AVAILABLE   AGE\nmetadata   0/2     2            0           6s\n```", "```go\nkubectl get pods\n```", "```go\nNAME                        READY   STATUS    RESTARTS   AGE\nmetadata-5f87cbbf65-st69m   1/1     Running   0          116s\nmetadata-5f87cbbf65-t4xsk   1/1     Running   0          116s\n```", "```go\nkubectl logs -f <POD_ID>\n```", "```go\nkubectl port-forward <POD_ID> 8081:8081\n```"]