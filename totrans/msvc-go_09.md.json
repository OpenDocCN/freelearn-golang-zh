["```go\nfunc TestXxx(t *testing.T)\n```", "```go\nfunc TestAdd(t *testing.T) {\n  a, b := 1, 2\n  if got, want := Add(1, 2), 3; got != want {\n    t.Errorf(\"Add(%v, %v) = %v, want %v\", a, b, got, want)\n  }\n}\n```", "```go\ngo test\n```", "```go\nfunc TestAdd(t *testing.T) {\n    tests := []struct {\n        a    int\n        b    int\n        want int\n    }{\n        {a: 1, b: 2, want: 3},\n        {a: -1, b: -2, want: -3},\n        {a: -3, b: 3, want: 0},\n        {a: 0, b: 0, want: 0},\n    }\n    for _, tt := range tests {\n        assert.Equal(t, tt.want, Add(tt.a, tt.b), fmt.Sprintf(\"Add(%v, %v)\", tt.a, tt.b))\n    }\n}\n```", "```go\n        if got, want := Add(tt.a, tt.b), tt.want; got != want {\n            t.Errorf (\"Add(%v, %v) = %v, want %v\", tt.a, tt.b, got, want)\n        }\n```", "```go\nfunc (t *T) Run(name string, f func(t *T)) bool\n```", "```go\nfunc TestProcess(t *testing.T) {\n  t.Run(\"test case 1\", func(t *testing.T) {\n    // Test case 1 logic.\n  })\n  t.Run(\"test case 2\", func(t *testing.T) {\n    // Test case 2 logic.\n  })\n}\n```", "```go\nfunc TestProcess(t *testing.T) {\n    tests := []struct {\n        name  string\n        input string\n           want  string\n    }{\n        {name: \"empty\", input: \"\", want: \"\"},\n        {name: \"dog\", input: \"animal that barks\", want: \"dog\"},\n        {name: \"cat\", input: \"animal that meows\", want: \"cat\"},\n    }\n    for _, tt := range tests {\n        input := tt.input\n        t.Run(tt.name, func(t *testing.T) {\n            t.Parallel()\n            assert.Equal(t, tt.want, Process(input), fmt.Sprintf(\"Process(%v)\", input))\n        })\n    }\n}\n```", "```go\nfunc TestProcess(t *testing.T) {\n  if os.Getenv(\"RUNTIME_ENV\") == \"development\" {\n    t.Skip(\"Skipping a test in development environment\")\n  }\n  ...\n}\n```", "```go\ngo test -test.short\n```", "```go\nfunc TestLongRunningProcess(t *testing.T) {\n  if testing.Short() {\n    t.Skip(\"Skipping a test in short mode\")\n  }\n  ...\n}\n```", "```go\npackage metadata\nimport (\n    \"context\"\n    \"movieexample.com/metadata/pkg/model\"\n)\ntype metadataRepository interface {\n    Get(ctx context.Context, id string) (*model.Metadata, error)\n}\n// Controller defines a metadata service controller.\nType Controller struct {\n    repo metadataRepository\n}\n// New creates a metadata service controller.\nFunc New(repo metadataRepository) *Controller {\n    return &Controller{repo}\n}\n// Get returns movie metadata by id.\nFunc (c *Controller) Get(ctx context.Context, id string) (*model.Metadata, error) {\n    return c.repo.Get(ctx, id)\n}\n```", "```go\ntype metadataRepository interface {\n    Get(ctx context.Context, id string) (*model.Metadata, error)\n}\n```", "```go\ntype mockMetadataRepository struct {\n    returnRes *model.Metadata\n    returnErr error\n}\nfunc (m *mockMetadataRepository) setReturnValues(res *model.Metadata, err error) {\n    m.returnRes = res\n    m.returnErr = err\n}\nfunc (m *mockMetadataRepository) Get(ctx context.Context, id string) (*model.Metadata, error) {\n    return m.returnRes, m.returnErr\n}\n```", "```go\nm := mockMetadataRepository{}\nm.setReturnValues(nil, repository.ErrNotFound)\nc := New(m)\nres, err := c.Get(context.Background(), \"some-id\")\n// Check res, err.\n```", "```go\ngo install github.com/golang/mock/mockgen\n```", "```go\nmockgen -source=foo.go [options]\n```", "```go\nmockgen -package=repository -source=metadata/internal/controller/metadata/controller.go\n```", "```go\n// MockmetadataRepository is a mock of metadataRepository \n// interface\ntype MockmetadataRepository struct {\n    ctrl     *gomock.Controller\n    recorder *MockmetadataRepositoryMockRecorder\n}\n// NewMockmetadataRepository creates a new mock instance\nfunc NewMockmetadataRepository(ctrl *gomock.Controller) *MockmetadataRepository {\n    mock := &MockmetadataRepository{ctrl: ctrl}\n    mock.recorder = &MockmetadataRepositoryMockRecorder{mock}\n    return mock\n}\n// EXPECT returns an object that allows the caller to indicate // expected use\nfunc (m *MockmetadataRepository) EXPECT() *MockmetadataRepositoryMockRecorder {\n    return m.recorder\n}\n// Get mocks base method.\nfunc (m *MockmetadataRepository) Get(ctx context.Context, id string) (*model.Metadata, error) {\n    ret := m.ctrl.Call(m, \"Get\", ctx, id)\n    ret0, _ := ret[0].(*model.Metadata)\n    ret1, _ := ret[1].(error)\n    return ret0, ret1\n}\n```", "```go\nctrl := gomock.NewController(t)\ndefer ctrl.Finish()\nm := NewMockmetadataRepository(gomock.NewController())\nctx := context.Background()\nid := \"some-id\"\nm.EXPECT().Get(ctx, id).Return(nil, repository.ErrNotFound)\n```", "```go\nm.EXPECT().Get(ctx, id).Return(nil, repository.ErrNotFound).Times(1)\n```", "```go\nmockgen -package=repository -source=metadata/internal/controller/metadata/controller.go\n```", "```go\npackage metadata\nimport (\n    \"context\"\n    \"errors\"\n    \"testing\"\n    \"github.com/golang/mock/gomock\"\n    \"github.com/stretchr/testify/assert\"\n    gen \"movieexample.com/gen/mock/metadata/repository\"\n    \"movieexample.com/metadata/internal/repository\"\n    \"movieexample.com/metadata/pkg/model\"\n)\n```", "```go\nfunc TestController(t *testing.T) {\n    tests := []struct {\n        name       string\n        expRepoRes *model.Metadata\n        expRepoErr error\n        wantRes    *model.Metadata\n        wantErr    error\n    }{\n        {\n            name:       \"not found\",\n            expRepoErr: repository.ErrNotFound,\n            wantErr:    ErrNotFound,\n        },\n        {\n            name:       \"unexpected error\",\n            expRepoErr: errors.New(\"unexpected error\"),\n            wantErr:    errors.New(\"unexpected error\"),\n        },\n        {\n            name:       \"success\",\n            expRepoRes: &model.Metadata{},\n            wantRes:    &model.Metadata{},\n        },\n    }\n```", "```go\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            ctrl := gomock.NewController(t)\n            defer ctrl.Finish()\n            repoMock := gen.NewMockmetadataRepository(ctrl)\n            c := New(repoMock)\n            ctx := context.Background()\n            id := \"id\"\n            repoMock.EXPECT().Get(ctx, id).Return(tt.expRepoRes, tt.expRepoErr)\n            res, err := c.Get(ctx, id)\n            assert.Equal(t, tt.wantRes, res, tt.name)\n            assert.Equal(t, tt.wantErr, err, tt.name)\n        })\n    }\n}\n```", "```go\ngo test\n```", "```go\n    package main\n    ```", "```go\n    import (\n    ```", "```go\n        \"context\"\n    ```", "```go\n        \"log\"\n    ```", "```go\n        \"net\"\n    ```", "```go\n        \"github.com/google/go-cmp/cmp\"\n    ```", "```go\n        \"github.com/google/go-cmp/cmp/cmpopts\"\n    ```", "```go\n        \"google.golang.org/grpc\"\n    ```", "```go\n        \"movieexample.com/gen\"\n    ```", "```go\n        metadatatest \"movieexample.com/metadata/pkg/testutil\"\n    ```", "```go\n        movietest \"movieexample.com/movie/pkg/testutil\"\n    ```", "```go\n        \"movieexample.com/pkg/discovery\"\n    ```", "```go\n        \"movieexample.com/pkg/discovery/memory\"\n    ```", "```go\n        ratingtest \"movieexample.com/rating/pkg/testutil\"\n    ```", "```go\n        \"google.golang.org/grpc/credentials/insecure\"\n    ```", "```go\n    )\n    ```", "```go\n    const (\n    ```", "```go\n        metadataServiceName = \"metadata\"\n    ```", "```go\n        ratingServiceName   = \"rating\"\n    ```", "```go\n        movieServiceName    = \"movie\"\n    ```", "```go\n        metadataServiceAddr = \"localhost:8081\"\n    ```", "```go\n        ratingServiceAddr   = \"localhost:8082\"\n    ```", "```go\n        movieServiceAddr    = \"localhost:8083\"\n    ```", "```go\n    )\n    ```", "```go\n    func main() {\n    ```", "```go\n        log.Println(\"Starting the integration test\")\n    ```", "```go\n        ctx := context.Background()\n    ```", "```go\n        registry := memory.NewRegistry()\n    ```", "```go\n        log.Println(\"Setting up service handlers and clients\")\n    ```", "```go\n        metadataSrv := startMetadataService(ctx, registry)\n    ```", "```go\n        defer metadataSrv.GracefulStop()\n    ```", "```go\n        ratingSrv := startRatingService(ctx, registry)\n    ```", "```go\n        defer ratingSrv.GracefulStop()\n    ```", "```go\n        movieSrv := startMovieService(ctx, registry)\n    ```", "```go\n        defer movieSrv.GracefulStop()\n    ```", "```go\n        opts := grpc.WithTransportCredentials(insecure.NewCredentials())\n    ```", "```go\n        metadataConn, err := grpc.Dial(metadataServiceAddr, opts)\n    ```", "```go\n        if err != nil {\n    ```", "```go\n            panic(err)\n    ```", "```go\n        }\n    ```", "```go\n        defer metadataConn.Close()\n    ```", "```go\n        metadataClient := gen.NewMetadataServiceClient(metadataConn)\n    ```", "```go\n        ratingConn, err := grpc.Dial(ratingServiceAddr, opts)\n    ```", "```go\n        if err != nil {\n    ```", "```go\n            panic(err)\n    ```", "```go\n        }\n    ```", "```go\n        defer ratingConn.Close()\n    ```", "```go\n        ratingClient := gen.NewRatingServiceClient(ratingConn)\n    ```", "```go\n        movieConn, err := grpc.Dial(movieServiceAddr, opts)\n    ```", "```go\n        if err != nil {\n    ```", "```go\n            panic(err)\n    ```", "```go\n        }\n    ```", "```go\n        defer movieConn.Close()\n    ```", "```go\n        movieClient := gen.NewMovieServiceClient(movieConn)\n    ```", "```go\n    log.Println(\"Saving test metadata via metadata service\")\n    m := &gen.Metadata{\n        Id:          \"the-movie\",\n        Title:       \"The Movie\",\n        Description: \"The Movie, the one and only\",\n        Director:    \"Mr. D\",\n    }\n    if _, err := metadataClient.PutMetadata(ctx, &gen.PutMetadataRequest{Metadata: m}); err != nil {\n        log.Fatalf(\"put metadata: %v\", err)\n    }\n    log.Println(\"Retrieving test metadata via metadata service\")\n    getMetadataResp, err := metadataClient.GetMetadata(ctx, &gen.GetMetadataRequest{MovieId: m.Id})\n    if err != nil {\n        log.Fatalf(\"get metadata: %v\", err)\n    }\n    if diff := cmp.Diff(getMetadataResp.Metadata, m, cmpopts.IgnoreUnexported(gen.Metadata{})); diff != \"\" {\n        log.Fatalf(\"get metadata after put mismatch: %v\", diff)\n    }\n```", "```go\n    log.Println(\"Getting movie details via movie service\")\n    wantMovieDetails := &gen.MovieDetails{\n        Metadata: m,\n    }\n    getMovieDetailsResp, err := movieClient.GetMovieDetails(ctx, &gen.GetMovieDetailsRequest{MovieId: m.Id})\n    if err != nil {\n        log.Fatalf(\"get movie details: %v\", err)\n    }\n    if diff := cmp.Diff(getMovieDetailsResp.MovieDetails, wantMovieDetails, cmpopts.IgnoreUnexported(gen.MovieDetails{}, gen.Metadata{})); diff != \"\" {\n        log.Fatalf(\"get movie details after put mismatch: %v\", err)\n    }\n```", "```go\n    log.Println(\"Saving first rating via rating service\")\n    const userID = \"user0\"\n    const recordTypeMovie = \"movie\"\n    firstRating := int32(5)\n    if _, err = ratingClient.PutRating(ctx, &gen.PutRatingRequest{\n        UserId:      userID,\n        RecordId:    m.Id,\n        RecordType:  recordTypeMovie,\n        RatingValue: firstRating,\n    }); err != nil {\n        log.Fatalf(\"put rating: %v\", err)\n    }\n    log.Println(\"Retrieving initial aggregated rating via rating service\")\n    getAggregatedRatingResp, err := ratingClient.GetAggregatedRating(ctx, &gen.GetAggregatedRatingRequest{\n        RecordId:   m.Id,\n        RecordType: recordTypeMovie,\n    })\n    if err != nil {\n        log.Fatalf(\"get aggreggated rating: %v\", err)\n    }\n    if got, want := getAggregatedRatingResp.RatingValue, float64(5); got != want {\n        log.Fatalf(\"rating mismatch: got %v want %v\", got, want)\n    }\n```", "```go\n    log.Println(\"Saving second rating via rating service\")\n    secondRating := int32(1)\n    if _, err = ratingClient.PutRating(ctx, &gen.PutRatingRequest{\n        UserId:      userID,\n        RecordId:    m.Id,\n        RecordType:  recordTypeMovie,\n        RatingValue: secondRating,\n    }); err != nil {\n        log.Fatalf(\"put rating: %v\", err)\n    }\n    log.Println(\"Saving new aggregated rating via rating service\")\n    getAggregatedRatingResp, err = ratingClient.GetAggregatedRating(ctx, &gen.GetAggregatedRatingRequest{\n        RecordId:   m.Id,\n        RecordType: recordTypeMovie,\n    })\n    if err != nil {\n        log.Fatalf(\"get aggreggated rating: %v\", err)\n    }\n    wantRating := float64((firstRating + secondRating) / 2)\n    if got, want := getAggregatedRatingResp.RatingValue, wantRating; got != want {\n        log.Fatalf(\"rating mismatch: got %v want %v\", got, want)\n    }\n```", "```go\n    log.Println(\"Getting updated movie details via movie service\")\n    getMovieDetailsResp, err = movieClient.GetMovieDetails(ctx, &gen.GetMovieDetailsRequest{MovieId: m.Id})\n    if err != nil {\n        log.Fatalf(\"get movie details: %v\", err)\n    }\n    wantMovieDetails.Rating = wantRating\n    if diff := cmp.Diff(getMovieDetailsResp.MovieDetails, wantMovieDetails, cmpopts.IgnoreUnexported(gen.MovieDetails{}, gen.Metadata{})); diff != \"\" {\n        log.Fatalf(\"get movie details after update mismatch: %v\", err)\n    }\n    log.Println(\"Integration test execution successful\")\n}\n```", "```go\nfunc startMetadataService(ctx context.Context, registry discovery.Registry) *grpc.Server {\n    log.Println(\"Starting metadata service on \" + metadataServiceAddr)\n    h := metadatatest.NewTestMetadataGRPCServer()\n    l, err := net.Listen(\"tcp\", metadataServiceAddr)\n    if err != nil {\n        log.Fatalf(\"failed to listen: %v\", err)\n    }\n    srv := grpc.NewServer()\n    gen.RegisterMetadataServiceServer(srv, h)\n    go func() {\n        if err := srv.Serve(l); err != nil {\n            panic(err)\n        }\n    }()\n    id := discovery.GenerateInstanceID(metadataServiceName)\n    if err := registry.Register(ctx, id, metadataServiceName, metadataServiceAddr); err != nil {\n        panic(err)\n    }\n    return srv\n}\n```", "```go\nfunc startRatingService(ctx context.Context, registry discovery.Registry) *grpc.Server {\n    log.Println(\"Starting rating service on \" + ratingServiceAddr)\n    h := ratingtest.NewTestRatingGRPCServer()\n    l, err := net.Listen(\"tcp\", ratingServiceAddr)\n    if err != nil {\n        log.Fatalf(\"failed to listen: %v\", err)\n    }\n    srv := grpc.NewServer()\n    gen.RegisterRatingServiceServer(srv, h)\n    go func() {\n        if err := srv.Serve(l); err != nil {\n            panic(err)\n        }\n    }()\n    id := discovery.GenerateInstanceID(ratingServiceName)\n    if err := registry.Register(ctx, id, ratingServiceName, ratingServiceAddr); err != nil {\n        panic(err)\n    }\n    return srv\n}\n```", "```go\nfunc startMovieService(ctx context.Context, registry discovery.Registry) *grpc.Server {\n    log.Println(\"Starting movie service on \" + movieServiceAddr)\n    h := movietest.NewTestMovieGRPCServer(registry)\n    l, err := net.Listen(\"tcp\", movieServiceAddr)\n    if err != nil {\n        log.Fatalf(\"failed to listen: %v\", err)\n    }\n    srv := grpc.NewServer()\n    gen.RegisterMovieServiceServer(srv, h)\n    go func() {\n        if err := srv.Serve(l); err != nil {\n            panic(err)\n        }\n    }()\n    id := discovery.GenerateInstanceID(movieServiceName)\n    if err := registry.Register(ctx, id, movieServiceName, movieServiceAddr); err != nil {\n        panic(err)\n    }\n    return srv\n}\n```", "```go\ngo run test/integration/*.go\n```", "```go\n2022/07/16 16:20:46 Starting the integration test\n2022/07/16 16:20:46 Setting up service handlers and clients\n2022/07/16 16:20:46 Starting metadata service on localhost:8081\n2022/07/16 16:20:46 Starting rating service on localhost:8082\n2022/07/16 16:20:46 Starting movie service on localhost:8083\n2022/07/16 16:20:46 Saving test metadata via metadata service\n2022/07/16 16:20:46 Retrieving test metadata via metadata service\n2022/07/16 16:20:46 Getting movie details via movie service\n2022/07/16 16:20:46 Saving first rating via rating service\n2022/07/16 16:20:46 Retrieving initial aggregated rating via rating service\n2022/07/16 16:20:46 Saving second rating via rating service\n2022/07/16 16:20:46 Saving new aggregated rating via rating service\n2022/07/16 16:20:46 Getting updated movie details via movie service\n2022/07/16 16:20:46 Integration test execution successful\n```", "```go\nif got, want := Process(tt.in), tt.want; got != want {\n  t.Errorf(\"Result mismatch\")\n}\n```", "```go\nt.Errorf(\"got %v, want %v\", got, want)\n```", "```go\nt.Errorf(\"YourFunc(%v) = %v, want %v\", tt.in, got, want)\n```", "```go\nassert.Equal(t, want, got, fmt.Sprintf(\"YourFunc(%v)\", tt.in))\n```", "```go\nif err := Process(tt.in); err != nil {\n  t.Fatalf(\"Process(%v): %v, want nil\", err)\n} \n```", "```go\nif err := Process(tt.in); err != nil {\n  t.Errorf(\"Process(%v): %v, want nil\", err)\n} \n```", "```go\nwant := &model.Metadata{ID: \"123\", Title: \"Some title\"}\nid := \"123\"\nif got := GetMetadata(ctx, \"123\"); got != want {\n  t.Errorf(\"GetMetadata(%v): %v, want %v\", id, got, want)\n}\n```", "```go\nif !reflect.DeepEqual(GetMetadata(ctx, \"123\"), want); {\n  t.Errorf(\"GetMetadata(%v): %v, want %v\", id, *got, *want)\n}\n```", "```go\nif diff := cmp.Diff(want, got); diff != \"\" {\n  t.Errorf(\"GetMetadata(%v): mismatch (-want +got):\\n%s\", tt.in, diff)\n}\n```", "```go\nGetMetadata(123) mismatch (-want +got):\n  model.Metadata{\n      ID:      \"123\",\n-     Tiitle: s\"Title\",\n+     IPAddress: s\"The Title\",\n  }\n```"]