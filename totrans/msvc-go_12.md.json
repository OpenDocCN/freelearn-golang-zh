["```go\nactive_user_count == 0\n```", "```go\nactive_user_count 755\napi_requests_total_count 18900\napi_requests_getuser_count 500\n```", "```go\nactive_user_count\n```", "```go\nactive_user_count{service=\"rating-ui\"}\n```", "```go\nactive_user_count == 0\n```", "```go\napi_request_latency{quantile=\"0.5\"} > 1\n```", "```go\ngroups:\n- name: Availability alerts\n  rules:\n  - alert: Rating service down\n    expr: service_availability{service=\"rating\"} == 0\n    for: 3m\n    labels:\n      severity: page\n    annotations:\n      title: Rating service availability down\n      description: No available instance of the rating service.\n```", "```go\npackage main\ntype config struct {\n    API        apiConfig        `yaml:\"api\"`\n    Jaeger     jaegerConfig     `yaml:\"jaeger\"`\n    Prometheus prometheusConfig `yaml:\"prometheus\"`\n}\ntype apiConfig struct {\n    Port int `yaml:\"port\"`\n}\ntype jaegerConfig struct {\n    URL string `yaml:\"url\"`\n}\ntype prometheusConfig struct {\n    MetricsPort int `yaml:\"metricsPort\"`\n}\n```", "```go\nprometheus:\n  metricsPort: 8091\n```", "```go\n    \"github.com/uber-go/tally\"\n    \"github.com/uber-go/tally/prometheus\"\n```", "```go\n    reporter := prometheus.NewReporter(prometheus.Options{})\n    _, closer := tally.NewRootScope(tally.ScopeOptions{\n        Tags:           map[string]string{\"service\": \"metadata\"},\n        CachedReporter: reporter,\n    }, 10*time.Second)\n    defer closer.Close()\n    http.Handle(\"/metrics\", reporter.HTTPHandler())\n    go func() {\n        if err := http.ListenAndServe(fmt.Sprintf(\":%d\", cfg.Prometheus.MetricsPort), nil); err != nil {\n            logger.Fatal(\"Failed to start the metrics handler\", zap.Error(err))\n        }\n    }()\n    counter := scope.Tagged(map[string]string{\n        \"service\": \"metadata\",\n    }).Counter(\"service_started\")\n    counter.Inc(1)\n```", "```go\n# HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles.\n# TYPE go_gc_duration_seconds summary\ngo_gc_duration_seconds{quantile=\"0\"} 0\ngo_gc_duration_seconds{quantile=\"0.25\"} 0\n...\n```", "```go\nglobal:\n  scrape_interval: 15s\n  scrape_timeout: 10s\n  evaluation_interval: 15s\nalerting:\n  alertmanagers:\n  - follow_redirects: true\n    enable_http2: true\n    scheme: http\n    timeout: 10s\n    api_version: v2\n    static_configs:\n    - targets:\n      - host.docker.internal:9093\n```", "```go\nrule_files:\n- alerts.rules\nscrape_configs:\n- job_name: prometheus\n  honor_timestamps: true\n  scrape_interval: 15s\n  scrape_timeout: 10s\n  metrics_path: /metrics\n  scheme: http\n  follow_redirects: true\n  enable_http2: true\n  static_configs:\n  - targets:\n    - localhost:9090\n  - targets:\n    - host.docker.internal:8091\n    labels:\n      service: metadata\n  - targets:\n    - host.docker.internal:8092\n    labels:\n      service: rating\n  - targets:\n    - host.docker.internal:8093\n    labels:\n      service: movie\n```", "```go\n    consul_sd_configs:\n    - server:  host.docker.internal:8500\n      services:\n        - <SERVICE_NAME>\n```", "```go\ngroups:\n- name: Service availability\n  rules:\n  - alert: Metadata service down\n    expr: up{service=\"metadata\"} == 0\n    labels:\n      severity: warning\n    annotations:\n      title: Metadata service is down\n      description: Failed to scrape {{ $labels.service }}. Service possibly down.\n  - alert: Rating service down\n    expr: up{service=\"rating\"} == 0\n    labels:\n      severity: warning\n    annotations:\n      title: Metadata service is down\n      description: Failed to scrape {{ $labels.service }} service on {{ $labels.instance }}. Service possibly down.\n  - alert: Movie service down\n    expr: up{service=\"movie\"} == 0\n    labels:\n      severity: warning\n    annotations:\n      title: Metadata service is down\n      description: Failed to scrape {{ $labels.service }} service on {{ $labels.instance }}. Service possibly down.\n```", "```go\ndocker run \\\n    -p 9090:9090 \\\n    -v configs:/etc/prometheus \\\n    prom/prometheus\n```", "```go\nglobal:\n  resolve_timeout: 5m\nroute:\n  repeat_interval: 1m\n  receiver: 'email'\nreceivers:\n- name: 'email'\n  email_configs:\n  - to: 'your_email@gmail.com'\n    from: 'your_email@gmail.com'\n    smarthost: smtp.gmail.com:587\n    auth_username: 'your_email@gmail.com'\n    auth_identity: 'your_email@gmail.com'\n    auth_password: 'your_password'\n```", "```go\ndocker run -p 9093:9093 -v <PATH_TO_CONFIGS_DIR>:/etc/alertmanager prom/alertmanager --config.file=/etc/alertmanager/alertmanager.yml\n```"]