["```go\nsimulateCPULoad := flag.Bool(\"simulatecpuload\",\n    false,\"simulate CPU load for profiling\")\n    flag.Parse()\n    if *simulateCPULoad {\n        go heavyOperation()\n    }\ngo func() {\n    if err := http.ListenAndServe(\"localhost:6060\", nil);\n    err != nil {\n        logger.Fatal(\"Failed to start profiler handler\",\n            zap.Error(err))\n    }\n}()\n```", "```go\nfunc heavyOperation() {\n    for {\n        token := make([]byte, 1024)\n        rand.Read(token)\n        md5.New().Write(token)\n    }\n}\n```", "```go\ngo run *.go --simulatecpuload\n```", "```go\ngo tool pprof http://localhost:6060/debug/pprof/profile?seconds=5\n```", "```go\nType: cpu\nTime: Sep 13, 2022 at 5:37pm (+05)\nDuration: 5.14s, Total samples = 4.42s (85.92%)\nEntering interactive mode (type \"help\" for commands,\n    \"o\" for options)\n(pprof)\n```", "```go\ngo tool pprof http://localhost:6060/debug/pprof/heap\n```", "```go\n    docker run -d -p 3000:3000 grafana/grafana-oss\n    ```", "```go\npackage main\nimport (\n    \"fmt\"\n    \"net/http\"\n)\nfunc main() {\n    http.HandleFunc(\"/echo\",\n        func(w http.ResponseWriter, _ *http.Request) {\n            fmt.Fprintf(w, \"Hi!\")\n        })\n    if err := http.ListenAndServe(\":8080\", nil);\n    err != nil {\n        panic(err)\n    }\n}\n```", "```go\nownership:\n    rating-service:\n        accountable: example@somecompany.com\n            support:\n                slack: rating-service-support-group\n                    oncall:\n                        pagerduty_rotation:SOME_ROTATION_ID\n```", "```go\n{\n    \"name\": \"Alexander\",\n    \"role\": \"admin\",\n    \"iat\": 1663880774\n}\n```", "```go\nHMACSHA256(\n    base64UrlEncode(header) + \".\" +\n    base64UrlEncode(payload),\n    secret,\n)\n```", "```go\n{\n    \"alg\": \"HS256\",\n    \"typ\": \"JWT\"\n}\n```", "```go\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQWxleGFuZGVyIiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNjYzODgwNzc0fQ.FqogLyrV28wR5po6SMouJ7qs2Y3m6gmpaPg6MUthWpQ\n```", "```go\nconst secret = \"our-secret\"\nfunc Authenticate(w http.ResponseWriter, req *http.Request) {\n    username := req.FormValue(\"username\")\n    password := req.FormValue(\"password\")\n    if !validCredentials(username, password) {\n        http.Error(w, \"invalid credentials\", http.StatusUnauthorized)\n        return\n    }\n    token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{\n        \"username\": username,\n        \"iat\": time.Now().Unix(),\n    })\n    tokenString, err := token.SignedString(secret)\n    if err != nil {\n        http.Error(w, \"failed to create a token\", http.StatusInternalServerError)\n        return\n    }\n    fmt.Fprintf(w, tokenString)\n}\nfunc validCredentials(username, password string) bool {\n    // Implement your credential verification here.\n    return false\n}\n```", "```go\nfunc authorizationExample(\n    token string, operationURL string) error {\n        req, err := http.NewRequest(\n            http.MethodPost, operationURL, nil)\n            if err != nil {\n                return err\n            }\n        req.Header.Set(\"Authorization\", \"Bearer \"+token)\n        resp, err := http.DefaultClient.Do(req)\n        // Handle response.\n    }\n```", "```go\nfunc AuthorizedOperationExample(w http.ResponseWriter,\n    req *http.Request) {\n        authHeaderValue := req.Header.Get(\"Authorization\")\n        const bearerPrefix = \"Bearer \"\n        if !strings.HasPrefix(authHeaderValue,\n            bearerPrefix) {\n                http.Error(w,\n                    \"request does not contain an Authorization Bearer token\", http.StatusUnauthorized)\n                return\n            }\n        tokenString := strings.TrimPrefix(authHeaderValue,\n            bearerPrefix)\n        // Validate token.\n        token, err := jwt.Parse(tokenString,\n            func(token *jwt.Token) (interface{}, error) {\n                if _, ok := token.Method.(\n                    *jwt.SigningMethodHMAC); !ok {\n                        return nil,\n                        fmt.Errorf(\n                            \"unexpected signing method:\n                                %v\", token.Header[\"alg\"])\n            }\n            return secret, nil\n        })\n        if err != nil {\n            http.Error(w, \"invalid token\",\n                http.StatusUnauthorized)\n        }\n        claims, ok := token.Claims.(jwt.MapClaims)\n        if !ok || !token.Valid {\n            http.Error(w, \"invalid token\",\n                http.StatusUnauthorized)\n            return\n        }\n        username := claims[\"username\"]\n        fmt.Fprintf(w, \"Hello, \"+username.(string))\n    }\n```"]