- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: '**Go** has emerged as one of the top three most wanted programming languages
    according to the *Stack Overflow Developer Survey 2021* (*Further reading*), and
    it has become the preferred choice for writing cloud-native applications such
    as **Kubernetes**, **Docker**, **Istio**, **Prometheus**, and **Grafana**.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**Go** 已经成为根据 *Stack Overflow Developer Survey 2021*（*进一步阅读*）调查中排名前三的最受欢迎的编程语言之一，并且已成为编写云原生应用程序（如
    **Kubernetes**、**Docker**、**Istio**、**Prometheus** 和 **Grafana**）的首选语言。'
- en: Despite this, we still don't see this trend manifest in the network engineering
    community, where fewer than 20% of network engineers saying they currently use
    Go for their network automation projects, according to the *NetDevOps* 2020 survey
    (*Further reading*), even though 41% of Go developers say they use Go for network
    programming in *Go Developer Survey 2020 Results* (*Further reading*).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，我们仍然没有看到这一趋势在网络工程社区中体现出来，根据 *NetDevOps* 2020 调查（*进一步阅读*），不到 20% 的网络工程师表示他们目前使用
    Go 进行网络自动化项目，尽管在 *Go Developer Survey 2020 Results*（*进一步阅读*）中，41% 的 Go 开发者表示他们使用
    Go 进行网络编程。
- en: This book strives to address this disparity by offering a practical introduction
    to Go and network automation for network engineers who want to evolve network
    management and operation using Go, and software engineers wanting to get into
    network infrastructure automation. We also hope that this book may be useful to
    network automation engineers who know and use Python today but want to expand
    their skill set with a different programming language.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在通过为希望使用 Go 语言来演进网络管理和操作的网络安全工程师以及希望进入网络基础设施自动化领域的软件工程师提供实用的 Go 语言和网络自动化入门，来弥补这一差距。我们也希望这本书对目前使用
    Python 但希望用不同的编程语言扩展技能集的网络自动化工程师有所帮助。
- en: We start by discussing the benefits of Go from different angles and how they
    apply to the networking field. By the end of this chapter, you should have a good
    understanding of the main aspects of Go and how to get Go installed on your computer
    to follow along with the code examples.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先从不同角度讨论 Go 的优势以及它们如何应用于网络领域。到本章结束时，您应该对 Go 的主要方面以及如何将 Go 安装到您的计算机上以跟随代码示例有一个很好的理解。
- en: 'In this first chapter, we cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第一章中，我们将涵盖以下主题：
- en: Networking and Go
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络和 Go
- en: Why Go?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么选择 Go？
- en: The future of Go
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 的未来
- en: Go versus Python
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 与 Python 的比较
- en: Installing Go on your computer
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的计算机上安装 Go
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: We assume basic familiarity with the command line, Git, and GitHub. You can
    find the code examples for this chapter in the book's GitHub repository ([https://github.com/PacktPublishing/Network-Automation-with-Go](https://packages.cloud.google.com/apt/doc/apt-key.gpg)),
    under the `ch01` folder.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设您对命令行、Git 和 GitHub 有基本的熟悉度。您可以在本书的 GitHub 仓库中找到本章的代码示例（[https://github.com/PacktPublishing/Network-Automation-with-Go](https://packages.cloud.google.com/apt/doc/apt-key.gpg)），在
    `ch01` 文件夹下。
- en: 'To run the examples, proceed as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行示例，请按照以下步骤操作：
- en: Install Go 1.17 or later for your operating system. You can follow the instructions
    in the *Installing Go* on your computer section of this chapter or go to https://go.dev/doc/install.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的操作系统安装 Go 1.17 或更高版本。您可以根据本章的 *在您的计算机上安装 Go* 指令进行操作，或访问 https://go.dev/doc/install。
- en: Clone the book's GitHub repository with `git` `clone https://github.com/PacktPublishing/Network-Automation-with-Go.git`.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `git` 命令克隆本书的 GitHub 仓库 `clone https://github.com/PacktPublishing/Network-Automation-with-Go.git`。
- en: Change the directory to an example's folder with `cd Network-Automation-with-Go/ch01/concurrency`.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将目录更改为示例文件夹，使用 `cd Network-Automation-with-Go/ch01/concurrency`。
- en: Execute `go run main.go`.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 `go run main.go`。
- en: Networking and Go
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络和 Go
- en: Go is widely used in generic infrastructure software—from workload orchestration
    (Docker and Kubernetes), through telemetry and monitoring (Prometheus and Grafana),
    all the way to automation tooling (Terraform and Vagrant).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Go 在通用基础设施软件中得到广泛应用——从工作负载编排（Docker 和 Kubernetes），到遥测和监控（Prometheus 和 Grafana），再到自动化工具（Terraform
    和 Vagrant）。
- en: Networking is not the exception—some notable networking projects using Go include
    **Container Network Interface** (**CNI**) plugins such as **Cilium** or **Calico**,
    routing protocol daemons such as **GoBGP** and **Bio-RD**, **virtual private network**
    (**VPN**) software such as **Tailscale**, and most of **OpenConfig's** ecosystem,
    including projects such as **gRPC Network Management Interface** (**gNMI**) and
    **goyang**.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 网络也不例外——一些使用Go的知名网络项目包括**容器网络接口**（**CNI**）插件，如**Cilium**或**Calico**，路由协议守护进程如**GoBGP**和**Bio-RD**，**虚拟专用网络**（**VPN**）软件如**Tailscale**，以及**OpenConfig**的大部分生态系统，包括**gRPC网络管理接口**（**gNMI**）和**goyang**等项目。
- en: Other use cases include cloud and network services, **command-line interfaces**
    (**CLIs**), web development, **development-operations** (**DevOps**), and site
    reliability.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 其他用例包括云和网络服务、**命令行界面**（**CLIs**）、Web开发、**开发运维**（**DevOps**）和站点可靠性。
- en: Go is a programming language the Go founders created to address modern challenges
    such as multi-core processing, distributed systems, and large-scale software development
    from day one.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Go是Go的创始人创建的一种编程语言，旨在从第一天起解决现代挑战，如多核处理、分布式系统和大规模软件开发。
- en: Go's built-in first-class concurrency mechanisms make it an ideal choice for
    long-lived low-bandwidth **input/output** (**I/O**) operations, which are typical
    requirements of network automation and network operations applications.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Go内置的一等并发机制使其成为长期低带宽**输入/输出**（**I/O**）操作的理想选择，这是网络自动化和网络操作应用的典型需求。
- en: What makes the Go language so appealing to software developers? Why, out of
    all the programming languages out there, should you invest time in learning Go?
    This is what we address in the next section.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 是什么让Go语言对软件开发者如此有吸引力？为什么在所有编程语言中，你应该投入时间去学习Go？这是我们将在下一节中讨论的内容。
- en: Why Go?
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择Go？
- en: When choosing which programming language to learn next, most people focus mainly
    on technical reasons. We believe that the choice can be a bit more nuanced, so
    we try to approach this question from different angles. We start with non-technical
    arguments, something that's often overlooked but that we believe is important
    and can have a major impact on both the learning process and day-to-day use. Following
    that, we cover generic technical arguments that help Go stand out in the very
    competitive landscape of modern programming languages. We close out this section
    by exploring different facets of Go that can benefit people, specifically in the
    fields of networking and network automation.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当选择学习下一门编程语言时，大多数人主要关注技术原因。我们认为这个选择可以更加细致，因此我们尝试从不同的角度来探讨这个问题。我们首先从非技术角度出发，这是常常被忽视但我们认为很重要，并且可以对学习过程和日常使用产生重大影响的东西。在此之后，我们将探讨一些通用的技术论点，这些论点有助于Go在现代编程语言的激烈竞争中脱颖而出。我们通过探讨Go的各个方面，这些方面可以造福人们，特别是在网络和网络自动化领域，来结束本节。
- en: Non-technical reasons
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 非技术原因
- en: Whether you are new to the language or have some experience with it, you can
    access more experienced Go developers in the community who are willing to help
    you learn more about the language. We include some pointers to community resources
    and go through the adoption and popularity of Go.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是新手还是对语言有一些经验，你都可以访问社区中愿意帮助你学习更多关于语言的开发者。我们包括一些社区资源的指针，并讨论Go的采用和流行。
- en: Last but not least, we want to address the maturity of the language, whether
    it's still in development, and where Go is headed in the future.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们想要讨论语言的成熟度，它是否仍在开发中，以及Go未来的发展方向。
- en: Community
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 社区
- en: 'A healthy community is almost always an attribute of a successful project.
    The Go programming language is no exception, with its welcoming and growing community
    of Go developers—Gophers, with about 2 million of them in the world, according
    to Russ Cox''s article, *How Many Go Developers Are There?* (*Further reading*).
    You can see Renée French''s *Go Gopher* mascot here:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一个健康的社区几乎总是成功项目的特征。Go编程语言也不例外，它拥有一个欢迎且不断增长的Go开发者社区——Gophers，根据Russ Cox的文章《有多少Go开发者？》（*进一步阅读*），全世界大约有200万Gophers。您可以在以下位置看到Renée
    French的*Go Gopher*吉祥物：
- en: '![Figure 1.1 – Go Gopher, by Renée French ](img/B16971_01_01.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1 – Go Gopher，由Renée French绘制](img/B16971_01_01.jpg)'
- en: Figure 1.1 – Go Gopher, by Renée French
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 – Go Gopher，由Renée French绘制
- en: 'The Go user community has several places where newcomers can ask questions
    and get help from more experienced Go developers, as listed here:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Go用户社区有几个地方，新来者可以提问并获得经验丰富的Go开发者的帮助，如下所示：
- en: '*golang-nuts* mailing list (*Further reading*)—Google Groups mailing list for
    any generic language discussions'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*golang-nuts*邮件列表(*进一步阅读*)——Google Groups上的通用语言讨论邮件列表'
- en: '*Go Forum* (*Further reading*)—a standalone forum for technical discussions,
    release announcements, and community updates'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Go论坛* (*进一步阅读*)——一个独立的用于技术讨论、发布公告和社区更新的论坛'
- en: '*Go Language Collective* (*Further reading*)—the official **question-and-answer**
    (**Q&A**) channel on *Stack Overflow*'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Go语言集体* (*进一步阅读*)——Stack Overflow上的官方**问答**(**Q&A**)频道'
- en: '*Gophers* Slack channel (*Further reading*)—a place for generic and topic-specific
    discussions, including a dedicated networking channel'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Gophers* Slack频道(*进一步阅读*)——一个用于通用和特定主题讨论的地方，包括专门的社交网络频道'
- en: 'If you want more live interactions, there are some options available as well,
    as outlined here:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想有更多的现场互动，这里也有一些选项，如下所述：
- en: A good deal of in-person meetups are available via the **Go Developers Network**
    (**GDN**) (*Further reading*).
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过**Go开发者网络**（**GDN**）(*进一步阅读*)，有很多面对面聚会可供选择。
- en: One of the principal events in the Go community is *GopherCon*, held regularly
    in different parts of the world.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go社区中的一个主要活动是定期在世界不同地区举办的*GopherCon*。
- en: The official Go wiki page hosted on GitHub keeps track of all future and past
    Go conferences and major events (*Further reading*).
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub上官方的Go语言页面跟踪了所有未来的和过去的Go语言会议及重大事件(*进一步阅读*)。
- en: Popularity
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 流行度
- en: Ever since its foundation in the late 2000s, Go has gained a lot of interest
    from the developer community, not least because of who was behind it. Developed
    by a group of some of the best computer scientists employed by Google to solve
    the problems of C/C++, Go is a language that's both simple to understand and nearly
    as efficient as its predecessors. It took a few years to mature, but it had soon
    become the new hot start up language, and many up-and-coming software companies
    such as Docker and HashiCorp adopted it.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 自2000年代末成立以来，Go语言因其背后的开发者而受到了开发社区的广泛关注。由谷歌雇佣的一些最优秀的计算机科学家开发，Go语言易于理解，且几乎与前辈语言一样高效，用于解决C/C++的问题。它成熟需要了几年的时间，但很快成为了新的热门创业语言，许多新兴软件公司如Docker和HashiCorp都采用了它。
- en: Most recently, the *Stack Overflow Developer Survey 2021* (*Further reading*)
    recognized Go as one of the top three most wanted programming languages by developers.
    Continuous support from its mothership, and the success of Kubernetes, have made
    it a de facto standard language to write cloud-native applications with such notable
    projects as Istio, CoreDNS, Prometheus, and Grafana. As more and more users adopt
    these applications, it's hard to imagine Go's popularity waning in the future.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，*Stack Overflow Developer Survey 2021* (*进一步阅读*)将Go语言评为开发者最想要的三大编程语言之一。来自其母公司的持续支持以及Kubernetes的成功，使它成为编写云原生应用程序的事实上的标准语言，如Istio、CoreDNS、Prometheus和Grafana等知名项目。随着越来越多的用户采用这些应用程序，很难想象Go语言的流行度在未来会减弱。
- en: 'Here are a few extra data points in support of Go''s rising popularity that
    are worth mentioning:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些支持Go语言日益增长的流行度的额外数据点，值得提及：
- en: 225 out of 291 **Cloud Native Computing Foundation** (**CNCF**) projects use
    Go, as reported in the CNCF *DevStats* toolset (*Further reading*).
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据CNCF *DevStats*工具集的报告，291个项目中，有225个使用Go语言，(*进一步阅读*)。
- en: Go ranks third as the language with the most stars on GitHub, according to GitHut
    2.0 ([Further reading](https://github.com/PacktPublishing/Network-Automation-with-Go/blob/main/ch04/trie/main.go
    )).
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据GitHut 2.0的数据，Go语言在GitHub上拥有最多的星标，排名第三(*进一步阅读*(https://github.com/PacktPublishing/Network-Automation-with-Go/blob/main/ch04/trie/main.go
    )))。
- en: Go is behind three out of the four most popular development tools (Docker, Kubernetes,
    and Terraform) (*Further reading*).
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go语言背后支持了四个最受欢迎的开发工具中的三个（Docker、Kubernetes和Terraform）(*进一步阅读*)。
- en: Go is in the top 10 of the *Stack Overflow Developer Survey 2021*'s top-paying
    technologies ranking (*Further reading*).
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go在*Stack Overflow Developer Survey 2021*的顶级薪酬技术排名中位列前十(*进一步阅读*)。
- en: Maturity
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 成熟度
- en: 'While the Go team released Go (version 1) not too long ago (March 2012), Go
    has been getting minor changes ever since. The language designers assume a strict
    position against adding unnecessary features that may result in feature creep.
    At *GopherCon 2014*''s opening keynote, Rob Pike made this comment explicitly:
    "*The language is done*." Russ Cox also mentioned this in his article *Go, Open
    Source, Community* (*Further reading*), referring to Go 1 specifically.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Go 团队不久前（2012 年 3 月）发布了 Go（版本 1），但自那时起 Go 语言一直在进行一些小的改动。语言设计者坚持一个严格立场，反对添加可能引起功能膨胀的不必要特性。在
    *GopherCon 2014* 的开幕式主题演讲中，Rob Pike 明确表示：“*语言已经完成*。”Russ Cox 在他的文章 *Go, Open Source,
    Community* (*进一步阅读*) 中也提到了这一点，特别指的是 Go 1。
- en: This doesn't mean Go does not have its fair share of pain points. For example,
    dependency management has been a problem the Go team addressed fairly recently
    with the introduction of **Go modules** to better group Go packages you release
    together. There was also a lack of **generics** support, a feature that the Go
    team is now introducing in **Go 1.18**, probably the most significant change since
    the release of Go (version 1). Now, users can represent functions and data structures
    with generic types, which enables code reuse. This addresses one of the primary
    requests from the community, as *Go Developer Survey 2020 Results* shows (*Further
    reading*).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不意味着 Go 没有自己的痛点。例如，依赖管理是 Go 团队最近通过引入 **Go 模块** 来解决的一个问题，以更好地组织你一起发布的 Go 包。还有一个
    **泛型** 支持的缺乏，这是一个 Go 团队现在在 **Go 1.18** 中引入的特性，可能是自 Go（版本 1）发布以来最重大的变化。现在，用户可以使用泛型类型来表示函数和数据结构，这促进了代码的重用。这解决了社区的一个主要请求，正如
    *Go 开发者调查 2020 结果* 所示 (*进一步阅读*)。
- en: 'Despite that, these few changes are very selective and designed to dramatically
    improve developer productivity. It''s safe to assume that we won''t see a situation
    where you have to learn new language concepts and idioms every year and have to
    rewrite your code to maintain forward compatibility. The Go 1 compatibility guarantee
    in *Go 1 and the Future of Go Programs* (*Further reading*) states the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，这些少数改动非常具有选择性，旨在显著提高开发者的生产力。可以安全地假设，我们不会每年都要学习新的语言概念和习惯用法，并且需要重写代码以保持向前兼容性。*Go
    1 和 Go 程序的未来* (*进一步阅读*) 中关于 Go 1 兼容性的保证如下：
- en: It is intended that programs written to the Go 1 specification will continue
    to compile and run correctly, unchanged, over the lifetime of that specification.
    ...code that runs under Go 1.2 should be compatible with Go 1.2.1, Go 1.3, Go
    1.4, and so on.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 目的是编写符合 Go 1 规范的程序将在该规范的生命周期内继续编译和正确运行，保持不变。...在 Go 1.2 下运行的代码应该与 Go 1.2.1、Go
    1.3、Go 1.4 等版本兼容。
- en: Go benefits from the lessons learned from other programming languages. Pascal,
    Oberon, C, and Newsqueak are among the languages that influenced Go. We explore
    their impact in [*Chapter 2*](B16971_02.xhtml#_idTextAnchor040), *Go Basics*.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Go 语言受益于从其他编程语言中学到的经验。Pascal、Oberon、C 和 Newsqueak 是影响 Go 的一些语言。我们在 [*第二章*](B16971_02.xhtml#_idTextAnchor040)，*Go
    基础* 中探讨了它们的影响。
- en: Go follows a 6-month release cycle (*Further reading*). In the Go release notes
    for each version (*Further reading*), there is a section at the top that describes
    changes to the language, which in general is very brief or empty. Over the last
    couple of years, they reported only four small enhancements to the language, which
    is a good sign of maturity.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Go 遵循 6 个月的发布周期 (*进一步阅读*)。在每个 Go 版本的发布说明中 (*进一步阅读*)，顶部都有一个部分描述了语言的变化，通常非常简短或为空。在过去的几年里，他们只报告了四种对语言的微小增强，这是一个成熟的良好迹象。
- en: How much Go will change in the future is something we discuss in the next section.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 未来 Go 语言将会有多大变化是我们将在下一节讨论的内容。
- en: The future of Go
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go 的未来
- en: The success of Go version 1 has attracted a lot of developers, most of them
    with prior experience in other languages that helped shape their mindset and expectations
    of what a programming language should deliver. The Go team has defined a process
    to propose, document, and implement changes to Go (*Further reading*), to give
    a way for these new contributors to voice their opinions and influence the design
    of the language. They would label any proposals that break the language-compatibility
    guarantee, described in the preceding section, as Go 2.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Go 1版本的成功吸引了大量开发者，其中大多数人在其他语言中积累了经验，这些经验帮助他们塑造了对编程语言应该提供什么功能的思维和期望。Go团队定义了一个过程来提出、记录和实施对Go的更改（*进一步阅读*），为这些新贡献者提供一个表达意见和影响语言设计的方式。他们会将任何违反前述章节中描述的语言兼容性保证的提案标记为Go
    2。
- en: 'The Go team announced the start of the process of developing Go version 2 at
    *GopherCon 2017* and with the blog post *Go 2, here we come!* (*Further reading*).
    The intention is to ensure the language continues to enable programmers to develop
    large-scale systems, and to scale to a sizable code base that big teams work on
    simultaneously. In *Toward Go 2* (*Further reading*), Russ Cox said the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Go团队在*GopherCon 2017*上宣布了开发Go 2版本的过程，并在博客文章*Go 2，我们来了！*（*进一步阅读*）中进行了宣布。目的是确保语言能够继续使程序员能够开发大规模系统，并扩展到大型代码库，这些代码库是大型团队同时工作的。在*Toward
    Go 2*（*进一步阅读*）中，Russ Cox说：
- en: Our goal for Go 2 is to fix the most significant ways Go fails to scale.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对Go 2的目标是修复Go无法扩展的最重要方式。
- en: 'Any language change proposal needs to follow the Go 2 language change template
    (*Further reading*). They are shipping all Go 2 features that are backward-compatible
    incrementally in Go 1\. After that is complete, they can introduce backward-incompatible
    changes (see Go 2 proposals: *Further reading*), in case they offer a significant
    benefit, into Go 2.0\.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 任何语言更改提案都需要遵循Go 2语言更改模板（*进一步阅读*）。他们正在将所有向后兼容的Go 2功能增量地引入Go 1。完成之后，他们可以在Go 2.0中引入向后不兼容的更改（参见Go
    2提案：*进一步阅读*），如果它们提供了显著的好处。
- en: Support for generic data types is part of the Go 2 draft designs document (*Further
    reading*), along with improved error handling, and error-value semantics. The
    first implementation of generics has already made it into Go 1\. The other items
    in the list are still under evaluation, pushing the release of 2.0 further into
    the future.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 支持泛型数据类型是Go 2草案设计文档的一部分（*进一步阅读*），包括改进的错误处理和错误值语义。泛型的第一个实现已经进入Go 1。列表中的其他项目仍在评估中，这推动了2.0版本的发布进一步推迟。
- en: Technical reasons
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术原因
- en: Go's build speed is a top-of-the-chart aspect of Go that Go developers are more
    satisfied with, according to *Go Developer Survey 2020 Results* (*Further reading*).
    It's followed very closely by Go's reliability, in second place.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 根据根据*Go开发者调查2020结果*（*进一步阅读*），Go的构建速度是Go最令人满意的特点之一。它紧跟其后的是Go的可靠性，位居第二。
- en: The list of technical aspects we could highlight is large, but aside from build
    speed and reliability, we cover performance, cross-compiling, readability, and
    Go's tooling.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以强调的技术方面有很多，但除了构建速度和可靠性之外，我们还涵盖了性能、交叉编译、可读性和Go的工具。
- en: Type safety
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型安全
- en: Most programming languages can be broadly categorized as either statically typed
    when variable types are checked at compile time or dynamically typed when this
    check happens during the program execution (runtime). Go belongs to the first
    category and requires programs to declare all variable types explicitly. Some
    beginners or people with a background in dynamically typed languages might see
    this as a detractor.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数编程语言可以被广泛地分为两类：静态类型，当变量类型在编译时进行检查；或者动态类型，当这种检查在程序执行（运行时）期间发生。Go属于第一类，要求程序显式声明所有变量类型。一些初学者或者有动态类型语言背景的人可能会觉得这是一个缺点。
- en: 'Type declarations increase the amount of code that you need to write, but in
    return, you not only get performance benefits but also protection from type errors
    occurring at runtime, which can be a source of many subtle and hard-to-troubleshoot
    bugs. For example, consider the program in the next code example at [https://github.com/PacktPublishing/Network-Automation-with-Go/blob/main/ch01/type-safety/main.go](https://dev.maxmind.com/geoip/geolite2-free-geolocation-data
    ):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 类型声明会增加你需要编写的代码量，但作为回报，你不仅获得性能上的好处，还能在运行时避免类型错误，这些错误可能是许多微妙且难以调试的bug的来源。例如，考虑下一个代码示例中的程序，见[https://github.com/PacktPublishing/Network-Automation-with-Go/blob/main/ch01/type-safety/main.go](https://dev.maxmind.com/geoip/geolite2-free-geolocation-data)：
- en: '[PRE0]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A `process` function takes a `string` data type as input and returns another
    `string` that concatenates `Hello` and the value of the input string. A dynamically
    typed program can crash if this function receives a value of a type different
    from `string`, such as an integer, for example.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`process`函数接受一个`string`数据类型作为输入，并返回另一个将`Hello`和输入字符串的值连接起来的`string`。如果一个动态类型程序接收到与`string`类型不同的值，例如整数，那么它可能会崩溃。
- en: 'These errors are very common, especially when dealing with complex data structures
    that can represent a network configuration or state. Go''s static type checking
    prevents the compiler from producing a working binary generating the following
    error:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这些错误非常常见，尤其是在处理可以表示网络配置或状态的复杂数据结构时。Go的静态类型检查防止编译器生成产生以下错误的可工作二进制文件：
- en: '[PRE1]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Readability also improves with Go''s static typing. A developer might be able
    to keep the entire data model in mind when writing code from scratch, but as new
    users come into a project, code readability becomes critical to help them understand
    the logic to make their required code changes. No longer do they need to guess
    which value type a variable stores—everything is explicitly defined by the program.
    This feature is so valuable that some dynamically typed languages forgo the benefit
    of their brevity to introduce the support for type annotations (such as Python
    typing: *Further reading*), with the only goal to help **integrated development
    environments** (**IDEs**) and static linters catch obvious type errors.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Go的静态类型也提高了可读性。当从零开始编写代码时，开发者可能能够将整个数据模型牢记于心，但随着新用户加入项目，代码的可读性变得至关重要，有助于他们理解逻辑以进行所需的代码更改。他们不再需要猜测变量存储的值类型——所有内容都由程序显式定义。这个特性如此有价值，以至于一些动态类型语言放弃了它们简洁性的好处，以引入对类型注解的支持（例如Python类型：*进一步阅读*），唯一的目标是帮助**集成开发环境**（**IDE**）和静态代码检查器捕获明显的类型错误。
- en: Go builds are fast
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Go构建速度快
- en: 'Go is a compiled language that creates *small* binary files in seconds or a
    couple of minutes tops. Initial build time may be a bit longer, mostly because
    of the time it takes to download dependencies, generate extra code, and do other
    household activities. Subsequent builds run in a fraction of that time. For example,
    the next capture shows that it takes no more than 10 seconds to rebuild a 120-**megabytes**
    (**MB**) Kubernetes **application programming interface** (**API**) server binary:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Go是一种编译型语言，可以在几秒钟或最多几分钟内创建*小型*的二进制文件。初始构建时间可能稍长，主要是因为下载依赖项、生成额外代码和进行其他日常活动所需的时间。后续构建运行的时间只是其中的一小部分。例如，下一个截图显示，重新构建一个120-**兆字节**（**MB**）的Kubernetes应用程序编程接口（**API**）服务器二进制文件不超过10秒：
- en: '[PRE2]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This allows you to iterate quickly through the development process and to keep
    focus, without spending minutes waiting for code to recompile. Some developer
    productivity tools, such as Tilt, take further actions to optimize the development
    workflow so that it takes seconds for changes to propagate from a developer's
    IDE to their local staging environment.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这让你能够快速迭代开发过程，并保持专注，无需花费几分钟等待代码重新编译。一些开发者生产力工具，如Tilt，会采取进一步措施优化开发工作流程，使得从开发者的IDE到本地预发布环境的变化只需几秒钟。
- en: Reliability
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可靠性
- en: 'Let''s define this term as a set of properties of a programming language that
    help developers write programs that are less likely to fail because of bugs and
    other failure conditions, as Jiantao Pan from **Carnegie Mellon University** (**CMU**)
    describes in *Software Reliability* (*Further reading*). This is one of Go''s
    core tenets, as its website (*Further reading*) highlights:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这个术语定义为编程语言的一系列属性，这些属性有助于开发者编写更不容易因bug和其他故障条件而失败的程序，正如卡内基梅隆大学（**CMU**）的Jiantao
    Pan在*软件可靠性*（*进一步阅读*）中所描述的那样。这是Go的核心原则之一，正如其网站（*进一步阅读*）所强调的：
- en: Build fast, reliable, and efficient software at scale.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 大规模快速、可靠和高效地构建软件。
- en: Go developers also say reliability is the second aspect of Go they are most
    satisfied with, only behind build speed, based on *Go Developer Survey 2020 Results*
    (*Further reading*).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 *2020 年 Go 开发者调查结果*（*进一步阅读*），Go 开发者也表示可靠性是他们最满意的 Go 的第二个方面，仅次于构建速度。
- en: 'A more reliable software means less time spent chasing bugs and more time invested
    in the design and development of extra features. We''ve tried to put together
    a set of features that we think contribute to increased program reliability. This
    is not a definitive list, though, as interpretation and attribution of such features
    can be very subjective. Here are the features we''ve included:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 更可靠的软件意味着花费在追踪错误上的时间更少，更多的时间投入到额外功能的设计和开发中。我们试图汇集一组我们认为有助于提高程序可靠性的功能。但这并不是一个最终列表，因为对这些功能的解释和归因可能非常主观。以下是包含的功能：
- en: '**Code complexity**—Go is a minimalistic language by design. This translates
    into simpler and less error-prone code.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码复杂性**—Go 语言设计上是一种简约语言。这转化为更简单、错误更少的代码。'
- en: '**Language stability**—Go comes with strong compatibility guarantees, and the
    design team tries to limit the number and impact of newly added features.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语言稳定性**—Go 语言提供了强大的兼容性保证，设计团队试图限制新添加的功能的数量和影响。'
- en: '**Memory safety**—Go prevents unsafe memory access, which is a common source
    of bugs and exploits in languages with pointer arithmetic, such as C and C++.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存安全**—Go 语言防止不安全的内存访问，这是在具有指针运算的语言（如 C 和 C++）中常见的错误和漏洞来源。'
- en: '**Static typing**—Compile-time type-safety checks catch many common bugs that
    would otherwise go unnoticed in dynamically typed languages.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静态类型**—编译时类型安全性检查捕获了许多在动态类型语言中否则可能被忽视的常见错误。'
- en: '`go vet`.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`go vet`。'
- en: Performance
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 性能
- en: Go is a highly performant language. The *Computer Language Benchmarks Game*
    (*Further reading*) shows that its performance is in the vein of languages with
    manual memory management, such as C/C++ and Rust, and that it offers considerably
    better performance than dynamic type languages such as Python and Ruby.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Go 是一种高性能的语言。*计算机语言基准测试游戏*（*进一步阅读*）显示，其性能与手动内存管理的语言（如 C/C++ 和 Rust）相似，并且它提供了比动态类型语言（如
    Python 和 Ruby）更好的性能。
- en: It has native support for multi-core multithreaded **central processing unit**
    (**CPU**) architectures, allowing it to scale beyond a single thread and to optimize
    the use of CPU caches.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 它原生支持多核多线程 **中央处理器**（**CPU**）架构，允许其扩展到单个线程以上，并优化 CPU 缓存的利用。
- en: Go's built-in **garbage collector** helps you keep the memory footprint of your
    program low, and Go's explicit type declaration optimizes memory management and
    storage of values.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Go 的内置 **垃圾回收器**帮助您保持程序的低内存占用，Go 的显式类型声明优化了内存管理和值的存储。
- en: The Go runtime gives you profiling data, which you can visualize with `pprof`
    to help you hunt for memory leaks or spot bottlenecks in your program and fine-tune
    your code to achieve better performance and optimize resource utilization.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Go 运行时为您提供分析数据，您可以使用 `pprof` 进行可视化，以帮助您查找程序中的内存泄漏或瓶颈，并微调您的代码以实现更好的性能和优化资源利用。
- en: For more details on this subject, we recommend checking out Dave Cheney's *Five
    things that make Go fast* blog post (*Further reading*).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个主题的更多细节，我们建议查看 Dave Cheney 的 *五个使 Go 运行快的因素* 博客文章（*进一步阅读*）。
- en: Cross-platform compiling
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 跨平台编译
- en: Go can natively produce binaries for different target architectures and operating
    systems. At the time of writing, the `go tool dist list` command returns 45 unique
    combinations with operating systems ranging from Android to Windows and instruction
    sets that go from `PowerPC` to `ARM`. You can change the default values inherited
    from the underlying operating system and architecture with `GOOS` and `GOARCH`
    environment variables.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Go 可以原生为不同的目标架构和操作系统生成二进制文件。在撰写本文时，`go tool dist list` 命令返回了 45 种独特的组合，操作系统范围从
    Android 到 Windows，指令集从 `PowerPC` 到 `ARM`。您可以使用 `GOOS` 和 `GOARCH` 环境变量更改从底层操作系统和架构继承的默认值。
- en: 'You can build an operating system-native version of your favorite tool written
    in Go, regardless of which operating system you are currently on, as illustrated
    in the following code snippet:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您目前使用的是哪个操作系统，您都可以构建一个用 Go 编写的、操作系统本地的版本，如下面的代码片段所示：
- en: '[PRE3]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding output shows an example to create a Windows executable on a Linux
    machine.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 上述输出显示了在 Linux 机器上创建 Windows 可执行文件的示例。
- en: Readability
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可读性
- en: This is, arguably, one of the best qualities of Go when compared to other high-performance
    languages such as C or C++. The Go programming language specification (*Further
    reading*) is relatively short, with around 90 pages (when other language specifications
    can span over 1,000 pages). It includes only 25 keywords, with only one for loop
    (`for`). The number of features is intentionally low to aid code clarity and to
    prevent people from developing too many language idioms or best practices.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以说是与 C 或 C++ 等其他高性能语言相比，Go 的最佳特性之一。Go 编程语言规范（*进一步阅读*）相对较短，大约有 90 页（而其他语言的规范可能超过
    1,000 页）。它只包含 25 个关键字，只有一个用于循环（`for`）。功能数量有意降低，以帮助代码清晰，并防止人们开发出过多的语言习惯或最佳实践。
- en: Code formatting is an active battleground in other languages, while Go prevented
    this problem early on by shipping automatic opinionated formatting as part of
    the `go` command. A single run of `go fmt` on any unformatted (but syntactically
    correct) code updates the source file with the right amount of indentation and
    line breaks. This way, all Go programs have a similar look, which improves readability
    by reducing the number of personal style preferences in code.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 代码格式化在其他语言中是一个活跃的战场，而 Go 通过将自动的、有偏见的格式化作为 `go` 命令的一部分来防止了这个问题。对任何未格式化（但语法正确）的代码运行一次
    `go fmt`，就会用正确数量的缩进和换行更新源文件。这样，所有 Go 程序都有相似的外观，通过减少代码中的个人风格偏好数量来提高可读性。
- en: 'Some might say that explicit type declarations alone improve code readability,
    but Go takes this a step further by making comments an integral part of the code
    documentation. All commented lines preceding any function, type, or variable declaration
    gets parsed by the `go doc` tool website (*Further reading*) or an IDE to autogenerate
    code documentation, as the following screenshot shows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人可能会说，仅显式类型声明就能提高代码可读性，但 Go 通过将注释作为代码文档的组成部分进一步推进了这一点。任何函数、类型或变量声明之前的所有注释行都会被
    `go doc` 工具网站（*进一步阅读*）或 IDE 解析，以自动生成代码文档，如下面的截图所示：
- en: '![Figure 1.2 – Automatic code documentation ](img/B16971_01_02.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2 – 自动代码文档](img/B16971_01_02.jpg)'
- en: Figure 1.2 – Automatic code documentation
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – 自动代码文档
- en: 'Most modern IDEs have plugins that support not only documentation but automatic
    code formatting with `go fmt`, code linting and autocompletion, debugging, and
    a language server—a tool that allows developers to navigate through the code by
    going back and forth between type, variable, and function declarations and their
    references (`gopls`, the Go language server: *Further reading*). This last feature
    not only allows you to navigate code bases of any complexity without having to
    resolve import statements manually or search for string patterns in text, but
    also highlights any type inconsistencies on the fly before you compile a program.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代集成开发环境（IDE）都提供了插件，不仅支持文档，还支持使用 `go fmt` 进行自动代码格式化、代码检查和自动补全、调试以及语言服务器——一个允许开发者通过在类型、变量和函数声明及其引用之间来回导航来遍历代码的工具（`gopls`，Go
    语言服务器：*进一步阅读*）。这个最后的功能不仅允许你无需手动解决导入语句或搜索文本中的字符串模式就能导航任何复杂性的代码库，而且在你编译程序之前即时突出显示任何类型的不一致性。
- en: Tooling
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工具集
- en: 'When setting up a new environment, one of the first things a typical developer
    would do is download and install a set of their favorite language tools and libraries
    to help with testing, formatting, dependency management, and so on. Go comes with
    all these utilities included by default, which are part of the `go` command. The
    following table summarizes some Go built-in tools and their purpose:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当设置新环境时，一个典型的开发者会做的第一件事就是下载并安装他们最喜欢的语言工具和库，以帮助进行测试、格式化、依赖管理等等。Go 默认包含了所有这些实用工具，它们是
    `go` 命令的一部分。以下表格总结了某些 Go 内置工具及其用途：
- en: '![Table 1.1 – Go tools ](img/B16971_01_Table_1.1.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![表 1.1 – Go 工具](img/B16971_01_Table_1.1.jpg)'
- en: Table 1.1 – Go tools
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1.1 – Go 工具
- en: These are just a few of the most popular tools that get shipped together with
    the Go binary. This certainly reduces the room for creativity in the tooling ecosystem
    by giving developers a default choice that is good enough for most average use
    cases. Another benefit of this artificial scarcity is not having to reinstall
    and relearn a new set of tools every time you switch between different Go projects.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是与 Go 二进制文件一起提供的最流行的工具中的一小部分。这无疑减少了工具生态系统中的创造性空间，因为它为开发者提供了一个足够好的默认选择，适用于大多数平均用例。这种人为稀缺的另一个好处是，每次在不同
    Go 项目之间切换时，无需重新安装和重新学习一套新工具。
- en: Go for networking
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Go 语言用于网络
- en: Some network automation processes can trigger hundreds—if not thousands—of simultaneous
    connections to network devices. Being able to orchestrate this at scale is one
    of the things that Go enables us to do.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一些网络自动化流程可以触发数百甚至数千个同时连接到网络设备。能够大规模地协调这些操作是 Go 语言使我们能够做到的事情之一。
- en: 'You can see Egon Elbre''s *Network Gopher* mascot in the following screenshot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下屏幕截图中看到 Egon Elbre 的 *网络松鼠* 图标：
- en: '![Figure 1.3 – Network Gopher, by Egon Elbre ](img/Figure_1.3.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3 – 网络松鼠，由 Egon Elbre 创作](img/Figure_1.3.jpg)'
- en: Figure 1.3 – Network Gopher, by Egon Elbre
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – 网络松鼠，由 Egon Elbre 创作
- en: Go comes with a strong networking package that offers you all the constructs
    to create network connections, packages to encode and decode data from popular
    formats, and primitives to work with bits and bytes.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Go 语言自带强大的网络包，提供了创建网络连接的所有构造，用于从流行格式编码和解码数据的包，以及用于处理位和字节的原始数据类型。
- en: Concurrency
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 并发
- en: Go has first-class support for concurrency with the help of lightweight threads
    managed by the Go runtime, called **goroutines**. This language construct makes
    it possible to embed asynchronous functions into an otherwise sequential program.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Go 语言通过 Go 运行时管理的轻量级线程（称为 **goroutines**）提供了第一级的并发支持。这种语言结构使得将异步函数嵌入到其他情况下顺序执行的程序中成为可能。
- en: Any function call that you prepend with the `go` keyword runs in a separate
    goroutine—different from the main application goroutine—that does not block execution
    of the calling program.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 任何以 `go` 关键字开头的前缀函数调用都在一个单独的 goroutine 中运行——与主应用程序 goroutine 不同——它不会阻塞调用程序的执行。
- en: Channels are another language feature that allows communication between goroutines.
    You can think of it as a **first-in, first-out** (**FIFO**) queue with sending
    and receiving ends existing in two different goroutines.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Channels 是另一种语言特性，允许 goroutines 之间的通信。你可以将其视为一个 **先进先出**（**FIFO**）队列，发送和接收端存在于两个不同的
    goroutines 中。
- en: 'Together, these two powerful language constructs offer a way to write concurrent
    code in a safe and uniform way that allows you to connect to various networking
    devices simultaneously, without paying the tax of running an operating system
    thread for each one. For example, consider the following program in the next code
    example ([https://github.com/PacktPublishing/Network-Automation-with-Go/blob/main/ch01/concurrency/main.go](https://github.com/PacktPublishing/Network-Automation-with-Go/blob/main/ch04/geo/main.go
    )) that simulates interaction with remote network devices:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个强大的语言结构共同提供了一种以安全且统一的方式编写并发代码的方法，允许你同时连接到各种网络设备，而无需为每个设备运行一个操作系统线程。例如，考虑以下代码示例中的程序（[https://github.com/PacktPublishing/Network-Automation-with-Go/blob/main/ch01/concurrency/main.go](https://github.com/PacktPublishing/Network-Automation-with-Go/blob/main/ch04/geo/main.go)），该程序模拟与远程网络设备的交互：
- en: '[PRE4]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Connecting to remote devices can take a long time, and it would normally block
    the execution of the rest of the program. With the `connect` function running
    in a goroutine, as illustrated in the following code snippet, our program can
    continue its execution, and we can come back and collect the responses at any
    point in the future:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到远程设备可能需要很长时间，通常这会阻塞程序其他部分的执行。通过在 goroutine 中运行 `connect` 函数，如以下代码片段所示，我们的程序可以继续执行，我们可以在未来的任何时刻返回并收集响应：
- en: '[PRE5]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As the remote devices process the requests and return a response, our program
    starts printing the responses in the order it receives them.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当远程设备处理请求并返回响应时，我们的程序开始按照接收到的顺序打印响应。
- en: Strong standard library
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 强大的标准库
- en: 'Go has a versatile standard library that covers different areas that may be
    applicable to networking—from cryptography to data encoding, from string manipulation
    to `net` and `encoding` offer interfaces for both client- and server-side network
    interactions, including the following:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Go 拥有一个功能丰富的标准库，涵盖了可能适用于网络的不同领域——从密码学到数据编码，从字符串操作到 `net` 和 `encoding` 提供了客户端和服务器端网络交互的接口，包括以下内容：
- en: '**Internet Protocol** (**IP**) prefix parsing and comparison functions'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**互联网协议** (**IP**) 前缀解析和比较函数'
- en: Client and server implementations for IP, **Transmission Control Protocol/User
    Datagram Protocol** (**TCP/UDP**), and **HyperText Transfer Protocol** (**HTTP**)
    connections
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IP、**传输控制协议/用户数据报协议** (**TCP/UDP**) 和 **超文本传输协议** (**HTTP**) 连接的客户端和服务器实现
- en: '**Domain Name System** (**DNS**) lookup functions'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**域名系统** (**DNS**) 查找函数'
- en: '**Uniform Resource Locator** (**URL**) parsing and manipulations'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**统一资源定位符** (**URL**) 解析和操作'
- en: Serializing data formats such as **Extensible Markup Language** (**XML**), binary,
    and **JavaScript Object Notation** (**JSON**) for storage or transmission
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据格式序列化为 **可扩展标记语言** (**XML**)、二进制和 **JavaScript 对象表示法** (**JSON**) 以进行存储或传输
- en: Unless you have unique performance requirements, for example, most Go developers
    recommend against using external libraries for logic that can otherwise be implemented
    natively with the standard library. All standard packages are thoroughly tested
    with each release and used extensively in several large-scale projects. All this
    creates a better learning experience for newcomers because most-often-used data
    structures and functions are there already.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你有独特的性能要求，例如，大多数 Go 开发者不建议使用外部库来实现可以用标准库本地实现的逻辑。所有标准包在每个版本中都经过彻底测试，并在多个大型项目中广泛使用。所有这些为新用户提供更好的学习体验，因为最常用的数据结构和函数已经存在。
- en: Data streaming
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据流
- en: Network services are I/O-bound in general—they read or write bytes from or to
    the network. This mode of operation is how data streaming works in Go, which makes
    it appealing to network engineers who are familiar with byte processing for network
    protocol parsing, for example.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 网络服务通常都是 I/O 密集型的——它们从网络读取或写入字节。这种操作模式是 Go 中数据流式传输的工作方式，这使得它对熟悉网络协议解析字节处理的网络工程师具有吸引力。
- en: 'I/O operations in Go follow a model where a **Reader** reads data from a source,
    which can stream as an array of bytes to a **Writer** that writes that data to
    a destination. The following diagram should give you a clearer picture of what
    this means:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Go 中的 I/O 操作遵循一种模型，其中 **Reader** 从源读取数据，该数据可以作为一个字节数组流式传输到 **Writer**，而 **Writer**
    将数据写入目标。以下图表应该能更清晰地展示这层含义：
- en: '![Figure 1.4 – Streaming from a network connection to a file example ](img/B16971_01_04.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4 – 从网络连接到文件流式传输示例](img/B16971_01_04.jpg)'
- en: Figure 1.4 – Streaming from a network connection to a file example
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – 从网络连接到文件流式传输示例
- en: A `Reader` is an interface that can read from a file, a cipher, a shell command,
    or a network connection, for example. You can then stream the data you capture
    to a `Writer` interface, which could also be a file or most of the other `Reader`
    examples.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`Reader` 是一个接口，可以从文件、加密、shell 命令或网络连接等读取。然后，您可以将捕获到的数据流式传输到 `Writer` 接口，该接口也可以是文件或大多数其他
    `Reader` 示例。'
- en: The Go standard library offers these streaming interfaces, such as `net.Conn`,
    that, in this case, allow you to read and write from a network connection, transfer
    data between interfaces, and transform this data if needed. We cover this topic
    in much more detail in [*Chapter 3*](B16971_03.xhtml#_idTextAnchor067), *Getting
    Started* *with Go*.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Go 标准库提供了这些流式接口，例如 `net.Conn`，在这种情况下，允许您从网络连接中读取和写入，在接口之间传输数据，并在需要时转换这些数据。我们将在
    [*第 3 章*](B16971_03.xhtml#_idTextAnchor067)，*Go 入门* 中更详细地介绍这个主题。
- en: While there are other variables to consider when selecting a programming language
    to work with, such as which one your company is currently using or which one you
    feel more comfortable with, our goal is to equip you with all the resources to
    understand what makes Go so appealing to large-scale system developers. If you
    want to begin in familiar territory, we compare and contrast Go with Python next.
    Python is the most popular programming language used for network automation today.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 当选择编程语言时，除了考虑公司目前使用的是哪种语言或哪种语言让你感到更舒适等变量外，我们的目标是为你提供所有资源，让你了解是什么让Go对大规模系统开发者如此有吸引力。如果你想从熟悉的地方开始，我们将接下来比较和对比Go与Python。Python是目前用于网络自动化最受欢迎的编程语言。
- en: Go versus Python
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go与Python的比较
- en: The topic of comparing programming languages can very quickly turn into a heated
    debate. We believe all languages have their merits and we don't want to advocate
    for one being better than the other. Still, we do acknowledge that most people
    with a network automation background would know and use Python, so it would make
    sense to present some form of comparison between the two languages and highlight
    some of their most salient points.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 比较编程语言的议题可以迅速演变成一场激烈的辩论。我们相信所有语言都有其优点，我们不想鼓吹一种语言比另一种更好。然而，我们确实承认，大多数拥有网络自动化背景的人都会知道并使用Python，因此，展示两种语言之间的某种形式的比较，并突出它们最显著的特点是有意义的。
- en: Code execution
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码执行
- en: One of the biggest differences that affect the developer experience is how you
    distribute and execute your code.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 影响开发者体验的最大差异之一是如何分发和执行你的代码。
- en: Python programs require an interpreter to run on a target machine and access
    to all library dependencies. While there are projects such as Nuitka to compile
    Python, you need commercial support to obfuscate your source code, for example.
    Having all source code available allows you to make changes and iterate quickly
    when developing a feature or troubleshooting a bug.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Python程序需要在目标机器上运行解释器，并访问所有库依赖项。虽然有一些像Nuitka这样的项目可以将Python编译成，但你需要商业支持来混淆你的源代码，例如。拥有所有源代码可以让你在开发功能或调试错误时快速进行更改和迭代。
- en: Go programs do not require an interpreter, as you distribute them as a compiled
    binary file. Compiling to machine code may seem like an unnecessary hurdle, but
    compilation takes only a few seconds, and the resulting binary has all its required
    dependencies, so it's the only file that needs to exist on the target system.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Go程序不需要解释器，因为你可以将它们作为编译的二进制文件分发。将代码编译成机器代码可能看起来像是一个不必要的障碍，但编译只需要几秒钟，生成的二进制文件包含所有所需的依赖项，因此它是唯一需要在目标系统上存在的文件。
- en: Type system
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型系统
- en: Go requires all variable types to be statically defined, with type inference
    allowed only during initial variable declaration.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Go要求所有变量类型都必须在静态定义，只有在初始变量声明期间才允许类型推断。
- en: Although generics are making their way into Go, they do not allow the same amount
    of freedom as a Python type system. A lack of explicit type declaration makes
    Python a more approachable language for beginners and for use cases where development
    speed is more important than code robustness. However, as Python projects become
    more mature, they must make up for these initial gains by putting more focus on
    testing.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然泛型正在进入Go，但它们并不像Python类型系统那样提供相同的自由度。缺乏显式类型声明使得Python对于初学者以及开发速度比代码健壮性更重要的用例来说是一个更易接近的语言。然而，随着Python项目的日益成熟，它们必须通过更多地关注测试来弥补这些初始的收益。
- en: Performance
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能
- en: 'Go programs perform better when compared to Python across a wide range of use
    cases (see *The Computer Language Benchmarks Game*: *Further reading*). This is,
    in part, an outcome of the points we already mentioned in this section, but it''s
    also the result of the effort the Go team has put into optimizing the language.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 与Python相比，Go程序在广泛的用例中表现更好（参见*The Computer Language Benchmarks Game*：*进一步阅读*）。这在一定程度上是我们已经在本节中提到的观点的结果，但也是Go团队投入优化语言的成果。
- en: While things such as goroutines and type definition give Go developers enough
    tools to write high-performance code, each Go release brings new improvements
    in memory management and compiler optimizations that make code execution faster
    in the background.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管goroutines和类型定义为Go开发者提供了足够的工具来编写高性能代码，但每个Go版本都会带来新的内存管理和编译器优化改进，使代码在后台执行更快。
- en: Ease of use
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 易用性
- en: Python is a language designed to be used for teaching and prototyping. At the
    same time, it's versatile and powerful enough to write complex programs such as
    web servers (Flask, Django), **machine learning** (**ML**) frameworks (PyTorch,
    TensorFlow), and infrastructure software (RabbitMQ, Ansible).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种设计用于教学和原型设计的语言。同时，它足够灵活和强大，可以编写复杂的程序，例如网络服务器（Flask、Django）、**机器学习**（**ML**）框架（PyTorch、TensorFlow）和基础设施软件（RabbitMQ、Ansible）。
- en: As the number of Python projects you work on grows, maintaining different virtual
    environments for dependency and environment management might become a hassle.
    This is an area where Go shines, with its self-hosted dependency manager and statically
    linked binaries.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你参与的 Python 项目的数量增加，维护不同的虚拟环境以进行依赖和环境管理可能会变得麻烦。这是 Go 闪耀的地方，它拥有自托管的依赖管理器和静态链接的二进制文件。
- en: Despite that, Python continues to hold its dominant position as the most approachable
    language with a large open source community and is unlikely to relinquish it any
    time soon.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，Python 仍然保持着作为最具亲和力的语言的主导地位，拥有庞大的开源社区，并且不太可能在短期内放弃这一地位。
- en: Memory management
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内存管理
- en: Both languages use dynamic memory management with automatic garbage collection.
    Most of the time, you wouldn't need to and are not advised to change any of the
    default settings, although both languages expose a few threshold variables that
    can be fine-tuned if needed.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 两种语言都使用动态内存管理，并具有自动垃圾回收功能。大多数时候，你不需要也不建议更改任何默认设置，尽管两种语言都公开了一些阈值变量，如果需要可以对其进行微调。
- en: The biggest difference comes from the fact that Go allocates memory based on
    a more precise set of data types and that it does static memory allocation at
    compile time in the stack for goroutines and functions, and only a subset of variables
    escape to the heap. In contrast, Python treats everything as an object, so even
    the most primitive types, such as `int` or `string`, are considerably larger,
    and they are dynamically allocated memory at runtime (in the heap).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 最大的区别来自于 Go 根据一组更精确的数据类型来分配内存，并且它在编译时在栈中为 goroutines 和函数进行静态内存分配，只有一小部分变量逃逸到堆中。相比之下，Python
    将所有内容都视为对象，即使是像 `int` 或 `string` 这样最原始的类型，也相当大，它们在运行时（在堆中）动态分配内存。
- en: Access to memory in the heap is not only slower but also needs to be garbage-collected,
    which adds an overhead to the program execution.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 访问堆中的内存不仅速度较慢，还需要进行垃圾回收，这给程序执行增加了开销。
- en: Syntax
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语法
- en: Python has a very lightweight syntax and uses indentation to separate different
    blocks of code. The lack of trailing semicolons and excessive curly braces make
    it comprehensible, but writing it without an IDE—which would automatically manage
    the indentation—can be a challenge.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Python 语法非常轻量级，使用缩进来区分不同的代码块。没有尾随的分号和过多的花括号使得代码易于理解，但如果没有使用集成开发环境（IDE）——它会自动管理缩进——编写代码可能会是一个挑战。
- en: Go never considered white space for indentation, as the language designers don't
    believe having your semantics depend on invisible characters is a good idea. This,
    of course, comes down to personal preferences; formats such as **YAML Ain't Markup
    Language** (**YAML**), for example, also use spaces to structure data.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Go 从未考虑空白字符用于缩进，因为语言设计者不相信让语义依赖于不可见字符是一个好主意。当然，这取决于个人偏好；例如，**YAML Ain't Markup
    Language**（**YAML**）这样的格式也使用空格来结构化数据。
- en: Go benefits from its built-in formatting tool that auto-indents the code and
    makes it look neat by automatically inserting blank lines in certain places. Also,
    Go developers use blank lines to split logically separate a set of lines in a
    function that makes the final program less dense and easier to read.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Go 从其内置的格式化工具中受益，该工具自动缩进代码，并通过在特定位置自动插入空白行使代码看起来整洁。此外，Go 开发者使用空白行来逻辑上分隔函数中的一组行，这使得最终程序更稀疏且易于阅读。
- en: Failure handling
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 故障处理
- en: 'Another big difference is in error handling. Python uses implicit error handling
    as a convention by relying on exceptions that can be carefully caught in parts
    of code where you expect them to happen. This keeps in line with Python''s readability
    and ease-of-use nature. Go uses explicit error checks, and most functions have
    errors as the last positional return value. This often results in the code looking
    like this:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个很大的区别在于错误处理。Python 通过依赖异常作为惯例来使用隐式错误处理，这些异常可以在你预期它们发生的代码部分被小心捕获。这符合 Python
    的可读性和易用性。Go 使用显式错误检查，并且大多数函数将错误作为最后一个位置返回值。这通常会导致代码看起来像这样：
- en: '[PRE6]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Although this makes a program more robust by forcing the developers to always
    think about the returned error and act on it as soon as it happens, this does
    create a lot of visual noise that human brains quickly learn to ignore. This is
    a recurrent topic in the Go community and one of the areas that Go version 2 is
    putting a focus on. The Go 2 draft design document for error handling covers the
    problem and proposal in detail (*Further reading*).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这通过迫使开发者始终考虑返回的错误并在发生时立即采取行动，使程序更加健壮，但这确实会产生大量的视觉噪音，人类大脑很快就会学会忽略它。这是 Go 社区反复讨论的话题之一，也是
    Go 2 版本重点关注的领域之一。Go 2 错误处理草案设计文档详细介绍了问题和建议（*进一步阅读*）。
- en: Concurrency
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并发
- en: Concurrency has not only been a feature of Go since day one but also one of
    the key drivers behind the creation of Go in the first place. Go has enough first-class
    language constructs to deal with most common concurrency challenges, such as communication
    between processes and access to shared resources.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 并发不仅自 Go 诞生以来就是 Go 的一个特性，也是 Go 创造背后的关键驱动力之一。Go 有足够的顶级语言结构来处理大多数常见的并发挑战，例如进程间的通信和对共享资源的访问。
- en: By contrast, you cannot run more than two or more Python threads at the same
    time because the **Global Interpreter Lock** (**GIL**) prevents it, which the
    Python language designers made part of the language early on. This is unless you
    architect your program to use the threading library. The GIL has performance benefits
    for single-threaded programs, and removing it from the language has been a recurrent
    topic in the Python community.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 与之相反，你无法同时运行两个或更多的 Python 线程，因为 **全局解释器锁** (**GIL**) 阻止了这一点，Python 语言设计者在早期就将它作为语言的一部分。除非你设计你的程序来使用线程库。GIL
    对单线程程序有性能上的好处，而移除它一直是 Python 社区反复讨论的话题。
- en: To implement concurrency, Python makes you run multiple processes to leverage
    all the CPUs that you have at your disposal (multiprocessing or concurrency pools).
    Over time, different libraries have attempted to improve the performance and `asyncio`.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现并发，Python 让你运行多个进程来利用你拥有的所有 CPU（多进程或并发池）。随着时间的推移，不同的库试图改进性能和 `asyncio`。
- en: Despite that, better concurrency and parallelism are in the top three most desired
    features to add to Python, according to *Python Developers Survey 2020 Results*
    (*Further reading*). Most Python developers don't like the current implementation,
    as writing concurrent code in Python can be challenging and requires the use of
    compatible libraries.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，更好的并发性和并行性是 Python 开发者调查 2020 年结果中排名前三的最希望添加的功能之一（*进一步阅读*）。大多数 Python 开发者不喜欢当前的实现，因为在
    Python 中编写并发代码可能具有挑战性，并且需要使用兼容的库。
- en: Community
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 社区
- en: 'Being the more popular language of the two, Python has a larger community with
    a huge number of open source libraries and frameworks. Although its major use
    cases are data analysis, web development, and ML (*Python Developers Survey 2020
    Results*: *Further reading*), today you can find libraries that deal with anything
    from game development to desktop plugins.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 作为两种语言中更受欢迎的一种，Python 拥有一个更大的社区，拥有大量的开源库和框架。尽管其主要用例是数据分析、Web 开发和机器学习（*2020 年
    Python 开发者调查结果*：*进一步阅读*），但今天你可以找到处理从游戏开发到桌面插件等任何内容的库。
- en: Most importantly, Python is the most popular language for network automation
    and has amassed many libraries and frameworks to work with network devices. Go
    has been more systems- and performance-centric, so we don't see as many network
    libraries and tools. Still, one heavy user of Go in the network engineering community
    has been the OpenConfig ecosystem, which today includes almost a dozen different
    projects written in Go.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，Python 是网络自动化的最流行语言，积累了大量用于与网络设备一起工作的库和框架。Go 更注重系统和性能，所以我们看不到太多的网络库和工具。尽管如此，网络工程社区中
    Go 的一个主要用户是 OpenConfig 生态系统，它今天包括几乎十多个用 Go 编写的不同项目。
- en: Go is being rapidly adopted by web-scale companies, which means we are likely
    to see more network-related projects appearing in the future.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Go 正在被 Web 规模的公司迅速采用，这意味着我们很可能会在未来看到更多与网络相关的项目出现。
- en: We hope this gives you a perspective and appreciation of the Go language features.
    The next step is to install Go on your computer.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望这能给你一个对 Go 语言特性的视角和欣赏。下一步是在你的计算机上安装 Go。
- en: Installing Go on your computer
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在你的计算机上安装 Go
- en: The Go download and install instructions ([https://golang.org/doc/install#install](https://github.com/c-robinson/iplib
    )) require you to download a file from [https://go.dev/](https://github.com/PacktPublishing/Network-Automation-with-Go/blob/main/ch04/ipaddr/main.go
    ) and follow a couple of instructions. We include here the steps for **Go version
    17.7**, which is the latest version available at the time of writing. Newer versions
    of Go 1 should continue to work.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Go的下载和安装说明（[https://golang.org/doc/install#install](https://github.com/c-robinson/iplib)）要求你从[https://go.dev/](https://github.com/PacktPublishing/Network-Automation-with-Go/blob/main/ch04/ipaddr/main.go)下载一个文件并遵循一些说明。我们在此包括**Go版本17.7**的步骤，这是撰写时的最新版本。Go
    1的新版本应该继续工作。
- en: Windows
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows
- en: 'To install Go on Windows, follow these steps:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Windows上安装Go，请按照以下步骤操作：
- en: Download [https://golang.org/dl/go1.17.7.windows-amd64.msi](https://github.com/cloudprober/cloudprober
    ).
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 [https://golang.org/dl/go1.17.7.windows-amd64.msi](https://github.com/cloudprober/cloudprober).
- en: Execute the `go1.17.7.windows-amd64.msi` file and follow the instructions.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`go1.17.7.windows-amd64.msi`文件并按照说明操作。
- en: Open the `cmd`) and run `go version` to verify the installation.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符（`cmd`）并运行`go version`以验证安装。
- en: Mac
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mac
- en: 'If you have Homebrew installed, you can run `brew install go`. Otherwise, you
    can follow these steps:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经安装了Homebrew，你可以运行`brew install go`。否则，你可以按照以下步骤操作：
- en: Download [https://golang.org/dl/go1.17.7.darwin-amd64.pkg](https://github.com/PacktPublishing/Network-Automation-with-Go/tree/main/ch04/udp-ping
    ).
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 [https://golang.org/dl/go1.17.7.darwin-amd64.pkg](https://github.com/PacktPublishing/Network-Automation-with-Go/tree/main/ch04/udp-ping)
- en: Execute the `go1.17.7.darwin-amd64.pkg` file and follow the instructions.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`go1.17.7.darwin-amd64.pkg`文件并按照说明操作。
- en: Open a Terminal and run `go version` to verify the installation.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行`go version`以验证安装。
- en: Linux
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux
- en: 'Go is typically available as a system package in a Linux distribution, but
    is often an older version. Follow these steps to install a more recent release:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: Go通常作为Linux发行版中的系统包提供，但通常是较旧版本。按照以下步骤安装较新版本：
- en: Download [https://golang.org/dl/go1.17.7.linux-amd64.tar.gz](https://github.com/PacktPublishing/Network-Automation-with-Go
    ).
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 [https://golang.org/dl/go1.17.7.linux-amd64.tar.gz](https://github.com/PacktPublishing/Network-Automation-with-Go).
- en: Remove any existing Go installation with `rm -``rf /usr/local/go`.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`rm -rf /usr/local/go`删除任何现有的Go安装。
- en: Extract the archive you downloaded into `/usr/local with tar -C /usr/local -``xzf
    go1.17.7.linux-amd64.tar.gz`.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`tar -C /usr/local -xzf go1.17.7.linux-amd64.tar.gz`将下载的存档解压到`/usr/local`。
- en: Add `/usr/local/go/bin` to the `PATH` environment variable with `export PATH=$PATH:/usr/local/go/bin`.
    To make this persistent, add this line as well in `$HOME/.bash_profile`. This
    last part is valid for `bash`, but you might want to do something similar if you
    use a different shell.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`export PATH=$PATH:/usr/local/go/bin`将`/usr/local/go/bin`添加到`PATH`环境变量中。为了使其持久化，请将此行也添加到`$HOME/.bash_profile`中。最后一部分对`bash`有效，但如果你使用不同的shell，你可能需要做类似的事情。
- en: Run `go version` to verify the installation
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`go version`以验证安装
- en: There you go! You can now download and install Go in your system without any
    hassle. To install a different version, just replace `17.7` in the instructions
    with a target version of your choice.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！你现在可以在系统中下载和安装Go而无需任何麻烦。要安装不同版本，只需将说明中的`17.7`替换为你选择的版本号。
- en: Summary
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we reviewed why Go is relevant for networking and network automation.
    We looked at the various aspects of Go that make it the preferred choice for millions
    of developers. We also explored how you can install it on your computer. In the
    next chapter, we will dive deeper into the Go programming language, its source
    files, and its tools.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了为什么Go对于网络和网络自动化很重要。我们探讨了Go的各个方面，使其成为数百万开发者的首选选择。我们还探讨了如何在你的计算机上安装它。在下一章中，我们将更深入地探讨Go编程语言、其源文件及其工具。
- en: Further reading
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can refer to these resources for further reading:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以参考以下资源进行进一步阅读：
- en: '*Stack Overflow Developer Survey 2021*: [https://insights.stackoverflow.com/survey/2021#most-loved-dreaded-and-wanted-language-want](https://github.com/PacktPublishing/Network-Automation-with-Go/blob/main/ch04/http/client/main.go
    )'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Stack Overflow Developer Survey 2021*: [https://insights.stackoverflow.com/survey/2021#most-loved-dreaded-and-wanted-language-want](https://github.com/PacktPublishing/Network-Automation-with-Go/blob/main/ch04/http/client/main.go)'
- en: '*NetDevOps* 2020 survey: [https://dgarros.github.io/netdevops-survey/reports/2020](https://github.com/Green-Software-Foundation/awesome-green-software)'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*NetDevOps* 2020调查：[https://dgarros.github.io/netdevops-survey/reports/2020](https://github.com/Green-Software-Foundation/awesome-green-software)'
- en: '*Go Developer Survey 2020 Results*: [https://go.dev/blog/survey2020-results](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/what-is-ccft.html)'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Go开发者调查2020结果*：[https://go.dev/blog/survey2020-results](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/what-is-ccft.html)'
- en: '*How Many Go Developers Are There?*: [https://research.swtch.com/gophercount](https://kubernetes.io/blog/2017/10/software-conformance-certification/)'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*有多少Go开发者？*：[https://research.swtch.com/gophercount](https://kubernetes.io/blog/2017/10/software-conformance-certification/)'
- en: '*golang-nuts*: [https://groups.google.com/forum/#!forum/golang-nuts](https://github.com/PacktPublishing/Network-Automation-with-Go/blob/main/ch04/http/server
    )'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*golang-nuts*：[https://groups.google.com/forum/#!forum/golang-nuts](https://github.com/PacktPublishing/Network-Automation-with-Go/blob/main/ch04/http/server
    )'
- en: '*Go* *Forum*: [https://forum.golangbridge.org/](https://docs.projectcalico.org/manifests/tigera-operator.yaml)'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Go* *论坛*：[https://forum.golangbridge.org/](https://docs.projectcalico.org/manifests/tigera-operator.yaml)'
- en: '*Go Language* *Collective*: [https://stackoverflow.com/collectives/go](https://docs.projectcalico.org/manifests/custom-resources.yaml)'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Go语言* *集体*：[https://stackoverflow.com/collectives/go](https://docs.projectcalico.org/manifests/custom-resources.yaml)'
- en: '*Gophers Slack* *channel*: [https://invite.slack.golangbridge.org/](https://multipass.run/)'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Gophers Slack* *频道*：[https://invite.slack.golangbridge.org/](https://multipass.run/)'
- en: '**Go Developers Network** (**GDN**): [https://www.meetup.com/pro/go](https://multipass.run/)'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Go开发者网络** (**GDN**)：[https://www.meetup.com/pro/go](https://multipass.run/)'
- en: 'CNCF DevStats toolset: [https://k8s.devstats.cncf.io/d/67/licenses-and-programming-languages?orgId=1](https://github.com/kubernetes/kubernetes)'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CNCF DevStats工具集：[https://k8s.devstats.cncf.io/d/67/licenses-and-programming-languages?orgId=1](https://github.com/kubernetes/kubernetes)
- en: '[https://madnight.github.io/githut/#/stars/2021/2](https://github.com/PacktPublishing/Network-Automation-with-Go/blob/main/ch04/http/client)'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://madnight.github.io/githut/#/stars/2021/2](https://github.com/PacktPublishing/Network-Automation-with-Go/blob/main/ch04/http/client)'
- en: 'Go 6-month release cycle: [https://github.com/golang/go/wiki/Go-Release-Cycle](B16971_01.xhtml)'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 6个月发布周期：[https://github.com/golang/go/wiki/Go-Release-Cycle](B16971_01.xhtml)
- en: 'Go release notes: https://golang.org/doc/devel/release'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go发布说明：https://golang.org/doc/devel/release
- en: '[https://github.com/golang/proposal#proposing-changes-to-go](https://github.com/PacktPublishing/Network-Automation-with-Go/tree/main/ch06/ssh)'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Go语言提案](https://github.com/golang/proposal#proposing-changes-to-go)(https://github.com/PacktPublishing/Network-Automation-with-Go/tree/main/ch06/ssh)'
- en: 'Toward Go 2: [https://go.dev/blog/toward-go2](https://sdg-tracker.org/)'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向Go 2迈进：[https://go.dev/blog/toward-go2](https://sdg-tracker.org/)
- en: 'Go 2 language change template: [https://github.com/golang/proposal/blob/master/go2-language-changes.md](https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sustainability-pillar.html)'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 2语言变更模板：[https://github.com/golang/proposal/blob/master/go2-language-changes.md](https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sustainability-pillar.html)
- en: 'Go 2 proposals: [https://github.com/golang/go/issues?utf8=%E2% 9C%93&q=is%3Aissue+is%3Aopen+label%3AGo2+label%3AProposal](https://docs.microsoft.com/en-us/azure/architecture/framework/)'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 2提案：[https://github.com/golang/go/issues?utf8=%E2% 9C%93&q=is%3Aissue+is%3Aopen+label%3AGo2+label%3AProposal](https://docs.microsoft.com/en-us/azure/architecture/framework/)
- en: 'Go 2 draft design document: [https://go.googlesource.com/proposal/+/master/design/go2draft.md](http://www.sustainableitplaybook.com)'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 2草案设计文档：[https://go.googlesource.com/proposal/+/master/design/go2draft.md](http://www.sustainableitplaybook.com)
- en: 'Python typing: [https://docs.python.org/3/library/typing.html](https://man7.org/linux/man-pages/man7/capabilities.7.html
    )'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python类型：[https://docs.python.org/3/library/typing.html](https://man7.org/linux/man-pages/man7/capabilities.7.html
    )
- en: '`go doc` tool website: [https://pkg.go.dev/](https://github.com/google/gopacket
    )'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`go doc`工具网站：[https://pkg.go.dev/](https://github.com/google/gopacket )'
- en: 'Go language server: [https://go.googlesource.com/tools/+/refs/heads/master/gopls/README.md#editors](https://github.com/PacktPublishing/Network-Automation-with-Go/tree/main/ch06/ssh)'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go语言服务器：[https://go.googlesource.com/tools/+/refs/heads/master/gopls/README.md#editors](https://github.com/PacktPublishing/Network-Automation-with-Go/tree/main/ch06/ssh)
- en: 'Go 2 draft design document: [https://go.googlesource.com/proposal/+/master/design/go2draft-error-handling-overview.md](https://dgarros.github.io/netdevops-survey/reports/2020)'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 2草案设计文档：[https://go.googlesource.com/proposal/+/master/design/go2draft-error-handling-overview.md](https://dgarros.github.io/netdevops-survey/reports/2020)
- en: '*Go Conferences and Major Events*: [https://github.com/golang/go/wiki/Conferences#go-conferences-and-major-events](https://github.com/PacktPublishing/Network-Automation-with-Go/blob/main/topo-base/topo.yml)'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Go会议和重大活动*：[https://github.com/golang/go/wiki/Conferences#go-conferences-and-major-events](https://github.com/PacktPublishing/Network-Automation-with-Go/blob/main/topo-base/topo.yml)'
- en: 'Popular development tools: [https://insights.stackoverflow.com/survey/2021#most-loved-dreaded-and-wanted-tools-tech-love-dread](https://github.com/PacktPublishing/Network-Automation-with-Go/tree/main/ch06/ssh)'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流行开发工具：[https://insights.stackoverflow.com/survey/2021#most-loved-dreaded-and-wanted-tools-tech-love-dread](https://github.com/PacktPublishing/Network-Automation-with-Go/tree/main/ch06/ssh)
- en: 'Top-paying technologies ranking: [https://insights.stackoverflow.com/survey/2021#technology-top-paying-technologieshttps://insights.stackoverflow.com/survey/2021#technology-top-paying-technologies](https://github.com/PacktPublishing/Network-Automation-with-Go/tree/main/ch06/vssh)'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最高薪酬技术排名：[https://insights.stackoverflow.com/survey/2021#technology-top-paying-technologieshttps://insights.stackoverflow.com/survey/2021#technology-top-paying-technologies](https://github.com/PacktPublishing/Network-Automation-with-Go/tree/main/ch06/vssh)
- en: 'Go version 1: [https://go.dev/blog/go1](https://github.com/PacktPublishing/Network-Automation-with-Go/tree/main/ch06/http)'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 版本 1：[https://go.dev/blog/go1](https://github.com/PacktPublishing/Network-Automation-with-Go/tree/main/ch06/http)
- en: '*Why does Go not have feature* *X?*: [https://golang.org/doc/faq#Why_doesnt_Go_have_feature_Xhttps://golang.org/doc/faq#Why_doesnt_Go_have_feature_X](https://demo.netbox.dev/)'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为什么 Go 没有功能* *X*？*: [https://golang.org/doc/faq#Why_doesnt_Go_have_feature_Xhttps://golang.org/doc/faq#Why_doesnt_Go_have_feature_X](https://demo.netbox.dev/)'
- en: '*Go, Open Source, Community*: [https://go.dev/blog/open-source](B16971_01.xhtml)'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Go，开源，社区*: [https://go.dev/blog/open-source](B16971_01.xhtml)'
- en: '*Go 1 and the Future of Go Programs*: [https://golang.org/doc/go1compat](B16971_01.xhtml)'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Go 1 和 Go 程序的未来*: [https://golang.org/doc/go1compat](B16971_01.xhtml)'
- en: '*Go 2, here we come!*: [https://go.dev/blog/go2-here-we-come](http://www.blender.org)'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Go 2，我们来了!*: [https://go.dev/blog/go2-here-we-come](http://www.blender.org)'
- en: '*Software Reliability*: [https://users.ece.cmu.edu/~koopman/des_s99/sw_reliability/](https://github.com/Green-Software-Foundation/awesome-green-software)'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*软件可靠性*: [https://users.ece.cmu.edu/~koopman/des_s99/sw_reliability/](https://github.com/Green-Software-Foundation/awesome-green-software)'
- en: '*The Computer Language Benchmarks Game*: [https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/go-gpp.html](B16971_01.xhtml)'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*计算机语言基准测试游戏*: [https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/go-gpp.html](B16971_01.xhtml)'
- en: '*Five things that make Go* *fast*: [https://dave.cheney.net/2014/06/07/five-things-that-make-go-fast](B16971_01.xhtml)'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*让 Go 变得快的五个因素*: [https://dave.cheney.net/2014/06/07/five-things-that-make-go-fast](B16971_01.xhtml)'
- en: '*The Go Programming Language* *Specification*: [https://golang.org/ref/spec](https://docs.aws.amazon.com/wellarchitected/latest/framework/sustainability.html)'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Go 编程语言* *规范*: [https://golang.org/ref/spec](https://docs.aws.amazon.com/wellarchitected/latest/framework/sustainability.html)'
- en: '*Python Developers Survey 2020* *Results*: [https://www.jetbrains.com/lp/python-developers-survey-2020/](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/what-is-ccft.html)'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Python 开发者调查 2020* *结果*: [https://www.jetbrains.com/lp/python-developers-survey-2020/](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/what-is-ccft.html)'
