["```go\n// package clause\npackage main\n// import declaration\nimport \"fmt\"\n// top level declaration\nconst s = \"Hello, 世界\"\nfunc main() {\n    fmt.Println(s)\n}\n```", "```go\n$ ls -1 /usr/local/go/src/encoding/base64/ | grep -v _test.go\nbase64.go\n```", "```go\n$ ls -1 /usr/local/go/src/encoding/json/ | grep -v _test.go\ndecode.go\nencode.go\nfold.go\nfuzz.go\nindent.go\nscanner.go\nstream.go\ntables.go\ntags.go\n```", "```go\npackage ping\nfunc Send() string {\n    return \"pong\"\n}\n```", "```go\nch02/ping$ go mod init github.com/PacktPublishing/Network-Automation-with-Go/ch02/ping\ngo: creating new go.mod: module github.com/PacktPublishing/Network-Automation-with-Go/ch02/ping\n```", "```go\npackage main\nimport (\n    \"fmt\"\n    \"github.com/PacktPublishing/Network-Automation-with-Go/ch02/ping\"\n)\nfunc main() {\n    s := ping.Send()\n    fmt.Println(s)\n}\n```", "```go\npackage xrgrpc\nimport (\n    \"fmt\"\n    /* ... <omitted for brevity > ... */\n    \"google.golang.org/grpc/credentials\"\n)\nfunc newClientTLS(c client) (credentials.TransportCredentials, error) {\n    if c.Cert != \"\" {\n                return credentials.NewClientTLSFromFile(...)\n    }\n    /* ... <omitted for brevity > ... */\n    fmt.Printf(\"%s\", 'test')\n    /* ... <omitted for brevity > ... */\n}\n```", "```go\nmodule github.com/PacktPublishing/Network-Automation-with-Go/ch02/pong\n\ngo 1.17\n\nrequire github.com/PacktPublishing/Network-Automation-with-Go/ch02/ping v0.0.0-20220223180011-2e4e63479343\n\nreplace github.com/PacktPublishing/Network-Automation-with-Go/ch02/ping v1.0.0 => ../ping\n```", "```go\n    // IsPrivate reports whether ip is a private address, according to\n    ```", "```go\n    // RFC 1918 (IPv4 addresses) and RFC 4193 (IPv6 addresses).\n    ```", "```go\n    func (ip IP) IsPrivate() bool {\n    ```", "```go\n        if ip4 := ip.To4(); ip4 != nil {\n    ```", "```go\n            return ip4[0] == 10 ||\n    ```", "```go\n                (ip4[0] == 172 && ip4[1]&0xf0 == 16) ||\n    ```", "```go\n                (ip4[0] == 192 && ip4[1] == 168)\n    ```", "```go\n        }\n    ```", "```go\n        return len(ip) == IPv6len && ip[0]&0xfe == 0xfc\n    ```", "```go\n    }\n    ```", "```go\n    /*\n    ```", "```go\n    Copyright 2014 The Kubernetes Authors.\n    ```", "```go\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    ```", "```go\n    ...\n    ```", "```go\n    See the License for the specific language governing permissions and\n    ```", "```go\n    limitations under the License.\n    ```", "```go\n    */\n    ```", "```go\n    package kubectl\n    ```", "```go\npackage net\n// IsMulticast reports whether ip is a multicast address.\nfunc (ip IP) IsMulticast() bool {\n     if ip4 := ip.To4(); ip4 != nil {\n         return ip4[0]&0xf0 == 0xe0\n     }\n     return len(ip) == IPv6len && ip[0] == 0xff\n}\n```", "```go\npackage net\nfunc allFF(b []byte) bool {\n     for _, c := range b {\n          if c != 0xff {\n                 return false\n          }\n     }\n     return true\n}\n```", "```go\nch02/pong$ time go build\nreal  0m0.154s\nuser  0m0.190s\nsys   0m0.070s\n```", "```go\nch02/pong$ ./pong\npong\n```", "```go\nch02/pong$ go run main.go \npong\n```", "```go\n$ go \nGo is a tool for managing Go source code.\nUsage:\n     go <command> [arguments]\nThe commands are:\n     bug         start a bug report\n     build       compile packages and dependencies\n     ...       \n     mod         module maintenance\n     run         compile and run Go program\n     test        test packages\n     tool        run specified go tool\n     version     print Go version\n     vet         report likely mistakes in packages\n```", "```go\nch02/hello$ go build *.go\nch02/hello$ ./main\nHello World\n```", "```go\nch02/hello$ GOOS=darwin GOARCH=amd64 go build *.go\n```", "```go\n$ go tool dist list\n...\ndarwin/amd64\ndarwin/arm64\n...\nlinux/386\nlinux/amd64\nlinux/arm\nlinux/arm64\n...\nwindows/386\nwindows/amd64\n```", "```go\nch02/hello$ go build -o another_name *.go\nch02/hello$ ./another_name\nHello World\n```", "```go\nch02/hello$ go build -ldflags='-X main.Version=1.0 -X main.GitCommit=600a82c442' *.go\nch02/hello$ ./main\nVersion: \"1.0\"\nGit Commit: \"600a82c442\"\nHello World\n```", "```go\nch02/hello$ go run {main,vars}.go\nHello World\n```", "```go\n$ ls -1hs go.*\n4.0K go.mod\n 92K go.sum\n```", "```go\n    hugo$ go mod why go.opencensus.io/internal\n    ```", "```go\n    # go.opencensus.io/internal\n    ```", "```go\n    github.com/gohugoio/hugo/deploy\n    ```", "```go\n    gocloud.dev/blob\n    ```", "```go\n    gocloud.dev/internal/oc\n    ```", "```go\n    go.opencensus.io/trace\n    ```", "```go\n    go.opencensus.io/internal\n    ```", "```go\nhugo$ go list -m all | grep ^go.opencensus.io\ngo.opencensus.io v0.23.0\n```", "```go\nhugo$ go list all | grep ^go.opencensus.io\ngo.opencensus.io\ngo.opencensus.io/internal\ngo.opencensus.io/internal/tagencoding\ngo.opencensus.io/metric/metricdata\ngo.opencensus.io/metric/metricproducer\ngo.opencensus.io/plugin/ocgrpc\n...\ngo.opencensus.io/trace/propagation\ngo.opencensus.io/trace/tracestate\n```", "```go\nch02/hello$ go mod init hello\ngo: creating new go.mod: module hello\ngo: to add module requirements and sums:\ngo mod tidy\nch02/hello$ go mod tidy\nch02/hello$ go build\nch02/hello$ ./hello\nHello World\n```", "```go\n$ go install example.com/cmd@v1.2.3\n$ go install example.com/cmd@latest\n```", "```go\npackage ping_test\nimport (\n    \"github.com/PacktPublishing/Network-Automation-with-Go/ch02/ping\" \n    \"testing\"\n)\nfunc TestSend(t *testing.T) {\n    want := \"pong\"\n    result := ping.Send()\n    if result != want {\n        t.Fatalf(\"[%s] is incorrect, we want [%s]\", result, want)\n    }\n}\n```", "```go\nch02/ping$ go test\nPASS\nok github.com/PacktPublishing/Network-Automation-with-Go/ch02/ping 0.001s\n```", "```go\nfunc Send() string {\n    return \"p1ong\"\n}\n```", "```go\nch02/ping$ go test\n--- FAIL: TestSend (0.00s)\n  code_test.go:12: [p1ong] is incorrect, we want [pong]\nFAIL\nexit status 1\nFAIL github.com/PacktPublishing/Network-Automation-with-Go/ch02/ping 0.001s\n```", "```go\n$ go env -json\n{\n    ...\n    \"GOPROXY\": \"https://proxy.golang.org,direct\",\n    \"GOROOT\": \"/usr/local/go\",\n    ...\n    \"GOVERSION\": \"go1.17\",\n    \"PKG_CONFIG\": \"pkg-config\"\n}\n```", "```go\n$ go env -w GOBIN=$(go env GOPATH)/bin\n$ cat ~/.config/go/env\nGOBIN=/home/username/go/bin\n```"]