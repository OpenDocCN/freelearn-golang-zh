["```go\nname: netgo\ntopology:\n  nodes:\n    srl:\n      kind: srl\n      image: ghcr.io/nokia/srlinux:21.6.4\n    ceos:\n      kind: ceos\n      image: ceos:4.26.4M\n    cvx:\n      kind: cvx\n      image: networkop/cx:5.0.0\n      runtime: docker\n  links:\n    - endpoints: [\"srl:e1-1\", \"ceos:eth1\"]\n    - endpoints: [\"cvx:swp1\", \"ceos:eth2\"]\n```", "```go\ntopo-base$ sudo containerlab deploy -t topo.yml --reconfigure\n```", "```go\n⇨  ssh cumulus@clab-netgo-cvx\ncumulus@clab-netgo-cvx's password: cumulus\nLinux cvx 5.14.10-300.fc35.x86_64 #1 SMP Thu Oct 7 20:48:44 UTC 2021 x86_64\nWelcome to NVIDIA Cumulus (R) Linux (R)\ncumulus@cvx:mgmt:~$ exit\n```", "```go\ntype Model struct {\n    Uplinks  []Link `yaml:\"uplinks\"`\n    Peers    []Peer `yaml:\"peers\"`\n    ASN      int    `yaml:\"asn\"`\n    Loopback Addr   `yaml:\"loopback\"`\n}\ntype Link struct {\n    Name   string `yaml:\"name\"`\n    Prefix string `yaml:\"prefix\"`\n}\ntype Peer struct {\n    IP  string `yaml:\"ip\"`\n    ASN int    `yaml:\"asn\"`\n}\ntype Addr struct {\n    IP string `yaml:\"ip\"`\n}\n```", "```go\n# input.yml\nasn: 65000\nloopback: \n  ip: \"198.51.100.0\"\nuplinks:\n  - name: \"ethernet-1/1\"\n    prefix: \"192.0.2.0/31\"\npeers:\n  - ip: \"192.0.2.1\"\n    asn: 65001\n```", "```go\nfunc main() {\n    src, err := os.Open(\"input.yml\")\n    // process error\n    defer src.Close()\n    d := yaml.NewDecoder(src)\n    var input Model\n    err = d.Decode(&input)\n    // process error\n}\n```", "```go\nconst srlTemplate = `\nenter candidate\n{{- range $uplink := .Uplinks }}\nset / interface {{ $uplink.Name }} subinterface 0 ipv4 address {{ $uplink.Prefix }}\nset / network-instance default interface {{ $uplink.Name }}.0\n{{- end }}\n...\n`\n```", "```go\nfunc devConfig(in Model)(b bytes.Buffer, err error){\n    t, err := template.New(\"config\").Parse(srlTemplate)\n    // process error\n    err = t.Execute(&b, in)\n    // process error\n    return b, nil\n}\nfunc main() {\n    /* ... <omitted for brevity > ... */\n    var input Model\n    err = d.Decode(&input)\n    // process error\n    cfg, err := devConfig(input)\n    /* ... <continues next > ... */\n}\n```", "```go\nfunc main() {\n    /* ... <continues from before > ... */\n    settings := &ssh.ClientConfig{\n        User: *username,\n        Auth: []ssh.AuthMethod{\n            ssh.Password(*password),\n        },\n        HostKeyCallback: ssh.InsecureIgnoreHostKey(),\n    }\n    conn, err := ssh.Dial(\n        \"tcp\",\n        fmt.Sprintf(\"%s:%d\", *hostname, sshPort),\n        settings,\n    )\n    // process error\n    defer conn.Close()\n    /* ... <continues next > ... */\n}\n```", "```go\nfunc main() {\n    /* ... <continues from before > ... */\n    session, err := conn.NewSession()\n    // process error\n    defer session.Close()\n    modes := ssh.TerminalModes{\n        ssh.ECHO:          1,\n        ssh.TTY_OP_ISPEED: 115200,\n        ssh.TTY_OP_OSPEED: 115200,\n    }\n    if err := session.RequestPty(\"xterm\", 40, 80, modes); err != nil {\n        log.Fatal(\"request for pseudo terminal failed: \", err)\n    }\n    stdin, err := session.StdinPipe()\n    // process error\n    stdout, err := session.StdoutPipe()\n    // process error\n    session.Shell()\n    /* ... <continues next > ... */\n}\n```", "```go\nfunc main() {\n    /* ... <continues from before > ... */\n    log.Print(\"connected. configuring...\")\n    cfg.WriteTo(stdin)\n}\n```", "```go\nch06/ssh$ go run main.go \ngo: downloading golang.org/x/crypto v0.0.0-20220112180741-5e0467b6c7ce\ngo: downloading gopkg.in/yaml.v2 v2.4.0\n2022/02/07 21:11:44 connected. configuring...\n2022/02/07 21:11:44 disconnected. dumping output...\nenter candidate\nset / interface ethernet-1/1 subinterface 0 ipv4 address 192.0.2.0/31\nset / network-instance default interface ethernet-1/1.0\n...\nset / network-instance default protocols bgp ipv4-unicast admin-state enable\ncommit now\nquit\nUsing configuration file(s): []\nWelcome to the srlinux CLI.\nType 'help' (and press <ENTER>) if you need any help using this.\n--{ running }--[  ]--                                                           \nA:srl#                                                                          \n--{ running }--[  ]--                                                           \nA:srl# enter candidate                                                          \n--{ candidate shared default }--[  ]--                                          \nA:srl# set / interface ethernet-1/1 subinterface 0 ipv4 address 192.0.2.0/31    \n--{ * candidate shared default }--[  ]-- \n.......                                \n--{ * candidate shared default }--[  ]--                                        \nA:srl# commit now                                                               \nAll changes have been committed. Leaving candidate mode.\n--{ + running }--[  ]--                                                         \nA:srl# quit\n```", "```go\nconst ceosTemplate = `\n...\n!\nrouter bgp {{ .ASN }}\n  router-id {{ .Loopback.IP }}\n{{- range $peer := .Peers }}  \n  neighbor {{ $peer.IP }} remote-as {{ $peer.ASN }}\n{{- end }}\n  redistribute connected\n!\n`\n```", "```go\nfunc main() {\n    /* ... <omitted for brevity > ... */\n    conn, err := platform.NewPlatform(\n        *nos,\n        *hostname,\n        options.WithAuthNoStrictKey(),\n        options.WithAuthUsername(*username),\n        options.WithAuthPassword(*password),\n    )\n    // process error  \n    driver, err := conn.GetNetworkDriver()\n    // process error  \n\n    err = driver.Open()\n    // process error  \n    defer driver.Close()\n    /* ... <continues next > ... */\n}\n```", "```go\nfunc main() {\n    /* ... <continues from before > ... */\n    conf, err := cfg.NewCfg(driver, *nos)\n    // process error\n\n    // sanitize config by removing keywords like \"!\" and \"end\"\n    err = conf.Prepare()\n    // process error\n\n    response, err = conf.LoadConfig(config.String(), false)\n    // process error\n}\n```", "```go\nch06/scrapli$ go run main.go \n2022/02/14 17:06:16 Generated config: \n!\nconfigure\n!\nip routing\n!\ninterface Ethernet1\n  no switchport\n  ip address 192.0.2.1/31\n!\n...\n```", "```go\ntype router struct {\n    Bgp\n}\ntype bgp struct {\n    ASN      int\n    RouterID string\n    AF       map[string]addressFamily\n    Enabled  string\n    Neighbor map[string]neighbor\n}\ntype neighbor struct {\n    RemoteAS int\n    Type     string\n}\n```", "```go\ntype cvx struct {\n    url   string\n    token string\n    httpC http.Client\n}\nfunc main() {\n    /* ... <omitted for brevity > ... */\n    device := cvx{\n        url:   fmt.Sprintf(\"https://%s:%d\", *hostname, defaultNVUEPort),\n        token: base64.StdEncoding.EncodeToString([]byte(fmt.Sprintf(\"%s:%s\", *username, *password))),\n        httpC: http.Client{\n            Transport: &http.Transport{\n                TLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n            },\n        },\n    }\n    /* ... <continues next > ... */\n}\n```", "```go\nfunc main() {\n    /* ... <continues from before > ... */\n    // create a new candidate configuration revision\n    revisionID, err := createRevision(device)\n    // process error\n    addr, err := url.Parse(device.url + \"/nvue_v1/\")\n    // process error\n    params := url.Values{}\n    params.Add(\"rev\", revisionID)\n    addr.RawQuery = params.Encode()\n    /* ... <continues next > ... */\n}\n```", "```go\nfunc main() {\n    /* ... <continues from before > ... */\n    req, err := http.NewRequest(\"PATCH\", addr.String(), &cfg)\n    // process error\n    req.Header.Add(\"Content-Type\", \"application/json\")\n    req.Header.Add(\"Authorization\", \"Basic \"+device.token)\n    /* ... <continues next > ... */\n}\n```", "```go\nfunc main() {\n    /* ... <continues from before > ... */\n    res, err := device.httpC.Do(req)\n    // process error\n    defer res.Body.Close()\n    // Apply candidate revision\n    if err := applyRevision(device, revisionID); err != nil {\n        log.Fatal(err)\n    }\n}\n```", "```go\nch06/http$ go run main.go \n2022/02/14 16:42:26 generated config {\n \"interface\": {\n  \"lo\": {\n   \"ip\": {\n    \"address\": {\n     \"198.51.100.2/32\": {}\n...\n \"router\": {\n  \"bgp\": {\n   \"autonomous-system\": 65002,\n   \"router-id\": \"198.51.100.2\"\n  }\n },\n \"vrf\": {\n  \"default\": {\n   \"router\": {\n    \"bgp\": {\n...\n     \"enable\": \"on\",\n     \"neighbor\": {\n      \"192.0.2.2\": {\n       \"remote-as\": 65001,\n       \"type\": \"numbered\"\n      },\n      \"203.0.113.4\": {\n       \"remote-as\": 65005,\n       \"type\": \"numbered\"\n      }\n...\n}\n2022/02/14 16:42:27 Created revisionID: changeset/cumulus/2022-02-14_16.42.26_K4FJ\n{\n  \"state\": \"apply\",\n  \"transition\": {\n    \"issue\": {},\n    \"progress\": \"\"\n  }\n}\n```", "```go\nfunc main() {\n    token, err := NewSecurityProviderNautobotToken(\"...\")\n    // process error\n\n    c, err := nb.NewClientWithResponses(\n        \"https://demo.nautobot.com/api/\",\n        nb.WithRequestEditorFn(token.Intercept),\n    )\n    /* ... <continues next > ... */\n}\n```", "```go\n{\n    \"name\": \"ams01-ceos-02\",\n    \"device_type\": {\n        \"slug\": \"ceos\"\n    },\n    \"device_role\": {\n        \"slug\": \"router\"\n    },\n    \"site\": {\n        \"slug\": \"ams01\"\n    }\n}\n```", "```go\nfunc main() {\n    /* ... <continues from before > ... */\n    err = createResources(c)\n    // process error\n\n    dev, err := os.Open(\"device.json\")\n    // process error\n    defer dev.Close()\n\n    d := json.NewDecoder(dev)\n\n    var device nb.Device\n    err = d.Decode(&device)\n    // process error\n\n    found, devWithIDs, err := getDeviceIDs(c, device)\n    /* ... <continues next > ... */\n}\n```", "```go\nfunc main() {\n    /* ... <continues from before > ... */\n    created, err := c.DcimDevicesCreateWithResponse(\n        context.TODO(),\n        nb.DcimDevicesCreateJSONRequestBody(*devWithIDs))\n    check(err)\n}\n```", "```go\ntype Router interface {\n    GetRoutes(wg *sync.WaitGroup)\n}\n\nfunc main() {\n     cvx := CVX{\n     Hostname: \"clab-netgo-cvx\",\n      Authentication: Authentication{\n      Username: \"cumulus\",\n     Password: \"cumulus\",\n     },\n    }\n    srl := SRL{\n     Hostname: \"clab-netgo-srl\",\n     Authentication: Authentication{\n      Username: \"admin\",\n      Password: \"admin\",\n     },\n    }\n    ceos := CEOS{\n     Hostname: \"clab-netgo-ceos\",\n     Authentication: Authentication{\n      Username: \"admin\",\n      Password: \"admin\",\n     },\n    }\n\n    log.Printf(\"Checking reachability...\")\n\n    devices := []Router{cvx, srl, ceos}\n\n    var wg sync.WaitGroup\n    for _, router := range devices {\n        wg.Add(1)\n        go router.GetRoutes(&wg)\n    }\n    wg.Wait()\n}\n```", "```go\nfunc checkRoutes(device string, in []string, wg *sync.WaitGroup) {\n    defer wg.Done()\n    log.Printf(\"Checking %s routes\", device)\n    expectedRoutes := map[string]bool{\n        \"198.51.100.0/32\": false,\n        \"198.51.100.1/32\": false,\n        \"198.51.100.2/32\": false,\n    }\n    for _, route := range in {\n        if _, ok := expectedRoutes[route]; ok {\n            log.Print(\"Route \", route,\n                        \" found on \", device)\n            expectedRoutes[route] = true\n        }\n    }\n    for route, found := range expectedRoutes {\n        if !found {\n            log.Print(\"! Route \", route, \n                        \" NOT found on \", device)\n        }\n    }\n}\n```", "```go\nfunc (r SRL) GetRoutes(wg *sync.WaitGroup) {\n    lookupCmd := \"show network-instance default route-table ipv4-unicast summary\"\n\n    conn, err := platform.NewPlatform(\n        \"nokia_srl\",\n        r.Hostname,\n        options.WithAuthNoStrictKey(),\n        options.WithAuthUsername(r.Username),\n        options.WithAuthPassword(r.Password),\n        options.WithTermWidth(176),\n    )\n    // process error\n\n    driver, err := conn.GetNetworkDriver()\n    // process error\n    err = driver.Open()\n    // process error \n    defer driver.Close()\n\n    resp, err := driver.SendCommand(lookupCmd)\n    // process error\n\n    ipv4Prefix := regexp.\n            MustCompile(`(\\d{1,3}\\.){3}\\d{1,3}\\/\\d{1,2}`)\n\n    out := []string{}\n    for _, match := range ipv4Prefix.FindAll(\n    resp.RawResult, -1) {\n        out = append(out, string(match))\n    }\n    go checkRoutes(r.Hostname, out, wg)\n}\n```", "```go\nfunc (r CEOS) GetRoutes(wg *sync.WaitGroup) {\n    template := \"https://raw.githubusercontent.com/networktocode/ntc-templates/master/ntc_templates/templates/arista_eos_show_ip_route.textfsm\"\n    lookupCmd := \"sh ip route\"\n    conn, err := core.NewEOSDriver(\n        r.Hostname,\n        base.WithAuthStrictKey(false),\n        base.WithAuthUsername(r.Username),\n        base.WithAuthPassword(r.Password),\n    )\n    // process error\n    err = conn.Open()\n    // process error\n    defer conn.Close()\n    resp, err := conn.SendCommand(lookupCmd)\n    // process error\n    parsed, err := resp.TextFsmParse(template)\n    // process error\n    out := []string{}\n    for _, match := range parsed {\n        out = append(out, fmt.Sprintf(\n                \"%s/%s\", match[\"NETWORK\"], match[\"MASK\"]))\n    }\n    go checkRoutes(r.Hostname, out, wg)\n}\n```", "```go\nCode Block 1:\nfunc (r CVX) GetRoutes(wg *sync.WaitGroup) {\n\tclient := resty.NewWithClient(&http.Client{\n\t\tTransport: &http.Transport{\n\t\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n\t\t},\n\t})\n\tclient.SetBaseURL(\"https://\" + r.Hostname + \":8765\" )\n\tclient.SetBasicAuth(r.Username, r.Password)\n\tvar routes map[string]interface{}\n\t_, err := client.R().\n\t\tSetResult(&routes).\n\t\tSetQueryParams(map[string]string{\n\t\t\t\"rev\": \"operational\",\n\t\t}).\n\t\tGet(\"/nvue_v1/vrf/default/router/rib/ipv4/route\")\n\t// process error\n\tout := []string{}\n\tfor route := range routes {\n\t\tout = append(out, route)\n\t}\n\tgo checkRoutes(r.Hostname, out, wg)\n}\n```", "```go\nch06/state$ go run main.go \n2022/03/10 17:06:30 Checking reachability...\n2022/03/10 17:06:30 Collecting CEOS routes\n2022/03/10 17:06:30 Collecting CVX routes\n2022/03/10 17:06:30 Collecting SRL routes\n2022/03/10 17:06:30 Checking clab-netgo-cvx routes\n2022/03/10 17:06:30 Route 198.51.100.0/32 found on clab-netgo-cvx\n2022/03/10 17:06:30 Route 198.51.100.1/32 found on clab-netgo-cvx\n2022/03/10 17:06:30 Route 198.51.100.2/32 found on clab-netgo-cvx\n2022/03/10 17:06:31 Checking clab-netgo-ceos routes\n2022/03/10 17:06:31 Route 198.51.100.0/32 found on clab-netgo-ceos\n2022/03/10 17:06:31 Route 198.51.100.1/32 found on clab-netgo-ceos\n2022/03/10 17:06:31 Route 198.51.100.2/32 found on clab-netgo-ceos\n2022/03/10 17:06:34 Checking clab-netgo-srl routes\n2022/03/10 17:06:34 Route 198.51.100.0/32 found on clab-netgo-srl\n2022/03/10 17:06:34 Route 198.51.100.1/32 found on clab-netgo-srl\n2022/03/10 17:06:34 Route 198.51.100.2/32 found on clab-netgo-srl\n```", "```go\n2022/03/10 15:59:55 ! Route 198.51.100.0/32 NOT found on clab-netgo-cvx\n2022/03/10 15:59:55 ! Route 198.51.100.1/32 NOT found on clab-netgo-cvx\n```"]