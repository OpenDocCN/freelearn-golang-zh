["```go\n[eos]\nclab-netgo-ceos\n[eos:vars]\nansible_user=admin\nansible_password=admin\nansible_connection=ansible.netcommon.network_cli\n```", "```go\n- name: First Play - Configure Routers\n  hosts: routers\n  gather_facts: true\n  tasks:\n    - name: Run Nokia Go module on local system with Go\n      go_srl:\n        host: \"{{ inventory_hostname }}\"\n        user: \"{{ ansible_user }}\"\n        password: \"{{ ansible_password }}\"\n        input: \"{{ hostvars[inventory_hostname] | string | b64encode }}\"\n      delegate_to: localhost\n      when: ('srl' in group_names)\n    - name: Run NVIDIA compiled Go module on remote system without Go\n      go_cvx:\n        host: localhost\n        user: \"{{ ansible_user }}\"\n        password: \"{{ ansible_password }}\"\n        input: \"{{ hostvars[inventory_hostname] | string | b64encode }}\"\n      when: ('cvx' in group_names)\n```", "```go\n// ModuleArgs are the module inputs\ntype ModuleArgs struct {\n  Host     string\n  User     string\n  Password string\n  Input    string\n}\nfunc main() {\n  if len(os.Args) != 2 {\n    // generate error\n  }\n  argsFile := os.Args[1]\n  text, err := os.ReadFile(argsFile)\n  // check error\n  var moduleArgs ModuleArgs\n  err = json.Unmarshal(text, &moduleArgs)\n  // check error\n  /* ... <continues next > ... */\n```", "```go\nimport (\n  \"encoding/base64\"\n  \"gopkg.in/yaml.v2\"\n)\ntype Model struct {\n  Uplinks  []Link `yaml:\"uplinks\"`\n  Peers    []Peer `yaml:\"peers\"`\n  ASN      int    `yaml:\"asn\"`\n  Loopback Addr   `yaml:\"loopback\"`\n}\nfunc main() {\n  /* ... <continues from before > ... */\n  src, err :=\n      base64.StdEncoding.DecodeString(moduleArgs.Input)\n  // check error\n  reader := bytes.NewReader(src)\n  d := yaml.NewDecoder(reader)\n  var input Model\n  d.Decode(&input)\n  /* ... <continues next > ... */\n```", "```go\n// Response is the values returned from the module\ntype Response struct {\n  Msg     string `json:\"msg\"`\n  Busy    bool   `json:\"busy\"`\n  Changed bool   `json:\"changed\"`\n  Failed  bool   `json:\"failed\"`\n}\nfunc main() {\n  /* ... <continues from before > ... */\n  var r Response\n  r.Msg = \"Device Configured Successfully\"\n  r.Changed = true\n  r.Failed = false\n  response, err = json.Marshal(r)\n  // check error\n  fmt.Println(string(response))\n  os.Exit(0)\n}\n```", "```go\n  - name: Run Validate module on Systems with Go installed\n    go_state:\n      host: \"{{ inventory_hostname }}\"\n```", "```go\nch07/ansible$ ansible-playbook playbook.yml \n# output omitted for brevity.\nPLAY RECAP *********************************************************************************************************************************************************\nclab-netgo-ceos            : ok=5    changed=0    unreachable=0    failed=0    skipped=4    rescued=0    ignored=0   \nclab-netgo-cvx             : ok=2    changed=1    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   \nclab-netgo-srl             : ok=2    changed=1    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   \nlocalhost                  : ok=1    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\n```", "```go\nterraform {\n  required_providers {\n    nautobot = {\n      version = \"0.2.4\"\n      source  = \"nleiva/nautobot\"\n    }\n  }\n}\nprovider \"nautobot\" {\n  url = \"https://demo.nautobot.com/api/\"\n  token = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n}\n```", "```go\nch07/terraform$ terraform init -upgrade\nInitializing the backend...\nInitializing provider plugins...\n- Finding nleiva/nautobot versions matching \"0.2.4\"...\n- Installing nleiva/nautobot v0.2.4...\n- Installed nleiva/nautobot v0.2.4 (self-signed, key ID A33D26E300F155FF)\n```", "```go\nresource \"nautobot_manufacturer\" \"new\" {\n  description = \"Created with Terraform\"\n  name        = \"New Vendor\"\n}\n```", "```go\nch07/terraform$ terraform apply --auto-approve\nTerraform used the selected providers to generate the following execution plan. Resource actions\nare indicated with the following symbols:\n  + create\nTerraform will perform the following actions:\n  # nautobot_manufacturer.new will be created\n  + resource \"nautobot_manufacturer\" \"new\" {\n      + created             = (known after apply)\n      + description         = \"Created with Terraform\"\n      + devicetype_count    = (known after apply)\n      + display             = (known after apply)\n      + id                  = (known after apply)\n      + inventoryitem_count = (known after apply)\n      + last_updated        = (known after apply)\n      + name                = \"New Vendor\"\n      + platform_count      = (known after apply)\n      + slug                = (known after apply)\n      + url                 = (known after apply)\n    }\nPlan: 1 to add, 0 to change, 0 to destroy.\n```", "```go\nch07/terraform$ terraform state show 'nautobot_manufacturer.new'\n# nautobot_manufacturer.new:\nresource \"nautobot_manufacturer\" \"new\" {\n    created             = \"2022-05-04\"\n    description         = \"Created with Terraform\"\n    devicetype_count    = 0\n    display             = \"New Vendor\"\n    id                  = \"09219670-3e28-...\"\n    inventoryitem_count = 0\n    last_updated        = \"2022-05-04T18:29:06.241771Z\"\n    name                = \"New Vendor\"\n    platform_count      = 0\n    slug                = \"new-vendor\"\n    url                 = \"https://demo.nautobot.com/api/dcim/manufacturers/09219670-3e28-.../\"\n}\n```", "```go\nfunc New(version string) func() *schema.Provider {\n  return func() *schema.Provider {\n    p := &schema.Provider{\n      Schema: map[string]*schema.Schema{\n        \"url\": {\n          Type:         schema.TypeString,\n          Required:     true,\n          DefaultFunc:\n          schema.EnvDefaultFunc(\"NAUTOBOT_URL\", nil),\n          ValidateFunc: validation.IsURLWithHTTPorHTTPS,\n          Description:  \"Nautobot API URL\",\n        },\n        \"token\": {\n          Type:        schema.TypeString,\n          Required:    true,\n          Sensitive:   true,\n          DefaultFunc:\n            schema.EnvDefaultFunc(\"NAUTOBOT_TOKEN\", nil),\n          Description: \"Admin API token\",\n        },\n      },\n      DataSourcesMap: map[string]*schema.Resource{\n        \"nautobot_manufacturers\":\n            dataSourceManufacturers(),\n      },\n      ResourcesMap: map[string]*schema.Resource{\n        \"nautobot_manufacturer\": resourceManufacturer(),\n      },\n    }\n    p.ConfigureContextFunc = configure(version, p)\n    return p\n  }\n}\n```", "```go\nimport nb \"github.com/nautobot/go-nautobot\"\ntype apiClient struct {\n  Client *nb.ClientWithResponses\n  Server string\n}\nfunc configure(\n  version string,\n  p *schema.Provider,\n) func(context.Context, *schema.ResourceData) (interface{}, diag.Diagnostics) {\n  return func(ctx context.Context, d *schema.ResourceData) (interface{}, diag.Diagnostics) {\n    serverURL := d.Get(\"url\").(string)\n    _, hasToken := d.GetOk(\"token\")\n    /* ... <omitted for brevity > ... */\n    token, _ :=\n        NewSecurityProviderNautobotToken(\n          d.Get(\"token\").(string))\n    c, err := nb.NewClientWithResponses(\n              serverURL,\n              nb.WithRequestEditorFn(token.Intercept),\n            )\n    // process error\n    return &apiClient{\n      Client: c,\n      Server: serverURL,\n    }, diags\n  }\n}\n```", "```go\ntype Manufacturer struct {\n  Created       *openapi_types.Date\n    `json:\"created,omitempty\"`\n  CustomFields  *Manufacturer_CustomFields\n    `json:\"custom_fields,omitempty\"`\n  Description   *string `json:\"description,omitempty\"`\n  /* ... <omitted for brevity > ... */\n  Url           *string `json:\"url,omitempty\"`\n}\ntype Manufacturer_CustomFields struct {\n  AdditionalProperties map[string]interface{} `json:\"-\"`\n}\n```", "```go\nfunc resourceManufacturer() *schema.Resource {\n  return &schema.Resource{\n    Description: \"This object manages a manufacturer\",\n    CreateContext: resourceManufacturerCreate,\n    ReadContext:   resourceManufacturerRead,\n    UpdateContext: resourceManufacturerUpdate,\n    DeleteContext: resourceManufacturerDelete,\n    Schema: map[string]*schema.Schema{\n      \"created\": {\n        Description: \"Manufacturer's creation date.\",\n        Type:        schema.TypeString,\n        Computed:    true,\n      },\n      \"description\": {\n        Description: \"Manufacturer's description.\",\n        Type:        schema.TypeString,\n        Optional:    true,\n      },\n      \"custom_fields\": {\n        Description: \"Manufacturer custom fields.\",\n        Type:        schema.TypeMap,\n        Optional:    true,\n      },\n      /* ... <omitted for brevity > ... */\n      \"url\": {\n        Description: \"Manufacturer's URL.\",\n        Type:        schema.TypeString,\n        Optional:    true,\n        Computed:    true,\n      },\n    },\n  }\n}\n```", "```go\nfunc resourceManufacturerCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {\n    c := meta.(*apiClient).Client\n    var m nb.Manufacturer\n    name, ok := d.GetOk(\"name\")\n    n := name.(string)\n    if ok {\n        m.Name = n\n    }\n    /* ... <omitted for brevity > ... */\n    rsp, err := c.DcimManufacturersCreateWithResponse(\n        ctx,\n        nb.DcimManufacturersCreateJSONRequestBody(m))\n    // process error\n    // process returned HTTP response\n    d.SetId(id.String())\n    return resourceManufacturerRead(ctx, d, meta)\n}\n```", "```go\nimport \"github.com/deepmap/oapi-codegen/pkg/types\"\nfunc resourceManufacturerRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {\n    c := meta.(*apiClient).Client\n    id := d.Get(\"id\").(string)\n    rsp, err := c.DcimManufacturersListWithResponse(\n        ctx,\n        &nb.DcimManufacturersListParams{\n            IdIe: &[]types.UUID{types.UUID(id)},\n        })\n  /* ... <continues next > ... */\n}\n```", "```go\nfunc resourceManufacturerRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {\n    /* ... <continues from before > ... */\n    d.Set(\"name\", item[\"name\"].(string))\n    d.Set(\"created\", item[\"created\"].(string))\n    d.Set(\"description\", item[\"description\"].(string))\n    d.Set(\"display\", item[\"display\"].(string))\n    /* ... <omitted for brevity > ... */\n    return diags\n}\n```"]