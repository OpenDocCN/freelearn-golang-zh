["```go\n!Switch01 vlan 10\nname Vlan10_on_Switch01\n```", "```go\npackage main\nimport (\n     \"encoding/json\"\n     \"encoding/xml\"\n     \"fmt\"\n)\ntype DataEncodingExample struct {\n     /*\n           Example payload\n           {\n                \"_key\": \"blah\",\n                \"_value\": \"42\",\n                \"_type\": \"string\",\n           },\n     */\n     Key   string `json:\"_key\",xml:\"_key\"`\n     Value string `json:\"_value\",xml:\"_value\"`\n     VType string `json:\"_type\",xml:\"_type\"`\n}\nfunc main() {\n     dataInput := DataEncodingExample{\n           Key:   \"blah\",\n           Value: \"42\",\n           VType: \"string\",\n     }\n     jsonEncoded, _ := json.Marshal(dataInput)\n     xmlEncoded, _ := xml.Marshal(dataInput)\n     // This is example code. What errors? :)\n     fmt.Println(\"JSON Encoded: \", string(jsonEncoded))\n     fmt.Println(\"XML Encoded: \", string(xmlEncoded))\n}\n```", "```go\nJSON Encoded:  {\"_key\":\"blah\",\"_value\":\"42\",\"_type\":\"string\"}\nXML Encoded:  <DataEncodingExample><Key>blah</Key><Value>42</Value><VType>string</VType></DataEncodingExample>\n```", "```go\npackage main\nimport (\n     \"context\"\n     \"fmt\"\n     uuid2 \"github.com/google/uuid\"\n     \"github.com/sethvargo/go-envconfig\"\n     log \"github.com/sirupsen/logrus\"\n)\nconst _VERSION = \"0.0.1\"\n/*\nThis code logs into the auth service for X and then updates the remote status with the local status measurement.\nIt is triggered when the remote state is changed.\nEach invocation generates a UUID which can be used by the ops team.\n*/\ntype Config struct {\n     APIUser string `env:\"PROG1_API_USER_ID\"`\n     APIKey  string `env:\"PROG1_API_USER_ID\"`\n}\n// GetToken retrieves a JWT from the external auth service\nfunc (c *Config) GetToken(URL, uuid string) (string, error) {\n     // Initiate thing\n     log.Info(fmt.Sprintf(\"system: updater, uuid: %v,\n      message: logging into device with key %v\\n\", uuid,\n      c.APIUser))\n     // Imagine this is implemented!\n     return \"JWT 42.42.42\", nil\n}\nfunc main() {\n     // Set log level, normally this would be from config\n     log.SetLevel(log.DebugLevel)\n     // Get UUID for this instantiation\n     uuid := uuid2.New().String()\n     // Show the world what we are\n     log.Info(fmt.Sprintf(\"system: updater, uuid: %v,\n      version: %v, maintainer: davedotdev\\n\", uuid,\n      _VERSION))\n     ctx := context.Background()\n     // Get the config from env vars\n     var c Config\n     if err := envconfig.Process(ctx, &c); err != nil {\n           log.Fatal(err)\n     }\n     // GetToken will get a JWT from the thing upstream\n     token, err := c.GetToken(\n            \"https://example.com/api/v1/auth\", uuid)\n     if err != nil {\n           log.Fatal(err)\n     }\n      log.Debug(fmt.Sprintf(\n      \"TODO: Got token from external provider: %v\\n\",\n      token))\n     log.Debug(\"TODO: Got the local state\")\n      log.Debug(\n      \"TODO: Logged in to remote service with token and updated the state\")\n     log.Debug(\n      \"TODO: Update success: ID from remote update is: 42\")\n     log.Debug(\"TODO: Our work here is done.\")\n}\n```", "```go\ngo build\n./main\nINFO[0000] system: updater, uuid: 6cb60c9b-<snip>, version: 0.0.1, maintainer: davedotdev \nINFO[0000] system: updater, uuid: 6cb60c9b-<snip>, message: logging into device with key testuser \nDEBU[0000] TODO: Got token from external provider: JWT 42.42.42 \nDEBU[0000] TODO: Got the local state                    \nDEBU[0000] TODO: Logged in to remote service with token and updated the state \nDEBU[0000] TODO: Update success: ID from remote update is: 42 \nDEBU[0000] TODO: Our work here is done. Exit Go routines cleanly if there are any.\n```", "```go\n[\n     { \n           \"key\": \"blah\", \n           \"val\": 42\n     }\n]\n```", "```go\n[\n     {\n           \"key\": \"blah1\",\n           \"key\": 42\n     },\n     {\n           \"key\": \"blah2\",\n           \"val\": \"42\",\n     },\n]\n```", "```go\n/*\n     {\n           \"_key\": \"blah\",\n           \"_value\": \"42\",\n           \"_type\": \"string\",\n     },\n*/\ntype BadDataManagement struct {\n     Key   string `json:\"_key\"`\n     Value string `json:\"_value\"`\n     VType string `json:\"_type\"`\n}\n```"]