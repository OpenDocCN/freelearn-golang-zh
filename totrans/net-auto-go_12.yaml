- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: 'Appendix : Building a Testing Environment'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录：构建测试环境
- en: Every chapter of this book includes Go code examples to illustrate some points
    we make in the text. You can find all these Go programs in this book’s GitHub
    repository (see the *Further reading* section of this chapter). While you don’t
    have to execute them all, we believe that manually running the code and observing
    the result may help reinforce the learned material and explain the finer details.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书每一章都包含Go代码示例，以说明我们在文本中提出的一些观点。您可以在本书的GitHub仓库中找到所有这些Go程序（见本章的*进一步阅读*部分）。虽然您不必执行所有这些程序，但我们相信手动运行代码并观察结果可能有助于巩固所学内容并解释更细微的细节。
- en: The first part of this book, *Chapters 1* to *5*, includes relatively short
    code examples you can run in the Go Playground (*Further reading*) or on any computer
    with Go installed. For instructions on how to install Go, you can refer to *Chapter
    1* or follow the official download and installation procedure (*Further reading*).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的前一部分，*第1章*到*第5章*，包括相对简短的代码示例，您可以在Go Playground（*进一步阅读*）或任何已安装Go的计算机上运行。有关安装Go的说明，您可以参考*第1章*或遵循官方的下载和安装程序（*进一步阅读*）。
- en: The rest of the book, starting from [*Chapter 6*](B16971_06.xhtml#_idTextAnchor144),
    assumes you can interact with a virtual topology, which we run in containers with
    the help of `containerlab` (*Further reading*). This *Appendix* documents the
    process of building a testing environment that includes the compatible version
    of `containerlab` and other related dependencies, to make sure you get a seamless
    experience running examples from any chapter of this book.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本书其余部分，从[*第6章*](B16971_06.xhtml#_idTextAnchor144)开始，假设您能够与虚拟拓扑交互，我们通过`containerlab`（*进一步阅读*）在容器中运行它。本*附录*记录了构建测试环境的过程，包括`containerlab`的兼容版本和其他相关依赖项，以确保您在本书的任何章节中运行示例时都能获得无缝体验。
- en: What is a testing environment?
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是测试环境？
- en: The primary goal is to build an environment with the right set of hardware and
    software that meets the minimum requirements to execute the code examples. We
    base the requirements on the assumption that you’re deploying a **virtual machine**
    (**VM**), as we realize you might not deploy this on a dedicated bare-metal server.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 主要目标是构建一个具有正确硬件和软件组合的环境，以满足执行代码示例的最小要求。我们基于您部署**虚拟机**（**VM**）的假设，因为我们意识到您可能不会在专用的裸机服务器上部署它。
- en: 'When it comes to deploying a VM for testing (testbed), you have two options,
    both of which we discuss later:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到部署虚拟机进行测试（测试平台）时，您有两个选择，我们将在后面讨论：
- en: You can deploy this VM in a self-hosted environment, such as VMware or **Kernel-based
    Virtual** **Machine** (**KVM**).
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在自托管环境中部署此虚拟机，例如VMware或**基于内核的虚拟机**（**KVM**）。
- en: You could use a cloud-hosted environment—for example, **Amazon Web** **Services**
    (**AWS**).
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用云托管环境——例如，**亚马逊网络服务**（**AWS**）。
- en: From the hardware perspective, we assume that the underlying CPU architecture
    is 64-bit x86, and our recommendation is to give the VM at least 2 vCPUs and 4
    GB of RAM and ideally double that to make things a bit faster.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 从硬件角度来看，我们假设底层CPU架构是64位x86，我们建议至少为虚拟机分配2个vCPU和4GB的RAM，理想情况下加倍以提高速度。
- en: We describe all software provisioning and configuration in an Ansible playbook
    included in this book’s GitHub repository (*Further reading*). We highly recommend
    you use the automated approach we have prepared for you to install all the dependencies
    to run the code examples in the book.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本书的GitHub仓库中描述了所有软件配置和配置（*进一步阅读*）。我们强烈建议您使用我们为您准备的自动化方法来安装所有依赖项，以便运行书中的代码示例。
- en: 'You can still install these packages on top of any Linux distribution—for example,
    **Windows Subsystem for Linux version 2** (**WSL 2**). In case you want to do
    the installation manually, we include a full list of dependencies here:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您仍然可以在任何Linux发行版上安装这些软件包——例如，**Windows Subsystem for Linux版本2**（**WSL 2**）。如果您想手动进行安装，我们在此处包含了一个完整的依赖项列表：
- en: '| **Package** | **Version** |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| **包** | **版本** |'
- en: '| Go | 1.18.1 |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| Go | 1.18.1 |'
- en: '| `containerlab` | 0.25.1 |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `containerlab` | 0.25.1 |'
- en: '| Docker | 20.10.14 |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| Docker | 20.10.14 |'
- en: '| `ansible-core` (only required for [*Chapter 7*](B16971_07.xhtml#_idTextAnchor161))
    | 2.12.5 |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `ansible-core`（仅适用于[*第7章*](B16971_07.xhtml#_idTextAnchor161)）| 2.12.5 |'
- en: '| Terraform (only required for [*Chapter 7*](B16971_07.xhtml#_idTextAnchor161))
    | 1.1.9 |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| Terraform（仅适用于[*第7章*](B16971_07.xhtml#_idTextAnchor161)）| 1.1.9 |'
- en: Table 12.1 – Software dependencies
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 表12.1 – 软件依赖
- en: Step 1 – building a testing environment
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 1 步 – 构建测试环境
- en: In the following section, we describe the two automated ways of building a testing
    environment. If you are unsure which option is right for you, we recommend you
    pick the first one, as it has minimal external dependencies and is completely
    managed by a cloud service provider. This is also the only option that we (the
    authors of this book) can test and verify, and hence it should give you the most
    consistent experience.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们描述了构建测试环境的两种自动化方法。如果您不确定哪个选项适合您，我们建议您选择第一个，因为它具有最少的依赖项，并且完全由云服务提供商管理。这也是我们（本书的作者）唯一可以测试和验证的选项，因此它应该为您提供最一致的经验。
- en: Option 1 – cloud-hosted
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 1 – 云托管
- en: We have picked AWS as the cloud service provider because of its popularity and
    general familiarity in our industry. Inside this book’s GitHub repository (*Further
    reading*), we have included an Ansible playbook that completely automates all
    tasks required to create a VM in AWS. You are free to use any other cloud provider
    but you will have to do the provisioning manually.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择 AWS 作为云服务提供商，因为它在我们的行业中非常受欢迎，并且普遍熟悉。在本书的 GitHub 仓库 (*进一步阅读*) 中，我们包含了一个
    Ansible 剧本，该剧本完全自动化了在 AWS 中创建虚拟机所需的所有任务。您可以使用任何其他云服务提供商，但您将不得不手动进行配置。
- en: 'The testing environment is a single Linux VM in AWS running `containerlab`
    to create container-based network topologies. The next diagram illustrates what
    the AWS environment looks like:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 测试环境是一个在 AWS 运行的单个 Linux 虚拟机，使用 `containerlab` 创建基于容器的网络拓扑。下一张图展示了 AWS 环境的样子：
- en: '![Figure 12.1 – Target environment](img/B16971_12_01.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.1 – 目标环境](img/B16971_12_01.jpg)'
- en: Figure 12.1 – Target environment
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.1 – 目标环境
- en: To conform with the hardware requirements stated earlier, we recommend you run
    at least a `t2.medium`-, ideally a `t2.large`-sized VM (**Elastic Compute Cloud**
    (**EC2**) instance). But the AWS Free Tier plan (*Further reading*) does not cover
    these instance types, so you should expect to incur some charges associated with
    the running of the VM. We assume you are familiar with the costs and billing structure
    of AWS and use financial common sense when working with a cloud-hosted environment.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了符合之前声明的硬件要求，我们建议您至少运行一个 `t2.medium`-大小的虚拟机，理想情况下运行一个 `t2.large`-大小的虚拟机（**弹性计算云**（**EC2**）实例）。但是，AWS
    免费层计划 (*进一步阅读*) 不包括这些实例类型，因此您应该预计会因虚拟机的运行而产生一些费用。我们假设您熟悉 AWS 的成本和计费结构，并在使用云托管环境时使用财务常识。
- en: 'Before you run the playbook, you need to make sure you meet the following requirements:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在您运行剧本之前，您需要确保您满足以下要求：
- en: Create an AWS account (AWS Free Tier (*Further reading*)).
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 AWS 账户（AWS 免费层 (*进一步阅读*)）。
- en: Create an AWS access key (AWS Programmatic access (*Further reading*)).
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 AWS 访问密钥（AWS 程序化访问 (*进一步阅读*)）。
- en: 'A Linux OS with the following packages:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个具有以下软件包的 Linux 操作系统：
- en: Git
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git
- en: Docker
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker
- en: GNU Make
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: GNU Make
- en: 'With all this in place, you can go ahead and clone the book’s GitHub repository
    (*Further reading*) with the `git` `clone` command:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些准备就绪后，您可以使用 `git clone` 命令继续克隆本书的 GitHub 仓库 (*进一步阅读*)：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After you clone the repository, change directory to it.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在您克隆了仓库之后，切换到该目录。
- en: Input variables
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 输入变量
- en: 'Before you can start the deployment, you need to supply your AWS account credentials
    (`AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`). You do this by exporting a
    pair of environment variables containing the key ID and secret values, as follows.
    Check out AWS Programmatic access (*Further reading*) for instructions on how
    to create an access key:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在您开始部署之前，您需要提供您的 AWS 账户凭证（`AWS_ACCESS_KEY_ID` 和 `AWS_SECRET_ACCESS_KEY`）。您可以通过导出一对包含密钥
    ID 和密钥值的环境变量来完成此操作，如下所示。有关如何创建访问密钥的说明，请参阅 AWS 程序化访问 (*进一步阅读*)：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Besides these required variables, there are other three optional input variables
    that you can adjust to fine-tune your deployment environment:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些必需的变量之外，还有其他三个可选输入变量，您可以调整这些变量以微调您的部署环境：
- en: '| **Name** | **Values** |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **值** |'
- en: '| `AWS_DISTRO` | `fedora` or `ubuntu` (default: `fedora`) |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `AWS_DISTRO` | `fedora` 或 `ubuntu`（默认：`fedora`）|'
- en: '| `AWS_REGION` | One of the AWS Regions (default: `us-east-1`) |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `AWS_REGION` | AWS 区域之一（默认：`us-east-1`）|'
- en: '| `VM_SIZE` | One of the AWS instance types (default: `t2.large`) |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `VM_SIZE` | AWS 实例类型之一（默认：`t2.large`）|'
- en: Table 12.2 – Testing VM options
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 表 12.2 – 测试虚拟机选项
- en: 'If you choose to change any of these default values, you can do this the same
    way as the AWS access key. Here’s an example:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择更改这些默认值，您可以像创建 AWS 访问密钥一样进行操作。以下是一个示例：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In that scenario, we selected Ubuntu as the Linux distribution of the VM and
    London (`eu-west-2`) as the AWS Region for deployment.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在那种情况下，我们选择了 Ubuntu 作为虚拟机的 Linux 发行版，并将伦敦（`eu-west-2`）作为部署的 AWS 区域。
- en: Deployment process
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 部署过程
- en: 'Once you have set all the required input variables, you can deploy the testing
    environment. From within the book repository directory, run the `make env-build`
    command, which deploys the VM and installs all the required software packages:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你设置了所有必需的输入变量，你可以部署测试环境。在书仓库目录内，运行 `make env-build` 命令，该命令将部署虚拟机并安装所有必需的软件包：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Assuming that the playbook has completed successfully, you can see the VM access
    details in the logs, as the preceding output shows. You can also view the connection
    details at any time after you’ve deployed the environment by running the `make`
    `env-show` command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 假设 Playbook 已成功完成，你可以在日志中看到虚拟机访问详情，如前面的输出所示。你还可以在部署环境后运行 `make env-show` 命令来查看连接详情：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, you can use this information to connect to the provisioned VM. The playbook
    generates an `lab-state/id_rsa`), so don’t forget to always use it for SSH authentication:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以使用这些信息来连接到已配置的虚拟机。Playbook 生成一个 `lab-state/id_rsa`），所以请务必始终使用它进行 SSH 认证：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can connect to the VM and check the Go version installed and take a look
    at the files of the book’s repository.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以连接到虚拟机并检查已安装的 Go 版本，并查看书仓库的文件。
- en: Option 2 – self-hosted
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 2 – 自托管
- en: Another option is to create a VM in a private environment. This environment
    could be your personal computer running a hypervisor such as VirtualBox, an ESXi
    server, an OpenStack cluster, or something else as long as it can allocate the
    CPU and memory the VM requires to run the lab topology. The OS on the VM has to
    be either Ubuntu 22.04 or Fedora 35.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选项是在私有环境中创建虚拟机。这个环境可以是运行虚拟机管理程序（如 VirtualBox、ESXi 服务器、OpenStack 集群或其他任何可以分配虚拟机运行实验室拓扑所需的
    CPU 和内存的设备）。虚拟机上的操作系统必须是 Ubuntu 22.04 或 Fedora 35。
- en: 'Once you have built the VM with SSH enabled, make sure you can SSH to the IP
    address of the VM and access it with its credentials. Then, change the Ansible
    inventory file (`inventory`) in the `ch12/testbed` folder (*Further reading*)
    of your personal computer’s copy of this book’s GitHub repository to point to
    your VM. It should look something like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你构建了带有 SSH 服务的虚拟机，确保你可以通过虚拟机的 IP 地址 SSH 连接到它，并使用其凭证访问。然后，将个人电脑上此书 GitHub 仓库的
    `ch12/testbed` 文件夹（*进一步阅读*）中的 Ansible inventory 文件（`inventory`）更改为指向你的虚拟机。它应该看起来像这样：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Include at least the IP address (`ansible_host`) to reach the VM, and the `ansible_user`,
    `ansible_password`, or `ansible_ssh_private_key_file` user credentials.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 至少包括到达虚拟机的 IP 地址（`ansible_host`），以及 `ansible_user`、`ansible_password` 或 `ansible_ssh_private_key_file`
    用户凭证。
- en: 'In the same `ch12/testbed` folder (*Further reading*), there is an Ansible
    playbook that calls the `configure_instance` role. Use this playbook to auto-configure
    your VM to run the book examples, like so:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在相同的 `ch12/testbed` 文件夹（*进一步阅读*）中，有一个 Ansible Playbook 调用 `configure_instance`
    角色。使用此 Playbook 自动配置你的虚拟机以运行书中的示例，如下所示：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The playbook filename is `configure-local-vm.yml` and the inventory filename
    is `inventory`, so from the `ch12/testbed` folder (*Further reading*), run `ansible-playbook
    configure-local-vm.yml -i inventory -v` to get the VM ready to go.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Playbook 文件名为 `configure-local-vm.yml`，inventory 文件名为 `inventory`，因此从 `ch12/testbed`
    文件夹（*进一步阅读*）中运行 `ansible-playbook configure-local-vm.yml -i inventory -v` 以准备虚拟机。
- en: Step 2 – uploading container images
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 2 步 – 上传容器镜像
- en: Not all networking vendors make it simple to access their container-based **network
    OSes** (**NOSes**). If you can’t pull the image directly from a container registry
    such as Docker Hub, you might need to download the image from their website and
    upload it to the test VM. The only container image in the book that we can’t pull
    from a public registry at the time of writing is Arista’s **cEOS** image. Here,
    we describe the process of uploading this image into the testing environment.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有网络供应商都使访问基于容器的 **网络操作系统（NOSes**）变得简单。如果你不能直接从容器注册库（如 Docker Hub）拉取镜像，你可能需要从他们的网站下载镜像并将其上传到测试虚拟机。在撰写本书时，书中唯一无法从公共注册库拉取的容器镜像是我们无法拉取的
    Arista 的 **cEOS** 镜像。在这里，我们描述了将此镜像上传到测试环境的过程。
- en: 'The first thing you need to do is download the image from [arista.com](http://arista.com)
    (*Further reading*). You should select the 64-bit cEOS image from the 4.28(F)
    train—for example, `cEOS64-lab-4.28.0F.tar`. You can copy the image to the test
    VM with the `scp` command using the generated SSH private key:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要做的第一件事是从[arista.com](http://arista.com)下载镜像（*进一步阅读*）。你应该从4.28(F)系列中选择64位cEOS镜像——例如，`cEOS64-lab-4.28.0F.tar`。你可以使用生成的SSH私钥通过`scp`命令将镜像复制到测试虚拟机：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, SSH to the instance and import the image with the `docker` command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过SSH连接到实例，并使用`docker`命令导入镜像：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can now use this image (`ceos:4.28`) in the `image` section of one or more
    routers in the topology file.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以在拓扑文件中一个或多个路由器的`image`部分使用这个镜像（`ceos:4.28`）。
- en: Step 3 – iInteracting with the testing environment
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3步 – 与测试环境交互
- en: We recommend you start with a fresh build of a virtual network topology at the
    beginning of *Chapters 6* through *8*. To orchestrate the topologies, we use `containerlab`,
    which is available in the testing VM. `containerlab` offers a quick way to run
    arbitrary network topologies based on their definition provided in a human-readable
    YAML file.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议你在*第6章*至*第8章*的开始处使用虚拟网络拓扑的新构建。为了编排拓扑，我们使用`containerlab`，它在测试虚拟机中可用。`containerlab`提供了一种快速运行基于它们在可读YAML文件中提供的定义的任意网络拓扑的方法。
- en: Important Note
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: '`containerlab` is written in Go and serves as a great example of an interactive
    CLI program that orchestrates local container resources.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`containerlab`是用Go语言编写的，是一个交互式CLI程序的优秀示例，它可以编排本地容器资源。'
- en: 'You can find the following `base` topology definition file in the `topo-base`
    directory of this book’s GitHub repository (*Further reading*):'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在本书GitHub仓库的`topo-base`目录中找到以下`base`拓扑定义文件（*进一步阅读*）：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This YAML file defines a three-node topology, as the next diagram shows. One
    node runs Nokia SR Linux, another NVIDIA Cumulus Linux, and the last one runs
    Arista cEOS. In this scenario, all network devices come up with their default
    startup configurations, and throughout each chapter, we describe how to establish
    full end-to-end reachability between all three of them:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此YAML文件定义了一个三节点拓扑，如下一个图表所示。一个节点运行诺基亚SR Linux，另一个运行NVIDIA Cumulus Linux，最后一个运行Arista
    cEOS。在这种情况下，所有网络设备都使用它们的默认启动配置，在每个章节中，我们都描述了如何在这三个设备之间建立完整的端到端可达性：
- en: '![Figure 12.2 – “Base” network topology](img/B16971_12_02.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图12.2 – “Base”网络拓扑](img/B16971_12_02.jpg)'
- en: Figure 12.2 – “Base” network topology
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2 – “Base”网络拓扑
- en: 'The next two chapters (*Chapters 9* and *10*) rely on a slightly different
    version of the preceding topology. Unlike the `base` topology, the `full` topology
    comes up fully configured and includes an extra set of nodes to emulate physical
    servers attached to the network devices:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两个章节（*第9章*和*第10章*）依赖于前面拓扑的略微不同版本。与`base`拓扑不同，`full`拓扑完全配置并包含一组额外的节点来模拟连接到网络设备的物理服务器：
- en: '![Figure 12.3 – “Full” network topology](img/B16971_12_03.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图12.3 – “Full”网络拓扑](img/B16971_12_03.jpg)'
- en: Figure 12.3 – “Full” network topology
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3 – “Full”网络拓扑
- en: These end hosts run different applications that interact with the existing network
    topology.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这些终端主机运行不同的应用程序，它们与现有的网络拓扑进行交互。
- en: Launching a virtual network topology
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动虚拟网络拓扑
- en: 'You can use a `containerlab` binary to deploy the test topology. For convenience,
    we included a couple of `make` targets that you can use:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`containerlab`二进制文件来部署测试拓扑。为了方便，我们包含了一些`make`目标，你可以使用：
- en: '`make lab-base` to create the `base` topology used in *Chapters 6* through
    *8*'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`make lab-base`来创建在*第6章*至*第8章*中使用的`base`拓扑。'
- en: '`make lab-full` to create the `full` topology used in *Chapters 9* and *10*'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`make lab-full`创建在*第9章*和*第10章*中使用的`full`拓扑。
- en: 'Here’s an example of how you can create the `base` topology from inside the
    test VM:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何在测试虚拟机内部创建`base`拓扑的示例：
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You now have `clab-netgo-ceos`, `clab-netgo-cvx` and `clab-netgo-srl` routers
    ready to go.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经准备好了`clab-netgo-ceos`、`clab-netgo-cvx`和`clab-netgo-srl`路由器。
- en: Connecting to the devices
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接到设备
- en: '`containerlab` uses Docker to run the containers. This means we can use standard
    Docker capabilities to connect to the devices—for example, you can use the `docker
    exec` command to start any process inside a container:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`containerlab`使用Docker运行容器。这意味着我们可以使用标准的Docker功能来连接到设备——例如，你可以使用`docker exec`命令在容器内启动任何进程：'
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`sr_cli` in the preceding example is the CLI process for an SR Linux device.
    The following table displays the “default shell” process for each virtual network
    device:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`sr_cli` 是 SR Linux 设备的 CLI 进程。下表显示了每个虚拟网络设备的“默认 shell”进程：
- en: '| **NOS** | **Command** |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| **NOS** | **命令** |'
- en: '| Cumulus Linux | `bash` or `vtysh` |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| Cumulus Linux | `bash` 或 `vtysh` |'
- en: '| SR Linux | `sr_cli` |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| SR Linux | `sr_cli` |'
- en: '| EOS | `Cli` |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| EOS | `Cli` |'
- en: Table 12.3 – Device default shells
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 表 12.3 – 设备默认 shell
- en: 'You can also use SSH to connect to the default shell. The next table provides
    the hostname and the corresponding credentials you can use to connect to each
    device:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用 SSH 连接到默认 shell。下表提供了连接到每个设备的主机名和相应的凭证：
- en: '| **Device** | **Username** | **Password** |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| **设备** | **用户名** | **密码** |'
- en: '| `clab-netgo-srl` | `admin` | `admin` |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `clab-netgo-srl` | `admin` | `admin` |'
- en: '| `clab-netgo-ceos` | `admin` | `admin` |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `clab-netgo-ceos` | `admin` | `admin` |'
- en: '| `clab-netgo-cvx` | `cumulus` | `cumulus` |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `clab-netgo-cvx` | `cumulus` | `cumulus` |'
- en: Table 12.4 – Device credentials
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 表 12.4 – 设备凭证
- en: 'Here’s how you can connect to Arista cEOS and Cumulus Linux, for example:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这是您连接到 Arista cEOS 和 Cumulus Linux 的方法：
- en: '[PRE13]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Once you finish the chapter, you can destroy the topology.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您完成本章，您可以销毁拓扑。
- en: Destroying the network topology
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 销毁网络拓扑
- en: 'You can clean up both virtual network topologies using the `make` `cleanup`
    command:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `make cleanup` 命令清理虚拟网络拓扑：
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `make cleanup` command only cleans up the virtual network topology while
    all the cloud resources are still running.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`make cleanup` 命令仅清理虚拟网络拓扑，而所有云资源仍在运行。'
- en: Step 4 – cleaning up of the cloud-hosted environment
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 4 步 – 清理云托管环境
- en: 'Once you’re done working with the cloud-hosted testing environment, you can
    clean it up so that you don’t pay for something you might no longer need. You
    can do this using another Ansible playbook that makes sure all the AWS resources
    you created before are now wiped out:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您完成与云托管测试环境的工作，您可以清理它，这样您就不会为可能不再需要的东西付费。您可以使用另一个 Ansible playbook 来确保您之前创建的所有
    AWS 资源现在都被清除：
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Further reading
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Book’s GitHub repository: [https://github.com/PacktPublishing/Network-Automation-with-Go](https://github.com/PacktPublishing/Network-Automation-with-Go)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书籍的 GitHub 仓库：[https://github.com/PacktPublishing/Network-Automation-with-Go](https://github.com/PacktPublishing/Network-Automation-with-Go)
- en: 'Go Playground: [https://play.golang.org/](https://play.golang.org/)'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go Playground：[https://play.golang.org/](https://play.golang.org/)
- en: 'Official download and install procedure: [https://golang.org/doc/install#install](https://golang.org/doc/install#install)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 官方下载和安装流程：[https://golang.org/doc/install#install](https://golang.org/doc/install#install)
- en: '`containerlab`: [https://containerlab.dev/](https://containerlab.dev/)'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`containerlab`：[https://containerlab.dev/](https://containerlab.dev/)'
- en: 'AWS Free Tier: [https://aws.amazon.com/free/](https://aws.amazon.com/free/)'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS 免费层：[https://aws.amazon.com/free/](https://aws.amazon.com/free/)
- en: 'AWS Programmatic access: [https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys](https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys)'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS 程序化访问：[https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys](https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys)
- en: '`ch12/testbed`: https://github.com/PacktPublishing/Network-Automation-with-Go/blob/main/ch12/testbed'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ch12/testbed`：[https://github.com/PacktPublishing/Network-Automation-with-Go/blob/main/ch12/testbed](https://github.com/PacktPublishing/Network-Automation-with-Go/blob/main/ch12/testbed)'
- en: '`ch12/testbed/inventory`: [https://github.com/PacktPublishing/Network-Automation-with-Go/blob/main/ch12/testbed/inventory](https://github.com/PacktPublishing/Network-Automation-with-Go/blob/main/ch12/testbed/inventory)'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ch12/testbed/inventory`：[https://github.com/PacktPublishing/Network-Automation-with-Go/blob/main/ch12/testbed/inventory](https://github.com/PacktPublishing/Network-Automation-with-Go/blob/main/ch12/testbed/inventory)'
- en: 'Arista: [https://www.arista.com/en/support/software-download](https://www.arista.com/en/support/software-download)'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arista：[https://www.arista.com/en/support/software-download](https://www.arista.com/en/support/software-download)
- en: 'Beginner’s Guide—Downloading Python: [https://wiki.python.org/moin/BeginnersGuide/Download](https://wiki.python.org/moin/BeginnersGuide/Download)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初学者指南—下载 Python：[https://wiki.python.org/moin/BeginnersGuide/Download](https://wiki.python.org/moin/BeginnersGuide/Download)
- en: 'Installing Ansible with `pip`: [https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#installing-ansible-with-pip](https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#installing-ansible-with-pip)'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `pip` 安装 Ansible：[https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#installing-ansible-with-pip](https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#installing-ansible-with-pip)
- en: '*Getting Started - Installing* *Git*: [https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*入门 - 安装* *Git*：[https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)'
- en: 'Installing `pip`—*Supported* *Methods*: [https://pip.pypa.io/en/stable/installation/#supported-methods](https://pip.pypa.io/en/stable/installation/#supported-methods)'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 `pip`—*支持* *方法*：[https://pip.pypa.io/en/stable/installation/#supported-methods](https://pip.pypa.io/en/stable/installation/#supported-methods)
- en: 'Get Arista cEOS: [https://github.com/PacktPublishing/Network-Automation-with-Go/blob/main/ch12/testbed/get_arista_ceos.md](https://github.com/PacktPublishing/Network-Automation-with-Go/blob/main/ch12/testbed/get_arista_ceos.md)'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取 Arista cEOS：[https://github.com/PacktPublishing/Network-Automation-with-Go/blob/main/ch12/testbed/get_arista_ceos.md](https://github.com/PacktPublishing/Network-Automation-with-Go/blob/main/ch12/testbed/get_arista_ceos.md)
- en: 'AWS access keys: [https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys](https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys)'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS 访问密钥：[https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys](https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys)
- en: 'AWS Regions: [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html)'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS 区域：[https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html)
- en: 'AWS instance types: [https://aws.amazon.com/ec2/instance-types/](https://aws.amazon.com/ec2/instance-types/)'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS 实例类型：[https://aws.amazon.com/ec2/instance-types/](https://aws.amazon.com/ec2/instance-types/)
