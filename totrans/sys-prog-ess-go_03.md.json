["```go\ngo get -u golang.org/x/sys\n```", "```go\nfmt.Println(\"Hello World!\")\n```", "```go\nunix.Syscall(unix.SYS_WRITE, 1,\n  uintptr(unsafe.Pointer(&[]byte(\"Hello, World!\")[0])),\n  uintptr(len(\"Hello, World!\")),\n )\n```", "```go\npackage main\nimport (\n     \"fmt\"\n     \"os\"\n     \"os/exec\"\n)\nfunc main() {\n     // Start a new process\n     cmd := exec.Command(\"ls\", \"-l\")\n     cmd.Stdout = os.Stdout\n     cmd.Stderr = os.Stderr\n     err := cmd.Run()\n     if err != nil {\n          fmt.Println(err)\n          return\n     }\n     // Get the current process ID\n     pid := os.Getpid()\n     fmt.Println(\"Current process ID:\", pid)\n}\n```", "```go\nSetEnvironmentVariable(name *uint16, value *uint16) (err error)\n```", "```go\nSetenv(key, value string) error\n```", "```go\nSetenv(key, value string) error\n```", "```go\napt-get install strace -y\n```", "```go\n    yum install strace\n    ```", "```go\n    dnf install strace\n    ```", "```go\npacman -S strace\n```", "```go\nstrace ls\n```", "```go\nexecve(\"/usr/bin/ls\", [\"ls\"], 0x7ffdee76b2a0 /* 71 vars */) = 0\n```", "```go\nstrace -e execve ls\n```", "```go\npackage main\nimport \"unix\"\nfunc main() {\n     unix.Write(1, []byte{\"Hello, World!\"})\n}\n```", "```go\ngo build -o app main.go\n```", "```go\nstrace -e write ./app 2>&1\n```", "```go\nwrite(1, \"Hello, World!\", 13Hello, World!)           = 13\n```", "```go\nwords := os.Args[1:]\nif len(words) == 0 {\n    fmt.Fprintln(os.Stderr, \"No words provided.\")\n    os.Exit(1)\n}\n```", "```go\nfor _, w := range words {\n    if len(w)%2 == 0 {\n        fmt.Fprintf(os.Stdout, \"word %s is even\\n\", w)\n    } else {\n        fmt.Fprintf(os.Stderr, \"word %s is odd\\n\", w)\n    }\n}\n```", "```go\npackage main\nimport (\n     \"fmt\"\n     \"os\"\n)\nfunc main() {\n     words := os.Args[1:]\n     if len(words) == 0 {\n          fmt.Fprintln(os.Stderr, \"No words provided.\")\n          os.Exit(1)\n     }\n     for _, w := range words {\n          if len(w)%2 == 0 {\n               fmt.Fprintf(os.Stdout, \"word %s is even\\n\", w)\n          } else {\n               fmt.Fprintf(os.Stderr, \"word %s is odd\\n\", w)\n          }\n     }\n}\n```", "```go\ngo run main.go alex golang error\n```", "```go\ngo run main.go word1 word2 word3 > stdout.txt 2> stderr.txt\n```", "```go\ncat stdout.txt\ncat stderr.txt\n```", "```go\nfunc app(words []string) {\n     for _, w := range words {\n          if len(w)%2 == 0 {\n               fmt.Fprintf(os.Stdout, \"word %s is even\\n\", w)\n          } else {\n               fmt.Fprintf(os.Stderr, \"word %s is odd\\n\", w)\n          }\n     }\n}\n```", "```go\ntype CliConfig struct {\n     ErrStream, OutStream io.Writer\n}\nfunc app(words []string, cfg CliConfig) {\n     for _, w := range words {\n          if len(w)%2 == 0 {\n               fmt.Fprintf(cfg.OutStream, \"word %s is even\\n\", w)\n          } else {\n               fmt.Fprintf(cfg.ErrStream, \"word %s is odd\\n\", w)\n          }\n     }\n}\n```", "```go\ntype Option func(*CliConfig) error\nfunc WithErrStream(errStream io.Writer) Option {\n     return func(c *CliConfig) error {\n          c.ErrStream = errStream\n          return nil\n     }\n}\nfunc WithOutStream(outStream io.Writer) Option {\n     return func(c *CliConfig) error {\n          c.OutStream = outStream\n          return nil\n     }\n}\n```", "```go\nfunc NewCliConfig(opts ...Option) (CliConfig, error) {\n     c := CliConfig{\n          ErrStream: os.Stderr,\n          OutStream: os.Stdout,\n     }\n     for _, opt := range opts {\n          if err := opt(&c); err != nil {\n               return CliConfig{}, err\n          }\n     }\n     return c, nil\n}\n```", "```go\nNewCliConfig(WithOutStream(&var1),WithErrStream(&var2))\nNewCliConfig(WithOutStream(&var1))\nNewCliConfig(WithErrStream(&var2))\n```", "```go\nfunc main() {\n     words := os.Args[1:]\n     if len(words) == 0 {\n          fmt.Fprintln(os.Stderr, \"No words provided.\")\n          os.Exit(1)\n     }\n     cfg, err := NewCliConfig()\n     if err != nil {\n          fmt.Fprintf(os.Stderr, \"Error creating config: %v\\n\", err)\n          os.Exit(1)\n     }\n     app(words, cfg)\n}\n```", "```go\npackage main\nimport (\n    \"bytes\"\n    \"strings\"\n    \"testing\"\n)\nfunc TestMainProgram(t *testing.T) {\n    var stdoutBuf, stderrBuf bytes.Buffer\n    config, err := NewCliConfig(WithOutStream(&stdoutBuf), WithErrStream(&stderrBuf))\n    if err != nil {\n        t.Fatal(\"Error creating config:\", err)\n    }\n    app([]string{\"main\", \"alex\", \"golang\", \"error\"}, config)\n    output := stdoutBuf.String()\n    if len(output) == 0 {\n        t.Fatal(\"Expected output, got nothing\")\n    }\n    if !strings.Contains(output, \"word alex is even\") {\n        t.Fatal(\"Expected output does not contain 'word alex is even'\")\n    }\n    if !strings.Contains(output, \"word golang is even\") {\n        t.Fatal(\"Expected output does not contain 'word golang is even'\")\n    }\n    errors := stderrBuf.String()\n    if len(errors) == 0 {\n        t.Fatal(\"Expected errors, got nothing\")\n    }\n    if !strings.Contains(errors, \"word error is odd\") {\n        t.Fatal(\"Expected errors does not contain 'word error is odd'\")\n    }\n}\n```", "```go\n=== RUN   TestMainProgram\n--- PASS: TestMainProgram (0.00s)\nPASS\n```", "```go\ngo build -o cli-app main.go\nls -l | xargs app | grep even\n```"]