["```go\npackage main\nimport (\n     \"os\"\n     \"log/slog\"\n)\nfunc main() {\n     handler := slog.NewJSONHandler(os.Stdout)\n     logger := slog.New(handler)\n     logger.Info(\"A group of walrus emerges from the ocean\", slog.Attr(\"animal\", \"walrus\"), slog.Attr(\"size\", 10))\n}\n```", "```go\npackage main\nimport (\n    \"os\"\n    \"go.uber.org/zap\"\n    \"go.uber.org/zap/zapcore\"\n)\nfunc main() {\n    encoderConfig := zapcore.EncoderConfig{\n        MessageKey: \"message\",\n        LevelKey:    \"level\",\n        EncodeLevel: zapcore.CapitalLevelEncoder,\n        TimeKey:    \"time\",\n        EncodeTime: zapcore.ISO8601TimeEncoder,\n        CallerKey:    \"caller\",\n        EncodeCaller: zapcore.ShortCallerEncoder,\n    }\n    consoleEncoder := zapcore.NewConsoleEncoder(encoderConfig)\n    consoleSink := zapcore.AddSync(os.Stdout)\n    core := zapcore.NewCore(consoleEncoder, consoleSink, zap.InfoLevel)\n    logger := zap.New(core)\n    sugar := logger.Sugar()\n    sugar.Infow(\"A group of walrus emerges from the ocean\",\n        \"animal\", \"walrus\",\n        \"size\", 10,\n    )\n}\n```", "```go\npackage main\nimport (\n     \"os\"\n     \"runtime/trace\"\n)\nfunc main() {\n     trace.Start(os.Stderr)\n     defer trace.Stop()\n     // Your code here. Let's pretend it's something impressive.\n}\n```", "```go\nimport (\n    \"os\"\n    \"runtime/trace\"\n)\n```", "```go\nfunc main() {\n    f, err := os.Create(\"trace.out\")\n    if err != nil {\n        panic(err)\n    }\n    defer f.Close()\n    err = trace.Start(f)\n    if err != nil {\n        panic(err)\n    }\n    defer trace.Stop()\n    // Your program logic here\n}\n```", "```go\ngo run your_program.go\n```", "```go\ngo tool trace trace.out\n```", "```go\npackage main\nimport (\n    \"fmt\"\n    \"net/http\"\n)\nfunc main() {\n    http.HandleFunc(\"/\", handler)\n    fmt.Println(\"Server is listening on :8080\")\n    http.ListenAndServe(\":8080\", nil)\n}\nfunc handler(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintf(w, \"Hello, Tracing!\")\n}\n```", "```go\nimport (\n    \"net/http\"\n    \"runtime/trace\"\n)\nfunc TraceHandler(inner http.HandlerFunc) http.HandlerFunc {\n    return func(w http.ResponseWriter, r *http.Request) {\n        ctx, task := trace.NewTask(r.Context(), r.URL.Path)\n        defer task.End()\n        trace.Log(ctx, \"HTTP Method\", r.Method)\n        trace.Log(ctx, \"URL\", r.URL.String())\n        inner(w, r.WithContext(ctx))\n    }\n}\n```", "```go\nfunc main() {\n    http.HandleFunc(\"/\", TraceHandler(handler))\n    fmt.Println(\"Server is listening on :8080\")\n    http.ListenAndServe(\":8080\", nil)\n}\n```", "```go\npackage main\nimport (\n     \"fmt\"\n     \"net/http\"\n     \"time\"\n     \"github.com/prometheus/client_golang/prometheus\"\n     \"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\nvar (\n     requestsProcessed = prometheus.NewCounterVec(\n          prometheus.CounterOpts{\n               Name: \"http_requests_processed\",\n               Help: \"Total number of processed HTTP requests.\",\n          },\n          []string{\"status_code\"},\n     )\n)\nfunc init() {\n     // Register metrics with Prometheus\n     prometheus.MustRegister(requestsProcessed)\n}\nfunc main() {\n     http.Handle(\"/metrics\", promhttp.Handler())\n     http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n          time.Sleep(50 * time.Millisecond)\n          code := http.StatusOK\n          if time.Now().Unix()%2 == 0 {\n               code = http.StatusInternalServerError\n          }          requestsProcessed.WithLabelValues(fmt.Sprintf(\"%d\", code)).Inc()\n          w.WriteHeader(code)\n          fmt.Fprintf(w, \"Request processed.\")\n     })\n     fmt.Println(\"Starting server on port 8080...\")\n     http.ListenAndServe(\":8080\", nil)\n}\n```", "```go\n        global:\n          scrape_interval: 15s\n        scrape_configs:\n          - job_name: 'prometheus'\n            static_configs:\n              - targets: ['localhost:9090']\n        ```", "```go\n        docker pull prom/prometheus\n        ```", "```go\n        docker run -p 9090:9090 -v <path_to_your_prometheus.yml>:/etc/prometheus/prometheus.yml prom/prometheus\n        ```", "```go\ngo build app.go && ./app\n```", "```go\n    mkdir telemetry-example\n    cd telemetry-example\n    go mod init telemetry-example\n    ```", "```go\n    go get go.uber.org/zap\n    go get go.opentelemetry.io/otel\n    go get go.opentelemetry.io/otel/exporters/otlp/otlptrace\n    go get go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp\n    go get go.opentelemetry.io/otel/sdk/resource\n    go get go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp\n    go get go.opentelemetry.io/otel/semconv/v1.7.0\n    ```", "```go\n    package main\n    import (\n        \"go.uber.org/zap\"\n    )\n    func main() {\n        logger, _ := zap.NewProduction()\n        defer logger.Sync() // Flushes buffer, if any\n        sugar := logger.Sugar()\n        sugar.Infow(\"This is an example log message\", \"location\", \"main\", \"type\", \"exampleLog\")\n    }\n    ```", "```go\n    import (\n        \"context\"\n        \"net/http\"\n        \"go.opentelemetry.io/otel\"\n        \"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n        \"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp\"\n        \"go.opentelemetry.io/otel/sdk/resource\"\n        sdktrace \"go.opentelemetry.io/otel/sdk/trace\"\n        semconv \"go.opentelemetry.io/otel/semconv/v1.7.0\"\n        \"go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp\"\n    )\n    func main() {\n        // Previous Zap logger setup...\n        ctx := context.Background()\n        traceExporter, err := otlptrace.New(ctx, otlptracehttp.NewClient())\n        if err != nil {\n            sugar.Fatal(\"failed to create trace exporter: \", err)\n        }\n        tp := sdktrace.NewTracerProvider(\n            sdktrace.WithBatcher(traceExporter),\n            sdktrace.WithResource(resource.NewWithAttributes(\n                semconv.SchemaURL,\n                semconv.ServiceNameKey.String(\"ExampleService\"),\n            )),\n        )\n        otel.SetTracerProvider(tp)\n    }\n    ```", "```go\n    func exampleHandler(w http.ResponseWriter, r *http.Request) {\n        _, span := otel.Tracer(\"example-tracer\").Start(r.Context(), \"handleRequest\")\n        defer span.End()\n        zap.L().Info(\"Handling request\")\n        w.Write([]byte(\"Hello, World!\"))\n    }\n    func main() {\n        // Previous setup...\n        http.Handle(\"/\", otelhttp.NewHandler(http.HandlerFunc(exampleHandler), \"Example\"))\n        sugar.Fatal(http.ListenAndServe(\":8080\", nil))\n    }\n    ```", "```go\n    docker-compose up\n    ```", "```go\n    go run main.go\n    ```", "```go\n    curl http://localhost:8080/\n    ```"]