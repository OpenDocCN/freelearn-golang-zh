["```go\ngo get foo@v1.2.3\n```", "```go\nmkdir mybestappever\ncd mybestappever\n```", "```go\ngo mod init github.com/yourusername/mybestappever.\n```", "```go\npackage main\nimport (\n    \"context\"\n    \"fmt\"\n    \"time\"\n    \"github.com/alexrios/timer/v2\"\n)\nfunc main() {\nsw := &timer.Stopwatch{}\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\nif err := sw.Start(ctx); err != nil {\n    fmt.Printf(\"Failed to start stopwatch: %v\\n\", err)\n    return\n}\ntime.Sleep(1 * time.Second)\nsw.Stop()\nelapsed, err := sw.Elapsed()\nif err != nil {\n    fmt.Printf(\"Failed to get elapsed time: %v\\n\", err)\n    return\n}\nfmt.Printf(\"Elapsed time: %v\\n\", elapsed)\n}\n```", "```go\npackage main\nimport (\n    \"context\"\n    \"testing\"\n    \"time\"\n    \"github.com/alexrios/timer/v2\"\n)\nfunc TestStopwatch(t *testing.T) {\n    sw := &timer.Stopwatch{}\n    ctx, cancel := context.WithCancel(context.Background())\n    defer cancel()\n    if err := sw.Start(ctx); err != nil {\n        t.Fatalf(\"Failed to start stopwatch: %v\", err)\n    }\n    time.Sleep(1 * time.Second)\n    sw.Stop()\n    elapsed, err := sw.Elapsed()\n    if err != nil {\n        t.Fatalf(\"Failed to get elapsed time: %v\", err)\n    }\n    if elapsed < 1*time.Second || elapsed > 2*time.Second {\n        t.Errorf(\"Expected elapsed time around 1 second, got %v\", elapsed)\n    }\n}\n```", "```go\nrequire github.com/alexrios/timer/v2 v2.0.0\n```", "```go\ngo list -m all\n```", "```go\ngithub.com/yourusername/mybestappever\ngithub.com/alexrios/timer/v2 v2.0.0\n```", "```go\ngithub.com/alexrios/timer/v2 v2.0.0 h1:...\ngithub.com/alexrios/timer/v2 v2.0.0/go.mod h1:...\n```", "```go\ngo get github.com/alexrios/timer@latest\n```", "```go\ngo get github.com/yourusername/timer@v1.1.0\n```", "```go\ngo mod tidy\n```", "```go\n[url \"ssh://git@github.com/\"]\n    insteadOf = https://github.com/\n```", "```go\ngo env -w GOPRIVATE=\"github.com/<org>/<project>\"\n```", "```go\ngo env -w GOPRIVATE=\"github.com/<org>/*\"\n```", "```go\ngo install\n```", "```go\nhello\n```", "```go\ngo install github.com/alexrios/endpoints@v0.5.0\n```", "```go\ngo install github.com/alexrios/endpoints@latest\n```", "```go\ngo work init ./myproject\ngo work use ./moduleA\ngo work use ./moduleB\n```", "```go\ngo 1.21\nuse (\n    ./path/to/module-a\n    ./path/to/module-b\n)\n```", "```go\ngo work sync\n```", "```go\nname: Go CI on Commit\non:\n  push:\njobs:\n  test-and-dependencies:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: '^1.21'\n      - name: Get dependencies\n        run: go mod download\n      - name: Run tests\n        run: go test -v ./...\n```", "```go\nname: Go CI on Commit\non:\n  push:\njobs:\n  test-and-dependencies:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: '^1.21'\n      - name: Cache Go modules\n        uses: actions/cache@v3\n        with:\n          path: ~/go/pkg/mod\n          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}\n          restore-keys: |\n            ${{ runner.os }}-go-\n      - name: Get dependencies\n        run: go mod download\n      - name: Run tests\n        run: go test -v ./...\n```", "```go\nname: Go CI\non: [push]\njobs:\n  build-test-staticcheck:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: dominikh/staticcheck-action@v1.2.0\n        with:\n          # Optionally specify Staticcheck version:\n          # version: latest\n```", "```go\nbuilds:\n-   ldflags:\n      - -s -w\n      - -extldflags \"-static\"\n    env:\n      - CGO_ENABLED=0\n    goos:\n      - linux\n      - windows\n      - darwin\n    goarch:\n      - amd64\n    mod_timestamp: '{{ .CommitTimestamp }}'\narchives:\n-   name_template: \"{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}\"\n    wrap_in_directory: true\n    format: binary\n    format_overrides:\n      - goos: windows\n        format: zip\ndockers:\n  - image_templates:\n      - \"ghcr.io/alexrios/endpoints:{{ .Tag }}\"\n      - \"ghcr.io/alexrios/endpoints:v{{ .Major }}\"\n      - \"ghcr.io/alexrios/endpoints:v{{ .Major }}.{{ .Minor }}\"\n      - \"ghcr.io/alexrios/endpoints:latest\"\n```", "```go\nname: GoReleaser\non:\n  push:\n    tags:\n      - '*'\njobs:\n  goreleaser:\n    runs-on: ubuntu-latest\n    permissions:\n      packages: write\n      contents: write\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n      -\n        name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: 1.21\n      -\n        name: Run GoReleaser\n        uses: goreleaser/goreleaser-action@v2\n        with:\n          version: latest\n          args: release --rm-dist --clean\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"]