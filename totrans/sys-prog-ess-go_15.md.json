["```go\n.\n├── music_2.wav\n├── picture_10.png\n├── Book_2009.pdf\n├── Manual_1.pdf\n└── Manual_2.pdf\n```", "```go\nfunc organizeFiles(paths []string) ([]string, error) {\n   var err error\n   events := make([]string, 0)\n   for _, path := range paths {\n      err := filepath.WalkDir(path, func(path string, dir os.DirEntry, err error) error {\n         if err != nil {\n            return err\n         }\n         if !dir.IsDir() {\n            ext := filepath.Ext(path)\n            destDir := filepath.Join(filepath.Dir(path), ext[1:]) // Remove the leading dot from the extension\n            destPath := filepath.Join(destDir, dir.Name())\n            // Create the destination directory if it doesn›t exist\n            if err := os.MkdirAll(destDir, os.ModePerm); err != nil {\n               return err\n            }\n            // Move the file to the destination\n            if err := os.Rename(path, destPath); err != nil {\n               return err\n            }\n            events = append(events, fmt.Sprintf(\"Moved %s to %s\\n\", path, destPath))\n         }\n         return nil\n      })\n      if err != nil {\n         fmt.Printf(\"Error walking the path %v: %v\\n\", path, err)\n      }\n   }\n   return events, err\n}\n```", "```go\nfunc createTempFileWithExt(dir, ext string) (string, error) {\n   file, err := os.CreateTemp(dir, \"*\"+ext)\n   if err != nil {\n      return \"\", err\n   }\n   file.Close()\n   return file.Name(), nil\n}\n```", "```go\nfilepath.WalkDir(\"/tmp\",...)\n```", "```go\n/dev/sdc1        15G   16M   15G   1% /media/alexrios/usbtest\n```", "```go\npath := os.Args[1]\nif !strings.HasPrefix(path, \"/dev/\") {\n    fmt.Println(\"Path must start with /dev/\")\n    return\n}\n```", "```go\nfile, err := os.Open(\"/proc/mounts\")\nif err != nil {\n    fmt.Printf(\"Error opening /proc/mounts: %v\\n\", err)\n    return\n}\ndefer file.Close()\n```", "```go\nscanner := bufio.NewScanner(file)\nfor scanner.Scan() {\n    line := scanner.Text()\n    fields := strings.Fields(line)\n    if len(fields) >= 2 {\n        device := fields[0]\n        mountPoint := fields[1]\n```", "```go\nif strings.HasPrefix(device, path) {\n    mountPoint = strings.ReplaceAll(mountPoint, \"\\\\040\", \" \")\n    fmt.Printf(\"Device: %s is mounted on: %s\\n\", device, mountPoint)\n    fmt.Println(\"Files:\")\n    err := filepath.Walk(mountPoint, func(path string, info os.FileInfo, err error) error {\n        if err != nil {\n            return filepath.SkipDir\n        }\n        fmt.Println(path)\n        return nil\n    })\n    if err != nil {\n        fmt.Printf(\"Error walking the path %v: %v\\n\", mountPoint, err)\n    }\n}\n}\n}\n```", "```go\nif err := scanner.Err(); err != nil {\n    fmt.Printf(\"Error reading /proc/mounts: %v\\n\", err)\n}\n```", "```go\nconn, err := dbus.ConnectSessionBus()\nif err != nil {\n   fmt.Errorf(\"failed to connect to session bus: %v\", err)\n}\ndefer conn.Close()\n```", "```go\ncall := obj.Call(\"org.freedesktop.Notifications.Notify\", 0, appName, replacesID, appIcon, summary, body, actions, hints, expireTimeout)\nif call.Err != nil {\n    fmt.Sprintf(\"Error: %v\", call.Err)\n    return\n}\n```", "```go\ncall := obj.Call(\"org.freedesktop.Notifications.Notify\", 0, appName, replacesID, appIcon, summary, body, actions, hints, expireTimeout)\nif call.Err != nil {\n    fmt.Sprintf(\"Error: %v\", call.Err)\n    return\n}\n```", "```go\ngo run main.go\n```", "```go\n\"github.com/godbus/dbus/v5\"\n```", "```go\nconn, err := dbus.SystemBus()\nif err != nil {\n   fmt.Sprintf(\"Failed to connect to system bus: %v\\n\", err)\n  return\n}\ndefer conn.Close()\n```", "```go\nch := make(chan *dbus.Signal)\nconn.Signal(ch)\n```", "```go\ncall := conn.BusObject().Call(\"org.freedesktop.DBus.AddMatch\", 0, matchStr)\n```", "```go\n   for signal := range ch {\n       ...\n   }\n```", "```go\n   if signal.Name == \"org.freedesktop.DBus.ObjectManager.InterfacesAdded\" {\n       ...\n   }\n```", "```go\npath := signal.Body[0].(dbus.ObjectPath)\n```", "```go\n   if strings.HasPrefix(string(path), \"/org/freedesktop/UDisks2/block_devices/\") {\n       ...\n   }\n```", "```go\n   deviceObj := conn.Object(\"org.freedesktop.UDisks2\", path)\n   deviceProps := deviceObj.Call(\"org.freedesktop.DBus.Properties.Get\", 0, \"org.freedesktop.UDisks2.Block\", \"Device\")\n```", "```go\n   if deviceProps.Err != nil {\n       ...\n   }\n```", "```go\n   mountPoints := deviceProps.Body[0].(dbus.Variant)\n   fmt.Println(fmt.Sprintf(\"%s\", mountPoints.Value()))\n```", "```go\ngo run main.go\n```", "```go\n/dev/sdc\n/dev/sdc1\n```", "```go\nfunc mountPoints(deviceNames []string) ([]string, error) {\n   conn, err := dbus.ConnectSystemBus()\n   if err != nil {\n      return nil, fmt.Errorf(\"failed to connect to system bus: %v\", err)\n   }\n   defer conn.Close()\n   var mountPoints []string\n   for _, deviceName := range deviceNames {\n      objPath := path.Join(\"/org/freedesktop/UDisks2/block_devices\", deviceName)\n      obj := conn.Object(\"org.freedesktop.UDisks2\", dbus.ObjectPath(objPath))\n      var result map[string]dbus.Variant\n      err = obj.Call(\"org.freedesktop.DBus.Properties.GetAll\", 0, \"org.freedesktop.UDisks2.Filesystem\").Store(&result)\n      if err != nil {\n         return nil, fmt.Errorf(\"failed to call method: %v\", err)\n      }\n      if mountPointsVariant, exists := result[\"MountPoints\"]; exists {\n         mountPointsValue := mountPointsVariant.Value().([][]byte)\n         for _, mp := range mountPointsValue {\n            mountPoints = append(mountPoints, string(mp))\n         }\n      }\n   }\n   if len(mountPoints) == 0 {\n      return nil, fmt.Errorf(\"no mount points found\")\n   }\n   return mountPoints, nil\n}\n```", "```go\npackage main\nimport (\n    \"fmt\"\n    \"github.com/muka/go-bluetooth/api\"\n)\nfunc main() {\n    adapter, err := api.GetDefaultAdapter()\n    if err != nil {\n        panic(err)\n    }\n    err = adapter.StartDiscovery()\n    if err != nil {\n        panic(err)\n    }\n    devices, err := adapter.GetDevices()\n    if err != nil {\n        panic(err)\n    }\n    for _, device := range devices {\n        info, err := device.GetProperties()\n        if err != nil {\n            continue\n        }\n        if info.Name == \"Galaxy Watch Active2(207D)\" {\n            fmt.Println(\"Found the watch:\", info.Name)\n        }\n    }\n}\n```", "```go\nadapter, err := api.GetDefaultAdapter()\nif err != nil {\n    fmt.Printf(\"Failed to find default adapter: %s\\n\", err)\n}\n```", "```go\nerr = adapter.StartDiscovery()\nif err != nil {\n    fmt.Printf(\"Failed to start discovery: %s\\n\", err)\n}\n```", "```go\ndevices, err := adapter.GetDevices()\nif err != nil {\n    fmt.Printf(\"Failed to get devices: %s\\n\", err)\n}\nfor _, device := range devices {\n    info, err := device.GetProperties()\n    if err != nil {\n        fmt.Printf(\"Failed to get properties: %s\\n\", err)\n        continue\n    }\n    fmt.Println(info.Name, info.Address, info.RSSI)\n}\n```", "```go\nticker := time.NewTicker(10 * time.Second)\ndefer ticker.Stop()\n```", "```go\nfor {\n    select {\n    case <-ticker.C:\n        devices, err := adapter.GetDevices()\n        if err != nil {\n            fmt.Printf(\"Failed to get devices: %s\\n\", err)\n            continue\n        }\n        for _, device := range devices {\n            info, err := device.GetProperties()\n            if err != nil {\n                fmt.Printf(\"Failed to get properties: %s\\n\", err)\n                continue\n            }\n            if info.RSSI < -70 && info.Name == \"Galaxy Watch Active2(207D) LE\" {\n                fmt.Println(info.Name, info.RSSI)\n            }\n        }\n    }\n}\n```", "```go\n   ticker := time.NewTicker(10 * time.Second)\n   defer ticker.Stop()\n```", "```go\n   select {\n   case <-ticker.C:\n       // Device scanning logic\n   }\n```", "```go\nfunc lockScreen() error {\n   _, err := exec.Command(\"xdg-screensaver\", \"lock\").Output()\n   if err != nil {\n      return err\n   }\n   return nil\n}\n```", "```go\nif info.RSSI < -70 && info.Name == \"Galaxy Watch Active2(207D) LE\" {\n   err := lockScreen()\n   if err != nil {\n      fmt.Printf(\"Failed to lock screen: %s\\n\", err)\n      continue\n   }\n}\n```"]