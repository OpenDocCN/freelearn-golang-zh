["```go\n$ go mod init \"github.com/PacktPublishing/Test-Driven-Development-in-Go\"\n```", "```go\nmodule github.com/PacktPublishing/Test-Driven-Development-in-Go\ngo 1.19\n```", "```go\npackage format\nfunc Result(expression string, result float64) string {\n  // implementation code\n  return \"\"\n}\n```", "```go\npackage calculator\ntype Engine struct {}\nfunc(e *Engine) Add(x, y float64) float64{\n  // implementation code\nreturn 0\n}\n// ... method declarations\n```", "```go\npackage input\nimport \"github.com/PacktPublishing/Test-Driven-Development-in-Go/chapter02/calculator\"\ntype Parser struct {\n  engine *calculator.Engine\n  validator *Validator\n}\nfunc (p *Parser) ProcessExpression(expr string) (*string, error) {\n  // implementation code\n}\n// ... method declarations\n```", "```go\nfunc TestName(t *testing.T) {\n  // implementation\n}\n```", "```go\n$ go test ./...\n=== RUN   TestAdd\n    engine_test.go:7: Add(2,3) incorrect, got: 2, want: 5.\n--- FAIL: TestAdd (0.00s)\nFAIL\nexit status 1\nFAIL    github.com/PacktPublishing/Test-Driven-Development-in-Go/chapter02/calculator   0.278s\n```", "```go\n$ go test -v ./... === RUN   TestAdd\n    engine_test.go:7: Add(2,3) incorrect, got: 2, want: 5.\n--- FAIL: TestAdd (0.00s)\nFAIL\nFAIL    github.com/PacktPublishing/Test-Driven-Development-in-Go/chapter02/calculator   0.112s\n=== RUN   TestParser\n--- PASS: TestParser (0.00s)\nPASS\nok      github.com/PacktPublishing/Test-Driven-Development-in-Go/chapter02/input        (cached)\nFAIL\n```", "```go\npackage calculator_test\n```", "```go\npackage calculator\n```", "```go\npackage calculator_test\nimport \"testing\"\nfunc TestAdd(t *testing.T) {\n}\n```", "```go\npackage calculator\ntype Engine struct {}\nfunc(e *Engine) Add(x, y float64) float64{\n  return 0\n}\n```", "```go\npackage calculator_test\nimport (\n  \"testing\"\n  \"github.com/PacktPublishing/Test-Driven-Development-in-Go/chapter02/calculator\"\n)\nfunc TestAdd(t *testing.T) {\n  // Arrange\n  e := calculator.Engine{}\n  // Act\n  got := e.Add(2.5,3.5)\n  //Assert\n  if got != 6.0 {\n    t.Errorf(\"Add(%.2f,%.2f) incorrect, got: %.2f, want:\n      %.2f\", 2.5, 3.5, got, 6.0)\n  }\n}\n```", "```go\n$ go test -run TestAdd ./chapter02/calculator -v\n--- FAIL: TestAdd (0.00s)\n    engine_test.go:20: Add(2.50,3.50) incorrect, got: 0.00, want: 6.00\nFAIL\nexit status 1\nFAIL    github.com/PacktPublishing/Test-Driven-Development-in-Go/chapter02/calculator   0.198s\n```", "```go\nfunc(e *Engine) Add(x, y float64) float64{\n  return x + y\n}\n```", "```go\n$ go test -run TestAdd ./chapter02/calculator -v \n=== RUN   TestAdd\n--- PASS: TestAdd (0.00s)\nok      github.com/PacktPublishing/Test-Driven-Development-in-Go/chapter02/calculator   0.109s\n```", "```go\nfunc TestAdd(t *testing.T) {\n  // Arrange\n  e := calculator.Engine{}\n  x, y := 2.5,3.5\n  want := 6.0\n  // Act\n  got := e.Add(x,y)\n  //Assert\n  if got != want {\n    t.Errorf(\"Add(%.2f,%.2f) incorrect, got: %.2f, want: %.2f\",             x, y, got, want)\n }\n}\n```", "```go\n$ go test -run TestAdd ./chapter02/calculator -v \n=== RUN   TestAdd\n--- PASS: TestAdd (0.00s)\nok      github.com/PacktPublishing/Test-Driven-Development-in-Go/chapter02/calculator   0.196s\n```", "```go\nfunc TestMain(m *testing.M) {\n  // implementation\n}\n```", "```go\nfunc TestMain(m *testing.M) {\n  // setup statements\n  setup()\n  // run the tests\n  e := m.Run()\n  // cleanup statements\n  teardown()\n  // report the exit code\n  os.Exit(e)\n}\n```", "```go\nfunc TestMain(m *testing.M) {\n  // setup statements\n  setup()\n  // run the tests\n  e := m.Run()\n  // cleanup statements\n  teardown()\n  // report the exit code\n  os.Exit(e)\n}\nfunc setup() {\n  log.Println(\"Setting up.\")\n}\nfunc teardown() {\n  log.Println(\"Tearing down.\")\n}\n```", "```go\n$ go test -run TestAdd ./chapter02/calculator -v \n2022/08/14 11:02:51 Setting up.\n=== RUN   TestAdd\n--- PASS: TestAdd (0.00s)\nPASS\n2022/08/14 11:02:51 Tearing down.\nok      github.com/PacktPublishing/Test-Driven-Development-in-Go/chapter02/calculator   0.345s\n```", "```go\nfunc init() {\n  // implementation\n}\n```", "```go\nfunc init() {\n  log.Println(\"Init setup.\")\n}\n```", "```go\n$ go test -run TestAdd ./chapter02/calculator -v \n2022/08/14 11:57:38 Init setup.\n2022/08/14 11:57:38 Setting up.\n=== RUN   TestAdd\n--- PASS: TestAdd (0.00s)\nPASS\n2022/08/14 11:57:38 Tearing down.\nok      github.com/PacktPublishing/Test-Driven-Development-in-Go/chapter02/calculator   0.252s\n```", "```go\ndefer teardown()\n```", "```go\nfunc TestAdd(t *testing.T) {\n  defer func ()  {\n  log.Println(\"Deferred tearing down.\")\n}()\n  // Arrange\n  e := calculator.Engine{}\n  x, y := 2.5, 3.5\n  want := 6.0\n  // Act\n  got := e.Add(x, y)\n  //Assert\n  if got != want {\n    t.Errorf(\"Add(%.2f,%.2f) incorrect, got: %.2f, want:\n      %.2f\", x, y, got, want)\n  }\n}\n```", "```go\n$ go test -run TestAdd ./chapter02/calculator -v \n2022/08/14 12:25:49 Init setup.\n2022/08/14 12:25:49 Setting up.\n=== RUN   TestAdd\n2022/08/14 12:25:49 Deferred tearing down.\n--- PASS: TestAdd (0.00s)\nPASS\n2022/08/14 12:25:49 Tearing down.\nok      github.com/PacktPublishing/Test-Driven-Development-in-Go/chapter02/calculator   0.215s\n```", "```go\n$ go test -run \"^TestAdd\" ./chapter02/calculator -v \n=== RUN   TestAdd_Positive\n--- PASS: TestAdd_Positive (0.00s)\n=== RUN   TestAdd_Negative\n--- PASS: TestAdd_Negative (0.00s)\nPASS\nok      github.com/PacktPublishing/Test-Driven-Development-in-Go/chapter02/calculator   0.266s\n```", "```go\nfunc TestAdd(t *testing.T) {\n  // Arrange\n  e := calculator.Engine{}\n  actAssert := func(x, y, want float64) {\n  // Act\n  got := e.Add(x, y)\n  //Assert\n  if got != want {\n    t.Errorf(\"Add(%.2f,%.2f) incorrect, got: %.2f, want:\n      %.2f\", x, y, got, want)\n  }\n}\n  t.Run(\"positive input\", func(t *testing.T) {\n    x, y := 2.5, 3.5\n    want := 6.0\n    actAssert(x, y, want)\n  })\n  t.Run(\"negative input\", func(t *testing.T) {\n    x, y := -2.5, -3.5\n    want := -6.0\n    actAssert(x, y, want)\n  })\n}\n```", "```go\n$ go test -run \"^TestAdd\" ./chapter02/calculator -v \n=== RUN   TestAdd\n=== RUN   TestAdd/positive_input\n=== RUN   TestAdd/negative_input\n--- PASS: TestAdd (0.00s)\n    --- PASS: TestAdd/positive_input (0.00s)\n    --- PASS: TestAdd/negative_input (0.00s)\nPASS\nok      github.com/PacktPublishing/Test-Driven-Development-in-Go/chapter02/calculator   0.195s\n```", "```go\n$ go test -run \"^TestAdd\" ./chapter02/calculator -cover -v \n=== RUN   TestAdd\n=== RUN   TestAdd/positive_input\n=== RUN   TestAdd/negative_input\n--- PASS: TestAdd (0.00s)\n    --- PASS: TestAdd/positive_input (0.00s)\n    --- PASS: TestAdd/negative_input (0.00s)\nPASS\ncoverage: 100.0% of statements\nok      github.com/PacktPublishing/Test-Driven-Development-in-Go/chapter02/calculator   0.113s\n```", "```go\nfunc BenchmarkName(b *testing.B) {\n  // implementation\n}\n```", "```go\ngo test -bench. .\n```", "```go\nfunc BenchmarkAdd(b *testing.B) {\n  e := calculator.Engine{}\n  // run the Add function b.N times\n  for i := 0; i < b.N; i++ {\n    e.Add(2, 3)\n  }\n}\n```", "```go\n$ go test -bench. ./ chapter02/calculator -v \npkg: github.com/PacktPublishing/Test-Driven-Development-in-Go/chapter02/calculator\ncpu: IntelI Core(TM) i5-8279U CPU @ 2.40GHz\nBenchmarkAdd-8          1000000000               0.2684 ns/op\nPASS\nok      github.com/PacktPublishing/Test-Driven-Development-in-Go/chapter02/calculator   0.408s\n```"]