["```go\ntype error interface {\n  Error() string\n}\n```", "```go\nfunc (p *Parser) ProcessExpression(expr string) error\n```", "```go\nif err := parser.ProcessExpression(*expr); err != nil {\n  log.Fatal(err)\n}\n```", "```go\nfunc Divide(x, y int8) (*string, error)\n```", "```go\nfunc TestDivide(t *testing.T) {\n  t.Run(\"positive x, positive y\", func(t *testing.T) {\n    x, y := int8(8), int8(4)\n    r, err := table.Divide(x, y)\n    assert.Nil(t, err)\n    assert.Equal(t, \"2.00\", *r)\n  })\n}\n```", "```go\npackage table\nfunc Divide (x, y int8) (*string, error) {\n     return nil, nil\n}\n```", "```go\nfunc TestDivide(t *testing.T) {\n  type testCase struct {\n    x, y    int8\n    wantErr error\n    want    *string\n  }\n}\n```", "```go\ntests := map[string]testCase{\n  \"pos x, pos y\":   {x: 8, y: 4, want: \"2.00\"},\n  \"neg x, neg y\":   {x: -4, y: -8, want: \"0.50\"},\n}\n```", "```go\ntests := map[string]struct {\n  x, y int\n  wantErr error\n  want string\n}{\n  \"pos x, pos y\": {x: 8, y: 4, want: \"2.00\"},\n  \"neg x, neg y\": {x: -4, y: -8, want: \"0.50\"},\n}\n```", "```go\nfor name, tc := range tests {\n   t.Run(name, func(t *testing.T) {\n         // Test execution\n   })\n}\n```", "```go\nfor name, tc := range tests {\n  t.Run(name, func(t *testing.T) {\n    x, y := int8(tc.x), int8(tc.y)\n    r, err := table.Divide(x, y)\n    if tc.wantErr != nil {\n      assert.Equal(t, tc.wantErr, err)\n      return\n    }\n    assert.Nil(t, err)\n    assert.Equal(t, tc.want, *r)\n  })\n}\n```", "```go\n$  go test -run TestDivide ./chapter04/table -v\n--- FAIL: TestDivide (0.00s)\n  --- FAIL: TestDivide/pos_x,_pos_y (0.00s)\n```", "```go\nfunc Divide(x, y int8) (*string, error) {\n  r := float64(x) / float64(y)\n  result := fmt.Sprintf(\"%.2f\", r)\n  return &result, nil\n}\n```", "```go\n$  go test -run TestDivide ./chapter04/table -v\n--- PASS: TestDivide (0.00s)\n  --- PASS: TestDivide/pos_x,_pos_y (0.00s)\n  --- PASS: TestDivide/neg_x,_neg_y (0.00s)\n```", "```go\ntests := map[string]struct {\n  x, y int\n  wantErr error\n  want string\n}{\n  \"pos x, pos y\":   {x: 8, y: 4, want: \"2.00\"},\n  \"neg x, neg y\":   {x: -4, y: -8, want: \"0.50\"},\n  \"equal x, y\":     {x: 4, y: 4, want: \"1.00\"},\n  \"max x, pos y\":   {x: 127, y: 2, want: \"63.50\"},\n  \"min x, pos y\":   {x: -128, y: 2, want: \"-64.00\"},\n  \"zero x, pos y\":  {x: 0, y: 2, want: \"0.00\"},\n  \"pos x, zero y\":  {x: 10, y: 0, wantErr:\n    errors.New(\"cannot divide by 0\")},\n  \"zero x, zero y\": {x: 0, y: 0, wantErr:\n    errors.New(\"cannot divide by 0\")},\n  \"max x, max y\":   {x: 127, y: 127, want: \"1.00\"},\n  \"min x, min y\":   {x: -128, y: -128, want: \"1.00\"},\n}\n```", "```go\nfunc Divide(x, y int8) (*string, error) {\n  if y == 0 {\n    return nil, errors.New(\"cannot divide by 0\")\n  }\n  r := float64(x) / float64(y)\n  result := fmt.Sprintf(\"%.2f\", r)\n  return &result, nil\n}\n```", "```go\n$ go test -run TestDivide ./chapter04/table -v\n--- PASS: TestDivide (0.00s)\n  --- PASS: TestDivide/zero_x,_pos_y (0.00s)\n  --- PASS: TestDivide/max_x,_max_y (0.00s)\n  --- PASS: TestDivide/max_x,_pos_y (0.00s)\n  --- PASS: TestDivide/min_x,_pos_y (0.00s)\n  --- PASS: TestDivide/equal_x,_y (0.00s)\n  --- PASS: TestDivide/min_x,_min_y (0.00s)\n  --- PASS: TestDivide/pos_x,_zero_y (0.00s)\n  --- PASS: TestDivide/zero_x,_zero_y (0.00s)\n  --- PASS: TestDivide/pos_x,_pos_y (0.00s)\n  --- PASS: TestDivide/neg_x,_neg_y (0.00s)\nPASS ok      github.com/PacktPublishing/Test-Driven-Development-in-Go/chapter04/table        0.298s\n```", "```go\nfor name, rtc := range tests {\n  tc := rtc\n  t.Run(name, func(t *testing.T) {\n    t.Parallel()\n    x, y := int8(tc.x), int8(tc.y)\n    r, err := table.Divide(x, y)\n    if tc.wantErr != nil {\n      assert.Equal(t, tc.wantErr, err)\n      return\n    }\n    assert.Nil(t, err)\n    assert.Equal(t, tc.want, *r)\n     })\n}\n```", "```go\n$  go test -run TestDivide ./chapter04/table -v\n=== RUN   TestDivide\n=== RUN   TestDivide/pos_x,_pos_y\n=== PAUSE TestDivide/pos_x,_pos_y\n=== RUN   TestDivide/neg_x,_neg_y\n=== PAUSE TestDivide/neg_x,_neg_y\n=== CONT  TestDivide/pos_x,_pos_y\n=== CONT  TestDivide/neg_x,_neg_y\n--- PASS: TestDivide (0.00s)\n  --- PASS: TestDivide/pos_x,_pos_y (0.00s)\n  --- PASS: TestDivide/neg_x,_neg_y (0.00s) \nok      github.com/PacktPublishing/Test-Driven-Development-in-Go/chapter04/table        0.223s\n```", "```go\ntype Book struct {\n  ID         string `json:\"id\"`\n  Name       string `json:\"name\"`\n  Author     string `json:\"author\"`\n  OwnerID    string `json:\"owner_id\"`\n  Status     string `json:\"status\"`\n}\n```", "```go\n// NewBookService initializes a BookService given its\n// dependencies.\nfunc NewBookService(initial []Book, ps PostingService) *BookService\n// Get returns a given book or error if none exists.\nfunc (bs *BookService) Get(id string) (*Book, error)\n// Upsert creates or updates a book.\nfunc (bs *BookService) Upsert(b Book) Book\n// List returns the list of available books.\nfunc (bs *BookService) List() []Book\n// ListByUser returns the list of books for a given user.\nfunc (bs *BookService) ListByUser(userID string) []Book\n// SwapBook checks whether a book is available and, if\n// possible, marks it as swapped.\nfunc (bs *BookService) SwapBook(bookID, userID string)(*Book, error)\n```", "```go\ntype BookService struct {\n     books map[string]Book\n     ps    PostingService\n}\n```", "```go\nfunc TestGetBook(t *testing.T) {\n  t.Run(\"initial books\", func(t *testing.T) {\n   // Books are available in the BookService\n  })\n  t.Run(\"empty books\", func(t *testing.T) {\n    // No books in the BookService\n  })\n}\n```", "```go\neb := db.Book{\n  ID: uuid.New().String(),\n  Name: \"Existing book\",\n  Status: db.Available.String(),\n}\nbs := db.NewBookService([]db.Book{eb}, nil)\n```", "```go\ntests := map[string]struct {\n  id string\n  want db.Book\n  wantErr error\n}{\n  \"existing book\": {id: eb.ID, want: eb},\n  \"no book found\": {id: \"not-found\", wantErr:\n    errors.New(\"no book found\")},\n  \"empty id\": {id: \"\", wantErr: errors.New(\"no book\n    found\")},\n}\n```", "```go\nfor name, tc := range tests {\n  t.Run(name, func(t *testing.T) {\n    b, err := bs.Get(tc.id)\n    if tc.wantErr != nil {\n     assert.Equal(t, tc.wantErr, err)\n     assert.Nil(t, b)\n     return\n    }\n    assert.Nil(t, err)\n    assert.Equal(t, tc.want, *b)\n  })\n}\n```", "```go\nt.Run(\"empty books\", func(t *testing.T) {\n     bs := db.NewBookService([]db.Book{})\n     b, err := bs.Get(\"id\")\n     assert.Equal(t, errors.New(\"no book found\"), err)\n     assert.Nil(t, b)\n})\n```", "```go\n$ go test -run TestGetBook ./chapter04/db -v\n=== RUN   TestGetBook\n--- PASS: TestGetBook (0.00s)\n  --- PASS: TestGetBook/initial_books (0.00s)\n  --- PASS: TestGetBook/initial_books/existing_book (0.00s)\n  --- PASS: TestGetBook/initial_books/no_book_found (0.00s)\n  --- PASS: TestGetBook/initial_books/empty_id (0.00s)\n  --- PASS: TestGetBook/empty_books (0.00s)\nPASS \nok      github.com/PacktPublishing/Test-Driven-Development-in-Go/chapter04/db   0.217s\n```"]