["```go\n// PostingService interface wraps around external posting\n// functionality.\ntype PostingService interface {\n  NewOrder(b Book) error\n}\n```", "```go\n// NewBookService initialises a BookService given its\n// dependencies.\nfunc NewBookService(db *gorm.DB, ps PostingService) *BookService {\n  return &BookService{\n    DB: db,\n    ps: ps,\n  }\n}\n```", "```go\n// BookRepository contains all the functionality and\n// dependencies for managing books.\ntype BookRepository struct {\n  DB *gorm.DB\n  ps PostingService\n}\n```", "```go\n// NewBookRepository initialises a BookService given its\n// dependencies.\nfunc NewBookRepository(db *gorm.DB, ps PostingService) *BookRepository {\n  return &BookRepository{\n    DB: db,\n    ps: ps,\n  }\n}\n```", "```go\n// Get returns a given book or error if none exists.\nfunc (bs *BookRepository) Get(id string) (*Book, error)\n```", "```go\n// Get populates a given book or returns error if none\n// exists.\nfunc (bs *BookRepository) Get(b *Book) error\n```", "```go\nfor name, tc := range tests {\n  t.Run(name, func(t *testing.T) {\n    var b db.Book\n    b.ID = tc.id\nerr := bs.Get(&b)\n    if tc.wantErr != nil {\n      assert.Equal(t, tc.wantErr, err)\n      assert.Nil(t, b)\n      return\n    }\n    assert.Nil(t, err)\n    assert.Equal(t, tc.want, b)\n  })\n}\n```", "```go\nfunc (bs *BookRepository) Get(b *Book) error {\n  if r := bs.DB.Where(\"id = ?\",\n    b.ID).First(&b); r.Error != nil {\n      return r.Error\n  }\n  return nil\n}\n```", "```go\n$ go test -run TestGetBook ./chapter07/db\n./book_repository_test.go:34:19: not enough arguments in call to bs.Get\n  have (*db.Book)\n  want (*db.Book, string)\nFAIL    github.com/PacktPublishing/Test-Driven-Development-in-Go/chapter07/db [build failed]\n```", "```go\nerr := errors.New(\"Something is wrong!\")\n```", "```go\nmsg := err.Error()\n```", "```go\nfunc TestErrorsVerification(t *testing.T){\n  t.Run(\"simple custom error\", func(t *testing.T) {\n    wantMsg := \"Something went wrong!\"\n    err := errors.New(wantMsg)\n    gotMsg := err.Error()\n    assert.Equal(t, wantMsg, gotMsg)\n  })\n}\n```", "```go\nfunc checkOdd(input int) error {\n  if input%2 == 0 {\n    return fmt.Errorf(\"Input %d cannot be even.\", input)\n  }\n  return nil\n}\n```", "```go\nfunc TestErrorsVerification(t *testing.T) {\n  t.Run(\"formatted custom error\", func(t *testing.T) {\n   input := 4\n   wantMsg := fmt.Sprintf(\"Input %d cannot be even.\",\n      input)\n   err := checkOdd(input)\n   gotMsg := err.Error()\n   assert.Equal(t, wantMsg, gotMsg)\n  })\n}\n```", "```go\nfunc TestErrorsVerification(t *testing.T) {\n  t.Run(\"formatted custom error\", func(t *testing.T) {\n    input := 4\n    err := checkOdd(input)\n    gotMsg := err.Error()\n    assert.Contains(t, gotMsg, fmt.Sprint(input))\n    assert.Contains(t, gotMsg, \"even\")\n  })\n}\n```", "```go\ntype error interface {\nError() string\n}\n```", "```go\ntype evenNumberError struct {\n  input int\n}\n```", "```go\nfunc (e *evenNumberError) Error() string {\n    return fmt.Sprintf(\"Input %d cannot be even.\", e.input)\n}\n```", "```go\nfunc checkOdd(input int) error {\n  if input%2 == 0 {\n   return &evenNumberError{\n     input: input,\n}\n  }\n  return nil\n}\n```", "```go\nfunc TestErrorsVerification(t *testing.T) {\n  t.Run(\"custom error type\", func(t *testing.T) {\n    input := 4\nwantErr := &evenNumberError{\n      input: input,\n    }\n    err := checkOdd(input)\n    var gotErr *evenNumberError\n    require.True(t, errors.As(err, &gotErr))\n    assert.Equal(t, wantErr, gotErr)\n  })\n}\n```", "```go\n$ go test -run TestErrorsVerification ./chapter07/errors -v\n=== RUN   TestErrorsVerification\n=== RUN   TestErrorsVerification/simple_custom_error\n=== RUN   TestErrorsVerification/formatted_custom_error\n=== RUN   TestErrorsVerification/contains_custom_error\n=== RUN   TestErrorsVerification/custom_error_type\n--- PASS: TestErrorsVerification (0.00s)\n  --- PASS: TestErrorsVerification/simple_custom_error (0.00s)\n  --- PASS: TestErrorsVerification/formatted_custom_error (0.00s)\n  --- PASS: TestErrorsVerification/contains_custom_error (0.00s)\n  --- PASS: TestErrorsVerification/custom_error_type (0.00s)\nPASS\nok      github.com/PacktPublishing/Test-Driven-Development-in-Go/chapter07/errors       0.122s\n```"]